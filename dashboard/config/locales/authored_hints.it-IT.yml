---
it-IT:
  data:
    authored_hints:
      2-3 Artist 1 new:
        2-3_Artist_1_new_a: Se usi il blocco `vai avanti di 100 pixel`, disegnerò
          automaticamente una linea.
        2-3_Artist_1_new_b: Problemi a girare? Utilizza il blocco `gira a destra di
          90 gradi`.
      2-3 Artist 11:
        2-3_Artist_11_a: 'Problemi con gli angoli? Devi suddividere i 360 gradi del
          giro completo in 8 parti uguali. Quanto fa 360/8? '
      2-3 Artist 12:
        2-3_Artist_12_a: Ci sono 360 gradi in un cerchio, quindi se giri di 1 grado
          ogni volta devi eseguire il ciclo 360 volte.
      2-3 Artist 2 new:
        2-3_Artist_2_new_a: Sembra che l'artista non sia rivolto verso la direzione
          corretta. Puoi farlo girare, prima di disegnare la linea?
      2-3 Artist 3new:
        2-3_Artist_3new_a: Quanto fa 100-70? Il risultato è quanto dovrebbe essere
          alto il cappello!
        2-3_Artist_3new_b: Sembra che l'artista non sia rivolto verso la direzione
          corretta. Puoi farlo girare, prima di disegnare la linea?
      2-3 Artist 4:
        2-3_Artist_4_a: Per completare la casa, tutto quello che devi fare è disegnare
          un quadrato!
      2-3 Artist 6:
        2-3_Artist_6_a: 'Per gli angoli piccoli, dovete girare intorno \* più \* volte.   '
        2-3_Artist_6_b: Visto che sono già rivolto verso destra, disegnare il triangolo
          è più facile se inizi andando avanti e poi giri a sinistra.
        2-3_Artist_6_c: Ogni lato del triangolo è la stessa lunghezza di ciascun lato
          del quadrato... 100 pixel!
      2-3 Artist 7:
        2-3_Artist_7_a: Il modo più facile per risolvere questo esercizio è di disegnare
          i primi tre lati del quadratino superiore, poi in un tratto solo l'ultimo
          lato più il primo lato del quadratino inferiore, per poi finire con i due
          lati restanti.
      2-3 Artist 8:
        2-3_Artist_8_a: Se dividi 200 a metà ottieni il lato dei quadrati.
      2-3 Artist 9 NEW:
        2-3_Artist_9_a: Questo rombo è semplicemente un quadrato ruotato.
      2-3 Artist Debugging 10:
        2-3_Artist_Debugging_10_a: Prova ad eseguire il codice così com'è per capire
          dov'è l'errore.
        2-3_Artist_Debugging_10_b: |-
          Ricorda che devi allargare il controller di 10 pixel: quindi devi <b>aggiungere</b> 10 a qualche valore.<br>
          Questo è un caso in cui è ragionevole fare esperimenti.<br>
          Cambia un numero alla volta e osserva cosa succede.<br>
          Se temi di esserti perso, premi il bottone "Ripristina" per tornare al codice iniziale.
      2-3 Artist Debugging 2:
        2-3_Artist_Debugging_2_a: Ogni baffo è lungo 75 pixel.
      2-3 Artist Debugging 3:
        2-3_Artist_Debugging_3_a: Nell'ultimo angolo c'è un errore di 15 gradi.
        2-3_Artist_Debugging_3_b: Se il programma viene eseguito troppo velocemente
          per capire cosa sta succedendo, rallentalo spostando il cursore verso la
          tartaruga.
      2-3 Artist Debugging 7:
        2-3_Artist_Debugging_7_a: Prova a far tornare indietro l'artista dopo aver
          disegnato la prima linea.
      2-3 Artist Debugging 8:
        2-3_Artist_Debugging_8_a: |-
          Quante volte viene ripetuta la figura?<br>
          Invece, quante volte <i>dovrebbe</i> essere ripetuta?<br>
          Quindi, come devi correggere il blocco `ripeti ... volte`?
      2-3 Artist Debugging 9:
        2-3_Artist_Debugging_9_a: Prima di iniziare a disegnare, l'artista deve girare
          a sinistra di 60 gradi in più.
        2-3_Artist_Debugging_9_b: 'Non c''è bisogno di aggiungere un altro blocco:
          basta aggiungere 60 gradi al blocco `gira a sinistra` che già c''è.'
      2-3 Artist Functions 1:
        2-3_Artist_Functions_1_a: Le lenti quadrate hanno i lati da 100 pixel, questo
          significa che dovrai muoverti in avanti di 175 pixel prima di disegnare
          la seconda lente.
        2-3_Artist_Functions_1_b: Tieni conto che puoi sempre riscrivere su delle
          linee già tracciate.
      2-3 Artist Functions 11:
        2-3_Artist_Functions_11_a: Non basta cambiare il numero e la lunghezza dei
          lati nella funzione, ma occorre modificare anche l'angolo tra un lato e
          l'altro.
      2-3 Artist Functions 12:
        2-3_Artist_Functions_12_a: Prova ad eseguire il programma per capire che blocchi
          devi aggiungere.
      2-3 Artist Functions 2:
        2-3_Artist_Functions_2_a: |-
          Il programma deve:

          -   usare la funzione
          -   andare avanti di 100 + 75 pixel
          -   usare la funzione
      2-3 Artist Functions 3:
        2-3_Artist_Functions_3_a: Adesso di quanto bisogna andare avanti prima di
          usare la funzione per la seconda volta?
      2-3 Artist Functions 4:
        2-3_Artist_Functions_4_a: L'artista deve girare di 120 gradi prima di disegnare
          il successivo quadrato.
      2-3 Artist Loops New 11:
        2-3_Artist_Loops_New_11_b: Devi aggiungere Il blocco `gira a sinistra di 30
          gradi` <b>dopo</b> le altre istruzioni all'interno del ciclo.
      2-3 Artist Loops New 12:
        2-3_Artist Loops_New_12_a: Prima di iniziare il disegno, devi girare a sinistra
          di 60 gradi per avviarti nella direzione corretta.
        2-3_Artist Loops_New_12_b: Dopo essere andato avanti di 100 pixel, devi girare
          a destra di 120 gradi per disegnare l'angolo acuto.
        2-3_Artist Loops_New_12_c: Devi girare a destra solo di 60 gradi per disegnare
          l'angolo ottuso.
      2-3 Artist Loops New 13:
        2-3_Artist_Loops_New_13_a: |-
          Al termine di ogni rombo, sei già rivolto nella direzione giusta per iniziare il successivo.<br>
          Per questo non è necessario aggiungere un altro blocco `gira a sinistra` prima di disegnare il nuovo rombo.
      2-3 Artist Loops New 9:
        2-3_Artist_Loops_New_9_a: Devi girare a destra di 45 gradi prima di iniziare
          a disegnare.
        2-3_Artist_Loops_New_9_b: In pratica la V è esattamente metà di un quadrato.
          Qual è il codice per disegnare mezzo quadrato?
      2-3 Artist Nested Loops 1:
        2-3_Artist_Nested_Loops_1_a: Ricorda di inserire tutti i blocchi grigi all'interno
          del <i>ciclo</i> `ripeti ... volte`.
      2-3 Artist Nested Loops 3:
        2-3_Artist_Nested_Loops_3_a: |-
          Serve aiuto con gli angoli?<br>
          <b>360/12=30</b>
        2-3_Artist_Nested_Loops_3_b: Ricorda di inserire tutti i blocchi grigi e il
          blocco `gira a` all'interno del <i>ciclo</i> `ripeti ... volte`.
      2-3 Artist Nested Loops 4:
        2-3_Artist_Nested_Loops_3_a: |-
          Serve aiuto con gli angoli?<br>
          <b>360/12=30</b>
      2-3 Artist Nested Loops 5:
        2-3_Artist_Nested_Loops_5_a: Prova ad usare il blocco `salta in avanti` per
          passare dalla cima di un quadrato alla posizione in cui devi iniziare il
          successivo.
      2-3 Artist Nested Loops 7:
        2-3_Artist_Nested_Loops_7_a: |-
          Di quanto bisogna girare ad ogni <i>ciclo</i>?<br>
          Quanto fa 360/10?
      2-3 Artist Nested Loops 9:
        2-3_Artist_Nested_Loops_9_a: |-
          Hai bisogno di aiuto per trovare l'angolo corretto?<br>
          <b>360/12=30</b>
      2-3 Bee Conditionals 14:
        2-3_Bee_Conditionals_14_a: Fai fatica a trovare la soluzione? Prova a trattare
          il fiore rosso come se fosse viola!
        2-3_Bee_Conditionals_14_b: Se consideri il fiore rosso come se fosse viola,
          allora puoi usare un ulteriore <i>ciclo</i> `ripeti ... volte`.
      2-3 Bee Conditionals 15:
        2-3_Bee_Conditionals_15_a: 'Ricorda: i fiori viola possono avere una quantità
          di nettare pari a 0 oppure 1 e questa quantità può cambiare ogni volta che
          esegui il programma.'
      2-3 Bee Conditionals 3:
        2-3_Bee_Conditionals_3_a: Ottieni un programma più corto se usi un <i>ciclo</i>
          per ogni tratto in cui vai avanti, un altro <i>ciclo</i> per raccogliere
          il nettare ed ancora un altro <i>ciclo</i> per produrre il miele.
      2-3 Bee Conditionals 6:
        2-3_Bee_Conditionals_6_a: 'Fai attenzione: il nettare dei fiori viola (0 oppure
          1) può cambiare ogni volta che esegui il programma!'
      2-3 Bee Debugging 1:
        2-3_Bee_Debugging_1_a: Dopo aver trovato e risolto l'errore, riesci a semplificare
          il codice usando un <i>ciclo</i> `ripeti ... volte`?
      2-3 Bee Debugging 2:
        2-3_Bee_Debugging_2_a: Dopo aver trovato e risolto l'errore, riesci a semplificare
          il codice usando un <i>ciclo</i> `ripeti ... volte`?
      2-3 Bee Debugging 4:
        2-3_Bee_Debugging_4_a: In quale punto del programma l'ape fa qualcosa di sbagliato?
          Correggi quel blocco.
      2-3 Bee Functions 4:
        2-3_Bee_Functions_4_a: Usa un ciclo per i primi due fiori, poi gestisci a
          parte il terzo fiore.
      2-3 Bee Functions 6:
        2-3_Bee_Functions_6_a: Usa un ciclo per i primi due fiori, poi gestisci a
          parte il terzo fiore.
      2-3 Bee Functions 8:
        2-3_Bee_Functions_8_a: "Se ti sembra troppo difficile, prova a creare la funzione
          poco per volta.  \n\nAggiungi qualche blocco e prova a vedere cosa fa. Poi
          aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      2-3 Bee Functions 9:
        2-3_Bee_Functions_8_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        2-3_Bee_Functions_8_b: |-
          Ricordati di inserire il codice all'interno del blocco verde aperto che definisce cosa deve fare la funzione.

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      2-3 Bee Loops 2:
        2-3_Bee_Loops_2_a: Alla fine dovresti avere quattro blocchi all'interno del
          <i>ciclo</i> `ripeti ... volte`.
      2-3 Bee Loops 3:
        2-3_Bee_Loops_3_a: Dovresti avere sei blocchi all'interno del <i>cilco</i>
          `ripeti ... volte`.
      2-3 Bee Loops 3B:
        2-3_Bee_Loops_3B_a: Avrai bisogno di due diversi <i>cicli</i> `ripeti ...
          volte`, uno dopo l'altro.
      2-3 Bee Loops 4:
        2-3_Bee_Loops_4_a: Alla fine dovresti avere cinque blocchi nel <i>ciclo</i>
          `ripeti ... volte`.
      2-3 Bee Loops 4A:
        2-3_Bee_Loops_4A_a: Girati prima di iniziare a muoverti.
        2-3_Bee_Loops_4A_b: Il programma termina con alcuni blocchi fuori dal <i>ciclo</i>
          principale.
        2-3_Bee_Loops_4A_c: Se non riesci subito a capire come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di capire come combinarli in un <i>ciclo</i> `ripeti ... volte`.
      2-3 Bee Loops 5:
        2-3_Bee_Loops_5_a: Se non riesci subito a capire come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di capire come combinarli in un <i>ciclo</i> `ripeti ... volte`.
      2-3 Bee Loops 6:
        2-3_Bee_Loops_6_a: Se non riesci ad immaginare quali blocchi inserire nel
          <i>ciclo</i>, prova prima a risolvere l'esercizio senza il blocco `ripeti
          ... volte` e poi cerca di vedere quali sono le parti che si ripetono.
        2-3_Bee_Loops_6_b: Alla fine dovresti avere sei blocchi nel <i>ciclo</i> \`ripeti
          ... volte.
      2-3 Bee Loops 7:
        2-3_Bee_Loops_7_a: Girati prima di iniziare a muoverti.
        2-3_Bee_Loops_7_b: Se non riesci a capire subito come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di vedere quali sono le parti che si ripetono per inserirle nel blocco
          `ripeti ... volte`.
      2-3 Maze 1:
        2-3_Maze_1_a: Per usare un blocco `vai avanti`, trascinalo dalla cassetta
          degli attrezzi nell'area di lavoro e collegalo al blocco `quando si clicca
          su "Esegui"`.
      2-3 Maze 16:
        2-3_Maze_16_a: Se fai fatica a capire lo schema che si ripete, prova prima
          a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca di vedere
          quali sono le parti che si ripetono per inserirle nel blocco `ripeti ...
          volte`.
        2-3_Maze_16_b: |-
          Per inserire più blocchi all'interno di un ciclo `ripeti ... volte`, trascina un blocco `ripeti ... volte` dalla cassetta degli attrezzi all'area di lavoro, quindi trascina l'insieme di blocchi che devono ripetersi all'interno del ciclo `ripeti ... volte`.<br>
          <br>
          Controlla che il tutto sia attaccato al blocco `quando si clicca su "Esegui"`.
      2-3 Maze 6:
        2-3_Maze_6_a: Ci sono due modi per risolvere questo esercizio!
      2-3 Maze Loops 17:
        2-3_Maze_Loops_17_a: Se fai fatica a capire lo schema che si ripete, prova
          prima a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca
          di vedere quali sono le parti che si ripetono per inserirle nel blocco `ripeti
          ... volte`.
        2-3_Maze_Loops_17_b: Non ti ricordi più quali erano i blocchi iniziali proposti?
          Clicca `Ripristina` per ricominciare!
      2-3 Maze Loops 18:
        2-3_Maze_Loops_18_a: Se fai fatica a capire lo schema che si ripete, prova
          prima a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca
          di vedere quali sono le parti che si ripetono per inserirle nel blocco `ripeti
          ... volte`.
      2-3 Maze Loops 19:
        2-3_Maze_Loops_19_a: Se fai fatica a capire lo schema che si ripete, prova
          prima a risolvere l'esercizio senza usare cicli, poi cerca di vedere quali
          sono le parti che si ripetono per inserirle nel blocco `ripeti ... volte`.
        2-3_Maze_Loops_19_b: Se inserisci un ciclo `ripeti ... volte` all'interno
          di un altro, riesci a ridurre il numero di blocchi.
      2-3 Maze Loops 20:
        2-3_Maze_Loops_20_a: Cerca di individuare un percorso a gradini per capire
          come puoi sfruttare un ciclo `ripeti ... volte`.
      2-3 Maze Loops 21:
        2-3_Maze_Loops_21_a: Se fai fatica ad individuare il percorso a gradini, prova
          a coprire con le dita i tratti bloccati dalle piante carnivore.
      4-5 Artist 1:
        4-5_Artist_1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      4-5 Artist 11:
        4-5_Artist_11_a: All'interno del ciclo, dopo ogni linea, ricordati di far
          tornare indietro l'artista e farlo saltare alla nuova posizione.
      4-5 Artist 3:
        4-5_Artist_3_a: |-
          Se l'aiuola ha un perimetro di 600 pixel e i suoi due lati lunghi misurano 200 pixel, la somma dei due lati più corti vale:<br>
          <b>600 - 200 - 200 = 200</b><br>
          Essendo uguali, quanto misura ogni lato corto?<br>
          <b>Quanto fa 200 / 2?</b>
        4-5_Artist_3_b: Se non riesci a vedere come usare il ciclo `ripeti ... volte`
          per completare l'esercizio, prova prima a risolvere l'esercizio usando tutti
          i singoli blocchi, poi cerca di individuare lo schema.
      4-5 Artist 4:
        4-5_Artist_4_a: |-
          Ci sono 360 gradi in un cerchio!<br>
          Ecco quante volte devi ripetere il codice che trovi già pronto (girando 1 grado ogni volta) per completare il cerchio!
      4-5 Artist 5:
        4-5_Artist_5_a: |-
          Fare delle prove può funzionare, ma osserva che in totale devi fare un angolo di 90 gradi in 3 passi.<br>
          Quanto fa 90 diviso 3?
      4-5 Artist 7:
        4-5_Artist_7_a: 'Quale angolo è il più piccolo?  In quale angolo è collocato
          l''artista? '
      4-5 Artist 8:
        4-5_Artist_8_a: "Ogni lato lungo è di 240 pixel. Questo significa che la somma
          di quelli corti vale:<br>\n <b>800 - 240 - 240 = 320</b><br>\nChe cosa rappresenta
          <b>320 / 2 </b>? "
        4-5_Artist_8_b: |-
          Quest'immagine può essere disegnata in due modi:<br>

          -   disegna due rettangoli con lati 120 e 160, con un lato sovrapposto, oppure<br>
          -   disegna un rettangolo con lati 240 e 160, e poi aggiungi la linea di centrocampo.
      4-5 Artist 9:
        4-5_Artist_9_a: Quando un triangolo è equilatero, tutti i lati e tutti gli
          angoli sono uguali tra loro.
        4-5_Artist_9_b: Devi disegnare tre triangoli uguali. Non dimenticare di spostarti
          alla nuova posizione dopo ognuno di essi.
      4-5 Artist Assessment 1:
        4-5_Artist_Assessment_1_a: Devi solo disegnare il triangolo esterno per completare
          l'esercizio.
      4-5 Artist Patterns 11:
        4-5_Artist_Patterns_11_a: Se in un cerchio ci sono 360 gradi e ogni ciclo
          gira di 3 gradi, quante volte devi ripetere il ciclo per disegnare metà
          di tutto il cerchio?
      4-5 Artist Patterns 2:
        4-5_Artist_Patterns_2_a: Visto che i quadrati hanno il lato di 20 pixel, devi
          spostarti di 20 pixel prima di iniziare il quadrato successivo.
      4-5 Artist Patterns 3:
        4-5_Artist_Patterns_3_a: Devi semplicemente scegliere uno dei gruppi di blocchi
          già preparati nella cassetta degli attrezzi ed inserirlo nel punto giusto
          del codice.
        4-5_Artist_Patterns_3_b: Se temi di esserti perso, puoi sempre cliccare "Ripristina"
          per riportarti alla situazione iniziale!
      4-5 Artist Patterns 5:
        4-5_Artist_Patterns_5_a: Ora, alla fine di ogni rombo, l'artista è orientato
          nella direzione opposta a quella che serve per iniziare il rombo successivo.
          Di quanti gradi deve girarsi?
      4-5 Bee Conditionals 4:
        remember_quantum: "**Attenzione:** Ogni volta che esegui il programma ciò
          che è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare
          il blocco condizionale `se/altrimenti`."
      4-5 Bee Conditionals 5:
        remember_quantum: "**Attenzione:** Ogni volta che esegui il programma ciò
          che è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare
          il blocco condizionale `se/altrimenti`."
      4-5 Bee Conditionals 6:
        4-5 Bee Conditionals 6_a: Puoi risolvere l'esercizio usando solo i blocchi
          che trovi già nell'area di lavoro. In che ordine devi metterli?
        4-5 Bee Conditionals 6_b: Assicurati di controllare almeno <b>3</b> volte
          se il fiore ha più di <b>0</b> dosi di nettare.
      4-5 Bee Debugging 1:
        4-5_Bee_Debugging_1_a: Se non riesci ad immaginare dov'è l'errore, prova ad
          eseguire il codice per vedere dove sbaglia.
      4-5 Bee Nested Loops Rows:
        4-5_Bee_Nested_Loops_Rows_a: Considera che l'ape deve percorrere un lungo
          rettangolo, girando a sinistra al termine di ogni lato.
      4-5 Maze 10:
        4-5_Maze_10_a: |-
          Se non riesci a vedere come usare il <i>ciclo</i> per completare l'esercizio, prova prima a risolverlo nella maniera lunga, poi cerca di individuare lo schema.<br>
          Come potresti inserire un <i>ciclo</i> per usare meno blocchi?
      4-5 Maze 4:
        4-5_Maze_4_a: Se stai facendo fatica a capire dove posizionare il <i>ciclo</i>
          `ripeti ... volte`, prova prima a risolvere l'esercizio usando tutti i singoli
          blocchi e poi cerca di vedere quali sono le parti che si ripetono.
      4-5 Maze 5:
        4-5_Maze_5_a: Prova ad usare un <i>ciclo</i> `ripeti ... volte` ogni volta
          che devi muoverti per più di due passi.
        4-5_Maze_5_b: Può usare anche più di un blocco `ripeti ... volte` in un esercizio.
      4-5 Maze 6:
        4-5_Maze_6_a: |-
          Prova a tracciare un percorso con il dito. <br>
          È il percorso più breve possibile?
      4-5 Maze 7:
        4-5_Maze_7_a: |-
          <b>Vuoi creare un programma col minor numero possibile di blocchi?</b><br>
          Cerca degli schemi che si ripetono e costruisci la struttura del <i>ciclo</i> `ripeti ... volte`.
      4-5 Nested Loops 12:
        4-5_Nested_Loops_12_a: |-
          La figura deve essere ripetuta 36 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 36?
      4-5 Nested Loops 6:
        4-5_Nested_Loops_6_a: |-
          Non dimenticarti di girare dopo il ciclo interno.<br>
          Devi distribuire 6 triangoli su 360 gradi.<br>
          <b>360 / 6 = ?</b>
      4-5 Nested Loops 7:
        4-5_Nested_Loops_7_a: |-
          La figura deve essere ripetuta 10 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 10?
      4-5 Nested Loops 8:
        4-5_Nested_Loops_8_a: |-
          La figura deve essere ripetuta 6 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 6?
      4-5 While Loops 8:
        4-5_While_Loops_8_a: Usa il blocco `mentre` per entrambi.
      Course 4 Artist 11:
        Course_4_Artist_11_a: Nel primo ciclo, per disegnare il mezzo esagono, l'artista
          percorre tratti di **30 pixel** e gira a destra di **60 gradi**.
        Course_4_Artist_11_b: Nel secondo ciclo, per disegnare i due lati del triangolo,
          l'artista percorre tratti di **80 pixel** e gira a destra di **120 gradi**.
      Course 4 Artist 12:
        Course_4_Artist_12_a: 'Ogni figura che viene ripetuta è formata dalla combinazione
          di **mezzo esagono** con **due terzi di un triangolo**. '
        Course_4_Artist_12_b: 'Ogni singola figura è quasi uguale a quella dell''ultimo
          esercizio, tranne per il fatto che il mezzo esagono è un po'' più grande. '
        Course_4_Artist_12_c: |-
          Le prime tre linee sono lunghe 60 pixel e devi ruotare di 60 gradi.

          Le ultime due linee sono lunghe 80 pixel e devi ruotare di 120 gradi.
        Course_4_Artist_12_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#843179</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat">
                      <title name="TIMES">6</title>
                      <statement name="DO">
                        <block type="controls_repeat">
                          <title name="TIMES">3</title>
                          <statement name="DO">
                            <block type="draw_move_by_constant">
                              <title name="DIR">moveForward</title>
                              <title name="VALUE">60</title>
                              <next>
                                <block type="draw_turn_by_constant">
                                  <title name="DIR">turnRight</title>
                                  <title name="VALUE">60</title>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="controls_repeat">
                              <title name="TIMES">2</title>
                              <statement name="DO">
                                <block type="draw_move_by_constant">
                                  <title name="DIR">moveForward</title>
                                  <title name="VALUE">80</title>
                                  <next>
                                    <block type="draw_turn_by_constant">
                                      <title name="DIR">turnRight</title>
                                      <title name="VALUE">120</title>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 Artist 6:
        Course_4_Artist_6_a: Devi disegnare 3 triangoli in una rotazione complessiva
          di 360 gradi ... quante volte ci sta il 3 in 360?
      Course 4 Artist 8a:
        Course_4_Artist_8a: Ci sono 3 triangoli in una rotazione complessiva di 360
          gradi ... quante volte ci sta il 3 in 360?
      Course 4 Artist 9:
        Course_4_Artist_9_a: Quanto fa 360 diviso 10?
      Course 4 Artist Binary Free Play 2b:
        Course_4_Artist_Binary_Free_Play_2b_a: |-
          Clicca su "Esegui" per vedere cosa disegna il codice che trovi già pronto.<br>
          La figura può essere scomposta in 2 parti: superiore e inferiore, ognuna di 8 righe, che hanno un andamento simmetrico. Per ogni parte serve un <i>ciclo con contatore</i>, il primo che conta "a salire", il secondo "a scendere".
        Course_4_Artist_Binary_Free_Play_2b_b: In ognuna delle parti, la metà di sinistra
          e quella di destra, entrambe di 8 colonne, hanno anch'esse un andamento
          simmetrico. Per ognuna di tali metà servono due cicli `ripeti con counter`,
          uno per disegnare i quadrati bianchi ed uno per quelli neri, in cui il numero
          di ripetizioni dipende dal valore della variabile `counter` (<i>contatore</i>).
        Course_4_Artist_Binary_Free_Play_2b_c: Vuoi sapere come è stata realizzata
          la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/146760662"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          <b>Nota</b>: è possibile definire una soluzione alternativa che usa solo 3 cicli all'interno di ogni ciclo `ripeti con counter`.<br>
          <br>
          Se vuoi conoscerla <a href="https://studio.code.org/c/118205099" target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist For Loops 11:
        Course_4_Artist_For_Loops_11_a: 'Il numero di gradi di cui girare deve cambiare
          per ogni poligono. 360 diviso il numero di lati del poligono ti restituisce
          il numero di gradi di cui devi girare per disegnarlo: usa un blocco matematico
          per calcolarlo.'
      Course 4 Artist For Loops 11a:
        Course_4_Artist_For_Loops_11a_a: 360 diviso il numero di lati del poligono
          ti restituisce il numero di gradi di cui devi girare per disegnarlo.
        Course_4_Artist_For_Loops_11a_b: In ogni poligono devi avanzare di quantità
          pari a 10 volte il numero di lati del poligono stesso.
      Course 4 Artist For Loops 3:
        Course_4_Artist_For_Loops_3_a: Per risolvere l'esercizio con il ciclo `ripeti
          con counter`, devi rappresentare la distanza con la variabile `counter`
          (<i>contatore</i>).
      Course 4 Artist For Loops 4:
        Course_4_Artist_For_Loops_4_a: |-
          Ecco le domande cui rispondere per trovare i valori da inserire al posto dei `???`:<br>
          Qual è il valore più piccolo che serve? <br>
          Qual è il più grande?<br>
          Qual è l'incremento necessario ad ogni ripetizione?<br>
          <b>Nota</b>: ora ci sono così tanti blocchi nella cassetta degli attrezzi che li abbiamo organizzati in diverse categorie. Prenditi un po' di tempo per esplorarle.
      Course 4 Artist For Loops Challenge:
        Course_4_Artist_For_Loops_Challenge_a: Il poligono più grande ha 19 lati.
        Course_4_Artist_For_Loops_Challenge_b: Tutti i poligoni sono incompleti, ossia
          ogni poligono viene disegnato con un lato di meno rispetto a quelli che
          dovrebbe avere ("<i>counter</i> - 1").
      Course 4 Artist For Loops inspire:
        Course_4_Artist_For_Loops_inspire_a: La soluzione di questo esercizio è quasi
          uguale a quella dell'esercizio precedente... con un paio di cambiamenti.
        Course_4_Artist_For_Loops_inspire_b: Prova ad usare un ciclo con contatore
          che va da 3 a 10 con passo di 1.
        Course_4_Artist_For_Loops_inspire_c: All'interno del <i>ciclo con contatore</i>
          ci sono due cicli uguali, ma il secondo ciclo gira nella direzione opposta
          del primo.
        Course_4_Artist_For_Loops_inspire_d: "**Soluzione:**  \n\n<xml>\n  <block
          type=\"when_run\" deletable=\"false\" movable=\"false\">\n    <next>\n      <block
          type=\"controls_for_counter\" inline=\"true\" movable=\"false\">\n      <mutation
          counter=\"counter\"></mutation>\n        <value name=\"FROM\">\n          <block
          type=\"math_number\">\n            <title name=\"NUM\">3</title>\n          </block>\n
          \       </value>\n        <value name=\"TO\">\n          <block type=\"math_number\">\n
          \           <title name=\"NUM\">10</title>\n          </block>\n        </value>\n
          \       <value name=\"BY\">\n          <block type=\"math_number\">\n            <title
          name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement
          name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n
          \           <value name=\"TIMES\">\n              <block type=\"math_arithmetic\"
          inline=\"true\">\n                <title name=\"OP\">MINUS</title>\n                <value
          name=\"A\">\n                  <block type=\"variables_get\">\n                    <title
          name=\"VAR\">counter</title>\n                  </block>\n                </value>\n
          \               <value name=\"B\">\n                  <block type=\"math_number\">\n
          \                   <title name=\"NUM\">1</title>\n                  </block>\n
          \               </value>\n              </block>\n            </value>\n
          \           <statement name=\"DO\">\n              <block type=\"draw_move\"
          inline=\"true\">\n                <title name=\"DIR\">moveForward</title>\n
          \               <value name=\"VALUE\">\n                  <block type=\"math_number\">\n
          \                   <title name=\"NUM\">40</title>\n                  </block>\n
          \               </value>\n                <next>\n                  <block
          type=\"draw_turn\" inline=\"true\">\n                    <title name=\"DIR\">turnRight</title>\n
          \                   <value name=\"VALUE\">\n                      <block
          type=\"math_arithmetic\" inline=\"true\">\n                        <title
          name=\"OP\">DIVIDE</title>\n                        <value name=\"A\">\n
          \                         <block type=\"math_number\">\n                            <title
          name=\"NUM\">360</title>\n                          </block>\n                        </value>\n
          \                       <value name=\"B\">\n                          <block
          type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n
          \                         </block>\n                        </value>\n                      </block>\n
          \                   </value>\n                  </block>\n                </next>\n
          \             </block>\n            </statement>\n            <next>\n              <block
          type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n
          \                 <block type=\"math_arithmetic\" inline=\"true\">\n                    <title
          name=\"OP\">MINUS</title>\n                    <value name=\"A\">\n                      <block
          type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n
          \                     </block>\n                    </value>\n                    <value
          name=\"B\">\n                      <block type=\"math_number\">\n                        <title
          name=\"NUM\">1</title>\n                      </block>\n                    </value>\n
          \                 </block>\n                </value>\n                <statement
          name=\"DO\">\n                  <block type=\"draw_move\" inline=\"true\">\n
          \                   <title name=\"DIR\">moveForward</title>\n                    <value
          name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title
          name=\"NUM\">40</title>\n                      </block>\n                    </value>\n
          \                   <next>\n                      <block type=\"draw_turn\"
          inline=\"true\">\n                        <title name=\"DIR\">turnLeft</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">DIVIDE</title>\n                            <value name=\"A\">\n
          \                             <block type=\"math_number\">\n                                <title
          name=\"NUM\">360</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n
          \                   </next>\n                  </block>\n                </statement>\n
          \             </block>\n            </next>\n          </block>\n        </statement>\n
          \     </block>\n    </next>\n  </block>\n</xml>"
      Course 4 Artist Functions Inspiration:
        Course_4_Artist_Functions_Inspiration_a: Usa il codice del precedente esercizio
          ed aggiungi un blocco `gira a ...` di tre gradi all'interno del ciclo interno.
        Course_4_Artist_Functions_Inspiration_b: Devi girare di più di 90 gradi dopo
          ogni ciclo `ripeti ... volte`, ma sempre all'interno del ciclo `ripeti con
          counter`.
        Course_4_Artist_Functions_Inspiration_c: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for_counter" inline="true">
                <mutation counter="counter"></mutation>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">14</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_random"/>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="procedures_callnoreturn">
                            <mutation name="draw a square 20"></mutation>
                              <next>
                                <block type="jump_by_constant">
                                  <title name="DIR">jumpForward</title>
                                  <title name="VALUE">20</title>
                                  <next>
                                    <block type="draw_turn_by_constant">
                                      <title name="DIR">turnRight</title>
                                      <title name="VALUE">3</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="draw_turn_by_constant">
                              <title name="DIR">turnLeft</title>
                              <title name="VALUE">100</title>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            </xml>
      Course 4 Artist Functions challenge:
        Course_4_Artist_Functions_challenge_a: Un parte importante nel realizzare
          le funzioni è capire quali blocchi ti servono e quali no.
        Course_4_Artist_Functions_challenge_b: Usa un ciclo `ripeti con counter` e
          al suo interno usa un ciclo `ripeti ... volte` per un numero di volte pari
          alla variabile `counter` (<i>contatore</i>) del ciclo esterno.
        Course_4_Artist_Functions_challenge_c: |-
          Ad ogni ripetizione, disegna un quadratino e fai un salto in avanti.<br>
          <br>
          Devi girare di 90 gradi dopo ogni ciclo `ripeti ... volte`, ma sempre all'interno del ciclo `ripeti con counter`.
        Course_4_Artist_Functions_challenge_d: Vuoi sapere come è stata realizzata
          la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/113000010"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist Inspire:
        Course_4_Artist_Inspire_a: Dopo aver completato un quadrato, prova a saltare
          in avanti di metà della sua lunghezza, prima di girarti e cominciarne un
          altro.
        Course_4_Artist_Inspire_b: Per disegnare una singola girandola, devi ripetere
          per 4 volte (con una svolta a sinistra nel mezzo) ogni quadrato e ogni salto
          in avanti.
        Course_4_Artist_Inspire_c: Per completare la figura, ogni girandola viene
          ripetuta per 4 volte, inserendo un salto in avanti pari alla lunghezza del
          quadrato ed una svolta a destra di `360/sides` (cioè 360/<i>lati</i>) gradi
          tra l'una e l'altra.
        Course_4_Artist_Inspire_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_colour" inline="true" id="draw-color">
                  <value name="COLOUR">
                    <block type="colour_picker">
                      <title name="COLOUR">#843179</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">sides</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">4</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">length</title>
                          <value name="VALUE">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="math_number">
                                  <title name="NUM">200</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="variables_get">
                                  <title name="VAR">sides</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">sides</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">sides</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">sides</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="draw_move" inline="true">
                                          <title name="DIR">moveForward</title>
                                          <value name="VALUE">
                                            <block type="variables_get">
                                              <title name="VAR">length</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </statement>
                                      <next>
                                        <block type="jump" inline="true">
                                          <title name="DIR">jumpForward</title>
                                          <value name="VALUE">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">DIVIDE</title>
                                              <value name="A">
                                                <block type="variables_get">
                                                  <title name="VAR">length</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="math_number">
                                                  <title name="NUM">2</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnLeft</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">DIVIDE</title>
                                              <value name="A">
                                                <block type="math_number">
                                                  <title name="NUM">360</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="variables_get">
                                                  <title name="VAR">sides</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 Artist Vars 13:
        Course_4_Artist_Vars_13_a: Hai bisogno di due cicli (uno dentro l'altro),
          entrambi che ripetono `sides` (<i>lati</i>) volte.
        Course_4_Artist_Vars_13_b: Il ciclo interno disegna un ottagono (girando verso
          sinistra). Poi, nel ciclo esterno, devi muoverti in avanti e girare a destra.
        Course_4_Artist_Vars_13_c: Per aggiustare la figura in modo che rimanga della
          stessa dimensione al variare del numero di lati, usa un blocco matematico
          per dividere la lunghezza del perimetro per il numero dei lati.
      Course 4 Artist Vars 6:
        Course_4_Artist_Vars_6_a: Il numero di gradi di cui girare ogni volta è dato
          da <b>360 diviso il numero di lati</b>.
      Course 4 Artist Vars 8:
        Course_4_Artist_Vars_8_a: Se dividi il valore iniziale della lunghezza del
          lato per il numero dei lati, la lunghezza del lato del poligono disegnato
          si accorcia man mano che il numero dei lati cresce.
      Course 4 Bee Params 7:
        notice_pattern: Riesci ad individuare uno schema, una regola, in come cambiano
          le quantità di nettare da raccogliere?
        count_with_for: |-
          La quantità di nettare da raccogliere cresce ogni volta. Quale blocco ti permette di ripetere una serie di azioni mentre conta "a salire"? <br>
          <br>
          Prova ad usare un <i>ciclo con contatore</i>.
      Course 4 Bee Params 8:
        Course_4_Bee_Params_8_a: |-
          All'interno della funzione la quantità di dosi da raccogliere può essere usata per decidere quale azione svolgere.<br>
          Quando l'ape è su un favo, il numero di dosi di nettare da raccogliere è 0, mentre se è su un fiore, è 0 il numero di dosi di miele da produrre.
      Course 4 Play Lab Params 2:
        Course_4_Play_Lab_Params_2_a: Sarà necessario fare clic su "modifica" la funzione
          di salto e aggiornarla in modo da utilizzare il parametro 'altezza'.
      Course 4 Play Lab Vars 2:
        Course_4_Play_Lab_Vars_2_a: Assicurati di impostare un valore di `dog_speed`
          (<i>velocità del cane</i>) che sia maggiore di `cat_speed` (<i>velocità
          del gatto</i>).
      Course 4 Play Labs For Loops 2:
        Course_4_Play_Labs_For_Loops_2_a: Quale deve essere l'incremento ad ogni passo
          della variabile `counter` (<i>contatore</i>) per saltare i numeri pari?
      Course 4 Playlab For Loops 4b:
        Course_4_Playlab_For_Loops_4b_a: I personaggi sono distanti 330 pixel dalle
          bandierine.
        Course_4_Playlab_For_Loops_4b_b: Come puoi far sì che, prima della fine del
          proprio <i>ciclo con contatore</i>, ogni personaggio raggiunga la propria
          bandierina, nonostante i valori iniziali e finali del ciclo siano diversi?
        Course_4_Playlab_For_Loops_4b_c: Ricorda che non importa di quanto un personaggio
          supera la bandierina nell'ultima ripetizione del proprio ciclo, l'importante
          è superare la bandierina.
      Course 4 Playlab For Loops 5b:
        Course_4_Playlab_For_Loops_5b_a: I personaggi sono distanti 350 pixel l'uno
          dall'altro.
        Course_4_Playlab_For_Loops_5b_b: Ricorda che ad ogni ripetizione del <i>ciclo
          con contatore</i> un personaggio si muove di una quantità maggiore, perché
          il contatore viene incrementato ad ogni ripetizione.
      Course 4 SCF 1:
        Course_4_SCF_1_a: Ogni esagono ha il lato di 40 pixel.
        Course_4_SCF_1_b: C'è un salto di 120 pixel tra un esagono e il successivo
          della stessa fila.
        Course_4_SCF_1_c: Prima di disegnare la seconda fila di esagoni, devi girare
          a destra di 60 gradi e saltare avanti di 40 pixel. Poi devi girare l'artista
          in senso inverso e saltare indietro di 320 pixel.
        Course_4_SCF_1_d: Prima di disegnare la terza fila di esagoni, devi girare
          a destra di 60 gradi e saltare avanti di 40 pixel. Poi devi girare l'artista
          in senso inverso e saltare indietro di 440 pixel (120 pixel in più della
          volta precedente).
        Course_4_SCF_1_e: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="draw a line of hexagons"></mutation>
                      <next>
                        <block type="procedures_callnoreturn">
                        <mutation name="shift down/forward"></mutation>
                          <next>
                            <block type="procedures_callnoreturn">
                            <mutation name="draw a line of hexagons"></mutation>
                              <next>
                                <block type="procedures_callnoreturn">
                                <mutation name="shift down/backward"></mutation>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">draw a hexagon</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">6</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_move" inline="true">
                      <title name="DIR">moveForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnRight</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">60</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">shift down/backward</title>
              <statement name="STACK">
                <block type="draw_turn" inline="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">60</title>
                    </block>
                  </value>
                  <next>
                    <block type="jump" inline="true">
                      <title name="DIR">jumpForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">60</title>
                            </block>
                          </value>
                          <next>
                            <block type="jump" inline="true">
                              <title name="DIR">jumpBackward</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">440</title>
                                </block>
                              </value>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">draw a line of hexagons</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="draw a hexagon"></mutation>
                      <next>
                        <block type="jump" inline="true">
                          <title name="DIR">jumpForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">120</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn">
            <mutation></mutation>
              <title name="NAME">shift down/forward</title>
              <statement name="STACK">
                <block type="draw_turn" inline="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">60</title>
                    </block>
                  </value>
                  <next>
                    <block type="jump" inline="true">
                      <title name="DIR">jumpForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">60</title>
                            </block>
                          </value>
                          <next>
                            <block type="jump" inline="true">
                              <title name="DIR">jumpBackward</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">320</title>
                                </block>
                              </value>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 1a:
        Course_4_SCF_1a_a: Riprendi la funzione definita nella <a href="https://studio.code.org/s/course4/stage/16/puzzle/6"
          target="_blank">lezione 16</a> per raccogliere un quantità specificata di
          nettare in una direzione specificata.
        Course_4_SCF_1a_c: Rifletti su come usare un "ciclo con contatore" (`for loop`)
          per chiamare la funzione con il valore corretto del parametro.
        Course_4_SCF_1a_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false" uservisible="false" y="14">
              <next>
                <block type="variables_set" inline="false" uservisible="false">
                  <title name="VAR">left</title>
                  <value name="VALUE">
                    <block type="math_number" uservisible="false">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false" uservisible="false">
                      <title name="VAR">right</title>
                      <value name="VALUE">
                        <block type="math_number" uservisible="false">
                          <title name="NUM">0</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </next>
            </block>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">21</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                      <next>
                        <block type="maze_if">
                          <title name="DIR">isPathLeft</title>
                          <statement name="DO">
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="get nectar">
                              <arg name="dir"></arg>
                              <arg name="counter"></arg>
                              </mutation>
                              <value name="ARG0">
                                <block type="variables_get">
                                  <title name="VAR">left</title>
                                </block>
                              </value>
                              <value name="ARG1">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                              <next>
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_if">
                                          <title name="DIR">isPathRight</title>
                                          <statement name="DO">
                                            <block type="procedures_callnoreturn" inline="false">
                                              <mutation name="get nectar">
                                              <arg name="dir"></arg>
                                              <arg name="counter"></arg>
                                              </mutation>
                                              <value name="ARG0">
                                                <block type="variables_get">
                                                  <title name="VAR">right</title>
                                                </block>
                                              </value>
                                              <value name="ARG1">
                                                <block type="variables_get">
                                                  <title name="VAR">counter</title>
                                                </block>
                                              </value>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
              <mutation>
              <arg name="dir"></arg>
              <arg name="counter"></arg>
              </mutation>
              <title name="NAME">get nectar</title>
              <statement name="STACK">
                <block type="controls_if" inline="false">
                <mutation else="1"></mutation>
                  <value name="IF0">
                    <block type="logic_compare" inline="true" movable="false">
                      <title name="OP">EQ</title>
                      <value name="A">
                        <block type="parameters_get">
                          <title name="VAR">dir</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="variables_get">
                          <title name="VAR">left</title>
                        </block>
                      </value>
                    </block>
                  </value>
                  <statement name="DO0">
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                    </block>
                  </statement>
                  <statement name="ELSE">
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                    </block>
                  </statement>
                  <next>
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                        </block>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="parameters_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                          <block type="maze_nectar"></block>
                          </statement>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_number">
                                  <title name="NUM">3</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveBackward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="controls_if" inline="false">
                                <mutation else="1"></mutation>
                                  <value name="IF0">
                                    <block type="logic_compare" inline="true" movable="false">
                                      <title name="OP">EQ</title>
                                      <value name="A">
                                        <block type="parameters_get">
                                          <title name="VAR">dir</title>
                                        </block>
                                      </value>
                                      <value name="B">
                                        <block type="variables_get">
                                          <title name="VAR">left</title>
                                        </block>
                                      </value>
                                    </block>
                                  </value>
                                  <statement name="DO0">
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </statement>
                                  <statement name="ELSE">
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                    </block>
                                  </statement>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 1b:
        Course_4_SCF_1b_a: 'Osserva che le dosi di miele da produrre sono sempre le
          stesse: puoi usare una funzione.'
        Course_4_SCF_1b_c: Puoi usare un "ciclo con contatore" (`for loop`) per far
          fare all'ape il percorso opportuno.
        Course_4_SCF_1b_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="make honey up and over"></mutation>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="maze_move">
                                          <title name="DIR">moveForward</title>
                                        </block>
                                      </statement>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
            <mutation></mutation>
              <title name="NAME">make honey up and over</title>
              <statement name="STACK">
                <block type="maze_move">
                  <title name="DIR">moveForward</title>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="maze_honey">
                              <next>
                                <block type="maze_honey">
                                  <next>
                                    <block type="maze_move">
                                      <title name="DIR">moveBackward</title>
                                      <next>
                                        <block type="maze_turn">
                                          <title name="DIR">turnLeft</title>
                                          <next>
                                            <block type="maze_move">
                                              <title name="DIR">moveBackward</title>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 2:
        Course_4_SCF_2_a: Ogni ottagono ha i lati lunghi 40 pixel.
        Course_4_SCF_2_b: C'è un salto di 136 pixel tra un ottagono e il successivo
          della stessa fila orizzontale.
        Course_4_SCF_2_c: |-
          Prima di disegnare le file pari di ottagoni, devi girare l'artista a destra di 45 gradi e farlo saltare in avanti di 96 pixel.<br>
          <br>
          Poi lo devi girare in senso inverso e farlo saltare indietro di 408 pixel.
        Course_4_SCF_2_d: Osserva che, siccome ci sono più ottagoni nelle file pari,
          non devi far saltare indietro l'artista di una quantità supplementare prima
          di iniziare a disegnare le successive file dispari. Puoi quindi usare la
          stessa funzione per riposizionare l'artista prima di disegnare ogni fila
          successiva.
        Course_4_SCF_2_e: |-
          **Soluzione:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn" inline="false">
                      <mutation name="draw octagons">
                      <arg name="numOctagons"></arg>
                      </mutation>
                      <value name="ARG0">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <next>
                        <block type="procedures_callnoreturn">
                        <mutation name="shift down"></mutation>
                          <next>
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="draw octagons">
                              <arg name="numOctagons"></arg>
                              </mutation>
                              <value name="ARG0">
                                <block type="math_number">
                                  <title name="NUM">3</title>
                                </block>
                              </value>
                              <next>
                                <block type="procedures_callnoreturn">
                                <mutation name="shift down"></mutation>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="procedures_callnoreturn" inline="false">
                      <mutation name="draw octagons">
                      <arg name="numOctagons"></arg>
                      </mutation>
                      <value name="ARG0">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false">
              <mutation>
              <arg name="numOctagons"></arg>
              </mutation>
              <title name="NAME">draw octagons</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="parameters_get">
                      <title name="VAR">numOctagons</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                    <mutation name="draw an octagon"></mutation>
                      <next>
                        <block type="jump" inline="true">
                          <title name="DIR">jumpForward</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">136</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" editable="false">
            <mutation></mutation>
              <title name="NAME">draw an octagon</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">8</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_move" inline="true">
                      <title name="DIR">moveForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">40</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnRight</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">45</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" editable="false">
            <mutation></mutation>
              <title name="NAME">shift down</title>
              <statement name="STACK">
                <block type="draw_turn" inline="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">45</title>
                    </block>
                  </value>
                  <next>
                    <block type="jump" inline="true">
                      <title name="DIR">jumpForward</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">96</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">45</title>
                            </block>
                          </value>
                          <next>
                            <block type="jump" inline="true">
                              <title name="DIR">jumpBackward</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">408</title>
                                </block>
                              </value>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </xml>
      Course 4 SCF 3:
        Course_4_SCF_3_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        Course_4_SCF_3_b: Il disegno è formato da una serie di ottagoni ognuno con
          i lati lunghi `counter` (<i>contatore</i>) pixel.
        Course_4_SCF_3_c: La funzione che disegna l'ottagono è chiamata dall'interno
          di un ciclo `ripeti con counter` che conta all'indietro da 200 a 2 con passo
          2.
        Course_4_SCF_3_d: Ad ogni ripetizione del ciclo `ripeti con counter` devi
          girare di 22.5 gradi.
        Course_4_SCF_3_e: Il valore di `counter` controlla sia la larghezza del pennello
          che il colore (diminuendo il "rosso" e aumentando sia il "verde" che il
          "blu").
        Course_4_SCF_3_f: |-
          **Soluzione:**

          <xml>
            <block type="procedures_defnoreturn" editable="false">
              <mutation>
              <arg name="length"></arg>
              </mutation>
              <title name="NAME">draw an octagon</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">8</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_move" inline="true">
                      <title name="DIR">moveForward</title>
                      <value name="VALUE">
                        <block type="parameters_get">
                          <title name="VAR">length</title>
                        </block>
                      </value>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnRight</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">45</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for_counter" inline="true">
                <mutation counter="counter"></mutation>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">200</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_rgb" inline="false">
                          <value name="RED">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">MINUS</title>
                              <value name="A">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <value name="GREEN">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <value name="BLUE">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">MULTIPLY</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                            </block>
                          </value>
                        </block>
                      </value>
                      <next>
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="math_arithmetic" inline="true">
                              <title name="OP">DIVIDE</title>
                              <value name="A">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="B">
                                <block type="math_number">
                                  <title name="NUM">4</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="procedures_callnoreturn" inline="false">
                              <mutation name="draw an octagon">
                              <arg name="length"></arg>
                              </mutation>
                              <value name="ARG0">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">22.5</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 1:
        Course_4_SCFL_1_a: "L'ape dovrebbe seguire un percorso in cui raccoglie prima
          tutto il nettare (andando a zig-zag verso destra e verso l'alto) e poi tutto
          il miele (andando a zig-zag verso il basso e verso sinistra):  \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        Course_4_SCFL_1_b: 'È conveniente usare 2 _cicli con contatore_: uno per salire
          mentre si raccoglie il nettare, uno per scendere mentre si produce il miele.'
        Course_4_SCFL_1_c: Mentre il _ciclo con contatore_ per salire deve usare il
          valore della variabile `counter` (_contatore_) sia per spostarsi che per
          raccogliere il nettare, quello per scendere lo deve usare solo per produrre
          il miele.
        Course_4_SCFL_1_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 1a:
        Course_4_SCFL_1a_a: Per usare il minor numero possibile di blocchi potrebbe
          essere necessario doversi spostare di più del minimo indispensabile.
        Course_4_SCFL_1a_b: "L'ape dovrebbe seguire un percorso in cui raccoglie prima
          tutto il nettare (andando a zig-zag verso destra e verso l'alto) e poi tutto
          il miele (andando a zig-zag verso il basso e verso sinistra):  \n\n![](https://images.code.org/253d710ff7d1b494fe8fd20cfc92baaf-image-1469726263579.png)"
        Course_4_SCFL_1a_c: Puoi usare un ciclo `ripeti con counter` per eseguire
          un blocco `ripeti` con un numero di ripetizioni che cambia ad ogni esecuzione.
          In questo caso il numero di ripetizioni diminuisce da 7 a 5, con passo 1.
        Course_4_SCFL_1a_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">7</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">5</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward"/>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnLeft</title>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="math_number">
                                          <title name="NUM">2</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="maze_moveForward"/>
                                      </statement>
                                      <next>
                                        <block type="maze_turn">
                                          <title name="DIR">turnLeft</title>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 1b:
        Course_4_SCFL_1b_a: |-
          Scrat dovrebbe seguire questo percorso a zig-zag:
          ![](https://images.code.org/1957633c453f4025a3fd6ce0e201398b-image-1469642319721.png)
        Course_4_SCFL_1b_b: "L'ape dovrebbe seguire un percorso in cui raccoglie prima
          tutto il nettare (andando a zig-zag verso destra e verso l'alto) e poi tutto
          il miele (andando a zig-zag verso il basso e verso sinistra):  \n\n![](https://images.code.org/1957633c453f4025a3fd6ce0e201398b-image-1469642319721.png)"
        Course_4_SCFL_1b_c: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward"/>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 2:
        Course_4_SCFL_2_a: "L'ape dovrebbe seguire un percorso in cui raccoglie prima
          tutto il nettare (andando a zig-zag verso destra e verso l'alto) e poi tutto
          il miele (andando a zig-zag verso il basso e verso sinistra):  \n\n![](https://images.code.org/a69c63a039031254097f19231dd7bf95-image-1469726483169.png)"
        Course_4_SCFL_2_b: Il giro intorno ai favi può essere controllato da un ciclo
          `ripeti con counter` nel quale in 3 momenti ci si ferma per svolgere delle
          azioni su degli oggetti.
        Course_4_SCFL_2_c: |-
          Nella prima iterazione la sequenza di ripetizioni è: 1, 2, 3, 4.<br>
          <br>
          Nella seconda iterazione la sequenza di ripetizioni e: 3, 6, 9, 12.<br>
          <br>
          Nella terza iterazione la sequenza di ripetizioni è: 2, 4, 8, quando il contatore vale: 1, 2, 3. Riesci a capire qual è la regola?
        Course_4_SCFL_2_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_moveForward">
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnRight</title>
                              <next>
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_moveForward">
                                      <next>
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">MULTIPLY</title>
                                              <value name="A">
                                                <block type="variables_get">
                                                  <title name="VAR">counter</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="math_number">
                                                  <title name="NUM">3</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="maze_honey"/>
                                          </statement>
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnLeft</title>
                                              <next>
                                                <block type="maze_moveForward">
                                                  <next>
                                                    <block type="maze_moveForward">
                                                      <next>
                                                        <block type="maze_turn">
                                                          <title name="DIR">turnRight</title>
                                                          <next>
                                                            <block type="controls_repeat_ext" inline="true">
                                                              <value name="TIMES">
                                                                <block type="math_arithmetic" inline="true">
                                                                  <title name="OP">POWER</title>
                                                                  <value name="A">
                                                                    <block type="math_number">
                                                                      <title name="NUM">2</title>
                                                                    </block>
                                                                  </value>
                                                                  <value name="B">
                                                                    <block type="variables_get">
                                                                      <title name="VAR">counter</title>
                                                                    </block>
                                                                  </value>
                                                                </block>
                                                              </value>
                                                              <statement name="DO">
                                                                <block type="maze_nectar"/>
                                                              </statement>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 3:
        Course_4_SCFL_3_a: La larghezza del pennello è 1. Il primo quadrato ha il
          lato di 50 pixel ed ogni quadrato successivo ha il lato più lungo di 50
          pixel.
        Course_4_SCFL_3_b: Il valore dell'opacità del pennello è sempre la metà del
          valore del contatore (`counter`/2).
        Course_4_SCFL_3_c: Al termine del disegno di un quadrato devi posizionare
          l'artista un po' più in alto a sinistra per disegnare correttamente il successivo
          quadrato.
        Course_4_SCFL_3_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 4:
        Course_4_SCFL_4_a: |-
          La figura è composta da ripetizioni di un quadrato di colore mutevole e dimensioni via via crescenti.<br>
          <br>
          Il primo quadrato ha il lato lungo 5 pixel, ed ogni quadrato successivo è 5 pixel più lungo, fino a 200 pixel.
        Course_4_SCFL_4_b: Il cambiamento del colore si attua col blocco `imposta
          il colore con rosso, verde, blu`. Il valore del rosso è sempre uguale a
          quello del contatore (`counter`), mentre quello del verde a `255`-`counter`,
          ed il blu rimane sempre fisso a `255`.
        Course_4_SCFL_4_c: L'artista gira di 15 gradi prima di disegnare il successivo
          quadrato.
        Course_4_SCFL_4_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">200</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_number">
                                  <title name="NUM">4</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn_by_constant">
                                      <title name="DIR">turnRight</title>
                                      <title name="VALUE">90</title>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">15</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 6:
        Course_4_SCFL_6_a: La figura è una spirale di colore mutevole e tratti rettilinei
          progressivamente più lunghi.
        Course_4_SCFL_6_b: |-
          Il primo segmento è lungo 5 pixel ed ogni successivo segmento è 2 pixel più lungo, fino a 250.<br>
          <br>
          Al termine di ogni segmento l'artista gira di 80 gradi.
        Course_4_SCFL_6_c: Il cambiamento del colore si attua col blocco `imposta
          il colore con rosso, verde, blu`. Il valore del rosso è sempre fisso a `255`
          mentre quello del verde è sempre uguale a quello del contatore (`counter`)
          ed il blu è uguale a `255`–`counter`.
        Course_4_SCFL_6_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCFL 7:
        Course_4_SCFL_7_a: |-
          -   La figura è composta da due onde, ognuna delle quali è disegnata da un "ciclo con contatore" (`for loop`), il primo che conta "a salire" ed il secondo che conta "a scendere".<br>
          -   Entrambi i cicli hanno come estremi 5 e 200, come passo 2, ed eseguono <b>quasi</b> le stesse azioni.
        Course_4_SCFL_7_b: |-
          -   La larghezza (`width`) del pennello varia progressivamente all'interno del ciclo, seguendo il valore del contatore `counter`.<br>
          -   Ad ogni ripetizione l'artista deve avanzare di 5 pixel e poi girare di `360`/`counter`: attenzione alla direzione in cui gira!
        Course_4_SCFL_7_c: |-
          -   Il pennello ha un'opacità (`alpha`) di 20.<br>
          -   Il cambiamento del colore si attua col blocco "imposta il colore con rosso, verde, blu" (`set color with red, green, blue`). Il valore del rosso è sempre uguale a quello del contatore `counter` mentre quello del verde a `255`–`counter`, ed il blu rimane sempre fisso a `255`.
        Course_4_SCFL_7_d: Al termine del primo ciclo l'artista deve girare di 225
          gradi a sinistra prima di iniziare il secondo.
        Course_4_SCFL_7_e: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="alpha" inline="true" id="alpha">
                  <value name="VALUE">
                    <block type="math_number_dropdown">
                      <title name="NUM" config="100,90,80,70,60,50,40,30,20,10,0">20</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">200</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_width" inline="false">
                          <value name="WIDTH">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <next>
                            <block type="draw_colour" inline="true" id="draw-color">
                              <value name="COLOUR">
                                <block type="colour_rgb" inline="false">
                                  <value name="RED">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="GREEN">
                                    <block type="math_arithmetic" inline="true">
                                      <title name="OP">MINUS</title>
                                      <value name="A">
                                        <block type="math_number">
                                          <title name="NUM">255</title>
                                        </block>
                                      </value>
                                      <value name="B">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                    </block>
                                  </value>
                                  <value name="BLUE">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">5</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnLeft</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">DIVIDE</title>
                                          <value name="A">
                                            <block type="math_number">
                                              <title name="NUM">360</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="variables_get">
                                              <title name="VAR">counter</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="draw_turn" inline="true">
                          <title name="DIR">turnLeft</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">225</title>
                            </block>
                          </value>
                          <next>
                            <block type="controls_for_counter" inline="true">
                            <mutation counter="counter"></mutation>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">200</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">5</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_width" inline="false">
                                  <value name="WIDTH">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_colour" inline="true" id="draw-color">
                                      <value name="COLOUR">
                                        <block type="colour_rgb" inline="false">
                                          <value name="RED">
                                            <block type="variables_get">
                                              <title name="VAR">counter</title>
                                            </block>
                                          </value>
                                          <value name="GREEN">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">MINUS</title>
                                              <value name="A">
                                                <block type="math_number">
                                                  <title name="NUM">255</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="variables_get">
                                                  <title name="VAR">counter</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <value name="BLUE">
                                            <block type="math_number">
                                              <title name="NUM">255</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_move" inline="true">
                                          <title name="DIR">moveForward</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">5</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 1:
        Course_4_SCV_1_a: |-
          -   La figura è composta dalla ripetizione del disegno di un pentagono e di un decagono.<br>
          -   Il perimetro di ogni poligono ha una lunghezza (`length`) di 500 pixel.
        Course_4_SCV_1_b: |-
          -   Ogni poligono è ripetuto un numero di volte pari al numero dei suoi lati (`sides`).<br>
          -   Al termine delle ripetizioni di ogni poligono l'artista ha fatto un giro completo di 360 gradi.
        Course_4_SCV_1_c: |-
          -   Entrambi i poligoni sono disegnati dallo stesso ciclo, basato sulla variabile `sides` - il cui valore viene opportunamente cambiato.<br>
          -   Vengono disegnate prima tutte le ripetizioni del pentagono e poi tutte quelle del decagono.
        Course_4_SCV_1_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">length</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">500</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">sides</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">0</title>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_colour" inline="true" id="draw-color">
                                  <value name="COLOUR">
                                    <block type="colour_random"/>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">sides</title>
                                      <value name="VALUE">
                                        <block type="math_arithmetic" inline="true">
                                          <title name="OP">ADD</title>
                                          <value name="A">
                                            <block type="variables_get">
                                              <title name="VAR">sides</title>
                                            </block>
                                          </value>
                                          <value name="B">
                                            <block type="math_number">
                                              <title name="NUM">5</title>
                                            </block>
                                          </value>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="variables_get">
                                              <title name="VAR">sides</title>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="controls_repeat_ext" inline="true">
                                              <value name="TIMES">
                                                <block type="variables_get">
                                                  <title name="VAR">sides</title>
                                                </block>
                                              </value>
                                              <statement name="DO">
                                                <block type="draw_move" inline="true">
                                                  <title name="DIR">moveForward</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                                                      <title name="OP">DIVIDE</title>
                                                      <value name="A">
                                                        <block type="variables_get">
                                                          <title name="VAR">length</title>
                                                        </block>
                                                      </value>
                                                      <value name="B">
                                                        <block type="variables_get">
                                                          <title name="VAR">sides</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="draw_turn" inline="true">
                                                      <title name="DIR">turnLeft</title>
                                                      <value name="VALUE">
                                                        <block type="math_arithmetic" inline="true">
                                                          <title name="OP">DIVIDE</title>
                                                          <value name="A">
                                                            <block type="math_number">
                                                              <title name="NUM">360</title>
                                                            </block>
                                                          </value>
                                                          <value name="B">
                                                            <block type="variables_get">
                                                              <title name="VAR">sides</title>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </next>
                                                </block>
                                              </statement>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnRight</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                                                      <title name="OP">DIVIDE</title>
                                                      <value name="A">
                                                        <block type="math_number">
                                                          <title name="NUM">360</title>
                                                        </block>
                                                      </value>
                                                      <value name="B">
                                                        <block type="variables_get">
                                                          <title name="VAR">sides</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 2:
        Course_4_SCV_2_b: Sono quindi necessari 3 "cicli annidati" ognuno dei quali
          esegue 10 ripetizioni, pari al numero dei lati (`sides`) del decagono.
        Course_4_SCV_2_c: Alla fine del ciclo più interno (quello che disegna il singolo
          decagono) l'artista gira un po' a sinistra, mentre gira a destra alla fine
          degli altri due cicli.
        Course_4_SCV_2_d: |-
          Come nel disegno del decagono, anche qui, sia per disegnare un fiore, che tutta la figura, l'artista svolge un giro completo di 360 gradi.<br>
          Dopo aver disegnato un fiore è necessario spostarsi un po' in avanti prima di girare a destra, per evitare di disegnare le varie ripetizioni del fiore tutte nello stesso punto.
        Course_4_SCV_2_e: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">length</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">400</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">sides</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">10</title>
                            </block>
                          </value>
                          <next>
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">sides</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="draw_colour" inline="true" id="draw-color">
                                  <value name="COLOUR">
                                    <block type="colour_picker">
                                      <title name="COLOUR">#ff0000</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">sides</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="variables_get">
                                              <title name="VAR">sides</title>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="draw_move" inline="true">
                                              <title name="DIR">moveForward</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="variables_get">
                                                      <title name="VAR">length</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                                                      <title name="OP">DIVIDE</title>
                                                      <value name="A">
                                                        <block type="math_number">
                                                          <title name="NUM">360</title>
                                                        </block>
                                                      </value>
                                                      <value name="B">
                                                        <block type="variables_get">
                                                          <title name="VAR">sides</title>
                                                        </block>
                                                      </value>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </statement>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </statement>
                                      <next>
                                        <block type="jump" inline="true">
                                          <title name="DIR">jumpForward</title>
                                          <value name="VALUE">
                                            <block type="math_arithmetic" inline="true">
                                              <title name="OP">DIVIDE</title>
                                              <value name="A">
                                                <block type="variables_get">
                                                  <title name="VAR">length</title>
                                                </block>
                                              </value>
                                              <value name="B">
                                                <block type="variables_get">
                                                  <title name="VAR">sides</title>
                                                </block>
                                              </value>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="draw_turn" inline="true">
                                              <title name="DIR">turnRight</title>
                                              <value name="VALUE">
                                                <block type="math_arithmetic" inline="true">
                                                  <title name="OP">DIVIDE</title>
                                                  <value name="A">
                                                    <block type="math_number">
                                                      <title name="NUM">360</title>
                                                    </block>
                                                  </value>
                                                  <value name="B">
                                                    <block type="variables_get">
                                                      <title name="VAR">sides</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </value>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 3:
        Course_4_SCV_3_a: Usa il blocco con le operazioni per aggiungere e sottrarre
          punti alla variabile <i>points</i> (punteggio) quando i personaggi si toccano.
        Course_4_SCV_3_b: Se vuoi, puoi modificare il parametro che cambia la velocità
          alla quale si muove il cane ogni volta che premi le frecce.
        Course_4_SCV_3_c: |-
          **Soluzione:**

          <xml><block type="when_run"><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_number"><title name="NUM">0</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">up</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">1</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">down</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">4</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">left</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">8</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenArrow"><title name="VALUE">right</title><next><block type="studio_moveDistanceParams" inline="true"><title name="SPRITE">0</title><title name="DIR">2</title><value name="DISTANCE"><block type="math_number"><title name="NUM">25</title></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">1</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">2</title></block></value></block></value></block></next></block><block type="studio_whenSpriteCollided"><title name="SPRITE1">0</title><title name="SPRITE2">2</title><next><block type="variables_set" inline="false"><title name="VAR">points</title><value name="VALUE"><block type="math_arithmetic" inline="true"><title name="OP">ADD</title><value name="A"><block type="variables_get"><title name="VAR">points</title></block></value><value name="B"><block type="math_number"><title name="NUM">3</title></block></value></block></value></block></next></block>
          <block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">2</title>
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">points</title>
                  <value name="VALUE">
                    <block type="math_arithmetic" inline="true">
                      <title name="OP">MINUS</title>
                      <value name="A">
                        <block type="variables_get">
                          <title name="VAR">points</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                    </block>
                  </value>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 4:
        Course_4_SCV_4_a: 'Per questo esercizio servono 3 variabili: una per le dosi
          di nettare, una per quelle di miele ed una per la distanza da percorrere
          ad ogni ciclo.'
        Course_4_SCV_4_b: 'Servono tre cicli all''interno del ciclo principale: uno
          per andare avanti, uno per raccogliere il nettare ed uno per fare il miele.'
        Course_4_SCV_4_c: "L'ape dovrebbe seguire un percorso in cui raccoglie prima
          tutto il nettare (andando a zig-zag verso destra e verso l'alto) e poi tutto
          il miele (andando a zig-zag verso il basso e verso sinistra):  \n\n![](https://images.code.org/78f8fb83da67c5b80126555a362b8b20-image-1469641782259.png)"
        Course_4_SCV_4_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">honey</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">nectar</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">6</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">5</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">nectar</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward"/>
                              </statement>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">nectar</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_nectar"/>
                                  </statement>
                                  <next>
                                    <block type="maze_moveForward">
                                      <next>
                                        <block type="controls_repeat_ext" inline="true">
                                          <value name="TIMES">
                                            <block type="variables_get">
                                              <title name="VAR">honey</title>
                                            </block>
                                          </value>
                                          <statement name="DO">
                                            <block type="maze_honey"/>
                                          </statement>
                                          <next>
                                            <block type="maze_moveForward">
                                              <next>
                                                <block type="maze_turn">
                                                  <title name="DIR">turnRight</title>
                                                  <next>
                                                    <block type="variables_set" inline="false">
                                                      <title name="VAR">honey</title>
                                                      <value name="VALUE">
                                                        <block type="math_arithmetic" inline="true">
                                                          <title name="OP">ADD</title>
                                                          <value name="A">
                                                            <block type="variables_get">
                                                              <title name="VAR">honey</title>
                                                            </block>
                                                          </value>
                                                          <value name="B">
                                                            <block type="math_number">
                                                              <title name="NUM">1</title>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </value>
                                                      <next>
                                                        <block type="variables_set" inline="false">
                                                          <title name="VAR">nectar</title>
                                                          <value name="VALUE">
                                                            <block type="math_arithmetic" inline="true">
                                                              <title name="OP">MINUS</title>
                                                              <value name="A">
                                                                <block type="variables_get">
                                                                  <title name="VAR">nectar</title>
                                                                </block>
                                                              </value>
                                                              <value name="B">
                                                                <block type="math_number">
                                                                  <title name="NUM">1</title>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </next>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 5:
        Course_4_SCV_5_a: "L'ape dovrebbe seguire un percorso in cui raccoglie prima
          tutto il nettare (andando a zig-zag verso destra e verso l'alto) e poi tutto
          il miele (andando a zig-zag verso il basso e verso sinistra):  \n\n![](https://images.code.org/7f6f09c55cf9552a91fc1d33f44a7315-image-1469641639330.png)"
        Course_4_SCV_5_b: Ad ogni ripetizione del ciclo che fa percorrere all'ape
          questo tracciato, sui fiori ci sono due dosi di nettare in meno e l'ape
          deve produrre una dose di miele in più.
        Course_4_SCV_5_c: Ad ogni ripetizione di questo ciclo il numero di passi che
          l'ape deve fare per arrivare al fiore è uguale al numero di dosi di nettare
          sul fiore stesso.
        Course_4_SCV_5_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set" inline="false">
                  <title name="VAR">honey</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">nectar</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="controls_repeat_ext" inline="true">
                              <value name="TIMES">
                                <block type="variables_get">
                                  <title name="VAR">nectar</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                  <next>
                                    <block type="controls_repeat_ext" inline="true">
                                      <value name="TIMES">
                                        <block type="variables_get">
                                          <title name="VAR">nectar</title>
                                        </block>
                                      </value>
                                      <statement name="DO">
                                        <block type="maze_nectar"/>
                                      </statement>
                                      <next>
                                        <block type="maze_move">
                                          <title name="DIR">moveForward</title>
                                          <next>
                                            <block type="controls_repeat_ext" inline="true">
                                              <value name="TIMES">
                                                <block type="variables_get">
                                                  <title name="VAR">honey</title>
                                                </block>
                                              </value>
                                              <statement name="DO">
                                                <block type="maze_honey"/>
                                              </statement>
                                              <next>
                                                <block type="variables_set" inline="false">
                                                  <title name="VAR">honey</title>
                                                  <value name="VALUE">
                                                    <block type="math_arithmetic" inline="true">
                      <title name="OP">ADD</title>
                      <value name="A">
                        <block type="variables_get">
                          <title name="VAR">honey</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">1</title>
                        </block>
                      </value>
                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="variables_set" inline="false">
                                                      <title name="VAR">nectar</title>
                                                      <value name="VALUE">
                                                        <block type="math_arithmetic" inline="true">
                      <title name="OP">MINUS</title>
                      <value name="A">
                        <block type="variables_get">
                          <title name="VAR">nectar</title>
                        </block>
                      </value>
                      <value name="B">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                    </block>
                                                      </value>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      Course 4 SCV 6:
        Course_4_SCV_6_b: 'Ogni ripetizione del pentagono è per metà sovrapposta alla
          precedente: pertanto al termine del disegno di ogni pentagono si gira di
          `180`/`sides` gradi e vanno effettuate `2` x`sides` ripetizioni per completare
          il giro di 360 gradi.'
        Course_4_SCV_6_c: 'Ognuno dei lati del pentagono ha una lunghezza (`length`)
          di 70 pixel ed è composto da 5 segmenti "zig" di un colore e 5 segmenti
          "zag" di un altro colore: ogni segmento è quindi lungo `length` / `sides`
          pixel.'
        Course_4_SCV_6_d: |-
          -   Sono necessari 3 "cicli annidati", il più esterno per ripetere i pentagoni, quello intermedio per disegnare il singolo pentagono, quello più interno per disegnare il singolo lato. <br>
          -   Il colore dei segmenti "zig" ha le seguenti componenti: rosso=0, verde=175, blu=200; quello degli "zag" ha: rosso=100, verde=50, blu=150.
        Course_4_SCV_6_e: Per disegnare lo zig bisogna ruotare a sinistra di `360`/`sides`,
          per lo zag a destra della stessa quantità.
        Course_4_SCV_6_f: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="variables_set" inline="false">
                      <title name="VAR">red1</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">0</title>
                        </block>
                      </value>
                      <next>
                        <block type="variables_set" inline="false">
                          <title name="VAR">green1</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">175</title>
                            </block>
                          </value>
                          <next>
                            <block type="variables_set" inline="false">
                              <title name="VAR">blue1</title>
                              <value name="VALUE">
                                <block type="math_number">
                                  <title name="NUM">200</title>
                                </block>
                              </value>
                              <next>
                                <block type="variables_set" inline="false">
                                  <title name="VAR">red2</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">100</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="variables_set" inline="false">
                                      <title name="VAR">green2</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">50</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="variables_set" inline="false">
                                          <title name="VAR">blue2</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">150</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="variables_set" inline="false">
                                              <title name="VAR">length</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">70</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="variables_set" inline="false">
                                                  <title name="VAR">sides</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">5</title>
                                                    </block>
                                                  </value>
                                                  <next>
                                                    <block type="controls_repeat_ext" inline="true">
                                                      <value name="TIMES">
                                                        <block type="math_arithmetic" inline="true">
                                                          <title name="OP">MULTIPLY</title>
                                                          <value name="A">
                                                            <block type="math_number">
                                                              <title name="NUM">2</title>
                                                            </block>
                                                          </value>
                                                          <value name="B">
                                                            <block type="variables_get">
                                                              <title name="VAR">sides</title>
                                                            </block>
                                                          </value>
                                                        </block>
                                                      </value>
                                                      <statement name="DO">
                                                        <block type="controls_repeat_ext" inline="true">
                                                          <value name="TIMES">
                                                            <block type="variables_get">
                                                              <title name="VAR">sides</title>
                                                            </block>
                                                          </value>
                                                          <statement name="DO">
                                                            <block type="controls_repeat_ext" inline="true">
                                                              <value name="TIMES">
                                                                <block type="variables_get">
                                                                  <title name="VAR">sides</title>
                                                                </block>
                                                              </value>
                                                              <statement name="DO">
                                                                <block type="draw_colour" inline="true" id="draw-color">
                                                                  <value name="COLOUR">
                                                                    <block type="colour_rgb" inline="false">
                                                                      <value name="RED">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">red1</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="GREEN">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">green1</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="BLUE">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">blue1</title>
                                                                      </block>
                                                                      </value>
                                                                    </block>
                                                                  </value>
                                                                  <next>
                                                                    <block type="draw_move" inline="true">
                                                                      <title name="DIR">moveForward</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">length</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_turn" inline="true">
                                                                      <title name="DIR">turnLeft</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="math_number">
                                                                      <title name="NUM">360</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_colour" inline="true" id="draw-color">
                                                                      <value name="COLOUR">
                                                                      <block type="colour_rgb" inline="false">
                                                                      <value name="RED">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">red2</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="GREEN">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">green2</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="BLUE">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">blue2</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_move" inline="true">
                                                                      <title name="DIR">moveForward</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">length</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      <next>
                                                                      <block type="draw_turn" inline="true">
                                                                      <title name="DIR">turnRight</title>
                                                                      <value name="VALUE">
                                                                      <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="math_number">
                                                                      <title name="NUM">360</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </value>
                                                                      </block>
                                                                      </next>
                                                                      </block>
                                                                      </next>
                                                                      </block>
                                                                      </next>
                                                                      </block>
                                                                      </next>
                                                                    </block>
                                                                  </next>
                                                                </block>
                                                              </statement>
                                                              <next>
                                                                <block type="draw_turn" inline="true">
                                                                  <title name="DIR">turnRight</title>
                                                                  <value name="VALUE">
                                                                    <block type="math_arithmetic" inline="true">
                                                                      <title name="OP">DIVIDE</title>
                                                                      <value name="A">
                                                                      <block type="math_number">
                                                                      <title name="NUM">360</title>
                                                                      </block>
                                                                      </value>
                                                                      <value name="B">
                                                                      <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                      </block>
                                                                      </value>
                                                                    </block>
                                                                  </value>
                                                                </block>
                                                              </next>
                                                            </block>
                                                          </statement>
                                                          <next>
                                                            <block type="draw_turn" inline="true">
                                                              <title name="DIR">turnRight</title>
                                                              <value name="VALUE">
                                                                <block type="math_arithmetic" inline="true">
                                                                  <title name="OP">DIVIDE</title>
                                                                  <value name="A">
                                                                    <block type="math_number">
                                                                      <title name="NUM">180</title>
                                                                    </block>
                                                                  </value>
                                                                  <value name="B">
                                                                    <block type="variables_get">
                                                                      <title name="VAR">sides</title>
                                                                    </block>
                                                                  </value>
                                                                </block>
                                                              </value>
                                                            </block>
                                                          </next>
                                                        </block>
                                                      </statement>
                                                    </block>
                                                  </next>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      CourseD_Dance_Party_01:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Assicurati che sullo schermo appaia un ballerino.

          _L'esercizio terminerà dopo 4 battute._
        challenges: |-
          **Sfide supplementari**

          -   Cambia brano musicale.
          -   Rinomina il tuo ballerino.
      CourseD_Dance_Party_02:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Il ballerino deve cambiare mossa dopo 4 battute.

          _L'esercizio terminerà dopo 8 battute._
      CourseD_Dance_Party_03:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Dopo 6 battute, il tuo ballerino dovrà ballare in modo diverso rispetto a come ballava dopo 4 battute.

          _L'esercizio terminerà dopo 12 battute._
      CourseD_Dance_Party_04:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Devi fare in modo che lo sfondo cambi effetto prima della settima battuta della canzone.

          _L'esercizio terminerà dopo 10 battute._
        challenges: |-
          **Sfida supplementare**

          Cambia effetto allo sfondo in momenti diversi della canzone agganciando il nuovo blocco a diversi eventi <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"measures"</title></block></xml>.
      CourseD_Dance_Party_06:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Devi avere almeno due ballerini.

          \*L'esercizio terminerà dopo 6 battute. \*
        challenges: |-
          **Sfida supplementare**

          -   Aggiungi un terzo ballerino (o tutti quelli che vuoi!)
          -   Fai eseguire ai tuoi ballerini delle mosse diverse in momenti diversi della canzone.
      CourseD_Dance_Party_08:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Due ballerini devono avere una dimensione diversa da 100.

          \*L'esercizio terminerà dopo 6 battute. \*
        challenges: |-
          **Sfida supplementare**

          -   Fai qualche esperimento modificando le altre proprietà (larghezza, altezza, rotazione e così via)
      CourseD_Dance_Party_09:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Modifica la tonalità di almeno un ballerino.

          _L'esercizio terminerà dopo 8 battute._
      CourseD_Dance_Party_10:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Le proprietà di due o più ballerini devono essere cambiate.

          \*L'esercizio terminerà dopo 8 battute. \*
      CourseD_Dance_Party_11:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Sii semplicemente creativo!

          _L'esercizio terminerà dopo 8 battute._
      CourseD_Dance_Party_11_5:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Sii semplicemente creativo!

          _L'esercizio terminerà dopo 8 battute._
      CourseD_Dance_Party_11b:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Usa il blocco `quando si preme a sinistra` per far eseguire al Robot una mossa di ballo premendo quel tasto.

          _L'esercizio terminerà dopo 8 battute._
      CourseE_HOC 2018 Level_10:
        voyage_aquatic_10a: Guarda le **Lanterne marine** ![](https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png)?
          Come potresti usare un'istruzione condizionale per attraversare il Monumento
          oceanico?
      CourseE_HOC 2018 Level_7a:
        aquatic7: Puoi usare il blocco `se c'è strada` per girare dalla parte giusta.
      CourseE_HOC 2018 Level_9b:
        voyage_aquatic_9a: Che bella barriera corallina! I coralli blu ti suggeriscono
          quando girare a **destra** e quelli rossi quando girare a **sinistra**.
      Dance_2019_01:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Assicurati che sullo schermo appaia un ballerino.

          _L'esercizio terminerà dopo 4 battute._
      Dance_2019_04:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Il ballerino deve cambiare mossa dopo 4 battute.

          _L'esercizio terminerà dopo 8 battute._
      Dance_2019_05:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Dopo 6 battute, il tuo ballerino dovrà ballare in modo diverso rispetto a come ballava dopo 4 battute.

          _L'esercizio terminerà dopo 12 battute._
      Dance_Party_01:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Assicurati che sullo schermo appaia un ballerino.

          _L'esercizio terminerà dopo 4 battute._
        challenges: |-
          **Sfide supplementari**

          -   Cambia brano musicale.
          -   Rinomina il tuo ballerino.
      Dance_Party_02:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Il ballerino deve cambiare mossa dopo 4 battute.

          _L'esercizio terminerà dopo 8 battute._
      Dance_Party_03:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Dopo 6 battute, il tuo ballerino dovrà ballare in modo diverso rispetto a come ballava dopo 4 battute.

          _L'esercizio terminerà dopo 12 battute._
      Dance_Party_04:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Devi fare in modo che lo sfondo cambi effetto prima della settima battuta della canzone.

          _L'esercizio terminerà dopo 10 battute._
        challenges: |-
          **Sfida supplementare**

          Cambia effetto allo sfondo in momenti diversi della canzone agganciando il nuovo blocco a diversi eventi <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"measures"</title></block></xml>.
      Dance_Party_06:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Devi avere almeno due ballerini.

          \*L'esercizio terminerà dopo 6 battute. \*
        challenges: |-
          **Sfida supplementare**

          -   Aggiungi un terzo ballerino (o tutti quelli che vuoi!)
          -   Fai eseguire ai tuoi ballerini delle mosse diverse in momenti diversi della canzone.
      Dance_Party_08:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Due ballerini devono avere una dimensione diversa da 100.

          \*L'esercizio terminerà dopo 6 battute. \*
        challenges: |-
          **Sfida supplementare**

          -   Fai qualche esperimento modificando le altre proprietà (larghezza, altezza, rotazione e così via)
      Dance_Party_09:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Modifica la tonalità di almeno un ballerino.

          _L'esercizio terminerà dopo 8 battute._
      Dance_Party_10:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Le proprietà di due o più ballerini devono essere cambiate.

          \*L'esercizio terminerà dopo 8 battute. \*
      Dance_Party_11:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Sii semplicemente creativo!

          _L'esercizio terminerà dopo 8 battute._
      Dance_Party_11_5:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Sii semplicemente creativo!

          _L'esercizio terminerà dopo 8 battute._
      Dance_Party_11b:
        validation: |-
          **Come faccio a completare questo esercizio?**

          -   Usa il blocco `quando si preme a sinistra` per far eseguire al Robot una mossa di ballo premendo quel tasto.

          _L'esercizio terminerà dopo 8 battute._
      Function intro Ryan:
        Function_intro_Ryan_b: Se usi le funzioni in modo corretto, questo è il percorso
          che seguirai...
        Function_intro_Ryan_a: Puoi richiamare una funzione più volte in un programma!  Prova
          a richiamarla due volte per risolvere questo esercizio.
      Function intro Ryan_2019:
        Function_intro_Ryan_b: Se usi le funzioni in modo corretto, questo è il percorso
          che seguirai...
        Function_intro_Ryan_a: Puoi richiamare una funzione più volte in un programma!  Prova
          a richiamarla due volte per risolvere questo esercizio.
      HOC 2018 Level_10:
        voyage_aquatic_10a: Guarda le **Lanterne marine** ![](https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png)?
          Come potresti usare un'istruzione condizionale per attraversare il Monumento
          oceanico?
      HOC 2018 Level_7a:
        aquatic7: Puoi usare il blocco `se c'è strada` per girare dalla parte giusta.
      HOC 2018 Level_9b:
        voyage_aquatic_9a: Che bella barriera corallina! I coralli blu ti suggeriscono
          quando girare a **destra** e quelli rossi quando girare a **sinistra**.
      MC_HOC_2017_01_RETRY:
        MC_HOC_2017_01_RETRY_a: Trascina un blocco `vai avanti` dalla cassetta degli
          attrezzi all'area di lavoro e aggancialo sotto al blocco `quando si clicca
          su "Esegui"`.
        MC_HOC_2017_01_RETRY_b: Ricorda di cliccare il pulsante "Esegui" per far eseguire
          il codice all'Agente.
        MC_HOC_2017_01_RETRY_c: Quando l'Agente ha terminato di eseguire il suo codice,
          devi muovere il giocatore con le frecce!
      MC_HOC_2017_01_RETRY_2019:
        MC_HOC_2017_01_RETRY_a: Trascina un blocco `vai avanti` dalla cassetta degli
          attrezzi all'area di lavoro e aggancialo sotto al blocco `quando si clicca
          su "Esegui"`.
        MC_HOC_2017_01_RETRY_b: Ricorda di cliccare il pulsante "Esegui" per far eseguire
          il codice all'Agente.
        MC_HOC_2017_01_RETRY_c: Quando l'Agente ha terminato di eseguire il suo codice,
          devi muovere il giocatore con le frecce!
      MC_HOC_2017_02_Cole:
        MC_HOC_2017_02_Cole_a: Muovi l'Agente due caselle in avanti per farlo posizionare
          sulla pedana a pressione. Questo farà aprire la porta per il tuo giocatore.
        MC_HOC_2017_02_Cole_b: |-
          Premi "Esegui"!

          Puoi eseguire il tuo codice anche se non è corretto.  Esegui e modifica il codice diverse volte finché non hai capito dov'è l'errore.
        MC_HOC_2017_02_Cole_c: Dopo che l'Agente ha fatto aprire la porta, usa le
          frecce per muovere il giocatore verso la mappa!
        MC_HOC_2017_02_Cole_d: Assicurati che l'Agente stia seguendo il percorso indicato
          dalla linea bianca tratteggiata!
      MC_HOC_2017_02_Cole_2019:
        MC_HOC_2017_02_Cole_a: Muovi l'Agente due caselle in avanti per farlo posizionare
          sulla pedana a pressione. Questo farà aprire la porta per il tuo giocatore.
        MC_HOC_2017_02_Cole_b: |-
          Premi "Esegui"!

          Puoi eseguire il tuo codice anche se non è corretto.  Esegui e modifica il codice diverse volte finché non hai capito dov'è l'errore.
        MC_HOC_2017_02_Cole_c: Dopo che l'Agente ha fatto aprire la porta, usa le
          frecce per muovere il giocatore verso la mappa!
        MC_HOC_2017_02_Cole_d: Assicurati che l'Agente stia seguendo il percorso indicato
          dalla linea bianca tratteggiata!
      MC_HOC_2017_03_Cole:
        MC_HOC_2017_03_Cole_a: Dopo aver posizionato l'Agente sulla pedana a pressione,
          usa le frecce per far camminare il giocatore verso la bussola!
        MC_HOC_2017_03_Cole_b: Il codice ti sembra troppo lungo?  Cerca di capire
          come renderlo più breve usando un blocco `ripeti ... volte`!
      MC_HOC_2017_03_Cole_2019:
        MC_HOC_2017_03_Cole_a: Dopo aver posizionato l'Agente sulla pedana a pressione,
          usa le frecce per far camminare il giocatore verso la bussola!
        MC_HOC_2017_03_Cole_b: Il codice ti sembra troppo lungo?  Cerca di capire
          come renderlo più breve usando un blocco `ripeti ... volte`!
      MC_HOC_2017_04POINT5_RYAN:
        MC_HOC_2017_04POINT5_RYAN_b: Usa il blocco `gira a destra` per cambiare la
          direzione dell'Agente.
        MC_HOC_2017_04POINT5_RYAN_a: L'Agente ha bisogno di arrivare solo alla prima
          pedana a pressione affinché il giocatore possa raggiungere l'ascia.
      MC_HOC_2017_04POINT5_RYAN_2019:
        MC_HOC_2017_04POINT5_RYAN_b: Usa il blocco `gira a destra` per cambiare la
          direzione dell'Agente.
        MC_HOC_2017_04POINT5_RYAN_a: L'Agente ha bisogno di arrivare solo alla prima
          pedana a pressione affinché il giocatore possa raggiungere l'ascia.
      MC_HOC_2017_04_Cole:
        MC_HOC_2017_04_Cole_a: L'Agente dovrebbe usare 7 blocchi `vai avanti`.  Come
          puoi sfruttare un ciclo `ripeti ... volte` per ottenere lo stesso risultato
          con meno blocchi?
        MC_HOC_2017_04_Cole_c: |-
          Premi "Esegui"!

          Puoi eseguire il tuo codice anche se non è corretto.  Esegui e modifica il codice diverse volte finché non hai capito dov'è l'errore.
        MC_HOC_2017_04_Cole_b: Quando l'Agente raggiunge la pedana a pressione, la
          porta si apre.
      MC_HOC_2017_04_Cole_2019:
        MC_HOC_2017_04_Cole_a: L'Agente dovrebbe usare 7 blocchi `vai avanti`.  Come
          puoi sfruttare un ciclo `ripeti ... volte` per ottenere lo stesso risultato
          con meno blocchi?
        MC_HOC_2017_04_Cole_c: |-
          Premi "Esegui"!

          Puoi eseguire il tuo codice anche se non è corretto.  Esegui e modifica il codice diverse volte finché non hai capito dov'è l'errore.
        MC_HOC_2017_04_Cole_b: Quando l'Agente raggiunge la pedana a pressione, la
          porta si apre.
      MC_HOC_2017_05_Cole:
        MC_HOC_2017_05_Cole_a: Sapevi che puoi mettere più blocchi di codice all'interno
          di un ciclo?  Per completare questo esercizio, prova ad inserire all'interno
          di un ciclo `ripeti ... volte` il codice per andare avanti **e** mettere
          un asse di quercia.
        MC_HOC_2017_05_Cole_b: Porta l'Agente al di là del fiume mentre costruisce
          un ponte.
      MC_HOC_2017_05_Cole_2019:
        MC_HOC_2017_05_Cole_a: Sapevi che puoi mettere più blocchi di codice all'interno
          di un ciclo?  Per completare questo esercizio, prova ad inserire all'interno
          di un ciclo `ripeti ... volte` il codice per andare avanti **e** mettere
          un asse di quercia.
        MC_HOC_2017_05_Cole_b: Porta l'Agente al di là del fiume mentre costruisce
          un ponte.
      MC_HOC_2017_06_Cole:
        MC_HOC_2017_06_Cole_a: Quante volte viene eseguito questo ciclo?  Quante volte
          _dovrebbe_ essere eseguito?
        MC_HOC_2017_06_Cole_b: 'Aiuta l''Agente a costruire un ponte attraversando
          tutto il fiume! '
      MC_HOC_2017_06_Cole_2019:
        MC_HOC_2017_06_Cole_a: Quante volte viene eseguito questo ciclo?  Quante volte
          _dovrebbe_ essere eseguito?
        MC_HOC_2017_06_Cole_b: 'Aiuta l''Agente a costruire un ponte attraversando
          tutto il fiume! '
      MC_HOC_2017_07_Cole:
        MC_HOC_2017_07_Cole_c: Tutto ciò che deve fare l'Agente è distruggere il ghiaccio
          per liberare la strada che porta al vagonetto.
        MC_HOC_2017_07_Cole_a: Per risolvere questo esercizio, scopri cosa fa la funzione
          `libera il passaggio` e richiamala il numero di volte necessario usando
          il piccolo blocco verde `libera il passaggio` presente nella cassetta degli
          attrezzi.
        MC_HOC_2017_07_Cole_b: Per risolvere questo esercizio, prova a mescolare i
          blocchi delle funzioni con altri blocchi presenti nella cassetta degli attrezzi.
      MC_HOC_2017_07_Cole_2019:
        MC_HOC_2017_07_Cole_c: Tutto ciò che deve fare l'Agente è distruggere il ghiaccio
          per liberare la strada che porta al vagonetto.
        MC_HOC_2017_07_Cole_a: Per risolvere questo esercizio, scopri cosa fa la funzione
          `libera il passaggio` e richiamala il numero di volte necessario usando
          il piccolo blocco verde `libera il passaggio` presente nella cassetta degli
          attrezzi.
        MC_HOC_2017_07_Cole_b: Per risolvere questo esercizio, prova a mescolare i
          blocchi delle funzioni con altri blocchi presenti nella cassetta degli attrezzi.
      MC_HOC_2017_10_RETRY:
        MC_HOC_2017_10_Cole_b: Non sai dove andare?  Dovresti seguire la linea tratteggiata!
        MC_HOC_2017_10_Cole_a: Usa le funzioni per rendere più facile la soluzione
          di questo esercizio!
      MC_HOC_2017_10_RETRY_2019:
        MC_HOC_2017_10_Cole_b: Non sai dove andare?  Dovresti seguire la linea tratteggiata!
        MC_HOC_2017_10_Cole_a: Usa le funzioni per rendere più facile la soluzione
          di questo esercizio!
      MC_HOC_2017_Ali:
        MC_HOC_2017_08_RY_a: |-
          Premi "Esegui"!

          Puoi eseguire il tuo codice anche se non è corretto.  Esegui e modifica il codice diverse volte finché non hai capito dov'è l'errore.
        MC_HOC_2017_08_RY_b: Ci sono TANTISSIMI modi per risolvere questo esercizio.
          Provane alcuni!
        MC_HOC_2017_08_RY_c: Prova a seguire la linea tratteggiata per trovare un
          semplice percorso attraverso la lava.
      MC_HOC_2017_Ali_2019:
        MC_HOC_2017_08_RY_a: |-
          Premi "Esegui"!

          Puoi eseguire il tuo codice anche se non è corretto.  Esegui e modifica il codice diverse volte finché non hai capito dov'è l'errore.
        MC_HOC_2017_08_RY_b: Ci sono TANTISSIMI modi per risolvere questo esercizio.
          Provane alcuni!
        MC_HOC_2017_08_RY_c: Prova a seguire la linea tratteggiata per trovare un
          semplice percorso attraverso la lava.
      MC_HOC_2017_FP20x20:
        MC_HOC_2017_13_Cole_a: Prova a far costruire delle rotaie all'Agente, in modo
          da poter esplorare il mondo!
      MC_HOC_2017_FP20x20_2019:
        MC_HOC_2017_13_Cole_a: Prova a far costruire delle rotaie all'Agente, in modo
          da poter esplorare il mondo!
      NEW Course 4 Artist Functions 13:
        NEW_Course_4_Artist_Functions_13_a: |-
          <https://studio.code.org/s/course4/stage/12/puzzle/10>

          Modifica la funzione `draw a line of squares` (<i>disegna una fila di quadrati</i>) in modo da non doverla richiamare due volte.
        NEW_Course_4_Artist_Functions_13_c: |-
          <https://studio.code.org/s/course4/stage/12/puzzle/10>

          Come dovresti modificare il codice per disegnare una stella con linee normali invece che file di quadrati?
      NEW Course 4 Artist Functions 4:
        NEW_Course_4_Artist_Functions_4_a: Devi utilizzare un blocco `gira a destra
          di 120 gradi` dopo ogni quadrato.
      NEW Course 4 Artist Functions 9:
        NEW_Course_4_Artist_Functions_9_a: |-
          Prova ad eseguire il codice prima di aggiungere qualunque blocco. Riesci a capire cos'è che fa disegnare il quadrato nel posto sbagliato?<br>
          <br>
          Se non riesci a capire in che punto il codice è sbagliato, prova a rallentare il movimento dell'artista spostando il regolatore di velocità verso il simbolo della tartaruga.
        NEW_Course_4_Artist_Functions_9_b: Prova ad usare un blocco `gira a ... di
          ... gradi`.
      NEW Course 4 Artist Params 11:
        NEW_Course_4_Artist_Params_11_a: Clicca su "Esegui" per vedere cosa fa la
          funzione. Nota che la funzione è stata definita con due parametri, ma il
          suo codice ne usa uno solo.
      NEW Course 4 Artist Params 13:
        NEW_Course_4_Artist_Params_13_a: Nella funzione `draw a polygon` (<i>disegna
          un poligono</i>) devi dividere il valore del perimetro per il numero di
          lati del poligono per ottenere la lunghezza di ogni lato. In questo modo
          riesci a disegnare una figura il cui perimetro ha sempre la stessa lunghezza
          indipendentemente dal numero dei lati.
      NEW Course 4 Artist Params 14:
        NEW_Course_4_Artist_Params_14_a: Va benissimo sperimentare il comportamento
          della funzione per capire come si comporta al variare del valore dei parametri.
      NEW Course 4 Artist Params inspire:
        brush_width: Come prima cosa, assegna lo spessore del pennello a 1 ed il suo
          colore a blu.
        double_loop: Prova ad inserire un "ciclo con contatore" all'interno di un
          altro ciclo.
        specifics: |-
          In ogni petalo, il poligono più piccolo ha 3 lati ed il più grande ne ha 17.<br>
          <br>
          Nel blocco `imposta l'opacità`, usa un blocco divisione per rendere il colore sempre più trasparente man mano che il numero dei lati del poligono aumenta (minore è il valore dell'opacità più trasparente è il colore).
        after: Quando hai finito un petalo, assicurati di spostarti in avanti di 20
          pixel prima di ruotare di 60 gradi per iniziare il petalo successivo.
        solution: |-
          **Soluzione:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      NEW Course 4 Bee For Loops 10a:
        NEW_Course_4_Bee_For_Loops_10a_a: Riesci a trovare una relazione tra il numero
          di passi che l'ape fa per arrivare al fiore ed il numero di dosi di nettare
          che deve raccogliere?
        NEW_Course_4_Bee_For_Loops_10a_b: Devi usare 2 blocchi `ripeti ... volte`
          e uno di questi deve usare un blocco con operazioni matematiche.
      NEW Course 4 Bee For Loops 7:
        NEW_Course_4_Bee_For_Loops_7_a: Prova ad usare nel _ciclo con contatore_ un
          valore della variabile `counter` (_contatore_) che viene modificato con
          un blocco matematico man mano che ti sposti e raccogli il nettare.
      NEW Course 4 Bee For Loops 8:
        NEW_Course_4_Bee_For_Loops_8_a: Se il tuo ciclo sta contando in avanti, l'incremento
          viene aggiunto alla variabile`counter` (_contatore_) ad ogni ciclo. Quanto
          bisogna aggiungere in questo caso ad ogni valore per ottenere il valore
          successivo nella sequenza?
      Overworld Avoid Monsters:
        mc_8_a: Puoi scegliere tra diversi percorsi. Qual'è il più corto?
        mc_8_b: Usa il blocco `ripeti ... volte` per semplificare il tuo programma.
        mc_8_c: Il tuo obiettivo è di raggiungere l'entrata della casa nella parte
          alta dello schermo.
      Overworld Avoid Monsters_2019:
        mc_8_a: Puoi scegliere tra diversi percorsi. Qual'è il più corto?
        mc_8_b: Usa il blocco `ripeti ... volte` per semplificare il tuo programma.
        mc_8_c: Il tuo obiettivo è di raggiungere l'entrata della casa nella parte
          alta dello schermo.
      Overworld Chop Tree:
        mc_2_a: Devi usare due volte il blocco `vai avanti` per arrivare di fronte
          all'albero.
        mc_2_b: L'istruzione `distruggi` abbatte l'albero di fronte a te.
      Overworld Chop Tree_2019:
        mc_2_a: Devi usare due volte il blocco `vai avanti` per arrivare di fronte
          all'albero.
        mc_2_b: L'istruzione `distruggi` abbatte l'albero di fronte a te.
      Overworld Chop Trees:
        mc_4_a: Puoi abbattere gli alberi in qualsiasi ordine, ma qual'è il percorso
          che ti fa usare il minor numero possibile di blocchi?
        mc_4_b: L'istruzione `distruggi` abbatte l'albero di fronte a te.
      Overworld Chop Trees_2019:
        mc_4_a: Puoi abbattere gli alberi in qualsiasi ordine, ma qual'è il percorso
          che ti fa usare il minor numero possibile di blocchi?
        mc_4_b: L'istruzione `distruggi` abbatte l'albero di fronte a te.
      Overworld House Frame Chosen:
        mc_6_a: Clicca la freccia sulla destra del blocco `metti` per scegliere il
          materiale da posizionare.
        mc_6_b: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
        mc_6_c: Puoi mettere più di un blocco all'interno del blocco `ripeti ... volte`.
      Overworld House Frame Chosen_2019:
        mc_6_a: Clicca la freccia sulla destra del blocco `metti` per scegliere il
          materiale da posizionare.
        mc_6_b: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
        mc_6_c: Puoi mettere più di un blocco all'interno del blocco `ripeti ... volte`.
      Overworld Move to Sheep:
        mc_1_a: Il blocco `vai avanti` è in cima alla cassetta degli attrezzi (la
          colonna scura qui sotto).
        mc_1_b: Controlla che entrambi i blocchi `vai avanti` siano agganciati al
          blocco `quando si clicca su "Esegui"`.
      Overworld Move to Sheep_2019:
        mc_1_a: Il blocco `vai avanti` è in cima alla cassetta degli attrezzi (la
          colonna scura qui sotto).
        mc_1_b: Controlla che entrambi i blocchi `vai avanti` siano agganciati al
          blocco `quando si clicca su "Esegui"`.
      Overworld Place Wall:
        mc_5_a: Usa prima il blocco `metti` e poi `vai avanti`.
        mc_5_b: Controlla che entrambi i blocchi siano all'interno del blocco `ripeti
          ... volte` per far eseguire il codice più di una volta.
        mc_5_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Overworld Place Wall_2019:
        mc_5_a: Usa prima il blocco `metti` e poi `vai avanti`.
        mc_5_b: Controlla che entrambi i blocchi siano all'interno del blocco `ripeti
          ... volte` per far eseguire il codice più di una volta.
        mc_5_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Overworld Plant Crops:
        mc_7_a: Usa il blocco `semina del grano` per seminarlo nel punto in cui sei.
        mc_7_b: Bisogna seminare il grano in entrambe le strisce di terra marrone
          scuro a fianco dell'acqua.
        mc_7_c: Puoi mettere più di un blocco all'interno del blocco `ripeti ... volte`.
      Overworld Plant Crops_2019:
        mc_7_a: Usa il blocco `semina del grano` per seminarlo nel punto in cui sei.
        mc_7_b: Bisogna seminare il grano in entrambe le strisce di terra marrone
          scuro a fianco dell'acqua.
        mc_7_c: Puoi mettere più di un blocco all'interno del blocco `ripeti ... volte`.
      Overworld Powered Minecart:
        mc_13_a: Usa il blocco `metti binario` (_rail_) per posare un tratto di binari
          nel punto in cui ti trovi.
        mc_13_b: Usa il blocco `ripeti ... volte` per accorciare il tuo programma.
      Overworld Powered Minecart_2019:
        mc_13_a: Usa il blocco `metti binario` (_rail_) per posare un tratto di binari
          nel punto in cui ti trovi.
        mc_13_b: Usa il blocco `ripeti ... volte` per accorciare il tuo programma.
      Overworld Shear Sheep:
        mc_3_a: Per usare il blocco `tosa`, la pecora deve trovarsi di fronte a te.
          Sei di fronte alla pecora?
        mc_3_b: Se hai bisogno di cambiare la direzione verso cui sei rivolto, usa
          il blocco `gira a ...`.
        mc_3_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Overworld Shear Sheep_2019:
        mc_3_a: Per usare il blocco `tosa`, la pecora deve trovarsi di fronte a te.
          Sei di fronte alla pecora?
        mc_3_b: Se hai bisogno di cambiare la direzione verso cui sei rivolto, usa
          il blocco `gira a ...`.
        mc_3_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Underground Avoiding Lava:
        mc_11_a: Tutto il codice per controllare se c'è la lava e coprirla è già pronto.
          Quello che resta da fare è aggiungere un blocco `vai avanti`.
        mc_11_b: L'istruzione `vai avanti` deve essere messa all'interno del blocco
          `se` o dopo?
      Underground Avoiding Lava_2019:
        mc_11_a: Tutto il codice per controllare se c'è la lava e coprirla è già pronto.
          Quello che resta da fare è aggiungere un blocco `vai avanti`.
        mc_11_b: L'istruzione `vai avanti` deve essere messa all'interno del blocco
          `se` o dopo?
      Underground If Statements:
        mc_12_a: I blocchi con le macchioline rosse sono quelli che contengono la
          pietrarossa.
        mc_12_b: Riesci ad usare un blocco `ripeti ... volte` per accorciare il tuo
          programma?
        mc_12_c: Usa un'istruzione condizionale `se` per verificare la presenza di
          lava, quindi coprila con i ciottoli.
      Underground If Statements_2019:
        mc_12_a: I blocchi con le macchioline rosse sono quelli che contengono la
          pietrarossa.
        mc_12_b: Riesci ad usare un blocco `ripeti ... volte` per accorciare il tuo
          programma?
        mc_12_c: Usa un'istruzione condizionale `se` per verificare la presenza di
          lava, quindi coprila con i ciottoli.
      Underground Iron:
        mc_10_a: Il ferro è nei blocchi maculati dietro alla torcia! Come farai ad
          andare lì?
        mc_10_b: Quando sei sul bordo della lava, usa il blocco `metti ciottoli davanti`
          per creare un passaggio sicuro. Poi ci puoi camminare sopra!
        mc_10_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Underground Iron_2019:
        mc_10_a: Il ferro è nei blocchi maculati dietro alla torcia! Come farai ad
          andare lì?
        mc_10_b: Quando sei sul bordo della lava, usa il blocco `metti ciottoli davanti`
          per creare un passaggio sicuro. Poi ci puoi camminare sopra!
        mc_10_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Underground Mining Coal:
        mc_9_a: Sei girato dalla parte giusta? Il blocco `distruggi` scava nel blocco
          davanti a te.
        mc_9_b: I granelli neri nel muro sono carbone! Usa il blocco `distruggi` su
          di essi per estrarre il carbone.
        mc_9_c: Usa il blocco `metti una torcia` per posizionare una torcia nel punto
          in cui ti trovi.
      Underground Mining Coal_2019:
        mc_9_a: Sei girato dalla parte giusta? Il blocco `distruggi` scava nel blocco
          davanti a te.
        mc_9_b: I granelli neri nel muro sono carbone! Usa il blocco `distruggi` su
          di essi per estrarre il carbone.
        mc_9_c: Usa il blocco `metti una torcia` per posizionare una torcia nel punto
          in cui ti trovi.
      comment_intro_maze_2018:
        courseC_maze_programming4_a: I commenti sono utili anche quando altre persone
          tentano di leggere un tuo programma.
        courseC_maze_programming4_b: Aggiungi un commento quando cambi direzione -
          magari per evidenziare cosa sarebbe successo se ti fossi voltato dall'altra
          parte.
      course1_artist_loops_challenge1:
        courseA_artist_loops_challenge1_b: "![](https://images.code.org/34f3bae38f77f07eaf455188c0b008e5-image-1491864823946.png)"
        courseA_artist_loops_challenge1_c: "![](https://images.code.org/24b208839971803f3f6cd6ae41da56df-image-1491864839734.png)"
        courseA_artist_loops_challenge1_d: "![](https://images.code.org/d3ccefffa0cc77bdd4a597cdb49fc85e-image-1491864847347.png)"
      course1_artist_loops_challenge3:
        courseA_artist_loops_challenge2_a: Blocchi come questo <xml>  <block type="simple_move_up_left"/></xml>
          permetteranno all'artista di muoversi in diagonale!
      course1_artist_loops_challenge4:
        courseB_artist_loops_challenge1_a: 'Blocchi come questo: <xml> <block type="simple_move_up_right"/></xml>
          permetteranno all''artista di muoversi in diagonale!'
        courseB_artist_loops_challenge1_b: Quando hai finito di disegnare il primo
          dado, `salta` al successivo!
        courseB_artist_loops_challenge1_c: Dovrai muoverti o saltare due volte su
          alcune linee.
      course1_collector_loops_challenge1:
        courseA_collector_loops_challenge1_a: Prova a cambiare i numeri nei cicli
          se qualcosa va storto.
        courseA_collector_loops_challenge1_b: 'Attenzione: non hai bisogno di usare
          un ciclo se un''azione devi svolgerla una sola volta.'
        courseA_collector_loops_challenge1_c: Ci sono 6 gemme sul lato destro della
          grotta, ma è necessario spostarle e raccoglierle solo 5 volte. Lo sai il
          perché?
      course1_collector_loops_challenge3:
        courseB_collector_loops_challenge1_c: "Muoviti due volte verso Est tra un
          percorso e l'altro:\n\n<xml>\n  <block type=\"maze_moveEast\"><next>\n  <block
          type=\"maze_moveEast\"></block></next></block>\n  </xml>\n\nPuoi riuscirci
          usando solo 14 blocchi. Clicca un altro suggerimento per vedere una possibile
          soluzione. "
        courseB_collector_loops_challenge1_d: |-
          Prova questa soluzione!

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course1_maze_debugging_challenge1:
        courseA_maze_seq_challenge1_a: Alcuni percorsi portano al TNT, se vai troppo
          lontano.
      course1_maze_debugging_challenge2:
        courseB_maze_seq_challenge2_a: Non è necessario aggiungere o rimuovere blocchi
          per risolvere questo esercizio.
        courseB_maze_seq_challenge2_b: Riorganizza i blocchi e prendi la via di mezzo.
      course1_maze_seq_challenge1:
        courseA_maze_seq_challenge2_a: Prova a contare le caselle con un dito. Ma
          ricorda di non tenere conto della casella di partenza!
      course1_maze_seq_challenge2:
        courseB_maze_seq_challenge1_a: Questa volta non puoi seguire il percorso più
          breve.
        courseB_maze_seq_challenge1_b: Prova an andare a ovest per iniziare.
      course1_playlab_events_challenge1:
        courseA_playlab_events_challenge1_a: "Fai apparire il pinguino quando clicchi
          sull'uccellino!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Fai apparire il fantasma quando clicchi
          sul pinguino!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Fai apparire il mostro allegro quando
          clicchi sul fantasma!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Fai apparire il robot quando clicchi
          sul mostro!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Infine, fai apparire il mago quando
          clicchi sul robot!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      course1_playlab_events_challenge2:
        courseA_playlab_events_challenge2_a: "Puoi fare cantare l'uccellino.\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "Puoi far suonare il robot.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          Puoi fare ringhiare il mostro arrabbiato.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      course2_artist_nestedLoops_challenge1:
        courseD_artist_nestedLoops_challenge1_a: "Inizia creando un ciclo annidato
          per creare quattro ottagoni. \nRuota di 45 gradi per creare l'ottagono.
          \nSalta, e ruota di 90 gradi dopo ognuno di essi."
        courseD_artist_nestedLoops_challenge1_b: Aggiungi il codice all'interno del
          tuo ciclo annidato per disegnare un triangolo. Usa 120 gradi per il tuo
          triangolo.
        courseD_artist_nestedLoops_challenge1_c: |-
          Usa un ciclo annidato:

          -   Ripeti 8 volte
          -   disegna un ottagono
          -   disegna un triangolo
          -   salta in avanti di 50 pixel
          -   gira a destra di 90 gradi
      course2_artist_nestedLoops_challenge2:
        courseD_artist_nestedLoops_challenge2_a: Per disegnare un ottagono regolare,
          l'artista deve girare di 45 gradi per 8 volte.
        courseD_artist_nestedLoops_challenge2_b: Per disegnare un quadrato, l'artista
          deve girare di 90 gradi per 4 volte.
      course2_artist_prog_challenge1:
        courseC_artist_prog_challenge1_a: 'Il rettangolo è largo 200 pixel e alto
          100. '
      course2_bee_conditionals_challenge1:
        courseD_bee_conditionals_challenge1_a: |-
          Riesci a trovare un percorso che raggiunga tutti i fiori e i favi senza colpire nessun albero? Il percorso migliore è a spirale.

          **Puoi riuscirci senza mai girare a sinistra.**
        courseD_bee_conditionals_challenge1_b: In questo esercizio, conviene immaginare
          che ogni casella possa avere un fiore, un favo o nulla. In questo modo portai
          ripetere l'istruzione condizionale `se/altrimenti` ad ogni passo.
      course2_collector_loops_challenge2:
        courseC_maze_loops_challenge2_b: Usa dei cicli per non superare il numero
          massimo di blocchi `raccogli`!
      course2_harvester_loops_challenge1:
        courseC_harvester_loops_challenge1_b: Puoi ripetere i blocchi `vai avanti`
          e `prendi pannocchia` tutte le volte che ti serve, poi `gira a destra` ad
          ogni angolo.
      course2_harvester_loops_challenge2:
        courseC_harvester_loops_challenge2_a: Un modo per risolvere questo esercizio
          assomiglia a uno zig-zag. Un altro modo ricorda una spirale! Ci sono tante
          soluzioni diverse per un esercizio come questo. Non rinunciare, insisti!
        courseC_harvester_loops_challenge2_b: Puoi ripetere i blocchi `vai avanti`
          e `prendi lattuga` tutte le volte che ti serve, poi gira ad ogni angolo.
        courseC_harvester_loops_challenge2_c: |-
          Lo schema a zig-zag può essere ripetuto due volte per completare l'esercizio usando solo 20 blocchi!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          Lo schema a spirale può essere ottenuto con solo 18 blocchi!

           ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      course2_maze_loops_challenge1:
        courseC_maze_loops_challenge1_a: Considera questo percorso diviso in due parti
          diverse. Ognuna ha un suo schema che si ripete.
      course2_maze_programming_challenge2:
        courseC_maze_programming_challenge2_a: _"Se mi fai muovere all'indietro, stai
          particolarmente attento a farmi girare dalla parte giusta!"_
        courseC_maze_programming_challenge2_b: La soluzione più corta usa solo 5 blocchi,
          ma usa questo blocco `ripeti ... volte`!
      course3_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          Il blocco `salta a` ti permette di muovere l'artista zombie su qualsiasi pixel della tela, in qualunque momento. Funziona così: _indipendentemente_ dal punto in cui si trova l'artista in quel momento, egli salterà un certo numero di pixel in avanti ed un altro numero di pixel in basso, contando a partire dallo spigolo in alto a sinistra.

          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>
      course3_bee_debugging_challenge1:
        courseD_bee_debugging_challenge1_a: Perché la prima parte di questo programma
          funziona? Perché l'ape fa un movimento all'indietro ad ogni ciclo? Quanto
          nettare raccoglie l'ape ogni volta che si passa su un fiore?
      course3_bee_functions_challenge1:
        courseE_bee_functions_challenge1_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions_challenge1_b: Ricordati di inserire il codice all'interno
          del blocco verde aperto che definisce cosa deve fare la funzione.
      course3_bee_functions_challenge2:
        courseE_bee_functions_challenge1_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions_challenge1_b: Ricordati di inserire il codice all'interno
          del blocco verde aperto che definisce cosa deve fare la funzione.
      course3_bee_functions_challenge4:
        courseF_bee_functions_challenge2_b: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">4</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="maze_untilBlocked">
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="maze_if">
                              <title name="DIR">isPathRight</title>
                              <statement name="DO">
                                <block type="procedures_callnoreturn" id="function">
                                  <mutation name="move and check"/>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnLeft</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
            <block type="procedures_defnoreturn" editable="false" usercreated="true">
              <mutation/>
              <title name="NAME">check nectar or honey</title>
              <statement name="STACK">
                <block type="bee_ifElseFlower">
                  <title name="LOC">atFlower</title>
                  <statement name="DO">
                    <block type="bee_whileNectarAmount">
                      <title name="ARG1">nectarRemaining</title>
                      <title name="OP">&gt;</title>
                      <title name="ARG2">0</title>
                      <statement name="DO">
                        <block type="maze_nectar"/>
                      </statement>
                    </block>
                  </statement>
                  <statement name="ELSE">
                    <block type="bee_whileNectarAmount">
                      <title name="ARG1">honeyAvailable</title>
                      <title name="OP">&gt;</title>
                      <title name="ARG2">0</title>
                      <statement name="DO">
                        <block type="maze_honey"/>
                      </statement>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
            <block type="procedures_defnoreturn" deletable="false" movable="false" editable="false">
              <mutation/>
              <title name="NAME">move and check</title>
              <statement name="STACK">
                <block type="controls_repeat_ext" inline="true">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">2</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="procedures_callnoreturn">
                      <mutation name="check nectar or honey"/>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="maze_untilBlocked">
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            </block>
          </xml>
      course3_collector_debugging_challenge2:
        courseD_collector_debugging_challenge2_b: |-
          Quindi, dopo aver fatto un passo indietro, raccogli i diamanti rimanenti. E ripeti questo meccanismo su tutta la fila.

          ![](<https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png>)
          Aggiungi questi blocchi al tuo programma:

          <xml><block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
          <block type="controls_repeat">
                  <title name="TIMES">4</title>
                  <statement name="DO">

                  </statement>
                </block>

          </xml>
        courseD_collector_debugging_challenge2_c: "Infine, per raccogliere i diamanti
          rimanenti su tutti i lati del percorso, aggiungi questi blocchi al tuo programma:\n\n<xml>\n
          \ <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n
          \             </block>\n      <block type=\"controls_repeat\">\n        <title
          name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n
          \       </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Ecco la soluzione completa di questo esercizio:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">4</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="controls_repeat">
                          <title name="TIMES">2</title>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveForward</title>
                              <next>
                                <block type="controls_repeat">
                                  <title name="TIMES">2</title>
                                  <statement name="DO">
                                    <block type="collector_collect"/>
                                  </statement>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      course3_farmer_condLoops_challenge1:
        courseD_farmer_condLoops_challenge1_b: Di solito, quando ci si trova su una
          zucca, si esegue solamente il blocco `prendi zucca`. Cos'altro devi fare
          in questo caso se sei su una zucca?
      course3_maze_debugging_challenge1:
        courseC_maze_debugging_challenge1_a: Destra o sinistra? A te la scelta!
        courseC_maze_debugging_challenge1_b: Il percorso che deve seguire Scrat ha
          la forma di un rettangolo! Deve girare dalla stessa parte ad ogni svolta.
      course3_playLab_challenge1:
        courseE_playLab_challenge1_a: |-
          Ecco alcune possibili cose da fare quando il giocatore vince la partita:

          -   Fai svanire il dinosauro.
          -   Ferma gli scoiattoli.
          -   Attribuisci un umore felice a scoiattoli e cavaliere.
          -   Imposta un nuovo sfondo.
          -   Fai in modo che il cavaliere ringrazi il giocatore per l'aiuto.
          -   Fai svanire tutti i personaggi e visualizza il messaggio "Hai vinto!".
        courseE_playLab_challenge1_b: |-
          Ecco alcune possibili cose da fare quando il giocatore perde la partita:

          -   Fai svanire il cavaliere.
          -   Attribuisci un umore triste agli scoiattoli.
          -   Fai dire qualcosa al dinosauro.
          -   Imposta un nuovo sfondo.
          -   Fai svanire tutti i personaggi e visualizza il messaggio "Fine del gioco!".
      course4_artist_concept_challenge2:
        courseE_artist_concept_challenge2_a: Dopo aver definito una funzione, la puoi
          richiamare più e più volte, ovunque tu voglia!
        courseE_artist_concept_challenge2_b: |-
          Grazie a questo blocco, puoi saltare direttamente in specifici punti della tela:

          <xml>  <block type="jump_to">
              <title name="VALUE">???</title>
            </block></xml>
      course4_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          Il blocco `salta a` ti permette di muovere l'artista zombie su qualsiasi pixel della tela, in qualunque momento. Funziona così: _indipendentemente_ dal punto in cui si trova l'artista in quel momento, egli salterà un certo numero di pixel in avanti ed un altro numero di pixel in basso, contando a partire dallo spigolo in alto a sinistra.

          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>
      course4_artist_variables_challenge1:
        courseF_artist_variables_challenge1_a: Tutte le linee verticali hanno lunghezza
          fissa pari a `10`. Mentre ogni linea orizzontale ha una lunghezza pari alla
          variabile `length` (_lunghezza_).
        courseF_artist_variables_challenge1_b: All'interno del ciclo, dovrai sommare
          il valore `10` alla variabile `length` (_lunghezza_) in **due** punti differenti.
        courseF_artist_variables_challenge1_c: 'Per completare questo schema dovrai
          usare: `gira a sinistra` due volte, `gira a destra` due volte e `vai avanti`
          per un totale di quattro volte.'
        courseF_artist_variables_challenge1_d: |-
          Questo esercizio usa solo un ciclo. Senza l'aiuto della variabile, un simile percorso potrebbe essere solo uno zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          Se hai delle difficoltà, inizia creando questa immagine, quindi prova a capire dove puoi usare una variabile per modificare la lunghezza delle linee orizzontali.
        courseF_artist_variables_challenge1_e: |-
          Ecco la soluzione.

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course4_collector_nested_loops_challenge2:
        courseD_bee_nested_loops_challenge2_a: Non dimenticare che puoi inserire nel
          blocco `ripeti ... volte` un singolo comando o uno schema più lungo. E si
          può anche ripetere un blocco `ripeti ... volte`!
        courseD_bee_nested_loops_challenge2_b: Per raccogliere tutti e 4 i diamanti,
          prima di tutto usa un ciclo per allontanarti dal centro. Gira a sinistra
          o a destra, quindi usa un ciclo annidato per passare dal primo diamante
          al secondo. Se ripeti questo ciclo annidato abbastanza volte, la collezionista
          si muoverà intorno a _tutta_ la grotta!
        courseD_bee_nested_loops_challenge2_c: Il programma più breve che raggiunge
          tutti i diamanti usa solo un blocco `raccogli` e due svolte.
        courseD_bee_nested_loops_challenge2_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_artist_loops2:
        courseA_artist_loops2_a: Non riesci ad immaginare come si fa a disegnare una
          linea? Per vedere cosa capita, inizia ad agganciare qualche blocco a caso
          al blocco iniziale <xml><block type="when_run"/></xml>
        courseA_artist_loops2_b: Utilizza questo blocco <xml><block type="simple_move_right"/></xml>
          per risolvere questo esercizio.
      courseA_artist_loops2_2018:
        courseA_artist_loops2_a: Non riesci ad immaginare come si fa a disegnare una
          linea? Per vedere cosa capita, inizia ad agganciare qualche blocco a caso
          al blocco iniziale <xml><block type="when_run"/></xml>
        courseA_artist_loops2_b: Utilizza questo blocco <xml><block type="simple_move_right"/></xml>
          per risolvere questo esercizio.
      courseA_artist_loops2_2019:
        courseA_artist_loops2_a: Non riesci ad immaginare come si fa a disegnare una
          linea? Per vedere cosa capita, inizia ad agganciare qualche blocco a caso
          al blocco iniziale <xml><block type="when_run"/></xml>
        courseA_artist_loops2_b: Utilizza questo blocco <xml><block type="simple_move_right"/></xml>
          per risolvere questo esercizio.
      courseA_artist_loops3:
        courseA_artist_loops3_a: Segui lentamente con il dito l'esecuzione del programma
          per capire dove sbaglia.
        courseA_artist_loops3_b: |-
          Devi usare un blocco come questo per risolvere l'esercizio.

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops3_2018:
        courseA_artist_loops3_a: Segui lentamente con il dito l'esecuzione del programma
          per capire dove sbaglia.
        courseA_artist_loops3_b: |-
          Devi usare un blocco come questo per risolvere l'esercizio.

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops3_2019:
        courseA_artist_loops3_a: Segui lentamente con il dito l'esecuzione del programma
          per capire dove sbaglia.
        courseA_artist_loops3_b: |-
          Devi usare un blocco come questo per risolvere l'esercizio.

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops4:
        courseA_artist_loops4_a: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseA_artist_loops4_b: |-
          Dato che puoi usare solo un blocco <xml><block type="simple_move_right"/></xml>

          prova a metterlo all'interno del ciclo <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml>
      courseA_artist_loops4_2018:
        courseA_artist_loops4_a: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseA_artist_loops4_b: |-
          Dato che puoi usare solo un blocco <xml><block type="simple_move_right"/></xml>

          prova a metterlo all'interno del ciclo <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml>
      courseA_artist_loops4_2019:
        courseA_artist_loops4_a: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseA_artist_loops4_b: |-
          Dato che puoi usare solo un blocco <xml><block type="simple_move_right"/></xml>

          prova a metterlo all'interno del ciclo <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml>
      courseA_artist_loops5:
        courseA_artist_loops5_a: Prova a utilizzare quello che hai imparato sui blocchi
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml> per completare questo esercizio!
        courseA_artist_loops5_b: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseA_artist_loops5_c: "Dato che puoi utilizzare solo un blocco <xml><block
          type=\"simple_move_right\"/></xml> prova a metterlo all'interno del ciclo
          \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\"
          config=\"3-10\">???</title></block></xml>"
      courseA_artist_loops5_2018:
        courseA_artist_loops5_a: Prova a utilizzare quello che hai imparato sui blocchi
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml> per completare questo esercizio!
        courseA_artist_loops5_b: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseA_artist_loops5_c: "Dato che puoi utilizzare solo un blocco <xml><block
          type=\"simple_move_right\"/></xml> prova a metterlo all'interno del ciclo
          \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\"
          config=\"3-10\">???</title></block></xml>"
      courseA_artist_loops5_2019:
        courseA_artist_loops5_a: Prova a utilizzare quello che hai imparato sui blocchi
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml> per completare questo esercizio!
        courseA_artist_loops5_b: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseA_artist_loops5_c: "Dato che puoi utilizzare solo un blocco <xml><block
          type=\"simple_move_right\"/></xml> prova a metterlo all'interno del ciclo
          \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title name=\"TIMES\"
          config=\"3-10\">???</title></block></xml>"
      courseA_artist_loops6:
        courseA_artist_loops6_a: Non riesci ad immaginare come disegnare la collina?
          Prova a giocare un po' con i blocchi per vedere che disegno fa ognuno.
        courseA_artist_loops6_b: Avrai bisogno di 2 blocchi in 2 direzioni per risolvere
          questo esercizio.
      courseA_artist_loops6_2018:
        courseA_artist_loops6_a: Non riesci ad immaginare come disegnare la collina?
          Prova a giocare un po' con i blocchi per vedere che disegno fa ognuno.
        courseA_artist_loops6_b: Avrai bisogno di 2 blocchi in 2 direzioni per risolvere
          questo esercizio.
      courseA_artist_loops6_2019:
        courseA_artist_loops6_a: Non riesci ad immaginare come disegnare la collina?
          Prova a giocare un po' con i blocchi per vedere che disegno fa ognuno.
        courseA_artist_loops6_b: Avrai bisogno di 2 blocchi in 2 direzioni per risolvere
          questo esercizio.
      courseA_artist_loops7:
        courseA_artist_loops7_a: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
        courseA_artist_loops7_b: Scrivi il codice per disegnare un'onda, poi ripetilo
          per disegnare le altre due.
        courseA_artist_loops7_c: 'Ricorda: puoi mettere più di un blocco all''interno
          di un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>'
      courseA_artist_loops7_2018:
        courseA_artist_loops7_a: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
        courseA_artist_loops7_b: Scrivi il codice per disegnare un'onda, poi ripetilo
          per disegnare le altre due.
        courseA_artist_loops7_c: |-
          Ricorda: puoi mettere più di un blocco all'interno di un ciclo <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="3-10">???</title>
            </block></xml>
      courseA_artist_loops7_2019:
        courseA_artist_loops7_a: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
        courseA_artist_loops7_b: Scrivi il codice per disegnare un'onda, poi ripetilo
          per disegnare le altre due.
        courseA_artist_loops7_c: |-
          Ricorda: puoi mettere più di un blocco all'interno di un ciclo <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="3-10">???</title>
            </block></xml>
      courseA_artist_loops8:
        courseA_artist_loops8_a: Prova ad eseguire il codice per capire cosa è già
          stato scritto per te.
        courseA_artist_loops8_b: Come inseriresti in un ciclo il codice che ti è stato
          dato?
        courseA_artist_loops8_c: |-
          Cosa fa il codice?\
          Che cosa dovrebbe fare?\
          Che cosa ti suggerisce questo?
      courseA_artist_loops8_2018:
        courseA_artist_loops8_a: Prova ad eseguire il codice per capire cosa è già
          stato scritto per te.
        courseA_artist_loops8_b: Come inseriresti in un ciclo il codice che ti è stato
          dato?
        courseA_artist_loops8_c: |-
          Cosa fa il codice?\
          Che cosa dovrebbe fare?\
          Che cosa ti suggerisce questo?
      courseA_artist_loops8_2019:
        courseA_artist_loops8_a: Prova ad eseguire il codice per capire cosa è già
          stato scritto per te.
        courseA_artist_loops8_b: Come inseriresti in un ciclo il codice che ti è stato
          dato?
        courseA_artist_loops8_c: |-
          Cosa fa il codice?\
          Che cosa dovrebbe fare?\
          Che cosa ti suggerisce questo?
      courseA_artist_loops9:
        courseA_artist_loops9_a: Per disegnare il resto della scala, aggiungi un blocco
          al programma che trovi già scritto.
        courseA_artist_loops9_b: "Il blocco che aggiungi devi inserirlo all'interno
          del ciclo \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml>"
        courseA_artist_loops9_c: Se non riesci a capire dove mettere il ciclo, prova
          a scrivere il codice con tutti i blocchi azzurri e cerca poi di riconoscere
          la sequenza che si ripete.
      courseA_artist_loops9_2018:
        courseA_artist_loops9_a: Per disegnare il resto della scala, aggiungi un blocco
          al programma che trovi già scritto.
        courseA_artist_loops9_b: |-
          Il blocco che aggiungi devi inserirlo all'interno del ciclo <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block>
          </xml>
        courseA_artist_loops9_c: Se non riesci a capire dove mettere il ciclo, prova
          a scrivere il codice con tutti i blocchi azzurri e cerca poi di riconoscere
          la sequenza che si ripete.
      courseA_artist_loops9_2019:
        courseA_artist_loops9_a: Per disegnare il resto della scala, aggiungi un blocco
          al programma che trovi già scritto.
        courseA_artist_loops9_b: "Il blocco che aggiungi devi inserirlo all'interno
          del ciclo \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">5</title></block>\n</xml>"
        courseA_artist_loops9_c: Se non riesci a capire dove mettere il ciclo, prova
          a scrivere il codice con tutti i blocchi azzurri e cerca poi di riconoscere
          la sequenza che si ripete.
      courseA_artist_loops_challenge2a:
        courseA_artist_loops_challenge2_a: Blocchi come questo <xml>  <block type="simple_move_up_left"/></xml>
          permetteranno all'artista di muoversi in diagonale!
        courseA_artist_loops_challenge2_b: Quando finisci una tenda, `salta` due volte
          per arrivare alla prossima!
        courseA_artist_loops_challenge2_c: Tutti i blocchi dovranno essere all'interno
          di un ciclo per completare questo esercizio.
      courseA_artist_loops_challenge2a_2018:
        courseA_artist_loops_challenge2_a: Blocchi come questo <xml>  <block type="simple_move_up_left"/></xml>
          permetteranno all'artista di muoversi in diagonale!
        courseA_artist_loops_challenge2_b: Quando finisci una tenda, `salta` due volte
          per arrivare alla prossima!
        courseA_artist_loops_challenge2_c: Tutti i blocchi dovranno essere all'interno
          di un ciclo per completare questo esercizio.
      courseA_artist_loops_challenge2a_2019:
        courseA_artist_loops_challenge2_a: Blocchi come questo <xml>  <block type="simple_move_up_left"/></xml>
          permetteranno all'artista di muoversi in diagonale!
        courseA_artist_loops_challenge2_b: Quando finisci una tenda, `salta` due volte
          per arrivare alla prossima!
        courseA_artist_loops_challenge2_c: Tutti i blocchi dovranno essere all'interno
          di un ciclo per completare questo esercizio.
      courseA_collector_loops1:
        courseA_collector_loops1_a: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:

          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: Una soluzione semplice sarebbe spostarsi verso
          Est `E →` 2 volte, quindi prendere il diamante.
      courseA_collector_loops1_2018:
        courseA_collector_loops1_a: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:

          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: Una soluzione semplice sarebbe spostarsi verso
          Est `E →` 2 volte, quindi prendere il diamante.
      courseA_collector_loops1_2019:
        courseA_collector_loops1_a: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:

          <xml>  <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: Una soluzione semplice sarebbe spostarsi verso
          Est `E →` 2 volte, quindi prendere il diamante.
      courseA_collector_loops2:
        courseA_collector_loops2_a: Devi muoverti prima di raccogliere qualsiasi diamante.
        courseA_collector_loops2_b: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:

          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops2_2018:
        courseA_collector_loops2_a: Devi muoverti prima di raccogliere qualsiasi diamante.
        courseA_collector_loops2_b: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:

          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops2_2019:
        courseA_collector_loops2_a: Devi muoverti prima di raccogliere qualsiasi diamante.
        courseA_collector_loops2_b: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:

          <xml>  <block type="collector_collect"/></xml>
      courseA_collector_loops3:
        courseA_collector_loops3_a: Prova ad usare un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>
        courseA_collector_loops3_b: 'Ricorda: puoi mettere più di un blocco dentro
          un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml>'
      courseA_collector_loops3_2018:
        courseA_collector_loops3_a: Prova ad usare un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>
        courseA_collector_loops3_b: 'Ricorda: puoi mettere più di un blocco dentro
          un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml>'
      courseA_collector_loops3_2019:
        courseA_collector_loops3_b: 'Ricorda: puoi mettere più di un blocco dentro
          un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml>'
      courseA_collector_loops4:
        courseA_collector_loops4_a: Per modificare di quante caselle deve spostarsi
          Laura, cambia il numero di volte che il ciclo viene eseguito.
        courseA_collector_loops4_b: Non dimenticare che, dopo aver terminato il ciclo,
          Laura deve ancora scendere per raccogliere l'ultimo diamante <xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops4_2018:
        courseA_collector_loops4_a: Per modificare di quante caselle deve spostarsi
          Laura, cambia il numero di volte che il ciclo viene eseguito.
        courseA_collector_loops4_b: Non dimenticare che, dopo aver terminato il ciclo,
          Laura deve ancora scendere per raccogliere l'ultimo diamante <xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops4_2019:
        courseA_collector_loops4_a: Per modificare di quante caselle deve spostarsi
          Laura, cambia il numero di volte che il ciclo viene eseguito.
        courseA_collector_loops4_b: Non dimenticare che, dopo aver terminato il ciclo,
          Laura deve ancora scendere per raccogliere l'ultimo diamante <xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops5:
        courseA_collector_loops5_a: Se non riesci subito a capire la risposta, prova
          ad utilizzare un foglio di carta per capire di quali frecce hai bisogno
          e cerca di definire un percorso.
        courseA_collector_loops5_b: Prova a dividere il problema in due parti, muovendoti
          prima lateralmente e poi verso il basso.
        courseA_collector_loops5_c: Potresti iniziare con un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> che fa andare Laura
          verso Ovest `O ←` e raccogliere i diamanti.
      courseA_collector_loops5_2018:
        courseA_collector_loops5_a: Se non riesci subito a capire la risposta, prova
          ad utilizzare un foglio di carta per capire di quali frecce hai bisogno
          e cerca di definire un percorso.
        courseA_collector_loops5_b: Prova a dividere il problema in due parti, muovendoti
          prima lateralmente e poi verso il basso.
        courseA_collector_loops5_c: Potresti iniziare con un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> che fa andare Laura
          verso Ovest `O ←` e raccogliere i diamanti.
      courseA_collector_loops5_2019:
        courseA_collector_loops5_a: Se non riesci subito a capire la risposta, prova
          ad utilizzare un foglio di carta per capire di quali frecce hai bisogno
          e cerca di definire un percorso.
        courseA_collector_loops5_b: Prova a dividere il problema in due parti, muovendoti
          prima lateralmente e poi verso il basso.
        courseA_collector_loops5_c: Potresti iniziare con un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> che fa andare Laura
          verso Ovest `O ←` e raccogliere i diamanti.
      courseA_collector_loops6:
        courseA_collector_loops6_a: Non riesci a capire cosa non va? Prova ad eseguire
          il codice un paio di volte per vedere cosa succede.
        courseA_collector_loops6_b: La soluzione più breve ha 2 cicli <xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          uno dopo l'altro.
      courseA_collector_loops6_2018:
        courseA_collector_loops6_a: Non riesci a capire cosa non va? Prova ad eseguire
          il codice un paio di volte per vedere cosa succede.
        courseA_collector_loops6_b: La soluzione più breve ha 2 cicli <xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          uno dopo l'altro.
      courseA_collector_loops6_2019:
        courseA_collector_loops6_a: Non riesci a capire cosa non va? Prova ad eseguire
          il codice un paio di volte per vedere cosa succede.
        courseA_collector_loops6_b: La soluzione più breve ha 2 cicli <xml><block
          type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          uno dopo l'altro.
      courseA_collector_loops7:
        courseA_collector_loops7_a: Se non riesci a capire che cosa succede dopo,
          prova ad eseguire il codice per vedere dove va a finire Laura.
      courseA_collector_loops7_2018:
        courseA_collector_loops7_a: Se non riesci a capire che cosa succede dopo,
          prova ad eseguire il codice per vedere dove va a finire Laura.
      courseA_collector_loops7_2019:
        courseA_collector_loops7_a: Se non riesci a capire che cosa succede dopo,
          prova ad eseguire il codice per vedere dove va a finire Laura.
      courseA_collector_loops8:
        courseA_collector_loops8_a: Se hai difficoltà nella risoluzione di questo
          esercizio, prova a scrivere le mosse su un foglio di carta e cerca di trovare
          uno schema che si ripete.
        courseA_collector_loops8_b: Prova a dividere questo esercizio in tre problemi
          separati e scrivi un ciclo per ciascuno di essi.
        courseA_collector_loops8_c: Ricorda che puoi scrivere un pezzo di codice alla
          volta e poi premere "Esegui" per capire come devi procedere dal punto in
          cui sei arrivato.
      courseA_collector_loops8_2018:
        courseA_collector_loops8_a: Se hai difficoltà nella risoluzione di questo
          esercizio, prova a scrivere le mosse su un foglio di carta e cerca di trovare
          uno schema che si ripete.
        courseA_collector_loops8_b: Prova a dividere questo esercizio in tre problemi
          separati e scrivi un ciclo per ciascuno di essi.
        courseA_collector_loops8_c: Ricorda che puoi scrivere un pezzo di codice alla
          volta e poi premere "Esegui" per capire come devi procedere dal punto in
          cui sei arrivato.
      courseA_collector_loops8_2019:
        courseA_collector_loops8_a: Se hai difficoltà nella risoluzione di questo
          esercizio, prova a scrivere le mosse su un foglio di carta e cerca di trovare
          uno schema che si ripete.
        courseA_collector_loops8_b: Prova a dividere questo esercizio in tre problemi
          separati e scrivi un ciclo per ciascuno di essi.
        courseA_collector_loops8_c: Ricorda che puoi scrivere un pezzo di codice alla
          volta e poi premere "Esegui" per capire come devi procedere dal punto in
          cui sei arrivato.
      courseA_collector_loops9:
        courseA_collector_loops9_a: 'Se non riesci ad immaginare quale possa essere
          il modo migliore di usare un ciclo, prova a programmare un movimento alla
          volta con i singoli blocchi azzurri e poi cerca lo schema che si ripete. '
        courseA_collector_loops9_b: Per rendere il tuo programma più breve, prova
          a mettere due cicli <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> dentro un altro ciclo!
      courseA_collector_loops9_2018:
        courseA_collector_loops9_a: 'Se non riesci ad immaginare quale possa essere
          il modo migliore di usare un ciclo, prova a programmare un movimento alla
          volta con i singoli blocchi azzurri e poi cerca lo schema che si ripete. '
        courseA_collector_loops9_b: Per rendere il tuo programma più breve, prova
          a mettere due cicli <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> dentro un altro ciclo!
      courseA_collector_loops9_2019:
        courseA_collector_loops9_a: 'Se non riesci ad immaginare quale possa essere
          il modo migliore di usare un ciclo, prova a programmare un movimento alla
          volta con i singoli blocchi azzurri e poi cerca lo schema che si ripete. '
        courseA_collector_loops9_b: Per rendere il tuo programma più breve, prova
          a mettere due cicli <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> dentro un altro ciclo!
      courseA_collector_loops_challenge1:
        courseA_collector_loops_challenge1_a: Prova a cambiare i numeri nei cicli
          dove ti sembra che qualcosa vada storto.
        courseA_collector_loops_challenge1_b: 'Attenzione: non hai bisogno di usare
          un ciclo se un''azione devi svolgerla una sola volta.'
        courseA_collector_loops_challenge1_c: Ci sono 6 diamanti nel lato destro della
          grotta, ma dovrai prenderne solo 5 spostandoti verso Sud `S ↓`. Sai perché?
        courseA_collector_loops_challenge1_d: |-
          Il programma che trovi già pronto non permette di raccogliere gli ultimi 2 diamanti. Prova ad aggiungere questi blocchi alla fine del programma:

          <xml><block type="maze_moveEast">
                                  <next>
                                    <block type="collector_collect_simplified">
                                      <next>
                                        <block type="maze_moveSouth">
                                          <next>
                                            <block type="collector_collect"/>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block></xml>
      courseA_collector_loops_challenge1_2018:
        courseA_collector_loops_challenge1_a: Prova a cambiare i numeri nei cicli
          dove ti sembra che qualcosa vada storto.
        courseA_collector_loops_challenge1_b: 'Attenzione: non hai bisogno di usare
          un ciclo se un''azione devi svolgerla una sola volta.'
        courseA_collector_loops_challenge1_c: Ci sono 6 diamanti nel lato destro della
          grotta, ma dovrai prenderne solo 5 spostandoti verso Sud `S ↓`. Sai perché?
        courseA_collector_loops_challenge1_d: |-
          Il programma che trovi già pronto non permette di raccogliere gli ultimi 2 diamanti. Prova ad aggiungere questi blocchi alla fine del programma:

          <xml><block type="maze_moveEast">
                                  <next>
                                    <block type="collector_collect_simplified">
                                      <next>
                                        <block type="maze_moveSouth">
                                          <next>
                                            <block type="collector_collect"/>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block></xml>
      courseA_collector_loops_challenge1_2019:
        courseA_collector_loops_challenge1_a: Prova a cambiare i numeri nei cicli
          dove ti sembra che qualcosa vada storto.
        courseA_collector_loops_challenge1_b: 'Attenzione: non hai bisogno di usare
          un ciclo se un''azione devi svolgerla una sola volta.'
        courseA_collector_loops_challenge1_c: Ci sono 6 diamanti nel lato destro della
          grotta, ma dovrai prenderne solo 5 spostandoti verso Sud `S ↓`. Sai perché?
        courseA_collector_loops_challenge1_d: |-
          Il programma che trovi già pronto non permette di raccogliere gli ultimi 2 diamanti. Prova ad aggiungere questi blocchi alla fine del programma:

          <xml><block type="maze_moveEast">
                                  <next>
                                    <block type="collector_collect_simplified">
                                      <next>
                                        <block type="maze_moveSouth">
                                          <next>
                                            <block type="collector_collect"/>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block></xml>
      courseA_collector_loops_challenge2kp:
        courseA_collector_loops_challenge2kp_b: 'Prova questo percorso: è una possibile
          soluzione.'
        courseA_collector_loops_challenge2kp_a: Riesci a usare dei cicli per risolvere
          questo esercizio?
      courseA_collector_loops_challenge2kp_2018:
        courseA_collector_loops_challenge2kp_b: 'Prova questo percorso: è una possibile
          soluzione.'
        courseA_collector_loops_challenge2kp_a: Riesci a usare dei cicli per risolvere
          questo esercizio?
      courseA_collector_loops_challenge2kp_2019:
        courseA_collector_loops_challenge2kp_b: 'Prova questo percorso: è una possibile
          soluzione.'
        courseA_collector_loops_challenge2kp_a: Riesci a usare dei cicli per risolvere
          questo esercizio?
      courseA_collector_preLoops7:
        courseA_collector_loops2_b: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:

          <xml>  <block type="collector_collect"/></xml>
      courseA_harvester_loops1:
        courseA_harvester_loops1_a: |-
          Quando vai avanti verso le pannocchie, usa questo blocco per raccoglierle!

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops1_2019:
        courseA_harvester_loops1_a: |-
          Quando vai avanti verso le pannocchie, usa questo blocco per raccoglierle!
          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops2:
        courseA_harvester_loops2_a: |-
          Il tuo codice avrà **quattro** blocchi <xml><block type="maze_moveWest"/></xml>

          e **quattro** blocchi <xml><block type="harvester_corn"/></xml>
        courseA_harvester_loops2_b: 'Se hai ancora difficoltà, prova a pronunciare
          le istruzioni a voce alta. '
      courseA_harvester_loops2_2019:
        courseA_harvester_loops2_a: "Il tuo codice avrà **quattro**  blocchi <xml><block
          type=\"maze_moveWest\"/></xml>\ne **quattro** blocchi <xml><block type=\"harvester_corn\"/>
          </xml> "
        courseA_harvester_loops2_b: 'Se hai ancora difficoltà, prova a pronunciare
          le istruzioni a voce alta. '
      courseA_harvester_loops3:
        courseA_harvester_loops3_a: |-
          Usa un blocco `ripeti` come questo per aiutarti!

          <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">4</title>
            </block></xml>
        courseA_harvester_loops3_b: "Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco <xml><block type=\"controls_repeat_simplified_dropdown\">\n
          \   <title name=\"TIMES\" config=\"2-10\">4</title>\n  </block></xml> quindi
          inserisci al suo interno i blocchi che vuoi ripetere. "
      courseA_harvester_loops3_2019:
        courseA_harvester_loops3_a: |-
          Usa un blocco `ripeti` come questo per aiutarti!

          <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">4</title>
            </block></xml>
        courseA_harvester_loops3_b: "Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"2-10\">4</title></block></xml> quindi inserisci
          al suo interno i blocchi che vuoi ripetere. "
      courseA_harvester_loops4:
        courseA_harvester_loops4_a: Non aver paura di premere "Esegui" per vedere
          cosa succede!
        courseA_harvester_loops4_b: Quante pannocchie ci sono? Quante volte si ripete
          il tuo ciclo?
      courseA_harvester_loops4_2019:
        courseA_harvester_loops4_a: Non aver paura di premere "Esegui" per vedere
          cosa succede!
        courseA_harvester_loops4_b: Quante pannocchie ci sono? Quante volte si ripete
          il tuo ciclo?
      courseA_harvester_loops5:
        courseA_harvester_loops5_a: Se ti blocchi, prova a risolvere l'esercizio in
          due parti, una parte prima della curva e l'altra dopo la curva.
        courseA_harvester_loops5_b: |-
          Il programma finale dovrà avere **un** ciclo  <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">6</title>
              </block></xml>, **un** blocco <xml><block type="maze_moveSouth" limit="1"/></xml> e **un** blocco <xml><block type="maze_moveEast" limit="1"/> </xml>
        courseA_harvester_loops5_c: Usa questo percorso per raccogliere tutte le pannocchie!
      courseA_harvester_loops5_2019:
        courseA_harvester_loops5_a: Se ti blocchi, prova a risolvere l'esercizio in
          due parti, una parte prima della curva e l'altra dopo la curva.
        courseA_harvester_loops5_b: |-
          Il programma finale dovrà avere **un** ciclo  <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">6</title>
              </block></xml>, **un** blocco <xml><block type="maze_moveSouth" limit="1"/></xml> e **un** blocco <xml><block type="maze_moveEast" limit="1"/> </xml>
        courseA_harvester_loops5_c: Usa questo percorso per raccogliere tutte le pannocchie!
      courseA_harvester_loops5a:
        courseA_harvester_loops5a_a: |-
          Avrai bisogno di due cicli <xml> <block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">6</title>
            </block></xml> uno dopo l'altro.
        courseA_harvester_loops5a_b: Un ciclo ripeterà vai verso Sud <xml><block type="maze_moveSouth"
          limit="1"/></xml> e l'altro ripeterà vai verso Est <xml><block type="maze_moveEast"
          limit="1"/></xml>
        courseA_harvester_loops5a_c: Usa questo percorso per andare avanti in una
          direzione e poi nell'altra.
      courseA_harvester_loops5a_2019:
        courseA_harvester_loops5a_a: |-
          Avrai bisogno di due cicli <xml> <block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">6</title>
            </block></xml> uno dopo l'altro.
        courseA_harvester_loops5a_b: Un ciclo ripeterà vai verso Sud <xml><block type="maze_moveSouth"
          limit="1"/></xml> e l'altro ripeterà vai verso Est <xml><block type="maze_moveEast"
          limit="1"/></xml>
        courseA_harvester_loops5a_c: Usa questo percorso per andare avanti in una
          direzione e poi nell'altra.
      courseA_harvester_loops5b:
        courseA_harvester_loops5b_a: Premi "Esegui" e vedi cosa succede!
        courseA_harvester_loops5b_b: I tuoi cicli si ripetono il giusto numero di
          volte?
        courseA_harvester_loops5b_c: Vai avanti in una direzione e poi in un'altra
          seguendo questo percorso.
      courseA_harvester_loops5b_2019:
        courseA_harvester_loops5b_a: Premi "Esegui" e vedi cosa succede!
        courseA_harvester_loops5b_b: I tuoi cicli si ripetono il giusto numero di
          volte?
        courseA_harvester_loops5b_c: Vai avanti in una direzione e poi in un'altra
          seguendo questo percorso.
      courseA_harvester_loops6:
        courseA_harvester_loops6_a: Se ti blocchi, prova a scrivere i passaggi su
          carta e cerca gli schemi che si ripetono.
        courseA_harvester_loops6_b: Questo è il percorso che dovresti seguire per
          raccogliere tutte le pannocchie.
      courseA_harvester_loops6_2019:
        courseA_harvester_loops6_a: Se ti blocchi, prova a scrivere i passaggi su
          carta e cerca gli schemi che si ripetono.
        courseA_harvester_loops6_b: Questo è il percorso che dovresti seguire per
          raccogliere tutte le pannocchie.
      courseA_harvester_loops7:
        courseA_harvester_loops7_a: |-
          Avrai bisogno di due cicli <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">5</title>
            </block></xml> uno dopo l'altro!
        courseA_harvester_loops7_b: Usa due cicli per seguire questo percorso.
      courseA_harvester_loops7_2019:
        courseA_harvester_loops7_a: |-
          Avrai bisogno di due cicli <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="2-10">5</title>
            </block></xml> uno dopo l'altro!
        courseA_harvester_loops7_b: Usa due cicli per seguire questo percorso.
      courseA_harvester_loops9:
        courseA_harvester_loops9_a: Dividi questo esercizio in tre parti differenti.
          Una parte fino al primo angolo, una parte fino al secondo e una fino alla
          fine.
        courseA_harvester_loops9_b: Man mano che aggiungi blocchi al tuo programma,
          non aver paura di eseguirlo più volte per vedere cosa succede!
        courseA_harvester_loops9_c: Segui questo percorso per raccogliere tutte le
          pannocchie.
      courseA_harvester_loops9_2019:
        courseA_harvester_loops9_a: Dividi questo esercizio in tre parti differenti.
          Una parte fino al primo angolo, una parte fino al secondo e una fino alla
          fine.
        courseA_harvester_loops9_b: Man mano che aggiungi blocchi al tuo programma,
          non aver paura di eseguirlo più volte per vedere cosa succede!
        courseA_harvester_loops9_c: Segui questo percorso per raccogliere tutte le
          pannocchie.
      courseA_harvester_seq1:
        courseA_harvester_seq1_a: |-
          Quando la contadina raggiunge la pannocchia, usa questo blocco per raccoglierla!

          <xml>
            <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          La contadina deve spostarsi tre volte verso Est per poter raggiungere la pannocchia. Usa questo blocco:

          <xml>
            <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq10:
        courseA_harvester_seq10_a: Ti sei bloccato? Prova a scrivere i passaggi su
          un foglio di carta.
        courseA_harvester_seq10_b: Devi muoverti verso Est `E →` e poi verso Nord
          `N ↑`. Questi movimenti devi ripeterli due volte. Non dimenticare che durante
          il percorso devi anche raccogliere tutte le pannocchie!
        courseA_harvester_seq10_c: Prova a seguire questo percorso per raccogliere
          tutte le pannocchie.
      courseA_harvester_seq10_2019:
        courseA_harvester_seq10_a: Ti sei bloccato? Prova a scrivere i passaggi su
          un foglio di carta.
        courseA_harvester_seq10_b: Devi muoverti verso Est `E →` e poi verso Nord
          `N ↑`. Questi movimenti devi ripeterli due volte. Non dimenticare che durante
          il percorso devi anche raccogliere tutte le pannocchie!
        courseA_harvester_seq10_c: Prova a seguire questo percorso per raccogliere
          tutte le pannocchie.
      courseA_harvester_seq13:
        courseA_bee_seq1_a: |-
          Usa questo blocco per raccogliere le pannocchie ogni volta che la contadina ci arriva sopra.

          <xml>
            <block type="harvester_corn"/>
          </xml>
      courseA_harvester_seq13_2019:
        courseA_bee_seq1_a: |-
          Usa questo blocco per raccogliere le pannocchie ogni volta che la contadina ci arriva sopra.

          <xml>
            <block type="harvester_corn"/>
          </xml>
      courseA_harvester_seq1_2019:
        courseA_harvester_seq1_a: |-
          Quando la contadina raggiunge la pannocchia, usa questo blocco per raccoglierla!

          <xml>
            <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          La contadina deve spostarsi tre volte verso Est per poter raggiungere la pannocchia. Usa questo blocco:

          <xml>
            <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq2:
        courseA_harvester_seq2_a: Non dimenticarti di usare il blocco <xml><block
          type="harvester_corn"/></xml> per raccogliere la pannocchia!
        courseA_harvester_seq2_b: Per trovare la soluzione, prova a scrivere i passi
          sulla carta!
      courseA_harvester_seq2_2019:
        courseA_harvester_seq2_a: Non dimenticarti di usare il blocco <xml><block
          type="harvester_corn"/></xml> per raccogliere la pannocchia!
        courseA_harvester_seq2_b: Per trovare la soluzione, prova a scrivere i passi
          sulla carta!
      courseA_harvester_seq3:
        courseA_harvester_seq3_a: |-
          Ti sei ricordato di usare questo blocco?

          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: Prova a pronunciare i passi ad alta voce e osserva
          se questa tecnica ti aiuta a trovare la risposta giusta.
      courseA_harvester_seq3_2019:
        courseA_harvester_seq3_a: |-
          Ti sei ricordato di usare questo blocco?

          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: Prova a pronunciare i passi ad alta voce e osserva
          se questa tecnica ti aiuta a trovare la risposta giusta.
      courseA_harvester_seq4:
        courseA_harvester_seq4_a: Quante caselle ci sono tra la contadina e la pannocchia?
          Quanti blocchi ci sono già nell'area di lavoro?
        courseA_harvester_seq4_b: |-
          Ti servono cinque blocchi `E →` più uno

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_seq4_2019:
        courseA_harvester_seq4_a: Quante caselle ci sono tra la contadina e la pannocchia?
          Quanti blocchi ci sono già nell'area di lavoro?
        courseA_harvester_seq4_b: |-
          Ti servono cinque blocchi `E →` più uno

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_seq5:
        courseA_harvester_seq5_a: Qual è il blocco che fa muovere la contadina nella
          direzione sbagliata?
        courseA_harvester_seq5_b: Per correggere il programma, devi togliere un blocco.
        courseA_harvester_seq5_c: |-
          Trascina questo blocco nel cestino!

          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq5_2019:
        courseA_harvester_seq5_a: Qual è il blocco che fa muovere la contadina nella
          direzione sbagliata?
        courseA_harvester_seq5_b: Per correggere il programma, devi togliere un blocco.
        courseA_harvester_seq5_c: |-
          Trascina questo blocco nel cestino!

          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq6:
        courseA_harvester_seq6_a: Se ti sei bloccato, prova a pronunciare i passi
          ad alta voce. Questa tecnica potrebbe aiutarti a trovare la risposta giusta.
      courseA_harvester_seq6_2019:
        courseA_harvester_seq6_a: Se ti sei bloccato, prova a pronunciare i passi
          ad alta voce. Questa tecnica potrebbe aiutarti a trovare la risposta giusta.
      courseA_harvester_seq7:
        courseA_harvester_seq7_a: Prova a risolvere l'esercizio in due parti, una
          parte prima della curva e l'altra dopo la curva.
        courseA_harvester_seq7_b: Sei in difficoltà? È questo il percorso che la contadina
          dovrebbe seguire.
      courseA_harvester_seq7_2019:
        courseA_harvester_seq7_a: Prova a risolvere l'esercizio in due parti, una
          parte prima della curva e l'altra dopo la curva.
        courseA_harvester_seq7_b: Sei in difficoltà? È questo il percorso che la contadina
          dovrebbe seguire.
      courseA_harvester_seq8:
        courseA_harvester_seq8_a: Il tuo programma dovrebbe avere **4** blocchi di
          movimento e **2** blocchi `prendi pannocchia`.
      courseA_harvester_seq8_2019:
        courseA_harvester_seq8_a: Il tuo programma dovrebbe avere **4** blocchi di
          movimento e **2** blocchi `prendi pannocchia`.
      courseA_harvester_seq9:
        courseA_harvester_seq9_a: Esegui il programma un paio di volte per vedere
          cosa succede. Dove si blocca la contadina?
        courseA_harvester_seq9_b: Non dimenticare di raccogliere tutte le pannocchie!
          Ti serviranno **3** blocchi `prendi pannocchia`.
        courseA_harvester_seq9_c: Dovresti seguire questo percorso per raccogliere
          tutte le pannocchie.
      courseA_harvester_seq9_2019:
        courseA_harvester_seq9_a: Esegui il programma un paio di volte per vedere
          cosa succede. Dove si blocca la contadina?
        courseA_harvester_seq9_b: Non dimenticare di raccogliere tutte le pannocchie!
          Ti serviranno **3** blocchi `prendi pannocchia`.
        courseA_harvester_seq9_c: Dovresti seguire questo percorso per raccogliere
          tutte le pannocchie.
      courseA_maze_ramp2_2018:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp2_2019:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp3a_2018:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveNorth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp3a_2019:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveNorth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp3b_2018:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveSouth">
                  <next>
                    <block type="maze_moveWest">
                      <next>
                        <block type="maze_moveWest"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp3b_2019:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveSouth">
                  <next>
                    <block type="maze_moveWest">
                      <next>
                        <block type="maze_moveWest"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp4a_2018:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveSouth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp4a_2019:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveSouth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp5a_2018:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveWest">
                  <next>
                    <block type="maze_moveWest">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_ramp5a_2019:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveWest">
                  <next>
                    <block type="maze_moveWest">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseA_maze_seq1:
        courseA_maze_seq1_a: |-
          Se hai difficoltà a far muovere l'uccellino, controlla che i blocchi siano agganciati tra loro e al blocco iniziale <xml>
            <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: |-
          L'uccellino deve spostarsi tre volte verso Ovest per poter raggiungere il maialino. Usa questo blocco:

          <xml><block type="maze_moveWest"/></xml>
      courseA_maze_seq10:
        courseA_maze_seq10_a: Se hai problemi, prova prima a scrivere i passaggi su
          un foglio di carta.
        courseA_maze_seq10_b: Avrai bisogno di muoverti in 3 direzioni diverse per
          risolvere l'esercizio.
      courseA_maze_seq10_2018:
        courseA_maze_seq10_a: Se hai problemi, prova prima a scrivere i passaggi su
          un foglio di carta.
        courseA_maze_seq10_b: Avrai bisogno di muoverti in 3 direzioni diverse per
          risolvere l'esercizio.
      courseA_maze_seq10_2019:
        courseA_maze_seq10_a: Se hai problemi, prova prima a scrivere i passaggi su
          un foglio di carta.
        courseA_maze_seq10_b: Avrai bisogno di muoverti in 3 direzioni diverse per
          risolvere l'esercizio.
      courseA_maze_seq13:
        courseA_maze_seq13_a: Se non ti è chiaro quale percorso seguire, usa il dito
          per tracciare il tuo percorso dall'uccellino fino al maialino.
        courseA_maze_seq13_b: Non aver paura di commettere errori! Prova ad aggiungere
          blocchi e fai eseguire il programma per vedere cosa succede.
        courseA_maze_seq13_c: Questi blocchi <xml><block type="maze_moveNorth"/></xml><xml><block
          type="maze_moveEast"/></xml> ti aiuteranno ad avvicinarti al maialino.
      courseA_maze_seq13_2018:
        courseA_maze_seq13_a: Se non ti è chiaro quale percorso seguire, usa il dito
          per tracciare il tuo percorso dall'uccellino fino al maialino.
        courseA_maze_seq13_b: Non aver paura di commettere errori! Prova ad aggiungere
          blocchi e fai eseguire il programma per vedere cosa succede.
        courseA_maze_seq13_c: Questi blocchi <xml><block type="maze_moveNorth"/></xml><xml><block
          type="maze_moveEast"/></xml> ti aiuteranno ad avvicinarti al maialino.
      courseA_maze_seq13_2019:
        courseA_maze_seq13_a: Se non ti è chiaro quale percorso seguire, usa il dito
          per tracciare il tuo percorso dall'uccellino fino al maialino.
        courseA_maze_seq13_b: Non aver paura di commettere errori! Prova ad aggiungere
          blocchi e fai eseguire il programma per vedere cosa succede.
        courseA_maze_seq13_c: "Questi blocchi <xml><block type=\"maze_moveNorth\"/></xml>
          \n\n<xml><block type=\"maze_moveEast\"/></xml> ti aiuteranno ad avvicinarti
          al maialino."
      courseA_maze_seq1_2018:
        courseA_maze_seq1_a: |-
          Se hai difficoltà a far muovere l'uccellino, controlla che i blocchi siano agganciati tra loro e al blocco iniziale <xml>
            <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: |-
          L'uccellino deve spostarsi tre volte verso Ovest per poter raggiungere il maialino. Usa questo blocco:

          <xml><block type="maze_moveWest"/></xml>
      courseA_maze_seq1_2019:
        courseA_maze_seq1_a: |-
          Se hai difficoltà a far muovere l'uccellino, controlla che i blocchi siano agganciati tra loro e al blocco iniziale <xml>
            <block type="when_run"/>
          </xml>
        courseA_maze_seq1_b: |-
          L'uccellino deve spostarsi tre volte verso Ovest per poter raggiungere il maialino. Usa questo blocco:

          <xml><block type="maze_moveWest"/></xml>
      courseA_maze_seq2:
        courseA_maze_seq2_a: In questo programma manca 1 blocco. Riesci a capire quale?
        courseA_maze_seq2_b: Prova ad eseguire il programma per capire dove va a finire
          l'uccellino. Come devi proseguire?
      courseA_maze_seq3:
        courseA_maze_seq3_a: 1 dei blocchi sposta l'uccellino nella direzione sbagliata.
          Riesci a capire qual è e a sostituirlo con il blocco corretto?
        courseA_maze_seq3_b: Prova ad usare il pulsante "Fai un passo" per capire
          dov'è l'errore. È al 1° passo? Al 2°?
        courseA_maze_seq3_c: Questo blocco <xml><block type="maze_moveNorth"/></xml>
          non sembra muovere l'uccellino nella direzione corretta. Puoi sostituirlo
          con un altro blocco?
      courseA_maze_seq4:
        courseA_maze_seq4_a: Se sei in difficoltà, cerca di capire quale deve essere
          il percorso corretto da seguire ed elimina il blocco che non permette di
          seguirlo.
        courseA_maze_seq4_b: Prova ad eseguire il codice così com'è. Qualcosa non
          funziona? Quale blocco puoi eliminare? Come puoi risolvere il problema?
      courseA_maze_seq5:
        courseA_maze_seq5_a: Per trovare la soluzione, prova a scrivere i passi sulla
          carta!
        courseA_maze_seq5_b: Avrai bisogno di 2 blocchi, che puntano in 2 direzioni
          diverse.
      courseA_maze_seq5_2018:
        '1': Per trovare la soluzione, prova a scrivere i passi sulla carta!
        '2': |-
          Dovrai usare questo blocco:

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5_2019:
        '1': Per trovare la soluzione, prova a scrivere i passi sulla carta!
        '2': |-
          Dovrai usare questo blocco:

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5a_2018:
        '1': Prova a pronunciare i passi ad alta voce e osserva se questa tecnica
          ti aiuta a trovare la risposta giusta.
      courseA_maze_seq5a_2019:
        '1': Prova a pronunciare i passi ad alta voce e osserva se questa tecnica
          ti aiuta a trovare la risposta giusta.
      courseA_maze_seq6:
        courseA_maze_seq6_a: Il tuo programma finale dovrebbe avere 3 blocchi di movimento.
        courseA_maze_seq6_b: Se ti blocchi, prova a risolvere l'esercizio in due parti,
          una parte prima della curva e l'altra dopo la curva.
      courseA_maze_seq6_2018:
        courseA_maze_seq6_a: Il tuo programma finale dovrebbe avere 3 blocchi di movimento.
        courseA_maze_seq6_b: Se ti blocchi, prova a risolvere l'esercizio in due parti,
          una parte prima della curva e l'altra dopo la curva.
      courseA_maze_seq6_2019:
        courseA_maze_seq6_a: Il tuo programma finale dovrebbe avere 3 blocchi di movimento.
        courseA_maze_seq6_b: Se ti blocchi, prova a risolvere l'esercizio in due parti,
          una parte prima della curva e l'altra dopo la curva.
      courseA_maze_seq7:
        courseA_maze_seq7_a: Hai bisogno di aggiungere 1 blocco per far arrivare l'uccellino
          fino al maialino.
        courseA_maze_seq7_b: Se non riesci a capire cosa devi fare, prova a disegnare
          il labirinto sulla carta e usa le dita per capire il percorso da seguire
          e quindi scoprire le mosse da fare.
      courseA_maze_seq8:
        courseA_maze_seq8_a: Se sei bloccato, prova a disegnare il labirinto sulla
          carta per capire come dovrebbe muoversi l'uccellino.
      courseA_maze_seq8_2018:
        courseA_maze_seq8_a: Se sei bloccato, prova a disegnare il labirinto sulla
          carta per capire come dovrebbe muoversi l'uccellino.
      courseA_maze_seq8_2019:
        courseA_maze_seq8_a: Se sei bloccato, prova a disegnare il labirinto sulla
          carta per capire come dovrebbe muoversi l'uccellino.
      courseA_maze_seq9:
        courseA_maze_seq9_a: Bloccato? Prova a tracciare con le dita il percorso che
          deve seguire l'uccellino.
        courseA_maze_seq9_b: Se non sai cosa fare, prova a premere "Ripristina" e
          fai partire il programma per vedere cosa non funziona.
        courseA_maze_seq9_c: Dovrai muoverti in 3 direzioni per risolvere questo esercizio.
      courseA_maze_seq_challenge1:
        courseA_maze_seq_challenge1_a: Ci sono due modi per risolvere questo esercizio.
      courseA_maze_seq_challenge1_2018:
        courseA_maze_seq_challenge1_a: Ci sono due modi per risolvere questo esercizio.
      courseA_maze_seq_challenge1_2019:
        courseA_maze_seq_challenge1_a: Ci sono due modi per risolvere questo esercizio.
      courseA_maze_seq_challenge2:
        courseA_maze_seq_challenge2_a: Prova a contare le caselle con un dito. Ma
          ricorda di non tenere conto della casella di partenza!
      courseA_maze_seq_challenge2_2018:
        courseA_maze_seq_challenge2_a: Prova a contare le caselle con un dito. Ma
          ricorda di non tenere conto della casella di partenza!
      courseA_maze_seq_challenge2_2019:
        courseA_maze_seq_challenge2_a: Prova a contare le caselle con un dito. Ma
          ricorda di non tenere conto della casella di partenza!
      courseA_playLab_events2:
        courseA_playLab_events2_a: Cerca un blocco che faccia dire qualcosa al cane.
        courseA_playLab_events2_b: |-
          Questo è il codice che ti serve per completare questo esercizio:

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
              <title name="SPRITE">1</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events2_2018:
        courseA_playLab_events2_a: Cerca un blocco che faccia dire qualcosa al cane.
        courseA_playLab_events2_b: |-
          Questo è il codice che ti serve per completare questo esercizio:

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
              <title name="SPRITE">1</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events2_2019:
        courseA_playLab_events2_a: Cerca un blocco che faccia dire qualcosa al cane.
        courseA_playLab_events2_b: |-
          Questo è il codice che ti serve per completare questo esercizio:

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
              <title name="SPRITE">1</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events3:
        courseA_playLab_events3_a: |-
          Trascina questo blocco  <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block></xml> e aggancialo sotto al blocco <xml><block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block></xml>
        courseA_playLab_events3_b: Dopo che hai scritto il programma, ricorda di utilizzare
          la freccia a sinistra per muovere il cane fino alla bandierina. Quando la
          bandierina diventa verde, hai finito! (Puoi cliccare sulle frecce che vedi
          sullo schermo, oppure usare le frecce della tastiera.)
      courseA_playLab_events3_2018:
        courseA_playLab_events3_a: |-
          Trascina questo blocco  <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block></xml> e aggancialo sotto al blocco <xml><block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block></xml>
        courseA_playLab_events3_b: Dopo che hai scritto il programma, ricorda di utilizzare
          la freccia a sinistra per muovere il cane fino alla bandierina. Quando la
          bandierina diventa verde, hai finito! (Puoi cliccare sulle frecce che vedi
          sullo schermo, oppure usare le frecce della tastiera.)
      courseA_playLab_events3_2019:
        courseA_playLab_events3_a: |-
          Trascina questo blocco  <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">8</title>
            </block></xml> e aggancialo sotto al blocco <xml><block type="studio_whenArrow">
              <title name="VALUE">left</title>
            </block></xml>
        courseA_playLab_events3_b: Dopo che hai scritto il programma, ricorda di utilizzare
          la freccia a sinistra per muovere il cane fino alla bandierina. Quando la
          bandierina diventa verde, hai finito! (Puoi cliccare sulle frecce che vedi
          sullo schermo, oppure usare le frecce della tastiera.)
      courseA_playLab_events4:
        courseA_playLab_events4_a: |-
          Ecco il blocco che dovresti usare per far muovere il cane a destra:

          <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></xml>
        courseA_playLab_events4_b: |-
          Questo è il codice che ti serve per completare questo esercizio:

          <xml><block type="studio_whenArrow">
              <title name="VALUE">right</title>
              <next>
            <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></next></block></xml>
      courseA_playLab_events4_2018:
        courseA_playLab_events4_a: |-
          Ecco il blocco che dovresti usare per far muovere il cane a destra:

          <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></xml>
        courseA_playLab_events4_b: |-
          Questo è il codice che ti serve per completare questo esercizio:

          <xml><block type="studio_whenArrow">
              <title name="VALUE">right</title>
              <next>
            <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></next></block></xml>
      courseA_playLab_events4_2019:
        courseA_playLab_events4_a: |-
          Ecco il blocco che dovresti usare per far muovere il cane a destra:

          <xml><block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></xml>
        courseA_playLab_events4_b: |-
          Questo è il codice che ti serve per completare questo esercizio:

          <xml><block type="studio_whenArrow">
              <title name="VALUE">right</title>
              <next>
            <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block></next></block></xml>
      courseA_playLab_events5:
        courseA_playLab_events5_a: "Ecco i blocchi degli eventi che dovresti usare
          per far muovere il cane in su e in giù:\n\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\n\ne \n\n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Sapevi che puoi cambiare il verso della freccia nel blocco evento, cliccando sul disegno e scegliendone uno nuovo?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events5_2018:
        courseA_playLab_events5_a: "Ecco i blocchi degli eventi che dovresti usare
          per far muovere il cane in su e in giù:\n\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\n\ne \n\n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Sapevi che puoi cambiare il verso della freccia nel blocco evento, cliccando sul disegno e scegliendone uno nuovo?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events5_2019:
        courseA_playLab_events5_a: "Ecco i blocchi degli eventi che dovresti usare
          per far muovere il cane in su e in giù:\n\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\n\ne \n\n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Sapevi che puoi cambiare il verso della freccia nel blocco evento, cliccando sul disegno e scegliendone uno nuovo?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events6:
        courseA_playLab_events6_a: |-
          Ecco il blocco evento che dovresti usare per far fare qualcosa quando il cane viene cliccato:

          <xml><block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block></xml>
        courseA_playLab_events6_b: |-
          Ecco il blocco che dovresti usare per cambiare lo sfondo:

          <xml><block type="studio_setBackground">
              <title name="VALUE">random</title>
            </block></xml>
        courseA_playLab_events6_c: |-
          Ecco il blocco che dovresti usare per riprodurre un suono casuale:

          <xml><block type="studio_playSound">
              <title name="SOUND">random</title>
            </block></xml>
      courseA_playLab_events6_2018:
        courseA_playLab_events6_a: |-
          Ecco il blocco evento che dovresti usare per far fare qualcosa quando il cane viene cliccato:

          <xml><block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block></xml>
        courseA_playLab_events6_b: |-
          Ecco il blocco che dovresti usare per cambiare lo sfondo:

          <xml><block type="studio_setBackground">
              <title name="VALUE">random</title>
            </block></xml>
        courseA_playLab_events6_c: |-
          Ecco il blocco che dovresti usare per riprodurre un suono casuale:

          <xml><block type="studio_playSound">
              <title name="SOUND">random</title>
            </block></xml>
      courseA_playLab_events6_2019:
        courseA_playLab_events6_a: |-
          Ecco il blocco evento che dovresti usare per far fare qualcosa quando il cane viene cliccato:

          <xml><block type="studio_whenSpriteClicked">
              <title name="SPRITE">1</title>
            </block></xml>
        courseA_playLab_events6_b: |-
          Ecco il blocco che dovresti usare per cambiare lo sfondo:

          <xml><block type="studio_setBackground">
              <title name="VALUE">random</title>
            </block></xml>
        courseA_playLab_events6_c: |-
          Ecco il blocco che dovresti usare per riprodurre un suono casuale:

          <xml><block type="studio_playSound">
              <title name="SOUND">random</title>
            </block></xml>
      courseA_playLab_events7:
        courseA_playLab_events7_a: |-
          Usa questo blocco per definire cosa deve succedere quando i personaggi si scontrano.

          <xml><block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">0</title>
            </block></xml>
      courseA_playLab_events7_2018:
        courseA_playLab_events7_a: |-
          Usa questo blocco per definire cosa deve succedere quando i personaggi si scontrano.

          <xml><block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">0</title>
            </block></xml>
      courseA_playLab_events7_2019:
        courseA_playLab_events7_a: |-
          Usa questo blocco per definire cosa deve succedere quando i personaggi si scontrano.

          <xml><block type="studio_whenSpriteCollided">
              <title name="SPRITE1">1</title>
              <title name="SPRITE2">0</title>
            </block></xml>
      courseA_playlab_events_challenge1:
        courseA_playlab_events_challenge1_a: "Fai apparire il pinguino quando clicchi
          sull'uccellino!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Fai apparire il fantasma quando clicchi
          sul pinguino!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Fai apparire il mostro allegro quando
          clicchi sul fantasma!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Fai apparire il robot quando clicchi
          sul mostro!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Infine, fai apparire il mago quando
          clicchi sul robot!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge1_2018:
        courseA_playlab_events_challenge1_a: "Fai apparire il pinguino quando clicchi
          sull'uccellino!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Fai apparire il fantasma quando clicchi
          sul pinguino!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Fai apparire il mostro allegro quando
          clicchi sul fantasma!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Fai apparire il robot quando clicchi
          sul mostro!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Infine, fai apparire il mago quando
          clicchi sul robot!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge1_2019:
        courseA_playlab_events_challenge1_a: "Fai apparire il pinguino quando clicchi
          sull'uccellino!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Fai apparire il fantasma quando clicchi
          sul pinguino!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Fai apparire il mostro allegro quando
          clicchi sul fantasma!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Fai apparire il robot quando clicchi
          sul mostro!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Infine, fai apparire il mago quando
          clicchi sul robot!\n\n<xml> \n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge2:
        courseA_playlab_events_challenge2_a: "Puoi fare cantare l'uccellino.\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "Puoi far suonare il robot.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          Puoi fare ringhiare il mostro arrabbiato.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      courseA_playlab_events_challenge2_2018:
        courseA_playlab_events_challenge2_a: "Puoi fare cantare l'uccellino.\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "Puoi far suonare il robot.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          Puoi fare ringhiare il mostro arrabbiato.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      courseA_playlab_events_challenge2_2019:
        courseA_playlab_events_challenge2_a: "Puoi fare cantare l'uccellino.\n\n<xml>
          \n  <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "Puoi far suonare il robot.\n\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          Puoi fare ringhiare il mostro arrabbiato.

          <xml>  <block type="studio_whenSpriteClicked">
              <title name="SPRITE">5</title>
              <next>
                <block type="studio_setSpriteEmotion">
                  <title name="SPRITE">5</title>
                  <title name="VALUE">2</title>
                  <next>
                    <block type="studio_saySprite">
                      <title name="SPRITE">5</title>
                      <title name="TEXT">Roar!</title>
                      <next>
                        <block type="studio_setSpriteEmotion">
                          <title name="SPRITE">5</title>
                          <title name="VALUE">0</title>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block></xml>
      courseB_Scrat_ramp1_2018:
        '1': Se Scrat non riesce a prendere la ghianda, controlla che i due blocchi
          siano collegati insieme, quindi clicca nuovamente su "Esegui".
        '2': Non aver paura di sbagliare! Prova in qualche modo e se non funziona
          prova in un'altra maniera!
      courseB_Scrat_ramp1_2019:
        '1': Se Scrat non riesce a prendere la ghianda, controlla che i due blocchi
          siano collegati insieme, quindi clicca nuovamente su "Esegui".
        '2': Non aver paura di sbagliare! Prova in qualche modo e se non funziona
          prova in un'altra maniera!
      courseB_Scrat_ramp2_2018:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp2_2019:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp3a_2018:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveNorth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp3a_2019:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveNorth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp3b_2018:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveSouth">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp3b_2019:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveSouth">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveEast"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp4a_2018:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveSouth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp4a_2019:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveEast">
                  <next>
                    <block type="maze_moveEast">
                      <next>
                        <block type="maze_moveSouth"/>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp5a_2018:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveWest">
                  <next>
                    <block type="maze_moveWest">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_Scrat_ramp5a_2019:
        '1': |-
          Il tuo programma dovrebbe risultare così:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="maze_moveWest">
                  <next>
                    <block type="maze_moveWest">
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseB_artist_loops2:
        courseB_artist_loops2_a: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseB_artist_loops2_b: Prova prima ad eseguire il codice per vedere dove
          va a finire l'artista.
      courseB_artist_loops2_2018:
        courseB_artist_loops2_a: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseB_artist_loops2_b: Prova prima ad eseguire il codice per vedere dove
          va a finire l'artista.
      courseB_artist_loops2_2019:
        courseB_artist_loops2_a: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseB_artist_loops2_b: Prova prima ad eseguire il codice per vedere dove
          va a finire l'artista.
      courseB_artist_loops3:
        courseB_artist_loops3_a: Ricordati che devi usare il ciclo `ripeti` per riuscire
          a risolvere l'esercizio!
        courseB_artist_loops3_b: L'artista dovrà muoversi verso Sud `S ↓` per disegnare
          questa linea.
      courseB_artist_loops3_2018:
        courseB_artist_loops3_a: |-
          Ricordati che devi usare il ciclo <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> per riuscire a risolvere l'esercizio!
        courseB_artist_loops3_b: L'artista dovrà muoversi verso Sud `S ↓` per disegnare
          questa linea.
      courseB_artist_loops3_2019:
        courseB_artist_loops3_a: |-
          Ricordati che devi usare il ciclo <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> per riuscire a risolvere l'esercizio!
        courseB_artist_loops3_b: L'artista dovrà muoversi verso Sud `S ↓` per disegnare
          questa linea.
      courseB_artist_loops4:
        courseB_artist_loops4_a: Il blocco `salta` ti fa muovere senza disegnare.
        courseB_artist_loops4_b: Avrai bisogno di aggiungere un blocco nel ciclo `ripeti`
          per risolvere questo esercizio.
        courseB_artist_loops4_c: Non dimenticare di cambiare il numero di ripetizioni
          nel blocco del ciclo.
      courseB_artist_loops4_2018:
        courseB_artist_loops4_a: Il blocco `salta` ti fa muovere senza disegnare.
        courseB_artist_loops4_b: Avrai bisogno di aggiungere un blocco nel ciclo `ripeti`
          per risolvere questo esercizio.
        courseB_artist_loops4_c: Non dimenticare di cambiare il numero di ripetizioni
          nel blocco del ciclo.
      courseB_artist_loops4_2019:
        courseB_artist_loops4_a: Il blocco `salta` ti fa muovere senza disegnare.
        courseB_artist_loops4_b: Avrai bisogno di aggiungere un blocco nel ciclo `ripeti`
          per risolvere questo esercizio.
        courseB_artist_loops4_c: Non dimenticare di cambiare il numero di ripetizioni
          nel blocco del ciclo.
      courseB_artist_loops5:
        courseB_artist_loops5_a: Trascina nell'area di lavoro un blocco `ripeti` e
          mettici dentro i blocchi grigi che trovi già pronti. Quante volte dovrà
          essere ripetuto questo ciclo?
      courseB_artist_loops5_2018:
        courseB_artist_loops5_a: |-
          Trascina nell'area di lavoro un blocco <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> e mettici dentro i blocchi grigi che trovi già pronti. Quante volte dovrà essere ripetuto questo ciclo?
      courseB_artist_loops5_2019:
        courseB_artist_loops5_a: |-
          Trascina nell'area di lavoro un blocco <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> e mettici dentro i blocchi grigi che trovi già pronti. Quante volte dovrà essere ripetuto questo ciclo?
      courseB_artist_loops6:
        courseB_artist_loops6_b: Prova a scrivere le mosse su un pezzo di carta e
          cerca una sequenza che si ripete.
      courseB_artist_loops6_2018:
        courseB_artist_loops6_b: Prova a scrivere le mosse su un pezzo di carta e
          cerca una sequenza che si ripete.
      courseB_artist_loops6_2019:
        courseB_artist_loops6_b: Prova a scrivere le mosse su un pezzo di carta e
          cerca una sequenza che si ripete.
      courseB_artist_loops7:
        courseB_artist_loops7_a: Per questa sfida servono **4** cicli, proprio uno
          dietro l'altro!
        courseB_artist_loops7_b: |-
          Nota che ogni ciclo crea una scala che va in una direzione diversa.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: |-
          I cicli dovrebbero fare questo:

          -   Ciclo 1
              -   Destra
              -   Giù

          -   Ciclo 2
              -   Destra
              -   Su

          -   Ciclo 3
              -   Sinistra
              -   Su

          -   Ciclo 4
              -   Sinistra
              -   Giù
      courseB_artist_loops7_2018:
        courseB_artist_loops7_a: Per questa sfida servono **4** cicli, proprio uno
          dietro l'altro!
        courseB_artist_loops7_b: |-
          Nota che ogni ciclo crea una scala che va in una direzione diversa.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: |-
          I cicli dovrebbero fare questo:

          -   Ciclo 1
              -   Destra
              -   Giù

          -   Ciclo 2
              -   Destra
              -   Su

          -   Ciclo 3
              -   Sinistra
              -   Su

          -   Ciclo 4
              -   Sinistra
              -   Giù
      courseB_artist_loops7_2019:
        courseB_artist_loops7_a: Per questa sfida servono **4** cicli, proprio uno
          dietro l'altro!
        courseB_artist_loops7_b: |-
          Nota che ogni ciclo crea una scala che va in una direzione diversa.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: |-
          I cicli dovrebbero fare questo:

          -   Ciclo 1
              -   Destra
              -   Giù

          -   Ciclo 2
              -   Destra
              -   Su

          -   Ciclo 3
              -   Sinistra
              -   Su

          -   Ciclo 4
              -   Sinistra
              -   Giù
      courseB_artist_loops8:
        courseB_artist_loops8_a: Quante volte devi ripetere la sequenza per completare
          la scala?
        courseB_artist_loops8_b: Prova ad eseguire il codice che ti è stato dato per
          vedere cosa fa.
      courseB_artist_loops8_2018:
        courseB_artist_loops8_a: Quante volte devi ripetere la sequenza per completare
          la scala?
        courseB_artist_loops8_b: Prova ad eseguire il codice che ti è stato dato per
          vedere cosa fa.
      courseB_artist_loops8_2019:
        courseB_artist_loops8_a: Quante volte devi ripetere la sequenza per completare
          la scala?
        courseB_artist_loops8_b: Prova ad eseguire il codice che ti è stato dato per
          vedere cosa fa.
      courseB_artist_loops9:
        courseB_artist_loops9_a: Ricorda che i blocchi `salta` servono per muoversi
          senza disegnare.
        courseB_artist_loops9_b: Dovresti usare il blocco `O ←` per risolvere questo
          esercizio.
        courseB_artist_loops9_c: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
      courseB_artist_loops9_2018:
        courseB_artist_loops9_a: Ricorda che i blocchi `salta` servono per muoversi
          senza disegnare.
        courseB_artist_loops9_b: Dovresti usare il blocco `O ←` per risolvere questo
          esercizio.
        courseB_artist_loops9_c: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
      courseB_artist_loops9_2019:
        courseB_artist_loops9_a: Ricorda che i blocchi `salta` servono per muoversi
          senza disegnare.
        courseB_artist_loops9_b: Dovresti usare il blocco `O ←` per risolvere questo
          esercizio.
        courseB_artist_loops9_c: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
      courseB_artist_loops_challenge1:
        courseB_artist_loops_challenge1_a: 'Blocchi come questo: <xml> <block type="simple_move_up_right"/></xml>
          permetteranno all''artista di muoversi in diagonale!'
        courseB_artist_loops_challenge1_b: Quando hai finito di disegnare il primo
          dado, `salta` al successivo!
        courseB_artist_loops_challenge1_c: Dovrai muoverti o saltare due volte su
          alcune linee.
      courseB_artist_loops_challenge1_2018:
        courseB_artist_loops_challenge1_a: 'Blocchi come questo: <xml> <block type="simple_move_up_right"/></xml>
          permetteranno all''artista di muoversi in diagonale!'
        courseB_artist_loops_challenge1_b: Quando hai finito di disegnare il primo
          dado, `salta` al successivo!
        courseB_artist_loops_challenge1_c: Dovrai muoverti o saltare due volte su
          alcune linee.
      courseB_artist_loops_challenge1_2019:
        courseB_artist_loops_challenge1_a: 'Blocchi come questo: <xml> <block type="simple_move_up_right"/></xml>
          permetteranno all''artista di muoversi in diagonale!'
        courseB_artist_loops_challenge1_b: Quando hai finito di disegnare il primo
          dado, `salta` al successivo!
        courseB_artist_loops_challenge1_c: Dovrai muoverti o saltare due volte su
          alcune linee.
      courseB_artist_loops_challenge2:
        courseB_artist_loops_challenge2_a: Il codice per disegnare una X è già lì
          pronto. Tutto quello che devi fare è ripetere le X e saltare al punto successivo.
        courseB_artist_loops_challenge2_b: Devi usare il blocco `salta` per spostarti
          senza disegnare.
      courseB_artist_loops_challenge2_2018:
        courseB_artist_loops_challenge2_a: Il codice per disegnare una X è già lì
          pronto. Tutto quello che devi fare è ripetere le X e saltare al punto successivo.
        courseB_artist_loops_challenge2_b: Devi usare il blocco `salta` per spostarti
          senza disegnare.
      courseB_artist_loops_challenge2_2019:
        courseB_artist_loops_challenge2_a: Il codice per disegnare una X è già lì
          pronto. Tutto quello che devi fare è ripetere le X e saltare al punto successivo.
        courseB_artist_loops_challenge2_b: Devi usare il blocco `salta` per spostarti
          senza disegnare.
      courseB_collector_loops1:
        courseB_collector_loops1_a: Il blocco <xml><block type="collector_collect_simplified"/></xml>
          consente di raccogliere i diamanti quando ti ci trovi sopra.
      courseB_collector_loops10:
        courseB_collector_loops10_a: Se non riesci a capire dove mettere il ciclo
          `ripeti`, scrivi il codice con i singoli blocchi azzurri e poi cerca lo
          schema che si ripete.
        courseB_collector_loops10_b: Prova a scrivere le mosse su un pezzo di carta
          e cerca una sequenza che si ripete.
      courseB_collector_loops10_2018:
        courseB_collector_loops10_a: Se non riesci a capire dove mettere il ciclo
          `ripeti`, scrivi il codice con i singoli blocchi azzurri e poi cerca lo
          schema che si ripete.
        courseB_collector_loops10_b: Prova a scrivere le mosse su un pezzo di carta
          e cerca una sequenza che si ripete.
      courseB_collector_loops10_2019:
        courseB_collector_loops10_a: Se non riesci a capire dove mettere il ciclo
          `ripeti`, scrivi il codice con i singoli blocchi azzurri e poi cerca lo
          schema che si ripete.
        courseB_collector_loops10_b: Prova a scrivere le mosse su un pezzo di carta
          e cerca una sequenza che si ripete.
      courseB_collector_loops1_2018:
        courseB_collector_loops1_a: Il blocco <xml><block type="collector_collect_simplified"/></xml>
          consente di raccogliere i diamanti quando ti ci trovi sopra.
      courseB_collector_loops1_2019:
        courseB_collector_loops1_a: Il blocco <xml><block type="collector_collect_simplified"/></xml>
          consente di raccogliere i diamanti quando ti ci trovi sopra.
      courseB_collector_loops2:
        courseB_collector_loops2_a: Devi muoverti prima di raccogliere qualsiasi diamante.
        courseB_collector_loops2_b: Quando hai raggiunto un diamante, usa il blocco
          <xml><block type="collector_collect"/></xml> per raccoglierlo.
      courseB_collector_loops2_2018:
        courseB_collector_loops2_a: Devi muoverti prima di raccogliere qualsiasi diamante.
        courseB_collector_loops2_b: Quando hai raggiunto un diamante, usa il blocco
          <xml><block type="collector_collect"/></xml> per raccoglierlo.
      courseB_collector_loops2_2019:
        courseB_collector_loops2_a: Devi muoverti prima di raccogliere qualsiasi diamante.
        courseB_collector_loops2_b: Quando hai raggiunto un diamante, usa il blocco
          <xml><block type="collector_collect"/></xml> per raccoglierlo.
      courseB_collector_loops3:
        courseB_collector_prog3_a: Prova ad usare un blocco <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> per raccogliere tutti
          i diamanti.
        courseB_collector_prog3_b: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo `ripeti`.
      courseB_collector_loops3_2018:
        courseB_collector_prog3_a: Prova ad usare un blocco <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> per raccogliere tutti
          i diamanti.
        courseB_collector_prog3_b: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo `ripeti`.
      courseB_collector_loops3_2019:
        courseB_collector_prog3_a: Prova ad usare un blocco <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> per raccogliere tutti
          i diamanti.
        courseB_collector_prog3_b: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo `ripeti`.
      courseB_collector_loops4:
        courseB_collector_loops4_a: Prova ad usare il pulsante "Fai un passo" per
          capire dove c'è qualcosa di sbagliato.
        courseB_collector_loops4_b: Per modificare di quante caselle deve spostarsi
          Laura, cambia il numero di volte che il ciclo viene eseguito.
        courseB_collector_loops4_c: Alla fine del ciclo `ripeti`, Laura deve muoversi
          verso il basso e finire di raccogliere i diamanti!
      courseB_collector_loops4_2018:
        courseB_collector_loops4_a: Prova ad usare il pulsante "Fai un passo" per
          capire dove c'è qualcosa di sbagliato.
        courseB_collector_loops4_b: Per modificare di quante caselle deve spostarsi
          Laura, cambia il numero di volte che il ciclo viene eseguito.
        courseB_collector_loops4_c: |-
          Alla fine del ciclo <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> Laura deve muoversi verso il basso e finire di raccogliere i diamanti!
      courseB_collector_loops4_2019:
        courseB_collector_loops4_a: Prova ad usare il pulsante "Fai un passo" per
          capire dove c'è qualcosa di sbagliato.
        courseB_collector_loops4_b: Per modificare di quante caselle deve spostarsi
          Laura, cambia il numero di volte che il ciclo viene eseguito.
        courseB_collector_loops4_c: |-
          Alla fine del ciclo <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> Laura deve muoversi verso il basso e finire di raccogliere i diamanti!
      courseB_collector_loops5:
        courseB_collector_loops5_a: Devi usare più di un ciclo per risolvere bene
          l'esercizio.
        courseB_collector_loops5_b: Per vedere cosa fa questo programma, prova ad
          eseguirlo un paio di volte.
      courseB_collector_loops5_2018:
        courseB_collector_loops5_a: Devi usare più di un ciclo per risolvere bene
          l'esercizio.
        courseB_collector_loops5_b: Per vedere cosa fa questo programma, prova ad
          eseguirlo un paio di volte.
      courseB_collector_loops5_2019:
        courseB_collector_loops5_a: Devi usare più di un ciclo per risolvere bene
          l'esercizio.
        courseB_collector_loops5_b: Per vedere cosa fa questo programma, prova ad
          eseguirlo un paio di volte.
      courseB_collector_loops6:
        courseB_collector_loops6_a: Non riesci a capire in che punto il programma
          inizia a sbagliare? Usa il pulsante "Fai un passo" per eseguire il programma
          un'istruzione alla volta.
        courseB_collector_loops6_b: Puoi modificare il numero di volte che il ciclo
          viene ripetuto cliccando sul numero "3" e scegliendo un altro numero.
        courseB_collector_loops6_c: Dovrai usare 3 cicli `ripeti` per risolvere l'esercizio.
        courseB_collector_loops6_d: Se sei confuso, prova a suddividere questo percorso
          in 3 parti.
      courseB_collector_loops6_2018:
        courseB_collector_loops6_a: Non riesci a capire in che punto il programma
          inizia a sbagliare? Usa il pulsante "Fai un passo" per eseguire il programma
          un'istruzione alla volta.
        courseB_collector_loops6_b: Puoi modificare il numero di volte che il ciclo
          viene ripetuto cliccando sul numero "3" e scegliendo un altro numero.
        courseB_collector_loops6_c: |-
          Dovrai usare 3 cicli <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> per risolvere l'esercizio.
        courseB_collector_loops6_d: Se sei confuso, prova a suddividere questo percorso
          in 3 parti.
      courseB_collector_loops6_2019:
        courseB_collector_loops6_a: Non riesci a capire in che punto il programma
          inizia a sbagliare? Usa il pulsante "Fai un passo" per eseguire il programma
          un'istruzione alla volta.
        courseB_collector_loops6_b: Puoi modificare il numero di volte che il ciclo
          viene ripetuto cliccando sul numero "3" e scegliendo un altro numero.
        courseB_collector_loops6_c: |-
          Dovrai usare 3 cicli <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> per risolvere l'esercizio.
        courseB_collector_loops6_d: Se sei confuso, prova a suddividere questo percorso
          in 3 parti.
      courseB_collector_loops7:
        courseB_collector_loops7_a: Se hai problemi con questo esercizio, prova a
          disegnarlo su un pezzo di carta per aiutarti a capirlo.
        courseB_collector_loops7_b: Hai bisogno di 3 cicli `ripeti` per risolvere
          questo esercizio e non dimenticare l'ultimo diamante isolato!
      courseB_collector_loops7_2018:
        courseB_collector_loops7_a: Se hai problemi con questo esercizio, prova a
          disegnarlo su un pezzo di carta per aiutarti a capirlo.
        courseB_collector_loops7_b: Hai bisogno di 3 cicli `ripeti` per risolvere
          questo esercizio e non dimenticare l'ultimo diamante isolato!
      courseB_collector_loops7_2019:
        courseB_collector_loops7_a: Se hai problemi con questo esercizio, prova a
          disegnarlo su un pezzo di carta per aiutarti a capirlo.
        courseB_collector_loops7_b: Hai bisogno di 3 cicli `ripeti` per risolvere
          questo esercizio e non dimenticare l'ultimo diamante isolato!
      courseB_collector_loops8:
        courseB_collector_loops8_challenge_a: Se non riesci a capire dove mettere
          il ciclo `ripeti`, scrivi il codice con i singoli blocchi azzurri e poi
          cerca lo schema che si ripete.
      courseB_collector_loops8_2018:
        courseB_collector_loops8_challenge_a: Se non riesci a capire dove mettere
          il ciclo `ripeti`, scrivi il codice con i singoli blocchi azzurri e poi
          cerca lo schema che si ripete.
      courseB_collector_loops8_2019:
        courseB_collector_loops8_challenge_a: Se non riesci a capire dove mettere
          il ciclo `ripeti`, scrivi il codice con i singoli blocchi azzurri e poi
          cerca lo schema che si ripete.
      courseB_collector_loops9:
        courseB_collector_loops9_a: 'Ti sembra tropo difficile? Suddividi il problema
          in 3 parti più piccole: così sarà più semplice.'
        courseB_collector_loops9_b: Per risolvere l'esercizio, hai bisogni di 3 cicli
          `ripeti`, uno dopo l'altro.
      courseB_collector_loops9_2018:
        courseB_collector_loops9_a: 'Ti sembra tropo difficile? Suddividi il problema
          in 3 parti più piccole: così sarà più semplice.'
        courseB_collector_loops9_b: Per risolvere l'esercizio, hai bisogni di 3 cicli
          `ripeti`, uno dopo l'altro.
      courseB_collector_loops9_2019:
        courseB_collector_loops9_a: 'Ti sembra tropo difficile? Suddividi il problema
          in 3 parti più piccole: così sarà più semplice.'
        courseB_collector_loops9_b: Per risolvere l'esercizio, hai bisogni di 3 cicli
          `ripeti`, uno dopo l'altro.
      courseB_collector_loops_challenge1:
        courseB_collector_loops_challenge1_b: |-
          Inizia mettendo in un ciclo i seguenti blocchi:

          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Muoviti due volte verso Est tra un
          percorso e l'altro:\n\n<xml>\n  <block type=\"maze_moveEast\"><next>\n  <block
          type=\"maze_moveEast\"></block></next></block>\n  </xml>\n\nPuoi riuscirci
          usando solo 14 blocchi. Clicca un altro suggerimento per vedere una possibile
          soluzione. "
        courseB_collector_loops_challenge1_d: |-
          Prova questa soluzione!

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge1_2018:
        courseB_collector_loops_challenge1_b: |-
          Inizia mettendo in un ciclo i seguenti blocchi:

          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Muoviti due volte verso Est tra un
          percorso e l'altro:\n\n<xml>\n  <block type=\"maze_moveEast\"><next>\n  <block
          type=\"maze_moveEast\"></block></next></block>\n  </xml>\n\nPuoi riuscirci
          usando solo 14 blocchi. Clicca un altro suggerimento per vedere una possibile
          soluzione. "
        courseB_collector_loops_challenge1_d: |-
          Prova questa soluzione!

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge1_2019:
        courseB_collector_loops_challenge1_b: |-
          Inizia mettendo in un ciclo i seguenti blocchi:

          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Muoviti due volte verso Est tra un
          percorso e l'altro:\n\n<xml>\n  <block type=\"maze_moveEast\"><next>\n  <block
          type=\"maze_moveEast\"></block></next></block>\n  </xml>\n\nPuoi riuscirci
          usando solo 14 blocchi. Clicca un altro suggerimento per vedere una possibile
          soluzione. "
        courseB_collector_loops_challenge1_d: |-
          Prova questa soluzione!

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge2a:
        courseB_collector_loops_challenge2a_a: Se qualcosa va storto, prova a cercare
          gli errori (debugging). Non arrenderti!
        courseB_collector_loops_challenge2a_b: Guarda questo possibile percorso. Riesci
          a notare uno schema da ripetere?
        courseB_collector_loops_challenge2a_c: Per raccogliere tutti i diamanti, devi
          mettere nel ciclo principale due blocchi <xml> <block type="collector_collect"/></xml>
          oppure mettere quel blocco all'interno di un ciclo `ripeti`.
      courseB_collector_loops_challenge2a_2018:
        courseB_collector_loops_challenge2a_a: Se qualcosa va storto, prova a cercare
          gli errori (debugging). Non arrenderti!
        courseB_collector_loops_challenge2a_b: Guarda questo possibile percorso. Riesci
          a notare uno schema da ripetere?
        courseB_collector_loops_challenge2a_c: Per raccogliere tutti i diamanti, devi
          mettere nel ciclo principale due blocchi <xml> <block type="collector_collect"/></xml>
          oppure mettere quel blocco all'interno di un ciclo `ripeti`.
      courseB_collector_loops_challenge2a_2019:
        courseB_collector_loops_challenge2a_a: Se qualcosa va storto, prova a cercare
          gli errori (debugging). Non arrenderti!
        courseB_collector_loops_challenge2a_b: Guarda questo possibile percorso. Riesci
          a notare uno schema da ripetere?
        courseB_collector_loops_challenge2a_c: Per raccogliere tutti i diamanti, devi
          mettere nel ciclo principale due blocchi <xml> <block type="collector_collect"/></xml>
          oppure mettere quel blocco all'interno di un ciclo `ripeti`.
      courseB_iceage_loops1:
        courseB_iceage_loops1_a: Stai attento al ghiaccio rotto! Se Scrat ci andrà
          sopra, cadrà in acqua!
        courseB_iceage_loops1_b: |-
          Dovrai usare questo blocco:

          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops10:
        courseB_iceage_loops10_a: Stai attento al ghiaccio rotto! Se Scrat ci andrà
          sopra, cadrà in acqua!
        courseB_iceage_loops10_b: Prova a pronunciare i passaggi ad alta voce o a
          scriverli su un foglio di carta. Noti degli schemi che si ripetono?
        courseB_iceage_loops10_c: Questa volta il percorso è lungo! Segui questa traccia.
      courseB_iceage_loops10_2019:
        courseB_iceage_loops10_a: Stai attento al ghiaccio rotto! Se Scrat ci andrà
          sopra, cadrà in acqua!
        courseB_iceage_loops10_b: Prova a pronunciare i passaggi ad alta voce o a
          scriverli su un foglio di carta. Noti degli schemi che si ripetono?
        courseB_iceage_loops10_c: Questa volta il percorso è lungo! Segui questa traccia.
      courseB_iceage_loops1_2019:
        courseB_iceage_loops1_a: Stai attento al ghiaccio rotto! Se Scrat ci andrà
          sopra, cadrà in acqua!
        courseB_iceage_loops1_b: |-
          Dovrai usare questo blocco:

          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops2:
        courseB_iceage_loops2_a: 'Dividi questo esercizio in due parti: una prima
          dell''angolo e l''altra dopo.'
        courseB_iceage_loops2_b: Se ti blocchi, prova a pronunciare ad alta voce i
          vari passaggi.
        courseB_iceage_loops2_c: Segui questo percorso per far arrivare Scrat fino
          alla ghianda.
      courseB_iceage_loops2_2019:
        courseB_iceage_loops2_a: 'Dividi questo esercizio in due parti: una prima
          dell''angolo e l''altra dopo.'
        courseB_iceage_loops2_b: Se ti blocchi, prova a pronunciare ad alta voce i
          vari passaggi.
        courseB_iceage_loops2_c: Segui questo percorso per far arrivare Scrat fino
          alla ghianda.
      courseB_iceage_loops3:
        courseB_iceage_loops3_a: |-
          Prova ad usare un ciclo! <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="3-10">5</title>
              </block></xml>
        courseB_iceage_loops3_b: |-
          Per ripetere una sequenza di istruzioni, trascina nell'area di lavoro un blocco

          <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml>

          e inserisci al suo interno i blocchi che vuoi ripetere.
      courseB_iceage_loops3_2019:
        courseB_iceage_loops3_a: |-
          Usa questo nuovo blocco!
           <xml><block type="controls_repeat_simplified_dropdown">
              <title name="TIMES" config="3-10">5</title>
              </block></xml>
        courseB_iceage_loops3_b: Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco `ripeti` e inserisci al suo interno i blocchi
          che vuoi ripetere.
      courseB_iceage_loops4:
        courseB_iceage_loops4_a: Prova a scrivere i passaggi necessari per fare in
          modo che Scrat raggiunga la ghianda. Noti uno schema che si ripete?
        courseB_iceage_loops4_b: Non aver paura di eseguire il programma e guarda
          cosa succede!
        courseB_iceage_loops4_c: Questo è il percorso che Scrat dovrebbe seguire.
      courseB_iceage_loops4_2019:
        courseB_iceage_loops4_a: Prova a scrivere i passaggi necessari per fare in
          modo che Scrat raggiunga la ghianda. Noti uno schema che si ripete?
        courseB_iceage_loops4_b: Non aver paura di eseguire il programma e guarda
          cosa succede!
        courseB_iceage_loops4_c: Questo è il percorso che Scrat dovrebbe seguire.
      courseB_iceage_loops6:
        courseB_iceage_loops6_a: Il programma finale dovrebbe usare **tre** blocchi
          di movimento.
        courseB_iceage_loops6_b: Devi aggiungere solo **un** altro ciclo!
        courseB_iceage_loops6_c: Il percorso finale dovrebbe essere questo.
      courseB_iceage_loops6_2019:
        courseB_iceage_loops6_a: Il programma finale dovrebbe usare **tre** blocchi
          di movimento.
        courseB_iceage_loops6_b: Devi aggiungere solo **un** altro ciclo!
        courseB_iceage_loops6_c: Il percorso finale dovrebbe essere questo.
      courseB_iceage_loops7:
        courseB_iceage_loops7_a: Se ti blocchi, prova a scrivere i passaggi su un
          pezzo di carta. Vedi uno schema che si ripete?
        courseB_iceage_loops7_b: Questo è il percorso che Scrat dovrebbe seguire per
          raggiungere la ghianda.
      courseB_iceage_loops7_2019:
        courseB_iceage_loops7_a: Se ti blocchi, prova a scrivere i passaggi su un
          pezzo di carta. Vedi uno schema che si ripete?
        courseB_iceage_loops7_b: Questo è il percorso che Scrat dovrebbe seguire per
          raggiungere la ghianda.
      courseB_iceage_loops8:
        courseB_iceage_loops8_a: I blocchi di movimento sono corretti? Cos'altro potresti
          cambiare?
        courseB_iceage_loops8_b: Il primo ciclo dovrebbe ripetersi **3** volte, il
          secondo dovrebbe ripetersi **5** volte, il terzo dovrebbe ripetersi **4**
          volte e anche l'ultimo **4** volte.
        courseB_iceage_loops8_c: Usa i cicli per aiutare Scrat a seguire questo percorso.
      courseB_iceage_loops8_2019:
        courseB_iceage_loops8_a: I blocchi di movimento sono corretti? Cos'altro potresti
          cambiare?
        courseB_iceage_loops8_b: Il primo ciclo dovrebbe ripetersi **3** volte, il
          secondo dovrebbe ripetersi **5** volte, il terzo dovrebbe ripetersi **4**
          volte e anche l'ultimo **4** volte.
        courseB_iceage_loops8_c: Usa i cicli per aiutare Scrat a seguire questo percorso.
      courseB_iceage_loops9:
        courseB_iceage_loops9_a: Hai difficoltà? Prova a suddividere questo esercizio
          in parti più piccole. Non aver paura di eseguire il codice man mano che
          procedi!
        courseB_iceage_loops9_b: Il programma finale dovrebbe avere **4** cicli.
        courseB_iceage_loops9_c: Scrat dovrebbe seguire questo percorso per raggiungere
          la ghianda.
      courseB_iceage_loops9_2019:
        courseB_iceage_loops9_a: Hai difficoltà? Prova a suddividere questo esercizio
          in parti più piccole. Non aver paura di eseguire il codice man mano che
          procedi!
        courseB_iceage_loops9_b: Il programma finale dovrebbe avere **4** cicli.
        courseB_iceage_loops9_c: Scrat dovrebbe seguire questo percorso per raggiungere
          la ghianda.
      courseB_maze_seq1:
        courseB_maze_seq1_a: Attacca i blocchi al blocco <xml><block type="when_run"/></xml>
          per far muovere l'uccellino!
        courseB_maze_seq1_b: Trascina fuori tre di queste frecce <xml><block type="maze_moveSouth"/></xml>
          e attaccale al blocco <xml><block type="when_run"/></xml> per portare il
          tuo uccellino fino al maialino.
      courseB_maze_seq10:
        courseB_maze_seq10_a: Prima, prova a scrivere i passaggi su un foglio di carta.
        courseB_maze_seq10_b: Dovrai muoverti in due direzioni diverse per raggiungere
          il maialino.
      courseB_maze_seq11:
        courseB_maze_seq11_a: Prima, prova a scrivere i passaggi su un foglio di carta.
        courseB_maze_seq11_b: 'Risolvi l''esercizio in due parti: una prima dell''angolo
          e l''altra dopo.'
      courseB_maze_seq1_2018:
        courseB_maze_seq1_a: Connetti i blocchi al blocco <xml><block type="when_run"/></xml>
          per far muovere Scart!
        courseB_maze_seq1_b: Trascina tre di queste frecce <xml><block type="maze_moveSouth"/></xml>
          e collegale al blocco <xml><block type="when_run"/></xml> per far arrivare
          Scrat fino alla ghianda.
      courseB_maze_seq1_2019:
        courseB_maze_seq1_a: Connetti i blocchi al blocco <xml><block type="when_run"/></xml>
          per far muovere Scart!
        courseB_maze_seq1_b: Trascina tre di queste frecce <xml><block type="maze_moveSouth"/></xml>
          e collegale al blocco <xml><block type="when_run"/></xml> per far arrivare
          Scrat fino alla ghianda.
      courseB_maze_seq2:
        courseB_maze_seq2_a: In questo programma manca un blocco. Riesci a capire
          quale?
        courseB_maze_seq2_b: Prova ad eseguire il codice che trovi già pronto per
          capire cosa deve fare dopo l'uccellino.
      courseB_maze_seq3:
        courseB_maze_seq3_a: Uno dei blocchi sposta l'uccellino nella direzione sbagliata.
          Riesci a capire qual è e a sostituirlo con il blocco corretto?
        courseB_maze_seq3_b: Prova ad usare il pulsante "Fai un passo" per capire
          dov'è l'errore. È al primo passo? Al secondo?
        courseB_maze_seq3_c: Non sembra che il blocco <xml><block type="maze_moveWest"/></xml>
          stia muovendo l'uccellino nella direzione corretta.
      courseB_maze_seq4:
        courseB_maze_seq4_a: Prova ad aggiungere un'istruzione alla volta finché non
          arrivi al maialino.
        courseB_maze_seq4_b: Potresti usare il blocco <xml><block type="maze_moveEast"/></xml>
          per risolvere questo esercizio.
      courseB_maze_seq4_2018:
        courseB_maze_seq4_a: Prova ad aggiungere un'istruzione alla volta finché non
          arrivi alla ghianda.
        courseB_maze_seq4_b: Potresti usare il blocco <xml><block type="maze_moveEast"/></xml>
          per risolvere questo esercizio.
      courseB_maze_seq4_2019:
        courseB_maze_seq4_a: Prova ad aggiungere un'istruzione alla volta finché non
          arrivi alla ghianda.
        courseB_maze_seq4_b: Potresti usare il blocco <xml><block type="maze_moveEast"/></xml>
          per risolvere questo esercizio.
      courseB_maze_seq5:
        courseB_maze_seq5_a: Se ti blocchi, prova a disegnare il percorso su un foglio.
        courseB_maze_seq5_b: Ci sono due modi per risolvere questo esercizio!
        courseB_maze_seq5_c: Non sai come arrivare al maialino? Prova questo percorso.
      courseB_maze_seq5_2018:
        courseB_maze_seq5_a: Se ti blocchi, prova a disegnare il percorso su un foglio.
        courseB_maze_seq5_b: Ci sono due modi per risolvere questo esercizio!
        courseB_maze_seq5_c: Non sai come arrivare alla ghianda? Prova questo percorso.
      courseB_maze_seq5_2019:
        courseB_maze_seq5_a: Se ti blocchi, prova a disegnare il percorso su un foglio.
        courseB_maze_seq5_b: Ci sono due modi per risolvere questo esercizio!
        courseB_maze_seq5_c: Non sai come arrivare alla ghianda? Prova questo percorso.
      courseB_maze_seq6:
        courseB_maze_seq6_a: Alla fine, il tuo programma dovrebbe avere tre blocchi
          di movimento.
        courseB_maze_seq6_b: 'Se ti blocchi, prova a risolvere l''esercizio in due
          parti: movimenti orizzontali e movimenti verticali.'
        courseB_maze_seq5_c: Ci sono due modi per risolvere questo esercizio.
        courseB_maze_seq5_d: Non sai come arrivare al maialino? Prova questo percorso!
      courseB_maze_seq6_2018:
        courseB_maze_seq6_a: Alla fine, il tuo programma dovrebbe avere tre blocchi
          di movimento.
        courseB_maze_seq6_b: 'Se ti blocchi, prova a risolvere l''esercizio in due
          parti: movimenti orizzontali e movimenti verticali.'
        courseB_maze_seq5_c: Ci sono due modi per risolvere questo esercizio.
        courseB_maze_seq5_d: Non sai come arrivare alla ghianda? Prova questo percorso!
      courseB_maze_seq6_2019:
        courseB_maze_seq6_a: Alla fine, il tuo programma dovrebbe avere tre blocchi
          di movimento.
        courseB_maze_seq6_b: 'Se ti blocchi, prova a risolvere l''esercizio in due
          parti: movimenti orizzontali e movimenti verticali.'
        courseB_maze_seq5_c: Ci sono due modi per risolvere questo esercizio.
        courseB_maze_seq5_d: Non sai come arrivare alla ghianda? Prova questo percorso!
      courseB_maze_seq7:
        courseB_maze_seq7_a: Aggiungi 1 blocco per far arrivare l'uccellino fino al
          maialino.
        courseB_maze_seq7_b: Prova ad eseguire il codice che ti è stato dato e guarda
          dove vai a finire.
        courseB_maze_seq7_c: Non riesci ad arrivare fino al maialino? Prova questo
          percorso!
      courseB_maze_seq7_2018:
        courseB_maze_seq7_a: Aggiungi 1 blocco per far arrivare Scrat fino alla ghianda.
        courseB_maze_seq7_b: Prova ad eseguire il codice che ti è stato dato e guarda
          dove vai a finire.
        courseB_maze_seq7_c: Non riesci ad arrivare alla ghianda? Prova questo percorso!
      courseB_maze_seq7_2019:
        courseB_maze_seq7_a: Aggiungi 1 blocco per far arrivare Scrat fino alla ghianda.
        courseB_maze_seq7_b: Prova ad eseguire il codice che ti è stato dato e guarda
          dove vai a finire.
        courseB_maze_seq7_c: Non riesci ad arrivare alla ghianda? Prova questo percorso!
      courseB_maze_seq8:
        courseB_maze_seq8_a: Prova ad aggiungere un blocco alla volta finché non risolvi
          l'esercizio.
        courseB_maze_seq8_b: Ci sono due modi per risolvere questo esercizio!
        courseB_maze_seq8_c: Non sai da che parte andare? Prova questo percorso!
      courseB_maze_seq8_2018:
        courseB_maze_seq8_a: Prova ad aggiungere un blocco alla volta finché non risolvi
          l'esercizio.
        courseB_maze_seq8_b: Ci sono due modi per risolvere questo esercizio!
        courseB_maze_seq8_c: Non sai da che parte andare? Prova questo percorso!
      courseB_maze_seq8_2019:
        courseB_maze_seq8_a: Prova ad aggiungere un blocco alla volta finché non risolvi
          l'esercizio.
        courseB_maze_seq8_b: Ci sono due modi per risolvere questo esercizio!
        courseB_maze_seq8_c: Non sai da che parte andare? Prova questo percorso!
      courseB_maze_seq9:
        courseB_maze_seq9_a: Prima, prova a scrivere tutti i passaggi su un foglio
          di carta.
        courseB_maze_seq9_b: Costruisci il tuo programma un blocco alla volta e provalo
          man mano.
        courseB_maze_seq9_c: Ci sono due modi per risolvere questo esercizio.
        courseB_maze_seq9_d: Bloccato? Prova questo percorso!
      courseB_maze_seq9_2018:
        courseB_maze_seq9_a: Prima, prova a scrivere tutti i passaggi su un foglio
          di carta.
        courseB_maze_seq9_b: Costruisci il tuo programma un blocco alla volta e provalo
          man mano.
        courseB_maze_seq9_c: Ci sono due modi per risolvere questo esercizio.
        courseB_maze_seq9_d: Bloccato? Prova questo percorso!
      courseB_maze_seq9_2019:
        courseB_maze_seq9_a: Prima, prova a scrivere tutti i passaggi su un foglio
          di carta.
        courseB_maze_seq9_b: Costruisci il tuo programma un blocco alla volta e provalo
          man mano.
        courseB_maze_seq9_c: Ci sono due modi per risolvere questo esercizio.
        courseB_maze_seq9_d: Bloccato? Prova questo percorso!
      courseB_maze_seq_challenge1:
        courseB_maze_seq_challenge1_a: Questa volta non puoi seguire il percorso più
          breve.
        courseB_maze_seq_challenge1_b: Per iniziare, prova ad usare il blocco <xml><block
          type="maze_moveWest"/></xml>
      courseB_maze_seq_challenge1_2018:
        courseB_maze_seq_challenge1_a: Questa volta non puoi seguire il percorso più
          breve.
        courseB_maze_seq_challenge1_b: Per iniziare, prova ad usare il blocco <xml><block
          type="maze_moveWest"/></xml>
      courseB_maze_seq_challenge1_2019:
        courseB_maze_seq_challenge1_a: Questa volta non puoi seguire il percorso più
          breve.
        courseB_maze_seq_challenge1_b: Per iniziare, prova ad usare il blocco <xml><block
          type="maze_moveWest"/></xml>
      courseB_maze_seq_challenge2:
        courseB_maze_seq_challenge2_a: Non è necessario aggiungere o rimuovere blocchi
          per risolvere questo esercizio.
        courseB_maze_seq_challenge2_b: Riorganizza i blocchi per seguire il percorso
          a scalinata.
      courseB_maze_seq_challenge2_2018:
        courseB_maze_seq_challenge2_a: Non è necessario aggiungere o rimuovere blocchi
          per risolvere questo esercizio.
        courseB_maze_seq_challenge2_b: Riorganizza i blocchi per seguire il percorso
          a scalinata.
      courseB_maze_seq_challenge2_2019:
        courseB_maze_seq_challenge2_a: Non è necessario aggiungere o rimuovere blocchi
          per risolvere questo esercizio.
        courseB_maze_seq_challenge2_b: Riorganizza i blocchi per seguire il percorso
          a scalinata.
      courseB_playlab_events2:
        courseB_playlab_events2_a: |-
          Questo è il blocco per far dire qualcosa al drago:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Ciao!</title>
          </block>
          </xml>
      courseB_playlab_events2_2018:
        courseB_playlab_events2_a: |-
          Questo è il blocco per far dire qualcosa al drago:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Ciao!</title>
          </block>
          </xml>
      courseB_playlab_events2_2019:
        courseB_playlab_events2_a: |-
          Questo è il blocco per far dire qualcosa al drago:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Ciao!</title>
          </block>
          </xml>
      courseB_playlab_events3:
        courseB_playlab_events3_a: |-
          Questo è il blocco che dovresti usare per aggiungere l'evento:

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          Questo è il blocco di cui hai bisogno per cambiare l'umore del drago:

          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events3_2018:
        courseB_playlab_events3_a: |-
          Questo è il blocco che dovresti usare per aggiungere l'evento:

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          Questo è il blocco di cui hai bisogno per cambiare l'umore del drago:

          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events3_2019:
        courseB_playlab_events3_a: |-
          Questo è il blocco che dovresti usare per aggiungere l'evento:

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          Questo è il blocco di cui hai bisogno per cambiare l'umore del drago:

          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events4:
        courseB_playlab_events4_a: |-
          Questo è l'evento che controlla la freccia sinistra:

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          Questo è il blocco che fa spostare il cavaliere verso sinistra:

          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events4_2018:
        courseB_playlab_events4_a: |-
          Questo è l'evento che controlla la freccia sinistra:

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          Questo è il blocco che fa spostare il cavaliere verso sinistra:

          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events4_2019:
        courseB_playlab_events4_a: |-
          Questo è l'evento che controlla la freccia sinistra:

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          Questo è il blocco che fa spostare il cavaliere verso sinistra:

          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events5:
        courseB_playlab_events5_a: |-
          Questo è l'evento che controlla la freccia destra:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">right</title>
            </block>
            </xml>
        courseB_playlab_events5_b: |-
          Questo è il blocco che fa spostare il cavaliere verso destra:

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block>
          </xml>
      courseB_playlab_events5_2018:
        courseB_playlab_events5_a: |-
          Questo è l'evento che controlla la freccia destra:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">right</title>
            </block>
            </xml>
        courseB_playlab_events5_b: |-
          Questo è il blocco che fa spostare il cavaliere verso destra:

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block>
          </xml>
      courseB_playlab_events5_2019:
        courseB_playlab_events5_a: |-
          Questo è l'evento che controlla la freccia destra:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">right</title>
            </block>
            </xml>
        courseB_playlab_events5_b: |-
          Questo è il blocco che fa spostare il cavaliere verso destra:

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block>
          </xml>
      courseB_playlab_events6:
        courseB_playlab_events6_a: |-
          Avrai bisogno di questi blocchi evento:

          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          Premi la freccetta verde scuro nel blocco evento `quando ^` per scegliere la direzione.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Passa da tutte le bandierine per completare l'esercizio!
      courseB_playlab_events6_2018:
        courseB_playlab_events6_a: |-
          Avrai bisogno di questi blocchi evento:

          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          Premi la freccetta verde scuro nel blocco evento `quando ^` per scegliere la direzione.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Passa da tutte le bandierine per completare l'esercizio!
      courseB_playlab_events6_2019:
        courseB_playlab_events6_a: |-
          Avrai bisogno di questi blocchi evento:

          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          Premi la freccetta verde scuro nel blocco evento `quando ^` per scegliere la direzione.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Passa da tutte le bandierine per completare l'esercizio!
      courseB_playlab_events7:
        courseB_playlab_events7_a: |-
          Questo è il blocco evento di cui hai bisogno:

          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          Questo è il blocco che ti serve per far riprodurre un suono:

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          Questo è il blocco necessario per far svanire il cavaliere:

          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_events7_2018:
        courseB_playlab_events7_a: |-
          Questo è il blocco evento di cui hai bisogno:

          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          Questo è il blocco che ti serve per far riprodurre un suono:

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          Questo è il blocco necessario per far svanire il cavaliere:

          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_events7_2019:
        courseB_playlab_events7_a: |-
          Questo è il blocco evento di cui hai bisogno:

          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          Questo è il blocco che ti serve per far riprodurre un suono:

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          Questo è il blocco necessario per far svanire il cavaliere:

          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_events_challenge1:
        courseB_playlab_events_challenge1_a: |-
          Fai in modo che anche gli altri animali si muovano verso il basso quando premi la freccia verso il basso (▼).

          <xml>
            <block type="studio_whenArrow" movable="false">
              <title name="VALUE">down</title>
            </block>
          </xml>
        courseB_playlab_events_challenge1_b: |-
          Cambia la velocità degli animali usando il blocco:

          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          Cosa diranno i vari personaggi quando la gara sarà conclusa? Falli parlare con questo blocco evento:

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">Woo hoo!</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge1_2018:
        courseB_playlab_events_challenge1_a: |-
          Fai in modo che anche gli altri animali si muovano verso il basso quando premi la freccia verso il basso (▼).

          <xml>
            <block type="studio_whenArrow" movable="false">
              <title name="VALUE">down</title>
            </block>
          </xml>
        courseB_playlab_events_challenge1_b: |-
          Cambia la velocità degli animali usando il blocco:

          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          Cosa diranno i vari personaggi quando la gara sarà conclusa? Falli parlare con questo blocco evento:

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">Woo hoo!</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge1_2019:
        courseB_playlab_events_challenge1_a: |-
          Fai in modo che anche gli altri animali si muovano verso il basso quando premi la freccia verso il basso (▼).

          <xml>
            <block type="studio_whenArrow" movable="false">
              <title name="VALUE">down</title>
            </block>
          </xml>
        courseB_playlab_events_challenge1_b: |-
          Cambia la velocità degli animali usando il blocco:

          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          Cosa diranno i vari personaggi quando la gara sarà conclusa? Falli parlare con questo blocco evento:

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">Woo hoo!</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge2:
        courseB_playlab_events_challenge2_a: Nel gioco, ogni animale dovrebbe scomparire
          quando si clicca su di lui. E dovrebbe apparire nuovamente dopo un secondo
          o due!
        courseB_playlab_events_challenge2_b: |-
          Usa altri blocchi evento come questo per far sparire anche gli altri animali!

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Usa altre istruzioni per riprodurre suoni o aggiungere punti quando si clicca sugli animali!

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Continua a lavorarci su!

          Fai in modo che alcuni animali diano più punti di altri.
          Usa suoni diversi.
          Cambia l'umore degli animali!
      courseB_playlab_events_challenge2_2018:
        courseB_playlab_events_challenge2_a: Nel gioco, ogni animale dovrebbe scomparire
          quando si clicca su di lui. E dovrebbe apparire nuovamente dopo un secondo
          o due!
        courseB_playlab_events_challenge2_b: |-
          Usa altri blocchi evento come questo per far sparire anche gli altri animali!

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Usa altre istruzioni per riprodurre suoni o aggiungere punti quando si clicca sugli animali!

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Continua a lavorarci su!

          Fai in modo che alcuni animali diano più punti di altri.
          Usa suoni diversi.
          Cambia l'umore degli animali!
      courseB_playlab_events_challenge2_2019:
        courseB_playlab_events_challenge2_a: Nel gioco, ogni animale dovrebbe scomparire
          quando si clicca su di lui. E dovrebbe apparire nuovamente dopo un secondo
          o due!
        courseB_playlab_events_challenge2_b: |-
          Usa altri blocchi evento come questo per far sparire anche gli altri animali!

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Usa altre istruzioni per riprodurre suoni o aggiungere punti quando si clicca sugli animali!

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Continua a lavorarci su!

          Fai in modo che alcuni animali diano più punti di altri.
          Usa suoni diversi.
          Cambia l'umore degli animali!
      courseB_starWars_prog1:
        courseB_starWars_prog1_a: Prova ad aggiungere blocchi uno alla volta, quindi
          clicca su "Esegui" per vedere cosa succede.
        courseB_starWars_prog1_b: |-
          Potresti decidere di andare verso Est per risolvere questo esercizio. Quante mosse devi fare?

          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog1_2018:
        courseB_starWars_prog1_a: Prova ad aggiungere blocchi uno alla volta, quindi
          clicca su "Esegui" per vedere cosa succede.
        courseB_starWars_prog1_b: |-
          Potresti decidere di andare verso Est per risolvere questo esercizio. Quante mosse devi fare?

          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog1_2019:
        courseB_starWars_prog1_a: Prova ad aggiungere blocchi uno alla volta, quindi
          clicca su "Esegui" per vedere cosa succede.
        courseB_starWars_prog1_b: |-
          Potresti decidere di andare verso Est per risolvere questo esercizio. Quante mosse devi fare?

          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog2:
        courseB_starWars_prog2_a: 'Dividi l''esercizio in due parti: recupera il primo
          mucchio di rottami e dopo cerca di capire come raggiungere il successivo.'
      courseB_starWars_prog2_2018:
        courseB_starWars_prog2_a: 'Dividi l''esercizio in due parti: recupera il primo
          mucchio di rottami e dopo cerca di capire come raggiungere il successivo.'
      courseB_starWars_prog2_2019:
        courseB_starWars_prog2_a: 'Dividi l''esercizio in due parti: recupera il primo
          mucchio di rottami e dopo cerca di capire come raggiungere il successivo.'
      courseB_starWars_prog3:
        courseB_starWars_prog3_a: Dovrai muoverti in 3 direzioni per risolvere questo
          esercizio.
        courseB_starWars_prog3_b: Costruisci un pezzo di programma alla volta ed eseguilo
          per scoprire come procedere.
      courseB_starWars_prog3_2018:
        courseB_starWars_prog3_a: Dovrai muoverti in 3 direzioni per risolvere questo
          esercizio.
        courseB_starWars_prog3_b: Costruisci un pezzo di programma alla volta ed eseguilo
          per scoprire come procedere.
      courseB_starWars_prog3_2019:
        courseB_starWars_prog3_a: Dovrai muoverti in 3 direzioni per risolvere questo
          esercizio.
        courseB_starWars_prog3_b: Costruisci un pezzo di programma alla volta ed eseguilo
          per scoprire come procedere.
      courseB_starWars_prog4:
        courseB_starWars_prog4_a: Costruisci un pezzo di programma alla volta ed eseguilo
          per scoprire come procedere.
        courseB_starWars_prog4_b: |-
          Prova ad usare il blocco `ripeti` per ottenere un programma più breve.

          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog4_2018:
        courseB_starWars_prog4_a: Costruisci un pezzo di programma alla volta ed eseguilo
          per scoprire come procedere.
        courseB_starWars_prog4_b: |-
          Prova ad usare il blocco `ripeti` per ottenere un programma più breve.

          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog4_2019:
        courseB_starWars_prog4_a: Costruisci un pezzo di programma alla volta ed eseguilo
          per scoprire come procedere.
        courseB_starWars_prog4_b: |-
          Prova ad usare il blocco `ripeti` per ottenere un programma più breve.

          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog5:
        courseB_starWars_prog5_a: Lo schema di questo esercizio non sembra simile
          al precedente?
        courseB_starWars_prog5_b: BB-8 raccoglierà i rottami metallici man mano che
          ci passerà sopra.
        courseB_starWars_prog5_c: Traccia il percorso con un dito. Conta i pezzi di
          metallo mentre ti sposti.
        courseB_starWars_prog5_da: |-
          Guarda cosa succede se utilizzi la stessa soluzione dell'esercizio precedente (percorso a scalinata):

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2018:
        courseB_starWars_prog5_a: Lo schema di questo esercizio non sembra simile
          al precedente?
        courseB_starWars_prog5_b: BB-8 raccoglierà i rottami metallici man mano che
          ci passerà sopra.
        courseB_starWars_prog5_c: Traccia il percorso con un dito. Conta i pezzi di
          metallo mentre ti sposti.
        courseB_starWars_prog5_da: |-
          Guarda cosa succede se utilizzi la stessa soluzione dell'esercizio precedente (percorso a scalinata):

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2019:
        courseB_starWars_prog5_a: Lo schema di questo esercizio non sembra simile
          al precedente?
        courseB_starWars_prog5_b: BB-8 raccoglierà i rottami metallici man mano che
          ci passerà sopra.
        courseB_starWars_prog5_c: Traccia il percorso con un dito. Conta i pezzi di
          metallo mentre ti sposti.
        courseB_starWars_prog5_da: |-
          Guarda cosa succede se utilizzi la stessa soluzione dell'esercizio precedente (percorso a scalinata):

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog6:
        courseB_starWars_prog6_a: Questo schema è formato da una scala con due mosse
          in ogni direzione!
        courseB_starWars_prog6_b: |-
          Prova ad usare il blocco `ripeti` per ottenere un programma più breve.

          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog6_2018:
        courseB_starWars_prog6_a: Questo schema è formato da una scala con due mosse
          in ogni direzione!
        courseB_starWars_prog6_b: |-
          Prova ad usare il blocco `ripeti` per ottenere un programma più breve.

          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog6_2019:
        courseB_starWars_prog6_a: Questo schema è formato da una scala con due mosse
          in ogni direzione!
        courseB_starWars_prog6_b: |-
          Prova ad usare il blocco `ripeti` per ottenere un programma più breve.

          <xml>  <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog7:
        courseB_starWars_prog7_a: Lo schema di questo esercizio non sembra simile
          al precedente?
        courseB_starWars_prog7_b: BB-8 raccoglierà i rottami metallici man mano che
          ci passerà sopra.
        courseB_starWars_prog7_c: Prova a tracciare lo schema di una scala larga su
          questo esercizio. Riesci a coprire tutti i rottami metallici?
      courseB_starWars_prog7_2018:
        courseB_starWars_prog7_a: Lo schema di questo esercizio non sembra simile
          al precedente?
        courseB_starWars_prog7_b: BB-8 raccoglierà i rottami metallici man mano che
          ci passerà sopra.
        courseB_starWars_prog7_c: Prova a tracciare lo schema di una scala larga su
          questo esercizio. Riesci a coprire tutti i rottami metallici?
      courseB_starWars_prog7_2019:
        courseB_starWars_prog7_a: Lo schema di questo esercizio non sembra simile
          al precedente?
        courseB_starWars_prog7_b: BB-8 raccoglierà i rottami metallici man mano che
          ci passerà sopra.
        courseB_starWars_prog7_c: Prova a tracciare lo schema di una scala larga su
          questo esercizio. Riesci a coprire tutti i rottami metallici?
      courseB_starWars_prog8:
        courseB_starWars_prog8_a: Non ti fare problemi se per risolvere l'esercizio
          devi tornare sui tuoi passi.
        courseB_starWars_prog8_b: |-
          Prova ad usare il blocco `ripeti` per vedere cosa succede al codice che inserisci all'interno.

          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog8_2018:
        courseB_starWars_prog8_a: Non ti fare problemi se per risolvere l'esercizio
          devi tornare sui tuoi passi.
        courseB_starWars_prog8_b: |-
          Prova ad usare il blocco `ripeti` per vedere cosa succede al codice che inserisci all'interno.

          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog8_2019:
        courseB_starWars_prog8_a: Non ti fare problemi se per risolvere l'esercizio
          devi tornare sui tuoi passi.
        courseB_starWars_prog8_b: |-
          Prova ad usare il blocco `ripeti` per vedere cosa succede al codice che inserisci all'interno.

          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog9:
        courseB_starWars_prog9_a: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
        courseB_starWars_prog9_b: Ci sono molti modi per risolvere questo esercizio.
        courseB_starWars_prog9_c: Un ciclo `ripeti` potrebbe aiutarti qui?
      courseB_starWars_prog9_2018:
        courseB_starWars_prog9_a: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
        courseB_starWars_prog9_b: Ci sono molti modi per risolvere questo esercizio.
        courseB_starWars_prog9_c: |-
          Un ciclo <xml><block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block></xml> potrebbe aiutarti qui?
      courseB_starWars_prog9_2019:
        courseB_starWars_prog9_a: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
        courseB_starWars_prog9_b: Ci sono molti modi per risolvere questo esercizio.
        courseB_starWars_prog9_c: |-
          Un ciclo <xml><block type="controls_repeat_simplified">
              <title name="TIMES">3</title>
            </block></xml> potrebbe aiutarti qui?
      courseC19_playLab_EOC1:
        courseE_playLab_scaffold1_a: Puoi usare il blocco `imposta il personaggio
          1 come ...` per aggiungere un personaggio nella scena.
        courseE_playLab_scaffold1_b: Per fare in modo che il personaggio che hai scelto
          compaia all'avvio del tuo programma, metti il blocco `imposta il personaggio
          1 come ...` sotto al blocco `quando si clicca su "Esegui"`.
        courseE_playLab_scaffold1_c: Usa il blocco `imposta uno sfondo ...` per scegliere
          lo sfondo della tua scena.
      courseC19_playLab_EOC2:
        courseE_playLab_scaffold1_a: Scegli la direzione corretta dal menù a discesa
          (▼) del blocco evento `quando si preme sulla freccia verso ...`.
        courseE_playLab_scaffold1_b: Dovresti avere quattro diversi blocchi evento
          `quando si preme sulla freccia verso ...`, ognuno con uno specifico blocco
          di movimento agganciato sotto.
        courseE_playLab_scaffold1_c: Quando hai finito, dovresti essere in grado di
          spostare il tuo eroe con i tasti freccia!
      courseC19_playLab_EOC4:
        courseE_playLab_scaffold4_a: Per modificare il punteggio, usa i blocchi `aggiungi
          un punto` e `togli un punto`.
      courseC_PlayLab_events1:
        courseC_PlayLab_events1_a: |-
          Collega questo blocco al blocco `quando si clicca su "Esegui"`:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events1_2018:
        courseC_PlayLab_events1_a: |-
          Collega questo blocco al blocco `quando si clicca su "Esegui"`:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events1_2019:
        courseC_PlayLab_events1_a: |-
          Collega questo blocco al blocco `quando si clicca su "Esegui"`:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events2:
        courseC_PlayLab_events2_a: |-
          Collega due di questi blocchi al blocco `quando si clicca su "Esegui"`:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
        courseC_PlayLab_events2_b: Usa il menù a discesa (▼) del secondo blocco `il
          personaggio ... dice` per specificare quale personaggio deve parlare.
      courseC_PlayLab_events2_2018:
        courseC_PlayLab_events2_a: |-
          Collega due di questi blocchi al blocco `quando si clicca su "Esegui"`:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
        courseC_PlayLab_events2_b: Usa il menù a discesa (▼) del secondo blocco `il
          personaggio ... dice` per specificare quale personaggio deve parlare.
      courseC_PlayLab_events2_2019:
        courseC_PlayLab_events2_a: |-
          Collega due di questi blocchi al blocco `quando si clicca su "Esegui"`:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
        courseC_PlayLab_events2_b: Usa il menù a discesa (▼) del secondo blocco `il
          personaggio ... dice` per specificare quale personaggio deve parlare.
      courseC_PlayLab_events3:
        courseC_PlayLab_events3_a: Devi solo spostare il cane a destra di circa 25
          pixel per risolvere questo esercizio.
        courseC_PlayLab_events3_b: Nella cassetta degli attrezzi c'è un blocco che
          possa servire per muoverebbe un personaggio?
        courseC_PlayLab_events3_c: |-
          Collega questo blocco al blocco `quando si clicca su "Esegui"`:

          <xml>
          <block type="studio_moveDistance">
              <title name="SPRITE">0</title>
              <title name="DIR">2</title>
              <title name="DISTANCE">25</title>
            </block>
          </xml>
      courseC_PlayLab_events3_2018:
        courseC_PlayLab_events3_a: Devi solo spostare il cane a destra di circa 25
          pixel per risolvere questo esercizio.
        courseC_PlayLab_events3_b: Nella cassetta degli attrezzi c'è un blocco che
          possa servire per muoverebbe un personaggio?
        courseC_PlayLab_events3_c: |-
          Collega questo blocco al blocco `quando si clicca su "Esegui"`:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events3_2019:
        courseC_PlayLab_events3_a: Devi solo spostare il cane a destra di circa 25
          pixel per risolvere questo esercizio.
        courseC_PlayLab_events3_b: Nella cassetta degli attrezzi c'è un blocco che
          possa servire per muoverebbe un personaggio?
        courseC_PlayLab_events3_c: |-
          Collega questo blocco al blocco `quando si clicca su "Esegui"`:

          <xml>
            <block type="studio_saySpriteChoices">
              <title name="SPRITE">0</title>
              <title name="VALUE">Hi there.</title>
            </block>
          </xml>
      courseC_PlayLab_events4:
        courseC_PlayLab_events4_b: Quando si clicca sul pulsante "Esegui", il cane
          deve spostarsi a destra di **100** pixel per raggiungere il gatto.
        courseC_PlayLab_events4_a: Per risolvere questo esercizio sarà necessario
          collegare un blocco `il personaggio ... dice` all'evento `quando il personaggio
          ... tocca ...`.
      courseC_PlayLab_events4_2018:
        courseC_PlayLab_events4_b: Quando si clicca sul pulsante "Esegui", il cane
          deve spostarsi a destra di **100** pixel per raggiungere il gatto.
        courseC_PlayLab_events4_a: Per risolvere questo esercizio sarà necessario
          collegare un blocco `il personaggio ... dice` all'evento `quando il personaggio
          ... tocca ...`.
      courseC_PlayLab_events4_2019:
        courseC_PlayLab_events4_b: Quando si clicca sul pulsante "Esegui", il cane
          deve spostarsi a destra di **100** pixel per raggiungere il gatto.
        courseC_PlayLab_events4_a: Per risolvere questo esercizio sarà necessario
          collegare un blocco `il personaggio ... dice` all'evento `quando il personaggio
          ... tocca ...`.
      courseC_PlayLab_events5:
        courseC_PlayLab_events5_a: Sarà necessario cliccare sul secondo menù a discesa
          (▼) del blocco `il personaggio ... dice ...` per trovare il testo "Novità?"
        courseC_PlayLab_events5_b: Per controllare che funzioni correttamente, clicca
          sul polpo dopo aver avviato il tuo programma!
      courseC_PlayLab_events5_2018:
        courseC_PlayLab_events5_a: Sarà necessario cliccare sul secondo menù a discesa
          (▼) del blocco `il personaggio ... dice ...` per trovare il testo "Novità?"
        courseC_PlayLab_events5_b: Per controllare che funzioni correttamente, clicca
          sul polpo dopo aver avviato il tuo programma!
      courseC_PlayLab_events5_2019:
        courseC_PlayLab_events5_a: Sarà necessario cliccare sul secondo menù a discesa
          (▼) del blocco `il personaggio ... dice ...` per trovare il testo "Novità?"
        courseC_PlayLab_events5_b: Per controllare che funzioni correttamente, clicca
          sul polpo dopo aver avviato il tuo programma!
      courseC_PlayLab_events6:
        courseC_PlayLab_events6_a: 'Ogni blocco verde `quando si preme sulla freccia
          verso ...` può essere associato a delle specifiche azioni: i blocchi agganciati
          sotto di esso.'
        courseC_PlayLab_events6_b: Usa il menù a discesa (▼) del blocco `sposta il
          personaggio 1 ...` per cambiare la direzione da dare al pinguino.
        courseC_PlayLab_events6_c: Quando avrai finito, sarai in grado di muovere
          il pinguino in tutte le direzioni usando i tasti freccia della tastiera
          o cliccando i tasti arancioni sullo schermo!
      courseC_PlayLab_events6_2018:
        courseC_PlayLab_events6_a: 'Ogni blocco verde `quando si preme sulla freccia
          verso ...` può essere associato a delle specifiche azioni: i blocchi agganciati
          sotto di esso.'
        courseC_PlayLab_events6_b: Usa il menù a discesa (▼) del blocco `sposta il
          personaggio 1 ...` per cambiare la direzione da dare al pinguino.
        courseC_PlayLab_events6_c: Quando avrai finito, sarai in grado di muovere
          il pinguino in tutte le direzioni usando i tasti freccia della tastiera
          o cliccando i tasti arancioni sullo schermo!
      courseC_PlayLab_events6_2019:
        courseC_PlayLab_events6_a: 'Ogni blocco verde `quando si preme sulla freccia
          verso ...` può essere associato a delle specifiche azioni: i blocchi agganciati
          sotto di esso.'
        courseC_PlayLab_events6_b: Usa il menù a discesa (▼) del blocco `sposta il
          personaggio 1 ...` per cambiare la direzione da dare al pinguino.
        courseC_PlayLab_events6_c: Quando avrai finito, sarai in grado di muovere
          il pinguino in tutte le direzioni usando i tasti freccia della tastiera
          o cliccando i tasti arancioni sullo schermo!
      courseC_PlayLab_events7:
        courseC_PlayLab_events7_a: Per risolvere questo esercizio, devi usare entrambi
          il blocchi `sposta il personaggio 2 in alto 400 pixel` e `sposta il personaggio
          2 in basso 400 pixel` all'interno del ciclo `ripeti per sempre`.
        courseC_PlayLab_events7_b: 'Il blocco `ripeti per sempre` non deve essere
          attaccato a nessun blocco evento: verrà eseguito in autonomia.'
      courseC_PlayLab_events7_2018:
        courseC_PlayLab_events7_a: Per risolvere questo esercizio, devi usare entrambi
          il blocchi `sposta il personaggio 2 in alto 400 pixel` e `sposta il personaggio
          2 in basso 400 pixel` all'interno del ciclo `ripeti per sempre`.
        courseC_PlayLab_events7_b: 'Il blocco `ripeti per sempre` non deve essere
          attaccato a nessun blocco evento: verrà eseguito in autonomia.'
      courseC_PlayLab_events7_2019:
        courseC_PlayLab_events7_a: Per risolvere questo esercizio, devi usare entrambi
          il blocchi `sposta il personaggio 2 in alto 400 pixel` e `sposta il personaggio
          2 in basso 400 pixel` all'interno del ciclo `ripeti per sempre`.
        courseC_PlayLab_events7_b: 'Il blocco `ripeti per sempre` non deve essere
          attaccato a nessun blocco evento: verrà eseguito in autonomia.'
      courseC_PlayLab_events8:
        courseC_PlayLab_events8_a: Per risolvere l'esercizio, devi collegare dei blocchi
          all'evento `quando il personaggio 1 tocca il personaggio 2`.
        courseC_PlayLab_events8_b: I blocchi nella cassetta degli attrezzi `il personaggio
          1 dice ...` e `riproduci il suono di ...` dovrebbero darti una mano!
      courseC_PlayLab_events8_2018:
        courseC_PlayLab_events8_a: Per risolvere l'esercizio, devi collegare dei blocchi
          all'evento `quando il personaggio 1 tocca il personaggio 2`.
        courseC_PlayLab_events8_b: I blocchi nella cassetta degli attrezzi `il personaggio
          1 dice ...` e `riproduci il suono di ...` dovrebbero darti una mano!
      courseC_PlayLab_events8_2019:
        courseC_PlayLab_events8_a: Per risolvere l'esercizio, devi collegare dei blocchi
          all'evento `quando il personaggio 1 tocca il personaggio 2`.
        courseC_PlayLab_events8_b: I blocchi nella cassetta degli attrezzi `il personaggio
          1 dice ...` e `riproduci il suono di ...` dovrebbero darti una mano!
      courseC_PlayLab_events9:
        courseC_PlayLab_events9_a: Il blocco `aggiungi un punto` ti aiuterà a risolvere
          questo esercizio.
        courseC_PlayLab_events9_b: Controlla che il blocco evento `quando il personaggio
          ... tocca ...` sia impostato sui personaggi **1** e **3**.
        courseC_PlayLab_events9_c: Puoi avere più di un evento `quando il personaggio
          ... tocca ...` contemporaneamente nella tua area di lavoro, quindi non devi
          eliminare il precedente!
      courseC_PlayLab_events9_2018:
        courseC_PlayLab_events9_a: Il blocco `aggiungi un punto` ti aiuterà a risolvere
          questo esercizio.
        courseC_PlayLab_events9_b: Controlla che il blocco evento `quando il personaggio
          ... tocca ...` sia impostato sui personaggi **1** e **3**.
        courseC_PlayLab_events9_c: Puoi avere più di un evento `quando il personaggio
          ... tocca ...` contemporaneamente nella tua area di lavoro, quindi non devi
          eliminare il precedente!
      courseC_PlayLab_events9_2019:
        courseC_PlayLab_events9_a: Il blocco `aggiungi un punto` ti aiuterà a risolvere
          questo esercizio.
        courseC_PlayLab_events9_b: Controlla che il blocco evento `quando il personaggio
          ... tocca ...` sia impostato sui personaggi **1** e **3**.
        courseC_PlayLab_events9_c: Puoi avere più di un evento `quando il personaggio
          ... tocca ...` contemporaneamente nella tua area di lavoro, quindi non devi
          eliminare il precedente!
      courseC_PlayLab_eventsA:
        courseC_PlayLab_eventsA_a: Per risolvere questo esercizio, usa i blocchi `imposta
          uno sfondo ...` e `imposta il personaggio ... a una velocità ...`.
        courseC_PlayLab_eventsA_b: Per risolvere questo esercizio, dovrai trascinare
          tu nell'area di lavoro il blocco evento `quando si clicca su "Esegui"`.
      courseC_PlayLab_eventsA_2018:
        courseC_PlayLab_eventsA_a: Per risolvere questo esercizio, usa i blocchi `imposta
          uno sfondo ...` e `imposta il personaggio ... a una velocità ...`.
        courseC_PlayLab_eventsA_b: Per risolvere questo esercizio, dovrai trascinare
          tu nell'area di lavoro il blocco evento `quando si clicca su "Esegui"`.
      courseC_PlayLab_eventsA_2019:
        courseC_PlayLab_eventsA_a: Per risolvere questo esercizio, usa i blocchi `imposta
          uno sfondo ...` e `imposta il personaggio ... a una velocità ...`.
        courseC_PlayLab_eventsA_b: Per risolvere questo esercizio, dovrai trascinare
          tu nell'area di lavoro il blocco evento `quando si clicca su "Esegui"`.
      courseC_PlayLab_eventsA_embed_2019:
        courseC_PlayLab_eventsA_a: Per risolvere questo esercizio, usa i blocchi `imposta
          uno sfondo ...` e `imposta il personaggio ... a una velocità ...`.
        courseC_PlayLab_eventsA_b: Per risolvere questo esercizio, dovrai trascinare
          tu nell'area di lavoro il blocco evento `quando si clicca su "Esegui"`.
      courseC_PlayLab_eventsFP:
        idea1: |-
          _Serve un idea?_

          **Chi c'è?** Fai comparire dei personaggi casuali, così nessuno potrà sapere quale sarà il successivo.

          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          _Serve un idea?_

          **All'avventura!** - Cambia lo sfondo e fai raccontare ai personaggi dove si trovano.

          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          _Serve un idea?_

          **Flipper** - Fai in modo di muovere un personaggio con le frecce (usa gli eventi `quando si preme sulla freccia verso l'alto` e `quando si preme sulla freccia verso il basso`), quindi riproduci un suono casuale quando il personaggio sbatte contro gli altri.
      courseC_PlayLab_eventsFP_2018:
        idea1: |-
          _Serve un idea?_

          **Chi c'è?** Fai comparire dei personaggi casuali, così nessuno potrà sapere quale sarà il successivo.

          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          _Serve un idea?_

          **All'avventura!** - Cambia lo sfondo e fai raccontare ai personaggi dove si trovano.

          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          _Serve un idea?_

          **Flipper** - Fai in modo di muovere un personaggio con le frecce (usa gli eventi `quando si preme sulla freccia verso l'alto` e `quando si preme sulla freccia verso il basso`), quindi riproduci un suono casuale quando il personaggio sbatte contro gli altri.
      courseC_PlayLab_eventsFP_2019:
        idea3: |-
          _Serve un idea?_

          **Flipper** - Fai in modo di muovere un personaggio con le frecce (usa gli eventi `quando si preme sulla freccia verso l'alto` e `quando si preme sulla freccia verso il basso`), quindi riproduci un suono casuale quando il personaggio sbatte contro gli altri.
      courseC_PlayLab_events_challenge1:
        courseC_PlayLab_events_challenge_a: |-
          Puoi usare questo blocco per posizionare dove vuoi i personaggi nell'area di gioco.

          <xml> <block type="studio_setSpritePosition">
              <title name="SPRITE">0</title>
              <title name="VALUE">12</title>
            </block></xml>
        courseC_PlayLab_events_challenge_b: Prova ad usare il blocco `imposta il personaggio
          ... alla posizione ...` quando il pinguino tocca qualsiasi altro personaggio.
          In questo modo il giocatore viene penalizzato, ma potrà continuare a provare!
        courseC_PlayLab_events_challenge_c: |-
          Potresti anche voler modificare la velocità dei vari personaggi per rendere il gioco più facile o più difficile!

          <xml>  <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.FAST</title>
            </block></xml>
      courseC_PlayLab_events_challenge1_2018:
        courseC_PlayLab_events_challenge_a: |-
          Puoi usare questo blocco per posizionare dove vuoi i personaggi nell'area di gioco.

          <xml> <block type="studio_setSpritePosition">
              <title name="SPRITE">0</title>
              <title name="VALUE">12</title>
            </block></xml>
        courseC_PlayLab_events_challenge_b: Prova ad usare il blocco `imposta il personaggio
          ... alla posizione ...` quando il pinguino tocca qualsiasi altro personaggio.
          In questo modo il giocatore viene penalizzato, ma potrà continuare a provare!
        courseC_PlayLab_events_challenge_c: |-
          Potresti anche voler modificare la velocità dei vari personaggi per rendere il gioco più facile o più difficile!

          <xml>  <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.FAST</title>
            </block></xml>
      courseC_PlayLab_events_challenge1_2019:
        courseC_PlayLab_events_challenge_a: |-
          Puoi usare questo blocco per posizionare dove vuoi i personaggi nell'area di gioco.

          <xml> <block type="studio_setSpritePosition">
              <title name="SPRITE">0</title>
              <title name="VALUE">12</title>
            </block></xml>
        courseC_PlayLab_events_challenge_b: Prova ad usare il blocco `imposta il personaggio
          ... alla posizione ...` quando il pinguino tocca qualsiasi altro personaggio.
          In questo modo il giocatore viene penalizzato, ma potrà continuare a provare!
        courseC_PlayLab_events_challenge_c: |-
          Potresti anche voler modificare la velocità dei vari personaggi per rendere il gioco più facile o più difficile!

          <xml>  <block type="studio_setSpriteSpeed">
              <title name="SPRITE">0</title>
              <title name="VALUE">Studio.SpriteSpeed.FAST</title>
            </block></xml>
      courseC_artist_loop1:
        courseC_artist_loop1_a: Non è necessaria alcuna modifica al ciclo, basta aggiungere
          un blocco sopra di esso.
        courseC_artist_loop1_b: |-
          Questo è il blocco di cui hai bisogno per impostare uno schema:

          <xml>
          <block type="draw_line_style_pattern">
              <title name="VALUE">DEFAULT</title>
            </block>
          </xml>

          scegli lo schema che preferisci!
      courseC_artist_loop1_2018:
        courseC_artist_loop1_a: Non è necessaria alcuna modifica al ciclo, basta aggiungere
          un blocco sopra di esso.
        courseC_artist_loop1_b: |-
          Questo è il blocco di cui hai bisogno per impostare uno schema:

          <xml>
          <block type="draw_line_style_pattern">
              <title name="VALUE">DEFAULT</title>
            </block>
          </xml>

          scegli lo schema che preferisci!
      courseC_artist_loop1_2019:
        courseC_artist_loop1_a: Non è necessaria alcuna modifica al ciclo, basta aggiungere
          un blocco sopra di esso.
        courseC_artist_loop1_b: |-
          Questo è il blocco di cui hai bisogno per impostare uno schema:

          <xml>
          <block type="draw_line_style_pattern">
              <title name="VALUE">DEFAULT</title>
            </block>
          </xml>

          scegli lo schema che preferisci!
      courseC_artist_loops1a:
        courseC_artist_loops1a_a: |-
          Questo è il primo blocco di cui hai bisogno:

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          Usa questo blocco per disegnare l'adesivo!

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1a_2018:
        courseC_artist_loops1a_a: |-
          Questo è il primo blocco di cui hai bisogno:

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          Usa questo blocco per disegnare l'adesivo!

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1a_2019:
        courseC_artist_loops1a_a: |-
          Questo è il primo blocco di cui hai bisogno:

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          Usa questo blocco per disegnare l'adesivo!

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops2a:
        courseC_artist_loops2a_a: All'interno del ciclo dovresti saltare a "200 avanti
          200 in basso" (per raggiungere il centro dello schermo), quindi disegnare
          l'adesivo dell'uccello e poi girare di 30 gradi.
        courseC_artist_loops2a_b: Clicca sul numero in cima al blocco `ripeti ...
          volte` per cambiare quante volte deve essere ripetuto il ciclo.
      courseC_artist_loops2a_2018:
        courseC_artist_loops2a_a: All'interno del ciclo dovresti saltare a "200 avanti
          200 in basso" (per raggiungere il centro dello schermo), quindi disegnare
          l'adesivo dell'uccello e poi girare di 30 gradi.
        courseC_artist_loops2a_b: Clicca sul numero in cima al blocco `ripeti ...
          volte` per cambiare quante volte deve essere ripetuto il ciclo.
      courseC_artist_loops2a_2019:
        courseC_artist_loops2a_a: All'interno del ciclo dovresti saltare a "200 avanti
          200 in basso" (per raggiungere il centro dello schermo), quindi disegnare
          l'adesivo dell'uccello e poi girare di 30 gradi.
        courseC_artist_loops2a_b: Clicca sul numero in cima al blocco `ripeti ...
          volte` per cambiare quante volte deve essere ripetuto il ciclo.
      courseC_artist_loops3a:
        courseC_artist_loops3a_a: Dovrai aggiungere solo un blocco all'interno del
          ciclo, dopo l'adesivo dell'uccello.
        courseC_artist_loops3a_b: Usa il menù a discesa (▼) del blocco `disegna un
          adesivo` per trovare l'adesivo del pipistrello.
      courseC_artist_loops3a_2018:
        courseC_artist_loops3a_a: Dovrai aggiungere solo un blocco all'interno del
          ciclo, dopo l'adesivo dell'uccello.
        courseC_artist_loops3a_b: Usa il menù a discesa (▼) del blocco `disegna un
          adesivo` per trovare l'adesivo del pipistrello.
      courseC_artist_loops3a_2019:
        courseC_artist_loops3a_a: Dovrai aggiungere solo un blocco all'interno del
          ciclo, dopo l'adesivo dell'uccello.
        courseC_artist_loops3a_b: Usa il menù a discesa (▼) del blocco `disegna un
          adesivo` per trovare l'adesivo del pipistrello.
      courseC_artist_loops4a:
        courseC_artist_loops4a_a: |-
          Usa questo blocco per saltare in avanti:

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          Non dimenticare di cambiare la distanza!
      courseC_artist_loops4a_2018:
        courseC_artist_loops4a_a: |-
          Usa questo blocco per saltare in avanti:

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          Non dimenticare di cambiare la distanza!
      courseC_artist_loops4a_2019:
        courseC_artist_loops4a_a: |-
          Usa questo blocco per saltare in avanti:

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          Non dimenticare di cambiare la distanza!
      courseC_artist_loops5a:
        courseC_artist_loops5a_a: Usa i menù a discesa (▼) dei blocchi `disegna un
          adesivo` per cambiare le immagini.
      courseC_artist_loops5a_2018:
        courseC_artist_loops5a_a: Usa i menù a discesa (▼) dei blocchi `disegna un
          adesivo` per cambiare le immagini.
      courseC_artist_loops5a_2019:
        courseC_artist_loops5a_a: Usa i menù a discesa (▼) dei blocchi `disegna un
          adesivo` per cambiare le immagini.
      courseC_artist_loops5b:
        courseC_artist_loops5b_a: |-
          Usa questo blocco per impostare lo schema delle tue linee:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: Per fare un disegno come quello qui sopra, devi
          far spostare l'artista all'indietro della stessa quantità di cui si è mosso
          in avanti.
      courseC_artist_loops5b_2018:
        courseC_artist_loops5b_a: |-
          Usa questo blocco per impostare lo schema delle tue linee:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: Per fare un disegno come quello qui sopra, devi
          far spostare l'artista all'indietro della stessa quantità di cui si è mosso
          in avanti.
      courseC_artist_loops5b_2019:
        courseC_artist_loops5b_a: |-
          Usa questo blocco per impostare lo schema delle tue linee:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: Per fare un disegno come quello qui sopra, devi
          far spostare l'artista all'indietro della stessa quantità di cui si è mosso
          in avanti.
      courseC_artist_loops6a:
        courseC_artist_loops6a_a: Per realizzare un disegno come quello qui sopra,
          salta avanti meno di 75 pixel tra ogni adesivo.
      courseC_artist_loops6a_2018:
        courseC_artist_loops6a_a: Per realizzare un disegno come quello qui sopra,
          salta avanti meno di 75 pixel tra ogni adesivo.
      courseC_artist_loops6a_2019:
        courseC_artist_loops6a_a: Per realizzare un disegno come quello qui sopra,
          salta avanti meno di 75 pixel tra ogni adesivo.
      courseC_artist_loops7a:
        courseC_artist_loops7a_a: |-
          Per disegnare un cerchio completo ci vogliono 360 gradi. Moltiplica i gradi delle curve per il numero di volte che si ripete il ciclo. È uguale a 360?
          Controlla le rotazioni suggerite per vedere che funziona proprio così!
      courseC_artist_loops7a_2018:
        courseC_artist_loops7a_a: |-
          Per disegnare un cerchio completo ci vogliono 360 gradi. Moltiplica i gradi delle curve per il numero di volte che si ripete il ciclo. È uguale a 360?
          Controlla le rotazioni suggerite per vedere che funziona proprio così!
      courseC_artist_loops7a_2019:
        courseC_artist_loops7a_a: |-
          Per disegnare un cerchio completo ci vogliono 360 gradi. Moltiplica i gradi delle curve per il numero di volte che si ripete il ciclo. È uguale a 360?
          Controlla le rotazioni suggerite per vedere che funziona proprio così!
      courseC_artist_loopsPre1a:
        courseC_artist_loopsPre1a_a: Ricorda di inserire il blocco `gira a ...` all'interno
          del ciclo `ripeti ... volte`.
        courseC_artist_loopsPre1a_b: 'Il ciclo `ripeti ... volte` dovrebbe avere 3
          blocchi al suo interno: `salta a 200 avanti 200 in basso`, `vai avanti di
          50 pixel` e `gira a destra di 60 gradi`.'
      courseC_artist_loopsPre1a_2018:
        courseC_artist_loopsPre1a_a: Ricorda di inserire il blocco `gira a ...` all'interno
          del ciclo `ripeti ... volte`.
        courseC_artist_loopsPre1a_b: 'Il ciclo `ripeti ... volte` dovrebbe avere 3
          blocchi al suo interno: `salta a 200 avanti 200 in basso`, `vai avanti di
          50 pixel` e `gira a destra di 60 gradi`.'
      courseC_artist_loopsPre1a_2019:
        courseC_artist_loopsPre1a_a: Ricorda di inserire il blocco `gira a ...` all'interno
          del ciclo `ripeti ... volte`.
        courseC_artist_loopsPre1a_b: 'Il ciclo `ripeti ... volte` dovrebbe avere 3
          blocchi al suo interno: `salta a 200 avanti 200 in basso`, `vai avanti di
          50 pixel` e `gira a destra di 60 gradi`.'
      courseC_artist_loopsPrePre1a:
        courseC_artist_loopsPrePre1a_a: |-
          Il primo blocco di cui avrai bisogno sarà:

          <xml><block type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml>
        courseC_artist_loopsPrePre1a_b: |-
          Per andare avanti di 50 pixel usa questo blocco:

           <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>
      courseC_artist_loopsPrePre1a_2018:
        courseC_artist_loopsPrePre1a_a: |-
          Il primo blocco di cui avrai bisogno sarà:

          <xml>  <block type="jump_to_xy" id="callMe">
              <title name="XPOS">200</title>
              <title name="YPOS">200</title>
            </block></xml>
        courseC_artist_loopsPrePre1a_b: |-
          Per andare avanti di 50 pixel usa questo blocco:

          <xml><block type="draw_move_by_constant">
              <title name="DIR">moveForward</title>
              <title name="VALUE">50</title>
            </block></xml>
      courseC_artist_loopsPrePre1a_2019:
        courseC_artist_loopsPrePre1a_a: |-
          Il primo blocco di cui avrai bisogno sarà:

          <xml>  <block type="jump_to_xy" id="callMe">
              <title name="XPOS">200</title>
              <title name="YPOS">200</title>
            </block></xml>
        courseC_artist_loopsPrePre1a_b: |-
          Per andare avanti di 50 pixel usa questo blocco:

          <xml><block type="draw_move_by_constant">
              <title name="DIR">moveForward</title>
              <title name="VALUE">50</title>
            </block></xml>
      courseC_artist_prog2:
        courseC_artist_prog2_a: '*"Se usi il blocco <xml><block type="draw_move_by_constant"><title
          name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>
          disegnerò una linea."*'
        courseC_artist_prog2_b: Problemi a girare? Usa il blocco <xml><block type="draw_turn_by_constant_dropdown"><title
          name="DIR">turnRight</title><title name="VALUE" config="45,60,90,120,180">90</title></block></xml>
      courseC_artist_prog2_2018:
        courseC_artist_prog2_a: '*"Se usi il blocco <xml><block type="draw_move_by_constant"><title
          name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>
          disegnerò una linea."*'
        courseC_artist_prog2_b: Problemi a girare? Usa il blocco <xml><block type="draw_turn_by_constant_dropdown"><title
          name="DIR">turnRight</title><title name="VALUE" config="45,60,90,120,180">90</title></block></xml>
      courseC_artist_prog2_2019:
        courseC_artist_prog2_a: '*"Se usi il blocco <xml><block type="draw_move_by_constant"><title
          name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>
          disegnerò una linea."*'
        courseC_artist_prog2_b: Problemi a girare? Usa il blocco <xml><block type="draw_turn_by_constant_dropdown"><title
          name="DIR">turnRight</title><title name="VALUE" config="45,60,90,120,180">90</title></block></xml>
      courseC_artist_prog3:
        courseC_artist_prog3_a: |-
          Per creare il finestrino, devi solo disegnare un quadrato con i lati di 100 pixel:

          -   vai avanti
          -   gira
          -   vai avanti
          -   gira
          -   vai avanti
          -   gira
          -   vai avanti
        courseC_artist_prog3_b: Vuoi fare un programma più breve? Prova ad usare un
          ciclo `ripeti ... volte`.
      courseC_artist_prog3_2018:
        courseC_artist_prog3_a: |-
          Per creare il finestrino, devi solo disegnare un quadrato con i lati di 100 pixel:

          -   vai avanti
          -   gira
          -   vai avanti
          -   gira
          -   vai avanti
          -   gira
          -   vai avanti
        courseC_artist_prog3_b: Vuoi fare un programma più breve? Prova ad usare un
          ciclo `ripeti ... volte`.
      courseC_artist_prog3_2019:
        courseC_artist_prog3_a: |-
          Per creare il finestrino, devi solo disegnare un quadrato con i lati di 100 pixel:

          -   vai avanti
          -   gira
          -   vai avanti
          -   gira
          -   vai avanti
          -   gira
          -   vai avanti
        courseC_artist_prog3_b: Vuoi fare un programma più breve? Prova ad usare un
          ciclo `ripeti ... volte`.
      courseC_artist_prog4:
        courseC_artist_prog4_a: Per finire il razzo, basta disegnare il triangolo
          in cima!
        courseC_artist_prog4_b: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseC_artist_prog4_c: |-
          Per disegnare un triangolo dovresti fare così:

          -   vai avanti
          -   gira a sinistra di 120 gradi
          -   vai avanti
          -   gira a sinistra di 120 gradi
          -   vai avanti
      courseC_artist_prog4_2018:
        courseC_artist_prog4_a: Per finire il razzo, basta disegnare il triangolo
          in cima!
        courseC_artist_prog4_b: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseC_artist_prog4_c: |-
          Per disegnare un triangolo dovresti fare così:

          -   vai avanti
          -   gira a sinistra di 120 gradi
          -   vai avanti
          -   gira a sinistra di 120 gradi
          -   vai avanti
      courseC_artist_prog4_2019:
        courseC_artist_prog4_a: Per finire il razzo, basta disegnare il triangolo
          in cima!
        courseC_artist_prog4_b: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseC_artist_prog4_c: |-
          Per disegnare un triangolo dovresti fare così:

          -   vai avanti
          -   gira a sinistra di 120 gradi
          -   vai avanti
          -   gira a sinistra di 120 gradi
          -   vai avanti
      courseC_artist_prog5:
        courseC_artist_prog5_a: Trascina il cursore verso la tartaruga per veder eseguire
          il codice più lentamente e capire dove sono eventuali errori.
        courseC_artist_prog5_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
        courseC_artist_prog5_c: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseC_artist_prog5_d: Ogni curva dovrebbe essere di 90 gradi a destra.
      courseC_artist_prog5_2018:
        courseC_artist_prog5_a: Trascina il cursore verso la tartaruga per veder eseguire
          il codice più lentamente e capire dove sono eventuali errori.
        courseC_artist_prog5_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
        courseC_artist_prog5_c: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseC_artist_prog5_d: Ogni curva dovrebbe essere di 90 gradi a destra.
      courseC_artist_prog5_2019:
        courseC_artist_prog5_a: Trascina il cursore verso la tartaruga per veder eseguire
          il codice più lentamente e capire dove sono eventuali errori.
        courseC_artist_prog5_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
        courseC_artist_prog5_c: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseC_artist_prog5_d: Ogni curva dovrebbe essere di 90 gradi a destra.
      courseC_artist_prog6:
        courseC_artist_prog6_a: L'artista è già rivolto verso la direzione corretta
          per disegnare la prima linea.
        courseC_artist_prog6_b: Questo rombo è semplicemente un quadrato ruotato su
          uno spigolo.
        courseC_artist_prog6_c: Dal momento che questo rombo è anche un quadrato,
          devi girare di 90 gradi ad ogni angolo.
      courseC_artist_prog6_2018:
        courseC_artist_prog6_a: L'artista è già rivolto verso la direzione corretta
          per disegnare la prima linea.
        courseC_artist_prog6_b: Questo rombo è semplicemente un quadrato ruotato su
          uno spigolo.
        courseC_artist_prog6_c: Dal momento che questo rombo è anche un quadrato,
          devi girare di 90 gradi ad ogni angolo.
      courseC_artist_prog6_2019:
        courseC_artist_prog6_a: L'artista è già rivolto verso la direzione corretta
          per disegnare la prima linea.
        courseC_artist_prog6_b: Questo rombo è semplicemente un quadrato ruotato su
          uno spigolo.
        courseC_artist_prog6_c: Dal momento che questo rombo è anche un quadrato,
          devi girare di 90 gradi ad ogni angolo.
      courseC_artist_prog7:
        courseC_artist_prog7_a: Gli angoli sono di 45 o 90 gradi.
        courseC_artist_prog7_b: |-
          Al primo passo tutto procede bene?\
          E al secondo?\
          Dov'è che qualcosa comincia a non funzionare?
        courseC_artist_prog7_c: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseC_artist_prog7_d: |-
          Dovresti fare così:

          -   vai avanti
          -   gira a destra di 45 gradi
          -   vai avanti
          -   gira a destra di 90 gradi
          -   vai avanti
          -   gira a destra di 45 gradi

          Ripeti questa sequenza per 2 volte!
        courseC_artist_prog7_e: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseC_artist_prog7_2018:
        courseC_artist_prog7_a: Gli angoli sono di 45 o 90 gradi.
        courseC_artist_prog7_b: |-
          Al primo passo tutto procede bene?\
          E al secondo?\
          Dov'è che qualcosa comincia a non funzionare?
        courseC_artist_prog7_c: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseC_artist_prog7_d: |-
          Dovresti fare così:

          -   vai avanti
          -   gira a destra di 45 gradi
          -   vai avanti
          -   gira a destra di 90 gradi
          -   vai avanti
          -   gira a destra di 45 gradi

          Ripeti questa sequenza per 2 volte!
        courseC_artist_prog7_e: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseC_artist_prog7_2019:
        courseC_artist_prog7_a: Gli angoli sono di 45 o 90 gradi.
        courseC_artist_prog7_b: |-
          Al primo passo tutto procede bene?\
          E al secondo?\
          Dov'è che qualcosa comincia a non funzionare?
        courseC_artist_prog7_c: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseC_artist_prog7_d: |-
          Dovresti fare così:

          -   vai avanti
          -   gira a destra di 45 gradi
          -   vai avanti
          -   gira a destra di 90 gradi
          -   vai avanti
          -   gira a destra di 45 gradi

          Ripeti questa sequenza per 2 volte!
        courseC_artist_prog7_e: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseC_artist_prog_challenge1:
        courseC_artist_prog_challenge1_a: Questo disegno può essere fatto come un
          rettangolo con una linea a metà oppure come due quadrati!
      courseC_artist_prog_challenge1_2018:
        courseC_artist_prog_challenge1_a: Questo disegno può essere fatto come un
          rettangolo con una linea a metà oppure come due quadrati!
      courseC_artist_prog_challenge1_2019:
        courseC_artist_prog_challenge1_a: Questo disegno può essere fatto come un
          rettangolo con una linea a metà oppure come due quadrati!
      courseC_artist_prog_challenge2a:
        courseC_artist_prog_challenge2_a: Dopo aver disegnato la prima linea, gira
          a sinistra prima di disegnare la seconda linea.
        courseC_artist_prog_challenge2_b: Dopo aver disegnato la seconda linea, gira
          a destra prima di disegnare la terza linea.
      courseC_artist_prog_challenge2a_2018:
        courseC_artist_prog_challenge2_a: Dopo aver disegnato la prima linea, gira
          a sinistra prima di disegnare la seconda linea.
        courseC_artist_prog_challenge2_b: Dopo aver disegnato la seconda linea, gira
          a destra prima di disegnare la terza linea.
      courseC_artist_prog_challenge2a_2019:
        courseC_artist_prog_challenge2_a: Dopo aver disegnato la prima linea, gira
          a sinistra prima di disegnare la seconda linea.
        courseC_artist_prog_challenge2_b: Dopo aver disegnato la seconda linea, gira
          a destra prima di disegnare la terza linea.
      courseC_collector_loops_challenge2:
        courseC_maze_loops_challenge2_b: Usa dei cicli per non superare il numero
          massimo di blocchi `raccogli`!
      courseC_collector_loops_challenge2_2018:
        courseC_maze_loops_challenge2_b: Usa dei cicli per non superare il numero
          massimo di blocchi `raccogli`!
      courseC_collector_loops_challenge2_2019:
        courseC_maze_loops_challenge2_b: Usa dei cicli per non superare il numero
          massimo di blocchi `raccogli`!
      courseC_collector_prog1:
        courseC_collector_prog1_a: Quando hai raggiunto un diamante, usa il blocco
          <xml><block type="collector_collect"/></xml> per raccoglierlo.
        courseC_collector_prog1_b: La soluzione più semplice è fare un passo avanti
          e raccogliere un diamante.
      courseC_collector_prog1_2018:
        courseC_collector_prog1_a: Quando hai raggiunto un diamante, usa il blocco
          <xml><block type="collector_collect"/></xml> per raccoglierlo.
        courseC_collector_prog1_b: La soluzione più semplice è fare un passo avanti
          e raccogliere un diamante.
      courseC_collector_prog1_2019:
        courseC_collector_prog1_a: Quando hai raggiunto un diamante, usa il blocco
          <xml><block type="collector_collect"/></xml> per raccoglierlo.
        courseC_collector_prog1_b: La soluzione più semplice è fare un passo avanti
          e raccogliere un diamante.
      courseC_collector_prog2:
        courseC_collector_prog2_a: Puoi usare quattro blocchi <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> oppure usare il blocco <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          per rendere il tuo programma più corto.
        courseC_collector_prog2_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseC_collector_prog2_2018:
        courseC_collector_prog2_a: Puoi usare quattro blocchi <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> oppure usare il blocco <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          per rendere il tuo programma più corto.
        courseC_collector_prog2_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseC_collector_prog2_2019:
        courseC_collector_prog2_a: Puoi usare quattro blocchi <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> oppure usare il blocco <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          per rendere il tuo programma più corto.
        courseC_collector_prog2_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseC_collector_prog3:
        courseC_collector_prog3_a: Verranno eseguiti solo i blocchi collegati al blocco
          arancione <xml><block type="when_run"/></xml>
        courseC_collector_prog3_b: Prova ad usare il pulsante "Fai un passo" per eseguire
          il programma un'istruzione alla volta. Riesci a trovare l'errore?
        courseC_collector_prog3_c: Se hai difficoltà a risolvere questo esercizio,
          prova prima a scrivere le mosse su un pezzo di carta.
      courseC_collector_prog3_2018:
        courseC_collector_prog3_a: Verranno eseguiti solo i blocchi collegati al blocco
          arancione <xml><block type="when_run"/></xml>
        courseC_collector_prog3_b: Prova ad usare il pulsante "Fai un passo" per eseguire
          il programma un'istruzione alla volta. Riesci a trovare l'errore?
        courseC_collector_prog3_c: Se hai difficoltà a risolvere questo esercizio,
          prova prima a scrivere le mosse su un pezzo di carta.
      courseC_collector_prog3_2019:
        courseC_collector_prog3_a: Verranno eseguiti solo i blocchi collegati al blocco
          arancione <xml><block type="when_run"/></xml>
        courseC_collector_prog3_b: Prova ad usare il pulsante "Fai un passo" per eseguire
          il programma un'istruzione alla volta. Riesci a trovare l'errore?
        courseC_collector_prog3_c: Se hai difficoltà a risolvere questo esercizio,
          prova prima a scrivere le mosse su un pezzo di carta.
      courseC_collector_prog4:
        courseC_collector_prog4_a: Se ti blocchi, prova a scrivere i passaggi su un
          foglio.
        courseC_collector_prog4_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
        courseC_collector_prog4_c: Prova questo percorso.
      courseC_collector_prog4_2018:
        courseC_collector_prog4_a: Se ti blocchi, prova a scrivere i passaggi su un
          foglio.
        courseC_collector_prog4_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
        courseC_collector_prog4_c: Prova questo percorso.
      courseC_collector_prog4_2019:
        courseC_collector_prog4_a: Se ti blocchi, prova a scrivere i passaggi su un
          foglio.
        courseC_collector_prog4_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
        courseC_collector_prog4_c: Prova questo percorso.
      courseC_collector_prog5:
        courseC_collector_prog5_a: |-
          "Funziona il primo passo?
          È corretta la seconda istruzione?
          Dov'è che il codice comincia a non fare ciò che avevi in mente?"
        courseC_collector_prog5_b: Se hai corretto un errore e il programma continua
          a non funzionare, usa la procedura del precedente suggerimento per trovare
          altri errori.
        courseC_collector_prog5_c: Se ti blocchi, prova a scrivere i passaggi su un
          foglio.
        courseC_collector_prog5_d: Segui il percorso per raccogliere i diamanti.
      courseC_collector_prog5_2018:
        courseC_collector_prog5_a: |-
          "Funziona il primo passo?
          È corretta la seconda istruzione?
          Dov'è che il codice comincia a non fare ciò che avevi in mente?"
        courseC_collector_prog5_b: Se hai corretto un errore e il programma continua
          a non funzionare, usa la procedura del precedente suggerimento per trovare
          altri errori.
        courseC_collector_prog5_c: Se ti blocchi, prova a scrivere i passaggi su un
          foglio.
        courseC_collector_prog5_d: Segui il percorso per raccogliere i diamanti.
      courseC_collector_prog5_2019:
        courseC_collector_prog5_a: |-
          "Funziona il primo passo?
          È corretta la seconda istruzione?
          Dov'è che il codice comincia a non fare ciò che avevi in mente?"
        courseC_collector_prog5_b: Se hai corretto un errore e il programma continua
          a non funzionare, usa la procedura del precedente suggerimento per trovare
          altri errori.
        courseC_collector_prog5_c: Se ti blocchi, prova a scrivere i passaggi su un
          foglio.
        courseC_collector_prog5_d: Segui il percorso per raccogliere i diamanti.
      courseC_collector_prog6:
        courseC_collector_prog6_a: |-
          Riesci a capire cosa non funziona?

          Prova a usare il pulsante "Fai un passo" per trovare errori eseguendo il codice un blocco per volta.
        courseC_collector_prog6_b: Ti sei bloccato? Segui il percorso per raccogliere
          i diamanti.
      courseC_collector_prog6_2018:
        courseC_collector_prog6_a: |-
          Riesci a capire cosa non funziona?

          Prova a usare il pulsante "Fai un passo" per trovare errori eseguendo il codice un blocco per volta.
        courseC_collector_prog6_b: Ti sei bloccato? Segui il percorso per raccogliere
          i diamanti.
      courseC_collector_prog6_2019:
        courseC_collector_prog6_a: |-
          Riesci a capire cosa non funziona?

          Prova a usare il pulsante "Fai un passo" per trovare errori eseguendo il codice un blocco per volta.
        courseC_collector_prog6_b: Ti sei bloccato? Segui il percorso per raccogliere
          i diamanti.
      courseC_collector_prog7:
        courseC_collector_prog7_a: Ci sono già tanti ottimi blocchi nell'area di lavoro.
          Non hai bisogno di cancellarne alcuno per risolvere questo esercizio.
        courseC_collector_prog7_b: Non trovi il blocco che ti serve per far muovere
          l'avventuriera nella direzione corretta? Prendine uno dalla cassetta degli
          attrezzi.
        courseC_collector_prog7_c: Hai difficoltà ad immaginare un percorso per raccogliere
          tutti i diamanti? Prova questo!
      courseC_collector_prog7_2018:
        courseC_collector_prog7_a: Ci sono già tanti ottimi blocchi nell'area di lavoro.
          Non hai bisogno di cancellarne alcuno per risolvere questo esercizio.
        courseC_collector_prog7_b: Non trovi il blocco che ti serve per far muovere
          l'avventuriera nella direzione corretta? Prendine uno dalla cassetta degli
          attrezzi.
        courseC_collector_prog7_c: Hai difficoltà ad immaginare un percorso per raccogliere
          tutti i diamanti? Prova questo!
      courseC_collector_prog7_2019:
        courseC_collector_prog7_a: Ci sono già tanti ottimi blocchi nell'area di lavoro.
          Non hai bisogno di cancellarne alcuno per risolvere questo esercizio.
        courseC_collector_prog7_b: Non trovi il blocco che ti serve per far muovere
          l'avventuriera nella direzione corretta? Prendine uno dalla cassetta degli
          attrezzi.
        courseC_collector_prog7_c: Hai difficoltà ad immaginare un percorso per raccogliere
          tutti i diamanti? Prova questo!
      courseC_collector_prog_challenge1:
        courseC_collector_prog_challenge1_a: Puoi usare più volte il blocco `raccogli`
          per raccogliere i diamanti supplementari.
      courseC_collector_prog_challenge1_2018:
        courseC_collector_prog_challenge1_a: Puoi usare più volte il blocco `raccogli`
          per raccogliere i diamanti supplementari.
      courseC_collector_prog_challenge1_2019:
        courseC_collector_prog_challenge1_a: Puoi usare più volte il blocco `raccogli`
          per raccogliere i diamanti supplementari.
      courseC_collector_prog_challenge2:
        courseC_collector_prog_challenge1_a: Puoi usare più di un blocco `raccogli`
          ad ogni casella.
        courseC_collector_prog_challenge1_b: Ti sei perso? Prova questo percorso per
          risolvere l'esercizio!
      courseC_collector_prog_challenge2_2018:
        courseC_collector_prog_challenge1_a: Puoi usare più di un blocco `raccogli`
          ad ogni casella.
        courseC_collector_prog_challenge1_b: Ti sei perso? Prova questo percorso per
          risolvere l'esercizio!
      courseC_collector_prog_challenge2_2019:
        courseC_collector_prog_challenge1_a: Puoi usare più di un blocco `raccogli`
          ad ogni casella.
        courseC_collector_prog_challenge1_b: Ti sei perso? Prova questo percorso per
          risolvere l'esercizio!
      courseC_flappy_events1:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events1_2018:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events1_2019:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events2:
        courseC_flappy_events2_a: 'Il blocco che devi aggiungere si chiama `imposta
          una velocità ...`. '
        courseC_flappy_events2_b: Collega il blocco `imposta una velocità ...` al
          blocco `quando si clicca su "Esegui"` per risolvere questo esercizio.
      courseC_flappy_events2_2018:
        courseC_flappy_events2_a: 'Il blocco che devi aggiungere si chiama `imposta
          una velocità ...`. '
        courseC_flappy_events2_b: Collega il blocco `imposta una velocità ...` al
          blocco `quando si clicca su "Esegui"` per risolvere questo esercizio.
      courseC_flappy_events2_2019:
        courseC_flappy_events2_a: 'Il blocco che devi aggiungere si chiama `imposta
          una velocità ...`. '
        courseC_flappy_events2_b: Collega il blocco `imposta una velocità ...` al
          blocco `quando si clicca su "Esegui"` per risolvere questo esercizio.
      courseC_flappy_events3:
        courseC_flappy_events3_a: Se qualcosa non funziona correttamente, controlla
          che i blocchi siano collegati agli eventi corretti nell'area di lavoro.
      courseC_flappy_events3_2018:
        courseC_flappy_events3_a: Se qualcosa non funziona correttamente, controlla
          che i blocchi siano collegati agli eventi corretti nell'area di lavoro.
      courseC_flappy_events3_2019:
        courseC_flappy_events3_a: Se qualcosa non funziona correttamente, controlla
          che i blocchi siano collegati agli eventi corretti nell'area di lavoro.
      courseC_flappy_events4:
        courseC_flappy_events4_a: Per risolvere questo esercizio, collega il blocco
          `fine del gioco` al blocco dell'evento `quando colpisce un ostacolo`.
      courseC_flappy_events4_2018:
        courseC_flappy_events4_a: Per risolvere questo esercizio, collega il blocco
          `fine del gioco` al blocco dell'evento `quando colpisce un ostacolo`.
      courseC_flappy_events4_2019:
        courseC_flappy_events4_a: Per risolvere questo esercizio, collega il blocco
          `fine del gioco` al blocco dell'evento `quando colpisce un ostacolo`.
      courseC_flappy_events5:
        courseC_flappy_events5_a: Dovrai usare il blocco `aggiungi un punto` per completare
          l'esercizio.
      courseC_flappy_events5_2018:
        courseC_flappy_events5_a: Dovrai usare il blocco `aggiungi un punto` per completare
          l'esercizio.
      courseC_flappy_events5_2019:
        courseC_flappy_events5_a: Dovrai usare il blocco `aggiungi un punto` per completare
          l'esercizio.
      courseC_flappy_events6:
        courseC_flappy_events6_a: Prova a collegare il blocco `sbatti le ali un numero
          di volte ...` all'evento `quando si clicca`.
      courseC_flappy_events6_2018:
        courseC_flappy_events6_a: Prova a collegare il blocco `sbatti le ali un numero
          di volte ...` all'evento `quando si clicca`.
      courseC_flappy_events6_2019:
        courseC_flappy_events6_a: Prova a collegare il blocco `sbatti le ali un numero
          di volte ...` all'evento `quando si clicca`.
      courseC_flappy_events7:
        courseC_flappy_events7_a: Puoi modificare lo sfondo usando il blocco `imposta
          una scena ...`.
      courseC_flappy_events7_2018:
        courseC_flappy_events7_a: Puoi modificare lo sfondo usando il blocco `imposta
          una scena ...`.
      courseC_flappy_events7_2019:
        courseC_flappy_events7_a: Puoi modificare lo sfondo usando il blocco `imposta
          una scena ...`.
      courseC_flappy_events8:
        courseC_flappy_events8_a: Per completare l'esercizio, devi collegare un secondo
          blocco `imposta una scena ...` sotto l'evento `quando supera un ostacolo`.
      courseC_flappy_events8_2018:
        courseC_flappy_events8_a: Per completare l'esercizio, devi collegare un secondo
          blocco `imposta una scena ...` sotto l'evento `quando supera un ostacolo`.
      courseC_flappy_events8_2019:
        courseC_flappy_events8_a: Per completare l'esercizio, devi collegare un secondo
          blocco `imposta una scena ...` sotto l'evento `quando supera un ostacolo`.
      courseC_flappy_events9:
        courseC_flappy_events9_a: Per completare l'esercizio, collega il blocco `imposta
          il punteggio 0` all'evento `quando colpisce un ostacolo`.
      courseC_flappy_events9_2018:
        courseC_flappy_events9_a: Per completare l'esercizio, collega il blocco `imposta
          il punteggio 0` all'evento `quando colpisce un ostacolo`.
      courseC_flappy_events9_2019:
        courseC_flappy_events9_a: Per completare l'esercizio, collega il blocco `imposta
          il punteggio 0` all'evento `quando colpisce un ostacolo`.
      courseC_harvester_loops1:
        courseC_harvester_loops1_a: Quando arrivi ad una zucca, puoi usare il blocco
          <xml><block type="harvester_pumpkin"/></xml> per raccoglierla.
        courseC_harvester_loops1_b: Puoi usare un ciclo con il blocco <xml><block
          type="harvester_pumpkin"/></xml> per prendere più di una zucca da una casella.
      courseC_harvester_loops1_2018:
        courseC_harvester_loops1_a: Quando arrivi ad una zucca, puoi usare il blocco
          <xml><block type="harvester_pumpkin"/></xml> per raccoglierla.
        courseC_harvester_loops1_b: Puoi usare un ciclo con il blocco <xml><block
          type="harvester_pumpkin"/></xml> per prendere più di una zucca da una casella.
      courseC_harvester_loops1_2019:
        courseC_harvester_loops1_a: Quando arrivi ad una zucca, puoi usare il blocco
          <xml><block type="harvester_pumpkin"/></xml> per raccoglierla.
        courseC_harvester_loops1_b: Puoi usare un ciclo con il blocco <xml><block
          type="harvester_pumpkin"/></xml> per prendere più di una zucca da una casella.
      courseC_harvester_loops2:
        courseC_harvester_loops2_a: Se ti blocchi, prova a scrivere i passaggi su
          carta e cerca gli schemi che si ripetono.
        courseC_harvester_loops2_b: Avrai bisogno di due cicli `ripeti ... volte`,
          uno dopo l'altro.
        courseC_harvester_loops2_c: Un ciclo ripeterà l'istruzione `vai avanti` e
          l'altro ripeterà l'istruzione `prendi zucca`.
      courseC_harvester_loops2_2018:
        courseC_harvester_loops2_a: Se ti blocchi, prova a scrivere i passaggi su
          carta e cerca gli schemi che si ripetono.
        courseC_harvester_loops2_b: Avrai bisogno di due cicli `ripeti ... volte`,
          uno dopo l'altro.
        courseC_harvester_loops2_c: Un ciclo ripeterà l'istruzione `vai avanti` e
          l'altro ripeterà l'istruzione `prendi zucca`.
      courseC_harvester_loops2_2019:
        courseC_harvester_loops2_a: Se ti blocchi, prova a scrivere i passaggi su
          carta e cerca gli schemi che si ripetono.
        courseC_harvester_loops2_b: Avrai bisogno di due cicli `ripeti ... volte`,
          uno dopo l'altro.
        courseC_harvester_loops2_c: Un ciclo ripeterà l'istruzione `vai avanti` e
          l'altro ripeterà l'istruzione `prendi zucca`.
      courseC_harvester_loops3:
        courseC_harvester_loops3_a: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
        courseC_harvester_loops3_b: Per la prima zucca, puoi usare un programma molto
          simile all'esercizio precedente. Da che parte devi girare dopo?
        courseC_harvester_loops3_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops3_2018:
        courseC_harvester_loops3_a: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
        courseC_harvester_loops3_b: Per la prima zucca, puoi usare un programma molto
          simile all'esercizio precedente. Da che parte devi girare dopo?
        courseC_harvester_loops3_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops3_2019:
        courseC_harvester_loops3_a: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
        courseC_harvester_loops3_b: Per la prima zucca, puoi usare un programma molto
          simile all'esercizio precedente. Da che parte devi girare dopo?
        courseC_harvester_loops3_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops4:
        courseC_harvester_loops4_a: Usa il nuovo blocco `prendi pannocchia` per raccogliere
          le pannocchie.
        courseC_harvester_loops4_b: Puoi usare diversi blocchi `ripeti ... volte`
          nel tuo programma, alcuni per raccogliere le pannocchie ed altri per le
          zucche.
        courseC_harvester_loops4_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops4_2018:
        courseC_harvester_loops4_a: Usa il nuovo blocco `prendi pannocchia` per raccogliere
          le pannocchie.
        courseC_harvester_loops4_b: Puoi usare diversi blocchi `ripeti ... volte`
          nel tuo programma, alcuni per raccogliere le pannocchie ed altri per le
          zucche.
        courseC_harvester_loops4_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops4_2019:
        courseC_harvester_loops4_a: Usa il nuovo blocco `prendi pannocchia` per raccogliere
          le pannocchie.
        courseC_harvester_loops4_b: Puoi usare diversi blocchi `ripeti ... volte`
          nel tuo programma, alcuni per raccogliere le pannocchie ed altri per le
          zucche.
        courseC_harvester_loops4_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops5:
        courseC_harvester_loops5_a: Se ti blocchi, prova a disegnare l'intero programma
          e poi cerca gli schemi che si ripetono.
        courseC_harvester_loops5_b: Non ti sembra che questa gradinata assomigli a
          quella di altri esercizi? I movimenti dovrebbero essere simili, ricordati
          solo di raccogliere gli ortaggi lungo la strada.
      courseC_harvester_loops5_2018:
        courseC_harvester_loops5_a: Se ti blocchi, prova a disegnare l'intero programma
          e poi cerca gli schemi che si ripetono.
        courseC_harvester_loops5_b: Non ti sembra che questa gradinata assomigli a
          quella di altri esercizi? I movimenti dovrebbero essere simili, ricordati
          solo di raccogliere gli ortaggi lungo la strada.
      courseC_harvester_loops5_2019:
        courseC_harvester_loops5_a: Se ti blocchi, prova a disegnare l'intero programma
          e poi cerca gli schemi che si ripetono.
        courseC_harvester_loops5_b: Non ti sembra che questa gradinata assomigli a
          quella di altri esercizi? I movimenti dovrebbero essere simili, ricordati
          solo di raccogliere gli ortaggi lungo la strada.
      courseC_harvester_loops6:
        courseC_harvester_loops6_a: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo `ripeti ... volte`.
        courseC_harvester_loops6_b: Non dimenticarti di girare alla fine della fila
          di pannocchie.
      courseC_harvester_loops6_2018:
        courseC_harvester_loops6_a: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo `ripeti ... volte`.
        courseC_harvester_loops6_b: Non dimenticarti di girare alla fine della fila
          di pannocchie.
      courseC_harvester_loops6_2019:
        courseC_harvester_loops6_a: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo `ripeti ... volte`.
        courseC_harvester_loops6_b: Non dimenticarti di girare alla fine della fila
          di pannocchie.
      courseC_harvester_loops7:
        courseC_harvester_loops7_a: 'Ci sono due modi per risolvere questo esercizio:
          raccogliere prima le pannocchie e poi le zucche oppure viceversa, prima
          le zucche e poi le pannocchie.'
        courseC_harvester_loops7_b: Dovrai usare diversi cicli `ripeti ... volte`
          per risolvere questo esercizio.
      courseC_harvester_loops7_2018:
        courseC_harvester_loops7_a: 'Ci sono due modi per risolvere questo esercizio:
          raccogliere prima le pannocchie e poi le zucche oppure viceversa, prima
          le zucche e poi le pannocchie.'
        courseC_harvester_loops7_b: Dovrai usare diversi cicli `ripeti ... volte`
          per risolvere questo esercizio.
      courseC_harvester_loops7_2019:
        courseC_harvester_loops7_a: 'Ci sono due modi per risolvere questo esercizio:
          raccogliere prima le pannocchie e poi le zucche oppure viceversa, prima
          le zucche e poi le pannocchie.'
        courseC_harvester_loops7_b: Dovrai usare diversi cicli `ripeti ... volte`
          per risolvere questo esercizio.
      courseC_harvester_loops8:
        courseC_harvester_loops8_a: Non ti sembra che questa gradinata assomigli a
          quella dell'esercizio precedente? I movimenti dovrebbero essere simili,
          ricordati solo di raccogliere gli ortaggi lungo la strada.
        courseC_harvester_loops8_b: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops8_2018:
        courseC_harvester_loops8_a: Non ti sembra che questa gradinata assomigli a
          quella dell'esercizio precedente? I movimenti dovrebbero essere simili,
          ricordati solo di raccogliere gli ortaggi lungo la strada.
        courseC_harvester_loops8_b: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops8_2019:
        courseC_harvester_loops8_a: Non ti sembra che questa gradinata assomigli a
          quella dell'esercizio precedente? I movimenti dovrebbero essere simili,
          ricordati solo di raccogliere gli ortaggi lungo la strada.
        courseC_harvester_loops8_b: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops_challenge1a:
        courseC_harvester_loops_challenge1_a: È troppo difficile senza usare i cicli!
        courseC_harvester_loops_challenge1_b: Puoi ripetere i blocchi `vai avanti`
          e `prendi pannocchia` tutte le volte che ti serve, poi `gira a destra` ad
          ogni angolo.
        courseC_harvester_loops_challenge1_c: |-
          Il modo migliore per raccogliere le pannocchie del secondo e terzo lato del percorso è di usare un ciclo `ripeti ... volte` dentro a un altro blocco `ripeti ... volte`.

          <xml><block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></xml>
      courseC_harvester_loops_challenge1a_2018:
        courseC_harvester_loops_challenge1_a: È troppo difficile senza usare i cicli!
        courseC_harvester_loops_challenge1_b: Puoi ripetere i blocchi `vai avanti`
          e `prendi pannocchia` tutte le volte che ti serve, poi `gira a destra` ad
          ogni angolo.
        courseC_harvester_loops_challenge1_c: |-
          Il modo migliore per raccogliere le pannocchie del secondo e terzo lato del percorso è di usare un ciclo `ripeti ... volte` dentro a un altro blocco `ripeti ... volte`.

          <xml><block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></xml>
      courseC_harvester_loops_challenge1a_2019:
        courseC_harvester_loops_challenge1_a: È troppo difficile senza usare i cicli!
        courseC_harvester_loops_challenge1_b: Puoi ripetere i blocchi `vai avanti`
          e `prendi pannocchia` tutte le volte che ti serve, poi `gira a destra` ad
          ogni angolo.
        courseC_harvester_loops_challenge1_c: |-
          Il modo migliore per raccogliere le pannocchie del secondo e terzo lato del percorso è di usare un ciclo `ripeti ... volte` dentro a un altro blocco `ripeti ... volte`.

          <xml><block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></xml>
      courseC_harvester_loops_challenge2:
        courseC_harvester_loops_challenge2_a: Un modo per risolvere questo esercizio
          assomiglia a uno zig-zag. Un altro modo ricorda una spirale! Ci sono tante
          soluzioni diverse per un esercizio come questo. Non rinunciare, insisti!
        courseC_harvester_loops_challenge2_b: Puoi ripetere i blocchi `vai avanti`
          e `prendi lattuga` tutte le volte che ti serve, poi gira ad ogni angolo.
        courseC_harvester_loops_challenge2_c: |-
          Lo schema a zig-zag può essere ripetuto due volte per completare l'esercizio usando solo 20 blocchi!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          Lo schema a spirale può essere ottenuto con solo 18 blocchi!

           ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_harvester_loops_challenge2_2018:
        courseC_harvester_loops_challenge2_a: Un modo per risolvere questo esercizio
          assomiglia a uno zig-zag. Un altro modo ricorda una spirale! Ci sono tante
          soluzioni diverse per un esercizio come questo. Non rinunciare, insisti!
        courseC_harvester_loops_challenge2_b: Puoi ripetere i blocchi `vai avanti`
          e `prendi lattuga` tutte le volte che ti serve, poi gira ad ogni angolo.
        courseC_harvester_loops_challenge2_c: |-
          Lo schema a zig-zag può essere ripetuto due volte per completare l'esercizio usando solo 20 blocchi!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          Lo schema a spirale può essere ottenuto con solo 18 blocchi!

           ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_harvester_loops_challenge2_2019:
        courseC_harvester_loops_challenge2_a: Un modo per risolvere questo esercizio
          assomiglia a uno zig-zag. Un altro modo ricorda una spirale! Ci sono tante
          soluzioni diverse per un esercizio come questo. Non rinunciare, insisti!
        courseC_harvester_loops_challenge2_b: Puoi ripetere i blocchi `vai avanti`
          e `prendi lattuga` tutte le volte che ti serve, poi gira ad ogni angolo.
        courseC_harvester_loops_challenge2_c: |-
          Lo schema a zig-zag può essere ripetuto due volte per completare l'esercizio usando solo 20 blocchi!

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          Lo schema a spirale può essere ottenuto con solo 18 blocchi!

           ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_maze_debugging1:
        courseC_maze_debugging1_a: |-
          -   Al primo passo tutto procede bene?
          -   Va ancora tutto bene al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging1_b: Devi aggiungere 1 blocco per completare l'esercizio.
      courseC_maze_debugging1_2018:
        courseC_maze_debugging1_a: |-
          -   Al primo passo tutto procede bene?
          -   Va ancora tutto bene al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging1_b: Devi aggiungere 1 blocco per completare l'esercizio.
      courseC_maze_debugging1_2019:
        courseC_maze_debugging1_a: |-
          -   Al primo passo tutto procede bene?
          -   Va ancora tutto bene al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging1_b: Devi aggiungere 1 blocco per completare l'esercizio.
      courseC_maze_debugging2:
        courseC_maze_debugging2_a: C'è un sacco di ottimo codice nell'area di lavoro.
          Non cancellarlo per ricominciare tutto da capo!
        courseC_maze_debugging2_b: |-
          -   Al primo passo tutto procede bene?
          -   Va ancora tutto bene al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging2_c: Non riesci a capire cosa non va? Prova ad eseguire
          il codice un paio di volte per vedere cosa succede.
      courseC_maze_debugging2_2018:
        courseC_maze_debugging2_a: C'è un sacco di ottimo codice nell'area di lavoro.
          Non cancellarlo per ricominciare tutto da capo!
        courseC_maze_debugging2_b: |-
          -   Al primo passo tutto procede bene?
          -   Va ancora tutto bene al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging2_c: Non riesci a capire cosa non va? Prova ad eseguire
          il codice un paio di volte per vedere cosa succede.
      courseC_maze_debugging2_2019:
        courseC_maze_debugging2_a: C'è un sacco di ottimo codice nell'area di lavoro.
          Non cancellarlo per ricominciare tutto da capo!
        courseC_maze_debugging2_b: |-
          -   Al primo passo tutto procede bene?
          -   Va ancora tutto bene al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging2_c: Non riesci a capire cosa non va? Prova ad eseguire
          il codice un paio di volte per vedere cosa succede.
      courseC_maze_debugging3:
        courseC_maze_debugging3_a: |-
          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: Non riesci a capire cosa non va? Prova ad eseguire
          il codice un paio di volte per vedere cosa succede.
      courseC_maze_debugging3_2018:
        courseC_maze_debugging3_a: |-
          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: Non riesci a capire cosa non va? Prova ad eseguire
          il codice un paio di volte per vedere cosa succede.
      courseC_maze_debugging3_2019:
        courseC_maze_debugging3_a: |-
          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: Non riesci a capire cosa non va? Prova ad eseguire
          il codice un paio di volte per vedere cosa succede.
      courseC_maze_debugging4:
        courseC_maze_debugging4_a: Usa il pulsante "Fai un passo" per eseguire un'istruzione
          alla volta. Questo potrebbe aiutarti a trovare il blocco sbagliato?
        courseC_maze_debugging4_b: Una delle curve che sta facendo Scrat va nella
          direzione sbagliata. Riesci a capire qual'è?
      courseC_maze_debugging4_2018:
        courseC_maze_debugging4_a: Usa il pulsante "Fai un passo" per eseguire un'istruzione
          alla volta. Questo potrebbe aiutarti a trovare il blocco sbagliato?
        courseC_maze_debugging4_b: Una delle curve che sta facendo Scrat va nella
          direzione sbagliata. Riesci a capire qual'è?
      courseC_maze_debugging4_2019:
        courseC_maze_debugging4_a: Usa il pulsante "Fai un passo" per eseguire un'istruzione
          alla volta. Questo potrebbe aiutarti a trovare il blocco sbagliato?
        courseC_maze_debugging4_b: Una delle curve che sta facendo Scrat va nella
          direzione sbagliata. Riesci a capire qual'è?
      courseC_maze_debugging5:
        courseC_maze_debugging5_a: |-
          Ci sono un sacco di blocchi utili nell'area di lavoro! Non cancellarli tutti!

          Usa il pulsante "Fai un passo" per indagare e capire dove il codice è sbagliato.
        courseC_maze_debugging5_b: Prova a dire ad alta voce cosa dovrebbe fare Scrat.  Corrisponde
          al codice presente nell'area di lavoro?  Che differenza c'è?
      courseC_maze_debugging5_2018:
        courseC_maze_debugging5_a: |-
          Ci sono un sacco di blocchi utili nell'area di lavoro! Non cancellarli tutti!

          Usa il pulsante "Fai un passo" per indagare e capire dove il codice è sbagliato.
        courseC_maze_debugging5_c: Puoi modificare la direzione del blocco `gira a
          ...` cliccando sul menù a discesa (▼).
        courseC_maze_debugging5_b: Prova a dire ad alta voce cosa dovrebbe fare Scrat.  Corrisponde
          al codice presente nell'area di lavoro?  Che differenza c'è?
      courseC_maze_debugging5_2019:
        courseC_maze_debugging5_a: |-
          Ci sono un sacco di blocchi utili nell'area di lavoro! Non cancellarli tutti!

          Usa il pulsante "Fai un passo" per indagare e capire dove il codice è sbagliato.
        courseC_maze_debugging5_c: Puoi modificare la direzione del blocco `gira a
          ...` cliccando sul menù a discesa (▼).
        courseC_maze_debugging5_b: Prova a dire ad alta voce cosa dovrebbe fare Scrat.  Corrisponde
          al codice presente nell'area di lavoro?  Che differenza c'è?
      courseC_maze_debugging6:
        courseC_maze_debugging6_a: |-
          -   Cosa dovrebbe fare Scrat?
          -   Cosa fa Scrat?
          -   Questo cosa ti suggerisce?
        courseC_maze_debugging6_b: |-
          Dopo aver trovato e risolto il primo errore, procedi con il debugging (correzione degli errori) per trovare il secondo.

          Ripeti questo processo fino a quando il programma funziona!
      courseC_maze_debugging6_2018:
        courseC_maze_debugging6_a: |-
          -   Cosa dovrebbe fare Scrat?
          -   Cosa fa Scrat?
          -   Questo cosa ti suggerisce?
        courseC_maze_debugging6_b: |-
          Dopo aver trovato e risolto il primo errore, procedi con il debugging (correzione degli errori) per trovare il secondo.

          Ripeti questo processo fino a quando il programma funziona!
      courseC_maze_debugging6_2019:
        courseC_maze_debugging6_a: |-
          -   Cosa dovrebbe fare Scrat?
          -   Cosa fa Scrat?
          -   Questo cosa ti suggerisce?
        courseC_maze_debugging6_b: |-
          Dopo aver trovato e risolto il primo errore, procedi con il debugging (correzione degli errori) per trovare il secondo.

          Ripeti questo processo fino a quando il programma funziona!
      courseC_maze_debugging7:
        courseC_maze_debugging7_a: |-
          -   Al primo passo tutto procede bene?
          -   E al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging7_b: Non dimenticare di usare il pulsante "Fai un passo"
          per eseguire il programma un'istruzione alla volta!
        courseC_maze_debugging7_c: |-
          Dopo aver trovato e risolto il primo errore, fai attenzione a continuare ad usare il processo di debugging (correzione degli errori) per trovare il secondo.

          Ripeti il processo di debugging fino a quando il programma funziona!
      courseC_maze_debugging7_2018:
        courseC_maze_debugging7_a: |-
          -   Al primo passo tutto procede bene?
          -   E al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging7_b: Non dimenticare di usare il pulsante "Fai un passo"
          per eseguire il programma un'istruzione alla volta!
        courseC_maze_debugging7_c: |-
          Dopo aver trovato e risolto il primo errore, fai attenzione a continuare ad usare il processo di debugging (correzione degli errori) per trovare il secondo.

          Ripeti il processo di debugging fino a quando il programma funziona!
      courseC_maze_debugging7_2019:
        courseC_maze_debugging7_a: |-
          -   Al primo passo tutto procede bene?
          -   E al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging7_b: Non dimenticare di usare il pulsante "Fai un passo"
          per eseguire il programma un'istruzione alla volta!
        courseC_maze_debugging7_c: |-
          Dopo aver trovato e risolto il primo errore, fai attenzione a continuare ad usare il processo di debugging (correzione degli errori) per trovare il secondo.

          Ripeti il processo di debugging fino a quando il programma funziona!
      courseC_maze_debugging_challenge1:
        courseC_maze_debugging_challenge1_a: Destra o sinistra? A te la scelta!
        courseC_maze_debugging_challenge1_b: Il percorso che deve seguire Scrat ha
          la forma di un rettangolo! Deve girare dalla stessa parte ad ogni svolta.
        courseC_maze_debugging_challenge1_c: Se ti stai bloccando, puoi sempre ricominciare
          da capo e provare un percorso nuovo!
      courseC_maze_debugging_challenge1_2018:
        courseC_maze_debugging_challenge1_a: Destra o sinistra? A te la scelta!
        courseC_maze_debugging_challenge1_b: Il percorso che deve seguire Scrat ha
          la forma di un rettangolo! Deve girare dalla stessa parte ad ogni svolta.
        courseC_maze_debugging_challenge1_c: Se ti stai bloccando, puoi sempre ricominciare
          da capo e provare un percorso nuovo!
      courseC_maze_debugging_challenge1_2019:
        courseC_maze_debugging_challenge1_a: Destra o sinistra? A te la scelta!
        courseC_maze_debugging_challenge1_b: Il percorso che deve seguire Scrat ha
          la forma di un rettangolo! Deve girare dalla stessa parte ad ogni svolta.
        courseC_maze_debugging_challenge1_c: Se ti stai bloccando, puoi sempre ricominciare
          da capo e provare un percorso nuovo!
      courseC_maze_debugging_challenge2:
        courseC_maze_debugging_challenge2_b: Se ti stai bloccando, prova a controllare
          il codice (debugging). C'è qualcosa di sbagliato?
        courseC_maze_debugging_challenge2_c: |-
          Ci sono due diversi percorsi che puoi seguire andando avanti e girando al massimo quattro volte. Ma se trovi il modo di usare un ciclo, potrebbero essercene anche di più!

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_debugging_challenge2_2018:
        courseC_maze_debugging_challenge2_b: Se ti stai bloccando, prova a controllare
          il codice (debugging). C'è qualcosa di sbagliato?
        courseC_maze_debugging_challenge2_c: |-
          Ci sono due diversi percorsi che puoi seguire andando avanti e girando al massimo quattro volte. Ma se trovi il modo di usare un ciclo, potrebbero essercene anche di più!

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_debugging_challenge2_2019:
        courseC_maze_debugging_challenge2_b: Se ti stai bloccando, prova a controllare
          il codice (debugging). C'è qualcosa di sbagliato?
        courseC_maze_debugging_challenge2_c: |-
          Ci sono due diversi percorsi che puoi seguire andando avanti e girando al massimo quattro volte. Ma se trovi il modo di usare un ciclo, potrebbero essercene anche di più!

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_loops_challenge1a:
        courseC_maze_loops_challenge1_a: Considera questo percorso diviso in due parti
          diverse. Ognuna ha un suo schema che si ripete.
        courseC_maze_loops_challenge1_b: Ti ricordi come si usano i cicli per ripetere
          uno schema a scalinata?
      courseC_maze_loops_challenge1a_2018:
        courseC_maze_loops_challenge1_a: Considera questo percorso diviso in due parti
          diverse. Ognuna ha un suo schema che si ripete.
        courseC_maze_loops_challenge1_b: Ti ricordi come si usano i cicli per ripetere
          uno schema a scalinata?
      courseC_maze_loops_challenge1a_2019:
        courseC_maze_loops_challenge1_a: Considera questo percorso diviso in due parti
          diverse. Ognuna ha un suo schema che si ripete.
        courseC_maze_loops_challenge1_b: Ti ricordi come si usano i cicli per ripetere
          uno schema a scalinata?
      courseC_maze_programming1:
        courseC_maze_programming1_0: Controlla che tutti i blocchi siano correttamente
          agganciati tra loro, quindi clicca nuovamente su "Esegui".
      courseC_maze_programming1_2018:
        courseC_maze_programming1_0: Controlla che tutti i blocchi siano correttamente
          agganciati tra loro, quindi clicca nuovamente su "Esegui".
      courseC_maze_programming1_2019:
        courseC_maze_programming1_0: Controlla che tutti i blocchi siano correttamente
          agganciati tra loro, quindi clicca nuovamente su "Esegui".
      courseC_maze_programming2:
        courseC_maze_programming2_a: Per usare un blocco <xml><block type="maze_moveForward"/></xml>,
          trascinalo fuori dalla cassetta degli attrezzi e aggancialo al blocco <xml><block
          type="when_run"/></xml>.
        courseC_maze_programming2_b: Controlla che tutti i blocchi siano correttamente
          agganciati tra loro, quindi clicca nuovamente su "Esegui".
      courseC_maze_programming2_2018:
        courseC_maze_programming2_a: Per usare un blocco <xml><block type="maze_moveForward"/></xml>,
          trascinalo fuori dalla cassetta degli attrezzi e aggancialo al blocco <xml><block
          type="when_run"/></xml>.
        courseC_maze_programming2_b: Controlla che tutti i blocchi siano correttamente
          agganciati tra loro, quindi clicca nuovamente su "Esegui".
      courseC_maze_programming2_2019:
        courseC_maze_programming2_a: Per usare un blocco <xml><block type="maze_moveForward"/></xml>,
          trascinalo fuori dalla cassetta degli attrezzi e aggancialo al blocco <xml><block
          type="when_run"/></xml>.
        courseC_maze_programming2_b: Controlla che tutti i blocchi siano correttamente
          agganciati tra loro, quindi clicca nuovamente su "Esegui".
      courseC_maze_programming3:
        courseC_maze_programming3_a: Prima prova ad eseguire il programma per vedere
          dove sbaglia.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseC_maze_programming3_2018:
        courseC_maze_programming3_a: Prima prova ad eseguire il programma per vedere
          dove sbaglia.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseC_maze_programming3_2019:
        courseC_maze_programming3_a: Prima prova ad eseguire il programma per vedere
          dove sbaglia.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseC_maze_programming4:
        courseC_maze_programming4_a: Ricorda che quando usi l'istruzione `gira a ...`,
          devi ragionare secondo il _punto di vista dell'uccellino_. In questo caso,
          l'istruzione `gira a destra` farà dirigere l'uccellino verso il basso.
        courseC_maze_programming4_b: |-
          Per seguire il percorso:

          -   vai avanti,
          -   gira da una parte,
          -   vai avanti,
          -   gira dalla parte opposta,
          -   vai avanti.
      courseC_maze_programming4_2018:
        courseC_maze_programming4_a: Ricorda che quando usi l'istruzione `gira a ...`,
          devi ragionare secondo il _punto di vista dell'uccellino_. In questo caso,
          l'istruzione `gira a destra` farà dirigere l'uccellino verso il basso.
        courseC_maze_programming4_b: |-
          Per seguire il percorso:

          -   vai avanti,
          -   gira da una parte,
          -   vai avanti,
          -   gira dalla parte opposta,
          -   vai avanti.
      courseC_maze_programming4_2019:
        courseC_maze_programming4_a: Ricorda che quando usi l'istruzione `gira a ...`,
          devi ragionare secondo il _punto di vista dell'uccellino_. In questo caso,
          l'istruzione `gira a destra` farà dirigere l'uccellino verso il basso.
        courseC_maze_programming4_b: |-
          Per seguire il percorso:

          -   vai avanti,
          -   gira da una parte,
          -   vai avanti,
          -   gira dalla parte opposta,
          -   vai avanti.
      courseC_maze_programming5:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: L'uccellino deve fare una curva per portare a
          termine questo esercizio. Riesci a capire in quale direzione?
        courseC_maze_programming5_c: La soluzione corretta ha due blocchi `vai avanti`,
          una curva e altri due blocchi `vai avanti`.
      courseC_maze_programming5_2018:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: L'uccellino deve fare una curva per portare a
          termine questo esercizio. Riesci a capire in quale direzione?
        courseC_maze_programming5_c: La soluzione corretta ha due blocchi `vai avanti`,
          una curva e altri due blocchi `vai avanti`.
      courseC_maze_programming5_2019:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: L'uccellino deve fare una curva per portare a
          termine questo esercizio. Riesci a capire in quale direzione?
        courseC_maze_programming5_c: La soluzione corretta ha due blocchi `vai avanti`,
          una curva e altri due blocchi `vai avanti`.
      courseC_maze_programming6:
        courseC_maze_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseC_maze_programming6_b: Traccia con il tuo dito il percorso dall'uccellino
          fino al maialino, che movimenti hai fatto?
        courseC_maze_programming6_c: Ricorda che prima devi far girare l'uccellino,
          visto che inizialmente è rivolto verso un muro.
        courseC_maze_programming6_d: Ti sei bloccato? Guarda questo percorso!
      courseC_maze_programming6_2018:
        courseC_maze_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseC_maze_programming6_b: Traccia con il tuo dito il percorso dall'uccellino
          fino al maialino, che movimenti hai fatto?
        courseC_maze_programming6_c: Ricorda che prima devi far girare l'uccellino,
          visto che inizialmente è rivolto verso un muro.
        courseC_maze_programming6_d: Ti sei bloccato? Guarda questo percorso!
      courseC_maze_programming6_2019:
        courseC_maze_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseC_maze_programming6_b: Traccia con il tuo dito il percorso dall'uccellino
          fino al maialino, che movimenti hai fatto?
        courseC_maze_programming6_c: Ricorda che prima devi far girare l'uccellino,
          visto che inizialmente è rivolto verso un muro.
        courseC_maze_programming6_d: Ti sei bloccato? Guarda questo percorso!
      courseC_maze_programming7:
        courseC_maze_programming7_a: Non dimenticare di usare il pulsante "Fai un
          passo" che esegue un blocco per volta permettendoti di notare più facilmente
          gli errori.
        courseC_maze_programming7_b: Se hai difficoltà a risolvere questo esercizio,
          prova prima a scrivere le mosse su un pezzo di carta.
      courseC_maze_programming7_2018:
        courseC_maze_programming7_a: Non dimenticare di usare il pulsante "Fai un
          passo" che esegue un blocco per volta permettendoti di notare più facilmente
          gli errori.
        courseC_maze_programming7_b: Se hai difficoltà a risolvere questo esercizio,
          prova prima a scrivere le mosse su un pezzo di carta.
      courseC_maze_programming7_2019:
        courseC_maze_programming7_a: Non dimenticare di usare il pulsante "Fai un
          passo" che esegue un blocco per volta permettendoti di notare più facilmente
          gli errori.
        courseC_maze_programming7_b: Se hai difficoltà a risolvere questo esercizio,
          prova prima a scrivere le mosse su un pezzo di carta.
      courseC_maze_programming8:
        courseC_maze_programming8_a: Ricordati che se ti blocchi puoi usare il pulsante
          "Fai un passo" per analizzare il tuo codice un blocco per volta.
        courseC_maze_programming8_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseC_maze_programming8_2018:
        courseC_maze_programming8_a: Ricordati che se ti blocchi puoi usare il pulsante
          "Fai un passo" per analizzare il tuo codice un blocco per volta.
        courseC_maze_programming8_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseC_maze_programming8_2019:
        courseC_maze_programming8_a: Ricordati che se ti blocchi puoi usare il pulsante
          "Fai un passo" per analizzare il tuo codice un blocco per volta.
        courseC_maze_programming8_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseC_maze_programming_challenge1:
        courseC_maze_programming_challenge1_a: Ci sono molti modi per raggiungere
          il maialino. Usa il tuo dito per trovare un percorso e poi programmalo!
      courseC_maze_programming_challenge1_2018:
        courseC_maze_programming_challenge1_a: Ci sono molti modi per raggiungere
          il maialino. Usa il tuo dito per trovare un percorso e poi programmalo!
      courseC_maze_programming_challenge1_2019:
        courseC_maze_programming_challenge1_a: Ci sono molti modi per raggiungere
          il maialino. Usa il tuo dito per trovare un percorso e poi programmalo!
      courseC_maze_programming_challenge2:
        courseC_maze_programming_challenge2_a: _"Se mi fai muovere all'indietro, stai
          particolarmente attento a farmi girare dalla parte giusta!"_
        courseC_maze_programming_challenge2_b: |-
          La soluzione più corta usa solo 5 blocchi, ma usa questo blocco:

          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_maze_programming_challenge2_2018:
        courseC_maze_programming_challenge2_a: _"Se mi fai muovere all'indietro, stai
          particolarmente attento a farmi girare dalla parte giusta!"_
        courseC_maze_programming_challenge2_b: |-
          La soluzione più corta usa solo 5 blocchi, ma usa questo blocco:

          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_maze_programming_challenge2_2019:
        courseC_maze_programming_challenge2_a: _"Se mi fai muovere all'indietro, stai
          particolarmente attento a farmi girare dalla parte giusta!"_
        courseC_maze_programming_challenge2_b: |-
          La soluzione più corta usa solo 5 blocchi, ma usa questo blocco:

          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_starWars_loops1:
        courseC_starWars_loops1_a: Quando BB-8 rotola su un rottame metallico lo recupera
          automaticamente.
        courseC_starWars_loops1_b: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
        courseC_starWars_loops1_c: Devi andare avanti cinque volte per risolvere questo
          esercizio.
      courseC_starWars_loops10:
        courseC_starWars_loops10_a: Questo schema non ricorda dei gradini giganti?
          Vedi se riesci a sfruttare ciò che hai imparato nei precedenti esercizi
          per fare le curve giuste.
        courseC_starWars_loops10_b: |-
          Se vuoi usare meno blocchi, puoi mettere un ciclo `ripeti ... volte` all'interno di un altro!\
          Si chiama **ciclo annidato**.
        courseC_starWars_loops10_c: Non aver paura di sbagliare! Esegui il codice
          per vedere cosa succede, anche se non hai ancora risolto l'esercizio.
      courseC_starWars_loops10_2018:
        courseC_starWars_loops10_a: Questo schema non ricorda dei gradini giganti?
          Vedi se riesci a sfruttare ciò che hai imparato nei precedenti esercizi
          per fare le curve giuste.
        courseC_starWars_loops10_b: |-
          Se vuoi usare meno blocchi, puoi mettere un ciclo `ripeti ... volte` all'interno di un altro!\
          Si chiama **ciclo annidato**.
        courseC_starWars_loops10_c: Non aver paura di sbagliare! Esegui il codice
          per vedere cosa succede, anche se non hai ancora risolto l'esercizio.
      courseC_starWars_loops10_2019:
        courseC_starWars_loops10_a: Questo schema non ricorda dei gradini giganti?
          Vedi se riesci a sfruttare ciò che hai imparato nei precedenti esercizi
          per fare le curve giuste.
        courseC_starWars_loops10_b: |-
          Se vuoi usare meno blocchi, puoi mettere un ciclo `ripeti ... volte` all'interno di un altro!\
          Si chiama **ciclo annidato**.
        courseC_starWars_loops10_c: Non aver paura di sbagliare! Esegui il codice
          per vedere cosa succede, anche se non hai ancora risolto l'esercizio.
      courseC_starWars_loops1_2018:
        courseC_starWars_loops1_a: Quando BB-8 rotola su un rottame metallico lo recupera
          automaticamente.
        courseC_starWars_loops1_b: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
        courseC_starWars_loops1_c: Devi andare avanti cinque volte per risolvere questo
          esercizio.
      courseC_starWars_loops1_2019:
        courseC_starWars_loops1_a: Quando BB-8 rotola su un rottame metallico lo recupera
          automaticamente.
        courseC_starWars_loops1_b: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
        courseC_starWars_loops1_c: Devi andare avanti cinque volte per risolvere questo
          esercizio.
      courseC_starWars_loops2:
        courseC_starWars_loops2_a: Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco `ripeti ... volte` e inserisci al suo interno
          i blocchi che vuoi ripetere.
      courseC_starWars_loops2_2018:
        courseC_starWars_loops2_a: Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco `ripeti ... volte` e inserisci al suo interno
          i blocchi che vuoi ripetere.
      courseC_starWars_loops2_2019:
        courseC_starWars_loops2_a: Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco `ripeti ... volte` e inserisci al suo interno
          i blocchi che vuoi ripetere.
      courseC_starWars_loops4:
        courseC_starWars_loops4_c: Usa il menù a discesa (▼) del blocco `gira a ...`
          per sostituire "sinistra" con "destra".
        courseC_starWars_loops4_a: Usa due blocchi `ripeti ... volte`.
        courseC_starWars_loops4_b: 'Ogni ciclo `ripeti ... volte` avrà una sola istruzione
          al suo interno: `vai avanti`.'
      courseC_starWars_loops4_2018:
        courseC_starWars_loops4_c: Usa il menù a discesa (▼) del blocco `gira a ...`
          per sostituire "sinistra" con "destra".
        courseC_starWars_loops4_a: Usa due blocchi `ripeti ... volte`.
        courseC_starWars_loops4_b: 'Ogni ciclo `ripeti ... volte` avrà una sola istruzione
          al suo interno: `vai avanti`.'
      courseC_starWars_loops4_2019:
        courseC_starWars_loops4_c: Usa il menù a discesa (▼) del blocco `gira a ...`
          per sostituire "sinistra" con "destra".
        courseC_starWars_loops4_a: Usa due blocchi `ripeti ... volte`.
        courseC_starWars_loops4_b: 'Ogni ciclo `ripeti ... volte` avrà una sola istruzione
          al suo interno: `vai avanti`.'
      courseC_starWars_loops5:
        courseC_starWars_loops5_b: Per far muovere BB-8 verso il basso, devi farlo
          girare e poi farlo andare avanti.
        courseC_starWars_loops5_a: La soluzione migliore usa un blocco `vai avanti`,
          una curva e infine un ciclo.
      courseC_starWars_loops5_2018:
        courseC_starWars_loops5_a: La soluzione migliore usa un blocco `vai avanti`,
          una curva e infine un ciclo.
      courseC_starWars_loops5_2019:
        courseC_starWars_loops5_a: La soluzione migliore usa un blocco `vai avanti`,
          una curva e infine un ciclo.
      courseC_starWars_loops6:
        courseC_starWars_loops6_a: Prova a scrivere tutte le mosse su un pezzo di
          carta e cerca una sequenza che si ripete.
        courseC_starWars_loops6_b: |-
          Se vuoi usare meno blocchi, puoi mettere un ciclo `ripeti ... volte` all'interno di un altro!\
          Si chiama **ciclo annidato**.
      courseC_starWars_loops6_2018:
        courseC_starWars_loops6_a: Prova a scrivere tutte le mosse su un pezzo di
          carta e cerca una sequenza che si ripete.
        courseC_starWars_loops6_b: |-
          Se vuoi usare meno blocchi, puoi mettere un ciclo `ripeti ... volte` all'interno di un altro!\
          Si chiama **ciclo annidato**.
      courseC_starWars_loops6_2019:
        courseC_starWars_loops6_a: Prova a scrivere tutte le mosse su un pezzo di
          carta e cerca una sequenza che si ripete.
        courseC_starWars_loops6_b: |-
          Se vuoi usare meno blocchi, puoi mettere un ciclo `ripeti ... volte` all'interno di un altro!\
          Si chiama **ciclo annidato**.
      courseC_starWars_loops7:
        courseC_starWars_loops7_a: Questo schema sembra più difficile di quello che
          è! Inizia con un semplice gradino. Permette di recuperare tutti i rottami
          metallici?
        courseC_starWars_loops7_b: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere tutte le mosse su un foglio di carta e cerca di trovare
          uno schema che si ripete.
        courseC_starWars_loops7_c: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
      courseC_starWars_loops7_2018:
        courseC_starWars_loops7_a: Questo schema sembra più difficile di quello che
          è! Inizia con un semplice gradino. Permette di recuperare tutti i rottami
          metallici?
        courseC_starWars_loops7_b: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere tutte le mosse su un foglio di carta e cerca di trovare
          uno schema che si ripete.
        courseC_starWars_loops7_c: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
      courseC_starWars_loops7_2019:
        courseC_starWars_loops7_a: Questo schema sembra più difficile di quello che
          è! Inizia con un semplice gradino. Permette di recuperare tutti i rottami
          metallici?
        courseC_starWars_loops7_b: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere tutte le mosse su un foglio di carta e cerca di trovare
          uno schema che si ripete.
        courseC_starWars_loops7_c: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
      courseC_starWars_loops8:
        course_starWars_loops8_a: Prova a suddividere questo problema in piccole parti.
          Prenditi tutto il tempo che serve. Non è necessario risolvere l'esercizio
          al primo tentativo!
        course_starWars_loops8_b: Pensa alla prima parte di questo esercizio come
          ad una scalinata. Come puoi risolverla?
        course_starWars_loops8_c: |-
          Dai un'occhiata a questo percorso:

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2018:
        course_starWars_loops8_a: Prova a suddividere questo problema in piccole parti.
          Prenditi tutto il tempo che serve. Non è necessario risolvere l'esercizio
          al primo tentativo!
        course_starWars_loops8_b: Pensa alla prima parte di questo esercizio come
          ad una scalinata. Come puoi risolverla?
        course_starWars_loops8_c: |-
          Dai un'occhiata a questo percorso:

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2019:
        course_starWars_loops8_a: Prova a suddividere questo problema in piccole parti.
          Prenditi tutto il tempo che serve. Non è necessario risolvere l'esercizio
          al primo tentativo!
        course_starWars_loops8_b: Pensa alla prima parte di questo esercizio come
          ad una scalinata. Come puoi risolverla?
        course_starWars_loops8_c: |-
          Dai un'occhiata a questo percorso:

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops9:
        course_starWars_loops9_b: Puoi mettere più di un blocco all'interno del ciclo
          `ripeti ... volte`.
        course_starWars_loops9_c: |-
          Non dovrai mai girare a sinistra per risolvere questo esercizio. Tutte le curve saranno a destra.

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2018:
        course_starWars_loops9_b: Puoi mettere più di un blocco all'interno del ciclo
          `ripeti ... volte`.
        course_starWars_loops9_c: |-
          Non dovrai mai girare a sinistra per risolvere questo esercizio. Tutte le curve saranno a destra.

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2019:
        course_starWars_loops9_b: Puoi mettere più di un blocco all'interno del ciclo
          `ripeti ... volte`.
        course_starWars_loops9_c: |-
          Non dovrai mai girare a sinistra per risolvere questo esercizio. Tutte le curve saranno a destra.

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseD_artist_1_2018:
        courseD_artist_project1_a: Usa il menù a discesa (▼) del blocco `gira a ...`
          per scegliere l'angolo che ti serve!
        courseD_artist_project1_b: Ricordati che il blocco `vai avanti` disegna una
          linea, mentre quello `salta in avanti` fa muovere senza lasciare traccia.
      courseD_artist_1_2018_2019:
        courseD_artist_project1_a: Usa il menù a discesa (▼) del blocco `gira a ...`
          per scegliere l'angolo che ti serve!
        courseD_artist_project1_b: Ricordati che il blocco `vai avanti` disegna una
          linea, mentre quello `salta in avanti` fa muovere senza lasciare traccia.
      courseD_artist_2_2018:
        courseD_artist_project1_b: Ricordati che i blocchi di tipo `vai ...` disegnano
          una linea, mentre quelli di tipo `salta ...` fanno muovere senza lasciare
          traccia.
        courseD_artist_project1_a: Usa il menù a discesa (▼) del blocco `gira a ...`
          per scegliere l'angolo che ti serve!
      courseD_artist_2_2018_2019:
        courseD_artist_project1_b: Ricordati che i blocchi di tipo `vai ...` disegnano
          una linea, mentre quelli di tipo `salta ...` fanno muovere senza lasciare
          traccia.
        courseD_artist_project1_a: Usa il menù a discesa (▼) del blocco `gira a ...`
          per scegliere l'angolo che ti serve!
      courseD_artist_5_2018:
        '1': Se stai cambiando le forme, non dimenticare che dovrai cambiare anche
          i relativi angoli!
      courseD_artist_5_2018_2019:
        '1': Se stai cambiando le forme, non dimenticare che dovrai cambiare anche
          i relativi angoli!
      courseD_artist_binary1:
        courseD_artist_binary1_a: 'Sostituisci i punti interrogativi "???" nel blocco
          di testo con la codifica binaria dell''immagine da realizzare: uni e zeri.'
        courseD_artist_binary1_b: L'artista disegnerà uno spazio bianco per ogni 1
          e uno spazio nero per ogni 0.
        courseD_artist_binary1_c: |-
          Ecco come puoi inserire la codifica binaria:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2018:
        courseD_artist_binary1_a: 'Sostituisci i punti interrogativi "???" nel blocco
          di testo con la codifica binaria dell''immagine da realizzare: uni e zeri.'
        courseD_artist_binary1_b: L'artista disegnerà uno spazio bianco per ogni 1
          e uno spazio nero per ogni 0.
        courseD_artist_binary1_c: |-
          Ecco come puoi inserire la codifica binaria:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2019:
        courseD_artist_binary1_a: 'Sostituisci i punti interrogativi "???" nel blocco
          di testo con la codifica binaria dell''immagine da realizzare: uni e zeri.'
        courseD_artist_binary1_b: L'artista disegnerà uno spazio bianco per ogni 1
          e uno spazio nero per ogni 0.
        courseD_artist_binary1_c: |-
          Ecco come puoi inserire la codifica binaria:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary2:
        courseD_artist_binary2_a: È già tutto pronto, devi solo cliccare su "Esegui"
          per vedere questo programma in azione!
      courseD_artist_binary2_2018:
        courseD_artist_binary2_a: È già tutto pronto, devi solo cliccare su "Esegui"
          per vedere questo programma in azione!
      courseD_artist_binary2_2019:
        courseD_artist_binary2_a: È già tutto pronto, devi solo cliccare su "Esegui"
          per vedere questo programma in azione!
      courseD_artist_binary3:
        courseD_artist_binary3_a: Una delle quattro sequenze binarie che vedi nella
          cassetta degli attrezzi risolve questo esercizio!
        courseD_artist_binary3_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary3_2018:
        courseD_artist_binary3_a: Una delle quattro sequenze binarie che vedi nella
          cassetta degli attrezzi risolve questo esercizio!
        courseD_artist_binary3_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary3_2019:
        courseD_artist_binary3_a: Una delle quattro sequenze binarie che vedi nella
          cassetta degli attrezzi risolve questo esercizio!
        courseD_artist_binary3_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary4:
        courseD_artist_binary4_a: Guarda i primi tre quadrati in alto a sinistra.
          Potrebbe bastare la ripetizione di questi tre per completare tutta la figura?
        courseD_artist_binary4_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary4_2018:
        courseD_artist_binary4_a: Guarda i primi tre quadrati in alto a sinistra.
          Potrebbe bastare la ripetizione di questi tre per completare tutta la figura?
        courseD_artist_binary4_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary4_2019:
        courseD_artist_binary4_a: Guarda i primi tre quadrati in alto a sinistra.
          Potrebbe bastare la ripetizione di questi tre per completare tutta la figura?
        courseD_artist_binary4_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary5:
        courseD_artist_binary5_a: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary5_b: Per trasformare l'immagine in un sorriso, devi solo
          invertire due righe.
        courseD_artist_binary5_c: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere le sequenze binarie su un foglio di carta a quadretti e
          cerca di capire lo schema.
      courseD_artist_binary5_2018:
        courseD_artist_binary5_a: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary5_b: Per trasformare l'immagine in un sorriso, devi solo
          invertire due righe.
        courseD_artist_binary5_c: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere le sequenze binarie su un foglio di carta a quadretti e
          cerca di capire lo schema.
      courseD_artist_binary5_2019:
        courseD_artist_binary5_a: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary5_b: Per trasformare l'immagine in un sorriso, devi solo
          invertire due righe.
        courseD_artist_binary5_c: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere le sequenze binarie su un foglio di carta a quadretti e
          cerca di capire lo schema.
      courseD_artist_binary6:
        courseD_artist_binary6_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary6_b: Puoi anche costruire la sequenza binaria una cifra
          alla volta e verificarne di volta in volta l'effetto!
      courseD_artist_binary6_2018:
        courseD_artist_binary6_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary6_b: Puoi anche costruire la sequenza binaria una cifra
          alla volta e verificarne di volta in volta l'effetto!
      courseD_artist_binary6_2019:
        courseD_artist_binary6_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary6_b: Puoi anche costruire la sequenza binaria una cifra
          alla volta e verificarne di volta in volta l'effetto!
      courseD_artist_binary7:
        courseD_artist_binary7_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary7_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary7_2018:
        courseD_artist_binary7_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary7_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary7_2019:
        courseD_artist_binary7_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary7_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary8:
        courseD_artist_binary8_a: A volte la spirale può confondere. Per creare questo
          disegno ragiona di volta in volta su una sola riga orizzontale.
        courseD_artist_binary8_b: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary8_c: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary8_2018:
        courseD_artist_binary8_a: A volte la spirale può confondere. Per creare questo
          disegno ragiona di volta in volta su una sola riga orizzontale.
        courseD_artist_binary8_b: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary8_c: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary8_2019:
        courseD_artist_binary8_a: A volte la spirale può confondere. Per creare questo
          disegno ragiona di volta in volta su una sola riga orizzontale.
        courseD_artist_binary8_b: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary8_c: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_artist_binary_challenge2_2018:
        courseD_artist_binary_challenge2_a: Ci sono solo poche righe sbagliate nel
          programma originale.
      courseD_artist_binary_challenge2_2019:
        courseD_artist_binary_challenge2_a: Ci sono solo poche righe sbagliate nel
          programma originale.
      courseD_artist_nestedLoops1:
        courseD_artist_nestedLoops1_a: Il modo più facile di disegnarlo, è usare il
          blocco `vai avanti` e il blocco `gira a destra`.
        courseD_artist_nestedLoops1_b: Puoi disegnare questo triangolo con un ciclo
          `ripeti ... volte` con due blocchi all'interno. Di quali blocchi hai bisogno?
        courseD_artist_nestedLoops1_c: Prova a scrivere i passaggi su un foglio di
          carta e cerca degli schemi che si ripetono e possano essere semplificati
          con dei cicli.
      courseD_artist_nestedLoops1_2018:
        courseD_artist_nestedLoops1_a: Il modo più facile di disegnarlo, è usare il
          blocco `vai avanti` e il blocco `gira a destra`.
        courseD_artist_nestedLoops1_b: Puoi disegnare questo triangolo con un ciclo
          `ripeti ... volte` con due blocchi all'interno. Di quali blocchi hai bisogno?
        courseD_artist_nestedLoops1_c: Prova a scrivere i passaggi su un foglio di
          carta e cerca degli schemi che si ripetono e possano essere semplificati
          con dei cicli.
      courseD_artist_nestedLoops1_2019:
        courseD_artist_nestedLoops1_a: Il modo più facile di disegnarlo, è usare il
          blocco `vai avanti` e il blocco `gira a destra`.
        courseD_artist_nestedLoops1_b: Puoi disegnare questo triangolo con un ciclo
          `ripeti ... volte` con due blocchi all'interno. Di quali blocchi hai bisogno?
        courseD_artist_nestedLoops1_c: Prova a scrivere i passaggi su un foglio di
          carta e cerca degli schemi che si ripetono e possano essere semplificati
          con dei cicli.
      courseD_artist_nestedLoops1a:
        courseD_artist_nestedLoops1a_a: "Dovrai disegnare 6 triangoli in tutto. Dopo
          aver terminato ciascun triangolo, ruota di 60 gradi e procedi con il triangolo
          successivo. \n\n![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)"
        courseD_artist_nestedLoops1a_b: Se crei un triangolo con un ciclo, alla fine
          l'artista dovrebbe essere rivolto nella stessa direzione di quando è partito.
          Questo renderà tutto più semplice.
        courseD_artist_nestedLoops1a_c: Se vuoi aggiungere un po' di colore, puoi
          inserire nel programma il blocco `imposta il colore`. Ma sappi che non devi
          per forza usare gli stessi colori dell'immagine di esempio.
      courseD_artist_nestedLoops1a_2018:
        courseD_artist_nestedLoops1a_a: "Dovrai disegnare 6 triangoli in tutto. Dopo
          aver terminato ciascun triangolo, ruota di 60 gradi e procedi con il triangolo
          successivo. \n\n![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)"
        courseD_artist_nestedLoops1a_b: Se crei un triangolo con un ciclo, alla fine
          l'artista dovrebbe essere rivolto nella stessa direzione di quando è partito.
          Questo renderà tutto più semplice.
        courseD_artist_nestedLoops1a_c: Se vuoi aggiungere un po' di colore, puoi
          inserire nel programma il blocco `imposta il colore`. Ma sappi che non devi
          per forza usare gli stessi colori dell'immagine di esempio.
      courseD_artist_nestedLoops1a_2019:
        courseD_artist_nestedLoops1a_a: "Dovrai disegnare 6 triangoli in tutto. Dopo
          aver terminato ciascun triangolo, ruota di 60 gradi e procedi con il triangolo
          successivo. \n\n![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)"
        courseD_artist_nestedLoops1a_b: Se crei un triangolo con un ciclo, alla fine
          l'artista dovrebbe essere rivolto nella stessa direzione di quando è partito.
          Questo renderà tutto più semplice.
        courseD_artist_nestedLoops1a_c: Se vuoi aggiungere un po' di colore, puoi
          inserire nel programma il blocco `imposta il colore`. Ma sappi che non devi
          per forza usare gli stessi colori dell'immagine di esempio.
      courseD_artist_nestedLoops2:
        courseD_artist_nestedLoops2_a: 'Servono due cicli annidati: il ciclo che realizza
          il triangolo deve essere a sua volta racchiuso in un altro ciclo `ripeti
          ... volte`.'
        courseD_artist_nestedLoops2_b: Ricordati di inserire il blocco `gira` dentro
          al ciclo, per fare in modo che l'artista giri dopo ogni triangolo.
      courseD_artist_nestedLoops2_2018:
        courseD_artist_nestedLoops2_a: 'Servono due cicli annidati: il ciclo che realizza
          il triangolo deve essere a sua volta racchiuso in un altro ciclo `ripeti
          ... volte`.'
        courseD_artist_nestedLoops2_b: Ricordati di inserire il blocco `gira` dentro
          al ciclo, per fare in modo che l'artista giri dopo ogni triangolo.
      courseD_artist_nestedLoops2_2019:
        courseD_artist_nestedLoops2_a: 'Servono due cicli annidati: il ciclo che realizza
          il triangolo deve essere a sua volta racchiuso in un altro ciclo `ripeti
          ... volte`.'
        courseD_artist_nestedLoops2_b: Ricordati di inserire il blocco `gira` dentro
          al ciclo, per fare in modo che l'artista giri dopo ogni triangolo.
      courseD_artist_nestedLoops3:
        courseD_artist_nestedLoops3_a: Prova ad usare il blocco `salta in avanti`
          per passare dalla cima di un quadrato alla posizione in cui devi iniziare
          il successivo.
        courseD_artist_nestedLoops3_b: 'Non dimenticare di usare un ciclo annidato
          per risolvere l''esercizio velocemente. '
        courseD_artist_nestedLoops3_c: Inizia usando un ciclo `ripeti ... volte` per
          fare un quadrato. Dopo di che, ripeti 8 volte questo quadrato, saltando
          di 40 pixel tra uno e l'altro.
      courseD_artist_nestedLoops3_2018:
        courseD_artist_nestedLoops3_a: Prova ad usare il blocco `salta in avanti`
          per passare dalla cima di un quadrato alla posizione in cui devi iniziare
          il successivo.
        courseD_artist_nestedLoops3_b: 'Non dimenticare di usare un ciclo annidato
          per risolvere l''esercizio velocemente. '
        courseD_artist_nestedLoops3_c: Inizia usando un ciclo `ripeti ... volte` per
          fare un quadrato. Dopo di che, ripeti 8 volte questo quadrato, saltando
          di 40 pixel tra uno e l'altro.
      courseD_artist_nestedLoops3_2019:
        courseD_artist_nestedLoops3_a: Prova ad usare il blocco `salta in avanti`
          per passare dalla cima di un quadrato alla posizione in cui devi iniziare
          il successivo.
        courseD_artist_nestedLoops3_b: 'Non dimenticare di usare un ciclo annidato
          per risolvere l''esercizio velocemente. '
        courseD_artist_nestedLoops3_c: Inizia usando un ciclo `ripeti ... volte` per
          fare un quadrato. Dopo di che, ripeti 8 volte questo quadrato, saltando
          di 40 pixel tra uno e l'altro.
      courseD_artist_nestedLoops4:
        courseD_artist_nestedLoops4_d: 'Attenzione: l''artista deve muoversi **prima**
          di girare, altrimenti i cerchi saranno leggermente sfasati e l''esercizio
          non sarà ritenuto corretto!'
        courseD_artist_nestedLoops4_a: |-
          Per fare un cerchio:

          -   ripeti 360 volte
              -   vai avanti di 1 pixel
              -   gira a sinistra di 1 grado
        courseD_artist_nestedLoops4_b: Non dimenticarti di saltare in avanti di 50
          pixel tra un cerchio e l'altro.
        courseD_artist_nestedLoops4_c: Usa un ciclo annidato per disegnare i cerchi
          4 volte.
      courseD_artist_nestedLoops4_2018:
        courseD_artist_nestedLoops4_d: 'Attenzione: l''artista deve muoversi **prima**
          di girare, altrimenti i cerchi saranno leggermente sfasati e l''esercizio
          non sarà ritenuto corretto!'
        courseD_artist_nestedLoops4_a: |-
          Per fare un cerchio:

          -   ripeti 360 volte
              -   vai avanti di 1 pixel
              -   gira a sinistra di 1 grado
        courseD_artist_nestedLoops4_b: Non dimenticarti di saltare in avanti di 50
          pixel tra un cerchio e l'altro.
        courseD_artist_nestedLoops4_c: Usa un ciclo annidato per disegnare i cerchi
          4 volte.
      courseD_artist_nestedLoops4_2019:
        courseD_artist_nestedLoops4_d: 'Attenzione: l''artista deve muoversi **prima**
          di girare, altrimenti i cerchi saranno leggermente sfasati e l''esercizio
          non sarà ritenuto corretto!'
        courseD_artist_nestedLoops4_a: |-
          Per fare un cerchio:

          -   ripeti 360 volte
              -   vai avanti di 1 pixel
              -   gira a sinistra di 1 grado
        courseD_artist_nestedLoops4_b: Non dimenticarti di saltare in avanti di 50
          pixel tra un cerchio e l'altro.
        courseD_artist_nestedLoops4_c: Usa un ciclo annidato per disegnare i cerchi
          4 volte.
      courseD_artist_nestedLoops5:
        courseD_artist_nestedLoops5_a: |-
          Per farlo in modo semplice:

          -   ripeti 4 volte
              -   fai un cerchio
              -   salta in avanti di 50 pixel
              -   gira a destra di 90 gradi
        courseD_artist_nestedLoops5_b: Per fare un cerchio, devi impostare un ciclo
          `ripeti 360 volte`, all'interno del quale l'artista va avanti di 1 pixel
          e gira di 1 grado.
      courseD_artist_nestedLoops5_2018:
        courseD_artist_nestedLoops5_a: |-
          Per farlo in modo semplice:

          -   ripeti 4 volte
              -   fai un cerchio
              -   salta in avanti di 50 pixel
              -   gira a destra di 90 gradi
        courseD_artist_nestedLoops5_b: Per fare un cerchio, devi impostare un ciclo
          `ripeti 360 volte`, all'interno del quale l'artista va avanti di 1 pixel
          e gira di 1 grado.
      courseD_artist_nestedLoops5_2019:
        courseD_artist_nestedLoops5_a: |-
          Per farlo in modo semplice:

          -   ripeti 4 volte
              -   fai un cerchio
              -   salta in avanti di 50 pixel
              -   gira a destra di 90 gradi
        courseD_artist_nestedLoops5_b: Per fare un cerchio, devi impostare un ciclo
          `ripeti 360 volte`, all'interno del quale l'artista va avanti di 1 pixel
          e gira di 1 grado.
      courseD_artist_nestedLoops7:
        courseD_artist_nestedLoops7_a: Qui dovrai usare dei cicli annidati. Innanzitutto,
          serve un ciclo per disegnare un quadrato. Cosa dovrà fare il ciclo esterno
          se quello interno disegna un quadrato?
        courseD_artist_nestedLoops7_b: |-
          Usa un ciclo annidato, nel quale il ciclo interno realizza un quadrato.

          -   Ripeti 6 volte
              -   fai un quadrato
              -   salta in avanti di **50 pixel**
              -   gira di **60 gradi**
      courseD_artist_nestedLoops7_2018:
        courseD_artist_nestedLoops7_a: Qui dovrai usare dei cicli annidati. Innanzitutto,
          serve un ciclo per disegnare un quadrato. Cosa dovrà fare il ciclo esterno
          se quello interno disegna un quadrato?
        courseD_artist_nestedLoops7_b: |-
          Usa un ciclo annidato, nel quale il ciclo interno realizza un quadrato.

          -   Ripeti 6 volte
              -   fai un quadrato
              -   salta in avanti di **50 pixel**
              -   gira di **60 gradi**
      courseD_artist_nestedLoops7_2019:
        courseD_artist_nestedLoops7_a: Qui dovrai usare dei cicli annidati. Innanzitutto,
          serve un ciclo per disegnare un quadrato. Cosa dovrà fare il ciclo esterno
          se quello interno disegna un quadrato?
        courseD_artist_nestedLoops7_b: |-
          Usa un ciclo annidato, nel quale il ciclo interno realizza un quadrato.

          -   Ripeti 6 volte
              -   fai un quadrato
              -   salta in avanti di **50 pixel**
              -   gira di **60 gradi**
      courseD_artist_nestedLoops8:
        courseD_artist_nestedLoops8_a: Per ottenere otto esagoni nel tuo disegno,
          dovrai girare di **45 gradi** tra uno e l'altro. Perché? Perché per fare
          un giro completo servono 360 gradi e se devi distribuire 8 esagoni in un
          giro completo, devi dividere i 360 gradi in 8 parti, quindi 360:8=45.
        courseD_artist_nestedLoops8_b: Se sei bloccato, prendi spunto dall'ultimo
          esercizio e cerca di capire cosa c'è di diverso.
        courseD_artist_nestedLoops8_c: |-
          Usa un ciclo annidato:

          -   ripeti 8 volte
              -   disegna un esagono
              -   salta in avanti di 50 pixel
              -   gira a destra di 45 gradi
      courseD_artist_nestedLoops8_2018:
        courseD_artist_nestedLoops8_a: Per ottenere otto esagoni nel tuo disegno,
          dovrai girare di **45 gradi** tra uno e l'altro. Perché? Perché per fare
          un giro completo servono 360 gradi e se devi distribuire 8 esagoni in un
          giro completo, devi dividere i 360 gradi in 8 parti, quindi 360:8=45.
        courseD_artist_nestedLoops8_b: Se sei bloccato, prendi spunto dall'ultimo
          esercizio e cerca di capire cosa c'è di diverso.
        courseD_artist_nestedLoops8_c: |-
          Usa un ciclo annidato:

          -   ripeti 8 volte
              -   disegna un esagono
              -   salta in avanti di 50 pixel
              -   gira a destra di 45 gradi
      courseD_artist_nestedLoops8_2019:
        courseD_artist_nestedLoops8_a: Per ottenere otto esagoni nel tuo disegno,
          dovrai girare di **45 gradi** tra uno e l'altro. Perché? Perché per fare
          un giro completo servono 360 gradi e se devi distribuire 8 esagoni in un
          giro completo, devi dividere i 360 gradi in 8 parti, quindi 360:8=45.
        courseD_artist_nestedLoops8_b: Se sei bloccato, prendi spunto dall'ultimo
          esercizio e cerca di capire cosa c'è di diverso.
        courseD_artist_nestedLoops8_c: |-
          Usa un ciclo annidato:

          -   ripeti 8 volte
              -   disegna un esagono
              -   salta in avanti di 50 pixel
              -   gira a destra di 45 gradi
      courseD_artist_nestedLoops9:
        courseD_artist_nestedLoops9_a: Inizia utilizzando un ciclo annidato come quello
          usato in precedenza, ma questa volta fai disegnare dei quadrati.
        courseD_artist_nestedLoops9_b: Aggiungi un secondo gruppo di cicli annidati
          dopo il primo gruppo, ma questa volta disegna dei triangoli.
        courseD_artist_nestedLoops9_c: |-
          Utilizza due cicli annidati:

          -   ripeti 8 volte
              -   disegna un quadrato
              -   salta in avanti di 50 pixel
              -   gira a destra di 45 gradi
          -   ripeti 8 volte
              -   disegna un triangolo
              -   salta in avanti di 50 pixel
              -   gira a destra di 45 gradi
      courseD_artist_nestedLoops9_2018:
        courseD_artist_nestedLoops9_a: Inizia utilizzando un ciclo annidato come quello
          usato in precedenza, ma questa volta fai disegnare dei quadrati.
        courseD_artist_nestedLoops9_b: Aggiungi un secondo gruppo di cicli annidati
          dopo il primo gruppo, ma questa volta disegna dei triangoli.
        courseD_artist_nestedLoops9_c: |-
          Utilizza due cicli annidati:

          -   ripeti 8 volte
              -   disegna un quadrato
              -   salta in avanti di 50 pixel
              -   gira a destra di 45 gradi
          -   ripeti 8 volte
              -   disegna un triangolo
              -   salta in avanti di 50 pixel
              -   gira a destra di 45 gradi
      courseD_artist_nestedLoops9_2019:
        courseD_artist_nestedLoops9_a: Inizia utilizzando un ciclo annidato come quello
          usato in precedenza, ma questa volta fai disegnare dei quadrati.
        courseD_artist_nestedLoops9_b: Aggiungi un secondo gruppo di cicli annidati
          dopo il primo gruppo, ma questa volta disegna dei triangoli.
        courseD_artist_nestedLoops9_c: |-
          Utilizza due cicli annidati:

          -   ripeti 8 volte
              -   disegna un quadrato
              -   salta in avanti di 50 pixel
              -   gira a destra di 45 gradi
          -   ripeti 8 volte
              -   disegna un triangolo
              -   salta in avanti di 50 pixel
              -   gira a destra di 45 gradi
      courseD_artist_nestedLoopsFP:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          Questa immagine è stata realizzata con un ciclo annidato che ripete un esagono (con lati di 50 pixel) 15 volte usando un angolo di 48 gradi.
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          Questa immagine è stata realizzata usando un programma simile a quello di un precedente esercizio (ripeti 360 volte: vai avanti 1, gira di un 1 grado).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          Questa immagine è stata realizzata con un ciclo annidato che ripete un pentagono (con lati di 50 pixel) per 15 volte, usando un angolo di 48 gradi.
      courseD_artist_nestedLoopsFP_2018:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          Questa immagine è stata realizzata con un ciclo annidato che ripete un esagono (con lati di 50 pixel) 15 volte usando un angolo di 48 gradi.
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          Questa immagine è stata realizzata usando un programma simile a quello di un precedente esercizio (ripeti 360 volte: vai avanti 1, gira di un 1 grado).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          Questa immagine è stata realizzata con un ciclo annidato che ripete un pentagono (con lati di 50 pixel) per 15 volte, usando un angolo di 48 gradi.
      courseD_artist_nestedLoopsFP_2019:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          Questa immagine è stata realizzata con un ciclo annidato che ripete un esagono (con lati di 50 pixel) 15 volte usando un angolo di 48 gradi.
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          Questa immagine è stata realizzata usando un programma simile a quello di un precedente esercizio (ripeti 360 volte: vai avanti 1, gira di un 1 grado).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          Questa immagine è stata realizzata con un ciclo annidato che ripete un pentagono (con lati di 50 pixel) per 15 volte, usando un angolo di 48 gradi.
      courseD_artist_nestedLoops_challenge1:
        courseD_artist_nestedLoops_challenge1_a: Inizia impostando il colore blu,
          poi crea un ottagono con lati di 50 pixel e curve di 45 gradi a sinistra.
        courseD_artist_nestedLoops_challenge1_b: Aggiungi le istruzioni per cambiare
          il colore in verde e disegnare un triangolo con lati di 50 pixel e curve
          di 120 gradi a sinistra.
        courseD_artist_nestedLoops_challenge1_c: Dopo aver disegnato entrambe le forme,
          dovrai saltare avanti di 50 pixel prima di girare a destra di 90 gradi.
        courseD_artist_nestedLoops_challenge1_d: Per concludere, metti tutte le istruzioni
          all'interno di un ciclo `ripeti 4 volte`.
      courseD_artist_nestedLoops_challenge1_2018:
        courseD_artist_nestedLoops_challenge1_a: Inizia impostando il colore blu,
          poi crea un ottagono con lati di 50 pixel e curve di 45 gradi a sinistra.
        courseD_artist_nestedLoops_challenge1_b: Aggiungi le istruzioni per cambiare
          il colore in verde e disegnare un triangolo con lati di 50 pixel e curve
          di 120 gradi a sinistra.
        courseD_artist_nestedLoops_challenge1_c: Dopo aver disegnato entrambe le forme,
          dovrai saltare avanti di 50 pixel prima di girare a destra di 90 gradi.
        courseD_artist_nestedLoops_challenge1_d: Per concludere, metti tutte le istruzioni
          all'interno di un ciclo `ripeti 4 volte`.
      courseD_artist_nestedLoops_challenge1_2019:
        courseD_artist_nestedLoops_challenge1_a: Inizia impostando il colore blu,
          poi crea un ottagono con lati di 50 pixel e curve di 45 gradi a sinistra.
        courseD_artist_nestedLoops_challenge1_b: Aggiungi le istruzioni per cambiare
          il colore in verde e disegnare un triangolo con lati di 50 pixel e curve
          di 120 gradi a sinistra.
        courseD_artist_nestedLoops_challenge1_c: Dopo aver disegnato entrambe le forme,
          dovrai saltare avanti di 50 pixel prima di girare a destra di 90 gradi.
        courseD_artist_nestedLoops_challenge1_d: Per concludere, metti tutte le istruzioni
          all'interno di un ciclo `ripeti 4 volte`.
      courseD_artist_nestedLoops_challenge2:
        courseD_artist_nestedLoops_challenge2_a: Per disegnare un ottagono regolare,
          l'artista deve girare di 45 gradi per 8 volte.
        courseD_artist_nestedLoops_challenge2_b: Per disegnare un quadrato, l'artista
          deve girare di 90 gradi per 4 volte.
      courseD_artist_nestedLoops_challenge2_2018:
        courseD_artist_nestedLoops_challenge2_a: Per disegnare un ottagono regolare,
          l'artista deve girare di 45 gradi per 8 volte.
        courseD_artist_nestedLoops_challenge2_b: Per disegnare un quadrato, l'artista
          deve girare di 90 gradi per 4 volte.
      courseD_artist_nestedLoops_challenge2_2019:
        courseD_artist_nestedLoops_challenge2_a: Per disegnare un ottagono regolare,
          l'artista deve girare di 45 gradi per 8 volte.
        courseD_artist_nestedLoops_challenge2_b: Per disegnare un quadrato, l'artista
          deve girare di 90 gradi per 4 volte.
      courseD_artist_project1:
        courseD_artist_project1_a: Usa il menù a discesa (▼) del blocco `gira a ...`
          per scegliere l'angolo che ti serve!
        courseD_artist_project1_b: Ricordati che il blocco `vai avanti` disegna una
          linea, mentre quello `salta in avanti` fa muovere senza lasciare traccia.
      courseD_artist_project1_2018:
        courseD_artist_project1_a: Usa il menù a discesa (▼) del blocco `gira a ...`
          per scegliere l'angolo che ti serve!
        courseD_artist_project1_b: Ricordati che il blocco `vai avanti` disegna una
          linea, mentre quello `salta in avanti` fa muovere senza lasciare traccia.
      courseD_artist_project1_2019:
        courseD_artist_project1_a: Usa il menù a discesa (▼) del blocco `gira a ...`
          per scegliere l'angolo che ti serve!
        courseD_artist_project1_b: Ricordati che il blocco `vai avanti` disegna una
          linea, mentre quello `salta in avanti` fa muovere senza lasciare traccia.
      courseD_artist_project1a:
        courseD_artist_project1a_a: |-
          Questa scalinata usa un angolo di 76 gradi e contiene 4 ripetizioni.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: Questi schemi sono molto simili alle scalinate
          di alcuni esercizi precedenti, ma utilizzano un angolo diverso.
      courseD_artist_project1a_2018:
        courseD_artist_project1a_a: |-
          Questa scalinata usa un angolo di 76 gradi e contiene 4 ripetizioni.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: Questi schemi sono molto simili alle scalinate
          di alcuni esercizi precedenti, ma utilizzano un angolo diverso.
      courseD_artist_project1a_2019:
        courseD_artist_project1a_a: |-
          Questa scalinata usa un angolo di 76 gradi e contiene 4 ripetizioni.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: Questi schemi sono molto simili alle scalinate
          di alcuni esercizi precedenti, ma utilizzano un angolo diverso.
      courseD_artist_project2:
        courseD_artist_project2_a: Ricordati che il blocco `vai avanti` disegna una
          linea, mentre quello `salta in avanti` fa muovere senza lasciare traccia.
        courseD_artist_project2_b: Dopo aver disegnato ed essere andato avanti la
          prima volta, puoi ripetere il codice aggiungendo un ciclo all'esterno.
      courseD_artist_project2_2018:
        courseD_artist_project2_a: Ricordati che il blocco `vai avanti` disegna una
          linea, mentre quello `salta in avanti` fa muovere senza lasciare traccia.
        courseD_artist_project2_b: Dopo aver disegnato ed essere andato avanti la
          prima volta, puoi ripetere il codice aggiungendo un ciclo all'esterno.
      courseD_artist_project2_2019:
        courseD_artist_project2_a: Ricordati che il blocco `vai avanti` disegna una
          linea, mentre quello `salta in avanti` fa muovere senza lasciare traccia.
        courseD_artist_project2_b: Dopo aver disegnato ed essere andato avanti la
          prima volta, puoi ripetere il codice aggiungendo un ciclo all'esterno.
      courseD_artist_project2a:
        courseD_artist_project2a_a: |-
          Questa figura è stata creata annidando un ciclo di 4 scalini seguito da un blocco `gira a destra di 180 gradi` all'interno di un ciclo `ripeti 2 volte`.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project2a_2018:
        courseD_artist_project2a_a: |-
          Questa figura è stata creata annidando un ciclo di 4 scalini seguito da un blocco `gira a destra di 180 gradi` all'interno di un ciclo `ripeti 2 volte`.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project2a_2019:
        courseD_artist_project2a_a: |-
          Questa figura è stata creata annidando un ciclo di 4 scalini seguito da un blocco `gira a destra di 180 gradi` all'interno di un ciclo `ripeti 2 volte`.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project3:
        courseD_artist_project3_a: Usa il menù a discesa (▼) del blocco `gira a ...`
          per scegliere l'angolo che ti serve!
        courseD_artist_project3_b: "Prova i cicli annidati!\n\nUsa il codice che hai
          creato per disegnare una figura e inseriscilo all'interno di un altro ciclo.
          In fondo, prima che il ciclo esterno termini, aggiungi un blocco che faccia
          girare Elsa. \n\n-   Prova con 72 gradi, ripetendo il ciclo esterno 5 volte.\n-
          \  Prova con 60 gradi, ripetendo il ciclo esterno 6 volte."
      courseD_artist_project3_2018:
        courseD_artist_project3_a: Usa il menù a discesa (▼) del blocco `gira a ...`
          per scegliere l'angolo che ti serve!
        courseD_artist_project3_b: "Prova i cicli annidati!\n\nUsa il codice che hai
          creato per disegnare una figura e inseriscilo all'interno di un altro ciclo.
          In fondo, prima che il ciclo esterno termini, aggiungi un blocco che faccia
          girare Elsa. \n\n-   Prova con 72 gradi, ripetendo il ciclo esterno 5 volte.\n-
          \  Prova con 60 gradi, ripetendo il ciclo esterno 6 volte."
      courseD_artist_project3_2019:
        courseD_artist_project3_a: Usa il menù a discesa (▼) del blocco `gira a ...`
          per scegliere l'angolo che ti serve!
        courseD_artist_project3_b: "Prova i cicli annidati!\n\nUsa il codice che hai
          creato per disegnare una figura e inseriscilo all'interno di un altro ciclo.
          In fondo, prima che il ciclo esterno termini, aggiungi un blocco che faccia
          girare Elsa. \n\n-   Prova con 72 gradi, ripetendo il ciclo esterno 5 volte.\n-
          \  Prova con 60 gradi, ripetendo il ciclo esterno 6 volte."
      courseD_artist_project3a:
        courseD_artist_project3a_a: Puoi scegliere diversi modi di ruotare la tua
          forma! Cosa ne dici di 18 volte con angoli di 20 gradi tra una riga e l'altra?
      courseD_artist_project3a_2018:
        courseD_artist_project3a_a: Puoi scegliere diversi modi di ruotare la tua
          forma! Cosa ne dici di 18 volte con angoli di 20 gradi tra una riga e l'altra?
      courseD_artist_project3a_2019:
        courseD_artist_project3a_a: Puoi scegliere diversi modi di ruotare la tua
          forma! Cosa ne dici di 18 volte con angoli di 20 gradi tra una riga e l'altra?
      courseD_artist_project4:
        courseD_artist_project4_a: |-
          Ecco un fiocco di neve di pentagoni seguito da uno di triangoli dopo uno sfasamento di 36 gradi:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          Qui ce n'è uno di esagoni seguito da uno di quadrati:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: Per realizzare questa immagine, disegna il primo
          fiocco di neve, gira, quindi disegna il secondo fiocco.
      courseD_artist_project4_2018:
        courseD_artist_project4_a: |-
          Ecco un fiocco di neve di pentagoni seguito da uno di triangoli dopo uno sfasamento di 36 gradi:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          Qui ce n'è uno di esagoni seguito da uno di quadrati:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: Per realizzare questa immagine, disegna il primo
          fiocco di neve, gira, quindi disegna il secondo fiocco.
      courseD_artist_project4_2019:
        courseD_artist_project4_a: |-
          Ecco un fiocco di neve di pentagoni seguito da uno di triangoli dopo uno sfasamento di 36 gradi:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          Qui ce n'è uno di esagoni seguito da uno di quadrati:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: Per realizzare questa immagine, disegna il primo
          fiocco di neve, gira, quindi disegna il secondo fiocco.
      courseD_artist_project4a:
        courseD_artist_project4a_a: |-
          Ecco due fiocchi di neve di dimensioni diverse, disegnati uno dopo l'altro (con un angolo di 30 gradi tra uno e l'altro):

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2018:
        courseD_artist_project4a_a: |-
          Ecco due fiocchi di neve di dimensioni diverse, disegnati uno dopo l'altro (con un angolo di 30 gradi tra uno e l'altro):

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2019:
        courseD_artist_project4a_a: |-
          Ecco due fiocchi di neve di dimensioni diverse, disegnati uno dopo l'altro (con un angolo di 30 gradi tra uno e l'altro):

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project5:
        courseD_artist_project4_a: |-
          Righe di 2 esagoni e 4 triangoli:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2018:
        courseD_artist_project4_a: |-
          Righe di 2 esagoni e 4 triangoli:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2019:
        courseD_artist_project4_a: |-
          Righe di 2 esagoni e 4 triangoli:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_ramp11:
        courseD_artist_ramp11a: Per disegnare un lato, usa il blocco `vai avanti di
          100 pixel` e cambia il 100 in 200.
        courseD_artist_ramp11b: |-
          Per disegnare 4 lati, inserisci un blocco `vai avanti di 200 pixel` all'interno di un ciclo di ripetizione e assicurarsi che il ciclo sia impostato per ripetersi 4 volte.

          Non dimenticarti di girare!
        courseD_artist_ramp11_c: Ricorda di inserire il blocco `gira a ...` all'interno
          del ciclo `ripeti ... volte`!
      courseD_artist_ramp12:
        courseD_artist_ramp12_a: Puoi disegnare prima il quadrato e poi il triangolo,
          oppure farlo al contrario!
        courseD_artist_ramp12_b: Prova a suddividere il problema in 2 parti e usare
          2 cicli.
        courseD_artist_ramp12_c: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
      courseD_autorun_binary2_2019:
        courseD_artist_binary2_a: È già tutto pronto, devi solo cliccare su "Esegui"
          per vedere questo programma in azione!
      courseD_autorun_binary3_2019:
        courseD_artist_binary3_a: Una delle quattro sequenze binarie che vedi nella
          cassetta degli attrezzi risolve questo esercizio!
        courseD_artist_binary3_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_autorun_binary4_2019:
        courseD_artist_binary4_a: Guarda i primi tre quadrati in alto a sinistra.
          Potrebbe bastare la ripetizione di questi tre per completare tutta la figura?
        courseD_artist_binary4_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_autorun_binary5_2019:
        courseD_artist_binary5_a: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary5_b: Per trasformare l'immagine in un sorriso, devi solo
          invertire due righe.
        courseD_artist_binary5_c: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere le sequenze binarie su un foglio di carta a quadretti e
          cerca di capire lo schema.
      courseD_autorun_binary6_2019:
        courseD_artist_binary6_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary6_b: Puoi anche costruire la sequenza binaria una cifra
          alla volta e verificarne di volta in volta l'effetto!
      courseD_autorun_binary7_2019:
        courseD_artist_binary7_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary7_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_autorun_binary8_2019:
        courseD_artist_binary8_a: A volte la spirale può confondere. Per creare questo
          disegno ragiona di volta in volta su una sola riga orizzontale.
        courseD_artist_binary8_b: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary8_c: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa succede.
      courseD_bee_conditionals2:
        courseD_bee_conditionals2_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals2_a: Qualche volta c'è un fiore, altre volte no. Se
          vuoi che il tuo programma funzioni in entrambi i casi, assicurati di usare
          un blocco `se`.
        courseD_bee_conditionals2_b: Puoi usare un ciclo `ripeti ... volte` o un ciclo
          `mentre c'è strada in avanti` per muoverti attraverso questo labirinto.
        courseD_bee_conditionals2_c: 'Non hai bisogno di controllare se ci sono favi:
          per ora, sotto le nuvole ci possono essere solo fiori o caselle vuote.'
        courseD_bee_conditionals2_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals2_2018:
        courseD_bee_conditionals2_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals2_a: Qualche volta c'è un fiore, altre volte no. Se
          vuoi che il tuo programma funzioni in entrambi i casi, assicurati di usare
          un blocco `se`.
        courseD_bee_conditionals2_b: Puoi usare un ciclo `ripeti ... volte` o un ciclo
          `mentre c'è strada in avanti` per muoverti attraverso questo labirinto.
        courseD_bee_conditionals2_c: 'Non hai bisogno di controllare se ci sono favi:
          per ora, sotto le nuvole ci possono essere solo fiori o caselle vuote.'
        courseD_bee_conditionals2_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals2_2019:
        courseD_bee_conditionals2_a: Qualche volta c'è un fiore, altre volte no. Se
          vuoi che il tuo programma funzioni in entrambi i casi, assicurati di usare
          un blocco `se`.
        courseD_bee_conditionals2_c: 'Non hai bisogno di controllare se ci sono favi:
          per ora, sotto le nuvole ci possono essere solo fiori o caselle vuote.'
      courseD_bee_conditionals3:
        courseD_bee_conditionals3_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals3_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare in ogni casella se c'è un fiore.
        courseD_bee_conditionals3_b: Per far andare avanti l'ape, puoi usare sia un
          ciclo `ripeti ... volte` sia un ciclo `mentre`. Usa quello che preferisci!
        courseD_bee_conditionals3_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
        courseD_bee_conditionals3_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals3_2018:
        courseD_bee_conditionals3_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals3_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare in ogni casella se c'è un fiore.
        courseD_bee_conditionals3_b: Per far andare avanti l'ape, puoi usare sia un
          ciclo `ripeti ... volte` sia un ciclo `mentre`. Usa quello che preferisci!
        courseD_bee_conditionals3_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
        courseD_bee_conditionals3_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals3_2019:
        courseD_bee_conditionals3_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare in ogni casella se c'è un fiore.
        courseD_bee_conditionals3_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_bee_conditionals4:
        courseD_bee_conditionals4_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals4_a: Puoi sempre trattare ogni casella come se avesse
          sopra una nuvola, anche se in questo caso riesci a vedere tutto il percorso.
        courseD_bee_conditionals4_b: Usa un blocco `se` all'interno del ciclo per
          controllare la presenza di un fiore in ogni casella.
        courseD_bee_conditionals4_c: Grazie ad un blocco <xml><block type="maze_untilBlocked"/></xml>
          riesci ad andare avanti e controllare se c'è un fiore. Cosa deve fare l'ape
          se c'è un fiore?
        courseD_bee_conditionals4_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals4_2018:
        courseD_bee_conditionals4_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals4_a: Puoi sempre trattare ogni casella come se avesse
          sopra una nuvola, anche se in questo caso riesci a vedere tutto il percorso.
        courseD_bee_conditionals4_b: Usa un blocco `se` all'interno del ciclo per
          controllare la presenza di un fiore in ogni casella.
        courseD_bee_conditionals4_c: Grazie ad un blocco <xml><block type="maze_untilBlocked"/></xml>
          riesci ad andare avanti e controllare se c'è un fiore. Cosa deve fare l'ape
          se c'è un fiore?
        courseD_bee_conditionals4_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals4_2019:
        courseD_bee_conditionals4_a: Puoi sempre trattare ogni casella come se avesse
          sopra una nuvola, anche se in questo caso riesci a vedere tutto il percorso.
        courseD_bee_conditionals4_b: Usa un blocco `se` all'interno del ciclo per
          controllare la presenza di un fiore in ogni casella.
      courseD_bee_conditionals5:
        courseD_bee_conditionals5_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals5_a: Pensa ad ogni lato del percorso rettangolare
          come ad un percorso a sé stante. Imposta un ciclo annidato con un blocco
          `ripeti ... volte` all'esterno ed uno `mentre c'è strada in avanti` all'interno.
          Lungo quanti lati deve volare l'ape per ronzare su ogni fiore?
        courseD_bee_conditionals5_c: Ci sono 3 lati del rettangolo con dei fiori,
          quindi occorre usare il blocco `ripeti 3 volte`. Ad ogni ripetizione, l'ape
          deve procedere lungo il percorso `mentre c'è strada in avanti`. Per proseguire,
          l'ape deve andare avanti. Lungo il percorso, l'ape deve controllare se c'è
          un fiore. `se c'è un fiore`, l'ape deve prendere il nettare.
        courseD_bee_conditionals5_b: All'interno del blocco `mentre c'è strada in
          avanti` devi andare avanti e controllare se c'è un fiore. Come controlli
          se c'è un fiore? Cosa fai se c'è un fiore?
        courseD_bee_conditionals5_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals5_2018:
        courseD_bee_conditionals5_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals5_a: Pensa ad ogni lato del percorso rettangolare
          come ad un percorso a sé stante. Imposta un ciclo annidato con un blocco
          `ripeti ... volte` all'esterno ed uno `mentre c'è strada in avanti` all'interno.
          Lungo quanti lati deve volare l'ape per ronzare su ogni fiore?
        courseD_bee_conditionals5_c: Ci sono 3 lati del rettangolo con dei fiori,
          quindi il codice deve `"ripetersi" 3 volte`. Ad ogni ripetizione, l'ape
          deve procedere lungo il percorso `mentre c'è strada in avanti`. Per proseguire,
          l'ape deve `"andare" avanti`. Lungo il percorso, l'ape deve controllare
          se c'è un fiore. `se c'è un fiore`, l'ape deve `"prendere" il nettare`.
        courseD_bee_conditionals5_b: All'interno del blocco `mentre c'è strada in
          avanti` devi andare avanti e controllare se c'è un fiore. Come controlli
          se c'è un fiore? Cosa fai se c'è un fiore?
        courseD_bee_conditionals5_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals6:
        courseD_bee_conditionals6_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals6_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare sotto ogni nuvola se c'è un favo.
        courseD_bee_conditionals6_b: In questo caso, non è necessario controllare
          se ci sono fiori sotto le nuvole.
        courseD_bee_conditionals6_c: Potresti usare un ciclo per rendere il programma
          più semplice?
        courseD_bee_conditionals6_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals6_2018:
        courseD_bee_conditionals6_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals6_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare sotto ogni nuvola se c'è un favo.
        courseD_bee_conditionals6_b: In questo caso, non è necessario controllare
          se ci sono fiori sotto le nuvole.
        courseD_bee_conditionals6_c: Potresti usare un ciclo per rendere il programma
          più semplice?
        courseD_bee_conditionals6_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals6_2019:
        courseD_bee_conditionals6_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare sotto ogni nuvola se c'è un favo.
        courseD_bee_conditionals6_b: In questo caso, non è necessario controllare
          se ci sono fiori sotto le nuvole.
        courseD_bee_conditionals6_c: Potresti usare un ciclo per rendere il programma
          più semplice?
      courseD_bee_conditionals7:
        courseD_bee_conditionals7_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals7_a: "**Ricorda:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseD_bee_conditionals7_b: Se sotto a una nuvola non c'è un fiore, sappi
          che c'è sicuramente un favo, quindi non hai bisogno di considerare il caso
          di una casella vuota.
        courseD_bee_conditionals7_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals7_2018:
        courseD_bee_conditionals7_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals7_a: "**Ricorda:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseD_bee_conditionals7_b: Se sotto a una nuvola non c'è un fiore, sappi
          che c'è sicuramente un favo, quindi non hai bisogno di considerare il caso
          di una casella vuota.
        courseD_bee_conditionals7_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals7_2019:
        courseD_bee_conditionals7_a: "**Ricorda:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseD_bee_conditionals7_b: Se sotto a una nuvola non c'è un fiore, sappi
          che c'è sicuramente un favo, quindi non hai bisogno di considerare il caso
          di una casella vuota.
      courseD_bee_conditionals7_predict2:
        courseD_bee_conditionals7_a: "**Ricorda:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
      courseD_bee_conditionals7_predict2_2018:
        courseD_bee_conditionals7_a: "**Ricorda:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
      courseD_bee_conditionals7_predict2_2019:
        courseD_bee_conditionals7_a: "**Ricorda:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
      courseD_bee_conditionals8:
        courseD_bee_conditionals8_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals8_a: "**Attenzione:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseD_bee_conditionals8_b: |-
          Questo esercizio è un po' complicato, perché non puoi controllare le caselle vuote, i fiori _e_ i favi con un'unica istruzione condizionale.

          Controlla solo se c'è un fiore o un favo alla fine di ogni tratto del percorso (dove vedi le nuvole).
        courseD_bee_conditionals8_c: Come puoi fare in modo di andare avanti fino
          alla fine di ogni tratto del percorso, indipendentemente dalla sua lunghezza?
        courseD_bee_conditionals8_d: |-
          Nonostante ci sia una nuvola proprio davanti a te (alla partenza), non dovresti analizzarla subito. Prova ad ignorarla, iniziando da quella nell'angolo in basso a destra (alla fine del primo tratto rettilineo).

          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals8_2018:
        courseD_bee_conditionals8_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals8_a: "**Attenzione:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseD_bee_conditionals8_b: |-
          Questo esercizio è un po' complicato, perché non puoi controllare le caselle vuote, i fiori _e_ i favi con un'unica istruzione condizionale.

          Controlla solo se c'è un fiore o un favo alla fine di ogni tratto del percorso (dove vedi le nuvole).
        courseD_bee_conditionals8_c: Come puoi fare in modo di andare avanti fino
          alla fine di ogni tratto del percorso, indipendentemente dalla sua lunghezza?
        courseD_bee_conditionals8_d: |-
          Nonostante ci sia una nuvola proprio davanti a te (alla partenza), non dovresti analizzarla subito. Prova ad ignorarla, iniziando da quella nell'angolo in basso a destra (alla fine del primo tratto rettilineo).

          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals8_2019:
        courseD_bee_conditionals8_a: "**Attenzione:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseD_bee_conditionals8_b: |-
          Questo esercizio è un po' complicato, perché non puoi controllare le caselle vuote, i fiori _e_ i favi con un'unica istruzione condizionale.

          Controlla solo se c'è un fiore o un favo alla fine di ogni tratto del percorso (dove vedi le nuvole).
      courseD_bee_conditionals_challenge1:
        courseD_bee_conditionals_challenge1_a: Riesci a trovare un percorso che raggiunga
          tutti i fiori e i favi senza colpire nessun albero? Il percorso migliore
          è a spirale.
        courseD_bee_conditionals_challenge1_b: In questo esercizio, conviene immaginare
          che ogni casella possa avere un fiore, un favo o nulla. In questo modo portai
          ripetere l'istruzione condizionale `se/altrimenti` ad ogni passo.
      courseD_bee_conditionals_challenge1_2018:
        courseD_bee_conditionals_challenge1_a: Riesci a trovare un percorso che raggiunga
          tutti i fiori e i favi senza colpire nessun albero? Il percorso migliore
          è a spirale.
        courseD_bee_conditionals_challenge1_b: In questo esercizio, conviene immaginare
          che ogni casella possa avere un fiore, un favo o nulla. In questo modo portai
          ripetere l'istruzione condizionale `se/altrimenti` ad ogni passo.
      courseD_bee_conditionals_challenge1_2019:
        courseD_bee_conditionals_challenge1_a: Riesci a trovare un percorso che raggiunga
          tutti i fiori e i favi senza colpire nessun albero? Il percorso migliore
          è a spirale.
        courseD_bee_conditionals_challenge1_b: In questo esercizio, conviene immaginare
          che ogni casella possa avere un fiore, un favo o nulla. In questo modo portai
          ripetere l'istruzione condizionale `se/altrimenti` ad ogni passo.
      courseD_bee_conditionals_challenge2:
        courseD_bee_conditionals_challenge1_b: |-
          Proprio come il blocco `se c'è un fiore`, il codice all'interno del blocco `mentre nettare > 0` verrà eseguito solo se l'ape si trova su un fiore. La differenza è che questo è un ciclo, quindi il codice contenuto all'interno verrà eseguito più e più volte fino a quando non rimarrà più nessuna dose di nettare.  Prova questa struttura:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">></title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      courseD_bee_conditionals_challenge2_2018:
        courseD_bee_conditionals_challenge1_b: |-
          Proprio come il blocco `se c'è un fiore`, il codice all'interno del blocco `mentre nettare > 0` verrà eseguito solo se l'ape si trova su un fiore. La differenza è che questo è un ciclo, quindi il codice contenuto all'interno verrà eseguito più e più volte fino a quando non rimarrà più nessuna dose di nettare.  Prova questa struttura:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">></title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      courseD_bee_conditionals_challenge2_2019:
        courseD_bee_conditionals_challenge1_b: |-
          Proprio come il blocco `se c'è un fiore`, il codice all'interno del blocco `mentre nettare > 0` verrà eseguito solo se l'ape si trova su un fiore. La differenza è che questo è un ciclo, quindi il codice contenuto all'interno verrà eseguito più e più volte fino a quando non rimarrà più nessuna dose di nettare.  Prova questa struttura:

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">></title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      courseD_bee_debugging_challenge1:
        courseD_bee_debugging_challenge1_a: Perché la prima parte di questo programma
          funziona? Perché l'ape fa un movimento all'indietro ad ogni ciclo? Quanto
          nettare raccoglie l'ape ogni volta che si passa su un fiore?
      courseD_bee_debugging_challenge1a:
        courseD_bee_debugging_challenge1_a: Perché la prima parte di questo programma
          funziona? Perché l'ape fa un movimento all'indietro ad ogni ciclo? Quanto
          nettare raccoglie l'ape ogni volta che si passa su un fiore?
        courseD_bee_debugging_challenge1_b: In questo esercizio, per produrre il miele,
          l'ape deve seguire lo stesso schema utilizzato per raccoglie il nettare.
        courseD_bee_debugging_challenge1_c: |-
          Quando l'ape raggiunge la fine della fila di fiori, deve ripetere queste istruzioni:

          <xml><block type="controls_repeat">
                              <title name="TIMES">2</title>
                              <statement name="DO">
                                <block type="maze_move">
                                  <title name="DIR">moveForward</title>
                                  <next>
                                    <block type="maze_honey"/>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="maze_move">
                                  <title name="DIR">moveBackward</title>
                                </block>
                              </next>
                            </block></xml>
      courseD_bee_nestedLoops1:
        courseD_bee_nestedLoops1_a: Non funziona? Prova ad usare il pulsante "Fai
          un passo" per vedere cosa succede eseguendo un blocco alla volta.
        courseD_bee_nestedLoops1_b: Prova prima a scrivere il codice per un solo lato
          del quadrato. Riesci a ripetere questo codice per raccogliere tutto il nettare?
        courseD_bee_nestedLoops1_c: Ricordati di usare il blocco `prendi il nettare`
          ogni volta che capiti su una casella che contiene un fiore.
      courseD_bee_nestedLoops1_2018:
        courseD_bee_nestedLoops1_a: Non funziona? Prova ad usare il pulsante "Fai
          un passo" per vedere cosa succede eseguendo un blocco alla volta.
        courseD_bee_nestedLoops1_b: Prova prima a scrivere il codice per un solo lato
          del quadrato. Riesci a ripetere questo codice per raccogliere tutto il nettare?
        courseD_bee_nestedLoops1_c: Ricordati di usare il blocco `prendi il nettare`
          ogni volta che capiti su una casella che contiene un fiore.
      courseD_bee_nestedLoops1_2019:
        courseD_bee_nestedLoops1_a: Non funziona? Prova ad usare il pulsante "Fai
          un passo" per vedere cosa succede eseguendo un blocco alla volta.
        courseD_bee_nestedLoops1_b: Prova prima a scrivere il codice per un solo lato
          del quadrato. Riesci a ripetere questo codice per raccogliere tutto il nettare?
        courseD_bee_nestedLoops1_c: Ricordati di usare il blocco `prendi il nettare`
          ogni volta che capiti su una casella che contiene un fiore.
      courseD_bee_nestedLoops1a:
        courseD_bee_nestedLoops1_a: Non funziona? Prova ad usare il pulsante "Fai
          un passo" per vedere cosa succede eseguendo un blocco alla volta.
        courseD_bee_nestedLoops1_c: Ricordati di usare il blocco `prendi il nettare`
          ogni volta che capiti su una casella che contiene un fiore.
      courseD_bee_nestedLoops1a_2018:
        courseD_bee_nestedLoops1_a: Non funziona? Prova ad usare il pulsante "Fai
          un passo" per vedere cosa succede eseguendo un blocco alla volta.
        courseD_bee_nestedLoops1_c: Ricordati di usare il blocco `prendi il nettare`
          ogni volta che capiti su una casella che contiene un fiore.
      courseD_bee_nestedLoops1a_2019:
        courseD_bee_nestedLoops1_a: Non funziona? Prova ad usare il pulsante "Fai
          un passo" per vedere cosa succede eseguendo un blocco alla volta.
        courseD_bee_nestedLoops1_c: Ricordati di usare il blocco `prendi il nettare`
          ogni volta che capiti su una casella che contiene un fiore.
      courseD_bee_nestedLoops2:
        courseD_bee_nestedLoops2_a: Per risolvere questo esercizio, devi annidare
          un ciclo `ripeti ... volte` all'interno di un altro.
        courseD_bee_nestedLoops2_b: Non riesci a capire dove posizionare i cicli?
          Prova a scrivere il codice su un foglio di carta un passo per volta e cerca
          di individuare uno schema che si ripete.
        courseD_bee_nestedLoops2_c: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo.
      courseD_bee_nestedLoops2_2018:
        courseD_bee_nestedLoops2_a: Per risolvere questo esercizio, devi annidare
          un ciclo `ripeti ... volte` all'interno di un altro.
        courseD_bee_nestedLoops2_b: Non riesci a capire dove posizionare i cicli?
          Prova a scrivere il codice su un foglio di carta un passo per volta e cerca
          di individuare uno schema che si ripete.
        courseD_bee_nestedLoops2_c: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo.
      courseD_bee_nestedLoops2_2019:
        courseD_bee_nestedLoops2_a: Per risolvere questo esercizio, devi annidare
          un ciclo `ripeti ... volte` all'interno di un altro.
        courseD_bee_nestedLoops2_b: Non riesci a capire dove posizionare i cicli?
          Prova a scrivere il codice su un foglio di carta un passo per volta e cerca
          di individuare uno schema che si ripete.
        courseD_bee_nestedLoops2_c: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo.
      courseD_bee_nestedLoops7:
        courseD_bee_nestedLoops7_a: Devi ripetere il blocco `prendi il nettare` all'interno
          di un altro blocco `ripeti ... volte` che ha al suo interno anche il blocco
          `vai avanti`.
        courseD_bee_nestedLoops7_b: Devi usare tutti e tre i blocchi `ripeti ... volte`
          per risolvere l'esercizio.
        courseD_bee_nestedLoops7_c: |-
          Annida i blocchi su tre livelli, in questo modo:

          -   ripeti 4
              -   ripeti 3
                  -   ripeti 12
                      -   prendi il nettare
                  -   vai avanti
              -   gira a destra
      courseD_bee_nestedLoops7_2018:
        courseD_bee_nestedLoops7_a: Devi ripetere il blocco `prendi il nettare` all'interno
          di un altro blocco `ripeti ... volte` che ha al suo interno anche il blocco
          `vai avanti`.
        courseD_bee_nestedLoops7_b: Devi usare tutti e tre i blocchi `ripeti ... volte`
          per risolvere l'esercizio.
        courseD_bee_nestedLoops7_c: |-
          Annida i blocchi su tre livelli, in questo modo:

          -   ripeti 4
              -   ripeti 3
                  -   ripeti 12
                      -   prendi il nettare
                  -   vai avanti
              -   gira a destra
      courseD_bee_nestedLoops7_2019:
        courseD_bee_nestedLoops7_a: Devi ripetere il blocco `prendi il nettare` all'interno
          di un altro blocco `ripeti ... volte` che ha al suo interno anche il blocco
          `vai avanti`.
        courseD_bee_nestedLoops7_b: Devi usare tutti e tre i blocchi `ripeti ... volte`
          per risolvere l'esercizio.
        courseD_bee_nestedLoops7_c: |-
          Annida i blocchi su tre livelli, in questo modo:

          -   ripeti 4
              -   ripeti 3
                  -   ripeti 12
                      -   prendi il nettare
                  -   vai avanti
              -   gira a destra
      courseD_bounce_events10s_2018:
        courseD_bounce_events10s_a: |-
          Dovresti avere entrambi questi eventi nel tuo codice:

          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block></xml>
      courseD_bounce_events10s_2019:
        courseD_bounce_events10s_a: |-
          Dovresti avere entrambi questi eventi nel tuo codice:

          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block></xml>
      courseD_bounce_events11s_2018:
        courseD_bounce_events11s_a: Sarà necessario lanciare una palla quando il gioco
          comincia, quando fai canestro e quando la mano manca la palla.
      courseD_bounce_events11s_2019:
        courseD_bounce_events11s_a: Sarà necessario lanciare una palla quando il gioco
          comincia, quando fai canestro e quando la mano manca la palla.
      courseD_bounce_events12s_2018:
        courseD_bounce_events12s_a: 'Puoi rendere più veloce la palla o la mano attaccando
          all''evento `quando si clicca su "Esegui"` i seguenti blocchi: `imposta
          la velocità della mano a ...` e `imposta per la palla un velocità ...`.'
        courseD_bounce_events12s_b: Prova a fare in modo che ogni tiro valga 2 punti
          e modifica il logo della squadra con quello di una città a tua scelta!
      courseD_bounce_events12s_2019:
        courseD_bounce_events12s_a: 'Puoi rendere più veloce la palla o la mano attaccando
          all''evento `quando si clicca su "Esegui"` i seguenti blocchi: `imposta
          la velocità della mano a ...` e `imposta per la palla un velocità ...`.'
        courseD_bounce_events12s_b: Prova a fare in modo che ogni tiro valga 2 punti
          e modifica il logo della squadra con quello di una città a tua scelta!
      courseD_bounce_events1s_2018:
        courseD_bounce_events1s_a: |-
          Per far funzionare questo gioco, devi aggiungere il blocco `vai a sinistra` al blocco evento `quando si preme sulla freccia verso sinistra`:

           <xml> <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>

             </xml>
        courseD_bounce_events1s_b: Per risolvere questo esercizio, dopo aver premuto
          "Esegui", devi muovere la mano fino al canestro disegnato sulla sinistra.
      courseD_bounce_events1s_2019:
        courseD_bounce_events1s_a: |-
          Per far funzionare questo gioco, devi aggiungere il blocco `vai a sinistra` al blocco evento `quando si preme sulla freccia verso sinistra`:

           <xml> <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>

             </xml>
        courseD_bounce_events1s_b: Per risolvere questo esercizio, dopo aver premuto
          "Esegui", devi muovere la mano fino al canestro disegnato sulla sinistra.
      courseD_bounce_events2s_2018:
        courseD_bounce_events2s_a: |-
          Dovrai programmare due gestori di eventi di movimento per completare questo esercizio:

          <xml>
            <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>
            <block type="bounce_whenRight" deletable="false" x="180" y="20">
              <next>
                <block type="bounce_moveRight"/>
              </next>
            </block>
          </xml>
      courseD_bounce_events2s_2019:
        courseD_bounce_events2s_a: |-
          Dovrai programmare due gestori di eventi di movimento per completare questo esercizio:

          <xml>
            <block type="bounce_whenLeft" deletable="false" x="20" y="20">
              <next>
                <block type="bounce_moveLeft"/>
              </next>
            </block>
            <block type="bounce_whenRight" deletable="false" x="180" y="20">
              <next>
                <block type="bounce_moveRight"/>
              </next>
            </block>
          </xml>
      courseD_bounce_events5s_2018:
        courseD_bounce_events5s_a: Non avrai bisogno di far muovere la mano per risolvere
          questo esercizio.
        courseD_bounce_events5s_b: |-
          Assicurati di aver aggiunto queste istruzioni nell'area di lavoro:

          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events5s_2019:
        courseD_bounce_events5s_a: Non avrai bisogno di far muovere la mano per risolvere
          questo esercizio.
        courseD_bounce_events5s_b: |-
          Assicurati di aver aggiunto queste istruzioni nell'area di lavoro:

          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events6s_2018:
        courseD_bounce_events6s_a: |-
          Hai un evento come questo?

          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: Se hai scritto il programma correttamente, non
          avrai bisogno di muovere la mano per vincere.
      courseD_bounce_events6s_2019:
        courseD_bounce_events6s_a: |-
          Hai un evento come questo?

          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: Se hai scritto il programma correttamente, non
          avrai bisogno di muovere la mano per vincere.
      courseD_bounce_events7s_2018:
        courseD_bounce_events7s_a: Se ne hai voglia, puoi aggiungere dei suoni anche
          in altri punti del programma!
      courseD_bounce_events7s_2019:
        courseD_bounce_events7s_a: Se ne hai voglia, puoi aggiungere dei suoni anche
          in altri punti del programma!
      courseD_collector_debugging1:
        courseD_collector_debugging1_a: |-
          Usa il pulsante "Fai un passo" per vedere se è tutto giusto al primo passo.

          E al secondo?

          Dov'è che qualcosa comincia a non funzionare?
        courseD_collector_debugging1_b: Riesci a vedere degli schemi che si ripetono
          e che si possano semplificare con un ciclo `ripeti ... volte`?
        courseD_collector_debugging1_c: Ricorda di usare il blocco `raccogli` per
          collezionare tutti i diamanti ogni volta che sei arrivato su di essi.
      courseD_collector_debugging10_predict1:
        courseD_collector_debugging9_a: Ci sono tanti modi per risolvere questo esercizio...
          ma tutti richiedono delle curve!
        courseD_collector_debugging9_b: Cerca di capire come dovresti risolvere questo
          esercizio, quindi vai avanti un passo per volta, facendo corrispondere le
          istruzioni a ciò che hai in mente.
      courseD_collector_debugging1a_2018:
        courseD_collector_debugging1_a: |-
          Usa il pulsante "Fai un passo" per vedere se è tutto giusto al primo passo.

          E al secondo?

          Dov'è che qualcosa comincia a non funzionare?
        courseD_collector_debugging1_c: Ricorda di usare il blocco `raccogli` per
          collezionare tutti i diamanti ogni volta che sei arrivato su di essi.
      courseD_collector_debugging1a_2019:
        courseD_collector_debugging1_a: |-
          Usa il pulsante "Fai un passo" per vedere se è tutto giusto al primo passo.

          E al secondo?

          Dov'è che qualcosa comincia a non funzionare?
        courseD_collector_debugging1_c: Ricorda di usare il blocco `raccogli` per
          collezionare tutti i diamanti ogni volta che sei arrivato su di essi.
      courseD_collector_debugging2:
        courseD_collector_debugging2_a: |-
          Usa il pulsante "Fai un passo" per vedere se è tutto giusto al primo passo.

          E al secondo?

          Dov'è che qualcosa comincia a non funzionare?
        courseD_collector_debugging2_b: Riesci a vedere degli schemi che si ripetono
          e che si possano semplificare con un ciclo `ripeti ... volte`?
        courseD_collector_debugging2_c: Prova a raccogliere i diamanti sul primo tratto
          di questo percorso. Puoi ripetere questo schema per raccoglierli anche sugli
          altri due lati?
      courseD_collector_debugging2a_2018:
        courseD_collector_debugging2a_a: |-
          Usa il pulsante "Fai un passo" per vedere se è tutto giusto al primo passo.

          E al secondo?

          Dov'è che qualcosa comincia a non funzionare?
        courseD_collector_debugging2a_c: |-
          Cosa succede?
          Cosa avrebbe dovuto succedere?
          Questo cosa ti suggerisce?
      courseD_collector_debugging2a_2019:
        courseD_collector_debugging2a_a: |-
          Usa il pulsante "Fai un passo" per vedere se è tutto giusto al primo passo.

          E al secondo?

          Dov'è che qualcosa comincia a non funzionare?
        courseD_collector_debugging2a_c: |-
          Cosa succede?
          Cosa avrebbe dovuto succedere?
          Questo cosa ti suggerisce?
      courseD_collector_debugging3:
        courseD_collector_debugging3_a: C'è un punto del programma in cui Laura fa
          qualcosa di sbagliato? Cosa succede quando correggi questi blocchi?
        courseD_collector_debugging3_b: Cerca di semplificare il programma usando
          dei cicli annidati.
      courseD_collector_debugging3a_2018:
        courseD_collector_debugging3_a: C'è un punto del programma in cui Laura fa
          qualcosa di sbagliato? Cosa succede quando correggi questi blocchi?
      courseD_collector_debugging3a_2019:
        courseD_collector_debugging3_a: C'è un punto del programma in cui Laura fa
          qualcosa di sbagliato? Cosa succede quando correggi questi blocchi?
      courseD_collector_debugging4:
        courseD_collector_debugging4_a: |-
          Prova ad usare il processo di correzione degli errori (debugging) un paio di volte di seguito.

          Cos'è che causa il primo problema?

          Una volta risolto questo problema, cos'altro c'è di sbagliato?
        courseD_collector_debugging4_b: "Se hai difficoltà a capire come realizzare
          lo schema a scalinata, prova a tracciarlo con un dito e pronuncia le istruzioni
          ad alta voce. \n\nNon dimenticare di indicare la direzione delle curve!"
        courseD_collector_debugging4_c: In questo ciclo manca solo un blocco. Riesci
          a capire quale?
      courseD_collector_debugging4a_2018:
        courseD_collector_debugging4_a: |-
          Prova ad usare il processo di correzione degli errori (debugging) un paio di volte di seguito.

          Cos'è che causa il primo problema?

          Una volta risolto questo problema, cos'altro c'è di sbagliato?
        courseD_collector_debugging4_b: "Se hai difficoltà a capire come realizzare
          lo schema a scalinata, prova a tracciarlo con un dito e pronuncia le istruzioni
          ad alta voce. \n\nNon dimenticare di indicare la direzione delle curve!"
      courseD_collector_debugging4a_2019:
        courseD_collector_debugging4_a: |-
          Prova ad usare il processo di correzione degli errori (debugging) un paio di volte di seguito.

          Cos'è che causa il primo problema?

          Una volta risolto questo problema, cos'altro c'è di sbagliato?
        courseD_collector_debugging4_b: "Se hai difficoltà a capire come realizzare
          lo schema a scalinata, prova a tracciarlo con un dito e pronuncia le istruzioni
          ad alta voce. \n\nNon dimenticare di indicare la direzione delle curve!"
      courseD_collector_debugging5:
        courseD_collector_debugging5_a: |-
          Inizia guardando solo il primo ciclo.

          Che cosa fa?

          Che cosa dovrebbe fare?

          Che cosa ti suggerisce questo?
        courseD_collector_debugging5_b: Una volta verificato il funzionamento del
          primo ciclo, cosa rimane da controllare?
      courseD_collector_debugging5a_2018:
        courseD_collector_debugging5a_a: |-
          Cosa succede?
          Cosa avrebbe dovuto succedere?
          Questo cosa ti suggerisce?
        courseD_collector_debugging5a_b: Una volta collezionata la prima fila di diamanti,
          cosa rimane da raccogliere?
      courseD_collector_debugging5a_2019:
        courseD_collector_debugging5a_a: |-
          Cosa succede?
          Cosa avrebbe dovuto succedere?
          Questo cosa ti suggerisce?
        courseD_collector_debugging5a_b: Una volta collezionata la prima fila di diamanti,
          cosa rimane da raccogliere?
      courseD_collector_debugging6:
        courseD_collector_debugging6_a: |-
          Prova ad eseguire il codice un blocco per volta usando il pulsante "Fai un passo". È tutto giusto al primo passo?

          E al secondo?

          Dov'è che qualcosa comincia a non funzionare?
        courseD_collector_debugging6_b: Dopo che hai messo nel corretto ordine le
          istruzioni, devi anche fare in modo che l'avventuriera raccolga tutti i
          diamanti. Come puoi ripetere più volte l'azione `raccogli`?
      courseD_collector_debugging6a_2018:
        courseD_collector_debugging6_a: |-
          Prova ad eseguire il codice un blocco per volta usando il pulsante "Fai un passo". È tutto giusto al primo passo?

          E al secondo?

          Dov'è che qualcosa comincia a non funzionare?
        courseD_collector_debugging6_b: Tutti i blocchi di cui hai bisogno erano già
          pronti nell'area di lavoro. Clicca su "Ripristina" se la situazione è diventata
          troppo confusa.
      courseD_collector_debugging6a_2019:
        courseD_collector_debugging6_a: |-
          Prova ad eseguire il codice un blocco per volta usando il pulsante "Fai un passo". È tutto giusto al primo passo?

          E al secondo?

          Dov'è che qualcosa comincia a non funzionare?
        courseD_collector_debugging6_b: Tutti i blocchi di cui hai bisogno erano già
          pronti nell'area di lavoro. Clicca su "Ripristina" se la situazione è diventata
          troppo confusa.
      courseD_collector_debugging8:
        courseD_collector_debugging8_a: Vedi uno schema che si ripete e che puoi semplificare
          con un ciclo?
        courseD_collector_debugging8_b: Prova ad usare un ciclo annidato per rendere
          più breve questo programma.
      courseD_collector_debugging9:
        courseD_collector_debugging9_a: Ci sono tanti modi per risolvere questo esercizio...
          ma tutti richiedono delle curve!
        courseD_collector_debugging9_b: Cerca di capire come dovresti risolvere questo
          esercizio, quindi vai avanti un passo per volta, facendo corrispondere le
          istruzioni a ciò che hai in mente.
      courseD_collector_debugging_challenge2:
        courseD_collector_debugging_challenge2_a: "Dopo aver fatto un passo avanti,
          inizia raccogliendo solo **due** diamanti da ognuna delle prime **due**
          caselle.\n\n![](<https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04
          AM copy.png>)\nUsa questi blocchi:\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block
          type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n
          \ </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title
          name=\"DIR\">moveForward</title>\n                  </block>\n                  \n
          \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n
          \   <title name=\"TIMES\">2</title>\n  </block>\n\n</xml>"
        courseD_collector_debugging_challenge2_b: |-
          Quindi, dopo aver fatto un passo indietro, raccogli i diamanti rimanenti. E ripeti questo meccanismo su tutta la fila.

          ![](<https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04 AM.png>)
          Aggiungi questi blocchi al tuo programma:

          <xml><block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
          <block type="controls_repeat">
                  <title name="TIMES">4</title>
                  <statement name="DO">

                  </statement>
                </block>

          </xml>
        courseD_collector_debugging_challenge2_c: "Infine, per raccogliere i diamanti
          rimanenti su tutti i lati del percorso, aggiungi questi blocchi al tuo programma:\n\n<xml>\n
          \ <block type=\"maze_turn\">\n                <title name=\"DIR\">turnRight</title>\n
          \             </block>\n      <block type=\"controls_repeat\">\n        <title
          name=\"TIMES\">4</title>\n        <statement name=\"DO\">\n          \n
          \       </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Ecco la soluzione completa di questo esercizio:

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">4</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="controls_repeat">
                          <title name="TIMES">2</title>
                          <statement name="DO">
                            <block type="maze_move">
                              <title name="DIR">moveForward</title>
                              <next>
                                <block type="controls_repeat">
                                  <title name="TIMES">2</title>
                                  <statement name="DO">
                                    <block type="collector_collect"/>
                                  </statement>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="maze_move">
                              <title name="DIR">moveBackward</title>
                            </block>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2:
        courseD_bee_nested_loops_challenge2_a: Non dimenticare che puoi inserire nel
          blocco `ripeti ... volte` un singolo comando o uno schema più lungo. E si
          può anche ripetere un blocco `ripeti ... volte`!
        courseD_bee_nested_loops_challenge2_b: Per raccogliere tutti e 4 i diamanti,
          prima di tutto usa un ciclo per allontanarti dal centro. Gira a sinistra
          o a destra, quindi usa un ciclo annidato per passare dal primo diamante
          al secondo. Se ripeti questo ciclo annidato abbastanza volte, la collezionista
          si muoverà intorno a _tutta_ la grotta!
        courseD_bee_nested_loops_challenge2_c: Il programma più breve che raggiunge
          tutti i diamanti usa solo un blocco `raccogli` e due svolte.
        courseD_bee_nested_loops_challenge2_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2018:
        courseD_bee_nested_loops_challenge2_a: Non dimenticare che puoi inserire nel
          blocco `ripeti ... volte` un singolo comando o uno schema più lungo. E si
          può anche ripetere un blocco `ripeti ... volte`!
        courseD_bee_nested_loops_challenge2_b: Per raccogliere tutti e 4 i diamanti,
          prima di tutto usa un ciclo per allontanarti dal centro. Gira a sinistra
          o a destra, quindi usa un ciclo annidato per passare dal primo diamante
          al secondo. Se ripeti questo ciclo annidato abbastanza volte, la collezionista
          si muoverà intorno a _tutta_ la grotta!
        courseD_bee_nested_loops_challenge2_c: Il programma più breve che raggiunge
          tutti i diamanti usa solo un blocco `raccogli` e due svolte.
        courseD_bee_nested_loops_challenge2_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2019:
        courseD_bee_nested_loops_challenge2_a: Non dimenticare che puoi inserire nel
          blocco `ripeti ... volte` un singolo comando o uno schema più lungo. E si
          può anche ripetere un blocco `ripeti ... volte`!
        courseD_bee_nested_loops_challenge2_b: Per raccogliere tutti e 4 i diamanti,
          prima di tutto usa un ciclo per allontanarti dal centro. Gira a sinistra
          o a destra, quindi usa un ciclo annidato per passare dal primo diamante
          al secondo. Se ripeti questo ciclo annidato abbastanza volte, la collezionista
          si muoverà intorno a _tutta_ la grotta!
        courseD_bee_nested_loops_challenge2_c: Il programma più breve che raggiunge
          tutti i diamanti usa solo un blocco `raccogli` e due svolte.
        courseD_bee_nested_loops_challenge2_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat_dropdown">
                  <title name="TIMES" config="3-10">3</title>
                  <statement name="DO">
                    <block type="maze_move">
                      <title name="DIR">moveForward</title>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnLeft</title>
                      <next>
                        <block type="controls_repeat_dropdown">
                          <title name="TIMES" config="3-10">3</title>
                          <statement name="DO">
                            <block type="collector_collect">
                              <next>
                                <block type="controls_repeat_dropdown">
                                  <title name="TIMES" config="3-10">3</title>
                                  <statement name="DO">
                                    <block type="maze_move">
                                      <title name="DIR">moveForward</title>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="controls_repeat_dropdown">
                                          <title name="TIMES" config="3-10">3</title>
                                          <statement name="DO">
                                            <block type="maze_move">
                                              <title name="DIR">moveForward</title>
                                            </block>
                                          </statement>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseD_collector_nested_loops_challenge2a:
        courseD_collector_nested_loops_challenge2a_a: Non dimenticare che puoi inserire
          nel blocco `ripeti ... volte` un singolo comando o uno schema più lungo.
          E si può anche ripetere un blocco `ripeti ... volte`!
        courseD_collector_nested_loops_challenge2a_b: Riesci a capire come raccogliere
          tutti e quattro i diamanti senza usare più blocchi di quanti ne servono
          per raccoglierne due?
      courseD_collector_ramp10:
        courseD_artist_ramp10_a: |-
          Invece di usare quattro blocchi `vai avanti` per ogni lato, prova a mettere un unico blocco `vai avanti` all'interno di un ciclo `ripeti ... volte`, come qui:

          <xml><block type="controls_repeat">
                                                      <title name="TIMES">4</title>
                                                      <statement name="DO">
                                                        <block type="maze_moveForward"/>
                                                      </statement>
                                                    </block></xml>
        courseD_artist_ramp10_b: Dopo aver raccolto il diamante, non dimenticarti
          di girare per iniziare un nuovo lato della quadrato!
        courseD_artist_ramp10_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo all'interno di un altro! Si chiama **ciclo annidato**.
      courseD_collector_ramp8:
        courseD_collector_ramp8_a: Quando arrivi su una casella con un diamante, per
          prenderlo devi usare il blocco `raccogli`. In questo esercizio, è necessario
          raccogliere più di un diamante alla volta!
        courseD_collector_ramp8_b: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseD_collector_ramp9:
        courseD_collector_ramp9_a: Inizia a far muovere Laura verso il primo gruppo
          di diamanti, quindi raccoglili. Puoi ripetere questa sequenza per prendere
          il secondo gruppo?
        courseD_collector_ramp9_b: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseD_farmer_condLoops1:
        courseD_farmer_condLoops1_a: Saranno necessari 5 controlli, usa un ciclo `ripeti
          ... volte`.
        courseD_farmer_condLoops1_b: Se non usi il blocco `se sei su una pannocchia`
          rischi di tentare di raccogliere qualcosa che non c'è!
      courseD_farmer_condLoops1_2018:
        courseD_farmer_condLoops1_a: Saranno necessari 5 controlli, usa un ciclo `ripeti
          ... volte`.
        courseD_farmer_condLoops1_b: Se non usi il blocco `se sei su una pannocchia`
          rischi di tentare di raccogliere qualcosa che non c'è!
      courseD_farmer_condLoops1_2019:
        courseD_farmer_condLoops1_a: Saranno necessari 5 controlli, usa un ciclo `ripeti
          ... volte`.
        courseD_farmer_condLoops1_b: Se non usi il blocco `se sei su una pannocchia`
          rischi di tentare di raccogliere qualcosa che non c'è!
      courseD_farmer_condLoops2:
        courseD_farmer_condLoops2_a: Il modo migliore per risolvere questo esercizio,
          è di annidare le istruzioni `se` una dentro l'altra.
        courseD_farmer_condLoops2_b: In questo esercizio, dovresti usare un'istruzione
          `se/altrimenti` e una semplice istruzione `se`.
        courseD_farmer_condLoops2_c: |-
          L'insieme di istruzioni condizionali dovrebbe funzionare così:

          -   se sei su una pannocchia
              -   prendi la pannocchia
          -   altrimenti
              -   se sei su una lattuga
                  -   prendi la lattuga

          Quindi, se una casella è vuota, la contadina non cerca di raccogliere nulla!
      courseD_farmer_condLoops2_2018:
        courseD_farmer_condLoops2_a: Il modo migliore per risolvere questo esercizio,
          è di annidare le istruzioni `se` una dentro l'altra.
        courseD_farmer_condLoops2_b: In questo esercizio, dovresti usare un'istruzione
          `se/altrimenti` e una semplice istruzione `se`.
        courseD_farmer_condLoops2_c: |-
          L'insieme di istruzioni condizionali dovrebbe funzionare così:

          -   se sei su una pannocchia
              -   prendi la pannocchia
          -   altrimenti
              -   se sei su una lattuga
                  -   prendi la lattuga

          Quindi, se una casella è vuota, la contadina non cerca di raccogliere nulla!
      courseD_farmer_condLoops2_2019:
        courseD_farmer_condLoops2_a: Il modo migliore per risolvere questo esercizio,
          è di annidare le istruzioni `se` una dentro l'altra.
        courseD_farmer_condLoops2_b: In questo esercizio, dovresti usare un'istruzione
          `se/altrimenti` e una semplice istruzione `se`.
        courseD_farmer_condLoops2_c: |-
          L'insieme di istruzioni condizionali dovrebbe funzionare così:

          -   se sei su una pannocchia
              -   prendi la pannocchia
          -   altrimenti
              -   se sei su una lattuga
                  -   prendi la lattuga

          Quindi, se una casella è vuota, la contadina non cerca di raccogliere nulla!
      courseD_farmer_condLoops3:
        courseD_farmer_condLoops3_a: |-
          Per raccogliere tutto, prova ad annidare su tre livelli le istruzioni `se`.

          Questo significa che devi mettere un'istruzione `se` all'interno di un'altra e poi mettere una terza istruzione `se` all'interno della seconda.
        courseD_farmer_condLoops3_b: In questo esercizio, dovresti usare due istruzioni
          `se/altrimenti` e una semplice istruzione `se`.
      courseD_farmer_condLoops3_2018:
        courseD_farmer_condLoops3_a: |-
          Per raccogliere tutto, prova ad annidare su tre livelli le istruzioni `se`.

          Questo significa che devi mettere un'istruzione `se` all'interno di un'altra e poi mettere una terza istruzione `se` all'interno della seconda.
        courseD_farmer_condLoops3_b: In questo esercizio, dovresti usare due istruzioni
          `se/altrimenti` e una semplice istruzione `se`.
      courseD_farmer_condLoops3_2019:
        courseD_farmer_condLoops3_a: |-
          Per raccogliere tutto, prova ad annidare su tre livelli le istruzioni `se`.

          Questo significa che devi mettere un'istruzione `se` all'interno di un'altra e poi mettere una terza istruzione `se` all'interno della seconda.
        courseD_farmer_condLoops3_b: In questo esercizio, dovresti usare due istruzioni
          `se/altrimenti` e una semplice istruzione `se`.
      courseD_farmer_condLoops4:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          Nessuno sa quante lattughe crescono da ogni pianta.

          Usa il ciclo `mentre sei su una lattuga` per continuare a raccogliere mentre ci sono ancora lattughe disponibili.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: Il ciclo `mentre` gestirà
          correttamente anche le caselle vuote! Visto che non c'è lattuga, non verrà
          raccolta ed il codice passerà oltre.
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: Per analizzare tutte le caselle,
          puoi usare sia un ciclo `mentre c'è strada in avanti` sia un ciclo `ripeti
          ... volte`.
      courseD_farmer_condLoops4_2018:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          Nessuno sa quante lattughe crescono da ogni pianta.

          Usa il ciclo `mentre sei su una lattuga` per continuare a raccogliere mentre ci sono ancora lattughe disponibili.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: Il ciclo `mentre` gestirà
          correttamente anche le caselle vuote! Visto che non c'è lattuga, non verrà
          raccolta ed il codice passerà oltre.
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: Per analizzare tutte le caselle,
          puoi usare sia un ciclo `mentre c'è strada in avanti` sia un ciclo `ripeti
          ... volte`.
      courseD_farmer_condLoops4_2019:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          Nessuno sa quante lattughe crescono da ogni pianta.

          Usa il ciclo `mentre sei su una lattuga` per continuare a raccogliere mentre ci sono ancora lattughe disponibili.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: Il ciclo `mentre` gestirà
          correttamente anche le caselle vuote! Visto che non c'è lattuga, non verrà
          raccolta ed il codice passerà oltre.
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: Per analizzare tutte le caselle,
          puoi usare sia un ciclo `mentre c'è strada in avanti` sia un ciclo `ripeti
          ... volte`.
      courseD_farmer_condLoops5:
        courseD_farmer_condLoops5_a: 'C''è un nuovo ciclo: `ripeti fino a che sei
          su una zucca`, che ripete tutti i blocchi che contiene per tutto il tempo
          in cui NON sei su una zucca e si interrompe quando finalmente arrivi ad
          una zucca. Riesci a intuire come usarlo in questo esercizio?'
        courseD_farmer_condLoops5_b: Ci può essere più di una pannocchia o più di
          una lattuga in ogni casella. Usa un ciclo `mentre` per raccogliere tutto!
      courseD_farmer_condLoops5_2018:
        courseD_farmer_condLoops5_a: 'C''è un nuovo ciclo: `ripeti fino a che sei
          su una zucca`, che ripete tutti i blocchi che contiene per tutto il tempo
          in cui NON sei su una zucca e si interrompe quando finalmente arrivi ad
          una zucca. Riesci a intuire come usarlo in questo esercizio?'
        courseD_farmer_condLoops5_b: Ci può essere più di una pannocchia o più di
          una lattuga in ogni casella. Usa un ciclo `mentre` per raccogliere tutto!
      courseD_farmer_condLoops5_2019:
        courseD_farmer_condLoops5_a: 'C''è un nuovo ciclo: `ripeti fino a che sei
          su una zucca`, che ripete tutti i blocchi che contiene per tutto il tempo
          in cui NON sei su una zucca e si interrompe quando finalmente arrivi ad
          una zucca. Riesci a intuire come usarlo in questo esercizio?'
        courseD_farmer_condLoops5_b: Ci può essere più di una pannocchia o più di
          una lattuga in ogni casella. Usa un ciclo `mentre` per raccogliere tutto!
      courseD_farmer_condLoops6:
        courseD_farmer_condLoops6_a: Usa un ciclo `mentre sei su una pannocchia` per
          essere sicuro di raccogliere tutte le pannocchie lungo il tragitto. Questo
          blocco non farà fare nulla se non c'è alcuna pannocchia da prendere.
        courseD_farmer_condLoops6_b: Controlla `se c'è strada in avanti` prima di
          fare il prossimo passo!
      courseD_farmer_condLoops6_2018:
        courseD_farmer_condLoops6_a: Usa un ciclo `mentre c'è strada in avanti` per
          far in modo che la contadina percorra ogni tratto della spirale.
        courseD_farmer_condLoops6_b: Durante la maggior parte del percorso, devi solo
          controllare se ci sono pannocchie. La zucca la puoi semplicemente raccogliere
          alla fine del programma.
      courseD_farmer_condLoops6_2019:
        courseD_farmer_condLoops6_a: Usa un ciclo `mentre c'è strada in avanti` per
          far in modo che la contadina percorra ogni tratto della spirale.
        courseD_farmer_condLoops6_b: Durante la maggior parte del percorso, devi solo
          controllare se ci sono pannocchie. La zucca la puoi semplicemente raccogliere
          alla fine del programma.
      courseD_farmer_condLoops7:
        courseD_farmer_condLoops7_a: |-
          Nota che il percorso più facile per raggiungere tutte le colture è ancora una spirale.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Prova ad usare un blocco `mentre c'è strada in
          avanti` per far muovere la contadina lungo il percorso corretto.
      courseD_farmer_condLoops7_2018:
        courseD_farmer_condLoops7_a: |-
          Nota che il percorso più facile per raggiungere tutte le colture è ancora una spirale.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Prova ad usare un blocco `mentre c'è strada in
          avanti` per far muovere la contadina lungo il percorso corretto.
      courseD_farmer_condLoops7_2019:
        courseD_farmer_condLoops7_a: |-
          Nota che il percorso più facile per raggiungere tutte le colture è ancora una spirale.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Prova ad usare un blocco `mentre c'è strada in
          avanti` per far muovere la contadina lungo il percorso corretto.
      courseD_farmer_condLoops_challenge1:
        courseD_farmer_condLoops_challenge1_a: Il pulsante "Fai un passo" potrebbe
          rivelarsi molto utile per portare a termine questa sfida.
        courseD_farmer_condLoops_challenge1_b: Di solito, quando ci si trova su una
          zucca, si esegue solamente il blocco `prendi zucca`. Cos'altro devi fare
          in questo caso se sei su una zucca?
      courseD_farmer_condLoops_challenge1_2018:
        courseD_farmer_condLoops_challenge1_a: Il pulsante "Fai un passo" potrebbe
          rivelarsi molto utile per portare a termine questa sfida.
        courseD_farmer_condLoops_challenge1_b: Di solito, quando ci si trova su una
          zucca, si esegue solamente il blocco `prendi zucca`. Cos'altro devi fare
          in questo caso se sei su una zucca?
      courseD_farmer_condLoops_challenge1_2019:
        courseD_farmer_condLoops_challenge1_a: Il pulsante "Fai un passo" potrebbe
          rivelarsi molto utile per portare a termine questa sfida.
        courseD_farmer_condLoops_challenge1_b: Di solito, quando ci si trova su una
          zucca, si esegue solamente il blocco `prendi zucca`. Cos'altro devi fare
          in questo caso se sei su una zucca?
      courseD_farmer_condLoops_challenge2:
        courseD_farmer_condLoops_challenge2_a: La quantità di ortaggi in ogni casella
          può cambiare. Un ciclo `mentre` ti potrebbe essere molto utile!
      courseD_farmer_condLoops_challenge2_2018:
        courseD_farmer_condLoops_challenge2_a: La quantità di ortaggi in ogni casella
          può cambiare. Un ciclo `mentre` ti potrebbe essere molto utile!
      courseD_farmer_condLoops_challenge2_2019:
        courseD_farmer_condLoops_challenge2_a: La quantità di ortaggi in ogni casella
          può cambiare. Un ciclo `mentre` ti potrebbe essere molto utile!
      courseD_farmer_while1:
        courseD_farmer_while1_a: Dovrai andare avanti quattro volte per raggiungere
          il mucchio. Riesci a usare un ciclo `ripeti ... volte` per fare ciò?
        courseD_farmer_while1_b: Quando sarai in piedi sul mucchio di terra, usa il
          blocco `rimuovi 1` per rimuoverlo.
      courseD_farmer_while1_2018:
        courseD_farmer_while1_a: Dovrai andare avanti quattro volte per raggiungere
          il mucchio. Riesci a usare un ciclo `ripeti ... volte` per fare ciò?
        courseD_farmer_while1_b: Quando sarai in piedi sul mucchio di terra, usa il
          blocco `rimuovi 1` per rimuoverlo.
      courseD_farmer_while1_2019:
        courseD_farmer_while1_a: Dovrai andare avanti quattro volte per raggiungere
          il mucchio. Riesci a usare un ciclo `ripeti ... volte` per fare ciò?
        courseD_farmer_while1_b: Quando sarai in piedi sul mucchio di terra, usa il
          blocco `rimuovi 1` per rimuoverlo.
      courseD_farmer_while2:
        courseD_farmer_while2_a: Dovrai fare un solo movimento per arrivare alla buca.
        courseD_farmer_while2_b: Sarà necessario il blocco `riempi 1` per sei volte.
          Riesci ad usare un ciclo per rendere tutto più semplice?
      courseD_farmer_while2_2018:
        courseD_farmer_while2_a: Dovrai fare un solo movimento per arrivare alla buca.
        courseD_farmer_while2_b: Sarà necessario il blocco `riempi 1` per sei volte.
          Riesci ad usare un ciclo per rendere tutto più semplice?
      courseD_farmer_while2_2019:
        courseD_farmer_while2_a: Dovrai fare un solo movimento per arrivare alla buca.
        courseD_farmer_while2_b: Sarà necessario il blocco `riempi 1` per sei volte.
          Riesci ad usare un ciclo per rendere tutto più semplice?
      courseD_farmer_while3:
        courseD_farmer_while3_a: Un ciclo può aiutarti a semplificare il programma.
        courseD_farmer_while3_b: Non dovrebbe servire alcun blocco `gira a ...` per
          arrivare fino al mucchio.
      courseD_farmer_while3_2018:
        courseD_farmer_while3_a: Un ciclo può aiutarti a semplificare il programma.
        courseD_farmer_while3_b: Non dovrebbe servire alcun blocco `gira a ...` per
          arrivare fino al mucchio.
      courseD_farmer_while3_2019:
        courseD_farmer_while3_a: Un ciclo può aiutarti a semplificare il programma.
        courseD_farmer_while3_b: Non dovrebbe servire alcun blocco `gira a ...` per
          arrivare fino al mucchio.
      courseD_farmer_while4:
        courseD_farmer_conditionals4_a: Invece di usare un ciclo `ripeti ... volte`,
          usa un ciclo `mentre` per far spalare fino a quando il mucchio è terminato.
        courseD_farmer_conditionals4_b: Sembra molto simile ad un esercizio precedente,
          l'unica differenza è nel ciclo da usare.
      courseD_farmer_while4_2018:
        courseD_farmer_conditionals4_a: Invece di usare un ciclo `ripeti ... volte`,
          usa un ciclo `mentre` per far spalare fino a quando il mucchio è terminato.
        courseD_farmer_conditionals4_b: Sembra molto simile ad un esercizio precedente,
          l'unica differenza è nel ciclo da usare.
      courseD_farmer_while4_2019:
        courseD_farmer_conditionals4_a: Invece di usare un ciclo `ripeti ... volte`,
          usa un ciclo `mentre` per far spalare fino a quando il mucchio è terminato.
        courseD_farmer_conditionals4_b: Sembra molto simile ad un esercizio precedente,
          l'unica differenza è nel ciclo da usare.
      courseD_farmer_while5:
        courseD_farmer_conditionals5a_a: Prova ad inserire un ciclo `mentre` all'interno
          di un ciclo `ripeti ... volte`.
        courseD_farmer_conditionals5a_b: La contadina deve andare avanti 5 volte per
          arrivare alla fine della riga. Cos'altro deve fare la contadina?
        courseD_farmer_conditionals5a_c: Vai avanti cinque volte. Ogni volta che vai
          avanti, rimuovi i mucchi di terra usando il blocco `mentre c'è un mucchio`.
      courseD_farmer_while5_2018:
        courseD_farmer_conditionals5a_a: Prova ad inserire un ciclo `mentre` all'interno
          di un ciclo `ripeti ... volte`.
        courseD_farmer_conditionals5a_b: La contadina deve andare avanti 5 volte per
          arrivare alla fine della riga. Cos'altro deve fare la contadina?
        courseD_farmer_conditionals5a_c: Vai avanti cinque volte. Ogni volta che vai
          avanti, rimuovi i mucchi di terra usando il blocco `mentre c'è un mucchio`.
      courseD_farmer_while5_2019:
        courseD_farmer_conditionals5a_a: Prova ad inserire un ciclo `mentre` all'interno
          di un ciclo `ripeti ... volte`.
        courseD_farmer_conditionals5a_b: La contadina deve andare avanti 5 volte per
          arrivare alla fine della riga. Cos'altro deve fare la contadina?
        courseD_farmer_conditionals5a_c: Vai avanti cinque volte. Ogni volta che vai
          avanti, rimuovi i mucchi di terra usando il blocco `mentre c'è un mucchio`.
      courseD_farmer_while6:
        courseD_farmer_conditionals6_a: Assicurati di usare il ciclo `mentre` per
          riempire ogni buca indipendentemente dal numero di palate che servono.
        courseD_farmer_conditionals6_b: Nota che la contadina deve andare avanti e
          girare diverse volte in questo schema a scalinata.
        courseD_farmer_conditionals6_c: |-
          Lo schema a scalinata è realizzato da questi blocchi:

          -   vai avanti
          -   riempi la buca
          -   gira a destra
          -   vai avanti
          -   riempi la buca
          -   gira a sinistra

          Quante volte devi usare questo schema a scalinata?

          Assicurarti di usare il blocco `mentre c'è una buca` per riempire le buche.
      courseD_farmer_while6_2018:
        courseD_farmer_conditionals6_a: Assicurati di usare il ciclo `mentre` per
          riempire ogni buca indipendentemente dal numero di palate che servono.
        courseD_farmer_conditionals6_b: Nota che la contadina deve andare avanti e
          girare diverse volte in questo schema a scalinata.
        courseD_farmer_conditionals6_c: |-
          Lo schema a scalinata è realizzato da questi blocchi:

          -   vai avanti
          -   riempi la buca
          -   gira a destra
          -   vai avanti
          -   riempi la buca
          -   gira a sinistra

          Quante volte devi usare questo schema a scalinata?

          Assicurarti di usare il blocco `mentre c'è una buca` per riempire le buche.
      courseD_farmer_while6_2019:
        courseD_farmer_conditionals6_a: Assicurati di usare il ciclo `mentre` per
          riempire ogni buca indipendentemente dal numero di palate che servono.
        courseD_farmer_conditionals6_b: Nota che la contadina deve andare avanti e
          girare diverse volte in questo schema a scalinata.
        courseD_farmer_conditionals6_c: |-
          Lo schema a scalinata è realizzato da questi blocchi:

          -   vai avanti
          -   riempi la buca
          -   gira a destra
          -   vai avanti
          -   riempi la buca
          -   gira a sinistra

          Quante volte devi usare questo schema a scalinata?

          Assicurarti di usare il blocco `mentre c'è una buca` per riempire le buche.
      courseD_farmer_while7:
        courseD_farmer_conditionals8_a: Il blocco `mentre c'è strada in avanti` ti
          permette di andare avanti, anche se non sai quante caselle devi percorrere.
        courseD_farmer_conditionals8_b: In questo esercizio, può essere utile mettere
          un ciclo `mentre c'è strada in avanti` all'interno di un ciclo `ripeti ...
          volte`.
        courseD_farmer_conditionals8_c: Che cosa dovresti fare alla fine di ogni tratto?
      courseD_farmer_while7_2018:
        courseD_farmer_conditionals8_a: Il blocco `mentre c'è strada in avanti` ti
          permette di andare avanti, anche se non sai quante caselle devi percorrere.
        courseD_farmer_conditionals8_b: In questo esercizio, può essere utile mettere
          un ciclo `mentre c'è strada in avanti` all'interno di un ciclo `ripeti ...
          volte`.
        courseD_farmer_conditionals8_c: Che cosa dovresti fare alla fine di ogni tratto?
      courseD_farmer_while7_2019:
        courseD_farmer_conditionals8_a: Il blocco `mentre c'è strada in avanti` ti
          permette di andare avanti, anche se non sai quante caselle devi percorrere.
        courseD_farmer_conditionals8_b: In questo esercizio, può essere utile mettere
          un ciclo `mentre c'è strada in avanti` all'interno di un ciclo `ripeti ...
          volte`.
        courseD_farmer_conditionals8_c: Che cosa dovresti fare alla fine di ogni tratto?
      courseD_farmer_while8:
        courseD_farmer_conditionals8_a: Avrai bisogno di usare più di un ciclo `mentre`.
        courseD_farmer_conditionals8_b: Ogni buca è alla fine di un tratto di percorso,
          quindi usa il blocco `mentre c'è strada in avanti` prima di usare il ciclo
          `mentre c'è una buca`.
        courseD_farmer_conditionals8_c: Nota che devi ripetere sei volte la sequenza
          `mentre c'è strada in avanti` + `mentre c'è una buca`.
      courseD_farmer_while8_2018:
        courseD_farmer_conditionals8_a: Avrai bisogno di usare più di un ciclo `mentre`.
        courseD_farmer_conditionals8_b: Ogni buca è alla fine di un tratto di percorso,
          quindi usa il blocco `mentre c'è strada in avanti` prima di usare il ciclo
          `mentre c'è una buca`.
        courseD_farmer_conditionals8_c: Nota che devi ripetere sei volte la sequenza
          `mentre c'è strada in avanti` + `mentre c'è una buca`.
      courseD_farmer_while8_2019:
        courseD_farmer_conditionals8_a: Avrai bisogno di usare più di un ciclo `mentre`.
        courseD_farmer_conditionals8_b: Ogni buca è alla fine di un tratto di percorso,
          quindi usa il blocco `mentre c'è strada in avanti` prima di usare il ciclo
          `mentre c'è una buca`.
        courseD_farmer_conditionals8_c: Nota che devi ripetere sei volte la sequenza
          `mentre c'è strada in avanti` + `mentre c'è una buca`.
      courseD_farmer_while_challenge1:
        courseD_farmer_while_challenge1_a: Le buche e i mucchi si trovano sempre una
          casella **prima** della fine del percorso.
        courseD_farmer_while_challenge1_b: Usando un ciclo `mentre`, puoi dire alla
          contadina di rimuovere un mucchio o riempire una buca, anche se non c'è.
          Ciò significa che è possibile programmarla per rimuovere qualsiasi mucchio
          o riempire qualsiasi buca, dovunque lei sia.
        courseD_farmer_conditionals8_c: È possibile risolvere questo esercizio senza
          usare alcun blocco `ripeti ... volte`. Per farlo, avrai bisogno di usare
          quattro cicli `mentre`.
      courseD_farmer_while_challenge1_2018:
        courseD_farmer_while_challenge1_a: Le buche e i mucchi si trovano sempre una
          casella **prima** della fine del percorso.
        courseD_farmer_while_challenge1_b: Usando un ciclo `mentre`, puoi dire alla
          contadina di rimuovere un mucchio o riempire una buca, anche se non c'è.
          Ciò significa che è possibile programmarla per rimuovere qualsiasi mucchio
          o riempire qualsiasi buca, dovunque lei sia.
        courseD_farmer_conditionals8_c: È possibile risolvere questo esercizio senza
          usare alcun blocco `ripeti ... volte`. Per farlo, avrai bisogno di usare
          quattro cicli `mentre`.
      courseD_farmer_while_challenge1_2019:
        courseD_farmer_while_challenge1_a: Le buche e i mucchi si trovano sempre una
          casella **prima** della fine del percorso.
        courseD_farmer_while_challenge1_b: Usando un ciclo `mentre`, puoi dire alla
          contadina di rimuovere un mucchio o riempire una buca, anche se non c'è.
          Ciò significa che è possibile programmarla per rimuovere qualsiasi mucchio
          o riempire qualsiasi buca, dovunque lei sia.
        courseD_farmer_conditionals8_c: È possibile risolvere questo esercizio senza
          usare alcun blocco `ripeti ... volte`. Per farlo, avrai bisogno di usare
          quattro cicli `mentre`.
      courseD_farmer_while_challenge2:
        courseD_farmer_while_challenge1_a: Le buche e i mucchi si trovano sempre una
          casella **prima** della fine del percorso.
        courseD_farmer_while_challenge1_b: Usando un ciclo `mentre`, puoi dire alla
          contadina di rimuovere un mucchio o riempire una buca, anche se non c'è.
          Ciò significa che è possibile programmarla per rimuovere qualsiasi mucchio
          o riempire qualsiasi buca, dovunque lei sia.
        courseD_farmer_conditionals8_c: È possibile risolvere questo esercizio senza
          usare alcun blocco `ripeti ... volte`. Per farlo, avrai bisogno di usare
          quattro cicli `mentre`.
      courseD_harvester_nested_loops_challenge1:
        courseD_harvester_nested_loops_challenge1_a: 'Prova a seguire questo percorso
          per raggiungere tutte le pannocchie! '
        courseD_harvester_nested_loops_challenge1_b: Per raccogliere più di una pannocchia,
          devi usare più volte il blocco `prendi pannocchia`.
        courseD_harvester_nested_loops_challenge1_c: Per risolvere questo esercizio,
          avrai bisogno di mettere un piccolo ciclo all'interno del ciclo principale!
      courseD_harvester_nested_loops_challenge1_2018:
        courseD_harvester_nested_loops_challenge1_a: 'Prova a seguire questo percorso
          per raggiungere tutte le pannocchie! '
        courseD_harvester_nested_loops_challenge1_b: Per raccogliere più di una pannocchia,
          devi usare più volte il blocco `prendi pannocchia`.
        courseD_harvester_nested_loops_challenge1_c: Per risolvere questo esercizio,
          avrai bisogno di mettere un piccolo ciclo all'interno del ciclo principale!
      courseD_harvester_nested_loops_challenge1_2019:
        courseD_harvester_nested_loops_challenge1_a: 'Prova a seguire questo percorso
          per raggiungere tutte le pannocchie! '
        courseD_harvester_nested_loops_challenge1_b: Per raccogliere più di una pannocchia,
          devi usare più volte il blocco `prendi pannocchia`.
        courseD_harvester_nested_loops_challenge1_c: Per risolvere questo esercizio,
          avrai bisogno di mettere un piccolo ciclo all'interno del ciclo principale!
      courseD_iceage_loops1:
        courseD_iceage_loops1_a: Stai attento al ghiaccio rotto! Se Scrat ci andrà
          sopra, cadrà in acqua!
        courseD_iceage_loops1_b: |-
          Dovrai usare questo blocco:

          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops10:
        courseB_iceage_loops10_a: Stai attento al ghiaccio rotto! Se Scrat ci andrà
          sopra, cadrà in acqua!
        courseB_iceage_loops10_b: Prova a pronunciare i passaggi ad alta voce o a
          scriverli su un foglio di carta. Noti degli schemi che si ripetono?
        courseB_iceage_loops10_c: Questa volta il percorso è lungo! Segui questa traccia.
      courseD_iceage_loops10_2019:
        courseB_iceage_loops10_a: Stai attento al ghiaccio rotto! Se Scrat ci andrà
          sopra, cadrà in acqua!
        courseB_iceage_loops10_b: Prova a pronunciare i passaggi ad alta voce o a
          scriverli su un foglio di carta. Noti degli schemi che si ripetono?
        courseB_iceage_loops10_c: Questa volta il percorso è lungo! Segui questa traccia.
      courseD_iceage_loops1_2019:
        courseD_iceage_loops1_a: Stai attento al ghiaccio rotto! Se Scrat ci andrà
          sopra, cadrà in acqua!
        courseD_iceage_loops1_b: |-
          Dovrai usare questo blocco:

          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops2:
        courseD_iceage_loops2_a: 'Dividi questo esercizio in due parti: una prima
          dell''angolo e l''altra dopo.'
        courseD_iceage_loops2_b: Se ti blocchi, prova a pronunciare ad alta voce i
          vari passaggi.
        courseD_iceage_loops2_c: Segui questo percorso per far arrivare Scrat fino
          alla ghianda.
      courseD_iceage_loops2_2019:
        courseD_iceage_loops2_a: 'Dividi questo esercizio in due parti: una prima
          dell''angolo e l''altra dopo.'
        courseD_iceage_loops2_b: Se ti blocchi, prova a pronunciare ad alta voce i
          vari passaggi.
        courseD_iceage_loops2_c: Segui questo percorso per far arrivare Scrat fino
          alla ghianda.
      courseD_iceage_loops3:
        courseB_iceage_loops3_a: |-
          Prova ad usare un ciclo! <xml><block type="controls_repeat_dropdown">
              <title name="TIMES" config="2-10">5</title>
            </block></xml>
        courseB_iceage_loops3_b: Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco `ripeti ... volte` e inserisci al suo interno
          i blocchi che vuoi ripetere.
      courseD_iceage_loops3_2019:
        courseB_iceage_loops3_a: |-
          Usa questo nuovo blocco!

           <xml><block type="controls_repeat_dropdown">
              <title name="TIMES" config="2-10">5</title>
            </block></xml>
        courseB_iceage_loops3_b: Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco `ripeti ... volte` e inserisci al suo interno
          i blocchi che vuoi ripetere.
      courseD_iceage_loops4:
        courseD_iceage_loops4_a: Non aver paura di eseguire il programma e guarda
          cosa succede!
        courseD_iceage_loops4_b: Prova a scrivere i passaggi necessari per fare in
          modo che Scrat raggiunga la ghianda. Noti uno schema che si ripete?
        courseD_iceage_loops4_c: Questo è il percorso che Scrat dovrebbe seguire.
      courseD_iceage_loops4_2019:
        courseD_iceage_loops4_a: Non aver paura di eseguire il programma e guarda
          cosa succede!
        courseD_iceage_loops4_b: Prova a scrivere i passaggi necessari per fare in
          modo che Scrat raggiunga la ghianda. Noti uno schema che si ripete?
        courseD_iceage_loops4_c: Questo è il percorso che Scrat dovrebbe seguire.
      courseD_iceage_loops6:
        courseD_iceage_loops6_a: Il programma finale dovrebbe usare **tre** blocchi
          `vai avanti`.
        courseD_iceage_loops6_b: Devi aggiungere solo **un** altro ciclo!
        courseD_iceage_loops6_c: Il percorso finale dovrebbe essere questo.
      courseD_iceage_loops6_2019:
        courseD_iceage_loops6_a: Il programma finale dovrebbe usare **tre** blocchi
          `vai avanti`.
        courseD_iceage_loops6_b: Devi aggiungere solo **un** altro ciclo!
        courseD_iceage_loops6_c: Il percorso finale dovrebbe essere questo.
      courseD_iceage_loops7:
        courseB_iceage_loops7_a: Se ti blocchi, prova a scrivere i passaggi su un
          pezzo di carta. Vedi uno schema che si ripete?
        courseB_iceage_loops7_b: Questo è il percorso che Scrat dovrebbe seguire per
          raggiungere la ghianda.
      courseD_iceage_loops7_2019:
        courseB_iceage_loops7_a: Se ti blocchi, prova a scrivere i passaggi su un
          pezzo di carta. Vedi uno schema che si ripete?
        courseB_iceage_loops7_b: Questo è il percorso che Scrat dovrebbe seguire per
          raggiungere la ghianda.
      courseD_iceage_loops8:
        courseD_iceage_loops8_a: I blocchi `gira a ...` sono corretti? Cos'altro potresti
          cambiare?
        courseD_iceage_loops8_b: Il primo ciclo dovrebbe ripetersi **3** volte, il
          secondo dovrebbe ripetersi **5** volte, il terzo dovrebbe ripetersi **4**
          volte e anche l'ultimo **4** volte.
        courseD_iceage_loops8_c: Usa i cicli per aiutare Scrat a seguire questo percorso.
      courseD_iceage_loops8_2019:
        courseD_iceage_loops8_a: I blocchi `gira a ...` sono corretti? Cos'altro potresti
          cambiare?
        courseD_iceage_loops8_b: Il primo ciclo dovrebbe ripetersi **3** volte, il
          secondo dovrebbe ripetersi **5** volte, il terzo dovrebbe ripetersi **4**
          volte e anche l'ultimo **4** volte.
        courseD_iceage_loops8_c: Usa i cicli per aiutare Scrat a seguire questo percorso.
      courseD_iceage_loops9:
        courseD_iceage_loops9_a: Hai difficoltà? Prova a suddividere questo esercizio
          in parti più piccole. Non aver paura di eseguire il codice man mano che
          procedi!
        courseD_iceage_loops9_b: Il programma finale dovrebbe avere **4** cicli.
        courseD_iceage_loops9_c: Scrat dovrebbe seguire questo percorso per raggiungere
          la ghianda.
      courseD_iceage_loops9_2019:
        courseD_iceage_loops9_a: Hai difficoltà? Prova a suddividere questo esercizio
          in parti più piccole. Non aver paura di eseguire il codice man mano che
          procedi!
        courseD_iceage_loops9_b: Il programma finale dovrebbe avere **4** cicli.
        courseD_iceage_loops9_c: Scrat dovrebbe seguire questo percorso per raggiungere
          la ghianda.
      courseD_maze_intro4_2019:
        courseC_maze_programming4_a: Puoi girare a destra o a sinistra dal punto di
          vista di Scrat. Se Scrat è rivolto verso destra, girare a destra significa
          dirigersi verso la parte bassa dello schermo.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          la ghianda, vai ancora una volta avanti.
      courseD_maze_intro5a_2019:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_nestedLoops3:
        courseD_maze_nestedLoops3_a: Per risolvere questo esercizio, devi annidare
          un ciclo `ripeti ... volte` all'interno di un altro ciclo `ripeti ... volte`.
        courseD_maze_nestedLoops3_b: Non riesci a capire dove posizionare i cicli?
          Prova a scrivere il codice un passo per volta e cerca di individuare uno
          schema.
        courseD_maze_nestedLoops3_c: Prova a scrivere il codice per completare un
          tratto dritto di percorso e una curva. Puoi ripetere questo schema per arrivare
          fino al girasole?
      courseD_maze_nestedLoops3_2018:
        courseD_maze_nestedLoops3_a: Per risolvere questo esercizio, devi annidare
          un ciclo `ripeti ... volte` all'interno di un altro ciclo `ripeti ... volte`.
        courseD_maze_nestedLoops3_b: Non riesci a capire dove posizionare i cicli?
          Prova a scrivere il codice un passo per volta e cerca di individuare uno
          schema.
        courseD_maze_nestedLoops3_c: Prova a scrivere il codice per completare un
          tratto dritto di percorso e una curva. Puoi ripetere questo schema per arrivare
          fino al girasole?
      courseD_maze_nestedLoops3_2019:
        courseD_maze_nestedLoops3_a: Per risolvere questo esercizio, devi annidare
          un ciclo `ripeti ... volte` all'interno di un altro ciclo `ripeti ... volte`.
        courseD_maze_nestedLoops3_b: Non riesci a capire dove posizionare i cicli?
          Prova a scrivere il codice un passo per volta e cerca di individuare uno
          schema.
        courseD_maze_nestedLoops3_c: Prova a scrivere il codice per completare un
          tratto dritto di percorso e una curva. Puoi ripetere questo schema per arrivare
          fino al girasole?
      courseD_maze_nestedLoops4:
        courseD_maze_nestedLoops4_a: |-
          Prova a seguire questo percorso per attraversare il labirinto.

          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: Se fai fatica a capire lo schema che si ripete,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di vedere quali sono le parti che si ripetono per inserirle nel blocco
          `ripeti ... volte`.
        courseD_maze_nestedLoops4_c: Prova ad usare un ciclo `ripeti ... volte` all'interno
          di un altro per ridurre la quantità di blocchi che ti servono.
      courseD_maze_nestedLoops4_2018:
        courseD_maze_nestedLoops4_a: |-
          Prova a seguire questo percorso per attraversare il labirinto.

          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: Se fai fatica a capire lo schema che si ripete,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di vedere quali sono le parti che si ripetono per inserirle nel blocco
          `ripeti ... volte`.
        courseD_maze_nestedLoops4_c: Prova ad usare un ciclo `ripeti ... volte` all'interno
          di un altro per ridurre la quantità di blocchi che ti servono.
      courseD_maze_nestedLoops4_2019:
        courseD_maze_nestedLoops4_a: |-
          Prova a seguire questo percorso per attraversare il labirinto.

          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: Se fai fatica a capire lo schema che si ripete,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di vedere quali sono le parti che si ripetono per inserirle nel blocco
          `ripeti ... volte`.
        courseD_maze_nestedLoops4_c: Prova ad usare un ciclo `ripeti ... volte` all'interno
          di un altro per ridurre la quantità di blocchi che ti servono.
      courseD_maze_nestedLoops5:
        courseD_maze_nestedLoops5_a: Cerca di individuare uno schema a scalinata in
          questo labirinto per capire dove puoi usare un ciclo annidato.
        courseD_maze_nestedLoops5_b: Non riesci a capire dove posizionare i cicli?
          Prova a scrivere il codice un passo per volta e cerca di individuare uno
          schema.
      courseD_maze_nestedLoops5_2018:
        courseD_maze_nestedLoops5_a: Cerca di individuare uno schema a scalinata in
          questo labirinto per capire dove puoi usare un ciclo annidato.
        courseD_maze_nestedLoops5_b: Non riesci a capire dove posizionare i cicli?
          Prova a scrivere il codice un passo per volta e cerca di individuare uno
          schema.
      courseD_maze_nestedLoops5_2019:
        courseD_maze_nestedLoops5_a: Cerca di individuare uno schema a scalinata in
          questo labirinto per capire dove puoi usare un ciclo annidato.
        courseD_maze_nestedLoops5_b: Non riesci a capire dove posizionare i cicli?
          Prova a scrivere il codice un passo per volta e cerca di individuare uno
          schema.
      courseD_maze_nestedLoops6:
        courseD_maze_nestedLoops6_a: Se fai fatica a capire lo schema che si ripete,
          prova prima a risolvere l'esercizio senza usare cicli, poi cerca di vedere
          quali sono le parti che si ripetono per inserirle nel blocco `ripeti ...
          volte`.
        courseD_maze_nestedLoops6_b: Annidare i cicli `ripeti ... volte` aiuta a ridurre
          il numero di blocchi usati.
        courseD_maze_nestedLoops6_c: Avrai bisogno di due serie di cicli annidati
          `ripeti ... volte` per risolvere questo esercizio.
      courseD_maze_nestedLoops6_2018:
        courseD_maze_nestedLoops6_a: Se fai fatica a capire lo schema che si ripete,
          prova prima a risolvere l'esercizio senza usare cicli, poi cerca di vedere
          quali sono le parti che si ripetono per inserirle nel blocco `ripeti ...
          volte`.
        courseD_maze_nestedLoops6_b: Annidare i cicli `ripeti ... volte` aiuta a ridurre
          il numero di blocchi usati.
        courseD_maze_nestedLoops6_c: Avrai bisogno di due serie di cicli annidati
          `ripeti ... volte` per risolvere questo esercizio.
      courseD_maze_nestedLoops6_2019:
        courseD_maze_nestedLoops6_a: Se fai fatica a capire lo schema che si ripete,
          prova prima a risolvere l'esercizio senza usare cicli, poi cerca di vedere
          quali sono le parti che si ripetono per inserirle nel blocco `ripeti ...
          volte`.
        courseD_maze_nestedLoops6_b: Annidare i cicli `ripeti ... volte` aiuta a ridurre
          il numero di blocchi usati.
        courseD_maze_nestedLoops6_c: Avrai bisogno di due serie di cicli annidati
          `ripeti ... volte` per risolvere questo esercizio.
      courseD_maze_ramp1:
        courseC_maze_programming1_a: Se l'uccellino non riesce a prendere il maialino,
          controlla che tutti e tre i blocchi siano collegati insieme, quindi clicca
          nuovamente su "Esegui".
        courseC_maze_programming1_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp1_2018:
        courseC_maze_programming1_a: Se l'uccellino non riesce a prendere il maialino,
          controlla che tutti e tre i blocchi siano collegati insieme, quindi clicca
          nuovamente su "Esegui".
        courseC_maze_programming1_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp1_2019:
        courseC_maze_programming1_a: Se l'uccellino non riesce a prendere il maialino,
          controlla che tutti e tre i blocchi siano collegati insieme, quindi clicca
          nuovamente su "Esegui".
        courseC_maze_programming1_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp2:
        courseC_maze_programming2_a: Per usare un blocco `vai avanti`, trascinalo
          dalla cassetta degli attrezzi nell'area di lavoro e collegalo al blocco
          `quando si clicca su "Esegui"`.
        courseC_maze_programming2_b: Controlla che tutti e 3 i blocchi siano collegati
          insieme e fissati al blocco `quando si clicca su "Esegui"`.
      courseD_maze_ramp2_2018:
        courseC_maze_programming2_a: Per usare un blocco `vai avanti`, trascinalo
          dalla cassetta degli attrezzi nell'area di lavoro e collegalo al blocco
          `quando si clicca su "Esegui"`.
        courseC_maze_programming2_b: Controlla che tutti e 3 i blocchi siano collegati
          insieme e fissati al blocco `quando si clicca su "Esegui"`.
      courseD_maze_ramp2_2019:
        courseC_maze_programming2_a: Per usare un blocco `vai avanti`, trascinalo
          dalla cassetta degli attrezzi nell'area di lavoro e collegalo al blocco
          `quando si clicca su "Esegui"`.
        courseC_maze_programming2_b: Controlla che tutti e 3 i blocchi siano collegati
          insieme e fissati al blocco `quando si clicca su "Esegui"`.
      courseD_maze_ramp3:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseD_maze_ramp3_2018:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseD_maze_ramp3_2019:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseD_maze_ramp4:
        courseC_maze_programming4_a: Puoi girare a destra o a sinistra dal punto di
          vista dell'uccellino. Se l'uccellino è rivolto verso destra, girare a destra
          significa dirigersi verso il basso.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          il maialino, vai ancora una volta avanti.
      courseD_maze_ramp4_2018:
        courseC_maze_programming4_a: Puoi girare a destra o a sinistra dal punto di
          vista dell'uccellino. Se l'uccellino è rivolto verso destra, girare a destra
          significa dirigersi verso il basso.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          il maialino, vai ancora una volta avanti.
      courseD_maze_ramp4_2019:
        courseC_maze_programming4_a: Puoi girare a destra o a sinistra dal punto di
          vista di Scrat. Se Scrat è rivolto verso destra, girare a destra significa
          dirigersi verso la parte bassa dello schermo.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          la ghianda, vai ancora una volta avanti.
      courseD_maze_ramp5:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp5_2018:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp5_2019:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp5a:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp5a_2018:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp5a_2019:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp5b:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp5b_2018:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp5b_2019:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_maze_ramp6:
        courseC_maze_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseC_maze_programming6_b: All'inizio l'uccellino è rivolto verso un muro,
          quindi ricordati di girare prima di muoverti.
        courseC_maze_programming6_c: Ricorda che puoi scrivere un pezzo di codice
          alla volta e poi eseguirlo per capire come devi procedere dal punto in cui
          sei arrivato.
      courseD_maze_ramp7:
        courseD_maze_ramp7_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseD_maze_ramp7_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
        courseD_maze_ramp7_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseD_maze_until1:
        courseD_maze_until1_a: C'è qualche sequenza che si ripete da inserire in un
          ciclo per rendere il programma più breve?
        courseD_maze_until1_b: Prova a risolvere l'esercizio usando dei cicli annidati.
      courseD_maze_until1_2018:
        courseD_maze_until1_a: C'è qualche sequenza che si ripete da inserire in un
          ciclo per rendere il programma più breve?
        courseD_maze_until1_b: Prova a risolvere l'esercizio usando dei cicli annidati.
      courseD_maze_until1_2019:
        courseD_maze_until1_a: C'è qualche sequenza che si ripete da inserire in un
          ciclo per rendere il programma più breve?
        courseD_maze_until1_b: Prova a risolvere l'esercizio usando dei cicli annidati.
      courseD_maze_until3:
        courseD_maze_until3_a: |-
          -   Cosa fa il tuo programma?
          -   Che cosa dovrebbe fare?
          -   Che cosa ti suggerisce questo?
        courseD_maze_until3_b: Se ti sei bloccato, prova a scrivere i passaggi su
          un foglio di carta e cerca degli schemi che si ripetono.
        courseD_maze_until3_c: Puoi seguire uno schema a scalinata per risolvere questo
          esercizio?
        courseD_maze_until3_d: Non dimenticare di usare il blocco `ripeti fino a che`
          per rendere il tuo programma più breve.
      courseD_maze_until3_2018:
        courseD_maze_until3_a: |-
          -   Cosa fa il tuo programma?
          -   Che cosa dovrebbe fare?
          -   Che cosa ti suggerisce questo?
        courseD_maze_until3_b: Se ti sei bloccato, prova a scrivere i passaggi su
          un foglio di carta e cerca degli schemi che si ripetono.
        courseD_maze_until3_c: Puoi seguire uno schema a scalinata per risolvere questo
          esercizio?
        courseD_maze_until3_d: Non dimenticare di usare il blocco `ripeti fino a che`
          per rendere il tuo programma più breve.
      courseD_maze_until3_2019:
        courseD_maze_until3_a: |-
          -   Cosa fa il tuo programma?
          -   Che cosa dovrebbe fare?
          -   Che cosa ti suggerisce questo?
        courseD_maze_until3_b: Se ti sei bloccato, prova a scrivere i passaggi su
          un foglio di carta e cerca degli schemi che si ripetono.
        courseD_maze_until3_c: Puoi seguire uno schema a scalinata per risolvere questo
          esercizio?
        courseD_maze_until3_d: Non dimenticare di usare il blocco `ripeti fino a che`
          per rendere il tuo programma più breve.
      courseD_maze_until4:
        courseD_maze_until4_a: |-
          Usa il pulsante "Fai un passo" per analizzare il tuo programma un blocco alla volta.

          -   Al primo passo tutto procede bene?
          -   E al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseD_maze_until4_b: Puoi seguire uno schema a scalinata per risolvere questo
          esercizio?
        courseD_maze_until4_c: Non dimenticare di usare il blocco `ripeti fino a che`
          per rendere il tuo programma più breve.
      courseD_maze_until4_2018:
        courseD_maze_until4_a: |-
          Usa il pulsante "Fai un passo" per analizzare il tuo programma un blocco alla volta.

          -   Al primo passo tutto procede bene?
          -   E al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseD_maze_until4_b: Puoi seguire uno schema a scalinata per risolvere questo
          esercizio?
        courseD_maze_until4_c: Non dimenticare di usare il blocco `ripeti fino a che`
          per rendere il tuo programma più breve.
      courseD_maze_until4_2019:
        courseD_maze_until4_a: |-
          Usa il pulsante "Fai un passo" per analizzare il tuo programma un blocco alla volta.

          -   Al primo passo tutto procede bene?
          -   E al secondo?
          -   Dov'è che qualcosa comincia a non funzionare?
        courseD_maze_until4_b: Puoi seguire uno schema a scalinata per risolvere questo
          esercizio?
        courseD_maze_until4_c: Non dimenticare di usare il blocco `ripeti fino a che`
          per rendere il tuo programma più breve.
      courseD_maze_until5:
        courseD_maze_until5_a: Non dimenticare di usare l'istruzione condizionale
          `se c'è strada a sinistra` per far in modo che lo zombie continui a cercare
          il punto in cui girare.
        courseD_maze_until5_b: Per usare un solo blocco `vai avanti`, mettilo dentro
          a un blocco `ripeti fino a che`.
        courseD_maze_until5_c: Dopo ogni passo, lo zombie dovrebbe controllare se
          c'è un percorso verso sinistra. Cosa dovrebbe fare se lo trova?
      courseD_maze_until5_2018:
        courseD_maze_until5_b: Per usare un solo blocco `vai avanti`, mettilo dentro
          a un blocco `ripeti fino a che`.
      courseD_maze_until5_2019:
        courseD_maze_until5_b: Per usare un solo blocco `vai avanti`, mettilo dentro
          a un blocco `ripeti fino a che`.
      courseD_maze_until6:
        courseD_maze_until6_a: Questa volta, per mantenere lo zombie sul percorso
          corretto, prova ad usare il blocco `se c'è strada a destra`.
        courseD_maze_until6_b: Per usare un solo blocco `vai avanti`, mettilo dentro
          a un blocco `ripeti fino a che`.
        courseD_maze_until6_c: Anche se qui ci sono più curve rispetto all'ultimo
          esercizio, il programma può essere quasi identico, grazie al blocco `ripeti
          fino a che`!
      courseD_maze_until6_2018:
        courseD_maze_until6_b: Per usare un solo blocco `vai avanti`, mettilo dentro
          a un blocco `ripeti fino a che`.
      courseD_maze_until6_2019:
        courseD_maze_until6_b: Per usare un solo blocco `vai avanti`, mettilo dentro
          a un blocco `ripeti fino a che`.
      courseD_maze_until7:
        courseD_maze_until7_a: Non c'è bisogno che il tuo programma sia più lungo
          dell'ultima volta, solo perché il labirinto lo è!
        courseD_maze_until7_b: Anche se qui ci sono più curve rispetto all'ultimo
          esercizio, il programma può essere quasi identico, grazie al blocco `ripeti
          fino a che`!
        courseD_maze_until7_c: Ricordati di cercare strada a sinistra, perché se giri
          a destra finirai in un percorso sbagliato!
      courseD_maze_until7_2018:
        courseD_maze_until7_a: Non c'è bisogno che il tuo programma sia più lungo
          dell'ultima volta, solo perché il labirinto lo è!
        courseD_maze_until7_b: Anche se qui ci sono più curve rispetto all'ultimo
          esercizio, il programma può essere quasi identico, grazie al blocco `ripeti
          fino a che`!
      courseD_maze_until7_2019:
        courseD_maze_until7_a: Non c'è bisogno che il tuo programma sia più lungo
          dell'ultima volta, solo perché il labirinto lo è!
        courseD_maze_until7_b: Anche se qui ci sono più curve rispetto all'ultimo
          esercizio, il programma può essere quasi identico, grazie al blocco `ripeti
          fino a che`!
      courseD_maze_until8:
        courseD_maze_until8_a: Assicurati di usare il blocco `se/altrimenti` per far
          mantenere allo zombi la direzione corretta.
        courseD_maze_until8_b: 'Con il blocco `se/altrimenti`: se c''è strada in avanti,
          cosa deve fare lo zombi?'
        courseD_maze_until8_c: 'Con il blocco `se/altrimenti`: se non c''è strada
          in avanti, da che parte deve girare lo zombi?'
      courseD_maze_until9:
        courseD_maze_until8_a: L'istruzione condizionale `se c'è strada in avanti`
          ti permetterà di andare avanti quando possibile, aiutandoti a tralasciare
          i percorsi con le piante carnivore.
        courseD_maze_until8_b: In quale direzione dovrebbe girare lo zombie se non
          trova strada in avanti?
        courseD_maze_until8_c: Ricordati di usare il blocco `ripeti fino a che` per
          far arrivare lo zombie fino al girasole!
      courseD_maze_until9_2018:
        courseD_maze_until8_c: Ricordati di usare il blocco `ripeti fino a che` per
          far arrivare lo zombie fino al girasole!
      courseD_maze_until9_2019:
        courseD_maze_until8_c: Ricordati di usare il blocco `ripeti fino a che` per
          far arrivare lo zombie fino al girasole!
      courseD_playLab_cond1:
        courseD_playLab_cond1_a: Per risolvere questa sfida, collega il blocco `sposta
          il personaggio 1 in alto` all'evento `quando si preme sulla freccia verso
          l'alto`, poi fai lo stesso per tutte le altre direzioni.
        courseD_playLab_cond1_b: Usa i menù a discesa (▼) dei blocchi `quando si preme
          sulla freccia ...` e `sposta il personaggio ...` per cambiare la direzione
          verso la quale devono muoversi.
        courseD_playLab_cond1_c: Dopo aver cliccato su "Esegui", ricorda di muovere
          il pirata verso entrambe le bandierine!
      courseD_playLab_cond1_2018:
        courseD_playLab_cond1_a: Per risolvere questa sfida, collega il blocco `sposta
          il personaggio 1 in alto` all'evento `quando si preme sulla freccia verso
          l'alto`, poi fai lo stesso per tutte le altre direzioni.
        courseD_playLab_cond1_b: Usa i menù a discesa (▼) dei blocchi `quando si preme
          sulla freccia ...` e `sposta il personaggio ...` per cambiare la direzione
          verso la quale devono muoversi.
        courseD_playLab_cond1_c: Dopo aver cliccato su "Esegui", ricorda di muovere
          il pirata verso entrambe le bandierine!
      courseD_playLab_cond2:
        courseD_playLab_cond2_a: Per risolvere questo esercizio, usa il blocco `aggiungi
          un punto` sotto al blocco dell'evento `quando il personaggio 1 tocca il
          personaggio 2`.
      courseD_playLab_cond2_2018:
        courseD_playLab_cond2_a: Per risolvere questo esercizio, usa il blocco `aggiungi
          un punto` sotto al blocco dell'evento `quando il personaggio 1 tocca il
          personaggio 2`.
      courseD_playLab_cond3:
        courseD_playLab_cond3_a: Dovrai aggiungere due blocchi al ciclo `ripeti per
          sempre`. Uno per scegliere un umore casuale del drago (personaggio 2) e
          l'altro per attendere 1 secondo prima di ricominciare il ciclo.
      courseD_playLab_cond3_2018:
        courseD_playLab_cond3_a: Dovrai aggiungere due blocchi al ciclo `ripeti per
          sempre`. Uno per scegliere un umore casuale del drago (personaggio 2) e
          l'altro per attendere 1 secondo prima di ricominciare il ciclo.
      courseD_playLab_cond3a:
        courseD_playLab_cond3_c: "-   `Se` il drago è felice \n    -   `aggiungi un
          punto`\n    -   `aggiungi un punto`  \n\n-   `Altrimenti` `aggiungi un punto`"
      courseD_playLab_cond3a_2018:
        courseD_playLab_cond3_c: "-   `Se` il drago è felice \n    -   `aggiungi un
          punto`\n    -   `aggiungi un punto`  \n\n-   `Altrimenti` `aggiungi un punto`"
      courseD_playLab_cond4:
        courseD_playLab_cond4_a: Avrai bisogno di usare l'evento `quando si clicca
          su "Esegui"` per fare in modo che il ninja insegua il pirata dall'inizio
          del gioco.
        courseD_playLab_cond4_b: C'è un blocco speciale chiamato `imponi ad ogni ninja
          mascherato di inseguire il personaggio ...` che terrà il ninja sulle tracce
          del pirata!
        courseD_playLab_cond4_c: Metti il blocco `fine del gioco con una sconfitta`
          sotto l'evento `quando il personaggio 1 tocca il personaggio 3`.
      courseD_playLab_cond4_2018:
        courseD_playLab_cond4_a: Avrai bisogno di usare l'evento `quando si clicca
          su "Esegui"` per fare in modo che il ninja insegua il pirata dall'inizio
          del gioco.
        courseD_playLab_cond4_b: C'è un blocco speciale chiamato `imponi ad ogni ninja
          mascherato di inseguire il personaggio ...` che terrà il ninja sulle tracce
          del pirata!
        courseD_playLab_cond4_c: Metti il blocco `fine del gioco con una sconfitta`
          sotto l'evento `quando il personaggio 1 tocca il personaggio 3`.
      courseD_playLab_cond5:
        courseD_playLab_cond5_a: Per portare a termine questa sfida, usa un'istruzione
          `se` che controlli se il `punteggio > 5`.
        courseD_playLab_cond5_b: Puoi avere più di un ciclo `ripeti per sempre` nella
          tua area di lavoro.
      courseD_playLab_cond5_2018:
        courseD_playLab_cond5_a: Per portare a termine questa sfida, usa un'istruzione
          `se` che controlli se il `punteggio > 5`.
        courseD_playLab_cond5_b: Puoi avere più di un ciclo `ripeti per sempre` nella
          tua area di lavoro.
      courseD_playLab_cond6:
        courseD_playLab_cond6_a: Per rallentare la velocità del ninja, aggiungi all'inizio
          del programma il blocco `imposta la velocità di ogni ninja mascherato a
          ...`.
        courseD_playLab_cond6_b: Per controllare in continuazione se il pirata è al
          di sotto dei polpi, devi usare un blocco `se personaggio 1 posizione y >
          255` all'interno di un ciclo `ripeti per sempre`.
      courseD_playLab_cond6_2018:
        courseD_playLab_cond6_a: Per rallentare la velocità del ninja, aggiungi all'inizio
          del programma il blocco `imposta la velocità di ogni ninja mascherato a
          ...`.
        courseD_playLab_cond6_b: Per controllare in continuazione se il pirata è al
          di sotto dei polpi, devi usare un blocco `se personaggio 1 posizione y >
          255` all'interno di un ciclo `ripeti per sempre`.
      courseD_playLab_cond6a:
        courseD_playLab_cond6_c: Per evitare che i punti siano tolti troppo velocemente,
          aggiungi un blocco `aspetta per 1 secondo` in cima al ciclo `ripeti per
          sempre` che controlla la posizione del pirata (ma, attenzione, non all'interno
          dell'istruzione `se`).
      courseD_playLab_cond6a_2018:
        courseD_playLab_cond6_c: Per evitare che i punti siano tolti troppo velocemente,
          aggiungi un blocco `aspetta per 1 secondo` in cima al ciclo `ripeti per
          sempre` che controlla la posizione del pirata (ma, attenzione, non all'interno
          dell'istruzione `se`).
      courseD_scrat_ramp1:
        courseC_maze_programming1_a: Se Scrat non riesce a prendere la ghianda, controlla
          che tutti e tre i blocchi siano collegati insieme, quindi clicca nuovamente
          su "Esegui".
        courseC_maze_programming1_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_scrat_ramp2:
        courseC_maze_programming2_a: Per usare un blocco `vai avanti`, trascinalo
          dalla cassetta degli attrezzi nell'area di lavoro e collegalo al blocco
          `quando si clicca su "Esegui"`.
        courseC_maze_programming2_b: Controlla che tutti e tre i blocchi `vai avanti`
          siano agganciati al blocco `quando si clicca su "Esegui"`.
      courseD_scrat_ramp3:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
        courseC_maze_programming3_b: Ricorda che le curve a destra e a sinistra devi
          immaginarle dal punto di vista dell'uccellino.
      courseD_scrat_ramp4:
        courseC_maze_programming4_a: Puoi girare a destra o a sinistra dal punto di
          vista di Scrat. Se Scrat è rivolto verso destra, girare a destra significa
          dirigersi verso la parte bassa dello schermo.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          la ghianda, vai ancora una volta avanti.
        courseC_maze_programming4_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_scrat_ramp5:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci a capire cosa devi fare
          dopo?
        courseC_maze_programming5_b: Di quante caselle devi andare avanti per raggiungere
          l'angolo?
        courseC_maze_programming5_c: Una volta raggiunto l'angolo, dovrai girare a
          sinistra per arrivare alla ghianda.
      courseD_scrat_ramp6:
        courseC_maze_programming6a_a: Usa un ciclo `ripeti ... volte` per far muovere
          Scrat!
      courseD_scrat_ramp7:
        courseD_scrat_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseD_scrat_programming6_b: Ricorda di girare prima di muoverti, visto che
          Scrat è rivolto nella direzione sbagliata.
        courseD_scrat_programming6_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseD_scrat_ramp8:
        courseD_maze_ramp7_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseD_maze_ramp7_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
        courseD_maze_ramp7_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseE_artist_concept1:
        courseE_artist_concept1_a: Gli esagoni hanno lati di 50 pixel e si disegnano
          con angoli di 60 gradi verso destra.
        courseE_artist_concept1_b: Prova ad usare una funzione, così non devi riscrivere
          più volte il codice per disegnare un esagono.
        courseE_artist_concept1_c: Per cambiare lo spessore della penna, usa il blocco
          `imposta la larghezza` prima di disegnare ogni esagono.
      courseE_artist_concept1_2018:
        courseE_artist_concept1_a: Gli esagoni hanno lati di 50 pixel e si disegnano
          con angoli di 60 gradi verso destra.
        courseE_artist_concept1_b: Prova ad usare una funzione, così non devi riscrivere
          più volte il codice per disegnare un esagono.
        courseE_artist_concept1_c: Per cambiare lo spessore della penna, usa il blocco
          `imposta la larghezza` prima di disegnare ogni esagono.
      courseE_artist_concept4:
        courseE_artist_concept4_a: Ci sono diversi modi per risolvere questo esercizio.
          Provi a fare un piano?
        courseE_artist_concept4_b: Prova prima a disegnare un quadrato. Poi realizza
          una fila di quadrati. Infine cosa manca?
        courseE_artist_concept4_c: Dopo aver disegnato una fila di quadrati, potresti
          girarti e disegnarne un'altra verso sinistra oppure fare un bel salto indietro
          fino al lato sinistro e disegnare un'altra riga di quadrati verso destra.
          Che metodo preferisci?
      courseE_artist_concept4_2018:
        courseE_artist_concept4_a: Ci sono diversi modi per risolvere questo esercizio.
          Provi a fare un piano?
        courseE_artist_concept4_b: Prova prima a disegnare un quadrato. Poi realizza
          una fila di quadrati. Infine cosa manca?
        courseE_artist_concept4_c: Dopo aver disegnato una fila di quadrati, potresti
          girarti e disegnarne un'altra verso sinistra oppure fare un bel salto indietro
          fino al lato sinistro e disegnare un'altra riga di quadrati verso destra.
          Che metodo preferisci?
      courseE_artist_concept_challenge1:
        courseE_artist_concept_challenge1_a: Nel primo ciclo, per disegnare il mezzo
          esagono, l'artista percorre tratti di **30 pixel** e gira a destra di **60
          gradi**.
        courseE_artist_concept_challenge1_b: Nel secondo ciclo, per disegnare i due
          lati del triangolo, l'artista percorre tratti di **80 pixel** e gira a destra
          di **120 gradi**.
        courseE_artist_concept_challenge1_c: |-
          Questo è lo schema che devi ripetere per realizzare la figura completa:

          ![](<https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png>)
      courseE_artist_concept_challenge1_2018:
        courseE_artist_concept_challenge1_a: Nel primo ciclo, per disegnare il mezzo
          esagono, l'artista percorre tratti di **30 pixel** e gira a destra di **60
          gradi**.
        courseE_artist_concept_challenge1_b: Nel secondo ciclo, per disegnare i due
          lati del triangolo, l'artista percorre tratti di **80 pixel** e gira a destra
          di **120 gradi**.
        courseE_artist_concept_challenge1_c: |-
          Questo è lo schema che devi ripetere per realizzare la figura completa:

          ![](<https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png>)
      courseE_artist_concept_challenge2:
        courseE_artist_concept_challenge2_a: Dopo aver definito una funzione, la puoi
          richiamare più e più volte, ovunque tu voglia!
        courseE_artist_concept_challenge2_b: |-
          Grazie a questo blocco, puoi saltare direttamente in specifici punti della tela:

          <xml>  <block type="jump_to">
              <title name="VALUE">???</title>
            </block></xml>
      courseE_artist_concept_challenge2_2018:
        courseE_artist_concept_challenge2_a: Dopo aver definito una funzione, la puoi
          richiamare più e più volte, ovunque tu voglia!
        courseE_artist_concept_challenge2_b: |-
          Grazie a questo blocco, puoi saltare direttamente in specifici punti della tela:

          <xml>  <block type="jump_to">
              <title name="VALUE">???</title>
            </block></xml>
      courseE_artist_functions1:
        courseE_artist_functions1_a: Le lenti quadrate hanno i lati da 100 pixel,
          questo significa che dovrai muoverti in avanti di 175 pixel prima di disegnare
          la seconda lente.
        courseE_artist_functions1_b: Tieni conto che puoi sempre riscrivere su delle
          linee già tracciate.
        courseE_artist_functions1_c: Per ottenere un programma più breve, prova ad
          usare un ciclo `ripeti ... volte` per disegnare le lenti quadrate.
      courseE_artist_functions10:
        courseD_artist_functions10_b: Questo esercizio in realtà è molto simile al
          precedente, ma ora la funzione `disegna una fila ...` è basata su una forma
          differente.
        courseD_artist_functions10_a: Per evitare di usare più di un blocco `vai avanti`,
          crea la funzione `disegna un esagono` e richiamala tutte le volte che serve.
        courseD_artist_functions10_c: |-
          Riesci a vedere dove puoi usare una funzione denominata `disegna una fila di esagoni`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2018:
        courseD_artist_functions10_b: Questo esercizio in realtà è molto simile al
          precedente, ma ora la funzione `disegna una fila ...` è basata su una forma
          differente.
        courseD_artist_functions10_a: Per evitare di usare più di un blocco `vai avanti`,
          crea la funzione `disegna un esagono` e richiamala tutte le volte che serve.
        courseD_artist_functions10_c: |-
          Riesci a vedere dove puoi usare una funzione denominata `disegna una fila di esagoni`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2019:
        courseD_artist_functions10_b: Questo esercizio in realtà è molto simile al
          precedente, ma ora la funzione `disegna una fila ...` è basata su una forma
          differente.
        courseD_artist_functions10_a: Per evitare di usare più di un blocco `vai avanti`,
          crea la funzione `disegna un esagono` e richiamala tutte le volte che serve.
        courseD_artist_functions10_c: |-
          Riesci a vedere dove puoi usare una funzione denominata `disegna una fila di esagoni`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions2:
        courseD_artist_functions2_b: La funzione che hai scritto non deve contenere
          l'intero programma, ma solo la parte che disegna un quadrato con lati di
          100 pixel.
        courseD_artist_functions2_c: |-
          Per "richiamare" la funzione `disegna un quadrato` usa questo blocco verde:

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="disegna un quadrato"/></block></xml>

          In caso contrario, il codice contenuto nella funzione non verrà mai eseguito.
        courseD_artist_functions2_a: |-
          Il programma deve:

          -   usare la funzione
          -   andare avanti di 100 + 75 pixel
          -   usare la funzione
      courseE_artist_functions2_2018:
        courseD_artist_functions2_b: La funzione non deve contenere l'intero programma,
          ma solo la parte che disegna un singolo quadrato con i lati di 100 pixel.
        courseD_artist_functions2_c: |-
          Per "richiamare" la funzione `disegna un quadrato` usa questo blocco verde:

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>

          In caso contrario, il codice contenuto nella funzione non verrà mai eseguito.
        courseD_artist_functions2_a: |-
          Il programma deve:

          -   usare la funzione
          -   andare avanti di 100 + 75 pixel
          -   usare la funzione
      courseE_artist_functions2_2019:
        courseD_artist_functions2_b: La funzione non deve contenere l'intero programma,
          ma solo la parte che disegna un singolo quadrato con i lati di 100 pixel.
        courseD_artist_functions2_c: |-
          Per "richiamare" la funzione `disegna un quadrato` usa questo blocco verde:

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="disegna un quadrato"/></block></xml>

          In caso contrario, il codice contenuto nella funzione non verrà mai eseguito.
        courseD_artist_functions2_a: |-
          Il programma deve:

          -   usare la funzione
          -   andare avanti di 100 + 75 pixel
          -   usare la funzione
      courseE_artist_functions3:
        courseD_artist_functions3_a: |-
          Per risolvere questo esercizio, basta aggiungere un ciclo che ripeta 8 volte il codice che trovi già pronto.

          Se, dopo alcune prove non ricordi il codice di partenza, fai clic su "Ripristina" in alto a destra nell'area di lavoro.
        courseD_artist_functions3_b: Il ciclo dovrà contenere tutti e 3 i blocchi
          di partenza.
      courseE_artist_functions4:
        courseD_artist_functions4_a: Prova ad usare una funzione!
        courseD_artist_functions4_b: Per creare la nuova funzione, trascina il blocco
          aperto `disegna una stella` nell'area di lavoro. Dovrà contenere lo stesso
          codice del precedente esercizio, visto che vuoi disegnare lo stesso tipo
          di stella.
        courseD_artist_functions4_c: Usa il blocco verde `disegna una stella` per
          richiamare la funzione nel tuo programma principale. Non dimenticare di
          saltare avanti tra una stella e l'altra!
      courseE_artist_functions5:
        courseD_artist_functions5_a: Non ti arrendere! Ricorda ciò che hai imparato.
        courseD_artist_functions5_b: Le funzioni servono proprio per richiamare una
          certa sequenza di istruzioni in un qualsiasi punto del programma principale,
          non solo all'interno di un ciclo!
        courseD_artist_functions5_c: Trascina il codice che disegna la stella nel
          blocco che definisce la funzione `disegna una stella`, quindi usa questa
          funzione per disegnare le tre stelle!
      courseE_artist_functions5_2018:
        courseD_artist_functions5_a: Non ti arrendere! Ricorda ciò che hai imparato.
        courseD_artist_functions5_b: Le funzioni servono proprio per richiamare una
          certa sequenza di istruzioni in un qualsiasi punto del programma principale,
          non solo all'interno di un ciclo!
        courseD_artist_functions5_c: Inizia creando la funzione `disegna una stella`,
          quindi usa questa funzione per disegnare le tre stelle!
      courseE_artist_functions5_2019:
        courseD_artist_functions5_a: Non ti arrendere! Ricorda ciò che hai imparato.
        courseD_artist_functions5_b: Le funzioni servono proprio per richiamare una
          certa sequenza di istruzioni in un qualsiasi punto del programma principale,
          non solo all'interno di un ciclo!
        courseD_artist_functions5_c: Inizia creando la funzione `disegna una stella`,
          quindi usa questa funzione per disegnare le tre stelle!
      courseE_artist_functions6:
        grade4_artist_functions_windows0_a: Per ora concentrati solamente su come
          realizzare una finestra. Creeremo poi una funzione nel prossimo esercizio.
        grade4_artist_functions_windows0_b: 'Prova ad usare due cicli annidati: quello
          interno disegnerà il quadrato, mentre quello esterno lo farà ruotare quattro
          volte.'
        grade4_artist_functions_windows0_c: Non aver paura di sbagliare! Prova ad
          aggiungere blocchi ed eseguire il codice per vedere cosa succede, anche
          se non hai ancora risolto l'esercizio.
      courseE_artist_functions7:
        courseD_artist_functions7_a: Prova prima a creare la funzione e poi aggiungi
          le finestre una alla volta.
        courseD_artist_functions7_b: Non è il caso di aggiungere altri blocchi di
          ripetizione. Basta che l'artista salti di 100 pixel tra ogni finestra del
          piano superiore, poi scenda giù di 150 pixel per disegnare le finestre del
          piano terra.
      courseE_artist_functions7_2018:
        courseD_artist_functions7_a: Prova prima a creare la funzione e poi aggiungi
          le finestre una alla volta.
        courseD_artist_functions7_b: Per passare dalle finestre del piano di sopra
          a quelle del pian terreno, basta girare l'artista a destra, saltare avanti
          di 150 pixel e infine girare di nuovo l'artista a destra! Ora si troverà
          nella giusta direzione per completare il disegno!
      courseE_artist_functions7_2019:
        courseD_artist_functions7_a: Prova prima a creare la funzione e poi aggiungi
          le finestre una alla volta.
        courseD_artist_functions7_b: Per passare dalle finestre del piano di sopra
          a quelle del pian terreno, basta girare l'artista a destra, saltare avanti
          di 150 pixel e infine girare di nuovo l'artista a destra! Ora si troverà
          nella giusta direzione per completare il disegno!
      courseE_artist_functions8:
        courseD_artist_functions8_f: Ti basterà un unico blocco `vai avanti`, ma serviranno
          parecchi blocchi `salta in avanti` e `salta indietro`!
        courseD_artist_functions8_a: |-
          Inizia creando una funzione che disegna un quadrato, poi prova a farne un'altra che disegna una fila di quadrati.

          Come userai la funzione `disegna una fila di quadrati` per creare questa immagine?
        courseD_artist_functions8_d: |-
          Per disegnare una fila di quadrati,

          -   ripeti 3 volte
              -   disegna un quadrato con lati di **50 pixel**
              -   salta in avanti di **100 pixel**
        courseD_artist_functions8_b: |-
          Immagina ogni riga di questo disegno, come una fila di 3 quadrati. Quante file di quadrati ci sono? e dove inizi a disegnare ognuna di esse?

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: Dopo ogni fila di quadrati, l'artista dovrà saltare
          in basso e indietro prima di iniziare a disegnare le successiva fila di
          quadrati.
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions8_2018:
        courseD_artist_functions8_f: Ti basterà un unico blocco `vai avanti`, ma serviranno
          parecchi blocchi `salta in avanti` e `salta indietro`!
        courseD_artist_functions8_a: |-
          Inizia creando una funzione che disegna un quadrato, poi prova a farne un'altra che disegna una fila di quadrati.

          Come userai la funzione `disegna una fila di quadrati` per creare questa immagine?
        courseD_artist_functions8_d: |-
          Per disegnare una fila di quadrati,

          -   ripeti 3 volte
              -   disegna un quadrato con lati di **50 pixel**
              -   salta in avanti di **100 pixel**
        courseD_artist_functions8_b: |-
          Immagina ogni riga di questo disegno, come una fila di 3 quadrati. Quante file di quadrati ci sono? e dove inizi a disegnare ognuna di esse?

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: Dopo ogni fila traslata di quadrati, l'artista
          dovrà saltare in basso e indietro prima di iniziare a disegnare quella successiva.
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions8_2019:
        courseD_artist_functions8_f: Ti basterà un unico blocco `vai avanti`, ma serviranno
          parecchi blocchi `salta in avanti` e `salta indietro`!
        courseD_artist_functions8_a: |-
          Inizia creando una funzione che disegna un quadrato, poi prova a farne un'altra che disegna una fila di quadrati.

          Come userai la funzione `disegna una fila di quadrati` per creare questa immagine?
        courseD_artist_functions8_d: |-
          Per disegnare una fila di quadrati,

          -   ripeti 3 volte
              -   disegna un quadrato con lati di **50 pixel**
              -   salta in avanti di **100 pixel**
        courseD_artist_functions8_b: |-
          Immagina ogni riga di questo disegno, come una fila di 3 quadrati. Quante file di quadrati ci sono? e dove inizi a disegnare ognuna di esse?

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: Dopo ogni fila traslata di quadrati, l'artista
          dovrà saltare in basso e indietro prima di iniziare a disegnare quella successiva.
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions8b_2018:
        courseD_artist_functions8_f: Hai solo bisogno di un blocco `vai avanti` se
          stai procedendo nel modo corretto!
        courseD_artist_functions8_a: Inizia creando una funzione che disegna un quadrato,
          poi prova a farne un'altra che disegna una fila di quadrati.
        courseD_artist_functions8_d: |-
          Per disegnare una fila di quadrati,

          -   ripeti 3 volte
              -   disegna un quadrato
              -   salta in avanti di **100 pixel**
      courseE_artist_functions8b_2019:
        courseD_artist_functions8_f: Hai solo bisogno di un blocco `vai avanti` se
          stai procedendo nel modo corretto!
        courseD_artist_functions8_a: Inizia creando una funzione che disegna un quadrato,
          poi prova a farne un'altra che disegna una fila di quadrati.
        courseD_artist_functions8_d: |-
          Per disegnare una fila di quadrati,

          -   ripeti 3 volte
              -   disegna un quadrato
              -   salta in avanti di **100 pixel**
      courseE_artist_functions8c_2018:
        courseD_artist_functions8_f: È più facile di quanto sembri! Non dovresti aver
          bisogno di altri blocchi `vai avanti` o `salta`!
        courseD_artist_functions8_a: La seconda fila di quadrati può essere disegnata
          proprio come la prima, dopo che l'artista si è girato di 180 gradi!
        courseD_artist_functions8_c: Alla fine della prima fila di quadrati, l'artista
          deve solo ruotare di 180 gradi prima di disegnare la successiva. Metti il
          tutto in un ciclo `ripeti ... volte` per prepararti al prossimo esercizio!
      courseE_artist_functions8c_2019:
        courseD_artist_functions8_f: È più facile di quanto sembri! Non dovresti aver
          bisogno di altri blocchi `vai avanti` o `salta`!
        courseD_artist_functions8_a: La seconda fila di quadrati può essere disegnata
          proprio come la prima, dopo che l'artista si è girato di 180 gradi!
        courseD_artist_functions8_c: Alla fine della prima fila di quadrati, l'artista
          deve solo ruotare di 180 gradi prima di disegnare la successiva. Metti il
          tutto in un ciclo `ripeti ... volte` per prepararti al prossimo esercizio!
      courseE_artist_functions9:
        courseD_artist_functions9_e: |-
          Osservando questa animazione, riesci ad individuare tutti e quattro i punti in cui si può usare la funzione `disegna una fila di triangoli`?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          Questo esercizio può essere suddiviso in tre parti:

          -   definisci la funzione `disegna un triangolo`,
          -   definisci la funzione `disegna una fila di triangoli`,
          -   usa quattro volte la funzione `disegna una fila di triangoli` per completare il disegno.
        courseD_artist_functions9_b: Per fare questo disegno si deve disegnare per
          quattro volte una fila di triangoli, girando alternativamente di 60 e 120
          gradi tra una fila e l'altra.
        courseD_artist_functions9_c: |-
          Per disegnare una fila di triangoli:

          -   ripeti 4 volte
          -   disegna un triangolo
          -   salta in avanti di 50 pixel
        courseD_artist_functions9_d: |-
          Per disegnare il rombo:

          -   ripeti 2 volte
              -   disegna una fila di triangoli
              -   gira di 60 gradi
              -   disegna una fila di triangoli
              -   gira di 120 gradi
      courseE_artist_functions9_2018:
        courseD_artist_functions9_e: |-
          Osservando questa animazione, riesci ad individuare tutti e quattro i punti in cui si può usare la funzione `disegna una fila di triangoli`?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          Questo esercizio può essere suddiviso in tre parti:

          -   definisci la funzione `disegna un triangolo`,
          -   definisci la funzione `disegna una fila di triangoli`,
          -   usa quattro volte la funzione `disegna una fila di triangoli` per completare il disegno.
        courseD_artist_functions9_b: Per fare questo disegno si deve disegnare per
          quattro volte una fila di triangoli, girando alternativamente di 60 e 120
          gradi tra una fila e l'altra.
        courseD_artist_functions9_c: |-
          Per disegnare una fila di triangoli:

          -   ripeti 4 volte
          -   disegna un triangolo
          -   salta in avanti di 50 pixel
        courseD_artist_functions9_d: |-
          Per disegnare il rombo:

          -   ripeti 2 volte
              -   disegna una fila di triangoli
              -   gira di 60 gradi
              -   disegna una fila di triangoli
              -   gira di 120 gradi
      courseE_artist_functions9_2019:
        courseD_artist_functions9_e: |-
          Osservando questa animazione, riesci ad individuare tutti e quattro i punti in cui si può usare la funzione `disegna una fila di triangoli`?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          Questo esercizio può essere suddiviso in tre parti:

          -   definisci la funzione `disegna un triangolo`,
          -   definisci la funzione `disegna una fila di triangoli`,
          -   usa quattro volte la funzione `disegna una fila di triangoli` per completare il disegno.
        courseD_artist_functions9_b: Per fare questo disegno si deve disegnare per
          quattro volte una fila di triangoli, girando alternativamente di 60 e 120
          gradi tra una fila e l'altra.
        courseD_artist_functions9_c: |-
          Per disegnare una fila di triangoli:

          -   ripeti 4 volte
          -   disegna un triangolo
          -   salta in avanti di 50 pixel
        courseD_artist_functions9_d: |-
          Per disegnare il rombo:

          -   ripeti 2 volte
              -   disegna una fila di triangoli
              -   gira di 60 gradi
              -   disegna una fila di triangoli
              -   gira di 120 gradi
      courseE_artist_functions_challenge1:
        courseE_artist_functions_challenge1_a: Se richiami la funzione ancora una
          volta, puoi completare il disegno nell'angolo mancante.
        courseE_artist_functions_challenge1_b: Puoi anche saltare in un'altra posizione
          o cambiare l'intero disegno a tuo piacimento!
      courseE_artist_functions_challenge1_2018:
        courseE_artist_functions_challenge1_a: Se richiami la funzione ancora una
          volta, puoi completare il disegno nell'angolo mancante.
        courseE_artist_functions_challenge1_b: Puoi anche saltare in un'altra posizione
          o cambiare l'intero disegno a tuo piacimento!
      courseE_artist_functions_challenge1_2019:
        courseE_artist_functions_challenge1_a: Se richiami la funzione ancora una
          volta, puoi completare il disegno nell'angolo mancante.
        courseE_artist_functions_challenge1_b: Puoi anche saltare in un'altra posizione
          o cambiare l'intero disegno a tuo piacimento!
      courseE_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          Il blocco `salta a` ti permette di muovere l'artista zombie su qualsiasi pixel della tela, in qualunque momento. Funziona così: _indipendentemente_ dal punto in cui si trova l'artista in quel momento, egli salterà un certo numero di pixel in avanti ed un altro numero di pixel in basso, contando a partire dallo spigolo in alto a sinistra.

          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>
      courseE_artist_functions_challenge2_2018:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          Il blocco `salta a` ti permette di muovere l'artista zombie su qualsiasi pixel della tela, in qualunque momento. Funziona così: _indipendentemente_ dal punto in cui si trova l'artista in quel momento, egli salterà un certo numero di pixel in avanti ed un altro numero di pixel in basso, contando a partire dallo spigolo in alto a sinistra.

          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>
      courseE_artist_functions_challenge2_2019:
        courseE_artist_functions_challenge1_a: |-
          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>

          Il blocco `salta a` ti permette di muovere l'artista zombie su qualsiasi pixel della tela, in qualunque momento. Funziona così: _indipendentemente_ dal punto in cui si trova l'artista in quel momento, egli salterà un certo numero di pixel in avanti ed un altro numero di pixel in basso, contando a partire dallo spigolo in alto a sinistra.

          <xml>
            <block type="jump_to_xy">
              <title name="XPOS">350</title>
              <title name="YPOS">200</title>
            </block>
            </xml>
      courseE_artist_ramp8:
        courseE_artist_ramp8_a: Per disegnare un lato, usa il blocco `vai avanti di
          100 pixel` e cambia il 100 in 200.
        courseE_artist_ramp8_b: |-
          Per disegnare 4 lati, inserisci il blocco `vai avanti di 100 pixel` all'interno di un ciclo di ripetizione e assicurarsi che il ciclo sia impostato per ripetersi 4 volte.

          Non dimenticarti di girare!
        courseE_artist_ramp8_c: 'Il ciclo deve contenere due blocchi: `vai avanti`
          e `gira a destra di 90 gradi`.'
      courseE_artist_ramp8_2:
        courseE_artist_ramp8_a: Per disegnare un lato, usa il blocco `vai avanti di
          100 pixel` e cambia il 100 in 200.
        courseE_artist_ramp8_b: |-
          Per disegnare 4 lati, inserisci il blocco `vai avanti di 100 pixel` all'interno di un ciclo di ripetizione e assicurarsi che il ciclo sia impostato per ripetersi 4 volte.

          Non dimenticarti di girare!
        courseE_artist_ramp8_c: 'Il ciclo deve contenere due blocchi: `vai avanti`
          e `gira a destra di 90 gradi`.'
      courseE_artist_ramp9:
        courseD_artist_ramp12_a: In cosa è simile a un quadrato? e in cosa differisce?
        courseD_artist_ramp12_b: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseD_artist_ramp12_c: Per disegnare ogni lato, è necessario andare avanti
          di 100 pixel e poi girare a destra di 120 gradi. Quanti lati ti servono?
      courseE_artist_ramp9_2:
        courseD_artist_ramp12_a: In cosa è simile a un quadrato? e in cosa differisce?
        courseD_artist_ramp12_b: Puoi usare il menù a discesa (▼) del blocco `gira
          a ...` per vedere gli angoli tra cui scegliere!
        courseD_artist_ramp12_c: Per disegnare ogni lato, è necessario andare avanti
          di 100 pixel e poi girare a destra di 120 gradi. Quanti lati ti servono?
      courseE_bee_concept1:
        courseE_bee_concept1_b: Vedi qualche schema che si _ripete_?
        courseE_bee_concept1_a: Se non riesci subito a capire come usare i cicli annidati,
          prova a scrivere le singole istruzioni su un foglio di carta. Poi cerchia
          gli schemi ricorrenti.
      courseE_bee_concept1_2018:
        courseE_bee_concept1_b: Vedi qualche schema che si _ripete_?
        courseE_bee_concept1_a: Se non riesci subito a capire come usare i cicli annidati,
          prova a scrivere le singole istruzioni su un foglio di carta. Poi cerchia
          gli schemi ricorrenti.
      courseE_bee_concept2:
        courseE_bee_concept2_a: Qui potrebbe essere utile un ciclo `mentre`?
        courseE_bee_concept2_d: Puoi anche controllare le caselle vuote per verificare
          se la dose di miele è > 0.
        courseE_bee_concept2_b: Puoi usare dei cicli `mentre` per muoverti fino alla
          fine di ogni tratto del percorso e produrre tutto il miele in ogni favo.
        courseE_bee_concept2_c: Da che parte deve girare l'ape alla fine di ogni tratto
          del percorso?
      courseE_bee_concept2_2018:
        courseE_bee_concept2_a: Qui potrebbe essere utile un ciclo `mentre`?
        courseE_bee_concept2_d: 'Con questo ciclo `mentre` puoi controllare le caselle
          vuote per vedere se la quantità di miele è > 0, è lo stesso effetto che
          si avrebbe con un ciclo "mentre c''è del miele". '
        courseE_bee_concept2_b: Puoi usare dei cicli `mentre` per muoverti fino alla
          fine di ogni tratto del percorso e produrre tutto il miele in ogni favo.
        courseE_bee_concept2_c: Da che parte deve girare l'ape alla fine di ogni tratto
          del percorso?
      courseE_bee_concept3:
        courseE_bee_concept3a_a: Prova a risolvere l'esercizio usando dei cicli annidati.
        courseE_bee_concept3a_b: Se non riesci a capire dove mettere i cicli, prova
          a scrivere il codice con tutti i blocchi azzurri e cerca poi di riconoscere
          la sequenza che si ripete.
        courseE_bee_concept3a_c: Ci sono quattro tratti rettilinei di percorso, quindi
          il ciclo `ripeti ... volte` più esterno deve essere ripetuto quattro volte.
      courseE_bee_concept3_2018:
        courseE_bee_concept3a_b: Se non riesci a capire dove mettere i cicli, prova
          a scrivere il codice con tutti i blocchi azzurri e cerca poi di riconoscere
          la sequenza che si ripete.
      courseE_bee_concept4:
        courseE_bee_concept4_a: Un'istruzione condizionale `se/altrimenti` potrebbe
          davvero risolvere il dilemma.
        courseE_bee_concept4_b: Uno schema a scalinata può aiutarti a passare in rassegna
          tutti i fiori e i favi.
        courseE_bee_concept4_c: Quando sei su un fiore, quante dosi di nettare devi
          raccogliere? È lo stesso numero per tutti i fiori?
      courseE_bee_concept4_2018:
        courseE_bee_concept4_a: Un'istruzione condizionale `se/altrimenti` potrebbe
          davvero risolvere il dilemma.
        courseE_bee_concept4_b: Uno schema a scalinata può aiutarti a passare in rassegna
          tutti i fiori e i favi.
        courseE_bee_concept4_c: Quando sei su un fiore, quante dosi di nettare devi
          raccogliere? È lo stesso numero per tutti i fiori?
      courseE_bee_concept5:
        courseE_bee_concept5_a: I fiori sono disposti lungo un percorso rettangolare.
          Puoi seguire quel percorso usando un ciclo `mentre c'è strada in avanti`
          anche se ci sono un diverso numero di caselle per ogni lato.
        courseE_bee_concept5_c: |-
          Ecco evidenziato nell'immagine il percorso rettangolare che l'ape potrebbe seguire.

          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: Puoi controllare in ogni casella se c'è un fiore usando
          il blocco `se`; puoi farlo senza problemi anche nelle caselle vuote.
      courseE_bee_concept5_2018:
        courseE_bee_concept5_a: I fiori sono disposti lungo un percorso rettangolare.
          Puoi seguire quel percorso usando un ciclo `mentre c'è strada in avanti`
          anche se ci sono un diverso numero di caselle per ogni lato.
        courseE_bee_concept5_c: |-
          Ecco evidenziato nell'immagine il percorso rettangolare che l'ape potrebbe seguire.

          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: Puoi controllare in ogni casella se c'è un fiore usando
          il blocco `se`; puoi farlo senza problemi anche nelle caselle vuote.
      courseE_bee_functions1:
        courseE_bee_functions1_a: Ricorda che le svolte a destra e a sinistra devi
          immaginarle dal punto di vista dell'ape.
        courseE_bee_functions1_b: Per rendere il programma più breve, usa un ciclo
          `ripeti ... volte` quando raccogli il nettare.
        courseE_bee_functions1_c: Ricorda che le svolte a destra e a sinistra devi
          considerarle dalla prospettiva dell'ape.
      courseE_bee_functions10:
        courseE_bee_functions10_a: Avrai bisogno di un ciclo `mentre` per raccogliere
          tutto il miele, visto che la quantità è diversa da favo a favo.
        courseE_bee_functions10_b: Per poter richiamare la funzione dal precorso principale,
          includi in essa le istruzioni di movimento.
        courseE_bee_functions10_c: Ricordati di richiamare la funzione dal programma
          principale!
      courseE_bee_functions2:
        courseE_bee_functions2_a: La funzione è già stata scritta per te, ma è necessario
          che tu la richiami quando l'artista è su ogni fiore.
        courseE_bee_functions2_b: Questo blocco <xml><block type="procedures_callnoreturn"><mutation
          name="prendi 2 dosi di nettare"/></block></xml> richiama la funzione già
          preparata.
        courseE_bee_functions2_c: Per risolvere questo esercizio, devi - per due volte
          - andare avanti e prendere 2 dosi di nettare.
      courseE_bee_functions3:
        courseE_bee_functions3_a: In questo esercizio, la funzione deve solo raccogliere
          il nettare, non deve contenere alcun blocco `vai avanti` o `gira`.
        courseE_bee_functions3_b: Richiama la funzione `prendi 5` subito sotto al
          blocco `quando si clicca su "Esegui"`.
        courseE_bee_functions3_c: Il tuo programma principale dovrà controllare tutti
          i movimenti, mentre la funzione serve solo per gestire le azioni dell'ape
          ogni volta che raggiunge un fiore.
        courseE_bee_functions3_d: Prova a seguire questo percorso.
      courseE_bee_functions4:
        courseE_bee_functions4_a: Il codice presente nella funzione fa girare l'ape,
          la fa andare avanti a prendere il nettare e la fa tornare sul percorso principale.
          Non hai quindi bisogno di aggiungere questa parte di movimenti nel programma
          principale.
        courseE_bee_functions4_b: Usa il blocco verde `vai a prendere il nettare`
          per richiamare questa funzione.
        courseE_bee_functions4_c: Non devi modificare nulla nella definizione della
          funzione, la puoi direttamente usare nel tuo programma principale.
      courseE_bee_functions5:
        courseE_bee_functions5_a: Inserisci i blocchi nella definizione della funzione
          in modo da risolvere l'esercizio senza dover modificare nulla nel programma
          principale.
        courseE_bee_functions5_c: 'Il blocco `vai avanti` può anche essere trasformato
          in `vai indietro`. Usa questo accorgimento invece di girarti per tornare
          indietro: risparmierai un blocco!'
        courseE_bee_functions5_b: |-
          La tua funzione dovrebbe fare così:

          -   gira,
          -   vai avanti,
          -   raccogli tutto il nettare,
          -   vai indietro,
          -   gira per far tornare l'ape nella posizione da cui era partita.
      courseE_bee_functions6:
        courseE_bee_functions6_a: "Se ti sembra troppo difficile, prova a creare la
          funzione poco per volta.  \n\nAggiungi qualche blocco e prova a vedere cosa
          fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla
          soluzione!\n\n![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseE_bee_functions6_b: In questo caso potrebbe essere utile spostarsi all'interno
          della funzione, ma i blocchi di movimento non devono essere tutti lì.
      courseE_bee_functions7:
        courseE_bee_functions7_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions7_b: |-
          Ricordati di inserire il codice all'interno del blocco verde aperto che definisce cosa deve fare la funzione.

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: Questa funzione dovrebbe orientare l'ape nella direzione
          del percorso da prendere, farle raccogliere il nettare, farle fare il miele
          e poi farla girare e riportarla al punto di partenza.
      courseE_bee_functions8:
        courseE_bee_functions8_a: La funzione dovrà solo raccogliere il nettare. Prova
          a usare un ciclo `mentre` invece di uno `ripeti ... volte`.
        courseE_bee_functions8_b: Usa il ciclo`mentre nettare > 0` per assicurarti
          di raccogliere tutto il nettare.
        courseE_bee_functions8_c: Il programma principale dovrà seguire uno schema
          a scalinata. Ricorda, il programma principale è costituito dal codice sotto
          al blocco `quando si clicca su "Esegui"`.
      courseE_bee_functions9:
        courseE_bee_functions9_a: Qui puoi usare la stessa funzione dell'esercizio
          precedente, ovvero una funzione che faccia raccogliere all'ape tutto il
          nettare dal fiore su cui è posata.
        courseE_bee_functions9_b: Anche se sai quanto nettare c'è in alcuni fiori,
          ti conviene far finta di non saperlo, infatti un'unica funzione con un ciclo
          `mentre` va bene per tutti i fiori.
      courseE_bee_functions_challenge1:
        courseE_bee_functions_challenge1_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions_challenge1_b: Ricordati di inserire il codice all'interno
          del blocco verde aperto che definisce cosa deve fare la funzione.
      courseE_bee_functions_challenge2:
        courseE_bee_functions_challenge1_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions_challenge1_b: Ricordati di inserire il codice all'interno
          del blocco verde aperto che definisce cosa deve fare la funzione.
      courseE_farmer_concept1:
        courseE_farmer_concept1_a: Il blocco `mentre c'è una buca` ti aiuterà a far
          riempire ogni buca fino quando il terreno sarà livellato.
        courseE_farmer_concept1_b: Puoi usare uno schema a scalinata per raggiungere
          le buche.
      courseE_farmer_concept1_2018:
        courseE_farmer_concept1_a: Il blocco `mentre c'è una buca` ti aiuterà a far
          riempire ogni buca fino quando il terreno sarà livellato.
        courseE_farmer_concept1_b: Puoi usare uno schema a scalinata per raggiungere
          le buche.
      courseE_farmer_concept2:
        courseE_farmer_concept2_a: I percorsi laterali con le zucche sono tutti della
          stessa lunghezza, ma non sono alla stessa distanza uno dall'altro. Con un
          ciclo non riesci a risolvere l'esercizio. Prova con una funzione.
        courseE_farmer_concept2_b: Qui potrebbe essere d'aiuto una funzione che giri
          a destra, vada avanti lungo il percorso laterale, raccolga tutte le zucche
          e ritorni sul percorso principale.
        courseE_farmer_concept2_c: Nel programma principale puoi richiamare la funzione
          con il blocchetto verde che riporta il suo nome.
      courseE_farmer_concept2_2018:
        courseE_farmer_concept2_a: I percorsi laterali con le zucche sono tutti della
          stessa lunghezza, ma non sono alla stessa distanza uno dall'altro. Con un
          ciclo non riesci a risolvere l'esercizio. Prova con una funzione.
        courseE_farmer_concept2_b: Qui potrebbe essere d'aiuto una funzione che giri
          a destra, vada avanti lungo il percorso laterale, raccolga tutte le zucche
          e ritorni sul percorso principale.
        courseE_farmer_concept2_c: Nel programma principale puoi richiamare la funzione
          con il blocchetto verde che riporta il suo nome.
      courseE_farmer_concept3:
        grade3_robotFarmer_ConditionalsIntro_8_a: Il blocco `mentre c'è strada in
          avanti` ti permette di andare avanti, anche se non sai quante caselle devi
          percorrere.
        grade3_robotFarmer_ConditionalsIntro_8_b: Cosa occorre fare una volta raggiunta
          la fine di ogni tratto di percorso?
        grade3_robotFarmer_ConditionalsIntro_8_c: Usa un ciclo `ripeti ... volte`
          in modo da eseguire il codice per ogni tratto rettilineo del percorso.
      courseE_farmer_concept3_2018:
        grade3_robotFarmer_ConditionalsIntro_8_a: Il blocco `mentre c'è strada in
          avanti` ti permette di andare avanti, anche se non sai quante caselle devi
          percorrere.
        grade3_robotFarmer_ConditionalsIntro_8_b: Cosa occorre fare una volta raggiunta
          la fine di ogni tratto di percorso?
        grade3_robotFarmer_ConditionalsIntro_8_c: Usa un ciclo `ripeti ... volte`
          in modo da eseguire il codice per ogni tratto rettilineo del percorso.
      courseE_farmer_functions1:
        courseE_farmer_functions1_a: Qui la cassetta degli attrezzi è organizzata
          in modo leggermente diverso. Clicca sulle varie categorie per vedere che
          blocchi contengono.
        courseE_farmer_functions1_b: Devi solo raccogliere una zucca, ma potresti
          usare un ciclo per raggiungerla?
      courseE_farmer_functions10b:
        courseE_farmer_functions10b_a: Prima di tutto devi creare la funzione da zero.
        courseE_farmer_functions10b_b: Da che parte devi girare dopo la prima zucca?
        courseE_farmer_functions10b_c: Se non ti ricordi bene, dai un'occhiata all'esercizio
          precedente per mettere i giusti blocchi nella funzione.
      courseE_farmer_functions1_2018:
        courseE_farmer_functions1_a: Qui la cassetta degli attrezzi è organizzata
          in modo leggermente diverso. Clicca sulle varie categorie per vedere che
          blocchi contengono.
        courseE_farmer_functions1_b: Devi solo raccogliere una zucca, ma potresti
          usare un ciclo per raggiungerla?
      courseE_farmer_functions1_2019:
        courseE_farmer_functions1_a: Qui la cassetta degli attrezzi è organizzata
          in modo leggermente diverso. Clicca sulle varie categorie per vedere che
          blocchi contengono.
        courseE_farmer_functions1_b: Devi solo raccogliere una zucca, ma potresti
          usare un ciclo per raggiungerla?
      courseE_farmer_functions1a:
        courseE_farmer_functions1a_a: Analizza passo dopo passo il funzionamento dell'istruzione
          condizionale `se`. Cosa deve pensare la contadina quando si trova di fronte
          ad una pannocchia?
        courseE_farmer_functions1a_b: Usa un blocco `ripeti fino a che` per arrivare
          fino alla zucca!
      courseE_farmer_functions1a_2018:
        courseE_farmer_functions1a_a: Leggi attentamente la definizione della funzione.
          Riesci a dire che cosa fa?
        courseE_farmer_functions1a_b: Usa un blocco `ripeti fino a che` per arrivare
          fino alla zucca!
      courseE_farmer_functions1a_2019:
        courseE_farmer_functions1a_a: Leggi attentamente la definizione della funzione.
          Riesci a dire che cosa fa?
        courseE_farmer_functions1a_b: Usa un blocco `ripeti fino a che` per arrivare
          fino alla zucca!
      courseE_farmer_functions2b:
        courseE_farmer_functions2b_a: Puoi usare un blocco `ripeti fino a che sei
          su una zucca` per raggiungere la fine dei due tratti di percorso che si
          concludono con una zucca.
        courseE_farmer_functions2b_b: Non ci sono pannocchie nel percorso intermedio,
          lì la contadina deve solo andare avanti e girare.
        courseE_farmer_functions2b_c: Hai bisogno di due differenti blocchi `ripeti
          fino a che` per raccogliere tutti gli ortaggi.
      courseE_farmer_functions2b_2018:
        courseE_farmer_functions2b_a: Puoi usare un blocco `ripeti fino a che sei
          su una zucca` per raggiungere la fine dei due tratti di percorso che si
          concludono con una zucca.
        courseE_farmer_functions2b_b: Non ci sono pannocchie nel percorso intermedio,
          lì la contadina deve solo andare avanti e girare.
        courseE_farmer_functions2b_c: Hai bisogno di due differenti blocchi `ripeti
          fino a che` per raccogliere tutti gli ortaggi.
      courseE_farmer_functions2b_2019:
        courseE_farmer_functions2b_a: Puoi usare un blocco `ripeti fino a che sei
          su una zucca` per raggiungere la fine dei due tratti di percorso che si
          concludono con una zucca.
        courseE_farmer_functions2b_b: Non ci sono pannocchie nel percorso intermedio,
          lì la contadina deve solo andare avanti e girare.
        courseE_farmer_functions2b_c: Hai bisogno di due differenti blocchi `ripeti
          fino a che` per raccogliere tutti gli ortaggi.
      courseE_farmer_functions2ba:
        courseE_farmer_functions2ba_a: Usa il blocco verde `pannocchie e zucca` per
          richiamare questa funzione.
        courseE_farmer_functions2ba_b: Per vedere come funziona questa funzione, aggancia
          al blocco arancione `quando si clicca su "Esegui"` tutti i blocchi che trovi
          sparpagliati nell'area di lavoro.
      courseE_farmer_functions2ba_2018:
        courseE_farmer_functions2ba_a: Usa il blocco verde `prendi tutte le zucche`
          per essere sicuro di raccoglierle tutte!
      courseE_farmer_functions2ba_2019:
        courseE_farmer_functions2ba_a: Usa il blocco verde `prendi tutte le zucche`
          per essere sicuro di raccoglierle tutte!
      courseE_farmer_functions3c:
        courseE_farmer_functions3c_a: Quale sequenza si ripete spesso in questo programma?
          Riesci a trascinare questi blocchi nella funzione?
        courseE_farmer_functions3c_b: Non dimenticare di richiamare la funzione nel
          programma principale ovunque hai tolto i blocchi.
      courseE_farmer_functions3c1_2018:
        coursee_farmer_functions3c1_2018_a: Per risolvere questo esercizio dovrai
          usare tre volte la funzione `raccogli lungo il percorso`.
        coursee_farmer_functions3c1_2018_b: Che codice devi aggiungere per fare le
          curve?
      courseE_farmer_functions3c1_2019:
        coursee_farmer_functions3c1_2018_a: Per risolvere questo esercizio dovrai
          usare tre volte la funzione `raccogli lungo il percorso`.
        coursee_farmer_functions3c1_2018_b: Che codice devi aggiungere per fare le
          curve?
      courseE_farmer_functions4b:
        courseE_farmer_functions4b_a: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
        courseE_farmer_functions4b_b: Ricordati di girare dopo ogni tratta del percorso.
        courseE_farmer_functions4b_c: Il blocco verde `pannocchie e zucca` si trova
          nella scheda funzioni della casella degli attrezzi.
      courseE_farmer_functions5c:
        courseE_farmer_functions5c_a: In questo esercizio, ci sono altri schemi ripetuti
          che puoi ricondurre ad un ciclo?
        courseE_farmer_functions5c_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa succede, anche se non hai
          ancora risolto l'esercizio.
      courseE_farmer_functions6c:
        courseE_farmer_functions6c_a: Modifica la tua funzione per controllare anche
          la possibile presenza di una lattuga.
        courseE_farmer_functions6c_b: Un blocco `se/altrimenti` aiuterebbe a controllare
          se ti trovi su una casella in cui c'è una lattuga?
        courseE_farmer_functions6c_c: Non dimenticarti di mantenere il controllo per
          le pannocchie!
      courseE_farmer_functions7a1_2018:
        courseE_farmer_functions7a1_2018_a: Crea la funzione usando l'apposito blocco
          presente nella sezione "funzioni" nella cassetta degli attrezzi.
        courseE_farmer_functions7a1_2018_b: Dopo che hai creato la funzione, non dimenticati
          di usarla!
      courseE_farmer_functions7a1_2019:
        courseE_farmer_functions7a1_2018_a: Crea la funzione usando l'apposito blocco
          presente nella sezione "funzioni" nella cassetta degli attrezzi.
        courseE_farmer_functions7a1_2018_b: Dopo che hai creato la funzione, non dimenticati
          di usarla!
      courseE_farmer_functions7b:
        courseE_farmer_functions7b_a: In questo caso non sono necessarie delle funzioni,
          ma se vuoi puoi usarne una!
        courseE_farmer_functions7b_b: Usa un'istruzione condizionale `se/altrimenti`
          per controllare la presenza delle colture e gira in base a quale coltura
          hai trovato.
        courseE_farmer_functions7b_c: Un ciclo `ripeti fino a che sei su una zucca`
          può aiutarti a percorrere tutto questo labirinto.
      courseE_farmer_functions8a1_2018:
        courseE_farmer_functions8a1_2018a: Inizia usando la funzione che hai creato
          nell'esercizio precedente.
        courseE_farmer_functions8a1_2018b: Dopo aver eseguito la funzione la prima
          volta, dovrai usare un altro blocco `gira a ...` per poterla eseguire di
          nuovo.
      courseE_farmer_functions8a1_2019:
        courseE_farmer_functions8a1_2018a: Inizia usando la funzione che hai creato
          nell'esercizio precedente.
        courseE_farmer_functions8a1_2018b: Dopo aver eseguito la funzione la prima
          volta, dovrai usare un altro blocco `gira a ...` per poterla eseguire di
          nuovo.
      courseE_farmer_functions8b:
        courseE_farmer_functions8b_a: Prova ad eseguire il codice che trovi già pronto
          per scoprire cosa fa. Come puoi procedere?
        courseE_farmer_functions8b_b: Trascina nel blocco di definizione di una funzione
          tutti i blocchi trovati all'inizio, in modo da poterli usare più di una
          volta.
        courseE_farmer_functions8b_c: Quante volte è necessario richiamare la funzione?
      courseE_farmer_functions9a1_2018:
        courseE_farmer_functions9a1_2018a: Potrai usare la stessa funzione che hai
          creato negli ultimi due esercizi.
        courseE_farmer_functions9a1_2018b: Per risolvere la prima metà di questo esercizio,
          devi seguire gli stessi passaggi dell'esercizio precedente.
        courseE_farmer_functions9a1_2018c: Prima di poter richiamare di nuovo la funzione,
          dovrai usare alcuni blocchi `gira a ...` e `vai avanti` per completare la
          raccolta delle lattughe.
      courseE_farmer_functions9a1_2019:
        courseE_farmer_functions9a1_2018a: Potrai usare la stessa funzione che hai
          creato negli ultimi due esercizi.
        courseE_farmer_functions9a1_2018b: Per risolvere la prima metà di questo esercizio,
          devi seguire gli stessi passaggi dell'esercizio precedente.
        courseE_farmer_functions9a1_2018c: Prima di poter richiamare di nuovo la funzione,
          dovrai usare alcuni blocchi `gira a ...` e `vai avanti` per completare la
          raccolta delle lattughe.
      courseE_farmer_functions9b:
        courseE_farmer_functions9b_a: Per muoverti lungo il percorso, potresti usare
          istruzioni condizionali annidate `se` o `se/altrimenti`?
        courseE_farmer_functions9b_b: Usa il ciclo `ripeti fino a che sei su una zucca`
          per spostarti lungo il percorso.
        courseE_farmer_functions9b_c: Immagina di seguire un percorso quadrato piccolo
          e poi uno grande...
      courseE_farmer_ramp11a:
        courseE_farmer_ramp12_a: Anziché usare un ciclo `ripeti ... volte` per dire
          alla contadina quante palate deve rimuovere, ora è possibile usare il blocco
          `mentre c'è un mucchio`.
        courseE_farmer_ramp12_b: Devi solo andare avanti una volta per raggiungere
          il mucchio.
      courseE_farmer_ramp11a_2018:
        courseE_farmer_ramp12_a: Anziché usare un ciclo `ripeti ... volte` per dire
          alla contadina quante palate deve rimuovere, ora è possibile usare il blocco
          `mentre c'è un mucchio`.
        courseE_farmer_ramp12_b: Devi solo andare avanti una volta per raggiungere
          il mucchio.
      courseE_farmer_ramp11a_2019:
        courseE_farmer_ramp12_a: Anziché usare un ciclo `ripeti ... volte` per dire
          alla contadina quante palate deve rimuovere, ora è possibile usare il blocco
          `mentre c'è un mucchio`.
        courseE_farmer_ramp12_b: Devi solo andare avanti una volta per raggiungere
          il mucchio.
      courseE_farmer_ramp11b:
        courseE_farmer_ramp11b_a: Per rendere il programma più corto, puoi annidare
          il ciclo `mentre` all'interno di un ciclo `ripeti ... volte`.
      courseE_farmer_ramp11b_2018:
        courseE_farmer_ramp11b_a: Per rendere il programma più corto, puoi annidare
          il ciclo `mentre` all'interno di un ciclo `ripeti ... volte`.
      courseE_farmer_ramp11b_2019:
        courseE_farmer_ramp11b_a: Per rendere il programma più corto, puoi annidare
          il ciclo `mentre` all'interno di un ciclo `ripeti ... volte`.
      courseE_farmer_ramp12_forswap:
        courseE_farmer_ramp12_b: All'esterno del ciclo `mentre`, dovrai anche usare
          un ciclo `ripeti ... volte` per dire alla contadina quante volte andare
          avanti e prendere le lattughe.
      courseE_farmer_ramp12_forswap_2018:
        courseE_farmer_ramp12_b: All'esterno del ciclo `mentre`, dovrai anche usare
          un ciclo `ripeti ... volte` per dire alla contadina quante volte andare
          avanti e prendere le lattughe.
      courseE_farmer_ramp12_forswap_2019:
        courseE_farmer_ramp12_b: All'esterno del ciclo `mentre`, dovrai anche usare
          un ciclo `ripeti ... volte` per dire alla contadina quante volte andare
          avanti e prendere le lattughe.
      courseE_farmer_ramp12c:
        courseE_farmer_ramp12b_b: |-
          Sarà necessario usare prima un ciclo `ripeti fino a che` e poi un ciclo `mentre`, una volta che si arriva sulla lattuga.
          Attento: il ciclo `ripeti fino a che sei su una lattuga` ripete tutti i blocchi che contiene per tutto il tempo in cui NON sei su una lattuga e si interrompe quando finalmente arrivi ad una lattuga.
      courseE_farmer_ramp12c_2018:
        courseE_farmer_ramp12b_b: |-
          Sarà necessario usare prima un ciclo `ripeti fino a che` e poi un ciclo `mentre`, una volta che si arriva sulla lattuga.
          Attento: il ciclo `ripeti fino a che sei su una lattuga` ripete tutti i blocchi che contiene per tutto il tempo in cui NON sei su una lattuga e si interrompe quando finalmente arrivi ad una lattuga.
      courseE_farmer_ramp12c_2019:
        courseE_farmer_ramp12b_b: |-
          Sarà necessario usare prima un ciclo `ripeti fino a che` e poi un ciclo `mentre`, una volta che si arriva sulla lattuga.
          Attento: il ciclo `ripeti fino a che sei su una lattuga` ripete tutti i blocchi che contiene per tutto il tempo in cui NON sei su una lattuga e si interrompe quando finalmente arrivi ad una lattuga.
      courseE_farmer_ramp12d:
        courseE_farmer_ramp12d_b: |-
          Per risolvere questo esercizio, dovrai anche mettere i cicli `ripeti fino a che` e `mentre` all'interno di un ciclo `ripeti ... volte`!
          Ricorda: il ciclo `ripeti fino a che sei su una lattuga` ripete tutti i blocchi che contiene per tutto il tempo in cui NON sei su una lattuga e si interrompe quando finalmente arrivi ad una lattuga.
      courseE_farmer_ramp12d_2018:
        courseE_farmer_ramp12d_b: |-
          Per risolvere questo esercizio, dovrai anche mettere i cicli `ripeti fino a che` e `mentre` all'interno di un ciclo `ripeti ... volte`!
          Ricorda: il ciclo `ripeti fino a che sei su una lattuga` ripete tutti i blocchi che contiene per tutto il tempo in cui NON sei su una lattuga e si interrompe quando finalmente arrivi ad una lattuga.
      courseE_farmer_ramp12d_2019:
        courseE_farmer_ramp12d_b: |-
          Per risolvere questo esercizio, dovrai anche mettere i cicli `ripeti fino a che` e `mentre` all'interno di un ciclo `ripeti ... volte`!
          Ricorda: il ciclo `ripeti fino a che sei su una lattuga` ripete tutti i blocchi che contiene per tutto il tempo in cui NON sei su una lattuga e si interrompe quando finalmente arrivi ad una lattuga.
      courseE_farmer_ramp12e:
        courseE_farmer_ramp12e_b: La soluzione di questo esercizio è molto simile
          a quella del precedente, ma girando nella direzione opposta.
      courseE_farmer_ramp12e_2018:
        courseE_farmer_ramp12e_b: La soluzione di questo esercizio è molto simile
          a quella del precedente, ma girando nella direzione opposta.
      courseE_farmer_ramp12e_2019:
        courseE_farmer_ramp12e_b: La soluzione di questo esercizio è molto simile
          a quella del precedente, ma girando nella direzione opposta.
      courseE_farmer_ramp12f:
        courseE_farmer_ramp12f_b: Usa un blocco `se/altrimenti` per aiutare la contadina
          a decidere se deve girare a destra o a sinistra.
      courseE_farmer_ramp12f_2018:
        courseE_farmer_ramp12f_b: Usa un blocco `se/altrimenti` per aiutare la contadina
          a decidere se deve girare a destra o a sinistra.
      courseE_farmer_ramp12f_2019:
        courseE_farmer_ramp12f_b: Usa un blocco `se/altrimenti` per aiutare la contadina
          a decidere se deve girare a destra o a sinistra.
      courseE_farmer_ramp12g:
        courseE_farmer_ramp12G_b: Usa un blocco `se/altrimenti` per aiutare la contadina
          a decidere se deve girare a destra o a sinistra.
      courseE_farmer_ramp12g_2018:
        courseE_farmer_ramp12G_b: Usa un blocco `se/altrimenti` per aiutare la contadina
          a decidere se deve girare a destra o a sinistra.
      courseE_farmer_ramp12g_2019:
        courseE_farmer_ramp12G_b: Usa un blocco `se/altrimenti` per aiutare la contadina
          a decidere se deve girare a destra o a sinistra.
      courseE_playLab_challenge1:
        courseE_playLab_challenge1_a: |-
          Ecco alcune possibili cose da fare quando il giocatore vince la partita:

          -   Fai svanire il dinosauro.
          -   Ferma gli scoiattoli.
          -   Attribuisci un umore felice a scoiattoli e cavaliere.
          -   Imposta un nuovo sfondo.
          -   Fai in modo che il cavaliere ringrazi il giocatore per l'aiuto.
          -   Fai svanire tutti i personaggi e visualizza il messaggio "Hai vinto!".
        courseE_playLab_challenge1_b: |-
          Ecco alcune possibili cose da fare quando il giocatore perde la partita:

          -   Fai svanire il cavaliere.
          -   Attribuisci un umore triste agli scoiattoli.
          -   Fai dire qualcosa al dinosauro.
          -   Imposta un nuovo sfondo.
          -   Fai svanire tutti i personaggi e visualizza il messaggio "Fine del gioco!".
      courseE_playLab_scaffold1:
        courseE_playLab_scaffold1_a: Puoi usare il blocco `imposta il personaggio
          1 come ...` per aggiungere un personaggio nella scena.
        courseE_playLab_scaffold1_b: Per fare in modo che il personaggio che hai scelto
          compaia all'avvio del tuo programma, metti il blocco `imposta il personaggio
          1 come ...` sotto al blocco `quando si clicca su "Esegui"`.
        courseE_playLab_scaffold1_c: Usa il blocco `imposta uno sfondo ...` per scegliere
          lo sfondo della tua scena.
      courseE_playLab_scaffold2:
        courseE_playLab_scaffold1_a: Scegli la direzione corretta dal menù a discesa
          (▼) del blocco evento `quando si preme sulla freccia verso ...`.
        courseE_playLab_scaffold1_b: Dovresti avere quattro diversi blocchi evento
          `quando si preme sulla freccia verso ...`, ognuno con uno specifico blocco
          di movimento agganciato sotto.
        courseE_playLab_scaffold1_c: Quando hai finito, dovresti essere in grado di
          spostare il tuo eroe con i tasti freccia!
      courseE_playLab_scaffold4:
        courseE_playLab_scaffold4_a: Per modificare il punteggio, usa i blocchi `aggiungi
          un punto` e `togli un punto`.
      courseE_playLab_scaffold5:
        courseE_playLab_scaffold5_a: 'Per completare l''esercizio, è necessario vincere
          o perdere: imposta adeguatamente i blocchi `fine del gioco con una vittoria`
          e `fine del gioco con una sconfitta`.'
      courseF_artist_for1:
        courseF_artist_for1_a: |-
          Prova a disegnare un'immagine di questo tipo:

          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for10:
        courseF_artist_for10_a: L'immagine nel disegno è stata creata usando la variabile
          `counter` nel blocco `imposta l'opacità` e `counter`/`10` per impostare
          la larghezza del pennello.
        courseF_artist_for10_b: L'immagine nel disegno usa un angolo di 61 gradi.
        courseF_artist_for10_c: |-
          Vuoi sapere come è stata creata l'immagine dell'esempio?

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for10_2018:
        courseF_artist_for10_a: L'immagine nel disegno è stata creata usando la variabile
          `counter` nel blocco `imposta l'opacità` e `counter`/`10` per impostare
          la larghezza del pennello.
        courseF_artist_for10_b: L'immagine nel disegno usa un angolo di 61 gradi.
        courseF_artist_for10_c: |-
          Vuoi sapere come è stata creata l'immagine dell'esempio?

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for10_2019:
        courseF_artist_for10_a: L'immagine nel disegno è stata creata usando la variabile
          `counter` nel blocco `imposta l'opacità` e `counter`/`10` per impostare
          la larghezza del pennello.
        courseF_artist_for10_b: L'immagine nel disegno usa un angolo di 61 gradi.
        courseF_artist_for10_c: |-
          Vuoi sapere come è stata creata l'immagine dell'esempio?

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for1_2018:
        courseF_artist_for1_a: |-
          Prova a disegnare un'immagine di questo tipo:

          ![](https://images.code.org/efee6df2a8840c89fa535bef72e9e45f-image-1530131926453.png)
      courseF_artist_for1_2019:
        courseF_artist_for1_a: |-
          Prova a disegnare un'immagine di questo tipo:

          ![](https://images.code.org/efee6df2a8840c89fa535bef72e9e45f-image-1530131926453.png)
      courseF_artist_for2:
        courseF_artist_for2_a: "Usa la variabile `counter` (_contatore_) come lunghezza
          dei lati dei triangoli all'interno del ciclo `ripeti ... volte`.\n\n<xml><block
          type=\"draw_move\" inline=\"true\">\n\n<title name=\"DIR\">moveForward</title>\n<value
          name=\"VALUE\">\n<block type=\"variables_get\">\n<title name=\"VAR\">counter</title>\n</block>\n</value>\n</block>\n</xml> "
        courseF_artist_for2_b: Ricordati di contare a passi di 10 all'interno del
          ciclo con contatore.
        courseF_artist_for2_c: |-
          Questo è lo schema che l'artista seguirà:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for2_2018:
        courseF_artist_for2_a: "Usa la variabile `counter` (_contatore_) come lunghezza
          dei lati dei triangoli all'interno del ciclo `ripeti ... volte`.\n\n<xml><block
          type=\"draw_move\" inline=\"true\">\n\n<title name=\"DIR\">moveForward</title>\n<value
          name=\"VALUE\">\n<block type=\"variables_get\">\n<title name=\"VAR\">counter</title>\n</block>\n</value>\n</block>\n</xml> "
        courseF_artist_for2_b: Ricordati di contare a passi di 10 all'interno del
          ciclo con contatore.
        courseF_artist_for2_c: |-
          Questo è lo schema che l'artista seguirà:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for2_2019:
        courseF_artist_for2_a: "Usa la variabile `counter` (_contatore_) come lunghezza
          dei lati dei triangoli all'interno del ciclo `ripeti ... volte`.\n\n<xml><block
          type=\"draw_move\" inline=\"true\">\n\n<title name=\"DIR\">moveForward</title>\n<value
          name=\"VALUE\">\n<block type=\"variables_get\">\n<title name=\"VAR\">counter</title>\n</block>\n</value>\n</block>\n</xml> "
        courseF_artist_for2_b: Ricordati di contare a passi di 10 all'interno del
          ciclo con contatore.
        courseF_artist_for2_c: |-
          Questo è lo schema che l'artista seguirà:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for3:
        courseF_artist_for3_a: |-
          Per risolvere l'esercizio con il  _ciclo con contatore_, devi rappresentare la distanza con la variabile `counter` (_contatore_) all'interno del blocco `vai avanti`.

          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseF_artist_for3_2018:
        courseF_artist_for3_a: |-
          Per risolvere l'esercizio con il  _ciclo con contatore_, devi rappresentare la distanza con la variabile `counter` (_contatore_) all'interno del blocco `vai avanti`.

          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseF_artist_for3_2019:
        courseF_artist_for3_a: |-
          Per risolvere l'esercizio con il  _ciclo con contatore_, devi rappresentare la distanza con la variabile `counter` (_contatore_) all'interno del blocco `vai avanti`.

          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseF_artist_for4:
        courseF_artist_for4_a: |-
          Ecco le domande cui rispondere per trovare i valori da inserire al posto dei `???`:\
          **Qual è il valore più piccolo che serve?\
          Qual è il più grande?\
          Qual è l'incremento necessario ad ogni ripetizione?**
        courseF_artist_for4_b: Il programma sarà molto simile a quello del precedente
          esercizio, ma questa volta ricordati di disegnare un quadrato!
        courseF_artist_for4_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseF_artist_for4_2018:
        courseF_artist_for4_a: |-
          Ecco le domande cui rispondere per trovare i valori da inserire al posto dei `???`:\
          **Qual è il valore più piccolo che serve?\
          Qual è il più grande?\
          Qual è l'incremento necessario ad ogni ripetizione?**
        courseF_artist_for4_b: Il programma sarà molto simile a quello del precedente
          esercizio, ma questa volta ricordati di disegnare un quadrato!
        courseF_artist_for4_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseF_artist_for4_2019:
        courseF_artist_for4_a: |-
          Ecco le domande cui rispondere per trovare i valori da inserire al posto dei `???`:\
          **Qual è il valore più piccolo che serve?\
          Qual è il più grande?\
          Qual è l'incremento necessario ad ogni ripetizione?**
        courseF_artist_for4_b: Il programma sarà molto simile a quello del precedente
          esercizio, ma questa volta ricordati di disegnare un quadrato!
        courseF_artist_for4_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseF_artist_for5:
        courseF_artist_for5_a: Per creare la spirale, non hai bisogno di usare un
          ciclo `ripeti ... volte` all'interno del _ciclo con contatore_!
        courseF_artist_for5_b: Il _ciclo con contatore_ ed i blocchi `vai avanti`
          e `gira a` possono rimanere esattamente gli stessi.
      courseF_artist_for5_2018:
        courseF_artist_for5_a: Per creare la spirale, non hai bisogno di usare un
          ciclo `ripeti ... volte` all'interno del _ciclo con contatore_!
        courseF_artist_for5_b: Il _ciclo con contatore_ ed i blocchi `vai avanti`
          e `gira a` possono rimanere esattamente gli stessi.
      courseF_artist_for5_2019:
        courseF_artist_for5_a: Per creare la spirale, non hai bisogno di usare un
          ciclo `ripeti ... volte` all'interno del _ciclo con contatore_!
        courseF_artist_for5_b: Il _ciclo con contatore_ ed i blocchi `vai avanti`
          e `gira a` possono rimanere esattamente gli stessi.
      courseF_artist_for6:
        courseF_artist_for6_a: Il _ciclo con contatore_ conterà da 15 a 300 a passi
          di 15.
        courseF_artist_for6_b: Metti un blocco `vai avanti` e un blocco `gira a` all'interno
          di questo _ciclo con contatore_.
        courseF_artist_for6_c: Tutto quello che devi modificare è il numero dei gradi
          nel blocco `gira a`.
      courseF_artist_for6_2018:
        courseF_artist_for6_a: Il _ciclo con contatore_ conterà da 15 a 300 a passi
          di 15.
        courseF_artist_for6_b: Metti un blocco `vai avanti` e un blocco `gira a` all'interno
          di questo _ciclo con contatore_.
        courseF_artist_for6_c: Tutto quello che devi modificare è il numero dei gradi
          nel blocco `gira a`.
      courseF_artist_for6_2019:
        courseF_artist_for6_a: Il _ciclo con contatore_ conterà da 15 a 300 a passi
          di 15.
        courseF_artist_for6_b: Metti un blocco `vai avanti` e un blocco `gira a` all'interno
          di questo _ciclo con contatore_.
        courseF_artist_for6_c: Tutto quello che devi modificare è il numero dei gradi
          nel blocco `gira a`.
      courseF_artist_for7:
        courseF_artist_for7_a: Il pennello è più sottile in questo esercizio. Dovrai
          usare il blocco `imposta la larghezza 1` prima di iniziare.
        courseF_artist_for7_b: Nota che questa spirale gira a destra invece che a
          sinistra!
        courseF_artist_for7_c: In questo esercizio, il _ciclo con contatore_ conta
          da 15 a 300 a passi di 2.
        courseF_artist_for7_d: Questa immagine è realizzata girando solo di 89 gradi.
      courseF_artist_for7_2018:
        courseF_artist_for7_a: Il pennello è più sottile in questo esercizio. Dovrai
          usare il blocco `imposta la larghezza 1` prima di iniziare.
        courseF_artist_for7_b: Nota che questa spirale gira a destra invece che a
          sinistra!
        courseF_artist_for7_c: In questo esercizio, il _ciclo con contatore_ conta
          da 15 a 300 a passi di 2.
        courseF_artist_for7_d: Questa immagine è realizzata girando solo di 89 gradi.
      courseF_artist_for7_2019:
        courseF_artist_for7_a: Il pennello è più sottile in questo esercizio. Dovrai
          usare il blocco `imposta la larghezza 1` prima di iniziare.
        courseF_artist_for7_b: Nota che questa spirale gira a destra invece che a
          sinistra!
        courseF_artist_for7_c: In questo esercizio, il _ciclo con contatore_ conta
          da 15 a 300 a passi di 2.
        courseF_artist_for7_d: Questa immagine è realizzata girando solo di 89 gradi.
      courseF_artist_for8:
        courseF_artist_for8_a: In questo programma, mantieni ogni altra cosa uguale
          a prima, bisogna modificare solo l'angolo.
        courseF_artist_for8_b: Se vuoi, puoi scegliere un colore diverso per disegnare
          la tua spirale!
      courseF_artist_for8_2018:
        courseF_artist_for8_a: In questo programma, mantieni ogni altra cosa uguale
          a prima, bisogna modificare solo l'angolo.
        courseF_artist_for8_b: Se vuoi, puoi scegliere un colore diverso per disegnare
          la tua spirale!
      courseF_artist_for8_2019:
        courseF_artist_for8_a: In questo programma, mantieni ogni altra cosa uguale
          a prima, bisogna modificare solo l'angolo.
        courseF_artist_for8_b: Se vuoi, puoi scegliere un colore diverso per disegnare
          la tua spirale!
      courseF_artist_for9:
        courseF_artist_for9_a: Se metti il blocco `imposta l'opacità` all'interno
          del _ciclo con contatore_ e usi la variabile `counter` (_contatore_) per
          modificarla, puoi creare un disegno come questo.
        courseF_artist_for9_b: Il blocco `imposta l'opacità` modifica l'opacità di
          un colore. Più piccolo è il valore più il colore è trasparente.
      courseF_artist_for9_2018:
        courseF_artist_for9_a: Se metti il blocco `imposta l'opacità` all'interno
          del _ciclo con contatore_ e usi la variabile `counter` (_contatore_) per
          modificarla, puoi creare un disegno come questo.
        courseF_artist_for9_b: Il blocco `imposta l'opacità` modifica l'opacità di
          un colore. Più piccolo è il valore più il colore è trasparente.
      courseF_artist_for9_2019:
        courseF_artist_for9_a: Se metti il blocco `imposta l'opacità` all'interno
          del _ciclo con contatore_ e usi la variabile `counter` (_contatore_) per
          modificarla, puoi creare un disegno come questo.
        courseF_artist_for9_b: Il blocco `imposta l'opacità` modifica l'opacità di
          un colore. Più piccolo è il valore più il colore è trasparente.
      courseF_artist_for_challenge1:
        courseF_artist_for_challenge1_a: La larghezza del pennello è 1. Il primo quadrato
          ha il lato di 50 pixel ed ogni quadrato successivo ha il lato più lungo
          di 50 pixel.
        courseF_artist_for_challenge1_b: Il valore dell'opacità del pennello è sempre
          la metà del valore del contatore (`counter`/2).
        courseF_artist_for_challenge1_c: Al termine del disegno di un quadrato devi
          posizionare l'artista un po' più in alto a sinistra per disegnare correttamente
          il successivo quadrato.
        courseF_artist_for_challenge1_d: |-
          **Soluzione:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge1_2018:
        courseF_artist_for_challenge1_a: La larghezza del pennello è 1. Il primo quadrato
          ha il lato di 50 pixel ed ogni quadrato successivo ha il lato più lungo
          di 50 pixel.
        courseF_artist_for_challenge1_b: Il valore dell'opacità del pennello è sempre
          la metà del valore del contatore (`counter`/2).
        courseF_artist_for_challenge1_c: Al termine del disegno di un quadrato devi
          posizionare l'artista un po' più in alto a sinistra per disegnare correttamente
          il successivo quadrato.
        courseF_artist_for_challenge1_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge1_2019:
        courseF_artist_for_challenge1_a: La larghezza del pennello è 1. Il primo quadrato
          ha il lato di 50 pixel ed ogni quadrato successivo ha il lato più lungo
          di 50 pixel.
        courseF_artist_for_challenge1_b: Il valore dell'opacità del pennello è sempre
          la metà del valore del contatore (`counter`/2).
        courseF_artist_for_challenge1_c: Al termine del disegno di un quadrato devi
          posizionare l'artista un po' più in alto a sinistra per disegnare correttamente
          il successivo quadrato.
        courseF_artist_for_challenge1_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_for_counter" inline="true">
                        <mutation counter="counter"></mutation>
                          <value name="FROM">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <value name="TO">
                            <block type="math_number">
                              <title name="NUM">350</title>
                            </block>
                          </value>
                          <value name="BY">
                            <block type="math_number">
                              <title name="NUM">50</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="alpha" inline="true" id="alpha">
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">DIVIDE</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">2</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="math_number">
                                      <title name="NUM">4</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="draw_move" inline="true">
                                      <title name="DIR">moveForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </statement>
                                  <next>
                                    <block type="jump" inline="true">
                                      <title name="DIR">jumpBackward</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">25</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn" inline="true">
                                          <title name="DIR">turnRight</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                          <next>
                                            <block type="jump" inline="true">
                                              <title name="DIR">jumpBackward</title>
                                              <value name="VALUE">
                                                <block type="math_number">
                                                  <title name="NUM">25</title>
                                                </block>
                                              </value>
                                              <next>
                                                <block type="draw_turn" inline="true">
                                                  <title name="DIR">turnLeft</title>
                                                  <value name="VALUE">
                                                    <block type="math_number">
                                                      <title name="NUM">90</title>
                                                    </block>
                                                  </value>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge2:
        courseF_artist_for_challenge2_c: Il cambiamento del colore si attua col blocco
          `imposta il colore con rosso, verde, blu`. Il valore del rosso è sempre
          fisso a `255` mentre quello del verde è sempre uguale a quello del contatore
          (`counter`) ed il blu è uguale a `255`–`counter`.
        courseF_artist_for_challenge2_a: La figura è una spirale di colore mutevole
          e tratti rettilinei progressivamente più lunghi.
        courseF_artist_for_challenge2_b: La soluzione di questo esercizio è più semplice
          di quanto pensi. Basta impostare il colore all'interno del ciclo, andare
          avanti e girare.
        courseF_artist_for_challenge2_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge2_2018:
        courseF_artist_for_challenge2_c: Il cambiamento del colore si attua col blocco
          `imposta il colore con rosso, verde, blu`. Il valore del rosso è sempre
          fisso a `255` mentre quello del verde è sempre uguale a quello del contatore
          (`counter`) ed il blu è uguale a `255`–`counter`.
        courseF_artist_for_challenge2_a: La figura è una spirale di colore mutevole
          e tratti rettilinei progressivamente più lunghi.
        courseF_artist_for_challenge2_b: La soluzione di questo esercizio è più semplice
          di quanto pensi. Basta impostare il colore all'interno del ciclo, andare
          avanti e girare.
        courseF_artist_for_challenge2_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_for_challenge2_2019:
        courseF_artist_for_challenge2_c: Il cambiamento del colore si attua col blocco
          `imposta il colore con rosso, verde, blu`. Il valore del rosso è sempre
          fisso a `255` mentre quello del verde è sempre uguale a quello del contatore
          (`counter`) ed il blu è uguale a `255`–`counter`.
        courseF_artist_for_challenge2_a: La figura è una spirale di colore mutevole
          e tratti rettilinei progressivamente più lunghi.
        courseF_artist_for_challenge2_b: La soluzione di questo esercizio è più semplice
          di quanto pensi. Basta impostare il colore all'interno del ciclo, andare
          avanti e girare.
        courseF_artist_for_challenge2_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_for_counter" inline="true">
                    <mutation counter="counter"></mutation>
                      <value name="FROM">
                        <block type="math_number">
                          <title name="NUM">5</title>
                        </block>
                      </value>
                      <value name="TO">
                        <block type="math_number">
                          <title name="NUM">250</title>
                        </block>
                      </value>
                      <value name="BY">
                        <block type="math_number">
                          <title name="NUM">2</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="draw_colour" inline="true" id="draw-color">
                          <value name="COLOUR">
                            <block type="colour_rgb" inline="false">
                              <value name="RED">
                                <block type="math_number">
                                  <title name="NUM">255</title>
                                </block>
                              </value>
                              <value name="GREEN">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <value name="BLUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="math_number">
                                      <title name="NUM">255</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block>
                          </value>
                          <next>
                            <block type="draw_move" inline="true">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">counter</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn" inline="true">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">80</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_fwp6:
        courseF_artist_fwp6_a: Va benissimo sperimentare il comportamento della funzione
          per capire come si comporta al variare del valore dei parametri.
      courseF_artist_fwp_challenge2:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        courseF_artist_fwp_challenge1_b: Il disegno è formato da una serie di ottagoni
          ognuno con i lati lunghi `counter` (<i>contatore</i>) pixel.
        courseF_artist_fwp_challenge1_c: La funzione che disegna l'ottagono è chiamata
          dall'interno di un ciclo `ripeti con counter` che conta all'indietro da
          200 a 2 con passo 2.
        courseF_artist_fwp_challenge1_d: Ad ogni ripetizione del ciclo `ripeti con
          counter` devi girare di 22.5 gradi.
        courseF_artist_fwp_challenge1_e: Il valore di `counter` controlla sia la larghezza
          del pennello che il colore (diminuendo il "rosso" e aumentando sia il "verde"
          che il "blu").
        courseF_artist_fwp_challenge1_f: <b>Soluzione:</b> Se vuoi, <a href="https://studio.code.org/c/159884109"
          target="_blank">clicca qui</a> e poi su "Come funziona" per vedere la soluzione.
      courseF_artist_variables10:
        courseF_artist_variables10_a: Divertiti con questo esercizio! Guarda come
          possono influire delle piccole modifiche sul funzionamento del programma.
        courseF_artist_variables10_b: Puoi fare diverse modifiche ed eseguire il programma
          più volte.
      courseF_artist_variables10_2018:
        courseF_artist_variables10_a: Divertiti con questo esercizio! Guarda come
          possono influire delle piccole modifiche sul funzionamento del programma.
        courseF_artist_variables10_b: Puoi fare diverse modifiche ed eseguire il programma
          più volte.
      courseF_artist_variables10_2019:
        courseF_artist_variables10_a: Divertiti con questo esercizio! Guarda come
          possono influire delle piccole modifiche sul funzionamento del programma.
        courseF_artist_variables10_b: Puoi fare diverse modifiche ed eseguire il programma
          più volte.
      courseF_artist_variables2:
        courseF_artist_variables2_a: Ricordati di andare avanti dopo aver disegnato
          ogni triangolo.
        courseF_artist_variables2_b: Il tuo nuovo ciclo conterrà il ciclo che disegna
          un triangolo seguito da un'istruzione `vai avanti`.
      courseF_artist_variables2_2018:
        courseF_artist_variables2_a: Ricordati di andare avanti dopo aver disegnato
          ogni triangolo.
        courseF_artist_variables2_b: Il tuo nuovo ciclo conterrà il ciclo che disegna
          un triangolo seguito da un'istruzione `vai avanti`.
      courseF_artist_variables2_2019:
        courseF_artist_variables2_a: Ricordati di andare avanti dopo aver disegnato
          ogni triangolo.
        courseF_artist_variables2_b: Il tuo nuovo ciclo conterrà il ciclo che disegna
          un triangolo seguito da un'istruzione `vai avanti`.
      courseF_artist_variables3:
        courseF_artist_variables3_a: 'La variabile `length` (_lunghezza_) verrà usata
          in due punti del programma: per il lato del triangolo e per lo spazio tra
          un triangolo e l''altro.'
        courseF_artist_variables3_b: 'Il blocco numerico con valore 50 dovrebbe essere
          in un solo posto: dopo il blocco `imposta length a`.'
      courseF_artist_variables3_2018:
        courseF_artist_variables3_a: 'La variabile `length` (_lunghezza_) verrà usata
          in due punti del programma: per il lato del triangolo e per lo spazio tra
          un triangolo e l''altro.'
        courseF_artist_variables3_b: 'Il blocco numerico con valore 50 dovrebbe essere
          in un solo posto: dopo il blocco `imposta length a`.'
      courseF_artist_variables3_2019:
        courseF_artist_variables3_a: 'La variabile `length` (_lunghezza_) verrà usata
          in due punti del programma: per il lato del triangolo e per lo spazio tra
          un triangolo e l''altro.'
        courseF_artist_variables3_b: 'Il blocco numerico con valore 50 dovrebbe essere
          in un solo posto: dopo il blocco `imposta length a`.'
      courseF_artist_variables4:
        courseF_artist_variables4_a: Il codice non sarà molto diverso da quello dell'esercizio
          precedente, tranne per il fatto che dovrai girare l'artista per farlo saltare
          in basso, quindi girarlo di nuovo per farlo saltare in avanti ancora una
          volta.
        courseF_artist_variables4_c: |-
          Questo è lo schema che il tuo artista dovrà seguire:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables4_2018:
        courseF_artist_variables4_a: Il codice non sarà molto diverso da quello dell'esercizio
          precedente, tranne per il fatto che dovrai girare l'artista per farlo saltare
          in basso, quindi girarlo di nuovo per farlo saltare in avanti ancora una
          volta.
        courseF_artist_variables4_c: |-
          Questo è lo schema che il tuo artista dovrà seguire:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
      courseF_artist_variables4_2019:
        courseF_artist_variables4_a: Il codice non sarà molto diverso da quello dell'esercizio
          precedente, tranne per il fatto che dovrai girare l'artista per farlo saltare
          in basso, quindi girarlo di nuovo per farlo saltare in avanti ancora una
          volta.
        courseF_artist_variables4_c: |-
          Questo è lo schema che il tuo artista dovrà seguire:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
      courseF_artist_variables5:
        courseF_artist_variables5_a: La seconda metà del programma dovrebbe apparire
          quasi uguale alla prima metà, tranne per il fatto che dovrai girare a _sinistra_,
          saltare e poi girare a _destra_.
        courseF_artist_variables5_b: La prima parte del programma dovrà disegnare
          tre triangoli e la seconda parte dovrà disegnare gli altri tre.
        courseF_artist_variables5_c: Inizia duplicando il codice della prima metà
          del programma, quindi modificalo per rendere visibile il disegno.
        courseF_artist_variables5_d: |-
          Questo è lo schema che il tuo artista dovrà seguire:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2018:
        courseF_artist_variables5_a: La seconda metà del programma dovrebbe apparire
          quasi uguale alla prima metà, tranne per il fatto che dovrai girare a _sinistra_,
          saltare e poi girare a _destra_.
        courseF_artist_variables5_b: La prima parte del programma dovrà disegnare
          tre triangoli e la seconda parte dovrà disegnare gli altri tre.
        courseF_artist_variables5_c: Inizia duplicando il codice della prima metà
          del programma, quindi modificalo per rendere visibile il disegno.
        courseF_artist_variables5_d: |-
          Questo è lo schema che il tuo artista dovrà seguire:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2019:
        courseF_artist_variables5_a: La seconda metà del programma dovrebbe apparire
          quasi uguale alla prima metà, tranne per il fatto che dovrai girare a _sinistra_,
          saltare e poi girare a _destra_.
        courseF_artist_variables5_b: La prima parte del programma dovrà disegnare
          tre triangoli e la seconda parte dovrà disegnare gli altri tre.
        courseF_artist_variables5_c: Inizia duplicando il codice della prima metà
          del programma, quindi modificalo per rendere visibile il disegno.
        courseF_artist_variables5_d: |-
          Questo è lo schema che il tuo artista dovrà seguire:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables6:
        courseF_artist_variables6_a: Grazie all'uso della variabile, devi modificare
          solo un numero in alto per svolgere questo esercizio.
        courseF_artist_variables6_b: Dovrai modificare solo il blocco numerico con
          valore 50, nient'altro.
      courseF_artist_variables6_2018:
        courseF_artist_variables6_a: Grazie all'uso della variabile, devi modificare
          solo un numero in alto per svolgere questo esercizio.
        courseF_artist_variables6_b: Dovrai modificare solo il blocco numerico con
          valore 50, nient'altro.
      courseF_artist_variables6_2019:
        courseF_artist_variables6_a: Grazie all'uso della variabile, devi modificare
          solo un numero in alto per svolgere questo esercizio.
        courseF_artist_variables6_b: Dovrai modificare solo il blocco numerico con
          valore 50, nient'altro.
      courseF_artist_variables6a:
        courseF_artist_variables6a_a: Per risolvere questo esercizio, invece di usare
          un numero, ricordati di usare la variabile `length` (_lunghezza_).
        courseF_artist_variables6a_b: Questo codice sarà molto simile a quello dei
          triangoli, solo che ora vengono disegnati dei quadrati!
        courseF_artist_variables6a_c: Prima scrivi il codice per disegnare un quadrato,
          poi aggiungi le istruzioni per muoverti da un quadrato all'altro e infine
          aggiungi un ciclo attorno a tutto ciò!
        courseF_artist_variables6a_d: |-
          Questo è ciò che dovresti realizzare!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables6a_2018:
        courseF_artist_variables6a_a: Per risolvere questo esercizio, invece di usare
          un numero, ricordati di usare la variabile `length` (_lunghezza_).
        courseF_artist_variables6a_b: Questo codice sarà molto simile a quello dei
          triangoli, solo che ora vengono disegnati dei quadrati!
        courseF_artist_variables6a_c: Prima scrivi il codice per disegnare un quadrato,
          poi aggiungi le istruzioni per muoverti da un quadrato all'altro e infine
          aggiungi un ciclo attorno a tutto ciò!
        courseF_artist_variables6a_d: |-
          Questo è ciò che dovresti realizzare!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables6a_2019:
        courseF_artist_variables6a_a: Per risolvere questo esercizio, invece di usare
          un numero, ricordati di usare la variabile `length` (_lunghezza_).
        courseF_artist_variables6a_b: Questo codice sarà molto simile a quello dei
          triangoli, solo che ora vengono disegnati dei quadrati!
        courseF_artist_variables6a_c: Prima scrivi il codice per disegnare un quadrato,
          poi aggiungi le istruzioni per muoverti da un quadrato all'altro e infine
          aggiungi un ciclo attorno a tutto ciò!
        courseF_artist_variables6a_d: |-
          Questo è ciò che dovresti realizzare!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables7:
        courseF_artist_variables7_a: Inizia il programma usando il blocco `imposta
          length a` per impostare la variabile length (_lunghezza_) a 150.
        courseF_artist_variables7_b: Puoi usare un ciclo `ripeti ... volte` per rendere
          il codice del triangolo più semplice.
        courseF_artist_variables7_c: Devi girare a sinistra di 120 gradi per fare
          gli angoli del triangolo.
      courseF_artist_variables7_2018:
        courseF_artist_variables7_a: Inizia il programma usando il blocco `imposta
          length a` per impostare la variabile length (_lunghezza_) a 150.
        courseF_artist_variables7_b: Puoi usare un ciclo `ripeti ... volte` per rendere
          il codice del triangolo più semplice.
        courseF_artist_variables7_c: Devi girare a sinistra di 120 gradi per fare
          gli angoli del triangolo.
      courseF_artist_variables7_2019:
        courseF_artist_variables7_a: Inizia il programma usando il blocco `imposta
          length a` per impostare la variabile length (_lunghezza_) a 150.
        courseF_artist_variables7_b: Puoi usare un ciclo `ripeti ... volte` per rendere
          il codice del triangolo più semplice.
        courseF_artist_variables7_c: Devi girare a sinistra di 120 gradi per fare
          gli angoli del triangolo.
      courseF_artist_variables8:
        courseF_artist_variables8_b: Ricordati di iniziare il codice per il triangolo
          con il blocco `imposta length a` e imposta la variabile length (_lunghezza_)
          a 150 pixel.
        courseF_artist_variables8_c: Assicurati di usare il ciclo `ripeti ... volte`
          per disegnare il tuo triangolo.
        courseF_artist_variables8_a: "Prova ad inserire questo insieme di blocchi
          \n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n                        <title
          name=\"VAR\">length</title>\n                        <value name=\"VALUE\">\n
          \                         <block type=\"math_arithmetic\" inline=\"true\">\n
          \                           <title name=\"OP\">ADD</title>\n                            <value
          name=\"A\">\n                              <block type=\"variables_get\">\n
          \                               <title name=\"VAR\">length</title>\n                              </block>\n
          \                           </value>\n                            <value
          name=\"B\">\n                              <block type=\"math_number\">\n
          \                               <title name=\"NUM\">10</title>\n                              </block>\n
          \                           </value>\n                          </block>\n
          \                       </value>\n                      </block>\n</xml>\n\nsubito
          prima della fine del ciclo."
      courseF_artist_variables8_2018:
        courseF_artist_variables8_b: Ricordati di iniziare il codice per il triangolo
          con il blocco `imposta length a` e imposta la variabile length (_lunghezza_)
          a 150 pixel.
        courseF_artist_variables8_c: Assicurati di usare il ciclo `ripeti ... volte`
          per disegnare il tuo triangolo.
        courseF_artist_variables8_a: "Prova ad inserire questo insieme di blocchi
          \n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n                        <title
          name=\"VAR\">length</title>\n                        <value name=\"VALUE\">\n
          \                         <block type=\"math_arithmetic\" inline=\"true\">\n
          \                           <title name=\"OP\">ADD</title>\n                            <value
          name=\"A\">\n                              <block type=\"variables_get\">\n
          \                               <title name=\"VAR\">length</title>\n                              </block>\n
          \                           </value>\n                            <value
          name=\"B\">\n                              <block type=\"math_number\">\n
          \                               <title name=\"NUM\">10</title>\n                              </block>\n
          \                           </value>\n                          </block>\n
          \                       </value>\n                      </block>\n</xml>\n\nsubito
          prima della fine del ciclo."
      courseF_artist_variables8_2019:
        courseF_artist_variables8_b: Ricordati di iniziare il codice per il triangolo
          con il blocco `imposta length a` e imposta la variabile length (_lunghezza_)
          a 150 pixel.
        courseF_artist_variables8_c: Assicurati di usare il ciclo `ripeti ... volte`
          per disegnare il tuo triangolo.
        courseF_artist_variables8_a: "Prova ad inserire questo insieme di blocchi
          \n\n<xml>\n<block type=\"variables_set\" inline=\"false\">\n                        <title
          name=\"VAR\">length</title>\n                        <value name=\"VALUE\">\n
          \                         <block type=\"math_arithmetic\" inline=\"true\">\n
          \                           <title name=\"OP\">ADD</title>\n                            <value
          name=\"A\">\n                              <block type=\"variables_get\">\n
          \                               <title name=\"VAR\">length</title>\n                              </block>\n
          \                           </value>\n                            <value
          name=\"B\">\n                              <block type=\"math_number\">\n
          \                               <title name=\"NUM\">10</title>\n                              </block>\n
          \                           </value>\n                          </block>\n
          \                       </value>\n                      </block>\n</xml>\n\nsubito
          prima della fine del ciclo."
      courseF_artist_variables9:
        courseF_artist_variables9_a: Per questo esercizio, tutto quello che devi fare
          è modificare quante volte il ciclo si ripete.
        courseF_artist_variables9_b: Assicurati che i blocchi che incrementano la
          variabile `length` (_lunghezza_) siano all'interno del ciclo in modo che
          le linee continuino ad allungarsi.
      courseF_artist_variables9_2018:
        courseF_artist_variables9_a: Per questo esercizio, tutto quello che devi fare
          è modificare quante volte il ciclo si ripete.
        courseF_artist_variables9_b: Assicurati che i blocchi che incrementano la
          variabile `length` (_lunghezza_) siano all'interno del ciclo in modo che
          le linee continuino ad allungarsi.
      courseF_artist_variables9_2019:
        courseF_artist_variables9_a: Per questo esercizio, tutto quello che devi fare
          è modificare quante volte il ciclo si ripete.
        courseF_artist_variables9_b: Assicurati che i blocchi che incrementano la
          variabile `length` (_lunghezza_) siano all'interno del ciclo in modo che
          le linee continuino ad allungarsi.
      courseF_artist_variablesFP:
        courseF_artist_variablesFP_a: |-
          Prova uno di questi tre disegni.
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variablesFP_2018:
        courseF_artist_variablesFP_a: |-
          Prova uno di questi tre disegni.
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variablesFP_2019:
        courseF_artist_variablesFP_a: |-
          Prova uno di questi tre disegni.
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variables_challenge1:
        courseF_artist_variables_challenge1_a: Tutte le linee verticali hanno lunghezza
          fissa pari a `10`. Mentre ogni linea orizzontale ha una lunghezza pari alla
          variabile `length` (_lunghezza_).
        courseF_artist_variables_challenge1_b: All'interno del ciclo, dovrai sommare
          il valore `10` alla variabile `length` (_lunghezza_) in **due** punti differenti.
        courseF_artist_variables_challenge1_c: 'Per completare questo schema dovrai
          usare: `gira a sinistra` due volte, `gira a destra` due volte e `vai avanti`
          per un totale di quattro volte.'
        courseF_artist_variables_challenge1_d: |-
          Questo esercizio usa solo un ciclo. Senza l'aiuto della variabile, un simile percorso potrebbe essere solo uno zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          Se hai delle difficoltà, inizia creando questa immagine, quindi prova a capire dove puoi usare una variabile per modificare la lunghezza delle linee orizzontali.
        courseF_artist_variables_challenge1_e: |-
          Ecco la soluzione.

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge1_2018:
        courseF_artist_variables_challenge1_a: Tutte le linee verticali hanno lunghezza
          fissa pari a `10`. Mentre ogni linea orizzontale ha una lunghezza pari alla
          variabile `length` (_lunghezza_).
        courseF_artist_variables_challenge1_b: All'interno del ciclo, dovrai sommare
          il valore `10` alla variabile `length` (_lunghezza_) in **due** punti differenti.
        courseF_artist_variables_challenge1_c: 'Per completare questo schema dovrai
          usare: `gira a sinistra` due volte, `gira a destra` due volte e `vai avanti`
          per un totale di quattro volte.'
        courseF_artist_variables_challenge1_d: |-
          Questo esercizio usa solo un ciclo. Senza l'aiuto della variabile, un simile percorso potrebbe essere solo uno zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          Se hai delle difficoltà, inizia creando questa immagine, quindi prova a capire dove puoi usare una variabile per modificare la lunghezza delle linee orizzontali.
        courseF_artist_variables_challenge1_e: |-
          Ecco la soluzione.

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge1_2019:
        courseF_artist_variables_challenge1_a: Tutte le linee verticali hanno lunghezza
          fissa pari a `10`. Mentre ogni linea orizzontale ha una lunghezza pari alla
          variabile `length` (_lunghezza_).
        courseF_artist_variables_challenge1_b: All'interno del ciclo, dovrai sommare
          il valore `10` alla variabile `length` (_lunghezza_) in **due** punti differenti.
        courseF_artist_variables_challenge1_c: 'Per completare questo schema dovrai
          usare: `gira a sinistra` due volte, `gira a destra` due volte e `vai avanti`
          per un totale di quattro volte.'
        courseF_artist_variables_challenge1_d: |-
          Questo esercizio usa solo un ciclo. Senza l'aiuto della variabile, un simile percorso potrebbe essere solo uno zig-zag.

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          Se hai delle difficoltà, inizia creando questa immagine, quindi prova a capire dove puoi usare una variabile per modificare la lunghezza delle linee orizzontali.
        courseF_artist_variables_challenge1_e: |-
          Ecco la soluzione.

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge2:
        courseF_artist_variables_challenge2_a: |-
          Le variabili sono utili perché puoi incrementarne il valore ad ogni ripetizione del ciclo.
          La figura è composta dalla ripetizione del disegno di un pentagono e di un decagono.
          Il perimetro di ogni poligono ha una lunghezza (`length`) di 500 pixel.
        courseF_artist_variables_challenge2_c: |-
          Usando una variabile per il numero di lati (`sides`) e una per la lunghezza del perimetro (`length`) è possibile rendere il codice più pulito e compatto, perché si può ripetere lo stesso codice molte volte invece di crearne una nuova copia per ogni insieme di numeri.
          Entrambi i poligoni sono disegnati dallo stesso ciclo, basato sulla variabile `sides` - il cui valore viene opportunamente cambiato.
          Vengono disegnate prima tutte le ripetizioni del pentagono e poi tutte quelle del decagono.
        courseF_artist_variables_challenge2_d: <b>Soluzione:</b> Vuoi sapere come
          è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/117486491"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      courseF_artist_variables_challenge2_2018:
        courseF_artist_variables_challenge2_a: |-
          Le variabili sono utili perché puoi incrementarne il valore ad ogni ripetizione del ciclo.
          La figura è composta dalla ripetizione del disegno di un pentagono e di un decagono.
          Il perimetro di ogni poligono ha una lunghezza (`length`) di 500 pixel.
        courseF_artist_variables_challenge2_c: |-
          Usando una variabile per il numero di lati (`sides`) e una per la lunghezza del perimetro (`length`) è possibile rendere il codice più pulito e compatto, perché si può ripetere lo stesso codice molte volte invece di crearne una nuova copia per ogni insieme di numeri.
          Entrambi i poligoni sono disegnati dallo stesso ciclo, basato sulla variabile `sides` - il cui valore viene opportunamente cambiato.
          Vengono disegnate prima tutte le ripetizioni del pentagono e poi tutte quelle del decagono.
        courseF_artist_variables_challenge2_d: <b>Soluzione:</b> Vuoi sapere come
          è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/117486491"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      courseF_artist_variables_challenge2_2019:
        courseF_artist_variables_challenge2_a: |-
          Le variabili sono utili perché puoi incrementarne il valore ad ogni ripetizione del ciclo.
          La figura è composta dalla ripetizione del disegno di un pentagono e di un decagono.
          Il perimetro di ogni poligono ha una lunghezza (`length`) di 500 pixel.
        courseF_artist_variables_challenge2_c: |-
          Usando una variabile per il numero di lati (`sides`) e una per la lunghezza del perimetro (`length`) è possibile rendere il codice più pulito e compatto, perché si può ripetere lo stesso codice molte volte invece di crearne una nuova copia per ogni insieme di numeri.
          Entrambi i poligoni sono disegnati dallo stesso ciclo, basato sulla variabile `sides` - il cui valore viene opportunamente cambiato.
          Vengono disegnate prima tutte le ripetizioni del pentagono e poi tutte quelle del decagono.
        courseF_artist_variables_challenge2_d: <b>Soluzione:</b> Vuoi sapere come
          è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/117486491"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      courseF_bee_conditionals2:
        courseF_bee_conditionals2_a: Qualche volta c'è un fiore, altre volte no. Se
          vuoi che il tuo programma funzioni in entrambi i casi, assicurati di usare
          un blocco `se`.
      courseF_bee_conditionals3:
        courseF_bee_conditionals3_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare in ogni casella se c'è un fiore.
      courseF_bee_conditionals4:
        courseD_bee_conditionals4_a: Puoi sempre trattare ogni casella come se avesse
          sopra una nuvola, anche se in questo caso riesci a vedere tutto il percorso.
        courseF_bee_conditionals4_b: Usa un blocco `se` all'interno del ciclo per
          controllare la presenza di un fiore in ogni casella.
      courseF_bee_conditionals5:
        courseF_bee_conditionals5_a: Pensa ad ogni lato del percorso rettangolare
          come ad un percorso a sé stante. Imposta un ciclo annidato con un blocco
          `ripeti ... volte` all'esterno ed uno `mentre c'è strada in avanti` all'interno.
          Lungo quanti lati deve volare l'ape per ronzare su ogni fiore?
        courseF_bee_conditionals5_b: All'interno del blocco `mentre c'è strada in
          avanti` devi andare avanti e controllare se c'è un fiore. Come controlli
          se c'è un fiore? Cosa fai se c'è un fiore?
        courseF_bee_conditionals5_c: Ci sono 3 lati del rettangolo con dei fiori,
          quindi del codice devi usare `ripeti 3 volte`. Ad ogni ripetizione, l'ape
          deve procedere lungo il percorso `mentre c'è strada in avanti`.
      courseF_bee_conditionals8:
        courseF_bee_conditionals8_a: "**Attenzione:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseF_bee_conditionals8_b: |-
          Questo esercizio è un po' complicato, perché non puoi controllare le caselle vuote, i fiori _e_ i favi con un'unica istruzione condizionale.

          Controlla solo se c'è un fiore o un favo alla fine di ogni tratto del percorso (dove vedi le nuvole).
      courseF_bee_for1:
        courseF_bee_for1_a: Trascina un blocco numerico viola nello spazio vuoto del
          ciclo `ripeti ... volte` per indicare quante volte deve essere ripetuto.
        courseF_bee_for1_b: Hai bisogno di due blocchi nel ciclo `ripeti ... volte`
          per raccogliere tutto il nettare.
      courseF_bee_for10:
        courseF_bee_for10_a: Riesci a trovare una relazione tra il numero di passi
          che l'ape fa per arrivare al fiore ed il numero di dosi di nettare che deve
          raccogliere?
        courseF_bee_for10_b: Il primo fiore ha un totale di **14 dosi** di nettare.
          Per arrivare a questo primo fiore, l'ape deve ronzare verso il basso per
          **7 caselle** (ovvero 14 diviso 2). Quante dosi di nettare ci sono nel fiore
          successivo? e quante caselle dovrà percorrere l'ape per arrivarci?
        courseF_bee_for10_c: |-
          In questo esercizio, il primo fiore ha **14** dosi di nettare, il secondo ha **10** dosi, il terzo ne ha **6** e il quarto **2**.

          In questo percorso, ci sono **7** caselle rosse, **5** arancioni, **3** verdi e **1** blu.

          ![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png>)

          Che collegamento c'è tra questi numeri?
        courseF_bee_for10_d: Devi usare 2 blocchi `ripeti ... volte` e uno di questi
          deve usare un blocco con operazioni matematiche.
      courseF_bee_for10_2018:
        courseF_bee_for10_a: Riesci a trovare una relazione tra il numero di passi
          che l'ape fa per arrivare al fiore ed il numero di dosi di nettare che deve
          raccogliere?
        courseF_bee_for10_b: Il primo fiore ha un totale di **14 dosi** di nettare.
          Per arrivare a questo primo fiore, l'ape deve ronzare verso il basso per
          **7 caselle** (ovvero 14 diviso 2). Quante dosi di nettare ci sono nel fiore
          successivo? e quante caselle dovrà percorrere l'ape per arrivarci?
        courseF_bee_for10_c: |-
          In questo esercizio, il primo fiore ha **14** dosi di nettare, il secondo ha **10** dosi, il terzo ne ha **6** e il quarto **2**.

          In questo percorso, ci sono **7** caselle rosse, **5** arancioni, **3** verdi e **1** blu.

          ![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png>)

          Che collegamento c'è tra questi numeri?
        courseF_bee_for10_d: Devi usare 2 blocchi `ripeti ... volte` e uno di questi
          deve usare un blocco con operazioni matematiche.
      courseF_bee_for10_2019:
        courseF_bee_for10_a: Riesci a trovare una relazione tra il numero di passi
          che l'ape fa per arrivare al fiore ed il numero di dosi di nettare che deve
          raccogliere?
        courseF_bee_for10_b: Il primo fiore ha un totale di **14 dosi** di nettare.
          Per arrivare a questo primo fiore, l'ape deve ronzare verso il basso per
          **7 caselle** (ovvero 14 diviso 2). Quante dosi di nettare ci sono nel fiore
          successivo? e quante caselle dovrà percorrere l'ape per arrivarci?
        courseF_bee_for10_c: |-
          In questo esercizio, il primo fiore ha **14** dosi di nettare, il secondo ha **10** dosi, il terzo ne ha **6** e il quarto **2**.

          In questo percorso, ci sono **7** caselle rosse, **5** arancioni, **3** verdi e **1** blu.

          ![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png>)

          Che collegamento c'è tra questi numeri?
        courseF_bee_for10_d: Devi usare 2 blocchi `ripeti ... volte` e uno di questi
          deve usare un blocco con operazioni matematiche.
      courseF_bee_for11:
        courseF_bee_for11_a: |-
          Di quanto 12 è inferiore a 15?\
          Di quanto 9 è inferiore a 12?

          Riesci a individuare lo schema?
      courseF_bee_for11_2018:
        courseF_bee_for11_a: |-
          Di quanto 12 è inferiore a 15?\
          Di quanto 9 è inferiore a 12?

          Riesci a individuare lo schema?
      courseF_bee_for11_2019:
        courseF_bee_for11_a: |-
          Di quanto 12 è inferiore a 15?\
          Di quanto 9 è inferiore a 12?

          Riesci a individuare lo schema?
      courseF_bee_for1_2018:
        courseF_bee_for1_a: Trascina un blocco numerico viola nello spazio vuoto del
          ciclo `ripeti ... volte` per indicare quante volte deve essere ripetuto.
        courseF_bee_for1_b: Hai bisogno di due blocchi nel ciclo `ripeti ... volte`
          per raccogliere tutto il nettare.
      courseF_bee_for1_2019:
        courseF_bee_for1_a: Trascina un blocco numerico viola nello spazio vuoto del
          ciclo `ripeti ... volte` per indicare quante volte deve essere ripetuto.
        courseF_bee_for1_b: Hai bisogno di due blocchi nel ciclo `ripeti ... volte`
          per raccogliere tutto il nettare.
      courseF_bee_for2:
        courseF_bee_for2_a: Se sei confuso, lavora su un fiore alla volta e prova
          ad eseguire il programma frequentemente.
        courseF_bee_for2_b: Ricordati di andare avanti tra un ciclo e il successivo,
          cosi potrai raggiungere ogni fiore.
      courseF_bee_for2_2018:
        courseF_bee_for2_a: Se sei confuso, lavora su un fiore alla volta e prova
          ad eseguire il programma frequentemente.
        courseF_bee_for2_b: Ricordati di andare avanti tra un ciclo e il successivo,
          cosi potrai raggiungere ogni fiore.
      courseF_bee_for2_2019:
        courseF_bee_for2_a: Se sei confuso, lavora su un fiore alla volta e prova
          ad eseguire il programma frequentemente.
        courseF_bee_for2_b: Ricordati di andare avanti tra un ciclo e il successivo,
          cosi potrai raggiungere ogni fiore.
      courseF_bee_for4:
        courseF_bee_for4_a: Usa un _ciclo con contatore_ (`per counter`) che va da
          1 a 7 con un passo di 1 per risolvere questo esercizio.
        courseF_bee_for4_b: All'interno del _ciclo con contatore_, dovrai avere un
          blocco `vai avanti` e un ciclo per raccogliere il nettare.
        courseF_bee_for4_c: Per raccogliere tutto il nettare, assicurati di usare
          la variabile `counter` (_contatore_) all'interno del ciclo annidato!
      courseF_bee_for4_2018:
        courseF_bee_for4_a: Usa un _ciclo con contatore_ (`per counter`) che va da
          1 a 7 con un passo di 1 per risolvere questo esercizio.
        courseF_bee_for4_b: All'interno del _ciclo con contatore_, dovrai avere un
          blocco `vai avanti` e un ciclo per raccogliere il nettare.
        courseF_bee_for4_c: Per raccogliere tutto il nettare, assicurati di usare
          la variabile `counter` (_contatore_) all'interno del ciclo annidato!
      courseF_bee_for4_2019:
        courseF_bee_for4_a: Usa un _ciclo con contatore_ (`per counter`) che va da
          1 a 7 con un passo di 1 per risolvere questo esercizio.
        courseF_bee_for4_b: All'interno del _ciclo con contatore_, dovrai avere un
          blocco `vai avanti` e un ciclo per raccogliere il nettare.
        courseF_bee_for4_c: Per raccogliere tutto il nettare, assicurati di usare
          la variabile `counter` (_contatore_) all'interno del ciclo annidato!
      courseF_bee_for5:
        courseF_bee_for5_a: Questa volta, il blocco `vai avanti` e il blocco `prendi
          il nettare` dovranno essere in cicli `ripeti ... volte` separati, entrambi
          all'interno dello stesso _ciclo con contatore_.
        courseF_bee_for5_b: Usa la variabile `counter` (_contatore_) in ogni ciclo,
          in modo che l'ape percorra distanze diverse tra ogni fiore.
        courseF_bee_for5_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseF_bee_for5_2018:
        courseF_bee_for5_a: Questa volta, il blocco `vai avanti` e il blocco `prendi
          il nettare` dovranno essere in cicli `ripeti ... volte` separati, entrambi
          all'interno dello stesso _ciclo con contatore_.
        courseF_bee_for5_b: Usa la variabile `counter` (_contatore_) in ogni ciclo,
          in modo che l'ape percorra distanze diverse tra ogni fiore.
        courseF_bee_for5_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseF_bee_for5_2019:
        courseF_bee_for5_a: Questa volta, il blocco `vai avanti` e il blocco `prendi
          il nettare` dovranno essere in cicli `ripeti ... volte` separati, entrambi
          all'interno dello stesso _ciclo con contatore_.
        courseF_bee_for5_b: Usa la variabile `counter` (_contatore_) in ogni ciclo,
          in modo che l'ape percorra distanze diverse tra ogni fiore.
        courseF_bee_for5_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa succede, anche se non hai ancora risolto
          l'esercizio.
      courseF_bee_for6:
        courseF_bee_for6_a: Non dimenticarti di usare la variabile `counter` (_contatore_)
          all'interno del ciclo `ripeti ... volte`.
        courseF_bee_for6_b: All'interno del _ciclo con contatore_, dovrai avere un
          blocco `vai avanti` e un ciclo per raccogliere il nettare.
        courseF_bee_for6_c: Il ciclo dovrà contare **da 5 a 1**.
      courseF_bee_for6_2018:
        courseF_bee_for6_a: Non dimenticarti di usare la variabile `counter` (_contatore_)
          all'interno del ciclo `ripeti ... volte`.
        courseF_bee_for6_b: All'interno del _ciclo con contatore_, dovrai avere un
          blocco `vai avanti` e un ciclo per raccogliere il nettare.
        courseF_bee_for6_c: Il ciclo dovrà contare **da 5 a 1**.
      courseF_bee_for6_2019:
        courseF_bee_for6_a: Non dimenticarti di usare la variabile `counter` (_contatore_)
          all'interno del ciclo `ripeti ... volte`.
        courseF_bee_for6_b: All'interno del _ciclo con contatore_, dovrai avere un
          blocco `vai avanti` e un ciclo per raccogliere il nettare.
        courseF_bee_for6_c: Il ciclo dovrà contare **da 5 a 1**.
      courseF_bee_for7:
        courseF_bee_for7_a: Il _ciclo con contatore_ dovrà contare da 1 a 7 a passi
          di 2.
        courseF_bee_for7_b: All'interno del _ciclo con contatore_, dovrai avere un
          blocco `vai avanti` e un ciclo per raccogliere il nettare.
        courseF_bee_for7_c: Ricordati di usare la variabile `counter` (_contatore_)
          all'interno del ciclo `ripeti ... volte`.
      courseF_bee_for7_2018:
        courseF_bee_for7_a: Il _ciclo con contatore_ dovrà contare da 1 a 7 a passi
          di 2.
        courseF_bee_for7_b: All'interno del _ciclo con contatore_, dovrai avere un
          blocco `vai avanti` e un ciclo per raccogliere il nettare.
        courseF_bee_for7_c: Ricordati di usare la variabile `counter` (_contatore_)
          all'interno del ciclo `ripeti ... volte`.
      courseF_bee_for7_2019:
        courseF_bee_for7_a: Il _ciclo con contatore_ dovrà contare da 1 a 7 a passi
          di 2.
        courseF_bee_for7_b: All'interno del _ciclo con contatore_, dovrai avere un
          blocco `vai avanti` e un ciclo per raccogliere il nettare.
        courseF_bee_for7_c: Ricordati di usare la variabile `counter` (_contatore_)
          all'interno del ciclo `ripeti ... volte`.
      courseF_bee_for8:
        courseF_bee_for8_a: "Se il tuo ciclo sta contando in avanti, l'incremento
          viene aggiunto alla variabile `counter` (_contatore_) ad ogni iterazione
          del ciclo (cioè ogni volta che vengono eseguite le istruzioni presenti nel
          ciclo). \n\nQuanto bisogna aggiungere ad ogni numero per ottenere il prossimo
          quantitativo di nettare?"
        courseF_bee_for8_b: In questo esercizio, ti dovrai muovere seguendo uno schema
          a scalinata per raccogliere i fiori.
        courseF_bee_for8_c: Il tuo ciclo dovrà contare _da 3 a 15_ con un certo passo.
          Quale?
      courseF_bee_for8_2018:
        courseF_bee_for8_a: "Se il tuo ciclo sta contando in avanti, l'incremento
          viene aggiunto alla variabile `counter` (_contatore_) ad ogni iterazione
          del ciclo (cioè ogni volta che vengono eseguite le istruzioni presenti nel
          ciclo). \n\nQuanto bisogna aggiungere ad ogni numero per ottenere il prossimo
          quantitativo di nettare?"
        courseF_bee_for8_b: In questo esercizio, ti dovrai muovere seguendo uno schema
          a scalinata per raccogliere i fiori.
        courseF_bee_for8_c: Il tuo ciclo dovrà contare _da 3 a 15_ con un certo passo.
          Quale?
      courseF_bee_for8_2019:
        courseF_bee_for8_a: "Se il tuo ciclo sta contando in avanti, l'incremento
          viene aggiunto alla variabile `counter` (_contatore_) ad ogni iterazione
          del ciclo (cioè ogni volta che vengono eseguite le istruzioni presenti nel
          ciclo). \n\nQuanto bisogna aggiungere ad ogni numero per ottenere il prossimo
          quantitativo di nettare?"
        courseF_bee_for8_b: In questo esercizio, ti dovrai muovere seguendo uno schema
          a scalinata per raccogliere i fiori.
        courseF_bee_for8_c: Il tuo ciclo dovrà contare _da 3 a 15_ con un certo passo.
          Quale?
      courseF_bee_for9:
        courseF_bee_for9_a: Prova ad usare nel _ciclo con contatore_ un valore della
          variabile `counter` (_contatore_) che viene modificato con un blocco matematico
          man mano che ti sposti e raccogli il nettare.
        courseF_bee_for9_c: Per risolvere questo esercizio, dovrai far ruotare l'ape
          all'inizio di ogni iterazione del ciclo.
        courseF_bee_for9_b: "**Ricorda:** Se il tuo ciclo sta contando in avanti,
          l'incremento viene aggiunto alla variabile `counter` (_contatore_) ad ogni
          iterazione del ciclo (cioè ogni volta che vengono eseguite le istruzioni
          presenti nel ciclo)."
      courseF_bee_for9_2018:
        courseF_bee_for9_a: Prova ad usare nel _ciclo con contatore_ un valore della
          variabile `counter` (_contatore_) che viene modificato con un blocco matematico
          man mano che ti sposti e raccogli il nettare.
        courseF_bee_for9_c: Per risolvere questo esercizio, dovrai far ruotare l'ape
          all'inizio di ogni iterazione del ciclo.
        courseF_bee_for9_b: "**Ricorda:** Se il tuo ciclo sta contando in avanti,
          l'incremento viene aggiunto alla variabile `counter` (_contatore_) ad ogni
          iterazione del ciclo (cioè ogni volta che vengono eseguite le istruzioni
          presenti nel ciclo)."
      courseF_bee_for9_2019:
        courseF_bee_for9_a: Prova ad usare nel _ciclo con contatore_ un valore della
          variabile `counter` (_contatore_) che viene modificato con un blocco matematico
          man mano che ti sposti e raccogli il nettare.
        courseF_bee_for9_c: Per risolvere questo esercizio, dovrai far ruotare l'ape
          all'inizio di ogni iterazione del ciclo.
        courseF_bee_for9_b: "**Ricorda:** Se il tuo ciclo sta contando in avanti,
          l'incremento viene aggiunto alla variabile `counter` (_contatore_) ad ogni
          iterazione del ciclo (cioè ogni volta che vengono eseguite le istruzioni
          presenti nel ciclo)."
      courseF_bee_for_challenge2:
        courseF_bee_for_challenge2_a: "L'ape dovrebbe seguire un percorso in cui raccoglie
          prima tutto il nettare (andando a zig-zag verso destra e verso l'alto) e
          poi tutto il miele (andando a zig-zag verso il basso e verso sinistra):
          \ \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: 'È conveniente usare 2 _cicli con contatore_:
          uno per salire mentre si raccoglie il nettare, uno per scendere mentre si
          produce il miele.'
        courseF_bee_for_challenge2_c: Mentre il _ciclo con contatore_ per salire deve
          usare il valore della variabile `counter` (_contatore_) sia per spostarsi
          che per raccogliere il nettare, quello per scendere lo deve usare solo per
          produrre il miele.
        courseF_bee_for_challenge2_d: |-
          **Soluzione:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_for_challenge2_2018:
        courseF_bee_for_challenge2_a: "L'ape dovrebbe seguire un percorso in cui raccoglie
          prima tutto il nettare (andando a zig-zag verso destra e verso l'alto) e
          poi tutto il miele (andando a zig-zag verso il basso e verso sinistra):
          \ \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: 'È conveniente usare 2 _cicli con contatore_:
          uno per salire mentre si raccoglie il nettare, uno per scendere mentre si
          produce il miele.'
        courseF_bee_for_challenge2_c: Mentre il _ciclo con contatore_ per salire deve
          usare il valore della variabile `counter` (_contatore_) sia per spostarsi
          che per raccogliere il nettare, quello per scendere lo deve usare solo per
          produrre il miele.
        courseF_bee_for_challenge2_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_bee_for_challenge2_2019:
        courseF_bee_for_challenge2_a: "L'ape dovrebbe seguire un percorso in cui raccoglie
          prima tutto il nettare (andando a zig-zag verso destra e verso l'alto) e
          poi tutto il miele (andando a zig-zag verso il basso e verso sinistra):
          \ \n\n![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)"
        courseF_bee_for_challenge2_b: 'È conveniente usare 2 _cicli con contatore_:
          uno per salire mentre si raccoglie il nettare, uno per scendere mentre si
          produce il miele.'
        courseF_bee_for_challenge2_c: Mentre il _ciclo con contatore_ per salire deve
          usare il valore della variabile `counter` (_contatore_) sia per spostarsi
          che per raccogliere il nettare, quello per scendere lo deve usare solo per
          produrre il miele.
        courseF_bee_for_challenge2_d: |-
          **Soluzione:**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_for" inline="true">
                  <title name="VAR">counter</title>
                  <value name="FROM">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <value name="TO">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <value name="BY">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="controls_repeat_ext" inline="true">
                      <value name="TIMES">
                        <block type="variables_get">
                          <title name="VAR">counter</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="maze_moveForward"/>
                      </statement>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="variables_get">
                              <title name="VAR">counter</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="maze_nectar"/>
                          </statement>
                          <next>
                            <block type="maze_turn">
                              <title name="DIR">turnLeft</title>
                              <next>
                                <block type="controls_repeat_ext" inline="true">
                                  <value name="TIMES">
                                    <block type="variables_get">
                                      <title name="VAR">counter</title>
                                    </block>
                                  </value>
                                  <statement name="DO">
                                    <block type="maze_moveForward"/>
                                  </statement>
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_for" inline="true">
                              <title name="VAR">counter</title>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">10</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnLeft</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnRight</title>
                                              <next>
                                                <block type="controls_repeat_ext" inline="true">
                                                  <value name="TIMES">
                                                    <block type="variables_get">
                                                      <title name="VAR">counter</title>
                                                    </block>
                                                  </value>
                                                  <statement name="DO">
                                                    <block type="maze_honey"/>
                                                  </statement>
                                                </block>
                                              </next>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_bee_functions2:
        courseF_bee_functions2_a: La funzione è già stata scritta per te, ma è necessario
          che tu la richiami quando l'artista è su ogni fiore.
      courseF_bee_functions6:
        courseF_bee_functions6_a: "Se ti sembra troppo difficile, prova a creare la
          funzione poco per volta.  \n\nAggiungi qualche blocco e prova a vedere cosa
          fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla
          soluzione!\n\n<xml>\n  <block type=\"procedures_defnoreturn\" editable=\"false\">\n
          \   <mutation/>\n    <title name=\"NAME\">get nectar make honey</title>\n
          \   <statement name=\"STACK\">\n    </statement>\n  </block>\n</xml>"
      courseF_bee_functions8a:
        courseF_bee_functions8a_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
      courseF_bee_functionsPre7:
        courseF_bee_functions7_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
      courseF_bee_functions_challenge2:
        courseF_bee_functions_challenge2_b: |-
          **Soluzione:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathRight</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"></mutation>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">move and check</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="vai avanti e controlla"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">check nectar or honey</title>
          <statement name="STACK">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="bee_whileNectarAmount">
          <title name="ARG1">honeyAvailable</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      courseF_bee_variables_3_2018:
        courseF_beevariables_3a: |-
          Per fare in modo che ad ogni iterazione del ciclo la variabile diminuisca di un'unità, puoi usare questo codice nel tuo programma:
          <xml><block type="variables_set" inline="false">
                              <title name="VAR">gather</title>
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">gather</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block></xml>
      courseF_bee_variables_3_2019:
        courseF_bee_variables_3_2019_1: |-
          Per fare in modo che ad ogni iterazione del ciclo la variabile diminuisca di un'unità, puoi usare questo codice nel tuo programma:
          <xml><block type="variables_set" inline="false">
                              <title name="VAR">gather</title>
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">gather</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block></xml>
      courseF_playlab_variables_challenge2:
        courseF_playlab_variables_challenge2_b: Se vuoi, puoi modificare il parametro
          che cambia la velocità alla quale si muove il cane ogni volta che premi
          le frecce.
        courseF_playlab_variables_challenge2_c: |-
          **Soluzione:**

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">up</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">1</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">down</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">4</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">8</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      coursea_maze_ramp1_2018:
        courseC_maze_programming1_a: Se l'uccellino non riesce a prendere il maialino,
          controlla che i due blocchi siano collegati insieme, quindi clicca nuovamente
          su "Esegui".
        courseC_maze_programming1_b: Non aver paura di sbagliare! Prova in qualche
          modo e se non funziona prova in un'altra maniera!
      coursea_maze_ramp1_2019:
        courseC_maze_programming1_a: Se l'uccellino non riesce a prendere il maialino,
          controlla che i due blocchi siano collegati insieme, quindi clicca nuovamente
          su "Esegui".
        courseC_maze_programming1_b: Non aver paura di sbagliare! Prova in qualche
          modo e se non funziona prova in un'altra maniera!
      grade5_artist_variables_triangles1:
        grade5_artist_variables_triangles1_a: Ricordati che per creare l'angolo interno
          di 60 gradi del triangolo, devi far girare l'artista di 120 gradi (il corrispondente
          angolo esterno).
        grade5_artist_variables_triangles1_b: Usa il blocco `ripeti ... volte` per
          accorciare il tuo programma.
        grade5_artist_variables_triangles1_c: All'interno del tuo ciclo, dovrai andare
          avanti di 50 pixel e poi girare a sinistra di 120 gradi.
      grade5_artist_variables_triangles1_2018:
        grade5_artist_variables_triangles1_a: Ricordati che per creare l'angolo interno
          di 60 gradi del triangolo, devi far girare l'artista di 120 gradi (il corrispondente
          angolo esterno).
        grade5_artist_variables_triangles1_b: Usa il blocco `ripeti ... volte` per
          accorciare il tuo programma.
        grade5_artist_variables_triangles1_c: All'interno del tuo ciclo, dovrai andare
          avanti di 50 pixel e poi girare a sinistra di 120 gradi.
      grade5_artist_variables_triangles1_2019:
        grade5_artist_variables_triangles1_a: Ricordati che per creare l'angolo interno
          di 60 gradi del triangolo, devi far girare l'artista di 120 gradi (il corrispondente
          angolo esterno).
        grade5_artist_variables_triangles1_b: Usa il blocco `ripeti ... volte` per
          accorciare il tuo programma.
        grade5_artist_variables_triangles1_c: All'interno del tuo ciclo, dovrai andare
          avanti di 50 pixel e poi girare a sinistra di 120 gradi.
      iceage_click_hello:
        iceage_click_hello_a: Per completare l'esercizio aggiungi uno o più blocchi
          `il personaggio 1 dice` all'evento `quando si clicca sul personaggio 1`.
      iceage_free_play:
        iceage_free_play_a: Puoi fare in modo che Sid e Manny si sfidino a palle di
          neve?
        iceage_free_play_b: Fai in modo che la Nonnina debba inseguire Diego. Si vince
          se lei riesce a prenderlo.
        iceage_free_play_c: Riesci a fare in modo che Sid tiri fiocchi di neve a Diego
          e far sì che Diego diventi più grande ogni volta che viene colpito? Si vince
          quando Diego viene colpito 5 volte.
      iceage_hello1:
        iceage_hello1_a: Devi aggiungere solo un blocco per risolvere questo esercizio.
          Trascina il blocco `il personaggio 1 dice ...` dalla cassetta degli attrezzi
          e attaccalo all'evento`quando si clicca su "Esegui"` già presente nell'area
          di lavoro. Poi aggiungi la scritta "Ciao!" al suo interno.
      iceage_move_events:
        iceage_move_events_a: Per risolvere l'esercizio, ogni evento `quando si preme
          sulla freccia ...` ha bisogno di avere collegato un diverso comando `sposta
          il personaggio ...`.
      iceage_move_to_actor:
        iceage_move_to_actor_a: Per risolvere questo esercizio, puoi sia muovere Diego
          in basso di 200 pixel, sia muovere Manny in alto di 200 pixel.
        iceage_move_to_actor_b: Collega il blocco `riproduci il suono di ...` all'evento
          `quando il personaggio 1 tocca il personaggio 2` per terminare questa sfida.
      iceage_move_to_flag:
        iceage_hello3_a: Usa il blocco `sposta il personaggio 1 a destra 200 pixel`
          per risolvere l'esercizio.
      iceage_repeat:
        iceage_repeat_a: Usa entrambi i blocchi `sposta il personaggio 1 a destra`
          e `sposta il personaggio 1 a sinistra` per risolvere questo esercizio.
      iceage_sound_and_points:
        iceage_sound_and_points_a: Dovrai aggiungere due blocchi sotto all'evento
          `quando il personaggio 1 tocca il personaggio 2`.
        iceage_sound_and_points_b: Avrai bisogno sia del blocco `aggiungi un punto`
          sia di quello `riproduci il suono di ...` per completare questo esercizio.
      iceage_throw_hearts:
        iceage_throw_hearts_a: Quando vuoi lanciare i cuori alla nonna? Quando si
          preme una freccia? Quando clicchi su Sid? Quando clicchi sulla Nonnina?
          La scelta è tua!
        iceage_throw_hearts_b: Per fare in modo che la nonna sia felice quando riceve
          i cuori, devi collegare il blocco `imposta il personaggio 2 ad umore felice`
          sotto all'evento `quando il personaggio 2 tocca dei cuori`.
      iceage_warn_ice_age:
        iceage_warn_ice_age_a: Devi semplicemente aggiungere due blocchi per risolvere
          questo esercizio.
        iceage_warn_ice_age_b: Aggiungi entrambi i nuovi blocchi sotto all'evento
          `quando si clicca su "Esegui"` per farli eseguire immediatamente all'avvio
          del programma.
