---
it:
  data:
    authored_hints:
      2-3 Artist 1 new_authored_hint:
        2-3_Artist_1_new_a: Se usi il blocco `vai avanti di 100 pixel`, disegnerò
          automaticamente una linea.
        2-3_Artist_1_new_b: Problemi a girare? Utilizza il blocco `gira a destra di
          90 gradi`.
      2-3 Artist 11_authored_hint:
        2-3_Artist_11_a: 'Problemi con gli angoli? Devi suddividere i 360 gradi del
          giro completo in 8 parti uguali. Quanto fa 360/8? '
      2-3 Artist 12_authored_hint:
        2-3_Artist_12_a: Ci sono 360 gradi in un cerchio, quindi se giri di 1 grado
          ogni volta devi eseguire il ciclo 360 volte.
      2-3 Artist 2 new_authored_hint:
        2-3_Artist_2_new_a: Sembra che l'artista non sia rivolto verso la direzione
          corretta. Puoi farlo girare, prima di disegnare la linea?
      2-3 Artist 3new_authored_hint:
        2-3_Artist_3new_a: Quanto fa 100-70? Il risultato è quanto dovrebbe essere
          alto il cappello!
        2-3_Artist_3new_b: Sembra che l'artista non sia rivolto verso la direzione
          corretta. Puoi farlo girare, prima di disegnare la linea?
      2-3 Artist 4_authored_hint:
        2-3_Artist_4_a: Per completare la casa, tutto quello che devi fare è disegnare
          un quadrato!
      2-3 Artist 6_authored_hint:
        2-3_Artist_6_a: 'Per gli angoli piccoli, dovete girare intorno * più * volte.   '
        2-3_Artist_6_b: Visto che sono già rivolto verso destra, disegnare il triangolo
          è più facile se inizi andando avanti e poi giri a sinistra.
        2-3_Artist_6_c: Ogni lato del triangolo è la stessa lunghezza di ciascun lato
          del quadrato... 100 pixel!
      2-3 Artist 7_authored_hint:
        2-3_Artist_7_a: Il modo più facile per risolvere questo esercizio è di disegnare
          i primi tre lati del quadratino superiore, poi in un tratto solo l'ultimo
          lato più il primo lato del quadratino inferiore, per poi finire con i due
          lati restanti.
      2-3 Artist 8_authored_hint:
        2-3_Artist_8_a: Se dividi 200 a metà ottieni il lato dei quadrati.
      2-3 Artist 9 NEW_authored_hint:
        2-3_Artist_9_a: Questo rombo è semplicemente un quadrato ruotato.
      2-3 Artist 9 REPLACEMENT_authored_hint:
        step_size: Ogni passo è 100 pixel di larghezza e 100 pixel di altezza.
      2-3 Artist 9_authored_hint:
        2-3_Artist_9_a: Questo diamante è solo un quadrato ruotato di 45 gradi.
        2-3_Artist_9_b: Non dimenticate di girare l'artista di 45 gradi a sinistra
          prima di iniziare a disegnare il vostro quadrato! ! [] (https://images.code.org/47cc2474e533667101a2d73b98da204e-image-1467744539967.gif)
      2-3 Artist Debugging 10_authored_hint:
        2-3_Artist_Debugging_10_a: Prova ad eseguire il codice così com'è per capire
          dov'è l'errore.
        2-3_Artist_Debugging_10_b: |
          Ricorda che devi allargare il controller di 10 pixel: quindi devi <b>aggiungere</b> 10 a qualche valore.<br>
          Questo è un caso in cui è ragionevole fare esperimenti.<br>
          Cambia un numero alla volta e osserva cosa succede.<br>
          Se temi di esserti perso, premi il bottone "Ripristina" per tornare al codice iniziale.
      2-3 Artist Debugging 2_authored_hint:
        2-3_Artist_Debugging_2_a: Ogni baffo è lungo 75 pixel.
      2-3 Artist Debugging 3_authored_hint:
        2-3_Artist_Debugging_3_a: Nell'ultimo angolo c'è un errore di 15 gradi.
        2-3_Artist_Debugging_3_b: Se il programma viene eseguito troppo velocemente
          per capire cosa sta succedendo, rallentalo spostando il cursore verso la
          tartaruga.
      2-3 Artist Debugging 7_authored_hint:
        2-3_Artist_Debugging_7_a: Prova a far tornare indietro l'artista dopo aver
          disegnato la prima linea.
      2-3 Artist Debugging 8_authored_hint:
        2-3_Artist_Debugging_8_a: |-
          Quante volte viene ripetuta la figura?<br>
          Invece, quante volte <i>dovrebbe</i> essere ripetuta?<br>
          Quindi, come devi correggere il blocco `ripeti ... volte`?
      2-3 Artist Debugging 9_authored_hint:
        2-3_Artist_Debugging_9_a: Prima di iniziare a disegnare, l'artista deve girare
          a sinistra di 60 gradi in più.
        2-3_Artist_Debugging_9_b: 'Non c''è bisogno di aggiungere un altro blocco:
          basta aggiungere 60 gradi al blocco `gira a sinistra` che già c''è.'
      2-3 Artist Functions 1 a_authored_hint:
        2-3_Artist_Functions_1_a: Le lenti quadrate hanno i lati da 100 pixel, questo
          significa che dovrai muoverti in avanti di 175 pixel prima di disegnare
          la seconda lente.
        2-3_Artist_Functions_1_b: Tieni conto che puoi sempre riscrivere su delle
          linee già tracciate.
      2-3 Artist Functions 1_authored_hint:
        2-3_Artist_Functions_1_a: Le lenti quadrate hanno i lati da 100 pixel, questo
          significa che dovrai muoverti in avanti di 175 pixel prima di disegnare
          la seconda lente.
        2-3_Artist_Functions_1_b: Tieni conto che puoi sempre riscrivere su delle
          linee già tracciate.
      2-3 Artist Functions 11 a_authored_hint:
        2-3_Artist_Functions_11_a: Non basta cambiare il numero e la lunghezza dei
          lati nella funzione, ma occorre modificare anche l'angolo tra un lato e
          l'altro.
      2-3 Artist Functions 11_authored_hint:
        2-3_Artist_Functions_11_a: Non basta cambiare il numero e la lunghezza dei
          lati nella funzione, ma occorre modificare anche l'angolo tra un lato e
          l'altro.
      2-3 Artist Functions 12 a_authored_hint:
        2-3_Artist_Functions_12_a: Prova ad eseguire il programma per capire che blocchi
          devi aggiungere.
      2-3 Artist Functions 12_authored_hint:
        2-3_Artist_Functions_12_a: Prova ad eseguire il programma per capire che blocchi
          devi aggiungere.
      2-3 Artist Functions 2 a_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Il programma deve:<br>
          - usare la funzione<br>
          - andare avanti di 100 + 75 pixel<br>
          - usare la funzione
      2-3 Artist Functions 2_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Il programma deve:<br>
          - usare la funzione<br>
          - andare avanti di 100 + 75 pixel<br>
          - usare la funzione
      2-3 Artist Functions 3 a_authored_hint:
        2-3_Artist_Functions_3_a: Adesso di quanto bisogna andare avanti prima di
          usare la funzione per la seconda volta?
      2-3 Artist Functions 3_authored_hint:
        2-3_Artist_Functions_3_a: Adesso di quanto bisogna andare avanti prima di
          usare la funzione per la seconda volta?
      2-3 Artist Functions 4 a_authored_hint:
        2-3_Artist_Functions_4_a: L'artista deve girare di 120 gradi prima di disegnare
          il successivo quadrato.
      2-3 Artist Functions 4_authored_hint:
        2-3_Artist_Functions_4_a: L'artista deve girare di 120 gradi prima di disegnare
          il successivo quadrato.
      2-3 Artist Loops New 11_authored_hint:
        2-3_Artist_Loops_New_11_a: |-
          Ricordati che il codice del precedente esercizio era:

          ![](https://programmailfuturo.it/images/codeorg/2-7-9-a.PNG)
        2-3_Artist_Loops_New_11_b: Devi aggiungere Il blocco `gira a sinistra di 30
          gradi` <b>dopo</b> le altre istruzioni all'interno del ciclo.
      2-3 Artist Loops New 12_authored_hint:
        2-3_Artist Loops_New_12_a: Prima di iniziare il disegno, devi girare a sinistra
          di 60 gradi per avviarti nella direzione corretta.
        2-3_Artist Loops_New_12_b: Dopo essere andato avanti di 100 pixel, devi girare
          a destra di 120 gradi per disegnare l'angolo acuto.
        2-3_Artist Loops_New_12_c: Devi girare a destra solo di 60 gradi per disegnare
          l'angolo ottuso.
      2-3 Artist Loops New 13_authored_hint:
        2-3_Artist_Loops_New_13_a: |-
          Al termine di ogni rombo, sei già rivolto nella direzione giusta per iniziare il successivo.<br>
          Per questo non è necessario aggiungere un altro blocco `gira a sinistra` prima di disegnare il nuovo rombo.
        2-3_Artist_Loops_New_13_b: |-
          Per disegnare un rombo devi:
          - andare avanti
          - girare a destra di 120 gradi
          - andare avanti
          - girare a destra di 60 gradi

          Poi devi ripetere tutto per gli altri rombi!
      2-3 Artist Loops New 9_authored_hint:
        2-3_Artist_Loops_New_9_a: Devi girare a destra di 45 gradi prima di iniziare
          a disegnare.
        2-3_Artist_Loops_New_9_b: In pratica la V è esattamente metà di un quadrato.
          Qual è il codice per disegnare mezzo quadrato?
      2-3 Artist Nested Loops 1_authored_hint:
        2-3_Artist_Nested_Loops_1_a: Ricorda di inserire tutti i blocchi grigi all'interno
          del <i>ciclo</i> `ripeti ... volte`.
      2-3 Artist Nested Loops 3_authored_hint:
        2-3_Artist_Nested_Loops_3_a: |-
          Serve aiuto con gli angoli?<br>
          <b>360/12=30</b>
        2-3_Artist_Nested_Loops_3_b: Ricorda di inserire tutti i blocchi grigi e il
          blocco `gira a` all'interno del <i>ciclo</i> `ripeti ... volte`.
      2-3 Artist Nested Loops 4_authored_hint:
        2-3_Artist_Nested_Loops_3_a: |-
          Serve aiuto con gli angoli?<br>
          <b>360/12=30</b>
      2-3 Artist Nested Loops 5_authored_hint:
        2-3_Artist_Nested_Loops_5_a: Prova ad usare il blocco `salta in avanti` per
          passare dalla cima di un quadrato alla posizione in cui devi iniziare il
          successivo.
      2-3 Artist Nested Loops 7_authored_hint:
        2-3_Artist_Nested_Loops_7_a: |-
          Di quanto bisogna girare ad ogni <i>ciclo</i>?<br>
          Quanto fa 360/10?
      2-3 Artist Nested Loops 9_authored_hint:
        2-3_Artist_Nested_Loops_9_a: |-
          Hai bisogno di aiuto per trovare l'angolo corretto?<br>
          <b>360/12=30</b>
      2-3 Bee Conditionals 14_authored_hint:
        2-3_Bee_Conditionals_14_a: Fai fatica a trovare la soluzione? Prova a trattare
          il fiore rosso come se fosse viola!
        2-3_Bee_Conditionals_14_b: Se consideri il fiore rosso come se fosse viola,
          allora puoi usare un ulteriore <i>ciclo</i> `ripeti ... volte`.
        2-3_Bee_Conditionals_14_c: |-
          Prova a suddividere il problema in due parti separate:<br>
          ![](https://images.code.org/895a52f3febff9edb83979f7861cf67a-image-1469640892331.png)<br>
          <b>1)</b> Raccogliere il nettare 3 volte<br>
          - Vai avanti di 5 passi<br>
          - Controlla se c'è del nettare, in caso affermativo: prendilo<br>
          - Gira a sinistra

          <b>2)</b> Produrre il miele<br>
          - Fai un passo avanti<br>
          - Produci due volte il miele
      2-3 Bee Conditionals 15_authored_hint:
        2-3_Bee_Conditionals_15_a: 'Ricorda: i fiori viola possono avere una quantità
          di nettare pari a 0 oppure 1 e questa quantità può cambiare ogni volta che
          esegui il programma.'
      2-3 Bee Conditionals 3_authored_hint:
        2-3_Bee_Conditionals_3_a: Ottieni un programma più corto se usi un <i>ciclo</i>
          per ogni tratto in cui vai avanti, un altro <i>ciclo</i> per raccogliere
          il nettare ed ancora un altro <i>ciclo</i> per produrre il miele.
      2-3 Bee Conditionals 6_authored_hint:
        2-3_Bee_Conditionals_6_a: 'Fai attenzione: il nettare dei fiori viola (0 oppure
          1) può cambiare ogni volta che esegui il programma!'
      2-3 Bee Debugging 1_authored_hint:
        2-3_Bee_Debugging_1_a: Dopo aver trovato e risolto l'errore, riesci a semplificare
          il codice usando un <i>ciclo</i> `ripeti ... volte`?
      2-3 Bee Debugging 2_authored_hint:
        2-3_Bee_Debugging_2_a: Dopo aver trovato e risolto l'errore, riesci a semplificare
          il codice usando un <i>ciclo</i> `ripeti ... volte`?
      2-3 Bee Debugging 4_authored_hint:
        2-3_Bee_Debugging_4_a: In quale punto del programma l'ape fa qualcosa di sbagliato?
          Correggi quel blocco.
      2-3 Bee Functions 4_authored_hint:
        2-3_Bee_Functions_4_a: Usa un ciclo per i primi due fiori, poi gestisci a
          parte il terzo fiore.
      2-3 Bee Functions 6_authored_hint:
        2-3_Bee_Functions_6_a: Usa un ciclo per i primi due fiori, poi gestisci a
          parte il terzo fiore.
      2-3 Bee Functions 8_authored_hint:
        2-3_Bee_Functions_8_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!

          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
      2-3 Bee Functions 9_authored_hint:
        2-3_Bee_Functions_8_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        2-3_Bee_Functions_8_b: |-
          Ricordati di inserire il codice all'interno del blocco verde della funzione.<br>

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      2-3 Bee Loops 2_authored_hint:
        2-3_Bee_Loops_2_a: Alla fine dovresti avere quattro blocchi all'interno del
          <i>ciclo</i> `ripeti ... volte`.
      2-3 Bee Loops 3_authored_hint:
        2-3_Bee_Loops_3_a: Dovresti avere sei blocchi all'interno del <i>cilco</i>
          `ripeti ... volte`.
      2-3 Bee Loops 3B_authored_hint:
        2-3_Bee_Loops_3B_a: Avrai bisogno di due diversi <i>cicli</i> `ripeti ...
          volte`, uno dopo l'altro.
      2-3 Bee Loops 4_authored_hint:
        2-3_Bee_Loops_4_a: Alla fine dovresti avere cinque blocchi nel <i>ciclo</i>
          `ripeti ... volte`.
      2-3 Bee Loops 4A_authored_hint:
        2-3_Bee_Loops_4A_a: Girati prima di iniziare a muoverti.
        2-3_Bee_Loops_4A_b: Il programma termina con alcuni blocchi fuori dal <i>ciclo</i>
          principale.
        2-3_Bee_Loops_4A_c: Se non riesci subito a capire come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di capire come combinarli in un <i>ciclo</i> `ripeti ... volte`.
      2-3 Bee Loops 5_authored_hint:
        2-3_Bee_Loops_5_a: Se non riesci subito a capire come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di capire come combinarli in un <i>ciclo</i> `ripeti ... volte`.
      2-3 Bee Loops 6_authored_hint:
        2-3_Bee_Loops_6_a: Se non riesci ad immaginare quali blocchi inserire nel
          <i>ciclo</i>, prova prima a risolvere l'esercizio senza il blocco `ripeti
          ... volte` e poi cerca di vedere quali sono le parti che si ripetono.
        2-3_Bee_Loops_6_b: Alla fine dovresti avere sei blocchi nel <i>ciclo</i> `ripeti
          ... volte.
      2-3 Bee Loops 7_authored_hint:
        2-3_Bee_Loops_7_a: Girati prima di iniziare a muoverti.
        2-3_Bee_Loops_7_b: Se non riesci a capire subito come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di vedere quali sono le parti che si ripetono per inserirle nel blocco
          `ripeti ... volte`.
      2-3 Maze 1_authored_hint:
        2-3_Maze_1_a: Per usare un blocco `vai avanti`, trascinalo dalla cassetta
          degli attrezzi nell'area di lavoro e collegalo al blocco `quando si clicca
          su "Esegui"`.
      2-3 Maze 16_authored_hint:
        2-3_Maze_16_a: Se fai fatica a capire lo schema che si ripete, prova prima
          a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca di vedere
          quali sono le parti che si ripetono per inserirle nel blocco `ripeti ...
          volte`.
        2-3_Maze_16_b: |-
          Per inserire più blocchi all'interno di un ciclo `ripeti ... volte`, trascina un blocco `ripeti ... volte` dalla cassetta degli attrezzi all'area di lavoro, quindi trascina l'insieme di blocchi che devono ripetersi all'interno del ciclo `ripeti ... volte`.<br>
          <br>
          Controlla che il tutto sia attaccato al blocco `quando si clicca su "Esegui"`.
      2-3 Maze 6_authored_hint:
        2-3_Maze_6_a: Ci sono due modi per risolvere questo esercizio!
      2-3 Maze Loops 17_authored_hint:
        2-3_Maze_Loops_17_a: Se fai fatica a capire lo schema che si ripete, prova
          prima a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca
          di vedere quali sono le parti che si ripetono per inserirle nel blocco `ripeti
          ... volte`.
        2-3_Maze_Loops_17_b: Non ti ricordi più quali erano i blocchi iniziali proposti?
          Clicca `Ripristina` per ricominciare!
      2-3 Maze Loops 18_authored_hint:
        2-3_Maze_Loops_18_a: Se fai fatica a capire lo schema che si ripete, prova
          prima a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca
          di vedere quali sono le parti che si ripetono per inserirle nel blocco `ripeti
          ... volte`.
      2-3 Maze Loops 19_authored_hint:
        2-3_Maze_Loops_19_a: Se fai fatica a capire lo schema che si ripete, prova
          prima a risolvere l'esercizio senza usare cicli, poi cerca di vedere quali
          sono le parti che si ripetono per inserirle nel blocco `ripeti ... volte`.
        2-3_Maze_Loops_19_b: Se inserisci un ciclo `ripeti ... volte` all'interno
          di un altro, riesci a ridurre il numero di blocchi.
      2-3 Maze Loops 20_authored_hint:
        2-3_Maze_Loops_20_a: Cerca di individuare un percorso a gradini per capire
          come puoi sfruttare un ciclo `ripeti ... volte`.
      2-3 Maze Loops 21_authored_hint:
        2-3_Maze_Loops_21_a: Se fai fatica ad individuare il percorso a gradini, prova
          a coprire con le dita i tratti bloccati dalle piante carnivore.
      4-5 Artist 1_authored_hint:
        4-5_Artist_1_a: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      4-5 Artist 11_authored_hint:
        4-5_Artist_11_a: All'interno del ciclo, dopo ogni linea, ricordati di far
          tornare indietro l'artista e farlo saltare alla nuova posizione.
      4-5 Artist 3_authored_hint:
        4-5_Artist_3_a: |-
          Se l'aiuola ha un perimetro di 600 pixel e i suoi due lati lunghi misurano 200 pixel, la somma dei due lati più corti vale:<br>
          <b>600 - 200 - 200 = 200</b><br>
          Essendo uguali, quanto misura ogni lato corto?<br>
          <b>Quanto fa 200 / 2?</b>
        4-5_Artist_3_b: Se non riesci a vedere come usare il ciclo `ripeti ... volte`
          per completare l'esercizio, prova prima a risolvere l'esercizio usando tutti
          i singoli blocchi, poi cerca di individuare lo schema.
      4-5 Artist 4_authored_hint:
        4-5_Artist_4_a: |-
          Ci sono 360 gradi in un cerchio!<br>
          Ecco quante volte devi ripetere il codice che trovi già pronto (girando 1 grado ogni volta) per completare il cerchio!
      4-5 Artist 5_authored_hint:
        4-5_Artist_5_a: |-
          Fare delle prove può funzionare, ma osserva che in totale devi fare un angolo di 90 gradi in 3 passi.<br>
          Quanto fa 90 diviso 3?
      4-5 Artist 7_authored_hint:
        4-5_Artist_7_a: 'Quale angolo è il più piccolo?  In quale angolo è collocato
          l''artista? '
      4-5 Artist 8_authored_hint:
        4-5_Artist_8_a: "Ogni lato lungo è di 240 pixel. Questo significa che la somma
          di quelli corti vale:<br>\n <b>800 - 240 - 240 = 320</b><br>\nChe cosa rappresenta
          <b>320 / 2 </b>? "
        4-5_Artist_8_b: |-
          Quest'immagine può essere disegnata in due modi:<br>
          - disegna due rettangoli con lati 120 e 160, con un lato sovrapposto, oppure<br>
          - disegna un rettangolo con lati 240 e 160, e poi aggiungi la linea di centrocampo.
      4-5 Artist 9_authored_hint:
        4-5_Artist_9_a: Quando un triangolo è equilatero, tutti i lati e tutti gli
          angoli sono uguali tra loro.
        4-5_Artist_9_b: Devi disegnare tre triangoli uguali. Non dimenticare di spostarti
          alla nuova posizione dopo ognuno di essi.
      4-5 Artist Assessment 1_authored_hint:
        4-5_Artist_Assessment_1_a: Devi solo disegnare il triangolo esterno per completare
          l'esercizio.
      4-5 Artist Patterns 11_authored_hint:
        4-5_Artist_Patterns_11_a: Se in un cerchio ci sono 360 gradi e ogni ciclo
          gira di 3 gradi, quante volte devi ripetere il ciclo per disegnare metà
          di tutto il cerchio?
      4-5 Artist Patterns 2_authored_hint:
        4-5_Artist_Patterns_2_a: Visto che i quadrati hanno il lato di 20 pixel, devi
          spostarti di 20 pixel prima di iniziare il quadrato successivo.
      4-5 Artist Patterns 3_authored_hint:
        4-5_Artist_Patterns_3_a: Devi semplicemente scegliere uno dei gruppi di blocchi
          già preparati nella cassetta degli attrezzi ed inserirlo nel punto giusto
          del codice.
        4-5_Artist_Patterns_3_b: Se temi di esserti perso, puoi sempre cliccare "Ripristina"
          per riportarti alla situazione iniziale!
      4-5 Artist Patterns 5_authored_hint:
        4-5_Artist_Patterns_5_a: Ora, alla fine di ogni rombo, l'artista è orientato
          nella direzione opposta a quella che serve per iniziare il rombo successivo.
          Di quanti gradi deve girarsi?
      4-5 Bee Conditionals 4_authored_hint:
        remember_quantum: "**Attenzione:** Ogni volta che esegui il programma ciò
          che è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare
          il blocco condizionale `se/altrimenti`."
      4-5 Bee Conditionals 5_authored_hint:
        remember_quantum: "**Attenzione:** Ogni volta che esegui il programma ciò
          che è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare
          il blocco condizionale `se/altrimenti`."
      4-5 Bee Conditionals 6_authored_hint:
        4-5 Bee Conditionals 6_a: Puoi risolvere l'esercizio usando solo i blocchi
          che trovi già nell'area di lavoro. In che ordine devi metterli?
        4-5 Bee Conditionals 6_b: Assicurati di controllare almeno <b>3</b> volte
          se il fiore ha più di <b>0</b> dosi di nettare.
      4-5 Bee Debugging 1_authored_hint:
        4-5_Bee_Debugging_1_a: Se non riesci ad immaginare dov'è l'errore, prova ad
          eseguire il codice per vedere dove sbaglia.
      4-5 Bee Nested Loops Rows_authored_hint:
        4-5_Bee_Nested_Loops_Rows_a: Considera che l'ape deve percorrere un lungo
          rettangolo, girando a sinistra al termine di ogni lato.
      4-5 Maze 10_authored_hint:
        4-5_Maze_10_a: |-
          Se non riesci a vedere come usare il <i>ciclo</i> per completare l'esercizio, prova prima a risolverlo nella maniera lunga, poi cerca di individuare lo schema.<br>
          Come potresti inserire un <i>ciclo</i> per usare meno blocchi?
      4-5 Maze 4_authored_hint:
        4-5_Maze_4_a: Se stai facendo fatica a capire dove posizionare il <i>ciclo</i>
          `ripeti ... volte`, prova prima a risolvere l'esercizio usando tutti i singoli
          blocchi e poi cerca di vedere quali sono le parti che si ripetono.
      4-5 Maze 5_authored_hint:
        4-5_Maze_5_a: Prova ad usare un <i>ciclo</i> `ripeti ... volte` ogni volta
          che devi muoverti per più di due passi.
        4-5_Maze_5_b: Può usare anche più di un blocco `ripeti ... volte` in un esercizio.
      4-5 Maze 6_authored_hint:
        4-5_Maze_6_a: |-
          Prova a tracciare un percorso con il dito. <br>
          È il percorso più breve possibile?
      4-5 Maze 7_authored_hint:
        4-5_Maze_7_a: |-
          <b>Vuoi creare un programma col minor numero possibile di blocchi?</b><br>
          Cerca degli schemi che si ripetono e costruisci la struttura del <i>ciclo</i> `ripeti ... volte`.
      4-5 Nested Loops 12_authored_hint:
        4-5_Nested_Loops_12_a: |-
          La figura deve essere ripetuta 36 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 36?
      4-5 Nested Loops 2_authored_hint: {}
      4-5 Nested Loops 6_authored_hint:
        4-5_Nested_Loops_6_a: |-
          Non dimenticarti di girare dopo il ciclo interno.<br>
          Devi distribuire 6 triangoli su 360 gradi.<br>
          <b>360 / 6 = ?</b>
      4-5 Nested Loops 7_authored_hint:
        4-5_Nested_Loops_7_a: |-
          La figura deve essere ripetuta 10 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 10?
      4-5 Nested Loops 8_authored_hint:
        4-5_Nested_Loops_8_a: |-
          La figura deve essere ripetuta 6 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 6?
      4-5 While Loops 8_authored_hint:
        4-5_While_Loops_8_a: Usa il blocco `mentre` per entrambi.
      AppLab Intro 3 - Change Screen Color_authored_hint: {}
      AppLab Intro 4 - Change Screen Color_authored_hint: {}
      AppLab Intro 5 - Change Screen Color_authored_hint: {}
      AppLab Intro 6 - Change Screen Color_authored_hint: {}
      AppLab Intro 7 - Change Screen Color_authored_hint: {}
      Artist Inspiration_authored_hint:
        brush_width: Come prima cosa, assegna lo spessore del pennello a 1 ed il suo
          colore a blu.
        double_loop: Prova ad inserire un <i>ciclo con contatore</i> all'interno di
          un altro ciclo.
        specifics: |-
          In ogni petalo, il poligono più piccolo ha 3 lati ed il più grande ne ha 17.<br>
          <br>
          Nel blocco `imposta l'opacità`, usa un blocco divisione per rendere il colore sempre più trasparente man mano che il numero dei lati del poligono aumenta (minore è il valore dell'opacità più trasparente è il colore).
        after: Quando hai finito un petalo, assicurati di spostarti in avanti di 20
          pixel prima di ruotare di 60 gradi per iniziare il petalo successivo.
        solution: Vuoi sapere come è stata realizzata la figura che ti abbiamo mostrato?
          <a href="https://studio.code.org/c/238594589" target="_blank">Clicca qui</a>
          e poi su "Come funziona" per scoprirlo.
      Bergeron Robot Maze1_authored_hint:
        2-3_Maze_1_a: Per usare un blocco `vai avanti`, trascinalo dalla cassetta
          degli attrezzi nell'area di lavoro e collegalo al blocco `quando si clicca
          su "Esegui"`.
      Course 4 Artist 11_authored_hint:
        Course_4_Artist_11_a: Nel primo ciclo, per disegnare il mezzo esagono, l'artista
          percorre tratti di <b>30 pixel</b> invece di 40 e gira a destra di <b>60
          gradi</b>.
        Course_4_Artist_11_b: Nel secondo ciclo, per disegnare i due lati del triangolo,
          l'artista percorre tratti di <b>80 pixel</b> e gira a destra di <b>120 gradi</b>.
      Course 4 Artist 12_authored_hint:
        Course_4_Artist_12_a: 'Ogni figura che viene ripetuta è formata dalla combinazione
          di **mezzo esagono** con **due terzi di un triangolo**. '
        Course_4_Artist_12_b: 'Ogni singola figura è quasi uguale a quella dell''ultimo
          esercizio, tranne per il fatto che il mezzo esagono è un po'' più grande. '
        Course_4_Artist_12_c: "Le prime tre linee sono lunghe 60 pixel e devi ruotare
          di 60 gradi.<br>\n<br>\nLe ultime due linee sono lunghe 80 pixel e devi
          ruotare di 120 gradi. "
        Course_4_Artist_12_d: <b>Soluzione:</b> Vuoi sapere come è stata realizzata
          la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/105671120"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist 6_authored_hint:
        Course_4_Artist_6_a: Devi disegnare 3 triangoli in una rotazione complessiva
          di 360 gradi ... quante volte ci sta il 3 in 360?
      Course 4 Artist 7_authored_hint: {}
      Course 4 Artist 8a_authored_hint:
        Course_4_Artist_8a: Ci sono 3 triangoli in una rotazione complessiva di 360
          gradi ... quante volte ci sta il 3 in 360?
      Course 4 Artist 9_authored_hint:
        Course_4_Artist_9_a: Quanto fa 360 diviso 10?
      Course 4 Artist Binary Free Play 2b_authored_hint:
        Course_4_Artist_Binary_Free_Play_2b_a: |-
          Clicca su "Esegui" per vedere cosa disegna il codice che trovi già pronto.<br>
          La figura può essere scomposta in 2 parti: superiore e inferiore, ognuna di 8 righe, che hanno un andamento simmetrico. Per ogni parte serve un <i>ciclo con contatore</i>, il primo che conta "a salire", il secondo "a scendere".
        Course_4_Artist_Binary_Free_Play_2b_b: In ognuna delle parti, la metà di sinistra
          e quella di destra, entrambe di 8 colonne, hanno anch'esse un andamento
          simmetrico. Per ognuna di tali metà servono due cicli `ripeti con counter`,
          uno per disegnare i quadrati bianchi ed uno per quelli neri, in cui il numero
          di ripetizioni dipende dal valore della variabile `counter` (<i>contatore</i>).
        Course_4_Artist_Binary_Free_Play_2b_c: Vuoi sapere come è stata realizzata
          la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/146760662"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          <b>Nota</b>: è possibile definire una soluzione alternativa che usa solo 3 cicli all'interno di ogni ciclo `ripeti con counter`.<br>
          <br>
          Se vuoi conoscerla <a href="https://studio.code.org/c/118205099" target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist For Loops 11_authored_hint:
        Course_4_Artist_For_Loops_11_a: 'Il numero di gradi di cui girare deve cambiare
          per ogni poligono. 360 diviso il numero di lati del poligono ti restituisce
          il numero di gradi di cui devi girare per disegnarlo: usa un blocco matematico
          per calcolarlo.'
      Course 4 Artist For Loops 11a_authored_hint:
        Course_4_Artist_For_Loops_11a_a: 360 diviso il numero di lati del poligono
          ti restituisce il numero di gradi di cui devi girare per disegnarlo.
        Course_4_Artist_For_Loops_11a_b: In ogni poligono devi avanzare di quantità
          pari a 10 volte il numero di lati del poligono stesso.
      Course 4 Artist For Loops 3_authored_hint:
        Course_4_Artist_For_Loops_3_a: Per risolvere l'esercizio con il ciclo `ripeti
          con counter`, devi rappresentare la distanza con la variabile `counter`
          (<i>contatore</i>).
      Course 4 Artist For Loops 4_authored_hint:
        Course_4_Artist_For_Loops_4_a: |-
          Ecco le domande cui rispondere per trovare i valori da inserire al posto dei `???`:<br>
          Qual è il valore più piccolo che serve? <br>
          Qual è il più grande?<br>
          Qual è l'incremento necessario ad ogni ripetizione?<br>
          <b>Nota</b>: ora ci sono così tanti blocchi nella cassetta degli attrezzi che li abbiamo organizzati in diverse categorie. Prenditi un po' di tempo per esplorarle.
      Course 4 Artist For Loops Challenge_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: Il poligono più grande ha 19 lati.
        Course_4_Artist_For_Loops_Challenge_b: Tutti i poligoni sono incompleti, ossia
          ogni poligono viene disegnato con un lato di meno rispetto a quelli che
          dovrebbe avere (`counter - 1`).
      Course 4 Artist For Loops Challenge_a_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: Il poligono più grande ha 19 lati.
        Course_4_Artist_For_Loops_Challenge_b: Ogni poligono è incompleto, con un
          lato in meno di quanti ne dovrebbe avere.
      Course 4 Artist For Loops inspire_authored_hint:
        Course_4_Artist_For_Loops_inspire_a: La soluzione di questo esercizio è quasi
          uguale a quella dell'esercizio precedente... con un paio di cambiamenti.
        Course_4_Artist_For_Loops_inspire_b: Prova ad usare un <i>ciclo con contatore</i>
          che va da 3 a 10 con passo di 1.
        Course_4_Artist_For_Loops_inspire_c: All'interno del <i>ciclo con contatore</i>
          ci sono due cicli uguali, ma il secondo ciclo gira nella direzione opposta
          del primo.
        Course_4_Artist_For_Loops_inspire_d: <b>Soluzione:</b> Vuoi sapere come è
          stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/109045588"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist Functions Inspiration_authored_hint:
        Course_4_Artist_Functions_Inspiration_a: Usa il codice del precedente esercizio
          ed aggiungi un blocco `gira a ...` di tre gradi all'interno del ciclo interno.
        Course_4_Artist_Functions_Inspiration_b: Devi girare di più di 90 gradi dopo
          ogni ciclo `ripeti ... volte`, ma sempre all'interno del ciclo `ripeti con
          counter`.
        Course_4_Artist_Functions_Inspiration_c: <b>Soluzione:</b> Vuoi sapere come
          è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/227383614"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist Functions challenge_authored_hint:
        Course_4_Artist_Functions_challenge_a: Un parte importante nel realizzare
          le funzioni è capire quali blocchi ti servono e quali no.
        Course_4_Artist_Functions_challenge_b: Usa un ciclo `ripeti con counter` e
          al suo interno usa un ciclo `ripeti ... volte` per un numero di volte pari
          alla variabile `counter` (<i>contatore</i>) del ciclo esterno.
        Course_4_Artist_Functions_challenge_c: |
          Ad ogni ripetizione, disegna un quadratino e fai un salto in avanti.<br>
          <br>
          Devi girare di 90 gradi dopo ogni ciclo `ripeti ... volte`, ma sempre all'interno del ciclo `ripeti con counter`.
        Course_4_Artist_Functions_challenge_d: Vuoi sapere come è stata realizzata
          la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/113000010"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist Inspire_authored_hint:
        Course_4_Artist_Inspire_a: Dopo aver completato un quadrato, prova a saltare
          in avanti di metà della sua lunghezza, prima di girarti e cominciarne un
          altro.
        Course_4_Artist_Inspire_b: Per disegnare una singola girandola, devi ripetere
          per 4 volte (con una svolta a sinistra nel mezzo) ogni quadrato e ogni salto
          in avanti.
        Course_4_Artist_Inspire_c: Per completare la figura, ogni girandola viene
          ripetuta per 4 volte, inserendo un salto in avanti pari alla lunghezza del
          quadrato ed una svolta a destra di `360/sides` (cioè 360/<i>lati</i>) gradi
          tra l'una e l'altra.
        Course_4_Artist_Inspire_d: <b>Soluzione:</b> Vuoi sapere come è stata realizzata
          la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/105765376"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist Vars 13_authored_hint:
        Course_4_Artist_Vars_13_a: Hai bisogno di due cicli (uno dentro l'altro),
          entrambi che ripetono `sides` (<i>lati</i>) volte.
        Course_4_Artist_Vars_13_b: Il ciclo interno disegna un ottagono (girando verso
          sinistra). Poi, nel ciclo esterno, devi muoverti in avanti e girare a destra.
        Course_4_Artist_Vars_13_c: Per aggiustare la figura in modo che rimanga della
          stessa dimensione al variare del numero di lati, usa un blocco matematico
          per dividere la lunghezza del perimetro per il numero dei lati.
      Course 4 Artist Vars 6_authored_hint:
        Course_4_Artist_Vars_6_a: Il numero di gradi di cui girare ogni volta è dato
          da <b>360 diviso il numero di lati</b>.
      Course 4 Artist Vars 8_authored_hint:
        Course_4_Artist_Vars_8_a: Se dividi il valore iniziale della lunghezza del
          lato per il numero dei lati, la lunghezza del lato del poligono disegnato
          si accorcia man mano che il numero dei lati cresce.
      Course 4 Bee Params 7_authored_hint:
        notice_pattern: Riesci ad individuare uno schema, una regola, in come cambiano
          le quantità di nettare da raccogliere?
        count_with_for: |-
          La quantità di nettare da raccogliere cresce ogni volta. Quale blocco ti permette di ripetere una serie di azioni mentre conta "a salire"? <br>
          <br>
          Prova ad usare un <i>ciclo con contatore</i>.
      Course 4 Bee Params 8_authored_hint:
        Course_4_Bee_Params_8_a: |-
          All'interno della funzione la quantità di dosi da raccogliere può essere usata per decidere quale azione svolgere.<br>
          Quando l'ape è su un favo, il numero di dosi di nettare da raccogliere è 0, mentre se è su un fiore, è 0 il numero di dosi di miele da produrre.
      Course 4 Play Lab Params 2_authored_hint:
        Course_4_Play_Lab_Params_2_a: Sarà necessario fare clic su "modifica" la funzione
          di salto e aggiornarla in modo da utilizzare il parametro 'altezza'.
      Course 4 Play Lab Vars 2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Assicurati di impostare un valore di `dog_speed`
          (<i>velocità del cane</i>) che sia maggiore di `cat_speed` (<i>velocità
          del gatto</i>).
      Course 4 Play Labs For Loops 2_authored_hint:
        Course_4_Play_Labs_For_Loops_2_a: Quale deve essere l'incremento ad ogni passo
          della variabile `counter` (<i>contatore</i>) per saltare i numeri pari?
      Course 4 Playlab For Loop Freeplay_authored_hint: {}
      Course 4 Playlab For Loops 4b_authored_hint:
        Course_4_Playlab_For_Loops_4b_a: I personaggi sono distanti 330 pixel dalle
          bandierine.
        Course_4_Playlab_For_Loops_4b_b: Come puoi far sì che, prima della fine del
          proprio <i>ciclo con contatore</i>, ogni personaggio raggiunga la propria
          bandierina, nonostante i valori iniziali e finali del ciclo siano diversi?
        Course_4_Playlab_For_Loops_4b_c: Ricorda che non importa di quanto un personaggio
          supera la bandierina nell'ultima ripetizione del proprio ciclo, l'importante
          è superare la bandierina.
      Course 4 Playlab For Loops 5b_authored_hint:
        Course_4_Playlab_For_Loops_5b_a: I personaggi sono distanti 350 pixel l'uno
          dall'altro.
        Course_4_Playlab_For_Loops_5b_b: Ricorda che ad ogni ripetizione del <i>ciclo
          con contatore</i> un personaggio si muove di una quantità maggiore, perché
          il contatore viene incrementato ad ogni ripetizione.
      Course 4 Playlab For Loops 6b_authored_hint: {}
      Course 4 SCF 1_authored_hint:
        Course_4_SCF_1_a: Ogni esagono ha il lato di 40 pixel.
        Course_4_SCF_1_b: C'è un salto di 120 pixel tra un esagono e il successivo
          della stessa fila.
        Course_4_SCF_1_c: Prima di disegnare la seconda fila di esagoni, devi girare
          a destra di 60 gradi e saltare avanti di 40 pixel. Poi devi girare l'artista
          in senso inverso e saltare indietro di 320 pixel.
        Course_4_SCF_1_d: Prima di disegnare la terza fila di esagoni, devi girare
          a destra di 60 gradi e saltare avanti di 40 pixel. Poi devi girare l'artista
          in senso inverso e saltare indietro di 440 pixel (120 pixel in più della
          volta precedente).
        Course_4_SCF_1_e: <b>Soluzione:</b> Se vuoi, <a href="https://studio.code.org/c/159884109"
          target="_blank">clicca qui</a> e poi su "Come funziona" per vedere la soluzione.
      Course 4 SCF 1a_authored_hint:
        Course_4_SCF_1a_a: Riprendi la funzione definita nella <a href="https://studio.code.org/s/course4/stage/16/puzzle/6"
          target="_blank">lezione 16</a> per raccogliere un quantità specificata di
          nettare in una direzione specificata.
        Course_4_SCF_1a_b: |-
          Osserva che il percorso base dell'ape è uno zig-zag che scende verso destra e verso il basso:<br>
          ![](https://images.code.org/1c3feab70af706409b3a05af4dc83c2e-image-1469726967858.png)
        Course_4_SCF_1a_c: Rifletti su come usare un ciclo `ripeti con counter` per
          chiamare la funzione con il valore corretto del parametro.
        Course_4_SCF_1a_d: |-
          <b>Soluzione:</b><br>
          ![Solution Blocks](https://programmailfuturo.it/images/codeorg/4-21-2.png)
      Course 4 SCF 1b_authored_hint:
        Course_4_SCF_1b_a: 'Osserva che le dosi di miele da produrre sono sempre le
          stesse: puoi usare una funzione.'
        Course_4_SCF_1b_b: |-
          Osserva questa regolarità del percorso dell'ape per avvicinarsi ai favi: 2 passi verso sinistra e 2 verso l'alto, poi 3 verso sinistra e 3 verso l'alto:<br>
          ![](https://images.code.org/996ab4a2de6048cbb99b84c56cc4ad61-image-1469726859769.png)
        Course_4_SCF_1b_c: Puoi usare un ciclo `ripeti con counter` per far fare all'ape
          il percorso opportuno.
        Course_4_SCF_1b_d: |
          <b>Soluzione:</b><br>
           ![Solution Blocks](https://programmailfuturo.it/images/codeorg/4-21-1.png)
      Course 4 SCF 2_authored_hint:
        Course_4_SCF_2_a: Ogni ottagono ha i lati lunghi 40 pixel.
        Course_4_SCF_2_b: C'è un salto di 136 pixel tra un ottagono e il successivo
          della stessa fila orizzontale.
        Course_4_SCF_2_c: |-
          Prima di disegnare le file pari di ottagoni, devi girare l'artista a destra di 45 gradi e farlo saltare in avanti di 96 pixel.<br>
          <br>
          Poi lo devi girare in senso inverso e farlo saltare indietro di 408 pixel.
        Course_4_SCF_2_d: Osserva che, siccome ci sono più ottagoni nelle file pari,
          non devi far saltare indietro l'artista di una quantità supplementare prima
          di iniziare a disegnare le successive file dispari. Puoi quindi usare la
          stessa funzione per riposizionare l'artista prima di disegnare ogni fila
          successiva.
        Course_4_SCF_2_e: <b>Soluzione:</b> Se vuoi, <a href="https://studio.code.org/c/244417820"
          target="_blank">clicca qui</a> e poi su "Come funziona" per vedere la soluzione.
      Course 4 SCF 3_authored_hint:
        Course_4_SCF_3_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        Course_4_SCF_3_b: Il disegno è formato da una serie di ottagoni ognuno con
          i lati lunghi `counter` (<i>contatore</i>) pixel.
        Course_4_SCF_3_c: La funzione che disegna l'ottagono è chiamata dall'interno
          di un ciclo `ripeti con counter` che conta all'indietro da 200 a 2 con passo
          2.
        Course_4_SCF_3_d: Ad ogni ripetizione del ciclo `ripeti con counter` devi
          girare di 22.5 gradi.
        Course_4_SCF_3_e: Il valore di `counter` controlla sia la larghezza del pennello
          che il colore (diminuendo il "rosso" e aumentando sia il "verde" che il
          "blu").
        Course_4_SCF_3_f: <b>Soluzione:</b> Se vuoi, <a href="https://studio.code.org/c/159877686">clicca
          qui</a> e poi su "Come funziona" per vedere la soluzione.
      Course 4 SCFL 1_authored_hint:
        Course_4_SCFL_1_a: |-
          L'ape dovrebbe seguire un percorso in cui raccoglie prima tutto il nettare (andando a zig-zag verso destra e verso l'alto) e poi tutto il miele (andando a zig-zag verso il basso e verso sinistra):<br>
          ![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)
        Course_4_SCFL_1_b: 'È conveniente usare 2 <i>cicli</i> `ripeti con counter`:
          uno per salire mentre si raccoglie il nettare, uno per scendere mentre si
          produce il miele.'
        Course_4_SCFL_1_c: Mentre il ciclo `ripeti con counter` per salire deve usare
          il valore del contatore (`counter`) sia per spostarsi che per raccogliere
          il nettare, quello per scendere lo deve usare solo per produrre il miele.
        Course_4_SCFL_1_d: |-
          <b>Soluzione:</b><br>
          ![Solution Blocks](https://programmailfuturo.it/images/codeorg/4-20-3.png)
      Course 4 SCFL 1a_authored_hint:
        Course_4_SCFL_1a_a: Per usare il minor numero possibile di blocchi potrebbe
          essere necessario doversi spostare di più del minimo indispensabile.
        Course_4_SCFL_1a_b: |-
          Scrat dovrebbe seguire un percorso che passa per entrambi gli "anelli" in alto a sinistra e in alto a destra:<br>
          ![](https://images.code.org/253d710ff7d1b494fe8fd20cfc92baaf-image-1469726263579.png)
        Course_4_SCFL_1a_c: Puoi usare un ciclo `ripeti con counter` per eseguire
          un blocco `ripeti` con un numero di ripetizioni che cambia ad ogni esecuzione.
          In questo caso il numero di ripetizioni diminuisce da 7 a 5, con passo 1.
        Course_4_SCFL_1a_d: |-
          <b>Soluzione:</b><br>
          ![Solution Blocks\t]( https://programmailfuturo.it/images/codeorg/4-20-2.png)
      Course 4 SCFL 1b_authored_hint:
        Course_4_SCFL_1b_a: |-
          Scrat dovrebbe seguire questo percorso a zig-zag:
          ![](https://images.code.org/1957633c453f4025a3fd6ce0e201398b-image-1469642319721.png)
        Course_4_SCFL_1b_b: Usa un ciclo `ripeti con counter` per far muovere Scrat.
        Course_4_SCFL_1b_c: |-
          <b>Soluzione:</b><br>
          ![](https://programmailfuturo.it/images/codeorg/4-20-1.png)
      Course 4 SCFL 2_authored_hint:
        Course_4_SCFL_2_a: |-
          L'ape dovrebbe seguire questo percorso:<br>
          ![](https://images.code.org/a69c63a039031254097f19231dd7bf95-image-1469726483169.png)
        Course_4_SCFL_2_b: Il giro intorno ai favi può essere controllato da un ciclo
          `ripeti con counter` nel quale in 3 momenti ci si ferma per svolgere delle
          azioni su degli oggetti.
        Course_4_SCFL_2_c: |-
          Nella prima iterazione la sequenza di ripetizioni è: 1, 2, 3, 4.<br>
          <br>
          Nella seconda iterazione la sequenza di ripetizioni e: 3, 6, 9, 12.<br>
          <br>
          Nella terza iterazione la sequenza di ripetizioni è: 2, 4, 8, quando il contatore vale: 1, 2, 3. Riesci a capire qual è la regola?
        Course_4_SCFL_2_d: |-
          <b>Soluzione:</b><br>
          ![Solution Blocks](https://programmailfuturo.it/images/codeorg/4-20-4.png)
      Course 4 SCFL 3_authored_hint:
        Course_4_SCFL_3_a: La larghezza del pennello è 1. Il primo quadrato ha il
          lato di 50 pixel, ed ogni quadrato successivo ha il lato più lungo di 50
          pixel.
        Course_4_SCFL_3_b: Il valore dell'opacità del pennello è sempre la metà del
          valore del contatore (`counter`).
        Course_4_SCFL_3_c: Al termine del disegno di un quadrato devi posizionare
          l'artista un po' più in alto a sinistra per disegnare correttamente il successivo
          quadrato.
        Course_4_SCFL_3_d: <b>Soluzione:</b> Vuoi sapere come è stata realizzata la
          figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/398689696"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 SCFL 4_authored_hint:
        Course_4_SCFL_4_a: |-
          La figura è composta da ripetizioni di un quadrato di colore mutevole e dimensioni via via crescenti.<br>
          <br>
          Il primo quadrato ha il lato lungo 5 pixel, ed ogni quadrato successivo è 5 pixel più lungo, fino a 200 pixel.
        Course_4_SCFL_4_b: Il cambiamento del colore si attua col blocco `imposta
          il colore con rosso, verde, blu`. Il valore del rosso è sempre uguale a
          quello del contatore (`counter`), mentre quello del verde a `255`-`counter`,
          ed il blu rimane sempre fisso a `255`.
        Course_4_SCFL_4_c: L'artista gira di 15 gradi prima di disegnare il successivo
          quadrato.
        Course_4_SCFL_4_d: |-
          <b>Soluzione:</b><br>
          ![Solution Blocks](https://programmailfuturo.it/images/codeorg/4-20-6.png)
      Course 4 SCFL 6_authored_hint:
        Course_4_SCFL_6_a: La figura è una spirale di colore mutevole e tratti rettilinei
          progressivamente più lunghi.
        Course_4_SCFL_6_b: |-
          Il primo segmento è lungo 5 pixel ed ogni successivo segmento è 2 pixel più lungo, fino a 250.<br>
          <br>
          Al termine di ogni segmento l'artista gira di 80 gradi.
        Course_4_SCFL_6_c: Il cambiamento del colore si attua col blocco `imposta
          il colore con rosso, verde, blu`. Il valore del rosso è sempre fisso a `255`
          mentre quello del verde è sempre uguale a quello del contatore (`counter`)
          ed il blu è uguale a `255`–`counter`.
        Course_4_SCFL_6_d: <b>Soluzione:</b> Vuoi sapere come è stata realizzata la
          figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/243509122"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 SCFL 7_authored_hint:
        Course_4_SCFL_7_a: |-
          La figura è composta da due onde, ognuna delle quali è disegnata da un "ciclo con contatore" (`for loop`), il primo che conta "a salire" ed il secondo che conta "a scendere".<br>
          <br>
          Entrambi i cicli hanno come estremi 5 e 200, come passo 2, ed eseguono <b>quasi</b> le stesse azioni.
        Course_4_SCFL_7_b: |-
          La larghezza del pennello varia progressivamente all'interno del ciclo, seguendo il valore del contatore (`counter`).<br>
          Ad ogni ripetizione l'artista deve avanzare di 5 pixel e poi girare di `360`/`counter`: attenzione alla direzione in cui gira!
        Course_4_SCFL_7_c: |-
          Il pennello ha un'opacità di 20.<br>
          <br>
          Il cambiamento del colore si attua col blocco `imposta il colore con rosso, verde, blu`. Il valore del rosso è sempre uguale a quello del contatore (`counter`) mentre quello del verde a `255`–`counter`, ed il blu rimane sempre fisso a `255`.
        Course_4_SCFL_7_d: Al termine del primo ciclo l'artista deve girare di 225
          gradi a sinistra prima di iniziare il secondo.
        Course_4_SCFL_7_e: <b>Soluzione:</b> Vuoi sapere come è stata realizzata la
          figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/121424826"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 SCV 1_authored_hint:
        Course_4_SCV_1_a: |-
          La figura è composta dalla ripetizione del disegno di un pentagono e di un decagono.<br>
          <br>
          Il perimetro di ogni poligono ha una lunghezza (`length`) di 500 pixel.
        Course_4_SCV_1_b: |-
          Ogni poligono è ripetuto un numero di volte pari al numero dei suoi lati (`sides`).<br>
          <br>
          Al termine delle ripetizioni di ogni poligono l'artista ha fatto un giro completo di 360 gradi.
        Course_4_SCV_1_c: |-
          Entrambi i poligoni sono disegnati dallo stesso ciclo, basato sulla variabile `sides` - il cui valore viene opportunamente cambiato.<br>
          <br>
          Vengono disegnate prima tutte le ripetizioni del pentagono e poi tutte quelle del decagono.
        Course_4_SCV_1_d: <b>Soluzione:</b> Vuoi sapere come è stata realizzata la
          figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/117486491"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 SCV 2_authored_hint:
        Course_4_SCV_2_a: |-
          La figura è composta da 10 ripetizioni di questo "fiore":<br>
          ![](https://images.code.org/bac2a606dfa59c00409294499540267d-image-1469641972385.png)<br>
          ... che è disegnato da 10 ripetizioni di questo decagono il cui perimetro ha una lunghezza (`length`) di 400 pixel:<br>
          ![](https://images.code.org/1e15f278c9c1606f90a2490ec3a94eb4-image-1469642051512.png)
        Course_4_SCV_2_b: Sono quindi necessari 3 <i>cicli annidati</i> ognuno dei
          quali esegue 10 ripetizioni, pari al numero dei lati (`sides`) del decagono.
        Course_4_SCV_2_c: Alla fine del ciclo più interno (quello che disegna il singolo
          decagono) l'artista gira un po' a sinistra, mentre gira a destra alla fine
          degli altri due cicli.
        Course_4_SCV_2_d: |-
          Come nel disegno del decagono, anche qui, sia per disegnare un fiore, che tutta la figura, l'artista svolge un giro completo di 360 gradi.<br>
          Dopo aver disegnato un fiore è necessario spostarsi un po' in avanti prima di girare a destra, per evitare di disegnare le varie ripetizioni del fiore tutte nello stesso punto.
        Course_4_SCV_2_e: |-
          <b>Soluzione:</b>
          Vuoi sapere come è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/117496635" target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 SCV 3_authored_hint:
        Course_4_SCV_3_a: Usa il blocco con le operazioni per aggiungere e sottrarre
          punti alla variabile `points` (<i>punteggio</i>) quando i personaggi si
          toccano.
        Course_4_SCV_3_b: Se vuoi, puoi modificare il parametro che cambia la velocità
          alla quale si muove il cane ogni volta che premi le frecce.
        Course_4_SCV_3_c: |
          <b>Soluzione:</b><br>
           ![solution](https://programmailfuturo.it/images/codeorg/4-19-1.PNG)
      Course 4 SCV 4_authored_hint:
        Course_4_SCV_4_a: 'Per questo esercizio servono 3 variabili: una per le dosi
          di nettare, una per quelle di miele ed una per la distanza da percorrere
          ad ogni ciclo.'
        Course_4_SCV_4_b: 'Servono tre cicli all''interno del ciclo principale: uno
          per andare avanti, uno per raccogliere il nettare ed uno per fare il miele.'
        Course_4_SCV_4_c: |-
          Osserva come cambia il numero dei passi di cui si deve muovere l'ape, delle dosi di nettare da raccogliere e di miele da produrre e cerca di determinare una regola per le loro variazioni:<br>
          ![](https://images.code.org/78f8fb83da67c5b80126555a362b8b20-image-1469641782259.png)
        Course_4_SCV_4_d: |-
          <b>Soluzione:</b><br>
          ![](https://programmailfuturo.it/images/codeorg/4-19-3.png)
      Course 4 SCV 5_authored_hint:
        Course_4_SCV_5_a: |
          L'ape dovrebbe seguire un percorso che arriva fino al bordo inferiore, poi va verso il bordo sinistro, infine risale:<br>
           ![](https://images.code.org/7f6f09c55cf9552a91fc1d33f44a7315-image-1469641639330.png)
        Course_4_SCV_5_b: Ad ogni ripetizione del ciclo che fa percorrere all'ape
          questo tracciato, sui fiori ci sono due dosi di nettare in meno e l'ape
          deve produrre una dose di miele in più.
        Course_4_SCV_5_c: Ad ogni ripetizione di questo ciclo il numero di passi che
          l'ape deve fare per arrivare al fiore è uguale al numero di dosi di nettare
          sul fiore stesso.
        Course_4_SCV_5_d: |-
          <b>Soluzione:</b><br>
          ![](https://programmailfuturo.it/images/codeorg/4-19-2.png)
      Course 4 SCV 6_authored_hint:
        Course_4_SCV_6_a: |
          La figura è composta da ripetizioni di un poligono con 5 lati (`sides`) disegnati a zig-zag:<br>
           ![](https://images.code.org/9e30d3a87186cefe730984feee195806-image-1469642178866.png)
        Course_4_SCV_6_b: 'Ogni ripetizione del pentagono è per metà sovrapposta alla
          precedente: pertanto al termine del disegno di ogni pentagono si gira di
          `180`/`sides` gradi e vanno effettuate `2` x`sides` ripetizioni per completare
          il giro di 360 gradi.'
        Course_4_SCV_6_c: 'Ognuno dei lati del pentagono ha una lunghezza (`length`)
          di 70 pixel ed è composto da 5 segmenti "zig" di un colore e 5 segmenti
          "zag" di un altro colore: ogni segmento è quindi lungo `length` / `sides`
          pixel.'
        Course_4_SCV_6_d: |-
          Sono necessari 3 <i>cicli annidati</i>, il più esterno per ripetere i pentagoni, quello intermedio per disegnare il singolo pentagono, quello più interno per disegnare il singolo lato. <br>
          Il colore dei segmenti "zig" ha le seguenti componenti: rosso=0, verde=175, blu=200; quello degli "zag" ha: rosso=100, verde=50, blu=150.
        Course_4_SCV_6_e: Per disegnare lo zig bisogna ruotare a sinistra di `360`/`sides`,
          per lo zag a destra della stessa quantità.
        Course_4_SCV_6_f: |-
          <b>Soluzione:</b>
          Vuoi sapere come è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/398175955" target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      CourseF_PlayLab_vars2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Assicurati di impostare un valore di `dog_speed`
          (<i>velocità del cane</i>) che sia maggiore di `cat_speed` (<i>velocità
          del gatto</i>).
      D_Frozen_nested3_authored_hint:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created
          to draw a line of shapes and nest it inside of another loop.  At the bottom,
          before the outside loop ends, add a block that will turn Elsa around.  \n\n-
          Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees
          if you are repeating the outer loop 6 times"
      D_Frozen_nested4_authored_hint:
        courseD_artist_project4_a: |
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />


          Here's a set of hexagons with squares:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then
          draw a second snowflake.
      D_Frozen_nested5_authored_hint:
        courseD_artist_project4_a: |
          Lines of 2 hexagons and 4 triangles:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      D_Frozen_nested6_authored_hint:
        courseD_artist_project1a_a: |
          This stair step uses a 76 degree turn and repeats 4 times.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps
          from other puzzles, but using a different angle.
      D_Frozen_nested7_authored_hint:
        courseD_artist_project2a_a: |
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      D_Frozen_nested8_authored_hint:
        courseD_artist_project3a_a: You can choose different amounts to rotate your
          shape! What about 18 times with a 20 degree turn in between?
      D_Frozen_nested9_authored_hint:
        courseD_artist_project4a_a: |
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      Farmer for Authored Hint testing_authored_hint:
        first_hint: Questo è il primo indizio. Ha * alcuni * * * basic * * 'markup'
        second_hint: Questo è il secondo suggerimento. Ha un'immagine. ! [] (https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)
        last_hint: Questo è il terzo e ultimo suggerimento. Non ha nulla di speciale.
      Farmer for TTS testing_authored_hint:
        first_hint: Questo è il primo indizio. Ha * alcuni * * * basic * * 'markup'
        second_hint: Questo è il secondo suggerimento. Ha un'immagine. ! [] (https://images.code.org/cab43107265a683a6216e18faab2353f-image-1452027548372.png)
        last_hint: Questo è il terzo e ultimo suggerimento. Non ha nulla di speciale.
      Function intro Ryan_authored_hint:
        Function_intro_Ryan_b: Se usi le funzioni in modo corretto, questo è il percorso
          che seguirai...
        Function_intro_Ryan_a: Puoi richiamare una funzione più volte in un programma!  Prova
          a richiamarla due volte per risolvere questo esercizio.
      Harvesting_authored_hint:
        pointer_harvester_test: Che tipo di blocco è possibile utilizzare per controllare
          qualcosa e prendere una decisione?
      Inspirational Artwork_authored_hint:
        brush_width: Come prima cosa, assegna lo spessore del pennello a 1 ed il suo
          colore a blu.
        double_loop: Prova ad inserire un <i>ciclo con contatore</i> all'interno di
          un altro ciclo.
        specifics: |-
          In ogni petalo, il poligono più piccolo ha 3 lati ed il più grande ne ha 17.<br>
          <br>
          Nel blocco `imposta l'opacità`, usa un blocco divisione per rendere il colore sempre più trasparente man mano che il numero dei lati del poligono aumenta (minore è il valore dell'opacità più trasparente è il colore).
        after: Quando hai finito un petalo, assicurati di spostarti in avanti di 20
          pixel prima di ruotare di 60 gradi per iniziare il petalo successivo.
        solution: Vuoi sapere come è stata realizzata la figura che ti abbiamo mostrato?
          <a href="https://studio.code.org/c/238594589" target="_blank">Clicca qui</a>
          e poi su "Come funziona" per scoprirlo.
      InspirationalArtwork_authored_hint: {}
      InspirationalArtwork_2018_authored_hint: {}
      K2.0 sequence 1_authored_hint:
        K2.0_sequence_1_a: In questo programma manca un blocco. Riesci a capire quale?
      K2.0 sequence 10_authored_hint:
        K2.0_sequence_10_a: Se hai problemi, prova prima a scrivere i passaggi su
          un foglio di carta.
        K2.0_sequence_10_b: You will need three different kinds of arrows to solve
          this puzzle.
      K2.0 sequence 12_authored_hint:
        K2.0_sequence_12_a: If the pig isn't moving far enough, try adding another
          block.
      K2.0 sequence 2_authored_hint:
        K2.0_sequence_2_a: Uno dei blocchi sposta l'uccellino nella direzione sbagliata.
          Riesci a capire qual è e a sostituirlo con il blocco corretto?
      K2.0 sequence 3_authored_hint:
        K2.0_sequence_3_a: Se sei in difficoltà, cerca di capire quale deve essere
          il percorso corretto da seguire ed elimina il blocco che non permette di
          seguirlo.
      K2.0 sequence 4_authored_hint:
        K2.0_sequence_4_a: Use 2 different arrow blocks to solve this puzzle!
      K2.0 sequence 5_authored_hint:
        K2.0_sequence_5: Il tuo programma dovrebbe avere tre blocchi di movimento.
      K2.0 sequence 6_authored_hint:
        K2.0_sequence_6_a: Hai bisogno di aggiungere 1 blocco per far arrivare l'uccellino
          fino al maialino.
        K2.0_sequence_6_b: Se non riesci a capire cosa devi fare, prova a disegnare
          il labirinto sulla carta e usa le dita per capire il percorso da seguire
          e quindi scoprire le mosse da fare.
      K2.0 sequence 7_authored_hint:
        K2.0_sequence_7_a: Se sei bloccato, prova a disegnare il labirinto sulla carta
          per capire come dovrebe muoversi l'uccellino.
      K2.0 sequence 8_authored_hint:
        K2.0_sequence_8_a: Bloccato? Prova a tracciare con le dita il percorso che
          deve seguire l'uccellino.
      K2.0 sequence 9_authored_hint:
        K2.0_sequence_9_a: Se hai problemi, prova prima a scrivere i passaggi su un
          foglio di carta.
        K2.0_sequence_9_b: You will need to go three different directions to solve
          this puzzle.
      K2.0 sequence FP_authored_hint:
        K2.0_sequence_FP_a: Se non ti è chiaro quale percorso seguire, usa il dito
          per tracciare il tuo percorso dall'uccellino fino al maialino.
      K2.0 sequence pre_authored_hint:
        K2.0_sequence_pre_a: If you are having trouble getting the bird to move, make
          sure blocks are connected under `when run`.
      MC Agent Freeplay_authored_hint:
        MC_HOC_2017_13_Cole_a: Prova a far costruire delle rotaie all'Agente, in modo
          da poter esplorare il mondo!
      MC_HOC_2017_01_Cole_authored_hint:
        MC_HOC_2017_01_Cole_a: Usa le frecce per condurre il giocatore nella casa.
          Fermati sulla casella arancione per vincere.
      MC_HOC_2017_01_RETRY_authored_hint:
        MC_HOC_2017_01_RETRY_a: Trascina un blocco `vai avanti` dalla cassetta degli
          attrezzi all'area di lavoro e aggancialo sotto al blocco `quando si clicca
          su "Esegui".
        MC_HOC_2017_01_RETRY_b: Ricorda di cliccare il pulsante "Esegui" per far eseguire
          il codice all'Agente.
        MC_HOC_2017_01_RETRY_c: Quando l'Agente ha terminato di eseguire il suo codice,
          devi muovere il giocatore con le frecce!
      MC_HOC_2017_02_Cole_authored_hint:
        MC_HOC_2017_02_Cole_a: Muovi l'Agente due caselle in avanti per farlo posizionare
          sulla pedana a pressione. Questo farà aprire la porta per il tuo giocatore.
        MC_HOC_2017_02_Cole_b: |-
          Premi "Esegui"!
          Puoi eseguire il tuo codice anche se non è corretto.  Esegui e ripristina il codice diverse volte finché non hai capito dov'è l'errore.
        MC_HOC_2017_02_Cole_c: Dopo che l'Agente ha fatto aprire la porta, usa le
          frecce per muovere il giocatore verso la mappa!
        MC_HOC_2017_02_Cole_d: Assicurati che l'Agente stia seguendo il percorso indicato
          dalla linea bianca tratteggiata!
      MC_HOC_2017_02_Will_authored_hint:
        MC_HOC_2017_02_Cole_a: Muovi l'Agente due caselle in avanti per farlo posizionare
          sulla pedana a pressione. Questo farà aprire la porta per il tuo giocatore.
        MC_HOC_2017_02_Cole_b: "Premi \"Esegui Agent\"! \nPuoi eseguire il tuo codice
          anche se non è corretto.  Esegui e ripristina il codice diverse volte finché
          non hai capito dov'è l'errore."
        MC_HOC_2017_02_Cole_c: Quando l'Agent ha aperto la porta, usa le frecce per
          muovere il giocatore fino alla casella arancione!
      MC_HOC_2017_03_Cole_authored_hint:
        MC_HOC_2017_03_Cole_a: Quando hai posizionato l'Agent sulla pedana a pressione,
          usa le frecce per far camminare il giocatore verso la bussola!
        MC_HOC_2017_03_Cole_b: Il codice ti sembra troppo lungo?  Cerca di capire
          come renderlo più breve usando un blocco `ripeti ... volte`!
      MC_HOC_2017_04POINT5_Cole_authored_hint:
        MC_HOC_2017_04POINT5_Cole_a: "Passare su queste due pedane a pressione aprirà
          il sentiero per il giocatore. \n![](https://images.code.org/9760c20b83d191570858617f8522ddad-image-1507751553614.50.25.png)"
      MC_HOC_2017_04POINT5_RYAN_authored_hint:
        MC_HOC_2017_04POINT5_RYAN_b: Usa il blocco `gira a destra` per cambiare la
          direzione dell'Agente.
        MC_HOC_2017_04POINT5_RYAN_a: L'Agente ha bisogno di arrivare solo alla prima
          pedana a pressione affinché il giocatore possa raggiungere l'ascia.
      MC_HOC_2017_04_Cole_authored_hint:
        MC_HOC_2017_04_Cole_a: L'Agente dovrebbe usare 7 blocchi `vai avanti`.  Come
          puoi sfruttare un ciclo `ripeti ... volte` per ottenere lo stesso risultato
          con meno blocchi?
        MC_HOC_2017_04_Cole_c: |-
          Premi "Esegui"!
          Puoi eseguire il tuo codice anche se non è corretto.  Esegui e ripristina il codice diverse volte finché non hai capito dov'è l'errore.
        MC_HOC_2017_04_Cole_b: Quando l'Agente raggiunge la pedana a pressione, la
          porta si apre.
      MC_HOC_2017_05_Cole_authored_hint:
        MC_HOC_2017_05_Cole_a: Sapevi che puoi mettere più blocchi di codice all'interno
          di un ciclo?  Per completare questo esercizio, prova ad inserire all'interno
          di un ciclo `ripeti ... volte` il codice per andare avanti **e** mettere
          un'asse di quercia .
        MC_HOC_2017_05_Cole_b: Porta l'Agente al di là del fiume mentre costruisce
          un ponte.
      MC_HOC_2017_05_Josh_authored_hint:
        MC_HOC_2017_05_Cole_a: Sapevi che puoi mettere più pezzi di codice in un ciclo?  Prova
          a posizionare un'asse **e** andare avanti in una "ripetizione" per completare
          questo rompicapo.
      MC_HOC_2017_06_Cole_authored_hint:
        MC_HOC_2017_06_Cole_a: Quante volte viene eseguito questo ciclo?  Quante volte
          *dovrebbe* essere eseguito?
        MC_HOC_2017_06_Cole_b: 'Aiuta l''Agente a costruire un ponte attraversando
          tutto il fiume! '
      MC_HOC_2017_06_Josh_authored_hint:
        MC_HOC_2017_06_Cole_a: Prova a inserire più di una istruzione in un ciclo
          "ripetizione"!
      MC_HOC_2017_07_Cole_authored_hint:
        MC_HOC_2017_07_Cole_c: Tutto ciò che deve fare l'Agente è distruggere il ghiaccio
          per liberare la strada che porta al vagonetto.
        MC_HOC_2017_07_Cole_a: Per risolvere questo esercizio, scopri cosa fa la funzione
          `clear path` (*libera il passaggio*) e richiamala il numero di volte necessario
          usando il piccolo blocco verde `clear path` presente nella cassetta degli
          attrezzi.
        MC_HOC_2017_07_Cole_b: Per risolvere questo esercizio, prova a mescolare i
          blocchi delle funzioni con altri blocchi presenti nella cassetta degli attrezzi.
      MC_HOC_2017_08_RY_authored_hint:
        MC_HOC_2017_08_RY_a: "Premi \"Esegui Agent\"! \nPuoi eseguire il tuo codice
          anche se non è corretto.  Esegui e ripristina il codice diverse volte finché
          non hai capito dov'è l'errore."
        MC_HOC_2017_08_RY_b: Ci sono TANTISSIMI modi per risolvere questo esercizio.
          Provane alcuni!
      MC_HOC_2017_08_Will_authored_hint:
        MC_HOC_2017_08_RY_a: "Premi \"Esegui Agent\"! \nPuoi eseguire il tuo codice
          anche se non è corretto.  Esegui e ripristina il codice diverse volte finché
          non hai capito dov'è l'errore."
        MC_HOC_2017_08_RY_b: Ci sono TANTISSIMI modi per risolvere questo esercizio.
          Provane alcuni!
      MC_HOC_2017_10_Cole_authored_hint:
        MC_HOC_2017_10_Cole_a: Usa le funzioni per rendere più facile la soluzione
          di questo esercizio!
      MC_HOC_2017_10_RETRY_authored_hint:
        MC_HOC_2017_10_Cole_b: Non sai dove andare?  Dovresti seguire la linea tratteggiata!
        MC_HOC_2017_10_Cole_a: Usa le funzioni per rendere più facile la soluzione
          di questo esercizio!
      MC_HOC_2017_13_Cole_authored_hint:
        MC_HOC_2017_13_Cole_a: Prova a far costruire dei ponti all'Agente, in modo
          che il giocatore possa camminare oltre i limiti della mappa.
      MC_HOC_2017_4.5v2_authored_hint:
        MC_HOC_2017_04POINT5_Cole_a: "Passare su queste due pedane a pressione aprirà
          il sentiero per il giocatore. \n![](https://images.code.org/9760c20b83d191570858617f8522ddad-image-1507751553614.50.25.png)"
      MC_HOC_2017_Ali_authored_hint:
        MC_HOC_2017_08_RY_a: |-
          Premi "Esegui"!
          Puoi eseguire il tuo codice anche se non è corretto.  Esegui e ripristina il codice diverse volte finché non hai capito dov'è l'errore.
        MC_HOC_2017_08_RY_b: Ci sono TANTISSIMI modi per risolvere questo esercizio.
          Provane alcuni!
        MC_HOC_2017_08_RY_c: Prova a seguire la linea tratteggiata per trovare un
          semplice percorso attraverso la lava.
      MC_HOC_2017_FP10x10_authored_hint: {}
      MC_HOC_2017_FP10x10_RE_authored_hint: {}
      MC_HOC_2017_FP20x20_authored_hint:
        MC_HOC_2017_13_Cole_a: Prova a far costruire delle rotaie all'Agente, in modo
          da poter esplorare il mondo!
      MikeStar_authored_hint:
        hint1: Don't give up!
      MikeStarHard_authored_hint:
        hint1: Don't give up!
      MikeStarNested_authored_hint:
        hint1: Don't give up!
      NEW Course 4 Artist Functions 13_authored_hint:
        NEW_Course_4_Artist_Functions_13_a: Modifica la funzione `draw a line of squares`
          (<i>disegna una fila di quadrati</i>) in modo da non doverla richiamare
          due volte.
        NEW_Course_4_Artist_Functions_13_c: Come dovresti modificare il codice per
          disegnare una stella con linee normali invece che file di quadrati?
      NEW Course 4 Artist Functions 4_authored_hint:
        NEW_Course_4_Artist_Functions_4_a: Devi utilizzare un blocco `gira a destra
          di 120 gradi` dopo ogni quadrato.
      NEW Course 4 Artist Functions 9_authored_hint:
        NEW_Course_4_Artist_Functions_9_a: |-
          Prova ad eseguire il codice prima di aggiungere qualunque blocco. Riesci a capire cos'è che fa disegnare il quadrato nel posto sbagliato?<br>
          <br>
          Se non riesci a capire in che punto il codice è sbagliato, prova a rallentare il movimento dell'artista spostando il regolatore di velocità verso il simbolo della tartaruga.
        NEW_Course_4_Artist_Functions_9_b: Prova ad usare un blocco `gira a ... di
          ... gradi`.
      NEW Course 4 Artist Params 11_authored_hint:
        NEW_Course_4_Artist_Params_11_a: Clicca su "Esegui" per vedere cosa fa la
          funzione. Nota che la funzione è stata definita con due parametri, ma il
          suo codice ne usa uno solo.
      NEW Course 4 Artist Params 13_authored_hint:
        NEW_Course_4_Artist_Params_13_a: Nella funzione `draw a polygon` (<i>disegna
          un poligono</i>) devi dividere il valore del perimetro per il numero di
          lati del poligono per ottenere la lunghezza di ogni lato. In questo modo
          riesci a disegnare una figura il cui perimetro ha sempre la stessa lunghezza
          indipendentemente dal numero dei lati.
      NEW Course 4 Artist Params 14_authored_hint:
        NEW_Course_4_Artist_Params_14_a: Va benissimo sperimentare il comportamento
          della funzione per capire come si comporta al variare del valore dei parametri.
      NEW Course 4 Artist Params inspire_authored_hint:
        brush_width: Come prima cosa, assegna lo spessore del pennello a 1 ed il suo
          colore a blu.
        double_loop: Prova ad inserire un <i>ciclo con contatore</i> all'interno di
          un altro ciclo.
        specifics: |-
          In ogni petalo, il poligono più piccolo ha 3 lati ed il più grande ne ha 17.<br>
          <br>
          Nel blocco `imposta l'opacità`, usa un blocco divisione per rendere il colore sempre più trasparente man mano che il numero dei lati del poligono aumenta (minore è il valore dell'opacità più trasparente è il colore).
        after: Quando hai finito un petalo, assicurati di spostarti in avanti di 20
          pixel prima di ruotare di 60 gradi per iniziare il petalo successivo.
        solution: Vuoi sapere come è stata realizzata la figura che ti abbiamo mostrato?
          <a href="https://studio.code.org/c/238594589" target="_blank">Clicca qui</a>
          e poi su "Come funziona" per scoprirlo.
      NEW Course 4 Bee For Loops 10a_authored_hint:
        NEW_Course_4_Bee_For_Loops_10a_a: Riesci a trovare una relazione tra il numero
          di passi che l'ape fa per arrivare al fiore ed il numero di dosi di nettare
          che deve raccogliere?
        NEW_Course_4_Bee_For_Loops_10a_b: 'Devi usare due blocchi `ripeti ... volte`:
          uno di questi deve usare un blocco con operazioni matematiche.'
      NEW Course 4 Bee For Loops 7_authored_hint:
        NEW_Course_4_Bee_For_Loops_7_a: Prova ad usare nel <i>ciclo con contatore</i>
          un valore della variabile `counter` che viene modificato con un blocco matematico
          man mano che ti sposti e raccogli il nettare.
      NEW Course 4 Bee For Loops 8_authored_hint:
        NEW_Course_4_Bee_For_Loops_8_a: Se il ciclo deve contare "a crescere" il valore
          del passo deve corrispondere ad un incremento (quindi un numero positivo).
          Quanto bisogna aggiungere in questo caso ad ogni valore per ottenere il
          valore successivo nella sequenza?
      New Minecraft Hero Project_authored_hint:
        MC_HOC_2017_13_Cole_a: Prova a far costruire dei ponti all'Agente, in modo
          che il giocatore possa camminare oltre i limiti della mappa.
      Overworld Avoid Monsters_authored_hint:
        mc_8_a: Puoi scegliere tra diversi percorsi. Qual'è il più corto?
        mc_8_b: Usa il blocco `ripeti ... volte` per semplificare il tuo programma.
        mc_8_c: Il tuo obiettivo è di raggiungere l'entrata della casa nella parte
          alta dello schermo.
      Overworld Avoid Monsters_2018_authored_hint:
        mc_8_a: Puoi scegliere tra diversi percorsi. Qual'è il più corto?
        mc_8_b: Usa il blocco `ripeti ... volte` per semplificare il tuo programma.
        mc_8_c: Il tuo obiettivo è di raggiungere l'entrata della casa nella parte
          alta dello schermo.
      Overworld Chop Tree_authored_hint:
        mc_2_a: Devi usare due volte il blocco `vai avanti` per arrivare di fronte
          all'albero.
        mc_2_b: L'istruzione `distruggi` abbatte l'albero di fronte a te.
      Overworld Chop Tree_2018_authored_hint:
        mc_2_a: Devi usare due volte il blocco `vai avanti` per arrivare di fronte
          all'albero.
        mc_2_b: L'istruzione `distruggi` abbatte l'albero di fronte a te.
      Overworld Chop Trees_authored_hint:
        mc_4_a: Puoi abbattere gli alberi in qualsiasi ordine, ma qual'è il percorso
          che ti fa usare il minor numero possibile di blocchi?
        mc_4_b: L'istruzione `distruggi` abbatte l'albero di fronte a te.
      Overworld Chop Trees_2018_authored_hint:
        mc_4_a: Puoi abbattere gli alberi in qualsiasi ordine, ma qual'è il percorso
          che ti fa usare il minor numero possibile di blocchi?
        mc_4_b: L'istruzione `distruggi` abbatte l'albero di fronte a te.
      Overworld House Frame Chosen_authored_hint:
        mc_6_a: Clicca la freccia sulla destra del blocco `metti` per scegliere il
          materiale da posizionare.
        mc_6_b: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
        mc_6_c: Puoi mettere più di un blocco all'interno del blocco `ripeti ... volte`.
      Overworld House Frame Chosen_2018_authored_hint:
        mc_6_a: Clicca la freccia sulla destra del blocco `metti` per scegliere il
          materiale da posizionare.
        mc_6_b: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
        mc_6_c: Puoi mettere più di un blocco all'interno del blocco `ripeti ... volte`.
      Overworld Move to Sheep_authored_hint:
        mc_1_a: Il blocco `vai avanti` è in cima alla cassetta degli attrezzi (la
          colonna scura qui sotto).
        mc_1_b: Controlla che entrambi i blocchi `vai avanti` siano agganciati al
          blocco `quando si clicca su "Esegui"`.
      Overworld Move to Sheep_2018_authored_hint:
        mc_1_a: Il blocco `vai avanti` è in cima alla cassetta degli attrezzi (la
          colonna scura qui sotto).
        mc_1_b: Controlla che entrambi i blocchi `vai avanti` siano agganciati al
          blocco `quando si clicca su "Esegui"`.
      Overworld Place Wall_authored_hint:
        mc_5_a: Usa prima il blocco `metti` e poi `vai avanti`
        mc_5_b: Controlla che entrambi i blocchi siano all'interno del blocco `ripeti
          ... volte` per far eseguire il codice più di una volta.
        mc_5_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Overworld Place Wall_2018_authored_hint:
        mc_5_a: Usa prima il blocco `metti` e poi `vai avanti`
        mc_5_b: Controlla che entrambi i blocchi siano all'interno del blocco `ripeti
          ... volte` per far eseguire il codice più di una volta.
        mc_5_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Overworld Plant Crops_authored_hint:
        mc_7_a: Usa il blocco `semina del grano` per seminarlo nel punto in cui sei.
        mc_7_b: Bisogna seminare il grano in entrambe le strisce di terra marrone
          scuro a fianco dell'acqua.
        mc_7_c: Puoi mettere più di un blocco all'interno del blocco `ripeti ... volte`.
      Overworld Plant Crops_2018_authored_hint:
        mc_7_a: Usa il blocco `semina del grano` per seminarlo nel punto in cui sei.
        mc_7_b: Bisogna seminare il grano in entrambe le strisce di terra marrone
          scuro a fianco dell'acqua.
        mc_7_c: Puoi mettere più di un blocco all'interno del blocco `ripeti ... volte`.
      Overworld Powered Minecart_authored_hint:
        mc_13_a: Usa il blocco `metti binario` per posare un tratto di binari nel
          punto in cui ti trovi.
        mc_13_b: Usa il blocco `ripeti ... volte` per accorciare il tuo programma.
      Overworld Powered Minecart_2018_authored_hint:
        mc_13_a: Usa il blocco `metti binario` per posare un tratto di binari nel
          punto in cui ti trovi.
        mc_13_b: Usa il blocco `ripeti ... volte` per accorciare il tuo programma.
      Overworld Shear Sheep_authored_hint:
        mc_3_a: Per usare il blocco 'tosa' la pecora deve trovarsi di fronte a te.
        mc_3_b: Se hai bisogno di cambiare la direzione verso cui sei rivolto, usa
          il blocco `gira a ...`.
        mc_3_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Overworld Shear Sheep_2018_authored_hint:
        mc_3_a: Per usare il blocco 'tosa' la pecora deve trovarsi di fronte a te.
        mc_3_b: Se hai bisogno di cambiare la direzione verso cui sei rivolto, usa
          il blocco `gira a ...`.
        mc_3_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Pattern Bee 1_authored_hint:
        conditional_pointer: "Comincia a riflettere da questo: cosa è diverso a ogni
          passo del percorso? \nChe Blocco puoi usare per prendere una *decisione*
          se sei su un Fiore o un Favo?\n\n! [] (https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07
          PM.png)"
        turn_at_honeycomb_pointer: A parte produrre Miele, c'e' qualcosa di diverso
          da fare su un Favo?
      Planning Farmer_authored_hint:
        conditional_pointer: "Comincia a riflettere da questo: cosa è diverso a ogni
          passo del percorso? \nChe Blocco puoi usare per prendere una *decisione*
          se sei su un Fiore o un Favo?\n\n! [] (https://images.code.org/a4883ea91c2f879ca1bb281d7944ed87-image-1471477752512.48.07
          PM.png)"
        turn_at_honeycomb_pointer: A parte produrre Miele, c'e' qualcosa di diverso
          da fare su un Favo?
      Quantum Bee - Ryan_authored_hint:
        test_hint: Questo é un suggerimento per il test.
      Test embedded K1 Blockly in instructions_authored_hint: {}
      Underground Avoiding Lava_authored_hint:
        mc_11_a: Tutto il codice per controllare se c'è la lava e coprirla è già pronto.
          Quello che resta da fare è aggiungere un blocco `vai avanti`.
        mc_11_b: L'istruzione `vai avanti` deve essere messa all'interno del blocco
          `se` o dopo?
      Underground Avoiding Lava_2018_authored_hint:
        mc_11_a: Tutto il codice per controllare se c'è la lava e coprirla è già pronto.
          Quello che resta da fare è aggiungere un blocco `vai avanti`.
        mc_11_b: L'istruzione `vai avanti` deve essere messa all'interno del blocco
          `se` o dopo?
      Underground If Statements_authored_hint:
        mc_12_a: I blocchi con le macchioline rosse sono quelli che contengono la
          pietrarossa.
        mc_12_b: Riesci ad usare un blocco `ripeti ... volte` per accorciare il tuo
          programma?
        mc_12_c: Usa un'istruzione condizionale `se` per verificare la presenza di
          lava, quindi coprila con i ciottoli.
      Underground If Statements_2018_authored_hint:
        mc_12_a: I blocchi con le macchioline rosse sono quelli che contengono la
          pietrarossa.
        mc_12_b: Riesci ad usare un blocco `ripeti ... volte` per accorciare il tuo
          programma?
        mc_12_c: Usa un'istruzione condizionale `se` per verificare la presenza di
          lava, quindi coprila con i ciottoli.
      Underground Iron_authored_hint:
        mc_10_a: Il ferro è nei blocchi maculati dietro alla torcia! Come farai ad
          andare lì?
        mc_10_b: Quando sei sul bordo della lava, usa il blocco `metti ciottoli davanti`
          per creare un passaggio sicuro. Poi ci puoi camminare sopra!
        mc_10_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Underground Iron_2018_authored_hint:
        mc_10_a: Il ferro è nei blocchi maculati dietro alla torcia! Come farai ad
          andare lì?
        mc_10_b: Quando sei sul bordo della lava, usa il blocco `metti ciottoli davanti`
          per creare un passaggio sicuro. Poi ci puoi camminare sopra!
        mc_10_c: Non aver paura di sbagliare! Esegui il codice per vedere cosa succede,
          anche se non hai ancora risolto l'esercizio.
      Underground Mining Coal_authored_hint:
        mc_9_a: Sei girato dalla parte giusta? Il blocco `distruggi` scava nel blocco
          davanti a te.
        mc_9_b: I granelli neri nel muro sono carbone! Usa il blocco `distruggi` su
          di essi per estrarre il carbone.
        mc_9_c: Usa il blocco `metti una torcia` per posizionare una torcia nel punto
          in cui ti trovi.
      Underground Mining Coal_2018_authored_hint:
        mc_9_a: Sei girato dalla parte giusta? Il blocco `distruggi` scava nel blocco
          davanti a te.
        mc_9_b: I granelli neri nel muro sono carbone! Usa il blocco `distruggi` su
          di essi per estrarre il carbone.
        mc_9_c: Usa il blocco `metti una torcia` per posizionare una torcia nel punto
          in cui ti trovi.
      Valentine_artist2_01_authored_hint:
        Valentine_artist2_01_a: Ogni lato dell' Erba e' lungo 30 pixels. Prova a utilizzare
          uno schema Gradino.
        Valentine_artist2_01_b: Vedi qualche schema che si ripete? Prova ad usare
          due blocchi "vai avanti" e due diversi blocchi "gira a" all'interno di un
          ciclo.
        Valentine_artist2_01_c: |-
          Prova questo Ciclo
          <xml><block type="controls_repeat">
          <title name="TIMES">8</title>
          <statement name="DO">
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">30</title>
          <next>
          <block type="draw_turn_by_constant">
          <title name="DIR">turnRight</title>
          <title name="VALUE">90</title>
          <next>
          <block type="draw_move_by_constant">
          <title name="DIR">moveForward</title>
          <title name="VALUE">30</title>
          <next>
          <block type="draw_turn_by_constant">
          gira a sinistra
          <title name="DIR"></title>
          <title name="VALUE">90</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      Valentine_artist_01_authored_hint:
        Valentine_artist_01_a: "In quale direzione deve trovarsi l'artista per muoversi?
          \nIn quale direzione deve trovarsi l'artista per appiccicare un nuovo adesivo
          del lama?"
        Valentine_artist_01_b: L'artista deve appiccicare 10 adesivi del lama e ruotare
          di 90 gradi ad ogni turno.
      Valentine_playlab_01_authored_hint:
        Valentine_playlab_01_a: |-
          Attacca il blocco `agente 1 getta cuori rossi` sull' evento `quando agente 1 ha cliccato `.

          Non scordarti di cambiare `sinistra` con `giu'`!
        Valentine_playlab_01_b: Usa il blocco `muovi agente 1 a sinistra` cliccandolo
          al suo posto sotto the `quando la freccetta a sinistra e' cliccata`.
      aE1_authored_hint: {}
      aE2_authored_hint:
        aE2_a: Nota che siccome i tovaglioli sono lunghi 20 pixels, e' necessario
          saltare 20 pixels prima di iniziare il tuo possimo ciclo.
      aE3_authored_hint:
        aE3_a: Dopo aver eseguito il **ciclo nidificato** dalla fase precedente, è
          necessario tornare all'inizio della linea.
        aE3_b: |-
          Non dimenticare di spostare l'artista prima di iniziare una nuova fila di forme!

          Per spostare l'artista verso il basso e ruotarlo nella direzione giusta:
          - Ruota di 90 gradi (per girare verso il basso)
          - Salta 20 pixel (per arrivare ad una nuova riga)
          - Rigira di 90 gradi (per girare di nuovo verso destra)
        aE3_c: Quando hai finito, i tuoi **cicli nidificati** dovrebbero essere profondi
          tre ripetizioni.
        aE3_d: Se temi di esserti perso, puoi sempre cliccare "Ripristina" per riportarti
          alla situazione iniziale!
      aE3alternate_authored_hint:
        aE3alternate_a: Dopo aver eseguito il **ciclo nidificato** dalla fase precedente,
          è necessario tornare all'inizio della linea.
        aE3alternate_b: |-
          Non dimenticare di spostare l'artista prima di iniziare una nuova fila di forme!

          Per spostare l'artista verso il basso e ruotarlo nella direzione giusta:
          - Ruota di 90 gradi (per girare verso il basso)
          - Salta 20 pixel (per arrivare ad una nuova riga)
          - Rigira di 90 gradi (per girare di nuovo verso destra)
        aE3alternate_c: Quando hai finito, i tuoi **cicli nidificati** dovrebbero
          essere profondi tre ripetizioni.
        aE3alternate_d: Se temi di esserti perso, puoi sempre cliccare "Ripristina"
          per riportarti alla situazione iniziale!
      aE3alternateB_authored_hint:
        aE4alternateB_a: Dopo aver eseguito il **ciclo nidificato** dalla fase precedente,
          è necessario tornare all'inizio della linea.
        aE4alternateB_b: |-
          Non dimenticare di spostare l'artista prima di iniziare una nuova fila di forme!

          Per spostare l'artista verso il basso e ruotarlo nella direzione giusta:
          - Ruota di 90 gradi (per girare verso il basso)
          - Salta 20 pixel (per arrivare ad una nuova riga)
          - Rigira di 90 gradi (per girare di nuovo verso destra)
        aE4alternateB_c: Quando hai finito, i tuoi **cicli nidificati** dovrebbero
          essere profondi tre ripetizioni.
        aE4alternateB_d: Se temi di esserti perso, puoi sempre cliccare "Ripristina"
          per riportarti alla situazione iniziale!
      aE4_authored_hint:
        aE4_a: Dopo aver eseguito il **ciclo nidificato** dalla fase precedente, è
          necessario tornare all'inizio della linea.
        aE4_b: |-
          Non dimenticare di spostare l'artista prima di iniziare una nuova fila di forme!

          Per spostare l'artista verso il basso e ruotarlo nella direzione giusta:
          - Ruota di 90 gradi (per girare verso il basso)
          - Salta 20 pixel (per arrivare ad una nuova riga)
          - Rigira di 90 gradi (per girare di nuovo verso destra)
        aE4_c: Quando hai finito, i tuoi **cicli nidificati** dovrebbero essere profondi
          tre ripetizioni.
        aE4_d: Se temi di esserti perso, puoi sempre cliccare "Ripristina" per riportarti
          alla situazione iniziale!
      aE5_authored_hint: {}
      aE6_authored_hint:
        aE6_a: |-
          Se ci sono 180 gradi in un semicerchio e ad ogni ciclo l'artista gira 3 gradi, quante volte dovresti eseguire il ciclo per disegnare la metà di un cerchio completo?

          **180 ÷ 3 =?**
      aE7_authored_hint:
        aE7_a: Disegna la metà inferiore di un cerchio e poi la metà superiore di
          un cerchio per creare un segmento.
        aE7_b: Avrai bisogno di 4 segmenti per completare questo puzzle.
      aE8_authored_hint:
        aE8_a: |-
          Per creare un quadrato dalla tua linea, dovrai:
          - disegnare la linea
          - usare l'angolo curvato

          Ripeti questi passaggi 4 volte.
      allHallows2017_authored_hint:
        allHallows2017_a: Attento! GT potrebbe seguirti sulla tua bici e cancellare
          la tua linea!
        allHallows2017_g: 'Sarah dice: "Hai freddo? Vieni e siediti nell''angolo...
          È di 90 gradi!"'
        allHallows2017_c: 'Jordyn dice: "Non ti fermare ora! Vai! Vai!"'
        allHallows2017_d: 'Josh dice: "Dovrai attingere alle tue capacità di programmatore
          per completare questo puzzle!"'
        allHallows2017_e: 'Dani dice: "Non sono bravo nei giochi di parole. Prova
          a usare un blocco di ripetizione!"'
        allHallows2017_b: 'Baker dice: "il pastello Chicago funziona solo sula *linea
          verde*."'
        allHallows2017_f: 'Amy dice: "Puoi farcela! Basta pensare fuori dagli schemi"'
      artistDebugVideo1_authored_hint:
        courseA_artist_loops7_a: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
      artistFunctionsVideo1_authored_hint: {}
      artistLoopsK2_authored_hint:
        artistLoopsK2_a: Se vuoi che il ciclo si ripeta più di 4 volte, devi cambiare
          il numero in alto a destra nel blocco rosa del ciclo.
      artistLoopsK2gradek_artist_loops3_authored_hint:
        artistLoopsK2_a: Se vuoi che il ciclo si ripeta più di 4 volte, devi cambiare
          il numero in alto a destra nel blocco rosa del ciclo.
      artistLoopsK3_authored_hint:
        artistLoopsK3_a: Prova a utilizzare quello che hai imparato sui blocchi di
          ripetizione per completare questo esercizio!
      artistLoopsK4_authored_hint:
        artistLoopsK4_a: Bloccato? Provare a eseguire il codice per vedere quale blocco
          non è corretto.
      artistLoopsK5_authored_hint:
        artistLoopsK5_a: Tutti e 4 i blocchi di partenza dovrebbero stare nel tuo
          blocco ripetere per risolvere questo puzzle.
      artistLoopsK6_authored_hint:
        artistLoopsK6_a: Prova a eseguire il codice per vedere dove c'è un bug.
      artistLoopsK7_authored_hint:
        artistLoopsK7_a: Tutti i blocchi necessari per questo puzzle sono già nel
          tuo spazio di lavoro!
      artistLoopsK8_authored_hint:
        artistLoopsK8_a: Prova a eseguire il codice per vedere dove c'è un bug.
      artistLoopsK9_authored_hint:
        artistLoopsK9_a: Questa sfida utilizza QUATTRO cicli, uno dopo l'altro!
      artistLoopsKA_authored_hint:
        artistLoopsKA_a: Usa il blocco salto per avanzare senza tracciare una linea.
      artistLoopsKB_authored_hint:
        artistLoopsKB_a: Ci dovrebbero essere 3 blocchi all'interno del tuo ciclo
          per risolvere questo puzzle.
      artistLoopsKFP_authored_hint: {}
      comment_intro_maze_2018_authored_hint:
        courseC_maze_programming4_a: I commenti sono anche utili quando altre persone
          tentano di leggere il tuo codice.
        courseC_maze_programming4_b: Aggiungi un commento quando cambi direzione-
          cosa sarebbe successo se ti fossi voltato dall'altra parte?
      conditionals_forvideo_harvester_authored_hint: {}
      course1_artist_loops_challenge1_authored_hint:
        courseA_artist_loops_challenge1_a: |
          Puoi usare cicli come questo per creare i muri e il tetto. Prova a ripetere blocchi diversi.

          ![](https://images.code.org/1581a2f599b501103064fc9864aa964d-image-1491863694560.png)

          Disegna il tuo o clicca ![](https://images.code.org/53090194cea5dbf35ce9e35205156f5d-image-1491864793265.png) per alcuni suggerimenti!
        courseA_artist_loops_challenge1_b: "![](https://images.code.org/34f3bae38f77f07eaf455188c0b008e5-image-1491864823946.png)"
        courseA_artist_loops_challenge1_c: "![](https://images.code.org/24b208839971803f3f6cd6ae41da56df-image-1491864839734.png)"
        courseA_artist_loops_challenge1_d: "![](https://images.code.org/d3ccefffa0cc77bdd4a597cdb49fc85e-image-1491864847347.png)"
      course1_artist_loops_challenge2_authored_hint:
        harvey_tictactoe: You can use `jump` blocks to move to other spaces.
      course1_artist_loops_challenge3_authored_hint:
        courseA_artist_loops_challenge2_a: 'Blocchi come questo: <xml> <block type
          = "simple_move_up_left"/> </xml> permetteranno al tuo artista di muoversi
          in diagonale!'
        courseA_artist_loops_challenge2_b: When you finish one bird house, `jump`
          to the next!
        courseA_artist_loops_challenge2_c: You will need a LOT of blocks inside the
          loop for this challenge.
      course1_artist_loops_challenge4_authored_hint:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over
          some of the same lines twice. '
      course1_collector_loops_challenge1_authored_hint:
        courseA_collector_loops_challenge1_a: Prova a cambiare i numeri nei cicli
          se qualcosa va storto.
        courseA_collector_loops_challenge1_b: You don't need to use a loop if you
          are only doing something one time.
        courseA_collector_loops_challenge1_c: Ci sono 6 gemme sul lato destro della
          grotta, ma è necessario spostarle e raccoglierle solo 5 volte. Lo sai il
          perché?
      course1_collector_loops_challenge2_authored_hint:
        courseA_collector_loops_challenge2_b: 'You only need to use one ![](https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34
          PM.png) block to solve this.

'
        courseA_collector_loops_challenge2_a: |-
          You can move back over the path a second time before moving south.

          ![](https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)
      course1_collector_loops_challenge3_authored_hint:
        courseB_collector_loops_challenge1_b: |
          Inizia ripetendo i comandi `vai a sud` e `prendi il tesoro`.
          <xml>
          <block type="maze_moveSouth"/><next>
          <block type="collector_collect"/></next>
          </xml>
        courseB_collector_loops_challenge1_a: |
          Il modello a nord è leggermente diverso da quello a sud.
          <xml>
          <block type="collector_collect"/><next>
          <block type="maze_moveNorth"/></next>next>
          </xml>
        courseB_collector_loops_challenge1_c: "Vai a Est due volte tra ogni percorso.\n<xml>\n
          \ <block type=\"maze_moveEast\"/><next>\n  <block type=\"maze_moveEast\"/></next>next>\n
          \ </xml>\nPuoi risuscirci in appena 14 blocchi. \nClicca un altro suggerimento
          per avere una soluzione.\n"
        courseB_collector_loops_challenge1_d: |-
          Try this!
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course1_collector_loops_challenge4_authored_hint:
        courseB_collector_loops_challenge2_a: If something goes wrong, don't be afraid
          to start over. Don't give up!
        courseB_collector_loops_challenge2_b: |-
          If you repeat this pattern, Laurel won't hit the wall at the bottom of the cave!

          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseB_collector_loops_challenge2_c: Try using a `repeat` block to collect
          the final pile of treasure!
        courseB_collector_loops_challenge2_d: |-
          Try this solution:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">4</title>
          <statement name="DO">
          <block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">6</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course1_maze_debugging_challenge1_authored_hint:
        courseA_maze_seq_challenge1_a: Alcuni percorsi portano al TNT, se vai troppo
          lontano.
      course1_maze_debugging_challenge2_authored_hint:
        courseB_maze_seq_challenge2_a: You do not need to add or remove blocks to
          solve this puzzle.
        courseB_maze_seq_challenge2_b: Riorganizza i blocchi e prendi la via di mezzo.
      course1_maze_seq_challenge1_authored_hint:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember
          not to count the space where you start!
      course1_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Prova an andare a ovest per iniziare.
      course1_playlab_events_challenge1_authored_hint:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you
          click Robin!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click
          Waddles!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when
          you click Boo!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click
          the monster!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Infine, fai apparire il Mago Wendel
          quando clicchi su Spiff!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visibili\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      course1_playlab_events_challenge2_authored_hint:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n\n
          \ </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      course2_artist_nestedLoops_challenge1_authored_hint:
        courseD_artist_nestedLoops_challenge1_a: "Inizia creando un ciclo annidato
          per creare quattro ottagoni. \nRuota di 45 gradi per creare l'ottagono.
          \nSalta, e ruota di 90 gradi dopo ognuno di essi."
        courseD_artist_nestedLoops_challenge1_b: Aggiungi il codice all'interno del
          tuo ciclo annidato per disegnare un triangolo. Usa 120 gradi per il tuo
          triangolo.
        courseD_artist_nestedLoops_challenge1_c: |-
          Usa un ciclo annidato:
          - Ripeti 8 volte
          - disegna un ottagono
          - disegna un triangolo
          - salta in avanti di 50 pixel
          - gira a destra di 90 gradi
      course2_artist_nestedLoops_challenge2_authored_hint:
        courseD_artist_nestedLoops_challenge2_a: To draw a regular octagon, the artist
          needs to turn 45 degrees 8 times.
        courseD_artist_nestedLoops_challenge2_b: To draw a square, the artist needs
          to turn 90 degrees 4 times.
      course2_artist_prog_challenge1_authored_hint:
        courseC_artist_prog_challenge1_a: 'Il rettangolo è largo 200 pixel e alto
          100. '
      course2_artist_prog_challenge2_authored_hint:
        courseC_artist_prog_challenge2_a: "You can put commands inside `repeat` block
          to loop them over and over. Try it!\n<xml>\n  \n          <block type=\"controls_repeat\">\n
          \           <title name=\"TIMES\">6</title>\n            <statement name=\"DO\">\n
          \             <block type=\"draw_move_by_constant_dropdown\">\n                <title
          name=\"DIR\">moveForward</title>\n                <title name=\"VALUE\"
          config=\"25,50,100,150,200,300\">25</title>\n                <next>\n                  <block
          type=\"jump_by_constant_dropdown\">\n                    <title name=\"DIR\">jumpForward</title>\n
          \                   <title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n
          \                 </block>\n                </next>\n              </block>\n
          \             </statement></block></xml>"
      course2_bee_conditionals_challenge1_authored_hint:
        courseD_bee_conditionals_challenge1_a: |-
          Riesci a trovare un sentiero che raggiunga tutti i fiori e il favo senza colpire nessun albero? Il percorso migliore è una spirale.

          ** Puoi riuscirci senza mai girare a sinistra. **
        courseD_bee_conditionals_challenge1_b: In this puzzle, each space could have
          a flower, a honey comb, or nothing.  That means you can repeat your `if/else`
          conditional at each square.
      course2_bee_conditionals_challenge2_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The main differences is that the code inside will run repetitively until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>                    <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      course2_collector_loops_challenge2_authored_hint:
        courseC_maze_loops_challenge2_a: The original code would work great - if there
          was only one piece of treasure in each pile!
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      course2_collector_prog_challenge1_authored_hint:
        courseC_collector_prog_challenge1_a: You can use the `collect` command more
          often to collect the extra treasure.
      course2_collector_prog_challenge2_authored_hint:
        courseC_collector_prog_challenge1_a: You can use the `collect` command more
          often to collect the extra treasure.
      course2_harvester_loops_challenge1_authored_hint:
        courseC_harvester_loops_challenge1_a: Don't even think about try about trying
          this without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need to, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the first four corn uses a `repeat` block inside of another `repeat` block. You can use this pattern for the rest of the puzzle too!

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></next></block></xml>
      course2_harvester_loops_challenge2_authored_hint:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)
      course2_maze_loops_challenge1_authored_hint:
        courseC_maze_loops_challenge1_a: Think about this path as being three different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: In between each `repeat` block, you will
          need to `turn left` or `turn right` to get ready Scrat for the next pattern.
        courseC_maze_loops_challenge1_c: |-
          If you make it this far, you just need to `turn left` then `move forward` a few times. Don't give up!

          ![](https://images.code.org/7696c5c16b8ddf1d53436cdc7fb6346d-image-1494101728016.14.34 PM.png)
      course2_maze_programming_challenge1_authored_hint: {}
      course2_maze_programming_challenge2_authored_hint:
        courseC_maze_programming_challenge2_a: "*If you send me backwards, be extra
          careful that I turn the correct way!*"
        courseC_maze_programming_challenge2_b: The shortest solution use only 5 blocks,
          but it uses the `repeat` block!
      course2_maze_seq_challenge1_authored_hint:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember
          not to count the space where you start!
      course2_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Prova an andare a ovest per iniziare.
      course3_artist_concept_challenge1_authored_hint:
        courseE_artist_concept_challenge1_a: Nel primo ciclo, per disegnare il mezzo
          esagono, l'artista percorre tratti di <b>30 pixel</b> invece di 40 e gira
          a destra di <b>60 gradi</b>.
        courseE_artist_concept_challenge1_b: Nel secondo ciclo, per disegnare i due
          lati del triangolo, l'artista percorre tratti di <b>80 pixel</b> e gira
          a destra di <b>120 gradi</b>.
      course3_artist_functions_challenge1_authored_hint:
        courseE_artist_functions_challenge1_a: If you call the function one more time,
          you can create the same design in the final corner. You can also `jump to`
          other positions or change the whole thing around however you want!
      course3_artist_functions_challenge2_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n  <block type=\"jump_to_xy\">\n
          \   <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n
          \ </block>\n  </xml>\n  \nThis `jump to` block lets you move the zombie
          artist to any pixel on the grid, whenever you want. It works by moving him
          a number of pixels over to the right and a number of pixels down. This is
          always counted from the top left corner, which it means it doesn't matter
          where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      course3_bee_debugging_challenge1_authored_hint:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program
          work? Think about why the bee needs to move backward. How much nectar does
          the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the
          same pattern. How much honey does the bee need to make each time it moves
          over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          * Repeat 2 times:
          * Move forward
          * Make 3 honey
          * Move backward
      course3_bee_functions_challenge1_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      course3_bee_functions_challenge2_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      course3_bee_functions_challenge3_authored_hint:
        courseF_bee_functions_challenge1_a: You can use the functions in the tool
          box to help you. You can call a function inside of another function's definition!
      course3_bee_functions_challenge4_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          If there is a path to the right, you should do the following:
          * Get any nectar or make any honey.
          * Turn right towards the side path.
          * Move to the end of the side path.
          * Turn right.

          If you repeat the above actions twice, you will be ready to move back down the main path.

          **Only click for another hint if you want to see the full solution!**
        courseF_bee_functions_challenge2_b: |-
          **Solution:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathRight</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"/>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation/>
          <title name="NAME">check nectar or honey</title>
          <statement name="STACK">
          <block type="bee_ifElseFlower">
          <title name="LOC">atFlower</title>
          <statement name="DO">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block>
          </statement>
          <statement name="ELSE">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">honeyAvailable</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" deletable="false" movable="false" editable="false">
          <mutation/>
          <title name="NAME">move and check</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="check nectar or honey"/>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          </xml>
      course3_collector_debugging_challenge2_authored_hint:
        courseD_collector_debugging_challenge2_a: "Start by focusing on collect TWO
          gems from each of the first two piles.\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04
          AM copy.png)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block
          type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n
          \ </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title
          name=\"DIR\">moveForward</title>\n\n                  </block>\n                  \n
          \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n
          \   <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "Next, collect the remaining gems
          in this row.\n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04
          AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n
          \                   <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block
          type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement
          name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "Finally, collect the remaining
          treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n
          \               <title name=\"DIR\">turnRight</title>\n              </block>\n
          \     <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n
          \       <statement name=\"DO\">\n          \n        </statement>\n      </block>\n\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Here is the complete solution for this puzzle.

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      course3_farmer_condLoops_challenge1_authored_hint:
        courseD_farmer_condLoops_challenge1_a: The `STEP` button could be very helpful
          in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      course3_farmer_condLoops_challenge2_authored_hint:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each
          space varies. Use `while` loops for these.
      course3_farmer_until_challenge2_authored_hint: {}
      course3_maze_debugging_challenge1_authored_hint:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle!
          He needs to turn the same way each time!
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always
          start over, or remove all the code and find your own way!
      course3_maze_debugging_challenge2_authored_hint:
        courseC_maze_debugging_challenge2_a: One way to solve this is to add more
          steps forward in between the turns.
        courseC_maze_debugging_challenge2_b: If you are getting stuck, you can always
          start over or remove all the code and find your own way!
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow just using `move forward`, and only four turns. If you find a way to use the `repeat` block, there may be even more!

          ![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)
      course3_maze_until_challenge1_authored_hint: {}
      course3_playLab_challenge1_authored_hint:
        courseE_playLab_challenge1_a: |-
          Here are some things you could do when the player wins the game:

          * Make the dinosaur vanish.
          * Stop the squirrels.
          * Make the squirrels and knight happy.
          * Set a new background.
          * Make the knight thank the player for helping.
          * Make all of the actors vanish and show a "You Win!" message.
        courseE_playLab_challenge1_b: |-
          Here are some things you could do when the player loses the game:

          * Make the knight vanish.
          * Make the squirrels sad.
          * Make the dinosaur say something.
          * Set a new background.
          * Make all of the actors vanish and show a "Game Over" message.
      course3_playlab_challenge2_authored_hint:
        courseE_playlab_challenge2_a: |-
          The actor knows what to say based on its mood. Try playing with the things the witch might say.

          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block></xml>
        courseE_playlab_challenge2_b: "It will feel like the game starts all over
          if you call the `ask a question` function again below the list of conditionals.\n<xml><block
          type=\"studio_saySpriteParamsTime\" inline=\"true\">\n               \n<block
          type=\"procedures_callnoreturn\">\n<mutation name=\"Ask a question\"></mutation>\n
          \       </block></block></xml>"
        courseE_playlab_challenge2_c: "You will need to add more conditional statements
          to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\"
          inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value
          name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title
          name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement
          name=\"DO\">\n              <block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n
          \           <value name=\"SPRITE\">\n              <block type=\"math_number\">\n
          \               <title name=\"NUM\">1</title>\n              </block>\n
          \           </value>\n            <value name=\"TEXT\">\n              <block
          type=\"text\">\n                <title name=\"TEXT\">???</title>\n              </block>\n
          \           </value>\n            <value name=\"TIME\">\n              <block
          type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n
          \           </value>\n          </block>\n              </statement></block></xml>\n
          \             \nDon't forget to change which moods the actor will show inside
          of the `repeat forever` loop. You can also set the moods randomly!"
        courseE_playlab_challenge2_d: |-
          Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.

          Don't forget to change the instructions inside the `show title screen` block so they still make sense!
        courseE_playlab_challenge2_e: |-
          When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?

          Have a friend try your app when it is finished!
      course4_artist_binary_challenge2_authored_hint:
        courseD_artist_binary_challenge2_a: |-
          The best tip I have for you is to press `⟲ Start Over` if it starts to get really messy.

          There are only few lines wrong in the original program. If one approach fails, back up and try again. There is a solution!
      course4_artist_concept_challenge2_authored_hint:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call
          it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:
          <xml>  <block type="jump_to">
          <title name="VALUE">???</title>
          </block></xml>
      course4_artist_functions_challenge2_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n  <block type=\"jump_to_xy\">\n
          \   <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n
          \ </block>\n  </xml>\n  \nThis `jump to` block lets you move the zombie
          artist to any pixel on the grid, whenever you want. It works by moving him
          a number of pixels over to the right and a number of pixels down. This is
          always counted from the top left corner, which it means it doesn't matter
          where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      course4_artist_fwp_challenge1_authored_hint: {}
      course4_artist_variables_challenge1_authored_hint:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course4_artist_variables_challenge2_authored_hint:
        courseF_artist_variables_challenge2_a: |-
          La figura è composta dalla ripetizione del disegno di un pentagono e di un decagono.<br>
          <br>
          Il perimetro di ogni poligono ha una lunghezza (`length`) di 500 pixel.
        courseF_artist_variables_challenge2_b: |-
          Ogni poligono è ripetuto un numero di volte pari al numero dei suoi lati (`sides`).<br>
          <br>
          Al termine delle ripetizioni di ogni poligono l'artista ha fatto un giro completo di 360 gradi.
        courseF_artist_variables_challenge2_c: |-
          Entrambi i poligoni sono disegnati dallo stesso ciclo, basato sulla variabile `sides` - il cui valore viene opportunamente cambiato.<br>
          <br>
          Vengono disegnate prima tutte le ripetizioni del pentagono e poi tutte quelle del decagono.
        courseF_artist_variables_challenge2_d: <b>Soluzione:</b> Vuoi sapere come
          è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/117486491"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      course4_bee_for_challenge1_authored_hint: {}
      course4_bee_fwp_challenge1_authored_hint:
        courseF_bee_fwp_challenge1_a: |-
          The main program should look something like this:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: |-
          Look at how much corn is available to harvest in each space. Do you see the counter pattern? The `length` parameter should be used to set the maximum value in the `for loop`.

          Don't forget to have the farmer move back to the main path after harvesting!
        courseF_bee_fwp_challenge1_c: |-
          Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.
          Inside this loop, you should move forward and pick all of the corn.

          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: |-
          Inside the `for loop` you will want to `move forward` then `get nectar` **counter times**.
          After the `for loop` you can just `move backward` **length times**.

          You may need to read this hint several times to understand it. The part in **bold** is a hint about how to use the two `repeat` loops you will need.
        courseF_bee_fwp_challenge1_e: |
          **Here is the solution:**

          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      course4_bee_fwp_challenge2_authored_hint:
        courseF_bee_fwp_challenge2_a: |-
          Start by making sure you understand how this function is *supposed* to work. As the farmer moves down each path, she will only try to collect corn. Instead, how can you make her check for each of the 3 vegetables and pick only the one she finds?

          Add conditional statements to the function to check for corn, pumpkins, and lettuce.
        courseF_bee_fwp_challenge2_b: "Are you running out of `move forward` blocks?\nTry
          using a *second* `for loop` in your main program. \n\n**Note:** Be careful
          not to confuse `counter` with `counter2` in your code."
        courseF_bee_fwp_challenge2_c: |-
          **Here is what your function should look like:**

          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">Corn</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Pumpkin</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Lettuce</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |
          **Here is what your main program should look like:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">counter2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      course4_collector_nested_loops_challenge2_authored_hint:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course4_harvester_nested_loops_challenge1_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: You have probably already used
          a loop to create a zig-zag pattern. If you remember that algorithm, you
          can make a few additions to it here.
      course4_playlab_variables_challenge1_authored_hint:
        courseF_playlab_variables_challenge1_a: |-
          You will need additional blocks from the tool box to get the actors to talk.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Knock knock.</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      course4_playlab_variables_challenge3_authored_hint:
        courseF_playlab_variables_challenge3_a: |-
          The actor knows what to say because it checks the current value of the `fortune` variable.

          <xml><block type="variables_set" inline="false">
          <title name="VAR">fortune</title>
          <value name="VALUE">
          <block type="text" movable="false">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          </block></xml>
        courseF_playlab_variables_challenge3_b: |-
          It will feel like the game starts all over if you call the `ask a question` function again after the actor says the fortune.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="variables_get">
          <title name="VAR">fortune</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="Ask a question"/>
          </block></next></block></xml>
        courseF_playlab_variables_challenge3_c: "You will need to add more conditional
          statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\"
          inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value
          name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title
          name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement
          name=\"DO\">\n              <block type=\"variables_set\" inline=\"false\">\n
          \               <title name=\"VAR\">fortune</title>\n                <value
          name=\"VALUE\">\n                  <block type=\"text\" movable=\"false\">\n
          \                   <title name=\"TEXT\">???</title>\n                  </block>\n
          \               </value>\n              </block>\n              </statement></block></xml>\n
          \             \nDon't forget to change which moods the actor will show inside
          of the `repeat forever` loop. You can also set the moods randomly!"
        courseF_playlab_variables_challenge3_d: |-
          Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.

          Don't forget to change the instructions inside the `Ask a question` function so they still make sense!
        courseF_playlab_variables_challenge3_e: |-
          When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?

          Have a friend try your app when it is finished!
      courseA_artist_loops10_authored_hint: {}
      courseA_artist_loops10_2018_authored_hint: {}
      courseA_artist_loops11_authored_hint: {}
      courseA_artist_loops11_2018_authored_hint: {}
      courseA_artist_loops11_predict2_authored_hint: {}
      courseA_artist_loops12_authored_hint: {}
      courseA_artist_loops12_2018_authored_hint: {}
      courseA_artist_loops2_authored_hint:
        courseA_artist_loops2_a: |-
          Non riesci ad immaginare come si fa a disegnare una linea? Per vedere cosa capita, inizia ad agganciare qualche blocco a caso al blocco iniziale
          <xml><block type="when_run"/></xml>
        courseA_artist_loops2_b: Utilizza questo blocco <xml><block type="simple_move_right"/></xml>
          per risolvere questo esercizio.
      courseA_artist_loops2_2018_authored_hint:
        courseA_artist_loops2_a: |-
          Non riesci ad immaginare come si fa a disegnare una linea? Per vedere cosa capita, inizia ad agganciare qualche blocco a caso al blocco iniziale
          <xml><block type="when_run"/></xml>
        courseA_artist_loops2_b: Utilizza questo blocco <xml><block type="simple_move_right"/></xml>
          per risolvere questo esercizio.
      courseA_artist_loops3_authored_hint:
        courseA_artist_loops3_a: Segui lentamente con il dito l'esecuzione del programma
          per capire dove sbaglia.
        courseA_artist_loops3_b: |-
          Devi usare un blocco come questo per risolvere l'esercizio.

          ![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)
      courseA_artist_loops3_2018_authored_hint:
        courseA_artist_loops3_a: Segui lentamente con il dito l'esecuzione del programma
          per capire dove sbaglia.
        courseA_artist_loops3_b: |-
          Devi usare un blocco come questo per risolvere l'esercizio.

          ![](https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png)
      courseA_artist_loops4_authored_hint:
        courseA_artist_loops4_a: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseA_artist_loops4_b: |-
          Dato che puoi utilizzare solo un blocco
          <xml><block type="simple_move_right"/></xml>
          prova a metterlo all'interno del ciclo
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml>
      courseA_artist_loops4_2018_authored_hint:
        courseA_artist_loops4_a: Se vuoi che il ciclo si ripeta più di 4 volte, devi
          cambiare il numero in alto a destra nel blocco rosa del ciclo.
        courseA_artist_loops4_b: |-
          Dato che puoi utilizzare solo un blocco
          <xml><block type="simple_move_right"/></xml>
          prova a metterlo all'interno del ciclo
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml>
      courseA_artist_loops5_authored_hint:
        courseA_artist_loops5_a: |-
          Prova a utilizzare quello che hai imparato sui blocchi
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          per completare questo esercizio!
        courseA_artist_loops5_b: Per indicare quante volte vuoi che il ciclo sia ripetuto,
          devi scrivere il numero di ripetizioni richieste al posto dei punti interrogativi
          (???) che vedi nella parte superiore del blocco.
        courseA_artist_loops5_c: |-
          Dato che puoi utilizzare solo un blocco
          <xml><block type="simple_move_right"/></xml>
          prova a metterlo all'interno del ciclo
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_artist_loops5_2018_authored_hint:
        courseA_artist_loops5_a: |-
          Prova a utilizzare quello che hai imparato sui blocchi
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          per completare questo esercizio!
        courseA_artist_loops5_b: Se vuoi che il ciclo si ripeta più di 4 volte, devi
          cambiare il numero in alto a destra nel blocco rosa del ciclo.
        courseA_artist_loops5_c: |-
          Dato che puoi utilizzare solo un blocco
          <xml><block type="simple_move_right"/></xml>
          prova a metterlo all'interno del ciclo
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_artist_loops6_authored_hint:
        courseA_artist_loops6_a: Non riesci ad immaginare come disegnare la collina?
          Prova a giocare un po' con i blocchi per vedere che disegno fa ognuno.
        courseA_artist_loops6_b: Avrai bisogno di 2 blocchi in 2 direzioni per risolvere
          questo esercizio.
      courseA_artist_loops6_2018_authored_hint:
        courseA_artist_loops6_a: Non riesci ad immaginare come disegnare la collina?
          Prova a giocare un po' con i blocchi per vedere che disegno fa ognuno.
        courseA_artist_loops6_b: Avrai bisogno di 2 blocchi in 2 direzioni per risolvere
          questo esercizio.
      courseA_artist_loops7_authored_hint:
        courseA_artist_loops7_a: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
        courseA_artist_loops7_b: Scrivi il codice per disegnare un'onda, poi ripetilo
          per disegnare le altre due.
        courseA_artist_loops7_c: |-
          Ricorda: puoi mettere più di un blocco all'interno di un ciclo
          <xml><block type="controls_repeat"> <title name="TIMES">???</title></block></xml>
      courseA_artist_loops7_2018_authored_hint:
        courseA_artist_loops7_a: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
        courseA_artist_loops7_b: Scrivi il codice per disegnare un'onda, poi ripetilo
          per disegnare le altre due.
        courseA_artist_loops7_c: |-
          Ricorda: puoi mettere più di un blocco all'interno di un ciclo
          <xml><block type="controls_repeat"> <title name="TIMES">???</title></block></xml>
      courseA_artist_loops7_forVideo_authored_hint:
        courseA_artist_loops7_a: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
        courseA_artist_loops7_b: Scrivi il codice per disegnare un'onda, poi ripetilo
          per disegnare le altre due.
        courseA_artist_loops7_c: |-
          Ricorda: puoi mettere più di un blocco all'interno di un ciclo
          <xml><block type="controls_repeat"> <title name="TIMES">???</title></block></xml>
      courseA_artist_loops8_authored_hint:
        courseA_artist_loops8_a: Prova ad eseguire il codice, per capire cosa è già
          stato scritto per te.
        courseA_artist_loops8_b: Come inseriresti in un ciclo il codice che ti è stato
          dato?
        courseA_artist_loops8_c: "Cosa fa il codice?  \nChe cosa dovrebbe fare?  \nChe
          cosa ti suggerisce questo?"
      courseA_artist_loops8_2018_authored_hint:
        courseA_artist_loops8_a: Prova ad eseguire il codice, per capire cosa è già
          stato scritto per te.
        courseA_artist_loops8_b: Come inseriresti in un ciclo il codice che ti è stato
          dato?
        courseA_artist_loops8_c: "Cosa fa il codice?  \nChe cosa dovrebbe fare?  \nChe
          cosa ti suggerisce questo?"
      courseA_artist_loops9_authored_hint:
        courseA_artist_loops9_a: Per disegnare il resto della scala, aggiungi un blocco
          al programma che trovi già scritto.
        courseA_artist_loops9_b: |-
          Il blocco che aggiungi devi inserirlo all'interno del ciclo
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block> </xml>
        courseA_artist_loops9_c: Se non riesci a capire dove mettere il ciclo, prova
          a scrivere il codice con tutti i blocchi azzurri e cerca poi di riconoscere
          la sequenza che si ripete.
      courseA_artist_loops9_2018_authored_hint:
        courseA_artist_loops9_a: Per disegnare il resto della scala, aggiungi un blocco
          al programma che trovi già scritto.
        courseA_artist_loops9_b: |-
          Il blocco che aggiungi devi inserirlo all'interno del ciclo
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block> </xml>
        courseA_artist_loops9_c: Se non riesci a capire dove mettere il ciclo, prova
          a scrivere il codice con tutti i blocchi azzurri e cerca poi di riconoscere
          la sequenza che si ripete.
      courseA_artist_loops_challenge1_authored_hint: {}
      courseA_artist_loops_challenge1_2018_authored_hint: {}
      courseA_artist_loops_challenge2_authored_hint:
        courseA_artist_loops_challenge2_a: 'Blocks like this: <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!'
        courseA_artist_loops_challenge2_b: When you finish one bird house, `jump`
          to the next!
        courseA_artist_loops_challenge2_c: You will need a LOT of blocks inside the
          loop for this challenge.
      courseA_artist_loops_challenge2a_authored_hint:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: When you finish one tent, `jump` up twice
          to get to the next!
        courseA_artist_loops_challenge2_c: All of your blocks will need to be inside
          of a loop to finish this puzzle.
      courseA_artist_loops_challenge2a_2018_authored_hint:
        courseA_artist_loops_challenge2_a: Blocks like this <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!
        courseA_artist_loops_challenge2_b: When you finish one tent, `jump` up twice
          to get to the next!
        courseA_artist_loops_challenge2_c: All of your blocks will need to be inside
          of a loop to finish this puzzle.
      courseA_artist_loops_challenge3_authored_hint:
        harvey_tictactoe: You can use `jump` blocks to move to other spaces.
      courseA_bee_seq1_authored_hint:
        courseA_bee_seq1_a: |-
          Use this block to get nectar once the bee finds a flower.

          <xml>
          <block type="maze_nectar"/>
          </xml>
      courseA_bee_seq10_authored_hint: {}
      courseA_bee_seq11_authored_hint: {}
      courseA_bee_seq12_authored_hint:
        courseA_bee_seq1_a: |-
          Use this block to get nectar once the bee finds a flower.

          <xml>
          <block type="maze_nectar"/>
          </xml>
      courseA_bee_seq13_authored_hint: {}
      courseA_bee_seq14_authored_hint: {}
      courseA_bee_seq2_authored_hint: {}
      courseA_bee_seq3_authored_hint: {}
      courseA_bee_seq4_authored_hint: {}
      courseA_bee_seq5_authored_hint: {}
      courseA_bee_seq6_authored_hint: {}
      courseA_bee_seq7_authored_hint: {}
      courseA_bee_seq8_authored_hint: {}
      courseA_bee_seq9_authored_hint: {}
      courseA_collector_loops1_authored_hint:
        courseA_collector_loops1_a: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:
          <xml><block type="collector_collect"/></xml>
        courseA_collector_loops1_b: Una soluzione semplice sarebbe spostarsi a Est
          (`E -->`) 2 volte, quindi prendere il diamante.
      courseA_collector_loops10_authored_hint: {}
      courseA_collector_loops10_2018_authored_hint: {}
      courseA_collector_loops11_authored_hint: {}
      courseA_collector_loops11_2018_authored_hint: {}
      courseA_collector_loops11_predict2_authored_hint: {}
      courseA_collector_loops1_2018_authored_hint:
        courseA_collector_loops1_a: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:
          <xml><block type="collector_collect"/></xml>
        courseA_collector_loops1_b: Una soluzione semplice sarebbe spostarsi a Est
          (`E -->`) 2 volte, quindi prendere il diamante.
      courseA_collector_loops2_authored_hint:
        courseA_collector_loops2_a: Devi muoverti prima di raccogliere qualsiasi diamante.
        courseA_collector_loops2_b: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:
          <xml><block type="collector_collect"/></xml>
      courseA_collector_loops2_2018_authored_hint:
        courseA_collector_loops2_a: Devi muoverti prima di raccogliere qualsiasi diamante.
        courseA_collector_loops2_b: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:
          <xml><block type="collector_collect"/></xml>
      courseA_collector_loops3_authored_hint:
        courseA_collector_loops3_a: Prova ad utilizzare un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>
        courseA_collector_loops3_b: 'Ricorda: puoi mettere più di un blocco dentro
          un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml>'
      courseA_collector_loops3_2018_authored_hint:
        courseA_collector_loops3_a: Prova ad utilizzare un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>
        courseA_collector_loops3_b: 'Ricorda: puoi mettere più di un blocco dentro
          un ciclo <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="3-10">???</title></block></xml>'
      courseA_collector_loops3_predict1_authored_hint: {}
      courseA_collector_loops4_authored_hint:
        courseA_collector_loops4_a: Per modificare di quante caselle deve spostarsi
          Laurel, cambia il numero di volte che il ciclo viene eseguito.
        courseA_collector_loops4_b: |-
          Non dimenticare che Laurel deve ancora scendere per raccogliere l'ultimo diamante, dopo aver terminato il ciclo
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops4_2018_authored_hint:
        courseA_collector_loops4_a: Per modificare di quante caselle deve spostarsi
          Laurel, cambia il numero di volte che il ciclo viene eseguito.
        courseA_collector_loops4_b: |-
          Non dimenticare che Laurel deve ancora scendere per raccogliere l'ultimo diamante, dopo aver terminato il ciclo
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseA_collector_loops5_authored_hint:
        courseA_collector_loops5_a: Se non riesci subito a capire la risposta, provare
          ad utilizzare un foglio di carta per capire di quali frecce hai bisogno
          e cerca di definire un percorso.
        courseA_collector_loops5_b: Prova a dividere il problema in due parti, muovendoti
          lateralmente e poi verso il basso.
        courseA_collector_loops5_c: |-
          Potresti iniziare con un ciclo
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          che muove Laurel verso Ovest (`O <--`) e raccoglie i diamanti.
      courseA_collector_loops5_2018_authored_hint:
        courseA_collector_loops5_a: Se non riesci subito a capire la risposta, provare
          ad utilizzare un foglio di carta per capire di quali frecce hai bisogno
          e cerca di definire un percorso.
        courseA_collector_loops5_b: Prova a dividere il problema in due parti, muovendoti
          lateralmente e poi verso il basso.
        courseA_collector_loops5_c: |-
          Potresti iniziare con un ciclo
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          che muove Laurel verso Ovest (`O <--`) e raccoglie i diamanti.
      courseA_collector_loops6_authored_hint:
        courseA_collector_loops6_a: Non riesci a capire cosa non va? Provare a eseguire
          il codice un paio di volte per vedere cosa succede.
        courseA_collector_loops6_b: |-
          La soluzione più breve ha 2 cicli
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          uno dopo l'altro.
      courseA_collector_loops6_2018_authored_hint:
        courseA_collector_loops6_a: Non riesci a capire cosa non va? Provare a eseguire
          il codice un paio di volte per vedere cosa succede.
        courseA_collector_loops6_b: |-
          La soluzione più breve ha 2 cicli
          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          uno dopo l'altro.
      courseA_collector_loops7_authored_hint:
        courseA_collector_loops7_a: Se non riesci a capire che cosa accade dopo, prova
          ad eseguire il codice per vedere dove va a finire Laurel.
      courseA_collector_loops7_2018_authored_hint:
        courseA_collector_loops7_a: Se non riesci a capire che cosa accade dopo, prova
          ad eseguire il codice per vedere dove va a finire Laurel.
      courseA_collector_loops8_authored_hint:
        courseA_collector_loops8_a: Se hai difficoltà nella risoluzione di questo
          esercizio, prova a scrivere le mosse su un foglio di carta e cerca di trovare
          uno schema che si ripete.
        courseA_collector_loops8_b: Prova a dividere questo esercizio in tre problemi
          separati e scrivi un ciclo per ciascuno di essi.
        courseA_collector_loops8_c: Ricorda che puoi scrivere un pezzo di codice alla
          volta, e poi premere "Esegui" per capire come devi procedere dal punto in
          cui sei arrivato.
      courseA_collector_loops8_2018_authored_hint:
        courseA_collector_loops8_a: Se hai difficoltà nella risoluzione di questo
          esercizio, prova a scrivere le mosse su un foglio di carta e cerca di trovare
          uno schema che si ripete.
        courseA_collector_loops8_b: Prova a dividere questo esercizio in tre problemi
          separati e scrivi un ciclo per ciascuno di essi.
        courseA_collector_loops8_c: Ricorda che puoi scrivere un pezzo di codice alla
          volta, e poi premere "Esegui" per capire come devi procedere dal punto in
          cui sei arrivato.
      courseA_collector_loops9_authored_hint:
        courseA_collector_loops9_a: 'Se non riesci ad immaginare quale possa essere
          il modo migliore di usare un ciclo, prova a programmare un movimento alla
          volta con i singoli blocchi blu e poi cerca lo schema che si ripete. '
        courseA_collector_loops9_b: Prova a mettere due cicli <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> dentro un altro ciclo
          per rendere il tuo programma più breve!
      courseA_collector_loops9_2018_authored_hint:
        courseA_collector_loops9_a: 'Se non riesci ad immaginare quale possa essere
          il modo migliore di usare un ciclo, prova a programmare un movimento alla
          volta con i singoli blocchi blu e poi cerca lo schema che si ripete. '
        courseA_collector_loops9_b: Prova a mettere due cicli <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> dentro un altro ciclo
          per rendere il tuo programma più breve!
      courseA_collector_loops_challenge1_authored_hint:
        courseA_collector_loops_challenge1_a: Try changing the numbers in each loop
          if something goes wrong.
        courseA_collector_loops_challenge1_b: You don't need to use a loop if you
          are only doing something one time.
        courseA_collector_loops_challenge1_c: There are 6 gems on the right side of
          the cave, but you only need to move and collect 5 times. Do you know why?
        courseA_collector_loops_challenge1_d: |-
          The starting program doesn't collect the last 2 gems. Try adding this code at the very end:
          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect_simplified">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_collector_loops_challenge1_2018_authored_hint:
        courseA_collector_loops_challenge1_a: Try changing the numbers in each loop
          if something seems wrong.
        courseA_collector_loops_challenge1_b: You don't need to use a loop if you
          are only doing something one time.
        courseA_collector_loops_challenge1_c: There are 6 gems on the right side of
          the cave when you start, but you only need to get treasure 5 times moving
          South. Do you know why?
        courseA_collector_loops_challenge1_d: |-
          The starting program doesn't collect the last 2 gems. Try adding this code at the very end:
          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect_simplified">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_collector_loops_challenge2_authored_hint:
        courseA_collector_loops_challenge2_b: 'You only need to use one ![](https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34
          PM.png) block to solve this.

'
        courseA_collector_loops_challenge2_a: |-
          You can move back over the path a second time before moving south.

          ![](https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)
      courseA_collector_loops_challenge2kp_authored_hint:
        courseA_collector_loops_challenge2kp_b: Try this path to get you to a solution.
        courseA_collector_loops_challenge2kp_a: Can you use loops to solve this puzzle?
      courseA_collector_loops_challenge2kp_2018_authored_hint:
        courseA_collector_loops_challenge2kp_b: Try this path to get you to a solution.
        courseA_collector_loops_challenge2kp_a: Can you use loops to solve this puzzle?
      courseA_collector_preLoops1_authored_hint: {}
      courseA_collector_preLoops2_authored_hint: {}
      courseA_collector_preLoops3_authored_hint: {}
      courseA_collector_preLoops4_authored_hint:
        courseA_collector_preLoops4_a: 'To grab the treasure, snap two ![](https://images.code.org/2df8a25d7e96207f57d1a6b504950b70-image-1508906116743.34.37.png)
          blocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
          block to the bottom of the program and click "Run"!

'
      courseA_collector_preLoops5_authored_hint:
        courseA_collector_preLoops5_a: You'll need to go two different directions
          to get even one gem!
      courseA_collector_preLoops6_authored_hint:
        courseA_collector_preLoops6_a: You will need to use two ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
          blocks to solve this puzzle.
      courseA_collector_preLoops7_authored_hint:
        courseA_collector_loops2_b: |-
          Dopo aver raggiunto una casella con un diamante, usa questo blocco per raccoglierlo:
          <xml><block type="collector_collect"/></xml>
      courseA_forVideoTest_artist_authored_hint: {}
      courseA_harvester_forVideo_authored_hint:
        courseA_harvester_loops3_a: |-
          Use a `repeat` block like this to help you!
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">3</title>
          </block></xml>
      courseA_harvester_loops1_authored_hint:
        courseA_harvester_loops1_a: |-
          Once you move to some corn, use this block to pick it!
          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops10_authored_hint: {}
      courseA_harvester_loops11_authored_hint: {}
      courseA_harvester_loops2_authored_hint:
        courseA_harvester_loops2_a: 'Your code will have **four** `move West` blocks
          and **four** `pick corn` blocks. '
      courseA_harvester_loops3_authored_hint:
        courseA_harvester_loops3_a: |-
          Use a `repeat` block like this to help you!
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">4</title>
          </block></xml>
        courseA_harvester_loops3_b: Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco `ripeti ... volte` e inserisci al suo interno
          i blocchi che vuoi ripetere.
      courseA_harvester_loops4_authored_hint:
        courseA_harvester_loops4_a: Don't be afraid to press `Run` to see what happens!
        courseA_harvester_loops4_b: How many pieces of corn are there? How many times
          does your code repeat?
      courseA_harvester_loops5_authored_hint:
        courseA_harvester_loops5_a: Se ti blocchi, prova a risolvere l'esercizio in
          due parti, una parte prima della curva e l'altra dopo la curva.
        courseA_harvester_loops5_b: |-
          Your final code will have **one** `repeat`  <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">6</title>
          </block></xml> loop, **one** `move South`   <xml><block type="maze_moveSouth" limit="1"/></xml> block, and **one** `move East`   <xml><block type="maze_moveEast" limit="1"/> </xml>block.
        courseA_harvester_loops5_c: Use this path to pick all the corn!
      courseA_harvester_loops5a_authored_hint:
        courseA_harvester_loops5a_a: Avrai bisogno di due cicli `ripeti ... volte`,
          uno dopo l'altro.
        courseA_harvester_loops5a_b: One loop will repeat `move South`, and the other
          will repeat `move East`.
        courseA_harvester_loops5a_c: Use this path to move one way, and then the other.
      courseA_harvester_loops5b_authored_hint:
        courseA_harvester_loops5b_a: Press `Run` and see what happens!
        courseA_harvester_loops5b_b: Are your loops repeating the right number of
          times?
        courseA_harvester_loops5b_c: Move one way, then the other with this path.
      courseA_harvester_loops6_authored_hint:
        courseA_harvester_loops6_a: Se ti blocchi, prova a scrivere i passaggi su
          carta e cerca gli schemi che si ripetono.
        courseA_harvester_loops6_b: This is the path you should take to pick all the
          corn.
      courseA_harvester_loops7_authored_hint:
        courseA_harvester_loops7_a: |-
          You will need two `repeat` <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="2-10">5</title>
          </block></xml>loops after each other!
        courseA_harvester_loops7_b: Use two loops to follow this path.
      courseA_harvester_loops8_authored_hint: {}
      courseA_harvester_loops9_authored_hint:
        courseA_harvester_loops9_a: Break this puzzle up into three different parts.
          One part to the first corner, one part to the second corner, and one part
          to the end.
        courseA_harvester_loops9_b: Don't be afraid to run your code after every part
          to see what happens!
        courseA_harvester_loops9_c: Follow this path to pick all the corn.
      courseA_harvester_seq1_authored_hint:
        courseA_harvester_seq1_a: |-
          Use this block to pick the corn when the harvester finds it!

          <xml>
          <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          The harvester will need to move East three times to get to the corn. Use this block:
          <xml>
          <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq10_authored_hint:
        courseA_harvester_seq10_a: Are you stuck? Try writing down the steps on a
          piece of paper first.
        courseA_harvester_seq10_b: You need to `Move East`, then `Move North`. Do
          this two times. Don't forget to get all the corn too!
        courseA_harvester_seq10_c: Try using this path to pick all the corn.
      courseA_harvester_seq11_authored_hint: {}
      courseA_harvester_seq12_authored_hint: {}
      courseA_harvester_seq13_authored_hint:
        courseA_bee_seq1_a: |-
          Use this block to pick corn once the harvester gets to it.

          <xml>
          <block type="harvester_corn"/>
          </xml>
      courseA_harvester_seq2_authored_hint:
        courseA_harvester_seq2_a: Don't forget to use <xml><block type="harvester_corn"/></xml>
          to pick the corn!
        courseA_harvester_seq2_b: Per trovare la soluzione, prova a scrivere i passi
          sulla carta!
      courseA_harvester_seq3_authored_hint:
        courseA_harvester_seq3_a: |-
          Did you remember to use this block?
          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: Say the steps out loud and see if it helps you figure
          out the answer.
      courseA_harvester_seq4_authored_hint:
        courseA_harvester_seq4_a: How many spaces are between the Harvester and the
          corn? How many blocks are already in your workspace?
        courseA_harvester_seq4_b: |-
          You will need five `Move East` blocks and one `Pick Corn` block:
          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_seq5_authored_hint:
        courseA_harvester_seq5_a: Which block moves the harvester the wrong way?
        courseA_harvester_seq5_b: You need to remove one block.
        courseA_harvester_seq5_c: |-
          Throw this block in the trash!
          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq6_authored_hint:
        courseA_harvester_seq6_a: If you're stuck, try saying the steps out loud.
          It could help you figure out the right path.
      courseA_harvester_seq7_authored_hint:
        courseA_harvester_seq7_a: Try solving the puzzle in 2 parts, one part before
          the corner and one part after the corner.
        courseA_harvester_seq7_b: Having trouble? This is the path the harvester should
          take.
      courseA_harvester_seq8_authored_hint: {}
      courseA_harvester_seq9_authored_hint:
        courseA_harvester_seq9_a: Run the code a few times to see what happens. Where
          does the harvester stop?
        courseA_harvester_seq9_b: Don't forget to pick all the corn! You will need
          **3** pick corn blocks.
        courseA_harvester_seq9_c: You should take this path to pick all the corn.
      courseA_maze_ramp2_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp2a_2018_authored_hint:
        '1': Snap both `East` blocks to the bottom of the `when run` block.
      courseA_maze_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseA_maze_ramp3a_2018_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3b_2018_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: Puoi girare a destra o a sinistra dal punto di
          vista dell'uccellino. Se l'uccellino è rivolto verso destra, girare a destra
          significa dirigersi verso il basso.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          il maiale, vai ancora una volta avanti.
      courseA_maze_ramp4a_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseA_maze_ramp5a_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_seq1_authored_hint:
        courseA_maze_seq1_a: "Se hai difficoltà a far muovere l'uccellino, controlla
          che i blocchi siano agganciati tra loro e al blocco iniziale \n<xml><block
          type=\"when_run\"/></xml>"
        courseA_maze_seq1_b: |-
          L'uccellino deve spostarsi tre volte verso Ovest per poter raggiungere il maiale. Usa questo blocco:
          <xml><block type="maze_moveWest"/></xml>
      courseA_maze_seq10_authored_hint:
        courseA_maze_seq10_a: Se hai problemi, prova prima a scrivere i passaggi su
          un foglio di carta.
        courseA_maze_seq10_b: Avrai bisogno di muoverti in 3 direzioni diverse per
          risolvere l'esercizio.
      courseA_maze_seq10_2018_authored_hint:
        courseA_maze_seq10_a: Se hai problemi, prova prima a scrivere i passaggi su
          un foglio di carta.
        courseA_maze_seq10_b: Avrai bisogno di muoverti in 3 direzioni diverse per
          risolvere l'esercizio.
      courseA_maze_seq11_authored_hint: {}
      courseA_maze_seq11_2018_authored_hint: {}
      courseA_maze_seq12_authored_hint: {}
      courseA_maze_seq12_2018_authored_hint: {}
      courseA_maze_seq12_predict2_authored_hint: {}
      courseA_maze_seq13_authored_hint:
        courseA_maze_seq13_a: Se non ti è chiaro quale percorso seguire, usa il dito
          per tracciare il tuo percorso dall'uccellino fino al maialino.
        courseA_maze_seq13_b: Non aver paura di commettere errori! Prova ad aggiungere
          blocchi e fai eseguire il programma per vedere cosa succede.
        courseA_maze_seq13_c: "Questi blocchi\n<xml><block type=\"maze_moveNorth\"/></xml>
          \n<xml><block type=\"maze_moveEast\"/></xml> \nti aiuteranno ad avvicinarti
          al maialino."
      courseA_maze_seq13_2018_authored_hint:
        courseA_maze_seq13_a: Se non ti è chiaro quale percorso seguire, usa il dito
          per tracciare il tuo percorso dall'uccellino fino al maialino.
        courseA_maze_seq13_b: Non aver paura di commettere errori! Prova ad aggiungere
          blocchi e fai eseguire il programma per vedere cosa succede.
        courseA_maze_seq13_c: "Questi blocchi\n<xml><block type=\"maze_moveNorth\"/></xml>
          \n<xml><block type=\"maze_moveEast\"/></xml> \nti aiuteranno ad avvicinarti
          al maialino."
      courseA_maze_seq1_2018_authored_hint:
        courseA_maze_seq1_a: "Se hai difficoltà a far muovere l'uccellino, controlla
          che i blocchi siano agganciati tra loro e al blocco iniziale \n<xml><block
          type=\"when_run\"/></xml>"
        courseA_maze_seq1_b: |-
          L'uccellino deve spostarsi tre volte verso Ovest per poter raggiungere il maiale. Usa questo blocco:
          <xml><block type="maze_moveWest"/></xml>
      courseA_maze_seq2_authored_hint:
        courseA_maze_seq2_a: In questo programma manca 1 blocco. Riesci a capire quale?
        courseA_maze_seq2_b: Prova ad eseguire il programma per capire dove va a finire
          l'uccellino. Come devi proseguire?
      courseA_maze_seq2_2018_authored_hint:
        courseA_maze_seq2_a: In questo programma manca 1 blocco. Riesci a capire quale?
        courseA_maze_seq2_b: Prova ad eseguire il programma per capire dove va a finire
          l'uccellino. Come devi proseguire?
      courseA_maze_seq2_predict1_authored_hint: {}
      courseA_maze_seq3_authored_hint:
        courseA_maze_seq3_a: 1 dei blocchi sposta l'uccellino nella direzione sbagliata.
          Riesci a capire qual è e a sostituirlo con il blocco corretto?
        courseA_maze_seq3_b: Prova ad usare il pulsante "Fai un passo" per capire
          dov'è l'errore. È al 1^ passo? Al 2^?
        courseA_maze_seq3_c: Questo blocco <xml><block type="maze_moveNorth"/></xml>
          non sembra muovere l'uccellino nella direzione corretta. Puoi sostituirlo
          con un altro blocco?
      courseA_maze_seq3_2018_authored_hint:
        courseA_maze_seq3_a: 1 dei blocchi sposta l'uccellino nella direzione sbagliata.
          Riesci a capire qual è e a sostituirlo con il blocco corretto?
        courseA_maze_seq3_b: Prova ad usare il pulsante "Fai un passo" per capire
          dov'è l'errore. È al 1^ passo? Al 2^?
        courseA_maze_seq3_c: Questo blocco <xml><block type="maze_moveNorth"/></xml>
          non sembra muovere l'uccellino nella direzione corretta. Puoi sostituirlo
          con un altro blocco?
      courseA_maze_seq4_authored_hint:
        courseA_maze_seq4_a: Se sei in difficoltà, cerca di capire quale deve essere
          il percorso corretto da seguire ed elimina il blocco che non permette di
          seguirlo.
        courseA_maze_seq4_b: Prova ad eseguire il codice così com'è. Qualcosa non
          funziona? Quale blocco puoi eliminare? Come puoi risolvere il problema?
      courseA_maze_seq4_2018_authored_hint:
        courseA_maze_seq4_a: Se sei in difficoltà, cerca di capire quale deve essere
          il percorso corretto da seguire ed elimina il blocco che non permette di
          seguirlo.
        courseA_maze_seq4_b: Prova ad eseguire il codice così com'è. Qualcosa non
          funziona? Quale blocco puoi eliminare? Come puoi risolvere il problema?
      courseA_maze_seq4a_authored_hint:
        courseA_maze_seq4_a: If you are having trouble, try using your finger to figure
          out the correct path by pointing it out on the map. What moves did your
          finger make?
      courseA_maze_seq5_authored_hint:
        courseA_maze_seq5_a: Per trovare la soluzione, prova a scrivere i passi sulla
          carta!
        courseA_maze_seq5_b: Avrai bisogno di 2 blocchi, che puntano in 2 direzioni
          diverse.
      courseA_maze_seq5_2018_authored_hint:
        '1': Per trovare la soluzione, prova a scrivere i passi sulla carta!
        '2': |-
          You will need to use this block:

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5a_2018_authored_hint:
        '1': Say the steps out loud and see if it helps you figure out the answer.
      courseA_maze_seq6_authored_hint:
        courseA_maze_seq6_a: Il tuo programma finale dovrebbe avere 3 blocchi di movimento.
        courseA_maze_seq6_b: Se ti blocchi, prova a risolvere l'esercizio in due parti,
          una parte prima della curva e l'altra dopo la curva.
      courseA_maze_seq6_2018_authored_hint:
        courseA_maze_seq6_a: Il tuo programma finale dovrebbe avere 3 blocchi di movimento.
        courseA_maze_seq6_b: Se ti blocchi, prova a risolvere l'esercizio in due parti,
          una parte prima della curva e l'altra dopo la curva.
      courseA_maze_seq7_authored_hint:
        courseA_maze_seq7_a: Hai bisogno di aggiungere 1 blocco per far arrivare l'uccellino
          fino al maialino.
        courseA_maze_seq7_b: Se non riesci a capire cosa devi fare, prova a disegnare
          il labirinto sulla carta e usa le dita per capire il percorso da seguire
          e quindi scoprire le mosse da fare.
      courseA_maze_seq7_2018_authored_hint:
        courseA_maze_seq7_a: Hai bisogno di aggiungere 1 blocco per far arrivare l'uccellino
          fino al maialino.
        courseA_maze_seq7_b: Se non riesci a capire cosa devi fare, prova a disegnare
          il labirinto sulla carta e usa le dita per capire il percorso da seguire
          e quindi scoprire le mosse da fare.
      courseA_maze_seq8_authored_hint:
        courseA_maze_seq8_a: Se sei bloccato, prova a disegnare il labirinto sulla
          carta per capire come dovrebe muoversi l'uccellino.
      courseA_maze_seq8_2018_authored_hint:
        courseA_maze_seq8_a: Se sei bloccato, prova a disegnare il labirinto sulla
          carta per capire come dovrebe muoversi l'uccellino.
      courseA_maze_seq9_authored_hint:
        courseA_maze_seq9_a: Bloccato? Prova a tracciare con le dita il percorso che
          deve seguire l'uccellino.
        courseA_maze_seq9_b: Se non sai cosa fare, prova a premere "Ripristina" e
          fai partire il programma per vedere cosa non funziona.
        courseA_maze_seq9_c: Dovrai muoverti in 3 direzioni per risolvere questo esercizio.
      courseA_maze_seq9_2018_authored_hint:
        courseA_maze_seq9_a: Bloccato? Prova a tracciare con le dita il percorso che
          deve seguire l'uccellino.
        courseA_maze_seq9_b: Se non sai cosa fare, prova a premere "Ripristina" e
          fai partire il programma per vedere cosa non funziona.
        courseA_maze_seq9_c: Dovrai muoverti in 3 direzioni per risolvere questo esercizio.
      courseA_maze_seq_challenge1_authored_hint:
        courseA_maze_seq_challenge1_a: Some paths will lead to TNT, if you move too
          far.
      courseA_maze_seq_challenge1_2018_authored_hint:
        courseA_maze_seq_challenge1_a: There are two solutions to this puzzle.
      courseA_maze_seq_challenge2_authored_hint:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember
          not to count the space where you start!
      courseA_maze_seq_challenge2_2018_authored_hint:
        courseA_maze_seq_challenge2_a: Try counting the spaces with your finger. Remember
          not to count the space where you start!
      courseA_playLab_events2_authored_hint:
        courseA_playLab_events2_a: Cerca un blocco che faccia dire qualcosa al cane.
        courseA_playLab_events2_b: "Questo è il codice che ti serve per completare
          questo esercizio:\n\n<xml> \n<block type=\"when_run\" movable=\"false\"
          deletable=\"false\"> \n<next> <block type=\"studio_saySpriteChoices\"> \n<title
          name=\"SPRITE\">1</title> \n<title name=\"VALUE\">Hi there.</title> \n</block>
          \n</next> \n</block>\n </xml>\n"
      courseA_playLab_events2_2018_authored_hint:
        courseA_playLab_events2_a: Cerca un blocco che faccia dire qualcosa al cane.
        courseA_playLab_events2_b: "Questo è il codice che ti serve per completare
          questo esercizio:\n\n<xml> \n<block type=\"when_run\" movable=\"false\"
          deletable=\"false\"> \n<next> <block type=\"studio_saySpriteChoices\"> \n<title
          name=\"SPRITE\">1</title> \n<title name=\"VALUE\">Hi there.</title> \n</block>
          \n</next> \n</block>\n </xml>\n"
      courseA_playLab_events3_authored_hint:
        courseA_playLab_events3_a: |-
          Trascina questo blocco
          <xml><block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block></xml>
          e aggancialo sotto al blocco
          <xml><block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block></xml>
        courseA_playLab_events3_b: Dopo che hai scritto il programma, ricorda di utilizzare
          la freccia a sinistra per muovere il cane fino alla bandierina. Quando la
          bandierina diventa verde, hai finito! (Puoi cliccare sulle frecce che vedi
          sullo schermo, oppure usare le frecce della tastiera.)
      courseA_playLab_events3_2018_authored_hint:
        courseA_playLab_events3_a: |-
          Trascina questo blocco
          <xml><block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block></xml>
          e aggancialo sotto al blocco
          <xml><block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block></xml>
        courseA_playLab_events3_b: Dopo che hai scritto il programma, ricorda di utilizzare
          la freccia a sinistra per muovere il cane fino alla bandierina. Quando la
          bandierina diventa verde, hai finito! (Puoi cliccare sulle frecce che vedi
          sullo schermo, oppure usare le frecce della tastiera.)
      courseA_playLab_events4_authored_hint:
        courseA_playLab_events4_a: |-
          Ecco il blocco evento che dovresti usare per far muovere il cane a destra:
          <xml><block type="studio_whenArrow"><title name="VALUE">right</title></block></xml>
        courseA_playLab_events4_b: |-
          Questo è il codice che ti serve per completare questo esercizio:
          <xml><block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></next></block></xml>
      courseA_playLab_events4_2018_authored_hint:
        courseA_playLab_events4_a: |-
          Ecco il blocco evento che dovresti usare per far muovere il cane a destra:
          <xml><block type="studio_whenArrow"><title name="VALUE">right</title></block></xml>
        courseA_playLab_events4_b: |-
          Questo è il codice che ti serve per completare questo esercizio:
          <xml><block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></next></block></xml>
      courseA_playLab_events5_authored_hint:
        courseA_playLab_events5_a: "Ecco i blocchi degli eventi che dovresti usare
          per far muovere il cane in su e in giù:\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\ne \n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Sapevi che puoi cambiare il verso della freccia nel blocco evento, cliccando sul disegno e scegliendone uno nuovo?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events5_2018_authored_hint:
        courseA_playLab_events5_a: "Ecco i blocchi degli eventi che dovresti usare
          per far muovere il cane in su e in giù:\n<xml><block type=\"studio_whenArrow\">\n
          \   <title name=\"VALUE\">up</title>\n  </block></xml>\ne \n<xml><block
          type=\"studio_whenArrow\">\n    <title name=\"VALUE\">down</title>\n  </block></xml>"
        courseA_playLab_events5_b: |-
          Sapevi che puoi cambiare il verso della freccia nel blocco evento, cliccando sul disegno e scegliendone uno nuovo?

          ![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)
      courseA_playLab_events6_authored_hint:
        courseA_playLab_events6_a: |-
          Ecco il blocco evento che dovresti usare per far fare qualcosa quando Jorge viene cliccato:
          <xml><block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block></xml>
        courseA_playLab_events6_b: |-
          Ecco il blocco che dovresti usare per cambiare lo sfondo:
          <xml><block type="studio_setBackground">
          <title name="VALUE">random</title>
          </block></xml>
        courseA_playLab_events6_c: |-
          Ecco il blocco che dovresti usare per riprodurre un suono casuale:
          <xml><block type="studio_playSound">
          <title name="SOUND">random</title>
          </block></xml>
      courseA_playLab_events6_2018_authored_hint:
        courseA_playLab_events6_a: |-
          Ecco il blocco evento che dovresti usare per far fare qualcosa quando Jorge viene cliccato:
          <xml><block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block></xml>
        courseA_playLab_events6_b: |-
          Ecco il blocco che dovresti usare per cambiare lo sfondo:
          <xml><block type="studio_setBackground">
          <title name="VALUE">random</title>
          </block></xml>
        courseA_playLab_events6_c: |-
          Ecco il blocco che dovresti usare per riprodurre un suono casuale:
          <xml><block type="studio_playSound">
          <title name="SOUND">random</title>
          </block></xml>
      courseA_playLab_events7_authored_hint:
        courseA_playLab_events7_a: |-
          Usa questo blocco per definire cosa deve succedere quando i personaggi si scontrano.

          <xml><block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">0</title>
          </block></xml>
      courseA_playLab_events7_2018_authored_hint:
        courseA_playLab_events7_a: |-
          Usa questo blocco per definire cosa deve succedere quando i personaggi si scontrano.

          <xml><block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">0</title>
          </block></xml>
      courseA_playlab_challengeTemplate_authored_hint: {}
      courseA_playlab_events_challenge1_authored_hint:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you
          click Robin!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click
          Waddles!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when
          you click Boo!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click
          the monster!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show
          when you click on Spiff!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge1_2018_authored_hint:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you
          click Robin!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click
          Waddles!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when
          you click Boo!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click
          the monster!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Finally, make Wendel the Wizard show
          when you click Spiff!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_playlab_events_challenge1a_authored_hint:
        courseA_playlab_events_challenge1_a: "You can make a bird sing.\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "You can make a robot beep.\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n\n
          \ </block></xml>"
        courseA_playlab_events_challenge1_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challenge2_authored_hint:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n\n
          \ </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challenge2_2018_authored_hint:
        courseA_playlab_events_challenge2_a: "You can make a bird sing.\n<xml> \n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">2</title>\n
          \   <next>\n\n          <block type=\"studio_saySprite\">\n            <title
          name=\"SPRITE\">2</title>\n            <title name=\"TEXT\">Tweet</title>\n
          \         </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge2_b: "You can make a robot beep.\n<xml>\n
          \ <block type=\"studio_whenSpriteClicked\">\n    <title name=\"SPRITE\">6</title>\n
          \   <next>\n      \n          <block type=\"studio_playSound\">\n            <title
          name=\"SOUND\">winpoint</title>\n          </block>\n        </next>\n\n
          \ </block></xml>"
        courseA_playlab_events_challenge2_c: |-
          You can make an angry monster growl.

          <xml>  <block type="studio_whenSpriteClicked">
          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challengeClone_authored_hint:
        courseA_playlab_events_challenge1_a: "Make Waddles the Penguin show when you
          click Robin!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">2</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">3</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_b: "Make Boo the Ghost show when you click
          Waddles!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">3</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">4</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_c: "Make Jayden the Fuzzy Monster show when
          you click Boo!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">4</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">5</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_d: "Make Spiff the Robot show when you click
          the monster!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n    <title
          name=\"SPRITE\">5</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visible\"</title>\n        <title name=\"SPRITE\">6</title>\n
          \     </block>\n    </next>\n  </block></xml>"
        courseA_playlab_events_challenge1_e: "Infine, fai apparire il Mago Wendel
          quando clicchi su Spiff!\n<xml> \n\n  <block type=\"studio_whenSpriteClicked\">\n
          \   <title name=\"SPRITE\">6</title>\n    <next>\n      <block type=\"studio_setSprite\">\n
          \       <title name=\"VALUE\">\"visibili\"</title>\n        <title name=\"SPRITE\">7</title>\n
          \     </block>\n    </next>\n  </block></xml>"
      courseA_toMakeLoopsVideo_Collector_authored_hint: {}
      courseB_Scrat_ramp1_2018_authored_hint:
        '1': If Scrat isn't doing what you want, make sure both of the blocks have
          been fully clicked together, then click "Run" again.
        '2': Don't be afraid to make a mistake! Try something, and if it doesn't work,
          try something else!
      courseB_Scrat_ramp2_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3a_2018_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3b_2018_authored_hint:
        '1': |
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp4a_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp5a_2018_authored_hint:
        '1': |-
          Your code should look like this:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_artist_loops10_authored_hint: {}
      courseB_artist_loops10_2018_authored_hint: {}
      courseB_artist_loops2_authored_hint:
        courseB_artist_loops2_a: Se vuoi che il ciclo si ripeta più di 4 volte, devi
          cambiare il numero in alto a destra nel blocco rosa del ciclo.
        courseB_artist_loops2_b: Prova prima ad eseguire il codice per vedere dove
          va a finire l'artista.
      courseB_artist_loops2_2018_authored_hint:
        courseB_artist_loops2_a: Se vuoi che il ciclo si ripeta più di 4 volte, devi
          cambiare il numero in alto a destra nel blocco rosa del ciclo.
        courseB_artist_loops2_b: Prova prima ad eseguire il codice per vedere dove
          va a finire l'artista.
      courseB_artist_loops3_authored_hint:
        courseB_artist_loops3_a: Ricordati che devi usare il ciclo `ripeti` per riuscire
          a risolvere l'esercizio!
        courseB_artist_loops3_b: L'artista dovrà muoversi verso Sud per disegnare
          questa linea.
      courseB_artist_loops3_2018_authored_hint:
        courseB_artist_loops3_a: Ricordati che devi usare il ciclo `ripeti` per riuscire
          a risolvere l'esercizio!
        courseB_artist_loops3_b: L'artista dovrà muoversi verso Sud per disegnare
          questa linea.
      courseB_artist_loops4_authored_hint:
        courseB_artist_loops4_a: Il blocco `salta` ti fa andare avanti senza disegnare.
        courseB_artist_loops4_b: Avrai bisogno di aggiungere un blocco nel ciclo `ripeti`
          per risolvere questo esercizio.
        courseB_artist_loops4_c: Non dimenticare di cambiare il numero di ripetizioni
          nel blocco del ciclo.
      courseB_artist_loops4_2018_authored_hint:
        courseB_artist_loops4_a: Il blocco `salta` ti fa andare avanti senza disegnare.
        courseB_artist_loops4_b: Avrai bisogno di aggiungere un blocco nel ciclo `ripeti`
          per risolvere questo esercizio.
        courseB_artist_loops4_c: Non dimenticare di cambiare il numero di ripetizioni
          nel blocco del ciclo.
      courseB_artist_loops5_authored_hint:
        courseB_artist_loops5_a: Trascina nell'area di lavoro un blocco `ripeti` e
          mettici dentro i blocchi grigi che trovi già pronti. Quante volte dovrà
          essere ripetuto questo ciclo?
      courseB_artist_loops5_2018_authored_hint:
        courseB_artist_loops5_a: Trascina nell'area di lavoro un blocco `ripeti` e
          mettici dentro i blocchi grigi che trovi già pronti. Quante volte dovrà
          essere ripetuto questo ciclo?
      courseB_artist_loops6_authored_hint:
        courseB_artist_loops6_b: Prova a scrivere le mosse su un pezzo di carta e
          cerca una sequenza che si ripete.
      courseB_artist_loops6_2018_authored_hint:
        courseB_artist_loops6_b: Prova a scrivere le mosse su un pezzo di carta e
          cerca una sequenza che si ripete.
      courseB_artist_loops7_authored_hint:
        courseB_artist_loops7_a: Per questa sfida servono **4** cicli, proprio uno
          dietro l'altro!
        courseB_artist_loops7_b: |-
          Nota che ogni ciclo crea una scala che va in una direzione diversa.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: "I cicli dovrebbero fare questo:\n- Ciclo 1\n  -
          Destra\n  - Giù\n  \n- Ciclo 2\n  - Destra\n  - Su\n\n- Ciclo 3\n  - Sinistra\n
          \ - Su\n\n- Ciclo 4\n  - Sinistra\n  - Giù"
      courseB_artist_loops7_2018_authored_hint:
        courseB_artist_loops7_a: Per questa sfida servono **4** cicli, proprio uno
          dietro l'altro!
        courseB_artist_loops7_b: |-
          Nota che ogni ciclo crea una scala che va in una direzione diversa.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        courseB_artist_loops7_c: "I cicli dovrebbero fare questo:\n- Ciclo 1\n  -
          Destra\n  - Giù\n  \n- Ciclo 2\n  - Destra\n  - Su\n\n- Ciclo 3\n  - Sinistra\n
          \ - Su\n\n- Ciclo 4\n  - Sinistra\n  - Giù"
      courseB_artist_loops8_authored_hint:
        courseB_artist_loops8_a: Quante volte devi ripetere la sequenza per completare
          la scala?
        courseB_artist_loops8_b: Prova ad eseguire il codice che ti è stato dato per
          vedere cosa fa.
      courseB_artist_loops8_2018_authored_hint:
        courseB_artist_loops8_a: Quante volte devi ripetere la sequenza per completare
          la scala?
        courseB_artist_loops8_b: Prova ad eseguire il codice che ti è stato dato per
          vedere cosa fa.
      courseB_artist_loops8_predict1_authored_hint: {}
      courseB_artist_loops9_authored_hint:
        courseB_artist_loops9_a: Ricorda che i blocchi `salta` servono per muoversi
          senza disegnare.
        courseB_artist_loops9_b: Dovresti usare il blocco `O <--` per risolvere questo
          esercizio.
        courseB_artist_loops9_c: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
      courseB_artist_loops9_2018_authored_hint:
        courseB_artist_loops9_a: Ricorda che i blocchi `salta` servono per muoversi
          senza disegnare.
        courseB_artist_loops9_b: Dovresti usare il blocco `O <--` per risolvere questo
          esercizio.
        courseB_artist_loops9_c: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
      courseB_artist_loops_challenge1_authored_hint:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_left"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over
          some of the same lines twice. '
      courseB_artist_loops_challenge1_2018_authored_hint:
        courseB_artist_loops_challenge1_a: 'Blocks like this: <xml>  <block type="simple_move_up_right"/></xml>
          will let your artist move at a slant!'
        courseB_artist_loops_challenge1_b: When you finish one of the dice, `jump`
          to the next!
        courseB_artist_loops_challenge1_c: 'You will need to `move` or `jump` over
          some of the same lines twice. '
      courseB_artist_loops_challenge2_authored_hint:
        courseB_artist_loops_challenge2_a: The code to draw an X is already given
          to you. All you need to do is repeat the X and jump to the next spot.
        courseB_artist_loops_challenge2_b: You can use `jump` blocks to move to other
          spaces.
      courseB_artist_loops_challenge2_2018_authored_hint:
        courseB_artist_loops_challenge2_a: The code to draw an X is already given
          to you. All you need to do is repeat the X and `jump` to the next spot.
        courseB_artist_loops_challenge2_b: You can use `jump` blocks to move to other
          spaces without drawing.
      courseB_collector_loops1_authored_hint:
        courseB_collector_loops1_a: Il blocco <xml><block type="collector_collect_simplified"/></xml>
          consente di raccogliere i diamanti quando ti ci trovi sopra.
      courseB_collector_loops10_authored_hint:
        courseB_collector_loops10_a: Se non riesci a capire dove mettere il ciclo
          `ripeti`, scrivi il codice con i singoli blocchi azzurri e poi cerca lo
          schema che si ripete.
        courseB_collector_loops10_b: Prova a scrivere le mosse su un pezzo di carta
          e cerca una sequenza che si ripete.
      courseB_collector_loops10_2018_authored_hint:
        courseB_collector_loops10_a: Se non riesci a capire dove mettere il ciclo
          `ripeti`, scrivi il codice con i singoli blocchi azzurri e poi cerca lo
          schema che si ripete.
        courseB_collector_loops10_b: Prova a scrivere le mosse su un pezzo di carta
          e cerca una sequenza che si ripete.
      courseB_collector_loops1_2018_authored_hint:
        courseB_collector_loops1_a: Il blocco <xml><block type="collector_collect_simplified"/></xml>
          consente di raccogliere i diamanti quando ti ci trovi sopra.
      courseB_collector_loops2_authored_hint:
        courseB_collector_loops2_a: Devi muoverti prima di raccogliere qualsiasi diamante.
        courseB_collector_loops2_b: Quando hai raggiunto un diamante, usa il blocco
          <xml><block type="collector_collect"/></xml> per raccoglierlo.
      courseB_collector_loops2_2018_authored_hint:
        courseB_collector_loops2_a: Devi muoverti prima di raccogliere qualsiasi diamante.
        courseB_collector_loops2_b: Quando hai raggiunto un diamante, usa il blocco
          <xml><block type="collector_collect"/></xml> per raccoglierlo.
      courseB_collector_loops3_authored_hint:
        courseB_collector_prog3_a: Prova ad usare un blocco <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> per raccogliere tutti
          i diamanti.
        courseB_collector_prog3_b: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo `ripeti`.
      courseB_collector_loops3_2018_authored_hint:
        courseB_collector_prog3_a: Prova ad usare un blocco <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml> per raccogliere tutti
          i diamanti.
        courseB_collector_prog3_b: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo `ripeti`.
      courseB_collector_loops3_predict1_authored_hint:
        courseB_collector_prog3_a: Try using a `repeat` block to collect your gold.
      courseB_collector_loops4_authored_hint:
        courseB_collector_loops4_a: Prova ad usare il pulsante "Fai un passo" per
          capire dove c'è qualcosa di sbagliato.
        courseB_collector_loops4_b: Per modificare di quante caselle deve spostarsi
          Laurel, cambia il numero di volte che il ciclo viene eseguito.
        courseB_collector_loops4_c: Alla fine del ciclo `ripeti` Laurel deve muoversi
          verso il basso e finire di raccogliere i diamanti!
      courseB_collector_loops4_2018_authored_hint:
        courseB_collector_loops4_a: Prova ad usare il pulsante "Fai un passo" per
          capire dove c'è qualcosa di sbagliato.
        courseB_collector_loops4_b: Per modificare di quante caselle deve spostarsi
          Laurel, cambia il numero di volte che il ciclo viene eseguito.
        courseB_collector_loops4_c: Alla fine del ciclo `ripeti` Laurel deve muoversi
          verso il basso e finire di raccogliere i diamanti!
      courseB_collector_loops5_authored_hint:
        courseB_collector_loops5_a: Devi usare più di un ciclo per risolvere bene
          l'esercizio.
        courseB_collector_loops5_b: Per vedere cosa fa questo programma, prova ad
          eseguirlo un paio di volte.
      courseB_collector_loops5_2018_authored_hint:
        courseB_collector_loops5_a: Devi usare più di un ciclo per risolvere bene
          l'esercizio.
        courseB_collector_loops5_b: Per vedere cosa fa questo programma, prova ad
          eseguirlo un paio di volte.
      courseB_collector_loops6_authored_hint:
        courseB_collector_loops6_a: Non riesci a capire in che punto il programma
          inizia a sbagliare? Usa il pulsante "Fai un passo" per eseguire il programma
          un'istruzione alla volta.
        courseB_collector_loops6_b: Puoi modificare il numero di volte che il ciclo
          viene ripetuto cliccando sul numero "3" e scegliendo un altro numero.
        courseB_collector_loops6_c: Dovrai usare 3 cicli `ripeti` per risolvere l'esercizio.
        courseB_collector_loops6_d: Se sei confuso, prova a suddividere questo percorso
          in 3 parti.
      courseB_collector_loops6_2018_authored_hint:
        courseB_collector_loops6_a: Non riesci a capire in che punto il programma
          inizia a sbagliare? Usa il pulsante "Fai un passo" per eseguire il programma
          un'istruzione alla volta.
        courseB_collector_loops6_b: Puoi modificare il numero di volte che il ciclo
          viene ripetuto cliccando sul numero "3" e scegliendo un altro numero.
        courseB_collector_loops6_c: Dovrai usare 3 cicli `ripeti` per risolvere l'esercizio.
        courseB_collector_loops6_d: Se sei confuso, prova a suddividere questo percorso
          in 3 parti.
      courseB_collector_loops7_authored_hint:
        courseB_collector_loops7_a: Se hai problemi con questo esercizio, prova a
          disegnarlo su un pezzo di carta per aiutarti a capirlo.
        courseB_collector_loops7_b: Hai bisogno di 3 cicli `ripeti` per risolvere
          questo esercizio e non dimenticare l'ultimo diamante isolato!
      courseB_collector_loops7_2018_authored_hint:
        courseB_collector_loops7_a: Se hai problemi con questo esercizio, prova a
          disegnarlo su un pezzo di carta per aiutarti a capirlo.
        courseB_collector_loops7_b: Hai bisogno di 3 cicli `ripeti` per risolvere
          questo esercizio e non dimenticare l'ultimo diamante isolato!
      courseB_collector_loops8_authored_hint:
        courseB_collector_loops8_challenge_a: Se non riesci a capire dove mettere
          il ciclo `ripeti`, scrivi il codice con i singoli blocchi azzurri e poi
          cerca lo schema che si ripete.
      courseB_collector_loops8_2018_authored_hint:
        courseB_collector_loops8_challenge_a: Se non riesci a capire dove mettere
          il ciclo `ripeti`, scrivi il codice con i singoli blocchi azzurri e poi
          cerca lo schema che si ripete.
      courseB_collector_loops9_authored_hint:
        courseB_collector_loops9_a: 'Ti sembra tropo difficile? Suddividi il problema
          in 3 parti più piccole: così sarà più semplice.'
        courseB_collector_loops9_b: Per risolvere l'esercizio, hai bisogni di 3 cicli
          `ripeti`, uno dopo l'altro.
      courseB_collector_loops9_2018_authored_hint:
        courseB_collector_loops9_a: 'Ti sembra tropo difficile? Suddividi il problema
          in 3 parti più piccole: così sarà più semplice.'
        courseB_collector_loops9_b: Per risolvere l'esercizio, hai bisogni di 3 cicli
          `ripeti`, uno dopo l'altro.
      courseB_collector_loops_challenge1_authored_hint:
        courseB_collector_loops_challenge1_b: |
          Start by looping the following commands:

          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n<xml>\n
          \ <block type=\"maze_moveEast\"/><next>\n  <block type=\"maze_moveEast\"/></next>next>\n
          \ </xml>\nYou can do this with only 14 blocks. Click for one more hint to
          see a solution. \n"
        courseB_collector_loops_challenge1_d: |-
          Try this!
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge1_2018_authored_hint:
        courseB_collector_loops_challenge1_b: |
          Start by looping the following commands:

          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: "Move East twice between each path.\n<xml>\n
          \ <block type=\"maze_moveEast\"><next>\n  <block type=\"maze_moveEast\"></block></next></block>\n
          \ </xml>\nYou can do this with only 14 blocks. Click for one more hint to
          see a solution. \n"
        courseB_collector_loops_challenge1_d: |-
          Try this!
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge2_authored_hint:
        courseB_collector_loops_challenge2_a: Try changing the numbers in each loop
          if something goes wrong.
        courseB_collector_loops_challenge2_b: |-
          If you repeat this pattern, Laurel won't hit the wall at the bottom of the cave!

          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseB_collector_loops_challenge2_c: Don't forget to use a loop to collect
          the final pile of treasure!
        courseB_collector_loops_challenge2_d: |-
          Try this solution:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">4</title>
          <statement name="DO">
          <block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">6</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge2_2018_authored_hint:
        courseB_collector_loops_challenge2_a: If something goes wrong, don't be afraid
          to start over. Don't give up!
        courseB_collector_loops_challenge2_b: |-
          If you repeat this pattern, Laurel won't hit the wall at the bottom of the cave!

          <xml><block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseB_collector_loops_challenge2_c: Try using a `repeat` block to collect
          the final pile of treasure!
        courseB_collector_loops_challenge2_d: |-
          Try this solution:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">4</title>
          <statement name="DO">
          <block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">6</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge2a_authored_hint:
        courseB_collector_loops_challenge2a_a: If something goes wrong, try debugging
          it. Don't give up!
        courseB_collector_loops_challenge2a_b: Look at this option for getting through
          the maze. Do you see a pattern that you can repeat?
        courseB_collector_loops_challenge2a_c: To collect all of the treasure, you
          will either need to add two  <xml> <block type="collector_collect"/></xml>
          blocks inside your loop, or put the block inside of its own `repeat` block.
      courseB_collector_loops_challenge2a_2018_authored_hint:
        courseB_collector_loops_challenge2a_a: If something goes wrong, try debugging
          it. Don't give up!
        courseB_collector_loops_challenge2a_b: Look at this option for getting through
          the maze. Do you see a pattern that you can repeat?
        courseB_collector_loops_challenge2a_c: To collect all of the treasure, you
          will either need to add two  <xml> <block type="collector_collect"/></xml>
          blocks inside your loop, or put the block inside of its own `repeat` block.
      courseB_collector_loops_challenge`_authored_hint:
        courseA_collector_loops_challenge2_b: 'You only need to use one ![](https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34
          PM.png) block to solve this.

'
        courseA_collector_loops_challenge2_a: |-
          You can move back over the path a second time before moving south.

          ![](https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png)
      courseB_collector_prog3_authored_hint:
        courseB_collector_prog3_a: Try using a `repeat` block to collect your gold.
      courseB_iceage_loops1_authored_hint:
        courseB_iceage_loops1_a: Watch out for broken ice! Scrat will fall right through!
        courseB_iceage_loops1_b: |-
          You will have to use this block:
          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops10_authored_hint:
        courseB_iceage_loops10_a: Watch out for broken ice! Scrat will fall into the
          water!
        courseB_iceage_loops10_b: Try saying the steps out loud or writing them down
          on a piece of paper. Do you see any patterns?
        courseB_iceage_loops10_c: This is a long puzzle! Follow this path.
      courseB_iceage_loops2_authored_hint:
        courseB_iceage_loops2_a: Break this puzzle into two pieces, one before the
          corner, and one after the corner.
        courseB_iceage_loops2_b: If you get stuck, try saying the steps out loud.
        courseB_iceage_loops2_c: Follow this path to get Scrat to the acorn.
      courseB_iceage_loops3_authored_hint:
        courseB_iceage_loops3_a: |-
          Use this new block!
          <xml><block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco `ripeti ... volte` e inserisci al suo interno
          i blocchi che vuoi ripetere.
      courseB_iceage_loops4_authored_hint:
        courseB_iceage_loops4_a: Try writing down the steps Scrat would take to get
          to the acorn. Do you see a pattern?
        courseB_iceage_loops4_b: Don't be afraid to run your code and see what happens!
        courseB_iceage_loops4_c: This is the path Scrat should take.
      courseB_iceage_loops6_authored_hint:
        courseB_iceage_loops6_a: Your final code will have **three** movement blocks.
        courseB_iceage_loops6_b: You only need to add **one** more loop!
        courseB_iceage_loops6_c: Your final path should look like this.
      courseB_iceage_loops7_authored_hint:
        courseB_iceage_loops7_a: If you get stuck, try writing steps down on a piece
          of paper. Do you see a pattern?
        courseB_iceage_loops7_b: This is the path Scrat should take to get to the
          acorn.
      courseB_iceage_loops8_authored_hint:
        courseB_iceage_loops8_a: Are the movement blocks right? What else can you
          change?
        courseB_iceage_loops8_b: The first loop should repeat **3** times, the second
          should repeat **5** times, the third loop should repeat **4** times, and
          the last loop should repeat **4** times.
        courseB_iceage_loops8_c: Use loops to help Scrat follow this path.
      courseB_iceage_loops9_authored_hint:
        courseB_iceage_loops9_a: Having trouble? Try breaking this puzzle into smaller
          pieces. Don't be afraid to run your puzzle as you code!
        courseB_iceage_loops9_b: Your final code should have **4** loops.
        courseB_iceage_loops9_c: Scrat should follow this path to get the acorn.
      courseB_maze_seq1_authored_hint:
        courseB_maze_seq1_a: Attacca i blocchi al blocco <xml><block type="when_run"/></xml>
          per far muovere l'uccellino!
        courseB_maze_seq1_b: Trascina fuori tre di queste frecce <xml><block type="maze_moveSouth"/></xml>
          e attaccale al blocco <xml><block type="when_run"/></xml> per portare il
          tuo uccellino fino al maialino.
      courseB_maze_seq10_authored_hint:
        courseB_maze_seq10_a: Prima, prova a scrivere i passaggi su un foglio di carta.
        courseB_maze_seq10_b: Dovrai muoverti in due direzioni diverse per raggiungere
          il maialino.
      courseB_maze_seq10_2018_authored_hint: {}
      courseB_maze_seq10_predict1_authored_hint: {}
      courseB_maze_seq10_predict1_2018_authored_hint: {}
      courseB_maze_seq11_authored_hint:
        courseB_maze_seq11_a: Prima, prova a scrivere i passaggi su un foglio di carta.
        courseB_maze_seq11_b: 'Risolvi l''esercizio in due parti: una prima dell''angolo
          e l''altra dopo.'
      courseB_maze_seq11_2018_authored_hint: {}
      courseB_maze_seq1_2018_authored_hint:
        courseB_maze_seq1_a: Connetti i blocchi al blocco <xml><block type="when_run"/></xml>
          per far muovere Scart!
        courseB_maze_seq1_b: Trascina tre di queste frecce <xml><block type="maze_moveSouth"/></xml>
          e collegale al blocco <xml><block type="when_run"/></xml> per far arrivare
          Scrat fino alla ghianda.
      courseB_maze_seq1_predict1_authored_hint: {}
      courseB_maze_seq1_predict1_2018_authored_hint: {}
      courseB_maze_seq2_authored_hint:
        courseB_maze_seq2_a: In questo programma manca un blocco. Riesci a capire
          quale?
        courseB_maze_seq2_b: Prova ad eseguire il codice che trovi già pronto per
          capire cosa deve fare dopo l'uccellino.
      courseB_maze_seq2_2018_authored_hint:
        courseB_maze_seq2_a: In questo programma manca un blocco. Riesci a capire
          quale?
        courseB_maze_seq2_b: Prova ad eseguire il codice preimpostato per vedere cosa
          deve fare Scrat dopo.
      courseB_maze_seq3_authored_hint:
        courseB_maze_seq3_a: Uno dei blocchi sposta l'uccellino nella direzione sbagliata.
          Riesci a capire qual è e a sostituirlo con il blocco corretto?
        courseB_maze_seq3_b: Prova ad usare il pulsante "Fai un passo" per capire
          dov'è l'errore. È al primo passo? Al secondo?
        courseB_maze_seq3_c: Non sembra che il blocco <xml><block type="maze_moveWest"/></xml>
          stia muovendo l'uccellino nella direzione corretta.
      courseB_maze_seq3_2018_authored_hint:
        courseB_maze_seq3_a: Uno dei blocchi sposta l'uccellino nella direzione sbagliata.
          Riesci a capire qual è e a sostituirlo con il blocco corretto?
        courseB_maze_seq3_b: Prova ad usare il pulsante "Fai un passo" per capire
          dov'è l'errore. È al primo passo? Al secondo?
        courseB_maze_seq3_c: Non sembra che il blocco <xml><block type="maze_moveWest"/></xml>
          stia muovendo l'uccellino nella direzione corretta.
      courseB_maze_seq4_authored_hint:
        courseB_maze_seq4_a: Prova ad aggiungere un'istruzione alla volta finché non
          arrivi al maialino.
        courseB_maze_seq4_b: Potresti voler usare il blocco <xml><block type="maze_moveEast"/></xml>
          per risolvere questo esercizio.
      courseB_maze_seq4_2018_authored_hint:
        courseB_maze_seq4_a: Prova ad aggiungere un'istruzione alla volta finché non
          arrivi alla ghianda.
        courseB_maze_seq4_b: Potresti voler usare il blocco <xml><block type="maze_moveEast"/></xml>
          per risolvere questo esercizio.
      courseB_maze_seq5_authored_hint:
        courseB_maze_seq5_a: Se ti blocchi, prova a disegnare il percorso su un foglio.
        courseB_maze_seq5_b: Ci sono due modi per risolvere questo esercizio!
        courseB_maze_seq5_c: Non sai come arrivare al maialino? Prova questo percorso.
      courseB_maze_seq5_2018_authored_hint:
        courseB_maze_seq5_a: Se ti blocchi, prova a disegnare il percorso su un foglio.
        courseB_maze_seq5_b: Ci sono due modi per risolvere questo esercizio!
        courseB_maze_seq5_c: Non sai come arrivare alla ghianda? Prova questo percorso.
      courseB_maze_seq6_authored_hint:
        courseB_maze_seq6_a: Il tuo programma dovrebbe avere tre blocchi di movimento.
        courseB_maze_seq6_b: 'Se ti blocchi, prova a risolvere l''esercizio in due
          parti: movimenti orizzontali e movimenti verticali.'
        courseB_maze_seq5_c: Ci sono due modi per risolvere questo esercizio.
        courseB_maze_seq5_d: Non sai come arrivare al maialino? Prova questo percorso!
      courseB_maze_seq6_2018_authored_hint:
        courseB_maze_seq6_a: Il tuo programma dovrebbe avere tre blocchi di movimento.
        courseB_maze_seq6_b: 'Se ti blocchi, prova a risolvere l''esercizio in due
          parti: movimenti orizzontali e movimenti verticali.'
        courseB_maze_seq5_c: Ci sono due modi per risolvere questo esercizio.
        courseB_maze_seq5_d: Non sai come arrivare alla ghianda? Prova questo percorso!
      courseB_maze_seq7_authored_hint:
        courseB_maze_seq7_a: Aggiungi 1 blocco per far arrivare l'uccellino fino al
          maialino.
        courseB_maze_seq7_b: Prova ad eseguire il codice che ti è stato dato e guarda
          dove vai a finire.
        courseB_maze_seq7_c: Non riesci ad arrivare fino al maialino? Prova questo
          percorso!
      courseB_maze_seq7_2018_authored_hint:
        courseB_maze_seq7_a: Aggiungi 1 blocco per far arrivare Scrat fino alla ghianda.
        courseB_maze_seq7_b: Prova ad eseguire il codice che ti è stato dato e guarda
          dove vai a finire.
        courseB_maze_seq7_c: Non riesci ad arrivare alla ghianda? Prova questo percorso!
      courseB_maze_seq8_authored_hint:
        courseB_maze_seq8_a: Provare ad aggiungere un blocco alla volta finché non
          risolvi l'esercizio.
        courseB_maze_seq8_b: Ci sono due modi per risolvere questo esercizio!
        courseB_maze_seq8_c: Non sai da che parte andare? Prova questo percorso!
      courseB_maze_seq8_2018_authored_hint:
        courseB_maze_seq8_a: Provare ad aggiungere un blocco alla volta finché non
          risolvi l'esercizio.
        courseB_maze_seq8_b: Ci sono due modi per risolvere questo esercizio!
        courseB_maze_seq8_c: Non sai da che parte andare? Prova questo percorso!
      courseB_maze_seq9_authored_hint:
        courseB_maze_seq9_a: Prima, prova a scrivere tutti i passaggi su un foglio
          di carta.
        courseB_maze_seq9_b: Costruisci il tuo programma un blocco alla volta e provalo
          man mano.
        courseB_maze_seq9_c: Ci sono due modi per risolvere questo esercizio.
        courseB_maze_seq9_d: Bloccato? Prova questo percorso!
      courseB_maze_seq9_2018_authored_hint:
        courseB_maze_seq9_a: Prima, prova a scrivere tutti i passaggi su un foglio
          di carta.
        courseB_maze_seq9_b: Costruisci il tuo programma un blocco alla volta e provalo
          man mano.
        courseB_maze_seq9_c: Ci sono due modi per risolvere questo esercizio.
        courseB_maze_seq9_d: Bloccato? Prova questo percorso!
      courseB_maze_seq9_challenge1_authored_hint: {}
      courseB_maze_seqCold_authored_hint:
        courseB_maze_seqCold_a: Bloccato? Prova a tracciare con le dita il percorso
          che deve seguire l'uccellino.
        courseB_maze_seqCold_b: The extra blocks need to be added before the last
          ![](https://images.code.org/145dfc20c086bc8fc265de47f3cfe4b0-image-1467848177684.35.51
          PM.png )
      courseB_maze_seqOld_authored_hint:
        courseB_maze_seqOld_a: Se hai problemi, prova prima a scrivere i passaggi
          su un foglio di carta.
      courseB_maze_seq_challenge1_authored_hint:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Try moving west to start.
      courseB_maze_seq_challenge1_2018_authored_hint:
        courseB_maze_seq_challenge1_a: The shortest path might not work this time.
        courseB_maze_seq_challenge1_b: Try using the <xml><block type="maze_moveWest"/></xml>
          block to start.
      courseB_maze_seq_challenge2_authored_hint:
        courseB_maze_seq_challenge2_a: You do not need to add or remove blocks to
          solve this puzzle.
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the middle path.
      courseB_maze_seq_challenge2_2018_authored_hint:
        courseB_maze_seq_challenge2_a: You do not need to add or remove blocks to
          solve this puzzle.
        courseB_maze_seq_challenge2_b: Rearrange the blocks and take the staircase
          pattern path.
      courseB_playlab_challenge1_Template_authored_hint: {}
      courseB_playlab_challenge1_Template_2018_authored_hint: {}
      courseB_playlab_events2_authored_hint:
        courseB_playlab_events2_a: |-
          Questo è il blocco per far dire qualcosa al drago:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
      courseB_playlab_events2_2018_authored_hint:
        courseB_playlab_events2_a: |-
          Questo è il blocco per far dire qualcosa al drago:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
      courseB_playlab_events3_authored_hint:
        courseB_playlab_events3_a: |-
          Questo è il blocco che dovresti usare per aggiungere l'evento:

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          Questo è il blocco di cui hai bisogno per cambiare l'umore del drago:

          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events3_2018_authored_hint:
        courseB_playlab_events3_a: |-
          Questo è il blocco che dovresti usare per aggiungere l'evento:

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          Questo è il blocco di cui hai bisogno per cambiare l'umore del drago:

          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events4_authored_hint:
        courseB_playlab_events4_a: |-
          Questo è l'evento che controlla la freccia sinistra:

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          Questo è il blocco che fa spostare il cavaliere verso sinistra:

          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events4_2018_authored_hint:
        courseB_playlab_events4_a: |-
          Questo è l'evento che controlla la freccia sinistra:

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          Questo è il blocco che fa spostare il cavaliere verso sinistra:

          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events5_authored_hint:
        courseB_playlab_events5_a: |-
          Questo è l'evento che controlla la freccia destra:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">right</title>
            </block>
            </xml>
        courseB_playlab_events5_b: |-
          Questo è il blocco che fa spostare il cavaliere verso destra:

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block>
          </xml>
      courseB_playlab_events5_2018_authored_hint:
        courseB_playlab_events5_a: |-
          Questo è l'evento che controlla la freccia destra:

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">right</title>
            </block>
            </xml>
        courseB_playlab_events5_b: |-
          Questo è il blocco che fa spostare il cavaliere verso destra:

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block>
          </xml>
      courseB_playlab_events6_authored_hint:
        courseB_playlab_events6_a: |-
          Hai bisogno di questo blocco evento:

          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          Premi la freccetta verde scuro nel blocco evento `quando ^` per scegliere la direzione.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Passa da tutte le bandierine per completare l'esercizio!
      courseB_playlab_events6_2018_authored_hint:
        courseB_playlab_events6_a: |-
          Hai bisogno di questo blocco evento:

          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          Premi la freccetta verde scuro nel blocco evento `quando ^` per scegliere la direzione.

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: Passa da tutte le bandierine per completare l'esercizio!
      courseB_playlab_events7_authored_hint:
        courseB_playlab_events7_a: |-
          Questo è il blocco evento di cui hai bisogno:

          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          Questo è il blocco che ti serve per far riprodurre un suono:

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          Questo è il blocco necessario per far svanire il cavaliere:

          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_events7_2018_authored_hint:
        courseB_playlab_events7_a: |-
          Questo è il blocco evento di cui hai bisogno:

          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          Questo è il blocco che ti serve per far riprodurre un suono:

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          Questo è il blocco necessario per far svanire il cavaliere:

          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_eventsTemplate_authored_hint: {}
      courseB_playlab_eventsTemplate_2018_authored_hint: {}
      courseB_playlab_eventsToolbox_authored_hint:
        courseB_playlab_events7_a: |-
          Questo è il blocco evento di cui hai bisogno:

          ![](https://images.code.org/2ed42b3a3108c6affdfc866de57f2eec-image-1475624565390.42.18.png)
        courseB_playlab_events7_b: |-
          Questo è il blocco che ti serve per far riprodurre un suono:

          ![](https://images.code.org/58e9b9a146a4ca3a8eee25845110b805-image-1475624550269.42.00.png)
        courseB_playlab_events7_c: |-
          Questo è il blocco necessario per far svanire il cavaliere:

          ![](https://images.code.org/f468611cbe51e1cb35531334f625395a-image-1475624478204.41.02.png)
      courseB_playlab_events_challenge1_authored_hint:
        courseB_playlab_events_challenge1_a: "Make the other animals move down when
          you press `▼`. \n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n
          \   <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events_challenge1_b: |
          Change the speed of the animals by using this block:
          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          What will the everyone say when the race is over? Make them talk with this event:
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">Woo hoo!</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge1_2018_authored_hint:
        courseB_playlab_events_challenge1_a: "Make the other animals move down when
          you press `▼`. \n<xml>\n  <block type=\"studio_whenArrow\" movable=\"false\">\n
          \   <title name=\"VALUE\">down</title>\n  </block>\n</xml>"
        courseB_playlab_events_challenge1_b: |
          Change the speed of the animals by using this block:
          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          What will the everyone say when the race is over? Make them talk with this event:
          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">Woo hoo!</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge2_authored_hint:
        courseB_playlab_events_challenge2_a: Each animal in the game should vanish
          when tapped. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_2018_authored_hint:
        courseB_playlab_events_challenge2_a: Each animal in the game should disappear
          when clicked. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_embed_authored_hint:
        courseB_playlab_events_challenge2_a: Each animal in the game should vanish
          when tapped. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_template_authored_hint:
        courseB_playlab_events_challenge2_a: Each animal in the game should vanish
          when tapped. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_playlab_events_challenge2_template_2018_authored_hint:
        courseB_playlab_events_challenge2_a: Each animal in the game should vanish
          when tapped. It should also come back after a second or two!
        courseB_playlab_events_challenge2_b: |-
          Use other event blocks to make the other animals disappear!

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          Use extra commands to play sounds or score points when you click the animals!
          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          Mix it up!

          Make some animals give more points than others.
          Use different sounds.
          Change the animals' moods!
      courseB_scrat_forVideo_authored_hint: {}
      courseB_starWars_prog1_authored_hint:
        courseB_starWars_prog1_a: Prova ad aggiungere blocchi uno alla volta, quindi
          clicca su "Esegui" per vedere cosa accade.
        courseB_starWars_prog1_b: |
          Potresti decidere di andare verso Est per risolvere questo esercizio. Quante mosse devi fare?
          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog10_authored_hint: {}
      courseB_starWars_prog10_2018_authored_hint: {}
      courseB_starWars_prog11_authored_hint: {}
      courseB_starWars_prog11_2018_authored_hint: {}
      courseB_starWars_prog1_2018_authored_hint:
        courseB_starWars_prog1_a: Prova ad aggiungere blocchi uno alla volta, quindi
          clicca su "Esegui" per vedere cosa accade.
        courseB_starWars_prog1_b: |
          Potresti decidere di andare verso Est per risolvere questo esercizio. Quante mosse devi fare?
          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog2_authored_hint:
        courseB_starWars_prog2_a: 'Dividi l''esercizio in due parti: recupera il primo
          mucchio di rottami e dopo cerca di capire come raggiungere il successivo.'
      courseB_starWars_prog2_2018_authored_hint:
        courseB_starWars_prog2_a: 'Dividi l''esercizio in due parti: recupera il primo
          mucchio di rottami e dopo cerca di capire come raggiungere il successivo.'
      courseB_starWars_prog3_authored_hint:
        courseB_starWars_prog3_a: Dovrai muoverti in 3 direzioni per risolvere questo
          esercizio.
        courseB_starWars_prog3_b: Costruisci un pezzo di programma alla volta ed eseguilo
          per scoprire come procedere.
      courseB_starWars_prog3_2018_authored_hint:
        courseB_starWars_prog3_a: Dovrai muoverti in 3 direzioni per risolvere questo
          esercizio.
        courseB_starWars_prog3_b: Costruisci un pezzo di programma alla volta ed eseguilo
          per scoprire come procedere.
      courseB_starWars_prog4_authored_hint:
        courseB_starWars_prog4_a: Costruisci un pezzo di programma alla volta ed eseguilo
          per scoprire come procedere.
        courseB_starWars_prog4_b: |-
          Prova ad usare il blocco `ripeti` per ottenere un programma più breve.
          <xml>  <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog4_2018_authored_hint:
        courseB_starWars_prog4_a: Costruisci un pezzo di programma alla volta ed eseguilo
          per scoprire come procedere.
        courseB_starWars_prog4_b: |-
          Prova ad usare il blocco `ripeti` per ottenere un programma più breve.
          <xml>  <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog5_authored_hint:
        courseB_starWars_prog5_a: Lo schema di questo esercizio non sembra simile
          al precedente?
        courseB_starWars_prog5_b: BB-8 raccoglierà i rottami metallici man mano che
          ci passerà sopra.
        courseB_starWars_prog5_c: Traccia il percorso con un dito. Conta i pezzi di
          metallo mentre ti sposti.
        courseB_starWars_prog5_da: |-
          Guarda cosa succede se utilizzi la stessa soluzione dell'esercizio precedente (percorso a scaletta):

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2018_authored_hint:
        courseB_starWars_prog5_a: Lo schema di questo esercizio non sembra simile
          al precedente?
        courseB_starWars_prog5_b: BB-8 raccoglierà i rottami metallici man mano che
          ci passerà sopra.
        courseB_starWars_prog5_c: Traccia il percorso con un dito. Conta i pezzi di
          metallo mentre ti sposti.
        courseB_starWars_prog5_da: |-
          Guarda cosa succede se utilizzi la stessa soluzione dell'esercizio precedente (percorso a scaletta):

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog6_authored_hint:
        courseB_starWars_prog6_a: Questo schema è formato da una scala con due mosse
          in ogni direzione!
        courseB_starWars_prog6_b: |-
          Prova ad usare il blocco `ripeti` per ottenere un programma più breve.
          <xml>  <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog6_2018_authored_hint:
        courseB_starWars_prog6_a: Questo schema è formato da una scala con due mosse
          in ogni direzione!
        courseB_starWars_prog6_b: |-
          Prova ad usare il blocco `ripeti` per ottenere un programma più breve.
          <xml>  <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog7_authored_hint:
        courseB_starWars_prog7_a: Lo schema di questo esercizio non sembra simile
          al precedente?
        courseB_starWars_prog7_b: BB-8 raccoglierà i rottami metallici man mano che
          ci passerà sopra.
        courseB_starWars_prog7_c: Prova a tracciare lo schema di una scala larga su
          questo esercizio. Riesci a coprire tutti i rottami metallici?
      courseB_starWars_prog7_2018_authored_hint:
        courseB_starWars_prog7_a: Lo schema di questo esercizio non sembra simile
          al precedente?
        courseB_starWars_prog7_b: BB-8 raccoglierà i rottami metallici man mano che
          ci passerà sopra.
        courseB_starWars_prog7_c: Prova a tracciare lo schema di una scala larga su
          questo esercizio. Riesci a coprire tutti i rottami metallici?
      courseB_starWars_prog8_authored_hint:
        courseB_starWars_prog8_a: Non ti fare problemi se per risolvere l'esercizio
          devi tornare sui tuoi passi.
        courseB_starWars_prog8_b: |-
          Prova ad usare il blocco `ripeti` per vedere cosa succede al codice che inserisci all'interno.

          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog8_2018_authored_hint:
        courseB_starWars_prog8_a: Non ti fare problemi se per risolvere l'esercizio
          devi tornare sui tuoi passi.
        courseB_starWars_prog8_b: |-
          Prova ad usare il blocco `ripeti` per vedere cosa succede al codice che inserisci all'interno.

          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog9_authored_hint:
        courseB_starWars_prog9_a: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
        courseB_starWars_prog9_b: Ci sono molti modi per risolvere questo esercizio.
        courseB_starWars_prog9_c: Un ciclo `ripeti` potrebbe aiutarti qui?
      courseB_starWars_prog9_2018_authored_hint:
        courseB_starWars_prog9_a: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
        courseB_starWars_prog9_b: Ci sono molti modi per risolvere questo esercizio.
        courseB_starWars_prog9_c: Un ciclo `ripeti` potrebbe aiutarti qui?
      courseC_PlayLab_embed_events9_authored_hint: {}
      courseC_PlayLab_events1_authored_hint:
        courseC_PlayLab_events1_a: |-
          Collega questo blocco al blocco `quando si clicca su "Esegui"`:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Ciao!</title>
          </block>
          </xml>
      courseC_PlayLab_events1_2018_authored_hint:
        courseC_PlayLab_events1_a: |-
          Collega questo blocco al blocco `quando si clicca su "Esegui"`:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Ciao!</title>
          </block>
          </xml>
      courseC_PlayLab_events2_authored_hint:
        courseC_PlayLab_events2_a: |-
          Collega due di questi blocchi al blocco `quando si clicca su "Esegui"`:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: Usa il menu a discesa del secondo blocco `il personaggio
          ... dice` per specificare quale personaggio deve parlare.
      courseC_PlayLab_events2_2018_authored_hint:
        courseC_PlayLab_events2_a: |-
          Collega due di questi blocchi al blocco `quando si clicca su "Esegui"`:

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">Hi there.</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: Usa il menu a discesa del secondo blocco `il personaggio
          ... dice` per specificare quale personaggio deve parlare.
      courseC_PlayLab_events3_authored_hint:
        courseC_PlayLab_events3_a: Devi solo spostare il cane a destra di circa 25
          pixel per risolvere questo esercizio.
        courseC_PlayLab_events3_b: Nella cassetta degli attrezzi c'è un blocco che
          possa servire per muoverebbe un personaggio?
        courseC_PlayLab_events3_c: |-
          Collega questo blocco al blocco `quando si clicca su "Esegui"`:

          <xml>
          <block type="studio_moveDistance">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <title name="DISTANCE">25</title>
          </block>
          </xml>
      courseC_PlayLab_events3_2018_authored_hint:
        courseC_PlayLab_events3_a: Devi solo spostare il cane a destra di circa 25
          pixel per risolvere questo esercizio.
        courseC_PlayLab_events3_b: Nella cassetta degli attrezzi c'è un blocco che
          possa servire per muoverebbe un personaggio?
        courseC_PlayLab_events3_c: |-
          Collega questo blocco al blocco `quando si clicca su "Esegui"`:

          <xml>
          <block type="studio_moveDistance">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <title name="DISTANCE">25</title>
          </block>
          </xml>
      courseC_PlayLab_events4_authored_hint:
        courseC_PlayLab_events4_b: Quando si clicca sul pulsante "Esegui", il cane
          deve spostarsi a destra di **100** pixel per raggiungere il gatto.
        courseC_PlayLab_events4_a: Per risolvere questo esercizio sarà necessario
          collegare un blocco `il personaggio ... dice` all'evento `quando il personaggio
          ... tocca ...`.
      courseC_PlayLab_events4_2018_authored_hint:
        courseC_PlayLab_events4_b: Quando si clicca sul pulsante "Esegui", il cane
          deve spostarsi a destra di **100** pixel per raggiungere il gatto.
        courseC_PlayLab_events4_a: Per risolvere questo esercizio sarà necessario
          collegare un blocco `il personaggio ... dice` all'evento `quando il personaggio
          ... tocca ...`.
      courseC_PlayLab_events5_authored_hint:
        courseC_PlayLab_events5_a: Sarà necessario cliccare sul secondo menù a discesa
          del blocco `il personaggio ... dice ...` per trovare il testo "Novità?"
        courseC_PlayLab_events5_b: Per controllare che funzioni correttamente, clicca
          sul polpo dopo aver avviato il tuo programma!
      courseC_PlayLab_events5_2018_authored_hint:
        courseC_PlayLab_events5_a: Sarà necessario cliccare sul secondo menù a discesa
          del blocco `il personaggio ... dice ...` per trovare il testo "Novità?"
        courseC_PlayLab_events5_b: Per controllare che funzioni correttamente, clicca
          sul polpo dopo aver avviato il tuo programma!
      courseC_PlayLab_events6_authored_hint:
        courseC_PlayLab_events6_a: 'Ogni blocco verde `quando si preme sulla freccia
          verso ...`può essere associato delle specifiche azioni: i blocchi agganciati
          sotto di esso.'
        courseC_PlayLab_events6_b: Usa il menù a discesa del blocco `sposta il personaggio
          1 ...` per cambiare la direzione da dare al pinguino.
        courseC_PlayLab_events6_c: Quando avrai finito, sarai in grado di muovere
          il pinguino in tutte le direzioni usando i tasti freccia (sulla tastiera
          o cliccando i tasti arancioni).
      courseC_PlayLab_events6_2018_authored_hint:
        courseC_PlayLab_events6_a: 'Ogni blocco verde `quando si preme sulla freccia
          verso ...`può essere associato delle specifiche azioni: i blocchi agganciati
          sotto di esso.'
        courseC_PlayLab_events6_b: Usa il menù a discesa del blocco `sposta il personaggio
          1 ...` per cambiare la direzione da dare al pinguino.
        courseC_PlayLab_events6_c: Quando avrai finito, sarai in grado di muovere
          il pinguino in tutte le direzioni usando i tasti freccia (sulla tastiera
          o cliccando i tasti arancioni).
      courseC_PlayLab_events7_authored_hint:
        courseC_PlayLab_events7_a: Per risolvere questo esercizio, devi usare entrambi
          il blocchi `sposta il personaggio 2 in alto 400 pixel` e `sposta il personaggio
          2 in basso 400 pixel` all'interno del ciclo `ripeti per sempre`.
        courseC_PlayLab_events7_b: 'Il blocco `ripeti per sempre` non deve essere
          attaccato a nessun blocco evento: verrà eseguito in autonomia.'
      courseC_PlayLab_events7_2018_authored_hint:
        courseC_PlayLab_events7_a: Per risolvere questo esercizio, devi usare entrambi
          il blocchi `sposta il personaggio 2 in alto 400 pixel` e `sposta il personaggio
          2 in basso 400 pixel` all'interno del ciclo `ripeti per sempre`.
        courseC_PlayLab_events7_b: 'Il blocco `ripeti per sempre` non deve essere
          attaccato a nessun blocco evento: verrà eseguito in autonomia.'
      courseC_PlayLab_events8_authored_hint:
        courseC_PlayLab_events8_a: Per risolvere l'esercizio, devi collegare dei blocchi
          all'evento `quando il personaggio 1 tocca il personaggio 2`.
        courseC_PlayLab_events8_b: I blocchi nella cassetta degli attrezzi `il personaggio
          1 dice ...` e `riproduci il suono di ...` dovrebbero darti una mano!
      courseC_PlayLab_events8_2018_authored_hint:
        courseC_PlayLab_events8_a: Per risolvere l'esercizio, devi collegare dei blocchi
          all'evento `quando il personaggio 1 tocca il personaggio 2`.
        courseC_PlayLab_events8_b: I blocchi nella cassetta degli attrezzi `il personaggio
          1 dice ...` e `riproduci il suono di ...` dovrebbero darti una mano!
      courseC_PlayLab_events9_authored_hint:
        courseC_PlayLab_events9_a: Il blocco `aggiungi un punto` ti aiuterà a risolvere
          questo esercizio.
        courseC_PlayLab_events9_b: Controlla che il blocco evento `quando il personaggio
          ... tocca ...` sia impostato sui personaggi **1** e **3**.
        courseC_PlayLab_events9_c: Puoi avere più di un evento `quando il personaggio
          ... tocca ...` contemporaneamente nella tua area di lavoro, quindi non devi
          eliminare il precedente!
      courseC_PlayLab_events9_2018_authored_hint:
        courseC_PlayLab_events9_a: Il blocco `aggiungi un punto` ti aiuterà a risolvere
          questo esercizio.
        courseC_PlayLab_events9_b: Controlla che il blocco evento `quando il personaggio
          ... tocca ...` sia impostato sui personaggi **1** e **3**.
        courseC_PlayLab_events9_c: Puoi avere più di un evento `quando il personaggio
          ... tocca ...` contemporaneamente nella tua area di lavoro, quindi non devi
          eliminare il precedente!
      courseC_PlayLab_eventsA_authored_hint:
        courseC_PlayLab_eventsA_a: Per risolvere questo esercizio, usa i blocchi `imposta
          uno sfondo ...` e `imposta il personaggio ... a una velocità ...`.
        courseC_PlayLab_eventsA_b: Per risolvere questo esercizio, dovrai trascinare
          tu nell'area di lavoro il blocco evento `quando si clicca su "Esegui"`.
      courseC_PlayLab_eventsA_2018_authored_hint:
        courseC_PlayLab_eventsA_a: Per risolvere questo esercizio, usa i blocchi `imposta
          uno sfondo ...` e `imposta il personaggio ... a una velocità ...`.
        courseC_PlayLab_eventsA_b: Per risolvere questo esercizio, dovrai trascinare
          tu nell'area di lavoro il blocco evento `quando si clicca su "Esegui"`.
      courseC_PlayLab_eventsFP_authored_hint:
        idea1: |-
          *Serve un idea?*

          **Chi c'è?** Fai comparire dei personaggi casuali, così nessuno potrà sapere quale sarà il successivo.

          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          *Serve un idea?*

          **All'avventura!** - Cambia lo sfondo e fai raccontare ai personaggi dove si trovano.

          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *Serve un idea?*

          **Flipper** - Fai in modo di muovere un personaggio con le frecce (usa gli eventi `quando si preme sulla freccia verso l'alto` e `quando si preme sulla freccia verso il basso`), quindi riproduci un suono casuale quando il personaggio sbatte contro gli altri.
      courseC_PlayLab_eventsFP_2018_authored_hint:
        idea1: |-
          *Serve un idea?*

          **Chi c'è?** Fai comparire dei personaggi casuali, così nessuno potrà sapere quale sarà il successivo.

          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          *Serve un idea?*

          **All'avventura!** - Cambia lo sfondo e fai raccontare ai personaggi dove si trovano.

          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *Serve un idea?*

          **Flipper** - Fai in modo di muovere un personaggio con le frecce (usa gli eventi `quando si preme sulla freccia verso l'alto` e `quando si preme sulla freccia verso il basso`), quindi riproduci un suono casuale quando il personaggio sbatte contro gli altri.
      courseC_PlayLab_events_challenge1_authored_hint:
        courseC_PlayLab_events_challenge_a: |
          You can use this block to move actors to different places on the game space.
          <xml> <block type="studio_setSpritePosition">
          <title name="SPRITE">0</title>
          <title name="VALUE">12</title>
          </block></xml>
        courseC_PlayLab_events_challenge_b: Try using `set actor 1 to the middle left
          position` when it touches either of the other actors. This will reset the
          game so the player can keep trying!
        courseC_PlayLab_events_challenge_c: |-
          You might also want to try changing the speed of the different actors to make the game easier or more challenging!
          <xml>  <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.FAST</title>
          </block></xml>
      courseC_PlayLab_events_challenge1_2018_authored_hint:
        courseC_PlayLab_events_challenge_a: |
          You can use this block to move actors to different places on the game space.
          <xml> <block type="studio_setSpritePosition">
          <title name="SPRITE">0</title>
          <title name="VALUE">12</title>
          </block></xml>
        courseC_PlayLab_events_challenge_b: Try using `set actor 1 to the middle left
          position` when it touches either of the other actors. This will reset the
          game so the player can keep trying!
        courseC_PlayLab_events_challenge_c: |-
          You might also want to try changing the speed of the different actors to make the game easier or more challenging!
          <xml>  <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.FAST</title>
          </block></xml>
      courseC_PlayLab_events_challenge1_xy_blocks_authored_hint:
        courseC_PlayLab_events_challenge_a: The two values on this block allow you
          to move an actor to any pixel in the game area. You can choose any number
          from 0-400.
        courseC_PlayLab_events_challenge_b: |-
          You can decide which numbers to use, by thinking about how far over from the top left corner you'd like to move. The first number is the number of pixels from the left. The second number is the number of pixels from the top.
          <xml><block type="studio_setSpriteXY" inline="true">
          <value name="SPRITE">
          <block type="math_number" movable="false">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="XPOS">
          <block type="math_number" movable="false">
          <title name="NUM">37</title>
          </block>
          </value>
          <value name="YPOS">
          <block type="math_number" movable="false">
          <title name="NUM">187</title>
          </block>
          </value>
          </block></xml>
          ![](https://images.code.org/b1559bf476ceb59f880c43271c5e10b2-image-1494111787192.59.49 PM.png)
      courseC_artist_loop1_authored_hint:
        courseC_artist_loop1_a: Non è necessaria alcuna modifica al ciclo, basta aggiungere
          un blocco sopra di esso.
        courseC_artist_loop1_b: |-
          Questo è il blocco di cui hai bisogno per impostare uno schema:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>

          scegli lo schema che preferisci!
      courseC_artist_loop1_2018_authored_hint:
        courseC_artist_loop1_a: Non è necessaria alcuna modifica al ciclo, basta aggiungere
          un blocco sopra di esso.
        courseC_artist_loop1_b: |-
          Questo è il blocco di cui hai bisogno per impostare uno schema:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>

          scegli lo schema che preferisci!
      courseC_artist_loops1a_authored_hint:
        courseC_artist_loops1a_a: |-
          Questo è il primo blocco di cui hai bisogno:

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          Usa questo blocco per disegnare l'adesivo!

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1a_2018_authored_hint:
        courseC_artist_loops1a_a: |-
          Questo è il primo blocco di cui hai bisogno:

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          Usa questo blocco per disegnare l'adesivo!

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops2a_authored_hint:
        courseC_artist_loops2a_a: All'interno del ciclo dovresti saltare a "200 avanti
          200 in basso" (per raggiungere il centro dello schermo), quindi disegnare
          l'adesivo dell'uccello e poi girare di 30 gradi.
        courseC_artist_loops2a_b: Clicca sul numero in cima al blocco`ripeti ... volte`
          per cambiare quante volte deve essere ripetuto il ciclo.
      courseC_artist_loops2a_2018_authored_hint:
        courseC_artist_loops2a_a: All'interno del ciclo dovresti saltare a "200 avanti
          200 in basso" (per raggiungere il centro dello schermo), quindi disegnare
          l'adesivo dell'uccello e poi girare di 30 gradi.
        courseC_artist_loops2a_b: Clicca sul numero in cima al blocco`ripeti ... volte`
          per cambiare quante volte deve essere ripetuto il ciclo.
      courseC_artist_loops3a_authored_hint:
        courseC_artist_loops3a_a: Dovrai aggiungere solo un blocco all'interno del
          ciclo, dopo l'adesivo dell'uccello.
        courseC_artist_loops3a_b: Usa il menù a discesa del blocco `disegna un adesivo`
          per trovare l'adesivo del pipistrello.
      courseC_artist_loops3a_2018_authored_hint:
        courseC_artist_loops3a_a: Dovrai aggiungere solo un blocco all'interno del
          ciclo, dopo l'adesivo dell'uccello.
        courseC_artist_loops3a_b: Usa il menù a discesa del blocco `disegna un adesivo`
          per trovare l'adesivo del pipistrello.
      courseC_artist_loops4a_authored_hint:
        courseC_artist_loops4a_a: |-
          Usa questo blocco per saltare in avanti:

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          Non dimenticare di cambiare la distanza!
      courseC_artist_loops4a_2018_authored_hint:
        courseC_artist_loops4a_a: |-
          Usa questo blocco per saltare in avanti:

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          Non dimenticare di cambiare la distanza!
      courseC_artist_loops5_authored_hint:
        courseC_artist_loops5_a: |-
          Try using the `jump to` block to get your artist back toward the center:

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">100</title>
          <title name="YPOS">100</title>
          </block>
          </xml>
      courseC_artist_loops5a_authored_hint:
        courseC_artist_loops5a_a: Usa i menù a discesa dei blocchi `disegna un adesivo`
          per cambiare le immagini.
      courseC_artist_loops5a_2018_authored_hint:
        courseC_artist_loops5a_a: Usa i menù a discesa dei blocchi `disegna un adesivo`
          per cambiare le immagini.
      courseC_artist_loops5b_authored_hint:
        courseC_artist_loops5b_a: |-
          Usa questo blocco per impostare lo schema delle tue linee:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: Per fare un disegno come quello qui sopra, devi
          far spostare l'artista all'indietro della stessa quantità di cui si è mosso
          in avanti.
      courseC_artist_loops5b_2018_authored_hint:
        courseC_artist_loops5b_a: |-
          Usa questo blocco per impostare lo schema delle tue linee:

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: Per fare un disegno come quello qui sopra, devi
          far spostare l'artista all'indietro della stessa quantità di cui si è mosso
          in avanti.
      courseC_artist_loops6_authored_hint:
        courseC_artist_loops6_a: |
          Try a triangle flower:
          <img src="https://images.code.org/4248a974a7631c4240effba06fdee731-image-1495821015097.49.18.png" width="150px" />

          Or a little green bug:
          <img src="https://images.code.org/b9454d6f1159e19c58d9f5b5b37fd156-image-1495821067980.52.43.png" width="150px" />
      courseC_artist_loops6a_authored_hint:
        courseC_artist_loops6a_a: Per realizzare un disegno come quello qui sopra,
          salta avanti meno di 75 pixel tra ogni adesivo.
      courseC_artist_loops6a_2018_authored_hint:
        courseC_artist_loops6a_a: Per realizzare un disegno come quello qui sopra,
          salta avanti meno di 75 pixel tra ogni adesivo.
      courseC_artist_loops7a_authored_hint:
        courseC_artist_loops7a_a: |-
          Per disegnare un cerchio completo ci vogliono 360 gradi. Moltiplica i gradi delle curve per il numero di volte che si ripete il ciclo. È uguale a 360?
          Controlla le rotazioni suggerite per vedere che funziona!
      courseC_artist_loops7a_2018_authored_hint:
        courseC_artist_loops7a_a: |-
          Per disegnare un cerchio completo ci vogliono 360 gradi. Moltiplica i gradi delle curve per il numero di volte che si ripete il ciclo. È uguale a 360?
          Controlla le rotazioni suggerite per vedere che funziona!
      courseC_artist_loopsPre1a_authored_hint:
        courseC_artist_loopsPre1a_a: Ricorda di inserire il blocco `gira a ...` all'interno
          del ciclo `ripeti ... volte`.
        courseC_artist_loopsPre1a_b: 'Il ciclo `ripeti ... volte` dovrebbe avere 3
          blocchi al suo interno: `salta a 200 avanti 200 in basso`, `vai avanti di
          50 pixel` e `gira a destra di 60 gradi`.'
      courseC_artist_loopsPre1a_2018_authored_hint:
        courseC_artist_loopsPre1a_a: Ricorda di inserire il blocco `gira a ...` all'interno
          del ciclo `ripeti ... volte`.
        courseC_artist_loopsPre1a_b: 'Il ciclo `ripeti ... volte` dovrebbe avere 3
          blocchi al suo interno: `salta a 200 avanti 200 in basso`, `vai avanti di
          50 pixel` e `gira a destra di 60 gradi`.'
      courseC_artist_loopsPrePre1a_authored_hint:
        courseC_artist_loopsPrePre1a_a: |-
          Il primo blocco di cui avrai bisogno sarà:

          ![](https://images.code.org/60e3354a2e7dd37b64833eac1e8694be-image-1499710228373.08.14 AM.png)
        courseC_artist_loopsPrePre1a_b: |-
          Per andare avanti di 50 pixel usa questo blocco:

          ![](https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png)
      courseC_artist_loopsPrePre1a_2018_authored_hint:
        courseC_artist_loopsPrePre1a_a: |-
          Il primo blocco di cui avrai bisogno sarà:

          ![](https://images.code.org/60e3354a2e7dd37b64833eac1e8694be-image-1499710228373.08.14 AM.png)
        courseC_artist_loopsPrePre1a_b: |-
          Per andare avanti di 50 pixel usa questo blocco:

          ![](https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png)
      courseC_artist_prog1_authored_hint: {}
      courseC_artist_prog1_2018_authored_hint: {}
      courseC_artist_prog2_authored_hint:
        courseC_artist_prog2_a: '*"Se usi il blocco <xml><block type="draw_move_by_constant"><title
          name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>
          disegnerò una linea."*'
        courseC_artist_prog2_b: Problemi a girare? Usa il blocco <xml><block type="draw_turn_by_constant_dropdown"><title
          name="DIR">turnRight</title><title name="VALUE" config="45,60,90,120,180">90</title></block></xml>
      courseC_artist_prog2_2018_authored_hint:
        courseC_artist_prog2_a: '*"Se usi il blocco <xml><block type="draw_move_by_constant"><title
          name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>
          disegnerò una linea."*'
        courseC_artist_prog2_b: Problemi a girare? Usa il blocco <xml><block type="draw_turn_by_constant_dropdown"><title
          name="DIR">turnRight</title><title name="VALUE" config="45,60,90,120,180">90</title></block></xml>
      courseC_artist_prog3_authored_hint:
        courseC_artist_prog3_a: |-
          Per creare il finestrino, devi solo disegnare un quadrato con i lati di 100 pixel:
          - vai avanti
          - gira
          - vai avanti
          - gira
          - vai avanti
          - gira
          - vai avanti
        courseC_artist_prog3_b: Vuoi fare un programma più breve? Prova ad usare un
          ciclo `Ripeti ... volte`.
      courseC_artist_prog3_2018_authored_hint:
        courseC_artist_prog3_a: |-
          Per creare il finestrino, devi solo disegnare un quadrato con i lati di 100 pixel:
          - vai avanti
          - gira
          - vai avanti
          - gira
          - vai avanti
          - gira
          - vai avanti
        courseC_artist_prog3_b: Vuoi fare un programma più breve? Prova ad usare un
          ciclo `Ripeti ... volte`.
      courseC_artist_prog4_authored_hint:
        courseC_artist_prog4_a: Per finire il razzo, basta disegnare il triangolo
          in cima!
        courseC_artist_prog4_b: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseC_artist_prog4_c: |-
          Per disegnare un triangolo dovresti fare così:
          - vai avanti
          - gira a sinistra di 120 gradi
          - vai avanti
          - gira a sinistra di 120 gradi
          - vai avanti
      courseC_artist_prog4_2018_authored_hint:
        courseC_artist_prog4_a: Per finire il razzo, basta disegnare il triangolo
          in cima!
        courseC_artist_prog4_b: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseC_artist_prog4_c: |-
          Per disegnare un triangolo dovresti fare così:
          - vai avanti
          - gira a sinistra di 120 gradi
          - vai avanti
          - gira a sinistra di 120 gradi
          - vai avanti
      courseC_artist_prog5_authored_hint:
        courseC_artist_prog5_a: Trascina il cursore verso la tartaruga per veder eseguire
          il codice più lentamente e capire dove sono eventuali errori.
        courseC_artist_prog5_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
        courseC_artist_prog5_c: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseC_artist_prog5_d: Ogni curva dovrebbe essere di 90 gradi a destra.
      courseC_artist_prog5_2018_authored_hint:
        courseC_artist_prog5_a: Trascina il cursore verso la tartaruga per veder eseguire
          il codice più lentamente e capire dove sono eventuali errori.
        courseC_artist_prog5_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
        courseC_artist_prog5_c: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseC_artist_prog5_d: Ogni curva dovrebbe essere di 90 gradi a destra.
      courseC_artist_prog6_authored_hint:
        courseC_artist_prog6_a: L'artista è già rivolto verso la direzione corretta
          per disegnare la prima linea.
        courseC_artist_prog6_b: Questo rombo è semplicemente un quadrato ruotato su
          uno spigolo.
        courseC_artist_prog6_c: Dal momento che questo rombo è anche un quadrato,
          controlla di girare di 90 gradi ad ogni angolo.
      courseC_artist_prog6_2018_authored_hint:
        courseC_artist_prog6_a: L'artista è già rivolto verso la direzione corretta
          per disegnare la prima linea.
        courseC_artist_prog6_b: Questo rombo è semplicemente un quadrato ruotato su
          uno spigolo.
        courseC_artist_prog6_c: Dal momento che questo rombo è anche un quadrato,
          controlla di girare di 90 gradi ad ogni angolo.
      courseC_artist_prog6_predict1_authored_hint: {}
      courseC_artist_prog6_predict1_2018_authored_hint: {}
      courseC_artist_prog7_authored_hint:
        courseC_artist_prog7_a: Gli angoli sono di 45 o 90 gradi.
        courseC_artist_prog7_b: |-
          - Al primo passo tutto procede bene?
          - E al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
        courseC_artist_prog7_c: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseC_artist_prog7_d: |-
          Dovresti fare così:
          - vai avanti
          - gira a destra di 45 gradi
          - vai avanti
          - gira a destra di 90 gradi
          - vai avanti
          - gira a destra di 45 gradi

          Ripeti questa sequenza per 2 volte!
        courseC_artist_prog7_e: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseC_artist_prog7_2018_authored_hint:
        courseC_artist_prog7_a: Gli angoli sono di 45 o 90 gradi.
        courseC_artist_prog7_b: |-
          - Al primo passo tutto procede bene?
          - E al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
        courseC_artist_prog7_c: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseC_artist_prog7_d: |-
          Dovresti fare così:
          - vai avanti
          - gira a destra di 45 gradi
          - vai avanti
          - gira a destra di 90 gradi
          - vai avanti
          - gira a destra di 45 gradi

          Ripeti questa sequenza per 2 volte!
        courseC_artist_prog7_e: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseC_artist_prog8_authored_hint: {}
      courseC_artist_prog8_2018_authored_hint: {}
      courseC_artist_prog_challenge1-doghouse_authored_hint:
        courseC_artist_prog7_a: Use 60 degree angles to make the roof.
      courseC_artist_prog_challenge1_authored_hint:
        courseC_artist_prog_challenge1_a: 'The rectangle is 200 pixels wide and 100
          pixels tall. '
      courseC_artist_prog_challenge1_2018_authored_hint:
        courseC_artist_prog_challenge1_a: You can draw this as a rectangle with a
          line in the middle or two different squares!
      courseC_artist_prog_challenge2_authored_hint:
        courseC_artist_prog_challenge2_a: "You can put commands inside `repeat` block
          to loop them over and over. Try it!\n<xml>\n  \n          <block type=\"controls_repeat\">\n
          \           <title name=\"TIMES\">6</title>\n            <statement name=\"DO\">\n
          \             <block type=\"draw_move_by_constant_dropdown\">\n                <title
          name=\"DIR\">moveForward</title>\n                <title name=\"VALUE\"
          config=\"25,50,100,150,200,300\">25</title>\n                <next>\n                  <block
          type=\"jump_by_constant_dropdown\">\n                    <title name=\"DIR\">jumpForward</title>\n
          \                   <title name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n
          \                 </block>\n                </next>\n              </block>\n
          \             </statement></block></xml>"
      courseC_artist_prog_challenge2a_authored_hint:
        courseC_artist_prog_challenge2_a: After you draw the first line, try turning
          left before you draw your second line.
        courseC_artist_prog_challenge2_b: After you draw the second line, try turning
          right before you draw your third line.
      courseC_artist_prog_challenge2a_2018_authored_hint:
        courseC_artist_prog_challenge2_a: After you draw the first line, turn left
          before you draw your second line.
        courseC_artist_prog_challenge2_b: After you draw the second line, turn right
          before you draw your third line.
      courseC_collector_loops_challenge2_authored_hint:
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      courseC_collector_loops_challenge2_2018_authored_hint:
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      courseC_collector_prog1_authored_hint:
        courseC_collector_prog1_a: Quando hai raggiunto un diamante, usa il blocco
          <xml><block type="collector_collect"/></xml> per raccoglierlo.
        courseC_collector_prog1_b: La soluzione più semplice è fare un passo avanti
          e raccogliere un diamante.
      courseC_collector_prog1_2018_authored_hint:
        courseC_collector_prog1_a: Quando hai raggiunto un diamante, usa il blocco
          <xml><block type="collector_collect"/></xml> per raccoglierlo.
        courseC_collector_prog1_b: La soluzione più semplice è fare un passo avanti
          e raccogliere un diamante.
      courseC_collector_prog2_authored_hint:
        courseC_collector_prog2_a: Puoi usare quattro blocchi <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> oppure usare il blocco <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          per rendere il tuo programma più corto.
        courseC_collector_prog2_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseC_collector_prog2_2018_authored_hint:
        courseC_collector_prog2_a: Puoi usare quattro blocchi <xml><block type="maze_move"><title
          name="DIR">moveForward</title></block></xml> oppure usare il blocco <xml><block
          type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
          per rendere il tuo programma più corto.
        courseC_collector_prog2_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseC_collector_prog3_authored_hint:
        courseC_collector_prog3_a: Verranno eseguiti solo i blocchi collegati al blocco
          arancione <xml><block type="when_run"/></xml>
        courseC_collector_prog3_b: Prova ad usare il pulsante "Fai un passo" per eseguire
          il programma un'istruzione alla volta. Riesci a trovare l'errore?
        courseC_collector_prog3_c: Se hai difficoltà a risolvere questo esercizio,
          prova prima a scrivere le mosse su un pezzo di carta.
      courseC_collector_prog3_2018_authored_hint:
        courseC_collector_prog3_a: Verranno eseguiti solo i blocchi collegati al blocco
          arancione <xml><block type="when_run"/></xml>
        courseC_collector_prog3_b: Prova ad usare il pulsante "Fai un passo" per eseguire
          il programma un'istruzione alla volta. Riesci a trovare l'errore?
        courseC_collector_prog3_c: Se hai difficoltà a risolvere questo esercizio,
          prova prima a scrivere le mosse su un pezzo di carta.
      courseC_collector_prog4_authored_hint:
        courseC_collector_prog4_a: Se ti blocchi, prova a scrivere i passaggi su un
          foglio.
        courseC_collector_prog4_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
        courseC_collector_prog4_c: Prova questo percorso.
      courseC_collector_prog4_2018_authored_hint:
        courseC_collector_prog4_a: Se ti blocchi, prova a scrivere i passaggi su un
          foglio.
        courseC_collector_prog4_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
        courseC_collector_prog4_c: Prova questo percorso.
      courseC_collector_prog5_authored_hint:
        courseC_collector_prog5_a: |-
          "Funziona il primo passo?
          È corretta la seconda istruzione?
          Dov'è che il codice comincia a non fare ciò che avevi in mente?"
        courseC_collector_prog5_b: Se hai corretto un errore e il programma continua
          a non funzionare, usa la procedura del precedente suggerimento per trovare
          altri errori.
        courseC_collector_prog5_c: Se ti blocchi, prova a scrivere i passaggi su un
          foglio.
        courseC_collector_prog5_d: Segui il percorso per raccogliere i diamanti.
      courseC_collector_prog5_2018_authored_hint:
        courseC_collector_prog5_a: |-
          "Funziona il primo passo?
          È corretta la seconda istruzione?
          Dov'è che il codice comincia a non fare ciò che avevi in mente?"
        courseC_collector_prog5_b: Se hai corretto un errore e il programma continua
          a non funzionare, usa la procedura del precedente suggerimento per trovare
          altri errori.
        courseC_collector_prog5_c: Se ti blocchi, prova a scrivere i passaggi su un
          foglio.
        courseC_collector_prog5_d: Segui il percorso per raccogliere i diamanti.
      courseC_collector_prog6_authored_hint:
        courseC_collector_prog6_a: |-
          Riesci a capire cosa non funziona?

          Prova a usare il pulsante "Fai un passo" per trovare errori eseguendo il codice un blocco per volta.
        courseC_collector_prog6_b: Ti sei bloccato? Segui il percorso per raccogliere
          i diamanti.
      courseC_collector_prog6_2018_authored_hint:
        courseC_collector_prog6_a: |-
          Riesci a capire cosa non funziona?

          Prova a usare il pulsante "Fai un passo" per trovare errori eseguendo il codice un blocco per volta.
        courseC_collector_prog6_b: Ti sei bloccato? Segui il percorso per raccogliere
          i diamanti.
      courseC_collector_prog7_authored_hint:
        courseC_collector_prog7_a: Ci sono già tanti ottimi blocchi nell'area di lavoro.
          Non hai bisogno di cancellarne alcuno per risolvere questo esercizio.
        courseC_collector_prog7_b: Non trovi il blocco che ti serve per far muovere
          l'avventuriera nella direzione corretta? Prendine uno dalla cassetta degli
          attrezzi.
        courseC_collector_prog7_c: Hai difficoltà ad immaginare un percorso per raccogliere
          tutti i diamanti? Prova questo!
      courseC_collector_prog7_2018_authored_hint:
        courseC_collector_prog7_a: Ci sono già tanti ottimi blocchi nell'area di lavoro.
          Non hai bisogno di cancellarne alcuno per risolvere questo esercizio.
        courseC_collector_prog7_b: Non trovi il blocco che ti serve per far muovere
          l'avventuriera nella direzione corretta? Prendine uno dalla cassetta degli
          attrezzi.
        courseC_collector_prog7_c: Hai difficoltà ad immaginare un percorso per raccogliere
          tutti i diamanti? Prova questo!
      courseC_collector_prog8_authored_hint: {}
      courseC_collector_prog8_2018_authored_hint: {}
      courseC_collector_prog9_authored_hint: {}
      courseC_collector_prog9_2018_authored_hint: {}
      courseC_collector_progA_authored_hint:
        courseC_collector_progA_a: Try using the "Step" button to go through your
          code line by line.
      courseC_collector_prog_challenge1_authored_hint:
        courseC_collector_prog_challenge1_a: You can use the `collect` command more
          often to collect the extra treasure.
      courseC_collector_prog_challenge1_2018_authored_hint:
        courseC_collector_prog_challenge1_a: You can use the `collect` block many
          times to collect the extra treasure.
      courseC_collector_prog_challenge2_authored_hint:
        courseC_collector_prog_challenge1_a: You can use the `collect` command more
          often to collect the extra treasure.
        courseC_collector_prog_challenge1_b: Lost your way?  Try this path to solve
          the puzzle!
      courseC_collector_prog_challenge2_2018_authored_hint:
        courseC_collector_prog_challenge1_a: You can use more than one `collect` block
          at each space.
        courseC_collector_prog_challenge1_b: Lost your way?  Try this path to solve
          the puzzle!
      courseC_external_events_authored_hint: {}
      courseC_flappy_events1_authored_hint:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events1_2018_authored_hint:
        courseC_flappy_events1_a: "![](https://images.code.org/5f1d0edf6ebb44d98ffdce623cfe0ad4-image-1501192487040.gif)"
      courseC_flappy_events2_authored_hint:
        courseC_flappy_events2_a: 'Il blocco che devi aggiungere si chiama `imposta
          una velocità ...`. '
        courseC_flappy_events2_b: Collega il blocco `imposta una velocità ...` al
          blocco `quando si clicca su "Esegui"` per risolvere questo esercizio.
      courseC_flappy_events2_2018_authored_hint:
        courseC_flappy_events2_a: 'Il blocco che devi aggiungere si chiama `imposta
          una velocità ...`. '
        courseC_flappy_events2_b: Collega il blocco `imposta una velocità ...` al
          blocco `quando si clicca su "Esegui"` per risolvere questo esercizio.
      courseC_flappy_events3_authored_hint:
        courseC_flappy_events3_a: Se qualcosa non funziona correttamente, controlla
          che i blocchi siano collegati agli eventi corretti nell'area di lavoro.
      courseC_flappy_events3_2018_authored_hint:
        courseC_flappy_events3_a: Se qualcosa non funziona correttamente, controlla
          che i blocchi siano collegati agli eventi corretti nell'area di lavoro.
      courseC_flappy_events4_authored_hint:
        courseC_flappy_events4_a: Per risolvere questo esercizio, collega il blocco
          `fine del gioco` al blocco dell'evento `quando colpisce un ostacolo`.
      courseC_flappy_events4_2018_authored_hint:
        courseC_flappy_events4_a: Per risolvere questo esercizio, collega il blocco
          `fine del gioco` al blocco dell'evento `quando colpisce un ostacolo`.
      courseC_flappy_events5_authored_hint:
        courseC_flappy_events5_a: Dovrai usare il blocco `aggiungi un punto` per completare
          l'esercizio.
      courseC_flappy_events5_2018_authored_hint:
        courseC_flappy_events5_a: Dovrai usare il blocco `aggiungi un punto` per completare
          l'esercizio.
      courseC_flappy_events6_authored_hint:
        courseC_flappy_events6_a: Prova a collegare il blocco `sbatti le ali un numero
          di volte ...` all'evento `quando si clicca`.
      courseC_flappy_events6_2018_authored_hint:
        courseC_flappy_events6_a: Prova a collegare il blocco `sbatti le ali un numero
          di volte ...` all'evento `quando si clicca`.
      courseC_flappy_events7_authored_hint:
        courseC_flappy_events7_a: Puoi modificare lo sfondo usando il blocco `imposta
          una scena ...`.
      courseC_flappy_events7_2018_authored_hint:
        courseC_flappy_events7_a: Puoi modificare lo sfondo usando il blocco `imposta
          una scena ...`.
      courseC_flappy_events8_authored_hint:
        courseC_flappy_events8_a: Per completare l'esercizio, devi collegare un secondo
          blocco `imposta una scena ...` sotto l'evento `quando supera un ostacolo`.
      courseC_flappy_events8_2018_authored_hint:
        courseC_flappy_events8_a: Per completare l'esercizio, devi collegare un secondo
          blocco `imposta una scena ...` sotto l'evento `quando supera un ostacolo`.
      courseC_flappy_events9_authored_hint:
        courseC_flappy_events9_a: Per completare l'esercizio, collega il blocco `imposta
          il punteggio 0` all'evento `quando colpisce un ostacolo`.
      courseC_flappy_events9_2018_authored_hint:
        courseC_flappy_events9_a: Per completare l'esercizio, collega il blocco `imposta
          il punteggio 0` all'evento `quando colpisce un ostacolo`.
      courseC_flappy_events_template_authored_hint: {}
      courseC_flappy_events_template_2018_authored_hint: {}
      courseC_harvester_loops1_authored_hint:
        courseC_harvester_loops1_a: Quando arrivi ad una zucca, puoi usare il blocco
          <xml><block type="harvester_pumpkin"/></xml> per raccoglierla.
        courseC_harvester_loops1_b: Puoi usare un ciclo con il blocco <xml><block
          type="harvester_pumpkin"/></xml> per prendere più di una zucca da una casella.
      courseC_harvester_loops10_authored_hint: {}
      courseC_harvester_loops10_2018_authored_hint: {}
      courseC_harvester_loops11_authored_hint: {}
      courseC_harvester_loops11_2018_authored_hint: {}
      courseC_harvester_loops1_2018_authored_hint:
        courseC_harvester_loops1_a: Quando arrivi ad una zucca, puoi usare il blocco
          <xml><block type="harvester_pumpkin"/></xml> per raccoglierla.
        courseC_harvester_loops1_b: Puoi usare un ciclo con il blocco <xml><block
          type="harvester_pumpkin"/></xml> per prendere più di una zucca da una casella.
      courseC_harvester_loops2_authored_hint:
        courseC_harvester_loops2_a: Se ti blocchi, prova a scrivere i passaggi su
          carta e cerca gli schemi che si ripetono.
        courseC_harvester_loops2_b: Avrai bisogno di due cicli `ripeti ... volte`,
          uno dopo l'altro.
        courseC_harvester_loops2_c: Un ciclo ripeterà l'istruzione `vai avanti` e
          l'altro ripeterà l'istruzione `prendi zucca`.
      courseC_harvester_loops2_2018_authored_hint:
        courseC_harvester_loops2_a: Se ti blocchi, prova a scrivere i passaggi su
          carta e cerca gli schemi che si ripetono.
        courseC_harvester_loops2_b: Avrai bisogno di due cicli `ripeti ... volte`,
          uno dopo l'altro.
        courseC_harvester_loops2_c: Un ciclo ripeterà l'istruzione `vai avanti` e
          l'altro ripeterà l'istruzione `prendi zucca`.
      courseC_harvester_loops3_authored_hint:
        courseC_harvester_loops3_a: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
        courseC_harvester_loops3_b: Per la prima zucca, puoi usare un programma molto
          simile all'esercizio precedente. Da che parte devi girare dopo?
        courseC_harvester_loops3_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops3_2018_authored_hint:
        courseC_harvester_loops3_a: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
        courseC_harvester_loops3_b: Per la prima zucca, puoi usare un programma molto
          simile all'esercizio precedente. Da che parte devi girare dopo?
        courseC_harvester_loops3_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops4_authored_hint:
        courseC_harvester_loops4_a: Usa il nuovo blocco `prendi pannocchia`per raccogliere
          le pannocchie.
        courseC_harvester_loops4_b: Puoi usare diversi blocchi `ripeti ... volte`
          nel tuo programma, alcuni per raccogliere le pannocchie ed altri per le
          zucche.
        courseC_harvester_loops4_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops4_2018_authored_hint:
        courseC_harvester_loops4_a: Usa il nuovo blocco `prendi pannocchia`per raccogliere
          le pannocchie.
        courseC_harvester_loops4_b: Puoi usare diversi blocchi `ripeti ... volte`
          nel tuo programma, alcuni per raccogliere le pannocchie ed altri per le
          zucche.
        courseC_harvester_loops4_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops5_authored_hint:
        courseC_harvester_loops5_a: Se ti blocchi, prova a disegnare l'intero programma
          e poi cerca gli schemi che si ripetono.
        courseC_harvester_loops5_b: Non ti sembra che questa gradinata assomigli a
          quella di altri esercizi? I movimenti dovrebbero essere simili, ricordati
          solo di raccogliere gli ortaggi lungo la strada.
      courseC_harvester_loops5_2018_authored_hint:
        courseC_harvester_loops5_a: Se ti blocchi, prova a disegnare l'intero programma
          e poi cerca gli schemi che si ripetono.
        courseC_harvester_loops5_b: Non ti sembra che questa gradinata assomigli a
          quella di altri esercizi? I movimenti dovrebbero essere simili, ricordati
          solo di raccogliere gli ortaggi lungo la strada.
      courseC_harvester_loops6_authored_hint:
        courseC_harvester_loops6_a: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo `ripeti ... volte`.
        courseC_harvester_loops6_b: Non dimenticarti di girare alla fine della fila
          di pannocchie.
      courseC_harvester_loops6_2018_authored_hint:
        courseC_harvester_loops6_a: Ricorda che puoi mettere più di un blocco all'interno
          di un ciclo `ripeti ... volte`.
        courseC_harvester_loops6_b: Non dimenticarti di girare alla fine della fila
          di pannocchie.
      courseC_harvester_loops7_authored_hint:
        courseC_harvester_loops7_a: 'Ci sono due modi per risolvere questo esercizio:
          raccogliere prima le pannocchie e poi le le zucche oppure viceversa, prima
          le zucche e poi le pannocchie.'
        courseC_harvester_loops7_b: Dovrai usare diversi cicli `ripeti ... volte`
          per risolvere questo esercizio.
      courseC_harvester_loops7_2018_authored_hint:
        courseC_harvester_loops7_a: 'Ci sono due modi per risolvere questo esercizio:
          raccogliere prima le pannocchie e poi le le zucche oppure viceversa, prima
          le zucche e poi le pannocchie.'
        courseC_harvester_loops7_b: Dovrai usare diversi cicli `ripeti ... volte`
          per risolvere questo esercizio.
      courseC_harvester_loops8_authored_hint:
        courseC_harvester_loops8_a: Non ti sembra che questa gradinata assomigli a
          quella dell'esercizio precedente? I movimenti dovrebbero essere simili,
          ricordati solo di raccogliere gli ortaggi lungo la strada.
        courseC_harvester_loops8_b: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops8_2018_authored_hint:
        courseC_harvester_loops8_a: Non ti sembra che questa gradinata assomigli a
          quella dell'esercizio precedente? I movimenti dovrebbero essere simili,
          ricordati solo di raccogliere gli ortaggi lungo la strada.
        courseC_harvester_loops8_b: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_harvester_loops9_authored_hint: {}
      courseC_harvester_loops9_2018_authored_hint: {}
      courseC_harvester_loops_challenge1_authored_hint:
        courseC_harvester_loops_challenge1_a: Don't even think about try about trying
          this without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need to, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the first four corn uses a `repeat` block inside of another `repeat` block. You can use this pattern for the rest of the puzzle too!

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></next></block></xml>
      courseC_harvester_loops_challenge1a_authored_hint:
        courseC_harvester_loops_challenge1_a: This is too hard without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need, then turn right at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the corn in the middle uses a `repeat` block inside of another `repeat` block.

          <xml><block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseC_harvester_loops_challenge1a_2018_authored_hint:
        courseC_harvester_loops_challenge1_a: This is too hard without loops!
        courseC_harvester_loops_challenge1_b: You can repeat `move forward` and `pick
          corn` as many times as you need, then `turn right` at each corner.
        courseC_harvester_loops_challenge1_c: |-
          The best way to collect the corn in the middle uses a `repeat` block inside of another `repeat` block.

          <xml><block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseC_harvester_loops_challenge2_authored_hint:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)
      courseC_harvester_loops_challenge2_2018_authored_hint:
        courseC_harvester_loops_challenge2_a: One way to solve this looks like a zig-zag.
          Another way looks like a spiral! There are lots of different solutions to
          a puzzle like this. Be persistent!
        courseC_harvester_loops_challenge2_b: You can repeat `move forward` and `pick
          lettuce` as many times as you need to, then turn at each corner.
        courseC_harvester_loops_challenge2_c: |
          This zig-zag pattern can be repeated twice to finish the puzzle with just 20 blocks!

          ![](https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png)
        courseC_harvester_loops_challenge2_d: |-
          This spiral pattern can be coded with just 18 blocks!

          ![](https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png)
      courseC_harvester_loops_forVid_authored_hint: {}
      courseC_maze_debugging1_authored_hint:
        courseC_maze_debugging1_a: |-
          - Al primo passo tutto procede bene?
          - Va ancora tutto bene al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging1_b: Devi aggiungere 1 blocco per completare l'esercizio.
      courseC_maze_debugging1_2018_authored_hint:
        courseC_maze_debugging1_a: |-
          - Al primo passo tutto procede bene?
          - Va ancora tutto bene al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging1_b: Devi aggiungere 1 blocco per completare l'esercizio.
      courseC_maze_debugging2_authored_hint:
        courseC_maze_debugging2_a: C'è un sacco di ottimo codice nell'area di lavoro.
          Non cancellarlo per ricominciare tutto da capo!
        courseC_maze_debugging2_b: |-
          - Al primo passo tutto procede bene?
          - Va ancora tutto bene al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging2_c: Non riesci a capire cosa non va? Provare a eseguire
          il codice un paio di volte per vedere cosa succede.
      courseC_maze_debugging2_2018_authored_hint:
        courseC_maze_debugging2_a: C'è un sacco di ottimo codice nell'area di lavoro.
          Non cancellarlo per ricominciare tutto da capo!
        courseC_maze_debugging2_b: |-
          - Al primo passo tutto procede bene?
          - Va ancora tutto bene al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging2_c: Non riesci a capire cosa non va? Provare a eseguire
          il codice un paio di volte per vedere cosa succede.
      courseC_maze_debugging3_authored_hint:
        courseC_maze_debugging3_a: |-
          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: Non riesci a capire cosa non va? Provare a eseguire
          il codice un paio di volte per vedere cosa succede.
      courseC_maze_debugging3_2018_authored_hint:
        courseC_maze_debugging3_a: |-
          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: Non riesci a capire cosa non va? Provare a eseguire
          il codice un paio di volte per vedere cosa succede.
      courseC_maze_debugging4_authored_hint:
        courseC_maze_debugging4_a: Usa il pulsante "Fai un passo" per eseguire un'istruzione
          alla volta. Questo potrebbe aiutarti a trovare il blocco sbagliato?
        courseC_maze_debugging4_b: Una delle curve che sta facendo Scrat va nella
          direzione sbagliata. Riesci a capire qual'è?
      courseC_maze_debugging4_2018_authored_hint:
        courseC_maze_debugging4_a: Usa il pulsante "Fai un passo" per eseguire un'istruzione
          alla volta. Questo potrebbe aiutarti a trovare il blocco sbagliato?
        courseC_maze_debugging4_b: Una delle curve che sta facendo Scrat va nella
          direzione sbagliata. Riesci a capire qual'è?
      courseC_maze_debugging5_authored_hint:
        courseC_maze_debugging5_a: |-
          Ci sono un sacco di blocchi utili nell'area di lavoro! Non cancellarli tutti!

          Usa il pulsante "Fai un passo" per indagare e capire dove il codice è sbagliato.
        courseC_maze_debugging5_b: Prova a dire ad alta voce cosa dovrebbe fare Scrat.  Corrisponde
          al codice presente nell'area di lavoro?  Che differenza c'è?
      courseC_maze_debugging5_2018_authored_hint:
        courseC_maze_debugging5_a: |-
          Ci sono un sacco di blocchi utili nell'area di lavoro! Non cancellarli tutti!

          Usa il pulsante "Fai un passo" per indagare e capire dove il codice è sbagliato.
        courseC_maze_debugging5_b: Prova a dire ad alta voce cosa dovrebbe fare Scrat.  Corrisponde
          al codice presente nell'area di lavoro?  Che differenza c'è?
      courseC_maze_debugging6_authored_hint:
        courseC_maze_debugging6_a: |-
          - Cosa dovrebbe fare Scrat?
          - Cosa fa Scrat?
          - Questo cosa ti suggerisce?
        courseC_maze_debugging6_b: |-
          Dopo aver trovato e risolto il primo errore, procedi con il debugging (correzione degli errori) per trovare il secondo.

          Ripeti questo processo fino a quando il programma funziona!
      courseC_maze_debugging6_2018_authored_hint:
        courseC_maze_debugging6_a: |-
          - Cosa dovrebbe fare Scrat?
          - Cosa fa Scrat?
          - Questo cosa ti suggerisce?
        courseC_maze_debugging6_b: |-
          Dopo aver trovato e risolto il primo errore, procedi con il debugging (correzione degli errori) per trovare il secondo.

          Ripeti questo processo fino a quando il programma funziona!
      courseC_maze_debugging7_authored_hint:
        courseC_maze_debugging7_a: |-
          - Al primo passo tutto procede bene?
          - E al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging7_b: Non dimenticare di usare il pulsante "Fai un passo"
          per eseguire il programma un'istruzione alla volta!
        courseC_maze_debugging7_c: |-
          Dopo aver trovato e risolto il primo errore, fai attenzione a continuare ad usare il processo di debugging (correzione degli errori) per trovare il secondo.

          Ripeti il processo di debugging fino a quando il programma funziona!
      courseC_maze_debugging7_2018_authored_hint:
        courseC_maze_debugging7_a: |-
          - Al primo passo tutto procede bene?
          - E al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
        courseC_maze_debugging7_b: Non dimenticare di usare il pulsante "Fai un passo"
          per eseguire il programma un'istruzione alla volta!
        courseC_maze_debugging7_c: |-
          Dopo aver trovato e risolto il primo errore, fai attenzione a continuare ad usare il processo di debugging (correzione degli errori) per trovare il secondo.

          Ripeti il processo di debugging fino a quando il programma funziona!
      courseC_maze_debugging8_authored_hint:
        courseC_maze_debugging8_a: |-
          - Cosa dovrebbe fare Scrat?
          - Cosa fa Scrat?
          - Questo cosa ti suggerisce?
      courseC_maze_debugging8_predict1_authored_hint: {}
      courseC_maze_debugging8_predict1_2018_authored_hint: {}
      courseC_maze_debugging9_authored_hint: {}
      courseC_maze_debugging9_2018_authored_hint: {}
      courseC_maze_debugging_challenge1_authored_hint:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle!
          He needs to turn the same way each time!
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always
          start over, or remove all the code and find your own way!
      courseC_maze_debugging_challenge1_2018_authored_hint:
        courseC_maze_debugging_challenge1_a: Left or right? It's up to you!
        courseC_maze_debugging_challenge1_b: Scrat's path is the shape of a rectangle!
          He needs to turn the same way each time.
        courseC_maze_debugging_challenge1_c: If you are getting stuck, you can always
          start over and find a new way!
      courseC_maze_debugging_challenge2_authored_hint:
        courseC_maze_debugging_challenge2_b: If you are getting stuck, you can always
          start over or remove all the code and find your own way!
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow just using `move forward`, and only four turns. If you find a way to use the `repeat` block, there may be even more!

          ![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)
      courseC_maze_debugging_challenge2_2018_authored_hint:
        courseC_maze_debugging_challenge2_b: If you are getting stuck, try debugging
          the code.  Where does it go wrong?
        courseC_maze_debugging_challenge2_c: |-
          There are two different paths you can follow by just moving forward and turning four times. If you find one way to use a loop, there may be even more!

          ![](https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png)
      courseC_maze_loops10_authored_hint: {}
      courseC_maze_loops10_predict2_authored_hint: {}
      courseC_maze_loops11_authored_hint: {}
      courseC_maze_loops2_authored_hint:
        courseC_maze_loops2_a: You can solve this puzzle with just three blocks, including
          `when run`.
        courseC_maze_loops2_b: Try putting the `move forward` block inside of a `repeat`
          block to create a loop.
        courseC_maze_loops2_c: You need to repeat the `move forward` command 5 times
          to solve this puzzle.
      courseC_maze_loops2_predict1_authored_hint:
        courseC_maze_loops2_a: You can solve this puzzle with just three blocks, including
          `when run`.
        courseC_maze_loops2_b: Try putting the `move forward` block inside of a `repeat`
          block to create a loop.
        courseC_maze_loops2_c: You need to repeat the `move forward` command 5 times
          to solve this puzzle.
      courseC_maze_loops3_authored_hint:
        courseC_maze_loops3_a: This puzzle is very similar to the last one.
        courseC_maze_loops3_b: Use a `repeat 5 times` block to create the loop.
      courseC_maze_loops4_authored_hint:
        courseC_maze_loops4_a: Not all command blocks should be repeated.
        courseC_maze_loops4_b: Use two `repeat` blocks set to different numbers.
        courseC_maze_loops4_c: "`Turn right` once between the two loops."
      courseC_maze_loops5_authored_hint:
        courseC_maze_loops5_a: The best solution uses two `move forward` commands
          and one loop.
      courseC_maze_loops6_authored_hint:
        courseC_maze_loops6_a: If the pattern is hard to see, try coding it all out
          first and see what repeats over and over before you put the loops in.
        courseC_maze_loops6_b: |-
          Per inserire più blocchi all'interno di un ciclo `ripeti ... volte`, trascina un blocco `ripeti ... volte` dalla cassetta degli attrezzi all'area di lavoro, quindi trascina l'insieme di blocchi che devono ripetersi all'interno del ciclo `ripeti ... volte`.<br>
          <br>
          Controlla che il tutto sia attaccato al blocco `quando si clicca su "Esegui"`.
      courseC_maze_loops7_authored_hint:
        courseC_maze_loops7_a: Se fai fatica a capire lo schema che si ripete, prova
          prima a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca
          di vedere quali sono le parti che si ripetono per inserirle nel blocco `ripeti
          ... volte`.
      courseC_maze_loops8_authored_hint:
        courseC_puppy_loops8courseC_maze_loops8_a: Prova a suddividere questo problema
          in piccole parti. Prenditi tutto il tempo che serve. Non è necessario risolvere
          l'esercizio al primo tentativo!
        courseC_puppy_loops8courseC_maze_loops8_b: The first half of this path is
          similar to the stairs from the last puzzle, but it goes in a different direction.
        courseC_puppy_loops8courseC_maze_loops8_c: "There are different ways to solve
          this. \n\nYou will want to use at least two loops, and repeat a set of actions
          in the first one, then a single `move forward` in the other."
      courseC_maze_loops9_authored_hint:
        courseC_maze_loops9_1: 'If you''re having trouble finding where the code should
          repeat, try writing it down on a piece of paper and looking for a pattern. '
      courseC_maze_loops_challenge1_authored_hint:
        courseC_maze_loops_challenge1_a: Think about this path as being three different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: In between each `repeat` block, you will
          need to `turn left` or `turn right` to get ready Scrat for the next pattern.
      courseC_maze_loops_challenge1a_authored_hint:
        courseC_maze_loops_challenge1_a: Think about this path as being two different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: Can you remember how to use loops to repeat
          a staircase pattern?
      courseC_maze_loops_challenge1a_2018_authored_hint:
        courseC_maze_loops_challenge1_a: Think about this path as being two different
          pieces. Each one has a pattern you can repeat.
        courseC_maze_loops_challenge1_b: Can you remember how to use loops to repeat
          a staircase pattern?
      courseC_maze_loops_challenge2_authored_hint:
        courseC_maze_loops_challenge2_a: The original code would work great - if there
          was only one piece of treasure in each pile!
        courseC_maze_loops_challenge2_b: Use loops so you don't run out of `collect`
          blocks!
      courseC_maze_programming1_authored_hint:
        courseC_maze_programming1_0: Controlla che tutti i blocchi siano correttamente
          agganciati tra loro, quindi clicca nuovamente su "Esegui".
      courseC_maze_programming1_2018_authored_hint:
        courseC_maze_programming1_0: Controlla che tutti i blocchi siano correttamente
          agganciati tra loro, quindi clicca nuovamente su "Esegui".
      courseC_maze_programming2_authored_hint:
        courseC_maze_programming2_a: To use a `move forward` block, drag it from the
          toolbox out into the workspace and connect it to the `when run` block.
        courseC_maze_programming2_b: Controlla che tutti i blocchi siano correttamente
          agganciati tra loro, quindi clicca nuovamente su "Esegui".
      courseC_maze_programming2_2018_authored_hint:
        courseC_maze_programming2_a: To use a <xml><block type="maze_moveForward"/></xml>
          block, drag it out of the toolbox and snap it to the <xml><block type="when_run"/></xml>
          block.
        courseC_maze_programming2_b: Controlla che tutti i blocchi siano correttamente
          agganciati tra loro, quindi clicca nuovamente su "Esegui".
      courseC_maze_programming3_authored_hint:
        courseC_maze_programming3_a: Prima prova ad eseguire il programma per vedere
          dove sbaglia.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseC_maze_programming3_2018_authored_hint:
        courseC_maze_programming3_a: Prima prova ad eseguire il programma per vedere
          dove sbaglia.
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseC_maze_programming4_authored_hint:
        courseC_maze_programming4_a: Ricorda che quando usi l'istruzione `gira a ...`,
          devi ragionare secondo il *punto di vista dell'uccellino*. In questo caso,
          l'istruzione `gira a destra` farà dirigere l'uccellino verso il basso.
        courseC_maze_programming4_b: |-
          Per seguire il percorso:
          - vai avanti,
          - gira da una parte,
          - vai avanti,
          - gira dalla parte opposta,
          - vai avanti.
      courseC_maze_programming4_2018_authored_hint:
        courseC_maze_programming4_a: Ricorda che quando usi l'istruzione `gira a ...`,
          devi ragionare secondo il *punto di vista dell'uccellino*. In questo caso,
          l'istruzione `gira a destra` farà dirigere l'uccellino verso il basso.
        courseC_maze_programming4_b: |-
          Per seguire il percorso:
          - vai avanti,
          - gira da una parte,
          - vai avanti,
          - gira dalla parte opposta,
          - vai avanti.
      courseC_maze_programming5_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: L'uccellino deve fare una curva per portare a
          termine questo esercizio. Riesci a capire in quale direzione?
        courseC_maze_programming5_c: La soluzione corretta ha due blocchi `vai avanti`,
          una curva e altri due blocchi `vai avanti`.
      courseC_maze_programming5_2018_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: L'uccellino deve fare una curva per portare a
          termine questo esercizio. Riesci a capire in quale direzione?
        courseC_maze_programming5_c: La soluzione corretta ha due blocchi `vai avanti`,
          una curva e altri due blocchi `vai avanti`.
      courseC_maze_programming6_authored_hint:
        courseC_maze_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseC_maze_programming6_b: Traccia con il tuo dito il percorso dall'uccellino
          fino al maialino, che movimenti hai fatto?
        courseC_maze_programming6_c: Ricorda che prima devi far girare l'uccellino,
          visto che inizialmente è rivolto verso un muro.
        courseC_maze_programming6_d: Ti sei bloccato? Guarda questo percorso!
      courseC_maze_programming6_2018_authored_hint:
        courseC_maze_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseC_maze_programming6_b: Traccia con il tuo dito il percorso dall'uccellino
          fino al maialino, che movimenti hai fatto?
        courseC_maze_programming6_c: Ricorda che prima devi far girare l'uccellino,
          visto che inizialmente è rivolto verso un muro.
        courseC_maze_programming6_d: Ti sei bloccato? Guarda questo percorso!
      courseC_maze_programming7_authored_hint:
        courseC_maze_programming7_a: Non dimenticare di usare il pulsante "Fai un
          passo" che esegue un blocco per volta permettendoti di notare più facilmente
          gli errori.
        courseC_maze_programming7_b: Se hai difficoltà a risolvere questo esercizio,
          prova prima a scrivere le mosse su un pezzo di carta.
      courseC_maze_programming7_2018_authored_hint:
        courseC_maze_programming7_a: Non dimenticare di usare il pulsante "Fai un
          passo" che esegue un blocco per volta permettendoti di notare più facilmente
          gli errori.
        courseC_maze_programming7_b: Se hai difficoltà a risolvere questo esercizio,
          prova prima a scrivere le mosse su un pezzo di carta.
      courseC_maze_programming8_authored_hint:
        courseC_maze_programming8_a: Ricordati che se ti blocchi puoi usare il pulsante
          "Fai un passo" per analizzare il tuo codice linea per linea.
        courseC_maze_programming8_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseC_maze_programming8_2018_authored_hint:
        courseC_maze_programming8_a: Ricordati che se ti blocchi puoi usare il pulsante
          "Fai un passo" per analizzare il tuo codice linea per linea.
        courseC_maze_programming8_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseC_maze_programming8_predict1_authored_hint: {}
      courseC_maze_programming8_predict1_2018_authored_hint: {}
      courseC_maze_programming9_authored_hint: {}
      courseC_maze_programming9_2018_authored_hint: {}
      courseC_maze_programming_challenge1_authored_hint:
        courseC_maze_programming_challenge1_a: There are many ways to get to the pig.
          Use your finger to find a path then program it!
      courseC_maze_programming_challenge1_2018_authored_hint:
        courseC_maze_programming_challenge1_a: There are many ways to get to the pig.
          Use your finger to find a path and then program it!
      courseC_maze_programming_challenge2_authored_hint:
        courseC_maze_programming_challenge2_a: "*If you send me backwards, be extra
          careful that I turn the correct way!*"
        courseC_maze_programming_challenge2_b: The shortest solution use only 5 blocks,
          but it uses the `repeat` block!
      courseC_maze_programming_challenge2_2018_authored_hint:
        courseC_maze_programming_challenge2_a: '*"If you send me backwards, be extra
          careful that I turn the correct way!"*'
        courseC_maze_programming_challenge2_b: |-
          The shortest solution uses only 5 blocks, but it uses this block:
          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_playLab_embedded_authored_hint: {}
      courseC_puppy_loops10_authored_hint:
        courseC_puppy_loops9_1: I need to move two or three time between each turn.
      courseC_puppy_loops11_authored_hint: {}
      courseC_puppy_loops8_authored_hint:
        2-3_Maze_Loops_17_a: Prova a suddividere questo problema in piccole parti.
          Prenditi tutto il tempo che serve. Non è necessario risolvere l'esercizio
          al primo tentativo!
        2-3_Maze_Loops_17_b: The first half of this path is similar to the stair step
          from the last puzzle, but it goes a different direction.
        courseC_puppy_loops8_c: There are different ways to solve this. You will want
          to use at least two loops, and repeat either a set of actions or a single
          movement.
      courseC_puppy_loops8courseC_maze_loops8_authored_hint:
        courseC_puppy_loops8courseC_maze_loops8_a: Prova a suddividere questo problema
          in piccole parti. Prenditi tutto il tempo che serve. Non è necessario risolvere
          l'esercizio al primo tentativo!
        courseC_puppy_loops8courseC_maze_loops8_b: The first half of this path is
          similar to the stairs from the last puzzle, but it goes in a different direction.
        courseC_puppy_loops8courseC_maze_loops8_c: "There are different ways to solve
          this. \n\nYou will want to use at least two loops, and repeat a set of actions
          in the first one, then a single `move forward` in the other."
      courseC_puppy_loops9_authored_hint:
        courseC_puppy_loops9_1: If you repeat the first few actions, you can get me
          to the pig with just four more blocks!
      courseC_starWars_loops1_authored_hint:
        courseC_starWars_loops1_a: Quando BB-8 rotola su un rottame metallico lo recupera
          automaticamente.
        courseC_starWars_loops1_b: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
        courseC_starWars_loops1_c: Devi andare avanti cinque volte per risolvere questo
          esercizio.
      courseC_starWars_loops10_authored_hint:
        courseC_starWars_loops10_a: Questo schema non ricorda dei giganti gradini
          di una scala? Vedi se riesci a sfruttare ciò che hai imparato nei precedenti
          esercizi per fare le curve giuste.
        courseC_starWars_loops10_b: Se vuoi usare meno blocchi, puoi mettere un ciclo
          `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
        courseC_starWars_loops10_c: Non aver paura di sbagliare! Esegui il codice
          per vedere cosa succede, anche se non hai ancora risolto l'esercizio.
      courseC_starWars_loops10_2018_authored_hint:
        courseC_starWars_loops10_a: Questo schema non ricorda dei giganti gradini
          di una scala? Vedi se riesci a sfruttare ciò che hai imparato nei precedenti
          esercizi per fare le curve giuste.
        courseC_starWars_loops10_b: Se vuoi usare meno blocchi, puoi mettere un ciclo
          `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
        courseC_starWars_loops10_c: Non aver paura di sbagliare! Esegui il codice
          per vedere cosa succede, anche se non hai ancora risolto l'esercizio.
      courseC_starWars_loops10_predict2_authored_hint: {}
      courseC_starWars_loops10_predict2_2018_authored_hint: {}
      courseC_starWars_loops11_authored_hint: {}
      courseC_starWars_loops11_2018_authored_hint: {}
      courseC_starWars_loops1_2018_authored_hint:
        courseC_starWars_loops1_a: Quando BB-8 rotola su un rottame metallico lo recupera
          automaticamente.
        courseC_starWars_loops1_b: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
        courseC_starWars_loops1_c: Devi andare avanti cinque volte per risolvere questo
          esercizio.
      courseC_starWars_loops2_authored_hint:
        courseC_starWars_loops2_a: Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco `ripeti ... volte` e inserisci al suo interno
          i blocchi che vuoi ripetere.
      courseC_starWars_loops2_2018_authored_hint:
        courseC_starWars_loops2_a: Per ripetere una sequenza di istruzioni, trascina
          nell'area di lavoro un blocco `ripeti ... volte` e inserisci al suo interno
          i blocchi che vuoi ripetere.
      courseC_starWars_loops4_authored_hint:
        courseC_starWars_loops4_c: Cliccando sulla piccola freccia accanto a "sinistra"
          nel blocco `gira a ...` puoi sostituire con "destra".
        courseC_starWars_loops4_a: Usa due blocchi `ripeti ... volte`.
        courseC_starWars_loops4_b: 'Ogni ciclo `ripeti ... volte` avrà una sola istruzione
          al suo interno: `vai avanti`.'
      courseC_starWars_loops4_2018_authored_hint:
        courseC_starWars_loops4_c: Cliccando sulla piccola freccia accanto a "sinistra"
          nel blocco `gira a ...` puoi sostituire con "destra".
        courseC_starWars_loops4_a: Usa due blocchi `ripeti ... volte`.
        courseC_starWars_loops4_b: 'Ogni ciclo `ripeti ... volte` avrà una sola istruzione
          al suo interno: `vai avanti`.'
      courseC_starWars_loops5_authored_hint:
        courseC_starWars_loops5_b: Per far muovere BB-8 verso il basso, devi farlo
          girare e poi farlo andare avanti.
        courseC_starWars_loops5_a: La soluzione migliore usa una curva, un singolo
          `vai avanti`, un'altra curva e infine un ciclo.
      courseC_starWars_loops5_2018_authored_hint:
        courseC_starWars_loops5_b: Per far muovere BB-8 verso il basso, devi farlo
          girare e poi farlo andare avanti.
        courseC_starWars_loops5_a: La soluzione migliore usa una curva, un singolo
          `vai avanti`, un'altra curva e infine un ciclo.
      courseC_starWars_loops6_authored_hint:
        courseC_starWars_loops6_a: Prova a scrivere tutte le mosse su un pezzo di
          carta e cerca una sequenza che si ripete.
        courseC_starWars_loops6_b: Se vuoi usare meno blocchi, puoi mettere un ciclo
          `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_starWars_loops6_2018_authored_hint:
        courseC_starWars_loops6_a: Prova a scrivere tutte le mosse su un pezzo di
          carta e cerca una sequenza che si ripete.
        courseC_starWars_loops6_b: Se vuoi usare meno blocchi, puoi mettere un ciclo
          `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseC_starWars_loops7_authored_hint:
        courseC_starWars_loops7_a: Questo schema sembra più difficile di quello che
          è! Inizia con un semplice gradino. Permette di recuperare tutti i rottami
          metallici?
        courseC_starWars_loops7_b: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere tutte le mosse su un foglio di carta e cerca di trovare
          uno schema che si ripete.
        courseC_starWars_loops7_c: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
      courseC_starWars_loops7_2018_authored_hint:
        courseC_starWars_loops7_a: Questo schema sembra più difficile di quello che
          è! Inizia con un semplice gradino. Permette di recuperare tutti i rottami
          metallici?
        courseC_starWars_loops7_b: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere tutte le mosse su un foglio di carta e cerca di trovare
          uno schema che si ripete.
        courseC_starWars_loops7_c: Non aver paura di sbagliare! Esegui il codice per
          vedere cosa succede, anche se non hai ancora risolto l'esercizio.
      courseC_starWars_loops8_authored_hint:
        course_starWars_loops8_a: Prova a suddividere questo problema in piccole parti.
          Prenditi tutto il tempo che serve. Non è necessario risolvere l'esercizio
          al primo tentativo!
        course_starWars_loops8_b: Pensa alla prima parte di questo esercizio come
          ad una scalinata. Come puoi risolverla?
        course_starWars_loops8_c: |-
          Dai un'occhiata a questo percorso:

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2018_authored_hint:
        course_starWars_loops8_a: Prova a suddividere questo problema in piccole parti.
          Prenditi tutto il tempo che serve. Non è necessario risolvere l'esercizio
          al primo tentativo!
        course_starWars_loops8_b: Pensa alla prima parte di questo esercizio come
          ad una scalinata. Come puoi risolverla?
        course_starWars_loops8_c: |-
          Dai un'occhiata a questo percorso:

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops9_authored_hint:
        course_starWars_loops9_b: Puoi mettere più di un blocco all'interno del blocco
          `ripeti ... volte`.
        course_starWars_loops9_c: |-
          Non dovrai mai girare a sinistra per risolvere questo esercizio. Tutte le curve saranno a destra.

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2018_authored_hint:
        course_starWars_loops9_b: Puoi mettere più di un blocco all'interno del blocco
          `ripeti ... volte`.
        course_starWars_loops9_c: |-
          Non dovrai mai girare a sinistra per risolvere questo esercizio. Tutte le curve saranno a destra.

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseD_Frozen_nested1_authored_hint:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_Frozen_nested2_authored_hint:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while
          `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can
          repeat the code by adding a loop around the outside.
      courseD_Frozen_nested3_authored_hint:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created
          to draw a line of shapes and nest it inside of another loop.  At the bottom,
          before the outside loop ends, add a block that will turn Elsa around.  \n\n-
          Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees
          if you are repeating the outer loop 6 times"
      courseD_Frozen_nested4_authored_hint:
        courseD_artist_project4_a: |
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />


          Here's a set of hexagons with squares:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then
          draw a second snowflake.
      courseD_Frozen_nested5_authored_hint:
        courseD_artist_project4_a: |
          Lines of 2 hexagons and 4 triangles:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_Frozen_nested6_authored_hint:
        courseD_artist_project1a_a: |
          This stair step uses a 76 degree turn and repeats 4 times.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps
          from other puzzles, but using a different angle.
      courseD_Frozen_nested7_authored_hint:
        courseD_artist_project2a_a: |
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_Frozen_nested8_authored_hint:
        courseD_artist_project3a_a: You can choose different amounts to rotate your
          shape! What about 18 times with a 20 degree turn in between?
      courseD_Frozen_nested9_authored_hint:
        courseD_artist_project4a_a: |
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_1_2018_authored_hint:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_2_2018_authored_hint:
        courseD_artist_project1_b: Remember that `move` draws a line, while `jump`
          does not.
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
      courseD_artist_3_2018_authored_hint: {}
      courseD_artist_4_2018_authored_hint: {}
      courseD_artist_5_2018_authored_hint:
        '1': If you are switching your shapes, don't forget that you will need to
          switch their angles, too!
      courseD_artist_6_2018_authored_hint: {}
      courseD_artist_7_2018_authored_hint:
        courseD_artist_project2a_a: |
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_8_2018_authored_hint:
        courseD_artist_project3a_a: You can choose different amounts to rotate your
          shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_9_2018_authored_hint:
        courseD_artist_project4a_a: |
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_Template_2018_authored_hint: {}
      courseD_artist_binary1_authored_hint:
        courseD_artist_binary1_a: 'Sostituisci i punti interrogativi "???" nel blocco
          di testo con la codifica binaria dell''immagine da realizzare: uni e zeri.'
        courseD_artist_binary1_b: L'artista disegnerà uno spazio bianco per ogni 1
          e uno spazio nero per ogni 0.
        courseD_artist_binary1_c: |-
          Ecco come puoi inserire la codifica binaria:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2018_authored_hint:
        courseD_artist_binary1_a: 'Sostituisci i punti interrogativi "???" nel blocco
          di testo con la codifica binaria dell''immagine da realizzare: uni e zeri.'
        courseD_artist_binary1_b: L'artista disegnerà uno spazio bianco per ogni 1
          e uno spazio nero per ogni 0.
        courseD_artist_binary1_c: |-
          Ecco come puoi inserire la codifica binaria:

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary2_authored_hint:
        courseD_artist_binary2_a: È già tutto pronto, devi solo cliccare su "Esegui"
          per vedere questo programma in azione!
      courseD_artist_binary2_2018_authored_hint:
        courseD_artist_binary2_a: È già tutto pronto, devi solo cliccare su "Esegui"
          per vedere questo programma in azione!
      courseD_artist_binary3_authored_hint:
        courseD_artist_binary3_a: Una delle quattro sequenze binarie che vedi nella
          cassetta degli attrezzi risolve questo esercizio!
        courseD_artist_binary3_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa accade.
      courseD_artist_binary3_2018_authored_hint:
        courseD_artist_binary3_a: Una delle quattro sequenze binarie che vedi nella
          cassetta degli attrezzi risolve questo esercizio!
        courseD_artist_binary3_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa accade.
      courseD_artist_binary4_authored_hint:
        courseD_artist_binary4_a: Guarda i primi tre quadrati in alto a sinistra.
          Potrebbe bastare la ripetizione di questi tre per completare tutta la figura?
        courseD_artist_binary4_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa accade.
      courseD_artist_binary4_2018_authored_hint:
        courseD_artist_binary4_a: Guarda i primi tre quadrati in alto a sinistra.
          Potrebbe bastare la ripetizione di questi tre per completare tutta la figura?
        courseD_artist_binary4_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa accade.
      courseD_artist_binary5_authored_hint:
        courseD_artist_binary5_a: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary5_b: Per trasformare l'immagine in un sorriso, devi solo
          invertire due righe.
        courseD_artist_binary5_c: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere le sequenze binarie su un foglio di carta a quadretti e
          cerca di capire lo schema.
      courseD_artist_binary5_2018_authored_hint:
        courseD_artist_binary5_a: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary5_b: Per trasformare l'immagine in un sorriso, devi solo
          invertire due righe.
        courseD_artist_binary5_c: Se hai difficoltà nella risoluzione di questo esercizio,
          prova a scrivere le sequenze binarie su un foglio di carta a quadretti e
          cerca di capire lo schema.
      courseD_artist_binary6_authored_hint:
        courseD_artist_binary6_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary6_b: Puoi anche costruire la sequenza binaria una cifra
          alla volta e verificarne di volta in volta l'effetto!
      courseD_artist_binary6_2018_authored_hint:
        courseD_artist_binary6_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary6_b: Puoi anche costruire la sequenza binaria una cifra
          alla volta e verificarne di volta in volta l'effetto!
      courseD_artist_binary7_authored_hint:
        courseD_artist_binary7_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary7_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa accade.
      courseD_artist_binary7_2018_authored_hint:
        courseD_artist_binary7_a: 'Conta partendo dall''alto a sinistra: quante caselle
          devi considerare per trovare la sequenza che si ripete?'
        courseD_artist_binary7_b: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa accade.
      courseD_artist_binary8_authored_hint:
        courseD_artist_binary8_a: A volte la spirale può confondere. Per creare questo
          disegno ragiona di volta in volta su una sola riga orizzontale.
        courseD_artist_binary8_b: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary8_c: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa accade.
      courseD_artist_binary8_2018_authored_hint:
        courseD_artist_binary8_a: A volte la spirale può confondere. Per creare questo
          disegno ragiona di volta in volta su una sola riga orizzontale.
        courseD_artist_binary8_b: Per capire che blocchi devi spostare, prova prima
          ad eseguire il programma.
        courseD_artist_binary8_c: Non aver paura di sbagliare! Anche se non pensi
          di aver trovato la soluzione corretta, prova ad inserire una sequenza ed
          eseguire il codice per vedere cosa accade.
      courseD_artist_binaryFP_authored_hint: {}
      courseD_artist_binaryFP8_authored_hint: {}
      courseD_artist_binaryFP_2018_authored_hint: {}
      courseD_artist_binary_challenge2_authored_hint:
        courseD_artist_binary_challenge2_a: |-
          The best tip I have for you is to press `⟲ Start Over` if it starts to get really messy.

          There are only few lines wrong in the original program. If one approach fails, back up and try again. There is a solution!
      courseD_artist_binary_challenge2_2018_authored_hint:
        courseD_artist_binary_challenge2_a: There are only few lines wrong in the
          original program.
      courseD_artist_binary_challenge3_authored_hint:
        courseD_artist_binary_challenge3_a: |-
          The best tip I have for you is to press `⟲ Start Over` if it starts to get really messy.

          There are only few lines wrong in the original program. If one approach fails, back up and try again. There is a solution!
      courseD_artist_embed_frozen_authored_hint: {}
      courseD_artist_embed_frozen2_authored_hint: {}
      courseD_artist_embedded_project1a_authored_hint: {}
      courseD_artist_functions10_authored_hint:
        courseD_artist_functions10_b: This drawing is a lot like the last one, except
          the function draws a different kind of line.
        courseD_artist_functions10_a: To get around using multiple `move forward`
          blocks, create a `draw hexagon` function and call that multiple times.
      courseD_artist_functions2_authored_hint:
        courseD_artist_functions2_a: |-
          Il programma deve:<br>
          - usare la funzione<br>
          - andare avanti di 100 + 75 pixel<br>
          - usare la funzione
      courseD_artist_functions3_authored_hint:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.

          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
      courseD_artist_functions4_authored_hint:
        courseD_artist_functions4_a: Try using a function!
      courseD_artist_functions5_authored_hint:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
      courseD_artist_functions6_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll
          create a function for it in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops, where the inner
          loop makes the square and the outer loop rotates the square four times.
      courseD_artist_functions7_authored_hint:
        courseD_artist_functions7_a: Try creating your function first then adding
          in windows one at a time.
        courseD_artist_functions7_b: You shouldn't need to add any extra repeat loops.  Just
          jump the artist 100 pixels forward for each top window, and 150 pixels down
          to get the bottom windows.
      courseD_artist_functions8_authored_hint:
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.

          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_b: After your first line of squares, you need to
          move the artist down and back before you start your second line of squares.
        courseD_artist_functions8_c: You should move the artist back a different number
          of pixels for even lines than for odd ones.
      courseD_artist_functions9_authored_hint:
        courseD_artist_functions9_a: To get around the need to have multiple `move
          forward` blocks, create a `draw triangle` function and call that multiple
          times.
        courseD_artist_functions9_b: This drawing is made by creating a line of triangles
          and turning either 60 or 120 degrees after each time you draw the triangle
          line.
      courseD_artist_nestedLoops1_authored_hint:
        courseD_artist_nestedLoops1_a: The easiest way to draw this is to move forward
          and use right turns.
        courseD_artist_nestedLoops1_b: You can draw this triangle with a `repeat`
          loop with two blocks inside. Which blocks do you need?
        courseD_artist_nestedLoops1_c: Try writing the steps on paper and looking
          for patterns that can be simplified with loops.
      courseD_artist_nestedLoops10_authored_hint: {}
      courseD_artist_nestedLoops10_2018_authored_hint: {}
      courseD_artist_nestedLoops1_2018_authored_hint:
        courseD_artist_nestedLoops1_a: The easiest way to draw this is to move forward
          and use right turns.
        courseD_artist_nestedLoops1_b: You can draw this triangle with a `repeat`
          loop with two blocks inside. Which blocks do you need?
        courseD_artist_nestedLoops1_c: Try writing the steps on paper and looking
          for patterns that can be simplified with loops.
      courseD_artist_nestedLoops1a_authored_hint:
        courseD_artist_nestedLoops1a_a: 'You will need to draw a total of 6 triangles,
          each rotated 60 degrees.  '
        courseD_artist_nestedLoops1a_b: If you create your triangle with a loop, the
          artist should be facing the same way as they started. This will make the
          60 degree turns a lot easier.
        courseD_artist_nestedLoops1a_c: If you want colors, use the `set color` block
          in your code. You don't have to match the colors in the template image.
      courseD_artist_nestedLoops1a_2018_authored_hint:
        courseD_artist_nestedLoops1a_a: |-
          You will need to draw a total of 6 triangles. After finishing each triangle, rotate 60 degrees and move to start the next triangle.

          ![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)
        courseD_artist_nestedLoops1a_b: If you create your triangle with a loop, the
          artist should be facing the same way as they started. This will make the
          60 degree turns a lot easier.
        courseD_artist_nestedLoops1a_c: If you want colors, use the `set color` block
          in your code. You don't have to match the colors in the template image.
      courseD_artist_nestedLoops2_authored_hint:
        courseD_artist_nestedLoops2_a: Nest your loops by surrounding your triangle
          code with another `repeat` loop.
        courseD_artist_nestedLoops2_b: Remember to put the `turn` block inside of
          the loop so that the artist turns after each triangle.
      courseD_artist_nestedLoops2_2018_authored_hint:
        courseD_artist_nestedLoops2_a: Nest your loops by surrounding your triangle
          code with another `repeat` loop.
        courseD_artist_nestedLoops2_b: Remember to put the `turn` block inside of
          the loop so that the artist turns after each triangle.
      courseD_artist_nestedLoops3_authored_hint:
        courseD_artist_nestedLoops3_a: Prova ad usare il blocco `salta in avanti`
          per passare dalla cima di un quadrato alla posizione in cui devi iniziare
          il successivo.
        courseD_artist_nestedLoops3_b: 'Don''t forget to use a nested loop to solve
          this puzzle quickly. '
        courseD_artist_nestedLoops3_c: 'Start by using a `repeat` loop to make one
          square.  Next, repeat that square 8 times, jumping 40 pixels in between. '
      courseD_artist_nestedLoops3_2018_authored_hint:
        courseD_artist_nestedLoops3_a: Prova ad usare il blocco `salta in avanti`
          per passare dalla cima di un quadrato alla posizione in cui devi iniziare
          il successivo.
        courseD_artist_nestedLoops3_b: 'Don''t forget to use a nested loop to solve
          this puzzle quickly. '
        courseD_artist_nestedLoops3_c: 'Start by using a `repeat` loop to make one
          square.  Next, repeat that square 8 times, jumping 40 pixels in between. '
      courseD_artist_nestedLoops4_authored_hint:
        courseD_artist_nestedLoops4_d: To solve this correctly, you'll need to move
          **before** you turn, or else your circles will be off by the tiniest little
          amount!
        courseD_artist_nestedLoops4_a: |-
          To make a circle:
          - Repeat 360 times
          - Move forward 1 pixel
          - Turn left 1 degree
        courseD_artist_nestedLoops4_b: Don't forget to jump forward by 50 pixels between
          circles.
        courseD_artist_nestedLoops4_c: Use a nested loop to draw your circles 4 times.
      courseD_artist_nestedLoops4_2018_authored_hint:
        courseD_artist_nestedLoops4_d: To solve this correctly, you'll need to move
          **before** you turn, or else your circles will be off by the tiniest little
          amount!
        courseD_artist_nestedLoops4_a: |-
          To make a circle:
          - Repeat 360 times
          - Move forward 1 pixel
          - Turn left 1 degree
        courseD_artist_nestedLoops4_b: Don't forget to jump forward by 50 pixels between
          circles.
        courseD_artist_nestedLoops4_c: Use a nested loop to draw your circles 4 times.
      courseD_artist_nestedLoops5_authored_hint:
        courseD_artist_nestedLoops5_a: |-
          To do this easily:

          - repeat 4 times
          - make a circle
          - jump forward 50 pixels
          - turn right 90 degrees
        courseD_artist_nestedLoops5_b: To make a circle set a repeat loop to repeat
          360 times. Inside the loop, move forward 1 pixel and turn by 1 degree.
      courseD_artist_nestedLoops5_2018_authored_hint:
        courseD_artist_nestedLoops5_a: |-
          To do this easily:

          - repeat 4 times
          - make a circle
          - jump forward 50 pixels
          - turn right 90 degrees
        courseD_artist_nestedLoops5_b: To make a circle you'll need to set a repeat
          loop to repeat 360 times. Inside the loop, move forward 1 pixel and turn
          by 1 degree.
      courseD_artist_nestedLoops6_authored_hint:
        courseD_artist_nestedLoops6_a: You'll need to repeat your outer loop 6 times
          now, instead of only 4.
        courseD_artist_nestedLoops6_b: 'Now that you''re breaking 360 degrees into
          six pieces instead of only four, you will only need to turn 60 degrees between
          circles. '
      courseD_artist_nestedLoops7_authored_hint:
        courseD_artist_nestedLoops7_a: |-
          Use a nested loop, where the inner loop is the code for a square.

          - repeat 6 times
          - make square
          - jump forward by 50 pixels
          - turn 60 degrees
        courseD_artist_nestedLoops7_b: |-
          Use a nested loop, where the inner loop is the code for a square.

          - repeat 6 times
          - make square
          - jump forward by **50 pixels**
          - turn **60 degrees**
      courseD_artist_nestedLoops7_2018_authored_hint:
        courseD_artist_nestedLoops7_a: You'll need to use nested loops here. First,
          use a loop to draw a square. What will the outer loop do if the inner loop
          draws a square?
        courseD_artist_nestedLoops7_b: |-
          Use a nested loop, where the inner loop is the code for a square.

          - repeat 6 times
          - make square
          - jump forward by **50 pixels**
          - turn **60 degrees**
      courseD_artist_nestedLoops8_authored_hint:
        courseD_artist_nestedLoops8_a: If you're stuck, start by looking at the last
          puzzle, then change the things that are different.
        courseD_artist_nestedLoops8_b: If you're stuck, start by looking at the last
          puzzle, then change the things that are different.
        courseD_artist_nestedLoops8_c: |-
          Use a nested loop:

          - Repeat 8 times
          - draw a hexagon
          - jump forward 50 pixels
          - turn right 45 degrees
      courseD_artist_nestedLoops8_2018_authored_hint:
        courseD_artist_nestedLoops8_a: To have 8 hexagons in your drawing, you'll
          need to turn **45 degrees** between each of them. Why? Because 360 degrees
          (a full turn around) divided by 8 (the number of hexagons) is 45 degrees.
        courseD_artist_nestedLoops8_b: If you're stuck, start by looking at the last
          puzzle, then change the things that are different.
        courseD_artist_nestedLoops8_c: |-
          Use a nested loop:

          - Repeat 8 times
          - draw a hexagon
          - jump forward 50 pixels
          - turn right 45 degrees
      courseD_artist_nestedLoops9_authored_hint:
        courseD_artist_nestedLoops9_a: Start by using a nested loop like you had before,
          but this time, make it with squares.
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end
          of the first set, but this time use triangles.
        courseD_artist_nestedLoops9_c: |-
          Use two nested loops:
          - Repeat 8 times
          - draw a square
          - jump forward 50 pixels
          - turn right by 45 degrees
          - Repeat 8 times
          - draw a triangle
          - jump forward 50 pixels
          - turn right by 45 degrees
      courseD_artist_nestedLoops9_2018_authored_hint:
        courseD_artist_nestedLoops9_a: Start by using a nested loop like you had before,
          but this time, make it with squares.
        courseD_artist_nestedLoops9_b: Add a second set of nested loops to the end
          of the first set, but this time use triangles.
        courseD_artist_nestedLoops9_c: |-
          Use two nested loops:
          - Repeat 8 times
          - draw a square
          - jump forward 50 pixels
          - turn right by 45 degrees
          - Repeat 8 times
          - draw a triangle
          - jump forward 50 pixels
          - turn right by 45 degrees
      courseD_artist_nestedLoops9_predict1_authored_hint: {}
      courseD_artist_nestedLoops9_predict1_2018_authored_hint: {}
      courseD_artist_nestedLoopsFP_authored_hint:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          This image was made using a single nested loop that repeats a hexagon (with 50px sides) 15 times using a 48 degree turn.
        courseD_artist_nestedLoopsFP_b: |
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          This image was made using similar code to other levels in this series, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          This image was made using a single nested loop that repeats a pentagon (with 50px sides) 15 times using a 48 degree turn.
      courseD_artist_nestedLoopsFP_2018_authored_hint:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          This image was made using a single nested loop that repeats a hexagon (with 50px sides) 15 times using a 48 degree turn.
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          This image was made using similar code to other levels you've done before, but with circles (repeat 360 times: move forward 1, turn 1 degree).
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          This image was made using a single nested loop that repeats a pentagon (with 50px sides) 15 times using a 48 degree turn.
      courseD_artist_nestedLoopsPre1_authored_hint: {}
      courseD_artist_nestedLoops_challenge1_authored_hint:
        courseD_artist_nestedLoops_challenge1_a: Start by making a nested loop to
          create four octagons. Turn 45 degrees to make the octagon. Jump, then turn
          90 degrees after each one.
        courseD_artist_nestedLoops_challenge1_b: Add code to draw a triangle inside
          of your nested loop. Use 120 degree turns for your triangle.
        courseD_artist_nestedLoops_challenge1_c: |-
          Use a nested loop:
          - Repeat 4 times
          - draw an octagon
          - draw a triangle
          - jump forward 50 pixels
          - turn right by 90 degrees
        courseD_artist_nestedLoops_challenge1_d: Put all of your code inside of a
          `repeat 4 times` loop to finish it off.
      courseD_artist_nestedLoops_challenge1_2018_authored_hint:
        courseD_artist_nestedLoops_challenge1_a: Start by changing the color to blue,
          then create an octagon with 50 pixel sides and 45 degree left turns.
        courseD_artist_nestedLoops_challenge1_b: Add the code to change the color
          to green, and make a triangle with 50 pixel sides and 120 degree left turns.
        courseD_artist_nestedLoops_challenge1_c: After you've drawn both shapes, you
          will need to jump forward by 50 pixels before you turn right by 90 degrees.
        courseD_artist_nestedLoops_challenge1_d: Put all of your code inside of a
          `repeat 4 times` loop to finish it off.
      courseD_artist_nestedLoops_challenge2_authored_hint:
        courseD_artist_nestedLoops_challenge2_a: To draw a regular octagon, the artist
          needs to turn 45 degrees 8 times.
        courseD_artist_nestedLoops_challenge2_b: To draw a square, the artist needs
          to turn 90 degrees 4 times.
      courseD_artist_nestedLoops_challenge2_2018_authored_hint:
        courseD_artist_nestedLoops_challenge2_a: To draw a regular octagon, the artist
          needs to turn 45 degrees 8 times.
        courseD_artist_nestedLoops_challenge2_b: To draw a square, the artist needs
          to turn 90 degrees 4 times.
      courseD_artist_project1_authored_hint:
        courseD_artist_project1_a: You can use the drop down menu on the `turn` blocks
          to see which angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_project1_2018_authored_hint:
        courseD_artist_project1_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project1_b: Remember that `move forward` draws a line, while
          `jump forward` does not.
      courseD_artist_project1a_authored_hint:
        courseD_artist_project1a_a: |
          This stair step uses a 76 degree turn and repeats 4 times.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps
          from other puzzles, just with a different angle.
      courseD_artist_project1a_2018_authored_hint:
        courseD_artist_project1a_a: |
          This stair step uses a 76 degree turn and repeats 4 times.

          <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" />
        courseD_artist_project1a_b: These patterns are a lot like the stair steps
          from other puzzles, but using a different angle.
      courseD_artist_project2_authored_hint:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while
          `jump forward` does not.
        courseD_artist_project2_b: If you draw an image, then jump forward, you can
          draw more than one by putting a loop around the entire block of code.
      courseD_artist_project2Template_authored_hint: {}
      courseD_artist_project2Template_2018_authored_hint: {}
      courseD_artist_project2_2018_authored_hint:
        courseD_artist_project2_a: Remember that `move forward` draws a line, while
          `jump forward` does not.
        courseD_artist_project2_b: After you draw and move the first time, you can
          repeat the code by adding a loop around the outside.
      courseD_artist_project2a_authored_hint:
        courseD_artist_project2a_a: |
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project2a_2018_authored_hint:
        courseD_artist_project2a_a: |
          This drawing was made by nesting a loop of 4 stairs and a `turn right 180 degrees` block inside of a `repeat 2 times` block.

          <img src="https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png" width="200px" />
      courseD_artist_project3_authored_hint:
        courseD_artist_project3_a: "Try nested loops!\n\nUse the code that you created
          to draw a line of shapes and nest it inside of another loop.  At the bottom,
          before the outside loop ends, add a block that will turn Elsa around.  \n\n-
          Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees
          if you are repeating the outer loop 6 times"
        courseD_artist_project3_b: You can use the drop down menu on the `turn` blocks
          to see which angle you need!
      courseD_artist_project3_2018_authored_hint:
        courseD_artist_project3_a: Use the drop down menu on the `turn` blocks to
          choose the angle you need!
        courseD_artist_project3_b: "Try nested loops!\n\nUse the code that you created
          to draw a line of shapes and nest it inside of another loop.  At the bottom,
          before the outside loop ends, add a block that will turn Elsa around.  \n\n-
          Try 72 degrees if you are repeating the outer loop 5 times\n- Try 60 degrees
          if you are repeating the outer loop 6 times"
      courseD_artist_project3a_authored_hint:
        courseD_artist_project3a_a: You can also choose different ways to rotate your
          shape! What about 18 times, with a 20 degree turn in between?
      courseD_artist_project3a_2018_authored_hint:
        courseD_artist_project3a_a: You can choose different amounts to rotate your
          shape! What about 18 times with a 20 degree turn in between?
      courseD_artist_project4_authored_hint:
        courseD_artist_project4_a: |
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />


          Here's a set of hexagons with squares:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: 'You will need to make the second line of shapes
          in the same way as the first: make one, then repeat it with a jump in between,
          then repeat that image with rotation.'
      courseD_artist_project4_2018_authored_hint:
        courseD_artist_project4_a: |
          Here is the pentagon snowflake with a turn of 36 degrees before a triangle snowflake:

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />


          Here's a set of hexagons with squares:

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: To try this, draw your first snowflake, turn, then
          draw a second snowflake.
      courseD_artist_project4a_authored_hint:
        courseD_artist_project4a_a: |
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2018_authored_hint:
        courseD_artist_project4a_a: |
          Here are two different lengths of snowflake, drawn one after another (with a 30 degree turn in between.)

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project5_authored_hint:
        courseD_artist_project4_a: |
          Lines of 2 hexagons and 4 triangles:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2018_authored_hint:
        courseD_artist_project4_a: |
          Lines of 2 hexagons and 4 triangles:

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_projectTemplate_authored_hint: {}
      courseD_artist_projectTemplate_2018_authored_hint: {}
      courseD_artist_project_embedded_authored_hint: {}
      courseD_artist_ramp11_authored_hint:
        courseD_artist_ramp11a: Per disegnare un lato, usa il blocco `vai avanti di
          100 pixel` e cambia il 100 in 200.
        courseD_artist_ramp11b: |-
          Per disegnare 4 lati, inserisci un blocco `vai avanti di 200 pixel` all'interno di un ciclo di ripetizione e assicurarsi che il ciclo sia impostato per ripetersi 4 volte.

          Non dimenticarti di girare!
        courseD_artist_ramp11_c: Ricorda di inserire il blocco `gira a ...` all'interno
          del ciclo `ripeti ... volte`!
      courseD_artist_ramp12_authored_hint:
        courseD_artist_ramp12_a: Puoi disegnare prima il quadrato e poi il triangolo,
          oppure farlo al contrario!
        courseD_artist_ramp12_b: Prova a suddividere il problema in 2 parti e usare
          2 cicli.
        courseD_artist_ramp12_c: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
      courseD_bee_conditionals1_authored_hint:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals10_authored_hint: {}
      courseD_bee_conditionals10_2018_authored_hint: {}
      courseD_bee_conditionals1_predict1_authored_hint:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals1_predict1_2018_authored_hint:
        courseD_bee_conditionals1_a: You will need to use an `if` block to check to
          see if there is a flower beneath the cloud before you try to get nectar.
      courseD_bee_conditionals2_authored_hint:
        courseD_bee_conditionals2_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals2_a: Qualche volta c'è un fiore, altre volte no. Se
          vuoi che il tuo programma funzioni in entrambi i casi, assicurati di usare
          un blocco `se`.
        courseD_bee_conditionals2_b: Puoi usare un ciclo `ripeti ... volte` o un ciclo
          `mentre c'è strada in avanti` per muoverti attraverso questo labirinto.
        courseD_bee_conditionals2_c: 'Non hai bisogno di controllare se ci sono favi:
          per ora, ci possono essere solo fiori o caselle vuote sotto le nuvole.'
        courseD_bee_conditionals2_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals2_2018_authored_hint:
        courseD_bee_conditionals2_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals2_a: Qualche volta c'è un fiore, altre volte no. Se
          vuoi che il tuo programma funzioni in entrambi i casi, assicurati di usare
          un blocco `se`.
        courseD_bee_conditionals2_b: Puoi usare un ciclo `ripeti ... volte` o un ciclo
          `mentre c'è strada in avanti` per muoverti attraverso questo labirinto.
        courseD_bee_conditionals2_c: 'Non hai bisogno di controllare se ci sono favi:
          per ora, ci possono essere solo fiori o caselle vuote sotto le nuvole.'
        courseD_bee_conditionals2_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals2_test_authored_hint:
        courseD_bee_conditionals2_aa: Need help getting started?  Here is a little
          hint video.
        courseD_bee_conditionals2_a: Qualche volta c'è un fiore, altre volte no. Se
          vuoi che il tuo programma funzioni in entrambi i casi, assicurati di usare
          un blocco `se`.
        courseD_bee_conditionals2_b: Puoi usare un ciclo `ripeti ... volte` o un ciclo
          `mentre c'è strada in avanti` per muoverti attraverso questo labirinto.
        courseD_bee_conditionals2_c: 'Non hai bisogno di controllare se ci sono favi:
          per ora, ci possono essere solo fiori o caselle vuote sotto le nuvole.'
        courseD_bee_conditionals2_d: Need help finishing things up?  Watch this hint
          video.
      courseD_bee_conditionals3_authored_hint:
        courseD_bee_conditionals3_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals3_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare in ogni casella se c'è un fiore.
        courseD_bee_conditionals3_b: Per far andare avanti l'ape, puoi usare sia un
          ciclo `ripeti ... volte` sia un ciclo `mentre`. Usa quello che preferisci!
        courseD_bee_conditionals3_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
        courseD_bee_conditionals3_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals3_2018_authored_hint:
        courseD_bee_conditionals3_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals3_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare in ogni casella se c'è un fiore.
        courseD_bee_conditionals3_b: Per far andare avanti l'ape, puoi usare sia un
          ciclo `ripeti ... volte` sia un ciclo `mentre`. Usa quello che preferisci!
        courseD_bee_conditionals3_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
        courseD_bee_conditionals3_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals4_authored_hint:
        courseD_bee_conditionals4_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals4_a: Puoi sempre trattare ogni casella come se avesse
          sopra una nuvola, anche se in questo caso riesci a vedere tutto il percorso.
        courseD_bee_conditionals4_b: Usa un blocco `se` all'interno del ciclo per
          controllare la presenza di un fiore in ogni casella.
        courseD_bee_conditionals4_c: Grazie ad un blocco <xml><block type="maze_untilBlocked"/></xml>
          riesci ad andare avanti e controllare se c'è un fiore. Cosa dovrebbe fare
          l'ape se c'è un fiore?
        courseD_bee_conditionals4_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals4_2018_authored_hint:
        courseD_bee_conditionals4_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals4_a: Puoi sempre trattare ogni casella come se avesse
          sopra una nuvola, anche se in questo caso riesci a vedere tutto il percorso.
        courseD_bee_conditionals4_b: Usa un blocco `se` all'interno del ciclo per
          controllare la presenza di un fiore in ogni casella.
        courseD_bee_conditionals4_c: Grazie ad un blocco <xml><block type="maze_untilBlocked"/></xml>
          riesci ad andare avanti e controllare se c'è un fiore. Cosa dovrebbe fare
          l'ape se c'è un fiore?
        courseD_bee_conditionals4_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals5_authored_hint:
        courseD_bee_conditionals5_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals5_a: Pensa ad ogni lato del percorso rettangolare
          come ad un percorso a sé stante. Imposta un ciclo annidato con un blocco
          `ripeti ... volte` all'esterno ed uno `mentre c'è strada in avanti` all'interno.
          Lungo quanti lati deve volare l'ape per ronzare su ogni fiore?
        courseD_bee_conditionals5_c: Ci sono 3 lati del rettangolo con dei fiori,
          quindi il codice deve `"ripetersi" 3 volte`. Ad ogni ripetizione, l'ape
          deve procedere lungo il percorso `mentre c'è strada in avanti`. Per proseguire,
          l'ape deve `"andare" avanti`. Lungo il percorso, l'ape deve controllare
          se c'è un fiore. `se c'è un fiore`, l'ape deve `"prendere" il nettare`.
        courseD_bee_conditionals5_b: All'interno del blocco `mentre c'è strada in
          avanti` devi andare avanti e controllare se c'è un fiore. Come controlli
          se c'è un fiore? Cosa fai se c'è un fiore?
        courseD_bee_conditionals5_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals5_2018_authored_hint:
        courseD_bee_conditionals5_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals5_a: Pensa ad ogni lato del percorso rettangolare
          come ad un percorso a sé stante. Imposta un ciclo annidato con un blocco
          `ripeti ... volte` all'esterno ed uno `mentre c'è strada in avanti` all'interno.
          Lungo quanti lati deve volare l'ape per ronzare su ogni fiore?
        courseD_bee_conditionals5_c: Ci sono 3 lati del rettangolo con dei fiori,
          quindi il codice deve `"ripetersi" 3 volte`. Ad ogni ripetizione, l'ape
          deve procedere lungo il percorso `mentre c'è strada in avanti`. Per proseguire,
          l'ape deve `"andare" avanti`. Lungo il percorso, l'ape deve controllare
          se c'è un fiore. `se c'è un fiore`, l'ape deve `"prendere" il nettare`.
        courseD_bee_conditionals5_b: All'interno del blocco `mentre c'è strada in
          avanti` devi andare avanti e controllare se c'è un fiore. Come controlli
          se c'è un fiore? Cosa fai se c'è un fiore?
        courseD_bee_conditionals5_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals6_authored_hint:
        courseD_bee_conditionals6_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals6_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare sotto ogni nuvola se c'è un favo.
        courseD_bee_conditionals6_b: In questo caso, non è necessario controllare
          se ci sono fiori sotto le nuvole.
        courseD_bee_conditionals6_c: Potresti usare un ciclo per rendere il programma
          più semplice?
        courseD_bee_conditionals6_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals6_2018_authored_hint:
        courseD_bee_conditionals6_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals6_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare sotto ogni nuvola se c'è un favo.
        courseD_bee_conditionals6_b: In questo caso, non è necessario controllare
          se ci sono fiori sotto le nuvole.
        courseD_bee_conditionals6_c: Potresti usare un ciclo per rendere il programma
          più semplice?
        courseD_bee_conditionals6_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals7_authored_hint:
        courseD_bee_conditionals7_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals7_a: "**Ricorda:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseD_bee_conditionals7_b: Se sotto a una nuvola non c'è un fiore, sappi
          che c'è sicuramente un favo, quindi non hai bisogno di considerare il caso
          di una casella vuota.
        courseD_bee_conditionals7_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals7_2018_authored_hint:
        courseD_bee_conditionals7_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals7_a: "**Ricorda:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseD_bee_conditionals7_b: Se sotto a una nuvola non c'è un fiore, sappi
          che c'è sicuramente un favo, quindi non hai bisogno di considerare il caso
          di una casella vuota.
        courseD_bee_conditionals7_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals7_predict2_authored_hint:
        courseD_bee_conditionals7_a: "**Ricorda:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
      courseD_bee_conditionals7_predict2_2018_authored_hint:
        courseD_bee_conditionals7_a: "**Ricorda:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
      courseD_bee_conditionals8_authored_hint:
        courseD_bee_conditionals8_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals8_a: "**Attenzione:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseD_bee_conditionals8_b: |-
          Questo esercizio è un po' complicato, perché non puoi controllare le caselle vuote, i fiori *e* i favi con un unica istruzione condizionale.

          Controlla solo se c'è un fiore o un favo alla fine di ogni tratto del percorso (dove vedi le nuvole).
        courseD_bee_conditionals8_c: Come puoi fare in modo di andare avanti fino
          alla fine di ogni tratto del percorso, indipendentemente dalla sua lunghezza?
        courseD_bee_conditionals8_d: |-
          Nonostante ci sia una nuvola proprio davanti a te (alla partenza), non dovresti analizzarla subito. Prova ad ignorarla, iniziando da quella nell'angolo in basso a destra (alla fine del primo tratto rettilineo).

          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals8_2018_authored_hint:
        courseD_bee_conditionals8_hintVid1: Hai bisogno di aiuto per iniziare? Guarda
          il video-suggerimento!
        courseD_bee_conditionals8_a: "**Attenzione:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseD_bee_conditionals8_b: |-
          Questo esercizio è un po' complicato, perché non puoi controllare le caselle vuote, i fiori *e* i favi con un unica istruzione condizionale.

          Controlla solo se c'è un fiore o un favo alla fine di ogni tratto del percorso (dove vedi le nuvole).
        courseD_bee_conditionals8_c: Come puoi fare in modo di andare avanti fino
          alla fine di ogni tratto del percorso, indipendentemente dalla sua lunghezza?
        courseD_bee_conditionals8_d: |-
          Nonostante ci sia una nuvola proprio davanti a te (alla partenza), non dovresti analizzarla subito. Prova ad ignorarla, iniziando da quella nell'angolo in basso a destra (alla fine del primo tratto rettilineo).

          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: Guarda il video per risolvere questo esercizio.
      courseD_bee_conditionals9_authored_hint: {}
      courseD_bee_conditionals9_2018_authored_hint: {}
      courseD_bee_conditionals_challenge1_authored_hint:
        courseD_bee_conditionals_challenge1_a: |-
          Can you find a path that reaches every flower and honeycomb without hitting any trees? The best path is a spiral.

          **You only need to turn right to solve this.**
        courseD_bee_conditionals_challenge1_b: In this puzzle, each space could have
          a flower, a honey comb, or nothing.  That means you can repeat your `if/else`
          conditional at each square.
      courseD_bee_conditionals_challenge1_2018_authored_hint:
        courseD_bee_conditionals_challenge1_a: Can you find a path that reaches every
          flower and honeycomb without hitting any trees? The best path is a spiral.
        courseD_bee_conditionals_challenge1_b: In this puzzle, each space could have
          a flower, a honey comb, or nothing.  That means you can repeat your `if/else`
          conditional at each square.
      courseD_bee_conditionals_challenge2_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>                    <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_conditionals_challenge2_2018_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The difference is that the code inside will run over and over until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>                    <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_conditionals_challenge3_authored_hint:
        courseD_bee_conditionals_challenge1_b: |-
          Just like the `if at flower` blocks, the code inside a `while nectar > 0` will only run if the bee is at a flower. The main differences is that the code inside will run repetitively until there is no nectar left.  Try this pattern:

          <xml>  <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>                    <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_debugging1_authored_hint:
        courseD_bee_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_bee_debugging1_b: Do you see any patterns that could be made more
          simple using a `repeat` loop?
      courseD_bee_debugging2_authored_hint:
        courseD_bee_debugging2_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_bee_debugging2_b: Do you see a pattern?  Try using nested loops to
          solve this puzzle.
      courseD_bee_debugging3_authored_hint:
        courseD_bee_debugging3_a: Is there any place where the bee does something
          that doesn't make sense? What happens when you change those blocks?
        courseD_bee_debugging3_b: Try simplifying the code using nested loops.
      courseD_bee_debugging4_authored_hint:
        courseD_bee_debugging4_a: "Try using the debugging process a couple of times
          in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed,
          what goes wrong?"
        courseD_bee_debugging4_b: "If you're having a hard time figuring out how to
          make the stair step pattern, try tracing it with your finger and saying
          the commands out loud. \n\nDon't forget to point out the direction of the
          turns!"
      courseD_bee_debugging5_authored_hint:
        courseD_bee_debugging5_a: |-
          Start by looking at just the first loop.

          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_bee_debugging5_b: Once you have the first loop the way you want it,
          what is left over in your code?
        courseD_bee_debugging5_c: |-
          Try wrapping the leftover loop around the rest of your completed code.  Does is work now?

          If not, what is still going wrong?
      courseD_bee_debugging6_authored_hint:
        courseD_bee_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_bee_debugging6_b: It looks like all of the right steps are here, you
          just need more of them.  How can you repeat the `get nectar` and `make honey`
          actions multiple times?
      courseD_bee_debugging7_authored_hint:
        courseD_bee_debugging7_a: "Try using the \"Step\" button.  Is everything right
          at the first step?  \n\nHow about the second?  \n\nWhere does it go wrong?
          \ "
        courseD_bee_debugging7_b: If something needs to happen several times, try
          adding a `repeat` loop.
      courseD_bee_debugging8_authored_hint:
        courseD_bee_debugging8_a: Do you see a pattern that you can simplify with
          a loop?
        courseD_bee_debugging8_b: Try using a nested loop to make this code shorter.
      courseD_bee_debugging9_authored_hint:
        courseD_bee_debugging9_a: There are several ways to solve this problem...but
          they all involve turns!
        courseD_bee_debugging9_b: Figure out how you would solve the puzzle, then
          move step-by-step to try to make the code match what is in your head.
        courseD_bee_debugging9_c: Envision a giant stair step over the two flowers.
          Can you build this with what's in the workspace and toolbox?
      courseD_bee_debugging9_predict1_authored_hint: {}
      courseD_bee_debugging_challenge1_authored_hint:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program
          work? Think about why the bee needs to move backward. How much nectar does
          the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the
          same pattern. How much honey does the bee need to make each time it moves
          over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          * Repeat 2 times:
          * Move forward
          * Make 3 honey
          * Move backward
      courseD_bee_debugging_challenge1_2018_authored_hint:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program
          work? Think about why the bee needs to move backward. How much nectar does
          the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the
          same pattern. How much honey does the bee need to make each time it moves
          over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          * Repeat 2 times:
          * Move forward
          * Make 3 honey
          * Move backward
      courseD_bee_debugging_challenge1a_authored_hint:
        courseD_bee_debugging_challenge1_a: Why does the first half of this program
          work? Think about why the bee needs to move backward. How much nectar does
          the bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: 'To solve this puzzle, have the bee follow
          the same pattern to make honey that he does when collecting nectar. '
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          <xml><block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_honey"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block></xml>
      courseD_bee_debugging_challenge2_authored_hint:
        courseD_bee_debugging_challenge1_a: Why the first half of this program work?
          Think about why the bee needs to move backward. How much nectar does the
          bee collect each time it moves over a flower?
        courseD_bee_debugging_challenge1_b: On the way back, have the bee follow the
          same pattern. How much honey does the bee need to make each time it moves
          over a honey comb?
        courseD_bee_debugging_challenge1_c: |-
          After the bee makes it to the bottom row, have it repeat these commands:

          * Repeat 2 times:
          * Move forward
          * Make 3 honey
          * Move backward
      courseD_bee_nestedLoops1_authored_hint:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_b: Try writing code for one side of the square first.
          Can you loop this to get all of the nectar?
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1_2018_authored_hint:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_b: Try writing code for one side of the square first.
          Can you loop this to get all of the nectar?
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1a_authored_hint:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops1a_2018_authored_hint:
        courseD_bee_nestedLoops1_a: Not working?  Try using the "Step" button to see
          what happens line by line.
        courseD_bee_nestedLoops1_c: Remember to use the `get nectar` block once you
          are on a square with a flower.
      courseD_bee_nestedLoops2_authored_hint:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one
          `repeat` loop inside of another.
        courseD_bee_nestedLoops2_b: Can't figure out where to put the loops? Try writing
          the code step-by-step and look for a pattern.
        courseD_bee_nestedLoops2_c: Remember you can put more than one block inside
          of a loop.
      courseD_bee_nestedLoops2_2018_authored_hint:
        courseD_bee_nestedLoops2_a: To solve this puzzle, you will need to nest one
          `repeat` loop inside of another.
        courseD_bee_nestedLoops2_b: Can't figure out where to put the loops? Try writing
          the code on paper step-by-step and look for a pattern.
        courseD_bee_nestedLoops2_c: Remember you can put more than one block inside
          of a loop.
      courseD_bee_nestedLoops2_predict1_authored_hint: {}
      courseD_bee_nestedLoops2_predict1_2018_authored_hint: {}
      courseD_bee_nestedLoops3_authored_hint:
        grade4_bee_nestedLoops1_a: If you don't understand how to use nested loops
          here, try writing out the instructions step by step on a piece of paper.  Circle
          the patterns that you see.
      courseD_bee_nestedLoops5_authored_hint:
        grade4_bee_nestedLoops4_a: Try building your code line by line and see if
          you can spot the places where a repeat will make the code shorter!
        grade4_bee_nestedLoops4_b: |-
          You will need a nested loop to move forward and get nectar, but only a single loop to collect honey at the end.

          Altogether, you should be using 3 loops.
      courseD_bee_nestedLoops6_authored_hint: {}
      courseD_bee_nestedLoops6_2018_authored_hint:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out
          on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the
          number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops
          to solve this puzzle.
      courseD_bee_nestedLoops7_authored_hint:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of
          another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available
          `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |
          Nest your blocks three deep, like this:

          - repeat 4
          - repeat 3
          - repeat 12
          - get nectar
          - move forward
          - turn right
      courseD_bee_nestedLoops7_2018_authored_hint:
        courseD_bee_nestedLoops7_a: You will need to repeat `get nectar` inside of
          another `repeat` that also has the `move forward` block inside of it.
        courseD_bee_nestedLoops7_b: You will need to use all three of the available
          `repeat` blocks to solve this puzzle.
        courseD_bee_nestedLoops7_c: |
          Nest your blocks three deep, like this:

          - repeat 4
          - repeat 3
          - repeat 12
          - get nectar
          - move forward
          - turn right
      courseD_bee_nestedLoops8_authored_hint: {}
      courseD_bee_nestedLoops8_2018_authored_hint: {}
      courseD_bee_nestedLoops9_authored_hint: {}
      courseD_bee_nestedLoops9_2018_authored_hint: {}
      courseD_bee_nestedLoops9_predict2_authored_hint: {}
      courseD_bee_nestedLoops9_predict2_2018_authored_hint: {}
      courseD_bee_nested_loops_challenge1_authored_hint:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
      courseD_bee_nested_loops_challenge2_authored_hint:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
      courseD_bounce_events10s_authored_hint:
        courseD_bounce_events10s_a: |-
          You should have both of these events in your code:
          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block</xml>
      courseD_bounce_events10s_2018_authored_hint:
        courseD_bounce_events10s_a: |-
          You should have both of these events in your code:
          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block</xml>
      courseD_bounce_events11s_authored_hint:
        courseD_bounce_events11s_a: You will need to throw a ball when the game starts,
          when you hit the basket, and when the hand misses the ball.
      courseD_bounce_events11s_2018_authored_hint:
        courseD_bounce_events11s_a: You will need to throw a ball when the game starts,
          when you hit the basket, and when the hand misses the ball.
      courseD_bounce_events12s_authored_hint:
        courseD_bounce_events12s_a: You can speed up the basketball or the hand by
          attaching those blocks to the `when run` event.
        courseD_bounce_events12s_b: Try making each shot worth 2 points and changing
          the team logo to the one from your home town!
      courseD_bounce_events12s_2018_authored_hint:
        courseD_bounce_events12s_a: You can speed up the basketball or the hand by
          attaching those blocks to the `when run` event.
        courseD_bounce_events12s_b: Try making each shot worth 2 points and changing
          the team logo to the one from your home town!
      courseD_bounce_events1s_authored_hint:
        courseD_bounce_events1s_a: "You need to add the `move left` block to the `when
          left arrow` event to make this game work:\n\n <xml> <block type=\"bounce_whenLeft\"
          deletable=\"false\" x=\"20\" y=\"20\">\n    <next>\n      <block type=\"bounce_moveLeft\"/>\n
          \   </next>\n  </block>\n   \n   </xml>"
        courseD_bounce_events1s_b: Don't forget to press "Run" and get the hand to
          the basket in order to solve this puzzle.
      courseD_bounce_events1s_2018_authored_hint:
        courseD_bounce_events1s_a: "You need to add the `move left` block to the `when
          left arrow` event to make this game work:\n\n <xml> <block type=\"bounce_whenLeft\"
          deletable=\"false\" x=\"20\" y=\"20\">\n    <next>\n      <block type=\"bounce_moveLeft\"/>\n
          \   </next>\n  </block>\n   \n   </xml>"
        courseD_bounce_events1s_b: Don't forget to press "Run" and get the hand to
          the basket in order to solve this puzzle.
      courseD_bounce_events2s_authored_hint:
        courseD_bounce_events2s_a: |-
          You will need to have two sets of `move` events coded for this to work:

          <xml>
          <block type="bounce_whenLeft" deletable="false" x="20" y="20">
          <next>
          <block type="bounce_moveLeft"/>
          </next>
          </block>
          <block type="bounce_whenRight" deletable="false" x="180" y="20">
          <next>
          <block type="bounce_moveRight"/>
          </next>
          </block>
          </xml>
      courseD_bounce_events2s_2018_authored_hint:
        courseD_bounce_events2s_a: |-
          You will need to have two sets of `move` events coded for this to work:

          <xml>
          <block type="bounce_whenLeft" deletable="false" x="20" y="20">
          <next>
          <block type="bounce_moveLeft"/>
          </next>
          </block>
          <block type="bounce_whenRight" deletable="false" x="180" y="20">
          <next>
          <block type="bounce_moveRight"/>
          </next>
          </block>
          </xml>
      courseD_bounce_events5s_authored_hint:
        courseD_bounce_events5s_a: You do not need to move the hand to solve this
          puzzle.
        courseD_bounce_events5s_b: |-
          Make sure you have added this code to your workspace:
          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events5s_2018_authored_hint:
        courseD_bounce_events5s_a: You do not need to move the hand to solve this
          puzzle.
        courseD_bounce_events5s_b: |-
          Make sure you have added this code to your workspace:
          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events6s_authored_hint:
        courseD_bounce_events6s_a: |-
          Do you have an event that looks like this?
          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: If you've written the code correctly, you don't
          have to move the hand to win.
      courseD_bounce_events6s_2018_authored_hint:
        courseD_bounce_events6s_a: |-
          Do you have an event that looks like this?
          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: If you've written the code correctly, you don't
          have to move the hand to win.
      courseD_bounce_events7s_authored_hint:
        courseD_bounce_events7s_a: You can add sounds in more places if you feel like
          it!
      courseD_bounce_events7s_2018_authored_hint:
        courseD_bounce_events7s_a: You can add sounds in more places if you feel like
          it!
      courseD_bounce_events_template_authored_hint: {}
      courseD_bounce_events_template_2018_authored_hint: {}
      courseD_collector_debugging1_authored_hint:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging1_b: Do you see any patterns that could be made
          more simple using a `repeat` loop?
        courseD_collector_debugging1_c: 'Remember to use the `collect` block to pick
          up treasure once you have moved to it.  '
      courseD_collector_debugging10_predict1_authored_hint:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but
          they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle,
          then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging10_predict1_2018_authored_hint:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but
          they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle,
          then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging1_2018_authored_hint:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging1_b: Do you see any patterns that could be made
          more simple using a `repeat` loop?
        courseD_collector_debugging1_c: 'Remember to use the `collect` block to pick
          up treasure once you have moved to it.  '
      courseD_collector_debugging1a_authored_hint:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging1_c: 'Remember to use the `collect` block to pick
          up treasure once you have moved to it.  '
      courseD_collector_debugging1a_2018_authored_hint:
        courseD_collector_debugging1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging1_c: 'Remember to use the `collect` block to pick
          up treasure once you have moved to it.  '
      courseD_collector_debugging2_authored_hint:
        courseD_collector_debugging2_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging2_b: Do you see any patterns that could be made
          more simple using a `repeat` loop?
        courseD_collector_debugging2_c: Try writing code for one side of this U shape.
          Can you repeat this to collect treasure on the other two sides?
      courseD_collector_debugging2_2018_authored_hint:
        courseD_collector_debugging2_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging2_b: Do you see any patterns that could be made
          more simple using a `repeat` loop?
        courseD_collector_debugging2_c: Try collecting treasure for one side of this
          pattern. Can you repeat this to collect treasure on the other two sides?
      courseD_collector_debugging2a_authored_hint:
        courseD_collector_debugging2a_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging2a_c: |-
          What happens?

          What is supposed to happen?

          What does that tell you?
      courseD_collector_debugging2a_2018_authored_hint:
        courseD_collector_debugging2a_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_collector_debugging2a_c: |-
          What happens?

          What is supposed to happen?

          What does that tell you?
      courseD_collector_debugging3_authored_hint:
        courseD_collector_debugging3_a: Is there any place where Laurel does something
          that doesn't make sense? What happens when you change those blocks?
        courseD_collector_debugging3_b: Try simplifying the code using nested loops.
      courseD_collector_debugging3_2018_authored_hint:
        courseD_collector_debugging3_a: Is there any place where Laurel does something
          that doesn't make sense? What happens when you change those blocks?
        courseD_collector_debugging3_b: Try simplifying the code using nested loops.
      courseD_collector_debugging3a_authored_hint:
        courseD_collector_debugging3_a: Is there any place where Laurel does something
          that doesn't make sense? What happens when you change those blocks?
      courseD_collector_debugging3a_2018_authored_hint:
        courseD_collector_debugging3_a: Is there any place where Laurel does something
          that doesn't make sense? What happens when you change those blocks?
      courseD_collector_debugging4_authored_hint:
        courseD_collector_debugging4_a: "Try using the debugging process a couple
          of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem
          is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out
          how to make the stair step pattern, try tracing it with your finger and
          saying the commands out loud. \n\nDon't forget to point out the direction
          of the turns!"
        courseD_collector_debugging4_c: This loop is only missing one block. Can you
          figure out which one?
      courseD_collector_debugging4_2018_authored_hint:
        courseD_collector_debugging4_a: "Try using the debugging process a couple
          of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem
          is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out
          how to make the stair step pattern, try tracing it with your finger and
          saying the commands out loud. \n\nDon't forget to point out the direction
          of the turns!"
        courseD_collector_debugging4_c: This loop is only missing one block. Can you
          figure out which one?
      courseD_collector_debugging4a_authored_hint:
        courseD_collector_debugging4_a: "Try using the debugging process a couple
          of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem
          is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out
          how to make the stair step pattern, try tracing it with your finger and
          saying the commands out loud. \n\nDon't forget to point out the direction
          of the turns!"
      courseD_collector_debugging4a_2018_authored_hint:
        courseD_collector_debugging4_a: "Try using the debugging process a couple
          of times in a row. \n\nWhat causes the first problem?\n\nOnce that problem
          is fixed, what goes wrong?"
        courseD_collector_debugging4_b: "If you're having a hard time figuring out
          how to make the stair step pattern, try tracing it with your finger and
          saying the commands out loud. \n\nDon't forget to point out the direction
          of the turns!"
      courseD_collector_debugging5_authored_hint:
        courseD_collector_debugging5_a: |-
          Start by looking at just the first loop.

          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_collector_debugging5_b: Once you have the first loop the way you want
          it, what is left over in your code?
      courseD_collector_debugging5_2018_authored_hint:
        courseD_collector_debugging5_a: |-
          Start by looking at just the first loop.

          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_collector_debugging5_b: Once you have the first loop the way you want
          it, what is left over in your code?
      courseD_collector_debugging5a_authored_hint:
        courseD_collector_debugging5a_a: |-
          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_collector_debugging5a_b: Once you have the first line of treasure
          collected, what is left over in your code?
      courseD_collector_debugging5a_2018_authored_hint:
        courseD_collector_debugging5a_a: |-
          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_collector_debugging5a_b: Once you have the first line of treasure
          collected, what is left over in your code?
      courseD_collector_debugging6_authored_hint:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the right steps are here,
          you just need more of them.  How can you repeat the `collect` action multiple
          times?
      courseD_collector_debugging6_2018_authored_hint:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the right steps are here,
          you just need more of them.  How can you repeat the `collect` action multiple
          times?
      courseD_collector_debugging6a_authored_hint:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the blocks you need are
          in the workspace. Try clicking "start over" if things get too confusing.
      courseD_collector_debugging6a_2018_authored_hint:
        courseD_collector_debugging6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging6_b: It looks like all of the blocks you need are
          in the workspace. Try clicking "start over" if things get too confusing.
      courseD_collector_debugging7_authored_hint:
        courseD_collector_debugging7_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_collector_debugging7_b: If something needs to happen several times,
          try adding a `repeat` loop.
        courseD_collector_debugging7_c: If you're having trouble, try writing the
          steps on a piece of paper and then putting the blocks into that order.
      courseD_collector_debugging8_authored_hint:
        courseD_collector_debugging8_a: Do you see a pattern that you can simplify
          with a loop?
        courseD_collector_debugging8_b: Try using a nested loop to make this code
          shorter.
      courseD_collector_debugging8_2018_authored_hint:
        courseD_collector_debugging8_a: Do you see a pattern that you can simplify
          with a loop?
        courseD_collector_debugging8_b: Try using a nested loop to make this code
          shorter.
      courseD_collector_debugging8a_authored_hint: {}
      courseD_collector_debugging8a_2018_authored_hint: {}
      courseD_collector_debugging9_authored_hint:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but
          they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle,
          then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging9_2018_authored_hint:
        courseD_collector_debugging9_a: There are several ways to solve this problem...but
          they all involve turns!
        courseD_collector_debugging9_b: Figure out how you would solve the puzzle,
          then move step-by-step to try to make the code match what is in your head.
      courseD_collector_debugging9a_authored_hint: {}
      courseD_collector_debugging9a_2018_authored_hint: {}
      courseD_collector_debugging_challenge2_authored_hint:
        courseD_collector_debugging_challenge2_a: "Start by focusing on collect TWO
          gems from each of the first two piles.\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04
          AM copy.png)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block
          type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n
          \ </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title
          name=\"DIR\">moveForward</title>\n\n                  </block>\n                  \n
          \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n
          \   <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "Next, collect the remaining gems
          in this row.\n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04
          AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n
          \                   <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block
          type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement
          name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "Finally, collect the remaining
          treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n
          \               <title name=\"DIR\">turnRight</title>\n              </block>\n
          \     <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n
          \       <statement name=\"DO\">\n          \n        </statement>\n      </block>\n\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Here is the complete solution for this puzzle.

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_debugging_challenge2_2018_authored_hint:
        courseD_collector_debugging_challenge2_a: "Start by collecting just **two**
          gems from each of the first **two** piles.\n\n![](https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04
          AM copy.png)\nUse these blocks.\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block
          type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n
          \ </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title
          name=\"DIR\">moveForward</title>\n\n                  </block>\n                  \n
          \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n
          \   <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "Next, collect the remaining gems
          in this row.\n\n![](https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04
          AM.png)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n
          \                   <title name=\"DIR\">moveBackward</title>\n                  </block>\n<block
          type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n        <statement
          name=\"DO\">\n          \n        </statement>\n      </block>\n</xml>"
        courseD_collector_debugging_challenge2_c: "Finally, collect the remaining
          treasure. Add these blocks to your program.\n\n<xml>\n  <block type=\"maze_turn\">\n
          \               <title name=\"DIR\">turnRight</title>\n              </block>\n
          \     <block type=\"controls_repeat\">\n        <title name=\"TIMES\">4</title>\n
          \       <statement name=\"DO\">\n          \n        </statement>\n      </block>\n\n</xml>"
        courseD_collector_debugging_challenge2_d: |-
          Here is the complete solution for this puzzle.

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2_authored_hint:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2018_authored_hint:
        courseD_bee_nested_loops_challenge2_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge2_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge2_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
        courseD_bee_nested_loops_challenge2_d: |-
          **Solution:**
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2a_authored_hint:
        courseD_collector_nested_loops_challenge2a_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_collector_nested_loops_challenge2a_b: Can you figure out how to get
          all four gems without using any more blocks than it takes to get two?
      courseD_collector_ramp10_authored_hint:
        courseD_artist_ramp10_a: |-
          Invece di usare quattro blocchi `vai avanti` per ogni lato, prova a mettere un unico blocco `vai avanti` all'interno di un ciclo `ripeti ... volte`, come qui:
          <xml><block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          </block></xml>
        courseD_artist_ramp10_b: Dopo aver raccolto il diamante, non dimenticarti
          di girare per iniziare un nuovo lato della quadrato!
        courseD_artist_ramp10_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo all'interno di un altro! Si chiama **ciclo annidato**.
      courseD_collector_ramp8_authored_hint:
        courseD_collector_ramp8_a: Quando arrivi su una casella con un diamante, per
          prenderlo devi usare il blocco `raccogli`. In questo esercizio, è necessario
          raccogliere più di un diamante alla volta!
        courseD_collector_ramp8_b: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseD_collector_ramp9_authored_hint:
        courseD_collector_ramp9_a: Inizia a far muovere Laurel verso il primo gruppo
          di diamanti, quindi raccoglili. Puoi ripetere questa sequenza per prendere
          il secondo gruppo?
        courseD_collector_ramp9_b: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseD_collector_until_challenge1_authored_hint: {}
      courseD_debugging_1_authored_hint:
        courseD_debugging_1_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_debugging_1_b: Do you see any patterns that could be made more simple
          using a `repeat` loop?
      courseD_debugging_2_authored_hint:
        courseD_debugging_2_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        courseD_debugging_2_b: Do you see a pattern?  Try using nested loops to solve
          this puzzle.
      courseD_debugging_3_authored_hint:
        courseD_debugging_3_a: Is there any place where the bee does something that
          doesn't make sense? What happens when you change those blocks?
        courseD_debugging_3_b: Try simplifying the code using nested loops.
      courseD_debugging_4_authored_hint:
        courseD_debugging_4_a: "Try using the debugging process a couple of times
          in a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed,
          what goes wrong?"
        courseD_debugging_4_b: "If you're having a hard time figuring out how to make
          the stair step pattern, try tracing it with your finger and saying the commands
          out loud. \n\nDon't forget to point out the direction of the turns!"
      courseD_debugging_5_authored_hint:
        courseD_debugging_5_a: |-
          Start by looking at just the first loop.

          What does it do?

          What is it supposed to do?

          What does that tell you?
        courseD_debugging_5_b: Once you have the first loop the way you want it, what
          is left over in your code?
        courseD_debugging_5_c: |-
          Try wrapping the leftover loop around the rest of your completed code.  Does is work now?

          If not, what is still going wrong?
      courseD_debugging_6_authored_hint:
        courseD_debugging_6_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        courseD_debugging_6_b: It looks like all of the right steps are here, you
          just need more of them.  How can you repeat the `get nectar` and `make honey`
          actions multiple times?
      courseD_external_cond_authored_hint: {}
      courseD_farmer_condLoops1_authored_hint:
        courseD_farmer_condLoops1_a: Saranno necessari 5 controlli, usa un ciclo `ripeti
          ... volte`.
        courseD_farmer_condLoops1_b: Se non usi un blocco 'se c'è una pannocchia'
          rischi di tentare di raccogliere qualcosa che non c'è!
      courseD_farmer_condLoops1_2018_authored_hint:
        courseD_farmer_condLoops1_a: Saranno necessari 5 controlli, usa un ciclo `ripeti
          ... volte`.
        courseD_farmer_condLoops1_b: Se non usi un blocco 'se c'è una pannocchia'
          rischi di tentare di raccogliere qualcosa che non c'è!
      courseD_farmer_condLoops2_authored_hint:
        courseD_farmer_condLoops2_a: Il modo migliore per risolvere questo esercizio,
          è di annidare le istruzioni `se` una dentro l'altra.
        courseD_farmer_condLoops2_b: In questo esercizio, dovresti usare un'istruzione
          `se/altrimenti` e una semplice istruzione `se`.
        courseD_farmer_condLoops2_c: |-
          L'insieme di istruzioni condizionali dovrebbe funzionare così:

          - se c'è una pannocchia
           - prendi la pannocchia
          - altrimenti
           - se c'è la lattuga
            \t- prendi la lattuga

          Quindi, se una casella è vuota, la contadina non cerca di raccogliere nulla!
      courseD_farmer_condLoops2_2018_authored_hint:
        courseD_farmer_condLoops2_a: Il modo migliore per risolvere questo esercizio,
          è di annidare le istruzioni `se` una dentro l'altra.
        courseD_farmer_condLoops2_b: In questo esercizio, dovresti usare un'istruzione
          `se/altrimenti` e una semplice istruzione `se`.
        courseD_farmer_condLoops2_c: |-
          L'insieme di istruzioni condizionali dovrebbe funzionare così:

          - se c'è una pannocchia
           - prendi la pannocchia
          - altrimenti
           - se c'è la lattuga
            \t- prendi la lattuga

          Quindi, se una casella è vuota, la contadina non cerca di raccogliere nulla!
      courseD_farmer_condLoops3_authored_hint:
        courseD_farmer_condLoops3_a: |-
          Per raccogliere tutto, prova ad annidare su tre livelli le istruzioni `se`.

          Questo significa che devi mettere un'istruzione `se` all'interno un'altra e poi mettere una terza istruzione `se` all'interno della seconda.
        courseD_farmer_condLoops3_b: In questo esercizio, dovresti usare due istruzioni
          `se/altrimenti` e una semplice istruzione `se`.
      courseD_farmer_condLoops3_2018_authored_hint:
        courseD_farmer_condLoops3_a: |-
          Per raccogliere tutto, prova ad annidare su tre livelli le istruzioni `se`.

          Questo significa che devi mettere un'istruzione `se` all'interno un'altra e poi mettere una terza istruzione `se` all'interno della seconda.
        courseD_farmer_condLoops3_b: In questo esercizio, dovresti usare due istruzioni
          `se/altrimenti` e una semplice istruzione `se`.
      courseD_farmer_condLoops4_authored_hint:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          Nessuno sa quanti cespi di lattuga crescono da ogni pianta.

          Usa il ciclo `mentre c'è la lattuga` per continuare a raccogliere mentre ci sono ancora cespi disponibili.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: Il ciclo `mentre` gestirà
          correttamente anche le caselle vuote! Visto che non c'è lattuga, non verrà
          raccolta ed il codice passerà oltre.
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: Per analizzare tutte le caselle,
          puoi usare sia un ciclo `mentre c'è strada in avanti` sia un ciclo `ripeti
          ... volte`.
      courseD_farmer_condLoops4_2018_authored_hint:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          Nessuno sa quanti cespi di lattuga crescono da ogni pianta.

          Usa il ciclo `mentre c'è la lattuga` per continuare a raccogliere mentre ci sono ancora cespi disponibili.
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: Il ciclo `mentre` gestirà
          correttamente anche le caselle vuote! Visto che non c'è lattuga, non verrà
          raccolta ed il codice passerà oltre.
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: Per analizzare tutte le caselle,
          puoi usare sia un ciclo `mentre c'è strada in avanti` sia un ciclo `ripeti
          ... volte`.
      courseD_farmer_condLoops4a_authored_hint:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          Nessuno sa quanti cespi di lattuga crescono da ogni pianta.

          Usa il ciclo `mentre c'è la lattuga` per continuare a raccogliere mentre ci sono ancora cespi disponibili.
      courseD_farmer_condLoops5_authored_hint:
        courseD_farmer_condLoops5_a: 'C''è un nuovo ciclo: `ripeti fino a che ci sono
          delle zucche`. Riesci a intuire come usarlo in questo esercizio?'
        courseD_farmer_condLoops5_b: Ci può essere più di una pannocchia o più di
          una lattuga in ogni casella. Usa un ciclo `mentre` per raccoglie tutto!
      courseD_farmer_condLoops5_2018_authored_hint:
        courseD_farmer_condLoops5_a: 'C''è un nuovo ciclo: `ripeti fino a che ci sono
          delle zucche`. Riesci a intuire come usarlo in questo esercizio?'
        courseD_farmer_condLoops5_b: Ci può essere più di una pannocchia o più di
          una lattuga in ogni casella. Usa un ciclo `mentre` per raccoglie tutto!
      courseD_farmer_condLoops6_authored_hint:
        courseD_farmer_condLoops6_a: Usa un ciclo `mentre c'è una pannocchia` per
          essere sicuro di raccogliere tutto il mais lungo la strada. Questo blocco
          non farà fare nulla se non c'è alcuna pannocchia da prendere.
        courseD_farmer_condLoops6_b: Controlla `se c'è strada in avanti` prima di
          fare il prossimo passo!
      courseD_farmer_condLoops6_2018_authored_hint:
        courseD_farmer_condLoops6_a: Use a `while path ahead` loop to move the farmer
          down each piece of the spiral.
        courseD_farmer_condLoops6_b: You only need to check for corn during most of
          the harvest.  Just pick one pumpkin at the very end of your program.
      courseD_farmer_condLoops7_authored_hint:
        courseD_farmer_condLoops7_a: |-
          Nota che il percorso più facile per raggiungere tutte le colture è ancora una spirale.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Prova ad usare un blocco `mentre c'è strada in
          avanti` per far muovere la contadina lungo il percorso corretto.
      courseD_farmer_condLoops7_2018_authored_hint:
        courseD_farmer_condLoops7_a: |-
          Nota che il percorso più facile per raggiungere tutte le colture è ancora una spirale.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: Prova ad usare un blocco `mentre c'è strada in
          avanti` per far muovere la contadina lungo il percorso corretto.
      courseD_farmer_condLoops8_authored_hint: {}
      courseD_farmer_condLoops8_2018_authored_hint: {}
      courseD_farmer_condLoops9_authored_hint: {}
      courseD_farmer_condLoops9_2018_authored_hint: {}
      courseD_farmer_condLoops9_predict1_authored_hint: {}
      courseD_farmer_condLoops9_predict1_2018_authored_hint: {}
      courseD_farmer_condLoops_challenge1_authored_hint:
        courseD_farmer_condLoops_challenge1_a: The `STEP` button could be very helpful
          in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      courseD_farmer_condLoops_challenge1_2018_authored_hint:
        courseD_farmer_condLoops_challenge1_a: The "Step" button could be very helpful
          in this challenge.
        courseD_farmer_condLoops_challenge1_b: Normally you would just `pick pumpkin`
          if you are at a pumpkin. What else do you need to do if you're at a pumpkin?
      courseD_farmer_condLoops_challenge2_authored_hint:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each
          space varies. Use `while` loops for these.
      courseD_farmer_condLoops_challenge2_2018_authored_hint:
        courseD_farmer_condLoops_challenge2_a: The amount of each vegetable in each
          space can change. A `while` loop can help!
      courseD_farmer_condLoops_challenge2_clone_authored_hint: {}
      courseD_farmer_conditionals10_authored_hint: {}
      courseD_farmer_conditionals4_authored_hint:
        courseD_farmer_conditionals4_a: Invece di usare un ciclo `ripeti ... volte`,
          usa un ciclo `mentre` per far spalare fino a quando il mucchio è terminato.
      courseD_farmer_conditionals5_authored_hint:
        courseD_farmer_conditionals5a: Prova ad inserire un ciclo `mentre` all'interno
          di un ciclo `ripeti ... volte`.
      courseD_farmer_conditionals6_authored_hint:
        courseD_farmer_conditionals6_a: Assicurati di usare il ciclo `mentre` per
          riempire ogni buca indipendentemente dal numero di palate che servono.
        courseD_farmer_conditionals6_b: Nota che la contadina deve andare avanti e
          girare diverse volte in questo schema a scalinata.
      courseD_farmer_conditionals7_authored_hint:
        courseD_farmer_conditionals8_a: Il blocco `mentre c'è strada in avanti` ti
          permette di andare avanti, anche se non sai quante caselle devi percorrere.
      courseD_farmer_conditionals8_authored_hint:
        courseD_farmer_conditionals8_a: Avrai bisogno di usare più di un ciclo `mentre`.
        courseD_farmer_conditionals8_b: Ogni buca è alla fine di un tratto di percorso,
          quindi usa il blocco `mentre c'è strada in avanti` prima di usare il ciclo
          `mentre c'è una buca`.
        courseD_farmer_conditionals8_c: Nota che devi ripetere sei volte la sequenza
          `mentre c'è strada in avanti` + `quando c'è una buca`.
      courseD_farmer_conditionals9_authored_hint: {}
      courseD_farmer_until_challenge2_authored_hint: {}
      courseD_farmer_until_challenge2_2018_authored_hint: {}
      courseD_farmer_while1_authored_hint:
        courseD_farmer_while1_a: Dovrai andare avanti quattro volte per raggiungere
          il mucchio. Riesci ad usare un ciclo `ripeti ... volte`per fare ciò?
        courseD_farmer_while1_b: Quando sarai in piedi sul mucchio di terra, usa il
          blocco `rimuovi 1` per rimuoverlo.
      courseD_farmer_while10_authored_hint: {}
      courseD_farmer_while10_2018_authored_hint: {}
      courseD_farmer_while10_predict2_authored_hint: {}
      courseD_farmer_while10_predict2_2018_authored_hint: {}
      courseD_farmer_while1_2018_authored_hint:
        courseD_farmer_while1_a: Dovrai andare avanti quattro volte per raggiungere
          il mucchio. Riesci ad usare un ciclo `ripeti ... volte`per fare ciò?
        courseD_farmer_while1_b: Quando sarai in piedi sul mucchio di terra, usa il
          blocco `rimuovi 1` per rimuoverlo.
      courseD_farmer_while2_authored_hint:
        courseD_farmer_while2_a: Dovrai fare un solo movimento per arrivare alla buca.
        courseD_farmer_while2_b: Sarà necessario il blocco `riempi 1` per sei volte.
          Riesci ad usare un ciclo per rendere tutto più semplice?
      courseD_farmer_while2_2018_authored_hint:
        courseD_farmer_while2_a: Dovrai fare un solo movimento per arrivare alla buca.
        courseD_farmer_while2_b: Sarà necessario il blocco `riempi 1` per sei volte.
          Riesci ad usare un ciclo per rendere tutto più semplice?
      courseD_farmer_while3_authored_hint:
        courseD_farmer_while3_a: Un ciclo può aiutarti a semplificare il programma.
        courseD_farmer_while3_b: Non dovrebbe servire alcun blocco `gira a ...` per
          arrivare fino al mucchio.
      courseD_farmer_while3_2018_authored_hint:
        courseD_farmer_while3_a: Un ciclo può aiutarti a semplificare il programma.
        courseD_farmer_while3_b: Non dovrebbe servire alcun blocco `gira a ...` per
          arrivare fino al mucchio.
      courseD_farmer_while4_authored_hint:
        courseD_farmer_conditionals4_a: Invece di usare un ciclo `ripeti ... volte`,
          usa un ciclo `mentre` per far spalare fino a quando il mucchio è terminato.
        courseD_farmer_conditionals4_b: Sembra molto simile ad un esercizio precedente,
          l'unica differenza è nel ciclo da usare.
      courseD_farmer_while4_2018_authored_hint:
        courseD_farmer_conditionals4_a: Invece di usare un ciclo `ripeti ... volte`,
          usa un ciclo `mentre` per far spalare fino a quando il mucchio è terminato.
        courseD_farmer_conditionals4_b: Sembra molto simile ad un esercizio precedente,
          l'unica differenza è nel ciclo da usare.
      courseD_farmer_while4_predict1_authored_hint: {}
      courseD_farmer_while4_predict1_2018_authored_hint: {}
      courseD_farmer_while5_authored_hint:
        courseD_farmer_conditionals5a_a: Prova ad inserire un ciclo `mentre` all'interno
          di un ciclo `ripeti ... volte`.
        courseD_farmer_conditionals5a_b: La contadina deve andare avanti 5 volte per
          arrivare alla fine della riga. Cos'altro deve fare la contadina?
        courseD_farmer_conditionals5a_c: Vai avanti cinque volte. Ogni volta che vai
          avanti, rimuovi i mucchi di terra usando il blocco `mentre c'è un mucchio`.
      courseD_farmer_while5_2018_authored_hint:
        courseD_farmer_conditionals5a_a: Prova ad inserire un ciclo `mentre` all'interno
          di un ciclo `ripeti ... volte`.
        courseD_farmer_conditionals5a_b: La contadina deve andare avanti 5 volte per
          arrivare alla fine della riga. Cos'altro deve fare la contadina?
        courseD_farmer_conditionals5a_c: Vai avanti cinque volte. Ogni volta che vai
          avanti, rimuovi i mucchi di terra usando il blocco `mentre c'è un mucchio`.
      courseD_farmer_while6_authored_hint:
        courseD_farmer_conditionals6_a: Assicurati di usare il ciclo `mentre` per
          riempire ogni buca indipendentemente dal numero di palate che servono.
        courseD_farmer_conditionals6_b: Nota che la contadina deve andare avanti e
          girare diverse volte in questo schema a scalinata.
        courseD_farmer_conditionals6_c: |-
          Lo schema a scalinata è realizzato da questi blocchi:
          - vai avanti
          - riempi la buca
          - gira a destra
          - vai avanti
          - riempi la buca
          - gira a sinistra

          Quante volte devi usare questo schema a scalinata?

          Assicurarti di usare il blocco `mentre c'è una buca` per riempire le buche.
      courseD_farmer_while6_2018_authored_hint:
        courseD_farmer_conditionals6_a: Assicurati di usare il ciclo `mentre` per
          riempire ogni buca indipendentemente dal numero di palate che servono.
        courseD_farmer_conditionals6_b: Nota che la contadina deve andare avanti e
          girare diverse volte in questo schema a scalinata.
        courseD_farmer_conditionals6_c: |-
          Lo schema a scalinata è realizzato da questi blocchi:
          - vai avanti
          - riempi la buca
          - gira a destra
          - vai avanti
          - riempi la buca
          - gira a sinistra

          Quante volte devi usare questo schema a scalinata?

          Assicurarti di usare il blocco `mentre c'è una buca` per riempire le buche.
      courseD_farmer_while7_authored_hint:
        courseD_farmer_conditionals8_a: Il blocco `mentre c'è strada in avanti` ti
          permette di andare avanti, anche se non sai quante caselle devi percorrere.
        courseD_farmer_conditionals8_b: In questo esercizio, può essere utile mettere
          un ciclo `mentre c'è strada in avanti` all'interno di un ciclo `ripeti ...
          volte`.
        courseD_farmer_conditionals8_c: Che cosa dovresti fare alla fine di ogni tratto?
      courseD_farmer_while7_2018_authored_hint:
        courseD_farmer_conditionals8_a: Il blocco `mentre c'è strada in avanti` ti
          permette di andare avanti, anche se non sai quante caselle devi percorrere.
        courseD_farmer_conditionals8_b: In questo esercizio, può essere utile mettere
          un ciclo `mentre c'è strada in avanti` all'interno di un ciclo `ripeti ...
          volte`.
        courseD_farmer_conditionals8_c: Che cosa dovresti fare alla fine di ogni tratto?
      courseD_farmer_while8_authored_hint:
        courseD_farmer_conditionals8_a: Avrai bisogno di usare più di un ciclo `mentre`.
        courseD_farmer_conditionals8_b: Ogni buca è alla fine di un tratto di percorso,
          quindi usa il blocco `mentre c'è strada in avanti` prima di usare il ciclo
          `mentre c'è una buca`.
        courseD_farmer_conditionals8_c: Nota che devi ripetere sei volte la sequenza
          `mentre c'è strada in avanti` + `quando c'è una buca`.
      courseD_farmer_while8_2018_authored_hint:
        courseD_farmer_conditionals8_a: Avrai bisogno di usare più di un ciclo `mentre`.
        courseD_farmer_conditionals8_b: Ogni buca è alla fine di un tratto di percorso,
          quindi usa il blocco `mentre c'è strada in avanti` prima di usare il ciclo
          `mentre c'è una buca`.
        courseD_farmer_conditionals8_c: Nota che devi ripetere sei volte la sequenza
          `mentre c'è strada in avanti` + `quando c'è una buca`.
      courseD_farmer_while9_authored_hint: {}
      courseD_farmer_while9_2018_authored_hint: {}
      courseD_farmer_while_challenge1_authored_hint:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt and fill any hole, while standing
          in the same place.
        courseD_farmer_conditionals8_c: È possibile risolvere questo esercizio senza
          usare alcun blocco "ripeti ... volte". Per farlo, avrai bisogno di usare
          quattro cicli "mentre".
      courseD_farmer_while_challenge1_2018_authored_hint:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt or fill any hole, no matter
          where she is.
        courseD_farmer_conditionals8_c: È possibile risolvere questo esercizio senza
          usare alcun blocco "ripeti ... volte". Per farlo, avrai bisogno di usare
          quattro cicli "mentre".
      courseD_farmer_while_challenge2_authored_hint:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt and fill any hole, while standing
          in the same place.
        courseD_farmer_conditionals8_c: È possibile risolvere questo esercizio senza
          usare alcun blocco "ripeti ... volte". Per farlo, avrai bisogno di usare
          quattro cicli "mentre".
      courseD_farmer_while_challenge2_2018_authored_hint:
        courseD_farmer_while_challenge1_a: Each hole or pile is located one space
          **backward** from the end of the path.
        courseD_farmer_while_challenge1_b: If you use a `while` loop, you can tell
          the farmer to remove a pile or fill a hole, even if one isn't there. That
          means you can program her to remove any dirt and fill any hole, while standing
          in the same place.
        courseD_farmer_conditionals8_c: È possibile risolvere questo esercizio senza
          usare alcun blocco "ripeti ... volte". Per farlo, avrai bisogno di usare
          quattro cicli "mentre".
      courseD_harvester_nested_loops_challenge1-broken_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: You have probably already used
          a loop to create a zig-zag pattern. If you remember that algorithm, you
          can make a few additions to it here.
      courseD_harvester_nested_loops_challenge1_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: You have probably already used
          a loop to create a zig-zag pattern. If you remember that algorithm, you
          can make a few additions to it here.
        courseD_harvester_nested_loops_challenge1_b: To collect more than one piece
          of corn, you need to use `pick corn` more than one time.
        courseD_harvester_nested_loops_challenge1_c: You will need to put a small
          loop inside of your main loop to solve this puzzle!
      courseD_harvester_nested_loops_challenge1_2018_authored_hint:
        courseD_harvester_nested_loops_challenge1_a: 'Try following this path to reach
          all of the corn! '
        courseD_harvester_nested_loops_challenge1_b: To collect more than one piece
          of corn, you need to use `pick corn` more than one time.
        courseD_harvester_nested_loops_challenge1_c: You will need to put a small
          loop inside of your main loop to solve this puzzle!
      courseD_iceage_loops1_authored_hint:
        courseD_iceage_loops1_a: Watch out for broken ice! Scrat will fall right through!
        courseD_iceage_loops1_b: |-
          You will have to use this block:
          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops10_authored_hint:
        courseB_iceage_loops10_a: Watch out for broken ice! Scrat will fall into the
          water!
        courseB_iceage_loops10_b: Try saying the steps out loud or writing them down
          on a piece of paper. Do you see any patterns?
        courseB_iceage_loops10_c: This is a long puzzle! Follow this path.
      courseD_iceage_loops2_authored_hint:
        courseD_iceage_loops2_a: Break this puzzle into two pieces, one before the
          corner, and one after the corner.
        courseD_iceage_loops2_b: If you get stuck, try saying the steps out loud.
        courseD_iceage_loops2_c: Follow this path to get Scrat to the acorn.
      courseD_iceage_loops3_authored_hint:
        courseB_iceage_loops3_a: |-
          Use this new block!
          <xml><block type="controls_repeat_dropdown">
          <title name="TIMES" config="2-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: To repeat code, drag out a `repeat` loop, then put
          the block you want repeated inside.
      courseD_iceage_loops4_authored_hint:
        courseD_iceage_loops4_a: Don't be afraid to run your code and see what happens!
        courseD_iceage_loops4_b: Try writing down the steps Scrat would take to get
          to the acorn.  Do you see a pattern?
        courseD_iceage_loops4_c: This is the path Scrat should take.
      courseD_iceage_loops6_authored_hint:
        courseD_iceage_loops6_a: Your final code will have **three** `move forward`
          blocks.
        courseD_iceage_loops6_b: You only need to add **one** more loop!
        courseD_iceage_loops6_c: Your final path should look like this.
      courseD_iceage_loops7_authored_hint:
        courseB_iceage_loops7_a: If you get stuck, try writing steps down on a piece
          of paper. Do you see a pattern?
        courseB_iceage_loops7_b: This is the path Scrat should take to get to the
          acorn.
      courseD_iceage_loops8_authored_hint:
        courseD_iceage_loops8_a: Are the `turn` blocks right? What else can you change?
        courseD_iceage_loops8_b: The first loop should repeat **3** times, the second
          should repeat **5** times, the third loop should repeat **4** times, and
          the last loop should repeat **4** times.
        courseD_iceage_loops8_c: Use loops to help Scrat follow this path.
      courseD_iceage_loops9_authored_hint:
        courseD_iceage_loops9_a: Having trouble? Try breaking this puzzle into smaller
          pieces. Don't be afraid to run your puzzle as you code!
        courseD_iceage_loops9_b: Your final code should have **4** loops.
        courseD_iceage_loops9_c: Scrat should follow this path to get the acorn.
      courseD_maze_loops_challenge1_authored_hint:
        courseD_bee_nested_loops_challenge1_a: Don't forget that you can `repeat`
          a single command or a longer pattern. You can even `repeat` a `repeat` block!
        courseD_bee_nested_loops_challenge1_b: To get all 4 gems, first use a loop
          to move away from the center. Turn left or right, then use a nested loop
          to move from the first pile of treasure to the second. If you repeat the
          nested loop enough times, the collector will move around the *entire* cave!
        courseD_bee_nested_loops_challenge1_c: The shortest program that reaches all
          the treasure uses only one `collect` block and two turns.
      courseD_maze_nestedLoops3_authored_hint:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest"
          one `repeat` loop inside of another `repeat` loop.
        courseD_maze_nestedLoops3_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
        courseD_maze_nestedLoops3_c: Try writing code for one straight section of
          path and a turn. Can you repeat this to get to the sunflower?
      courseD_maze_nestedLoops3_2018_authored_hint:
        courseD_maze_nestedLoops3_a: To solve this puzzle, you will need to "nest"
          one `repeat` loop inside of another `repeat` loop.
        courseD_maze_nestedLoops3_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
        courseD_maze_nestedLoops3_c: Try writing code for one straight piece of path
          and a turn. Can you repeat this to get to the sunflower?
      courseD_maze_nestedLoops4_authored_hint:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.

          ![](https://images.code.org/6a8b4b97a8eef813d8a827b0b7b2d36b-image-1480446509692.05.22.png)
        courseD_maze_nestedLoops4_b: If the loop pattern is hard to see, try coding
          it all out first and see what things repeat over and over before you put
          the loops in.
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another
          to cut down on the amount of code you need.
      courseD_maze_nestedLoops4_2018_authored_hint:
        courseD_maze_nestedLoops4_a: |-
          Try using this path through the maze.

          ![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)
        courseD_maze_nestedLoops4_b: If the loop pattern is hard to see, try coding
          it all out first and see what code repeats over and over before you put
          the loops in.
        courseD_maze_nestedLoops4_c: Try using one `repeat` loop inside of another
          to cut down on the amount of code you need.
      courseD_maze_nestedLoops5_authored_hint:
        courseD_maze_nestedLoops5_a: Look for a stair-step pattern in this maze to
          find where a nested loop can be used.
        courseD_maze_nestedLoops5_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
      courseD_maze_nestedLoops5_2018_authored_hint:
        courseD_maze_nestedLoops5_a: Look for a stair-step pattern in this maze to
          find where a nested loop can be used.
        courseD_maze_nestedLoops5_b: Can't figure out where to put the loops? Try
          writing the code step-by-step and look for a pattern.
      courseD_maze_nestedLoops6_authored_hint:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out
          on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the
          number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops
          to solve this puzzle.
      courseD_maze_nestedLoops6_2018_authored_hint:
        courseD_maze_nestedLoops6_a: If you are stuck, try writing out the code out
          on paper without loops first and look for patterns.
        courseD_maze_nestedLoops6_b: Nesting `repeat` loops can help decrease the
          number of blocks used.
        courseD_maze_nestedLoops6_c: It will take two sets of nested `repeat` loops
          to solve this puzzle.
      courseD_maze_ramp1_authored_hint:
        courseC_maze_programming1_a: Se l'uccellino non riesce a prendere il maialino,
          controlla che tutti e tre i blocchi siano collegati insieme, quindi clicca
          nuovamente su "Esegui".
        courseC_maze_programming1_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_maze_ramp1_2018_authored_hint:
        courseC_maze_programming1_a: Se l'uccellino non riesce a prendere il maialino,
          controlla che tutti e tre i blocchi siano collegati insieme, quindi clicca
          nuovamente su "Esegui".
        courseC_maze_programming1_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_maze_ramp2_authored_hint:
        courseC_maze_programming2_a: Per usare un blocco `vai avanti`, trascinalo
          dalla cassetta degli attrezzi nell'area di lavoro e collegalo al blocco
          `quando si clicca su "Esegui"`.
        courseC_maze_programming2_b: Controlla che tutti e 3 i blocchi siano collegati
          insieme e fissati al blocco `quando si clicca su "Esegui"`.
      courseD_maze_ramp2_2018_authored_hint:
        courseC_maze_programming2_a: Per usare un blocco `vai avanti`, trascinalo
          dalla cassetta degli attrezzi nell'area di lavoro e collegalo al blocco
          `quando si clicca su "Esegui"`.
        courseC_maze_programming2_b: Controlla che tutti e 3 i blocchi siano collegati
          insieme e fissati al blocco `quando si clicca su "Esegui"`.
      courseD_maze_ramp3_authored_hint:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseD_maze_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      courseD_maze_ramp4_authored_hint:
        courseC_maze_programming4_a: Puoi girare a destra o a sinistra dal punto di
          vista dell'uccellino. Se l'uccellino è rivolto verso destra, girare a destra
          significa dirigersi verso il basso.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          il maiale, vai ancora una volta avanti.
      courseD_maze_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: Puoi girare a destra o a sinistra dal punto di
          vista dell'uccellino. Se l'uccellino è rivolto verso destra, girare a destra
          significa dirigersi verso il basso.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          il maiale, vai ancora una volta avanti.
      courseD_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_maze_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_maze_ramp5a_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_maze_ramp5a_2018_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_maze_ramp5b_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_maze_ramp5b_2018_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: Ricorda che le curve devi immaginarle dal punto
          di vista dell'uccellino.
        courseC_maze_programming5_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_maze_ramp5c_authored_hint: {}
      courseD_maze_ramp5c_2018_authored_hint: {}
      courseD_maze_ramp5d_authored_hint: {}
      courseD_maze_ramp5d_2018_authored_hint: {}
      courseD_maze_ramp6_authored_hint:
        courseC_maze_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseC_maze_programming6_b: All'inizio l'uccellino è rivolto verso un muro,
          quindi ricordati di girare prima di muoverti.
        courseC_maze_programming6_c: Ricorda che puoi scrivere un pezzo di codice
          alla volta e poi eseguirlo per capire come devi procedere dal punto in cui
          sei arrivato.
      courseD_maze_ramp6a_authored_hint:
        courseC_maze_programming6a_a: Use a `repeat` loop to get this bird moving!
      courseD_maze_ramp7_authored_hint:
        courseD_maze_ramp7_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseD_maze_ramp7_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
        courseD_maze_ramp7_c: Se vuoi semplificare il tuo programma, puoi mettere
          un ciclo `ripeti ... volte` all'interno di un altro! Si chiama **ciclo annidato**.
      courseD_maze_until1_authored_hint:
        courseD_maze_until1_a: C'è qualche sequenza che si ripete da inserire in un
          ciclo per rendere il programma più breve?
        courseD_maze_until1_b: Prova a risolvere l'esercizio usando dei cicli annidati.
      courseD_maze_until10_authored_hint: {}
      courseD_maze_until10_2018_authored_hint: {}
      courseD_maze_until10_predict2_authored_hint: {}
      courseD_maze_until10_predict2_2018_authored_hint: {}
      courseD_maze_until1_2018_authored_hint:
        courseD_maze_until1_a: C'è qualche sequenza che si ripete da inserire in un
          ciclo per rendere il programma più breve?
        courseD_maze_until1_b: Prova a risolvere l'esercizio usando dei cicli annidati.
      courseD_maze_until2_authored_hint:
        courseD_maze_until2_a: An `until pig` loop will help you keep going until
          you succeed!
      courseD_maze_until2_predict1_authored_hint: {}
      courseD_maze_until2_predict1_2018_authored_hint: {}
      courseD_maze_until3_authored_hint:
        courseD_maze_until3_a: |-
          - Cosa fa il tuo programma?
          - Che cosa dovrebbe fare?
          - Che cosa ti suggerisce questo?
        courseD_maze_until3_b: Se ti sei bloccato, prova a scrivere i passaggi su
          un foglio di carta e cerca degli schemi che si ripetono.
        courseD_maze_until3_c: Puoi seguire uno schema a scalinata per risolvere questo
          esercizio?
        courseD_maze_until3_d: Non dimenticare di usare il blocco `ripeti fino a che`
          per rendere il tuo programma più breve.
      courseD_maze_until3_2018_authored_hint:
        courseD_maze_until3_a: |-
          - Cosa fa il tuo programma?
          - Che cosa dovrebbe fare?
          - Che cosa ti suggerisce questo?
        courseD_maze_until3_b: Se ti sei bloccato, prova a scrivere i passaggi su
          un foglio di carta e cerca degli schemi che si ripetono.
        courseD_maze_until3_c: Puoi seguire uno schema a scalinata per risolvere questo
          esercizio?
        courseD_maze_until3_d: Non dimenticare di usare il blocco `ripeti fino a che`
          per rendere il tuo programma più breve.
      courseD_maze_until4_authored_hint:
        courseD_maze_until4_a: |-
          Usa il pulsante "Fai un passo" per analizzare il tuo programma un blocco alla volta.

          - Al primo passo tutto procede bene?
          - E al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
        courseD_maze_until4_b: Puoi seguire uno schema a scalinata per risolvere questo
          esercizio?
        courseD_maze_until4_c: Non dimenticare di usare il blocco `ripeti fino a che`
          per rendere il tuo programma più breve.
      courseD_maze_until4_2018_authored_hint:
        courseD_maze_until4_a: |-
          Usa il pulsante "Fai un passo" per analizzare il tuo programma un blocco alla volta.

          - Al primo passo tutto procede bene?
          - E al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
        courseD_maze_until4_b: Puoi seguire uno schema a scalinata per risolvere questo
          esercizio?
        courseD_maze_until4_c: Non dimenticare di usare il blocco `ripeti fino a che`
          per rendere il tuo programma più breve.
      courseD_maze_until5_authored_hint:
        courseD_maze_until5_a: Non dimenticare di usare l'istruzione condizionale
          `se c'è strada a sinistra` per far in modo che lo zombie continui a cercare
          il punto in cui girare.
        courseD_maze_until5_b: Per usare un solo blocco `vai avanti`, mettilo dentro
          a un blocco `ripeti fino a che`.
        courseD_maze_until5_c: Dopo ogni passo, lo zombie dovrebbe controllare se
          c'è un percorso verso sinistra. Cosa dovrebbe fare se lo trova?
      courseD_maze_until5_2018_authored_hint:
        courseD_maze_until5_b: Per usare un solo blocco `vai avanti`, mettilo dentro
          a un blocco `ripeti fino a che`.
      courseD_maze_until6_authored_hint:
        courseD_maze_until6_a: Questa volta, per mantenere lo zombie sul percorso
          corretto, prova ad usare il blocco `se c'è strada a destra`.
        courseD_maze_until6_b: Per usare un solo blocco `vai avanti`, mettilo dentro
          a un blocco `ripeti fino a che`.
        courseD_maze_until6_c: Anche se qui ci sono più curve rispetto all'ultimo
          esercizio, il programma può essere quasi identico, grazie al blocco `ripeti
          fino a che`!
      courseD_maze_until6_2018_authored_hint:
        courseD_maze_until6_b: Per usare un solo blocco `vai avanti`, mettilo dentro
          a un blocco `ripeti fino a che`.
      courseD_maze_until7_authored_hint:
        courseD_maze_until7_a: Non c'è bisogno che il tuo programma sia più lungo
          dell'ultima volta, solo perché il labirinto lo è!
        courseD_maze_until7_b: Anche se qui ci sono più curve rispetto all'ultimo
          esercizio, il programma può essere quasi identico, grazie al blocco `ripeti
          fino a che`!
        courseD_maze_until7_c: Ricordati di cercare strada a sinistra, perché se giri
          a destra finirai in un percorso sbagliato!
      courseD_maze_until7_2018_authored_hint:
        courseD_maze_until7_a: Non c'è bisogno che il tuo programma sia più lungo
          dell'ultima volta, solo perché il labirinto lo è!
        courseD_maze_until7_b: Anche se qui ci sono più curve rispetto all'ultimo
          esercizio, il programma può essere quasi identico, grazie al blocco `ripeti
          fino a che`!
      courseD_maze_until8_authored_hint:
        courseD_maze_until8_a: Assicurati di usare il blocco `se/altrimenti` per far
          mantenere allo zombi la direzione corretta.
        courseD_maze_until8_b: 'Con il blocco `se/altrimenti`: se c''è strada in avanti,
          cosa deve fare lo zombi?'
        courseD_maze_until8_c: 'Con il blocco `se/altrimenti`: se non c''è strada
          in avanti, da che parte deve girare lo zombi?'
      courseD_maze_until8_2018_authored_hint:
        courseD_maze_until8_a: Assicurati di usare il blocco `se/altrimenti` per far
          mantenere allo zombi la direzione corretta.
        courseD_maze_until8_b: 'Con il blocco `se/altrimenti`: se c''è strada in avanti,
          cosa deve fare lo zombi?'
        courseD_maze_until8_c: 'Con il blocco `se/altrimenti`: se non c''è strada
          in avanti, da che parte deve girare lo zombi?'
      courseD_maze_until9_authored_hint:
        courseD_maze_until8_a: L'istruzione condizionale `se c'è strada in avanti`
          ti permetterà di andare avanti quando possibile, aiutandoti a tralasciare
          i percorsi con le piante carnivore.
        courseD_maze_until8_b: In quale direzione dovrebbe girare lo zombie se non
          trova strada in avanti?
        courseD_maze_until8_c: Ricordati di usare il blocco `ripeti fino a che` per
          far arrivare lo zombie fino al girasole!
      courseD_maze_until9_2018_authored_hint:
        courseD_maze_until8_c: Ricordati di usare il blocco `ripeti fino a che` per
          far arrivare lo zombie fino al girasole!
      courseD_maze_until_challenge_authored_hint: {}
      courseD_maze_until_challenge1-delete-this-copy_authored_hint: {}
      courseD_maze_until_challenge1_authored_hint: {}
      courseD_maze_until_challenge1_2018_authored_hint: {}
      courseD_maze_until_challenge2_authored_hint: {}
      courseD_playLab_cond1_authored_hint:
        courseD_playLab_cond1_a: Per risolvere questa sfida, collega il blocco `sposta
          il personaggio 1 in alto` all'evento `quando si preme sulla freccia verso
          l'alto`, poi fai lo stesso per tutte le altre direzioni.
        courseD_playLab_cond1_b: Usa i menù a discesa dei blocchi `quando si preme
          sulla freccia ...` e `sposta il personaggio ...` per cambiare la direzione
          verso la quale devono muoversi.
        courseD_playLab_cond1_c: Dopo aver cliccato su "Esegui", ricorda di muovere
          il pirata verso entrambe le bandierine!
      courseD_playLab_cond1_2018_authored_hint:
        courseD_playLab_cond1_a: Per risolvere questa sfida, collega il blocco `sposta
          il personaggio 1 in alto` all'evento `quando si preme sulla freccia verso
          l'alto`, poi fai lo stesso per tutte le altre direzioni.
        courseD_playLab_cond1_b: Usa i menù a discesa dei blocchi `quando si preme
          sulla freccia ...` e `sposta il personaggio ...` per cambiare la direzione
          verso la quale devono muoversi.
        courseD_playLab_cond1_c: Dopo aver cliccato su "Esegui", ricorda di muovere
          il pirata verso entrambe le bandierine!
      courseD_playLab_cond2_authored_hint:
        courseD_playLab_cond2_a: Per risolvere questo esercizio, usa il blocco `aggiungi
          un punto` sotto al blocco dell'evento `quando il personaggio 1 tocca il
          personaggio 2`.
      courseD_playLab_cond2_2018_authored_hint:
        courseD_playLab_cond2_a: Per risolvere questo esercizio, usa il blocco `aggiungi
          un punto` sotto al blocco dell'evento `quando il personaggio 1 tocca il
          personaggio 2`.
      courseD_playLab_cond3_authored_hint:
        courseD_playLab_cond3_a: Dovrai aggiungere due blocchi al ciclo `ripeti per
          sempre`. Uno per scegliere un umore casuale del drago (personaggio 2) e
          l'altro per attendere 1 secondo prima di ricominciare il ciclo.
      courseD_playLab_cond3_2018_authored_hint:
        courseD_playLab_cond3_a: Dovrai aggiungere due blocchi al ciclo `ripeti per
          sempre`. Uno per scegliere un umore casuale del drago (personaggio 2) e
          l'altro per attendere 1 secondo prima di ricominciare il ciclo.
      courseD_playLab_cond3a_authored_hint:
        courseD_playLab_cond3_c: "- `Se` il drago è felice\n   - `aggiungi un punto`\n
          \  - `aggiungi un punto`\n \n- `Altrimenti` `aggiungi un punto`"
      courseD_playLab_cond3a_2018_authored_hint:
        courseD_playLab_cond3_c: "- `Se` il drago è felice\n   - `aggiungi un punto`\n
          \  - `aggiungi un punto`\n \n- `Altrimenti` `aggiungi un punto`"
      courseD_playLab_cond3b_authored_hint:
        courseD_playLab_cond3b_a: You will need to add blocks to your `repeat forever`
          loop to make the dragon continue to move up and down
      courseD_playLab_cond4_authored_hint:
        courseD_playLab_cond4_a: Avrai bisogno di usare l'evento `quando si clicca
          su "Esegui"` per fare in modo che il ninja insegua il pirata dall'inizio
          del gioco.
        courseD_playLab_cond4_b: C'è un blocco speciale chiamato `imponi ad ogni ninja
          mascherato di inseguire il personaggio ...` che terrà il ninja sulle tracce
          del pirata!
        courseD_playLab_cond4_c: Metti il blocco `fine del gioco con una sconfitta`
          sotto l'evento `quando il personaggio 1 tocca il personaggio 2`.
      courseD_playLab_cond4_2018_authored_hint:
        courseD_playLab_cond4_a: Avrai bisogno di usare l'evento `quando si clicca
          su "Esegui"` per fare in modo che il ninja insegua il pirata dall'inizio
          del gioco.
        courseD_playLab_cond4_b: C'è un blocco speciale chiamato `imponi ad ogni ninja
          mascherato di inseguire il personaggio ...` che terrà il ninja sulle tracce
          del pirata!
        courseD_playLab_cond4_c: Metti il blocco `fine del gioco con una sconfitta`
          sotto l'evento `quando il personaggio 1 tocca il personaggio 2`.
      courseD_playLab_cond5_authored_hint:
        courseD_playLab_cond5_a: Per portare a termine questa sfida, usa un'istruzione
          `se` che controlli se il `punteggio > 5`.
        courseD_playLab_cond5_b: Puoi avere più di un ciclo `ripeti per sempre` nella
          tua area di lavoro.
      courseD_playLab_cond5_2018_authored_hint:
        courseD_playLab_cond5_a: Per portare a termine questa sfida, usa un'istruzione
          `se` che controlli se il `punteggio > 5`.
        courseD_playLab_cond5_b: Puoi avere più di un ciclo `ripeti per sempre` nella
          tua area di lavoro.
      courseD_playLab_cond6_authored_hint:
        courseD_playLab_cond6_a: Per rallentare la velocità del ninja, aggiungi all'inizio
          del programma il blocco `imposta la velocità di ogni ninja mascherato a
          ...`.
        courseD_playLab_cond6_b: Per controllare in continuazione se il pirata è al
          di sotto dei polpi, devi usare un blocco `se personaggio 1 posizione y >
          255` all'interno di un ciclo `ripeti per sempre`.
      courseD_playLab_cond6_2018_authored_hint:
        courseD_playLab_cond6_a: Per rallentare la velocità del ninja, aggiungi all'inizio
          del programma il blocco `imposta la velocità di ogni ninja mascherato a
          ...`.
        courseD_playLab_cond6_b: Per controllare in continuazione se il pirata è al
          di sotto dei polpi, devi usare un blocco `se personaggio 1 posizione y >
          255` all'interno di un ciclo `ripeti per sempre`.
      courseD_playLab_cond6a_authored_hint:
        courseD_playLab_cond6_c: Per evitare che i punti siano tolti troppo velocemente,
          aggiungi un blocco `aspetta per 1 secondo` in cima al ciclo `ripeti per
          sempre` che controlla la posizione del pirata (ma, attenzione, non all'interno
          dell'istruzione `if`).
      courseD_playLab_cond6a_2018_authored_hint:
        courseD_playLab_cond6_c: Per evitare che i punti siano tolti troppo velocemente,
          aggiungi un blocco `aspetta per 1 secondo` in cima al ciclo `ripeti per
          sempre` che controlla la posizione del pirata (ma, attenzione, non all'interno
          dell'istruzione `if`).
      courseD_playLab_cond6cloneForTest_authored_hint:
        courseD_playLab_cond6_a: Per rallentare la velocità del ninja, aggiungi all'inizio
          del programma il blocco `imposta la velocità di ogni ninja mascherato a
          ...`.
        courseD_playLab_cond6_b: Per controllare in continuazione se il pirata è al
          di sotto dei polpi, devi usare un blocco `se personaggio 1 posizione y >
          255` all'interno di un ciclo `ripeti per sempre`.
        courseD_playLab_cond6_c: Per evitare che i punti siano tolti troppo velocemente,
          aggiungi un blocco `aspetta per 1 secondo` in cima al ciclo `ripeti per
          sempre` che controlla la posizione del pirata (ma, attenzione, non all'interno
          dell'istruzione `if`).
      courseD_playLab_embed_cond6a_authored_hint: {}
      courseD_playLab_embedded_authored_hint: {}
      courseD_scrat_predict1_authored_hint: {}
      courseD_scrat_predict1_2018_authored_hint: {}
      courseD_scrat_ramp1_authored_hint:
        courseC_maze_programming1_a: If Scrat isn't getting to the acorn, make sure
          all three of the blocks have been fully snapped together, then click "Run"
          again.
        courseC_maze_programming1_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_scrat_ramp1_2018_authored_hint:
        courseC_maze_programming1_a: If Scrat isn't getting to the acorn, make sure
          all three of the blocks have been fully snapped together, then click "Run"
          again.
        courseC_maze_programming1_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_scrat_ramp2_authored_hint:
        courseC_maze_programming2_a: Per usare un blocco `vai avanti`, trascinalo
          dalla cassetta degli attrezzi nell'area di lavoro e collegalo al blocco
          `quando si clicca su "Esegui"`.
        courseC_maze_programming2_b: Make sure all three `move forward` blocks are
          attached to the `when run` block.
      courseD_scrat_ramp2_2018_authored_hint:
        courseC_maze_programming2_a: Per usare un blocco `vai avanti`, trascinalo
          dalla cassetta degli attrezzi nell'area di lavoro e collegalo al blocco
          `quando si clicca su "Esegui"`.
        courseC_maze_programming2_b: Make sure all three `move forward` blocks are
          attached to the `when run` block.
      courseD_scrat_ramp3_authored_hint:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
        courseC_maze_programming3_b: Remember that turns to the right and left are
          from Scrat's perspective.
      courseD_scrat_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
        courseC_maze_programming3_b: Remember that turns to the right and left are
          from Scrat's perspective.
      courseD_scrat_ramp4_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from Scrat's point
          of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          la ghianda, vai ancora una volta avanti.
        courseC_maze_programming4_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_scrat_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: You can turn right or left from Scrat's point
          of view. If you are facing right, turning right will make you point downwards.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          la ghianda, vai ancora una volta avanti.
        courseC_maze_programming4_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_scrat_ramp5_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: How far do you need to move to get to the corner?
        courseC_maze_programming5_c: You will need to turn left at the corner to get
          to the acorn.
      courseD_scrat_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: How far do you need to move to get to the corner?
        courseC_maze_programming5_c: You will need to turn left at the corner to get
          to the acorn.
      courseD_scrat_ramp6_authored_hint:
        courseC_maze_programming6a_a: Use a `repeat` loop to get Scrat moving!
      courseD_scrat_ramp6_2018_authored_hint:
        courseC_maze_programming6a_a: Use a `repeat` loop to get Scrat moving!
      courseD_scrat_ramp7_authored_hint:
        courseD_scrat_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseD_scrat_programming6_b: Remember to turn first before moving, since
          Scrat is facing the wrong direction.
        courseD_scrat_programming6_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_scrat_ramp7_2018_authored_hint:
        courseD_scrat_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseD_scrat_programming6_b: Remember to turn first before moving, since
          Scrat is facing the wrong direction.
        courseD_scrat_programming6_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseD_scrat_ramp8_authored_hint:
        courseD_maze_ramp7_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseD_maze_ramp7_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
        courseD_maze_ramp7_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseD_scrat_ramp8_2018_authored_hint:
        courseD_maze_ramp7_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseD_maze_ramp7_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
        courseD_maze_ramp7_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseE_artist_concept1_authored_hint:
        courseE_artist_concept1_a: The hexagons have 50 pixel sides and 60 degree
          turns to the right.
        courseE_artist_concept1_b: Try using a function here so you don't have to
          write the code for a hexagon over and over again.
        courseE_artist_concept1_c: Use the `set width` block before each function
          call to change the pen width.
      courseE_artist_concept1_2018_authored_hint:
        courseE_artist_concept1_a: The hexagons have 50 pixel sides and 60 degree
          turns to the right.
        courseE_artist_concept1_b: Try using a function here so you don't have to
          write the code for a hexagon over and over again.
        courseE_artist_concept1_c: Use the `set width` block before each function
          call to change the pen width.
      courseE_artist_concept4_authored_hint:
        courseE_artist_concept4_a: There are several ways to solve this puzzle. Can
          you make a plan?
        courseE_artist_concept4_b: Try creating one square. Then make a line of squares.  What
          comes next?
        courseE_artist_concept4_c: After drawing a line of squares, you can either
          turn around and draw another line of squares going left, or you can jump
          back to the left side of the figure to draw another line of squares going
          right. Which do you prefer?
      courseE_artist_concept4_2018_authored_hint:
        courseE_artist_concept4_a: There are several ways to solve this puzzle. Can
          you make a plan?
        courseE_artist_concept4_b: Try creating one square. Then make a line of squares.  What
          comes next?
        courseE_artist_concept4_c: After drawing a line of squares, you can either
          turn around and draw another line of squares going left, or you can jump
          back to the left side of the figure to draw another line of squares going
          right. Which do you prefer?
      courseE_artist_concept_challenge1_authored_hint:
        courseE_artist_concept_challenge1_a: Nel primo ciclo, per disegnare il mezzo
          esagono, l'artista percorre tratti di <b>30 pixel</b> invece di 40 e gira
          a destra di <b>60 gradi</b>.
        courseE_artist_concept_challenge1_b: Nel secondo ciclo, per disegnare i due
          lati del triangolo, l'artista percorre tratti di <b>80 pixel</b> e gira
          a destra di <b>120 gradi</b>.
        courseE_artist_concept_challenge1_c: |-
          This is the design you want to repeat to make the full shape:

          ![](https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png)
      courseE_artist_concept_challenge1_2018_authored_hint:
        courseE_artist_concept_challenge1_a: Nel primo ciclo, per disegnare il mezzo
          esagono, l'artista percorre tratti di <b>30 pixel</b> invece di 40 e gira
          a destra di <b>60 gradi</b>.
        courseE_artist_concept_challenge1_b: Nel secondo ciclo, per disegnare i due
          lati del triangolo, l'artista percorre tratti di <b>80 pixel</b> e gira
          a destra di <b>120 gradi</b>.
        courseE_artist_concept_challenge1_c: |-
          This is the design you want to repeat to make the full shape:

          ![](https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png)
      courseE_artist_concept_challenge2_authored_hint:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call
          it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:
          <xml>  <block type="jump_to">
          <title name="VALUE">???</title>
          </block></xml>
      courseE_artist_concept_challenge2_2018_authored_hint:
        courseE_artist_concept_challenge2_a: Once you define a function, you can call
          it over and over again - whenever and wherever you want!
        courseE_artist_concept_challenge2_b: |-
          You can jump to different positions on the canvas using this command:
          <xml>  <block type="jump_to">
          <title name="VALUE">???</title>
          </block></xml>
      courseE_artist_embed_functions8_authored_hint: {}
      courseE_artist_functions1_authored_hint:
        courseE_artist_functions1_a: Le lenti quadrate hanno i lati da 100 pixel,
          questo significa che dovrai muoverti in avanti di 175 pixel prima di disegnare
          la seconda lente.
        courseE_artist_functions1_b: Tieni conto che puoi sempre riscrivere su delle
          linee già tracciate.
        courseE_artist_functions1_c: For shorter code, try using a `repeat` loop to
          draw the square frames of the glasses.
      courseE_artist_functions10_authored_hint:
        courseD_artist_functions10_b: This drawing is a lot like the last one, except
          the function draws a different kind of line.
        courseD_artist_functions10_a: To get around using multiple `move forward`
          blocks, create a `draw hexagon` function and call that multiple times.
        courseD_artist_functions10_c: |-
          Do you see where this drawing could use a function called `line of hexagons`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2018_authored_hint:
        courseD_artist_functions10_b: This drawing is a lot like the last one, but
          the `draw line` function is now drawing a different shape.
        courseD_artist_functions10_a: To avoid using multiple `move forward` blocks,
          create a `draw hexagon` function and call that multiple times.
        courseD_artist_functions10_c: |-
          Do you see where this drawing could use a function called `line of hexagons`?

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions1_2018_authored_hint:
        courseE_artist_functions1_a: Le lenti quadrate hanno i lati da 100 pixel,
          questo significa che dovrai muoverti in avanti di 175 pixel prima di disegnare
          la seconda lente.
        courseE_artist_functions1_b: Tieni conto che puoi sempre riscrivere su delle
          linee già tracciate.
        courseE_artist_functions1_c: For shorter code, try using a `repeat` loop to
          draw the square frames of the glasses.
      courseE_artist_functions2_authored_hint:
        courseD_artist_functions2_b: The function will not contain your whole program,
          just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: Use the green `draw a square` block to "call"
          your function under the `when run` block. Otherwise, the code in your function
          will not run.
        courseD_artist_functions2_a: |-
          Il programma deve:<br>
          - usare la funzione<br>
          - andare avanti di 100 + 75 pixel<br>
          - usare la funzione
      courseE_artist_functions2_2018_authored_hint:
        courseD_artist_functions2_b: The function you write should not contain your
          whole program, just the part that draws a square with 100 pixel sides.
        courseD_artist_functions2_c: |-
          Use the green `draw a square` block to "call" your function under the `when run` block. Otherwise, the code in your function will not run.
          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          Il programma deve:<br>
          - usare la funzione<br>
          - andare avanti di 100 + 75 pixel<br>
          - usare la funzione
      courseE_artist_functions3_authored_hint:
        courseD_artist_functions3_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.

          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
        courseD_artist_functions3_b: Your loop should have all 3 starter code blocks
          inside of it.
      courseE_artist_functions3_2018_authored_hint: {}
      courseE_artist_functions4_authored_hint:
        courseD_artist_functions4_a: Try using a function!
        courseD_artist_functions4_b: Drag the `draw a star` function block out of
          the toolbox to begin building your function. It should have the same code
          as the previous puzzle, since you are drawing the same star pattern.
        courseD_artist_functions4_c: Use the green `draw a star` block to call this
          function in your main program. Don't forget to jump forward between each
          star!
      courseE_artist_functions4_2018_authored_hint:
        courseD_artist_functions4_a: Try using a function!
        courseD_artist_functions4_b: Drag the `draw a star` function block out of
          the toolbox to begin building your function. It should have the same code
          as the previous puzzle, since you are drawing the same star pattern.
        courseD_artist_functions4_c: Use the green `draw a star` block to call this
          function in your main program. Don't forget to jump forward between each
          star!
      courseE_artist_functions5_authored_hint:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by dragging the code for a star shape into
          the `draw a star` function, then use this function to draw the three stars!
      courseE_artist_functions5_2018_authored_hint:
        courseD_artist_functions5_a: Don't give up!  Remember what you have been learning.
        courseD_artist_functions5_b: Functions make it easy to call saved code at
          any time, not just from inside a loop!
        courseD_artist_functions5_c: Start by dragging the code for a star shape into
          the `draw a star` function, then use this function to draw the three stars!
      courseE_artist_functions6_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll
          create a function for it in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops, where the inner
          loop makes the square and the outer loop rotates the square four times.
        grade4_artist_functions_windows0_c: Non aver paura di sbagliare! Prova ad
          aggiungere blocchi ed eseguire il codice per vedere cosa accade, anche se
          non pensi di aver ancora risolto l'esercizio.
      courseE_artist_functions6_2018_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll
          create a function in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops. The inner loop
          will make the square and the outer loop will rotate the square four times.
        grade4_artist_functions_windows0_c: Non aver paura di sbagliare! Prova ad
          aggiungere blocchi ed eseguire il codice per vedere cosa accade, anche se
          non pensi di aver ancora risolto l'esercizio.
      courseE_artist_functions7_authored_hint:
        courseD_artist_functions7_a: Try creating your function first then adding
          in windows one at a time.
        courseD_artist_functions7_b: You shouldn't need to add any extra repeat loops.  Just
          jump the artist 100 pixels forward for each top window, and 150 pixels down
          to get the bottom windows.
      courseE_artist_functions7_2018_authored_hint:
        courseD_artist_functions7_a: Try creating your function first then add windows
          one at a time.
        courseD_artist_functions7_b: You shouldn't need to add any extra repeat loops.  Just
          jump the artist 100 pixels between each top window, then down 150 pixels
          to get to the bottom windows.
      courseE_artist_functions8_authored_hint:
        courseD_artist_functions8_f: You only need one `move forward` block, but you
          will need quite a few `jump forward` and/or `jump backward` blocks!
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.

          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_d: |-
          To make a line of squares,
          - repeat 3 times
          - draw a square with a side length of **50 pixels**
          - jump forward **100 pixels**
        courseD_artist_functions8_b: After your first line of squares, you need to
          move the artist down and back before you start your second line of squares.
        courseD_artist_functions8_c: You should move the artist back a different number
          of pixels for even lines than for odd ones.
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions8_2018_authored_hint:
        courseD_artist_functions8_f: You only need one `move forward` block, but you
          will need quite a few `jump forward` and/or `jump backward` blocks!
        courseD_artist_functions8_a: |-
          Start by making a function for a square, then try making a function for a line of squares.

          How would you use the `draw a line of squares` function to make this image?
        courseD_artist_functions8_d: |-
          To make a line of squares,
          - repeat 3 times
          - draw a square with a side length of **50 pixels**
          - jump forward **100 pixels**
        courseD_artist_functions8_b: |-
          Think of each row in this picture as a line of 3 squares. How many lines of squares are there and where do you start drawing each of them?

          ![](https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png)
        courseD_artist_functions8_c: At the end of each line of squares, the artist
          will need to jump down and backward before he draws the next line of squares.
        courseD_artist_functions8_g: "![](https://images.code.org/c5b48a0db328c6cb32a024d2bf9c00af-image-1493139855549.gif)"
      courseE_artist_functions8a_2018_authored_hint: {}
      courseE_artist_functions8b_2018_authored_hint:
        courseD_artist_functions8_f: You only need one `move forward` block if you're
          doing this correctly!
        courseD_artist_functions8_a: Start by making a function for a square, then
          try making a function for a line of squares.
        courseD_artist_functions8_d: |-
          To make a line of squares,
          - repeat 3 times
          - draw a square
          - jump forward **100 pixels**
      courseE_artist_functions8c_2018_authored_hint:
        courseD_artist_functions8_f: This is easier than it looks!  You shouldn't
          need any `move` or `jump` blocks here!
        courseD_artist_functions8_a: The second line of squares is just a 180 degree
          turn different than the first!
        courseD_artist_functions8_c: At the end of each line of squares, the artist
          only needs to turn 180 degrees before drawing the next line of squares.  Put
          the whole thing in a repeat loop to set you up for the next exercise!
      courseE_artist_functions9_authored_hint:
        courseD_artist_functions9_e: |-
          Can you spot all four places that the `line of triangles` can be used in this drawing?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          This puzzle can be broken into three parts:
          - make the `draw a triangle` function
          - make the `draw a line of triangles` function
          - use your `draw a line of triangles` function four times to complete the drawing
        courseD_artist_functions9_b: This drawing is made by creating a line of triangles
          and turning either 60 or 120 degrees after each time you draw the triangle
          line.
        courseD_artist_functions9_c: |-
          To draw a line of triangles:
          - repeat 4 times
          - draw a triangle
          - jump forward 50 pixels
        courseD_artist_functions9_d: |-
          To draw the diamond:
          - repeat 2 times
          - draw a line of triangles
          - turn 60 degrees
          - draw a line of triangles
          - turn 120 degrees
      courseE_artist_functions9_2018_authored_hint:
        courseD_artist_functions9_e: |-
          Can you spot all four places that the `line of triangles` can be used in this drawing?

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          This puzzle can be broken into three parts:
          - make the `draw a triangle` function
          - make the `draw a line of triangles` function
          - use your `draw a line of triangles` function four times to complete the drawing
        courseD_artist_functions9_b: This drawing is made by drawing a line of triangles
          4 times and turning either 60 or 120 degrees before you draw the next triangle
          line.
        courseD_artist_functions9_c: |-
          To draw a line of triangles:
          - repeat 4 times
          - draw a triangle
          - jump forward 50 pixels
        courseD_artist_functions9_d: |-
          To draw the diamond:
          - repeat 2 times
          - draw a line of triangles
          - turn 60 degrees
          - draw a line of triangles
          - turn 120 degrees
      courseE_artist_functionsProj_2018_authored_hint: {}
      courseE_artist_functions_challenge_authored_hint:
        courseE_artist_functions_challenge_a: If you call the function one more time,
          you can create the same design in the final corner. You can also `jump to`
          other positions or change the whole thing around however you want!
      courseE_artist_functions_challenge1_authored_hint:
        courseE_artist_functions_challenge1_a: If you call the function one more time,
          you can create the same design in the final corner. You can also `jump to`
          other positions or change the whole thing around however you want!
        courseE_artist_functions_challenge1_b: You can also `jump to` other positions
          or change the whole design however you want!
      courseE_artist_functions_challenge1_2018_authored_hint:
        courseE_artist_functions_challenge1_a: If you call the function one more time,
          you can create the same design in the final corner.
        courseE_artist_functions_challenge1_b: You can also `jump to` other positions
          or change the whole design however you want!
      courseE_artist_functions_challenge2_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n  <block type=\"jump_to_xy\">\n
          \   <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n
          \ </block>\n  </xml>\n  \nThis `jump to` block lets you move the zombie
          artist to any pixel on the grid, whenever you want. It works by moving him
          a number of pixels over to the right and a number of pixels down. This is
          always counted from the top left corner, which it means it doesn't matter
          where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      courseE_artist_functions_challenge2_2018_authored_hint:
        courseE_artist_functions_challenge1_a: "<xml>\n\n  <block type=\"jump_to_xy\">\n
          \   <title name=\"XPOS\">350</title>\n    <title name=\"YPOS\">200</title>\n
          \ </block>\n  </xml>\n  \nThis `jump to` block lets you move the zombie
          artist to any pixel on the grid, whenever you want. It works by moving him
          a number of pixels over to the right and a number of pixels down. This is
          always counted from the top left corner, which it means it doesn't matter
          where the zombie artist is *before* the command is run!\n\n![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)"
      courseE_artist_functions_predict1_authored_hint: {}
      courseE_artist_functions_predict1_2018_authored_hint: {}
      courseE_artist_functions_predict2_authored_hint: {}
      courseE_artist_functions_predict2_2018_authored_hint: {}
      courseE_artist_predict1_authored_hint: {}
      courseE_artist_predict1_2018_authored_hint: {}
      courseE_artist_ramp10_authored_hint:
        courseD_artist_ramp10_a: Don't forget to turn by 60 degrees after each triangle.  Which
          loop do you need to put that instruction inside?
        courseD_artist_ramp10_b: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseD_artist_ramp10_c: |-
          The artist will draw six triangles in total:

          ![](https://images.code.org/752d82f3afdca0a7d7c01d6fa2abb583-image-1499889821499.2_solution2.gif)
      courseE_artist_ramp11_authored_hint:
        courseD_artist_ramp11a: Per disegnare un lato, usa il blocco `vai avanti di
          100 pixel` e cambia il 100 in 200.
        courseD_artist_ramp11b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
      courseE_artist_ramp12_authored_hint:
        courseD_artist_ramp12_a: Puoi disegnare prima il quadrato e poi il triangolo,
          oppure farlo al contrario!
      courseE_artist_ramp8_authored_hint:
        courseE_artist_ramp8_a: Per disegnare un lato, usa il blocco `vai avanti di
          100 pixel` e cambia il 100 in 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseE_artist_ramp8_c: Your loop should have two blocks inside of it, the
          `move forward` and the `turn right by 90 degrees`.
      courseE_artist_ramp8_2_authored_hint:
        courseE_artist_ramp8_a: Per disegnare un lato, usa il blocco `vai avanti di
          100 pixel` e cambia il 100 in 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'Your loop should have two blocks inside of it: `move
          forward` and `turn right by 90 degrees`.'
      courseE_artist_ramp8_2018_authored_hint:
        courseE_artist_ramp8_a: Per disegnare un lato, usa il blocco `vai avanti di
          100 pixel` e cambia il 100 in 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'Your loop should have two blocks inside of it: `move
          forward` and `turn right by 90 degrees`.'
      courseE_artist_ramp8_2_2018_authored_hint:
        courseE_artist_ramp8_a: Per disegnare un lato, usa il blocco `vai avanti di
          100 pixel` e cambia il 100 in 200.
        courseE_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseE_artist_ramp8_c: 'Your loop should have two blocks inside of it: `move
          forward` and `turn right by 90 degrees`.'
      courseE_artist_ramp9_authored_hint:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward
          100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_artist_ramp9_2_authored_hint:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward
          100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_artist_ramp9_2018_authored_hint:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward
          100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_artist_ramp9_2_2018_authored_hint:
        courseD_artist_ramp12_a: How is this similar to a square?  How is it different?
        courseD_artist_ramp12_b: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseD_artist_ramp12_c: To draw each side, you will need to move forward
          100 pixels, then turn right 120 degrees. How many sides do you need?
      courseE_bee_concept1_authored_hint:
        courseE_bee_concept1_b: Are there any patterns that *repeat* here?
        courseE_bee_concept1_a: If you don't understand how to use nested loops here,
          try writing out the instructions step by step on a piece of paper.  Circle
          the patterns that you see.
      courseE_bee_concept1_2018_authored_hint:
        courseE_bee_concept1_b: Are there any patterns that *repeat* here?
        courseE_bee_concept1_a: If you don't understand how to use nested loops here,
          try writing out the instructions step by step on a piece of paper.  Circle
          the patterns that you see.
      courseE_bee_concept2_authored_hint:
        courseE_bee_concept2_a: Would a `while` loop help here?
        courseE_bee_concept2_d: You can even check empty spaces to see if honey is
          > 0.
        courseE_bee_concept2_b: You can use `while` loops to move to the end of each
          path, and to collect all of the honey from each space.
        courseE_bee_concept2_c: Which way should the bee turn after each path?
      courseE_bee_concept2_2018_authored_hint:
        courseE_bee_concept2_a: Would a `while` loop help here?
        courseE_bee_concept2_d: You can even check empty spaces to see if honey is
          > 0.
        courseE_bee_concept2_b: You can use `while` loops to move to the end of each
          path, and to collect all of the honey from each space.
        courseE_bee_concept2_c: Which way should the bee turn after each path?
      courseE_bee_concept3_authored_hint:
        courseE_bee_concept3a_a: Try using nested `repeat` loops to solve this puzzle.
        courseE_bee_concept3a_b: If you can't figure out where to put the loops, try
          writing your code step-by-step and looking for patterns.
        courseE_bee_concept3a_c: There are three groups of flowers, so your outer
          `repeat` loop should repeat three times.
      courseE_bee_concept3_2018_authored_hint:
        courseE_bee_concept3a_a: Try using nested `repeat` loops to solve this puzzle.
        courseE_bee_concept3a_b: If you can't figure out where to put the loops, try
          writing your code step-by-step and looking for patterns.
        courseE_bee_concept3a_c: There are three groups of flowers, so your outer
          `repeat` loop should repeat three times.
      courseE_bee_concept4_authored_hint:
        courseE_bee_concept4_a: An `if/else` statement could really help you out here.
        courseE_bee_concept4_b: The stair step pattern can help you get through all
          of the flowers and honeycombs.
        courseE_bee_concept4_c: If you are at a flower, how many times do you have
          to get nectar? Is this the same number for all flowers?
      courseE_bee_concept4_2018_authored_hint:
        courseE_bee_concept4_a: An `if/else` statement could really help you out here.
        courseE_bee_concept4_b: The stair step pattern can help you get through all
          of the flowers and honeycombs.
        courseE_bee_concept4_c: If you are at a flower, how many times do you have
          to get nectar? Is this the same number for all flowers?
      courseE_bee_concept5_authored_hint:
        courseE_bee_concept5_a: 'The flowers follow a rectangular path.  You can trace
          that rectangle using `while path ahead` even with a different number of
          squares per side. '
        courseE_bee_concept5_c: |-
          Here's a picture of a rectangular path the bee could take.

          ![](https://images.code.org/b0ab0f9ec823fd8fbc9b032d68fd69d0-image-1493152066638.7.8 Hint Drawing.png)
        courseE_bee_concept5_b: You can check every square for a flower using the
          `if` block, even if you already know there's not one there.
      courseE_bee_concept5_2018_authored_hint:
        courseE_bee_concept5_a: The flowers follow a rectangular path.  You can trace
          that rectangle using `while path ahead` even with a different number of
          squares per side.
        courseE_bee_concept5_c: |-
          Here's a picture of a rectangular path the bee could take.

          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: You can check every square for a flower using the
          `if` block, even if you already know there's not one there.
      courseE_bee_functions1_authored_hint:
        courseE_bee_functions1_a: There is more than one right answer to this puzzle.
        courseE_bee_functions1_b: Use a `repeat` loop when collecting nectar to make
          your code shorter.
        courseE_bee_functions1_c: Remember that left and right turns are from the
          perspective of the bee.
      courseE_bee_functions10_authored_hint:
        courseE_bee_functions10_a: You will need a `while` loop to collect all of
          the honey, since it varies between honeycombs.
        courseE_bee_functions10_b: Include the turns and movement in your function,
          so you can call it when the bee is on the main path.
        courseE_bee_functions10_c: Remember to call your function in the main program!
      courseE_bee_functions10_2018_authored_hint:
        courseE_bee_functions10_a: You will need a `while` loop to collect all of
          the honey, since it varies between honeycombs.
        courseE_bee_functions10_b: Include the turns and movement in your function,
          so you can call it when the bee is on the main path.
        courseE_bee_functions10_c: Remember to call your function in the main program!
      courseE_bee_functions1_2018_authored_hint:
        courseE_bee_functions1_a: Remember that left and right turns are from the
          point of view of the bee.
        courseE_bee_functions1_b: Use a `repeat` loop when collecting nectar to make
          your code shorter.
        courseE_bee_functions1_c: Remember that left and right turns are from the
          perspective of the bee.
      courseE_bee_functions2_authored_hint:
        courseE_bee_functions2_a: The function has been written for you, but you will
          need to call it at each flower.
        courseE_bee_functions2_b: Use the green `get 2 nectar` block to call the function.
        courseE_bee_functions2_c: You will want to move forward and get 2 nectar twice
          to solve this puzzle.
      courseE_bee_functions2_2018_authored_hint:
        courseE_bee_functions2_a: The function has been written for you, but you will
          need to call it at each flower.
        courseE_bee_functions2_b: This <xml><block type="procedures_callnoreturn"><mutation
          name="get 2 nectar"/></block></xml> block calls the function given to you.
        courseE_bee_functions2_c: You will want to move forward and get 2 nectar twice
          to solve this puzzle.
      courseE_bee_functions3_authored_hint:
        courseE_bee_functions3_a: 'Your function for this puzzle only needs to collect
          nectar, it shouldn''t have any `move forward` or `turn` blocks in it. '
        courseE_bee_functions3_b: Call your `get 5` function in your main program
          under the `when run` block.
        courseE_bee_functions3_c: Your main program will control all of the movement,
          the function is just for what happens when the bee reaches a flower.
        courseE_bee_functions3_d: Try using this path through.
      courseE_bee_functions3_2018_authored_hint:
        courseE_bee_functions3_a: 'Your function for this puzzle only needs to collect
          nectar, it shouldn''t have any `move forward` or `turn` blocks in it. '
        courseE_bee_functions3_b: Call your `get 5` function under the `when run`
          block.
        courseE_bee_functions3_c: Your main program will control all of the movement,
          the function is just for what happens when the bee reaches a flower.
        courseE_bee_functions3_d: Try using this path through.
      courseE_bee_functions4_authored_hint:
        courseE_bee_functions4_a: Your function will already travel down the side
          paths and return the bee back to the main road.  You don't need to add that
          part to your program.
        courseE_bee_functions4_b: Use the green `move and get nectar` block to call
          this function.
        courseE_bee_functions4_c: You don't need to change the function, just use
          it in your program.
      courseE_bee_functions4_2018_authored_hint:
        courseE_bee_functions4_a: Your function will already travel down the side
          paths and return the bee back to the main road.  You don't need to add that
          part to your program.
        courseE_bee_functions4_b: Use the green `move and get nectar` block to call
          this function.
        courseE_bee_functions4_c: You don't need to change the function, just use
          it in your program.
      courseE_bee_functions5_authored_hint:
        courseE_bee_functions5_a: Edit the function so that it solves the puzzle without
          having to change the main program.
        courseE_bee_functions5_c: The `move forward` block can be changed into a `move
          backward` block. Use this instead of turning all the way around at the end
          of the paths!
        courseE_bee_functions5_b: "Your function should make the bee: \n- turn\n-
          move forward\n- collect all of the nectar\n- turn around\n- move back to
          the main path\n- turn back to the direction that the bee started from"
      courseE_bee_functions5_2018_authored_hint:
        courseE_bee_functions5_a: Edit the function so that it solves the puzzle without
          having to change the main program.
        courseE_bee_functions5_c: The `move forward` block can be changed into a `move
          backward` block. Use this instead of turning all the way around at the end
          of the paths!
        courseE_bee_functions5_b: "Your function should make the bee: \n- turn\n-
          move forward\n- collect all of the nectar\n- move backward\n- turn back
          to the direction that the bee started from"
      courseE_bee_functions6_authored_hint:
        courseE_bee_functions6_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!

          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
        courseE_bee_functions6_b: It might help in this case to move inside of the
          function, but not all of your `move` blocks need to be there.
      courseE_bee_functions6_2018_authored_hint:
        courseE_bee_functions6_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!

          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
        courseE_bee_functions6_b: It might help in this case to move inside of the
          function, but not all of your `move` blocks need to be there.
      courseE_bee_functions6test_authored_hint:
        courseE_bee_functions6_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!

          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
        courseE_bee_functions6_b: It might help in this case to move inside of the
          function, but not all of your `move` blocks need to be there.
      courseE_bee_functions7_authored_hint:
        courseE_bee_functions7_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions7_b: |-
          Ricordati di inserire il codice all'interno del blocco verde della funzione.<br>

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: This function should turn the bee to head him down
          the path, collect the nectar, make the honey, then turn the bee around and
          bring him back.
      courseE_bee_functions7_2018_authored_hint:
        courseE_bee_functions7_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions7_b: |-
          Ricordati di inserire il codice all'interno del blocco verde della funzione.<br>

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: This function should turn the bee to head him down
          the path, collect the nectar, make the honey, then turn the bee around and
          bring him back.
      courseE_bee_functions8_authored_hint:
        courseE_bee_functions8_a: Your function will only need to collect nectar...
          but this time, you will need to use a `while` loop instead of a `repeat`
          loop.
        courseE_bee_functions8_b: Use `while nectar > 0` to make sure you get all
          of the nectar.
        courseE_bee_functions8_c: Your main program will need a stair step movement
          pattern.
      courseE_bee_functions8_2018_authored_hint:
        courseE_bee_functions8_a: Your function will only need to collect nectar.
          Try using a while loop instead of a repeat loop.
        courseE_bee_functions8_b: Use `while nectar > 0` to make sure you get all
          of the nectar.
        courseE_bee_functions8_c: Your main program will need a stair step movement
          pattern. Remember, the main program is the code under the `when run` block.
      courseE_bee_functions9_authored_hint:
        courseE_bee_functions9_a: You can use the exact same function for this puzzle
          as you did in the last puzzle.  All you need to do is create a function
          that collects all of the nectar when you get to each flower.
        courseE_bee_functions9_b: Even though you know how much nectar some of the
          flowers have, a `while` loop can make one function work for all of them.
      courseE_bee_functions9_2018_authored_hint:
        courseE_bee_functions9_a: You can use the exact same function for this puzzle
          as you did in the last puzzle.  All you need to do is create a function
          that collects all of the nectar when you get to each flower.
        courseE_bee_functions9_b: Even though you know how much nectar some of the
          flowers have, a `while` loop can make one function work for all of them.
      courseE_bee_functions_challenge1_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      courseE_bee_functions_challenge1_2018_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      courseE_bee_functions_challenge2_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      courseE_bee_functions_challenge2_2018_authored_hint:
        courseE_bee_functions_challenge1_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseE_bee_functions_challenge1_b: Remember to build your code inside of
          the green function block.
      courseE_bee_ramp14_authored_hint:
        courseE_bee_ramp14_a: The bee works just like the farmer in the previous puzzle.
          Buzz along the path and collect nectar if there is nectar, otherwise make
          honey!
        courseE_bee_ramp14_b: There can be more than one flower or honeycomb at each
          space, so make sure to use `while` loops to get them all!
        courseE_bee_ramp14_c: This puzzle is nearly identical to the previous one,
          just with honey and nectar instead of vegetables.
      courseE_bee_ramp14_2018_authored_hint:
        courseE_bee_ramp14_a: The bee works just like the farmer in the previous puzzle.
          Buzz along the path and collect nectar while there is nectar (while nectar
          > 0) and make all of the honey.
        courseE_bee_ramp14_b: There can be more than one flower or honeycomb at each
          space, so make sure to use `while` loops to get them all!
        courseE_bee_ramp14_c: This puzzle is nearly identical to the previous one,
          just with honey and nectar instead of vegetables.
      courseE_bee_ramp17_authored_hint:
        courseE_bee_ramp17_a: Because we don't have a repeat block to do something
          a certain number of times, what block should we use to get us along the
          path?
        courseE_bee_ramp17: If you were to solve this puzzle without a while block,
          where would you see repeated code? How can you use this repeated code to
          shape how you must use a while block to solve the problem?
        courseE_bee_ramp17_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
        courseE_bee_ramp17_c: You will want to move in a stair step pattern. Try coding
          that first, then adding the `if/else` statement and `while` loops to check
          for flowers and honeycombs.
      courseE_collector_ramp10_authored_hint:
        courseD_artist_ramp10_a: |-
          Invece di usare quattro blocchi `vai avanti` per ogni lato, prova a mettere un unico blocco `vai avanti` all'interno di un ciclo `ripeti ... volte`, come qui:
          <xml><block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          </block></xml>
        courseD_artist_ramp10_b: Don't forget to collect one piece of treasure, then
          turn after each set of steps!
      courseE_farmer_concept1_authored_hint:
        courseE_farmer_concept1_a: A `while there is a hole` block will help you fill
          any hole until it's flat.
        courseE_farmer_concept1_b: You can use a stair step pattern to get to the
          holes.
      courseE_farmer_concept1_2018_authored_hint:
        courseE_farmer_concept1_a: A `while there is a hole` block will help you fill
          any hole until it's flat.
        courseE_farmer_concept1_b: You can use a stair step pattern to get to the
          holes.
      courseE_farmer_concept2_authored_hint:
        courseE_farmer_concept2_a: The paths are all the same length, but they are
          a different number of squares apart.  A loop isn't ideal here. Try a function.
        courseE_farmer_concept2_b: A function which turns, goes down the path, gathers
          pumpkins, and returns to the main horizontal path could be helpful here.
        courseE_farmer_concept2_c: Your main program can call this function with the
          green `do something` block.
      courseE_farmer_concept2_2018_authored_hint:
        courseE_farmer_concept2_a: The paths are all the same length, but they are
          a different number of squares apart.  A loop isn't ideal here. Try a function.
        courseE_farmer_concept2_b: A function which turns, goes down the path, gathers
          pumpkins, and returns to the main horizontal path could be helpful here.
        courseE_farmer_concept2_c: Your main program can call this function with the
          green `do something` block.
      courseE_farmer_concept3_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: Il blocco `mentre c'è strada in
          avanti` ti permette di andare avanti, anche se non sai quante caselle devi
          percorrere.
        grade3_robotFarmer_ConditionalsIntro_8_b: What should you do once you've reached
          the end of a path?
        grade3_robotFarmer_ConditionalsIntro_8_c: Use a `repeat` loop to run your
          code multiple times for each straight path.
      courseE_farmer_concept3_2018_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: Il blocco `mentre c'è strada in
          avanti` ti permette di andare avanti, anche se non sai quante caselle devi
          percorrere.
        grade3_robotFarmer_ConditionalsIntro_8_b: What should you do once you've reached
          the end of a path?
        grade3_robotFarmer_ConditionalsIntro_8_c: Use a `repeat` loop to run your
          code multiple times for each straight path.
      courseE_farmer_concept4_authored_hint:
        4-5_Artist_Patterns_3_a: Devi semplicemente scegliere uno dei gruppi di blocchi
          già preparati nella cassetta degli attrezzi ed inserirlo nel punto giusto
          del codice.
        4-5_Artist_Patterns_3_b: Se temi di esserti perso, puoi sempre cliccare "Ripristina"
          per riportarti alla situazione iniziale!
      courseE_farmer_functions1_authored_hint:
        courseE_farmer_functions1_a: The toolbox is organized a little differently
          this time! Click on the different categories to see which blocks you have.
        courseE_farmer_functions1_b: You only need to pick one pumpkin, but could
          you use a loop to get to it?
      courseE_farmer_functions10_authored_hint: {}
      courseE_farmer_functions10a1_2018_authored_hint: {}
      courseE_farmer_functions10b_authored_hint:
        courseE_farmer_functions10b_a: You will need to use an `if/then` statement
          to solve this puzzle.
        courseE_farmer_functions10b_b: Which way do you need to turn after the first
          pumpkin?
        courseE_farmer_functions10b_c: Look back at the last puzzle if you need help
          making the function.
      courseE_farmer_functions10b_2018_authored_hint:
        courseE_farmer_functions10b_a: You will have to re-create your function first.
        courseE_farmer_functions10b_b: Which way do you need to turn after the first
          pumpkin?
        courseE_farmer_functions10b_c: Look back at the last puzzle if you need help
          making the function.
      courseE_farmer_functions11_predict_authored_hint: {}
      courseE_farmer_functions11_predict_2018_authored_hint: {}
      courseE_farmer_functions13_2018_authored_hint: {}
      courseE_farmer_functions1_2018_authored_hint:
        courseE_farmer_functions1_a: The toolbox is organized a little differently
          this time! Click on the different categories to see which blocks you have.
        courseE_farmer_functions1_b: You only need to pick one pumpkin, but could
          you use a loop to get to it?
      courseE_farmer_functions1a_authored_hint:
        courseE_farmer_functions1a_a: Nested `if` and `if/else` statements will really
          help you out here.
        courseE_farmer_functions1a_b: If you are not at corn, what crops should you
          check for next?
      courseE_farmer_functions1a_2018_authored_hint:
        courseE_farmer_functions1a_a: Think through the `if/else` statements step
          by step. What should you do if you are standing at a corn plant?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      courseE_farmer_functions2a_authored_hint: {}
      courseE_farmer_functions2aALT_authored_hint: {}
      courseE_farmer_functions2b_authored_hint:
        courseE_farmer_functions2b_a: You can use a `repeat until pumpkin` to get
          to the ends of the two paths.
        courseE_farmer_functions2b_b: There is no corn on the connecting path, so
          you can just move along it and turn.
        courseE_farmer_functions2b_c: You will need two separate `repeat until` blocks
          to get all of the crops.
      courseE_farmer_functions2b_2018_authored_hint:
        courseE_farmer_functions2b_a: You can use a `repeat until pumpkin` to get
          to the ends of the two paths.
        courseE_farmer_functions2b_b: There is no corn on the connecting path, so
          you can just move along it and turn.
        courseE_farmer_functions2b_c: You will need two separate `repeat until` blocks
          to get all of the crops.
      courseE_farmer_functions2ba_authored_hint:
        courseE_farmer_functions2ba_a: Use the green `corn and pumpkin` block to call
          this function.
        courseE_farmer_functions2ba_b: Drag all of the blocks in the toolbox together
          under `when run` to see how this function works.
      courseE_farmer_functions2ba_2018_authored_hint:
        courseE_farmer_functions2ba_a: Use the green `corn and pumpkin` block to call
          this function.
      courseE_farmer_functions3_authored_hint:
        courseE_farmer_functions3_a: Try using a `while path ahead` loop to get you
          where you need to be.
      courseE_farmer_functions3b_authored_hint:
        courseE_farmer_functions1a_a: Nested `if` and `if/else` statements will really
          help you out here.
      courseE_farmer_functions3c_authored_hint:
        courseE_farmer_functions3c_a: What sequence is repeated often in this program?
          Can you drag these blocks into the function?
        courseE_farmer_functions3c_b: Don't forget to call your function in the main
          program wherever you removed blocks.
      courseE_farmer_functions3c1_2018_authored_hint: {}
      courseE_farmer_functions3c_2018_authored_hint: {}
      courseE_farmer_functions4_authored_hint:
        courseE_farmer_functions4_a: Drag all of the code out of your `repeat` loop
          and into the `go get pumpkins` function.
        courseE_farmer_functions4_b: Don't forget to put the block that calls the
          `go get pumpkins` functions inside your loop before you run your code.
      courseE_farmer_functions4b_authored_hint:
        courseE_farmer_functions4b_a: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
        courseE_farmer_functions4b_b: Remember to turn after each path.
        courseE_farmer_functions4b_c: The green `corn and pumpkin` blocks are in the
          Functions tab of the toolbox.
      courseE_farmer_functions4b_2018_authored_hint:
        courseE_farmer_functions4b_a: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
        courseE_farmer_functions4b_b: Remember to turn after each path.
        courseE_farmer_functions4b_c: The green `corn and pumpkin` blocks are in the
          Functions tab of the toolbox.
      courseE_farmer_functions5_authored_hint: {}
      courseE_farmer_functions5a_authored_hint: {}
      courseE_farmer_functions5b_authored_hint:
        courseE_farmer_functions5b_a: You will need to use a `while corn` loop, a
          `while lettuce` and a `while pumpkin` to make sure you get everything.
      courseE_farmer_functions5c_authored_hint:
        courseE_farmer_functions5c_a: Are there any other patterns you can loop in
          this puzzle?
        courseE_farmer_functions5c_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseE_farmer_functions5c_2018_authored_hint:
        courseE_farmer_functions5c_a: Are there any other patterns you can loop in
          this puzzle?
        courseE_farmer_functions5c_b: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseE_farmer_functions6_authored_hint: {}
      courseE_farmer_functions6b_authored_hint: {}
      courseE_farmer_functions6c_authored_hint:
        courseE_farmer_functions6c_a: Edit your function to check for the lettuce
          as well.
        courseE_farmer_functions6c_b: Would an `if/else` block help to check if there
          is lettuce in a space?
        courseE_farmer_functions6c_c: Don't forget to keep checking for corn!
      courseE_farmer_functions6c_2018_authored_hint:
        courseE_farmer_functions6c_a: Edit your function to check for the lettuce
          as well.
        courseE_farmer_functions6c_b: Would an `if/else` block help to check if there
          is lettuce in a space?
        courseE_farmer_functions6c_c: Don't forget to keep checking for corn!
      courseE_farmer_functions7_authored_hint: {}
      courseE_farmer_functions7a1_2018_authored_hint: {}
      courseE_farmer_functions7b_authored_hint:
        courseE_farmer_functions7b_a: You don't need a function here, but you can
          make one if it is helpful to you!
        courseE_farmer_functions7b_b: Use an `if/else` statement to check for crops,
          then turn based on which crop you find.
        courseE_farmer_functions7b_c: A `repeat until pumpkin` loop can help you get
          all the way through the maze.
      courseE_farmer_functions7b_2018_authored_hint:
        courseE_farmer_functions7b_a: You don't need a function here, but you can
          make one if it is helpful to you!
        courseE_farmer_functions7b_b: Use an `if/else` statement to check for crops,
          then turn based on which crop you find.
        courseE_farmer_functions7b_c: A `repeat until pumpkin` loop can help you get
          all the way through the maze.
      courseE_farmer_functions8_authored_hint:
        courseE_farmer_functions8_a: Create a function that takes the farmer to the
          corn, gets all of the corn, then turns around and comes back.
      courseE_farmer_functions8a1_2018_authored_hint: {}
      courseE_farmer_functions8b_authored_hint:
        courseE_farmer_functions8b_a: Try running the code given to see what it does.
          What do you need after this?
        courseE_farmer_functions8b_b: Drag all of the starter blocks into a function
          so that you can use them more than once.
        courseE_farmer_functions8b_c: How many times do you need to call the function?
      courseE_farmer_functions8b_2018_authored_hint:
        courseE_farmer_functions8b_a: Try running the code given to see what it does.
          What do you need after this?
        courseE_farmer_functions8b_b: Drag all of the starter blocks into a function
          so that you can use them more than once.
        courseE_farmer_functions8b_c: How many times do you need to call the function?
      courseE_farmer_functions9_authored_hint:
        courseE_farmer_functions8_a: Create a function that takes the farmer to the
          corn, gets all of the corn, then turns around and comes back.
      courseE_farmer_functions9a1_2018_authored_hint: {}
      courseE_farmer_functions9b_authored_hint:
        courseE_farmer_functions9b_a: Can you use nested `if` and `if/else` statements
          to move along the path?
        courseE_farmer_functions9b_b: Use `repeat until pumpkin` to move through all
          of the paths.
        courseE_farmer_functions9b_c: You will want to move through the paths as if
          they are squares getting larger after each loop.
      courseE_farmer_functions9b_2018_authored_hint:
        courseE_farmer_functions9b_a: Can you use nested `if` and `if/else` statements
          to move along the path?
        courseE_farmer_functions9b_b: Use `repeat until pumpkin` to move through all
          of the paths.
        courseE_farmer_functions9b_c: You will want to move through the paths as if
          they are squares getting larger after each loop.
      courseE_farmer_functions9b_clone_authored_hint: {}
      courseE_farmer_predict1_authored_hint:
        courseE_farmer_ramp12a: Feel free to go back to the last puzzle if you need
          a reminder of how to pick produce only **while** there is produce to pick.
      courseE_farmer_predict1_2018_authored_hint:
        courseE_farmer_ramp12a: Feel free to go back to the last puzzle if you need
          a reminder of how to pick produce only **while** there is produce to pick.
      courseE_farmer_predict2_authored_hint: {}
      courseE_farmer_predict2_2018_authored_hint: {}
      courseE_farmer_ramp11_authored_hint:
        courseE_farmer_ramp11_a: If you're having a hard time seeing where the loops
          should go, try coding it all out then looking for a pattern.
        courseE_farmer_ramp11_b: How can you use a `repeat` loop to pick lettuce,
          instead of dragging out 5 `pick lettuce` blocks?
        courseE_farmer_ramp11_c: You don't need to use 5 repeat loops to get all of
          the lettuce.  Instead, drag your lettuce picking repeat loop inside of another
          loop (along with a `move forward` block, and you'll have it!)
      courseE_farmer_ramp11a_authored_hint:
        courseE_farmer_ramp12_a: 'Instead of using a `repeat` loop to tell the farmer
          how many times to pick lettuce, now you can use a `while there is lettuce`
          block.  '
        courseE_farmer_ramp12_b: You only need to move forward once to get to the
          lettuce.
      courseE_farmer_ramp11a_2018_authored_hint:
        courseE_farmer_ramp12_a: 'Instead of using a `repeat` loop to tell the farmer
          how many times to shovel dirt, now you can use a `while there is a pile`
          block.  '
        courseE_farmer_ramp12_b: You only need to move forward once to get to the
          dirt.
      courseE_farmer_ramp11b_authored_hint:
        courseE_farmer_ramp11b_a: You can nest your `while` loop inside of a `repeat`
          loop to make your code shorter.
      courseE_farmer_ramp11b_2018_authored_hint:
        courseE_farmer_ramp11b_a: You can nest your `while` loop inside of a `repeat`
          loop to make your code shorter.
      courseE_farmer_ramp12_authored_hint:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the
          outside of it all to tell the farmer how many times to walk forward and
          get lettuce.
      courseE_farmer_ramp12_2018_authored_hint:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the
          outside of it all to tell the farmer how many times to walk forward and
          get lettuce.
      courseE_farmer_ramp12_forswap_authored_hint:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the
          outside of it all to tell the farmer how many times to walk forward and
          get lettuce.
      courseE_farmer_ramp12_forswap_2018_authored_hint:
        courseE_farmer_ramp12_b: You will still need to use a `repeat` loop on the
          outside of it all to tell the farmer how many times to walk forward and
          get lettuce.
      courseE_farmer_ramp12a_authored_hint:
        courseE_farmer_ramp12b: You will need to check your `if` statement 21 times
          to solve this puzzle.
        courseE_farmer_ramp12c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
        courseE_farmer_ramp12d: There will only be lettuce, so you don't need to worry
          about empty spaces, corn, or pumpkins.
      courseE_farmer_ramp12a_2018_authored_hint:
        courseE_farmer_ramp12b: You will need to check your `if` statement 21 times
          to solve this puzzle.
        courseE_farmer_ramp12c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
        courseE_farmer_ramp12d: There will only be lettuce, so you don't need to worry
          about empty spaces, corn, or pumpkins.
      courseE_farmer_ramp12b_authored_hint: {}
      courseE_farmer_ramp12b_2018_authored_hint: {}
      courseE_farmer_ramp12c_authored_hint:
        courseE_farmer_ramp12b_b: You will still need to use an `until` loop first,
          then use a `while` loop once you get to the lettuce.
      courseE_farmer_ramp12c_2018_authored_hint:
        courseE_farmer_ramp12b_b: You will still need to use an `until` loop first,
          then use a `while` loop once you get to the lettuce.
      courseE_farmer_ramp12d_authored_hint:
        courseE_farmer_ramp12d_b: You will still need to put your `until` and `while`
          loops inside of a `repeat` loop to solve this puzzle!
      courseE_farmer_ramp12d_2018_authored_hint:
        courseE_farmer_ramp12d_b: You will still need to put your `until` and `while`
          loops inside of a `repeat` loop to solve this puzzle!
      courseE_farmer_ramp12e_authored_hint:
        courseE_farmer_ramp12e_b: The solution to this puzzle will look a lot like
          the solution to the last puzzle, but turning in the other direction.
      courseE_farmer_ramp12e_2018_authored_hint:
        courseE_farmer_ramp12e_b: The solution to this puzzle will look a lot like
          the solution to the last puzzle, but turning in the other direction.
      courseE_farmer_ramp12f_authored_hint:
        courseE_farmer_ramp12f_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12f_2018_authored_hint:
        courseE_farmer_ramp12f_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12g_authored_hint:
        courseE_farmer_ramp12G_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp12g_2018_authored_hint:
        courseE_farmer_ramp12G_b: Use an `if/else` block to help the farmer decide
          if she needs to turn right or left.
      courseE_farmer_ramp13_authored_hint:
        courseE_farmer_ramp13_a: There can be more than one of either crop in a space,
          so make sure to use `while` loops to pick them all!
        courseE_farmer_ramp13_b: Use a `repeat` loop so that you don't have to write
          a separate if statement for each square.
        courseE_farmer_ramp13_c: If you can't figure out where to put the loops, try
          writing your code step-by-step and look for patterns.
      courseE_farmer_ramp13_2018_authored_hint:
        courseE_farmer_ramp13_a: There can be more than one of either crop in a space,
          so make sure to use `while` loops to pick them all!
        courseE_farmer_ramp13_b: Use a `repeat` loop so that you don't have to write
          a separate if statement for each square.
        courseE_farmer_ramp13_c: If you can't figure out where to put the loops, try
          writing your code step-by-step and look for patterns.
      courseE_farmer_ramp15_authored_hint:
        courseE_farmer_ramp15_a: Use the 'repeat until at pumpkin' block to make it
          to the end of the path.
        courseE_farmer_ramp15_b: What else needs to be done while moving along the
          path to the pumpkin?
        courseE_farmer_ramp15_c: The sprouts hide various amounts of either corn or
          lettuce to harvest on your way to the pumpkin.
      courseE_farmer_ramp15_2018_authored_hint:
        courseE_farmer_ramp15_a: Use the `repeat until at pumpkin` block to make it
          to the end of the path.
        courseE_farmer_ramp15_b: What else needs to be done while moving along the
          path to the pumpkin?
        courseE_farmer_ramp15_c: The sprouts hide various amounts of either corn or
          lettuce to harvest on your way to the pumpkin.
      courseE_farmer_ramp16_authored_hint:
        courseE_farmer_ramp16_a: If we are moving along the path to the pumpkin, what
          do we have to repeatedly do? When do we stop repeating?
        courseE_farmer_ramp16_b: Checking for corn or lettuce at every space will
          help simplify your code. What should you do if there is a crop? What if
          there is nothing?
        courseE_farmer_ramp16_c: Use an `if/else` block to keep moving forward. Which
          way do you need to turn when the forward path is blocked?
      courseE_maze_predict1_authored_hint: {}
      courseE_maze_predict1_2018_authored_hint: {}
      courseE_maze_ramp1_authored_hint:
        courseC_maze_programming1_0: Se l'uccellino non riesce a prendere il maialino,
          controlla che tutti e tre i blocchi siano collegati insieme, quindi clicca
          nuovamente su "Esegui".
        courseC_maze_programming1_b: You don't need any extra blocks from the toolbox
          for this puzzle!
      courseE_maze_ramp13_authored_hint:
        courseD_maze_ramp11_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseD_maze_ramp11_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
      courseE_maze_ramp1_2018_authored_hint:
        courseC_maze_programming1_0: Se l'uccellino non riesce a prendere il maialino,
          controlla che tutti e tre i blocchi siano collegati insieme, quindi clicca
          nuovamente su "Esegui".
        courseC_maze_programming1_b: You don't need any extra blocks from the toolbox
          for this puzzle!
      courseE_maze_ramp2_authored_hint:
        courseC_maze_programming2_a: Per usare un blocco `vai avanti`, trascinalo
          dalla cassetta degli attrezzi nell'area di lavoro e collegalo al blocco
          `quando si clicca su "Esegui"`.
        courseC_maze_programming2_b: Make sure all three `move forward` blocks are
          attached to the `when run` block.
      courseE_maze_ramp2_2018_authored_hint:
        courseC_maze_programming2_a: Per usare un blocco `vai avanti`, trascinalo
          dalla cassetta degli attrezzi nell'area di lavoro e collegalo al blocco
          `quando si clicca su "Esegui"`.
        courseC_maze_programming2_b: Make sure all three `move forward` blocks are
          attached to the `when run` block.
      courseE_maze_ramp3_authored_hint:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
        courseC_maze_programming3_b: Ricorda che le curve a destra e a sinistra devi
          immaginarle dal punto di vista dell'uccellino.
      courseE_maze_ramp3_2018_authored_hint:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
        courseC_maze_programming3_b: Ricorda che le curve a destra e a sinistra devi
          immaginarle dal punto di vista dell'uccellino.
      courseE_maze_ramp4_authored_hint:
        courseC_maze_programming4_a: Puoi girare a destra o a sinistra dal punto di
          vista dell'uccellino. Se l'uccellino è rivolto verso destra, girare a destra
          significa dirigersi verso il basso.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          il maiale, vai ancora una volta avanti.
        courseC_maze_programming4_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseE_maze_ramp4_2018_authored_hint:
        courseC_maze_programming4_a: Puoi girare a destra o a sinistra dal punto di
          vista dell'uccellino. Se l'uccellino è rivolto verso destra, girare a destra
          significa dirigersi verso il basso.
        courseC_maze_programming4_b: Per seguire il percorso, vai avanti e gira da
          una parte, poi spostati di nuovo e gira nella direzione opposta. Per raggiungere
          il maiale, vai ancora una volta avanti.
        courseC_maze_programming4_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseE_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: How far do you need to move to get to the corner?
        courseC_maze_programming5_c: You will need to turn left at the corner to get
          to the pig.
      courseE_maze_ramp5_2018_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
        courseC_maze_programming5_b: How far do you need to move to get to the corner?
        courseC_maze_programming5_c: You will need to turn left at the corner to get
          to the pig.
      courseE_maze_ramp6_authored_hint:
        courseC_maze_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseC_maze_programming6_b: Remember to turn first before moving, since the
          bird starts facing a wall.
        courseC_maze_programming6_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseE_maze_ramp6_2018_authored_hint:
        courseC_maze_programming6_a: Ci sono due modi per risolvere questo esercizio!
        courseC_maze_programming6_b: Remember to turn first before moving, since the
          bird starts facing a wall.
        courseC_maze_programming6_c: Non aver paura di sbagliare! Prova ad aggiungere
          blocchi ed eseguire il codice per vedere cosa accade, anche se non pensi
          di aver ancora risolto l'esercizio.
      courseE_maze_ramp7_authored_hint:
        courseD_maze_ramp7_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseD_maze_ramp7_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
        courseD_maze_ramp7_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseE_maze_ramp7_2018_authored_hint:
        courseD_maze_ramp7_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseD_maze_ramp7_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
        courseD_maze_ramp7_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseE_maze_ramp_predict1_authored_hint: {}
      courseE_multi_maze_ramp5_authored_hint:
        courseC_maze_programming5_a: Prova ad usare il pulsante "Fai un passo" per
          eseguire il codice un'istruzione alla volta. Riesci ad capire cosa devi
          fare dopo?
      courseE_playLab_challenge1_authored_hint:
        courseE_playLab_challenge1_a: |-
          Here are some things you could do when the player wins the game:

          * Make the dinosaur vanish.
          * Stop the squirrels.
          * Make the squirrels and knight happy.
          * Set a new background.
          * Make the knight thank the player for helping.
          * Make all of the actors vanish and show a "You Win!" message.
        courseE_playLab_challenge1_b: |-
          Here are some things you could do when the player loses the game:

          * Make the knight vanish.
          * Make the squirrels sad.
          * Make the dinosaur say something.
          * Set a new background.
          * Make all of the actors vanish and show a "Game Over" message.
      courseE_playLab_challenge1_2018_authored_hint:
        courseE_playLab_challenge1_a: |-
          Here are some things you could do when the player wins the game:

          * Make the dinosaur vanish.
          * Stop the squirrels.
          * Make the squirrels and knight happy.
          * Set a new background.
          * Make the knight thank the player for helping.
          * Make all of the actors vanish and show a "You Win!" message.
        courseE_playLab_challenge1_b: |-
          Here are some things you could do when the player loses the game:

          * Make the knight vanish.
          * Make the squirrels sad.
          * Make the dinosaur say something.
          * Set a new background.
          * Make all of the actors vanish and show a "Game Over" message.
      courseE_playLab_embed_scaffold5_authored_hint: {}
      courseE_playLab_scaffold1_authored_hint:
        courseE_playLab_scaffold1_a: The `set actor 1 to ??? image` block can be used
          to add an actor to the stage.
        courseE_playLab_scaffold1_b: Put the `set actor` block under `when run` to
          make your actor appear at the beginning of the program.
        courseE_playLab_scaffold1_c: Use `set ??? background` to choose a background
          for your scene.
      courseE_playLab_scaffold1_2018_authored_hint:
        courseE_playLab_scaffold1_a: The `set actor 1 to ??? image` block can be used
          to add an actor to the stage.
        courseE_playLab_scaffold1_b: Put the `set actor` block under `when run` to
          make your actor appear at the beginning of the program.
        courseE_playLab_scaffold1_c: Use `set ??? background` to choose a background
          for your scene.
      courseE_playLab_scaffold2_authored_hint:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow`
          event to change the direction the block controls.
        courseE_playLab_scaffold1_b: You should have four `when arrow` event blocks,
          with a direction to move underneath each.
        courseE_playLab_scaffold1_c: When you are done, you should be able to move
          your hero with the arrow keys!
      courseE_playLab_scaffold2_2018_authored_hint:
        courseE_playLab_scaffold1_a: Pull on the dropdown menu of the `when ____ arrow`
          event to change the direction the block controls.
        courseE_playLab_scaffold1_b: You should have four `when arrow` event blocks,
          with a direction to move underneath each.
        courseE_playLab_scaffold1_c: When you are done, you should be able to move
          your hero with the arrow keys!
      courseE_playLab_scaffold3_authored_hint: {}
      courseE_playLab_scaffold3_2018_authored_hint: {}
      courseE_playLab_scaffold4_authored_hint:
        courseE_playLab_scaffold4_a: Use `score point` to add a point, and `remove
          point` to subtract one.
      courseE_playLab_scaffold4_2018_authored_hint:
        courseE_playLab_scaffold4_a: Use `score point` to add a point, and `remove
          point` to subtract one.
      courseE_playLab_scaffold5_authored_hint:
        courseE_playLab_scaffold5_a: To finish this level, you need to win or lose.
          Use a `end game as win` or `end game as loss` block to finish.
      courseE_playLab_scaffold5_2018_authored_hint:
        courseE_playLab_scaffold5_a: To finish this level, you need to win or lose.
          Use a `end game as win` or `end game as loss` block to finish.
      courseE_playlab_challenge2_authored_hint:
        courseE_playlab_challenge2_a: |-
          The actor knows what to say based on its mood. Try playing with the things the witch might say.

          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block></xml>
        courseE_playlab_challenge2_b: "It will feel like the game starts all over
          if you call the `ask a question` function again below the list of conditionals.\n<xml><block
          type=\"studio_saySpriteParamsTime\" inline=\"true\">\n               \n<block
          type=\"procedures_callnoreturn\">\n<mutation name=\"Ask a question\"></mutation>\n
          \       </block></block></xml>"
        courseE_playlab_challenge2_c: "You will need to add more conditional statements
          to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\"
          inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value
          name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title
          name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement
          name=\"DO\">\n              <block type=\"studio_saySpriteParamsTime\" inline=\"true\">\n
          \           <value name=\"SPRITE\">\n              <block type=\"math_number\">\n
          \               <title name=\"NUM\">1</title>\n              </block>\n
          \           </value>\n            <value name=\"TEXT\">\n              <block
          type=\"text\">\n                <title name=\"TEXT\">???</title>\n              </block>\n
          \           </value>\n            <value name=\"TIME\">\n              <block
          type=\"math_number\">\n                <title name=\"NUM\">2</title>\n              </block>\n
          \           </value>\n          </block>\n              </statement></block></xml>\n
          \             \nDon't forget to change which moods the actor will show inside
          of the `repeat forever` loop. You can also set the moods randomly!"
        courseE_playlab_challenge2_d: |-
          Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.

          Don't forget to change the instructions inside the `show title screen` block so they still make sense!
        courseE_playlab_challenge2_e: |-
          When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?

          Have a friend try your app when it is finished!
      courseE_playlab_variables_challenge2_authored_hint:
        courseF_playlab_variables_challenge3_a: |-
          The actor knows what to say because it checks the current value of the `fortune` variable.

          <xml><block type="variables_set" inline="false">
          <title name="VAR">fortune</title>
          <value name="VALUE">
          <block type="text" movable="false">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          </block></xml>
        courseF_playlab_variables_challenge3_b: |-
          It will feel like the game starts all over if you call the `ask a question` function again after the actor says the fortune.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="variables_get">
          <title name="VAR">fortune</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="Ask a question"/>
          </block></next></block></xml>
        courseF_playlab_variables_challenge3_c: "You will need to add more conditional
          statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\"
          inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value
          name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title
          name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement
          name=\"DO\">\n              <block type=\"variables_set\" inline=\"false\">\n
          \               <title name=\"VAR\">fortune</title>\n                <value
          name=\"VALUE\">\n                  <block type=\"text\" movable=\"false\">\n
          \                   <title name=\"TEXT\">???</title>\n                  </block>\n
          \               </value>\n              </block>\n              </statement></block></xml>\n
          \             \nDon't forget to change which moods the actor will show inside
          of the `repeat forever` loop. You can also set the moods randomly!"
        courseF_playlab_variables_challenge3_d: |-
          Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.

          Don't forget to change the instructions inside the `Ask a question` function so they still make sense!
        courseF_playlab_variables_challenge3_e: |-
          When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?

          Have a friend try your app when it is finished!
      courseF_IceAge_1_authored_hint:
        iceage_hello1_a: Devi aggiungere solo un blocco per risolvere questo esercizio.
          Trascina il blocco `il personaggio 1 dice ...` dalla cassetta degli attrezzi
          e attaccalo all'evento`quando si clicca su "Esegui"` già presente nell'area
          di lavoro. Poi aggiungi la scritta "Ciao!" al suo interno.
      courseF_IceAge_10_authored_hint:
        iceage_throw_hearts_a: Quando vuoi lanciare i cuori alla nonna? Quando si
          preme una freccia? Quando clicchi su Sid? Quando clicchi sulla Nonnina?
          La scelta è tua!
        iceage_throw_hearts_b: Per fare in modo che la nonna sia felice quando riceve
          i cuori, devi collegare il blocco `imposta il personaggio 2 ad umore felice`
          sotto all'evento `quando il personaggio 2 tocca dei cuori`.
      courseF_IceAge_11_authored_hint:
        iceage_free_play_a: Puoi fare in modo che Sid e Manny si sfidino a palle di
          neve?
        iceage_free_play_b: Fai in modo che la Nonnina debba inseguire Diego. Si vince
          se lei riesce a prenderlo.
        iceage_free_play_c: Riesci a fare in modo che Sid tiri fiocchi di neve a Diego
          e far sì che Diego diventi più grande ogni volta che viene colpito? Si vince
          quando Diego viene colpito 5 volte.
      courseF_IceAge_2_authored_hint:
        iceage_hello2_a: 'To solve this puzzle, you will need to have Sid say something
          using the `actor 1 say` block.  You will also need to have Manny say something
          with the `actor 2 say` block. '
      courseF_IceAge_3_authored_hint:
        iceage_hello3_a: Usa il blocco `sposta il personaggio 1 a destra 200 pixel`
          per risolvere l'esercizio.
      courseF_IceAge_4_authored_hint:
        iceage_move_to_actor_a: Per risolvere questo esercizio, puoi sia muovere Diego
          in basso di 200 pixel, sia muovere Manny in alto di 200 pixel.
        iceage_move_to_actor_b: Collega il blocco `riproduci il suono di ...` all'evento
          `quando il personaggio 1 tocca il personaggio 2` per terminare questa sfida.
      courseF_IceAge_5_authored_hint:
        iceage_repeat_a: Usa entrambi i blocchi `sposta il personaggio 1 a destra`
          e `sposta il personaggio 1 a sinistra` per risolvere questo esercizio.
      courseF_IceAge_6_authored_hint:
        iceage_click_hello_a: Per completare l'esercizio aggiungi uno o più blocchi
          `il personaggio 1 dice` all'evento `quando si clicca sul personaggio 1`.
      courseF_IceAge_7_authored_hint:
        iceage_move_events_a: Per risolvere l'esercizio, ogni evento `quando si preme
          sulla freccia ...` ha bisogno di avere collegato un diverso comando `sposta
          il personaggio ...`.
      courseF_IceAge_8_authored_hint:
        iceage_sound_and_points_a: Dovrai aggiungere due blocchi sotto all'evento
          `quando il personaggio 1 tocca il personaggio 2`.
        iceage_sound_and_points_b: Avrai bisogno sia del blocco `aggiungi un punto`
          sia di quello `riproduci il suono di ...` per completare questo esercizio.
      courseF_IceAge_9_authored_hint:
        iceage_warn_ice_age_a: Devi semplicemente aggiungere due blocchi per risolvere
          questo esercizio.
        iceage_warn_ice_age_b: Aggiungi entrambi i nuovi blocchi sotto all'evento
          `quando si clicca su "Esegui"` per farli eseguire immediatamente all'avvio
          del programma.
      courseF_IceAge_template_authored_hint: {}
      courseF_artist_embed_for7_authored_hint: {}
      courseF_artist_for1_authored_hint:
        courseF_artist_for1_a: |-
          Can you draw something like this:

          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for10_authored_hint:
        courseF_artist_for10_a: The image in the drawing was made using a counter
          for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for10_2018_authored_hint:
        courseF_artist_for10_a: The image in the drawing was made using a counter
          for the `set alpha` and `counter` / 10 as a brush size.
        courseF_artist_for10_b: The image in the drawing uses a turn of 61 degrees.
        courseF_artist_for10_c: |-
          Want to know how the sample image was done?

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for10_predict1_authored_hint: {}
      courseF_artist_for10_predict1_2018_authored_hint: {}
      courseF_artist_for1_2018_authored_hint:
        courseF_artist_for1_a: |-
          Can you draw something like this:

          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for2_authored_hint:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.

          <xml><block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for2_b: Remember to count by 10 within your for loop.
        courseF_artist_for2_c: |-
          This is the pattern that the Artist will follow:

          ![](https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif)
      courseF_artist_for2_2018_authored_hint:
        courseF_artist_for2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.

          <xml><block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for2_b: Remember to count by 10 within your for loop.
        courseF_artist_for2_c: |-
          This is the pattern that the Artist will follow:

          ![](https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif)
      courseF_artist_for3_authored_hint:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.

          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseF_artist_for3_2018_authored_hint:
        courseF_artist_for3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.

          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseF_artist_for4_authored_hint:
        courseF_artist_for4_a: |-
          Ecco le domande cui rispondere per trovare i valori da inserire al posto dei `???`:<br>
          Qual è il valore più piccolo che serve? <br>
          Qual è il più grande?<br>
          Qual è l'incremento necessario ad ogni ripetizione?<br>
          <b>Nota</b>: ora ci sono così tanti blocchi nella cassetta degli attrezzi che li abbiamo organizzati in diverse categorie. Prenditi un po' di tempo per esplorarle.
        courseF_artist_for4_b: Your code will be very similar to what you wrote in
          the last puzzle, but remember to draw a square this time!
        courseF_artist_for4_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseF_artist_for4_2018_authored_hint:
        courseF_artist_for4_a: |-
          Ecco le domande cui rispondere per trovare i valori da inserire al posto dei `???`:<br>
          Qual è il valore più piccolo che serve? <br>
          Qual è il più grande?<br>
          Qual è l'incremento necessario ad ogni ripetizione?<br>
          <b>Nota</b>: ora ci sono così tanti blocchi nella cassetta degli attrezzi che li abbiamo organizzati in diverse categorie. Prenditi un po' di tempo per esplorarle.
        courseF_artist_for4_b: Your code will be very similar to what you wrote in
          the last puzzle, but remember to draw a square this time!
        courseF_artist_for4_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseF_artist_for5_authored_hint:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making
          this spiral!
        courseF_artist_for5_b: Your `for` loop, move, and turn blocks can stay exactly
          the same.
      courseF_artist_for5_2018_authored_hint:
        courseF_artist_for5_a: You don't need the `repeat` loop inside when making
          this spiral!
        courseF_artist_for5_b: Your `for` loop, move, and turn blocks can stay exactly
          the same.
      courseF_artist_for6_authored_hint:
        courseF_artist_for6_a: Your `for` loop will count from 15 to 300 by 15.
        courseF_artist_for6_b: Put a `move forward` and a `turn` block within this
          `for` loop.
        courseF_artist_for6_c: All you have to change is the number of degrees in
          the `turn` block.
      courseF_artist_for6_2018_authored_hint:
        courseF_artist_for6_a: Your `for` loop will count from 15 to 300 by 15.
        courseF_artist_for6_b: Put a `move forward` and a `turn` block within this
          `for` loop.
        courseF_artist_for6_c: All you have to change is the number of degrees in
          the `turn` block.
      courseF_artist_for7_authored_hint:
        courseF_artist_for7_a: The increment for this puzzle is 2.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
        courseF_artist_for7_c: The `for` loop in this puzzle goes from 15 to 300 by
          2.
        courseF_artist_for7_d: This image is made by turning just 89 degrees.
      courseF_artist_for7_2018_authored_hint:
        courseF_artist_for7_a: The pen is thinner in this puzzle. You will need to
          set it to `1` before you start.
        courseF_artist_for7_b: Notice that this spiral turns right instead of left!
        courseF_artist_for7_c: The `for` loop in this puzzle goes from 15 to 300 by
          2.
        courseF_artist_for7_d: This image is made by turning just 89 degrees.
      courseF_artist_for8_authored_hint:
        courseF_artist_for8_a: Keep everything else the same in your code, only the
          turn angle needs to change.
        courseF_artist_for8_b: If you want, you can choose a different color for your
          spiral!
      courseF_artist_for8_2018_authored_hint:
        courseF_artist_for8_a: Keep everything else the same in your code, only the
          turn angle needs to change.
        courseF_artist_for8_b: If you want, you can choose a different color for your
          spiral!
      courseF_artist_for9_authored_hint:
        courseF_artist_for9_a: If you put the `set alpha` block inside of your `for`
          loop, and use the `counter` variable to change it, you can create a design
          like this.
        courseF_artist_for9_b: The `set alpha` block changes the opacity of a color.
          The smaller the value, the more transparent the color is.
      courseF_artist_for9_2018_authored_hint:
        courseF_artist_for9_a: If you put the `set alpha` block inside of your `for`
          loop, and use the `counter` variable to change it, you can create a design
          like this.
        courseF_artist_for9_b: The `set alpha` block changes the opacity of a color.
          The smaller the value, the more transparent the color is.
      courseF_artist_for_challenge1_authored_hint:
        courseF_artist_for_challenge1_a: La larghezza del pennello è 1. Il primo quadrato
          ha il lato di 50 pixel, ed ogni quadrato successivo ha il lato più lungo
          di 50 pixel.
        courseF_artist_for_challenge1_b: Il valore dell'opacità del pennello è sempre
          la metà del valore del contatore (`counter`).
        courseF_artist_for_challenge1_c: Al termine del disegno di un quadrato devi
          posizionare l'artista un po' più in alto a sinistra per disegnare correttamente
          il successivo quadrato.
        courseF_artist_for_challenge1_d: <b>Soluzione:</b> Vuoi sapere come è stata
          realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/398689696"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      courseF_artist_for_challenge1_2018_authored_hint:
        courseF_artist_for_challenge1_a: La larghezza del pennello è 1. Il primo quadrato
          ha il lato di 50 pixel, ed ogni quadrato successivo ha il lato più lungo
          di 50 pixel.
        courseF_artist_for_challenge1_b: Il valore dell'opacità del pennello è sempre
          la metà del valore del contatore (`counter`).
        courseF_artist_for_challenge1_c: Al termine del disegno di un quadrato devi
          posizionare l'artista un po' più in alto a sinistra per disegnare correttamente
          il successivo quadrato.
        courseF_artist_for_challenge1_d: <b>Soluzione:</b> Vuoi sapere come è stata
          realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/398689696"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      courseF_artist_for_challenge2_authored_hint:
        courseF_artist_for_challenge2_c: Il cambiamento del colore si attua col blocco
          `imposta il colore con rosso, verde, blu`. Il valore del rosso è sempre
          fisso a `255` mentre quello del verde è sempre uguale a quello del contatore
          (`counter`) ed il blu è uguale a `255`–`counter`.
        courseF_artist_for_challenge2_a: La figura è una spirale di colore mutevole
          e tratti rettilinei progressivamente più lunghi.
        courseF_artist_for_challenge2_b: La soluzione di questo esercizio è più semplice
          di quanto pensi. Basta impostare il colore all'interno del ciclo, andare
          avanti e girare.
        courseF_artist_for_challenge2_d: |-
          **Solution:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>

          ![](https://images.code.org/4ce89e8d907f670408c3705f040e8677-image-1497728974326.49.09 PM.png)
      courseF_artist_for_challenge2_2018_authored_hint:
        courseF_artist_for_challenge2_c: Il cambiamento del colore si attua col blocco
          `imposta il colore con rosso, verde, blu`. Il valore del rosso è sempre
          fisso a `255` mentre quello del verde è sempre uguale a quello del contatore
          (`counter`) ed il blu è uguale a `255`–`counter`.
        courseF_artist_for_challenge2_a: La figura è una spirale di colore mutevole
          e tratti rettilinei progressivamente più lunghi.
        courseF_artist_for_challenge2_b: La soluzione di questo esercizio è più semplice
          di quanto pensi. Basta impostare il colore all'interno del ciclo, andare
          avanti e girare.
        courseF_artist_for_challenge2_d: |-
          **Solution:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>

          ![](https://images.code.org/4ce89e8d907f670408c3705f040e8677-image-1497728974326.49.09 PM.png)
      courseF_artist_fwp1_authored_hint:
        courseF_artist_fwp1_c: Put all of the code for drawing a square inside the
          function editor.
        courseF_artist_fwp1_a: Remember, you need to turn 90 degrees to draw a square.
        courseF_artist_fwp1_b: You only need to repeat as many times as the number
          of sides in a square.
      courseF_artist_fwp1_2018_authored_hint:
        courseF_artist_fwp1_c: Put all of the code for drawing a square inside the
          function editor.
        courseF_artist_fwp1_a: Remember, you need to turn 90 degrees to draw a square.
        courseF_artist_fwp1_b: You only need to repeat as many times as the number
          of sides in a square.
      courseF_artist_fwp2_authored_hint:
        courseF_artist_fwp2_a: You need to click the "edit" button to get into the
          function.  Once you're there, add a parameter called `length` and use it
          inside your `move forward` block!
        courseF_artist_fwp2_b: When calling your function, use a `for loop` for the
          best possible code!
      courseF_artist_fwp2_2018_authored_hint:
        courseF_artist_fwp2_a: You need to click the "edit" button to get into the
          function.  Once you're there, add a parameter called `length` and use it
          inside your `move forward` block!
        courseF_artist_fwp2_b: When calling your function, use a `for loop` for the
          best possible code!
      courseF_artist_fwp2_predict1_authored_hint: {}
      courseF_artist_fwp2_predict1_2018_authored_hint: {}
      courseF_artist_fwp3_authored_hint:
        courseF_artist_fwp3_a: This gets easier if you put it all in a `for` loop.
        courseF_artist_fwp3_b: |-
          Be sure to turn 90 degrees between each square!

          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      courseF_artist_fwp3_2018_authored_hint:
        courseF_artist_fwp3_a: This gets easier if you put it all in a `for` loop.
        courseF_artist_fwp3_b: |-
          Be sure to turn 90 degrees between each square!

          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      courseF_artist_fwp4_authored_hint:
        courseF_artist_fwp4_b: Remember to **add** a parameter.  Don't remove the
          one that is already there!
        courseF_artist_fwp4_c: You will need to call your function three times to
          draw the shapes.
      courseF_artist_fwp4_2018_authored_hint:
        courseF_artist_fwp4_b: Remember to **add** a parameter.  Don't remove the
          one that is already there!
        courseF_artist_fwp4_c: You will need to call your function three times to
          draw the shapes.
      courseF_artist_fwp5_authored_hint:
        courseF_artist_fwp5_d: A `for` loop would really help you out here!
        courseF_artist_fwp5_c: You will need to edit the function a little bit, since
          your previous function turned the artist to the right after each side, and
          this image needs a turn to the left.
        courseF_artist_fwp5_a: The length of sides for each shape is 7 times the number
          of sides it has.
        courseF_artist_fwp5_b: Don't forget to jump 100 pixels between shapes.
      courseF_artist_fwp5_2018_authored_hint:
        courseF_artist_fwp5_d: A `for` loop would really help you out here!
        courseF_artist_fwp5_c: You will need to edit the function a little bit, since
          your previous function turned the artist to the right after each side, and
          this image needs a turn to the left.
        courseF_artist_fwp5_a: The length of sides for each shape is 7 times the number
          of sides it has.
        courseF_artist_fwp5_b: Don't forget to jump 100 pixels between shapes.
      courseF_artist_fwp6_authored_hint:
        courseF_artist_fwp6_a: Va benissimo sperimentare il comportamento della funzione
          per capire come si comporta al variare del valore dei parametri.
        courseF_artist_fwp6_b: You don't need to add any `move` or `turn` blocks to
          finish this code.
      courseF_artist_fwp6_2018_authored_hint:
        courseF_artist_fwp6_a: Va benissimo sperimentare il comportamento della funzione
          per capire come si comporta al variare del valore dei parametri.
        courseF_artist_fwp6_b: You don't need to add any `move` or `turn` blocks to
          finish this code.
      courseF_artist_fwp7_authored_hint:
        courseF_artist_fwp7_a: 'Did the code get so scrambled up that it''s no longer
          recognizable?  Try clicking the "Start over" button in the upper right-hand
          corner. '
        courseF_artist_fwp7_b: Your new `min` variable should go in the first slot
          in your `for` loop, inside the function.
      courseF_artist_fwp7_2018_authored_hint:
        courseF_artist_fwp7_a: Feeling lost after trying a couple of ideas? Try clicking
          the "Start over" button in the upper right-hand corner.
        courseF_artist_fwp7_b: Your new `min` variable should go in the first slot
          in your `for` loop, inside the function.
      courseF_artist_fwp8_authored_hint:
        courseF_artist_fwp8_a: If your function is correct, you shouldn't need to
          change it for this puzzle.
        courseF_artist_fwp8_b: The only thing you should need to do between function
          calls is change the color of the line.
      courseF_artist_fwp8_2018_authored_hint:
        courseF_artist_fwp8_a: If your function is correct, you shouldn't need to
          change it for this puzzle.
        courseF_artist_fwp8_b: The only thing you should need to do between function
          calls is change the color of the line.
      courseF_artist_fwp9_authored_hint:
        courseF_artist_fwp9_a: |-
          Try one of these drawings.
          ![](https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png)
      courseF_artist_fwp9_2018_authored_hint:
        courseF_artist_fwp9_a: |-
          Try one of these drawings.
          ![](https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png)
      courseF_artist_fwp_challenge1_authored_hint:
        courseF_artist_fwp_challenge1_b: This is a series of octagons with sides that
          are counter pixels long.
        courseF_artist_fwp_challenge1_c: Each octagon is called from inside a for
          loop that goes from 200 down to 2 by an increment of 2.
      courseF_artist_fwp_challenge1_2018_authored_hint:
        courseF_artist_fwp_challenge1_b: This is a series of polygons with sides that
          are counter pixels long.
        courseF_artist_fwp_challenge1_c: Each polygon is called from inside a for
          loop that goes from 3 down to 6 by an increment of 1. What shapes is it
          making?
      courseF_artist_fwp_challenge2_authored_hint:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        courseF_artist_fwp_challenge1_b: Il disegno è formato da una serie di ottagoni
          ognuno con i lati lunghi `counter` (<i>contatore</i>) pixel.
        courseF_artist_fwp_challenge1_c: La funzione che disegna l'ottagono è chiamata
          dall'interno di un ciclo `ripeti con counter` che conta all'indietro da
          200 a 2 con passo 2.
        courseF_artist_fwp_challenge1_d: Ad ogni ripetizione del ciclo `ripeti con
          counter` devi girare di 22.5 gradi.
        courseF_artist_fwp_challenge1_e: Il valore di `counter` controlla sia la larghezza
          del pennello che il colore (diminuendo il "rosso" e aumentando sia il "verde"
          che il "blu").
        courseF_artist_fwp_challenge1_f: <b>Soluzione:</b> Se vuoi, <a href="https://studio.code.org/c/159877686">clicca
          qui</a> e poi su "Come funziona" per vedere la soluzione.
      courseF_artist_fwp_challenge2_2018_authored_hint:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/9310e6352e85a8265b424c9d57ca28d1-image-1446239776339.gif)"
        courseF_artist_fwp_challenge1_b: Il disegno è formato da una serie di ottagoni
          ognuno con i lati lunghi `counter` (<i>contatore</i>) pixel.
        courseF_artist_fwp_challenge1_c: La funzione che disegna l'ottagono è chiamata
          dall'interno di un ciclo `ripeti con counter` che conta all'indietro da
          200 a 2 con passo 2.
        courseF_artist_fwp_challenge1_d: Ad ogni ripetizione del ciclo `ripeti con
          counter` devi girare di 22.5 gradi.
        courseF_artist_fwp_challenge1_e: Il valore di `counter` controlla sia la larghezza
          del pennello che il colore (diminuendo il "rosso" e aumentando sia il "verde"
          che il "blu").
        courseF_artist_fwp_challenge1_f: <b>Soluzione:</b> Se vuoi, <a href="https://studio.code.org/c/159877686">clicca
          qui</a> e poi su "Come funziona" per vedere la soluzione.
      courseF_artist_predict1_authored_hint: {}
      courseF_artist_predict1_2018_authored_hint: {}
      courseF_artist_ramp10_authored_hint:
        courseF_artist_ramp10_a: Don't forget to turn by 60 degrees after each triangle.  Which
          loop do you need to put that instruction inside?
        courseF_artist_ramp10_b: If your code for a triangle is in a `repeat` loop,
          this task will be a lot simpler.
        courseF_artist_ramp10_c: |-
          You will draw six triangles in total for this design:

          ![](https://images.code.org/bc62bed22e90d35e420b0a116ac487ef-image-1500347536221.2_solution2.gif)
      courseF_artist_ramp10_2018_authored_hint:
        courseF_artist_ramp10_a: Don't forget to turn by 60 degrees after each triangle.  Which
          loop do you need to put that instruction inside?
        courseF_artist_ramp10_b: If your code for a triangle is in a <xml><block type="controls_repeat"><title
          name="TIMES">6</title></block></xml> loop, this task will be a lot simpler.
        courseF_artist_ramp10_c: |-
          You will draw six triangles in total for this design:

          ![](https://images.code.org/bc62bed22e90d35e420b0a116ac487ef-image-1500347536221.2_solution2.gif)
      courseF_artist_ramp8_authored_hint:
        courseF_artist_ramp8_a: To draw a side, use the `move forward by 100 pixels`
          block, and change the 100 to a 200.
        courseF_artist_ramp8_b: |-
          To draw 4 sides, put the `move forward by 100 pixels` block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseF_artist_ramp8_c: Your turn will also go inside of the `repeat` loop.
      courseF_artist_ramp8_2018_authored_hint:
        courseF_artist_ramp8_a: To draw a side, use the <xml><block type="draw_move_by_constant"><title
          name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>
          block, and change the 100 to a 200.
        courseF_artist_ramp8_b: |-
          To draw 4 sides, put the <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">200</title></block></xml> block inside of a repeat loop and make sure the loop is set to draw 4 times.

          Don't forget to turn afterward!
        courseF_artist_ramp8_c: Your turn will also go inside of the <xml><block type="controls_repeat"><title
          name="TIMES">3</title></block></xml> loop.
      courseF_artist_ramp9_authored_hint:
        courseF_artist_ramp9_a: How is this similar to a square?  How is it different?
        courseF_artist_ramp9_b: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseF_artist_ramp9_c: You will want to move forward 100 pixels, then turn
          right 120 degrees for each side. Can you use a `repeat` loop to make your
          code shorter?
      courseF_artist_ramp9_2018_authored_hint:
        courseF_artist_ramp9_a: How is this similar to a square?  How is it different?
        courseF_artist_ramp9_b: Puoi usare il menù a discesa del blocco `gira a ...`
          per vedere gli angoli tra cui scegliere!
        courseF_artist_ramp9_c: You will want to move forward 100 pixels, then turn
          right 120 degrees for each side. Can you use a <xml><block type="controls_repeat"><title
          name="TIMES">3</title></block></xml> loop to make your code shorter?
      courseF_artist_variables10_authored_hint:
        courseF_artist_variables10_a: Have fun with this level! See what little changes
          can do to your code.
        courseF_artist_variables10_b: You can try multiple things, and run your code
          multiple times.
      courseF_artist_variables10_2018_authored_hint:
        courseF_artist_variables10_a: Have fun with this level! See what little changes
          can do to your code.
        courseF_artist_variables10_b: You can try multiple things, and run your code
          multiple times.
      courseF_artist_variables2_authored_hint:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your
          triangle, then a `move forward` command.
      courseF_artist_variables2_2018_authored_hint:
        courseF_artist_variables2_a: Remember to move forward after drawing each triangle.
        courseF_artist_variables2_b: Your new loop will contain the loop for your
          triangle, then a `move forward` command.
      courseF_artist_variables3_authored_hint:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places
          in your code: In the side length of your triangle, and in the amount you
          move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be
          in one place: after the `set variable length` block.'
      courseF_artist_variables3_2018_authored_hint:
        courseF_artist_variables3_a: 'The variable `length` will be used in two places
          in your code: In the side length of your triangle, and in the amount you
          move forward between triangles.'
        courseF_artist_variables3_b: 'A number block with value 50 should only be
          in one place: after the `set variable length` block.'
      courseF_artist_variables4_authored_hint:
        courseF_artist_variables4_a: Your code won't be much different than it was
          in the last puzzle, except that you will need to turn the artist to jump
          down, then turn him back to get ready to jump forward again.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables4_2018_authored_hint:
        courseF_artist_variables4_a: Your code won't be much different than it was
          in the last puzzle, except that you will need to turn the artist to jump
          down, then turn him back to get ready to jump forward again.
        courseF_artist_variables4_c: |-
          This is the pattern your artist will be following:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables5_authored_hint:
        courseF_artist_variables5_a: The second half of your code should look almost
          the same as the first half, except you will be turning *left*, jumping,
          then turning *right*.
        courseF_artist_variables5_b: The first half of your code will draw three triangles,
          and the second half will draw the other three.
        courseF_artist_variables5_c: Start by duplicating the code in the first half
          of your program, then alter it to make the design shown.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2018_authored_hint:
        courseF_artist_variables5_a: The second half of your code should look almost
          the same as the first half, except you will be turning *left*, jumping,
          then turning *right*.
        courseF_artist_variables5_b: The first half of your code will draw three triangles,
          and the second half will draw the other three.
        courseF_artist_variables5_c: Start by duplicating the code in the first half
          of your program, then alter it to make the design shown.
        courseF_artist_variables5_d: |-
          This is the pattern your artist will follow:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables6_authored_hint:
        courseF_artist_variables6_a: Thanks to variables, you only need to change
          one number at the top to make this work.
        courseF_artist_variables6_b: You will need to edit the number block with value
          50, but nothing else in the code needs to be altered.
      courseF_artist_variables6_2018_authored_hint:
        courseF_artist_variables6_a: Thanks to variables, you only need to change
          one number at the top to make this work.
        courseF_artist_variables6_b: You will need to edit the number block with value
          50, but nothing else in the code needs to be altered.
      courseF_artist_variables6a_authored_hint:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead
          of an actual number to solve this puzzle.
        courseF_artist_variables6a_b: This code will be very similar to your triangle
          code, just with a different shape!
        courseF_artist_variables6a_c: Write the code for one square first, then add
          the code to move between squares. Finally, add a loop around everything!
        courseF_artist_variables6a_d: |-
          This is the pattern you'll follow!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables6a_2018_authored_hint:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead
          of an actual number to solve this puzzle.
        courseF_artist_variables6a_b: This code will be very similar to your triangle
          code, just with a different shape!
        courseF_artist_variables6a_c: Write the code for one square first, then add
          the code to move between squares. Finally, add a loop around everything!
        courseF_artist_variables6a_d: |-
          This is the pattern you'll follow!

          ![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)
      courseF_artist_variables7_authored_hint:
        courseF_artist_variables7_a: Start your code by using the `set length` block.
          Set the length variable to 150.
        courseF_artist_variables7_b: You can use a `repeat` loop to make your code
          for the triangle simpler.
        courseF_artist_variables7_c: You will want to turn left 120 degrees to make
          the corners of the triangle.
      courseF_artist_variables7_2018_authored_hint:
        courseF_artist_variables7_a: Start your code by using the `set length` block.
          Set the length variable to 150.
        courseF_artist_variables7_b: You can use a `repeat` loop to make your code
          for the triangle simpler.
        courseF_artist_variables7_c: You will want to turn left 120 degrees to make
          the corners of the triangle.
      courseF_artist_variables8_authored_hint:
        courseF_artist_variables8_b: Remember to start your code for the triangle
          with the `set length` block, and start it at 150 pixels.
        courseF_artist_variables8_c: Make sure to use the `repeat` loop to draw your
          triangle.
        courseF_artist_variables8_a: 'Try putting the set of ![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png)
          blocks inside your loop at the end.

'
      courseF_artist_variables8_2018_authored_hint:
        courseF_artist_variables8_b: Remember to start your code for the triangle
          with the `set length` block, and start it at 150 pixels.
        courseF_artist_variables8_c: Make sure to use the `repeat` loop to draw your
          triangle.
        courseF_artist_variables8_a: "Try putting the set of \n\n<xml>\n<block type=\"variables_set\"
          inline=\"false\">\n                        <title name=\"VAR\">length</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">ADD</title>\n                            <value name=\"A\">\n
          \                             <block type=\"variables_get\">\n                                <title
          name=\"VAR\">length</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"math_number\">\n                                <title name=\"NUM\">10</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n</xml>\n\nblocks
          inside your loop at the end.\n"
      courseF_artist_variables9_authored_hint:
        courseF_artist_variables9_a: For this puzzle, all you need to do is change
          how many times the loop repeats.
        courseF_artist_variables9_b: Make sure the blocks that increment `length`
          are within your loop so the lines keep getting longer.
      courseF_artist_variables9_2018_authored_hint:
        courseF_artist_variables9_a: For this puzzle, all you need to do is change
          how many times the loop repeats.
        courseF_artist_variables9_b: Make sure the blocks that increment `length`
          are within your loop so the lines keep getting longer.
      courseF_artist_variablesFP_authored_hint:
        courseF_artist_variablesFP_a: |-
          Try one of these three drawings.
          ![](https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png)
      courseF_artist_variablesFP_2018_authored_hint:
        courseF_artist_variablesFP_a: |-
          Try one of these three drawings.
          ![](https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png)
      courseF_artist_variables_4_authored_hint:
        courseF_artist_variables_4_a: Your code won't be much different than it was
          in the last puzzle, except that you will need to turn the artist to move
          down, then turn him back to get ready to move forward again.
        courseF_artist_variables_4_b: "![](https://images.code.org/fc31a4b60dc86d7b820c2d242f83e6ed-image-1477533361197.gif)"
      courseF_artist_variables_6_authored_hint:
        courseF_artist_variables_6_a: Thanks to variables, you only need to change
          one number at the top to make this work.
      courseF_artist_variables_6a_authored_hint:
        courseF_artist_variables6a_a: Remember to use the variable `length` instead
          of an actual number to solve this puzzle.
      courseF_artist_variables_8_authored_hint:
        courseF_artist_variables_8_a: 'Try putting the set of ![](https://images.code.org/6525bebee31ee15b84a48761b2866f53-image-1477531948829.31.37.png)
          blocks inside your loop at the end.  '
      courseF_artist_variables_challenge1_authored_hint:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge1_2018_authored_hint:
        courseF_artist_variables_challenge1_a: Each vertical line has a length of
          `10`. Each horizontal line should have a length of `length`.
        courseF_artist_variables_challenge1_b: You will want to increase the value
          of `length` by 10 **twice** inside the loop.
        courseF_artist_variables_challenge1_c: To complete the pattern you will need
          to turn left twice, turn right twice, and move forward a total of four times.
        courseF_artist_variables_challenge1_d: |-
          This puzzle just uses one loop. Without any variables, a similar path might just be a zig-zag.

          ![](https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png)

          If you are having trouble, start by creating this image, then try to see where you can use variables to change the length of the horizontal lines.
        courseF_artist_variables_challenge1_e: |-
          Here is the solution.

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge1a_authored_hint:
        courseF_artist_variables_challenge1_a: |-
          La figura è composta dalla ripetizione del disegno di un pentagono e di un decagono.<br>
          <br>
          Il perimetro di ogni poligono ha una lunghezza (`length`) di 500 pixel.
        courseF_artist_variables_challenge1_b: |-
          Ogni poligono è ripetuto un numero di volte pari al numero dei suoi lati (`sides`).<br>
          <br>
          Al termine delle ripetizioni di ogni poligono l'artista ha fatto un giro completo di 360 gradi.
        courseF_artist_variables_challenge1_c: |-
          Entrambi i poligoni sono disegnati dallo stesso ciclo, basato sulla variabile `sides` - il cui valore viene opportunamente cambiato.<br>
          <br>
          Vengono disegnate prima tutte le ripetizioni del pentagono e poi tutte quelle del decagono.
        courseF_artist_variables_challenge1_d: <b>Soluzione:</b> Vuoi sapere come
          è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/117486491"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      courseF_artist_variables_challenge2_authored_hint:
        courseF_artist_variables_challenge2_a: |-
          La figura è composta dalla ripetizione del disegno di un pentagono e di un decagono.<br>
          <br>
          Il perimetro di ogni poligono ha una lunghezza (`length`) di 500 pixel.
        courseF_artist_variables_challenge2_c: |-
          Entrambi i poligoni sono disegnati dallo stesso ciclo, basato sulla variabile `sides` - il cui valore viene opportunamente cambiato.<br>
          <br>
          Vengono disegnate prima tutte le ripetizioni del pentagono e poi tutte quelle del decagono.
        courseF_artist_variables_challenge2_d: <b>Soluzione:</b> Vuoi sapere come
          è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/117486491"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      courseF_artist_variables_challenge2_2018_authored_hint:
        courseF_artist_variables_challenge2_a: |-
          La figura è composta dalla ripetizione del disegno di un pentagono e di un decagono.<br>
          <br>
          Il perimetro di ogni poligono ha una lunghezza (`length`) di 500 pixel.
        courseF_artist_variables_challenge2_c: |-
          Entrambi i poligoni sono disegnati dallo stesso ciclo, basato sulla variabile `sides` - il cui valore viene opportunamente cambiato.<br>
          <br>
          Vengono disegnate prima tutte le ripetizioni del pentagono e poi tutte quelle del decagono.
        courseF_artist_variables_challenge2_d: <b>Soluzione:</b> Vuoi sapere come
          è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/117486491"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      courseF_bee_conditionals10_authored_hint:
        courseF_bee_conditionals10_a: Imagine there is a cloud in every spot. Does
          this help simplify your code?
        courseF_bee_conditionals10_b: Use an `if/else` block to check every space
          for nectar or honey.
        courseF_bee_conditionals10_c: Could a `while` loop help get to the end of
          this path?
      courseF_bee_conditionals10_2018_authored_hint:
        courseF_bee_conditionals10_a: Imagine there is a cloud in every spot. Does
          this help simplify your code?
        courseF_bee_conditionals10_b: Use an `if/else` block to check every space
          for nectar or honey.
        courseF_bee_conditionals10_c: Could a `while` loop help get to the end of
          this path?
      courseF_bee_conditionals1_predict1_authored_hint: {}
      courseF_bee_conditionals1_predict1_2018_authored_hint: {}
      courseF_bee_conditionals2_authored_hint:
        courseF_bee_conditionals2_a: Qualche volta c'è un fiore, altre volte no. Se
          vuoi che il tuo programma funzioni in entrambi i casi, assicurati di usare
          un blocco `se`.
        courseF_bee_conditionals2_b: Try writing the sequence to get you to all of
          the spaces, then add the `if` statement.
      courseF_bee_conditionals2_2018_authored_hint:
        courseF_bee_conditionals2_a: Qualche volta c'è un fiore, altre volte no. Se
          vuoi che il tuo programma funzioni in entrambi i casi, assicurati di usare
          un blocco `se`.
        courseF_bee_conditionals2_b: Try writing the sequence to get you to all of
          the spaces, then add the `if` statement.
      courseF_bee_conditionals3_authored_hint:
        courseF_bee_conditionals3_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare in ogni casella se c'è un fiore.
        courseF_bee_conditionals3_b: A `repeat` loop will be useful so you only have
          to use one `if` block.
        courseF_bee_conditionals3_c: Try writing code to check the first cloud. Can
          you loop this to check all of them?
      courseF_bee_conditionals3_2018_authored_hint:
        courseF_bee_conditionals3_a: Assicurati di usare un'istruzione condizionale
          `se` per verificare in ogni casella se c'è un fiore.
        courseF_bee_conditionals3_b: A `repeat` loop will be useful so you only have
          to use one `if` block.
        courseF_bee_conditionals3_c: Try writing code to check the first cloud. Can
          you loop this to check all of them?
      courseF_bee_conditionals4_authored_hint:
        courseD_bee_conditionals4_a: Puoi sempre trattare ogni casella come se avesse
          sopra una nuvola, anche se in questo caso riesci a vedere tutto il percorso.
        courseF_bee_conditionals4_b: Usa un blocco `se` all'interno del ciclo per
          controllare la presenza di un fiore in ogni casella.
        courseF_bee_conditionals4_c: Using the block `while there is a path ahead`,
          you should `move forward` and check for a flower. `if there is a flower`
          what should the bee do?
      courseF_bee_conditionals4_2018_authored_hint:
        courseD_bee_conditionals4_a: Puoi sempre trattare ogni casella come se avesse
          sopra una nuvola, anche se in questo caso riesci a vedere tutto il percorso.
        courseF_bee_conditionals4_b: Usa un blocco `se` all'interno del ciclo per
          controllare la presenza di un fiore in ogni casella.
        courseF_bee_conditionals4_c: Using the block `while there is a path ahead`,
          you should `move forward` and check for a flower. `if there is a flower`
          what should the bee do?
      courseF_bee_conditionals5_authored_hint:
        courseF_bee_conditionals5_a: Think of every side of the rectangular path as
          a path by itself. Set up a nested loop with a `repeat` block on the outside
          and a `while there is a path ahead` on the inside. How many paths does the
          bee need to buzz down if the bee needs to buzz every side with a flower?
        courseF_bee_conditionals5_b: All'interno del blocco `mentre c'è strada in
          avanti` devi andare avanti e controllare se c'è un fiore. Come controlli
          se c'è un fiore? Cosa fai se c'è un fiore?
        courseF_bee_conditionals5_c: There are 3 sides of the rectangle with flowers,
          so the code needs to `repeat 3 times`. In every repeat, the bee will need
          to continue along the path, `while there is a path ahead`. To continue down
          the path, the bee will need to `move forward`. While on the path, the bee
          needs to check for a flower. `if there is a flower`, the bee should `get
          nectar`.
        courseF_bee_conditionals5_d: To continue down the path, the bee will need
          to `move forward`. While on the path, the bee needs to check for a flower.
          What should the bee do if there is a flower?
      courseF_bee_conditionals5_2018_authored_hint:
        courseF_bee_conditionals5_a: Think of every side of the rectangular path as
          a path by itself. Set up a nested loop with a `repeat` block on the outside
          and a `while there is a path ahead` on the inside. How many paths does the
          bee need to buzz down if the bee needs to buzz every side with a flower?
        courseF_bee_conditionals5_b: All'interno del blocco `mentre c'è strada in
          avanti` devi andare avanti e controllare se c'è un fiore. Come controlli
          se c'è un fiore? Cosa fai se c'è un fiore?
        courseF_bee_conditionals5_c: 'There are 3 sides of the rectangle with flowers,
          so the code needs to `repeat 3 times`. In every repeat, the bee will need
          to continue along the path, `while there is a path ahead`. '
        courseF_bee_conditionals5_d: To continue down the path, the bee will need
          to `move forward`. While on the path, the bee needs to check for a flower.
          What should the bee do if there is a flower?
      courseF_bee_conditionals7_predict2_authored_hint: {}
      courseF_bee_conditionals7_predict2_2018_authored_hint: {}
      courseF_bee_conditionals8_authored_hint:
        courseF_bee_conditionals8_a: "**Attenzione:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseF_bee_conditionals8_b: |-
          Questo esercizio è un po' complicato, perché non puoi controllare le caselle vuote, i fiori *e* i favi con un unica istruzione condizionale.

          Controlla solo se c'è un fiore o un favo alla fine di ogni tratto del percorso (dove vedi le nuvole).
        courseF_bee_conditionals8_c: What happens if you use the `while path ahead`
          block and get the first flower last?
      courseF_bee_conditionals8_2018_authored_hint:
        courseF_bee_conditionals8_a: "**Attenzione:** Ogni volta che esegui il programma
          ciò che è nascosto può cambiare: per risolvere l'esercizio, devi quindi
          usare il blocco condizionale `se/altrimenti`."
        courseF_bee_conditionals8_b: |-
          Questo esercizio è un po' complicato, perché non puoi controllare le caselle vuote, i fiori *e* i favi con un unica istruzione condizionale.

          Controlla solo se c'è un fiore o un favo alla fine di ogni tratto del percorso (dove vedi le nuvole).
        courseF_bee_conditionals8_c: What happens if you skip the first flower, then
          use the `while path ahead` block?
      courseF_bee_for1_authored_hint:
        courseF_bee_for1_a: A loop will help you here.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect
          all of the nectar.
      courseF_bee_for10_authored_hint:
        courseF_bee_for10_a: Riesci a trovare una relazione tra il numero di passi
          che l'ape fa per arrivare al fiore ed il numero di dosi di nettare che deve
          raccogliere?
        courseF_bee_for10_b: You'll need to have 2 repeats, one will use a math block.
        courseF_bee_for10_c: "In the puzzle, the first set of flowers has **14** flowers,
          the second set has **10** flowers, third set has **6** flowers, and the
          fourth set has **2** flowers.\n\nIn this drawing, notice there are **7**
          red squares, **5** orange squares, **3** green squares, and **1** blue block.
          \n\n![](https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11
          Hint Drawing.png)\n\nHow do the numbers relate?"
        courseF_bee_for10_d: 'Devi usare due blocchi `ripeti ... volte`: uno di questi
          deve usare un blocco con operazioni matematiche.'
      courseF_bee_for10_2018_authored_hint:
        courseF_bee_for10_a: Riesci a trovare una relazione tra il numero di passi
          che l'ape fa per arrivare al fiore ed il numero di dosi di nettare che deve
          raccogliere?
        courseF_bee_for10_b: The first set of flowers has a total of **14 flowers**.
          To get to this first set, the bee must buzz down **7 squares** (or 14 squares
          divided by 2.) How many flowers are in the next set and how many squares
          will be the bee have to travel to get there?
        courseF_bee_for10_c: "In the puzzle, the first set of flowers has **14** flowers,
          the second set has **10** flowers, third set has **6** flowers, and the
          fourth set has **2** flowers.\n\nIn this drawing, notice there are **7**
          red squares, **5** orange squares, **3** green squares, and **1** blue block.
          \n\n![](https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11
          Hint Drawing.png)\n\nHow do the numbers relate?"
        courseF_bee_for10_d: 'Devi usare due blocchi `ripeti ... volte`: uno di questi
          deve usare un blocco con operazioni matematiche.'
      courseF_bee_for11_authored_hint:
        courseF_bee_for11_a: "How much less is 12 than 15?  \nHow much less is 9 than
          12?\n\nDo you see a pattern?"
      courseF_bee_for11_2018_authored_hint:
        courseF_bee_for11_a: "How much less is 12 than 15?  \nHow much less is 9 than
          12?\n\nDo you see a pattern?"
      courseF_bee_for1_2018_authored_hint:
        courseF_bee_for1_a: Drag a purple number block into the blank space on the
          `repeat` loop to tell it how many times to repeat.
        courseF_bee_for1_b: You will need two blocks in your ‘repeat’ loop to collect
          all of the nectar.
      courseF_bee_for2_authored_hint:
        courseF_bee_for2_a: You'll need to use at least three loops (one after another)
          to solve this puzzle.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach
          each flower.
      courseF_bee_for2_2018_authored_hint:
        courseF_bee_for2_a: If you’re confused, work one flower at a time, and test
          often.
        courseF_bee_for2_b: Remember to move forward between each loop, so you reach
          each flower.
      courseF_bee_for3_authored_hint:
        courseF_bee_for3_a: 'Use the `counter` variable inside the `repeat` loop where
          nectar is gathered to solve this puzzle. '
        courseF_bee_for3_b: Your `for` loop will need to count from 1 to 5 with an
          increment of 1.
      courseF_bee_for3_predict1_authored_hint: {}
      courseF_bee_for3_predict1_2018_authored_hint: {}
      courseF_bee_for4_authored_hint:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        courseF_bee_for4_b: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
      courseF_bee_for4_2018_authored_hint:
        courseF_bee_for4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        courseF_bee_for4_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for4_c: Make sure to use the `counter` variable inside your nested
          `repeat` loop to get enough nectar!
      courseF_bee_for5_authored_hint:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar`
          block will need to be in separate `repeat` loops, both inside the same `for`
          loop.
        courseF_bee_for5_b: Use the `counter` variable in each loop so the bee moves
          different distances between each flower.
        courseF_bee_for5_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseF_bee_for5_2018_authored_hint:
        courseF_bee_for5_a: This time, your `move forward` block and your `get nectar`
          block will need to be in separate `repeat` loops, both inside the same `for`
          loop.
        courseF_bee_for5_b: Use the `counter` variable in each loop so the bee moves
          different distances between each flower.
        courseF_bee_for5_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseF_bee_for6_authored_hint:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat`
          loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      courseF_bee_for6_2018_authored_hint:
        courseF_bee_for6_a: Don't forget to use a `counter` variable inside your `repeat`
          loop.
        courseF_bee_for6_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for6_c: Your loop should count **from 5 to 1**.
      courseF_bee_for7_authored_hint:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat`
          loop.
      courseF_bee_for7_2018_authored_hint:
        courseF_bee_for7_a: Your `for` loop will need to count from 1 to 7 by 2.
        courseF_bee_for7_b: Within your `for` loop, you will want to have a `move
          forward` command, and a loop to collect nectar.
        courseF_bee_for7_c: Remember to use the `counter` variable in your `repeat`
          loop.
      courseF_bee_for8_authored_hint:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to
          your counter variable each time through. \n\nWhat do you need to add to
          each number to get the next amount of nectar?"
        courseF_bee_for8_b: In this puzzle, you will need to move in a stair step
          pattern to get to the flowers.
        courseF_bee_for8_c: Your loop will count *from 3 to 15* with some increment.
          What is it?
      courseF_bee_for8_2018_authored_hint:
        courseF_bee_for8_a: "If your loop is counting up, the increment is added to
          your counter variable each time through. \n\nWhat do you need to add to
          each number to get the next amount of nectar?"
        courseF_bee_for8_b: In this puzzle, you will need to move in a stair step
          pattern to get to the flowers.
        courseF_bee_for8_c: Your loop will count *from 3 to 15* with some increment.
          What is it?
      courseF_bee_for9_authored_hint:
        courseF_bee_for9_a: Prova ad usare nel <i>ciclo con contatore</i> un valore
          della variabile `counter` che viene modificato con un blocco matematico
          man mano che ti sposti e raccogli il nettare.
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning
          of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment
          is added to your `counter` variable each time through."
      courseF_bee_for9_2018_authored_hint:
        courseF_bee_for9_a: Prova ad usare nel <i>ciclo con contatore</i> un valore
          della variabile `counter` che viene modificato con un blocco matematico
          man mano che ti sposti e raccogli il nettare.
        courseF_bee_for9_c: It looks like you will need to turn the bee at the beginning
          of each loop iteration if you want to solve the puzzle.
        courseF_bee_for9_b: "**Remember:** If your loop is counting up, the increment
          is added to your `counter` variable each time through."
      courseF_bee_for_challenge1_authored_hint: {}
      courseF_bee_for_challenge1_2018_authored_hint: {}
      courseF_bee_for_challenge2_authored_hint:
        courseF_bee_for_challenge2_a: |-
          L'ape dovrebbe seguire un percorso in cui raccoglie prima tutto il nettare (andando a zig-zag verso destra e verso l'alto) e poi tutto il miele (andando a zig-zag verso il basso e verso sinistra):<br>
          ![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)
        courseF_bee_for_challenge2_b: 'È conveniente usare 2 <i>cicli</i> `ripeti
          con counter`: uno per salire mentre si raccoglie il nettare, uno per scendere
          mentre si produce il miele.'
        courseF_bee_for_challenge2_c: Mentre il ciclo `ripeti con counter` per salire
          deve usare il valore del contatore (`counter`) sia per spostarsi che per
          raccogliere il nettare, quello per scendere lo deve usare solo per produrre
          il miele.
        courseF_bee_for_challenge2_d: |-
          <b>Soluzione:</b><br>
          ![Solution Blocks](https://programmailfuturo.it/images/codeorg/4-20-3.png)
      courseF_bee_for_challenge2_2018_authored_hint:
        courseF_bee_for_challenge2_a: |-
          L'ape dovrebbe seguire un percorso in cui raccoglie prima tutto il nettare (andando a zig-zag verso destra e verso l'alto) e poi tutto il miele (andando a zig-zag verso il basso e verso sinistra):<br>
          ![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)
        courseF_bee_for_challenge2_b: 'È conveniente usare 2 <i>cicli</i> `ripeti
          con counter`: uno per salire mentre si raccoglie il nettare, uno per scendere
          mentre si produce il miele.'
        courseF_bee_for_challenge2_c: Mentre il ciclo `ripeti con counter` per salire
          deve usare il valore del contatore (`counter`) sia per spostarsi che per
          raccogliere il nettare, quello per scendere lo deve usare solo per produrre
          il miele.
        courseF_bee_for_challenge2_d: |-
          <b>Soluzione:</b><br>
          ![Solution Blocks](https://programmailfuturo.it/images/codeorg/4-20-3.png)
      courseF_bee_for_challenge3_authored_hint:
        courseF_bee_for_challenge2_a: |-
          L'ape dovrebbe seguire un percorso in cui raccoglie prima tutto il nettare (andando a zig-zag verso destra e verso l'alto) e poi tutto il miele (andando a zig-zag verso il basso e verso sinistra):<br>
          ![](https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png)
        courseF_bee_for_challenge2_b: 'È conveniente usare 2 <i>cicli</i> `ripeti
          con counter`: uno per salire mentre si raccoglie il nettare, uno per scendere
          mentre si produce il miele.'
        courseF_bee_for_challenge2_c: Mentre il ciclo `ripeti con counter` per salire
          deve usare il valore del contatore (`counter`) sia per spostarsi che per
          raccogliere il nettare, quello per scendere lo deve usare solo per produrre
          il miele.
        courseF_bee_for_challenge2_d: |-
          <b>Soluzione:</b><br>
          ![Solution Blocks](https://programmailfuturo.it/images/codeorg/4-20-3.png)
      courseF_bee_functions2_authored_hint:
        courseF_bee_functions2_a: The function has been written for you, but you will
          need to call it at each flower.
        courseF_bee_functions2_b: Click on the blue edit button on the `get only nectar`
          function to see what it does.
      courseF_bee_functions2_2018_authored_hint:
        courseF_bee_functions2_a: The function has been written for you, but you will
          need to call it at each flower.
        courseF_bee_functions2_b: Click on the blue edit button on the `get only nectar`
          function to see what it does.
      courseF_bee_functions3_authored_hint:
        courseF_bee_functions3_a: 'Your function for this puzzle only needs to make
          honey, it shouldn''t have any `move forward` or `turn` blocks in it. '
        courseF_bee_functions3_b: Remember that your function should only get honey
          *if* there is a honeycomb.
        courseF_bee_functions3_c: Use the green `only make honey` block to call your
          function.
        courseF_bee_functions3_d: Check out this path.
      courseF_bee_functions3_2018_authored_hint:
        courseF_bee_functions3_a: 'Your function for this puzzle only needs to make
          honey, it shouldn''t have any `move forward` or `turn` blocks in it. '
        courseF_bee_functions3_b: Remember that your function should only get honey
          *if* there is a honeycomb.
        courseF_bee_functions3_c: Use the green `only make honey` block to call your
          function.
        courseF_bee_functions3_d: Check out this path.
      courseF_bee_functions3a_authored_hint:
        courseF_bee_functions3a_a: 'Your function for this puzzle only needs to get
          nectar or make honey, it shouldn''t have any `move forward` or `turn` blocks
          in it. '
        courseF_bee_functions3a_b: Use a stairstep pattern to check the first four
          clouds.
      courseF_bee_functions3a_2018_authored_hint:
        courseF_bee_functions3a_a: 'Your function for this puzzle only needs to get
          nectar or make honey, it shouldn''t have any `move forward` or `turn` blocks
          in it. '
        courseF_bee_functions3a_b: Use a stairstep pattern to check the first four
          clouds.
      courseF_bee_functions4_authored_hint:
        courseF_bee_functions4_a: Your function should travel down the side paths
          and return the bee back to the main road.  You don't need to add that part
          to your main program.
        courseF_bee_functions4_b: Try building the program and using the function
          blocks as you expect the function to behave, then create the function.
      courseF_bee_functions4_2018_authored_hint:
        courseF_bee_functions4_a: Your function should travel down the side paths
          and return the bee back to the main road.  You don't need to add that part
          to your main program.
        courseF_bee_functions4_b: Try building the program and using the function
          blocks as you expect the function to behave, then create the function.
      courseF_bee_functions5_authored_hint:
        courseE_bee_functions5_a: Edit the function so that it solves the puzzle without
          having to change the main program.
        courseE_bee_functions5_b: "Your function should make the bee: \n- turn\n-
          move forward\n- collect all of the nectar\n- turn around\n- move back to
          the main path\n- turn back to the direction that the bee started from"
      courseF_bee_functions5a_authored_hint:
        courseF_bee_functions5a_a: "Your function should check if there's a path to
          the right, and if there is, travel down the side paths and return the bee
          back to the main road.  \n\nYou don't need to add that part to your main
          program."
        courseF_bee_functions5a_b: Use a `while` loop to travel down all of the main
          paths, since they are different lengths.
        courseF_bee_functions5a_c: Within your `while` loop, make sure to move forward,
          then use your function to check for a path.
      courseF_bee_functions5a_2018_authored_hint:
        courseF_bee_functions5a_a: "Your function should check if there's a path to
          the right, and if there is, travel down the side paths and return the bee
          back to the main road.  \n\nYou don't need to add that part to your main
          program."
        courseF_bee_functions5a_b: Use a `while` loop to travel down all of the main
          paths, since they are different lengths.
        courseF_bee_functions5a_c: Within your `while` loop, make sure to move forward,
          then use your function to check for a path.
      courseF_bee_functions6_authored_hint:
        courseF_bee_functions6_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!

          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
        courseF_bee_functions6_b: Your function should check if there is a flower
          or honeycomb, get nectar or make honey, then turn.
        courseF_bee_functions6_c: Since you are turning within your function, you
          only need one `while` loop to get you through this maze.
      courseF_bee_functions6_2018_authored_hint:
        courseF_bee_functions6_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!

          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
        courseF_bee_functions6_b: Your function should check if there is a flower
          or honeycomb, get nectar or make honey, then turn.
        courseF_bee_functions6_c: Since you are turning within your function, you
          only need one `while` loop to get you through this maze.
      courseF_bee_functions7_authored_hint:
        courseF_bee_functions7_a: You can look back at the last puzzle to see your
          function.
        courseF_bee_functions7_b: Try drawing a path through this maze with your finger.
          Where will the bee have to make a decision?
      courseF_bee_functions7_2018_authored_hint:
        courseF_bee_functions7_a: You can look back at the last puzzle to see your
          function.
        courseF_bee_functions7_b: Try drawing a path through this maze with your finger.
          Where will the bee have to make a decision?
      courseF_bee_functions8a_authored_hint:
        courseF_bee_functions8a_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseF_bee_functions8a_b: 'Remember to build code inside of the function
          editor.

'
      courseF_bee_functions8a_2018_authored_hint:
        courseF_bee_functions8a_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseF_bee_functions8a_b: 'Remember to build code inside of the function
          editor.

'
      courseF_bee_functionsPre7_authored_hint:
        courseF_bee_functions7_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseF_bee_functions7_b: |
          Remember to build code inside of the green function block.

          <xml>
          <block type="procedures_defnoreturn" editable="false">
          <mutation/>
          <title name="NAME">get nectar make honey</title>
          <statement name="STACK">

          </statement>
          </block>
          </xml>
        courseF_bee_functions7_c: Which way should you turn if there is a honeycomb?
          What about a flower? What if there is nothing?
      courseF_bee_functionsPre7_2018_authored_hint:
        courseF_bee_functions7_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseF_bee_functions7_b: |-
          Remember to build code inside of the green function block.

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseF_bee_functions7_c: Which way should you turn if there is a honeycomb?
          What about a flower? What if there is nothing?
      courseF_bee_functions_1_2018_authored_hint: {}
      courseF_bee_functions_2_2018_authored_hint: {}
      courseF_bee_functions_3_2018_authored_hint: {}
      courseF_bee_functions_challenge1_authored_hint:
        courseF_bee_functions_challenge1_a: You can use the functions in the tool
          box to help you. You can call a function inside of another function's definition!
      courseF_bee_functions_challenge1_2018_authored_hint:
        courseF_bee_functions_challenge1_a: You can use the functions in the tool
          box to help you. You can call a function inside of another function's definition!
      courseF_bee_functions_challenge2_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          If there is a path to the right, you should do the following:
          * Get any nectar or make any honey.
          * Turn right towards the side path.
          * Move to the end of the side path.
          * Turn right.

          If you repeat the above actions twice, you will be ready to move back down the main path.

          **Only click for another hint if you want to see the full solution!**
        courseF_bee_functions_challenge2_b: |-
          **Solution:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathRight</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"></mutation>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">move and check</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="check nectar or honey"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">check nectar or honey</title>
          <statement name="STACK">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="bee_whileNectarAmount">
          <title name="ARG1">honeyAvailable</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      courseF_bee_functions_challenge2_2018_authored_hint:
        courseF_bee_functions_challenge2_a: |-
          If there is a path to the right, you should do the following:
          * Get any nectar or make any honey.
          * Turn right towards the side path.
          * Move to the end of the side path.
          * Turn right.

          If you repeat the above actions twice, you will be ready to move back down the main path.

          **Only click for another hint if you want to see the full solution!**
        courseF_bee_functions_challenge2_b: |-
          **Solution:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_if">
          <title name="DIR">isPathRight</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"></mutation>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">move and check</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="check nectar or honey"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">check nectar or honey</title>
          <statement name="STACK">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="bee_whileNectarAmount">
          <title name="ARG1">honeyAvailable</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      courseF_bee_functions_challenge2_recursion_authored_hint:
        courseF_bee_functions8a_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        courseF_bee_functions8a_b: 'Remember to build code inside of the function
          editor.

'
      courseF_bee_fwp1_authored_hint:
        courseF_bee_fwp1_a: Use `if` statements to make sure you're only getting nectar
          from a flower.
        courseF_bee_fwp1_b: Continue along the path using a `repeat` block. Make sure
          you are using a `move forward` block and checking if there is a flower using
          a `if` statement.
      courseF_bee_fwp1_2018_authored_hint:
        courseF_bee_fwp1_a: Use `if` statements to make sure you're only getting nectar
          from a flower.
        courseF_bee_fwp1_b: Continue along the path using a `repeat` block. Make sure
          you are using a `move forward` block and checking if there is a flower using
          a `if` statement.
      courseF_bee_fwp2_authored_hint:
        courseF_bee_fwp2_a: "To turn this into a function, simply drag the code into
          the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        courseF_bee_fwp2_b: Don't forget to connect the `rowOfNectar` block to `when
          run` to call the function that you just built.
      courseF_bee_fwp2_2018_authored_hint:
        courseF_bee_fwp2_a: "To turn this into a function, simply drag the code into
          the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        courseF_bee_fwp2_b: Don't forget to connect the `rowOfNectar` block to `when
          run` to call the function that you just built.
      courseF_bee_fwp3_authored_hint:
        courseF_bee_fwp3_a: Your function will run no matter which direction you're
          facing.
        courseF_bee_fwp3_b: There are 3 rows of nectar, what kind of turns and movements
          do you need to make between each row?
        courseF_bee_fwp3_c: To solve this puzzle, you'll need to call your function
          3 times. In between each call, you need to `turn right`, `move forward`
          2 times, then `turn right` again. OR, you need to `turn left`, `move forward`
          2 times, then `turn left` again.
      courseF_bee_fwp3_2018_authored_hint:
        courseF_bee_fwp3_a: Your function will run no matter which direction you're
          facing.
        courseF_bee_fwp3_b: There are 3 rows of nectar, what kind of turns and movements
          do you need to make between each row?
        courseF_bee_fwp3_c: To solve this puzzle, you'll need to call your function
          3 times. In between each call, you need to `turn right`, `move forward`
          2 times, then `turn right` again. OR, you need to `turn left`, `move forward`
          2 times, then `turn left` again.
      courseF_bee_fwp4_authored_hint:
        courseF_bee_fwp4_a: You will need to add a parameter and use the resulting
          variable in your loop.
        courseF_bee_fwp4_b: The parameter you create for your function will be used
          to in the repeat loop to determine how many times the bee will move forward
          and check for nectar.
      courseF_bee_fwp4_2018_authored_hint:
        courseF_bee_fwp4_a: You will need to add a parameter and use the resulting
          variable in your loop.
        courseF_bee_fwp4_b: The parameter you create for your function will be used
          to in the repeat loop to determine how many times the bee will move forward
          and check for nectar.
      courseF_bee_fwp5_authored_hint:
        courseF_bee_fwp5_a: Count the number of spaces you need to check in each stretch
          and use those numbers as your parameters to the function call.
        courseF_bee_fwp5_a_b: Remember to turn between each function call.
      courseF_bee_fwp5_2018_authored_hint:
        courseF_bee_fwp5_a: Count the number of spaces you need to check in each stretch
          and use those numbers as your parameters to the function call.
        courseF_bee_fwp5_a_b: Remember to turn between each function call.
      courseF_bee_fwp6_authored_hint:
        courseF_bee_fwp6_a: Which block automatically increments a variable that you
          could use as a parameter?
        courseF_bee_fwp6_b: Try using a `for` loop to solve this puzzle.
      courseF_bee_fwp6_2018_authored_hint:
        courseF_bee_fwp6_a: Which block automatically increments a variable that you
          could use as a parameter?
        courseF_bee_fwp6_b: Try using a `for` loop to solve this puzzle.
      courseF_bee_fwp7_authored_hint:
        courseF_bee_fwp7_a: You don't need a second parameter for this function, only
          a second `if` statement.
        courseF_bee_fwp7_b: Add an `if` statement in your function so the bee checks
          for both honeycombs and flowers.
      courseF_bee_fwp7_2018_authored_hint:
        courseF_bee_fwp7_a: You don't need a second parameter for this function, only
          a second `if` statement.
        courseF_bee_fwp7_b: Add an `if` statement in your function so the bee checks
          for both honeycombs and flowers.
      courseF_bee_fwp8_authored_hint:
        courseF_bee_fwp8_a: How could a `for` loop help in this puzzle?
        courseF_bee_fwp8_b: Since the spiral gets smaller as you go in, your `for`
          loop should count down.
      courseF_bee_fwp8_2018_authored_hint:
        courseF_bee_fwp8_a: How could a `for` loop help in this puzzle?
        courseF_bee_fwp8_b: Since the spiral gets smaller as you go in, your `for`
          loop should count down.
      courseF_bee_fwp9_authored_hint: {}
      courseF_bee_fwp9_predict1_authored_hint: {}
      courseF_bee_fwp9_predict1_2018_authored_hint: {}
      courseF_bee_fwp_challenge1_authored_hint:
        courseF_bee_fwp_challenge1_a: |-
          The main program should look something like this:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: |-
          Look at how much corn is available to harvest in each space. Do you see the counter pattern? The `length` parameter should be used to set the maximum value in the `for loop`.

          Don't forget to have the farmer move back to the main path after harvesting!
        courseF_bee_fwp_challenge1_b1: |-
          The `length` parameter should be used to set the maximum value in the `for loop`.

          Don't forget to have the farmer move back to the main path after harvesting!
        courseF_bee_fwp_challenge1_c: |-
          Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.
          Inside this loop, you should move forward and pick all of the corn.

          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: |-
          Inside the `for loop` you will want to `move forward` then `get nectar` **counter times**.
          After the `for loop` you can just `move backward` **length times**.

          You may need to read this hint several times to understand it. The part in **bold** is a hint about how to use the two `repeat` loops you will need.
        courseF_bee_fwp_challenge1_d2: After the `for loop` you can just `move backward`
          **length times**.
        courseF_bee_fwp_challenge1_e: |
          **Here is the solution:**

          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseF_bee_fwp_challenge1_2018_authored_hint:
        courseF_bee_fwp_challenge1_a: |-
          The main program should look something like this:
          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: 'Look at how much corn is available to harvest
          in each space. Do you see the counter pattern? '
        courseF_bee_fwp_challenge1_b1: |-
          The `length` parameter should be used to set the maximum value in the `for loop`.

          Don't forget to have the farmer move back to the main path after harvesting!
        courseF_bee_fwp_challenge1_c: |-
          Place a `for loop` inside a function and set it to count from `1` to `length` by `1`.
          Inside this loop, you should move forward and pick all of the corn.

          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: Inside the `for loop` you will want to `move
          forward` then `pick corn` **counter times**.
        courseF_bee_fwp_challenge1_d2: After the `for loop` you can just `move backward`
          **length times**.
        courseF_bee_fwp_challenge1_e: |
          **Here is the solution:**

          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseF_bee_fwp_challenge2_authored_hint:
        courseF_bee_fwp_challenge2_a: |-
          Start by making sure you understand how this function is *supposed* to work. As the farmer moves down each path, she will only try to collect corn. Instead, how can you make her check for each of the 3 vegetables and pick only the one she finds?

          Add conditional statements to the function to check for corn, pumpkins, and lettuce.
        courseF_bee_fwp_challenge2_b: "Are you running out of `move forward` blocks?\nTry
          using a *second* `for loop` in your main program. \n\n**Note:** Be careful
          not to confuse `counter` with `counter2` in your code."
        courseF_bee_fwp_challenge2_c: |-
          **Here is what your function should look like:**

          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">Corn</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Pumpkin</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Lettuce</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |
          **Here is what your main program should look like:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">counter2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      courseF_bee_fwp_challenge2_2018_authored_hint:
        courseF_bee_fwp_challenge2_a: |-
          Start by making sure you understand how this function is *supposed* to work. As the farmer moves down each path, she will only try to collect corn. Instead, how can you make her check for each of the 3 vegetables and pick only the one she finds?

          Add conditional statements to the function to check for corn, pumpkins, and lettuce.
        courseF_bee_fwp_challenge2_b: |-
          Are you running out of `move forward` blocks?
          Try using a *second* `for loop` in your main program.
        courseF_bee_fwp_challenge2_c: |-
          **Here is what your function should look like:**

          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">pick row</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">Corn</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Pumpkin</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">Lettuce</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |
          **Here is what your main program should look like:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">counter2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      courseF_bee_variables_1_2018_authored_hint: {}
      courseF_bee_variables_2_2018_authored_hint: {}
      courseF_bee_variables_3_2018_authored_hint: {}
      courseF_bee_variables_4_2018_authored_hint: {}
      courseF_bee_variables_5_2018_authored_hint: {}
      courseF_bee_variables_6_2018_authored_hint: {}
      courseF_bee_variables_7_2018_authored_hint: {}
      courseF_bee_variables_8_2018_authored_hint: {}
      courseF_farmer_ramp11_authored_hint:
        courseF_farmer_ramp11_a: If you're having a hard time seeing where the loops
          should go, try coding it all out then looking for a pattern.
        courseF_farmer_ramp11_b: How can you use a `repeat` loop to pick lettuce,
          instead of dragging out 5 `pick lettuce` blocks?
        courseF_farmer_ramp11_c: You don't need to use 5 repeat loops to get all of
          the lettuce.  Instead, drag your lettuce picking repeat loop inside of another
          loop (along with a `move forward` block, and you'll have it!)
      courseF_farmer_ramp11_2018_authored_hint:
        courseF_farmer_ramp11_a: If you're having a hard time seeing where the loops
          should go, try coding it all out then looking for a pattern.
        courseF_farmer_ramp11_b: How can you use a <xml><block type="controls_repeat"><title
          name="TIMES">???</title></block></xml> loop to pick lettuce, instead of
          dragging out 5 <xml><block type="harvester_lettuce"/></xml> blocks?
        courseF_farmer_ramp11_c: You don't need to use 5 repeat loops to get all of
          the lettuce.  Instead, drag your lettuce picking repeat loop inside of another
          loop (along with a <xml><block type="maze_moveForward"/></xml> block, and
          you'll have it!)
      courseF_maze_predict1_authored_hint: {}
      courseF_maze_ramp1_authored_hint:
        courseF_maze_ramp1_a: If the bird isn't getting to the pig, make sure all
          of the blocks have been fully clicked together, then click "Run" again.
        courseF_maze_ramp1_b: You don't need any extra blocks from the toolbox here!
      courseF_maze_ramp13_authored_hint:
        courseF_maze_ramp13_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseF_maze_ramp13_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
        courseF_maze_ramp13_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
        courseF_maze_ramp13_d: Once your loop is done, what do you have to do to move
          the final few squares? Attach these blocks after the loop.
      courseF_maze_ramp15_authored_hint:
        courseF_maze_ramp7_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseF_maze_ramp7_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
      courseF_maze_ramp1_2018_authored_hint:
        courseF_maze_ramp1_a: If the bird isn't getting to the pig, make sure all
          of the blocks have been fully snapped together, then click "Run" again.
        courseF_maze_ramp1_b: You don't need any extra blocks from the toolbox here!
      courseF_maze_ramp2_authored_hint:
        courseF_maze_ramp2_a: To use a new block, drag it from the toolbox out into
          the workspace and connect it to the program that is attached to the `when
          run` block.
        courseF_maze_ramp2_b: Make sure the `move forward` block is inside of the
          loop, so that it is repeated.
      courseF_maze_ramp2_2018_authored_hint:
        courseF_maze_ramp2_a: To use a new block, drag it from the toolbox out into
          the workspace and connect it to the program that is attached to the <xml><block
          type="when_run"/></xml> block.
        courseF_maze_ramp2_b: Make sure the <xml><block type="maze_moveForward"/></xml>
          block is inside of the loop, so that it is repeated.
      courseF_maze_ramp4_authored_hint:
        courseF_maze_ramp4_a: Puoi girare a destra o a sinistra dal punto di vista
          dell'uccellino. Se l'uccellino è rivolto verso destra, girare a destra significa
          dirigersi verso il basso.
        courseF_maze_ramp4_b: To follow the path, move forward and turn one way, then
          move three times before turning the opposite way. Move forward one more
          time to reach the pig.
        courseF_maze_ramp4_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseF_maze_ramp4_2018_authored_hint:
        courseF_maze_ramp4_a: Puoi girare a destra o a sinistra dal punto di vista
          dell'uccellino. Se l'uccellino è rivolto verso destra, girare a destra significa
          dirigersi verso il basso.
        courseF_maze_ramp4_b: To follow the path, move forward and turn one way, then
          move three times before turning the opposite way. Move forward one more
          time to reach the pig.
        courseF_maze_ramp4_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseF_maze_ramp5_authored_hint:
        courseF_maze_ramp5_a: Prova ad usare il pulsante "Fai un passo" per eseguire
          il codice un'istruzione alla volta. Riesci ad capire cosa devi fare dopo?
        courseF_maze_ramp5_b: There is more than one way to get to the pig.
        courseF_maze_ramp5_c: Try using a `repeat` loop for shorter code!
      courseF_maze_ramp5_2018_authored_hint:
        courseF_maze_ramp5_a: Prova ad usare il pulsante "Fai un passo" per eseguire
          il codice un'istruzione alla volta. Riesci ad capire cosa devi fare dopo?
        courseF_maze_ramp5_b: There is more than one way to get to the pig.
        courseF_maze_ramp5_c: Try using a <xml><block type="controls_repeat"><title
          name="TIMES">3</title></block></xml> loop for shorter code!
      courseF_maze_ramp6_authored_hint:
        courseF_maze_ramp6_a: Ci sono due modi per risolvere questo esercizio!
        courseF_maze_ramp6_b: The bird starts facing a wall, so remember to turn before
          moving!
        courseF_maze_ramp6_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseF_maze_ramp6_2018_authored_hint:
        courseF_maze_ramp6_a: Ci sono due modi per risolvere questo esercizio!
        courseF_maze_ramp6_b: The bird starts facing a wall, so remember to turn before
          moving!
        courseF_maze_ramp6_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
      courseF_maze_ramp7_authored_hint:
        courseF_maze_ramp7_b: Non dimenticare di usare il pulsante "Fai un passo"
          che esegue un blocco per volta permettendoti di notare più facilmente gli
          errori.
        courseF_maze_ramp7_a: Usa i blocchi di ripetizione per eseguire ripetutamente
          un blocco o una sequenza di blocchi.
        courseF_maze_ramp7_c: Non aver paura di sbagliare! Prova ad aggiungere blocchi
          ed eseguire il codice per vedere cosa accade, anche se non pensi di aver
          ancora risolto l'esercizio.
        courseF_maze_ramp7_d: There is more than one way to get to the pig. Which
          requires the least code?
        courseF_maze_ramp7_aa: |-
          Look at this path...

          ![](https://images.code.org/e1d29901495eea9504c194b09efaa88e-image-1503437474226.29.32.png)
      courseF_playlab_brokenText_authored_hint:
        courseF_playlab_variables6c_a: Under the “Input” section, use the `ask` block
          to get input from users.
      courseF_playlab_variables1a_authored_hint:
        courseF_playlab_variables1a_a: Put the word "Goal!" inside the green block
          that is connected to the purple `set shout to` block.
      courseF_playlab_variables1a_2018_authored_hint:
        courseF_playlab_variables1a_a: You will want to replace the words “What should
          I shout?” in the green block with “Goal!”
      courseF_playlab_variables2b_authored_hint:
        courseF_playlab_variables2b_a: What do you think Kiki will say when you hit
          `Run`?
      courseF_playlab_variables2b_2018_authored_hint:
        courseF_playlab_variables2b_a: What do you think Kiki will say when you hit
          `Run`?
      courseF_playlab_variables3b_authored_hint:
        courseF_playlab_variables3b_a: The variable blocks are already in the workspace.  All
          you have to do is put them where they belong!
      courseF_playlab_variables3bEdit_authored_hint:
        courseF_playlab_variables3b_a: The variable blocks are already in the workspace.  All
          you have to do is put them where they belong!
      courseF_playlab_variables3b_josh_authored_hint:
        courseF_playlab_variables3b_a: The variable blocks are already in the workspace.  All
          you have to do is put them where they belong!
      courseF_playlab_variables3b_josh_2018_authored_hint:
        courseF_playlab_variables3b_a: 'There are two blocks with empty spaces: an
          `actor say` block, and a `join` block. Add the variable blocks there!'
      courseF_playlab_variables4b_authored_hint:
        courseF_playlab_variables4b_a: You don’t need any more blocks from the toolbox
          here.
        courseF_playlab_variables4b_b: Put the two `age` variables and one `name`
          variable where they make the most sense in the conversation.
      courseF_playlab_variables4b_2018_authored_hint:
        courseF_playlab_variables4b_a: You don’t need any more blocks from the toolbox
          here.
        courseF_playlab_variables4b_b: Put the two `age` variables and one `name`
          variable where they make the most sense in the conversation.
      courseF_playlab_variables5c_authored_hint:
        courseF_playlab_variables5c_a: Find an `answer` variable block in the toolbox,
          under “Variables”.
        courseF_playlab_variables5c_b: Test your code! Try entering “red”, and also
          other colors, to see what happens.
      courseF_playlab_variables5c_2018_authored_hint:
        courseF_playlab_variables5c_a: Find an `answer` variable block in the toolbox,
          under “Variables”.
        courseF_playlab_variables5c_b: Test your code! Try entering “red”, and also
          other colors, to see what happens.
      courseF_playlab_variables6c_authored_hint:
        courseF_playlab_variables6c_a: Under the “Input” section, use the `ask` block
          to get input from users.
      courseF_playlab_variables6c_2018_authored_hint:
        courseF_playlab_variables6c_a: Under the “Input” section, use the `ask` block
          to get input from users.
      courseF_playlab_variables7b_authored_hint:
        courseF_playlab_variables7b_a: Have a cat and a dog talk about their favorite
          foods. Use the ask block to find out the favorite food, then display the
          text to the screen!
        courseF_playlab_variables7b_b: Have your favorite character ask if you want
          to hear a joke. If the answer is yes, display a joke to the screen.
      courseF_playlab_variables7b_2018_authored_hint:
        courseF_playlab_variables7b_a: Have a cat and a dog talk about their favorite
          foods. Use the ask block to find out the favorite food, then display the
          text to the screen!
        courseF_playlab_variables7b_b: Have your favorite character ask if you want
          to hear a joke. If the answer is yes, display a joke to the screen.
      courseF_playlab_variables7c_authored_hint:
        courseF_playlab_variables7c_a: Put the new `ask` block before your `if/else`
          statement so you can use it there in other stages.
      courseF_playlab_variables7c_2018_authored_hint:
        courseF_playlab_variables7c_a: Put the new `ask` block before your `if/else`
          statement so you can use it there in other stages.
      courseF_playlab_variables8c_authored_hint:
        courseF_playlab_variables8c_a: The `join` block goes into an `actor say` block,
          and lets you use your variables in larger sentences.
      courseF_playlab_variables8c_2018_authored_hint:
        courseF_playlab_variables8c_a: The `join` block goes into an `actor say` block,
          and lets you use your variables in larger sentences.
      courseF_playlab_variables_challenge1_authored_hint:
        courseF_playlab_variables_challenge1_a: |-
          You will need additional blocks from the tool box to get the actors to talk.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Knock knock.</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      courseF_playlab_variables_challenge1_2018_authored_hint:
        courseF_playlab_variables_challenge1_a: |-
          You will need additional blocks from the tool box to get the actors to talk.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">Knock knock.</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      courseF_playlab_variables_challenge2_authored_hint:
        courseF_playlab_variables_challenge2_a: 'Add and subtract points to the `score`
          variable when sprites collide. '
        courseF_playlab_variables_challenge2_b: Se vuoi, puoi modificare il parametro
          che cambia la velocità alla quale si muove il cane ogni volta che premi
          le frecce.
        courseF_playlab_variables_challenge2_c: |-
          **Solution:**

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">up</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">1</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">down</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">4</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">8</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      courseF_playlab_variables_challenge2_2018_authored_hint:
        courseF_playlab_variables_challenge2_a: Add and subtract points to the `score`
          variable when sprites collide.
        courseF_playlab_variables_challenge2_b: Se vuoi, puoi modificare il parametro
          che cambia la velocità alla quale si muove il cane ogni volta che premi
          le frecce.
        courseF_playlab_variables_challenge2_c: |-
          **Solution:**

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">up</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">1</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">down</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">4</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">8</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenArrow">
          <title name="VALUE">right</title>
          <next>
          <block type="studio_moveDistanceParams" inline="true">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <value name="DISTANCE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">1</title>
          <title name="SPRITE2">2</title>
          <next>
          <block type="studio_setScore" inline="false">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="studio_getScore"/>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </next>
          </block>
          </xml>
      courseF_playlab_variables_challenge3_authored_hint:
        courseF_playlab_variables_challenge3_a: |-
          The actor knows what to say because it checks the current value of the `fortune` variable.

          <xml><block type="variables_set" inline="false">
          <title name="VAR">fortune</title>
          <value name="VALUE">
          <block type="text" movable="false">
          <title name="TEXT">Concentrate and ask again!</title>
          </block>
          </value>
          </block></xml>
        courseF_playlab_variables_challenge3_b: |-
          It will feel like the game starts all over if you call the `ask a question` function again after the actor says the fortune.
          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="variables_get">
          <title name="VAR">fortune</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <next>
          <block type="procedures_callnoreturn">
          <mutation name="Ask a question"/>
          </block></next></block></xml>
        courseF_playlab_variables_challenge3_c: "You will need to add more conditional
          statements to give the actors more things to say.\n\n<xml><block type=\"studio_ifActorHasEmotionParams\"
          inline=\"true\">\n            <title name=\"EMOTION\">2</title>\n            <value
          name=\"SPRITE\">\n              <block type=\"math_number\">\n                <title
          name=\"NUM\">1</title>\n              </block>\n            </value>\n            <statement
          name=\"DO\">\n              <block type=\"variables_set\" inline=\"false\">\n
          \               <title name=\"VAR\">fortune</title>\n                <value
          name=\"VALUE\">\n                  <block type=\"text\" movable=\"false\">\n
          \                   <title name=\"TEXT\">???</title>\n                  </block>\n
          \               </value>\n              </block>\n              </statement></block></xml>\n
          \             \nDon't forget to change which moods the actor will show inside
          of the `repeat forever` loop. You can also set the moods randomly!"
        courseF_playlab_variables_challenge3_d: |-
          Once you understand all of the code that relates to Actor 1, you can try re-writing the same code, but this time for Actor 2.

          Don't forget to change the instructions inside the `Ask a question` function so they still make sense!
        courseF_playlab_variables_challenge3_e: |-
          When everything is done, you should be able to click on either actor and get up to 8 different messages. Is it possible to expand it even further?

          Have a friend try your app when it is finished!
      coursea_maze_ramp1_2018_authored_hint:
        courseC_maze_programming1_a: If the bird isn't getting to the pig, make sure
          both of the blocks have been fully clicked together, then click "Run" again.
        courseC_maze_programming1_b: Don't be afraid to make a mistake! Try something,
          and if it doesn't work, try something else!
      coursef_maze_ramp3_authored_hint:
        courseF_maze_ramp3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
        courseF_maze_ramp3_b: Use the step button to go through the program line-by-line.
          Where does something go wrong?
      coursef_maze_ramp3_2018_authored_hint:
        courseF_maze_ramp3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
        courseF_maze_ramp3_b: Use the step button to go through the program line-by-line.
          Where does something go wrong?
      drawings!_authored_hint:
        triangle_geometry_hint: 'Remember: an equilateral triangle has three sides,
          with a 60 degree turn between each!'
        repeat_pointer: You have to draw a side and turn 3 times...what block can
          you use to run the same instructions many times?
        repeat_bottom_out: Use a `repeat 3 times` block!
      grade1_adventurer_loops10_authored_hint:
        grade1_adventurer_loops10_a: You'll need three `repeat` loops to solve this
          puzzle.
      grade1_adventurer_loops2_authored_hint:
        grade1_adventurer_loops2_a: Try using a `repeat` block to collect your gold.
      grade1_adventurer_loops3_authored_hint:
        grade1_adventurer_loops3_a: Is something not right? Try using the step button
          to figure out where things go wrong.
      grade1_adventurer_loops4_authored_hint:
        grade1_adventurer_loops4_a: Try using more than one loop to get the job done.
      grade1_adventurer_loops5_authored_hint:
        grade1_adventurer_loops5_a: Non riesci a capire in che punto il programma
          inizia a sbagliare? Usa il pulsante "Fai un passo" per eseguire il programma
          un'istruzione alla volta.
      grade1_adventurer_loops6_authored_hint:
        grade1_adventurer_loops6_a: Se hai problemi con questo esercizio, prova a
          disegnarlo su un pezzo di carta per aiutarti a capirlo.
      grade1_adventurer_loops7_challenge_authored_hint:
        grade1_adventurer_loops7_challenge_a: 'If you can''t figure out where to put
          the repeat loops, program it out step-by-step and look for a pattern. '
        grade1_adventurer_loops7_challenge_b: Does the code feel a little long?  You
          can make it much shorter by moving two of your `repeat` loops inside of
          another loop.
      grade1_adventurer_loops8_challenge_authored_hint:
        grade1_adventurer_loops8_challenge_a: Can you find a pattern in the steps?  Where
          can you use a repeat?
      grade1_adventurer_loops9_authored_hint:
        grade1_adventurer_loops9_a: 'Does this seem too hard?  Break it up into 4
          little problems to make it feel easier.  '
      grade1_artist_loops1_authored_hint:
        grade1_artist_loops1_a: Se vuoi che il ciclo si ripeta più di 4 volte, devi
          cambiare il numero in alto a destra nel blocco rosa del ciclo.
      grade1_artist_loops2_authored_hint:
        grade1_artist_loops2_a: Ricordati che devi usare il ciclo `ripeti` per riuscire
          a risolvere l'esercizio!
      grade1_artist_loops3_authored_hint: {}
      grade1_artist_loops4_authored_hint:
        grade1_artist_loops4_a: Trascina nell'area di lavoro un blocco `ripeti` e
          mettici dentro i blocchi grigi che trovi già pronti. Quante volte dovrà
          essere ripetuto questo ciclo?
      grade1_artist_loops5_authored_hint: {}
      grade1_artist_loops6_authored_hint:
        grade1_artist_loops6_a: Questa sfida utilizza QUATTRO cicli, uno dopo l'altro!
        grade1_artist_loops6_b: |-
          Notice that every loop makes a stair pattern that travels in a different direction.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        grade1_artist_loops6_c: "I cicli dovrebbero fare questo:\n- Ciclo 1\n  - Destra\n
          \ - Giù\n  \n- Ciclo 2\n  - Destra\n  - Su\n\n- Ciclo 3\n  - Sinistra\n
          \ - Su\n\n- Ciclo 4\n  - Sinistra\n  - Giù"
      grade1_artist_loops7_authored_hint: {}
      grade1_artist_loops7a_authored_hint:
        artistLoopsK9_a: Questa sfida utilizza QUATTRO cicli, uno dopo l'altro!
        artistLoopsK9_b: |-
          Notice that every loop makes a stair pattern that travels in a different direction.

          ![](https://images.code.org/7d08d5514766c5c15074e90731991505-image-1466705649513.gif)
        artistLoopsK9_c: "I cicli dovrebbero fare questo:\n- Ciclo 1\n  - Destra\n
          \ - Giù\n  \n- Ciclo 2\n  - Destra\n  - Su\n\n- Ciclo 3\n  - Sinistra\n
          \ - Su\n\n- Ciclo 4\n  - Sinistra\n  - Giù"
      grade1_artist_loops7b_authored_hint:
        grade1_artist_loops7b_a: Quante volte devi ripetere la sequenza per completare
          la scala?
      grade1_artist_loops8_authored_hint: {}
      grade1_artist_loops9_authored_hint: {}
      grade1_artist_loopsFP_authored_hint: {}
      grade1_maze_sequence1_authored_hint:
        grade1_maze_sequence1_a: In questo programma manca un blocco. Riesci a capire
          quale?
      grade1_maze_sequence10_authored_hint:
        grade1_maze_sequence10_a: Se hai problemi, prova prima a scrivere i passaggi
          su un foglio di carta.
      grade1_maze_sequence2_authored_hint:
        grade1_maze_sequence2_a: Uno dei blocchi sposta l'uccellino nella direzione
          sbagliata. Riesci a capire qual è e a sostituirlo con il blocco corretto?
      grade1_maze_sequence3_authored_hint:
        grade1_maze_sequence3_a: Prova ad aggiungere un'istruzione alla volta finché
          non arrivi al maialino.
      grade1_maze_sequence5_authored_hint:
        K2.0_sequence_5: Il tuo programma dovrebbe avere tre blocchi di movimento.
      grade1_maze_sequence6_authored_hint:
        K2.0_sequence_6_a: Hai bisogno di aggiungere 1 blocco per far arrivare l'uccellino
          fino al maialino.
      grade1_maze_sequence7_authored_hint:
        grade1_maze_sequence7a: If you're stuck, try adding one block at a time until
          you solve the puzzle.
      grade1_maze_sequence8_authored_hint:
        grade1_maze_sequence8_a: Bloccato? Prova a tracciare con le dita il percorso
          che deve seguire l'uccellino.
        grade1_maze_sequence8_b: The extra blocks need to be added before the last
          ![](https://images.code.org/145dfc20c086bc8fc265de47f3cfe4b0-image-1467848177684.35.51
          PM.png )
      grade1_maze_sequence9_authored_hint:
        grade1_maze_sequence9_a: Se hai problemi, prova prima a scrivere i passaggi
          su un foglio di carta.
      grade1_maze_sequenceA_authored_hint:
        grade1_maze_sequence10_a: Se hai problemi, prova prima a scrivere i passaggi
          su un foglio di carta.
      grade1_maze_sequenceB_authored_hint:
        grade1_maze_sequenceB_a: Se hai problemi, prova prima a scrivere i passaggi
          su un foglio di carta.
      grade1_maze_sequenceC_authored_hint:
        grade1_maze_sequenceC_a: Se hai problemi, prova prima a scrivere i passaggi
          su un foglio di carta.
      grade2_CaringForNewPet_0_authored_hint:
        grade2_CaringForNewPet_0: Se l'uccellino non riesce a prendere il maialino,
          controlla che tutti e tre i blocchi siano collegati insieme, quindi clicca
          nuovamente su "Esegui".
      grade2_CaringForNewPet_1_authored_hint:
        2-3_Maze_1_a: Per usare un blocco `vai avanti`, trascinalo dalla cassetta
          degli attrezzi nell'area di lavoro e collegalo al blocco `quando si clicca
          su "Esegui"`.
      grade2_CaringForNewPet_11_authored_hint: {}
      grade2_CaringForNewPet_2courseC_maze_programming3_authored_hint:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          Per eliminare un blocco dal bel mezzo del programma, trascina da una parte tutti i blocchi sotto di lui.

          Trascina nella cassetta degli attrezzi il blocco che vuoi cancellare.

          Infine, rimetti al loro posto gli altri blocchi.
      grade2_CaringForNewPet_3_authored_hint:
        hint1: Puoi girare a destra o a sinistra dal punto di vista dell'uccellino.
          Se l'uccellino è rivolto verso destra, girare a destra significa dirigersi
          verso il basso.
        hint2: This path is a zig-zag. You need to move forward 3 times and turn 2
          times.
        hint3: Per seguire il percorso, vai avanti e gira da una parte, poi spostati
          di nuovo e gira nella direzione opposta. Per raggiungere il maiale, vai
          ancora una volta avanti.
      grade2_CaringForNewPet_3D_authored_hint: {}
      grade2_CaringForNewPet_4_authored_hint:
        2-3_Maze_6_a: Ci sono due modi per risolvere questo esercizio!
      grade2_CaringForNewPet_5_authored_hint:
        grade2_CaringForNewPet_5_a: If you can't quite see what you need to do, try
          saying the steps that your bird will take out loud one-by-one and see if
          they match the blocks in the workspace.
      grade2_CaringForNewPet_6_authored_hint:
        grade2_CaringForNewPet_6_a: You don't have to code the whole solution at once!  Try
          running the code as you go to make sure it works at each step.
      grade2_CaringForNewPet_7D_authored_hint:
        grade2_CaringForNewPet_7D_a: Non dimenticare di usare il pulsante "Fai un
          passo" che esegue un blocco per volta permettendoti di notare più facilmente
          gli errori.
      grade2_MakeDogTag_1_authored_hint:
        2-3_Artist_1_new_a: Se usi il blocco `vai avanti di 100 pixel`, disegnerò
          automaticamente una linea.
        2-3_Artist_1_new_b: Problemi a girare? Utilizza il blocco `gira a destra di
          90 gradi`.
      grade2_MakeDogTag_2_authored_hint:
        2-3_Artist_2_new_a: To create this window, just draw a square with 100 pixel
          sides.
      grade2_MakeDogTag_3_authored_hint:
        2-3_Artist_4_a: Per finire il razzo, basta disegnare il triangolo in cima!
      grade2_MakeDogTag_4_authored_hint: {}
      grade2_MakeDogTag_5_authored_hint:
        grade2_MakeDogTag_5a: L'artista è già rivolto verso la direzione corretta
          per disegnare la prima linea.
        grade2_MakeDogTag_5b: Questo rombo è semplicemente un quadrato ruotato su
          uno spigolo.
        grade2_MakeDogTag_5c: Dal momento che questo rombo è anche un quadrato, controlla
          di girare di 90 gradi ad ogni angolo.
      grade2_MakeDogTag_6_authored_hint:
        grade2_MakeDogTag_6a: Gli angoli sono di 45 o 90 gradi.
        grade2_MakeDogTag_6b: |-
          - Al primo passo tutto procede bene?
          - E al secondo?
          - Dov'è che qualcosa comincia a non funzionare?
      grade2_MakeDogTag_7_authored_hint:
        2-3_Artist_11_a: The exterior angles on this triangle are 120 degrees each.
      grade2_MakeDogTag_9_authored_hint:
        2-3_Artist_Loops_New_11_a: |-
          Remember that the code from the last puzzle was:

          ![](https://images.code.org/e5c7492f509dd41efe2888c7e7895c28-image-1461177002636.29.02.png)
        2-3_Artist_Loops_New_11_b: Devi aggiungere Il blocco `gira a sinistra di 30
          gradi` <b>dopo</b> le altre istruzioni all'interno del ciclo.
      grade2_MakeDogTag_BFP_authored_hint: {}
      grade2_PuppyLoops_10_authored_hint:
        2-3_Artist_Debugging_8_a: |-
          Quante volte viene ripetuta la figura?<br>
          Invece, quante volte <i>dovrebbe</i> essere ripetuta?<br>
          Quindi, come devi correggere il blocco `ripeti ... volte`?
      grade2_PuppyLoops_3_authored_hint:
        hint1: This puzzle is very similar to the last one.
        hint2: Use a `repeat 5 times` block to create the loop.
        hint3: Place a `move forward` block inside the `repeat block`.
      grade2_PuppyLoops_5_authored_hint:
        hint1: The best solution uses two `move forward` commands and one loop.
      grade2_PuppyLoops_6_authored_hint:
        2-3_Maze_16_a: Se fai fatica a capire lo schema che si ripete, prova prima
          a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca di vedere
          quali sono le parti che si ripetono per inserirle nel blocco `ripeti ...
          volte`.
        2-3_Maze_16_b: |-
          Per inserire più blocchi all'interno di un ciclo `ripeti ... volte`, trascina un blocco `ripeti ... volte` dalla cassetta degli attrezzi all'area di lavoro, quindi trascina l'insieme di blocchi che devono ripetersi all'interno del ciclo `ripeti ... volte`.<br>
          <br>
          Controlla che il tutto sia attaccato al blocco `quando si clicca su "Esegui"`.
      grade2_PuppyLoops_7_authored_hint:
        2-3_Maze_Loops_17_a: Se fai fatica a capire lo schema che si ripete, prova
          prima a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca
          di vedere quali sono le parti che si ripetono per inserirle nel blocco `ripeti
          ... volte`.
        2-3_Maze_Loops_17_b: Non ti ricordi più quali erano i blocchi iniziali proposti?
          Clicca `Ripristina` per ricominciare!
      grade2_PuppyLoops_8_authored_hint:
        2-3_Artist_Debugging_2_a: Ogni baffo è lungo 75 pixel.
      grade2_PuppyLoops_9_authored_hint:
        2-3_Artist_Debugging_7_a: Prova a far tornare indietro l'artista dopo aver
          disegnato la prima linea.
      grade2_collector_2_authored_hint:
        hint1: You can use four `move forward` blocks or use the `repeat 4 times`
          block to make your program shorter.
      grade2_collector_A_authored_hint: {}
      grade2_collector_A_2018_authored_hint: {}
      grade2_maze_debuggingFP_authored_hint: {}
      grade2_maze_intro4_authored_hint:
        hint_1: Connect a "move forward" block to the bottom of the program.
      grade2_playlab_project_6_authored_hint:
        idea1: |-
          *Serve un idea?*

          **Chi c'è?** Fai comparire dei personaggi casuali, così nessuno potrà sapere quale sarà il successivo.

          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: |-
          *Serve un idea?*

          **All'avventura!** - Cambia lo sfondo e fai raccontare ai personaggi dove si trovano.

          ![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)
        idea3: |-
          *Serve un idea?*

          **Flipper** - Fai in modo di muovere un personaggio con le frecce (usa gli eventi `quando si preme sulla freccia verso l'alto` e `quando si preme sulla freccia verso il basso`), quindi riproduci un suono casuale quando il personaggio sbatte contro gli altri.
      grade2_puppy_loops2_authored_hint:
        hint1: You can solve this puzzle with just three blocks, including `when run`.
        hint2: Try putting the `move forward` block inside of a `repeat` block to
          create a loop.
        hint3: You need to repeat the `move forward` command 5 times to solve this
          puzzle.
      grade2_puppy_loops3_authored_hint:
        hint1: This puzzle is very similar to the last one.
        hint2: Use a `repeat 5 times` block to create the loop.
        hint3: Place a `move forward` block inside the `repeat block`.
      grade2_puppy_loops4_authored_hint:
        hint1: Not all command blocks should be repeated.
        hint2: Use two `repeat` blocks set to different numbers.
        hint3: "`Turn right` once between the two loops."
      grade2_puppy_loops5_authored_hint:
        hint1: The best solution uses two `move forward` commands and one loop.
      grade2_puppy_loops6_authored_hint:
        2-3_Maze_16_a: Se fai fatica a capire lo schema che si ripete, prova prima
          a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca di vedere
          quali sono le parti che si ripetono per inserirle nel blocco `ripeti ...
          volte`.
        2-3_Maze_16_b: |-
          Per inserire più blocchi all'interno di un ciclo `ripeti ... volte`, trascina un blocco `ripeti ... volte` dalla cassetta degli attrezzi all'area di lavoro, quindi trascina l'insieme di blocchi che devono ripetersi all'interno del ciclo `ripeti ... volte`.<br>
          <br>
          Controlla che il tutto sia attaccato al blocco `quando si clicca su "Esegui"`.
      grade2_puppy_loops7_authored_hint:
        2-3_Maze_Loops_17_a: Se fai fatica a capire lo schema che si ripete, prova
          prima a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca
          di vedere quali sono le parti che si ripetono per inserirle nel blocco `ripeti
          ... volte`.
      grade3_ConditionalsElse_4_authored_hint:
        remember_quantum: "**Attenzione:** Ogni volta che esegui il programma ciò
          che è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare
          il blocco condizionale `se/altrimenti`."
      grade3_ConditionalsElse_5_authored_hint:
        remember_quantum: "**Attenzione:** Ogni volta che esegui il programma ciò
          che è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare
          il blocco condizionale `se/altrimenti`."
      grade3_ConditionalsElse_TeacherIDo_authored_hint:
        remember_quantum: "**Attenzione:** Ogni volta che esegui il programma ciò
          che è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare
          il blocco condizionale `se/altrimenti`."
      grade3_Conditionals_10 BAD_authored_hint:
        4-5_Bee_Nested_Loops_Rows_a: Considera che l'ape deve percorrere un lungo
          rettangolo, girando a sinistra al termine di ogni lato.
      grade3_Conditionals_11_authored_hint:
        2-3_Bee_Conditionals_14_a: Fai fatica a trovare la soluzione? Prova a trattare
          il fiore rosso come se fosse viola!
        2-3_Bee_Conditionals_14_b: Se consideri il fiore rosso come se fosse viola,
          allora puoi usare un ulteriore <i>ciclo</i> `ripeti ... volte`.
        2-3_Bee_Conditionals_14_c: "Try breaking this up into two separate chunks:
          \ \n\n![](https://images.code.org/670ac0889a8f523865ff4099b4c54844-image-1463445460440.36.42.png)\n\n1)
          Gather nectar 3 times\n  - Move forward 5 times\n  - Check to see if nectar,
          if so: get it\n  - Turn left\n  \n2) Make honey \n  - Move forward one time\n
          \ - Make two honey"
      grade3_Conditionals_12_authored_hint:
        2-3_Bee_Conditionals_15_a: 'Ricorda: i fiori viola possono avere una quantità
          di nettare pari a 0 oppure 1 e questa quantità può cambiare ogni volta che
          esegui il programma.'
      grade3_Conditionals_2_authored_hint:
        2-3_Bee_Conditionals_3_a: Ottieni un programma più corto se usi un <i>ciclo</i>
          per ogni tratto in cui vai avanti, un altro <i>ciclo</i> per raccogliere
          il nettare ed ancora un altro <i>ciclo</i> per produrre il miele.
      grade3_Conditionals_4_authored_hint:
        2-3_Bee_Conditionals_6_a: 'Fai attenzione: il nettare dei fiori viola (0 oppure
          1) può cambiare ogni volta che esegui il programma!'
      grade3_Conditionals_TeacherIDo_authored_hint:
        2-3_Bee_Conditionals_6_a: 'Fai attenzione: il nettare dei fiori viola (0 oppure
          1) può cambiare ogni volta che esegui il programma!'
      grade3_Debugging_1_authored_hint:
        2-3_Bee_Debugging_1_a: Dopo aver trovato e risolto l'errore, riesci a semplificare
          il codice usando un <i>ciclo</i> `ripeti ... volte`?
      grade3_Debugging_10_authored_hint:
        grade3_Debugging_10_a: |-
          Start by looking at just the first loop.

          What does it do?

          What is it supposed to do?

          What does that tell you?
        grade3_Debugging_10_b: Once you have the first loop the way you want it, what
          is left over in your code?
        grade3_Debugging_10_c: |-
          Try wrapping the leftover loop around the rest of your completed code.  Does is work now?

          If not, what is still going wrong?
      grade3_Debugging_11_authored_hint:
        grade3_Debugging_11_a: |-
          Try running through the code using the "Step" button.  Is everything good at the first step?

          How about the second?

          Where do things go wrong?
        grade3_Debugging_11_b: It looks like all of the right steps are here, you
          just need more of them.  How can you repeat the `get nectar` and `make honey`
          actions multiple times?
      grade3_Debugging_2_authored_hint:
        grade3_Debugging_2_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        grade3_Debugging_2_b: Do you see any patterns that could be made more simple
          using a `repeat` loop?
      grade3_Debugging_3_authored_hint:
        grade3_Debugging_3_a: |-
          Use the "Step" button to see if everything is right at the first step.

          How about the second?

          Where does it go wrong?
        grade3_Debugging_3_b: Do you see a pattern?  Try using nested loops to solve
          this puzzle.
      grade3_Debugging_4_authored_hint:
        grade3_Debugging_4_a: Is there any place where the bee does something that
          doesn't make sense? What happens when you change those blocks?
        grade3_Debugging_4_b: Try simplifying the code using nested loops.
      grade3_Debugging_8_authored_hint:
        grade3_Debugging_8_a: "Try using the debugging process a couple of times in
          a row. \n\nWhat causes the first problem?\n\nOnce that problem is fixed,
          what goes wrong?"
        grade3_Debugging_8_b: "If you're having a hard time figuring out how to make
          the stair step pattern, try tracing it with your finger and saying the commands
          out loud. \n\nDon't forget to point out the direction of the turns!"
      grade3_Debugging_TeacherIDo_authored_hint:
        2-3_Bee_Debugging_4_a: In quale punto del programma l'ape fa qualcosa di sbagliato?
          Correggi quel blocco.
      grade3_Loops_10_authored_hint:
        2-3_Bee_Loops_4_a: Alla fine dovresti avere cinque blocchi nel <i>ciclo</i>
          `ripeti ... volte`.
      grade3_Loops_11_authored_hint:
        2-3_Bee_Loops_5_a: Se non riesci subito a capire come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di capire come combinarli in un <i>ciclo</i> `ripeti ... volte`.
      grade3_Loops_12_authored_hint:
        2-3_Bee_Loops_6_a: Se non riesci ad immaginare quali blocchi inserire nel
          <i>ciclo</i>, prova prima a risolvere l'esercizio senza il blocco `ripeti
          ... volte` e poi cerca di vedere quali sono le parti che si ripetono.
        2-3_Bee_Loops_6_b: Alla fine dovresti avere sei blocchi nel <i>ciclo</i> `ripeti
          ... volte.
      grade3_Loops_4_authored_hint:
        2-3_Bee_Loops_3B_a: Avrai bisogno di due diversi <i>cicli</i> `ripeti ...
          volte`, uno dopo l'altro.
      grade3_Loops_5_authored_hint:
        2-3_Bee_Loops_7_a: Girati prima di iniziare a muoverti.
        2-3_Bee_Loops_7_b: Se non riesci a capire subito come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di vedere quali sono le parti che si ripetono per inserirle nel blocco
          `ripeti ... volte`.
      grade3_Loops_6_authored_hint:
        2-3_Bee_Loops_4A_a: Girati prima di iniziare a muoverti.
        2-3_Bee_Loops_4A_b: Il programma termina con alcuni blocchi fuori dal <i>ciclo</i>
          principale.
        2-3_Bee_Loops_4A_c: Se non riesci subito a capire come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di capire come combinarli in un <i>ciclo</i> `ripeti ... volte`.
      grade3_Loops_8_authored_hint:
        2-3_Bee_Loops_2_a: Alla fine dovresti avere quattro blocchi all'interno del
          <i>ciclo</i> `ripeti ... volte`.
      grade3_Loops_9_authored_hint:
        2-3_Bee_Loops_3_a: Dovresti avere sei blocchi all'interno del <i>cilco</i>
          `ripeti ... volte`.
      grade3_RunningFarm_1_authored_hint:
        grade3_RunningFarm_1_a: Saranno necessari 5 controlli, usa un ciclo `ripeti
          ... volte`.
        grade3_RunningFarm_1_b: Se non usi un blocco 'se c'è una pannocchia' rischi
          di tentare di raccogliere qualcosa che non c'è!
      grade3_RunningFarm_10_authored_hint:
        grade3_RunningFarm_10_a: This puzzle uses almost the exact same code as the
          last level, except you only need to repeat 4 times.
      grade3_RunningFarm_11a_authored_hint:
        grade3_RunningFarm_11a_a: You shouldn't need the `while path ahead` loop this
          time.
      grade3_RunningFarm_2_authored_hint:
        grade3_RunningFarm_2_a: Il modo migliore per risolvere questo esercizio, è
          di annidare le istruzioni `se` una dentro l'altra.
        grade3_RunningFarm_2_b: In questo esercizio, dovresti usare un'istruzione
          `se/altrimenti` e una semplice istruzione `se`.
      grade3_RunningFarm_3_authored_hint:
        grade3_RunningFarm_3_a: |-
          Per raccogliere tutto, prova ad annidare su tre livelli le istruzioni `se`.

          Questo significa che devi mettere un'istruzione `se` all'interno un'altra e poi mettere una terza istruzione `se` all'interno della seconda.
        grade3_RunningFarm_3_b: In questo esercizio, dovresti usare due istruzioni
          `se/altrimenti` e una semplice istruzione `se`.
      grade3_RunningFarm_4_authored_hint:
        grade3_RunningFarm_4_a: |-
          Nessuno sa quanti cespi di lattuga crescono da ogni pianta.

          Usa il ciclo `mentre c'è la lattuga` per continuare a raccogliere mentre ci sono ancora cespi disponibili.
      grade3_RunningFarm_5_authored_hint:
        grade3_RunningFarm_5_a: You will need to check for each type of crop that
          the farmer can pick.  Try using two `if/else` statements and one  `if` block.
      grade3_RunningFarm_6_authored_hint:
        grade3_RunningFarm_6_a: Use a `while path ahead` loop to move the farmer down
          each piece of the spiral.
        grade3_RunningFarm_6_b: You only need to check for corn during most of the
          harvest.  Just pick one pumpkin at the very end of your program.
      grade3_RunningFarm_7_authored_hint:
        grade3_RunningFarm_7_a: |-
          Nota che il percorso più facile per raggiungere tutte le colture è ancora una spirale.

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        grade3_RunningFarm_7_b: Try using `when path ahead` to keep the farmer moving
          the right number of steps.
        grade3_RunningFarm_7_c: 'Use nested `if` statements and `while there is` loops
          to check each space for corn and lettuce, then pick only a single pumpkin
          at the end. '
      grade3_bee_Conditionals_new4_authored_hint:
        grade3_bee_Conditionals_new4_a: Don't forget that you can use loops for shorter
          code!
      grade3_bee_conditionals_new1a_authored_hint:
        grade3_bee_conditionals_new1a_a: Be sure to use an `if` statement to check
          each space to see if it has a flower or nothing.
      grade3_bee_conditionals_new2a_authored_hint:
        grade3_bee_conditionals_new2a_a: Puoi sempre trattare ogni casella come se
          avesse sopra una nuvola, anche se in questo caso riesci a vedere tutto il
          percorso.
        grade3_bee_conditionals_new2a_b: 'Use an `if` statement inside your loop to
          check each space. '
      grade3_bee_conditionals_new3a_authored_hint:
        grade3_bee_conditionals_new3a_a: In this puzzle, you know that each square
          has either a flower or a honeycomb.  That means you can repeat your `if/else`
          conditional at each square.
      grade3_bee_conditionals_quantum1_authored_hint:
        grade3_bee_conditionals_quantum1_a: You will need to use an `if` block to
          check to see if there is a flower beneath the cloud before you try to get
          nectar.
      grade3_bee_conditionals_quantum2_authored_hint:
        grade3_bee_conditionals_quantum2_a: Qualche volta c'è un fiore, altre volte
          no. Se vuoi che il tuo programma funzioni in entrambi i casi, assicurati
          di usare un blocco `se`.
      grade3_bee_conditionals_quantum3_authored_hint:
        grade3_bee_conditionals_quantum3: Assicurati di usare un'istruzione condizionale
          `se` per verificare sotto ogni nuvola se c'è un favo.
      grade3_bee_conditionals_quantum4_authored_hint:
        remember_quantum: "**Ricorda:** Ogni volta che esegui il programma ciò che
          è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare il
          blocco condizionale `se/altrimenti`."
      grade3_bee_conditionals_quantum5_authored_hint:
        remember_quantum: "**Attenzione:** Ogni volta che esegui il programma ciò
          che è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare
          il blocco condizionale `se/altrimenti`."
        grade3_bee_conditionals_quantum5_a: This puzzle is tricky, because you can't
          check blank squares, nectar *and* honey with a single conditional.
      grade3_maze_loops1_authored_hint:
        grade3_maze_loops1_a: Try using the "Step" button to find errors.
      grade3_maze_loops2_authored_hint:
        grade3_maze_loops2_a: |-
          Try using this path through the maze.

          ![](https://images.code.org/6a8b4b97a8eef813d8a827b0b7b2d36b-image-1480446509692.05.22.png)
        grade3_maze_loops2_b: Se fai fatica a capire lo schema che si ripete, prova
          prima a risolvere l'esercizio usando tutti i singoli blocchi, poi cerca
          di vedere quali sono le parti che si ripetono per inserirle nel blocco `ripeti
          ... volte`.
        grade3_maze_loops2_c: Try using one `repeat` loop inside of another to cut
          down on the amount of code you need.
      grade3_maze_loops2a_authored_hint:
        grade3_maze_loops2a_a: To solve this puzzle, you will need to "nest" one `repeat`
          loop inside of another `repeat` loop.
      grade3_maze_loops3_authored_hint:
        2-3_Maze_Loops_19_a: If you are stuck, try writing out the code out on paper
          without loops first and look for patterns.
        2-3_Maze_Loops_19_b: Nesting `repeat` loops can help decrease the number of
          blocks used.
        2-3_Maze_Loops_19_c: It will take two sets of nested `repeat` loops to solve
          this puzzle.
      grade3_maze_loops4_authored_hint:
        2-3_Maze_Loops_20_a: Look for a stair-step pattern in this maze to find where
          a nested loop can be used.
      grade3_maze_loops5_authored_hint:
        2-3_Maze_Loops_21_a: Se fai fatica ad individuare il percorso a gradini, prova
          a coprire con le dita i tratti bloccati dalle piante carnivore.
      grade3_robotFarmer_ConditionalsIntro_10a_authored_hint: {}
      grade3_robotFarmer_ConditionalsIntro_11a_authored_hint: {}
      grade3_robotFarmer_ConditionalsIntro_5_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_5a: Prova ad inserire un ciclo `mentre`
          all'interno di un ciclo `ripeti ... volte`.
      grade3_robotFarmer_ConditionalsIntro_7_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_7_a: Assicurati di usare il ciclo `mentre`
          per riempire ogni buca indipendentemente dal numero di palate che servono.
        grade3_robotFarmer_ConditionalsIntro_7_b: Nota che la contadina deve andare
          avanti e girare diverse volte in questo schema a scalinata.
      grade3_robotFarmer_ConditionalsIntro_8_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_8_a: Il blocco `mentre c'è strada in
          avanti` ti permette di andare avanti, anche se non sai quante caselle devi
          percorrere.
      grade3_robotFarmer_ConditionalsIntro_9_authored_hint:
        grade3_robotFarmer_ConditionalsIntro_9_a: Avrai bisogno di usare più di un
          ciclo `mentre`.
        grade3_robotFarmer_ConditionalsIntro_9_b: Ogni buca è alla fine di un tratto
          di percorso, quindi usa il blocco `mentre c'è strada in avanti` prima di
          usare il ciclo `mentre c'è una buca`.
        grade3_robotFarmer_ConditionalsIntro_9_c: Nota che devi ripetere sei volte
          la sequenza `mentre c'è strada in avanti` + `quando c'è una buca`.
      grade4_arist_nested_loop_polygons1_authored_hint:
        4-5_Nested_Loops_7_a: |-
          La figura deve essere ripetuta 10 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 10?
      grade4_arist_nested_loop_polygons2_authored_hint:
        4-5_Nested_Loops_8_a: |-
          La figura deve essere ripetuta 6 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 6?
      grade4_arist_nested_loop_triangles2_authored_hint: {}
      grade4_arist_nested_loop_triangles3_authored_hint:
        4-5_Nested_Loops_6_a: |-
          Non dimenticarti di girare dopo il ciclo interno.<br>
          Devi distribuire 6 triangoli su 360 gradi.<br>
          <b>360 / 6 = ?</b>
      grade4_arist_nested_loop_triangles6_authored_hint:
        4-5_Nested_Loops_12_a: |-
          La figura deve essere ripetuta 36 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 36?
      grade4_artist_functions1_authored_hint:
        2-3_Artist_Functions_1_a: Le lenti quadrate hanno i lati da 100 pixel, questo
          significa che dovrai muoverti in avanti di 175 pixel prima di disegnare
          la seconda lente.
        2-3_Artist_Functions_1_b: Tieni conto che puoi sempre riscrivere su delle
          linee già tracciate.
      grade4_artist_functions2_authored_hint:
        2-3_Artist_Functions_2_a: |-
          Il programma deve:<br>
          - usare la funzione<br>
          - andare avanti di 100 + 75 pixel<br>
          - usare la funzione
      grade4_artist_functions2a_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks,
          create a `draw triangle` function and call that multiple times.
      grade4_artist_functions3a_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks,
          create a `draw triangle` function and call that multiple times.
      grade4_artist_functions3b_authored_hint:
        grade4_artist_functions2a_a: To get around using multiple `move forward` blocks,
          create a `draw hexagon` function and call that multiple times.
      grade4_artist_functionsChallenge0_authored_hint:
        grade4_artist_functionsChallenge0_a: |-
          Start by making a function for a square, then try making a function for a line of squares.

          How would you use the `draw a line of squares` function to make this image?
        grade4_artist_functionsChallenge0_b: After your first line of squares, you
          need to move the artist down and back before you start your second line
          of squares.
        grade4_artist_functionsChallenge0_c: You should move the artist back a different
          number of pixels for even lines than for odd ones.
      grade4_artist_functions_challenge_authored_hint:
        Course_4_SCF_1_a: Ogni esagono ha il lato di 40 pixel.
        Course_4_SCF_1_b: C'è un salto di 120 pixel tra un esagono e il successivo
          della stessa fila.
        Course_4_SCF_1_c: Prima di disegnare la seconda fila di esagoni, devi girare
          a destra di 60 gradi e saltare avanti di 40 pixel. Poi devi girare l'artista
          in senso inverso e saltare indietro di 320 pixel.
        Course_4_SCF_1_d: Prima di disegnare la terza fila di esagoni, devi girare
          a destra di 60 gradi e saltare avanti di 40 pixel. Poi devi girare l'artista
          in senso inverso e saltare indietro di 440 pixel (120 pixel in più della
          volta precedente).
        Course_4_SCF_1_e: <b>Soluzione:</b> Se vuoi, <a href="https://studio.code.org/c/159884109"
          target="_blank">clicca qui</a> e poi su "Come funziona" per vedere la soluzione.
      grade4_artist_functions_challenge2_authored_hint:
        Course_4_SCF_1_a: Ogni esagono ha il lato di 40 pixel.
        Course_4_SCF_1_b: C'è un salto di 120 pixel tra un esagono e il successivo
          della stessa fila.
        Course_4_SCF_1_c: Prima di disegnare la seconda fila di esagoni, devi girare
          a destra di 60 gradi e saltare avanti di 40 pixel. Poi devi girare l'artista
          in senso inverso e saltare indietro di 320 pixel.
        Course_4_SCF_1_d: Prima di disegnare la terza fila di esagoni, devi girare
          a destra di 60 gradi e saltare avanti di 40 pixel. Poi devi girare l'artista
          in senso inverso e saltare indietro di 440 pixel (120 pixel in più della
          volta precedente).
        Course_4_SCF_1_e: <b>Soluzione:</b> Se vuoi, <a href="https://studio.code.org/c/159884109"
          target="_blank">clicca qui</a> e poi su "Come funziona" per vedere la soluzione.
      grade4_artist_functions_stars0_authored_hint:
        grade4_artist_functions_stars0_a: |-
          To solve this puzzle, you just need to add a  loop that repeats the starter code 8 times.

          If you can't remember what the starter code was, click "start over" in the upper right corner of the workspace.
      grade4_artist_functions_stars1_authored_hint:
        grade4_artist_functions_stars1_a: Try using a function!
      grade4_artist_functions_stars2_authored_hint:
        grade4_artist_functions_stars2_a: Don't give up!  Remember what you have been
          learning.
        grade4_artist_functions_stars2_b: Functions make it easy to call saved code
          at any time, not just from inside a loop!
      grade4_artist_functions_stars3_authored_hint:
        hint1: Don't give up!
      grade4_artist_functions_windows0_authored_hint:
        grade4_artist_functions_windows0_a: Focus only on making one window for now.  We'll
          create a function for it in the next puzzle.
        grade4_artist_functions_windows0_b: Try using nested loops, where the inner
          loop makes the square and the outer loop rotates the square four times.
      grade4_artist_functions_windows2_authored_hint:
        grade4_artist_functions_windows2_a: Try creating your function first then
          adding in windows one at a time.
        grade4_artist_functions_windows2_b: You shouldn't need to add any extra repeat
          loops.  Just jump the artist 100 pixels forward for each top window, and
          150 pixels down to get the bottom windows.
      grade4_artist_nestedLoops_challenge2_authored_hint:
        Course_4_Artist_11_a: Nel primo ciclo, per disegnare il mezzo esagono, l'artista
          percorre tratti di <b>30 pixel</b> invece di 40 e gira a destra di <b>60
          gradi</b>.
        Course_4_Artist_11_b: Nel secondo ciclo, per disegnare i due lati del triangolo,
          l'artista percorre tratti di <b>80 pixel</b> e gira a destra di <b>120 gradi</b>.
      grade4_artist_nested_loop_polygons1_authored_hint:
        4-5_Nested_Loops_7_a: |-
          La figura deve essere ripetuta 10 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 10?
      grade4_artist_nested_loop_polygons2_authored_hint:
        4-5_Nested_Loops_8_a: |-
          La figura deve essere ripetuta 6 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 6?
      grade4_artist_nested_loop_triangles2_authored_hint: {}
      grade4_artist_nested_loop_triangles3_authored_hint:
        4-5_Nested_Loops_6_a: |-
          Don't forget to make a turn after your inner loop.

          You'll be looping 6 triangles over 360 degrees.

          **6 x ? = 360**
      grade4_artist_nested_loop_triangles6_authored_hint:
        4-5_Nested_Loops_12_a: |-
          La figura deve essere ripetuta 36 volte nei 360 gradi di un giro.<br>
          Quanto fa 360 diviso 36?
      grade4_bee_conditionals_new1a_authored_hint:
        grade4_bee_conditionals_new1a_a: An `if` block will help you out in this puzzle.
      grade4_bee_conditionals_new2_authored_hint:
        grade4_bee_conditionals_new2_a: 'The flowers follow a rectangular path.  You
          can trace that rectangle using `while path ahead` even with a different
          number of squares per side. '
        grade4_bee_conditionals_new2_b: You can check every square for a flower using
          the `if` block, even if you already know there's not one there.
      grade4_bee_conditionals_new3b_authored_hint:
        grade4_bee_conditionals_new3b_a: An `if/else` statement could really help
          you out here.
      grade4_bee_conditionals_quantum4_authored_hint:
        remember_quantum: "**Attenzione:** Ogni volta che esegui il programma ciò
          che è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare
          il blocco condizionale `se/altrimenti`."
      grade4_bee_conditionals_quantum5_authored_hint:
        remember_quantum: "**Attenzione:** Ogni volta che esegui il programma ciò
          che è nascosto può cambiare: per risolvere l'esercizio, devi quindi usare
          il blocco condizionale `se/altrimenti`."
      grade4_bee_functions1_authored_hint:
        grade4_bee_functions1_a: There is more than one right answer to this puzzle.
      grade4_bee_functions10_authored_hint:
        grade4_bee_functions10_a: You can use the exact same function for this puzzle
          as you did in the last puzzle.  All you need to do is create a function
          that collects all of the nectar when you get to each flower.
      grade4_bee_functions2_authored_hint:
        grade4_bee_functions2_a: The function has been written for you, but you will
          need to call it at each flower.
      grade4_bee_functions3_authored_hint:
        grade4_bee_functions3_a: 'Your function for this puzzle only needs to collect
          nectar, it shouldn''t have any `move forward` or `turn` blocks in it. '
      grade4_bee_functions4_authored_hint:
        grade4_bee_functions4_a: Your function will travel down the side paths and
          return the bee back to the main road.  You don't need to add that part to
          your program.
      grade4_bee_functions6_authored_hint:
        grade4_bee_functions6_a: Edit the function so that it solves the puzzle without
          having to change the main program.
        grade4_bee_functions6_b: "Your function should make the bee: \n- turn\n- move
          forward\n- collect all of the nectar\n- turn around\n- move back to the
          main path\n- turn back to the direction that the bee started from"
      grade4_bee_functions7_authored_hint:
        2-3_Bee_Functions_8_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!

          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)
      grade4_bee_functions8_authored_hint:
        2-3_Bee_Functions_8_a: |-
          Se ti sembra troppo difficile, prova a creare la funzione poco per volta.<br>
          Aggiungi qualche blocco e prova a vedere cosa fa. Poi aggiungine altri e controlla di nuovo. Velocemente arriverai alla soluzione!
        2-3_Bee_Functions_8_b: |-
          Ricordati di inserire il codice all'interno del blocco verde della funzione.<br>

          ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        2-3_Bee_Functions_8_c: This function should turn the bee to head him down
          the path, collect the nectar, make the honey, then turn the bee around and
          bring him back.
      grade4_bee_functions9_authored_hint:
        grade4_bee_functions9_a: Your function will only need to collect nectar...
          but this time, you will need to use a `while` loop instead of a `repeat`
          loop.
        grade4_bee_functions9_b: Use `while nectar > 0` to make sure you get all of
          the nectar.
      grade4_bee_nestedLoops1_authored_hint:
        grade4_bee_nestedLoops1_a: If you don't understand how to use nested loops
          here, try writing out the instructions step by step on a piece of paper.  Circle
          the patterns that you see.
      grade4_bee_nestedLoops2_authored_hint:
        grade4_bee_nestedLoops2_a: You will need to repeat `get nectar` inside of
          another `repeat` that also has the `move forward` block inside of it.
        grade4_bee_nestedLoops2_b: You will need to use all three of the available
          `repeat` blocks to solve this puzzle.
        grade4_bee_nestedLoops2_c: |-
          Nest your blocks three deep, like this:

          - repeat 3
          - repeat 3
          - move forward
          - repeat 12
          - get nectar
          - turn right
      grade4_bee_nestedLoops2a_authored_hint:
        grade4_bee_nestedLoops2a_a: Try using nested `repeat` loops to solve this
          puzzle.
      grade4_bee_nestedLoops4_authored_hint:
        grade4_bee_nestedLoops4_a: Try building your code line by line and see if
          you can spot the places where a repeat will make the code shorter!
        grade4_bee_nestedLoops4_b: |-
          You will need a nested loop to move forward and get nectar, but only a single loop to collect honey at the end.

          Altogether, you should be using 3 loops.
      grade4_bee_nestedLoops5_authored_hint:
        grade4_bee_nestedLoops5_a: You will need 4 repeat blocks!
      grade4_review_artist1_authored_hint:
        2-3_Artist_1_new_a: Se usi il blocco `vai avanti di 100 pixel`, disegnerò
          automaticamente una linea.
        2-3_Artist_1_new_b: Problemi a girare? Utilizza il blocco `gira a destra di
          90 gradi`.
      grade4_review_artist2_authored_hint:
        2-3_Artist_6_a: 'Per gli angoli piccoli, dovete girare intorno * più * volte.   '
        2-3_Artist_6_b: Visto che sono già rivolto verso destra, disegnare il triangolo
          è più facile se inizi andando avanti e poi giri a sinistra.
        2-3_Artist_6_c: Ogni lato del triangolo è la stessa lunghezza di ciascun lato
          del quadrato... 100 pixel!
      grade4_review_bee1_authored_hint:
        2-3_Bee_Loops_3B_a: Avrai bisogno di due diversi <i>cicli</i> `ripeti ...
          volte`, uno dopo l'altro.
      grade4_review_bee2_authored_hint:
        2-3_Bee_Loops_3_a: Dovresti avere sei blocchi all'interno del <i>cilco</i>
          `ripeti ... volte`.
      grade4_review_bee3_authored_hint:
        2-3_Bee_Loops_4_a: Alla fine dovresti avere cinque blocchi nel <i>ciclo</i>
          `ripeti ... volte`.
      grade5_artist_binary10_authored_hint:
        Course_4_Artist_Binary_Free_Play_2b_a: |-
          Clicca su "Esegui" per vedere cosa disegna il codice che trovi già pronto.<br>
          La figura può essere scomposta in 2 parti: superiore e inferiore, ognuna di 8 righe, che hanno un andamento simmetrico. Per ogni parte serve un <i>ciclo con contatore</i>, il primo che conta "a salire", il secondo "a scendere".
        Course_4_Artist_Binary_Free_Play_2b_b: In ognuna delle parti, la metà di sinistra
          e quella di destra, entrambe di 8 colonne, hanno anch'esse un andamento
          simmetrico. Per ognuna di tali metà servono due cicli `ripeti con counter`,
          uno per disegnare i quadrati bianchi ed uno per quelli neri, in cui il numero
          di ripetizioni dipende dal valore della variabile `counter` (<i>contatore</i>).
        Course_4_Artist_Binary_Free_Play_2b_c: Vuoi sapere come è stata realizzata
          la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/146760662"
          target="_blank">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          **Solution:**
          ![solution](https://images.code.org/866a92e042a546de3afcf462a8b5c695-image-1444438735003.58.28.png)
      grade5_artist_for_loops1_authored_hint:
        grade5_artist_for_loops1_a: |-
          If you use this `for` loop, it will run just like a `repeat 3 times` loop.

          ![](https://images.code.org/585d2e24f3021ac2561aec6e96dde430-image-1475906135993.54.11.png)
      grade5_artist_for_loops10_authored_hint:
        Course_4_Artist_For_Loops_Challenge_a: Il poligono più grande ha 19 lati.
        Course_4_Artist_For_Loops_Challenge_b: Ogni poligono è incompleto, con un
          lato in meno di quanti ne dovrebbe avere.
      grade5_artist_for_loops1b_authored_hint:
        grade5_artist_for_loops1b_a: |-
          Can you draw something like this:

          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      grade5_artist_for_loops2_authored_hint:
        grade5_artist_for_loops2_a: |-
          Use `counter` for the length of your triangles inside your `repeat` loop.

          ![](https://images.code.org/5e9465321a0b7a4d791848a79f3e6715-image-1475908305872.31.26.png)
      grade5_artist_for_loops3_authored_hint:
        Course_4_Artist_For_Loops_3_a: |-
          To have the `for` loop drive your movement, make sure that you're using `counter` as your distance in the `move forward` block.

          ![](https://images.code.org/15e87fc7fe408cbf1b63e0e8e69b7ffe-image-1475908502078.31.26.png)
      grade5_artist_for_loops4_authored_hint:
        Course_4_Artist_For_Loops_4_a: |-
          Ecco le domande cui rispondere per trovare i valori da inserire al posto dei `???`:<br>
          Qual è il valore più piccolo che serve? <br>
          Qual è il più grande?<br>
          Qual è l'incremento necessario ad ogni ripetizione?<br>
          <b>Nota</b>: ora ci sono così tanti blocchi nella cassetta degli attrezzi che li abbiamo organizzati in diverse categorie. Prenditi un po' di tempo per esplorarle.
      grade5_artist_for_loops5_authored_hint:
        grade5_artist_for_loops5_a: You don't need the traditional repeat loop when
          making this spiral!
      grade5_artist_for_loops7_authored_hint:
        grade5_artist_for_loops7_a: The pen is thinner in this puzzle. You will need
          to set it to `1` before you start.
        grade5_artist_for_loops7_b: Notice that this spiral turns right instead of
          left!
      grade5_artist_for_loops7a_authored_hint: {}
      grade5_artist_for_loops7b_authored_hint: {}
      grade5_artist_for_loops8_authored_hint:
        Course_4_Artist_For_Loops_11_a: 'Il numero di gradi di cui girare deve cambiare
          per ogni poligono. 360 diviso il numero di lati del poligono ti restituisce
          il numero di gradi di cui devi girare per disegnarlo: usa un blocco matematico
          per calcolarlo.'
      grade5_artist_for_loops9_authored_hint:
        Course_4_Artist_For_Loops_11a_a: 360 diviso il numero di lati del poligono
          ti restituisce il numero di gradi di cui devi girare per disegnarlo.
        Course_4_Artist_For_Loops_11a_b: In ogni poligono devi avanzare di quantità
          pari a 10 volte il numero di lati del poligono stesso.
      grade5_artist_for_loopsfreeplay11_authored_hint:
        Course_4_Artist_For_Loops_inspire_a: La soluzione di questo esercizio è quasi
          uguale a quella dell'esercizio precedente... con un paio di cambiamenti.
        Course_4_Artist_For_Loops_inspire_b: Prova ad usare un <i>ciclo con contatore</i>
          che va da 3 a 10 con passo di 1.
        Course_4_Artist_For_Loops_inspire_c: All'interno del <i>ciclo con contatore</i>
          ci sono due cicli uguali, ma il secondo ciclo gira nella direzione opposta
          del primo.
        Course_4_Artist_For_Loops_inspire_d: "**Solution:**  ![Solution](https://images.code.org/d619892fc17ff491c201d86bb917e523-image-1441005190828.12.30.png) "
      grade5_artist_for_loopsfreeplay12_authored_hint:
        grade5_artist_for_loopsfreeplay12_a: The image in the drawing was made using
          a counter for the `set alpha` and `counter` / 10 as a brush size.
        grade5_artist_for_loopsfreeplay12_b: The image in the drawing uses a turn
          of 61 degrees.
        grade5_artist_for_loopsfreeplay12_c: |-
          Want to know how the sample image was done?

          ![](https://images.code.org/fdc5d6c15b357ba9763ac9ea914967a9-image-1475911612774.23.51.png)
      grade5_artist_functionparameters10_authored_hint:
        brush_width: Come prima cosa, assegna lo spessore del pennello a 1 ed il suo
          colore a blu.
        double_loop: Prova ad inserire un <i>ciclo con contatore</i> all'interno di
          un altro ciclo.
        specifics: |-
          In ogni petalo, il poligono più piccolo ha 3 lati ed il più grande ne ha 17.<br>
          <br>
          Nel blocco `imposta l'opacità`, usa un blocco divisione per rendere il colore sempre più trasparente man mano che il numero dei lati del poligono aumenta (minore è il valore dell'opacità più trasparente è il colore).
        after: Quando hai finito un petalo, assicurati di spostarti in avanti di 20
          pixel prima di ruotare di 60 gradi per iniziare il petalo successivo.
        solution: |-
          **Solution**

          ![](https://images.code.org/7e9f4be39d45726d537fe8e6e9147986-image-1456445254361.png)
      grade5_artist_functionparameters8_authored_hint:
        NEW_Course_4_Artist_Params_13_a: The length of sides for each shape is 7 times
          the number of sides it has.
      grade5_artist_functionparameters9_authored_hint:
        NEW_Course_4_Artist_Params_14_a: Va benissimo sperimentare il comportamento
          della funzione per capire come si comporta al variare del valore dei parametri.
        grade5_artist_functionparameters9_b: You don't need to add any `move` or `turn`
          blocks to finish this code.
      grade5_artist_functionparameters9a_authored_hint:
        grade5_artist_functionparameters9a_a: 'Did the code get so scrambled up that
          it''s no longer recognizable?  Try clicking the "Start over" button in the
          upper righthand corner. '
        grade5_artist_functionparameters9a_b: Your new `min` variable should go in
          the first slot in your `for` loop, inside the function.
      grade5_artist_functionparameters9b_authored_hint:
        grade5_artist_functionparameters9b_a: If your function is correct, you shouldn't
          need to change it for this puzzle.
        grade5_artist_functionparameters9b_b: The only thing you should need to do
          between function calls is change the color of the line.
      grade5_artist_functionparameters_6_authored_hint:
        grade5_artist_functionparameters_6_a: Use a `for` loop to get the code as
          smooth as you can.
        grade5_artist_functionparameters_6_b: Remember to **add** a parameter.  Don't
          remove the one that is already there!
      grade5_artist_parameters_squares1a_authored_hint:
        grade5_artist_parameters_squares1a_a: Remember, you need to turn 90 degrees
          to draw a square.
        grade5_artist_parameters_squares1a_b: You only need to repeat as many times
          as the number of sides in a square.
      grade5_artist_parameters_squares2_authored_hint:
        grade5_artist_parameters_squares2_a: This gets easier if you put it all in
          a `for` loop.
        grade5_artist_parameters_squares2_b: |-
          Be sure to turn 90 degrees between each square!

          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      grade5_artist_parameters_squares2a_authored_hint:
        grade5_artist_parameters_squares2a_a: You need to click the "edit" button
          to get into the function.  Once you're there, add a parameter called `length`
          and use it inside your `move forward` block!
        grade5_artist_parameters_squares2a_b: When calling your function, use a `for
          loop` for the best possible code!
      grade5_artist_parameters_stars1_authored_hint:
        hint1: Don't give up!
      grade5_artist_variables_freeplay10_authored_hint:
        Course_4_Artist_Vars_8_a: Se dividi il valore iniziale della lunghezza del
          lato per il numero dei lati, la lunghezza del lato del poligono disegnato
          si accorcia man mano che il numero dei lati cresce.
      grade5_artist_variables_freeplay15_authored_hint:
        Course_4_Artist_Inspire_a: Dopo aver completato un quadrato, prova a saltare
          in avanti di metà della sua lunghezza, prima di girarti e cominciarne un
          altro.
        Course_4_Artist_Inspire_b: Per disegnare una singola girandola, devi ripetere
          per 4 volte (con una svolta a sinistra nel mezzo) ogni quadrato e ogni salto
          in avanti.
        Course_4_Artist_Inspire_c: Per completare la figura, ogni girandola viene
          ripetuta per 4 volte, inserendo un salto in avanti pari alla lunghezza del
          quadrato ed una svolta a destra di `360/sides` (cioè 360/<i>lati</i>) gradi
          tra l'una e l'altra.
        Course_4_Artist_Inspire_d: |-
          **Solution:**
          ![Blocks for solution](https://images.code.org/1865aaf1b4a8ba84a5e8a7408401092d-image-1440060930335.43.39.png)
      grade5_artist_variables_octagons13_authored_hint:
        Course_4_Artist_Vars_13_a: Hai bisogno di due cicli (uno dentro l'altro),
          entrambi che ripetono `sides` (<i>lati</i>) volte.
        Course_4_Artist_Vars_13_b: Il ciclo interno disegna un ottagono (girando verso
          sinistra). Poi, nel ciclo esterno, devi muoverti in avanti e girare a destra.
        Course_4_Artist_Vars_13_c: Per aggiustare la figura in modo che rimanga della
          stessa dimensione al variare del numero di lati, usa un blocco matematico
          per dividere la lunghezza del perimetro per il numero dei lati.
      grade5_artist_variables_square7_authored_hint:
        Course_4_Artist_Vars_6_a: Il numero di gradi di cui girare ogni volta è dato
          da <b>360 diviso il numero di lati</b>.
      grade5_artist_variables_triangles1_authored_hint:
        grade5_artist_variables_triangles1_a: To make an internal angle of 60 degrees
          in this triangle, remember to turn the artist 120 degrees.
        grade5_artist_variables_triangles1_b: Use the `repeat` loop to make your code
          shorter.
        grade5_artist_variables_triangles1_c: Inside your loop, you will want to move
          forward 50 pixels, then turn left 120 degrees.
      grade5_artist_variables_triangles1_2018_authored_hint:
        grade5_artist_variables_triangles1_a: To make an internal angle of 60 degrees
          in this triangle, remember to turn the artist 120 degrees.
        grade5_artist_variables_triangles1_b: Use the `repeat` loop to make your code
          shorter.
        grade5_artist_variables_triangles1_c: Inside your loop, you will want to move
          forward 50 pixels, then turn left 120 degrees.
      grade5_bee_for_loops10_authored_hint:
        grade5_bee_for_loops10_a: "How much less is 12 than 15?  \nHow much less is
          9 than 12?\n\nDo you see a pattern?"
      grade5_bee_for_loops11_authored_hint:
        NEW_Course_4_Bee_For_Loops_10a_a: Riesci a trovare una relazione tra il numero
          di passi che l'ape fa per arrivare al fiore ed il numero di dosi di nettare
          che deve raccogliere?
        NEW_Course_4_Bee_For_Loops_10a_b: 'Devi usare due blocchi `ripeti ... volte`:
          uno di questi deve usare un blocco con operazioni matematiche.'
      grade5_bee_for_loops3_authored_hint:
        grade5_bee_for_loops3_a: 'Use the `counter` variable inside the `repeat` loop
          where nectar is gathered to solve this puzzle. '
        grade5_bee_for_loops3_b: Your `for` loop will need to count from 1 to 5 with
          an increment of 1.
      grade5_bee_for_loops4_authored_hint:
        grade5_bee_for_loops4_a: Use a `for` loop that goes from 1 to 7 with an increment
          of 1 to solve this puzzle.
        grade5_bee_for_loops4_b: Make sure to use the `counter` variable inside your
          nested `repeat` loop to get enough nectar!
      grade5_bee_for_loops5_authored_hint:
        grade5_bee_for_loops5_a: This time, your `move forward` block and your `get
          nectar` block will need to be in separate `repeat` loops.
      grade5_bee_for_loops6_authored_hint:
        grade5_bee_for_loops6_a: Don't forget to use a `counter` variable inside your
          `repeat` loop.
      grade5_bee_for_loops7_authored_hint:
        grade5_bee_for_loops7_a: Your `for` loop will need to count from 1 to 7 by
          2.
      grade5_bee_for_loops8_authored_hint:
        NEW_Course_4_Bee_For_Loops_8_a: "If your loop is counting up, the increment
          is added to your counter variable each time through. \n\nWhat do you need
          to add to each number to get the next amount of nectar?"
      grade5_bee_for_loops9_authored_hint:
        NEW_Course_4_Bee_For_Loops_7_a: Prova ad usare nel <i>ciclo con contatore</i>
          un valore della variabile `counter` che viene modificato con un blocco matematico
          man mano che ti sposti e raccogli il nettare.
        NEW_Course_4_Bee_For_Loops_7_b: 'Remember: If your loop is counting up, the
          increment is added to your `counter` variable each time through.'
      grade5_bee_parameters_new1_authored_hint:
        grade5_bee_parameters_new1_a: Use `if` statements to make sure you're only
          getting nectar from a flower.
      grade5_bee_parameters_new2_authored_hint:
        grade5_bee_parameters_new2_a: "To turn this into a function, simply drag the
          code into the existing function block.  \n\n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        grade5_bee_parameters_new2_b: Don't forget to connect the `rowOfNectar` block
          to `when run` to call the function that you just built.
      grade5_bee_parameters_new3_authored_hint:
        grade5_bee_parameters_new3_a: Your function will run no matter which direction
          you're facing.
      grade5_bee_parameters_new4_authored_hint:
        grade5_bee_parameters_new4_a: You will need to add a parameter and use the
          resulting variable in your loop.
      grade5_bee_parameters_new5_authored_hint:
        grade5_bee_parameters_new5_a: Count the number of spaces you need to check
          in each stretch and use those numbers as your parameters to the function
          call.
      grade5_bee_parameters_new6_authored_hint:
        grade5_bee_parameters_new6_a: Which block automatically increments a variable
          that you could use as a parameter?
      grade5_bee_parameters_new7_authored_hint:
        grade5_bee_parameters_new7_a: You don't need a second parameter for this function,
          only a second `if` statement.
      grade5_bee_parameters_new8a_authored_hint:
        grade5_bee_parameters_new8a_a: This spiral can be simplified with a `for`
          loop.
      grade5_bee_parameters_new9a_authored_hint:
        grade5_bee_parameters_new9a_a: A `for` loop can help you with this stair step
          pattern, too!
        grade5_bee_parameters_new9a_b: For each stair, you'll need to call the function
          once, turn right, call the function again, then turn left.
      grade5_playlab_variables2_authored_hint:
        Course_4_Play_Lab_Vars_2_a: Assicurati di impostare un valore di `dog_speed`
          (<i>velocità del cane</i>) che sia maggiore di `cat_speed` (<i>velocità
          del gatto</i>).
      gradeK_sequence_4_authored_hint:
        gradeK_sequence_4_a: Per trovare la soluzione, prova a scrivere i passi sulla
          carta!
      gradek_adventurer_loops3_authored_hint:
        gradek_adventurer_loops3_a: Per modificare di quante caselle deve spostarsi
          Laurel, cambia il numero di volte che il ciclo viene eseguito.
        gradek_adventurer_loops3_b: Non dimenticare che l'Avventuriera deve scendere
          e raccogliere l'ultimo diamante dopo che ha completato il ciclo `ripeti`!
      gradek_adventurer_loops4_authored_hint:
        gradek_adventurer_loops4_a: Se non riesci subito a capire la risposta, provare
          ad utilizzare un foglio di carta per capire di quali frecce hai bisogno
          e cerca di definire un percorso.
      gradek_adventurer_loops4a_authored_hint:
        gradek_adventurer_loops4a_a: Can't figure out what's wrong? Try running the
          code to see what happens.
      gradek_adventurer_loops5_authored_hint:
        gradek_adventurer_loops5_a: Se non riesci a capire che cosa accade dopo, prova
          ad eseguire il codice per vedere dove va a finire Laurel.
      gradek_adventurer_loops6_authored_hint:
        gradek_adventurer_loops6_a: If you are having trouble figuring this puzzle
          out, try writing the moves down on a piece of paper and look for a pattern.
      gradek_adventurer_loops7_challenge_authored_hint:
        gradek_adventurer_loops7_challenge_a: Il programma ti sembra troppo lungo?
          Prova a mettere due cicli `ripeti` dentro un altro ciclo per renderlo molto
          più breve!
      gradek_adventurer_loops8_authored_hint:
        gradek_adventurer_loops8_a: If you can't figure out where to put the loops,
          try writing the code out step-by-step and look for a pattern.
      gradek_adventurer_loops9_authored_hint:
        gradek_adventurer_loops9_a: If you can't figure out where to put the loops,
          try writing your code step-by-step and look for patterns.
      gradek_artist_loops1_authored_hint:
        gradek_artist_loops1_a: Can't figure out how to draw a line?  Start attaching
          blocks to the `when run` block to see what happens.
      gradek_artist_loops2_authored_hint:
        gradek_artist_loops2_a: Is something not quite right?  Use the "Step" button
          to see where things go wrong.
      gradek_artist_loops3_authored_hint:
        artistLoopsK2_a: Se vuoi che il ciclo si ripeta più di 4 volte, devi cambiare
          il numero in alto a destra nel blocco rosa del ciclo.
      gradek_artist_loops4_authored_hint:
        artistLoopsK3_a: Prova a utilizzare quello che hai imparato sui blocchi di
          ripetizione per completare questo esercizio!
      gradek_artist_loops5_authored_hint:
        gradek_artist_loops5_a: Non riesci ad immaginare come disegnare la collina?
          Prova a giocare un po' con i blocchi per vedere che disegno fa ognuno.
      gradek_artist_loops6_authored_hint:
        gradek_artist_loops6_a: Non riesci a capire dove posizionare il ciclo? Allora
          prima prova a scrivere il programma con tanti blocchi azzurri, poi individua
          una sequenza che si ripete e sostituiscila con il ciclo.
      gradek_artist_loops7_authored_hint:
        gradek_artist_loops7_a: Prova ad eseguire il codice, per capire cosa è già
          stato scritto per te.
        gradek_artist_loops7_b: Come inseriresti in un ciclo il codice che ti è stato
          dato?
        gradek_artist_loops7_c: "Cosa fa il codice?  \nChe cosa dovrebbe fare?  \nChe
          cosa ti suggerisce questo?"
      gradek_artist_loops8_authored_hint:
        gradek_artist_loops8_a: 'You don''t have to delete everything!  Some of the
          code is good. Use it to build the rest of the stairs. '
      gradek_artist_loops9_authored_hint:
        artistLoopsKA_a: Usa il blocco salto per avanzare senza tracciare una linea.
      gradek_artist_loopsA_authored_hint:
        artistLoopsKB_a: There should be 2 blocks inside of your loop to solve this
          puzzle.
      gradek_artist_loopsFP_authored_hint: {}
      gradek_playlab_events1a_authored_hint:
        gradek_playlab_events1a_a: Attach the `move up` block to the `when click`
          event so that the cat moves up when the "up" button is pressed.
      gradek_playlab_events1c_authored_hint:
        gradek_playlab_events1c_a: "Here is the block you should connect to the `when
          run` block: \n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
      gradek_playlab_events2c_authored_hint:
        gradek_playlab_events2c_a: drag this block out ![](https://images.code.org/b3d6215901969328333d6393f8101c5b-image-1478142333199.png)
          and connect it to ![](https://images.code.org/4f2130b2a3053695414a02c3d39ef864-image-1478143461271.png)
      gradek_playlab_events3c_authored_hint:
        gradek_playlab_events3c_a: |-
          Here is the event block that you will need to get Jorge to move right:

          ![](https://images.code.org/cfc4b696b1ad5762ff40c1c8a17a194d-image-1478141370249.png)
        gradek_playlab_events3c_b: |-
          Here is the block you should connect to the `when right` event:

          ![](https://images.code.org/e5c559cc1deef643c8b997d17ecb78e3-image-1478141726783.png)
      gradek_playlab_events4c_authored_hint:
        gradek_playlab_events4c_a: "Here are the event blocks that you will need to
          use to move Jorge up and down:\n\n![](https://images.code.org/cf9a6992f7b4619dfb592fb6905effbb-image-1478140906017.png)\nand
          \n![](https://images.code.org/bb2a117cef485e79119a63e5d027968e-image-1478140979742.png)"
      gradek_playlab_events5c_authored_hint:
        gradek_playlab_events5c_a: |-
          Here is the event block that you would use to have Jorge do something when clicked:

          ![](https://images.code.org/6e3a654378643fd0590307ec3a0e429c-image-1478140058859.png)
        gradek_playlab_events5c_b: |-
          Here is the block you would use to change the background:

          ![](https://images.code.org/3f6d7a642b37c3abffe7b0de062ea076-image-1478140261440.png)
        gradek_playlab_events5c_c: |-
          Here is the block you would use to play a random sound:

          ![](https://images.code.org/81a8ef4f64023039438199fef67bb56b-image-1478140125332.png)
      gradek_playlab_eventsA_authored_hint:
        gradek_playlab_eventsA_a: |-
          If this seems like too much to do, try breaking it down into steps:

          1)  Have the actor change to a random size on click.
          2) Play a random sound when you click the actor.

          Now, make sure both of those actions are attached underneath the same event!
      harvester_Kahoot_authored_hint:
        courseE_farmer_functions1a_a: Think through the `if/else` statements step
          by step. What should you do if you are standing at a corn plant?
        courseE_farmer_functions1a_b: Use a `repeat until` block to get to the pumpkin!
      harvey_snowflake_artist1_authored_hint: {}
      harvey_snowflake_artist2_authored_hint: {}
      harvey_tictactoe_authored_hint:
        harvey_tictactoe: You can use `jump` blocks to move to other spaces.
      iceAgeLoopsforVideo_authored_hint: {}
      iceage_click_hello_authored_hint:
        iceage_click_hello_a: Per completare l'esercizio aggiungi uno o più blocchi
          `il personaggio 1 dice` all'evento `quando si clicca sul personaggio 1`.
      iceage_click_hello_2018_authored_hint:
        iceage_click_hello_a: Per completare l'esercizio aggiungi uno o più blocchi
          `il personaggio 1 dice` all'evento `quando si clicca sul personaggio 1`.
      iceage_free_play_authored_hint:
        iceage_free_play_a: Puoi fare in modo che Sid e Manny si sfidino a palle di
          neve?
        iceage_free_play_b: Fai in modo che la Nonnina debba inseguire Diego. Si vince
          se lei riesce a prenderlo.
        iceage_free_play_c: Riesci a fare in modo che Sid tiri fiocchi di neve a Diego
          e far sì che Diego diventi più grande ogni volta che viene colpito? Si vince
          quando Diego viene colpito 5 volte.
      iceage_free_play_2018_authored_hint:
        iceage_free_play_a: Puoi fare in modo che Sid e Manny si sfidino a palle di
          neve?
        iceage_free_play_b: Fai in modo che la Nonnina debba inseguire Diego. Si vince
          se lei riesce a prenderlo.
        iceage_free_play_c: Riesci a fare in modo che Sid tiri fiocchi di neve a Diego
          e far sì che Diego diventi più grande ogni volta che viene colpito? Si vince
          quando Diego viene colpito 5 volte.
      iceage_free_playcourseF_IceAge_11_authored_hint:
        iceage_free_play_a: Puoi fare in modo che Sid e Manny si sfidino a palle di
          neve?
        iceage_free_play_b: Fai in modo che la Nonnina debba inseguire Diego. Si vince
          se lei riesce a prenderlo.
        iceage_free_play_c: Riesci a fare in modo che Sid tiri fiocchi di neve a Diego
          e far sì che Diego diventi più grande ogni volta che viene colpito? Si vince
          quando Diego viene colpito 5 volte.
      iceage_hello1_authored_hint:
        iceage_hello1_a: Devi aggiungere solo un blocco per risolvere questo esercizio.
          Trascina il blocco `il personaggio 1 dice ...` dalla cassetta degli attrezzi
          e attaccalo all'evento`quando si clicca su "Esegui"` già presente nell'area
          di lavoro. Poi aggiungi la scritta "Ciao!" al suo interno.
      iceage_hello1_2018_authored_hint:
        iceage_hello1_a: Devi aggiungere solo un blocco per risolvere questo esercizio.
          Trascina il blocco `il personaggio 1 dice ...` dalla cassetta degli attrezzi
          e attaccalo all'evento`quando si clicca su "Esegui"` già presente nell'area
          di lavoro. Poi aggiungi la scritta "Ciao!" al suo interno.
      iceage_hello2_authored_hint:
        iceage_hello2_a: 'To solve this puzzle, you will need to have Sid say something
          using the `actor 1 say` block.  You will also need to have Manny say something
          with the `actor 2 say` block. '
      iceage_hello2_2018_authored_hint:
        iceage_hello2_a: 'To solve this puzzle, you will need to have Sid say something
          using the `actor 1 say` block.  You will also need to have Manny say something
          with the `actor 2 say` block. '
      iceage_move_events_authored_hint:
        iceage_move_events_a: Per risolvere l'esercizio, ogni evento `quando si preme
          sulla freccia ...` ha bisogno di avere collegato un diverso comando `sposta
          il personaggio ...`.
      iceage_move_events_2018_authored_hint:
        iceage_move_events_a: Per risolvere l'esercizio, ogni evento `quando si preme
          sulla freccia ...` ha bisogno di avere collegato un diverso comando `sposta
          il personaggio ...`.
      iceage_move_to_actor_authored_hint:
        iceage_move_to_actor_a: Per risolvere questo esercizio, puoi sia muovere Diego
          in basso di 200 pixel, sia muovere Manny in alto di 200 pixel.
        iceage_move_to_actor_b: Collega il blocco `riproduci il suono di ...` all'evento
          `quando il personaggio 1 tocca il personaggio 2` per terminare questa sfida.
      iceage_move_to_actor_2018_authored_hint:
        iceage_move_to_actor_a: Per risolvere questo esercizio, puoi sia muovere Diego
          in basso di 200 pixel, sia muovere Manny in alto di 200 pixel.
        iceage_move_to_actor_b: Collega il blocco `riproduci il suono di ...` all'evento
          `quando il personaggio 1 tocca il personaggio 2` per terminare questa sfida.
      iceage_move_to_flag_authored_hint:
        iceage_hello3_a: Usa il blocco `sposta il personaggio 1 a destra 200 pixel`
          per risolvere l'esercizio.
      iceage_move_to_flag_2018_authored_hint:
        iceage_hello3_a: Usa il blocco `sposta il personaggio 1 a destra 200 pixel`
          per risolvere l'esercizio.
      iceage_repeat_authored_hint:
        iceage_repeat_a: Usa entrambi i blocchi `sposta il personaggio 1 a destra`
          e `sposta il personaggio 1 a sinistra` per risolvere questo esercizio.
      iceage_repeat_2018_authored_hint:
        iceage_repeat_a: Usa entrambi i blocchi `sposta il personaggio 1 a destra`
          e `sposta il personaggio 1 a sinistra` per risolvere questo esercizio.
      iceage_sound_and_points_authored_hint:
        iceage_sound_and_points_a: Dovrai aggiungere due blocchi sotto all'evento
          `quando il personaggio 1 tocca il personaggio 2`.
        iceage_sound_and_points_b: Avrai bisogno sia del blocco `aggiungi un punto`
          sia di quello `riproduci il suono di ...` per completare questo esercizio.
      iceage_sound_and_points_2018_authored_hint:
        iceage_sound_and_points_a: Dovrai aggiungere due blocchi sotto all'evento
          `quando il personaggio 1 tocca il personaggio 2`.
        iceage_sound_and_points_b: Avrai bisogno sia del blocco `aggiungi un punto`
          sia di quello `riproduci il suono di ...` per completare questo esercizio.
      iceage_throw_hearts_authored_hint:
        iceage_throw_hearts_a: Quando vuoi lanciare i cuori alla nonna? Quando si
          preme una freccia? Quando clicchi su Sid? Quando clicchi sulla Nonnina?
          La scelta è tua!
        iceage_throw_hearts_b: Per fare in modo che la nonna sia felice quando riceve
          i cuori, devi collegare il blocco `imposta il personaggio 2 ad umore felice`
          sotto all'evento `quando il personaggio 2 tocca dei cuori`.
      iceage_throw_hearts_2018_authored_hint:
        iceage_throw_hearts_a: Quando vuoi lanciare i cuori alla nonna? Quando si
          preme una freccia? Quando clicchi su Sid? Quando clicchi sulla Nonnina?
          La scelta è tua!
        iceage_throw_hearts_b: Per fare in modo che la nonna sia felice quando riceve
          i cuori, devi collegare il blocco `imposta il personaggio 2 ad umore felice`
          sotto all'evento `quando il personaggio 2 tocca dei cuori`.
      iceage_warn_embed_ice_age_authored_hint: {}
      iceage_warn_ice_age_authored_hint:
        iceage_warn_ice_age_a: Devi semplicemente aggiungere due blocchi per risolvere
          questo esercizio.
        iceage_warn_ice_age_b: Aggiungi entrambi i nuovi blocchi sotto all'evento
          `quando si clicca su "Esegui"` per farli eseguire immediatamente all'avvio
          del programma.
      iceage_warn_ice_age_2018_authored_hint:
        iceage_warn_ice_age_a: Devi semplicemente aggiungere due blocchi per risolvere
          questo esercizio.
        iceage_warn_ice_age_b: Aggiungi entrambi i nuovi blocchi sotto all'evento
          `quando si clicca su "Esegui"` per farli eseguire immediatamente all'avvio
          del programma.
      k1stickerfreeplay_authored_hint: {}
      level 'grade3_Loops_10_authored_hint:
        2-3_Bee_Loops_4_a: Alla fine dovresti avere cinque blocchi nel <i>ciclo</i>
          `ripeti ... volte`.
      level 'grade3_Loops_11_authored_hint:
        2-3_Bee_Loops_5_a: Se non riesci subito a capire come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di capire come combinarli in un <i>ciclo</i> `ripeti ... volte`.
      level 'grade3_Loops_12_authored_hint:
        2-3_Bee_Loops_6_a: Se non riesci ad immaginare quali blocchi inserire nel
          <i>ciclo</i>, prova prima a risolvere l'esercizio senza il blocco `ripeti
          ... volte` e poi cerca di vedere quali sono le parti che si ripetono.
        2-3_Bee_Loops_6_b: Alla fine dovresti avere sei blocchi nel <i>ciclo</i> `ripeti
          ... volte.
      level 'grade3_Loops_4_authored_hint:
        2-3_Bee_Loops_3B_a: Avrai bisogno di due diversi <i>cicli</i> `ripeti ...
          volte`, uno dopo l'altro.
      level 'grade3_Loops_5_authored_hint:
        2-3_Bee_Loops_7_a: Girati prima di iniziare a muoverti.
        2-3_Bee_Loops_7_b: Se non riesci a capire subito come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di vedere quali sono le parti che si ripetono per inserirle nel blocco
          `ripeti ... volte`.
      level 'grade3_Loops_6_authored_hint:
        2-3_Bee_Loops_4A_a: Girati prima di iniziare a muoverti.
        2-3_Bee_Loops_4A_b: Il programma termina con alcuni blocchi fuori dal <i>ciclo</i>
          principale.
        2-3_Bee_Loops_4A_c: Se non riesci subito a capire come impostare il <i>ciclo</i>,
          prova prima a risolvere l'esercizio usando tutti i singoli blocchi, poi
          cerca di capire come combinarli in un <i>ciclo</i> `ripeti ... volte`.
      level 'grade3_Loops_8_authored_hint:
        2-3_Bee_Loops_2_a: Alla fine dovresti avere quattro blocchi all'interno del
          <i>ciclo</i> `ripeti ... volte`.
      level 'grade3_Loops_9_authored_hint:
        2-3_Bee_Loops_3_a: Dovresti avere sei blocchi all'interno del <i>cilco</i>
          `ripeti ... volte`.
      playLabDebugVideo1_authored_hint:
        courseA_playLab_events2_a: "Here is the block you should connect to the `when
          run` block: \n\n![](https://images.code.org/ae72d1270ad210cd00fae7e0dfb3549a-image-1478144412134.png)"
      sample3_authored_hint:
        sample3_a: |-
          Try writing the code once and looping it seven times:

          ![](https://images.code.org/2a116e75e31ee3a8a8683349c9460286-image-1464307689813.gif)
      sample5_authored_hint:
        sample5_a: Did you know that you can put as many blocks inside of a repeat
          loop as you want to?
        sample5_b: |-
          The bee is looping these actions over and over again:
          - move forward
          - make honey
          - turn left
          - move forward
          - turn right
      sample6_authored_hint:
        sample6_a: Did you know that you can use more than one repeat loop in a puzzle?
        sample6_b: Sometimes repeat loops have lots of blocks inside, and sometimes
          they might only have one!
      sample7assessment_authored_hint: {}
