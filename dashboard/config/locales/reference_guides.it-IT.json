{
  "it-IT": {
    "data": {
      "reference_guides": {
        "csd-2022/accelerometer-events": {
          "display_name": "Eventi dell'accelerometro",
          "content": "Proprio come gli altri sensori, l'accelerometro disponde degli eventi `data` e `change`. Questi sono particolarmente utili perché permettono di tenere costantemente traccia dei valori aggiornati dell'accelerometro, come l'orientamento.\n\n| Evento   | Descrizione                                                                                                                                                                                                                                       |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `data`   | Si attiva ogni 100 ms per controllare i dati dall'accelerometro.                                                                                                                                                                                  |\n| `change` | Si attiva ogni volta che l'accelerometro rileva un cambiamento nel movimento. Questo controlla se i dati correnti dal sensore sono gli stessi di 100 ms fa. Se questo è il caso, l'evento non si attiverà. In caso contrario, l'evento si attiva. |\n| `shake`  | Si attiva ogni volta che la scheda viene scossa.                                                                                                                                                                                                  |\n\nA volte non ci interessa quale sia l'orientamento della scheda, ci importava solo che si muovesse. È qui che entrano in gioco eventi come \"change\" e \"shake\". "
        },
        "csd-2022/accuracy-in-ai-lab": {
          "display_name": "L'accuratezza e il Laboratorio IA",
          "content": "## Accuratezza nel laboratorio di intelligenza artificiale\n\n<img style=\"margin-right: 10px; margin-left: 10px; bordo: 2px nero pieno\" src=\"https://curriculum.code.org/media/uploads/03-Evaluating-Accuracy---Categorical- --a.png\"/>\n\n[][0]\n\n1.  La riga superiore è il punteggio di accuratezza per il tuo modello più recente in Laboratorio IA. Vedi sotto per ulteriori informazioni su come viene calcolata l'accuratezza.\n2.  Puoi anche visualizzare i modelli precedenti che hai addestrato in Laboratorio IA. Questi possono aiutarti a notare i modelli e ricordare quali caratteristiche hanno portato ai modelli più accurati.\n3.  Fare clic sul pulsante Dettagli per visualizzare ulteriori informazioni sull'andamento del modello\n\n[/][0]\n\n## Come viene calcolata l'accuratezza?\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/image_81IyXga.png\" width=\"50%\" />\n<p>\nDopo aver selezionato le etichette e le caratteristiche, i dati vengono automaticamente suddivisi in due sezioni: <strong>Dati di addestramento</strong> e <strong>Dati di test</strong>.\n</p>\n<p>\nI <strong>dati di addestramento</strong> sono ciò che Bot IA utilizza per cercare schemi che lo aiutino a prendere decisioni. Poiché Bot IA ha bisogno di molti dati per prendere decisioni, utilizza il 90% del set di dati originale per l'addestramento. I <strong>Dati di test</strong> vengono tenuti nascosti da Bot IA fino al termine dell'addestramento.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:right; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/image_EygFTNF.png\" width=\"50%\" />\n<p>\nUna volta terminato l'addestramento, Bot IA esamina i <strong>Dati di test</strong> in modo da poter confrontare le sue previsioni con i dati originali. È come studiare per un test esaminando le domande pratiche di cui conosci le risposte: provi tu stesso le domande, poi controlli le tue risposte per vedere quanto sei andato bene.\n</p>\n<p>\nQuesto è il modo in cui otteniamo il nostro punteggio di accuratezza: è quanto bene hanno fatto le previsioni di Bot IA quando le confrontiamo con i dati nel set di dati originale. Se Bot IA ha ottenuto la maggior parte delle risposte corrette, allora possiamo essere certi che Bot IA abbia trovato i modelli che corrispondono ai nostri dati originali.\n</p>\n</div>\n\n## Quanto è importante la accuratezza?\n\nL'accuratezza può fare un buon lavoro nel verificare se il tuo modello di machine learning ha avuto successo nel trovare schemi nei tuoi dati, ma questo non significa sempre che il tuo modello sia pronto per iniziare a risolvere i problemi nel mondo reale. Un punteggio elevato di accuratezza non significa che il tuo modello farà un buon lavoro nel mondo reale con utenti reali, significa solo che ha fatto un buon lavoro <em>con i dati che già avevi</em>. Se ci sono stati problemi con i tuoi dati, ci saranno ancora problemi con il tuo modello.\n\n## Video\n\n(Apre YouTube in una nuova scheda)\n\n[undefined][1]"
        },
        "csd-2022/ai-lab": {
          "display_name": "Laboratorio IA"
        },
        "csd-2022/analog-sensors": {
          "display_name": "Sensori di Circuit Playground",
          "content": "## Luce, suono e temperatura\n\nIl Circuit Playground ha tre sensori analogici di base, ognuno dei quali prende un input analogico e lo converte in un valore utilizzabile dal computer.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp_sensors.png\" alt=\"analog sensors\" class=\"center\" style=\"width: 500px;\">\n\n1.  Il [`lightSensor`(#f78183)][0] misura quanto è luminoso o scuro. Quando è molto buio, [`lightSensor.value`(#f78183)][1] è 0, e quando è molto luminoso, il valore è 1023. \n2.  Il [`tempSensor`(#f78183)][2] controlla la temperatura e la mostra in Fahrenheit ([`tempSensor`(#f78183)][3]) o Celsius ([`tempSensor.C`(#f78183) ][4]). \n3.  Il [`soundSensor`(#f78183)][5] misura quanto sono forti i rumori ma non può registrare suoni come un microfono. Dà anche un valore da 0 a 1023.\n\n## Lettura dei dati del sensore\n\nPer leggere i dati dai sensori di suono e luce, puoi usare la proprietà `value` (come [`soundSensor.value`(#f78183)][6]). Se l'intervallo 0-1023 non è quello di cui hai bisogno, puoi modificare l'intervallo utilizzando il metodo setScale(). Ad esempio, [`soundSensor.setScale(-50, 50)`(#f78183)][7] fa sì che il sensore del suono mostri valori compresi tra -50 e 50. Il sensore di temperatura mostra già la temperatura in un modo facile da capire.\n\n## Sensibilità del sensore\n\nI sensori sulle tue schede non sono perfetti e potrebbero fornire letture leggermente diverse su schede diverse. Se hai bisogno che il tuo programma funzioni bene con diverse schede, puoi scrivere un codice che ti permetta di regolare i sensori. Se la tua app esegue il programma quando la lettura di un sensore supera un determinato valore, rendi tale valore una variabile che può essere modificata dall'utente. In questo modo, l'utente può modificare la variabile per far funzionare al meglio l'app con la propria scheda."
        },
        "csd-2022/animation-tab": {
          "display_name": "Scheda Animazione",
          "content": "In Sviluppo Giochi, le _Animazioni_ sono disegni o altre immagini che puoi usare per cambiare l'aspetto dei tuoi personaggi. Puoi usare il blocco `sprite.setAnimation()` per cambiare le animazioni del tuo personaggio in una qualsiasi delle animazioni che hai aggiunto nella _scheda Animazione_.\n\n## Utilizzo della scheda Animazione\n\nFacendo clic sul pulsante **Animazione** sopra l'area di visualizzazione, verrai indirizzato alla scheda _Animazione_, dove puoi importare o disegnare animazioni da utilizzare per i tuoi personaggi.\n\n[][1]\n\n[][0]\n\n1.  Utilizzare questi pulsanti per passare dalla scheda animazione alla scheda codice e viceversa.\n2.  Questa colonna mostra tutte le animazioni che hai creato. Fai clic su un'animazione da qui per modificarla.\n3.  Fare clic sul segno più per aggiungere una nuova animazione. Puoi selezionare un'animazione dalla libreria, importare un'immagine dal tuo computer o disegnarne una da zero.\n4.  Gli strumenti di disegno in questa colonna consentono di disegnare o modificare le animazioni.\n5.  Disegna o modifica la tua immagine su questa tela.\n6.  Apri questo cassetto per modificare le dimensioni complessive dell'immagine o della tela.\n\n[/][0]"
        },
        "csd-2022/app-lab": {
          "display_name": "Sviluppo App",
          "content": "Sviluppo App è uno strumento creato con [JavaScript][0] che può essere utilizzato per creare app. Scopri di più sulle istruzioni di Sviluppo App nella [documentazione Sviluppo App][1]."
        },
        "csd-2022/applab-overview": {
          "display_name": "Panoramica",
          "content": "Sviluppo App è uno strumento creato con [JavaScript][0] che può essere utilizzato per creare app. Scopri di più sulle istruzioni di Sviluppo App nella [documentazione Sviluppo App][1]."
        },
        "csd-2022/arrays": {
          "display_name": "Matrici (arrays)",
          "content": "Una _matrice_ (o array) è un gruppo di valori memorizzati in un ordine particolare. Di solito questi valori sono tutti dello stesso tipo (come tutti i numeri, tutto il testo o anche tutti gli sprite), ma in JavaScript, le matrici possono contenere anche diversi tipi di elementi. È possibile utilizzare le matrici per creare un elenco di elementi da archiviare in un'unica variabile.\n\n## Creazione e utilizzo di matrici\n\nLe matrici hanno l'aspetto di elenchi racchiusi tra parentesi quadre. Ogni valore della matrice deve essere separato da virgole.\n\n`[1,5,7,2]`\n\nOgni volta che crei una matrice, dovrai memorizzarlo subito in una variabile in modo da poter accedere ai valori in un secondo momento. Poiché questo è così importante, il blocco per creare una matrice memorizza automaticamente la matrice in una variabile.\n\n\\[[0]]\n\nÈ possibile accedere a un valore all'interno della matrice utilizzando il suo numero di indice. I numeri dell'indice partono da 0 e contano fino a raggiungere la fine della matrice. Ad esempio, nella matrice precedente, «a» è all'indice 0, «b» è all'indice 1 e «c» è all'indice 2."
        },
        "csd-2022/board-events": {
          "display_name": "Eventi della scheda",
          "content": "Il blocco [`onEvent`(#fff176)][0] aiuta la tua app a sapere quando succede qualcosa, ad esempio quando qualcuno fa clic su un pulsante o sposta il mouse. Il Circuit Playground ha un blocco simile chiamato [`onBoardEvent()`(#f78183)][1] che osserva le cose che accadono sul tabellone.\n\nNella programmazione a eventi (o Event-Driven), ricorda che:\n\n-   **Le persone fanno accadere gli eventi** - Gli eventi accadono quando qualcuno usa i pulsanti, gli interruttori o altre parti del tabellone.\n-   **Gli eventi fanno funzionare il codice** - Quando si verifica un evento, può far funzionare una determinata funzione.\n\n## onBoardEvent\n\nIl blocco [`onBoardEvent()`(#f78183)][2] è un tipo speciale di funzione chiamata gestore di eventi (event listener). Semplifica l'impostazione della gestione degli eventi con una sola istruzione. Ecco un esempio con le etichette:\n\n[][3]\n\n1.  Quando si fa clic sul pulsante sinistro, `buttonL`, sullo schermo viene visualizzata la parola \"clic\". Usiamo la variabile `buttonL` (senza virgolette), che è diversa da onEvent che usa una stringa per nominare un elemento di progettazione.\n\n2.  Questa funzione non ha un nome ed è chiamata funzione di callback (codice di richiamo). È un po' strano perché non lo usi direttamente nel tuo codice. Al contrario, il sistema richiama la funzione di callback quando si verifica l'evento scelto. Le funzioni di callback sono molto utilizzate nella programmazione guidata dagli eventi.\n\n## Pulsante Eventi\n\n⚠️ Un avvertimento! I pulsanti Circuit Playground e micro:bit possono sembrare simili, ma i loro nomi sono leggermente diversi:\n\n-   I pulsanti **Circuit Playground** sono denominati `buttonL` e `buttonR`\n-   I pulsanti **BBC micro:bit** sono denominati `buttonA` e `buttonB`"
        },
        "csd-2022/body-styling": {
          "display_name": "Stile del corpo del testo (=body)",
          "content": "L'elemento `<body>` è un elemento speciale che racchiude tutto il contenuto visibile di una pagina web. Poiché tutto ciò che vedi è all'interno di questo tag, qualsiasi set di regole che crei per l'elemento body verrà applicato a ogni elemento sulla pagina, a meno che l'elemento stesso non abbia una regola che lo contraddica. Questo è utile per stabilire uno stile di base per tutto sulla tua pagina.\n\n## Esempio\n\nQuesto set di regole renderebbe tutto il testo della tua pagina web blu e centrato.\n\nbody {\n        text-align: center;\n        color: blue;\n    }\n\n## FAQ\n\n1.  **Cosa fa il \"body selector\"?**\n    -   Poiché il contenuto della pagina web è tutto all'interno del tag `body`, il **body selector** fornisce regole di stile per _tutto_ sulla pagina web."
        },
        "csd-2022/booleans-and-comparison-operators": {
          "display_name": "Condizioni logiche (o espressioni booleane) e operatori di confronto",
          "content": "## Frullato di parole: istruzioni conditionali, condizioni logiche, espressioni, istruzioni\n\n<div style=\"width: 33%; float: right; border: solid 1px #00adbc; padding: 10px; margin: 10px;\">\n<Strong>Historical Notes on Booleans</Strong><br>\n<li> Named after mathematician George Boole \n<li> He invented a corner of mathematics that is now named after him called \"Boolean Algebra\" \n<li> Boolean Algebra is math that operates using only true/false values. \n<li> This is important work for computer science because true/false maps very easily to binary.\n</div>\n\nCome hai visto nel video, ci sono un sacco di termini che generalmente parlano tutti della stessa cosa.\n\n**Valori booleani, valori booleani, espressioni booleane:**\n\n-   Un **valore booleano** è semplicemente un termine informatico che indica **un valore vero/falso**.\n-   Un'**espressione booleana** è un'istruzione che _valuta_ in un valore booleano (un singolo vero/falso).\n\n**Condizione, condizionali, istruzioni condizionali**:\n\n-   \"Condizionale\" è semplicemente un termine generico per il codice che altera il flusso del programma in base a valori vero/falso (come un'istruzione [`if`(#64d5ff)][0])\n-   Esempi: Condizione, Condizionali, Istruzioni condizionali, esecuzione condizionale\n\n## Operatori di confronto\n\n<img src=\"https://images.code.org/79f2ae7d27a3fa434138aeeb17146cab-image-1479413755076.png\" style=\"float: left; margin-left: 20px; margin-right: 20px\">\n\nUn tipo comune di condizione da verificare è il confronto di due valori. Ecco 6 comuni **operatori di confronto**. Ognuno confronta un valore a sinistra con un valore a destra e restituisce un valore booleano -- **true** o **false**. La maggior parte di questi fa quello che ti aspetteresti.\n\n### Perché questi simboli: **==**, **!=**, **\\<=** e **>=**?\n\n1.  Li usiamo `==` perché il singolo segno di uguale <code>=</code> è l'operatore di assegnazione. Abbiamo bisogno di qualcosa di diverso per indicare che vogliamo confrontare due valori invece di assegnarne uno all'altro.\n\n     **Errore comune:** scrivere qualcosa come [`if(age = 18)`(#64d5ff)][1] invece di [`if(age == 18)`(#64d5ff)][2]. Ci assicureremo di metterlo giù più tardi.\n\n2.  Usiamo `!=`, `<=`, and `>=` perché richiedono solo simboli ASCII. Storicamente i simboli matematici <code>≠</code>, <code>≤</code> and <code>≥</code> erano difficili o impossibili da produrre su alcuni sistemi. Il `!` è universalmente letto come \"no\".\n\n<div style=\"clear: both\">&nbsp;</div>\n\n## Riferimento: esempi\n\nDi seguito sono riportati alcuni esempi di come potresti visualizzare i confronti nel codice. Rivedili se ti piace o continua e torna se hai bisogno di ulteriori riferimenti.\n\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/ea8cf41d0e06e6ddee31086fbb9ea2b9-image-1479232029068.png\" style=\"float: left; margin-left: 50px; margin-right: 50px\">\n\nConfronta due valori (numeri, stringhe o altri valori booleani) e restituisce _true_ se sono uguali, altrimenti _false_.\n\n-   `\"Hello\" == \"hello\"` restituisce _false_ -- perché le stringhe sono maiuscole in modo diverso.\n-   `\"3\" == 3` restituisce _true_ -- perché `==` cerca di essere indulgente. Se può \"costringere\" una stringa in un numero, lo farà per confrontare. <sup>1</sup>\n-   `(2+1) == 3` restituisce _true_ -- perché l'espressione aritmetica restituisce 3.\n-   `x == 7` restituisce _true_ -- quando la variabile x ha il valore 7.\n\n<sup>1.</sup> Anche se è una caratteristica utile che `==` trasformi una stringa in un numero, è considerato **TRICKY** perché la stringa \"3\" non è la stessa del numero intero 3 Ci sono momenti in cui potresti credere che questi non siano uguali. Esiste un operatore di uguaglianza \"rigorosa\" - il \"triplo uguale\" `===` che assicura che sia il tipo di dati che il valore siano uguali. Quindi `\"3\" === 3` è falso.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/67fc10f1dec4f129c64c62d583ebf7ee-image-1479232142029.png\" style=\"float: left; margin-left: 50px; margin-right: 50px\">\n\nConfronta due valori (numeri, stringhe o altri valori booleani) e restituisce \"true\" se **non sono uguali**, altrimenti \"false\".\n\n-   `\"Hello\" != \"hello\"` restituisce _true_ -- perché le stringhe sono leggermente diverse.\n-   `\"3\" != 3` restituisce _false_ -- perché la stringa 3 può essere convertita in un numero prima di essere confrontata con 3. (vedi le note sopra relative al perdono ==).\n-   `(2+1) != 3` restituisce _false_ -- perché l'espressione aritmetica restituisce 3.\n-   `x != 7` restituisce _true_ -- quando la variabile x _è qualsiasi valore diverso da_ 7.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img style=\"float: left; margin-left: 50px; margin-right:50px; margin-bottom: 20px;\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/536aed5657843fca3b52a044f2f3bdc7-image-1479242736018.png\">\n\nConfronta due valori per vedere se il numero a sinistra è <em>maggiore di</em> il numero a destra.\n\n-   `4 > 3` restituisce _true_\n-   `3 > 7` restituisce _false_\n-   `age > 17` restituisce _true_ -- quando il valore della variabile \"age\" è strettamente maggiore di 17, altrimenti false.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/3c7c9336270e093bad437d69d155a8c7-image-1479242773012.png\" style=\"float: left; margin-left: 50px; margin-right:50px; margin-bottom: 20px;\">\n\nConfronta due valori per vedere se il numero a sinistra è <em>minore di</em> il numero a destra.\n\n-   `4 < 3` restituisce _false_\n-   `3 < 7` restituisce _true_\n-   `age < 17` restituisce _true_ -- quando il valore della variabile \"age\" è rigorosamente minore di 17, altrimenti false.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/e899b0040a9f8ddc899b1df66773be74-image-1479242843374.png\" style=\"float: left; margin-left: 50px; margin-right: 50px; margin-bottom: 20px\">\n\nConfronta due valori per vedere se il numero a sinistra è _minore o uguale a_ il numero a destra.\n\n-   `3 <= 4` restituisce _true_\n-   `4 <= 3` restituisce _false_\n-   `age <= 18` restituisce _true_ -- quando il valore della variabile \"age\" è 18 o meno.\n\n<div style=\"clear:both\"> </div>\n\n<hr>\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/2ca857bff29bca22a2a42433c6b3981f-image-1479242807960.png\" style=\"float: left; margin-left: 50px; margin-right: 50px; margin-bottom: 20px\">\n\nConfronta due valori per vedere se il numero a sinistra è _maggiore o uguale a_ il numero a destra.\n\n-   `3 >= 4` restituisce _false_\n-   `4 >= 3` restituisce _true_\n-   `age >= 18` restituisce _true_ -- quando il valore della variabile \"age\" è 18 o superiore.\n\n<div style=\"clear:both\"> </div>\n\n<hr>"
        },
        "csd-2022/changing-screens": {
          "display_name": "Modificare le schermate",
          "content": "## Utilizzo del comando _setScreen_ per cambiare schermate con il programma\n\nIl comando [`setScreen`(#fff176)][1] cambia la schermata per mostrare quello che vuoi. Si specifica la schermata tramite il suo ID.\n\n[][2]\n\n[][0]\n\n1.  Trova [`setScreen`(#fff176)][3] nella casella degli strumenti Elementi dell'interfaccia utente e trascinalo nell'area di lavoro del codice.\n2.  La maggior parte delle volte si cambia la schermata in risposta a qualche evento dell'utente. In questo caso [`setScreen`(#fff176)][4] viene aggiunto a un gestore di eventi \"click\" per l'immagine con ID \"smileyFace\"\n3.  Selezionare l'ID della schermata che si desidera modificare. In questo caso, quando si fa clic sulla faccina sorridente sullo schermo che dice \"ciao\", vogliamo passare allla schermata che dice \"arrivederci\".\n4.  **Idea chiave: Schermi multipli - Un'area di lavoro di codifica.** Questo è il codice che gestisce un evento \"clic\" per un'_immagine che si trova su una schermata diversa_ - il \"goodbyeScreen\". Non puoi vedere quell'immagine in questo momento, o quella schermata, perché la schermata non è selezionata. Tuttavia, il codice per essa va inserito ancora qui.\n\n[/][0]"
        },
        "csd-2022/changing-sensor-scale": {
          "display_name": "Modificare la scala del sensore",
          "content": "Per impostazione predefinita, ciascuno dei sensori del Circuit Playground e dei dispositivi micro:bit converte i dati rilevati in un intervallo particolare.\n\n-   Il Circuit Playground converte i dati in un intervallo con un valore minimo di 0 e un massimo di 1023. \n-   Il micro:bit converte i propri dati in un intervallo con un valore minimo di 0 e un valore massimo di 255.\n\nPer alcuni programmi, potresti voler regolare questi intervalli in base alle tue esigenze.\n\n## Imposta la scala\n\nIl metodo _setScale_ consente di sovrascrivere l'intervallo predefinito di un sensore. Ad esempio, chiamando [`LightSensor.setScale (0, 100) `(#f78183)][0] cambierà la scala del [`LightSensor.value` (#f78183)][1] in modo che il valore più basso (completamente scuro) sia 0 e il più alto (completamente luminoso) sia 100.  "
        },
        "csd-2022/checking-multiple-conditions-with-if-else-if": {
          "display_name": "Verifica più condizioni con se-altrimenti-se (If-Else-If)",
          "content": "| Nome                                      | Codice (blocco) | Codice (testo) |\n| ----------------------------------------- | --------------- | -------------- |\n| Verifica di più condizioni con If-Else-If | [][0]           | [][1]          |\n\n## Come funziona?\n\nIl comando `if-else-if` consente di controllare più condizioni booleane. Il computer controllerà le condizioni nell'ordine in cui sono scritte fino a quando una delle espressioni booleane non restituisce \"true\". Il codice associato a quell'espressione booleana verrà eseguito, ma tutti gli altri verranno saltati. Se nessuna delle espressioni restituisce \"true\", verrà eseguito il codice all'interno del comando \"else\".\n\n## Prima i casi più specifici\n\nQuando scrivi un'istruzione if-else-if, vuoi mettere prima i casi più specifici. Nell'esempio di temperatura sopra si desidera controllare prima le temperature superiori a 100 gradi. Successivamente il codice verifica la presenza di temperature superiori a 90 gradi, ma a causa dell'ordine in cui è scritto il codice sai che nessuna delle temperature che troverai è superiore a 100 gradi. Dopotutto li avresti colti nella precedente dichiarazione if. Ciò significa che puoi essere certo che qualsiasi temperatura rilevata sarà compresa tra 90 e 100 gradi. Mentre continui con l'istruzione if-else-if, usi la stessa logica per verificare i diversi intervalli di temperatura.\n\n## Un esempio non funzionante: lascia per ultimi i casi più specifici\n\nQuesto è un esempio non funzionante che mostra cosa succede se inizi a controllare le temperature in ordine inverso, i casi più specifici per ultimi.\n\n[][2]\n\nPensa a cosa accadrebbe quando questo codice viene eseguito per la temperatura di 82 gradi. Vorresti che l'output dicesse `\"Fa caldo\"`. Se guardi la prima espressione booleana, tuttavia, noterai che 82 è maggiore di 60 gradi, rendendo l'espressione booleana valutata come \"vera\". Come risultato il codice produrrà `\"It's cool\"`. Questo perché la prima espressione non è effettivamente la più specifica."
        },
        "csd-2022/circuit-playground": {
          "display_name": "Panoramica del Circuit Playground",
          "content": "Il Circuit Playground è un semplice computer a scheda singola con molti ingressi e uscite integrati da esplorare. Prima di scavare troppo in profondità, però, iniziamo con le basi.\n\n### Il diodo a emissione di luce (LED)\n\nQuando un computer deve solo comunicare informazioni semplici, spesso una luce intermittente è il modo più rapido e semplice per farlo. I LED, o diodi a emissione luminosa, sono dispositivi piccoli, a bassa potenza e facili da usare per comunicare con la luce. Dai un'occhiata all'immagine Circuit Playground a destra.\n\n<img src=\"//curriculum.code.org/images/circuitplayground/cp_leds.png\" style=\"float: right; width: 400px; margin-left: 10px;\">\n\n1.  La porta USB ti consente di collegare il Circuit Playground. Collegandolo puoi comunicare con la scheda in Sviluppo App, ma fornisce anche elettricità alla scheda in modo che possa fare cose come accendere i LED.\n2.  Il **LED di alimentazione** verde non può essere controllato tramite codice, ma ti consente di sapere se la scheda sta ricevendo elettricità. Se questo LED è spento, non aspettarti che nulla sulla tua scheda funzioni.\n3.  Il **LED** rosso può essere controllato in Sviluppo App utilizzando i blocchi [`led`(#f78183)][0]. Può anche essere usato per aiutare a eseguire il debugging della tua scheda: ogni volta che colleghi la scheda, dovresti vedere questo LED lampeggiare per alcuni secondi.\n\n### Collegalo\n\nCollega la scheda al computer tramite un cavo USB e osserva come rispondono questi due LED. In quale altro modo potresti utilizzare una singola luce per comunicare informazioni utili a un utente?"
        },
        "csd-2022/circuit-playground-parent": {
          "display_name": "Adafruit Circuit Playground",
          "content": "Queste risorse fanno riferimento a funzionalità specifiche di [Circuit Playground][0]."
        },
        "csd-2022/circuits-and-buttons": {
          "display_name": "Tasti esterni sul Circuit Playground",
          "content": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png\" alt=\"Button Up and Down\" style=\"width:300px; float: right; margin: 0 20px;\">\n\nPer creare un pulsante o un interruttore è sufficiente un circuito facilmente collegabile e scollegabile. Come un circuito LED, è possibile creare un circuito pulsante collegando un cavo a un pin dati e un altro cavo a un pin di terra. Per \"chiudere\" il circuito (che è come premere un pulsante) si collegano i due cavi, toccandoli l'uno con l'altro o collegandoli a un componente hardware (come un pulsante o un interruttore) che può essere utilizzato per aprire e chiudere il circuito. Un pulsante \"aperto\" equivale all'evento del pulsante \"up\", mentre un circuito \"chiuso\" equivale all'evento del pulsante \"down\".\n\nCon una scheda Circuit Playground Express, puoi creare un circuito pulsante su qualsiasi pin **\"A6\"**, **\"A5\"**, **\"A4\"**, **\"A0\"** o **\"A1\"**\n\nCon una scheda Circuit Playground Classic, puoi creare un circuito pulsante su uno qualsiasi dei pin **0**, **2**, **3**, **6** e **12**.\n\n<div style=\"clear: entrambi\"></div>\n\n## Creazione di circuiti di pulsanti\n\nPer creare un circuito di pulsanti avrai bisogno di un pin dati, due cavi e un pin di terra.\n\n-   Collega un cavo al tuo pin dati numerato.\n-   Collegare un cavo diverso a un pin di terra.\n\n## Codifica di un circuito di pulsanti (Circuit Playground Express)\n\n     \\\\ Crea un perno attaccato al pulsante A5\n     var myButton = createButton(\"A5\");\n\n     \\\\ Aggiungi un gestore di eventi al nuovo pulsante\n     onBoardEvent(myButton, \"down\", function() {\n     console.log(\"button pressed\");\n     });\n\n## Codifica di un circuito di pulsanti (Circuit Playground Classic)\n\n     \\\\ Crea un pin collegato al pulsante 0\n     var myButton = createButton(0);\n\n     \\\\ Aggiungi un gestore di eventi al nuovo pulsante\n     onBoardEvent(myButton, \"down\", function() {\n     console.log(\"button pressed\");\n     });"
        },
        "csd-2022/circuits-and-leds": {
          "display_name": "LED esterni sul Circuit Playground",
          "content": "<img alt=\"Circuit Playground Data Pins\" src=\"https://images.code.org/6821153181b10ce9d5fdc1459beb4445-image-1643339359352.png\" style=\"width:400px; float: right; margin: 0 20px\">\n\nUtilizzando i pad numerati sul Circuit Playground, puoi creare circuiti personalizzati che includono componenti esterni, come LED e pulsanti. Le specifiche di come un circuito viene cablato dipendono dall'hardware specifico che stai tentando di aggiungere, ma tutti i circuiti utilizzeranno alcune combinazioni di pin di alimentazione (che forniscono alimentazione), pin di terra (che sono il punto finale di un circuito) e pin di dati numerati (che possono inviare un segnale di uscita o leggere un ingresso). _Attenzione:_ alcuni dei pin dati sono riservati a funzioni speciali sulla scheda, quindi quando crei i tuoi circuiti, assicurati di utilizzare solo i seguenti pin:\n\nCon una scheda Circuit Playground Express, usa solo pin **\"A6\"**, **\"A5\"**, **\"A4\"**, **\"A0\"** o **\"A1\"**\n\nCon una scheda Circuit Playground Classic, utilizza solo pin **0**, **2**, **3**, **6** e **12**.\n\n## Creazione di circuiti LED\n\nUno dei circuiti più semplici che puoi realizzare con il tuo Circuit Playground è aggiungere un LED. Per creare questo circuito avrai bisogno di un pin dati, due cavi e un pin di terra.\n\n-   Collegare un cavo dal pin dati al lato positivo (**+**) del LED.\n-   Collegare un cavo diverso dal lato negativo (**-**) del LED a qualsiasi pin di terra.\n-   Utilizzando il codice, imposta il pin scelto su \"output\" e attivalo:\n\n## Codifica di un circuito LED (Circuit Playground Express)\n\n     // Crea un LED collegato al pin A5\n     var myLed = createLed(\"A5\");\n\n     // Fai lampeggiare il mio Led\n     myLed.blink(200);\n\n## Codifica di un circuito LED (Circuit Playground Classic)\n\n     // Crea un LED collegato al pin 2\n     var myLed = creaLed(2);\n\n     // Fai lampeggiare il mio Led\n     myLed.blink(200);\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/alligator.png\" style=\"float: left; width: 30%; margin: 10px 5% 10px 0;\">\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp-wire.png\" style=\"float: left; width: 30%; margin: 10px 5% 10px 0;\">\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp-foil.png\" style=\"float: left; width: 30%; margin: 10px 0;\">\n\nNon devi usare niente di speciale per creare un circuito semplice come questo - qualsiasi cosa che conduca bene l'elettricità andrà bene. Puoi recuperare il cavo dalle vecchie luci natalizie o utilizzare un foglio di alluminio per una soluzione rapida, ma puoi anche acquistare cavo conduttivo che ti consentirà di cucire i tuoi circuiti o ottenere nastro di rame per realizzare circuiti pieghevoli su carta.\n\n## Debug LED\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/sequin.png\" style=\"width: 500px;\" class=\"center\">\n\nI LED sono piuttosto semplici da usare, ma ci sono un paio di trucchi da tenere a mente:\n\n-   Devi prestare attenzione alla direzione in cui scorre l'elettricità, perché i LED funzionano solo in una direzione. Collega sempre il lato positivo del LED alla fonte di alimentazione e il lato negativo a terra.\n-   I LED hanno bisogno di un componente chiamato _resistenza_ per assicurarsi che stiano ricevendo (e prendendo) la giusta quantità di elettricità. Le paillette LED (come l'immagine sopra) hanno un resistore integrato, ma se vuoi usare un semplice LED dovrai aggiungere un resistore su entrambi i lati per evitare di danneggiare la scheda o il LED."
        },
        "csd-2022/classes": {
          "display_name": "Classi",
          "content": "A volte si desidera applicare uno stile solo ad alcuni elementi specifici di un tipo anziché a tutti gli elementi di un tipo. **Le classi consentono a un gruppo di elementi di avere il proprio stile unico.** Questo si applica agli elementi sulla stessa pagina o su pagine separate, purché tutte le pagine siano collegate allo stesso foglio di stile.\n\nPer modellare usando le classi:\n\n1.  Innanzitutto, devi contrassegnare gli elementi in HTML che saranno in quella classe.\n2.  Secondo, devi scrivere un set di regole di stile per quella classe. Per scrivere una regola per una classe di elementi, il selettore per il set di regole ha un `.` prima del nome della classe.\n\nAd esempio, il codice seguente darebbe uno stile alla classe di fantasia che è stata impostata per un elemento di paragrafo:\n\n| File Html                                                         | File CSS                                                                   | Risultato                                                                                                                |\n| ----------------------------------------------------------------- | -------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| <pre> \\<p class=\"fancy\">Good Day\\</p> <br> \\<p>Bad Day\\</p></pre> | <pre>.fancy {<br>  color: darkblue;<br>  font-family: cursive;<br>} </pre> | <img src=\"https://images.code.org/27181e31f4e697a85f1794f28070ba14-image-1481648310560.58.03 AM.png\" alt=\"result image\"> |\n\n<br>\n\n## FAQ\n\n1.  **Perché uno sviluppatore web dovrebbe utilizzare le classi?**\n    -   Uno sviluppatore web utilizza le classi quando alcuni elementi devono avere uno stile diverso rispetto ad altri, anche se sono lo stesso tag. Le classi possono anche essere utilizzate per dare lo stesso stile a elementi che hanno tag diversi.\n\n**Collegamenti W3 Schools**\n\n-   [sintassi CSS (classi)][0]"
        },
        "csd-2022/collision-detection": {
          "display_name": "Rilevamento delle collisioni",
          "content": "A volte, vorrai sapere quando due personaggi si toccano. Sviluppo Giochi utilizza il metodo [`isTouching`(#f78183)][0] per verificare se un personaggio sta toccando un altro personaggio (il bersaglio).\n\n<img src=\"http://curriculum.code.org/media/uploads/istouching.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`isTouching`(#f78183)][1] restituisce un booleano, quindi può essere usato all'interno di un condizionale per far accadere qualcosa solo quando i due personaggi si toccano. Ad esempio, il codice seguente cambia l'animazione dell'anguria quando il personaggio del coltello la tocca.\n\n<pre>\n\nfunction draw() {\n  if (knife.isTouching(watermelon)) {\n    watermelon.setAnimation(\"slice\");\n  }\n  background(\"burlywood\");\n  drawSprites();\n}\n\n</pre>\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n### Collisori\n\nQuando Sviluppo Giochi controlla se due cose si toccano, non sa quali parti dell'immagine sono visibili. Invece, controlla se i collisori si toccano. La dimensione dei collisori è determinata dalla dimensione dell'animazione che stai usando, anche dalle parti che non puoi vedere. Puoi vedere i collisori impostando la proprietà [`debug`(#f78183)][2] delpersonaggio su `true`.\n\nNei due esempi a destra, [`debug`(#f78183)][3] è stato impostato su `true`, quindi puoi vedere il contorno verde dei collisori e che l'animazione cambia quando si toccano, anche se le immagini del coltello e dell'anguria non si toccano.\n\nNel secondo esempio, i collisori sono molto grandi, quindi l'animazione dell'anguria cambia molto prima che il coltello la tocchi.\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders2.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n<pre>\nwatermelon.debug = true;\nknife.debug = true;\n\nfunction draw() {\n  if (knife.isTouching(watermelon)) {\n    watermelon.setAnimation(\"slice\");\n  }\n  background(\"burlywood\");\n  drawSprites();\n}\n</pre>\n\nPuoi anche cambiare la forma dei collisori usando il metodo [`setCollider`(#f78183)][4]. Questo metodo rende il collisore un cerchio o un rettangolo.\n\n<pre>\nwatermelon.debug = true;\nknife.debug = true;\nwatermelon.setCollider(\"circle\");\nknife.setCollider(\"circle\");\n\nfunction draw() {\n  if (knife.isTouching(watermelon)) {\n    watermelon.setAnimation(\"slice\");\n  }\n  background(\"burlywood\");\n  drawSprites();\n}\n</pre>"
        },
        "csd-2022/color-lights": {
          "display_name": "Luci colorate",
          "content": "<img src=\"//curriculum.code.org/images/circuitplayground/cp_colorleds.png\" style=\"float: right; width: 400px; margin-left: 25px;\">\n\nIntorno al bordo della tua scheda, noti che ci sono dieci LED aggiuntivi. Questi LED sono leggermente diversi da quelli che abbiamo visto prima; questi sono LED multicolori.\n\n### LED RGB\n\nI LED colorati sono in realtà ciascuno composto da tre LED più piccoli: un rosso, un verde e un blu. Per questo motivo, spesso chiamiamo questi LED RGB (rosso-verde-blu = red-gren-blue).\n\nPoiché ci sono così tanti di questi LED, li abbiamo memorizzati in un elenco chiamato [`colorLeds`(#f78183)][0]. Il primo LED RGB nell'elenco (posizione 0) si trova accanto al LED di alimentazione verde, e gli altri seguono in senso antiorario intorno alla scheda, terminando al decimo LED RGB (posizione 9) accanto al LED rosso.\n\n### Scegli un colore\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/colorLeds_color.png\" style=\"float: right; margin-left: 10px;\">\n\nPer impostazione predefinita, tutti i LED colorati saranno bianchi quando li accendi. Puoi impostare il colore di un LED RGB in molti modi, incluso usando il nome di un colore (come \"red\") una stringa esadecimale (come \"#FF0000\") o usando il comando `rgb()` (per esempio `rgb(255,0,0)`).\n\nSe un LED colorato è spento, `colorLeds[i].color()` imposterà il colore e lo accenderà."
        },
        "csd-2022/counter-patterns-with-event": {
          "display_name": "Schemi a contatore con evento",
          "content": "## Revisione delle variabili\n\nLe variabili memorizzano le informazioni. La variabile è definita sul lato sinistro dell'espressione e il valore è impostato sul lato destro.\n\n[][0]\n\nLeggeremmo questa espressione così:\n\n\\*La variabile `score` ottiene il valore 3\n\n## Schema a contatore con evento\n\n| Nome                          | Codice (blocco) | Codice (testo)                                                                                                     |\n| ----------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------ |\n| Schema a contatore con evento | [][1]           | <div>`var myVar = 0;` <br><br> `onEvent(\"id\", \"click\", function() {` <br>    `myVar = myVar + 1;` <br> `});`</div> |\n\nLo schema potrebbe essere letto così:\n\n_La variabile `myVar` ottiene il valore 0. Quando onEvent viene attivato da un clic, la variabile viene aggiornata. `myVar` ora ottiene il valore corrente di `myVar` e ne aggiunge uno. Il nuovo valore viene quindi memorizzato in `myVar`._\n\n### Come funziona?\n\nQuando l'evento viene attivato, la variabile viene aggiornata. Il valore corrente della variabile viene aumentato o diminuito di una quantità impostata. Il nuovo valore viene memorizzato nella variabile.\n\n### Esempi\n\n[][2]\n<br>\n_La variabile `score` ottiene il valore 0. Quando onEvent viene attivato da un clic sul pulsante, la variabile viene aggiornata. `score` ora ottiene il valore corrente di `score` e ne aggiunge uno. Il nuovo valore viene quindi memorizzato in `score`. Il punteggio viene quindi visualizzato sullo schermo._\n\n[][3]\n<br>\n_La variabile `score` ottiene il valore 50. Quando onEvent viene attivato da un clic sul pulsante, la variabile viene aggiornata. `score` ora ottiene il valore corrente di `score` e ne sottrae tre. Il nuovo valore viene quindi memorizzato in `score`. Il punteggio viene quindi visualizzato sullo schermo._"
        },
        "csd-2022/creating-a-survey": {
          "display_name": "Creazione di un sondaggio",
          "content": "È possibile utilizzare un modulo online per raccogliere dati che possono essere importati in Laboratorio IA. Questo può essere fatto in Sviluppo App, Google Forms, Microsoft Forms o qualsiasi altra app per moduli che ti consente di esportare i tuoi dati come file CSV.\n\n## Utilizzo di un modello di modulo Google\n\nAbbiamo creato un modello di modulo Google che puoi utilizzare per creare un sondaggio: [fai clic qui per creare una copia del modello][2]. Dopo aver creato una copia, puoi modificare le domande del modello in base alle tue esigenze:\n\n### Domande categoriali\n\n<img style=\"margin-right: 10px; margin-left: 10px; bordo: 2px nero pieno\" src=\"https://curriculum.code.org/media/uploads/Categorical-Questions.png\"/>\n\n[][0]\n\n1.  Per i dati categoriali, assicurati che la domanda sia elencata come domanda a scelta multipla.\n2.  Digita la tua domanda. Facoltativamente, puoi aggiungere una descrizione con ulteriori informazioni.\n3.  Inserisci ogni risposta come propria scelta. _non_ aggiungere un'opzione Altro, poiché ciò consentirà agli utenti di digitare le proprie risposte che potrebbero causare problemi in Laboratorio IA.\n4.  Assicurati che la domanda sia impostata come \"Obbligatoria\".\n\n[/][0]\n\n### Domande numeriche\n\n<img style=\"margin-right: 10px; margin-left: 10px; bordo: 2px nero pieno\" src=\"https://curriculum.code.org/media/uploads/Numerical-Questions.png\"/>\n\n[][1]\n\n1.  Per i dati numerici, assicurarsi che la domanda sia elencata come domanda a risposta breve.\n2.  Digita la tua domanda. Facoltativamente, puoi aggiungere una descrizione con ulteriori informazioni.\n3.  Assicurati di selezionare Convalida risposta nel menu a tre punti nell'angolo in basso a destra. Quindi, scegli \"Numero\" e \"Is Number\" dalle opzioni di convalida. Ciò garantisce che l'utente possa inserire solo numeri in questo campo.\n4.  Assicurati che la domanda sia impostata come \"Obbligatoria\".\n\n[/][1]\n\n## Video\n\n(Apre YouTube in una nuova scheda)\n\n[undefined][3]"
        },
        "csd-2022/creative-commons-search": {
          "display_name": "Creative Commons Search",
          "content": "Poiché Creative Commons fornisce un modo così semplice per sapere quali media puoi e non puoi utilizzare, molti motori di ricerca hanno integrato il filtro Creative Commons per garantire che ti forniscano solo risultati che puoi utilizzare. Quando utilizzi un motore di ricerca che supporta il filtro Creative Commons, di solito devi solo selezionare alcune caselle per assicurarti che i contenuti multimediali che trovi siano concessi in licenza per il tuo utilizzo.\n\n## Impostazioni di ricerca\n\nQuando utilizzi un motore di ricerca compatibile con Creative Commons, ti consigliamo di cercare un'impostazione che controlli la **licenza** dei risultati di ricerca. Ad esempio, la ricerca di immagini di Google ha un menu a discesa che ti consente di selezionare tra una manciata di diverse licenze Creative Commons.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-05-02-11.43.56.png\" alt=\"Google CC Image Search\" class=\"center\" style=\"max-width: 400px;\">\n\nIn generale dovresti cercare supporti con licenza per uso **non commerciale**. Se prevedi di apportare modifiche ai media che trovi (come l'aggiunta di testo a un'immagine), dovrai anche assicurarti di avere il diritto di **modificare, adattare o sviluppare** i risultati della tua ricerca.\n\n## Riconoscere il credito\n\nQuando trovi un'immagine o un altro file multimediale che ti piace, assicurati non solo di ottenere una copia del file, ma anche di tenere traccia delle informazioni necessarie per dare credito al suo creatore. Per ogni file che desideri utilizzare, procedi nel seguente modo:\n\n-   Scarica una copia sul tuo computer (in modo da poterla caricare sul tuo sito web nel passaggio successivo)\n-   Annota tutte le informazioni che puoi trovare sull'autore, come ad esempio\n    -   Nome o soprannome\n    -   URL del sito web (non URL dell'immagine stessa)\n    -   Titolo dell'immagine"
        },
        "csd-2022/css": {
          "display_name": "CSS",
          "content": "CSS (Cascading Style Sheets) è il linguaggio utilizzato per definire lo stile e il layout delle pagine web. Puoi trovare ulteriori informazioni sulle regole CSS alla pagina [Documentazione Sviluppo web][0] ."
        },
        "csd-2022/css-overview": {
          "display_name": "Panoramica",
          "content": "CSS (Cascading Style Sheets) è il linguaggio utilizzato per definire lo stile e il layout delle pagine web. Puoi trovare ulteriori informazioni sulle regole CSS alla pagina [Documentazione Sviluppo web][0] ."
        },
        "csd-2022/data-and-change-events": {
          "display_name": "Dati ed eventi di modifica",
          "content": "Quando si utilizzano i sensori, è più comune controllare continuamente le modifiche anziché controllare solo quando qualcuno fa clic su un pulsante. Ci sono eventi speciali per questo che continuano a funzionare.\n\n## L'evento Data\n\n[data event][0]\n\nL'evento «data» si verifica ogni volta che il programma riceve informazioni dalla scheda. Ciò accade continuamente mentre il programma è in funzione. Quando configuri un gestore [`onboardEvent()`(#f78183)][1] per l'evento «data», il codice verrà eseguito ogni 50 millisecondi.\n\nRicorda che, anche se l'evento «dati» è collegato a un sensore specifico, puoi verificare la presenza di nuove informazioni da molti sensori nel gestore eventi.\n\n## L'evento `change`\n\n[change event][2]\n\nCome l'evento «dati», l'evento «change» continua a verificarsi, consentendoti di ottenere informazioni dai sensori in ogni momento. Tuttavia, l'evento «change» si verifica solo se il valore del sensore cambia abbastanza. Ogni sensore ha una quantità predefinita di modifiche necessaria per attivare un evento di «modifica» (di solito, la quantità è 1).\n\nL'evento «change» è utile perché reagisce solo a nuovi input e non perde tempo a ripetere lo stesso input. Ciò significa che probabilmente vorrai un evento di «change» separato"
        },
        "csd-2022/debugging-html": {
          "display_name": "Debugging di HTML",
          "content": "## Debugging di HTML\n\n\\*\\*Che cos'è un bug? \\*\\*\n\nI bug sono errori nel codice che impediscono il funzionamento previsto.\n\n\\*\\*Che cos'è il debugging? \\*\\*\n\nIl debugging è il processo di individuazione e correzione dei bug. Il debugging è un processo di risoluzione dei problemi, quindi utilizza i passaggi di risoluzione dei problemi quando provi a eseguire il debugging.\n\n\\*\\*Quali sono alcuni esempi di bug? \\*\\* \n\nI bug possono essere qualsiasi cosa che impedisce al codice di funzionare come previsto. Alcuni esempi sono errori di ortografia, inserimento di codice nel posto sbagliato, utilizzo del tag sbagliato o dimenticanza di chiudere un tag."
        },
        "csd-2022/debugging-variable-scope-functions": {
          "display_name": "Debugging nell'ambito delle variabili: funzioni",
          "content": "# Crea variabili una volta, in alto, funzioni esterne o onEvent()\n\nQuando crei variabili dovresti:\n\n-   **Usa `var` solo una volta.** Non è necessario creare variabili due volte e questo può causare errori.\n-   **Crea le tue variabili nella parte superiore del tuo programma.** Ciò mantiene il tuo codice organizzato e più facile da leggere per te e per gli altri.\n-   **Crea le tue variabili al di fuori di qualsiasi blocco `function` o [`onEvent`(#fff176)][0].** Continua a leggere per capire perché.\n\n# Variabili globali e locali\n\nEsistono due tipi di variabili, globali e locali, e finora abbiamo utilizzato solo variabili globali. Ecco la principale differenza tra variabili globali e locali.\n\n| Tipo di variabile | Come funziona                                                                                                                                                                                         | Come è stato creato                                        | Immagine |\n| ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------- | -------- |\n| **Globale**       | Permanente. Può essere utilizzato ovunque nel codice                                                                                                                                                  | `var` utilizzato al di fuori di un [`onEvent`(#fff176)][1] | [][2]    |\n| **Locale**        | Temporaneo. Può essere utilizzato solo nella parte del codice in cui è stato creato, come all'interno di un [`onEvent`(#fff176)][3]. Eliminato al termine dell'esecuzione di [`onEvent`(#fff176)][4]. | `var` utilizzato all'interno di un [`onEvent`(#fff176)][5] | [][6]    |\n\n# Evitare le variabili locali e debugging\n\nLe variabili locali alla fine saranno utili, ma per ora è molto probabile che creino solo confusione. Il problema più grande che incontrerai in questo momento con le variabili locali è l'uso accidentale di `var` all'interno di una [`onEvent`(#fff176)][7] o `funzione`. Ecco come appare solitamente il codice:\n\n<img src=\"https://images.code.org/7dc2b13d85ea17e39639d15488d07f8f-image-1549944350460.png\" style=\"width: 400px\">\n\nQuesto codice è piuttosto confuso. Anche se sembra che sia utilizzata solo una variabile, in realtà ha due variabili, una locale e una globale, e sono entrambe chiamate `count`! La modifica del valore di uno non avrà alcun impatto sull'altro. Ciò può causare un comportamento imprevisto nel codice e può essere complicato eseguire il debugging.\n\nIl modo migliore per evitare questi problemi è **assicurarsi per ora di non utilizzare `var` all'interno di un [`onEvent`(#fff176)][8] o `function`.** Se ti imbatti in un complicato problema di debugging, controlla se stai creando accidentalmente una variabile locale."
        },
        "csd-2022/debugging-with-watchers": {
          "content": "Quando si tenta di eseguire il debugging di un programma, è utile tenere traccia del valore corrente di una variabile o di una proprietà di un personaggio durante l'esecuzione del programma. A volte puoi usare `console.log()` per riportare rapidamente il valore di una variabile, ma non è così utile quando vuoi tenere traccia di più variabili o variabili che cambiano spesso durante il tuo programma.\n\nUn _osservatore_ (watcher) è uno strumento di debugging che, come suggerisce il nome, _osserva_ le tue variabili mentre il programma è in esecuzione, rendendo più facile vedere cosa stanno facendo.\n\n## Utilizzo degli osservatori\n\nGli osservatori si trovano nella sezione Osserva della finestra di debuggig, potrebbe essere necessario decomprimere questa finestra per visualizzarla.\n\n[][1]\n\n[][0]\n\n1.  Qui abbiamo creato una variabile `watch_me` con un valore iniziale di 0. Puoi anche usare gli osservatori per tenere traccia delle proprietà del personaggio.\n2.  Ogni volta che viene eseguito la funzione ciclica `draw()`, stiamo incrementando `watch_me` di 1. Questo lo farà cambiare _30 volte al secondo_.\n3.  Questo è il pannello osservatore. In alto ci sono tutti gli osservatori attualmente aggiunti e sotto c'è un'area per aggiungere nuovi osservatori.\n4.  Durante l'esecuzione del programma, questa sezione si aggiorna continuamente per mostrare il valore corrente della variabile sorvegliata `watch_me`.\n\n[/][0]\n\n## Aggiunta di una variabile da controllare\n\n[][2]\n\nPuoi aggiungere osservatori per qualsiasi variabile o proprietà dell'oggetto digitando il nome di una variabile nella casella e facendo clic sul pulsante blu \"aggiungi\". Se il tuo programma non è in esecuzione o alla variabile non è stato ancora assegnato un valore, l'osservatore riporterà un valore di `undefined`. Questo non è un errore, significa solo che alla variabile non è stato ancora assegnato un valore."
        },
        "csd-2022/design-mode": {
          "display_name": "Modalità interfaccia",
          "content": "In Sviluppo App la «Modalità interfaccia» consente di trascinare gli elementi dell'interfaccia utente nell'app. Proprio come hai creato prototipi su carta disegnando tutti gli elementi dell'interfaccia su carta, la Modalità interfaccia consente di creare prototipi digitali trascinando diversi elementi sulla schermata.\n\n## Esplorazione della Modalità interfaccia\n\n[][1]\n\n[][0]\n\n1.  Vedrai una nuova serie di interruttori sopra l'area dell'app che ti consentono di passare avanti e indietro tra «Modalità interfaccia» e «Modalità codice».\n2.  Aggiungere un elemento è facile: basta trascinarlo e rilasciarlo nell'app dove vuoi. Una volta visualizzato nella schermata dell'app, puoi riposizionarlo, ridimensionarlo e modificare molte altre proprietà.\n3.  La scheda**Proprietà** mostra tutto ciò che puoi modificare sull'aspetto di un elemento dell'interfaccia utente.\n4.  L' **ID elemento** è importante perché è il modo in cui fai riferimento all'elemento nel tuo codice. Discuteremo degli ID degli elementi più avanti.\n5.  Puoi fare in modo che il testo che l'utente vede sul pulsante sia quello che preferisci.\n6.  Scorri verso il basso per vedere se altre proprietà di un elemento dell'interfaccia utente potrebbero trovarsi \"nascoste\" in basso.\n\n[/][0]"
        },
        "csd-2022/design-mode-elements": {
          "display_name": "Elementi della \"Modalità Interfaccia\"",
          "content": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/elements.png\" style=\"float:right; margin-left: 20px; max-width: 200px\"/>\n\nLa modalità interfaccia consente di posizionare sulla schermata diversi tipi di elementi dell'interfaccia utente (o UI). Molti di questi elementi possono essere utilizzati per ricevere input dall'utente.\n\n## Scegliere buoni ID\n\nOgni elemento dell'interfaccia utente nella tua app necessita di un ID a cui puoi fare riferimento in seguito. I buoni ID sono **significativi, descrittivi e unici**.\n\nAd esempio, se hai molti pulsanti nel tuo programma, vorrai assegnare a ciascuno un ID che descriva cosa fa il pulsante.\n\nQuindi, invece di questo:\n\n-   \"pulsante1\" e \"pulsante2\"\n\nPotresti creare ID che ti dicano non solo che si tratta di un pulsante, ma per cosa intendi utilizzare il pulsante, ad esempio:\n\n-   \"homeButton\" e \"saveButton\" o\n-   \"pulsanteHome\" e \"pulsanteSalva\" o\n-   \"pulsante\\_home\" e \"pulsante\\_salva\"\n\n## Regole sugli ID\n\nNella creazione di ID descrittivi e significativi ci **sono alcune regole sugli ID** che devi conoscere. ID...\n\n-   fanno distinzione tra maiuscole e minuscole.\n-   non possono contenere spazi.\n-   _devono_ iniziare con una lettera (A-Z o a-z) e può essere seguito da qualsiasi numero di cifre e lettere.\n-   possono contenere trattini (\"-\"), caratteri di sottolineatura (\"\\_\"), due punti (\":\") o punti (\".\").\n\n**Maiuscole e minuscole?**\n\nCiò significa che c'è una differenza tra \"HomeButton\" e \"homeButton\" (nota la H maiuscola sul primo).\n\nAll'inizio queste differenze sembrano fastidiose, ma ci si fa l'abitudine e si apprezza davvero il fatto che il computer richieda una tale precisione.\n\nEsistono alcuni stili comuni per scrivere in maiuscolo e scrivere gli ID composti da più parole:\n\n-   **Maiuscolo (noto come \"camelCase\")** -- \"UnNomeCamelcasePotrebbeAssomigliareAQuesto\"\n-   **Sottolineato (noto come \"snake\\_case\")** -- \"ad alcune\\_persone\\_piace\\_usare\\_il\\_sottolineato\\_per\\_separare\\_parole\"\n-   **Trattini (noti come \"kebab-case\")** -- \"altri-usano-trattini\"\n\nQualunque cosa tu scelga dipende da te. È il tuo stile. Cerca solo di essere coerente."
        },
        "csd-2022/designing-screens-with-code": {
          "display_name": "Progettare schermate in modalità codice",
          "content": "Nell'Unità 4 hai visto che puoi disporre un'app in Sviluppo App utilizzando **elementi** in **Modalità interfaccia**. Questo approccio drag-and-drop è semplice e veloce, ma puoi creare una pagina come questa solo prima di eseguire il programma. A volte vuoi che gli elementi della tua app cambino mentre è in esecuzione, e per farlo dovremo usare il codice.\n\nOgni elemento ha diverse **proprietà**, come la posizione x e y, il colore e il testo. Il blocco [`setProperty`(#fff176)][1] consente di impostare le proprietà degli elementi dell'interfaccia utente mentre il programma è in esecuzione. Qualsiasi proprietà che puoi impostare in Modalità interfaccia può anche essere impostata nel codice usando [`setProperty`(#fff176)][2].\n\n## Impostazione delle proprietà\n\n<img src=\"https://images.code.org/b7736bdcbde48f7951ebdc87135dd46c-image-1480536740764.png\" style=\"margin: auto\">\n\n[][0]\n\n1.  In modalità codice puoi trovare [`setProperty`(#fff176)][3] nella casella degli strumenti dei controlli dell'interfaccia utente.\n2.  Scegliere l'id dell'elemento dell'interfaccia utente di cui si desidera modificare una proprietà\n3.  Il menu a discesa mostra un elenco di proprietà che è possibile impostare per quell'elemento. Corrisponde all'elenco delle proprietà visualizzate per un elemento in **Modalità interfaccia**\n4.  L'ultimo parametro è il valore che si desidera impostare per quella proprietà. Siamo interessati al colore di sfondo che ha una varietà di valori che puoi dargli.\n\n[/][0]"
        },
        "csd-2022/drawing-shapes": {
          "display_name": "Disegnare Forme",
          "content": "Ci sono molte opzioni diverse per disegnare in Sviluppo Giochi. Hai già visto tre blocchi: [`rect`(#f78183)][0], `ellipse` e `fill`. Ti permetteranno di creare cerchi e quadrati di diversi colori.\n\n## Rect\n\nIl blocco [`rect`(#f78183)][1] traccerà un quadrato alle coordinate x e y fornite. Le coordinate x e y indicano dove va l'angolo in alto a sinistra del quadrato nell'area di visualizzazione.\n\n## Ellipse\n\nIl blocco `ellisse` traccerà un cerchio alle coordinate x e y fornite. Le coordinate x e y indicano dove va il centro del cerchio nell'area di visualizzazione.\n\n## Coordinate in Sviluppo Giochi\n\nPer tracciare le cose sullo schermo in Sviluppo Giochi, dovrai usare le coordinate x e y. La coordinata x indica quanto è lontano qualcosa dal lato sinistro dell'area di visualizzazione. La coordinata y indica quanto è lontano qualcosa dalla parte superiore dell'area di visualizzazione.\n\n## Fill\n\nIl blocco \"fill\" (riempimento) cambia il colore che Sviluppo Giochi usa per colorare le forme che disegni. Una volta utilizzato il blocco \"fill\", tutte le nuove forme che disegnerai verranno riempite con quel colore, fino a quando non utilizzerai il blocco \"fill\" per cambiare nuovamente il colore.\n\n## Colori in Sviluppo Giochi\n\nSviluppo Giochi comprende i nomi dei colori più comuni, come \"red\", \"green\" e \"brown\" (rosso, verde e marrone). Comprende anche tutti i nomi dei colori HTML elencati in <a href=\"https://www.w3schools.com/colors/colors_names.asp\" target=\"blank\">W3 Schools - HTML Color Names</a>."
        },
        "csd-2022/editing-images": {
          "content": "Oltre a caricare e disegnare immagini, la scheda Animazione include diversi strumenti per aiutare a modificare le immagini di animazione.\n\n## Copia, capovolgi e ruota\n\nTre strumenti utili per creare più animazioni da utilizzare con lo stesso sprite sono _Copy_, _Flip_ e _Rotate_\n\n[][1]\n\n[][0]\n\n1.  Il pulsante **copy** crea un duplicato dell'animazione corrente. Ciò è utile per creare più versioni di un'animazione per un singolo sprite, come puntare in direzioni diverse o animazioni di salto e camminata.\n2.  Il pulsante **flip** capovolge l'immagine corrente lungo l'asse verticale. Se tieni premuto il tasto _Alt_ (o _Opzione_ su Mac) mentre fai clic, puoi invece capovolgere l'asse orizzontale.\n3.  Il pulsante **rotate** ruota l'immagine corrente di 90 gradi in senso antiorario. Se tieni premuto il tasto _Alt_ (o _Option_ su Mac) mentre fai clic, puoi invece ruotare in senso orario.\n\n[/][0]"
        },
        "csd-2022/for-loops": {
          "display_name": "Cicli con contatore",
          "content": "È comune voler ripetere una serie di comandi un determinato numero di volte. Il ciclo [`for`(#f98bd0)][0] è stato creato per racchiudere tutti i componenti relativi ai cicli con contatore in una singola riga di codice.\n\n<img src=\"https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png\" style=\"width: 450px;\">\n\nI programmatori in genere leggono un ciclo [`for(var i = 0; i < 10; i++)`(#f98bd0)][1] in questo modo: <br>\n\n**\"per la variabile i che inizia da 0, mentre i è minore di 10, incrementa i di 1\"**\n\n## Tre parti del ciclo con contatore\n\n### Inizializza variabile\n\nOgni volta che stai contando, hai bisogno di una variabile per tenere traccia del conteggio. La prima parte del ciclo con contatore imposta la variabile, spesso chiamata `i`, che verrà utilizzata per contare il numero di volte in cui il ciclo verrà eseguito. Questo imposta anche il valore iniziale da cui iniziare a contare. La variabile viene impostata prima dell'esecuzione del ciclo e quindi il codice non viene restituito durante le successive esecuzioni del ciclo con contatore.\n\n### Condizione\n\nLa condizione determina per quanto tempo viene eseguito il ciclo. Dovrebbe dipendere dalla variabile che hai inizializzato nella parte 1 del ciclo. La condizione viene verificata prima di entrare nel ciclo con contatore ogni volta, inclusa la prima. Il ciclo **si interrompe** non appena questa condizione non è più vera.\n\n### Incremento\n\nL'ultimo pezzo del ciclo con contatore è l'incremento. È il pezzo di aggiornamento del ciclo. Affinché il valore iniziale della variabile cambi, dobbiamo aggiornarlo ogni volta attraverso il ciclo. Ecco a cosa serve l'incremento. L'incremento viene eseguito alla fine di ogni esecuzione del ciclo con contatore. `i++` è solo una scorciatoia per `i = i + 1`, che potresti riconoscere come il pattern del contatore.\n\n## Esempio\n\nUn ciclo con contatore è simile alla scrittura di una serie di istruzioni if e al conteggio mentre si passa attraverso ciascuna istruzione if. Diamo un'occhiata:\n\n### Ciclo con contatore\n\n    for(var i = 0; i < 3; i++){\n    \tconsole.log(\"Hi!\");\n    }\n\n### Istruzioni condizionali `if`\n\nQuesto esempio fa la stessa cosa:\n\n    var i = 0;\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n\nLa quarta istruzione condizionale qui non funzionerà nemmeno. In effetti potresti avere se leistruzioni vanno avanti per sempre. Eseguirebbe solo `console.log()` 3 volte all'interno dell'istruzione condizionale `if`. Quando controlla il quarto se la condizione fallirà."
        },
        "csd-2022/formatting-html": {
          "display_name": "Formattazione HTML",
          "content": "Quando scrivi la tua pagina web, dovresti organizzare il codice in modo da renderlo più facile da leggere. Questa operazione viene denominata **formattazione**. Quando formatti il codice, sarà più facile trovare e correggere i bug.\n\n## Spazio bianco\n\nLo spazio bianco si riferisce a qualsiasi carattere che appare come uno spazio vuoto sullo schermo, come uno spazio, una tabulazione o una nuova riga. Gli spazi bianchi aiutano a separare le diverse parti del documento per facilitarne la lettura. Ad esempio, nel codice HTML i nuovi elementi vengono solitamente inseriti su una nuova riga, anche se non fa alcuna differenza nel modo in cui viene visualizzata la pagina.\n\nAd esempio, confronta il codice nelle due caselle sottostanti.\n\n<pre >\n&lt;body&gt;\n   &lt;h1&gt;Ecco la mia lista&lt;/h1&gt;\n   &lt;ol&gt;\n      &lt;li&gt;Articolo 1&lt;/li&gt;\n      &lt;li&gt;Articolo 2&lt;/li&gt;\n   &lt;/ol&gt;\n&lt;/body&gt;\n</pre>\n\n<pre>\n&lt;body&gt;&lt;h1&gt;Ecco la mia lista&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;Articolo 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;/ol&gt;&lt;/body&gt;\n</pre>\n\nEntrambi visualizzeranno la stessa pagina Web, ma il codice nella casella superiore è molto più facile da leggere. È meglio iniziare con nuovi elementi in una nuova riga.\n\n## Indentazione\n\nUn tipo di formattazione molto comune in HTML è **l'indentazione**. L'indentazione è la posizione del testo più a destra o a sinistra per separarlo dal testo circostante. L'indentazione aiuta a trasmettere la struttura del programma. In HTML, gli elementi che si trovano all'interno di altri elementi sono generalmente indentati. \n\nEcco un esempio:\n\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;Questo paragrafo si trova all'interno dell'elemento «corpo».&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n\nL'indentazione può aiutarti a ricordare se hai chiuso o meno un tag e chiarisce anche quali tag si trovano all'interno degli altri.  \n\n## Commenti\n\nMan mano che le tue pagine web diventano più complicate, ti consigliamo di usare dei **commenti**. I commenti spiegano le diverse parti del codice e cosa dovrebbe creare. I commenti possono aiutarti a eseguire il debugging e anche ad altre persone che stanno cercando di comprendere il tuo codice.\n\n<pre>\n&lt;! -- questo è un commento --&gt;\n</pre>"
        },
        "csd-2022/functions": {
          "display_name": "Funzioni",
          "content": "Una funzione è un gruppo di istruzioni (blocchi) a cui si assegna un nome in modo da poterlo utilizzare più e più volte.\n\n### **Creazione (denominazione) di una funzione**\n\nPer creare una funzione, è necessario inserire tutte le istruzioni all'interno di un blocco funzione e digitare il nome della funzione nello spazio in cima al blocco funzione. Questo codice crea una nuova funzione chiamata \"resetDrawing\" che contiene 4 istruzioni.\n\n[][0]\n\n### **Richiamare (utilizzare) una funzione**\n\nOgni volta che vuoi usare la tua funzione devi chiamarla con il suo nome. Per fare questo devi solo scrivere il nome della tua funzione seguito da parentesi. Questo eseguirà tutti le istruzioni che hai inserito nella tua funzione quando l'hai creata.\n\n[][1]\n\n### **Perché usare le funzioni?**\n\n1.  **Mantieni il tuo codice organizzato** le funzioni possono essere create ovunque nel tuo programma. Se disponi di grandi blocchi di codice che non utilizzerai spesso, puoi creare una funzione nella parte inferiore del codice e chiamarla semplicemente in una singola riga più in alto.\n\n2.  **Mantieni leggibile il tuo codice** dando un nome a un gruppo di istruzioni stai aiutando a spiegare come funziona il tuo codice. Scegliere buoni nomi aiuta te e le altre persone che leggono il tuo codice a capire cosa sta facendo.\n\n3.  **Rimuovere la ripetizione** dopo aver creato una funzione, puoi chiamarla tutte le volte che vuoi nel tuo programma. Se stai usando lo stesso codice in molti punti del tuo programma, puoi creare una funzione con quel codice che puoi invece chiamare. Ciò semplifica anche la modifica del codice in più punti."
        },
        "csd-2022/game-lab": {
          "display_name": "Sviluppo Giochi",
          "content": "Sviluppo Giochi è uno strumento costruito con [JavaScript][0] che può essere utilizzato per creare arte, giochi e animazioni. Scopri di più sulle istruzioni di Sviluppo Giochi nella [documentazione di Sviluppo Giochi][1]."
        },
        "csd-2022/game-lab-overview": {
          "display_name": "Panoramica",
          "content": "Sviluppo Giochi è uno strumento costruito con [JavaScript][0] che può essere utilizzato per creare arte, giochi e animazioni. Scopri di più sulle istruzioni di Sviluppo Giochi nella [documentazione di Sviluppo Giochi][1]."
        },
        "csd-2022/headings-and-paragraphs": {
          "display_name": "Intestazioni e Paragrafi",
          "content": "Quasi tutte le pagine che crei avranno intestazioni e paragrafi.\n\n## Intestazioni\n\nLe intestazioni sono i titoli delle sezioni di diverse dimensioni in una pagina web. I titoli aggiungono struttura alla tua pagina web suddividendola in modo che sia più facile da leggere per un utente.\n\n## Creazione di intestazioni\n\nEsistono sei diversi tag di intestazione: `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>` e `<h6>`. Il tipo più comune di intestazione è \"<h1>\". Per usarlo, inserisci il testo che vuoi visualizzare all'interno tra il tag di apertura (`<h1>`) e il tag di chiusura (`</h1>`).\n\nIl codice per un'intestazione sarà simile a `<h1>Il mio testo di intestazione</h1>`.\n\n## Dimensione delle intestazioni\n\nCi sono intestazioni di diverse dimensioni che sono contrassegnate dal numero accanto alla h nel tag di intestazione. Vanno da `<h1>` a `<h6>`.\n\n<tabella markdown=1>\n<testa>\n<tr>\n<th>Esempio</th>\n<th>Risultato</th>\n</tr>\n</thead>\n<corpo>\n<tr>\n<td>\n\n     <h1>Spalle</h1>\n     <h2>Ginocchia</h2>\n     <h3>Dita dei piedi</h3>\n\n</td>\n<td><img src=\"https://images.code.org/4f252e3dce84a14e1bfdab373d3edbad-image-1473432674187.50.43 AM.png\" style=\"width: 200px;\"></td>\n</tr>\n</tbody>\n</table>\n\n## Paragrafi\n\nI paragrafi raggruppano insiemi di frasi e mettono uno spazio tra quel gruppo di testo e il gruppo di testo successivo.\n\n## Creare paragrafi\n\nI paragrafi sono contrassegnati dai tag opening(`<p>`) e closing(`</p>`). Per creare più di un paragrafo vorrai più serie di tag `<p>` di apertura e chiusura. Per esempio\n\n     <p>\n     Questo è un paragrafo.\n     </p>\n     <p>\n     Questo è un altro paragrafo.\n     </p>\n\n**Collegamenti W3 Schools**\n\n-   [\\<h1> - \\<h6>][0]\n-   [\\<p>][1]"
        },
        "csd-2022/html": {
          "display_name": "HTML",
          "content": "HTML (Hypertext Markup Language) è il linguaggio utilizzato per definire il contenuto delle pagine web. Puoi trovare ulteriori informazioni sui tag e gli attributi dell'HTML nella pagina [Documentazione Sviluppo Web][0] . "
        },
        "csd-2022/html-overview": {
          "display_name": "Panoramica",
          "content": "HTML (Hypertext Markup Language) è il linguaggio utilizzato per definire il contenuto delle pagine web. Puoi trovare ulteriori informazioni sui tag e gli attributi dell'HTML nella pagina [Documentazione Sviluppo Web][0] . "
        },
        "csd-2022/html-tags": {
          "display_name": "Tag HTML",
          "content": "## Cos'è l'HTML?\n\nPer visualizzare una pagina web, un computer deve sapere molto di più di quali parole o immagini dovrebbero essere visualizzate a schermo. Ha bisogno di sapere dove posizionare il contenuto, che dimensione realizzarlo, quali caratteri e colori utilizzare e molte altre informazioni che trasformano testo e immagini ordinari in una pagina web completa.\n\nPer risolvere questo problema gli informatici hanno creato dei linguaggi che comunicano queste informazioni extra. **HTML**, abbreviazione di **H**yper**t**ext **M**arkup **L**anguage, è un linguaggio che aiuta a risolvere questo problema. L'utilizzo di un sistema di tag HTML consente a un programmatore di indicare lo scopo di diverse parti di una pagina web. Ciò consente al computer di sapere come visualizzare questi diversi elementi.\n\n## Tag HTML\n\nL'HTML indica lo scopo delle diverse parti di una pagina Web circondandole con coppie di tag di apertura e chiusura, come nell'esempio seguente.\n\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n\n| Etichetta HTML | Nome etichetta                | Cosa fa                                                                                                   |\n| -------------- | ----------------------------- | --------------------------------------------------------------------------------------------------------- |\n| `<p>`          | Tag del paragrafo di apertura | Inizio di un paragrafo. I paragrafi sono solo blocchi di testo nella tua pagina web.                      |\n| `</p>`         | Tag di paragrafo di chiusura  | Segna la fine di un paragrafo. Un tag di chiusura è sempre solo il tag di apertura con un `/` all'inizio. |\n\n<br>\n\n## Tag predefiniti\n\nTutte le pagine HTML includono un insieme comune di tag. Sono così comuni, infatti, che tutti i progetti Sviluppo Web inizieranno con loro già aggiunti.\n\n| Etichetta HTML                                                                                            | Cosa fa                                                                                                 |\n| --------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| <img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-04-26-at-2.19.39-PM.png\"> | Questo codice iniziale è incluso in ogni progetto Sviluppo Web. I diversi tag sono spiegati di seguito. |\n| `<!DOCTYPE html>`                                                                                         | Dice al computer che si tratta di un documento scritto in HTML                                          |\n| `<html>`                                                                                                  | Indica l'inizio del codice scritto in HTML                                                              |\n| `<head>`                                                                                                  | Contiene informazioni (a volte chiamate \"metadati\") sulla tua pagina web                                |\n| `<body>`                                                                                                  | Contiene tutti i contenuti principali della tua pagina web                                              |\n\n## FAQ\n\n1.  **Cos'è un elemento HTML?**\n    -   Un elemento HTML è una parte di un sito Web contrassegnata da un tag iniziale e talvolta chiusa da un tag finale. L'elemento include anche il contenuto all'interno dei tag. Per esempio:\n             <img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\n2.  **Cosa fa `head`?**\n    -   I tag `<head>` `</head>` contengono informazioni, chiamate metadati, sulla tua pagina web. I metadati non vengono visualizzati sulla tua pagina web e il contenuto che desideri sulla tua pagina attuale non dovrebbe andare qui.\n3.  **Cosa fa `body`?**\n    -   Tra i tag `<body>` `</body>` c'è dove vuoi che sia il contenuto della tua pagina web. Dovrebbe contenere il corpo della pagina web, incluso tutto il testo, i media, i link, ecc. che vuoi che le persone vedano sulla tua pagina.\n\n## Scuole W3\n\nCi sono molte ottime risorse online per conoscere i tag HTML, ma una delle più utilizzate è [w3schools.com][0]. Questo sito web include molte informazioni utili su come funzionano i tag e collegamenti a nuovi tag che potresti voler leggere. In Map Levels in questa unità troverai sempre un collegamento ai tag su W3 Schools e dovresti esplorare altri tag se sei interessato a saperne di più.\n\n**Collegamenti W3 Schools**\n\n-   [\\<p>][1]\n-   [\\<!DOCTYPE>][2]\n-   [\\<html>][3]\n-   [\\<head>][4]\n-   [\\<body>][5]"
        },
        "csd-2022/hyperlinks": {
          "content": "I collegamenti ipertestuali possono connettersi a pagine web locali o pagine web esterne. Per aggiungere la navigazione al tuo sito web dovrai aggiungere collegamenti ipertestuali che collegano le tue singole pagine web. Puoi **aggiungere collegamenti ipertestuali alla tua pagina web utilizzando l'elemento `<a>`**. Il testo che si desidera visualizzare mentre il collegamento ipertestuale va tra i tag di apertura e di chiusura del collegamento ipertestuale. L'elemento `<a>` ha un attributo `href` che è la posizione a cui collegarsi. La posizione di una pagina locale è solo il percorso del file per quella pagina.\n\n## Utilizzo di collegamenti ipertestuali\n\nSupponendo che tu abbia un sito web che include una seconda pagina con il nome file `houses.html`, potresti creare un collegamento a quella pagina in questo modo:\n\n<img alt=\"Link alle case html\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/a_tag.png\" class=\"center\" style=\"max-width: 600px; margin : 20px auto;\">\n\n[][0]\n\n1.  Il tag `<a>` avvolge il testo che vuoi trasformare in un link cliccabile. _A_ è l'abbreviazione di _ancora_.\n2.  L'attributo `href`, abbreviazione di _riferimento ipertestuale_, determina dove dovrebbe andare il tuo link. In questo caso, `case.html`.\n3.  Il tag di chiusura termina il collegamento.\n\n[/][0]\n\n## FAQ\n\n1.  **Quali sono le buone regole per nominare i link?**\n    -   I nomi dei collegamenti dovrebbero consentire all'utente di sapere facilmente dove sta andando. Alcune buone regole sono:\n        1.  Dai al link una buona descrizione che abbia senso anche senza leggere tutto il testo che lo circonda. Ad esempio, \"vai qui\" o \"scopri di più\" non ti dicono dove stai andando o cosa stai imparando.\n        2.  Dare un nome di collegamento nel testo normale, piuttosto che semplicemente ripetere l'URL nel nome del collegamento. Ad esempio, \"Home\" o \"Home Page\" è più facile da leggere rispetto a \"index.html\".\n        3.  Non collegare troppo testo. I lettori non capiranno specificamente di cosa tratta il collegamento.\n2.  **Come faccio a creare link esterni?**\n    -   Inserisci l'intero URL (incluso \"<http://\">) nell'attributo **href** del tag `<a>`, in questo modo:\n               <a href=\"https://www.google.com\">Fai clic su di me per accedere a Google</a>\n3.  **Come faccio a trovare l'URL di un sito web?**\n    -   Vai a qualsiasi sito web a cui desideri collegarti e copia il testo nella barra degli indirizzi (ad es. \"<https://www.google.com>\" per Google). Quindi puoi utilizzare quell'indirizzo per i tuoi collegamenti.\n\n**Collegamento W3 Schools**\n\n-   [\\<a>][1]"
        },
        "csd-2022/if-else-statements": {
          "display_name": "Istruzioni condizionali Se/Altrimenti",
          "content": "## Come funzionano le istruzioni If-Else\n\n<img src=\"https://images.code.org/73eb353de3b62582617e66bfcf4208a7-image-1479490636331.png\" style=\"float: right\">\n\nCon un'istruzione _if-else_ stai dando un comando **o-oppure**:  \n\n**o** verranno eseguite le righe di codice all'interno di _if_ **oppure** verranno eseguite le righe all'interno di _else_. Queste sono le opzioni.\n\nHai visto nel video come aggiungere una condizione _else_ a un'istruzione condizionale if -- premi il piccolo simbolo `+` sulla coda dell'istruzione _if_.\n\nAll'interno delle parentesi graffe per la clausola _else_ si inseriscono le righe di codice che si desidera eseguire se la condizione booleana dall'istruzione _if_ è _false_.\n\nAlcune note importanti sulla clausola else:\n\n-   L'`else` deve venire _immediatamente_ dopo la parentesi graffa di chiusura di un'istruzione _if_\n-   L''else' ha anche il proprio set di parentesi graffe aperte e chiuse per incapsulare righe di codice\n\n<br><br>\n\n<img src=\"https://images.code.org/b7711c7851e5cc9bd08fa53500d692ce-image-1479495721089.png\" style=\"float:right; width:275px\">\n\nConsiderando il nostro diagramma di flusso di prima, fino ad ora non abbiamo avuto modo di far fare al programma qualcosa di diverso se la condizione era _false_. Con un'istruzione `if-else` lo facciamo.\n\nOra possiamo scrivere un programma che \"si dirama\" in un punto particolare, eseguendo una delle due possibili sezioni di codice.\n\n<div style=\"clear: both\">&nbsp;</div>\n\n## Un esempio funzionante\n\n<div style=\"clear: both\">&nbsp;</div>\n\n<img src=\"https://images.code.org/2e05fc16d828eda2cc4ef5db036d635a-image-1479496055965.png\" style=\"float: right;margin: 10px;\">\n\n[][0]\n\n1.  Le righe di codice vengono eseguite in sequenza come di consueto. Chiedi all'utente di inserire la sua età.\n2.  Anche l'istruzione _if_ e l'espressione booleana sono le stesse di prima. L'espressione restituisce \"vero\" o \"falso\".\n3.  Con un'istruzione _if-else_ si garantisce che esattamente una di queste due sezioni di codice **verrà** eseguita. Se la condizione è \"true\" (l'età è di 18 anni o più), vengono eseguite le righe di codice all'interno delle parentesi graffe dell'istruzione if. Se la condizione è `false` salta alla clausola else ed esegue tutte le righe di codice che trova tra le parentesi graffe della clausola else.\n4.  Infine il programma riprende la normale esecuzione subito dopo il blocco _if-else_. A questo punto del programma, sappiamo che _o_ è stato eseguito il codice nel blocco if _o_ nel blocco else.\n\n[/][0]"
        },
        "csd-2022/if-statements": {
          "display_name": "Istruzioni condizionali",
          "content": "## Comprensione del flusso del programma\n\nSi dice che i programmi abbiano un \"flusso di esecuzione\". Si inizia eseguendo una riga di codice, quindi la successiva, quindi la successiva e così via.\n<img src=\"https://images.code.org/9475539704f7fc8d13092a5706fb3bba-image-1479311514103.png\" style=\"float: right; margin: 10px;\">\n\nUn diagramma di flusso è un oggetto visivo comune utilizzato per rappresentare i vari percorsi di esecuzione che il programma potrebbe seguire. Molte persone li usano per aiutare a pianificare i programmi.  \n\n[][0]\n\n1.  Questo diagramma di flusso descrive un programma che esegue una riga dopo l'altra finché non arriva a un punto in cui deve prendere una decisione.\n2.  Al fine di determinare quale percorso prendere, stabilisci alcune **condizioni**. Dovrebbe essere un'**espressione booleana**, qualcosa che restituisce **vero** o **falso**. Qui abbiamo un semplice **confronto** di due valori: l'età della persona e il numero 18.\n3.  Il programma fa una cosa se la condizione è vera e un'altra se la condizione è falsa.\n4.  Il programma può continuare un singolo thread di esecuzione anche dopo la condizione.\n\n[/][0]\n\n## Come funzionano le istruzioni condizionali If\n\n<img src=\"https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png\" style=\"float: right; margin-left: 20px; margin-right: 20px;\">\n\nLe istruzioni _if_ sono le righe di codice utilizzate per modificare il flusso di un programma mentre è in esecuzione. È possibile scrivere codice che determina quali righe di codice devono essere eseguite successivamente.\n\nA destra c'è un diagramma che mostra gli elementi di un'istruzione _if_ di base in JavaScript.\n\nCi sono due parti fondamentali in un'istruzione if.\n\n1.  Una condizione da valutare (un'espressione booleana che restituisce **vero** o **falso**)\n2.  Codice che dovrebbe essere eseguito _se_ l'espressione fosse vera, racchiusa tra parentesi graffe\n\n<!-- Rielaboralo per Sviluppo Giochi\n\n## Un esempio funzionante\n\n<img src=\"https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png\" style=\"display: block; margin: auto; float: right\">\n\n[diagram_nums]\n\n1. Il programma viene eseguito riga per riga come ci si aspetterebbe. Visualizza un messaggio, quindi richiede all'utente di inserire un numero. Qualunque sia il tipo di utente verrà memorizzato nella variabile `età<` e quindi procederà alla riga successiva...\n2. Quando si incontra l'istruzione _if_, la _prima_ cosa che fa è valutare la condizione tra parentesi. Controlla se, a questo punto del programma, il valore in una variabile `age` è maggiore o uguale a 18. Se lo è allora diciamo l'espressione \"**restituisce true**\". Altrimenti restituisce false.\n3. Queste istruzioni `console.log` verranno eseguite _solo_ se l'espressione era vera. Le parentesi graffe racchiudono tutto il codice che dovrebbe essere eseguito se, e solo se, l'espressione fosse vera. In caso contrario, l'intera sezione di codice incapsulata nell'istruzione if viene _skipped_.\n4. L'esecuzione riprende qui, nella prima riga dopo la parentesi graffa di chiusura dell'istruzione if. Questa riga verrà eseguita _sempre_, ma si noti che se l'utente immette un'età inferiore a 18 anni, l'intera istruzione if verrebbe saltata e direbbe semplicemente \"Grazie per la verifica\".\n\n[/diagram_nums]\n\n-->"
        },
        "csd-2022/if-statements-2": {
          "display_name": "Istruzioni condizionali",
          "content": "## Comprensione del flusso del programma\n\nSi dice che i programmi abbiano un \"flusso di esecuzione\". Inizi eseguendo una riga di codice e poi la successiva e così via.\n\n<img src=\"https://images.code.org/9475539704f7fc8d13092a5706fb3bba-image-1479311514103.png\" style=\"float: destra\">\n\nUn diagramma di flusso è un oggetto visivo comune usato per rappresentare i vari percorsi di esecuzione che il programma potrebbe intraprendere. Molte persone li usano come aiuto alla pianificazione.  \n\n<span style=\"color: #00adbc; font-size: 150%\">1.</span>\nQuesto diagramma di flusso descrive un programma che esegue una riga dopo l'altra finché non arriva a un punto in cui deve prendere una decisione.\n\n<span style=\"color: #00adbc; font-size: 150%\">2.</span>\nPer determinare quale strada prendere, stabilisci alcune **condizioni**. Dovrebbe essere un'**espressione booleana**, qualcosa che restituisce **vero** o **falso**. Qui abbiamo un semplice **confronto** di due valori: l'età della persona e il numero 18.\n\n<span style=\"color: #00adbc; font-size: 150%\">3.</span> Il programma fa una cosa se la condizione è vera e un'altra se la condizione è falsa.\n\n<span style=\"color: #00adbc; font-size: 150%\">4.</span> The pr\n\n## Come funzionano le istruzioni condizionali `If`\n\n<img src=\"https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png\" style=\"float: right; margin-left: 20px; margin-right: 20px\">\n\nLe istruzioni [`if`(#64d5ff)][0] sono le righe di codice necessarie per modificare il flusso mentre il programma è in esecuzione. È possibile scrivere codice che _prenda una decisione che determina quali righe di codice devono essere eseguite successivamente._\n\nA destra c'è un diagramma che mostra gli elementi di un'istruzione condizionale [`if`(#64d5ff)][1] di base in JavaScript.\n\nCi sono due parti fondamentali in un'istruzione if.\n\n1.  Una condizione da valutare (un'espressione booleana che restituisce **vero** o **falso**)\n2.  Codice che dovrebbe essere eseguito _se_ l'espressione fosse vera, racchiusa tra parentesi graffe\n\n## Un esempio funzionante\n\n<img src=\"https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png\" style=\"display: block; margin: auto; float: right\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">1.</span>\nIl programma viene eseguito riga per riga come ci si aspetterebbe. Visualizza un messaggio, quindi richiede all'utente di inserire un numero. Qualunque sia il tipo di utente verrà memorizzato nella variabile <code>age</code> e quindi procederà alla riga successiva...\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">2.</span>\nQuando si incontra l'istruzione condizionale <code>if</code>, la <em>prima</em> cosa che fa è valutare la condizione tra parentesi. Controlla se, a questo punto del programma, il valore in una variabile <code>age</code> è maggiore o uguale a 18. Se lo è allora diciamo l'espressione \"<strong>restituisce vero</ forte>\". Altrimenti restituisce false.\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">3.</span>\nQueste istruzioni console.log verranno eseguite <em>solo</em> se l'espressione è vera. Le parentesi graffe racchiudono tutto il codice che dovrebbe essere eseguito se, e solo se, l'espressione fosse vera. Altrimenti, l'intera sezione di codice incapsulata nell'istruzione if viene <em>saltata</em>.\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">4.</span>\nL'esecuzione riprende qui, nella prima riga dopo la parentesi graffa di chiusura dell'istruzione if. Questa riga verrà <em>sempre</em> eseguita, ma nota che se l'utente immette un'età inferiore a 18 anni, l'intera istruzione if verrebbe saltata e direbbe semplicemente \"Grazie per la verifica\". (Risolveremo presto questo imbarazzo).\n\n</p>\n\n<div style=\"clear: both\">&nbsp;</div>Il programma può continuare un singolo thread di esecuzione anche dopo che si è verificata condizione."
        },
        "csd-2022/images-in-html": {
          "display_name": "Immagini in HTML",
          "content": "Il tag _image_ ti consente di aggiungere immagini alla tua pagina. Potresti notare che questo tag ha un aspetto leggermente diverso da quelli che hai visto prima. A differenza dei tag paragrafo, intestazione o elenco, il tag immagine _non richiede un tag di chiusura_. Tutte le informazioni necessarie per visualizzare la tua immagine sono contenute all'interno del tag stesso.\n\n## Sorgente immagine e testo alternativo\n\nPer indicare al browser quale file utilizzare, al tag dell'immagine all'interno delle parentesi viene aggiunta un'informazione aggiuntiva, chiamata attributo. L'attributo **src** sta per fonte e dice il nome dell'immagine, e l'attributo **alt** descrive l'immagine.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/img_tag.png\" class=\"center\" style=\"max-width: 500px; margin-top: 20px; margin-bottom: 20px;\"/>\n\n[][0]\n\n1.  Crea un tag immagine utilizzando l'abbreviazione **img**. Questo è considerato un tag di _chiusura automatica_, poiché non ha bisogno di avvolgere il testo come fanno molti altri tag.\n2.  L'attributo **src** è l'abbreviazione di **source**. Questo dice al tag quale immagine caricare. In questo caso, la pagina cercherà un'immagine con il nome file `dog.jpg` nella stessa directory della pagina. I nomi dei file immagine includono estensioni che indicano al computer con quale tipo di immagine stanno lavorando. Le estensioni comuni sono `.jpg`, `.jpeg` e `.png`. Assicurati di mettere le virgolette attorno al nome del file immagine.\n3.  L'attributo **alt** è l'abbreviazione di **testo alternativo**. Sebbene non vedrai questo testo sulla tua pagina web, fornisce un backup nel caso in cui l'immagine non venga scaricata correttamente o per gli utenti ipovedenti. In questo esempio, se il tuo browser non è riuscito a caricare l'immagine, vedresti <img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/broken_image.png\" style=\"height: 50px;\">\n\n[/][0]\n\n## FAQ\n\n1.  **Perché un tag immagine non ha un tag di chiusura?**\n    -   Un tag immagine non ha bisogno di un tag di chiusura perché non c'è contenuto di testo che deve essere racchiuso nei tag. Il contenuto che viene visualizzato sullo schermo è specificato tramite gli attributi del tag.\n2.  **Cos'è un attributo?**\n    -   Gli attributi sono informazioni aggiuntive incluse in un tag. Gli attributi hanno **nomi** e **valori**. Il **nome** indica quale tipo di informazioni viene fornito e quindi il **valore** fornisce le informazioni specifiche per quel tag.\n    -   Ad esempio, i tag `<img>` hanno due attributi, **src** e **alt**. L'attributo **src** specifica il nome del file immagine e **alt** indica al browser in testo leggibile cos'è l'immagine.\n\n**W3 Schools Links**\n\n-   [\\<img>][1]"
        },
        "csd-2022/importing-a-model-in-app-lab": {
          "display_name": "Importazione di un modello in Sviluppo App",
          "content": "<img style=\"margin-right: 10px; margin-left: 10px; margin-bottom: 15px; border: 2px solid black; width: 200px; float: left\" src=\"https://images.code.org/e81c7cead7d106ee5b32f850791c7de8-image-1616919161803.png\"/>\n\nPer importare un modello in Sviluppo App, premi l'icona a forma di ingranaggio nell'angolo in alto a sinistra di Sviluppo App Pannello degli strumenti e seleziona Gestisci modelli AI\n\n<hr style=\"clear:both\">\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/Import-AI-Models_2l1FmrZ.png\"/>\n\n[][0]\n\n1.  È possibile selezionare il modello da importare utilizzando il menu a discesa\n2.  Premere il pulsante Importa per importare il modello in Sviluppo App\n3.  Premi il pulsante Elimina per eliminare il modello dal tuo account\n4.  La Scheda Modello per ogni modello apparirà sul lato destro. Puoi usarlo per decidere se vuoi o meno usare questo modello nella tua app.\n\n[/][0]\n\n## Video\n\n(Apri YouTube in una nuova scheda)\n\n[undefined][1]"
        },
        "csd-2022/importing-screens": {
          "display_name": "Importare le schermate",
          "content": "Sviluppo App ti permette di importare schermate da un'altra app! Dal menu a discesa delle schermate sopra l'area dell'app, seleziona «Importa schermata» e segui le istruzioni (avrai bisogno del codice di condivisione dell'app da cui stai importando le schermate).\n\n[][0]\n\n# Attenzione ai conflitti!\n\nPer proteggerti dagli errori di conflitto di ID (utilizzando lo stesso ID per più elementi) Sviluppo App ti impedirà di importare schermate che utilizzano ID elemento già presenti nella tua app. Alcune cose da verificare durante l'importazione:\n\n-   Le schermate che stai importando devono avere ID univoci che non siano già utilizzati dalle schermate dell'app\n    -   Se provi a importare una schermata con un ID già esistente, ti verrà data la possibilità di sostituire lo schermo esistente con quello nuovo.\n\n<img src=\"https://images.code.org/d5d197be3a75eeb624e3a1312ab786ce-image-1477346707529.49.02.png\" style=\"max-width: 300px;\">\n\n-   Gli ID utilizzati nella schermata importata non sono già utilizzati nella tua app\n\n<img src=\"https://images.code.org/affd44c38c108ae5e3693d3187ea67e0-image-1477346796569.48.10.png\" style=\"max-width: 300px;\">"
        },
        "csd-2022/introduction-to-ai-lab": {
          "display_name": "Introduzione al Laboratorio IA",
          "content": "<h1 style=\"text-align: center\">\nBenvenuto su Laboratorio IA!\n</h1>\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/f6438df7e9ddba9343861fe5635e7eec-image-1616511376606.png\" width=\"50%\" />\n<p>\n\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img src=\"https://images.code.org/4c16f69d655ab1782124a6d46a07c2fc-image-1616511395871.png\" width=\"50%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">Laboratorio IA è uno strumento che ti consente di creare <strong>modelli di apprendimento automatico</strong> per risolvere problemi, prendere decisioni o creare previsioni. I modelli di apprendimento automatico sono solo programmi per computer progettati per prendere una decisione. A volte la decisione può essere casuale o può essere basata su una serie di regole come quando si gioca a un gioco da tavolo.\n</p>\n<p>\nIn questo widget, creiamo modelli che utilizzano modelli nei dati per prendere decisioni. Aiuterai ad addestrare Bot IA per prendere decisioni basate sui dati, quindi puoi salvare A.I. Il modello decisionale del bot da usare in un progetto Sviluppo App.\n<h2>\nStep 1: Scegli un'etichetta\n</h2>\n<p>\nUn'<strong>etichetta</strong> è ciò che stai cercando di aiutare Bot IA a prevedere o decidere. L'etichetta di solito è correlata a un problema che stai cercando di risolvere, oppure può essere qualcosa che <em>ti chiedi</em> o di cui sei <em>curioso</em>. A volte i dati vengono raccolti pensando all'etichetta, ma non sempre.\n</p>\n<p>\nPuoi esplorare i tuoi dati nel riquadro di sinistra e prendere decisioni nel riquadro di destra.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/9c106a4d860168fe3564709f15aea329-image-1616511405390.png\" width=\"50%\" />\n<h2>\nStep 2: Scegli caratteristiche\n</h2>\n<p>\nLe <strong>Caratteristiche</strong> sono ciò su cui Bot IA sta basando la sua previsione su. Puoi scegliere tutte le caratteristiche che desideri, ma alcune potrebbero non essere utili per fare previsioni come altre. Laboratorio IA ha diverse visualizzazioni di dati che possono aiutarti a decidere quali caratteristiche sono più utili di altre.\n</p>\n<p>\nPuoi esplorare i tuoi dati nel riquadro di sinistra e prendere decisioni nel riquadro di destra.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img src=\"https://images.code.org/9de79f238a091e2c6482d89a39e84c25-image-1616511415607.png\" width=\"50%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<h2>\nStep 3: Addestra Bot IA\n</h2>\n<p>\nSulla base delle tue decisioni, Bot IA esaminerà i modelli di ricerca dei dati per aiutarlo a prendere decisioni.\n\n<br />\n\nBot IA trattiene automaticamente alcuni dei dati in modo che possa testare se stesso per vedere come sta andando. È un po' come studiare per un test: potresti guardare la maggior parte delle domande di esercitazione da studiare, ma poi salvarne diverse per la fine per interrogarti e vedere come stai andando bene.\n\n</p>\n</div>\n\n<div style=\"height: 300px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/533b0a019b50e9410bca4ff73e118310-image-1616511430805.png\" width=\"50%\" />\n<h2>\nStep 4: Valuta e collauda\n</h2>\n<p>\nIn questa schermata puoi vedere alcune delle decisioni che sta prendendo Bot IA in base ai dati. Puoi anche vedere quanto è accurato in base ai dati di test di Bot IA.\n</p>\n<p>\nSe il Bot IA non sta prendendo decisioni molto buone, puoi sempre tornare a una schermata precedente e scegliere caratteristiche diverse o una nuova etichetta.\n</p>\n</div>\n\n<div style=\"height: 350px\">\n<img src=\"https://images.code.org/ab441a75cf50d92f1da344ff96d93d3a-image-1616511439816.png\" width=\"30%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<p>\nPuoi anche testare l'A.I. Il modello di Bot IA te stesso. Prova diversi valori e vedi quali decisioni prende Bot IA. Testare il modello è importante per assicurarci di evitare il <strong>bias</strong>, ovvero quando le decisioni favoriscono alcune cose e ne riducono la priorità. Se scopri un pregiudizio nel tuo modello, puoi sempre tornare indietro e scegliere nuove caratteristiche o una nuova etichetta.\n</p>\n</div>\n\n<div style=\"height: 300px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/cf56f4bbe4fad787e00019cb3c6bf11e-image-1616511449679.png\" width=\"50%\" />\n<h2>\nPassaggio 5: salva il tuo modello\n</h2>\n<p>\nIn questa schermata è possibile salvare il modello da utilizzare in un progetto Sviluppo App. Salvare il modello è come prendere il cervello di Bot IA e usarlo per prendere le stesse decisioni in luoghi diversi. Il codice per il tuo progetto chiederà semplicemente al tuo modello di fare una previsione.\n</p>\n<p>\nPrima di poter salvare, devi rispondere ad alcune domande che vengono salvate con il tuo modello. È come documentare il tuo codice: invece di scrivere commenti per descrivere come funziona un programma, aggiungiamo note su come abbiamo addestrato il nostro modello a prendere le sue decisioni.\n</p>\n</div>"
        },
        "csd-2022/javascript": {
          "display_name": "JavaScript",
          "content": "JavaScript è un linguaggio di programmazione utilizzato su Internet e come linguaggio di programmazione principale in molti degli strumenti e programmi di Code.org, come [Sviluppo App][0], [Sviluppo Giochi][1] e [Maker Toolkit][2]."
        },
        "csd-2022/javascript-overview": {
          "display_name": "Panoramica",
          "content": "JavaScript è un linguaggio di programmazione utilizzato su Internet e come linguaggio di programmazione principale in molti degli strumenti e programmi di Code.org, come [Sviluppo App][0], [Sviluppo Giochi][1] e [Maker Toolkit][2]."
        },
        "csd-2022/layout-properties": {
          "display_name": "Proprietà della disposizione della pagina (layout)",
          "content": "Sviluppo App ti permette di importare schermate da un'altra app! Dal menu a discesa delle schermate sopra l'area dell'app, seleziona «Importa schermata» e segui le istruzioni (avrai bisogno del codice di condivisione dell'app da cui stai importando le schermate).\n\n[][0]\n\n# Attenzione ai conflitti!\n\nPer proteggerti dagli errori di conflitto di ID (utilizzando lo stesso ID per più elementi) Sviluppo App ti impedirà di importare schermate che utilizzano ID elemento già presenti nella tua app. Alcune cose da verificare durante l'importazione:\n\n-   Le schermate che stai importando devono avere ID univoci che non siano già utilizzati dalle schermate dell'app\n    -   Se provi a importare una schermata con un ID già esistente, ti verrà data la possibilità di sostituire lo schermo esistente con quello nuovo.\n\n<img src=\"https://images.code.org/d5d197be3a75eeb624e3a1312ab786ce-image-1477346707529.49.02.png\" style=\"max-width: 300px;\">\n\n-   Gli ID utilizzati nella schermata importata non sono già utilizzati nella tua app\n\n<img src=\"https://images.code.org/affd44c38c108ae5e3693d3187ea67e0-image-1477346796569.48.10.png\" style=\"max-width: 300px;\">"
        },
        "csd-2022/list-filter-pattern": {
          "display_name": "Schema per filtrare un elenco",
          "content": "## Filtrare un solo elenco\n\nQuesto modello consente all'utente di filtrare un elenco in un nuovo elenco limitando le informazioni che vengono aggiunte al nuovo elenco. Ad esempio, è possibile filtrare un elenco di parole in modo che nel nuovo elenco vengano visualizzate solo parole di una certa lunghezza o parole che iniziano con una lettera specifica.\n\n| Nome                                      | Codice |\n| ----------------------------------------- | ------ |\n| Filtro elenco - lettera iniziale (blocco) | [][0]  |\n\n* * *\n\n| Filtro elenco - lettera iniziale (testo) | [][1] \\|\n\n| Nome                               | Codice |\n| ---------------------------------- | ------ |\n| Filtro elenco - lunghezza (blocco) | [][2]  |\n\n* * *\n\n| Filtro elenco - lunghezza (testo) | [][3] \\|\n\n### Come funziona?\n\n-   Crea una variabile e memorizza un elenco in essa\n-   Creare un elenco vuoto per memorizzare l'elenco filtrato\n-   In una funzione utilizzare un ciclo for per accedere a ciascun elemento nell'elenco originale\n-   Se l'elemento soddisfa una determinata condizione, aggiungilo all'elenco filtrato\n\n## Filtrare più elenchi\n\nCosa succede se si dispone di più elenchi, ma si desidera filtrare tutti gli elenchi in base alle informazioni in un unico elenco?\n\n| Nome                            | Codice |\n| ------------------------------- | ------ |\n| Filtro elenco multiplo (blocco) | [][4]  |\n\n* * *\n\n| Filtro elenco multiplo (testo) | [][5] \\|\n\n-   Tutti gli elenchi devono avere la stessa lunghezza per questo modello - idealmente sono colonne estratte da una tabella\n\n### Come funziona?\n\n-   Creare una variabile per ogni lista\n-   Creare elenchi vuoti per memorizzare gli elenchi filtrati\n-   In una funzione, reimposta prima tutti gli elenchi filtrati su elenchi vuoti. Ogni volta che viene chiamata la funzione, gli elenchi filtrati verranno reimpostati.\n-   Usa un ciclo con contatore per accedere a ciascun elemento nell'elenco che contiene l'elemento in base al quale stai filtrando\n-   Se l'elemento viene trovato, aggiungi a ciascun elenco filtrato l'elemento all'indice negli elenchi originali in cui è stato trovato l'elemento"
        },
        "csd-2022/list-reduce-pattern": {
          "display_name": "Schema per ridurre un elenco",
          "content": "Questo modello viene utilizzato quando si desidera ridurre le informazioni in un elenco a un singolo numero. Ad esempio, potresti voler trovare la media di un elenco di numeri o il numero più piccolo.\n\n| Nome                           | Codice (blocco) | Codice (testo) |\n| ------------------------------ | --------------- | -------------- |\n| Riduzione di un elenco - media | [][0]           | [][1]          |\n\n### Come funziona\n\n-   Crea un elenco di numeri\n-   Crea una variabile vuota per memorizzare la media\n-   In una funzione crea una variabile locale per memorizzare il valore totale di tutti gli elementi nell'elenco\n-   Utilizza un ciclo con contatore per accedere a ciascun elemento nell'elenco e aggiungere il suo valore al totale\n-   Dopo il ciclo con contatore, calcola la media dividendo il totale per la lunghezza dell'elenco\n\n| Nome                                 | Codice (blocco) | Codice (testo) |\n| ------------------------------------ | --------------- | -------------- |\n| Riduzione di un elenco - più piccolo | [][2]           | [][3]          |\n\n### Come funziona\n\n-   Crea un elenco di numeri\n-   Crea una variabile vuota per memorizzare il numero più piccolo\n-   Crea una variabile locale in una funzione per memorizzare un valore temporaneo\n-   Utilizzare un ciclo con contatore per accedere a ciascun elemento nell'elenco\n-   Se quell'elemento è minore del valore memorizzato in temp, imposta il valore di temp sull'elemento corrente\n-   Dopo il ciclo con contatore impostare il valore del più piccolo al valore memorizzato in temp"
        },
        "csd-2022/list-scrolling-pattern": {
          "display_name": "Schema per scorrere un elenco",
          "content": "| Nome                               | Codice (blocco) | Codice (testo) |\n| ---------------------------------- | --------------- | -------------- |\n| Modello di scorrimento dell'elenco | [][0]           | [][1]          |\n\n## Come funziona?\n\nMolti progetti Sviluppo App vengono eseguiti nel modo seguente.\n\n1.  L'utente è interessato a visualizzare gli elementi in un elenco, come un elenco di cibi preferiti o un elenco di promemoria.\n2.  L'app mostra all'utente un elemento dell'elenco alla volta.\n3.  Facendo clic sui pulsanti (o interagendo in altro modo con l'app) l'utente può spostarsi avanti e indietro nell'elenco, un elemento alla volta, per vedere ogni elemento.\n\nQuesto modello consente a un utente di \"scorrere\" attraverso tutti gli elementi nell'elenco. Per farlo funzionare, crea una variabile indice e una lista. Quindi utilizzare il modello \"Schema a contatore con estremi\" per creare gestori di eventi per modificare il valore dell'indice.\n\nQuesto modello ha senso da usare con il modello `updateScreen` poiché avrai bisogno di almeno due pulsanti per scorrere a sinistra e a destra attraverso l'elenco, ma in seguito utilizzerai lo stesso codice per aggiornare la schermata."
        },
        "csd-2022/lists": {
          "display_name": "Liste",
          "content": "L'HTML ha due tipi di elenchi, ordinati e non ordinati.\n\n## Elenchi ordinati\n\nUn elenco ordinato è un insieme di elementi numerati.\n\n<table border=\"1\" style=\"float:right; margin-left: 20px;\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n<pre>\n&lt;ol&gt;\n    &lt;li&gt;Step 1 &lt;/li&gt;\n    &lt;li&gt;Step 2 &lt;/li&gt;\n    &lt;li&gt;Step 3 &lt;/li&gt;\n&lt;/ol&gt;\n</pre></td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04 PM.png\" style=\"width:150px\"></td>\n</tr>\n</table>\n\nUn elemento della lista ordinata ha il tag `<ol>` . Questa è l'abbreviazione di <strong>O</strong>rdered <strong>L</strong>ist. Ciascun elemento nell'elenco è contrassegnato da un elemento elemento elenco `<li>`. Questa è l'abbreviazione di <strong>L</strong>ist <strong>I</strong>tem. L'elemento voce di elenco è un elemento figlio, il che significa che va all'interno del suo elemento padre, l'elenco ordinato (`<ol>`).\n\nLa creazione di un elenco ordinato prevede due passaggi: la creazione dell'elenco e l'aggiunta degli elementi dell'elenco. Per creare l'elenco ordinato, scrivi i tag dell'elenco ordinato `<ol> </ol>`. Successivamente, aggiungi gli elementi dell'elenco **all'interno** dei tag dell'elenco ordinato. Per creare ogni elemento dell'elenco, usa i tag degli elementi dell'elenco `<li> </li>` e scrivi l'elemento dell'elenco all'interno dei tag.\n\nPuò essere utile indentare i tag `<li>` in modo che sia chiaro che sono contenuti nel tag `<ol>`.\n\n## Elenchi non ordinati\n\nUn elenco non ordinato è un insieme di elementi puntati.\n\n<table border=\"1\" style=\"float: right; margin-left: 20px;\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n<pre>\n&lt;ul&gt;\n    &lt;li&gt;Red &lt;/li&gt;\n    &lt;li&gt;Green &lt;/li&gt;\n    &lt;li&gt;Blue&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png\" style=\"width:150px\"></td>\n</tr>\n</table>\n\nUn elemento di elenco non ordinato ha il tag `<ul>` . Questa è l'abbreviazione di <strong>U</strong>nordered <strong>L</strong>ist. Ciascun elemento nell'elenco è contrassegnato da un elemento elemento elenco `<li>`. Questa è l'abbreviazione di <strong>L</strong>ist <strong>I</strong>tem. L'elemento voce di elenco è un elemento figlio, il che significa che va all'interno del suo elemento padre, l'elenco non ordinato (`<ul>`).\n\nLa creazione di un elenco non ordinato prevede due passaggi: la creazione dell'elenco e l'aggiunta degli elementi dell'elenco. Per creare l'elenco non ordinato, scrivi i tag dell'elenco non ordinato `<ul> </ul>`. Successivamente, aggiungi gli elementi dell'elenco **all'interno** dei tag dell'elenco non ordinato. Per creare ogni elemento dell'elenco, usa i tag degli elementi dell'elenco `<li> </li>` e scrivi l'elemento dell'elenco all'interno dei tag.\n\nPuò essere utile indentare i tag `</li>` in modo che sia chiaro che sono contenuti nel tag `<ul>`.\n\n## Ulteriori informazioni sulla struttura\n\n<img src=\"https://images.code.org/d9b5053f9b13286dad2714f6416c0a09-image-1664558778316.jpg\" style=\"width:500px\">\n\n## Contenuto dell'elemento dell'elenco\n\n<img src=\"https://images.code.org/a00a4377aa5b6688e8b0f554008e6210-image-1664558975676.jpg\" style=\"width:500px \">\n\n**W3 Schools Links**\n\n-   [\\<li>][0]\n-   [\\<ul>][1]\n-   [\\<ol>][2]"
        },
        "csd-2022/maker-toolkit": {
          "display_name": "Maker Toolkit",
          "content": "Il Maker Toolkit è uno strumento creato con [JavaScript][0] che consente di scrivere programmi che comunicano con [Adafruit Circuit Playground][1]. Maggiori informazioni sui comandi di Maker Toolkit nella [documentazione di Sviluppo App][2]."
        },
        "csd-2022/maker-toolkit-overview": {
          "display_name": "Panoramica",
          "content": "Il Maker Toolkit è uno strumento creato con [JavaScript][0] che consente di scrivere programmi che comunicano con [Adafruit Circuit Playground][1] o [BBC micro:bit][2]. Maggiori informazioni sui comandi di Maker Toolkit nella [documentazione di Sviluppo App][2]."
        },
        "csd-2022/microbit-circuits-buttons": {
          "display_name": "Pulsanti esterni su un micro:bit",
          "content": "<img src=\"https://images.code.org/766895a5debf8fcb1e2552ff47f94c18-Micro_bit Circuits and LEDs.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\nSul bordo inferiore del micro:bit sono presenti 5 strisce dorate chiamate pin. Questi pin ti consentono di creare circuiti o collegare elementi esterni come LED o pulsanti.\n\n-   I **pin di ingresso/uscita** sul micro:bit sono \"0\", \"1\" e \"2\". Questi consentono di collegare LED o pulsanti.\n-   Il pin **\"3V\"** è il pin di alimentazione a 3 volt che puoi utilizzare per alimentare LED esterni e altri dispositivi elettronici.\n-   Il **pin GND** è il pin di messa a terra. Viene utilizzato per completare i circuiti elettrici quando si collegano cuffie, LED o interruttori esterni al micro:bit.\n\n<div style=\"clear: both;\" ></div>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png\" alt=\"Button Up and Down\" style=\"width:250px; float: right; margin: 0 20px;\">\n\nPer creare un pulsante o un interruttore è sufficiente un circuito facilmente collegabile e scollegabile. È possibile creare un pulsante in un circuito collegando un cavo a un pin dati e un altro cavo a un pin di messa a terra.\n\nPer \"chiudere\" il circuito (che è come premere un pulsante) si collegano i due cavi, toccandoli l'uno con l'altro o collegandoli a un componente hardware (come un pulsante o un interruttore) che può essere utilizzato per aprire e chiudere il circuito.\n\nUn pulsante \"aperto\" equivale all'evento del pulsante \"su\", mentre un circuito \"chiuso\" equivale all'evento del pulsante \"giù\".\n\n## Creazione di circuiti di pulsanti\n\nPer creare un circuito di pulsanti avrai bisogno di un pin dati, due cavi e un pin di terra.\n\n1.  Collegare un cavo al pin dati numerato.\n2.  Collegare un cavo diverso a un pin di messa a terra.\n3.  Usa uno dei seguenti blocchi di nel tuo codice:\n    -   [`pinMode()`(#4dd0e1)][0] dice al tuo micro:bit che vuoi usare uno dei pad esterni per l'ingresso o l'uscita. \"Pin\" è il termine generico per i pad sul micro:bit e i pin possono avere un aspetto diverso su altri dispositivi.\n    -   [`digitalWrite()`(#4dd0e1)][1] dice al tuo micro:bit di avviare o interrompere l'invio di elettricità al dispositivo su quel pin. 1 significa \"on\" e 0 significa \"off\"\n    -   Il blocco [`createButton()`(#4dd0e1)][2] consente di assegnare un pulsante esterno a una variabile\n    -   Il blocco [`onBoardEvent()`(#f78183)][3] utilizza lo stesso nome di variabile per rispondere all'input"
        },
        "csd-2022/microbit-circuits-leds": {
          "display_name": "LED esterni su micro:bit",
          "content": "<img src=\"https://images.code.org/766895a5debf8fcb1e2552ff47f94c18-Micro_bit Circuits and LEDs.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\nSul bordo inferiore del micro:bit ci sono 5 strisce dorate chiamate \"pin\". Questi pin consentono di creare circuiti o collegare elementi esterni come LED o pulsanti.\n\n-   I **Pin di ingresso/uscita** sul micro:bit sono «0\", «1\" e «2\". Questi consentono di collegare LED o pulsanti. \n-   Il pin**\"3V\"** è il pin di alimentazione da 3 volt che puoi utilizzare per alimentare LED esterni e altri dispositivi elettronici.\n-   Il **pin GND** è il pin di terra. Viene utilizzato per completare i circuiti elettrici quando si collegano cuffie, LED o interruttori esterni al micro:bit.\n\nUtilizzando i pin numerati del micro:bit, puoi creare circuiti personalizzati che includono componenti esterni, come LED e pulsanti. Le specifiche di cablaggio di un circuito dipendono dall'hardware specifico che stai cercando di aggiungere, ma tutti i circuiti utilizzeranno alcune combinazioni di un pin di alimentazione da 3 volt (che fornisce alimentazione), un pin di terra (che è il punto finale di un circuito) e pin dati numerati (che possono inviare un segnale di uscita o leggere un ingresso). \n\n<div style=\"clear:both;\"></div>\n\n<img src=\"https://images.code.org/be63617cd479aabe4351a8d07abe1d00-microbit-led.png\" style=\"width: 300px; float: right; margin: 10px\" />\n\n## Creazione di circuiti LED\n\nUno dei circuiti più semplici che puoi realizzare con il tuo micro:bit è aggiungere un LED. Per creare questo circuito avrai bisogno di un pin numerato, due cavi, un LED e un pin di messa a terra.\n\n1.  Assicurati che il tuo micro:bit sia scollegato dal computer. Questo aiuta a garantire che non ci sia elettricità accidentale che possa danneggiare la scheda.\n2.  Collegate un cavo in modo che un'estremità sia collegata al pad 0 sul micro:bit e l'altra estremità sia collegata all'estremità positiva di un LED\n3.  Collega un cavo in modo che un'estremità sia collegata al pad GND sul micro:bit e l'altra estremità sia collegata all'estremità negativa di un LED\n\n<div style=\"clear:both;\"></div>\n\n## LED Il debug di\n\nLED è piuttosto semplice da usare, ma ci sono un paio di trucchi da tenere a mente. È necessario prestare attenzione alla direzione in cui scorre l'elettricità, poiché i LED funzionano solo in una direzione. Collega sempre il lato positivo del LED alla fonte di alimentazione e il lato negativo a terra."
        },
        "csd-2022/microbit-display": {
          "display_name": "Il display a LED micro:bit",
          "content": "<img src=\"https://images.code.org/126cab46e3188fc496d4c618e8cfee03-image-1676328086265.png\" style=\"width: 300px; float: right; margin: 10px\" />\n\nIl LED è probabilmente la forma più semplice di output disponibile e il micro: bit ha un display di 25 LED rossi da programmare. I LED sono disposti in una griglia 5x5 che consente di visualizzare motivi, immagini, lettere o numeri.\n\n<div style=\"clear:both;\"></div>\n\nIl `ledScreen` può aiutarti...\n\n<table>\n  <tr>\n    <td><img src=\"https://images.code.org/77c51c63b972d81ad9defdbd5f2d1769-mb1.png\" style=\"width: 210px\" /></td>\n    <td>Esprimi come ti senti!</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://images.code.org/f416ae03dbad5755997196ac09b2f8b1-mb2.gif\" style=\"width: 210px\" /></td>\n    <td>Crea animali!</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://images.code.org/f5b22c147aeefd7c49908fd352c3fd89-mb3.gif\" style=\"width: 210px\" /></td>\n    <td>Crea un badge nominativo!</td>\n  </tr>\n</table>\n\n## Comandi utili con lo schermo LED\n\n-   [`ledScreen.on()`(#f78183)][0]\n-   [`ledScreen.off()`(#f78183)][1]\n-   [`ledScreen.toggle()`(#f78183)][2]\n-   [`ledScreen.clear()`(#f78183)][3]\n-   [`ledScreen.display()`(#f78183)][4]\n-   [`ledScreen.scrollString()`(#f78183)][5]\n-   [`ledScreen.scrollNumber()`(#f78183)][6]"
        },
        "csd-2022/microbit-overview": {
          "display_name": "Panoramica di micro:bit",
          "content": "Il BBC micro:bit è un computer tascabile che illustra come software e hardware interagiscono. Prima di scavare troppo a fondo però, iniziamo con le basi.\n\n## Display a diodi emettitori di luce (LED)\n\nQuando un computer deve comunicare solo informazioni semplici, spesso una luce lampeggiante è il modo più rapido e semplice per farlo. I LED, o diodi a emissione di luce, sono dispositivi piccoli, a bassa potenza e facili da usare per comunicare con la luce. Dai un'occhiata all'immagine micro:bit a destra.\n\n<img src=\"https://images.code.org/211f377fb4e4c1addb2cc33d53bca6f6-Micro_bit Overview.png\" style=\"width: 400px; float: right;\" />\n\n1.  Il **connettore USB** consente di collegare il micro:bit. Il collegamento consente di comunicare con la scheda in Sviluppo App, ma fornisce anche elettricità alla scheda in modo che possa fare cose come accendere il display a LED.\n2.  Il **singolo LED giallo** non può essere controllato tramite codice, ma consente di sapere se la scheda riceve elettricità. Se questo LED è spento, non aspettarti che nulla sulla tua scheda funzioni. Il LED lampeggia quando si scarica un programma sul micro:bit.\n3.  Il **pulsante** consente di riavviare i programmi micro:bit.\n4.  La presa della batteria\\*\\* consente di alimentare il micro:bit dalla batteria anziché da un computer. Questo è davvero utile se vuoi portare il micro:bit all'aperto, indossarlo o usarlo per giocare. Può funzionare a lungo utilizzando solo due batterie AAA. \n\n## Collegalo\n\nCollega la scheda al computer tramite un cavo USB e nota come risponde il singolo LED giallo e come risponde il display a LED. Come potresti usare il display a LED per comunicare informazioni utili a un utente?"
        },
        "csd-2022/microbit-parent": {
          "display_name": "Il micro:bit della BBC",
          "content": "Queste risorse fanno riferimento a funzionalità specifiche di [BBC micro:bit][0]"
        },
        "csd-2022/microbit-physical-input": {
          "display_name": "ingresso fisico micro:bit",
          "content": "<img src=\"https://images.code.org/3d9ce06038db75ad3ae8a7b03259a048-Micro_bit Physical Input.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\n## Identificazione degli ingressi\n\n1.  I pulsanti A (sinistra) e B (destra) sono disponibili nel codice rispettivamente come `pulsante A` e `pulsante B`. Questi pulsanti sono identici tra loro a parte la posizione sul tabellone.\n2.  Il **pulsante di ripristino** non è effettivamente disponibile per l'utilizzo nel programma. Facendo clic su questo pulsante, il micro:bit si resetta da solo, quindi evita di fare clic su di esso durante l'esecuzione di un programma. È utile, tuttavia, se la tua scheda non funziona come ti aspetti.\n\n## Eventi e tipi di eventi\n\n| Tipo di evento | Descrizione                                                            |\n| -------------- | ---------------------------------------------------------------------- |\n| `down`         | Si attiva quando il pulsante viene premuto.                            |\n| `up`           | Si attiva quando il pulsante torna indietro dopo essere stato premuto. |\n\n## Stati del pulsante\n\nEntrambi i pulsanti e l'interruttore hanno solo due stati. I pulsanti sono generalmente disattivati (false) e attivati (true) quando vengono premuti. Puoi vedere se un pulsante è stato premuto con [`buttonL.isPressed`(#f78183)][0]."
        },
        "csd-2022/microbit-sensors": {
          "display_name": "Sensori micro:bit",
          "content": "Il micro:bit ha due sensori di base, ognuno dei quali prende un input e lo converte in un valore utilizzabile dal computer.\n\n<img src=\"https://images.code.org/48dea3f6d0c5933eb639fbcb1292d51f-Micro_bit Sensors.png\" style=\"width: 500px; display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px\" />\n\n1.  Il [`lightSensor`(#f78183)][0] misura quanto è luminoso o scuro. Quando è molto buio, [`lightSensor.value`(#f78183)][1] è 0, e quando è molto luminoso, il valore è 255.\n2.  Il [`tempSensor`(#f78183)][2] controlla la temperatura e la mostra in Fahrenheit ([`tempSensor`(#f78183)][3]) o Celsius ([`tempSensor.C`(#f78183) ][4]).\n\n## Lettura dei dati del sensore\n\nPer leggere i dati dai sensori di suono e luce, puoi usare la proprietà \"value\" (come [`lightSensor.value`(#f78183)][5]). Se l'intervallo 0-255 non è quello di cui hai bisogno, puoi modificare l'intervallo utilizzando il metodo setScale(). Ad esempio, [`lightSensor.setScale(-50, 50)`(#f78183)][6] fa sì che il sensore di luce mostri valori compresi tra -50 e 50. Il sensore di temperatura mostra già la temperatura in un modo facile da capire.\n\n## Sensibilità del sensore\n\nI sensori sulle tue schede non sono perfetti e potrebbero fornire letture leggermente diverse su schede diverse. Se hai bisogno che il tuo programma funzioni bene con diverse schede, puoi scrivere un codice che ti permetta di regolare i sensori. Se la tua app esegue il codice quando la lettura di un sensore supera un determinato valore, rendi tale valore una variabile che può essere modificata dall'utente. In questo modo, l'utente può modificare la variabile per far funzionare al meglio l'app con la propria scheda."
        },
        "csd-2022/model-cards-in-ai-lab": {
          "display_name": "Schede modello in Laboratorio IA",
          "content": "## Video\n\n(Apre YouTube in una nuova scheda)\n\n[undefined][0]"
        },
        "csd-2022/modifying-arrays": {
          "display_name": "Modifica delle matrici (array)",
          "content": "Le matrici (array) possono essere modificate in diversi modi. La modifica dei valori di ciò che è all'interno della matrice è una forma di modifica, ma eliminare elementi o aggiungerne di nuovi alla matrice è un'altra forma di modifica.\n\nÈ possibile utilizzare le frecce sinistra e destra sul blocco della matrice per aggiungere nuovi elementi o eliminare quelli esistenti. Questo creerà o eliminerà sempre un elemento alla fine della matrice . \n\n[][0]\n\n## La creazione di una matrice\n\nLe matrici hanno molte caratteristiche che le rendono diverse dalle variabili, ma **la maggior parte di ciò che hai imparato sulle variabili si applica anche alle matrici**. Ad esempio, proprio come una variabile:\n\n-   Alle matrici dovrebbe essere assegnato un nome**descrittivo e significativo**.\n-   Le matrici vengono create usando `var`.\n-   Le matrici possono essere inizializzate/impostate usando `=`.\n\nistruzioni per le matrici \"Array\" sono disponibili nella casella degli strumenti Variabili. \n\n<img src=\"https://images.code.org/b21cdf00a2c673437c786aef3476734b-image-1486668653247.29.06 PM.png\" style=\"width: 150px;\">\n\nL'istruzione matrice \"array\" ha il seguente aspetto: \n\n[][1]\n\n## Esempio\n\n[][2]\n\nQuesto matrice contiene 3 valori: 100, 250, 500. Notate che i valori sono separati da virgole `,` e che l'intera matrice è racchiuso tra parentesi `[]`. Possiamo usare `console.log` per visualizzare il contenuto di una matrice proprio come faremmo con una variabile.\n\n[][3]\n\nQuesto stamperà [100, 250, 500] nell'area della console."
        },
        "csd-2022/multi-frame-animations": {
          "display_name": "Animazioni a più fotogrammi",
          "content": "Alcune animazioni includono più fotogrammi. Funziona in modo simile a un libro sfogliabile, in cui ogni \"fotogramma\" dell'immagine viene rapidamente disegnato più e più volte in un ciclo per creare l'illusione del movimento. La scheda Animazione include strumenti che consentono di modificare animazioni multi-frame.\n\n## Creazione e modifica di animazioni multi-frame\n\nQuesti strumenti ti aiuteranno a creare e modificare le tue animazioni multi-frame\n\n[][1]\n\n[][0]\n\n1.  Il pulsante **Aggiungi nuovo fotogramma** aggiunge un fotogramma vuoto all'animazione, in cui puoi disegnare. Se desideri creare una copia del fotogramma corrente per apportare lievi modifiche, usa (3)\n2.  L'icona **Cestino** eliminerà il fotogramma corrente\n3.  L'icona **Copia** creerà una copia del fotogramma corrente, che potrai quindi modificare.\n4.  L'icona **Sposta** ti consente di riorganizzare l'ordine dei frame\n5.  L'icona **Cipolla** mostra una sovrapposizione trasparente del fotogramma precedente e del fotogramma successivo. Questo è utile se desideri apportare piccole modifiche a un fotogramma per creare un'animazione più fluida e assicurarti che sia allineato con i fotogrammi circostanti.\n6.  Il **Cursore** modifica la velocità dell'animazione. Spostandosi a destra si velocizza l'animazione; lo spostamento a sinistra rallenta l'animazione. Puoi vedere un'anteprima della tua animazione quando ci passi sopra con il mouse in questa colonna.\n\n[/][0]"
        },
        "csd-2022/multi-screen-apps": {
          "display_name": "App multischermo",
          "content": "Potresti immaginare che un'app tipica abbia una serie di «schermate» o visualizzazioni visualizzate da un utente durante l'utilizzo della tua app. Di seguito è riportato un tipico esempio con una schermata di benvenuto, una schermata che riproduce un gioco e un gioco su schermo.\n\n[][2]\n\n## Cos'è una schermata, comunque?\n\nUna schermata è solo un elemento dell'interfaccia utente come qualsiasi altra cosa in modalità interfaccia. Ma ha alcune proprietà speciali:\n\n-   Uno schermo è un elemento dell'interfaccia utente che contiene altri elementi dell'interfaccia utente.\n-   Può essere visibile solo una schermata alla volta\n-   Solo gli elementi che «appartengono» a una schermata sono visibili quando quella schermata è attivo.\n-   Anche se i tuoi _elementi di progettazione_ potrebbero essere distribuiti su più schermate, il codice è tutto in un unico posto.\n\n## Come creare una nuova schermata\n\n<img src=\"https://images.code.org/ed8f45d70a65329597c1623ddd756249-image-1477165123570.png\" style=\"float: right;\">\n\nEsistono due modi per aggiungere una schermata alla tua app. Innanzitutto, assicurati di essere in Modalità <em>Interfaccia</em>.\n\n[][0]\n\n1.  O scegli \\_Nuova schermata... \\_ dal menu a discesa nella parte superiore dell'area di visualizzazione. \\*\\*Nota: \\*\\* è possibile utilizzare questo menu a tendina anche per passare da una schermata all'altra in modalità interfaccia.\n2.  Oppure trascina un elemento dell'interfaccia utente di schermata dalla casella degli strumenti. **Avviso: \\*\\* non appena rilasci l'elemento schermo, l'app ti mostrerà una \\*\\*nuova schermata vuota.** Puoi tornare ad altre schermate utilizzando il menu a tendina in alto.\n\n[/][0]\n\n## Imposta le proprietà di una schermata\n\n[][1]\n\n1.  Usa questo menu a tendina per selezionare lo schermo su cui vuoi lavorare. L'elenco conterrà gli ID di tutte le schermate che hai creato.\n2.  Fate clic su un'area vuota dello sfondo per selezionare la schermata e impostarne le proprietà.\n3.  Le schermate dispongono anche di ID. Come altri elementi dell'interfaccia utente, è una buona idea _fornire alle schermate ID descrittivi e significativi_. Rende la scrittura del codice molto più semplice.\n4.  Se la schermata è piena di elementi dell'interfaccia utente e non c'è un'area vuota su cui fare clic per selezionarla, utilizza questo menu a discesa. Elenca tutti gli elementi dell'interfaccia utente che fanno parte di questa schermata, incluso lo schermo stesso.\n5.  Fai clic su questo pulsante per impostare questa schermata come «schermata predefinita», ovvero la schermata che verrà visualizzata per prima quando l'app viene eseguita.\n6.  Le schermate non hanno molte proprietà, ma è possibile impostare lo sfondo della schermata su un colore o un'immagine. Le immagini vengono allungate o compresse per adattarsi allo schermo.\n\n[/][1]\n\n[][3]"
        },
        "csd-2022/naming-variables": {
          "display_name": "Denominazione delle variabili",
          "content": "Le etichette variabili dovrebbero essere significative, ma puoi scegliere quasi tutte le etichette che preferisci. Ci sono solo alcune regole e linee guida di cui essere a conoscenza.\n\n## Regole di denominazione\n\nCi sono un**alcune regole** nella scelta delle etichette:\n\n-   Le etichette**non possono includere spazi**. Ad esempio, `larghezza del rettangolo` genererebbe un errore.\n-   Le etichette **non possono iniziare con un numero**. `4sides` e `2morrow` genereranno errori.\n-   Fai molta attenzione con l' **ortografia**. Se le etichette non vengono scritte esattamente allo stesso modo, il computer non si accorgerà che si riferiscono alla stessa variabile.\n-   Le etichette fanno **distinzione tra maiuscole e minuscole/minuscole**. `size` non è la stessa di `Size` o `SIZE`.\n\n## Usare etichette significative\n\nQuando vedi una variabile nel tuo programma, vorrai sapere esattamente cosa contiene senza dover cercare in giro. Assicurati di etichettare la tua variabile con qualcosa di significativo. `score` e `lives` sono ottime etichette che ti dicono esattamente per cosa viene usata quella variabile. [`number`(#bbb3ce)][0] e `a` non sono altrettanto utili.\n\n## CamelCase\n\nLe etichette con più parole possono essere più facili da leggere in**CamelCase**. Un'etichetta CamelCase ha l'aspetto di `LatoDlRettangolo` o `UnEtichettaDavveroLunga`. La prima lettera del nome della variabile è in genere minuscola, ogni nuova parola inizia con una lettera maiuscola. Questo ti aiuta a vedere l'inizio di nuove parole senza usare spazi, che non sono consentiti nei nomi delle variabili.\n\n## usando\\_underscore\n\nUn altro modo comune per inserire più parole in un'etichetta variabile consiste nell'usare i caratteri di sottolineatura tra le parole. Quando si usano i caratteri di sottolineatura, i programmatori di solito non usano affatto le lettere maiuscole. Questi tipi di variabili hanno l'aspetto di `lato_del_rettangolo` o `il_mio_personaggio_rana`.\n\n## Coerenza\n\nLa cosa più importante quando scegli come etichettare le tue variabili è usare uno stile coerente in modo che sia facile ricordare l'ortografia e le maiuscole esatte delle tue variabili."
        },
        "csd-2022/other": {
          "display_name": "Altro",
          "content": "Questa categoria include altri concetti utili che potrebbero non rientrare in altre categorie."
        },
        "csd-2022/other-overview": {
          "display_name": "Panoramica",
          "content": "Questa categoria include altri concetti utili che potrebbero non rientrare in altre categorie."
        },
        "csd-2022/patterns": {
          "display_name": "Schemi",
          "content": "Questa pagina è ancora in fase di sviluppo. Questa pagina è la home page per i modelli di programmazione nello sviluppo di app e di per sé non contiene alcun contenuto. Per visualizzare diversi modelli di programmazione, usa la barra di navigazione a sinistra. Per domande su questa pagina, scrivi a support@code.org."
        },
        "csd-2022/patterns-2": {
          "display_name": "Schemi",
          "content": "Utili schemi di programmazione"
        },
        "csd-2022/patterns-overview": {
          "display_name": "Panoramica",
          "content": "Questa pagina è ancora in fase di sviluppo. Questa pagina è la home page per i modelli di programmazione nello sviluppo di app e di per sé non contiene alcun contenuto. Per visualizzare diversi modelli di programmazione, usa la barra di navigazione a sinistra. Per domande su questa pagina, scrivi a support@code.org."
        },
        "csd-2022/physical-input": {
          "display_name": "Ingressi fisici del Circuit Playground",
          "content": "## Identificazione degli ingressi\n\n<img alt=\"buttons\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp_buttonswitch.png\" style=\"float: right; margin-left: 10px; width: 400px;\">\n\n1.  Il **pulsante di ripristino** non può essere utilizzato nel tuo programma. Facendo clic su di esso, la scheda si ripristina da sola, quindi non premerlo mentre il programma è in esecuzione. Ma puoi usarlo se la tua scheda non funziona correttamente.\n\n2.  I pulsanti sinistro e destro sulla scheda sono chiamati \"buttonL\" e \"buttonR\". Sono gli stessi tranne dove sono sul tabellone. Guardando la scheda con la porta USB in alto, il pulsante sinistro è `buttonL` e il pulsante destro è `buttonR`.\n\n3.  L'**interruttore a levetta** è disponibile nel codice come [`toggleSwitch`(#f78183)][0].\n\n## Eventi e tipi di eventi\n\n### Pulsanti sinistro e destro:\n\n| Tipo di evento | Descrizione                                                            |\n| -------------- | ---------------------------------------------------------------------- |\n| `down`         | Si attiva quando il pulsante viene premuto.                            |\n| `up`           | Si attiva quando il pulsante torna indietro dopo essere stato premuto. |\n\n### Interruttore a levetta:\n\n| Tipo di evento | Descrizione                                               |\n| -------------- | --------------------------------------------------------- |\n| `open`         | Quando il toggleSwitch viene girato per aprire (o `true`) |\n| `close`        | Quando il toggleSwitch viene portato a chiuso (o `false`) |\n| `switch`       | Quando l'interruttore a levetta viene capovolto           |\n\n## Stato\n\nEntrambi i pulsanti e l'interruttore hanno solo due stati.\n\nI pulsanti sono generalmente disattivati (false) e attivati (true) quando vengono premuti. Puoi vedere se un pulsante è stato premuto con [`buttonL.isPressed`(#f78183)][1].\n\nL'interruttore rimane nella posizione in cui l'hai inserito. Quando è a sinistra, è aperto (true) ea destra è chiuso (false).\n\nCi sono segni più e meno vicino all'interruttore per aiutarti a ricordare. Puoi controllare la posizione dell'interruttore con il blocco [`toggleSwitch.isOpen`(#f78183)][2]."
        },
        "csd-2022/playing-notes": {
          "display_name": "Riprodurre Note",
          "content": "Nella musica occidentale, rappresentiamo le \"note\" nella musica con le lettere dalla A alla G. Quelle note corrispondono a specifiche frequenze di tono - in effetti, le stesse frequenze che abbiamo usato con il cicalino. Potresti ricreare le tue canzoni preferite usando solo le frequenze appropriate, ma Maker Toolkit include un comando [`buzzer.note()`(#f78183)][0] che cerca i valori appropriati per te.\n\n## Frequenze alle note\n\n<div style=\"float: right; margine: 20px;\" markdown=\"1\">\n\n| Frequenza | Nota che mappa a |\n| --------- | ---------------- |\n| 261       | DO4              |\n| 277       | Do#4             |\n| 293       | RE4              |\n| 311       | RE#4             |\n| 329       | Mi4              |\n| 349       | F4               |\n| 369       | Fa#4             |\n| 392       | G4               |\n| 415       | Sol#4            |\n| 440       | A4               |\n| 466       | LA#4             |\n| 493       | SI4              |\n| 523       | DO5              |\n\n</div>\n\nIl grafico a destra mostra una serie di note che iniziano con C4, noto anche come C \"medio\", e ciascuna delle frequenze corrispondenti delle note.\n\n## Appunti\n\n[`buzzer.note()`(#f78183)][1] semplifica questo. Invece di passargli una frequenza da suonare, come [`buzzer.frequency`(#f78183)][2], devi solo dargli la nota che vuoi che venga suonata. Questo può includere anche note diesis, a patto di includere il \"#\" dopo la nota.\n\n## Ottave\n\nIl cicalino può suonare ogni nota su una delle otto ottave. Quando passi una nota nel metodo [`buzzer.note()`(#f78183)][3], includerai anche l'ottava in cui vuoi che sia quella nota. \"C4\", ad esempio, se vuoi suonare la nota C centrale, \"C1\" se vuoi la nota C più bassa possibile e \"C8\" se vuoi la nota C più alta possibile. Se non lo specifichi, le note suoneranno automaticamente alla 4a ottava.\n\nPer il miglior suono possibile, dovresti rimanere nell'ottava 4. Qualunque cosa inferiore alla 4a o superiore alla 6a ottava tende a suonare distorta sul cicalino. "
        },
        "csd-2022/problem-solving-process": {
          "display_name": "Il processo di risoluzione dei problemi",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nAvere una strategia per affrontare i problemi può aiutarti a sviluppare nuove intuizioni e trovare soluzioni nuove e migliori. Questo è un processo iterativo che è ampiamente utile per risolvere tutti i tipi di problemi.\n\n## Definisci\n\n-   Determina il problema che stai cercando di risolvere\n-   Identifica i tuoi vincoli\n-   Descrivi come sarà il successo\n\n## Prepara\n\n-   Riflessione libera / ricerca di possibili soluzioni\n-   Confronta pro e contro\n-   Fai un piano\n\n## Tentativo\n\n-   Metti in atto il tuo piano\n\n## Rifletti\n\n-   Confronta i tuoi risultati con gli obiettivi che ti sei prefissato durante la definizione del problema\n-   Decidi cosa puoi imparare da questo o fare meglio la prossima volta\n-   Identifica eventuali nuovi problemi che hai scoperto"
        },
        "csd-2022/problem-solving-process-design": {
          "display_name": "Il processo di risoluzione dei problemi con la progettazione dell'interfaccia",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nIl **processo di risoluzione dei problemi** è utile quando si cerca di progettare un nuovo prodotto per qualcuno, come un nuovo sito web, un'app o un dispositivo. Questo processo ti aiuterà a chiarire e suddividere un problema in passaggi gestibili in modo da poter creare qualcosa che soddisfi le esigenze del tuo utente.\n\n## Definisci\n\n-   Identifica individui o gruppi di persone che potrebbero trarre vantaggio dal tuo prodotto\n-   Identifica i bisogni e i desideri delle persone che userebbero il tuo prodotto\n-   Immagina di essere uno dei tuoi utenti. Annota ciò che un utente potrebbe vedere, sentire o provare quando sperimenta il proprio bisogno o desiderio.\n-   Se possibile, intervista i potenziali utenti per saperne di più su ciò che vogliono\n-   Prendi in considerazione la possibilità di creare frasi come “**\\*\\***\\_**\\*\\*** ha bisogno di un modo per **\\***\\_**\\*\\*** per \\***\\*\\_\\*\\*\\***. Dovrebbe **\\*\\*\\*\\***\\_\\_\\_**\\*\\*\\*\\***\"\n\n## Prepara\n\n-   Metti da parte le tue convinzioni o ipotesi personali in modo da poter entrare in empatia con gli utenti.\n-   Avvia una libera riflessione su potenziali soluzioni che soddisfino le esigenze e i desideri dei tuoi utenti\n-   Cerca cosa esiste e come altri hanno affrontato problemi simili e vedi cosa puoi imparare\n-   Crea un elenco di \"pro\" e \"contro\" per potenziali soluzioni per aiutare a decidere quale creare\n-   Non sarai in grado di creare tutto in una volta - decidi il \"minimo\" che devi creare per iniziare i test e scopri cosa funziona e cosa no\n\n## Tentativo\n\n-   Disegna il tuo prototipo su carta o con uno strumento digitale\n-   Crea un prototipo del tuo prodotto, che è una versione rapida e a basso rischio della tua idea che puoi testare\n-   Identifica un aspetto specifico del tuo prototipo che desideri testare e su cui ricevere riscontri\n-   Condividi il tuo prototipo con altri e ottieni riscontri, quindi raggruppa il riscontro in categorie\n\n## Rifletti\n\n1.  Quali categorie di riscontro hai ricevuto dal tuo progetto? Quali miglioramenti puoi apportare in base a tale riscontro?\n2.  Qual è stata la reazione al tuo prototipo quando l'hai condiviso con gli altri? Come puoi basarti su reazioni positive? Come puoi apportare modifiche per evitare reazioni negative?\n3.  Di quale aspetto del tuo prototipo sei più orgoglioso? Quale parte deve essere migliorata?\n4.  Sulla base dei collaudi, se dovessi riavviare il processo di risoluzione dei problemi nella fase di definizione, quali nuovi problemi cercheresti di identificare? Come potresti ripetere ciò che hai per renderlo più utile per i tuoi utenti?"
        },
        "csd-2022/problem-solving-process-general": {
          "display_name": "Il processo di risoluzione dei problemi",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nAvere una strategia per affrontare i problemi può aiutarti a sviluppare nuove intuizioni e trovare soluzioni nuove e migliori. Questo è un processo iterativo che è ampiamente utile per risolvere tutti i tipi di problemi.\n\n## Definisci\n\n-   Determina il problema che stai cercando di risolvere\n-   Identifica i tuoi vincoli\n-   Descrivi come sarà il successo\n\n## Prepara\n\n-   Riflessione libera / ricerca di possibili soluzioni\n-   Confronta pro e contro\n-   Fai un piano\n\n## Tentativo\n\n-   Metti in atto il tuo piano\n\n## Rifletti\n\n-   Confronta i tuoi risultati con gli obiettivi che ti sei prefissato durante la definizione del problema\n-   Decidi cosa puoi imparare da questo o fare meglio la prossima volta\n-   Identifica eventuali nuovi problemi che hai scoperto"
        },
        "csd-2022/problem-solving-process-programming": {
          "display_name": "Il processo di risoluzione dei problemi con la programmazione",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nIl **processo di risoluzione dei problemi** è utile quando si scrive codice per un programma impegnativo. Questo processo ti aiuterà a chiarire e suddividere un problema in passaggi gestibili in modo da poter identificare facilmente il codice che devi scrivere per ogni passaggio.\n\n## Definisci\n\n-   Leggi attentamente le istruzioni per assicurarti di comprendere gli obiettivi e i risultati previsti del programma.\n-   Se esiste un programma di esempio, eseguilo per assicurarti di capire cosa fa.\n-   Se c'è un codice di avvio, leggilo per capire cosa fa.\n-   Riformula il problema con parole tue.\n-   Identifica tutte le competenze che ti viene chiesto di applicare.\n-   Decidi quale aspetto del problema vuoi completare per primo.\n\n## Prepara\n\n-   Fai una riflessione libera di quante più idee per i diversi modi in cui potresti programmare il problema per risolverne tutte le parti.\n-   Scrivi con parole semplici o in pseudocodice le tue idee su come risolvere il problema in modo che il programma faccia quello che dovrebbe fare.\n-   Elenca cosa sai già fare e cosa ancora non sai.\n-   Descrivi le tue idee a un compagno di classe\n-   Rivedi programmi simili che potresti aver scritto in passato.\n-   Disegna la tua idea su carta, se necessario\n\n## Prova\n\n-   Scegli un'idea dal passaggio precedente e documenta il motivo per cui hai scelto quell'idea.\n-   Implementa l'idea che hai scelto e scrivi un piccolo pezzo di codice alla volta.\n-   Prova spesso il tuo programma.\n-   Usa i commenti per documentare e tenere traccia di ciò che fa il tuo codice.\n-   Torna al passaggio precedente per esaminare le tue altre idee per risolvere il problema se rimani bloccato\n-   Applicare strategie di debugging appropriate\n\n## Rifletti\n\n1.  Confronta il tuo programma con il problema definito... Sei riuscito a risolvere tutti gli aspetti del problema? Come fai a sapere?\n2.  Chiedi a un compagno di classe di provare il tuo programma... Ci sono luoghi in cui lottano o mostrano confusione?\n3.  Chiedi a un compagno di classe di leggere il tuo codice... Il tuo codice e la tua documentazione sono chiari e accurati?\n4.  Prova a \"rompere\" il tuo programma... Hai trovato tipi di interazione o input che potevi gestire meglio?\n5.  Ci sono modifiche o miglioramenti che puoi apportare a questo programma oa un altro simile in futuro?"
        },
        "csd-2022/producing-output": {
          "display_name": "Cicalino del Circuit Playground",
          "content": "<img src=\"//curriculum.code.org/images/circuitplayground/cp_buzzer.png\" style=\"float: right; width: 300px; margin-left: 10px;\">\n\nIl LED è probabilmente la forma di uscita più semplice disponibile e, sebbene ci siano molte cose utili che una semplice luce può comunicare, a volte abbiamo bisogno di una diversa forma di output. Abbiamo usato la luce come output, ma che dire del suono? La tua scheda ha un oggetto [`buzzer`(#f78183)][0] in grado di riprodurre suoni semplici.\n\n### Il cicalino\n\nNon aspettatevi che [`buzzer` (#f78183)][1] produca musica meravigliosa: è uno strumento semplice per un output semplice!\n\n1.  Questo cubo contiene un semplice cicalino (noto anche come cicalino _piezo_ o _piezoelettrico_). Quando l'elettricità viene inviata al cicalino, vibra e fa rumore.\n\n<div style=\"clear: both;\"></div>\n\n### Emettere suoni diversi\n\n<img src=\"//curriculum.code.org/images/circuitplayground/cp_buzzer_pwm.png\" style=\"float: left; width: 200px; margin-right: 10px;\">\n\nQuando si utilizzava il LED, la scelta dell'uscita era piuttosto semplice: accesa o spenta. Il cicalino può effettivamente riprodurre una serie di suoni diversi. Siamo in grado di farlo inviando impulsi di elettricità al cicalino a velocità diverse. È come accendere e spegnere una luce ripetutamente: più velocemente giriamo l'interruttore, più alto sarà il suono che produrrà.\n\n<div style=\"clear: both;\"></div>"
        },
        "csd-2022/random-list-access": {
          "display_name": "Schema di accesso a elenchi casuali",
          "content": "| Nome                                | Codice (blocco) | Codice (testo) |\n| ----------------------------------- | --------------- | -------------- |\n| Schema di elenco ad accesso casuale | [][0]           | [][1]          |\n\n## Come funziona?\n\nMolti progetti di Sviluppo App vengono eseguiti nel modo seguente.\n\n1.  L'utente è interessato a visualizzare gli elementi in un elenco, come un elenco di cibi preferiti o un elenco di promemoria.\n2.  L'app mostra all'utente un elemento dell'elenco alla volta.\n3.  Facendo clic sui pulsanti (o interagendo in altro modo con l'app) viene mostrato all'utente un nuovo elemento casuale nell'elenco.\n\nQuesto modello consente a un utente di visualizzare elementi casuali in un elenco. Per farlo funzionare, crea una variabile indice e una lista. Quindi genera un numero casuale compreso tra 0 e la lunghezza dell'elenco meno uno e imposta l'indice su quel valore. Quindi aggiorna la schermata."
        },
        "csd-2022/random-numbers": {
          "display_name": "Numeri Casuali",
          "content": "## Utilizzo di numeri casuali\n\nIl blocco `randomNumber()` può essere usato per generare numeri casuali nei tuoi programmi. I parametri impostano il valore minimo e massimo che possono essere generati. Puoi usare questo blocco ovunque tu possa scrivere un numero.\n\n[][0]\n\n_Questo esempio è come un dado che potrebbe generare casualmente qualsiasi numero da 1 a 6_\n\n## Disegno e numeri casuali\n\nPuoi usare `randomNumber()` come parametro nei comandi di disegno per creare disegni casuali. Con il seguente comando, il tuo programma potrebbe generare disegni diversi ogni volta che viene eseguito.\n\n[][1]\n\n| Esecuzione 1                                                                                                                         | Esecuzione 2                                                                                                                         | Esecuzione 3                                                                                                                         |\n| ------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------ |\n| <img src=\"https://images.code.org/246e7ac850015aa830d469b7eeb5f00e-image-1491523022253.50.04 PM.png\" style=\"float:left;width:150px\"> | <img src=\"https://images.code.org/01b10dc034475fd5a90bd3c7bd0c51b8-image-1491523025607.50.17 PM.png\" style=\"float:left;width:150px\"> | <img src=\"https://images.code.org/0f0c3cc4d42923dc4321809daf189053-image-1491523028093.50.49 PM.png\" style=\"float:left;width:150px\"> |\n\n## Più numeri casuali\n\nSe usi `randomNumber()` più volte nel tuo programma, genererà ogni volta nuovi numeri casuali. Puoi pensare a ogni `randomNumber()` come a un nuovo lancio di un dado.\n\n[][2]\n\n| Esecuzione 1                                                                                                                              | Esecuzione 2                                                                                                                              | Esecuzione 3                                                                                                                              |\n| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| <img src=\"https://images.code.org/3ff0345b3ffdf3373e34053e696f7068-image-1491708429815.22.05 PM.png\" style=\"float: left; height: 150px;\"> | <img src=\"https://images.code.org/5721e766b1b85fbe817cf65f635f3d27-image-1491862776557.17.17 PM.png\" style=\"float: left; height: 150px;\"> | <img src=\"https://images.code.org/1fe406c05feb8bc2c135dac45152f881-image-1491862780106.18.05 PM.png\" style=\"float: left; height: 150px;\"> |"
        },
        "csd-2022/responding-to-user-input": {
          "display_name": "Reazione all'input dell'utente",
          "content": "La modalità interfaccia rende davvero semplice l'aspetto dell'interfaccia utente per la tua app, ma dovremo immergerci nella modalità codice per farla rispondere effettivamente agli utenti.\n\nIn Sviluppo Giochi la funzione ciclica `draw()` eseguiva costantemente il codice, utilizzando i condizionali per verificare le interazioni dell'utente. Sviluppo App, invece, attende di rispondere a determinati **eventi** che si verificano in un programma. È il modo in cui Sviluppo App dice \"Ehi! È appena successo qualcosa!\". Ciò significa che non è necessario che sia in esecuzione alcun codice quando non interagisci direttamente con un'app e il tuo codice può rispondere a ciascuno di questi eventi nel momento in cui si verificano.\n\nIn Sviluppo App tutta la gestione degli eventi inizia con l'aggiunta di uno speciale blocco di codice chiamato [`onEvent`(#fff176)][1]. Ecco come farlo:\n\n<img src=\"https://images.code.org/9b506faaaadf61338dc738a4eafb66b2-image-1476740205599.png\" />\n\n[][0]\n\n1.  Passare alla modalità codice\n2.  Trascina un blocco [`onEvent`(#fff176)][2] dalla casella degli strumenti nell'area di lavoro.\n3.  Utilizzare il menu a discesa per selezionare l'_ID_ dell'elemento dell'interfaccia utente che si desidera impostare per rispondere a un evento. Gli ID di tutti gli elementi dell'interfaccia utente aggiunti in Modalità interfaccia verranno elencati qui.\n4.  Utilizzare il menu a discesa per selezionare il _tipo_ di evento a cui si desidera rispondere. (Per ora basta usare il \"clic\").\n5.  Aggiungere il codice all'interno della funzione che si desidera eseguire _quando_ si verifica l'evento. La funzione verrà eseguita una volta ogni volta che si verifica l'evento.\n\n[/][0]"
        },
        "csd-2022/saving-and-uploading-csv-files": {
          "display_name": "Salvataggio e caricamento di file CSV",
          "content": "## Video\n\n(Apre YouTube in una nuova scheda)\n\n[undefined][0]"
        },
        "csd-2022/selecting-a-label": {
          "display_name": "Selezione di un'etichetta",
          "content": "<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/01-Selecting-a-Label-Drawing.png\"/>\n\n[][0]\n\n1.  Fare clic su una colonna per visualizzare ulteriori informazioni su di essa\n2.  Questa è una descrizione della colonna selezionata. Può fornire ulteriori informazioni sui dati in questa colonna. Se i dati provengono da un sondaggio, questo di solito conterrà la domanda che è stata posta nel sondaggio\n3.  Un grafico **a barre** mostra quante volte un determinato valore appare nel grafico. Per le etichette, è importante avere una rappresentazione equilibrata dei dati. Se alcuni valori sono sovrarappresentati o sottorappresentati, ciò può portare a un modello di apprendimento automatico _distorto_.\n4.  Premi il pulsante \"Aggiungi etichetta\" per utilizzare questa colonna come output del tuo modello di apprendimento automatico. Questo è ciò che Bot IA cercherà di prevedere.\n\n[/][0]\n\n## Video\n\n(Apre YouTube in una nuova scheda)\n\n[undefined][1]"
        },
        "csd-2022/selecting-features": {
          "display_name": "Selezione delle caratteristiche",
          "content": "<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/02-Selecting-Features-a.png\"/>\n\n[][0]\n\n1.  Fai clic su una colonna per visualizzare ulteriori informazioni su di essa\n2.  Questa è una descrizione della colonna selezionata. Può fornire ulteriori informazioni sui dati in questa colonna. Se i dati provengono da un sondaggio, questo di solito conterrà la domanda che è stata posta nel sondaggio\n3.  Diversi grafici e visualizzazioni dei dati possono aiutarti a decidere se questa colonna sarà una caratteristica utile per Bot IA per cercare schemi. Puoi saperne di più sulla selezione delle caratteristiche in questi articoli: [Utilizzo di dati con caratteristiche categoriali][1] o [Utilizzo di dati con caratteristiche numeriche][2]\n4.  Premi il pulsante \"Aggiungi caratteristica\" per utilizzare questa colonna come uno degli input nel tuo modello di apprendimento automatico\n5.  Se desideri rimuovere una caratteristica dal tuo modello, premi la X sopra la caratteristica nella parte superiore della schermata\n\n[/][0]\n\n## Video\n\n(Apre YouTube in una nuova scheda)\n\n[undefined][3]"
        },
        "csd-2022/shapes-and-parameters": {
          "display_name": "Forme e Parametri",
          "content": "Alcuni blocchi in Sviluppo Giochi hanno degli input, o **parametri**, che non vengono utilizzati ogni volta.\n\n## Rect\n\nQuando hai usato per la prima volta il blocco [`rect` (#f78183)][0] , ha sempre creato un quadrato con lati lunghi 50. Aveva due ingressi che potevi usare per specificare le sue coordinate x e y. [`rect` (#f78183)][1] ha anche altri due **parametri opzionali**. Questi parametri vengono utilizzati per specificarne la larghezza e l'altezza. Puoi usare le frecce sul lato destro del blocco per mostrare o nascondere questi parametri opzionali.\n\n## Ellipse\n\nEllipse ha anche parametri opzionali per la sua larghezza e altezza dopo i parametri x e y. Puoi mostrare o nascondere questi parametri opzionali con la freccia sul lato destro del blocco, proprio come con il blocco [`rect` (#f78183)][2] ."
        },
        "csd-2022/sprite-interactions": {
          "display_name": "Interazioni tra personaggi",
          "content": "La maggior parte dei giochi coinvolgerà i personaggi che si scontrano tra loro. Ci sono quattro tipi di collisioni disponibili in Sviluppo Giochi: [`displace`(#f78183)][0], [`collide`(#f78183)][1], [`bounce`(#f78183)][2] e [`bounceOff`(#f78183)][3]. Questi blocchi causeranno un certo tipo di interazione tra il personaggio e il suo bersaglio e devono essere usati all'interno della funzione [`draw`(#fff176)][4].\n\n### Spostamento (displace)\n\n<img src=\"http://curriculum.code.org/media/uploads/displace2.gif\" style=\"width: 200px; float:right; margin: 10px 50px;\">\n\n[`displace`(#f78183)][5] fa sì che un personaggio spinga un altro personaggio (il _bersaglio_) fintanto che si toccano.\n\n<pre>\nfunction draw() {\n\n  background(\"skyblue\");\n  bunny.displace(carrot);\n  drawSprites();\n\n}\n\n</pre>\n\n### Collisioni (Collide)\n\n<img src=\"http://curriculum.code.org/media/uploads/collide.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`collide`(#f78183)][6] fa fermare un personaggio quando va a sbattere contro qualcosa. Puoi usarlo quando vuoi che il tuo personaggio sia bloccato da ostacoli.\n\n<pre>\nfunction draw() {\n\n  background(\"black\");\n  alien.collide(monster);\n  drawSprites();\n \n}\n\n</pre>\n\n### Bounce (rimbalzo)\n\n<img src=\"http://curriculum.code.org/media/uploads/bounce.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`bounce`(#f78183)][7] fa rimbalzare il personaggio e il bersaglio quando si toccano. Sia il personaggio che il bersaglio cambiano il modo in cui si muovono.\n\n<pre>\nfunction draw() {\n\n  background(\"lightgreen\");\n  giraffe.bounce(hippo);\n  elephant.bounce(pig);\n  snake.bounce(monkey);\n  drawSprites();\n}\n\n</pre>\n\n### BounceOff\n\n<img src=\"http://curriculum.code.org/media/uploads/bounceoff.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`bounceOff`(#f78183)][8] fa rimbalzare il personaggio sul bersaglio quando si toccano. Il bersaglio continua a muoversi come prima.\n\n<pre>\nfunction draw() {\n\n  background(\"pink\");\n  note.bounceOff(guitar);\n  drawSprites();\n \n}\n\n</pre>"
        },
        "csd-2022/sprite-properties": {
          "display_name": "Proprietà del personaggio",
          "content": "Se pensate a un _personaggio_ come a una raccolta di valori che rappresenta un oggetto nel mondo reale, le _proprietà_ di un personaggio sono come variabili che contengono tutti quei valori. Alcune delle proprietà più comuni dei personaggi includono:\n\n[][0]\n\n[][1]\n\n[][2]\n\n[][3]\n\n[][4]\n\n## Notazione con il punto\n\nNota che tutti gli esempi precedenti seguono uno schema comune di \\* \\*etichetta personaggi. proprietà personaggi\\*\\*. Chiamiamo questo formato _notazione con il punto_. La prima parte _sempre_ sarà unica per il personaggio da modificare e la seconda sarà _sempre_ una delle proprietà comuni a tutti i personaggi.\n\n## Proprietà di lettura e scrittura\n\nLe proprietà Sprite, come le variabili, sono valori che a volte vogliamo semplicemente leggere e talvolta su cui vogliamo scrivere. Quando trascini una proprietà del personaggio, questa assumerà una forma diversa a seconda che tu stia \\_leggendo il suo valore o \\_scrivendolo.\n\n[][5]\n\nNella prima immagine sopra il blocco [`sprite.x` (#f78183)][6] viene trascinato in un punto in cui viene letto, quindi mantiene la sua forma normale.\n\nNella seconda immagine, il blocco [`sprite.y` (#f78183)][7] viene trascinato su una nuova riga in cui verrà scritto, quindi viene modificato nella forma `sprite.y = ___`."
        },
        "csd-2022/sprites": {
          "display_name": "Personaggi",
          "content": "Un _personaggio_ è il nome che diamo a una raccolta di valori in Sviluppo Giochi che rappresenta un personaggio in una storia, un'animazione o un gioco. Un _personaggio_ può essere memorizzato in una variabile con un'etichetta, ma a differenza dei valori che hai memorizzato in variabili in precedenza, come i numeri, un _personaggio_ ti consente di memorizzare molti valori correlati tutti sotto la stessa etichetta\n\n# Creazione di un personaggio\n\nPuoi creare un nuovo _personaggio_ usando il blocco [`createSprite()`(#f78183)][1].\n\n[][2]\n\n[][0]\n\n1.  Il _personaggio_ come disegnato sullo schermo. In questo caso, il nostro _personaggio_ si trova a (200, 200), il centro dello schermo, e gli è stata assegnata l'animazione \"bunny\"\n2.  Il blocco [`createSprite()`(#f78183)][3], che crea un nuovo _personaggio_ in (200, 200) e lo assegna all'etichetta variabile `my_bunny`. Nota che la sola creazione dello _personaggio_ **non** lo disegna ancora a schermo. Questo accadrà più tardi.\n3.  Il blocco `sprite.setAnimation()` assegna un'animazione (o un'immagine) al _personaggio_. In questo caso, stiamo usando un'animazione chiamata \"coniglietto\", che è stata aggiunta nella scheda animazione. Nota che invece del nome predefinito della variabile `sprite`, l'abbiamo aggiornato a `my_bunny.setAnimation()` in modo che cambi l'animazione di `my_bunny` _personaggio_.\n4.  Poiché i _personaggi_ sono solo valori memorizzati come variabili, non vengono automaticamente disegnati sullo schermo. Il blocco [`drawSprites()`(#fff176)][4] dice a Sviluppo Giochi di disegnare tutti i _personaggi_ che sono stati creati sullo schermo.\n    [/][0]"
        },
        "csd-2022/style-sheets": {
          "display_name": "Fogli di stile",
          "content": "Gli sviluppatori web separano intenzionalmente contenuto e stile per semplificare la manutenzione del loro codice. HTML è il linguaggio utilizzato per strutturare il contenuto di una pagina web e CSS, che sta per **Cascading Style Sheets**, è un linguaggio che aggiunge stile a una pagina web.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/CS-Discoveries---Semester-1.png\" style=\"float: right; height: 300px;\">\n\n## Separare contenuto, struttura e stile.\n\nQuando i programmatori sviluppano le pagine web, è importante per loro distinguere il contenuto, la struttura e lo stile della pagina. Gli sviluppatori utilizzano l'HTML per organizzare i diversi tipi di contenuto sulla pagina, indicando come dovrebbe essere strutturato. Ciò consente loro di comunicare quale ruolo svolge ogni parte di contenuto nella pagina, come intestazione, elenco, tabelle o altri tipi di contenuto. Se non utilizzi CSS (Cascading Style Sheets) per modellare quel contenuto, il browser web applicherà gli stili predefiniti in base al modo in cui l'HTML lo ha strutturato. Man mano che impari le regole di stile CSS, avrai un maggiore controllo sullo stile applicato ai diversi tipi di contenuto della pagina.\n\n## Aggiunta di un foglio di stile\n\n<img alt=\"Web Lab Stylesheet\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\" class=\"center\" style=\"max-width: 600px;\">\n\n[][0]\n\n1.  Per aggiungere regole di stile CSS a una pagina HTML, è necessario creare un foglio di stile.\n2.  Questo è il foglio di stile.\n3.  Link al tuo foglio di stile. Il collegamento va all'interno del tag [`Head`(#fff176)][1] e ha questo aspetto:\n    `<link rel=\"stylesheet\" href=\"style.css\">`\n\n[/][0]\n\n## Set di regole CSS\n\nI set di regole CSS sono costituiti da due parti principali: il selettore e le regole.\n\n### Selettori\n\nI selettori possono essere qualsiasi parte della pagina Web a cui si desidera applicare lo stile. Un modo per identificare parti della pagina web è utilizzare i nomi del tipo di elemento. Selezionando un tipo di elemento, tutti gli elementi di quel tipo avranno lo stile dato. Il nome del selettore per i tipi di elementi HTML è il nome del tag con le parentesi rimosse. Nell'esempio seguente il selettore è h1 e modellerà tutti gli elementi h1 con le regole all'interno delle parentesi graffe (`{ }`).\n\n### Regole\n\nLe regole descrivono come devono cambiare gli elementi individuati dal selettore. Ogni regola è costituita da un nome di proprietà e da un valore, separati da due punti (`:`). Il nome della proprietà descrive l'oggetto della regola, ad esempio il colore o la dimensione, e il valore in che modo la proprietà deve cambiare. Ad esempio, il set di regole riportato di seguito farà in modo che tutte le intestazioni h1 della pagina abbiano testo blu sottolineato.\n\n    h1{\n      color:blue;\n      text-decoration: underline;\n    }\n\nLa punteggiatura nel set di regole è molto importante, perché è così che il computer sa dove inizia e finisce ogni regola.\n\n## FAQ\n\n1.  **Cos'è il CSS?**\n    -   CSS è un linguaggio che controlla il modo in cui appare il contenuto di un sito web. Utilizza **set di regole** per modificare l'aspetto di una pagina. Ogni **set di regole** ha un **selettore**, che specifica quali elementi della pagina saranno interessati, e le **regole**, che spiegano come visualizzare gli elementi. Ogni regola è composta da una **proprietà** e da un **valore** per tale proprietà.\n    -   Ecco un esempio di un set di regole che rende il testo in un tag h2 blu e corsivo:\n            h2 {\n            color: blue;\n            font-family: cursive;\n            }\n    -   In questo esempio, **h2** è il **selettore**, **color** e **font-family** sono **proprietà** e **blue** e **cursive** sono i **valori** per tali proprietà.\n2.  **Cos'è un foglio di stile?**\n    -   Un foglio di stile è un documento che controlla come apparirà una pagina web. I fogli di stile esterni sono file separati collegati alla pagina HTML.\n3.  **Come devo chiamare il mio foglio di stile?**\n    -   Puoi assegnare qualsiasi nome al tuo foglio di stile, ma è meglio scegliere un nome pertinente, ad esempio \"style.css\" o \"aboutmestyles.css\" in modo che sia chiaro quale sia il file. Il tuo file dovrebbe sempre terminare con l'estensione \".css\".\n4.  **Perché ho bisogno di tutta la punteggiatura?**\n    -   La punteggiatura, come le parentesi graffe `{}`, i due punti `:` e il punto e virgola `;` aiutano il computer a comprendere le regole del foglio di stile. Le parentesi graffe contengono tutte le regole per un particolare selettore. Ogni regola deve terminare con un punto e virgola e le proprietà e i valori sono sempre separati da due punti.\n5.  **Come funziona il codice?**\n    -   Ecco il codice che rende rossa l'intestazione `h1`:\n            h1 {\n            color: red;\n            }\n    -   `h1` è il **selettore**. Specifica quali elementi dovranno seguire le regole all'interno delle parentesi graffe.\n6.  `colore: rosso`; è la **regola** che rende rosso il testo all'interno dei tag h1.\n         \\-   `color` è la **proprietà**. Spiega di cosa tratta la regola, in questo caso, il colore del testo.\n         \\-   `rosso` è il **valore**. Spiega come dovrebbe essere applicata la regola, in questo caso rendendo il testo rosso.\n7.  **Come creo un nuovo set di regole?**\n    -   Per creare un nuovo set di regole, avrai bisogno di un selettore e di un elenco di regole. Il selettore è il nome del tag a cui si desidera applicare le regole. Le regole sono un elenco di coppie di proprietà e valori. Dovrai anche prestare molta attenzione alla punteggiatura nel set di regole. Guarda il codice qui sotto per un esempio di come dovrebbe apparire il codice. Dovrai modificare le specifiche della tua pagina.\n            p {\n            color: blue;\n            }\n    -   `p` is the **selector**. It specifies which elements will have to follow the rules inside the curly braces.\n    -   `color: blue`; is the **rule** that makes the text inside the p tags blue.\n        -   `color` is the **property**. It explains what the rule is about, in this case, the text color.\n        -   `blue` is the **value**. It explains how the rule should be applied, in this case making the text blue.\n8.  **Quali regole possono essere aggiunte a un set di regole di classe?**\n    -   Un set di regole di classe può avere le stesse regole di qualsiasi altro tipo di selettore. Se una regola non si applica al contenuto della classe (ad esempio, utilizzando font-size su un elemento senza testo), il computer ignorerà tale regola, ma continuerà a utilizzare le regole che funzionano.\n9.  **Perché il selettore ha un punto davanti?**\n    -   Nei CSS, un punto davanti a un selettore significa che il selettore è il nome di una classe [_(vedi la pagina sulle Classi CSS)_][2]. Se non c'è il punto, significa che il selettore è il nome di un tag HTML.\n\n**W3 Schools Links**\n\n-   [CSS Syntax][3]"
        },
        "csd-2022/tableDataStorage": {
          "display_name": "Archiviazione dei dati della tabella Sviluppo App",
          "content": "### Panoramica\n\nL'archiviazione dei dati delle tabelle di Sviluppo App consente la memorizzazione permanente dei dati\n  per un'app. Mentre [setKeyValue()][0] e [getKeyValue()][1] possono essere utilizzati per memorizzare più coppie chiave/valore indipendenti, l'archiviazione dei dati della tabella consente di archiviare dati simili insieme in un formato tabella.\n\nCome semplice esempio, supponiamo che tu stia creando un'app che raccoglie informazioni sul nome, l'età e il cibo preferito di una persona in modo da poter capire se le preferenze alimentari sono correlate all'età.\n\nSe stavi memorizzando questi dati su un pezzo di carta o con un'app per fogli di calcolo, potresti formattare i dati in questo modo:\n\n| Nome    | Età | Cibo     |\n| ------- | --- | -------- |\n| Abby    | 17  | Ravioli  |\n| Kamara  | 15  | Sushi    |\n| Rachele | 16  | Insalata |\n\nLa tabella ha una riga di nomi di colonna, quindi ogni riga aggiunta alla tabella riempie una o più colonne. L'archiviazione dei dati delle tabelle di Sviluppo App ti consente di archiviare dati con formattazione simile e fornisce semplici funzioni per [leggere][2], [creare][3], [eliminare][4] e [aggiornare][5] record (righe) in una tabella, direttamente dalla tua app.\n\n### Definizioni\n\n_Table:_ Una raccolta di record con nomi di colonna condivisi\n_Record:_ Una \"riga\" della tabella\n_Memorizzazione dati persistente:_ dati archiviati \"nel cloud\" separatamente dal codice in esecuzione nell'app. È possibile accedere ai dati tramite più aggiornamenti dell'app o utenti dell'app.\n\n### Visualizzazione dei dati\n\n  Visualizza i dati della tabella della tua app facendo clic sulla scheda \"Dati\" in Sviluppo App e facendo clic sul nome della tabella che desideri visualizzare.\n\n### Lettura e creazione di record di tabelle dalla tua app\n\nPer creare, leggere, aggiornare ed eliminare i record della tabella dalla tua app, utilizza le seguenti funzioni di \"Sviluppo App Dati\":\n\n-   Per creare una riga in una tabella: [createRecord][6]\n-   Per leggere una o più righe in una tabella: [readRecords][7]\n-   Per aggiornare una riga esistente in una tabella: [updateRecord][8]\n-   Per eliminare una riga esistente da una tabella: [deleteRecord][9]\n\n### Importazione in blocco dei dati della tabella da un file\n\nSe disponi di dati esistenti in un foglio di lavoro a cui vuoi che la tua app possa accedere, puoi utilizzare la funzione Importa per riempire rapidamente una tabella con i record del foglio di lavoro. Per importare i dati:\n\n_Passaggio 1._ **Formatta il foglio di lavoro**\nIn un editor di fogli di calcolo di tua scelta, assicurati che i dati siano formattati con i nomi delle colonne nella prima riga e i dati della tabella sotto. I dati del tuo foglio di calcolo dovrebbero essere formattati in questo modo, ma con valori a tua scelta (come il nostro esempio di cibo preferito):\n\n| colonna 1      | colonna 2      | ... colonna N  |\n| -------------- | -------------- | -------------- |\n| row1 col1 data | row1 col2 data | row1 colN data |\n| row2 col1 data | row2 col2 data | row2 colN data |\n| row3 col1 data | row3 col2 data | row3 colN data |\n\n_Passaggio 2._ **Salva il foglio di lavoro come file csv**\nUn file separato da virgole, o file csv, è un semplice formato di file che la maggior parte degli editor di fogli di calcolo dovrebbe supportare salvando il file come. Salva il file come csv e scaricalo sul tuo computer.\n\n_Passaggio 3._ **Importa il file nell'archivio dati della tabella di Sviluppo App**\nPer importare il file in una tabella in Sviluppo App:\n\n1.  Fai clic sul pulsante \"Visualizza dati\" in Sviluppo App mentre visualizzi il codice in \"Modalità codice\".\n2.  Fare clic sul nome di una tabella esistente o aggiungere una nuova tabella all'app.\n3.  Fare clic sul pulsante Importa e selezionare il file csv dal passaggio 2.\n4.  Fare clic su \"Sovrascrivi e importa\" per fare in modo che i dati del foglio di calcolo sovrascrivano i dati della tabella corrente.\n     **Nota.** I dati esistenti _saranno_ sovrascritti, quindi assicurati di non aver intenzione di conservare i dati correnti!\n\n_Passaggio 4._ **Rivedi i dati importati**\nSe i tuoi dati vengono importati correttamente, controlla la tabella per assicurarti che tutto sia corretto. Puoi apportare modifiche rapide alle righe\nfacendo clic sul pulsante \"Modifica\" per quella riga e modificando i valori in linea.\n\nSe i dati non sono stati importati correttamente, assicurati che il file csv originale sia stato formattato correttamente con nomi di colonne e righe valide.\n\nOra che disponi di dati nella tua tabella, puoi utilizzare le funzioni di \"Sviluppo App Dati\" collegate sopra per leggere, aggiornare, eliminare o creare nuove righe nella tua tabella"
        },
        "csd-2022/taking-input-with-getproperty": {
          "display_name": "Accettare la ricezione degli input con getProperty",
          "content": "Il comando [`getProperty()`(#fff176)][0] consente di ottenere il valore corrente delle proprietà degli elementi di design. Come [`setProperty()`(#fff176)][1], il suo primo input è l'id di un elemento di design e il secondo è una proprietà di quell'elemento. A differenza di [`setProperty()`(#fff176)][2], il comando [`getProperty()`(#fff176)][3] non ha un terzo input.\n\nPuoi usare questo comando su qualsiasi elemento di progettazione, ma è particolarmente utile se utilizzato con gli elementi Text Input, Dropdown, Checkbox, Radio Button e Slider. Questi elementi consentono all'utente di modificare il proprio valore e utilizzando [`getProperty()`(#fff176)][4] è possibile scrivere programmi che sfruttano l'input dell'utente.\n\n## Esempio di getProperty\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/getProperty_crop.png\" style=\"margin: 20px auto\" />\n\nIn questo esempio, stiamo usando [`getProperty()`(#fff176)][5] per ricevere input da un input di testo, un menu a discesa e una casella di controllo. Sebbene questo esempio registri questi valori nella consolle, puoi anche salvarli in variabili o usare [`setProperty()`(#fff176)][6] per modificare altri elementi di progettazione in base a questi valori."
        },
        "csd-2022/text-properties": {
          "display_name": "Proprietà del testo",
          "content": "Sono disponibili molte proprietà CSS che ti consentono di definire lo stile del testo sulla tua pagina. Ecco una recensione di alcuni dei più comuni\n\n| Proprietà           | Cosa cambia                  | Esempio                       |\n| ------------------- | ---------------------------- | ----------------------------- |\n| ------------------- | --------------------------   | ----------------------------- |\n| **color**           | Il colore del tuo testo      | `color: maroon;`              |\n| **text-align**      | L'allineamento del tuo testo | `text-align: center;`         |\n| **text-decoration** | Stile aggiuntivo             | `text-decoration: underline;` |\n| **font-family**     | Quale font usare             | `font-family: fantasy;`       |\n| **font-size**       | La dimensione del tuo testo  | `font-size: 20px;`            |\n\n## Esempio di testo con stile\n\nSe mettiamo tutto insieme, potresti ottenere un testo come questo:\n\n   p {\n      color: maroon;\n      text-align: center;\n      text-decoration: underline;\n      font-family: fantasy;\n      font-size: 20px;\n    }\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-05-03-09.38.04.png\" style=\"max-width: 300px; margin: 10px auto;\" class=\"center\">\n\n## Specifica dei caratteri\n\nPotresti notare quando usi CSS come `font-family: fantasy;` che il tuo testo appare diverso su computer diversi. Questo perché stiamo solo dicendo al browser quale _tipo_ di font usare, non quale _specifico_ font.\n\n## FAQ\n\n1.  **Quali colori posso usare nei CSS?**\n    -   CSS include i nomi dei colori più comuni (rosso, blu, verde, ecc.) e molti altri non comuni. Puoi vedere un elenco completo dei nomi dei colori CSS su [W3Schools - HTML Color Names][0]. Puoi ancora usare i colori che non sono inclusi nell'elenco con nome, ma dovrai usare i loro valori RGB. Puoi leggere ulteriori informazioni sull'utilizzo dei colori nei CSS su [W3Schools - CSS Legal Color Values][1].\n2.  **Ho usato valori RGB diversi, ma anche il mio funziona.**\n    -   Poiché RGB crea milioni di colori diversi, alcuni sono così simili che le persone hanno difficoltà a distinguerli. Ciò significa che ci sono più valori RGB che sono abbastanza vicini da funzionare per il nostro colore rosso scuro.\n3.  **Quali sono i valori possibili per font-family?**\n    -   Puoi scegliere tra \"serif\", \"sans-serif\", \"cursive\", \"fantasy\" e \"monospace\". Puoi anche provare caratteri più specifici come descritto in [W3Schools - Combinazioni di caratteri CSS Web Safe][2].\n4.  **Quali sono i valori possibili per la decorazione del testo?**\n    -   Puoi scegliere tra \"sottolineato\", \"sopralineato\" e \"lineato\". Puoi leggere di più sulla proprietà text-decoration su [W3Schools - CSS text-decoration Property][3].\n5.  **Perché `text-align: left` non fa nulla?**\n    -   La maggior parte delle proprietà ha valori predefiniti. I valori predefiniti sono gli stili che un elemento avrà automaticamente prima di aggiungere il tuo foglio di stile. Il valore predefinito per text-align viene lasciato, quindi non cambia rispetto a come appariva già.\n6.  **Quali sono i valori possibili per l'allineamento del testo?**\n    -   Puoi scegliere tra \"sinistra\", \"destra\" e \"centro\". Puoi leggere ulteriori informazioni sulla proprietà text-align su [W3Schools - CSS text-align Property][4].\n7.  **Perché `letter-spacing: 0px;` non fa nulla?**\n    -   La maggior parte delle proprietà ha valori predefiniti. I valori predefiniti sono gli stili che un elemento avrà automaticamente prima di aggiungere il tuo foglio di stile. Il valore predefinito per la spaziatura delle lettere è 0, quindi non cambia rispetto a come appariva già.\n8.  **Quali sono i valori possibili per la spaziatura delle lettere?**\n    -   Puoi scegliere tra numeri negativi e positivi. I numeri negativi distanziano le lettere l'una dall'altra mentre i numeri positivi distanziano ulteriormente le lettere.\n9.  **Cosa significa `px` / Cos'è un pixel?**\n    -   Pixel, che è abbreviato `px`, è il modo in cui gli elementi vengono misurati nei CSS. Ha le dimensioni di un singolo punto luminoso sullo schermo.\n10. **Perché `text-shadow: 0px 0px;` non fa nulla?**\n    -   La maggior parte delle proprietà ha valori predefiniti. I valori predefiniti sono gli stili che un elemento avrà automaticamente prima di aggiungere il tuo foglio di stile. Il valore predefinito per text-shadow è 0px 0px, quindi non cambia rispetto a come appariva già.\n11. **Quali sono i valori possibili per text-shadow?**\n    -   Puoi scegliere tra numeri negativi e positivi. I numeri negativi spostano l'ombra verso sinistra o verso l'alto mentre i numeri positivi spostano l'ombra verso destra o verso il basso.\n\n**Collegamenti W3 Schools**\n\n-   [Proprietà testo CSS][5]"
        },
        "csd-2022/the-accelerometer": {
          "display_name": "L'accelerometro",
          "content": "<img src=\"https://curriculum.code.org/media/uploads/cp_accel.png\" style=\"float: right; margin: 20px; width: 300px;\">\n\nLa maggior parte degli input forniti da Circuit Playground o micro:bit sono dispositivi relativamente semplici, che danno un unico valore. L'accelerometro è un tipo di sensore più complesso, che misura un numero di cose diverse contemporaneamente e quindi fornisce informazioni più complesse all'utente. \n\nUn accelerometro viene comunemente utilizzato per rilevare il movimento e la posizione in dispositivi come laptop, telefoni, controller di realtà virtuale e tracker sanitari. Ad esempio, i contapassi utilizzano il movimento degli accelerometri per tenere traccia di quanti passi fai.\n\n## Misurazione dell'orientamento\n\nL'accelerometro può determinare l'_orientamento_ della scheda per capire come è posizionata la scheda. \n\n| Orientamento    | Tipo di movimento monitorato | Gamma di valori |\n| --------------- | ---------------------------- | --------------- |\n| **pitch**       | Movimento avanti e indietro  | -90 a 90        |\n| **roll**        | Movimento laterale           | -90 a 90        |\n| **inclination** | Moto rotatorio               | da -180 a 180   |\n\n<br>\n\nUsando il blocco [`accelerometer.getOrientation()`(#f78183)][0], scriviamo programmi che rispondono ai cambiamenti di pitch, roll e inclinazione. Questo blocco restituisce un numero per ognuno di questi orientamenti che indica in che direzione si sta inclinando la tavola. Ad esempio, il tono è positivo quando viene inclinato all'indietro e negativo quando viene inclinato in avanti.\n\n<div style=\"clear:both;\"></div>\n\n<img src=\"https://images.code.org/1f7f2429d4994c541d3cfea784bf6eb8-Micro_bit Accelerometer.png\" style=\"float: right; margin: 20px; width: 300px;\">\n\n## Eventi dell'accelerometro\n\nProprio come gli altri sensori, l'accelerometro ha gli eventi `data` e `change`. Questi sono particolarmente utili perché permettono di tenere costantemente traccia dei valori aggiornati dell'accelerometro, come l'orientamento. \n\n| Evento   | Descrizione                                                                                                                                                                                                                                       |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `data`   | Si attiva ogni 100 ms per controllare i dati dall'accelerometro.                                                                                                                                                                                  |\n| `change` | Si attiva ogni volta che l'accelerometro rileva un cambiamento nel movimento. Questo controlla se i dati correnti dal sensore sono gli stessi di 100 ms fa. Se questo è il caso, l'evento non si attiverà. In caso contrario, l'evento si attiva. |\n| `shake`  | Si attiva ogni volta che la scheda viene scossa.                                                                                                                                                                                                  |\n\nA volte non ci interessa quale sia l'orientamento della scheda, ci importava solo che si muovesse. È qui che entrano in gioco eventi come \"change\" e \"shake\". "
        },
        "csd-2022/the-counter-pattern": {
          "display_name": "Lo schema a contatore",
          "content": "In Sviluppo Giochi ci siamo affidati allo _schema a contatore_ per aggiornare continuamente le proprietà dei personaggi e creare animazioni. Sebbene gli elementi in Sviluppo App non abbiano lo stesso tipo di proprietà dei personaggi, possiamo comunque applicare lo scheme a contatore per creare alcune semplici animazioni.\n\n[][0]\n\nCome il draw loop in Sviluppo Giochi, gli eventi «dati» eseguono ripetutamente un singolo blocco di codice. Poiché questi eventi eseguono codice ripetutamente, puoi utilizzare lo schema a contatore all'interno di un evento «data» per apportare un semplice movimento al tuo programma. Hai utilizzato l'evento data per tracciare l'accelerometro stesso, ma per creare programmi più complessi dovrai aggiornare valori aggiuntivi all'esterno dell'accelerometro. \n\n## Spostamento di elementi di progettazione con lo schema a contatore\n\n<img src=\"https://curriculum.code.org/media/uploads/anchor.gif\" style=\"float: right; width: 300px; margin-left: 20px;\">\n<img src=\"https://curriculum.code.org/media/uploads/counter_pattern.png\" style=\"max-width: 500px;\">\n\nIl codice precedente utilizza lo schema a contatore in un evento «dati» per spostare un elemento di design sullo schermo. Per rendere il nostro codice più leggibile, abbiamo salvato l'attuale posizione del valore «y» di «anchor» in una variabile prima di utilizzarla nello schema a contatore, ma potresti anche scrivere lo schema come:\n\n`setProperty(\"anchor\", \"y\", getProperty(\"anchor\", \"y\") + 1);`"
        },
        "csd-2022/the-counter-pattern-2": {
          "display_name": "Lo schema a contatore",
          "content": "Aumentare o diminuire i numeri è un modello comune e incredibilmente utile nella programmazione. Questo \"schema a contatore\" può essere utilizzato per far volare un'immagine sullo schermo, per il conto alla rovescia di un timer o per tenere traccia dei clic. Utilizzato con una variabile [`x`(#f78183)][1] per contare in avanti di uno, lo schema a contatore può avere questo aspetto:\n\n[][2]\n\nOgni volta che questo codice viene eseguito, prenderà il valore corrente di x, aggiungerà 1 e lo salverà come nuovo valore di x. Sebbene questa particolare istanza dello schema a contatore utilizzi l'addizione, potresti anche utilizzare la sottrazione per il conto alla rovescia.\n\n## Movimento con lo schema a contatore\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_code.png\" style=\"float: left;\">\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_pattern.gif\" style=\"float: right;\">\n\n[][0]\n\nIl codice sopra utilizza il pattern contatore nel ciclo di disegno per spostare tre sprite. Nota che ciascuno dei tre sprite si muove in modo diverso a seconda che aggiorni [`x`(#f78183)][3], [`y`(#f78183)][4] dello sprite o entrambi.\n\n[/][0]\n\n## Altri usi per lo schema a contatore\n\nQualsiasi blocco che accetta un numero come input potrebbe essere animato utilizzando lo schema a contatore nel ciclo di disegno. Dai un'occhiata ai tre esempi seguenti, ognuno dei quali utilizza lo schema a contatore per animare un aspetto diverso dell'immagine. Sotto ogni immagine c'è un esempio del codice utilizzato _all'interno del Draw Loop_ per produrre l'animazione.\n\n<div markdown=1 style=\"float: left; margin: 10px; width: 30%\">\n\n[][5]\n\n    sprite.rotation = sprite.rotation - 1;\n\n</div>\n\n<div markdown=1 style=\"float: left; margin: 10px; width: 30%\">\n\n[][6]\n\n    sprite.scale = sprite.scale + 0.1;\n\n</div>\n\n<div markdown=1 style=\"float: left; margin: 10px; width: 30%\">\n\n[][7]\n\n    width = width + 1;\n    height = height - 1;\n    ellipse(200, 200, width, height);\n\n</div>"
        },
        "csd-2022/the-draw-loop": {
          "display_name": "La funzione ciclica `draw()`",
          "content": "## Animazioni\n\n[][0]\n\nUn'animazione utilizza una serie di immagini per creare l'illusione di un movimento fluido. Ogni singola immagine è chiamata cornice. Di solito avrai bisogno di vedere almeno diversi fotogrammi al secondo affinché il movimento appaia fluido.\n\n## La funzione ciclica `draw()`\n\n[][1]\n\nPer creare animazioni, avrai bisogno di un modo per continuare a disegnare fotogramma dopo fotogramma. In Sviluppo Giochi, questo viene fatto usando la funzione ciclica [`draw`(#fff176)][2]. Il modo in cui i programmi vengono eseguiti in Sviluppo Giochi è\n\n1.  Esegui ogni parte di codice all'esterno della funzione [`draw`(#fff176)][3]\n2.  Continua a eseguire il codice all'interno della funzione [`draw`(#fff176)][4] più e più volte, 30 volte al secondo\n\nOgni volta che il codice all'interno della funzione [`draw`(#fff176)][5] viene eseguito è come una nuova pagina in un libro animato. Apportando ogni volta piccole modifiche a ciò che viene disegnato, puoi utilizzare Sviluppo Giochi per creare animazioni.\n\n## La funzione ciclica `draw()` con le forme\n\n| Codice | Animazione                                                                                                                    |\n| ------ | ----------------------------------------------------------------------------------------------------------------------------- |\n| [][6]  | <img src=\"https://images.code.org/4fb785c73362acbcad5639fb74706b38-image-1492194379719.gif\" style=\"float:right;height:150px\"> |\n\nQuesto programma imposta il colore di riempimento e disattiva il tratto all'esterno della funzione ciclica `draw()`, quindi esegue ripetutamente il codice all'interno di [`draw`(#fff176)][7]. Il programma continuerà a disegnare punti in posizioni casuali per sempre.\n\n## La funzione ciclica `draw()`con i personaggi\n\n| Codice | Animazione                                                                                                        |\n| ------ | ----------------------------------------------------------------------------------------------------------------- |\n| [][8]  | <img src=\"https://images.code.org/b2c4dc68aa90fc1b56421ec69a66fa77-image-1492196934112.gif\" style=\"height:150px\"> |\n\nQuesto programma crea un personaggio e imposta la sua animazione al di fuori della funzione ciclica `draw()`. Quindi assegna ripetutamente al personaggio una nuova posizione x e ridisegna lo sfondo arancione e il personaggio per farlo muovere."
        },
        "csd-2022/timed-for-loop": {
          "display_name": "Ciclo con contatore temporizzato",
          "content": "Il ciclo con contatore `for loop` è un comodo costrutto con alcune scorciatoie davvero utili per rendere il conteggio con un ciclo molto più semplice. In particolare, la sintassi di un ciclo _con contatore_ consente di:\n\n1.  Crea una variabile contatore (spesso chiamata `i`)\n2.  Specificare la condizione che determina se mantenere o meno il ciclo\n3.  Indicare come deve essere incrementato il contatore\n\nQuando usi un _ciclo temporizzato_ al posto di un _ciclo con contatore_ dovrai occuparti di questi tre compiti da solo.\n\n### Usare un ciclo temporizzato come ciclo con contatore\n\nEcco un confronto di come potresti replicare il comportamento di un _ciclo con contatore_ con un _ciclo temporizzato_. Entrambi questi esempi si ripeteranno quattro volte, stamperanno quanto segue nella console:\n\n     ciclo #0\n     ciclo #1\n     ciclo #2\n     ciclo #3\n\n[Per il confronto tra cicli e cicli temporizzati][1]\n\n[][0]\n\n1.  La variabile contatore. Si noti che quando si utilizza un _ciclo temporizzato_ la variabile deve essere creata prima del ciclo.\n2.  La condizione di uscita. Non appena questa condizione è \"false\", il ciclo smetterà di ripetersi. Una differenza fondamentale qui è che il _ciclo con contatore_ controlla la sua condizione di uscita **prima** di ogni ripetizione del ciclo, mentre il _ciclo temporizzato_ controlla la condizione **durante** ogni ripetizione.\n3.  Lo schema a contatore. Questo sposta il contatore verso l'alto di ogni ripetizione. Un'altra differenza qui è che il _ciclo con contatore_ esegue il suo schema a contatore **dopo** ogni ripetizione, mentre il _ciclo temporizzato_ esegue lo schema a contatore **durante** ogni ripetizione.\n4.  Il codice da ripetere. Nell'esempio _ciclo temporizzato_ abbiamo inserito questo in un'istruzione _if/else_ in modo da poter verificare se eseguire il codice o meno nello stesso modo in cui lo fa il ciclo con contatore.\n\n[/][0]\n\n### Altri approcci\n\nL'esempio offerto sopra è la corrispondenza più vicina a come funziona un _ciclo con contatore_, ma hai la libertà di strutturare il tuo _ciclo temporizzato_ come preferisci. Ciascuno dei seguenti tre esempi eseguirà le stesse quattro ripetizioni del precedente, ma ognuno utilizza una **condizione di uscita diversa**.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_1.png\" style=\"width: 30%; padding: 10px; float: left;\">\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_2.png\" style=\"width: 30%; padding: 10px; float: left;\">\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_3.png\" style=\"width: 30%; padding: 10px; float: left;\">"
        },
        "csd-2022/timed-loop": {
          "display_name": "Ciclo temporizzato",
          "content": "Il ciclo con contatore `for loop` è una struttura davvero utile per ripetere qualcosa molte volte velocemente o iterare su un elenco di cose, ma non serve a molto se si desidera ripetere qualcosa più lentamente. Nei casi in cui desideri controllare la velocità con cui avviene la ripetizione, ti consigliamo un **ciclo temporizzato**.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop.png\" alt=\"timedLoop\" class=\"center\" style=\"width: 600px; margin: 25px auto;\">\n\n### La struttura di un ciclo temporizzato\n\nUn _ciclo temporizzato_ è in realtà composto da due blocchi:\n\n-   Il blocco [`TimedLoop()`(#64B5F6)][1] , che richiede due ingressi:\n    -   L'input _ms_ determina quanti millisecondi attendere prima di ripetere il ciclo. Il valore predefinito è 1000 millisecondi o 1 secondo.\n    -   L'input _callback_ è la funzione che verrà eseguita ogni volta che il ciclo si ripete.\n\n-   Il blocco [`stOptimedLoop()`(#64B5F6)][2] che interrompe _tutti_ i cicli temporizzati in esecuzione.\n\n### Come funziona\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedloop_diagram.png\" alt=\"timedLoop diagram\" class=\"center\">\n\n[][0]\n\n1.  L'intero blocco è il ciclo temporizzato\n2.  Numero di millisecondi da attendere dopo ogni ripetizione del ciclo. 1000 millisecondi = 1 secondo.\n3.  La sezione verde è la nostra _funzione di richiamo (callback)_, il codice che eseguiamo ogni volta che il ciclo si ripete.\n4.  Il blocco [`stOptimedLoop()`(#64B5F6)][3] dice a tutti i _cicli temporizzati_ in esecuzione di interrompere l'esecuzione. Nota che quando viene chiamato [`stOptimedLoop()`(#64B5F6)][4] , il ciclo temporizzato non si interromperà necessariamente immediatamente, semplicemente non si ripeterà la volta successiva.\n\n[/][0]"
        },
        "csd-2022/update-screen-pattern": {
          "display_name": "Lo schema updateScreen()",
          "content": "| Nome                     | Codice (blocco) | Codice (testo) |\n| ------------------------ | --------------- | -------------- |\n| Lo schema updateScreen() | [][0]           | [][1]          |\n\n## Come funziona?\n\nMolti progetti Sviluppo App vengono eseguiti nel modo seguente.\n\n1.  L'utente interagisce con un elemento della schermata (come fare clic su un pulsante o digitare in una casella di testo). Questo attiva un gestore di eventi.\n2.  Il gestore dell'evento modifica i valori memorizzati nelle variabili.\n3.  Le informazioni a schermo vengono aggiornate per riflettere la modifica alla variabile.\n\nIn genere ognuno dei tuoi gestori di eventi (blocchi [`onEvent`(#fff176)][2]) includerà lo stesso codice per il passaggio 3, aggiornando la schermata. Per evitare questo problema, crea una singola funzione chiamata `updateScreen` che includa il codice per modificare ogni elemento sullo schermo una volta che le variabili sono state aggiornate.\n\nDi solito vorrai chiamare `updateScreen` all'interno di ogni gestore di eventi e vorrai anche chiamarlo una volta all'inizio del tuo programma. Ciò garantisce che venga sempre utilizzato lo stesso codice per aggiornare le informazioni visualizzate sullo schermo."
        },
        "csd-2022/using-data-with-categorical-features": {
          "display_name": "Utilizzo di dati con caratteristiche categoriali",
          "content": "## Osservare i dati categoriali\n\n<img style=\"margin-right: 10px; margin-left: 10px; bordo: 2px nero pieno\" src=\"https://curriculum.code.org/media/uploads/CatFeature_1.png\" width=\"75%\" />\n<p>\nQuando fai clic su una colonna con dati categoriali, puoi visualizzare ulteriori informazioni nel pannello sul lato destro di Laboratorio IA\n</p>\n\n[][0]\n\n1.  Questo è il nome della colonna selezionata\n2.  Questa è una descrizione della colonna selezionata. Può fornire ulteriori informazioni sui dati in questa colonna. Se i dati provengono da un sondaggio, questo di solito conterrà la domanda che è stata posta nel sondaggio\n3.  Un grafico **a schede incrociate** mostra in che modo questa colonna è correlata all'etichetta che stai tentando di prevedere.\n4.  Un grafico **a barre** mostra quante volte un determinato valore appare nel grafico\n5.  Premi il pulsante \"Aggiungi caratteristica\" per utilizzare questa colonna come uno degli input nel tuo modello di machine learning\n\n[/][0]\n\n## Lettura di grafici a campi incrociati\n\nNel grafico a schede incrociate, controlla se la caratteristica che hai scelto ha una forte relazione con la tua etichetta. La colorazione e le percentuali ti aiuteranno: più i dati sono raggruppati attorno a un valore particolare, più sarà utile per Bot IA nel prendere la sua decisione.\n\n<div style=\"altezza: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px;\" src=\"https://curriculum.code.org/media/uploads/image_xbg0lmF.png\" width=\"30%\" />\n<p>\nQuesto grafico mostra una forte relazione tra la caratteristica e l'etichetta. Il 90% delle persone che hanno detto di no al condimento italiano ha anche affermato di non gradire la loro insalata, che è uno schema che Bot IA può notare. Allo stesso modo, l'89% delle persone che hanno detto di sì al condimento italiano ha anche affermato di apprezzare l'insalata.</p>\n<p>\nCiò significa che se Bot IA ti chiede \"Hai condimento italiano sulla tua insalata\", ha un forte cambiamento nel prevedere se ti è piaciuta o meno la tua insalata in base alla tua risposta.\n</p>\n</div>\n\n<div style=\"altezza: 250px\">\n<img style=\"float:right; margin-right: 10px; margin-left: 10px;\" src=\"https://curriculum.code.org/media/uploads/image_6FVwl65.png\" width=\"30%\" />\n<p>\nQuesto grafico <strong>non</strong> mostra una forte relazione tra l'elemento e l'etichetta. I dati mostrano che quando le persone mangiano il pollo nell'insalata, a circa il 50% di loro non piaceva la loro insalata e al restante 50% piaceva la loro insalata. Praticamente è come lanciare una moneta! Questo tipo di relazione può confondere Bot IA , poiché nessuna delle risposte mostra una forte connessione tra loro.</p>\n<p>\nCiò significa che se Bot IA ti chiede \"Hai mangiato pollo nella tua insalata\", le possibilità che preveda anche se ti piace o meno l'insalata è come lanciare una moneta.\n</p>\n</div>\n\n## Video\n\n(Apre YouTube in una nuova scheda)\n\n[undefined][1]"
        },
        "csd-2022/using-data-with-numerical-features": {
          "display_name": "Utilizzo di dati con caratteristiche numeriche",
          "content": "## Osservare i dati numerici\n\n<img style=\"margin-right: 10px; margin-left: 10px; bordo: 2px nero pieno\" src=\"https://curriculum.code.org/media/uploads/NumFeature_1.png\" width=\"75%\" />\n<p>\nQuando fai clic su una colonna con dati numerici, puoi visualizzare ulteriori informazioni nel pannello sul lato destro di Laboratorio IA\n</p>\n\n[][0]\n\n1.  Questo è il nome della colonna selezionata\n2.  Questa è una descrizione della colonna selezionata. Può fornire ulteriori informazioni sui dati in questa colonna. Se i dati provengono da un sondaggio, questo di solito conterrà la domanda che è stata posta nel sondaggio\n3.  Un **grafico a dispersione** mostra in che modo questa colonna è correlata all'etichetta che stai tentando di prevedere.\n4.  Un grafico **Intervallo** mostra i valori minimo e massimo in questa colonna e l'intervallo tra di essi. Questo può essere utile per identificare se c'è un errore nei dati, ad esempio un valore accidentalmente troppo grande o troppo piccolo.\n5.  Premi il pulsante \"Aggiungi caratteristica\" per utilizzare questa colonna come uno degli input nel tuo modello di machine learning\n\n[/][0]\n\n## Lettura di grafici a dispersione\n\nNel grafico a dispersione, controlla se la caratteristica che hai scelto ha una forte relazione con la tua etichetta. Puoi vedere se i punti seguono uno schema che ti permetterà di fare un'affermazione \"Quando la caratteristica è... significa che l'etichetta è...\". Per esempio:\n\n-   Quando la temperatura è _più bassa_, il numero di pipistrelli nel cielo è _più alto_\n-   Quando il costo dei biglietti è _più alto_, la partecipazione alle partite è _più bassa_\n\nQuesti tipi di schemi rendono più facile per Bot IA fare previsioni.\n\n<div style=\"altezza: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; bordo: solido 2px nero\" src=\"https://curriculum.code.org/media/uploads/image_PxfTjEs.png\" width= \"50%\" />\n<p>\nQuesto grafico mostra una forte relazione tra la caratteristica nella parte inferiore del grafico e l'etichetta a lato del grafico.\n-   Quando c'è un basso numero di antilopi, c'è anche un basso numero di leoni\n-   Quando c'è un alto numero di antilopi, c'è anche un alto numero di leoni.\n<p>\nCiò significa che se Bot IA sa quante antilopi ci sono in natura, ha un forte cambiamento nel prevedere quanti leoni ci sono anche in natura.\n</p>\n</div>\n\n<div style=\"altezza: 250px\">\n<img style=\"float:right; margin-right: 10px; margin-left: 10px; bordo: solido 2px nero\" src=\"https://curriculum.code.org/media/uploads/image_LtrzSMX.png\" width= \"50%\" />\n<p>\nQuesto grafico <strong>non</strong> mostra una forte relazione tra l'elemento e l'etichetta. Quando guardi che giorno del mese è, c'è un'ampia gamma nel numero di leoni che potresti vedere in quel particolare giorno. Un grafico migliore avrebbe tutti i punti raggruppati più vicini per un particolare giorno del mese.\n<p>\nCiò significa che se Bot IA sa che giorno del mese è, ciò non aiuta a restringere il numero di leoni che potrebbero essere stati allo stato brado quel giorno.\n</p>\n</div>\n\n## Video\n\n(Apre YouTube in una nuova scheda)\n\n[undefined][1]"
        },
        "csd-2022/variable-with-string-concatenation-pattern": {
          "display_name": "Variabile con schema di concatenazione di stringhe",
          "content": "| Nome                                     | Codice (blocco) | Codice (testo)                                                                                                           |\n| ---------------------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| Concatenazione di stringhe con variabili | [][0]           | `var myString = \"rock\";` <br> `var myOtherString = \"roll\";` <br><br> `var myStory = myString + \" and \" + myOtherString;` |\n\nIl modello potrebbe essere letto così:\n\n_La variabile `myString` ottiene il valore `\"rock\"`. La variabile `myOtherString` ottiene il valore `\"roll\"`. La variabile `myStory` valuta l'espressione `myString + \" e \" + myOtherString` in `\"rock and roll\"`. `\"rock and roll\"` è ora memorizzato in `myStory`._\n\n## Come funziona?\n\nLe stringhe sono caratteri, simboli o numeri contenuti tra virgolette.\n\n`\"Il mio migliore amico\"`\n<br>\n`\"243\"`\n<br>\n`\"Wow!\"`\n\nLa concatenazione viene utilizzata per combinare una stringa con un'altra stringa o numero. Quelle stringhe o numeri possono anche essere memorizzati in variabili!\n\nPer concatenare usa il `+` tra i valori.\n\n`\"up\" + \" e \" + \"down\"`\n\nPer utilizzare la **Variabile con modello di concatenazione di stringhe** viene definita una variabile che memorizza il valore di una stringa combinata con un'altra stringa o numero.\n\n## Esempi\n\n[][1]\n\n_La variabile `myName` ottiene il valore `\"Randy\"`. La variabile \"myAge\" ottiene il valore \"16\". La variabile `statement` valuta l'espressione `myName+ \" ha \" + myAge + \" anni.\"` in `\"Randy ha 16 anni.\"`. `\"Randy ha 16 anni.\"` è memorizzato nella variabile `statement` che viene poi visualizzata sulla console._\n\n[][2]\n\n_La variabile `score` ottiene il valore `0`. La variabile `lives` ottiene il valore `3`. La variabile `stats` valuta l'espressione `\"Punteggio: \" + punteggio + \" Vite: \" + vite` in `\"Punteggio: 0 Vite: 3\"`. `\"Punteggio: 0 Vite: 3\"` è memorizzato nella variabile `stats` che viene poi stampata sulla console._\n\n[][3]\n\n_Le variabili vengono aggiornate ogni volta che si fa clic sui pulsanti utilizzando lo [schema a contatore con evento][4]. La variabile `stats` ottiene i valori delle variabili `score` e `lives` e li concatena con `\"Score: \"` e `\"Lives: \"` prima di aggiornare la visualizzazione sullo schermo._"
        },
        "csd-2022/variables": {
          "display_name": "Variabili",
          "content": "Una variabile consente di memorizzare un singolo valore nella memoria del computer con un nome descrittivo. L'uso delle variabili consente di fare facilmente riferimento allo stesso valore più volte nel programma o di salvare un numero a cui si desidera fare riferimento in seguito.\n\n## Creazione di variabili\n\n[][0]\n\nIl comando `var` creerà una nuova variabile con l'etichetta che le viene assegnata. Questa variabile ha l'etichetta `size`.\n\n## Assegnazione di valori\n\n[][1]\n\nL'operatore di assegnazione `=` assegnerà un nuovo valore alla variabile. Questo comando ha assegnato 100 alla variabile `size`. La variabile deve essere sempre sul lato sinistro. Dovresti leggere questo comando come «size gets 100\" poiché size sta ottenendo un nuovo valore di 100. Tutti i vecchi valori che potrebbero essere stati assegnati vengono persi per sempre.\n\n## Uso di un valore\n\n[][2]\n\nPer utilizzare il valore di una variabile, posiziona la sua etichetta nel punto del codice in cui desideri utilizzarla. Questo comando utilizza il valore in `size` per impostare la larghezza e l'altezza dell'ellisse.\n\n## Inizializzazione\n\n[][3]\n\nDi solito vorrai dare subito a una variabile il suo primo (o «iniziale») valore. È possibile inizializzare una variabile in un singolo comando combinando i comandi `var` e `=`.\n\nDopo aver inizializzato una variabile non è necessario utilizzare il comando `var` per assegnare un nuovo valore. Basta usare `=` come di consueto.\n\n\\[[4]]"
        },
        "csd-2022/velocity": {
          "display_name": "Velocità",
          "content": "I blocchi di velocità ([`VelocityX`(#f78183)][1] e [`VelocityY`(#f78183)][2]), indicano ai personaggi la velocità con cui muoversi in una particolare direzione, proprio come faceva prima lo schema a contatore. Nascondendo il codice del contatore all'interno di un blocco, puoi creare programmi ancora più complessi.\n\n# Movimento con Velocity\n\nIl codice che utilizza lo schema a contatore si trova a sinistra e il codice che utilizza i blocchi di velocità è a destra.\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_code.png\" style=\"float: left;\">\n<img src=\"https://curriculum.code.org/media/uploads/velocity.png\" style=\"width: 350px; float: right;\">\n\n[][0]\n\nCon [`VelocityX`(#f78183)][3] e [`VelocityY`(#f78183)][4], potete impostare le velocità dei personaggi quando li create per la prima volta, ma entrambi i programmi faranno muovere i personaggi come nella figura qui sotto.\n\n[/][0]\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_pattern.gif\" style=\"float: left;\">"
        },
        "csd-2022/velocity-and-the-counter-pattern": {
          "display_name": "Velocità e Schema di Conteggio",
          "content": "Puoi usare le proprietà `velocity` di un personaggio con lo schema a contatore per cambiare la velocità di un personaggio durante il programma. Questo fa accelerare o rallentare il personaggio.\n\n## Accelerare\n\nPer velocizzare un personaggio che ha una velocità **positiva**, devi **aggiungere** alla velocità all'interno dello schema a contatore. Per velocizzare un personaggio con una velocità **negativa**, devi **sottrarre** dalla velocità all'interno dello schema a contatore.\n\n### Salire\n\n<img src=\"http://curriculum.code.org/media/uploads/accup.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nflybot.velocityY = -1;\n\nfunction draw() {\n  background(\"black\");\n  flybot.velocityY = flybot.velocityY - 1;\n  drawSprites(); \n}\n\n</pre>\n\n### Scendere\n\n<img src=\"http://curriculum.code.org/media/uploads/accdown.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nbone.velocityY = 1;\n\nfunction draw() {\n  background(\"black\");\n  bone.velocityY = bone.velocityY + 1;\n  drawSprites();\n}\n\n</pre>\n\n### Andare a sinistra\n\n<img src=\"http://curriculum.code.org/media/uploads/accleft.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\ncart.velocityX = -1;\n\nfunction draw() {\n  background(\"black\");\n  cart.velocityX = cart.velocityX - 1;\n  drawSprites();\n}\n\n</pre>\n\n### Andare a destra\n\n<img src=\"http://curriculum.code.org/media/uploads/accright.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nrobot.velocityX = 1;\n\nfunction draw() {\n  background(\"black\");\n  robot.velocityX = robot.velocityX + 1;\n  drawSprites();\n}\n\n</pre>\n\n## Rallentare\n\nPer rallentare un personaggio che ha una velocità **positiva**, devi **sottrarre** dalla velocità all'interno dello schema a contatore. Per rallentare un personaggio con una velocità **negativa**, devi **aggiungere** la velocità all'interno dello schema a contatore. Una volta che un personaggio ha rallentato fino a fermarsi, inizierà ad accelerare nella direzione opposta. Questo può far sembrare che il tuo personaggio stia saltando o sia stato lanciato in aria.\n\n### Salire\n\n<img src=\"http://curriculum.code.org/media/uploads/decup.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nbone.velocityY = -25;\n\nfunction draw() {\n  background(\"black\");\n  bone.velocityY = bone.velocityY + 1;\n  drawSprites();\n}\n\n</pre>\n\n### Andare a destra\n\n<img src=\"http://curriculum.code.org/media/uploads/decright.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\ncart.velocityX = 25;\n\nfunction draw() {\n  background(\"black\");\n  cart.velocityX = cart.velocityX - 1;\n  drawSprites();\n}\n\n</pre>\n\n## Arresta il tuo personaggio\n\nSe vuoi che il tuo personaggio si fermi, piuttosto che iniziare a muoversi nella direzione opposta, dovrai usare un'istruzione condizionale per verificare che il personaggio si stia muovendo nella direzione corretta prima di usare lo schema a contatore e fermare il personaggio se non è fermo.\n\n<img src=\"http://curriculum.code.org/media/uploads/decdown.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nplane.velocityY = 25;\n\nfunction draw() {\n  background(\"black\");\n  if (plane.velocityY > 0) {\n    plane.velocityY = plane.velocityY - 1;\n  }\n  drawSprites();\n}\n\n</pre>"
        },
        "csd-2022/web-lab": {
          "display_name": "Sviluppo Web",
          "content": "# Sviluppo Web\n\nPer aiutarti ad avere successo nell'utilizzo del nostro strumento, troverai alcune domande frequenti che gli utenti hanno posto con Sviluppo Web.\n\n## Informazioni generali\n\n### Lo strumento di ispezione\n\nLo strumento di ispezione è un ottimo modo per saperne di più sul codice sconosciuto in Sviluppo Web. Per attivare lo strumento di ispezione, fate clic su <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png\" style=\"width:100px\">. Saprai che lo strumento di ispezione è attivo perché il pulsante diventerà bianco e dirà «Inspector: On». Una volta attivato lo strumento di ispezione, puoi passare con il mouse su qualsiasi cosa nell'area di anteprima e Sviluppo Web evidenzierà il codice che fa apparire quella parte della pagina.\n\n\\[[0]]\n\n### Organizzazione dei file\n\nNoterai che i file sono codificati a colori in base al tipo e hanno nuove icone. Speriamo che in questo modo sia più facile distinguere rapidamente tra un file CSS, un file HTML o un'immagine.\n\n<img src=\"https://images.code.org/64255c7e081f479a042e9e23e5bb1cf2-fileOrg.png\" style=\"width:100px\">\n\n### Selettore di codice\n\nQuando aggiungi colori all'interno di un file CSS, noterai un'icona viola che appare quando fai clic sul nome di un colore. Questa icona apre un widget di selezione dei colori, che semplifica la selezione di nuovi colori per il tuo sito web. Guardalo in azione qui sotto!\n\n<img src=\"https://images.code.org/c54abfd05f80fee79cfd9489bd1bcb59-filter.gif\" style=\"width:400px\">\n\n### Metadati e filtri dell'immagine\n\nDopo aver caricato un'immagine, è possibile visualizzare informazioni aggiuntive sull'immagine, come le sue dimensioni, il codice iniziale per utilizzare l'immagine nel progetto e i colori prominenti che appaiono nell'immagine. C'è anche una fantastica funzionalità per applicare filtri all'immagine direttamente all'interno di Sviluppo Web. Guardali in azione qui sotto!\n\n<img src=\"https://images.code.org/0aae6fadac85f866dbf88c7beca6f541-Image.gif\" style=\"width:400px\">\n\n### Limiti di dimensione del progetto\n\nSviluppo Web ora ha un limite alla dimensione dei progetti: al massimo 20 MB. Puoi tenere traccia delle dimensioni dei tuoi progetti utilizzando l'indicatore di avanzamento nella parte superiore di ogni progetto. La maggior parte dei progetti rimarrà al di sotto di questo limite a meno che non si utilizzino molte immagini. In tal caso, potresti voler utilizzare un programma di hosting di immagini esterno.\n\n<img src=\"https://images.code.org/8e88dc0ed5bdab512f7a02a39c7ac7cf-projectSize.png\" style=\"width:200px\">\n\n## Domande frequenti\n\n1.  \\*\\*Perché l'HTML sembra funzionare anche quando non funziona? \\*\\*\n    -   L'HTML viene letto dal browser web per generare pagine web. Poiché le persone spesso commettono piccoli errori durante la scrittura delle proprie pagine web, i browser sono programmati per fare una «ipotesi migliore» di ciò che si intende fare. A volte browser diversi sono persino programmati per fare ipotesi diverse! L'unico modo per garantire che il codice abbia l'aspetto desiderato è assicurarsi di utilizzare sempre i tag correttamente.\n2.  \\*\\*Perché il codice a volte diventa rosa? \\*\\*\n    -   Sviluppo Web è programmato per rilevare automaticamente alcuni errori nell'HTML. Quando nota un errore, trasforma quel codice in rosa. L'errore potrebbe essere in rosa o potrebbe essere da qualche parte prima del codice rosa. Dovrai eseguire attentamente il debugging per trovare il tuo errore.\n3.  \\*\\*Come faccio a passare da un file all'altro? \\*\\*\n    -   Fai clic sul nome del file che desideri visualizzare nel menu sul lato sinistro dello schermo.\n4.  \\*\\*Come posso rinominare un file? \\*\\*\n    -   Per rinominare un file, puoi fare clic con il pulsante destro del mouse (o fare clic tenendo premuto il tasto Ctrl) sul nome del file e scegliere l'opzione «Rinomina». Questo ti permetterà di digitare un nuovo nome di file. Facendo clic sul nome di un file dopo averlo già evidenziato, potrai anche rinominare il file."
        },
        "csd-2022/when-to-make-a-function": {
          "display_name": "Quando creare una funzione",
          "content": "Una domanda importante per i nuovi programmatori è \"Quando dovrei decidere di creare una funzione\". In generale, prima ti rendi conto di aver bisogno di una funzione, meglio è. Questa è un'abilità che migliorerai con la pratica. **Alla fine di questo corso dovresti mirare a essere nelle file Durante o Prima.**\n\n| Quando crei funzioni | Descrizione                                                                                                                                                                                                         | Commenti                                                                                                                                                                                                                                                                                    |\n| :------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|          Mai         | Non crei mai funzioni.                                                                                                                                                                                              | Il tuo codice sarà difficile da leggere ed eseguire il debuging e avrà un sacco di codice ripetuto. Cerca di passare almeno al passaggio \"Dopo\".                                                                                                                                            |\n|         Dopo         | Scrivi il tuo intero programma senza funzioni. Una volta che hai finito, cerca il codice ripetuto e spostalo in una funzione.                                                                                       | Il tuo codice è molto più facile da leggere ed eseguire il debugging ora. Stai anche migliorando nel vedere come è organizzato il tuo programma. Man mano che ti senti più a tuo agio, prova a passare a \"Durante\" o \"Prima\".                                                               |\n|        Durante       | Mentre scrivi il tuo codice, noti quando stai per riscrivere il codice che hai già scritto da qualche altra parte nel tuo programma. Prima di andare avanti, dichiari una funzione e chiami invece quella funzione. | Hai una buona conoscenza del tuo programma e sei in grado di mantenerlo organizzato mentre lo sviluppi. Vedi se a volte riesci a passare a \"Prima\".                                                                                                                                         |\n|         Prima        | Prima di scrivere il tuo programma, fai un piano e identifichi i luoghi in cui è probabile che utilizzi codice ripetuto. Crei la tua funzione all'inizio.                                                           | Questo livello riflette una forte comprensione di come sarà progettato il tuo programma. Puoi quasi \"vederlo nella tua testa\" prima di iniziare a scrivere. Detto questo, va bene se a volte ti rendi conto di aver bisogno di una funzione mentre programmi e lavori nella fase \"Durante\". |"
        },
        "csd-2022/which-type-of-chart": {
          "display_name": "Che tipo di grafico?",
          "content": "[][0]"
        }
      }
    }
  }
}