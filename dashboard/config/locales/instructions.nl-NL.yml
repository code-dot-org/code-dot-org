"nl":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Hoi, ik ben een kunstenaar. Je kan programmeren
        om mij bijna alles te laten tekenen. Gebruik een paar blokken om mij over
        de grijze lijnen in de afbeelding te laten tekenen. (Elke lijn is 100 pixels
        lang)
      2-3 Artist 11_instruction: 'Geef het stopteken een rand door een achthoek te
        maken, waarvan de zijden elk 100 pixels lang zijn. Hoeveel graden moet je
        draaien? (Hint: Wat is 360 gedeeld door 8?) '
      2-3 Artist 12_instruction: Stel het "herhaal" blok zo in dat het een "cirkel"
        maakt om het oog af te maken. Als elke stap één graad naar rechts draait,
        hoe vaak moet je het blok dan "herhalen" om de cirkel compleet te maken? 180?
        360? 500?
      2-3 Artist 2 new_instruction: Dit huis heeft een half-afgemaakte muur. Iedere
        zijde is 100 maar de half-afgemaakte maar 50. Maak de muur af.
      2-3 Artist 2_instruction: Dit huis heeft een half-afgemaakte muur. Iedere zijde
        is 100 maar de half-afgemaakte maar 50. Maak de muur af.
      2-3 Artist 3.4_instruction: |
        Het spring blok verplaatst de artiest zonder te tekenen.
        Om een stippellijn te maken gebruik je het spring blok tegelijk met het teken blok.
      2-3 Artist 3_instruction: Deze hoed is 100 pixels hoog. Teken een hoed die 70
        pixels minder hoog is.
      2-3 Artist 3new_instruction: De rode hoed is 100 pixels hoog. Maak een zwarte
        hoed af die 70 pixels korter is. De breedte van de zwarte hoed is 50 pixels.
      2-3 Artist 4_instruction: Help mij het huis voor deze kat af te maken.
      2-3 Artist 5_instruction: Vervang deze regels  door een "herhaal" blok om hetzelfde
        huis te tekenen met maar drie blokken.
      2-3 Artist 6_instruction: 'Dit huis heeft een nieuw dak nodig! Teken de driehoek.
        Tip: Alle drie zijdes hebben dezelfde lengte.'
      2-3 Artist 7_instruction: "Maak de rechter helft van het laatste venster af.\nIeder
        vierkant van het venster is 25 pixels hoog en breed. \n"
      2-3 Artist 8_instruction: |
        Maak de kooien voor de dieren af door de rechthoek te splitsen in twee gelijke vierkanten.
        De rechthoek is 200 pixels breed en 100 pixels hoog.
      2-3 Artist 9_instruction: Maak de vlieger af
      2-3 Artist Assessment 1_instruction: |
        Test: Maak de tekening van de laatste tand af.
        De tand is 25 pixels breed en 25 pixels hoog.
      2-3 Artist Debugging 1_instruction: Kun je deze hoed maken met een hoogte van
        100?
      2-3 Artist Debugging 10_instruction: 'De besturingsknop op mijn gamecontroller
        is te smal. Tip: Maak het breder met 10 pixels'
      2-3 Artist Debugging 11_instruction: |
        Help me mijn schitterende sneeuwvlok af te maken.
        Hoe vaak moet ik de opdrachten "herhalen" om het af te maken?
      2-3 Artist Debugging 12_instruction: Ik moet een vloedgolf aan de tekening toevoegen.
        Kun jij me helpen?
      2-3 Artist Debugging 2_instruction: |
        De code voor de drie snorharen die je ziet is fout.
        Repareer de code om de snorharen te tekenen.
        Tip: Elke snorhaar is 75 pixels lang.
      2-3 Artist Debugging 3_instruction: |
        Mijn boot heeft een gat! Kun jij het repareren door de hoek van de lijn aan te passen?
        Tip: De laatste hoek heeft een afwijking van 15 graden.
      2-3 Artist Debugging 4_instruction: Wat voor plaatje proberen we te tekenen?
        Verbind de stippen met de juiste lijnen en hoeken.
      2-3 Artist Debugging 5_instruction: 'De code voor het been en de voet dat je
        ziet is fout. Tip: De voet is te lang, je moet misschien een stapje terug
        doen (voet, stapje... snap je ''m?)'
      2-3 Artist Debugging 6_instruction: Het lijkt erop dat mijn stoel een poot mist.
        Pas de blokken aan om de poot te tekenen.
      2-3 Artist Debugging 7_instruction: Het lijkt erop dat C in code achteruit wordt
        getekend. Kun je het eruit laten zien als een C?
      2-3 Artist Debugging 8_instruction: Mijn molentje is niet af. Hoe vaak moet
        ik herhalen om het af te maken?
      2-3 Artist Debugging 9_instruction: 'De code voor de stuurpen is fout. Tip:
        De hoek wijkt 60 raden af'
      2-3 Artist Debugging Assessment 1_instruction: 'Deze vorm is te klein. Kun je
        het groter maken? Tip: Het moet alle zijden 75 pixels langer.'
      2-3 Artist Free Play_instruction: Vrij spel! Je mag alles tekenen wat je wilt.
      2-3 Artist Functions 1_instruction: |
        Hallo. Ik zombie kunstenaar. Mij houd van tekenen!
        Help me de bril met vierkante glazen tekenen. Tip: De brug tussen de glazen is 25 pixels korter dan de lengte van een glas.
      2-3 Artist Functions 10_instruction: Hier zijn twee functies, één om een grote
        tandwiel te tekenen, één voor een kleine. Gebruik ze in een machine!
      2-3 Artist Functions 11.5_instruction: Hier is dezelfde "Teken een zeskant"
        functie. Wat gebeurt er als je slechts 60 graden draait in elke lus?
      2-3 Artist Functions 11_instruction: We hebben de "teken een vierkant" functie
        hernoemd naar "teken een zeskant", maar het tekent nog steeds vierkanten!
        Kun je de "teken een zeskant" functie aanpassen zodat deze een zeskant met
        zijdes van 50 pixels maakt en daarmee de tekening maken?
      2-3 Artist Functions 12_instruction: 'Functies zijn echt geweldig om complexe
        dingen meerdere keren te tekenen. Kun je de functie "tekenen een bloem" gebruiken
        om de rest van de bloembak te vullen? (Tip: Tussen de bloemen zit een afstand
        van 100 pixels) '
      2-3 Artist Functions 13_instruction: |
        We hebben je voorzien van vier functies.
        Gebruik ze on elke manier die je wilt in één of meer lussen om tekeningen te maken die je met je vrienden kunt delen. Druk op uitvoeren om een voorbeeld te zien.
      2-3 Artist Functions 2_instruction: Met functies kan je nieuwe blokken definiëren!
        We hebben de blokken om een vierkant te tekenen in een functie met de naam
        "teken een vierkant". Kan je de "teken een vierkant" functie gebruiken om
        de brillenglazen te tekenen? De vierkanten staan 75 pixels uit elkaar.
      2-3 Artist Functions 3_instruction: Bewerk de functie om een vierkant te teken
        met als lengte van een zijde 115 en een grotere bril te tekenen. De vierkantjes
        staan nu 45 pixels uit elkaar.
      2-3 Artist Functions 4_instruction: Gebruik het "herhaal" block om deze 3 vierkanten
        te tekenen.
      2-3 Artist Functions 7_instruction: 'Gebruik de "teken een huis" functie om
        twee huizen met verschillende parameters te tekenen. (Tip: het eerste huis
        is 100 pixels).'
      2-3 Artist Functions 9_instruction: Hier is een sneeuwvlok-functie. Probeer
        er een winterlandschap mee te maken. Dit is een speel-niveau, dus er is geen
        puzzel om op te lossen. Veel plezier!
      2-3 Artist Loops 1_instruction: Kan je een zeshoek maken met kanten die 100
        pixels lang zijn om de cel af te maken? Denk er aan dat je maar 60 graden
        hoeft te draaien!
      2-3 Artist Loops 10_instruction: Wat gebeurt er met het ontwerp wanneer we onze
        laatste stap vooruit de helft zo lang maken?
      2-3 Artist Loops 11_instruction: Laat ons een  * andere * lus rond onze hele
        creatie plaatsen!  Vergeet niet om een hoek toe te voegen aan het einde van
        de buitenste lus.
      2-3 Artist Loops 2_instruction: Gebruik nu een herhaal-blok om een schil van
        de cel te maken.
      2-3 Artist Loops 4_instruction: Wil je zien wat er gebeurt wanneer we die vorm
        oneindig herhalen in een lus?
      2-3 Artist Loops 5_instruction: We maken nu een kleine verandering in de lus
        en bekijken hoe onze afbeelding verandert.
      2-3 Artist Loops 6_instruction: Voeg een extra MOVE en een extra TURN toe binnen
        de lus en zie hoe je ontwerp verandert.
      2-3 Artist Loops 7_instruction: We kunnen lussen gebruiken om allerlei soorten
        veelhoeken te maken. Kan je een ruit maken in deze zeshoek?
      2-3 Artist Loops 8_instruction: Laat ons beide elementen in een lus plaatsen.
      2-3 Artist Loops 9_instruction: |-
        We gaan dezelfde elementen in een lus herhalen, maar nu gaan we er afstanden tussen zetten.\r
        Gebruik dezelfde code als hiervoor, maar voeg een STEP FORWARD toe aan het eind van de buitenste lus.
      2-3 Artist Loops New 1_instruction: Nu gaan we het hoofd van de robot tekenen!
        Kun je een vierkant maken met zijden van 100 pixels?
      2-3 Artist Loops New 10_instruction: Nu gaan we een aantal V's met elkaar verbinden
        in een lus.
      2-3 Artist Loops New 11_instruction: Nu tekenen we het 24 keer. Voeg een LEFT
        TURN van 30 graden toe aan je code en zet alles in een REPEAT blok.
      2-3 Artist Loops New 12_instruction: |
        Teken een ruit met zijden van 100 pixels.
      2-3 Artist Loops New 13_instruction: Teken nu de ruit 3 keer in een lus.
      2-3 Artist Loops New 14_instruction: Teken nu 10 ruiten maar draai 90 graden
        na iedere ruit.
      2-3 Artist Loops New 15_instruction: Tekenen iets leuks.
      2-3 Artist Loops New 2_instruction: Hier is de code die je hebt gebruikt om
        dat vierkant te tekenen. Wat gebeurt er wanneer je een REPEAT blok gebruikt
        om die code 4 keer uit te voeren?
      2-3 Artist Loops New 9_instruction: Tekene een eenvoudige V waarbij de zijden
        50 pixels zijn om de pijl te voltooien.
      2-3 Artist Match Hex Pic_instruction: 'Wedstrijd: Help de zeshoek te maken.'
      2-3 Artist Match Rho Pic_instruction: 'Wedstrijd: Maak de missende regels af.'
      2-3 Artist Match Sq Pic_instruction: 'Wedstrijd: Voltooi de ontbrekende code'
      2-3 Artist Match Tri pic_instruction: Koppel de ontbrekende code.
      2-3 Artist Nested Loops 1_instruction: |-
        Je hebt eerder al lussen gebruikt om vormen te tekenen, maar wist je dat je een lus binnen een andere lus kunt zetten?\r
        Maak een lus voor dit hele blok code die drie keer wordt uitgevoerd om dit patroon te tekenen.
      2-3 Artist Nested Loops 10_instruction: Laat deze code in een lus 12 keer uitvoeren
        om het patroon af te maken.
      2-3 Artist Nested Loops 11_instruction: Laat deze code in een lus 4 keer uitvoeren
        om het patroon af te maken en draai 90 graden na iedere cirkel.
      2-3 Artist Nested Loops 12_instruction: Herhaal deze code 12 keer om de krullen
        te voltooien.
      2-3 Artist Nested Loops 2_instruction: Herhaal de driehoek 6 keer. Na elke driehoek
        moet je hem 60 graden draaien en dan de volgende tekenen.
      2-3 Artist Nested Loops 3_instruction: Herhaal de driehoek 12 keer om dit patroon
        te tekenen. Deel het aantal graden in een cirkel (360) door het aantal vormen
        die je wilt tekenen (12). De uitkomst hiervan bepaalt hoever je elke vorm
        moet draaien.
      2-3 Artist Nested Loops 4_instruction: 'Herhaal de diamand 12 keer om een bloem
        te tekenen. Tip: Met de 12 diamanten is het net als met de 12 driehoeken die
        je al gemaakt hebt - hoe veel moet draaien na elke vorm?'
      2-3 Artist Nested Loops 5_instruction: Vul het raam van het gebouw met een geneste
        lus. De ramen zijn 20 pixel hoog en 20 pixel naast elkaar.
      2-3 Artist Nested Loops 6_instruction: Deze dinosaurus heeft 8 stekels op zijn
        staart; elke stekel is 30 pixels hoog. Herhaal de driehoek 8 keer, maar zorg
        ervoor dat je elke keer vooruit gaat.
      2-3 Artist Nested Loops 7_instruction: Herhaal de driehoek 10 keer om de zon
        te tekenen. Je moet verplaatsen en draaien na elke driehoek. Om uit rekenen
        hoever je moet draaien, moet je de graden van een cirkel delen door het aantal
        vormen die je nodig hebt.
      2-3 Artist Nested Loops 8_instruction: Laten we nu wat gras toevogen. Elk plukje
        gras is 50 pixel uit elkaar.
      2-3 Artist Nested Loops 9_instruction: Als laatste komt nog een bloem. Herhaal
        de diamant 12 keer om een bloem te tekenen.
      2-3 Artist Nested Loops Free Play_instruction: Vrije opdracht, tekenen iets
        moois met een geneste lus.
      2-3 Bee Conditionals 1_instruction: Hallo! Ik ben een bij. Help mij om nektar
        uit de bloem te krijgen.
      2-3 Bee Conditionals 10_instruction: |
        Paarse bloemen hebben 1 of 0 nektar. Zorg dat je geen nektar van een paarse bloem haalt, als die geen nektar heeft.\r
      2-3 Bee Conditionals 11_instruction: Verzamel nektar van bloemen met nektar.
      2-3 Bee Conditionals 12_instruction: Gebruik een lus om de nektar te controleren
        en te verzamelen bij alle bloemen.
      2-3 Bee Conditionals 13_instruction: |
        Verzamel nektar en maak honing. Tip:
        Wat gebeurt er als je de voorwaarde "als nektar" gebruikt bij een rode bloem? Kan je dit met een lus doen?
      2-3 Bee Conditionals 14_instruction: Verzamel nektar en maak honing. . Zorg
        dat je geen nektar van een paarse bloem haalt, als die geen nektar heeft.
      2-3 Bee Conditionals 15_instruction: Verzamel nektar van de vier bloemen.
      2-3 Bee Conditionals 2_instruction: Hallo! Ik ben een bij. Help mij om nektar
        uit de bloem te krijgen. Gebruik een lus.
      2-3 Bee Conditionals 3_instruction: Help me om alle nektar van de bloemen te
        verzamelen en om honing te maken. Gebruik een lus.
      2-3 Bee Conditionals 4_instruction: Help me om alle nektar van de bloemen te
        verzamelen en om alle honing te maken.
      2-3 Bee Conditionals 5_instruction: Paarse bloemen hebben 1 of 0 nektar, maar
        je weet niet welke. Zorg dat je geen nektar van een paarse bloem haalt, als
        die geen nektar heeft. Controleer of de nektar gelijk is aan 1 met een "als
        blok".
      2-3 Bee Conditionals 6_instruction: Controleer deze bloem met een "als blok"
        om te zien of er nektar is.
      2-3 Bee Conditionals 7_instruction: Verzamel nektar van elke bloem met nektar.
      2-3 Bee Conditionals 8_instruction: |
        Dit veld heeft rode en paarse bloemen.
        Van de rode bloemen weten we hoeveel nektar ze hebben, maar van de paarse bloemen weten we dat niet.
        Verzamel alle nektar.
      2-3 Bee Conditionals 9_instruction: Verzamel alle nectar van iedere bloem.
      2-3 Bee Conditionals Assessment 1_instruction: 'Test: Verzamel alle nektar.
        Zorg dat je alleen nektar van de paarse bloem pakt, als die nektar heeft.'
      2-3 Bee Debugging 1_instruction: Deze blokken blijven een probleem. Herstel
        de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 10_instruction: Deze blokken blijven een probleem. Herstel
        de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 2_instruction: Deze blokken blijven een probleem. Herstel
        de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 3_instruction: Deze blokken blijven een probleem. Herstel
        de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 4_instruction: Deze blokken blijven een probleem. Herstel
        de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 5_instruction: Deze blokken blijven een probleem. Herstel
        de fout(en) om alle nektar te verzamelen en alle honing te maken. Je kan voer
        uit en ga gebruiken.
      2-3 Bee Debugging 6_instruction: 'Deze blokken blijven een probleem. Herstel
        de fout(en) om alle nektar te verzamelen en alle honing te maken. '
      2-3 Bee Debugging 7_instruction: Deze blokken blijven een probleem. Herstel
        de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 8_instruction: Deze blokken blijven een probleem. Herstel
        de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging 9_instruction: Deze blokken blijven een probleem. Herstel
        de fout(en) om alle nektar te verzamelen en alle honing te maken.
      2-3 Bee Debugging Assessment 1_instruction: 'Test: Deze blokken blijven een
        probleem. Herstel de fout(en) om alle nektar te verzamelen en alle honing
        te maken.'
      2-3 Bee Functions 1_instruction: Functies zijn blokken code die een taak uitvoeren.
        Gebruik de "neem 2 nektar" functies om nektar van elke bloem te verzamelen.
      2-3 Bee Functions 10_instruction: Paarse bloemen hebben 1 of 0 nektar. Maak
        een functie die alleen van paarse bloemen met nektar, de nektar verzamelt.
      2-3 Bee Functions 2_instruction: Functies zijn blokken code die een taak uitvoeren.
        Gebruik de "neem 5" functies om 5 nektars te verzamelen. Gebruik een lus om
        het gewenste totaal te krijgen.
      2-3 Bee Functions 3_instruction: Verzamel alle nectar van iedere bloem.
      2-3 Bee Functions 4_instruction: De functie "beweeg en verzamel nektar" draait
        de bij, verzamelt nektar en brengt de bij terug waar hij begon. Gebruik de
        functie om alle nektar te verzamelen.
      2-3 Bee Functions 5_instruction: Er is nu meer nektar bij de bloemen. Bewerk
        de functie om 4 nektar te verzamelen. Gebruik deze functie om alle nektar
        van de bloemen te verzamelen.
      2-3 Bee Functions 6_instruction: Gebruik nu dezelfde functie om nektar van de
        drie bloemen te verzamelen.
      2-3 Bee Functions 7_instruction: De bloemen zijn nu verder weg. Bewerk de functie
        en gebruik die om alle nektar van de bloemen te verzamelen.
      2-3 Bee Functions 8_instruction: Maak je eigen functie die 7 nektar verzamelt,
        beweegt en 7 honing maakt. Gebruik de functie om nektar van elke bloem te
        verzamelen en honing in elke honingraat te maken.
      2-3 Bee Functions 9_instruction: Maak je eigen functie die het pad volgt, nektar
        verzamelt, honing maakt en de bij naar het begin van het pad brengt.
      2-3 Bee Functions Assessment 1_instruction: 'Test: Gebruik de functie om nektar
        van elke bloem te verzamelen.'
      2-3 Bee Functions Assessment 2_instruction: 'Test: Maak een functie om elke
        keer 3 honing te maken.'
      2-3 Bee Loops 1_instruction: 'Elke bloem heeft één eenheid nektar. Verzamel
        nektar van elke bloem. '
      2-3 Bee Loops 10_instruction: Kan je de "zolang lus" in de andere twee lussen
        gebruiken om alle nektar te verzamelen?
      2-3 Bee Loops 11_instruction: Gebruik de "zolang lus" om alle nektar te verzamelen
        van de bloemen in dit veld.
      2-3 Bee Loops 12_instruction: Gebruik de "zolang lus" om alle nektar te verzamelen
        van de bloemen in dit veld.
      2-3 Bee Loops 13_instruction: 'Proef: gebruik de herhaalblok om al de nectar
        te verzamelen.'
      2-3 Bee Loops 1A_instruction: 'Hallo. Ik ben een bij. Kan je me helpen om de
        nectar van deze bloemen te verzamelen? '
      2-3 Bee Loops 2_instruction: Gebruik de lus om de nektar te verzamelen en de
        honing te maken.
      2-3 Bee Loops 2A_instruction: Kan je dezelfde opdracht eenvoudiger met een lus
        maken?
      2-3 Bee Loops 3_instruction: Verzamel nektar van elke bloem en maak honing op
        elke honingraat.
      2-3 Bee Loops 3A_instruction: Kan je een lus gebruiken om alle nectar te verzamelen?
      2-3 Bee Loops 3B_instruction: Gebruik nu het nieuwe herhaalblok om alle nectar
        te verzamelen en om alle honing te maken.
      2-3 Bee Loops 4_instruction: Gebruik een soortgelijke lus als in de laatste
        opdracht, maar verwerk er een draai in.
      2-3 Bee Loops 4A_instruction: Wat gebeurt er als je deze reeks driemaal uitvoert
        in een lus? Vergeet niet om aan het eind de honing te maken!
      2-3 Bee Loops 5_instruction: Gebruik een lus om de trappen af te dalen en de
        nektar te verzamelen.
      2-3 Bee Loops 6_instruction: Gebruik een lus om nektar van elke bloem te verzamelen
        en honing op elke honingraat te maken.
      2-3 Bee Loops 7_instruction: Zet deze blokken in een lus om nektar van elke
        bloem te verzamelen.
      2-3 Bee Loops 8_instruction: Deze paarse bloemen hebben een onbekende hoeveelheid
        nectar. Gebruik de lus "while nectar" voor het verzamelen van alle nectar.
        Deze lus zal worden uitgevoerd, zolang aan de voorwaarde wordt voldaan, in
        dit geval Nectar > 0.
      2-3 Bee Loops 9_instruction: De 'while' lus kan dezelfde acties uitvoeren als
        een als-instructie in een lus. Voeg een een 'while' lus toe aan deze code
        om de dezelfde taak uit te voeren.
      2-3 Bee Loops Assessment 1_instruction: Proef - Gebruik een 'while' lus voor
        het verzamelen van alle nectar van deze bloem.
      2-3 Maze 1_instruction: 'Kun je me helpen het ondeugende biggetje te pakken?
        Plak een paar "vooruit" blokken op elkaar en klik op "Uitvoeren" om me erbij
        te laten komen. '
      2-3 Maze 10_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze 11_instruction: Breng me naar de bloem, ik heb honger! Hoeveel keer
        heb je het blok herhaald?
      2-3 Maze 12 (copy 1)_instruction: 'Kun je het vorige antwoord vervangen met
        slechts twee blokken? (Hint: Maak een lus met een blok "herhaal keer".)'
      2-3 Maze 12 (copy 2)_instruction: 'Kun je het vorige antwoord vervangen met
        slechts twee blokken? (Hint: Maak een lus met een blok "herhaal keer".)'
      2-3 Maze 12 (old)_instruction: Breng me naar het varken, nu met het 'herhalen
        keer' blok!
      2-3 Maze 12_instruction: 'Kun je deze vijf blokken met slechts twee blokken
        vervangen? (Hint: Maak een lus met een blok "herhaal keer".)'
      2-3 Maze 13 (old)_instruction: Breng me naar het biggetje, nu met het 'herhaal
        tot' blok!
      2-3 Maze 13_instruction: Breng me naar het varken met maar twee blokken.
      2-3 Maze 14 (old)_instruction: Breng me naar het biggetje met het 'herhaling
        tot' blok!
      2-3 Maze 14_instruction: Breng me naar de zonnebloem! (Waar is dat 'herhaal
        keer' blok wanneer ik het nodig heb?)
      2-3 Maze 15 (old)_instruction: Breng me naar het biggetje met het 'herhaling
        tot' blok!
      2-3 Maze 15_instruction: Gebruik twee lussen om naar het biggetje te gaan met
        minder blokken.
      2-3 Maze 16 (old)_instruction: Breng me naar het biggetje met het 'herhaling
        tot' blok!
      2-3 Maze 16 before_instruction: Breng me naar het biggetje.
      2-3 Maze 16_instruction: Breng me naar de zonnebloem. Gebruik een lus!
      2-3 Maze 2_instruction: Het biggetje werkt me op mijn zenuwen. Help me bij hem
        te komen!
      2-3 Maze 3_instruction: |
        Volg het pad en breng me naar het malle varken. Vermijd de
        TNT, want anders zullen de veren in het rond vliegen!
      2-3 Maze 4_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze 5_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze 6_instruction: Rustig blijven, help me het slechte biggetje te vinden.
        Anders word ik misschien nog boos!
      2-3 Maze 7_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze 8_instruction: Breng me naar het varken!
      2-3 Maze 9_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze Loops 1_instruction: Kun je bij het varken brengen met 5 blokken?
      2-3 Maze Loops 17_instruction: Help me tot bij de zonnebloem!
      2-3 Maze Loops 18_instruction: Help me tot bij de zonnebloem!
      2-3 Maze Loops 19_instruction: Help me tot bij de zonnebloem!
      2-3 Maze Loops 20_instruction: Help me tot bij de zonnebloem!
      2-3 Maze Loops 21_instruction: Help me tot bij de zonnebloem!
      2-3 Maze Loops Assessment 1_instruction: 'Opdracht: Breng me naar de zonnebloem
        met slechts 5 blokken! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Breng me naar het varken! Welke blokken werden herhaald?
      2-3 Maze sq10v2_instruction: Breng me naar het varken! Welke blokken werden
        herhaald?
      2-3 maze sq11_instruction: Breng me naar het varken! Welke blokken werden herhaald?
      2-3 maze sq12_instruction: Kunt u het vorige antwoord vervangen met een lus
        door een blok "herhaal x keer" te gebruiken?
      2-3 maze sq13_instruction: |
        Geachte persoon. Ik zombie. Moet...naar...zonnebloem.
        Maak een lus met een "herhaal tot" blok.
      2-3 maze sq14_instruction: Lukt het je om bij de zonnebloem te komen door maar
        vier blokken te gebruiken?
      2-3 maze sq15_instruction: Lukt het je om bij de zonnebloem te komen door maar
        vijf blokken te gebruiken?
      2-3 maze sq16_instruction: |
        Ok, dit lijkt erop, maar dan een klein beetje anders. Lukt het
        je met maar vijf blokken?
      2-3 Maze sq2_instruction: |
        Volg het pad en breng me naar het malle varken. Vermijd de
        TNT, want anders zullen de veren in het rond vliegen!
      2-3 Maze sq3_instruction: Breng me naar de groene naarling! (Pas op voor dynamiet)
      2-3 Maze sq4_instruction: Rustig blijven, help me het slechte biggetje te vinden.
        Anders word ik misschien nog boos!
      2-3 Maze sq5_instruction: |
        Breng me naar het varken? Hoe vaak dien je een blok
        te herhalen?
      2-3 Maze sq6_instruction: "Kun je het vorige antwoord vervangen door eentje
        \nmet maar twee blokken? (Hint: Maak een lus door een \"herhaal x keer\" \nblok
        te gebruiken.)\n"
      2-3 Maze sq7_instruction: breng me naar de groene indringer met behulp van slechts
        drie blokken.
      2-3 Maze sq8_instruction: Breng me naar het varken! (Waar is dat blok "herhaal
        keer" wanneer ik het nodig heb?)
      2-3 Maze sq9_instruction: Maak loops om naar het varken te gaan met minder blokken.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Help de vogel het ondeugende varken te vangen door het
        vooruit te bewegen
      4-5 Artist 1_instruction: "Help me om mijn vierkant te tekenen. (Elke lijn is
        300 \npixels lang) \n"
      4-5 Artist 10_instruction: "Druk op \"Uitvoeren\" om de code uit te proberen.
        \nHerhaal het daarna vaak genoeg om de tekening af te maken. De kleuren zullen
        telkens anders zijn.\n"
      4-5 Artist 11_instruction: |
        Voltooi de groene lijnen. De lijnen zijn 300 pixels
        lang en liggen 15 pixels uiteen.
      4-5 Artist 2_instruction: Kun je een lus van deze code maken om het vierkant
        te voltooien?
      4-5 Artist 3.5_instruction: OK, probeer er achter te komen wat er gebeurt als
        je deze code uitvoert (of druk op "Uitvoeren" om het te proberen). Herhaal
        dit daarna vaak genoeg om de tekening af te maken. De kleuren zullen (hoogst
        waarschijnlijk) elke keer anders zijn.
      4-5 Artist 3_instruction: Dit rechthoekige bloembed heeft een omtrek van 600.
        De lange zijde heeft een lengte van 200. Teken de rechthoek.
      4-5 Artist 4_instruction: Hoeveel graden zitten er in een cirkel? Maak een lus
        van de blokken om een cirkel van kleuren te maken.
      4-5 Artist 5_instruction: Welke hoek gebruik je?
      4-5 Artist 6_instruction: Deze gelijkzijdige driehoek heeft hoeken van 60, 60
        en 60 graden. Elke zijde is 200 pixels. Maak de tekening af.
      4-5 Artist 7_instruction: Deze rechthoekige driehoek heeft hoeken van 30, 60
        en 90 graden. De lengte van de schuine zijde is tweemaal de hoogte van 100
        pixels. Maak de tekening af.
      4-5 Artist 8_instruction: De middellijn op een voetbalveld staat loodrecht op
        de zijlijn. Dit veld heeft een omtrek van 800 pixels en het is 240 pixels
        lang. Hoe breed is het? Teken de buitenlijnen en de middellijn.
      4-5 Artist 9_instruction: Teken de andere helft zodat het ontwerp symmetrisch
        is. De driehoeken zijn gelijkzijdig en zijn 50 pixels lang.
      4-5 Artist Assessment 1_instruction: 'Beoordeling: Gebruik een lus om een gelijkzijdige
        driehoek te tekenen. Elke zijde is 300 pixels.'
      4-5 Artist For Loops 1_instruction: Zet de getallen 1 tot en met 10 in de breedte
        blokken en voer de code uit.
      4-5 Artist For Loops 11_instruction: Maak het "for" blok af zodat het 0, 20,
        40, 60, 80... 200 telt.
      4-5 Artist For Loops 12_instruction: 'Wat gebeurt er als je de "van" en "naar"
        getallen omwisselt? Maak het "for" blok af zodat het 200, 180, 160, 140, 120...
        0 telt. '
      4-5 Artist For Loops 13_instruction: 'Dit ontwerp is begonnen zonder een "for"
        lus en gebruikt te veel blokken! Gebruik een "for" blok om de spiraal af te
        maken. Tip: de lengte van de laatste lijn is 250 pixels.'
      4-5 Artist For Loops 14_instruction: 'Iemand begon de code, maar besefte toen
        dat er een snellere manier moest zijn! Gebruik een "for" blok om de blokken
        te vervangen en de driehoekige spiraal af te maken (Tip: de lengte van de
        laatste lijn is 300 pixels).'
      4-5 Artist For Loops 15_instruction: 'Iemand begon de code, maar besefte toen
        dat er een snellere manier moest zijn! Gebruik een "for" blok om de blokken
        te vervangen en de zeshoekige spiraal af te maken (Tip: de lengte van de laatste
        lijn is 200 pixels).'
      4-5 Artist For Loops 2_instruction: |
        This is a "for" block. Instead of typing
        1,2,3... 10, the "for" block can repeat the blocks inside it and count the
        numbers for you. Place the number 10 into the "to" section of the "for"
        block.
      4-5 Artist For Loops 3_instruction: Hoe kunnen we van 1 tot 50 tellen? Bewerk
        het "for" blok.
      4-5 Artist For Loops 4_instruction: Maak het "for" blok af zodat het telt van
        1 tot 10 met 1.
      4-5 Artist For Loops 6_instruction: Teken vierkanten met zijden van 50, 60,
        70, 80 en 90 pixels. Je zult de "teken een vierkant" functie vijf keer moeten
        gebruiken.
      4-5 Artist For Loops 7_instruction: 'Teken de zelfde vierkanten maar gebruik
        een "tel met" blok om de grootte te veranderen. Plaats het "teller" blok in
        de "teken een vierkant" functie. Tip: je vindt het in de categorie variabelen.'
      4-5 Artist For Loops 8_instruction: Kun je het programma afmaken door de blokken
        binnen een "for" blok dat van 10 tot en met 200 met 10 telt te plaatsen? Het
        "for" blok vind je in de categorie lussen.
      4-5 Artist For Loops 9_instruction: Deze cirkels zijn 5, 10, 15, 20, 25, 30
        en 35 groot. Teken de cirkels door gebruik te maken van een "for" blok.
      4-5 Artist Free Draw 1_instruction: Vrij tekenen! Teken wat in je opkomt.
      4-5 Artist Functions 1_instruction: Gebruik een herhaal lus om deze driehoek
        te tekenen.
      4-5 Artist Functions 10a_instruction: Plaats deze code in de 'teken een sneeuwvlok'
        functie en vervang de 50 door de parameter 'grootte'. De functie wordt al
        aangeroepen om een sneeuwvlok 100 pixels groot te maken.
      4-5 Artist Functions 10b_instruction: 'Gebruik de "teken een sneeuwvlok" functie
        om verschillende grootte vlokken te maken. Tip: de eerste sneeuwvlok is 25
        lang en elke sneeuwvlok is twee maal zo groot als de voorgaande.'
      4-5 Artist Functions 11_instruction: 'Deze "tekenen een zeshoek" functie maakt
        gebruik van de "teken een driehoek" functie. Maak de zeshoek functie af. (Hint:
        een zeshoek heeft 6 zijden, elk 100 pixels lang)'
      4-5 Artist Functions 12_instruction: 'Maak de functie ''teken golven'' af.  Elke
        golf bestaat uit een boven golf en een onder golf. Hint: teken 5 blauwe golven.'
      4-5 Artist Functions 13 Free play_instruction: Hier zijn enkele functies om
        planeten, sterren, raketten en robots te tekenen. Gebruik zo zoals je wilt
        om tekeningen te maken die je met vrienden kunt delen.
      4-5 Artist Functions 14 Free play_instruction: Kijk we hebben je verschillende
        functies gegeven. Gebruik zo zoals je maar wilt in een of meerdere lussen
        om tekeningen te maken die je met vrienden kunt delen. Klik op 'Uitvoeren'
        om een voorbeeld te zien.
      4-5 Artist Functions 15 Assessment_instruction: 'Beoordeling: Gebruik de "teken
        een vierkant" functie om de vierkanten te maken.  De vierkanten zijn 50, 100
        en 150 pixels.'
      4-5 Artist Functions 2a_instruction: Plaats deze blokken nu in een nieuwe functie
        genaamd "teken een kleine driehoek" en roep deze aan.
      4-5 Artist Functions 2b_instruction: Maak nu met behulp van de beschikbare blokken
        een functie genaamd "teken een kleine driehoekje".
      4-5 Artist Functions 3_instruction: 'Maak nu de functies "tekenen een middelgrote
        driehoek" en "teken een grote driehoek". De functie "tekenen een klein driehoekje"
        wordt voor je gedaan. De driehoeken hebben een zijdelengte van 50 (klein),
        100 (middel) en 150 (groot). '
      4-5 Artist Functions 4_instruction: Deze nieuwe "teken een driehoek" functie
        heeft een parameter en kan het werk van alle drie voorgaande functies. Teken
        dezelfde driehoeken met behulp van deze nieuwe functie.
      4-5 Artist Functions 5_instruction: Kun je de functie "teken een driehoek" in
        een "teken een vierkant" functie veranderen om de tekening veranderen?
      4-5 Artist Functions 6_instruction: 'Gebruik de "teken een vierkant" en "teken
        een driehoek functies" om een huis te tekenen. (Hint: de zijden van het vierkant
        zijn 200 pixels)'
      4-5 Artist Functions 6b_instruction: Maak een huis door de teken een vierkant
        en driehoek functies samen met andere blokken aan de 'teken een huis' functie
        toe te voegen en deze aan te roepen.
      4-5 Artist Functions 7_instruction: Gebruik de "teken een huis" functie huizen
        te tekenen die 100 pixels en 50 pixels zijn. De twee huizen staan 50 pixels
        uit elkaar.
      4-5 Artist Functions 8_instruction: De "teken een bloem" functie heeft een parameter
        waarmee je de steelhoogte in kunt stellen. Zet deze op 200 en kijk wat er
        gebeurt.
      4-5 Artist Functions 9_instruction: Teken deze 3 bloemen. De hoogte van de eerste
        is 100 en de volgende bloem is steeds 50 hoger dan de vorige. De bloemen staan
        100 pixels uit elkaar.
      4-5 Artist Patterns 1_instruction: Kun jij dit vierkant tekenen met behulp van
        een lus? Elk zijde is 20 pixels lang.
      4-5 Artist Patterns 10_instruction: 'Deze code tekent twee rijen van zeshoeken
        - Doorloop dit geheel 4 keer om de hele honingraat te tekenen. Tip: Je zult
        in je buitenste lus 120 pixels terug moeten springen ervoor te zorgen dat
        de kunstenaar niet buiten het scherm tekent.'
      4-5 Artist Patterns 11_instruction: 'Hoeveel keer moet je dit doorlopen om een
        halve cirkel te tekenen? Tip: als er 360 graden in een cirkel zitten en elke
        lus draait 3 graden, hoe vaak zou je dan moeten herhalen om een volledige
        cirkel te tekenen?'
      4-5 Artist Patterns 12_instruction: Als je deze lus kopieert en naar links draait
        in plaats van naar rechts, wat gebeurt er dan? Kun je dit herhalen om deze
        golf te tekenen?
      4-5 Artist Patterns 13_instruction: Laten we het geheel vier keer herhalen om
        deze fotolijst te maken. Kijk uit voor de hoeken - je kunt niet enkel 90 graden
        draaien! Als 60 keer herhalen van een 3 graden draai een halve cirkel maakt,
        welke van deze blokken van code maakt dan een kwart cirkel voor de hoeken?
      4-5 Artist Patterns 2_instruction: Als je je vierkant lus in een andere lus
        plaatst, dan noemen we dat een geneste lus. Wat moet je aan je buitenste lus
        toevoegen om er voor te zorgen dat alle 15 vierkanten netjes naast elkaar
        staan?
      4-5 Artist Patterns 3_instruction: Laten we nu één niveau dieper gaan! Wij hebben
        dat hele codeblok in een andere lus genest, maar jij moet de kunstenaar terug
        op zijn plaats krijgen om de volgende lijn te tekenen. Welke van deze codeblokken
        kun je aan het einde van de buitenste lus plaatsen om het gehele raster te
        tekenen?
      4-5 Artist Patterns 4_instruction: Deze diamant heeft zijden van 50 pixels en
        hoeken van 120 en 60 graden. Gebruik een lus om hem te tekenen.
      4-5 Artist Patterns 5.5_instruction: Hoe vaak moet je dit blok herhalen om het
        volledige raster van diamanten te tekenen?
      4-5 Artist Patterns 5_instruction: Laten we dit herhalen om een rij van 6 diamanten
        te maken. Merk op dat we onze diamant code hebben aangepast om 3 keer te herhalen
        in plaats van 2 - Waarom denk je dat dat is?
      4-5 Artist Patterns 6_instruction: Hoe vaak moet je dit blok herhalen om het
        volledige raster van diamanten te tekenen?
      4-5 Artist Patterns 7_instruction: Laten we de code van de laatste puzzel aanpassen
        om dit complexere patroon te maken. Merk op hoe de diamanten elkaar nu overlappen.
        Probeer de eerste "spring achteruit" van 100 naar 50 (half zo ver) te veranderen
        - hoe ver moet de kunstenaar nu gaan in de tweede "spring achteruit"?
      4-5 Artist Patterns 8_instruction: Gebruik een lus om deze zeshoek met 40 pixel
        zijden en 60 graden hoeken te tekenen.
      4-5 Artist Patterns 9.5_instruction: Laten we deze code in een lus zetten om
        twee rijen van zeshoeken te tekenen. Merk op hoe onze tweede rij naar rechts
        verschoven is.
      4-5 Artist Patterns 9_instruction: Herhaal die code nu 3 keer om de hele rij
        te tekenen. Hint, elke zeshoek is 80 pixels breed van uiterst links naar uiterst
        rechts.
      4-5 Artist Patterns Free Play_instruction: Vrij spelen - probeer een eigen patroon
        te maken!
      4-5 Bee Conditionals - FC Test_instruction: De bij wil op dit moment alleen
        nectar. Niet alle objecten zijn bloemen, dus kijk onder IEDERE WOLK om te
        zien of hij een bloem verbergt. Dan kun je nectar verzamelen.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: De bij kan niet onderscheiden of dit een
        bloem of een honingraat is. Verzamel alleen nectar van bloemen, maar test
        eerst of het een bloem of een honingraat is.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: De bij wil nu alleen nectar. Vergeet niet
        dat niet alle objecten bloemen zijn, dus test om alleen bij bloemen nectar
        verzamelen.
      4-5 Bee Conditionals 3_instruction: Nu wil de bij alleen honing maken.  Test
        om alleen honing te maken bij de honingraten.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: Het onbekende object is een bloem of een
        honingraat. Gebruik het als/anders blok om bij een bloem nectar te verzamelen
        en om anders honing te maken (omdat het een honigraat is).
      4-5 Bee Conditionals 5_instruction: Er kan een bloem of een honingraat onder
        die wolken zijn. Gebruik het als/anders blok om bij een bloem nectar te verzamelen
        en om anders honing te maken (omdat het een honigraat is).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: Deze paarse bloem heeft 3, 2 of 1 nectar.
        Hier is een als/anders blok gecombineerd met nog een als/anders blok om een
        als, anders/als, anders blok te maken. Maak de oplossing af om de onbekende
        hoeveelheid nectar te verzamelen.
      4-5 Bee Conditionals 7_instruction: Onthoud dat paarse bloemen 3, 2 of 1 nectar
        kunnen hebben. Maak de "controleer paarse bloem" functie af en gebruik hem
        om alle nectar bij de bloemen te verzamelen.
      4-5 Bee Conditionals 8_instruction: Schrijf een functie binnen het blok genaamd
        "controleer bloem maak honing". Jouw functie moet controleren hoeveel nectar
        de paarse bloem heeft en dit verzamelen, vooruit bewegen en honing maken.
      4-5 Bee Conditionals Assessment 1_instruction: 'Evaluatie: Deze code is onjuist.
        Maak de "haal nectar of maak honing" functie af en roep deze vervolgens aan
        om alle nectar en honing te verzamelen. Vergeet niet dat paarse bloemen 3,
        2 of 1 nectar kunnen hebben.'
      4-5 Bee Debugging 1_instruction: Deze blokken storen me echt. Kun jij ze in
        orde maken?
      4-5 Bee Debugging 10_instruction: Vind de fouten en los ze op.
      4-5 Bee Debugging 11_instruction: Telt dit correct?
      4-5 Bee Debugging 2_instruction: Help de bij nectar te verzamelen en honing
        te maken.
      4-5 Bee Debugging 3_instruction: Vind de fouten en los ze op.
      4-5 Bee Debugging 4_instruction: Deze blokken werken niet. Wat is het patroon?
      4-5 Bee Debugging 5_instruction: Iets is hier niet in orde...
      4-5 Bee Debugging 6_instruction: De paarse bloem heeft een onbekende hoeveelheid
        nectar. Maak de blokken in orde om alle nectar uit de bloem te krijgen.
      4-5 Bee Debugging 7_instruction: Deze functie mist iets...
      4-5 Bee Debugging 8_instruction: Deze functie is in orde, maar hij wordt niet
        goed gebruikt.
      4-5 Bee Debugging 9_instruction: Waarom maakt de bij niet genoeg honing?
      4-5 Bee Debugging Assessment 1_instruction: 'Evaluatie: Repareer de code.'
      4-5 Bee Nested Loops 1_instruction: Gebruik een lus om alle nectar te verzamelen.
      4-5 Bee Nested Loops 2_instruction: 'Verzamel alle nectar van elke bloem. Gebruik
        een geneste lus. '
      4-5 Bee Nested Loops 3_instruction: Verzamel alle nectar door de gegeven code
        in een geneste lus te plaatsen.
      4-5 Bee Nested Loops 4_instruction: 'Verzamel alle nectar van elke bloem en
        maak honing bij elke honingraat. Gebruik een geneste lus. '
      4-5 Bee Nested Loops 5_instruction: Verzamel alle nectar door een geneste lus
        te maken.
      4-5 Bee Nested Loops 6_instruction: Verzamel alle nectar.
      4-5 Bee Nested Loops 7_instruction: Zet deze lus in een andere lus om een geneste
        lus te maken en verzamel alle nectar van de bloemen.
      4-5 Bee Nested Loops 8_instruction: 'Verzamel alle nectar van deze bloemen door
        een zolang lus te nesten. Vervang het binnenste herhaal keer blok door een
        zolang lus. '
      4-5 Bee Nested Loops 9_instruction: Verzamel alle nectar van deze bloemen door
        een zolang lus te nesten in een herhaling.
      4-5 Bee Nested Loops Assessment 1_instruction: Test - Verzamel alle nectar en
        maak alle honing door gebruik te maken van lussen.
      4-5 Bee Nested Loops Rows_instruction: Verzamel nectar van de rijen bloemen!
        Gebruik een geneste lus.
      4-5 Maze 1 (copy 1)_instruction: Lieve persoon. Ik zombie. Moet... bij... zonnebloem
        komen.
      4-5 Maze 1_instruction: Lieve persoon. Ik zombie. Moet... bij... zonnebloem
        komen.
      4-5 Maze 10_instruction: Lukt het je om bij de zonnebloem te komen door maar
        vier blokken te gebruiken?
      4-5 Maze 11_instruction: Kun je met slechts zes blokken bij de zonnebloem komen?
      4-5 Maze 12_instruction: OK, is dit iets anders. Kunt jij het in slechts zes
        blokken doen?
      4-5 Maze 13_instruction: Breng me naar het varken!
      4-5 Maze 14_instruction: Breng me naar het varken! Gebruik het herhaal tot blok.
      4-5 Maze 2 (copy 1)_instruction: Breng de zombie naar de zonnebloem, maar vermijd
        de happer!
      4-5 Maze 2_instruction: Breng de zombie naar de zonnebloem, maar vermijd de
        happer!
      4-5 Maze 3 (copy 1)_instruction: Moet... bij... de zonnebloem... komen.
      4-5 Maze 3_instruction: Moet... bij... de zonnebloem... komen.
      4-5 Maze 4 (copy 1)_instruction: Probeer het "herhaal" blok om minder blokken
        te gebruiken...
      4-5 Maze 4_instruction: Probeer het "herhaal" blok om minder blokken te gebruiken...
      4-5 Maze 5 (copy 1)_instruction: Kun jij deze puzzel met het minste aantal blokken
        oplossen?
      4-5 Maze 5_instruction: Kun jij deze puzzel met het minste aantal blokken oplossen?
      4-5 Maze 6 (copy 1)_instruction: Kun jij deze puzzel met het minste aantal blokken
        oplossen?
      4-5 Maze 6_instruction: Kun jij deze puzzel met het minste aantal blokken oplossen?
      4-5 Maze 7_instruction: Lieve persoon. Ik zombie. Moet... bij... zonnebloem
        komen.
      4-5 Maze 8_instruction: Gebruik het "herhaal" blok om de zombie bij de zonnebloem
        te brengen. (Vermijd de happers!)
      4-5 Maze 9_instruction: Maak een lus met het "herhaal tot" blok.
      4-5 Maze Assessment 1_instruction: 'Test: Ga naar de zonnebloem.'
      4-5 Maze Conditionals 1_instruction: Gebruik het herhaal tot blok om de zombie
        bij de zonnebloem te brengen.
      4-5 Maze Conditionals 10_instruction: Kun je slechts 3 blokken toevoegen om
        me te helpen een ingewikkelder doolhof op te lossen? Als je het goed doet
        kan ik elk kronkelig pad lopen, ongeacht de lengte.
      4-5 Maze Conditionals 2_instruction: Gebruik het herhaal tot blok om de zombie
        bij de zonnebloem te brengen.
      4-5 Maze Conditionals 3_instruction: 'Gebruik het "als" blok om me te laten
        beslissen wanneer te draaien. Tip: je hebt nog slechts een blok nodig, maar
        leer hoe wij het instelden zodat je het de volgende keer zelf kunt.'
      4-5 Maze Conditionals 4_instruction: OK, dit is net als de vorige puzzel, maar
        je moet onthouden hoe je het "als" blok en het "herhaal" blok samen gebruikte.
      4-5 Maze Conditionals 5_instruction: Ik wil zonnebloem! Gebruik een "als" blok
        om me daar te krijgen met het minste aantal blokken.
      4-5 Maze Conditionals 6_instruction: Ik wil zonnebloem! Gebruik een "als" blok
        om me daar te krijgen met het minste aantal blokken.
      4-5 Maze Conditionals 7_instruction: OK, laten we dat om te oefenen nog eens
        doen - dit is niet heel anders, maar kijk uit voor de happers!
      4-5 Maze Conditionals 8_instruction: Het "als-anders" blok controleert een voorwaarde
        en doet dan het ene OF het andere. Probeer dit nieuwe blok te gebruiken om
        me bij de zonnebloem te brengen.
      4-5 Maze Conditionals 9_instruction: Nog een oefening met het "als-anders" blok,
        kun je het in een keer goed doen?
      4-5 Maze Conditionals Assessment 1_instruction: Gebruik een "herhaal tot" en
        een "als-anders" blok om me met zo min mogelijk blokken bij de zonnebloem
        te brengen.
      4-5 Nested Loops 1_instruction: 'Maak de code af om deze driehoeken te tekenen.
        De eerst is al gedaan. Hint: de drie driehoeken draaien in totaal 360 graden.'
      4-5 Nested Loops 10_instruction: Teken de laatste rij met sterren op deze vlag
        door de voorbeeldblokken in een lus te zetten. De sterren zijn 50 pixel uit
        elkaar, maar denk eraan dat de sterren zelf 30 pixel breed zijn.
      4-5 Nested Loops 11_instruction: Kan je de 10 stenen van deze stoep tekenen
        met een geneste lus? Elke steen is 30 pixels.
      4-5 Nested Loops 12_instruction: Kan je deze 36 driehoeken tekenen met een geneste
        lus?
      4-5 Nested Loops 2_instruction: 'Nest deze lus in een andere lus om 10 driehoeken
        tekenen. Dit noemen we een geneste lus. Hint: Alle 10 driehoeken tezamen vormen
        een draai van 360 graden.  '
      4-5 Nested Loops 3_instruction: |
        Maak een zon door de begincode in een andere lus te nesten. Dit noemen we een geneste lus.\r
      4-5 Nested Loops 5_instruction: Maak een windmolen met een lus rond de voorbeeldcode.
      4-5 Nested Loops 6_instruction: Kan je een zeskant tekenen met een lus rond
        de driehoek-code?
      4-5 Nested Loops 7_instruction: 'Lus 10 keer met deze tekening. Hoevaak moet
        je draaien in elke lus? (Hint: wat is 360 gedeeld door 10?)'
      4-5 Nested Loops 8_instruction: 'Lus 6 keer met deze tekening. Hoevaak moet
        je draaien in elke lus? (Hint: wat is 360 gedeeld door 6?)'
      4-5 Nested Loops 9_instruction: Teken de tanden in de mond van de krokodil!
      4-5 Nested Loops Assessment 1_instruction: Gebruik een geneste lus om de tekening
        af te maken.
      4-5 While Loops 1_instruction: Beweeg me naar het gat en vul het met twee scheppen
        vuil. Gebruik daarbij het "vul" blok.
      4-5 While Loops 2_instruction: Beweeg me naar de afvalberg en ruim die op met
        5 scheppen. Gebruik daarbij het 'verwijder' blok.
      4-5 While Loops 3_instruction: 'Beweeg me naar de hoop en ruim die helemaal
        op. Ga dan naar het gat en vul die helemaal. Hint: gebruik zo min mogelijk
        blokken.'
      4-5 While Loops 4_instruction: 'Wow, ik heb een heel diep gat gevonden! Ik weet
        niet hoeveel scheppen vuil daarvoor nodig zijn. Kan je een programma schrijven
        dat het gat vult tot boven vult? Hint: probeer dit keer een zolang-lus.'
      4-5 While Loops 5_instruction: Wow, nu zijn er twee diepe gaten! Kan je programma
        schrijven dat ze allebei tot boven vult?
      4-5 While Loops 6_instruction: Wow, nu is er een hele hoop vuil! Kan je een
        programma schrijven dat alles verwijderd, zodat de grond gelijk is?
      4-5 While Loops 7_instruction: Wow, nu is er een drie hopen vuil! Kan je een
        programma schrijven dat ze alledrie verwijderd, zodat de grond gelijk is?
      4-5 While Loops 8_instruction: " Er is er een heel diep gat en een hele grote
        hoop vuil. Hoeveel scheppen vuil heb je nodig om de grond gelijk te krijgen?
        Hint: gebruik voor allebei de zolang lus."
      4-5 While Loops Assessment 1_instruction: Er zijn veel gaten en hopen. Help
        me met vullen en verwijderen om de grond gelijk te krijgen.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). \n"
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: test
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: |
        Maak een zon door de gegeven code
        in een tweede lus te plaatsen. Dit heet een geneste lus.
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: Gebruik een geneste lus om de
        tekening af te maken.
      Auto Open Function Editor_instruction: "In een functie kun je andere functies
        aanroepen!\nGebruik je \"vorm\" functie als basis, maak 3 huizen. Ek volgende
        huis moet 20 pixels groter zijn.\nHet eerste huis moet 50 pixels zijn.\nTip:
        een for-lus kan handig zijn. \n"
      Bee Recommended Blocks test_instruction: Paarse bloemen hebben 1 of 0 nectar,
        maar je weet niet welke. Je moet alleen nectar verzamelen als dat er is. Controleer
        of de nectar gelijk is aan 1 met een "als blok".
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Deze bij heeft veel werk te doen! Zie je patronen die
        je kunt gebruiken om je code eenvoudiger te maken?
      Busy Bee_instruction: Deze bij heeft veel werk te doen! Zie je patronen die
        je kunt gebruiken om je code eenvoudiger te maken?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Kun je bij het varken brengen met 5 blokken?
      Course 4 2_instruction: De bij wil nu alleen nectar. Denk eraan, niet alles
        is een bloem. Je kan de nectar alleen verzamelen bij bloemen.
      Course 4 Artist 1_instruction: 'Help me mijn vierkant te tekenen. (Elke lijn
        is 200 pixels lang) '
      Course 4 Artist 10_instruction: 'Vrije speelruimte! Veel plezier, je kan tekenen
        wat je wilt. '
      Course 4 Artist 11_instruction: 'Klaar voor een uitdaging? Hier is een programma
        die alleen blokken gebruikt die je al hebt gehad. Kun je het programma zonder
        extra informatie opnieuw opnieuw maken? Tip: voel je vrij om het te doen met
        testen en problemen oplossen. Het gaat vast niet in een keer goed.'
      Course 4 Artist 12_instruction: |-
        Vrij spel inspiratie: Je hebt nu alles geleerd wat je nodig hebt om een patroon als deze te maken! Als deze afbeelding je inspireert, probeer om net zo iets te maken. Maak anders iets helemaal alleen.\r

        \r
        Wil je weten hoe ons patroon is gemaakt? Klik dan rechts op de blauwe tab en klik dan op de "Bekijk de oplossing"-knop.
      Course 4 Artist 13_instruction: Nog aan het spelen? Hier is een leeg canvas
        on te ontwerpen wat je maar wilt!
      Course 4 Artist 2_instruction: Kan je met een lus rond deze code het grijze
        vierkant tekenen?
      Course 4 Artist 20_instruction: Nog aan het spelen? Hier is een leeg canvas
        waar je kan maken wat je wilt!
      Course 4 Artist 3_instruction: Ok. probeer te bedenken wat er gebeurd als je
        deze code uitvoert (of druk op "Uitvoeren" om het te proberen). Herhaal het
        daarna voldoende keren om de tekening helemaal af te maken.
      Course 4 Artist 4_instruction: Hoeveel graden heeft een cirkel? Vul dat getal
        in bij het herhaal blok om de cirkel van kleuren te maken.
      Course 4 Artist 5_instruction: Teken de andere helft van deze tekening zodat
        het symmetrisch is. De driehoeken zijn gelijkzijdig en zijn 50 pixels lang.
      Course 4 Artist 6_instruction: 'Maak de code af om deze driehoeken te tekenen.
        Hint: de drie driehoeken draaien in totaal 360 graden.'
      Course 4 Artist 7_instruction: 'Nest nu deze lus in een andere lus om 10 driehoeken
        te tekenen. Dit noemen we een geneste loop. Hint: De 10 driehoeken bijelkaar
        vormen een draai van 360 graden.  '
      Course 4 Artist 8_instruction: Teken deze zon met een door 12 keer door het
        hele code blok te lussen.
      Course 4 Artist 8a_instruction: |-
        Herken je deze vorm? We laten je die nu maken zonder je vooraf blokken te geven!\r
        Aanwijzing: Er zijn 3 driehoeken in de 360 graden verdraaiing...hoe vaak gaat 3 in 360?
      Course 4 Artist 9_instruction: 'Lus deze tekening 10 keer en draai na het tekenen
        van elke vorm. Als je wilt berekenen hoeveel je moet draaien: Wat is 360 gedeeld
        door 10?'
      Course 4 Artist Binary 1_instruction: Hier is een functie die een binaire reeks
        van enen en nullen gebruikt. Deze vertelt de artiest om van links naar recht
        en van boven naar beneden te gaan, en zo alle vierkanten te vullen als het
        een 1 ziet en niets te doen als het een 0 ziet. Voer deze code uit om te zien
        hoe de artiest binair een patroon kan tekenen.
      Course 4 Artist Binary 1a_instruction: Hier is een functie die een binaire reeks
        van enen en nullen gebruikt. Deze vertelt de artiest om van links naar recht
        en van boven naar beneden te gaan, en zo alle vierkanten te vullen als het
        een 1 ziet en niets te doen als het een 0 ziet. Voer deze code uit om te zien
        hoe de artiest binair een patroon kan tekenen.
      Course 4 Artist Binary 2_instruction: Welke binaire reeks heb je nodig om het
        plaatje te tekenen door 8 keer te lussen?
      Course 4 Artist Binary 3_instruction: Kan jij dit patroon tekenen met een lus
        van een drie-cijferige binaire tekenreeks?
      Course 4 Artist Binary 4_instruction: Elke binaire tekenreeks is een rij van
        dit plaatje. Kan je ze herschikken het een glimlach tekent in plaats van de
        frons?
      Course 4 Artist Binary 5_instruction: Welke 6 cijferige binaire reeks, 11 keer
        herhaald, tekent dit plaatje?
      Course 4 Artist Binary 6_instruction: Wat is de korste binaire reeks die je
        kan gebruiken om dit plaatje te tekenen?
      Course 4 Artist Binary 7_instruction: Maak de tekening af.
      Course 4 Artist Binary Free Play 2_instruction: 'Vrije speelruimte: Je kan op
        dit canvas in een hogere resolutie tekenen: 16 bits bij 16 bits!'
      Course 4 Artist Binary Free Play 2a_instruction: |-
        Hier is een canvas met een hogere resolutie om op te tekenen - 16 bij 16 pixels!\r
        \r
        Zie je wat er gebeurt als we creatief worden met bitjes?
      Course 4 Artist Binary Free Play 2b_instruction: Klik voor hints.
      Course 4 Artist Binary Free Play_instruction: 'Vrije speelruimte: Teken wat
        je wilt met binaire getallen!'
      Course 4 Artist Binary pre1_instruction: |-
        'Binair' is een manier om informatie te coderen met maar 2 bouwstenen. We gaan hier 'uit' (gecodeerd met het getal 0) en 'aan' (gecodeerd met het nummer 1) gebruiken.\r
        \r
        We hebben alvast een raster met "pixels" gemaakt waar je doorheen kan lopen en waarin je ontwerpen kan maken door sommige vierkantjes aan te zetten. Kun je de kunstenaar '01010101' in binair laten tekenen op de eerste regel?
      Course 4 Artist Binary ryan_instruction: |-
        'Binair' is een manier om informatie te coderen met maar 2 bouwstenen. We gaan hier 'uit' (gecodeerd met het getal 0) en 'aan' (gecodeerd met het nummer 1) gebruiken.\r
        \r
        We hebben alvast een raster met "pixels" gemaakt waar je doorheen kan lopen en waarin je ontwerpen kan maken door sommige vierkantjes aan te zetten. Kun je de kunstenaar '01010101' in binair laten tekenen op de eerste regel?
      Course 4 Artist For  Functions 10_instruction: En nu een stapje verder, kan
        je de stervorm maken met de "teken een vierkant" functie? Succes!
      Course 4 Artist For  Functions 11_instruction: En nu een stapje verder, kan
        je de stervorm maken met de "teken een vierkant" functie? Succes!
      Course 4 Artist For Loops 1_instruction: 'Teken deze driehoek van 50 pixels
        groot. Hint: gebruik een herhaal blok.'
      Course 4 Artist For Loops 10_instruction: Vrije speelruimte! Veel plezier, je
        kan tekenen wat je wilt met de blokken die je hebt geleerd te gebruiken
      Course 4 Artist For Loops 11_instruction: 'Weet je nog dat we een variabele
        gebruikte om de aantal zijden in een figuur te bepalen? Dit patroon begint
        met een driehoek en voegt daarbij één zijde per keer totdat het een tienhoek
        (10 zijden) vormt. Elke zijde moet 100 pixels lang zijn. Tip:  360 gedeeld
        door het aantal zijden dat een figuur heeft, is het aantal graden dat je zal
        willen draaien.'
      Course 4 Artist For Loops 11a_instruction: "Laten we het samen voegen! Met behulp
        van je kennis over \"for loops\" en de \"counter\" maken we deze tekening
        waar elke vorm twee zijden meer heeft dan de laatste. Zorg ervoor dat elke
        zijde 10 keer zo lang is als het aantal zijdes in de veelhoek.  /r/r \n\nEen
        klein beetje van de code is voorbereid voor jou.\n"
      Course 4 Artist For Loops 12_instruction: 'Dat zag er vet uit, maar nu wil ik
        een figuur tekenen naast de laatste. Deze keer is elke zijde 20 pixels. Gebruik
        een spring blok om 40 pixels vooruit te springen na elke figuur. '
      Course 4 Artist For Loops 13_instruction: Hmmm, de figuren worden iedere keer
        groter! Hebben we dit probleem niet eerder al opgelost met variabelen? Hoe
        kunnen we de teller gebruiken van de variabelen om de zijden kleiner te maken
        omdat daar meer van zijn? In plaats van vooruit te gaan met een vaste hoeveelheid,
        gaan we (100/teller) pixels vooruit.
      Course 4 Artist For Loops 14_instruction: Als je iets meer of minder draait
        dan je normaal zou doen voor een figuur, geeft dat een nette effect. Probeer
        eens 89 graden te draaien om deze gedraaide vierkante spiraal te vormen.
      Course 4 Artist For Loops 15_instruction: 'Vrij Spel: Probeer eens wat tekeningen
        van jezelf te maken met For Loops. We hebben een paar algemene variabelen
        toegevoegd om te gebruiken.'
      Course 4 Artist For Loops 2_instruction: 'Ik heb de code voor het tekenen van
        een driehoek in een ''for''-lus (tellergestuurde lus) opgenomen die van 50
        tot 100 telt in stappen van 10. Bekijk hoe ik de code heb gebouwd en klik
        vervolgens op "Uitvoeren" wanneer je klaar bent om het in actie te zien. '
      Course 4 Artist For Loops 3_instruction: De kleinste driehoek heeft zijden van
        20 pixels lang, de grootste zijden van 200 pixels, en elke driehoek is 20
        pixels groter dan de vorige. Update de for loop om deze driehoeken te tekenen.
      Course 4 Artist For Loops 4_instruction: "Gebruik een 'for loop' om deze vierkanten
        te tekenen. \nZe starten met een lengte van 50 pixels, de grootste is 300
        pixels lang, en elk vierkant is 25 pixels groter dan de vorige. Ik heb je
        bijna alle code gegeven die je nodig hebt - er ontbreekt nog maar een blok,
        welke is dat?\n"
      Course 4 Artist For Loops 5_instruction: 'Mooi werk bij die laatste puzzle!
        Nu gaan we die  variabele blok ''counter'' nogmaals gebruiken om deze coole
        afbeelding te tekenen. '
      Course 4 Artist For Loops 6_instruction: Vrij spelen! Probeer met behulp van
        een 'for loop' een zelf bedacht patroon te tekenen dat steeds groter wordt.
      Course 4 Artist For Loops 6a_instruction: Verander 3 kleine dingen uit de code
        van het vorige niveau om dit op te lossen!
      Course 4 Artist For Loops 7_instruction: Wat gebeurt er als je "Repeat 3" uit
        dit algoritme haalt, en de "move" en "turn" blokken in de loop laat staan?
        In deze spiraalvormende driehoek is elke zijde 20 pixels langer dan de vorige.
      Course 4 Artist For Loops 8_instruction: De kortste lijn in deze spiraal van
        vierkanten is 10, de langste is 200, en elke lijn is 10 pixels korter dan
        de vorige. Kun jij deze te gekke afbeelding afmaken door de ontbrekende blokken
        plaatsen?
      Course 4 Artist For Loops 8a_instruction: De kortste lijn in deze spiraal van
        vierkanten is 10, de langste is 200, en elke lijn is 10 pixels korter dan
        de vorige. Kun jij deze te gekke afbeelding afmaken door de ontbrekende blokken
        plaatsen?
      Course 4 Artist For Loops 9_instruction: Kun je een spiraal maken? Ga vooruit
        van 1 tot 75 pixels, elke loop komt er 1 pixel bij.
      Course 4 Artist For Loops Challenge_instruction: |-
        Kun je alles wat je geleerd hebt gebruiken om dit plaatje te maken?\r
        \r
        Hint nodig? Klik hier.
      Course 4 Artist For Loops inspire_instruction: 'Vrije opdracht inspiratie: Je
        hebt nu alles geleerd wat je nodig hebt om zo''n patroon te maken! Als deze
        afbeelding je inspireert, probeer dan iets soortgelijks te maken. Of maak
        iets helemaal zelf. \r \r Wil je weten hoe ons inspiratie patroon werd gemaakt?
        Bezoek https://studio.code.org/c/106387604 voor de oplossing.'
      Course 4 Artist Functions 1_instruction: Kun je met behulp van een loop een
        vierkant tekenen dat 100 pixels lang is?
      Course 4 Artist Functions 10_instruction: Welke blok moet je nog toevoegen om
        de driehoek bovenop het vierkant te krijgen?
      Course 4 Artist Functions 11_instruction: Deze code tekent een kubus - plaats
        hem in een functie en noem die "Draw a Cube".
      Course 4 Artist Functions 12.1_instruction: Leaten we een functie maken met
        de naam "teken een octagon 20" die een octagon tekent waarvan alle zijden
        20 pixels lang zijn.
      Course 4 Artist Functions 12_instruction: Herhaal de square functie met behulp
        van een loop om een lijn te tekenen
      Course 4 Artist Functions 13.1_instruction: |-
        Laten we nu een functie maken "ga naar de rechterbovenhoek" die de kunstenaar naar de rechterbovenhoek van de octagon stuurt die je niet hebt getekend, zodat we het patroon af kunnen maken.\r
        \r
        Hint: om in de rechterbovenhoek te komen kun je proberen sprongetjes te maken van 3/8 van de octagon.
      Course 4 Artist Functions 13_instruction: Kijk aan, we hebben een nieuwe functie
        genaamd "draw a line of squares". Bekijk de functie maar eens van binnen om
        te ontdekken hoe we hem gebouwd hebben. Klik op "Run" als je klaar bent voor
        de volgende puzzle.
      Course 4 Artist Functions 14.1_instruction: Laten we nu een functie maken "ga
        naar de rechterbovenhoek" die de kunstenaar naar de rechterbovenhoek van de
        octagon stuurt die je niet hebt getekend, zodat we het patroon af kunnen maken.
      Course 4 Artist Functions 14_instruction: Je doet het geweldig! Laten we onze
        nieuwe "Teken een lijn van vierkanten" functie gebruiken om een Rechthoekige
        vorm te tekenen. Vergeet niet dat elk vierkant 40 pixels lang is.
      Course 4 Artist Functions 15_instruction: 'Laten we de uitdaging iets groter
        maken, kun je een ster vorm tekenen door de functie "teken een lijn van vierkanten"
        te gebruiken? Succes! Tip: je moet wellicht 144 graden draaien'
      Course 4 Artist Functions 2_instruction: 'Kun je 3 vierkanten tekenen die 20
        pixels van elkaar vandaan staan? Hint: elk vierkant is 100 pixels groot'
      Course 4 Artist Functions 3_instruction: |
        Kun je deze afbeelding tekenen door de "draw a square" functie te gebruiken? Hint: tussen elk vierkant zit 120 pixels.\r
      Course 4 Artist Functions 4_instruction: "Ben je er klaar voor om je eigen \"functieblok\"
        te maken?\nKlik op de functiesblok in de gereedschapskist, noem het \"teken
        een driehoek\".\nMaak dan een driehoek zoals je al eerder gedaan hebt, met
        actieblokken en lusblokken.\nKlik dan op OPSLAAN en SLUITEN in de rechterbovenhoek.
        \ntip: Maak een driehoek met een lengte van 100 pixels.Veel succes!\n"
      Course 4 Artist Functions 5 OLD_instruction: |
        Laten we proberen om je eigen functies te gebruiken.
        Teken een huis - Wat moet er verbeterd worden in de code om je huis goed te tekenen?
      Course 4 Artist Functions 5_instruction: |
        Kun je deze afbeelding tekenen door de "draw a square" functie te gebruiken? Hint: tussen elk vierkant zit 120 pixels.\r
      Course 4 Artist Functions 6_instruction: Welke blok moet je nog toevoegen om
        de driehoek bovenop het vierkant te krijgen?
      Course 4 Artist Functions 7_instruction: Kun je een lijn van vierkanten tekenen
        door gebruik te maken van de Vierkant functie? Elk vierkant is 40 pixels lang.
      Course 4 Artist Functions 8_instruction: "Begin je de functieblokken al een
        beetje te begrijpen?\nLaten we de vierkant wijzigen, zodat hij 200 pixels
        wordt.\nTip: Klik op \"wijzigen\" om de lengte van \"teken een driehoek\"
        te wijzigen in de functie-editor.\nVergeet niet op \"OPSLAAN EN SLUITEN\"
        te klikken, om uit de functie-editor te komen. \n"
      Course 4 Artist Functions 9_instruction: |
        We hebben je de code gegeven voor een functie.
        Helaas mist er iets....
        Kun jij de functieblok afmaken?
      Course 4 Artist Functions challenge_instruction: Klik hier om de tips opnieuw
        te zien.
      Course 4 Artist Functions Inspiration_instruction: Klik hier om de tips opnieuw
        te zien.
      Course 4 Artist Functions inspire_instruction: Klik hier om de inspiratie afbeelding
        weer te zien.
      Course 4 Artist Inspire_instruction: |-
        Vrij spel inspiratie: Je hebt nu alles geleerd wat je nodig hebt om een patroon als deze te maken! Als deze afbeelding je inspireert, probeer om net zo iets te maken. Maak anders iets helemaal alleen.\r

        \r
        Wil je weten hoe ons patroon is gemaakt? Klik dan rechts op de blauwe tab en klik dan op de "Bekijk de oplossing"-knop.
      Course 4 Artist Params 1_instruction: |
        Laten we een vierkant tekenen
        die 50 pixels breed is
      Course 4 Artist Params 10_instruction: "In een functie kun je andere functies
        aanroepen!\nGebruik je \"vorm\" functie als basis, maak 3 huizen. Ek volgende
        huis moet 20 pixels groter zijn.\nHet eerste huis moet 50 pixels zijn.\nTip:
        een for-lus kan handig zijn. \n"
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Gebruik je "pinwheel" functie om elke
        van deze vormen te tekenen. De lengte van de zijde voor elke afbeelding is
        50.
      Course 4 Artist Params 13_instruction: "Freeplay: Hier zijn de functies die
        je geschreven hebt en nog wat extra functies. \nMaak iets cools!\n"
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: "Geweldig, kun je al deze driehoeken maken
        met je functie? \nDe eerste is 25 pixels, de tweede is 50 en de laatste is
        75. \n"
      Course 4 Artist Params 4_instruction: |
        Kun je een nieuwe functie 'vierkant' genoemd toevoegen?
        Het heeft ook een lengteparameter nodig, net zoals de driehoek. Teken deze keer 3 vierkanten 25, 50 en 75 pixels in lengte, 100 pixels uit elkaar.
      Course 4 Artist Params 5_instruction: |
        Gebruik beide nieuwe functies om dit beeld te schetsen. Om dit te vergemakkelijken gebruikt u een lus met een 'teller' parameter.
      Course 4 Artist Params 6_instruction: "Laat ons deze functie 'een vorm tekenen'
        bewerken. \nHet heeft al een 'lengte' parameter. Laat ons nu de functie bewerken
        door ook een 'zijde' parameter toe te voegen. Vergeet niet dat de te draaien
        hoek voor een bepaalde vorm 360 gedeeld door de zijde is. Tip: de lengtes
        voor elke vorm zijn voor de driehoek 100 pixels, de zeshoek 25 pixels en het
        vierkant 5 pixels. \n"
      Course 4 Artist Params 7_instruction: 'Kunt u deze vormen tekenen door de "???"
        in te vullen? Het vierkant en de driehoek zijn 100 pixels in grootte terwijl
        de zeshoek 75 pixels in grootte is. '
      Course 4 Artist Params 8_instruction: |
        Kunt u erachter komen hoe deze vorm te tekenen? Hier is een tip: maak een nieuwe functie met 6 zijden, een zeshoek genoemd.
      Course 4 Artist Params 9_instruction: Weet je nog toen we de tellerlus gebruikten
        maar een lus erin verwijderden? Laten we eens wat leuks doen en de functie
        "teken een vorm"  gebruiken met "zijden" en "lengte" parameters. Kunt u deze
        vormen opnieuw maken? De vierkant teller dient 5/100/5 te zijn, de driehoek
        teller dient 10/100/10 te zijn en de zeshoek is 2/100/2.
      Course 4 Artist Var 9_instruction: 'Hier is het algoritme om een driehoek te
        tekenen, wijzig het zo dat het in plaats daarvan de variabele"zijden" gebruikt.
        Vervangen het nummer 3 door de variabele "zijden". Tip: Vergeet niet om het
        blok "zijden instellen" te gebruiken.'
      Course 4 Artist Vars 1_instruction: Kunt u me helpen een driehoek te tekenen?
        Het is 100 pixels lang aan elke kant.
      Course 4 Artist Vars 10_instruction: Dit is een algoritme dat een driehoek tekent
        door kleinere driehoeken te tekenen. Kun jij het zo aanpassen dat het de variabelen
        "zijden" gebruikt om elke driehoek te tekenen? Neem de code door, en iedere
        keer dat je het nummer 3 ziet, vervang je het door je variabelen "zijden".
        Denk eraan om het "instellen zijden" blok gebruikt.
      Course 4 Artist Vars 11_instruction: Hier is hetzelfde algoritme wat we gebruikten
        voor de laatste puzzel - hoe moet je de variabele "zijden" instellen om dit
        beeld van vierkanten te tekenen?
      Course 4 Artist Vars 12_instruction: Laten we de variabele "zijden" instellen
        op 5. Hoe meer zijden we toevoegen aan dit algoritme, hoe groter het totale
        patroon wordt! Laten we een nieuwe variabele met de naam "lengte" toevoegen
        en deze gebruiken wanneer je een "beweeg vooruit" hebt. Zet de variabele "lengte"
        op 75 voor deze vorm.
      Course 4 Artist Vars 13_instruction: Wanneer een vorm veel zijden heeft, moet
        elke zijde korter zijn als je wil dat het hele patroon op het scherm past.
        \r laten we opnieuw het algoritme voor dit verbazingwekkend patroon maken,
        maar in plaats van de "lengte" variabele handmatig in te stellen,  gebruiken
        we een wiskunde-blok met de "zijden" variabele er in om te zorgen dat elke
        vorm correct past. De omtrek van elke veelhoek is 300 pixels. \r enkele tips
        nodig?  Klik hier.
      Course 4 Artist Vars 14_instruction: 'Vrij Spel: Probeer het eens nu je algoritme
        met nog een lus genest is. Experimenteer met het veranderen van de waarden
        van je twee variabelen om coole patronen te tekenen.'
      Course 4 Artist Vars 2_instruction: In plaats van "beweeg vooruit met 100",
        verwijst het "beweeg"-blok nu naar de variabele "lengte". Kun je "lengte"
        instellen op 150 om deze nieuwe driehoek te tekenen?
      Course 4 Artist Vars 3_instruction: 'Dit is een lus die een vierkant tekent,
        maar er ontbreekt iets. Kun jij het oplossen zodat het de variabele "lengte"
        gebruikt om uit te vinden hoe lang elke zijde moet zijn? '
      Course 4 Artist Vars 4_instruction: Nu wil ik een rechthoek maken die twee keer
        zo hoog is als de breedte. We hebben een variabele met de naam "breedte" die
        op 100 ingesteld is. Kun je de rekenblokken gebruiken om de code compleet
        te maken?
      Course 4 Artist Vars 5_instruction: Gebruik de variabele "zijden" om het aantal
        keren dat deze lus uitgevoerd wordt te regelen.
      Course 4 Artist Vars 6_instruction: 'Hmmm, ik heb geprobeerd de "zijkanten"
        variabele aan te passen naar 4 in de code van de laatste puzzel, maar dit
        tekent nog steeds een driehoek. Kun je de "zijkanten" variabele (samen met
        een wiskunde blok) gebruiken om ervoor te zorgen dat ik ook de juiste hoeveelheid
        draai? Tip: 360 gedeeld door het aantal zijkanten geeft je het aantal graden
        dat je moet draaien.'
      Course 4 Artist Vars 7_instruction: Kun je de variable "zijden" aanpassen om
        mij te helpen deze zeshoek te tekenen?
      Course 4 Artist Vars 8_instruction: "Vrij Spel: Experimenteer met het aantal
        zijden die deze vorm heeft. Kun je het algoritme aanpassen zodat de totale
        grootte van de vorm hetzelfde blijft, ongeacht het aantal zijden die hij heeft?\nHint:
        Je moet deze keer misschien je rekenblokken (360 gedeeld door \"zijden\")
        op twee plaatsen gebruiken. \n"
      Course 4 Artist Vars 9_instruction: Pas je algoritme zo aan dat het de variabele
        "zijden" gebruikt in plaats van een vaste waarde om een driehoek te tekenen.
        Vervang de waarde 3 met de variabele "zijden", en gebruik het blok "zet zijden
        op".
      Course 4 Bee 1_instruction: De bij kan niet zeggen of dit een bloem is of een
        honingraat. Controleer eerst of het een bloem of een honingraat is, en verzamel
        daarna pas nectar als het een bloem is.
      Course 4 Bee 2_instruction: Controleer ieder object om te zien of het een bloem
        is. Als dat zo is, verzamel dan nectar ... anders kun je het negeren!
      Course 4 Bee 3_instruction: Het onbekende object is een bloem of een honingraat.
        Gebruik het blok als/anders om nectar te verzamelen als het een bloem is,
        anders maak je honing (omdat het dan een honingraat moet zijn).
      Course 4 Bee 4_instruction: Deze paarse bloem kan 3, 2 of 1 nectar hebben. Dit
        is een als-anders-blok dat gecombineerd is met nog een als-anders-blok om
        een als, anders-als, anders-blok te maken. Vul de oplossing aan om de onbekende
        hoeveelheid nectar te verzamelen.
      Course 4 Bee 5_instruction: Deze paarse bloem mag 3, 2 of 1 nectar hebben. Voeg
        een als-anders blok toe om een als, anders-als, anders blok te maken. Vul
        de oplossing aan om de onbekende hoeveelheid nectar te verzamelen.
      Course 4 Bee 6_instruction: Deze paarse bloem mag 3, 2 of 1 nectar hebben. Maak
        een als, anders-als, anders blok om de onbekende hoeveelheid nectar te verzamelen.
      Course 4 Bee 7_instruction: Gebruik alles wat je tot nu toe hebt geleerd alle
        nectar te verzamelen. De paarse bloem mag 3, 2 of 1 nectar hebben.
      Course 4 Bee For Loops 1_instruction: Gebruik een lus om de nectar uit iedere
        bloem te verzamelen.
      Course 4 Bee For Loops 10_instruction: Wanneer je lus aftelt wordt de stapwaarde
        in iedere lus afgetrokken van je tellervariabele. Wat zou je staalharde moeten
        zijn om 9, dan 6 en dan 3 nectar te verzamelen?
      Course 4 Bee For Loops 11_instruction: Wat is er mis met deze lus? Kijk of je
        het kunt repareren en laat de honingbij de nectar verzamelen.
      Course 4 Bee For Loops 2_instruction: Dit is een nieuwe soort lus, die de "voor"-lus
        heet. Deze specifieke for-lus zal met 1 tegelijk  van 1 naar 5 tellen, en
        de inhoud van de lus iedere keer dat hij telt uitvoeren. Help de Bij om de
        nectar te krijgen.
      Course 4 Bee For Loops 3_instruction: Je kunt deze puzzel oplossen door een
        lus te maken van 1 tot drie per 1. Laten we nu wat nectar gaan halen!
      Course 4 Bee For Loops 4_instruction: Verzamel allen nectar van deze bloemen.
        I vraag me af of het gemakkelijker kan...
      Course 4 Bee For Loops 5_instruction: Ah, de lus maakt het een stuk simpeler!
        Gebruik de variabele "teller" van de voor-lus om het blok "haal nectar"  hetzelfde
        aantal keren uit te voeren als de lus. Wauw! Dat zijn een hoop lussen. Alle
        code die je nier nodig hebt is er; kijk maar eens hoe het in elkaar gezet
        is en klik dan op Uitvoeren om te zien hoe het werkt.
      Course 4 Bee For Loops 6_instruction: Je kunt ook de voor-lus gebruiken om af
        te tellen. Probeer deze nectar te verzamelen door af te tellen van 5 naar
        1 per 1.
      Course 4 Bee For Loops 7_instruction: Gebruik je lusvariabele "teller" om te
        regelen hoever je horizontaal beweegt.
      Course 4 Bee For Loops 8_instruction: Kun je de lusvariabele gebruiken om beweging
        en nectar verzamelen te regelen?
      Course 4 Bee For Loops 9_instruction: Het laatste nummer in je voor lus wordt
        de "stapgrootte"  genoemd en iedere keer dat de lus doorlopen wordt, wordt
        de teller variabele veranderd met de stapgrootte. Probeer deze bloemen te
        verzamelen door een stapgrootte van 2 te gebruiken.
      Course 4 Bee Loops 5 NEW_instruction: Er zijn hier 3 bloemen. Kun je het patroon
        aan instructies vinden dat je 3 keer moet herhalen om de nectar te verzamelen
        met zo weinig mogelijk blokken?
      Course 4 Bee Loops 5a NEW_instruction: Gebruik nu lussen om de bij te helpen
        alle nectar te verzamelen op zijn weg naar de honingraat met zo weinig mogelijk
        blokken. Vergeet niet honing te maken als je er bent!
      Course 4 Bee Params 1_instruction: Gebruik de functie "krijg 3 nectar", die
        draait, nectar ophaalt, en dan teruggaat naar de oorspronkelijke plek. Schrijf
        een sequentie om alle nectar te verzamelen door "krijg 3 nectar" te gebruiken.
      Course 4 Bee Params 2_instruction: Pas de functie "krijg 3 nectar" aan zodat
        het mij naar rechts naar de bloemen laat draaien in plaats van links.
      Course 4 Bee Params 3 (copy 1)_instruction: Nu zijn er bloemen aan beide kanten!
        Misschien kun je een parameter gebruiken zodat dezelfde functie werkt voor
        bloemen aan beide kanten. Ik heb een parameter met de naam "richting" aan
        de functie toegevoegd. Als de parameter "richting" gelijk is aan 0 dan zou
        ik links moeten draaien, als het 1 is zou ik naar rechts moeten draaien.
      Course 4 Bee Params 3_instruction: 'Nu zijn er bloemen aan beide kanten! Ik
        heb een parameter met de naam "richting" aan de functie toegevoegd. Gebruik
        de variabelen "links" en "rechts" om de richting te besturen. Vul de rest
        van de functiedefinitie in en klik dan op "Opslaan en Sluiten". '
      Course 4 Bee Params 4 (copy 1)_instruction: Probeer je nieuwe functie te gebruiken
        om alle bloemen te verzamelen. Onthoudt dat 0 = links en 1 = rechts.
      Course 4 Bee Params 4 - Two WhenRun_instruction: Gebruik je nieuwe functie om
        alle bloemen te verzamelen. Denk eraan de variabelen 'links' en 'rechts' te
        gebruiken.
      Course 4 Bee Params 4 backup_instruction: 'Zou het niet leuk zijn als we alle
        nectars met een enkele functie konden verzamelen? Probeer een nieuwe parameter
        met de naam "nectars" aan je functie toe te voegen om de hoeveelheid nectar
        te regelen die je moet verzamelen. Je zult waarschijnlijk de functie ook een
        nieuwe naam willen geven! '
      Course 4 Bee Params 4_instruction: Probeer een nieuwe functie te maken om alle
        bloemen te verzamelen. Denk eraan om de variabelen links en rechts te gebruiken.
      Course 4 Bee Params 5_instruction: Laten we helemaal opnieuw beginnen - kun
        je een nieuwe functie genaamd "pak 5 nectar" met een richting parameter maken?
      Course 4 Bee Params 6 (copy 1)_instruction: Probeer je nieuwe functie te gebruiken
        om al deze nectar te verzamelen.
      Course 4 Bee Params 6_instruction: Zou het niet leuk zijn als we alle nectars
        met een enkele functie konden verzamelen? Probeer een nieuwe parameter met
        de naam "nectars" aan je functie toe te voegen om de hoeveelheid nectar te
        regelen die je moet verzamelen. Je zult waarschijnlijk de functie ook een
        nieuwe naam willen geven!
      Course 4 Bee Params 7 (copy 1)_instruction: Probeer je nieuwe functie te gebruiken
        om al deze nectar te verzamelen.
      Course 4 Bee Params 7_instruction: Probeer je nieuwe functie te gebruiken om
        alle nectar te verzamelen.
      Course 4 Bee Params 8 Clone 2_instruction: Oooh, nu hebben we ook honing! Hoe
        kun je je functie aanpassen om ofwel nectar te verzamelen, of honing te maken?
      Course 4 Bee Params 8 clone 3_instruction: Oooh, nu hebben we ook honing! Hoe
        kun je je functie aanpassen om ofwel nectar te verzamelen, of honing te maken?
      Course 4 Bee Params 8 Clone_instruction: Oooh, nu hebben we ook honing! Hoe
        kun je je functie aanpassen om ofwel nectar te verzamelen, of honing te maken?
      Course 4 Bee Params 8 new_instruction: Oooh, nu hebben we ook honing! Hoe kun
        je je functie aanpassen om ofwel nectar te verzamelen, of honing te maken?
      Course 4 Bee Params 8_instruction: |
        Oooh, we moeten nu ook de honing nog doen!
        Hoe kun je je functie update, zodat die of honing maakt of nectar pakt?
      Course 4 Bee Params Ex_instruction: Probeer je nieuwe functie te gebruiken om
        alle nectar te verzamelen.
      Course 4 Binary 1_instruction: Hier is een functie die een binaire tekst van
        eentjes en nullen vraagt en de boer dan vraagt om van links naar rechts of
        van boven naar beneden te draaien,  op de hoeken waar de nummer een nul heeft.  Voer
        de code uit om te zien hoe de boer binaire getallen gebruikt om een afbeelding
        te maken.
      Course 4 Binary 2_instruction: 'Welke binaire tekst kun je 8 keer herhalen om
        de afbeelding te maken? Tip: het getal "1" vult een gat.'
      Course 4 Binary 3_instruction: Kun je dit patroon maken door een binaire tekst
        te herhalen?
      Course 4 Binary 5 (copy 1)_instruction: Welke binaire tekst moet je 10 keer
        herhalen om de afbeelding te maken?
      Course 4 Binary 5_instruction: Welke binaire tekst moet je 10 keer herhalen
        om de afbeelding te maken?
      Course 4 Binary 6 (copy 1)_instruction: Welke binaire tekst moet je 10 keer
        herhalen om de afbeelding te maken?
      Course 4 Binary 6_instruction: Welke binaire tekst moet je 10 keer herhalen
        om de afbeelding te maken?
      Course 4 Binary 7_instruction: Welke binaire tekst moet je 10 keer herhalen
        om de afbeelding te maken?
      Course 4 Binary 8_instruction: Je kunt het grootste deel van deze afbeelding
        afmaken door een lus te maken met een 5 bit binair getal - dan heb je alleen
        nog een 4 bit getal nodig om in de rechts onder hoek te komen.
      Course 4 EC 1a_instruction: Geen regels, geen hints. Los het op!
      Course 4 EC 1b_instruction: Geen regels, geen hints. Los het op!
      Course 4 EC 2a_instruction: "**Mega uitdaging:** Geen regels, geen hints. Los
        het op!"
      Course 4 EC 2b_instruction: "**Mega uitdaging:** Geen regels, geen hints. Los
        het op!"
      Course 4 EC 2c_instruction: "**Mega uitdaging:** Geen regels, geen hints. Los
        het op!"
      Course 4 EC 3_instruction: 'Gebruik wat je hebt geleerd bij het vorige niveau
        om deze tekening te maken. Hint: de code wordt eenvoudiger als je parameters
        gebruikt. '
      Course 4 EC 3a_instruction: 'Mega uitdaging: Geen regels, geen hints. Los het
        op!'
      Course 4 Maze 1_instruction: Stuur de angry bird naar het biggetje!
      Course 4 Maze 2_instruction: vermijd de TNT!
      Course 4 Maze 3_instruction: 'programmeer zodat de angry bird naar het biggetje
        gaat. '
      Course 4 Maze 4_instruction: Probeer het "herhaal" blok om minder blokken te
        gebruiken...
      Course 4 Maze 5_instruction: Kun jij deze puzzel met het minste aantal blokken
        oplossen?
      Course 4 Maze 6_instruction: Kun jij deze puzzel met het minste aantal blokken
        oplossen?
      Course 4 Play Lab For Loops 2_instruction: Laten we dit keer de oneven nummers
        van 1 tot 100 tellen.
      Course 4 Play Lab Params 1_instruction: Hier is de functie "jump" die ervoor
        zorgt dat je figuur 100 pixels naar voren springt. Gebruik de functie om alle
        vlaggen te verzamelen.
      Course 4 Play Lab Params 10_instruction: |
        We hebben nog een laatste functie toegevoegd die je kunt gebruiken. Programmeer je spel zo dat het de "niveau_omhoog" functie aanroept als "speler_punten" > 10. Speel het spel en ga voorbij niveau 4 om verder te gaan naar de volgende puzzel.
      Course 4 Play Lab Params 2_instruction: Nu hebben we vlaggen die hoger zijn
        dan we kunnen springen. Voeg een parameter toe aan de jump-functie en noem
        die "hoogte". het pijltje naar boven moet 200 pixels springen, maar het pijltje
        naar beneden moet 100 pixels springen. Klik op "bewerken" op de jump-functie
        en verander het zodathet de hoogte-parameter gebruikt in plaats van gewoon
        100 pixels te springen.
      Course 4 Play Lab Params 3_instruction: 'Laten we een andere parameter toevoegen
        aan de jump-functie, zodat we het kunnen gebruiken met andere figuren. Elk
        figuur stelt een nummer voor, beginnend bij 1. verander de "jump"-functie,
        zodat het ook om de "actor"-parameter vraagt. '
      Course 4 Play Lab Params 4_instruction: Hier is een functie genaamd "patrol".
        Bewerk hem om de kat eerst 400 pixels omhoog en dan 400 pixels omlaag te laten
        bewegen.
      Course 4 Play Lab Params 5_instruction: Voeg een 'speler'-parameter toe aan
        de 'patrol'-functie, zodat we hem kunnen aanroepen voor alle spelers op het
        scherm. De spelers hebben nummer 1, 2 en 3.
      Course 4 Play Lab Params 6_instruction: Voeg een 'snelheid'-parameter toe aan
        de 'patrol'-functie. Probeer een 'bepaal snelheid'-blok te gebruiken met de
        nieuwe 'snelheid'-parameter om de Penguin te helpen allebei de flaggen te
        pakken voor de andere figuren er eentje krijgen.
      Course 4 Play Lab Params 7_instruction: Gebruik de pijltjes om naar de hond
        te gaan en alle vlaggen te pakken.
      Course 4 Play Lab Params 8_instruction: Gebruik een "wanneer de speler aanraakt"-blok
        om de hond terug naar de linkerbovenhoek te sturen, maar alleen wanneer hij
        een van de andere spelers aanraakt.
      Course 4 Play Lab Params 9_instruction: "Hier is ons spel van eerder, maar de
        meeste code is nu verborgen. Er is een nieuwe functie \"punten_scoren\".\\r\n\\r\nPas
        de functie zo aan dat de \"punten\"-parameter toegevoegd wordt aan de \"speler_score\"
        variabele.\\r\n\\r\nDe variabele \"speler_score\" moet iedere keer stijgen
        als de hond katten raakt met hartjes, en dalen als katten honden raken met
        hartjes\\r\n\\r\nLet op: als je klaar bent, klik dan op \"Run\" om af te spelen.
        Als de hond 6 punten scoort ga je verder naar de volgende puzzel. "
      Course 4 Play Lab Vars 1_instruction: Hier hoef je niet te programmeren. druk
        gewoon op de knop "uitvoeren" om het spel te spelen! In dit spel ben je een
        hond die meer vlaggen moet verzamelen dan de kat. gebruik de pijltjes om de
        hond te besturen. klik op "finish" als je klaar bent.
      Course 4 Play Lab Vars 2_instruction: Die wedstrijd was niet eerlijk! Verander
        de "hond_snelheid" variabele om er zeker te zijn dat je meer vlaggen kunt
        verzamelen dan de kat. Wie als eerst 10 vlaggen heeft wint.
      Course 4 Play Lab Vars 3_instruction: Dit is een nieuw soort spel! Gebruik de
        pijltjes naar links en rechts om te beweeg en het pijltje omhoog om te springen.
        Kijk of je alle vlaggen kunt verzamelen.
      Course 4 Play Lab Vars 4_instruction: 'Nu gebruiken we de variabele "hoogte"
        om de hoogte van de sprong te beheren. Verander de "hoogte"-variabele zodat
        de hond hoog genoeg kan springen om alle vlaggen te pakken. Tip: de nieuwe
        vlaggen zijn 200 pixels hoog.'
      Course 4 Play Lab Vars 5_instruction: 'Laten we een spel maken! Allereerst heb
        je een score nodig. Gebruik de "zet punten op"-blok om de score op 10 te zetten. '
      Course 4 Play Lab Vars 6 (copy 1)_instruction: Cool, nu hebben we een score-variabele,
        maar hoe gaan we die gebruiken? Laten we hem elke keer als je de vijand raakt
        verhogen. Gebruik de "wanneer actor 2 raakt iets"-gebeurtenis om je score
        te verhogen wanneer je vuurbal de kat raakt. Je kunt de score verhogen door
        de score=score+1. Als je score 20 is, heb je het level gehaald.
      Course 4 Play Lab Vars 6_instruction: |
        Hoe moeten we punten scoren in ons spel?
        Voeg elke keer als de hond de kat raakt met een vuurbal 1 punt toe.
        Gebruik de "wanneer actor 2 iets raakt-gebeurtenis om je score te verhogen. Je kunt je score verhogen door "score = score + 1".
        Als je score 10 is, heb je de level gehaald.
      Course 4 Play Lab Vars 7_instruction: Netjes, laten we nu zorgen dat dit spelletje
        niet te makkelijk wordt om te spelen. Iedere keer dat Hond (speler 1) geraakt
        wordt door gele hartjes van Kat (speler 2), moet je een punt verliezen. Begin
        met 10 punten zodat het niet te moeilijk wordt. Laat je score dalen van 10
        naar 0 om dit niveau uit te spelen.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: "Okee, nog een laatste ding voor
        dit spel: laten we zorgen dat de speler kan winnen (of verliezen). Gebruik
        een eindeloze lus om de waarde van score te controleren. Als de score ooit
        groter is dan 20, laat dan de tegenstander verdwijnen. Als de score lager
        is dan 0, laat dan de speler verdwijnen. \n\nKlik op 'Finish' als het spel
        werkt zoals je wilt.\n"
      Course 4 Play Lab Vars 8_instruction: Laten we het spel aanpassen zodat de Hond
        kan winnen (of verliezen). Gebruik een eindeloze lus om de waarde van 'score'
        te controleren - wanneer de score ooit groter is dan 20, zorg dan dat de tegenstander
        (de Kat) verdwijnt. Als de score ooit lager is dan 0, laat dan de speler (de
        Hond) verdwijnen. Klik op 'Finish' als het spelletje werkt zoals je wilt.
      Course 4 Play Lab Vars 9_instruction: 'Gratis speeltijd! Hier zijn alle variabelen
        waarmee wij hebben gespeeld tot nu toe in dit niveau, evenals een paar meer
        in het geval u ze wilt. \r \r Merk op dat er nu zoveel zijn blokken in onze
        toolbox zitten dat ze nodig moeten worden georganiseerd!  Hier, hebben we
        elk stuk in een geschikte categorie gezet.  Neem de tijd om alles wat beschikbaar
        is te verkennen. Wanneer je klaar bent met surfen, maak dan een spel of verhaal
        met behulp van herhalingen, variabelen en gebeurtenissen.  \r \r Hint: Scroll
        naar beneden om alle commando''s in de werkruimte te zien.'
      Course 4 Play Lab Vars_instruction: |
        Oké, nog één laatste opdracht
        - we maken het mogelijk om te winnen (of verliezen). Gebruik een "blijven herhalen" lus om de waarde van score te bekijken. Als score groter is dan 20, dan laat je de boef verdwijnen. Als de score lager is dan 0, dan laat je de speler verdwijnen.
      Course 4 Play Labs For Loops 1_instruction: Zullen we de hond alle getallen
        van 1 tot en met 100 laten uitspreken. Gebruik een rekenen met lus en de teller
        blok om de teller variabele uit te spreken bij elke uitvoering van de lus.
      Course 4 Play Labs For Loops 2_instruction: Laten we dit keer de oneven nummers
        van 1 tot 100 tellen.
      Course 4 Play Labs For Loops 3_instruction: Als we tellen met grotere getallen,
        dan kunnen verder tellen in de zelfde tijd. Probeer de hond te laten tellen
        van 10 tot en met 1000 in stappen van 10.
      Course 4 Play Labs For Loops 4_instruction: Het veranderen van de stap kan helpen,
        maar we tellen dan nog steeds lineair (elk getal ligt op de zelfde afstand
        van het vorige). Maar als we exponentieel zouden willen tellen? Kun jij, zonder
        de instellingen van de lus te veranderen, 1, 4, 9, 16, 25... tellen (teller
        kwadraat)?
      Course 4 Play Labs For Loops 4a_instruction: |-
        Laten we nu de variabelen van niveau 7 samenvoegen met de "teller" variabele om iets bijzonders te zien.
        \r
        \r
        In deze puzzel gaat hond van 0 tot 1000 tellen met "increment". Stel de "increment" variabele in op 10 aan het begin van je code om te zien wat er gebeurt.
      Course 4 Play Labs For Loops 5_instruction: In de vorige stap telden we het
        kwadraat van een getal. Probeer "teller ^ 2" in "teller ^ 3" te veranderen
        om de derde macht van elk getal te tellen (1, 8, 27, 64, 125, 216, 343...).
      Course 4 Play Labs For Loops 5a_instruction: |-
        In this puzzle, Dog will be your
        time keeper.\r
        \r
        Dog will count from 0 to 30 by "increment".  The "increment"
        variable will begin with a value of 1.\r
        \r
        Can you make it so that each
        time you click Dog, the increment increases by 2?  Click the forward arrow
        to run the for loop.\r
        \r
        Run the loop a couple of times, clicking Dog before
        each one.
      Course 4 Play Labs For Loops 6_instruction: Je weet misschien nog dat een priemgetal
        een getal is dat alleen gedeeld kan worden door zichzelf en 1. Gebruik de
        "is_priem" functie om alle priemgetallen tussen 1 en 100 uit te spreken.
      Course 4 Play Labs For Loops 6a_instruction: |-
        Hond houdt de tijd in de gaten door te tellen met onze "rekenen met" lus met "increment". Maar nu halen we de "wizard" er ook bij. Kan je de code aanpassen om "increment" met 2 te verhogen elke keer dat de "wizard" wordt geklikt?\r
        \r
        Pas op! De "wizard" is snel!
      Course 4 Play Labs For Loops 7_instruction: 'Kan je een "rekenen met" lus gebruiken
        om mij deze reeks uit te laten spreken: 1, 4, 7, 10, 13, 16, 19, 22, 25?'
      Course 4 Play Labs For Loops 7a_instruction: |-
        Goed bezig! Wat als we gaan tellen hoe vaak we op de "wizard" kunnen klikken voor dat hond tot 30 kan tellen?\r
        \r
        Voeg blokken toe aan de "wizard" zodat de variabele "clicked" met 1 wordt opgehoogd als er op de "wizard" wordt geklikt. Je hoeft even niks met "increment" te doen.\r
        \r
        Hond begint met tellen als je klikt op "start".
      Course 4 Play Labs For Loops 8_instruction: |-
        Help nu de spelers te bewegen terwijl ze tellen.\r
        \r
        Hond moet bewegen en tellen met "counter" +2 elke keer. Poes moet bewegen en tellen met "counter" X 2 elke keer. Pinguin moet bewegen en tellen met "counter" ^2 (naar de macht 2) elke keer. Wie is er als eerste bij de vlag?
      Course 4 Play Labs For Loops 8a_instruction: |-
        Om ons spel af te maken, hebben we weer de "increment" variabele nodig! Laten we het koppelen an het niveau van het spel.\r
        \r
        1) Hou bij hoe vaak de "wizard" is geklikt.\r
        2) Als de "wizard" minimaal 10 keer is geklikt voordat Hond 30 heeft geteld, hoog je "increment" met 1 op. Dan begin je opnieuw.\r
        3) Als de "wizard" niet 10 keer wordt geklikt, dan is het spel voorbij.
      Course 4 SCF 1_instruction: Gebruik de functies om vier rijen zeshoeken te tekenen.
        Zie je hoe de even rijen naar rechts zijn opgeschoven?
      Course 4 SCF 1a_instruction: Kan je bedenken hoe je alle nectar kan verzamelen
        met zo min mogelijk blokken?
      Course 4 SCF 1b_instruction: Kan je bedenken hoe je alle nectar kan verzamelen
        met zo min mogelijk blokken?
      Course 4 SCF 2_instruction: 'Gebruik wat je hebt geleerd bij het vorige niveau
        om deze tekening te maken. Hint: de code wordt eenvoudiger als je parameters
        gebruikt. '
      Course 4 SCF 3 Fail 1_instruction: Kan je bedenken hoe...
      Course 4 SCF 3 Fail 2_instruction: Kan je bedenken hoe...
      Course 4 SCF 3_instruction: 'Gebruik wat je hebt geleerd bij het vorige niveau
        om deze tekening te maken. Hint: de code wordt eenvoudiger als je parameters
        gebruikt. '
      Course 4 SCFL 1_instruction: Los deze puzzel op met zo min mogelijk blokken.
      Course 4 SCFL 1a_instruction: Kan je Scrat naar de eikel laten lopen met zo
        min mogelijk blokken?
      Course 4 SCFL 1b_instruction: Kan je Scrat naar de eikel laten lopen met zo
        min mogelijk blokken?
      Course 4 SCFL 2_instruction: Los deze puzzel op met zo min mogelijk blokken.
      Course 4 SCFL 3_instruction: Kan je bedenken hoe je deze tekening na kan maken?
      Course 4 SCFL 4_instruction: Kan je bedenken hoe je deze tekening na kan maken?
      Course 4 SCFL 5_instruction: Kan je bedenken hoe je deze tekening na kan maken?
      Course 4 SCFL 6_instruction: Kan je bedenken hoe je deze tekening kan maken
        met een enkele lus?
      Course 4 SCFL 7_instruction: De kunstenaar wil genieten van de golven! Kan je
        bedenken hoe je deze tekening kan maken?
      Course 4 SCFP 1_instruction: Maak een functie met parameters die de kunstenaar
        naar voren en naar achteren laat springen met x pixels en naar boven en naar
        beneden met y pixels. X en y kunnen positief of negatief zijn.
      Course 4 SCV 1_instruction: Klik hier om de instructies opnieuw weer te geven.
      Course 4 SCV 2_instruction: Klik hier om de instructies opnieuw weer te geven.
      Course 4 SCV 3_instruction: |-
        Laten we tikkertje spelen! Tik Poes voor 2 punten. Tik pinguïn voor 3 punten. Score 10 punten om te winnen.\r
        Pas op, als Poes en Pinguïn elkaar tikken, dan gaan er punten verloren.\r
        \r
        Voeg de blokken toe om het spel zo te laten werken. Hoe laat je Hond alle kanten op bewegen met de pijltjes toetsen? Hoe tel je punten bij als Hond iemand tikt? Hoe trek je punten af als Poes en Pinguïn elkaar raken?
      Course 4 SCV 4_instruction: Los deze puzzel op en gebruik zo weinig mogelijk
        blokken.
      Course 4 SCV 5_instruction: Los deze puzzel op en gebruik zo weinig mogelijk
        blokken.
      Course 4 SCV 6_instruction: Klik hier om de instructies opnieuw weer te geven.
      Course 4 SCVP 1_instruction: Maak een functie met parameters die de kunstenaar
        naar voren en naar achteren laat springen met x pixels en naar boven en naar
        beneden met y pixels. X en y kunnen positief of negatief zijn.
      Course 4 Variables Assessment_instruction: Kan je deze afbeelding maken met
        een variabele voor de kanten? Elke lijn moet 50 pixels lang zijn.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: Dit is een test!\r Beweeg me eerst één kant
        op, daarna een andere kant, om me bij het varken te krijgen
      Course1MazeAssessment2_instruction: Dit is een test!\r Beweeg me eerst één kant
        op, daarna een andere kant, om me bij het varken te krijgen.
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) \n"
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: Laten we nu 20 overlappende cirkels
        maken, draai 18 graden tussen elke cirkel.
      frozen circle function with parameter_instruction: Hier is een "Maak een cirkel"
        blok dat cirkels van verschillende grootte kan maken. Kun jij dit blok gebruiken
        om een kleine cirkel van grootte 5 en grotere cirkel van grootte 10 te maken?
      frozen circle function_instruction: Gebruik het nieuwe "Maak een cirkel" blok
        om 10 overlappende cirkels te maken. Vergeet niet vooruit te springen tussen
        de cirkels.
      frozen circle_instruction: Een cirkel is een speciale vorm. Kun jij bedenken
        welk getal op de plaats van de vraagtekens moet komen om een cirkel te tekenen?
      frozen cross rotate dense_instruction: 'Laten we dit 90 maal herhalen! Hoeveel
        keer gaat 90 in 360? Tip: Het is een heel klein getal.'
      frozen cross rotate_instruction: Probeer het nu 10 maal te herhalen. Hoeveel
        graden moet je draaien tussen de lijnen?
      frozen cross_instruction: Plak een 'herhaal'-blok om deze commando's om een
        plus-teken te maken. Heb je al gezien dat Elsa vooruit en achteruit kan lopen?
      frozen diamond mini snowflake_instruction: Wist je dat iedere sneeuwvolk een
        andere vorm heeft? Laten we een nieuwe sneeuwvlok maken door nog een 'herhaal'-blok
        te gebruiken om 4 keer een parallellogram te tekenen, waarbij we 90 graden
        naar rechts draaien na ieder parallellogram.
      frozen diamond snowflake_instruction: Laten we nu een nieuwe sneeuwvlok maken
        door met het "Herhaal" blok een parallellogram 10 keer te herhalen, draai
        steeds 36 graden tussen de parallellogrammen.
      frozen diamond_instruction: Gebruik een lus om deze blokken om een parallellogram
        te maken. Dat is net een rechthoek, maar met andere hoeken. Deze heeft hoeken
        van 60 en van 120 graden in plaats van allemaal hoeken van 90 graden.
      frozen freeplay_instruction: Je bent nu officieel een meester kunstenaar geworden!
        Maak een winter wonderland.
      frozen line_instruction: Hoi! Ik ben Elsa van Arendelle. Help mij met het maken
        van een lijn.
      frozen perpendicular_instruction: Laten we nu eens kijken of we twee lijnen
        kunnen maken die in een hoek van 90 graden staan. Je zult zowel het "draai"
        als het "ga vooruit" blok moeten gebruiken.
      frozen snowflake branch_instruction: Probeer het "Maak een sneeuwvloktak" blok
        te gebruiken om 3 takken te maken, dit begint al op een sneeuwvlok te lijken.
      frozen snowflake full_instruction: Laten we dit nu 8 keer herhalen om een mooie
        sneeuwvlok te maken!
      frozen snowflower_instruction: Ingewikkelde sneeuw patronen kunnen gemaakt worden
        met zeer eenvoudige vormen. Kun je een patroon maken door 5 cirkels van grootte
        5 te herhalen en 5 cirkels van grootte 10?
      frozen square iterative_instruction: Het lijkt er op dat we half op weg zijn
        om een vierkant te maken. Laten we 4 lijnen bij elkaar doen om een vierkant
        te maken.
      frozen square loop 3x_instruction: Laten we drie vierkanten maken, draai na
        elk vierkant. Zorg er voor dat je voor elk nieuw vierkant 120 graden draait.
      frozen square loop_instruction: Hoi, ben ik Anna van Arendelle! Laten we een
        vierkant maken met het "Herhaal" blok, dat gebruikt minder blokken. Hoeveel
        keer (???) moet het "Herhaal" blok de blokken binnenin doorlopen om een vierkant
        te maken?
      frozen square snowflake_instruction: Kun je een sneeuwvlok maken door met het
        "Herhaal" blok 10 vierkanten te maken en met het "Draai" blok 36 graden te
        draaien tussen de vierkanten?
      Infinity_catch_instruction: Kun je Elsa (acteur 2) laten inhalen door Anna met
        behulp van de pijltjestoetsen?
      Infinity_finale_instruction: Maak wat je maar wilt en deel het!
      Infinity_move_collide_instruction: Hiro is 'acteur 1'.  Verplaats hem naar Baymax,
        en laat een geluid afspelen wanneer ze elkaar aanraken.
      Infinity_move_directions_instruction: Baymax is 'acteur 2'.  Voeg beweeg blokken
        toe en verplaats vervolgens Baymax met behulp van de pijltjestoetsen. Zorg
        dat hij de andere 2 karakters raakt.
      Infinity_move_right_instruction: Hiro is 'acteur 1'. Gebruik het beweeg blok
        om Hiro te verplaatsen naar rechts en Baymax aan te raken.
      Infinity_repeat_instruction: Gebruik een "blijven herhalen" blok om Anna 400
        pixels omhoog en naar beneden te laten bewegen.
      Infinity_say_instruction: Zorg dat Anna 'Hi there' kan zeggen door gebruik te
        maken van het zeg blok.
      Infinity_shoot_instruction: Baymax is 'acteur 2'. Zorg dat Baymax een raket
        gooit naar Hiro.
      Infinity_shoot_directions_instruction: Hiro is 'acteur 3'. Zorg dat Hiro een
        voorwerp naar ieder van de vier karakters gooit. Wacht één seconde tussen
        iedere worp.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Raak nog meer sneeuwvlokken aan!
      Infinity_touch_four_instruction: Beweeg Anna omhoog, naar beneden, links en
        rechts om de vier sneeuwvlokken aan te raken.
      Infinity_touch_score_instruction: Zorg dat Anna een punt scoort wanneer ze een
        sneeuwvlok aanraakt. Klik vervolgens op 'uitvoeren' en bestuur haar om iedere
        sneeuwvlok één keer aan te raken.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Teken een korte lijn omhoog en een lange
        naar rechts!
      K-1 artist 1 level 10_instruction: Teken de onderbroken lijn met behulp van
        zowel de sprong als de teken blokken
      K-1 artist 1 level 9_instruction: Teken dit met drie lijnen
      K-1 Artist Loops 1_instruction: Teken deze lijn door 4 maal oostwaarts te bewegen.
      K-1 Artist Loops 2_instruction: Kun je dezelfde lijn tekenen met behulp van
        een lus?
      K-1 Artist Loops 3_instruction: Kun je deze blokken in een lus plaatsen om 6
        lijnen te tekenen?
      K-1 Artist Loops 4_instruction: Zou een lus ons kunnen helpen het bovenste deel
        van dit kasteel te tekenen?
      K-1 Artist Loops 5_instruction: Wat kun je 4 maal herhalen om deze trap te tekenen?
      K-1 Artist Loops 6_instruction: 'Hier zijn 2 lussen nodig: een om de trap op
        te gaan en een om naar beneden te gaan.'
      K-1 Artist Loops 7_instruction: Kun jij dit patroon afmaken met 2 lussen?
      K-1 Artist Loops 8_instruction: Deze trap heeft langere treden.
      K-1 Artist Loops 9_instruction: 'Test: Gebruik een lus om de trap te tekenen'
      K-1 Artist Loops Free Play_instruction: Vrij spelen, tekenen iets leuks!
      K-1 Artist1 1_instruction: Teken de voet van de man met één lijn
      K-1 Artist1 10_instruction: Teken en spring om het onderbroken pad naar schat
        X te maken
      K-1 Artist1 2_instruction: Teken de snorhaar op de kat met twee lijnen!
      K-1 Artist1 3_instruction: Teken twee lijnen naar het oosten en 2 lijnen naar
        het noorden om het huis af te maken!
      K-1 Artist1 4_instruction: Teken lijnen naar boven, opzij en beneden om het
        kasteel af te maken!
      K-1 Artist1 5.5_instruction: Maak de derde toren van het kasteel af met korte
        lijnen
      K-1 Artist1 5_instruction: Teken de steel van deze bloem met twee lijnen!
      K-1 Artist1 6_instruction: Maak het plaatje af door een spring blok te gebruiken!
      K-1 Artist1 7_instruction: Gebruik het spring blok om te verplaatsen zonder
        te tekenen. Spring naar boven en teken een lijn.
      K-1 Artist1 8_instruction: Teken de onderbroken lijn met behulp van zowel de
        sprong als de teken blokken
      K-1 Artist1 9_instruction: Teken en spring om een onderbroken lijn te maken
      K-1 Artist1 Assessment 1_instruction: Teken de lange en de korte lijnen!
      K-1 Artist1 Assessment 2_instruction: Teken de korte onderbroken lijnen!
      K-1 Artist2 1_instruction: Teken een vierkant onder de driehoek.
      K-1 Artist2 2_instruction: Maak een sprong en teken een vierkant naast het huis.
      K-1 Artist2 3_instruction: Teken een vierkant boven het onderste vierkant.
      K-1 Artist2 4_instruction: Teken een rechthoek om de brug af te maken.
      K-1 Artist2 5_instruction: Teken een rechthoek om de pilaar onder de brug af
        te maken.
      K-1 Artist2 6_instruction: Teken twee vierkanten om een rechthoek te maken!
      K-1 Artist2 Assessment1_instruction: 'Test: Teken een vierkant naast het andere
        vierkant.'
      K-1 Artist2 Free Draw_instruction: Teken iets leuks!
      K-1 Artist2_7_instruction: Teken een rechthoek om de kast een bovenste lade
        te geven!
      K-1 Bee 1_instruction: Breng me naar de bloem, pak nectar, breng me dan naar
        de honingraat en maak honing
      K-1 Bee 10_instruction: Pak vier nectar en maak dan twee honing!
      K-1 Bee 11.5_instruction: Pak vier nectar om vier honing te maken!
      K-1 Bee 11_instruction: Pak drie nectar en maak dan één honing
      K-1 Bee 12_instruction: Pak drie nectar en maak dan twee honing!
      K-1 Bee 13_instruction: Pak drie nectar en maak dan één honing!
      K-1 Bee 14_instruction: Breng me naar de nectar, pak het op, breng me dan naar
        de honingraat om honing te maken.
      K-1 Bee 15_instruction: Pak twee nectar om twee honing te maken!
      K-1 Bee 2_instruction: Breng me naar de bloem, pak nectar, breng me dan naar
        de honingraat en maak honing
      K-1 Bee 3_instruction: Breng me naar de bloem, pak nectar, breng me dan naar
        de honingraat en maak honing
      K-1 Bee 4_instruction: Pak twee nectar en maak dan twee honing!
      K-1 Bee 5_instruction: Pak drie nectar en maak dan drie honing!
      K-1 Bee 6_instruction: Pak twee nectar en maak dan twee honing!
      K-1 Bee 7_instruction: Pak drie nectar en maak dan twee honing!
      K-1 Bee 8_instruction: Pak twee nectar en maak dan twee honing!
      K-1 Bee 9_instruction: Pak twee nectar en maak dan twee honing!
      K-1 Bee Assessment 1_instruction: Pak nectar om honing te maken!
      K-1 Bee Assessment 2_instruction: Pak nectar om honing te maken!
      K-1 Bee Loops 1_instruction: Pak de nectar om honing te maken!
      K-1 Bee Loops 10_instruction: Gebruik herhaal blokken om nectar te pakken en
        honing te maken!
      K-1 Bee Loops 11_instruction: 'Test: Gebruik lussen en pak de nectar en de honing!'
      K-1 Bee Loops 12_instruction: 'Test: Gebruik herhaal blokken om nectar te pakken
        en honing te maken!'
      K-1 Bee Loops 2_instruction: Gebruik een lus om te verplaatsen en pak dan te
        nectar en maak honing!
      K-1 Bee Loops 3_instruction: Gebruik lussen om nectar te pakken en honing te
        maken!
      K-1 Bee Loops 4_instruction: Gebruik lussen om de nectar te pakken, honing te
        maken en te verplaatsen!
      K-1 Bee Loops 5_instruction: Gebruik lussen om de nectar en honing te pakken!
      K-1 Bee Loops 6_instruction: Gebruik herhaal blokken om nectar te pakken en
        honing te maken!
      K-1 Bee Loops 7_instruction: Gebruik lussen om nectar te pakken en honing te
        maken!
      K-1 Bee Loops 8_instruction: Gebruik lussen om nectar te pakken en honing te
        maken!
      K-1 Bee Loops 9_instruction: Gebruik herhaal blokken om nectar te pakken en
        honing te maken!
      K-1 Bee Loops Assessment 1_instruction: Pak nectar om honing te maken en gebruik
        lussen om te verplaatsen!
      K-1 Bee Loops Assessment 2_instruction: Pak nectar om honing te maken met behulp
        van lussen!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: Bouw een piramide van drie
        niveaus, er zijn geen andere aanwijzingen, dus speel gewoon met de stukjes
        tot het je lukt!
      k-1 maze 1_instruction: Kun je me naar het Westen bewegen om bij het varken
        te komen?
      K-1 Maze 10_instruction: Breng me om de TNT kisten naar het varken!
      K-1 Maze 11_instruction: 'Vind voor mij een pad naar dat maffe varken. Pas op
        voor TNT, anders verlies ik mijn veren! Tip: het varken is ten Zuiden van
        mij.'
      K-1 Maze 2_instruction: Beweeg me naar het Oosten om bij het varken te komen!
      K-1 Maze 3_instruction: Beweeg me naar het Zuiden om bij het varken te komen!
      K-1 Maze 4_instruction: Beweeg me naar het Noorden om bij het varken te komen!
      K-1 Maze 5_instruction: Beweeg me naar het Oosten om bij het varken te komen!
      K-1 Maze 6_instruction: Beweeg de ene kant op, en dan de andere om me bij het
        varken te krijgen!
      K-1 Maze 7_instruction: Beweeg de ene kant op, en dan de andere om me bij het
        varken te krijgen!
      K-1 Maze 8_instruction: Beweeg de ene kant op, en dan de andere om me bij het
        varken te krijgen!
      K-1 Maze 9_instruction: Beweeg de ene kant op, en dan de andere om me bij het
        varken te krijgen!
      K-1 Maze Assessment 1_instruction: Test -- Breng me naar het varken!
      K-1 Maze Assessment 12_instruction: Test Niveau
      K-1 Maze Assessment 13_instruction: Test Niveau
      K-1 Maze Assessment 2_instruction: Test -- Breng me naar het varken!
      K-1 maze debug 1_instruction: Pas de code aan om me naar het varken te brengen!
      K-1 maze debug 10_instruction: Los de fouten in dit level op door de blokken
        op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 maze debug 11_instruction: |-
        Dit is een test!\r
        Los de fouten in dit level op door blokken te herschikken en toe te voegen om me naar het varken te brengen
      K-1 maze debug 2_instruction: Zoek uit wat er mist en voeg dan de missende blokken
        toe, zodat ik dat varken kan pakken!
      K-1 maze debug 3_instruction: Zoek uit wat er mis is en VERWIJDER blokken om
        me naar het varken te brengen!
      K-1 maze debug 4_instruction: Controleer de blokken en los de fouten op! Ik
        denk dat ik de verkeerde kant op ga.
      K-1 maze debug 5_instruction: Los de fouten in dit level op door de blokken
        op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 maze debug 6_instruction: Los de fouten in dit level op door de blokken
        op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 maze debug 7_instruction: Los de fouten in dit level op door de blokken
        op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 maze debug 8_instruction: Los de fouten in dit level op door de blokken
        op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 maze debug 9_instruction: Los de fouten in dit level op door de blokken
        op de juiste volgorde te zetten en blokken toe te voegen!
      K-1 Maze debug Assessment 1_instruction: 'Test: Los de fouten in dit level op
        door de blokken op de juiste volgorde te zetten en blokken toe te voegen!'
      K-1 Maze Loops 1_instruction: Breng me naar het varken!
      K-1 Maze Loops 10_instruction: Breng me naar het varken! Gebruik het herhaal
        blok.
      K-1 Maze Loops 11_instruction: Breng me naar het varken! Gebruik het herhaal
        blok.
      K-1 Maze Loops 12_instruction: Breng me naar het varken! Gebruik het herhaal
        blok.
      K-1 Maze Loops 2_instruction: Gebruik het herhaal blok om me naar het varken
        te brengen!
      K-1 Maze Loops 3_instruction: Breng me naar het varken! Gebruik het herhaal
        blok.
      K-1 Maze Loops 4_instruction: Breng me naar het varken!
      K-1 Maze Loops 5_instruction: Breng me naar het varken! Gebruik het herhaal
        blok.
      K-1 Maze Loops 6_instruction: Breng me naar het varken! Gebruik het herhaal
        blok.
      K-1 Maze Loops 7_instruction: Breng me naar het varken! Gebruik het herhaal
        blok.
      K-1 Maze Loops 8_instruction: Breng me naar het varken! Gebruik het herhaal
        blok.
      K-1 Maze Loops 9_instruction: Breng me naar het varken!
      K-1 Maze Loops Assessment 1_instruction: 'Test: Gebruik lussen om me naar het
        varken te brengen!'
      K-1 Maze Loops Assessment 2_instruction: 'Test: Gebruik lussen om me naar het
        varken te brengen!'
      K-1 Maze Multi 14_instruction: Test Niveau
      K-1 Maze Multi 15_instruction: Test Niveau
      K-1 Maze Sequence Assessment 1_instruction: |-
        Dit is een test!\r
        Beweeg een kant op,
        en vervolgens de andere kant op om me naar het varken te brengen
      K-1 Maze Sequence Assessment 2_instruction: |-
        Dit is een test!\r
        Beweeg een kant op,
        en vervolgens de andere kant op om me naar het varken te brengen.
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Tekenen iets geweldig! De code wordt opgeslagen
        als een project dat u op elk gewenst moment naar terug kunt keren.
      NEW Course 4 Artist Functions 1_instruction: Kun je met behulp van een lus een
        vierkant tekenen dat 100 pixels lang is?
      NEW Course 4 Artist Functions 10.1_instruction: Gebruik de functies uit de vorige
        puzzels om dit patroon te tekenen.
      NEW Course 4 Artist Functions 10_instruction: Klik op 'bewerken' om  de blokken
        in de functie in te vullen om een 40 pixel vierkant te maken.
      NEW Course 4 Artist Functions 11_instruction: We hebben een nieuwe functie genaamd
        "teken een lijn van vierkanten." Voel je vrij om een kijkje te nemen in de
        functieblok om te zien hoe we het gebouwd hebben. Klik op "Ga" wanneer u bent
        klaar voor de volgende puzzel.
      NEW Course 4 Artist Functions 12_instruction: Gebruik de functie "teken een
        lijn van vierkanten" van de laatste puzzel om dit patroon te tekenen."
      NEW Course 4 Artist Functions 13_instruction: 'Kunt u een ster tekenen met behulp
        van de functie "teken een lijn van vierkanten"? Tip: u dient zich  wellicht
        60 pixels naar voor te verplaatsen en 144 graden te draaien.'
      NEW Course 4 Artist Functions 14_instruction: 'Vrije speeltijd! '
      NEW Course 4 Artist Functions 2_instruction: 'Kun je 3 vierkanten tekenen die
        20 pixels van elkaar vandaan staan? Hint: elk vierkant is 100 pixels groot'
      NEW Course 4 Artist Functions 3_instruction: 'Hier is een nieuw type blok. Het
        heet een "functie blok." Klik op ''Uitvoeren'' om te zien wat het kan doen. '
      NEW Course 4 Artist Functions 4_instruction: 'Gebruik de functie "teken een
        vierkant" om dit patroon te tekenen. Hint: je zal "draai rechts met 120 graden"
        moeten gebruiken na elk vierkant.'
      NEW Course 4 Artist Functions 5_instruction: Hoe wist het blok "teken een vierkant"
        welke opdrachten het uit moest voeren? Klik op 'bewerken' in het functieblok
        "teken een vierkant". De blokken die je ziet zijn samen de definitie van "teken
        een vierkant." Als je klaar bent, klik dan op "Opslaan en sluiten" en dan
        "Start".
      NEW Course 4 Artist Functions 6_instruction: |
        Kun je deze afbeelding tekenen door de "teken een vierkant" functie te gebruiken? Hint: tussen elk vierkant zit 20 pixels.\r
      NEW Course 4 Artist Functions 7_instruction: 'Begin je het gebruik van functieblokken
        te begrijpen? Laten we dit vierkant aanpassen zodat het 200 pixels groot is.
        Hint: klik op "edit" om de functie aan te passen. Vergeet niet om het functie
        scherm te sluiten met "Afsluiten". '
      NEW Course 4 Artist Functions 8_instruction: 'We hebben een nieuwe functie voor
        je gemaakt: "teken een driehoek". Kan je de functie definitie aanpassen om
        de kanten van de driehoek 100 pixels lang te maken?'
      NEW Course 4 Artist Functions 9_instruction: Kan je dit oplossen door slechts
        1 blok toe te voegen?
      NEW Course 4 Artist Functions inspire_instruction: Klik hier om de inspiratie
        afbeelding weer te zien.
      New Course 4 Artist Functions Level 4_instruction: Gebruik de functie "teken
        een vierkant" om dit patroon te tekenen.
      NEW Course 4 Artist Params 1_instruction: Laten we deze functie definiëren om
        een vierkant te tekenen met kanten van 50 pixels. Klik op "edit" om te beginnen.
      NEW Course 4 Artist Params 10_instruction: 'Maak een functie "teken een zeshoek"
        blok met een lengte-parameter. Tip: Dit zesvlak heeft zijden die 100 pixels
        lang zijn. '
      NEW Course 4 Artist Params 11_instruction: Kan je bedenken hoe je deze vorm
        tekent? Bewerk de functie om de "sides" parameter te gebruiken.
      NEW Course 4 Artist Params 12_instruction: |
        Kan je deze tekening afmaken?
        De kanten van alle vormen zijn 100 pixels lang.
      NEW Course 4 Artist Params 12a_instruction: Deze afbeelding lijkt op de vorige.
        Kan je een "rekenen met" lus gebruiken met jouw functie om dit ontwerp na
        te maken?
      NEW Course 4 Artist Params 13_instruction: 'Laten we "draw a polygon" bewerken.
        Het heeft al een "length" parameter. Laten we een "sides" parameter toevoegen.
        Denk eraan, de hoek die je moet draaien voor een vorm is 360 gedeeld door
        het aantal kanten van de vorm. Hint: de omtrek van elke vorm is 200 pixels.
        Weet je nog hoe je vormen even groot kan maken als ze verschillende aantallen
        kanten hebben?'
      NEW Course 4 Artist Params 14_instruction: Bewerk "draw a spiral edge" om de
        "length" en "sides" parameters te gebruiken. Maak dan deze vormen na.
      NEW Course 4 Artist Params 15_instruction: 'Vrij spelen: hier zijn de functies
        die je hebt geschreven, en ook nog wat extra om mee te spelen. Teken iets
        geweldigs! Speel met de pen breedte en kijk wat je daarmee kan doen!'
      NEW Course 4 Artist Params 2_instruction: Maak vanaf nul een "teken een driehoek
        met zijden van 50 pixels" functie
      NEW Course 4 Artist Params 3_instruction: |
        Laten we nu de functie gebruiken om 5 driehoeken op rij te tekenen. Hint: de afstand tussen de driehoeken is steeds 30 pixels.\r
      NEW Course 4 Artist Params 4_instruction: Zie je een verschil tussen deze functie
        blokken? Druk op "Start" om te zien wat er gebeurt.
      NEW Course 4 Artist Params 5_instruction: 'Vevang de ??? in de "length" parameter
        invoer blok. Hint: de vijfhoek heeft kanten van 100 pixels lang. '
      NEW Course 4 Artist Params 6_instruction: Vervang ??? met de juiste getallen
        in de "length" parameter om deze vormen te tekenen. Het vierkant en de driehoek
        hebben allebei kanten van 100 pixels lang. De zeshoek heeft kanten van 75
        pixels lang.
      NEW Course 4 Artist Params 7_instruction: 'Kan je de tekening afmaken? Hint:
        de kanten van elke driehoek zijn 25 pixels groter dan de vorige. De eerste
        driehoek heeft kanten van 25 pixels lang.'
      NEW Course 4 Artist Params 8_instruction: De code voor deze driehoek functie
        is kapot. Kan je de functie bewerken om het te repareren? Maak dan driehoeken
        met lengte 25, 50 en 75.
      NEW Course 4 Artist Params 9_instruction: 'Klik "edit" om de functie definitie
        van "draw a square" te bewerken en voeg een parameter toe. De functie heeft
        een "length" parameter nodig, net als de driehoek. Teken nu 3 vierkanten:
        25, 50 en 75 pixels groot, telkens 100 pixels uit elkaar.'
      NEW Course 4 Artist Params inspire_instruction: "Vrij spel inspiratie. Je hebt
        alles geleerd dat je nodig hebt om een patroon als dit te maken! Als dit je
        inspireert, probeer dan ook zoiets te maken. Of bedenk zelf iets heel anders.\\r\n\\r\nWil
        je weten hoe wij ons patroon hebben gemaakt? "
      NEW Course 4 Artist Vars 1.5_instruction: 'Bekijk de code. Kan je zien hoe de
        "set length" blok en de "length" blok samen werken? Klik op "start" om het
        in actie te zien. '
      NEW Course 4 Artist Vars 12_instruction: Maak het algoritme van het vorige niveau
        opnieuw en teken een vijfhoek met kanten van 150 pixels lang.
      NEW Course 4 Artist Vars 2.5_instruction: 'Bekijk de code. Kan je zien hoe de
        "set length" blok en de "length" blok samen werken? Klik op "start" om het
        in actie te zien. '
      NEW Course 4 Artist Vars 2_instruction: 'Sleep een getal blok naar de "zetten
        length" blok om een set 50 pixel driehoeken te tekenen. '
      NEW Course 4 Artist Vars 4 5_instruction: Geweldig gedaan bij de vorige puzzel,
        laten we het nog eens proberen. Laten we deze keer dit coole patroon met 60
        pixel zeshoeken maken.
      NEW Course 4 Artist Vars 4_instruction: 'Laten we dat opnieuw proberen. Kan
        je de lengte variabele "zetten" om dit leuke patroon met zeshoeken te maken?
        Hint: het is een veelvoud van 10.'
      NEW Course 4 Artist Vars 6_instruction: |
        Teken dit patroon door de "length" variabele naar de juiste plekken te slepen. Je moet "length" ook de juiste waarde geven (Hint: het is een veelvoud van 10). \r
        \r
        Zie je dat je waarde van "length" maar een keer hoeft te "zetten", en dat de code overal de juiste waarde gebruikt?\r
        \r
        \r
      NEW Course 4 Bee For Loops 1_instruction: Gebruik een lus om de nectar uit iedere
        bloem te verzamelen.
      NEW Course 4 Bee For Loops 10_instruction: Gebruik je lusvariabele "teller"
        om te regelen hoever je horizontaal beweegt.
      NEW Course 4 Bee For Loops 10a_instruction: Klaar voor een uitdaging? Gebruik
        je kennis van lussen om dit probleem op te lossen. Je moet het misschien wel
        een aantal keer proberen om de juiste oplossing te vinden.
      NEW Course 4 Bee For Loops 11_instruction: Kan je de lusvariabele gebruiken
        om te bewegen en de nectar te verzamelen?
      NEW Course 4 Bee For Loops 2_instruction: Voeg de juiste blokken toe om de bij
        alle nectar te laten verzamelen. Kijk hoeveel blokken je nodig hebt voor deze
        puzzel! Bij de volgende puzzel leren we hoe dat eenvoudiger kan.
      NEW Course 4 Bee For Loops 3_instruction: 'Aha, de "rekenen met" lus maakt dit
        een stuk makkelijker! Alles dat je nodig hebt is er al. Bekijk het eens om
        te zien hoe het in elkaar steekt en klik dan op "start" om het uit te voeren. '
      NEW Course 4 Bee For Loops 4 4_instruction: Nu moeten we "counter" keer naar
        voren gaan, en "counter" keer nectar verzamelen. Kan je twee "herhaal" lussen
        gebruiken om dit op te lossen?
      NEW Course 4 Bee For Loops 4_instruction: 'Vervang de ??? in de "rekenen met"
        lus met de meeste nectar die de bij moet verzamelen. '
      NEW Course 4 Bee For Loops 5 5_instruction: Snap je de "rekenen met" lus al
        een beetje? Laten we de bij helpen om de rest van de nectar te verzamelen.
      NEW Course 4 Bee For Loops 5_instruction: Je kunt ook de voor-lus gebruiken
        om af te tellen. Probeer deze nectar te verzamelen door af te tellen van 5
        naar 1 per 1.
      NEW Course 4 Bee For Loops 6_instruction: Het laatste getal in de "rekenen met"
        lus heet "increment". Elke keer dat de lus wordt uitgevoerd wordt "counter"
        opgehoogd met de waarde van "increment". Probeer deze bloemen te verzamelen
        met een "increment" van 2.
      NEW Course 4 Bee For Loops 7_instruction: Krijg je lussen onder de knie? Deze
        opdracht lijkt op de vorige, maar je moet 3, 6, 9, 12, 15 nectar pakken. Je
        krijgt vast wat code, behalve voor de getallen in de lussen. Laten we nectar
        verzamelen!
      NEW Course 4 Bee For Loops 8_instruction: |
        Je snapt het! Wat moet "increment" zijn om 3, 6, 9, 12, 15 nectar te verzamelen?\r
      NEW Course 4 Bee For Loops 9_instruction: Wanneer je lus aftelt wordt de stapwaarde
        in iedere lus afgetrokken van je tellervariabele. Wat zou je staalharde moeten
        zijn om 9, dan 6 en dan 3 nectar te verzamelen?
      NEW Course 4 Bee For Loops 95_instruction: Kijk goed naar elk deel van de "rekenen
        met" lus die je net hebt gemaakt. Kan je bedenken welke getallen je moet verdubbelen
        om dit puzzel op te lossen? Waarom werkt dit?
      NEW Course 4 Play Lab Params 11_instruction: 'Het is vrije speel tijd! Veel
        plezier met alle blokken in je gereedschapskist. '
      NEW Course 4 Play Lab Params 5 5_instruction: Laten we dat opnieuw proberen,
        maar dan met minder hulp. Wat moet je nu aanpassen om de spelers te laten
        patrouilleren (rondlopen)?
      NEW Course 4 Play Lab Vars 4 5_instruction: Wat denk je dat deze code zal doen?
        Druk op "Start" om te zien wat er gebeurt.
      NEW Course 4 Play Labs For Loops 7a_instruction: Kan je, met behulp van wat
        je tot nu toe geleerd hebt, de dinosaurus een stap vooruit laten zetten elke
        keer wanneer de pinguïn telt?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: 'Het is vrije speel
        tijd! Veel plezier met alle blokken in je gereedschapskist. '
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Uitdaging: Hoe zou je de "for-lus"
        gebruiken om elke speler rond te laten gaan en hun spelernummer te laten zeggen,
        om dan te verdwijnen van het scherm? '
      New Play Lab Project_instruction: Maak uw eigen verhaal of spel! De code is
        opgeslagen als een project waar je op elk gewenst moment naar kunt terugkeren.
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: Het is een slecht idee om tegen een Creeper
        aan te botsen. Beweeg voorzichtig langs de Creepers om veilig je huis te bereiken.
      Overworld Chop Tree_instruction: Hout is een zeer belangrijke grondstof. Veel
        dingen zijn ervan gemaakt. Loop naar de boom en gebruik het \“vernietig blok\”-commando
        om hem om te hakken.
      Overworld Chop Trees_instruction: We moeten een huis bouwen voordat de zon ondergaat.
        Voor een huis is veel hout nodig. Hak alle drie bomen om.
      Overworld Free Play 20x20_instruction: Gefeliciteerd! Je hebt al onze puzzels
        voltooid! Nu kun je wat je hebt geleerd gebruiken om te delven en te bouwen,
        om zo iets unieks te maken.
      Overworld Free Play_instruction: Bepaal zelf hoe je de omgeving gebruikt. Kies
        zelf wat je maakt.
      Overworld House Frame - A_instruction: Laten we ons eigen huis bouwen! Deze
        plek ziet er goed uit. Bouw een basis op deze aarde blokken.
      Overworld House Frame - C_instruction: Laten we ons eigen huis bouwen! Deze
        plek ziet er goed uit. Bouw een basis op deze aarde blokken.
      Overworld House Frame B_instruction: "één muur is af, laten we nu de rest van
        het huis bouwen volgens jouw plattegrond! Je moet hier vaak hetzelfde herhalen."
      Overworld House Frame B2_instruction: "één muur is af, laten we nu de rest van
        het huis bouwen volgens jouw plattegrond! Je moet hier vaak hetzelfde herhalen."
      Overworld House Frame C_instruction: "één muur is af, laten we nu de rest van
        het huis bouwen volgens jouw plattegrond! Je moet hier vaak hetzelfde herhalen."
      Overworld House Frame Chosen_instruction: Bouw de rest van je huis met welk
        materiaal je zelf wilt. Het commando "herhalen" komt hier handig van pas.
      Overworld House Frame_instruction: Laten we ons eigen huis maken! Dit lijkt
        een geschikte plek. Bouw een omtrek op de aardeblokken.
      Overworld Minecart Track_instruction: Je bent terug aan het oppervlak met veel
        grondstoffen uit de mijnen. Nu gaan we een spoor bouwen langs het zandpad
        dat naar je huis loopt. Eerst moeten we het pad vrijmaken. Volg het pad en
        verwijder de bomen.
      Overworld Move to Sheep_instruction: Voeg een tweede "beweeg vooruit"-commando
        toe om de schapen te bereiken.
      Overworld Place Wall_instruction: Elk huis begint met een muur. Bouw het eerste
        deel van je huis door de opdrachten "plaats" en "beweeg vooruit" in de herhalingsloop
        te plaatsen.
      Overworld Plant Crops_instruction: Het is slim om vooruit te denken. Plant gewassen
        aan beide kanten van het water, zodat je later geen honger krijgt.
      Overworld Powered Minecart_instruction: Goed gedaan! Je verzamelde veel grondstoffen
        en bouwde een bescheiden huis. Plaats nu een spoor van de rand van de plattegrond
        naar de deur van je huis.
      Overworld Shear Sheep_instruction: Tijd om schapen te scheren! Gebruik het commando
        "knippen" om wol van beide schapen te krijgen.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Met functies kan je nieuwe blokken definiëren!
        We hebben de blokken om een vierkant te tekenen in een functie met de naam
        "teken een vierkant". Kan je de "teken een vierkant" functie gebruiken om
        de brillenglazen te tekenen? De vierkanten staan 75 pixels uit elkaar.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: |
        Purple flowers may have either 1 or 0 nectar, but
        you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      Ryan - 4-5 Bee Conditionals 2_instruction: De bij wil op dit moment alleen nectar.
        Niet alle objecten zijn bloemen, dus kijk onder IEDERE WOLK om te zien of
        hij een bloem verbergt. Dan kun je nectar verzamelen.
      Ryan - Bee Conditionals_instruction: |
        De bij wil nu alleen nectar.
        Niet alles is een bloem, dus kijk onder ELKE WOLK of daar een bloem is verstopt. Zo ja, verzamel dan de nectar.
      Ryan Test Locked Blocks_instruction: Hier is een functie genaamd "patrol". Bewerk
        hem om de kat eerst 400 pixels omhoog en dan 400 pixels omlaag te laten bewegen.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: Eikel! Eikel! Eikel! Gebruik een "als" blok om me daar
        met het minste aantal blokken te brengen.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: OK, laten we dat om te oefenen nog eens doen - dit is
        niet heel anders, maar let op de muur!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: Het "als-anders" blok test een voorwaarde en doet dan
        het ene OF het andere. Probeer dit nieuwe blok te gebruiken om me bij de eikel
        te brengen.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: Nog een oefening met het "als-anders" blok, kun je het
        in een keer goed doen?
      scrat 20_instruction: Kun je slechts 3 blokken toevoegen om me te helpen een
        ingewikkelder doolhof op te lossen? Als je het goed doet kan ik elk kronkelig
        pad lopen, ongeacht de lengte. Schiet op! Het ijs smelt!
      SpecialFrozenLevel_instruction: Je bent nu officieel een meesterkunstenaar geworden!
        Maak een winterwonderland.
      Standalone_Artist_1_instruction: Welkom bij de kunstenaar! Probeer eerst eens
        om een eenvoudig vierkant te tekenen door gebruik te maken van het draai rechts
        blok en het ga vooruit blok. Elke zijde moet 100 pixels lang zijn.
      Standalone_Artist_2_instruction: Teken deze diamant met hoeken van 120 en 60
        graden en zijden van 150 pixels.
      Standalone_Artist_3_instruction: Kan je deze zeshoek tekenen met zijden die
        100 pixels lang zijn en hoeken van 60 graden?
      Standalone_Artist_4_instruction: Je hebt nu een nieuw blok om mee te spelen,
        een herhaal blok. Die zal een aantal opdrachten herhalen. Wat gebeurt er als
        je deze opdrachten 6 keer herhaalt?
      Standalone_Artist_5.5_instruction: 'Merk op hoeveel eenvoudiger de code van
        de diamant geworden is door een herhaal blok te gebruiken. Je kan alles 12
        keer herhalen om de bloem te tekenen. Hint: je moet een hoek van 30 graden
        maken na het herhaal blok voor de diamant zodat je niet telkens op dezelfde
        plaats een diamant tekent.'
      Standalone_Artist_5_instruction: Hoeveel keren moet je de diamant tekenen om
        deze bloem te tekenen?
      Standalone_Artist_6_instruction: 'Herhaal de code voor de zeshoek 6 keer om
        deze tekening te maken. Hoeveel graden moet je elke keer draaien? Tip: verdeel
        het totaal aantal graden in een cirkel door het aantal keren dat je moet herhalen.'
      Standalone_Artist_7_instruction: 'Een functie is een ander hulpmiddel waarmee
        je kan vermijden dat je telkens dezelfde code moet herhalen. Deze functie
        tekent en bloem. Je kan die elke keer gebruiken als je een bloem moet tekenen.
        Gebruik deze functie en het nieuwe spring blok om deze bloemen te tekenen.
        Tip: de bloemen staan 150 pixels van elkaar.'
      Standalone_Artist_8_instruction: Hier is een functie "Draw a shape" die zeshoeken
        tekent. Voer de code uit om te zien wat ze doet en experimenteer dan maar
        met de functie om te zien wat er gebeurt. Kan je zelf een functie maken die
        vierhoeken, driehoeken of achthoeken tekent?
      Standalone_Artist_9_instruction: Je mag nu om het even welke figuur tekenen
        die je zelf wil! Je hebt zelfs een lege functie waarmee je kan tekenen wat
        je zelf wil!
      Standalone_Artist_v2_instruction: Welkom bij de kunstenaar! Probeer eerst eens
        om een eenvoudig vierkant te tekenen door gebruik te maken van het draai rechts
        blok en het ga vooruit blok. Elke zijde moet 100 pixels lang zijn.
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Instructies
      U2 frequency random sub_instruction: Instructies
      U2 vigenere cipher_instruction: Instructies
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: 'Je gaat lussen en willekeurige
        getallen gebruiken om een afbeelding te maken van een sterrenhemel, vergelijkbaar
        met het voorbeeld. We hebben je alvast wat code gegeven om de grond en de
        hemel te maken (twee grote stippen). Je moet in deze opdracht code toevoegen
        om de sterren, het gras en de maan te maken. Alle effecten krijg je door slim
        gebruik te maken van punten, lijnen en kleuren. Om te beginnen, voer de stappen
        uit die worden voorgesteld in het bijbehorende werkblad. '
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add text input UI elements for name and
        age. (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: Sjabloon
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: Onder sommige van deze blokken zit lava
        verstopt. Dat moet je bedekken voordat je verder kunt. Een als-opdracht komt
        hier goed van pas. Voeg op de juiste plaats een "beweeg vooruit"-opdracht
        toe om deze blokken te delven.
      Underground If Statements_instruction: Nu wordt het een beetje lastig. Delf
        3 redstone, maar val niet in de lava. Gebruik een "als"-instructie om keien
        te plaatsen op de lava die je ontdekt.
      Underground Iron_instruction: Het is niet slim om in gesmolten lava te lopen.
        Plaats keien om een brug te maken. Delf vervolgens minstens twee blokken ijzer.
      Underground Mine in a Circle_instruction: Verzin een manier om 5 blokken diamant
        en 7 blokken redstone te verzamelen! Probeer een herhaalopdracht in een herhaalopdracht
        te plaatsen om in een vierkant te lopen.
      Underground Mining Coal_instruction: De kostbaarste grondstoffen vind je onder
        de grond, maar daar is het donker. Plaats minstens 2 fakkels en delf minstens
        2 blokken steenkool.
      Underground Test Level_instruction: Verzamel alle mineralen!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
