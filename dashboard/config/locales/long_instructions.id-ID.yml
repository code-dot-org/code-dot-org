---
id-ID:
  data:
    long_instructions:
      2-3 Artist 1 new: Hai, saya seorang seniman. Anda dapat menulis kode untuk membuat
        saya menggambar apa saja. Gunakan beberapa blok untuk membuat saya menggambar
        garis abu-abu dalam gambar. (Setiap garis panjangnya 100 piksel)
      2-3 Artist 11: 'Give the stop sign a border by making an octagon with 100 pixels
        sides. '
      2-3 Artist 12: "Create a circle to finish the eyeball! \n\nIf the artist turns
        1 degree with each loop, how many times do you need to repeat the code to
        draw a circle? "
      2-3 Artist 2 new: This house has a half-finished wall. Each side is 100, but
        the half-finished wall is only 50. Complete the wall.
      2-3 Artist 3.4: The jump block moves the artist without drawing. Draw the dashed
        line using both the `jump forward` and `move forward` blocks. Each line is
        50 pixels long.
      2-3 Artist 3new: "The red hat is 100 pixels tall. Finish drawing a black hat
        that is 70 pixels shorter. \n\n_(Note: The width of each hat is 50 pixels.)_"
      2-3 Artist 4: Bantu saya menyelesaikan rumah untuk kucing ini.
      2-3 Artist 6: "This house needs a roof! Draw the triangle.  \n\nHint: all three
        sides are the same length.\n\n<img src=\"https://images.code.org/8b10073fd1a7fe53b4da33ec2229894b-image-1468018903891.gif\"
        width=\"300\"/>"
      2-3 Artist 7: "Finish drawing the last set of windows on the school so that
        everyone in class can see outside. \n\nThe sides of each square window pane
        are 25 pixels long. "
      2-3 Artist 8: "Time to build a barn!\n\nMake the rooms for each animal by splitting
        the barn into 2 equal-sized squares. \n\nHint: The rectangle is 200 pixels
        wide and 100 pixels tall.\n\nThere are many different ways to solve this puzzle."
      2-3 Artist 9 NEW: Selesaikan layang-layang ini
      2-3 Artist Assessment 1: "**Assessment:** Finish drawing the last tooth. It
        is 25 pixels wide and 25 pixels tall."
      2-3 Artist Debugging 1: "This hat should only be 50 pixels wide. \nCan you fix
        it?\n\n<br/>"
      2-3 Artist Debugging 10: "The direction pad on my game controller is too narrow.
        \n\nCan you make it wider by 10 pixels?\n\nTry running the code first to see
        what's wrong."
      2-3 Artist Debugging 11: |-
        My snowflake is falling apart!

        Can you figure out what's going wrong?
      2-3 Artist Debugging 2: "This code for the cat's whiskers is wrong. \n\nFix
        this code to draw whiskers that are all the same length."
      2-3 Artist Debugging 3: "My boat has a hole! \n\nWhat do you need to fix to
        make the ends meet?"
      2-3 Artist Debugging 5: "The code that we have for the leg and foot is wrong.
        \n\nCan you fix it?"
      2-3 Artist Debugging 6: |-
        Looks like I'm sitting on a chair that’s missing a leg!

        Edit the code to draw the last leg.
      2-3 Artist Debugging 7: |-
        Looks like the C in code is drawn backwards!

        Can you make it look like a C again?
      2-3 Artist Debugging 8: |-
        My teacher says that I should finish what I start!

        Help me finish my pinwheel. Can you figure out what's wrong?
      2-3 Artist Debugging 9: |-
        Something is off!

        The code for this stem is wrong. Can you figure out how to get the artist to trace the stem the right way?
      2-3 Artist Debugging Assessment 1: "**Assessment:** \nWhy does this square end
        up being 75 pixels too small on each side?  \n\nWhere does the code go wrong?"
      2-3 Artist Free Play: Permainan bebas! Gambarlah apa pun yang Anda suka.
      2-3 Artist Functions 1: "\"Me zombie artist. Me love drawing!\" \n\nHelp the
        zombie draw square glasses.  \n\nThe bridge between the glasses is 25 pixels
        shorter than the width of the squares, which is 100 pixels."
      2-3 Artist Functions 10: "**Freeplay:** Here are two functions, one to draw
        a big gear and one to draw a small gear.  \n\nUse them to draw the inside
        of a machine!"
      2-3 Artist Functions 11: "We've renamed the `draw a square` function to `draw
        a hexagon`, but it's still giving us squares!  \n\nCan you modify the `draw
        a hexagon` function to draw a hexagon with 50 pixel sides? \n\nDraw the image
        using the new function!"
      2-3 Artist Functions 11.5: "Here's that same `draw a hexagon` function. \n\nWhat
        happens if you loop the main program 6 times, turning 60 degrees each time
        you loop?"
      2-3 Artist Functions 12: "Functions are really great for drawing complex things
        multiple times. \n\nCan you use the `draw a flower` function to fill the rest
        of the planter box?\nThe plants are all 100 pixels apart."
      2-3 Artist Functions 2: "Functions let you define new blocks! \n\nWe've moved
        the blocks needed for drawing a square into a function called `draw a square`.
        This time, use the `draw a square` function to create the glasses. \n\nThe
        squares are 75 pixels apart."
      2-3 Artist Functions 3: "Edit the function to draw a square with a side length
        of 115 to draw the bigger glasses. \n\nThe squares are now 45 pixels apart."
      2-3 Artist Functions 4: Now, put the function inside of a loop to draw these
        three squares.
      2-3 Artist Functions 9: "**Freeplay:** Here is a snowflake function. Experiment
        with it to create a winter scene! \n\nThis is a free play level, so there
        is no puzzle to solve. Have fun!"
      2-3 Artist Loops New 1: |-
        Let's draw this robot's head! Can you make a square with sides that are 100 pixels?

        <br/>
      2-3 Artist Loops New 10: Now let's connect a bunch of V's together in a loop.
      2-3 Artist Loops New 11: "Time to make something snazzy! \n\nRebuild the code
        from the last puzzle, but this time, add a left turn of 30 degrees inside
        the loop. Now, repeat it 24 times instead of 8."
      2-3 Artist Loops New 12: 'Draw a diamond with sides of 100 pixels. '
      2-3 Artist Loops New 13: "We are going to start you with some code (in grey)
        to make one diamond. \n\nLoop the grey code to create a fun pattern!"
      2-3 Artist Loops New 14: "Play around with the code for the diamond and see
        what other patterns you can make. \n\nTry changing how many degrees you turn
        and how many times you loop."
      2-3 Artist Loops New 15: |-
        Now, draw anything you like!
        <br/><br/>
      2-3 Artist Loops New 2: |-
        Here is the same puzzle that we just solved, but this time, we can only use one `move forward` block and one `turn` block this time.

        Can you use a `repeat` to solve this puzzle?
      2-3 Artist Loops New 9: Draw a simple V (where both sides are 50 pixels) to
        complete the arrow.
      2-3 Artist Nested Loops 1: |-
        You've used loops to draw shapes before, but now we're going to put loops inside of other loops!

        Put a `repeat` block around this whole stack of code to draw the pattern.

        <br/>
      2-3 Artist Nested Loops 10: Ulangi kode ini sebanyak 12 kali untuk menyelesaikan
        pola ini.
      2-3 Artist Nested Loops 11: Loop this code 4 times to complete the pattern,
        turn 90 degrees after each circle.
      2-3 Artist Nested Loops 12: Ulangi kode ini sebanyak 12 kali untuk menyelesaikan
        latihan ini.
      2-3 Artist Nested Loops 2: "Now loop the triangle 6 times. \n\nAfter each triangle,
        you'll need to turn 60 degrees before drawing the next."
      2-3 Artist Nested Loops 3: "You'll need to loop your triangle 12 times to draw
        this pattern. \n\nDivide the number of degrees in a circle (360) by the number
        of shapes you're drawing (12) to figure out how far to turn after each shape."
      2-3 Artist Nested Loops 4: |-
        Loop this diamond 12 times to draw a flower!

        Note: We'll use the same angle to loop 12 diamonds as we did for 12 triangles.\
        How much do you need to turn after each shape?
      2-3 Artist Nested Loops 5: "Fill in this building's windows using a nested loop.
        \n\nThe windows are 20 pixels long and 20 pixels apart."
      2-3 Artist Nested Loops 6: "This dinosaur has 8 spikes running up its tail.\n\nEach
        spike is 30 pixels long. \n\nLoop the triangle 8 times, but make sure to jump
        forward after each one!"
      2-3 Artist Nested Loops 7: "Loop this triangle 10 times to draw the sun. \n\nYou'll
        need to move and turn after each triangle. \n\nYou can figure out how much
        to turn by dividing the number of degrees in a circle by the number of triangles
        that make it up."
      2-3 Artist Nested Loops 8: "Now let's add some grass to our picture. \n\nEach
        tuft of grass is 50 pixels apart."
      2-3 Artist Nested Loops 9: "We'll finish this picture by adding our flower.
        \n\nLoop the diamond 12 times to draw the flower."
      2-3 Artist Nested Loops Free Play: Permainan bebas, gambarlah sesuatu yang menarik
        dengan perulangan bertingkat.
      2-3 Bee Conditionals 11: "I wonder what's out there!\n\nHelp me fly around the
        yard and collect nectar only from the flowers that have some. "
      2-3 Bee Conditionals 13: |-
        There's a lot happening here!

        Use what you've learned to collect all of the nectar and then make the honey.
      2-3 Bee Conditionals 14: |-
        Let's put everything together!

        Use what you've learned to help me collect nectar only from flowers that have it, using as few blocks as possible.

        Don't forget to make honey at the end.
      2-3 Bee Conditionals 15: "This stair step pattern should look familiar.  \n\nCan
        you collect nectar only from the flowers that have some, using as few blocks
        as possible?"
      2-3 Bee Conditionals 2: "I'm a hungry bee! \n\nHelp me collect all of the nectar
        from the flowers using the fewest number of blocks."
      2-3 Bee Conditionals 3: "Look at all of that nectar!\n\nHelp me collect the
        nectar and make the honey using as few blocks as you can.  "
      2-3 Bee Conditionals 5: "These magic purple flowers change!\n\nEach time you
        try the puzzle, purple flowers can have either 1 nectar or none at all...but
        you won't know the number until you run the code! \n\nBe careful not to collect
        nectar from a purple flower if it doesn't have any. \nYou must first check
        if the nectar is equal to 1 using the `if nectar` block."
      2-3 Bee Conditionals Assessment 1: |-
        **Assessment:** Collect all of the nectar.\
        Be careful not to try to collect nectar from a purple flower if it doesn't have any.
      2-3 Bee Debugging 1: |-
        These blocks are really bugging me!

        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 10: "This puzzle is making me loopy! \n\nFix the error(s)
        to collect all of the nectar and make all of the honey."
      2-3 Bee Debugging 2: |-
        Can you find the problem here?

        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 3: |-
        Ooh, this one stings!

        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 5: "That flower looks tasty! \n\nFix the error(s) to collect
        all of the nectar.\\\nYou can now use both run and step."
      2-3 Bee Debugging 6: |-
        What a sweet challenge!

        Fix the error(s) to collect all of the nectar.
      2-3 Bee Debugging 9: |-
        "Bee" patient with this one!

        You will need to fix a couple of things in this program to collect all of the nectar and make all of the honey.
      2-3 Bee Debugging Assessment 1: |-
        **Assessment:**  Now it's time to show what you know!

        Fix the error(s) to collect all of the nectar and make all of the honey.
      2-3 Bee Functions 1: "Fungsi adalah blok kode yang melakukan suatu tugas.  \\\\
        r \n\\\\ r \nGunakan `mendapatkan 2 nectar` fungsi untuk mengumpulkan nektar
        dari bunga masing-masing."
      2-3 Bee Functions 10: "Purple flowers change between either 1 or 0 nectar each
        time you run the puzzle.   \n\nCreate a function that collects nectar only
        from purple flowers that have nectar."
      2-3 Bee Functions 2: "Functions are blocks of code that perform a task.  \n\nUse
        the `get 5` function to get 5 nectars at a time."
      2-3 Bee Functions 4: "The `move and get nectar` function turns the bee, collects
        nectar, and then returns the bee to where it started.  \n\nUse the function
        to collect all of the nectar."
      2-3 Bee Functions Assessment 1: "**Assessment:** Use the given function to collect
        nectar from each flower."
      2-3 Bee Functions Assessment 2: "**Assessment:** Create a function to turn,
        move forward and make 3 honey, then return the bee to where it started and
        turn back."
      2-3 Bee Loops 1: |-
        Those flowers look tasty!

        Collect nectar from each of the flowers using the fewest blocks possible.
      2-3 Bee Loops 13: "**Assessment:** Collect all of the nectar using the fewest
        blocks possible."
      2-3 Bee Loops 3A: Bisakah Anda menggunakan perulangan untuk mengumpulkan semua
        nektar itu?
      2-3 Bee Loops 3B: Now use the `repeat` block to collect all of the nectar and
        make all of the honey.
      2-3 Bee Loops 4: |-
        Such a busy bee!

        Help Bee collect all of the nectar and make all of the honey with the fewest blocks possible.
      2-3 Bee Loops 4A: "How many times can loops help you in this puzzle?  \n\nLoops
        are your friend! Use a few of them to complete this puzzle with the fewest
        blocks possible."
      2-3 Bee Loops 5: "The shape of this path is different from the others. \n\nCan
        you collect all of the nectar using as few blocks as possible?"
      2-3 Bee Loops 7: "What a beautiful field of flowers!   \n\nHelp the bee visit
        each one.\n\nCan you find a way to do it with fewer than 7 blocks?"
      2-3 Bee Loops 8: "These purple flowers have different amount of nectar each
        time you run the puzzle. \n\nUse the `while nectar` loop to collect all of
        the nectar. \n\nThis loop will run as long as the condition is true, in this
        case `nectar > 0`."
      2-3 Bee Loops Assessment 1: "**Assessment:** Use a `while` loop to collect all
        of the nectar from these flowers."
      2-3 Maze 1: "Can you help me catch the naughty pig? \n\nStack a couple of `move
        forward` blocks below the `when run` block and press \"Run\". "
      2-3 Maze 12: |-
        Suddenly, a magical block appears!  With the `repeat` block, you can loop code over and over.

        Can you get to the pig by creating a loop that uses only one `move forward` block inside of a `repeat`?
      2-3 Maze 13: Get me to the pig! You can only use one `move forward` block this
        time
      2-3 Maze 15: In this puzzle, two `repeat` loops will help you get to the pig
        with the fewest number of blocks!
      2-3 Maze Loops 18: "Get me to the sunflower using the fewest blocks possible!
        \ \n\nTry using one `repeat` loop inside of another to cut down on the amount
        of code you need."
      2-3 Maze Loops 19: "Let's take this to another level! \n\nUse loops to get me
        to the sunflower with the fewest loops possible."
      2-3 Maze Loops Assessment 1: "**Assessment:**  Get me to the sunflower using
        only 5 blocks! "
      4-5 Artist 1: 'Help me finish drawing my box. (Each line is 300 pixels long) '
      4-5 Artist 11: "Complete the green lines.  \n\nThe lines are 300 pixels long
        and 15 pixels apart."
      4-5 Artist 2: Loop this code using the `repeat` block to complete the square.
      4-5 Artist 3: "This rectangular flower bed has a perimeter of 600.\\\nThe long
        side has a length of 200. \n\nDraw the rectangle using as few blocks as possible."
      4-5 Artist 3.5: "Coba cari tahu apa yang terjadi jika kamu\nmenjalankan kode
        ini ( atau hanya dengan menekan \"run\" dan coba itu). \\\r\n\\\r\nselanjutnya,
        ulangi \nkodenya sampai menggambarnya selesai!"
      4-5 Artist 4: "Berapa derajat berada di sebuah lingkaran?  \\\\ r \n\\\\ r \nloop
        \nyang blok untuk membuat  sebuah lingkaran warna."
      4-5 Artist 5: What can we replace "???" with to make sure that the zombie completes
        this drawing using the loop provided?
      4-5 Artist 6: This equilateral triangle has angles of 60, 60, and 60 degrees.
        Each side is 200 pixels. Complete the drawing.
      4-5 Artist 7: "This right triangle has angles of 30, 60, and 90 degrees.  The
        slanted side's length (length of the hypotenuse) is 200 pixels. \n\nComplete
        the drawing."
      4-5 Artist 8: "The halfway line on a soccer field is _perpendicular_ to the
        sidelines.\\\nThis rectangle has a perimeter of 800 pixels total, and it is
        240 pixels long. How tall is it?   \n\nDraw the bounds and the halfway line."
      4-5 Artist 9: "Draw the right half of this image so that the design is symmetrical.
        \nThe triangles are equilateral and have sides that are 50 pixels long."
      4-5 Artist Assessment 1: "**Assessment:** Use a loop to draw the equilateral
        triangle. Each side is 300 pixels."
      4-5 Artist Free Draw 1: Bebas Menggambar! Gambar apapun yang menginspirasi kamu
        untuk berkarya.
      4-5 Artist Patterns 1: |-
        Draw this square using a loop.

        Each side is 20 pixels long.
      4-5 Artist Patterns 10: "This code draws two rows of hexagons - loop the whole
        thing 4 times to draw the whole honeycomb. \n\nYou'll need to jump back 120
        pixels in your outermost loop to make sure the artist doesn't draw off the
        screen."
      4-5 Artist Patterns 11: How many times do you need to loop this to draw a half
        circle?
      4-5 Artist Patterns 12: "If you create another loop like this one, but turn
        left instead of right, what happens? \n\nCan you repeat all of that to draw
        this wave?"
      4-5 Artist Patterns 13: "Now let's loop that whole thing four times to create
        this picture frame. Watch out for the corners - you can't just turn 90 degrees!
        \n\nIf looping a 3 degree turn 60 times makes a half circle, which of these
        blocks of code will make an additional quarter circle for the corners?"
      4-5 Artist Patterns 2: "If you place your square loop inside another loop, we
        call that a nested loop. \n\nWhat do you need to add as an outer loop to make
        sure all 15 squares line up next to each other?"
      4-5 Artist Patterns 3: Now let's go one level deeper! We've nested that whole
        block of code into another loop, but you need to get the artist back in place
        to draw the next line. Which of these code blocks can you place at the end
        of the outermost loop to draw the whole grid?
      4-5 Artist Patterns 4: "This diamond has 50 pixel sides and angles of 120 and
        60 degrees. \n\nUse a loop to draw it."
      4-5 Artist Patterns 5: "Repeat this code to make a row of 6 diamonds. \n\nNotice
        that we changed our diamond code to repeat 3 times instead of 2 - why do you
        think that is?"
      4-5 Artist Patterns 6: How many times do you need to repeat this block to draw
        the full grid of diamonds?
      4-5 Artist Patterns 7: Mari kita mengubah kode dari teka-teki terakhir untuk
        membuat pola ini lebih rumit. Perhatikan bagaimana belah ketupatnya bertumpuk
        sekarang, cobalah mengubah "melompat mundur" pertama dari 100 menjadi 50 (sejauh
        setengahnya) - sekarang sejauh manakah sang seniman harus melompat di "melompat
        mundur" kedua?
      4-5 Artist Patterns 8: Use a loop to draw this hexagon with 40 pixel sides and
        60 degree angles.
      4-5 Artist Patterns 9: "Now repeat this code 3 times and draw the whole row.
        \n\nEach hexagon is 80 pixels wide from the furthest points left to right."
      4-5 Artist Patterns 9.5: "Let's loop this code to draw two rows of hexagons.
        \n\nNotice how our second row is shifted to the right."
      4-5 Artist Patterns Free Play: Free play - try your hand at making a pattern
        of your own!
      4-5 Bee Conditionals 1: "This cloud is blocking my view! \n\nCheck to see if
        there's a flower under the cloud, and only get nectar if there's a flower.\\\nBe
        careful, it can change!"
      4-5 Bee Conditionals 2: "More clouds! \n\nCheck underneath every cloud to see
        if it is hiding a flower before you get nectar.  \n\nRemember: Not all clouds
        hide the same thing!"
      4-5 Bee Conditionals 4: "Sometimes this cloud covers a flower, and sometimes
        it covers a honeycomb! \n\nUse the `if/else` block to collect nectar only
        if it is a flower.\\\nElse, make honey (because it is a honeycomb)."
      4-5 Bee Conditionals 5: |-
        There will be either a flower or a honeycomb under each of those clouds!

        Use the `if/else` block to collect nectar if there is a flower.
        Otherwise, make honey (because there is a honeycomb).
      4-5 Bee Conditionals 6: "I am not sure how much nectar this flower has, but
        I know it has either 1, 2, or 3 nectar. \n\nCombine the conditional blocks
        (`if` and/or `if/else`) to only get as much nectar as the flower has. \n\nRemember,
        the amount of nectar can change each time you run the puzzle!"
      4-5 Bee Conditionals 7: "These flowers can have 3, 2, or 1 nectar. \n\nComplete
        the `check purple flower` function and use it to collect all of the nectar
        at the flowers."
      4-5 Bee Conditionals 8: "Write the function for `check flower make honey`. \n\nYour
        function should check if the purple flower has 3, 2, or 1 nectar and get all
        of the nectar. \nThen, move forward and make honey."
      4-5 Bee Conditionals Assessment 1: "**Assessment:** This cloud is either hiding
        a flower with one nectar or a honeycomb that needs one honey.  \n\nComplete
        the `get nectar or make honey` function, then call it to collect the nectar
        or honey. "
      4-5 Bee Debugging 1: "These blocks are really bugging me. \n\nCan you fix them?"
      4-5 Bee Debugging 6: "The purple flower has a different amount of nectar each
        time you run the puzzle. \n\nFix the blocks to get all of the nectar from
        the flower each time."
      4-5 Bee Debugging Assessment 1: "**Assessment:** Fix the code."
      4-5 Bee Nested Loops 2: "Collect all of the nectar from each flower. \n\nUse
        a nested loop. "
      4-5 Bee Nested Loops 4: "Collect all of the nectar from each flower and make
        honey at the honeycomb. \n\nUse a nested loop. "
      4-5 Bee Nested Loops Assessment 1: "**Assessment:** Collect all of the nectar
        and make all of the honey using loops."
      4-5 Maze 7: "Get the zombie to the sunflower quickly!  \n\nCan you solve the
        puzzle in fewer than 11 blocks?"
      4-5 Maze 9: "Now we have a new block called `repeat until`.\\\nThis will let
        us keep looping commands until the zombie gets the sunflower.  \n\nUse the
        new `repeat until` block to solve this puzzle in as few commands as possible."
      4-5 Maze Assessment 1: "**Assessment:** Get to the sunflower using as few blocks
        as possible."
      4-5 Maze Conditionals 1: Use the `repeat until` block to get the zombie to the
        sunflower.
      4-5 Maze Conditionals 10: "Can you add just 3 blocks to help the zombie solve
        a more complex maze? \n\nIf you do it right, he can walk any curvy path no
        matter the length!"
      4-5 Maze Conditionals 2: Use the `repeat until` block to get the zombie to the
        sunflower.
      4-5 Maze Conditionals 3: 'Use the `if` block to help me decide when to turn. '
      4-5 Maze Conditionals 4: Ok, solve this one just like the last puzzle, but you
        need to remember how you used the `if` and `repeat until` blocks together.
      4-5 Maze Conditionals 5: "\"Me want sunflower!\"  \n\nUse an `if` statement
        to get the zombie to the sunflower with the fewest number of blocks."
      4-5 Maze Conditionals 6: |-
        "Eat sunflower!"

        Use an `if` statement to get the zombie to the sunflower with the fewest number of blocks.
      4-5 Maze Conditionals 7: The solution to this puzzle isn't very different, but
        watch out for the chompers!
      4-5 Maze Conditionals 8: "The `if/else` block checks a condition, and then does
        one thing OR another. \n\nUse this new block to get me to the sunflower."
      4-5 Maze Conditionals 9: |-
        One more practice puzzle with the `if/else` block!

        Trace it with your finger to see if you can figure it out on your first try.
      4-5 Maze Conditionals Assessment 1: "**Assessment:** Use a `repeat until` and
        an `if/else` block to get me to the sunflower in as few blocks as possible."
      4-5 Nested Loops 1: 'Complete the code to draw these triangles.  The first one
        is done for you.  Hint:  3 triangles in a 360 degree rotation.'
      4-5 Nested Loops 11: "Can you draw these 10 squares of this sidewalk using a
        nested loop? \n\nEach square is 30 pixels."
      4-5 Nested Loops 12: Can you draw these 36 triangles using a nested loop?
      4-5 Nested Loops 2: "Now nest this loop inside another loop to draw 10 triangles.\\\nThis
        is called a \"nested\" loop.  "
      4-5 Nested Loops 3: |-
        Create a sun by nesting the starter code in another loop.

        To get this cool design with a hollow center, you'll need to jump forward by the length of the triangle before turning.
      4-5 Nested Loops 5: Lingkaran yang diberikan kode untuk membuat sebuah kincir
        angin.
      4-5 Nested Loops 6: Can you draw a hexagon by looping the triangle code?
      4-5 Nested Loops 7: "Loop this design 10 times. \n\nHow much do you have to
        turn each time you loop?"
      4-5 Nested Loops 8: "Loop this shape 6 times. \n\nHow much do you have to turn
        each time you loop? "
      4-5 Nested Loops 9: Gambarkan gigi di mulut buaya!
      4-5 Nested Loops Assessment 1: "**Assessment:** Use a nested loop to complete
        the design."
      4-5 While Loops 1: Move me to the hole and fill it with two shovelfuls of dirt,
        using the `fill` block.
      4-5 While Loops 2: Move me to the pile of dirt and remove it with 5 shovel scoops,
        using the `remove 1` block.
      4-5 While Loops 3: "Use as few blocks as possible to complete this puzzle!  \n\nMove
        me to the pile and remove all the dirt, then move to the hole and fill it
        completely."
      4-5 While Loops 4: "Wow, look at that! \n\nI don't know how many shovelfuls
        of dirt this hole needs.\\\nCan you write a program that keeps using the `fill`
        block until the ground is even?  "
      Alien Defender: "**Ide Proyek**: Buat permainan pembela di Play Lab!"
      AppLab Intro 7 - Change Screen Color: |-
        <div style="float:right">
         <img src="https://images.code.org/bf9b1fb57751fa90c9b786339914ad70-image-1508521068798.34.54 AM.png" style="height:150px">

        **Tujuan:**Membuat layar hijau.

        **Bagaimana:**bawa dalam sebuah blok 'setproperty()'.Gunakan dropdown "warna latar layar"ke "hijau".Lalu pukul "Lari".

        **Macet?klik disini:**![expandable](https://images.code.org/3b5e70522b02867a1df1d5b5e481785e-image-1511279858395.gif)
      AppLab Intro 7 - Change Text 2: |-
        <div style="float:right">
        <img src="https://images.code.org/39ead723fbd2b047aa2d1e401cbfec8a-image-1506545619076.34.29 PM.png" style="height:200px;">
        </div>

        **Tujuan:**Membuat teks lebih besar dan biru" '

        **Bagaimana:**Anda membutuhkan dua baris kode.Beri' "label1' "sebuah' "ukuran-font" 'dari '80'dan ' "warna-teks" 'dari ' "biru" '.

        **Macet? klik disini:**![expandable](https://images.code.org/2d5d46a03082af3b01847aad6602e2ea-image-1511280140482.gif)
      AppLab Intro 7 - Full Text: |-
        <div style="float:right">
        <img src="https://images.code.org/1e81d5bcdd69172f4127de55d045225f-image-1507565161167.05.19 AM.png" style="height:200px">
        </div>

        **Tujuan.**Buat tombol' "merah" 'dan ' "biru" '.Kemudian ubah teks ke dalam label oranye besar.

        **Bagaimana.**
        \-Anda bisa arahkan kursor untuk melihat' "id" '.
        \-Atur' "warna-latar" 'tombol ke' "merah" 'dan ' "biru" '.
        \-Atur properti' "teks" 'label menjadi apapun yang anda inginkan seperti ' "selamat datang di aplikasi saya" '.

        **Macet?klik disini:**![expandable](https://images.code.org/4bf99e7352e7c17a5bf73ced80171f6a-image-1511280628092.gif)
      AppLab Intro 7 - onEvent intro: |-
        <img src="https://images.code.org/3d8c8487ea669563d3401c0009cd9462-image-1511281194897.gif" style="float:right;height:200px">

        **Tujuan**Layar mulai biru.Tambahkan kode sehingga layar kembali hijau saat anda klik tombol "Green-ify".

        **Bagaimana**Tambahkan kode di dalam ' onEvent()'yang mengatur layar' "background-color" ' ke' "hijau" '.

        **Macet?Klik disini:**![expandable](https://images.code.org/5ddf6b129bc04b79839b3661ccef788b-image-1511281012076.gif)
      AppLab Intro 7 - onEvent twoButtons: |-
        <img src="https://images.code.org/158c9258bfff18c2177440f201446c47-image-1507566793890.gif" style="float:right;height:200px">

        **Tujuan**Membantu menyelesaikan aplikasi flashlight.Tombol"On" sudah berubah putih.Jalankan aplikasi dan cobalah.Kemudian tulis kode sehingga tombol"Off"membuat layar kembali hitam.

        **Bagaimana**Tambahkan kode di dalam 'onEvent()'kosong yang mengatur' "background-color" 'dari layar ke' "hitam" 'dan' "warna-teks" 'dari label ke ' "putih" '.

        **Macet?Klik disini:**![expandable](https://images.code.org/020b1d9b465aaf35967a528a92961c13-image-1511281772276.gif)
      AppLab Intro 7 - playSound: "<img src=\"https://images.code.org/28176329f15dea1a863564b069e72aab-image-1511282702534.44.52
        AM.png\" style=\"float:right;height:200px\">\n\n**Tujuan.**Papan suara hampir
        selesai!Jalankan untuk tahu cara kerjanya.Kemudian tambahkan sebuah gambar,teks,dan
        suara pada tombol terakhir.\n\n**Bagaimana**\n\n\\-Tambahkan 'onEvent ' dan
        atur\" id \"pada ' \"button4\" '.Geser sebuah' playsound'() ke \n dalam onEvent()
        dan pilih suara dari perpustakaan.\n\\-Tambahkan sebuah 'setProperty'() (di
        luar 'onEvent()')untuk merubah properti tombol \"gambar\".Pilih sebuah gambar
        menggunakan dropdown ketiga.\n\\-Tambahkan sekali lagi'setProperti'() untuk
        merubah tombol\"teks\".\n\n**Macet?klik disini:**![expandable](https://images.code.org/a3fdcb8954c5e8d585bef64df1ec5b1a-image-1511285408512.gif)"
      AppLab Intro 7 - thisOrThatAddButton: |-
        <img src="https://images.code.org/3feb07aaf3d933b094647479673a3293-image-1508373443129.37.00 PM.png" style="float:right;height:200px">

        **Tujuan.**Tambahkan tombol kedua ke layar sambil berkata"Right!"dengan sebuah' "id" ' dari '"rightButton" '.

        **Bagaimana.**Dalam mode desain bawa tombol baru.Posisikan dan ukur ulang.Kemudian atur' "id" ',' "teks" ',' "warna latar" ',dan ' "ukuran font" '.

        **Macet?Klik disini:**![expandable](https://images.code.org/7035ad0445984cf889b159cf5682e35a-image-1508383186447.gif)
      AppLab Intro 7 - thisOrThatAddScreen: |-
        <img src="https://images.code.org/f102a1363aa575cc530379d9a4ee378c-image-1508382068883.00.59 PM.png" style="float:right;height:200px">

        **Tujuan.**Buat sebuah layar baru yang disebut ' "rightScreen" '.Tambahkan sebuah label teks sambil berkata"kamu kearah yang benar"!".

        **Bagaiman.**Dalam mode desain bawa sebuah elemen layar.Ubahlah' " id" ' ke ' "rightScreen" '.Kemudian bawa sebuah label ke dalam layar dan ubah teks menjadi "kamu kearah yang benar".

        **Macet?klik disini:**![expandable](https://images.code.org/11cf186acb0453cf9ec46929b763f568-image-1508383646159.gif)
      AppLab Intro 7 - thisOrThatPersonalize: "<a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\"
        target=\"_blank\"><img src=\"https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05
        PM.png\" style=\"float:right;height:200px\"></a>\n<a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\"
        target=\"_blank\"><img src=\"https://images.code.org/284b55697d786e0cd64350d0967c5dda-image-1511244806272.11.05
        PM.png\" style=\"float:right;height:200px\"></a>\n<a href=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\"
        target=\"_blank\"><img src=\"https://images.code.org/445181ff8d84861919512ba9b8e09586-image-1511244809994.12.40
        PM.png\" style=\"float:right;height:200px\"></a> \n\n**Tujuan**Membangun aplikasi
        anda sendiri dengan memperpanjang proyek ini.Kemudian \" berbagi\"dengan seseorang!.\n\n**Bagaimana**Putuskan
        jenis aplikasi yang ingin anda bangun. Bangun aplikasi dengan menambahkan
        layar,tombol,teks,dan aplikasi interaktif pengguna.Ada beberapa blok di Toolbox
        yang bisa anda coba juga.Sekali anda melakukannya klik\"berbagi\"untuk mengirimnya
        pada anda sendiri atau pada teman.\n\n<details>\n\n<summary><b> pilih ide
        petualanganmu sendiri </b></summary>\n <a \nhref=\"https://studio.code.org/projects/applab/SMvVhgBX_GGyxg5LSEMrgg\"
        target=\"_blank\">Contoh aplikasi kartu ucapan<a>sehingga anda bisa melihat
        bagaimana ini bekerja.Inilah beberapa ide yang membantu anda muncul dengan
        kartu anda sendiri.\n<li>Buat sebuah petualangan tentang karakter favorit
        anda,nyata atau fiksi.</li></li>Buat sebuah petualangan yang menceritakan
        kisah buku favorit anda,film,atau kreasi anda.</li></li>Buatlah sebuah petualangan
        yang penuh dengan alur tak terduga atau sebuah pilihan moral yang sulit</li><br></details>\n\n<details><summary>ide
        kartu ucapan</b></summary>\n\nCoba ini<a href=\"https://studio.code.org/projects/applab/SM_edi1btguZZiQaTtUT9Q\"
        target=\"_blank\">contoh aplikasi quiz kepribadian.Sehingga anda bisa melihat
        bagaimana ini bekerja.Inilah beberapa ide yang membuat anda muncul dengan
        quiz anda sendiri.\n\n<li>Berfikirlah tentang hari ulang tahun,liburan,hari
        khusus yang akan tiba.Buat kartu untuk merayakannya</li></li>Buat kartu ucapan
        terimakasih pada seseorang yang anda hargai</li>\n</li>Buat kartu undangan
        untuk acara yang akan datang.</li>\n<br>\n</details>\n\n<details><summary>Ide
        quiz kepribadian</b></summary>\n\nCoba ini<a href=\"https://studio.code.org/projects/applab/gx21oCP10-V4GlNMlSpwdQ\"
        target=\"_blank\">Contoh aplikasi kuis kepribadian</a>sehingga anda bisa melihat
        bagaimana ini bekerja.Inilah beberapa ide untuk membantu anda muncul dengan
        quiz anda sendiri.\n\n<li>Buatlah sebuah quiz yang menyarankan sesuatu yang
        mungkin orang suka,sebagai contoh makanan,tim,buku,atau sebuah tempat</li>\n</li>Buatlah
        sebuah quiz yang meramal masa depan berdasarkan jawaban mereka.</li>\n<li>Buat
        sebuah quiz yang membantu orang sulit membuat keputusan.</li>\n\n</details>"
      AppLab Intro 7 - thisOrThatSetScreen: |-
        <img src="https://images.code.org/acd1acf659a2504d38ff80256d8e870f-image-1508374065550.com-crop (1).gif" style="float:right;height:200px">

        **Tujuan.**Layar beralih ke ' "rightScreen" 'saat pengguna meng-klik ' "rightButton" '.

        **Bagaimana.**Dalam mode kode tambahkan ' onEvent() ' baru ke dalam program anda untuk tombol "Right".Tambahkan sebuah blok 'setScreen()' untuk beralih layar ke ' "rightScreen" '.

        **Macet?Klik disini.**![expandable](https://images.code.org/64dfec0d9f9c2fc237abb90ef6a72f0e-image-1508384166252.gif)
      CDU U6 Playground Sound Board: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CDU U6 Playground Sound Board_2018: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CDU U6 Playground Sound Board_2019: |-
        # Sound Board 2.0

        You can now play sounds, notes, and songs! With this new knowledge, you can even turn your board into a sound board.

        In the toolbox you have all of the buzzer and led-related blocks at your disposal. See what cool stuff you can come up with!

        # Do This

        -   Use all of the button related board events (up, down), to play a unique sound or song at each event.
        -   Are there any other events you could use to play even more sounds/songs?
      CSD Problem Solving Process Video: |-
        ## Pertanyaan untuk dipertimbangkan

        -   Bagaimana anda mengikuti proses pemecahan masalah pada pelajaran terakhir?
            \-Bagaimana anda menggunakan proses ini pada sebuah masalah dalam kehidupan anda?
      CSD U1 - PixFilter 1x1 intro: |-
        # 3 Bit Colors

        Each pixel is a square on a screen that emits light. Each pixel can have a certain number of bits assigned to it, and bits per pixel determine the colors that can be rendered.

        In this tool we're using 3 bits to define the one large black pixel. The first bit affects the red tint. The second bit affects the green tint. The third bit affects the blue tint.

        # Do This

        -   Click the "Run" button to start the widget
        -   Click on the light bulbs to turn on or off each color and see what happens to your pixel
        -   See how many different colors you can create with just three bits
        -   Write down the binary associated with each color you come up with
      CSD U1 - PixFilter Filter Intro: |-
        # Filtering Pixels

        If you've ever used Instagram you've probably encountered an image filter. Image filters read in each pixel, process it in some way, and the return the filtered pixel. In this tool we're going to start by filtering just a single pixel before moving on to a full image.

        # Do This

        -   Try changing the color drop downs in the Filter section
        -   Click on the top row of lightbulbs in the Diagram section to see how the filter will convert the input (top bulbs) to the output (bottom bulbs)
        -   Look at how the numbers in the Binary section reflect changes to the colors
        -   Based on how the bits change, can you formulate what replace is doing? Talk to your partner and see if you can figure it out.
        -   Complete the Level 2 table in your Activity Guide
      CSD U1 - PixFilter Filter Revisit: |-
        # Combining Filters

        Now that you've played with filtering a single color channel, it's time to see what happens if we filter more than one color.

        # Do This

        -   Using the color dropdowns in the filter section, build a filter that changes the value of more than one color channel
        -   Click on the top row of lightbulbs in the Diagram section to see how the filter will convert the input (top bulbs) to the output (bottom bulbs)
        -   Look at how the numbers in the Binary section reflect changes to the colors
        -   Complete the Level 4 table in your Activity Guide
      CSD U1 - PixFilter FreePlay: |-
        # Free Play

        Do as you will, make something awesome
      CSD U1 - PixFilter Mario: |-
        # Combining Filters

        Sometimes you'll need to filter more than one pixel to get the color change that you want.

        # Do This

        Check out Mario, he's lookin' pretty good in his red hat and overalls. Your job it to set up the filter so he looks like Luigi, with a green hat and overalls.

        -   First, determine which bit(s) needs to change in order to the change you want
        -   Once you've figured out which bit needs changing, set the filter dropdown appropriately
        -   After you've got the filter working so that, try to come up with other filters that change _only_ his hat and overalls - how many different clothing colors can you come up with?

        _How many tries did it take you to find the right filter?_
      CSD U1 - PixFilter Mushroom: |-
        # Filtering Images

        Now that we've seen how a single pixel can be filtered to change its color, let's try applying a filter to an image made of multiple pixels. The filter you create will be applied to each pixel in the image - and you still have the light bulbs available to experiment with how your filter will work with individual colors.

        # Do This

        Here's a picture of a red mushroom - you're going to try and turn it into a yellow mushroom.

        -   First, determine which bit needs to change in order to turn red into yellow
        -   Once you've figured out which bit needs changing, use the filter dropdowns to make all of the red areas turn yellow
        -   After you've got the filter working so that the red has turned yellow, see if you can come up with filters that turn the mushroom other colors

        _How many tries did it take you to find the right filter?_
      CSD U1 - PixFilter UnFilter: |-
        # UnFiltering

        Bit filters can be used to _undo_ filtering as well. Here's an image of a bird that's been filtered from it's original colors. Can you get it back to normal?

        # Do This

        <img src="https://images.code.org/c15636bda16e8792c59ac955332e37a5-image-1471372091393.22.56.png" style="float:right; width: 200px"/>
        Here's what our bird should look like. Use the filter to get him back to normal.

        -   Decide which colors (and so which bits) you need to change. You might need to write your thoughts with pencil and paper.
        -   Once you know which bits need changing, set the filter dropdown appropriately to test your answer
        -   After you've fixed the image, write down both your process and your final filter in the Level 6 section of your Activity Guide

        _How many tries did it take you to find the right filter?_
      CSD U2 CSS explore CSS: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary><strong>How do I switch between files?</strong></summary>

        Click the name of the file you want to look at in the menu on the left side of the screen.

        </details>
        </div>

        # Adding Style

        This Web Lab project is using a new language to add style to the page. With a partner explore both the `index.html` and `style.css` files. Be ready to discuss the following questions.

        -   What changes is this new language making to the page?
        -   How is this language different from HTML?
        -   How are the `index.html` and `style.css` files connected?
      CSD U2 CSS explore CSS_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How do I switch between files?</strong></summary>

        Click the name of the file you want to look at in the menu on the left side of the screen.

        </details>
        </div>

        # Adding Style

        This Web Lab project is using a new language to add style to the page. With a partner explore both the `index.html` and `style.css` files. Be ready to discuss the following questions.

        -   What changes is this new language making to the page?
        -   How is this language different from HTML?
        -   How are the `index.html` and `style.css` files connected?
      CSD U2 CSS explore CSS_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How do I switch between files?</strong></summary>

        Click the name of the file you want to look at in the menu on the left side of the screen.

        </details>
        </div>

        # Adding Style

        This Web Lab project is using a new language to add style to the page. With a partner explore both the `index.html` and `style.css` files. Be ready to discuss the following questions.

        -   What changes is this new language making to the page?
        -   How is this language different from HTML?
        -   How are the `index.html` and `style.css` files connected?
      CSD U2 Debugging 1: |-
        # Debugging

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a bug?</strong>
        </summary>
        Bugs are mistakes in code which causes it not to work as planned.
        </details>
        <details>
        <summary><strong>What is debugging?</strong>
        </summary>
        Debugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug.
        </details>
        <details>
        <summary><strong>What are some examples of bugs?</strong>
        </summary>

        Bugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.

        </details>
        </div>

        Computer code is written by humans, and all humans make mistakes. Part of being a good computer scientist is finding your mistakes and fixing them. In computer science we call mistakes **bugs**. The process of finding and fixing those bugs is called **debugging**.  Over the next couple levels you are going to work on your debugging skills.

        # Do This

        <img src="https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56 AM.png" style="float:right;border:black solid 5px;">

        -   Look at the web page code, and discuss with your partner what is causing the following two bugs:
            -   The heading is not big enough.
            -   The second item on the list doesn't have a number.
        -   Fix all the bugs in the code so that the final result matches the image on the right.
      CSD U2 Debugging 1_2018: "# Debugging\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n<details>\n<summary><strong>What is a bug?</strong></summary>\nBugs
        are mistakes in code which causes it not to work as planned.\n</details>\n\n<details>\n<summary><strong>What
        is debugging?</strong></summary>\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n</details>\n\n<details>\n<summary><strong>What
        are some examples of bugs?</strong></summary>\n\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n\n</details>\n</div>\n\nComputer
        code is written by humans, and all humans make mistakes. Part of being a good
        computer scientist is finding your mistakes and fixing them. In computer science
        we call mistakes **bugs**. The process of finding and fixing those bugs is
        called **debugging**.  Over the next couple levels you are going to work on
        your debugging skills.\n\n# Do This\n\n<img src=\"https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png\" style=\"float:right;border:black solid 5px;\">\n\n-   Look at the
        web page code, and discuss with your partner what is causing the following
        two bugs:\n    -   The heading is not big enough.\n    -   The second item
        on the list doesn't have a number.\n-   Fix all the bugs in the code so that
        the final result matches the image on the right."
      CSD U2 Debugging 1_2019: "# Debugging\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**What is a bug?**]\nBugs are mistakes in
        code which causes it not to work as planned.\n:::\n\n::: details [**What is
        debugging?**]\nDebugging is the process of finding and fixing bugs.  Debugging
        is a problem solving process so use your problem solving steps as you try
        to debug. \n:::\n\n::: details [**What are some examples of bugs?**]\n\nBugs
        can be anything that causes code not to work as planned.  Some examples are
        misspelling, putting code in the wrong place, using the wrong tag, or forgetting
        to close a tag.\n\n:::\n\n</div>\n\nComputer code is written by humans, and
        all humans make mistakes. Part of being a good computer scientist is finding
        your mistakes and fixing them. In computer science we call mistakes **bugs**.
        The process of finding and fixing those bugs is called **debugging**.  Over
        the next couple levels you are going to work on your debugging skills.\n\n#
        Do This\n\n<img src=\"https://images.code.org/9c4d90a5a8293c5aee56e6cb81dae689-image-1500915264278.52.56
        AM.png\" style=\"float:right;border:black solid 5px;\">\n\n-   Look at the
        web page code, and discuss with your partner what is causing the following
        two bugs:\n    -   The heading is not big enough.\n    -   The second item
        on the list doesn't have a number.\n-   Fix all the bugs in the code so that
        the final result matches the image on the right."
      CSD U2 Debugging 2: |-
        # Debugging

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a bug?</strong>

        </summary>

        Bugs are mistakes in code which causes it not to work as planned.

        </details>
        <details>
        <summary><strong>What is debugging?</strong>
        </summary>

        Debugging is the process of finding and fixing bugs.  Debugging is a problem solving process so use your problem solving steps as you try to debug.

        </details>
        <details>
        <summary><strong>What are some examples of bugs?</strong>
        </summary>

        Bugs can be anything that causes code not to work as planned.  Some examples are misspelling, putting code in the wrong place, using the wrong tag, or forgetting to close a tag.

        </details>
        </div>

        More debugging practice!  This page is a little more challenging to debug than the last one.

        # Do This

        <img src="https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38 AM.png" style="float:right;border:5px black solid;width:250px">

        -   Discuss with your partner what you think the bugs are in this page.
        -   Find and fix all the bugs so that your page matches the one on the right.
      CSD U2 Debugging 2_2018: "# Debugging\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What is a bug?</strong></summary>\nBugs
        are mistakes in code which causes it not to work as planned.\n</details>\n\n<details>\n<summary><strong>What
        is debugging?</strong></summary>\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n</details>\n\n<details>\n<summary><strong>What
        are some examples of bugs?</strong></summary>\n\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n\n</details>\n</div>\n\nMore
        debugging practice!  This page is a little more challenging to debug than
        the last one.\n\n# Do This\n\n<img src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n-   Discuss
        with your partner what you think the bugs are in this page.\n-   Find and
        fix all the bugs so that your page matches the one on the right."
      CSD U2 Debugging 2_2019: "# Debugging\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**What is a bug?**]\nBugs are mistakes in
        code which causes it not to work as planned.\n:::\n\n::: details [**What is
        debugging?**]\nDebugging is the process of finding and fixing bugs.  Debugging
        is a problem solving process so use your problem solving steps as you try
        to debug. \n:::\n\n::: details [**What are some examples of bugs?**]\n\nBugs
        can be anything that causes code not to work as planned.  Some examples are
        misspelling, putting code in the wrong place, using the wrong tag, or forgetting
        to close a tag.\n\n:::\n\n</div>\n\nMore debugging practice!  This page is
        a little more challenging to debug than the last one.\n\n# Do This\n\n<img
        src=\"https://images.code.org/61190513dba270c731251df168b98f80-image-1474383960371.02.38
        AM.png\" style=\"float:right;border:5px black solid;width:250px\">\n\n-   Discuss
        with your partner what you think the bugs are in this page.\n-   Find and
        fix all the bugs so that your page matches the one on the right."
      CSD U2 Debugging 3: "# Debugging\n\n<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>What
        is a bug?</strong>\n</summary>\n\nBugs are mistakes in code which causes it
        not to work as planned.\n\n</details>\n<details>\n<summary><strong>What is
        debugging?</strong>\n</summary>\n\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n\n</details>\n<details>\n<summary><strong>What
        are some examples of bugs?</strong>\n</summary>\n\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n\n</details>\n<details>\n<summary><strong>Why
        does the inspector sometimes stop working?</strong>\n</summary>\n\nSometimes
        there are so many bugs in the HTML that the inspector cannot read the code
        properly and it stops working completely, even on the parts of the code that
        are correct.  Once the bugs are corrected, the inspector will work again.\n\n</details>\n</div>\n\nThis
        page has images in it. Images make finding bugs a little more tricky. Can
        you debug this page?\n\n# Do This\n\n-   Discuss with your partner what is
        causing the bugs in this page.\n-   Fix the bugs so that your page matches
        the target page shown below.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 3_2018: "# Debugging\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>What is a bug?</strong>\n</summary>\nBugs
        are mistakes in code which causes it not to work as planned.\n</details>\n<details>\n<summary>\n<strong>What
        is debugging?</strong>\n</summary>\nDebugging is the process of finding and
        fixing bugs.  Debugging is a problem solving process so use your problem solving
        steps as you try to debug. \n</details>\n<details>\n<summary>\n<strong>What
        are some examples of bugs?</strong>\n</summary>\nBugs can be anything that
        causes code not to work as planned.  Some examples are misspelling, putting
        code in the wrong place, using the wrong tag, or forgetting to close a tag.\n</details>\n<details>\n<summary>\n<strong>Why
        does the inspector sometimes stop working?</strong>\n</summary>\n\nSometimes
        there are so many bugs in the HTML that the inspector cannot read the code
        properly and it stops working completely, even on the parts of the code that
        are correct.  Once the bugs are corrected, the inspector will work again.\n\n</details>\n</div>\n\nThis
        page has images in it. Images make finding bugs a little more tricky. Can
        you debug this page?\n\n# Do This\n\n-   Discuss with your partner what is
        causing the bugs in this page.\n-   Fix the bugs so that your page matches
        the target page shown below.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 3_2019: "# Debugging\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**What is a bug?**]\nBugs are mistakes in
        code which causes it not to work as planned.\n:::\n\n::: details [**What is
        debugging?**]\nDebugging is the process of finding and fixing bugs.  Debugging
        is a problem solving process so use your problem solving steps as you try
        to debug. \n:::\n\n::: details [**What are some examples of bugs?**]\n\nBugs
        can be anything that causes code not to work as planned.  Some examples are
        misspelling, putting code in the wrong place, using the wrong tag, or forgetting
        to close a tag.\n\n:::\n\n::: details [**Why does the inspector sometimes
        stop working?**]\n\nSometimes there are so many bugs in the HTML that the
        inspector cannot read the code properly and it stops working completely, even
        on the parts of the code that are correct.  Once the bugs are corrected, the
        inspector will work again.\n\n:::\n\n</div>\n\nThis page has images in it.
        Images make finding bugs a little more tricky. Can you debug this page?\n\n#
        Do This\n\n-   Discuss with your partner what is causing the bugs in this
        page.\n-   Fix the bugs so that your page matches the target page shown below.\n\n![](<https://images.code.org/4a9ac71bcf6c04775df791516562cd47-image-1508779270522.56.24
        AM.png>)"
      CSD U2 Debugging 4: |-
        # Formatting

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong>
        </summary>

        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.

        </details>
        <details>
        <summary><strong>What is indentation?</strong>
        </summary>

        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary><strong>What is formatting?</strong>
        </summary>

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        <details>
        <summary><strong>Why does the inspector sometimes stop working?</strong>
        </summary>

        Sometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.

        </details>
        </div>

        The way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.

        # Do This

        -   Look at the code with your partner and discuss how you should format the code to make it easier to read.
        -   Make the code easier to read by adding new lines and indentation.
        -   Fix all the bugs so that your page matches the target page below.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 Debugging 4_2018: |-
        # Formatting

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong></summary>
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        </details>
        <details>
        <summary><strong>What is indentation?</strong></summary>
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary><strong>What is formatting?</strong></summary>
        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary><strong>Why does the inspector sometimes stop working?</strong></summary>

        Sometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.

        </details>
        </div>

        The way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.

        # Do This

        -   Look at the code with your partner and discuss how you should format the code to make it easier to read.
        -   Make the code easier to read by adding new lines and indentation.
        -   Fix all the bugs so that your page matches the target page below.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 Debugging 4_2019: |-
        # Formatting

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is whitespace?**]
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        :::

        ::: details [**What is indentation?**]
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:

               <body>
                  <p>This paragraph is inside the "body" element.</p>
               </body>

        :::

        ::: details [**What is formatting?**]
        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

               <body>
                  <p>This paragraph is inside the "body" element.</p>
               </body>

        :::

        ::: details [**Why does the inspector sometimes stop working?**]

        Sometimes there are so many bugs in the HTML that the inspector cannot read the code properly and it stops working completely, even on the parts of the code that are correct.  Once the bugs are corrected, the inspector will work again.

        :::

        </div>

        The way that you write your code can make it easier or harder to find bugs.  If you use **whitespace** and **indentation**, it will make it easier to read and easier to fix.

        # Do This

        -   Look at the code with your partner and discuss how you should format the code to make it easier to read.
        -   Make the code easier to read by adding new lines and indentation.
        -   Fix all the bugs so that your page matches the target page below.

        ![](<https://images.code.org/7e194db101f71235340fc075bf09776c-image-1508777739384.46.13 AM.png>)
      CSD U2 HTML Adding Paragraphs: |-
        # Tambahkan Teks pada Badan

        Ketika anda mulai berbagai proyek Web Lab, ini secara otomatis akan menambahkan tag '\<!DOCTYPE>',<html><head>, dan <body> pada proyek anda. Ketika anda menambahkan konten pada proyek anda, anda akan membutuhkannya diantara tag <body> dan </body> karena seharusnya adalah bagian dari badan halaman web anda.

        # Lakukan Ini

        \-Tulis tiga kalimat terpisah tentang topik apa saja yang anda sukai dibadan tag halaman web anda
        \-Tekan "Refresh dan Save" jika anda tidak melihat perubahan di area preview
        \-Bandingkan kerja anda dengan yang lain. Pastikan anda menempatkan kode ditempat yang sama.
      CSD U2 HTML Adding Paragraphs pt 2: "<div style=\"float: right; height: 250px;
        <summary>width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \n<details>\n\n<summary>\n\n**Apa elemen dari sebuah paragrap?**\n\n</summary>\n\nParagrap
        ditandai dengan tag pembukaan ('<p>') dan penutupan ('</p>').Paragrap dalam
        HTML bisa berapapun panjang teksnya dari satu kata menjadi banyak kalimat.
        Kelompok paragrap bersama mengatur kalimat dan meletakkan beberapa ruang diantara
        kelompok teks tersebut dan kelompok teks berikutnya.\n\n</details>\n<details>\n<summary>\n\n**Bagaimana
        saya membuat paragrap ganda?**\n\n</summary>\n\nBerikut sebuah contoh dari
        beberapa tag paragraph dalam sebuah baris. Kode ini akan ditempatkan didalam
        halaman web anda.\n\n<p> Ini adalah sebuah paragrap.Ini memiliki dua kalimat.</p>\n<p>
        Ini adalah paragrap yang lain.</p>\n\n</details>\n</div>\n\n# Menggunakan
        tag paragrap\n\nTag '<p>' '</p>' atau tag \"paragrap\"  mulai dan selesai
        diletakkan disekitar teks untuk mengindikasikan bahwa itu adalah bagian dari
        sebuah paragrap. Penempatan teks diantara  tag paragrap mulai dan selesai
        membiarkan komputer tahu bahwa hal tersebut harus ditampilkan secara berbeda,
        biasanya hanya memberi jarak dari teks yang lain.\n\n# Lakukan Ini\n\n\\-Tempatkan
        teks yang baru saja anda tulis dibagian dalam minimal dua paragrap terpisah
        disekitarnya itu dengan tag '<p>' dan '</p>'\n\\-Bandingkan hasilnya dengan
        yang lain. Apa yang berubah tentang cara teks anda ditampilkan? "
      CSD U2 HTML Adding Paragraphs pt 2_2018: "<div style=\"float: right; height:
        250px; <summary>width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\"> \n<details>\n\n<summary>\n\n**Apa elemen dari sebuah paragrap?**\n\n</summary>\n\nParagrap
        ditandai dengan tag pembukaan ('<p>') dan penutupan ('</p>').Paragrap dalam
        HTML bisa berapapun panjang teksnya dari satu kata menjadi banyak kalimat.
        Kelompok paragrap bersama mengatur kalimat dan meletakkan beberapa ruang diantara
        kelompok teks tersebut dan kelompok teks berikutnya.\n\n</details>\n<details>\n<summary>\n\n**Bagaimana
        saya membuat paragrap ganda?**\n\n</summary>\n\nBerikut sebuah contoh dari
        beberapa tag paragraph dalam sebuah baris. Kode ini akan ditempatkan didalam
        halaman web anda.\n\n<p> Ini adalah sebuah paragrap.Ini memiliki dua kalimat.</p>\n<p>
        Ini adalah paragrap yang lain.</p>\n\n</details>\n</div>\n\n# Menggunakan
        tag paragrap\n\nTag '<p>' '</p>' atau tag \"paragrap\"  mulai dan selesai
        diletakkan disekitar teks untuk mengindikasikan bahwa itu adalah bagian dari
        sebuah paragrap. Penempatan teks diantara  tag paragrap mulai dan selesai
        membiarkan komputer tahu bahwa hal tersebut harus ditampilkan secara berbeda,
        biasanya hanya memberi jarak dari teks yang lain.\n\n# Lakukan Ini\n\n\\-Tempatkan
        teks yang baru saja anda tulis dibagian dalam minimal dua paragrap terpisah
        disekitarnya itu dengan tag '<p>' dan '</p>'\n\\-Bandingkan hasilnya dengan
        yang lain. Apa yang berubah tentang cara teks anda ditampilkan?"
      CSD U2 HTML Adding Paragraphs pt 2_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is a paragraph element?**]

        Paragraphs are marked by opening(`<p>`) and closing(`</p>`) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        :::

        ::: details [**How do I make multiple paragraphs?**]

        Here's an example of several paragraph tags in a row. This code would be placed inside of the body of your web page.

            <p>This is a paragraph. It has two sentences.</p>
            <p>This is another paragraph.</p>

        :::

        </div>

        # Use Paragraph Tags

        The `<p>` `</p>` tags or "paragraph" start and end tags are placed around text to indicate that it is part of a paragraph. Placing text between paragraph start and end tags lets the computer know that it should be treated differently, often just spacing it out from other text.

        # Do This

        -   Place the text you just wrote inside at least two separate paragraphs by surrounding it with `<p>` and `</p>` tags
        -   Compare the results with a neighbor. What has changed about the way your text is displayed?
      CSD U2 HTML Adding Paragraphs_2018: |-
        # Tambahkan Teks pada Badan

        Ketika anda mulai berbagai proyek Web Lab, ini secara otomatis akan menambahkan tag '\<!DOCTYPE>',<html><head>, dan <body> pada proyek anda. Ketika anda menambahkan konten pada proyek anda, anda akan membutuhkannya diantara tag <body> dan </body> karena seharusnya adalah bagian dari badan halaman web anda.

        # Lakukan Ini

        \-Tulis tiga kalimat terpisah tentang topik apa saja yang anda sukai dibadan tag halaman web anda
        \-Tekan "Refresh dan Save" jika anda tidak melihat perubahan di area preview
        \-Bandingkan kerja anda dengan yang lain. Pastikan anda menempatkan kode ditempat yang sama.
      CSD U2 HTML Adding Paragraphs_2019: |-
        # Tambahkan Teks pada Badan

        Ketika anda mulai berbagai proyek Web Lab, ini secara otomatis akan menambahkan tag '\<!DOCTYPE>',<html><head>, dan <body> pada proyek anda. Ketika anda menambahkan konten pada proyek anda, anda akan membutuhkannya diantara tag <body> dan </body> karena seharusnya adalah bagian dari badan halaman web anda.

        # Lakukan Ini

        \-Tulis tiga kalimat terpisah tentang topik apa saja yang anda sukai dibadan tag halaman web anda
        \-Tekan "Refresh dan Save" jika anda tidak melihat perubahan di area preview
        \-Bandingkan kerja anda dengan yang lain. Pastikan anda menempatkan kode ditempat yang sama.
      CSD U2 HTML Debug Paragraphs: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>Apakah
        elemen paragrap?</strong>\n</summary>\n Paragrap ditandai dengan tag pembukaan(
        '<p>' )dan penutupan('</p>'). Paragrap dalam HTML bisa jadi berapapun panjangnya
        teks dari sebuah kata menjadi banyak kalimat. Kelompok paragrap bersama menyusun
        kalimat dan meletakkan beberapa ruang diantara kelompok teks dengan kelompok
        teks berikutnya.\n</details>\n<details>\n<summary>\n<strong> Mengapa HTML
        terlihat bekerja \nbahkan ketika rusak</strong>\n\n</summary>\nHTML dibaca
        oleh peramban web anda untuk menghasilkan halaman web. Karena orang sering
        melakukan sedikit kesalahan saat menulis halaman web mereka, peramban diprogram
        untuk membuat tebakan terbaik pada apa yang anda harap untuk dilakukan. Terkadang
        peramban yang berbeda bahkan diprogram untuk membuat tebakan yang berbeda!.
        Satu satunya cara untuk memastikan kode anda seperti yang diharapkan adalah
        pastikan anda selalu menggunakan tag secara benar.\n</details>\n<details>\n<summary>\n<strong>
        Mengapa kode  kadang berubah pink?</strong>\n</summary>\n\nWeb Lab diprogram
        secara otomatis mendeteksi beberapa kesalahan dalam HTML. Ketika ada peringatan
        sebuah kesalahan, ini mengubah kode itu pink. Kesalahan mungkin dalam warna
        pink, atau mungkin disuatu tempat sebelum kode pink. Anda perlu berhati hati
        menemukan kesalahan.\n\n</details>\n</div>\n\n# Debug: Memperbaiki Tag Rusak\n\nWeb
        sederhana memiliki masalah yang melindungi konten dari ditampilkan secara
        benar. Identifikasi dan perbaiki masalah. Latihan ini disebut \"debugging\"
        kode anda.\n\n# Lakukan ini\n\n-   Perbaiki kode rusak sehingga halaman web
        tampil dengan benar\n-   Bandingkan masalah yang anda perbaiki dengan yang
        lain"
      CSD U2 HTML Debug Paragraphs_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        <strong>What is a paragraph element?</strong>

        </summary>

        Paragraphs are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        </details>
        <details>
        <summary>

        <strong>Why does HTML seem to work even when it's broken?</strong>

        </summary>

        HTML is read by your web browser to generate web pages. Since people often make little mistakes when writing their web pages, browsers are programmed to make a best guess of what you intended to do. Sometimes different browsers are even programmed to make different guesses! The only way to ensure your code looks like you intend is make sure you're always using tags correctly.

        </details>
        <details>
        <summary>

        <strong>Why does the code sometimes turn pink?</strong>

        </summary>

        Web Lab is programmed to automatically detect some mistakes in HTML.  When it notices a mistake, it turns that code pink.  The mistake might be in pink, or it might be somewhere before the pink code.  You'll need to carefully debug to find your mistake.

        </details>
        </div>

        # Debug: Fix the Broken Tags

        This simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called "debugging" your code.

        # Do This

        -   Fix the broken code so that the web page displays correctly
        -   Compare the problems you fixed with a neighbor
      CSD U2 HTML Debug Paragraphs_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What is a paragraph element?**]

        Paragraphs are marked by opening( `<p>` ) and closing( `</p>` ) tags. Paragraphs in HTML can be any length of text from one word to a bunch of sentences. Paragraphs group together sets of sentences and put some space between that group of text and the next group of text.

        :::

        ::: details [**Why does HTML seem to work even when it's broken?**]

        HTML is read by your web browser to generate web pages. Since people often make little mistakes when writing their web pages, browsers are programmed to make a best guess of what you intended to do. Sometimes different browsers are even programmed to make different guesses! The only way to ensure your code looks like you intend is make sure you're always using tags correctly.

        :::

        ::: details [**Why does the code sometimes turn pink?**]

        Web Lab is programmed to automatically detect some mistakes in HTML.  When it notices a mistake, it turns that code pink.  The mistake might be in pink, or it might be somewhere before the pink code.  You'll need to carefully debug to find your mistake.

        :::

        </div>

        # Debug: Fix the Broken Tags

        This simple web page has some issues which are preventing the content from being displayed correctly. Identify and fix the issues. This practice is also called "debugging" your code.

        # Do This

        -   Fix the broken code so that the web page displays correctly
        -   Compare the problems you fixed with a neighbor
      CSD U2 Heading Demo: "# Headings\n\n<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>What
        are headings?</strong></summary>\n\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong></summary>\n\nHeadings come in
        6 different sizes. So far you have primarily used the biggest one: \\<h1>.
        The number '1' in the HTML tag designates that this is the biggest heading.
        The smallest heading is \\<h6>. You can also try the \\<h2>, \\<h3>, \\<h4>,
        and \\<h5> tags, which get smaller as the number gets larger.\n\n</h1>\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong></summary>\n\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n\n</details>\n<details>\n<summary><strong>What is
        an HTML element?</strong></summary>\n\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n\n</details>\n<details>\n<summary><strong>What is
        an HTML tag?</strong></summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nSo far, you've organized your content
        into paragraphs.  Another way HTML allows you to organize your code is by
        using **headings**.  A heading is a short piece of text that goes at the top
        of a section of content, like a title.\n\nDo This:\n\n-   Find the headings
        in the web page below and use the Inspector Tool to see the code that makes
        them.\n-   Make sure you and your partner agree on what the tags do.\n-   Change
        the code so that \"Drawing\" and \"2 years\" match the headings on the rest
        of the page."
      CSD U2 Heading Demo_2018: |-
        # Heading

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        **Apa itu Heading?**

        </summary>
        Heading adalah bagian judul yang berbeda ukuran sepanjang halaman web. Heading menambahkan struktur di halaman web anda dengan memisahkannya sehingga pengguna lebih mudah membaca.
        </details>
        <details>

        **Bagaimana Saya Membuat Heading Berbeda Ukuran?**

        </summary>
        Heading tersedia dalam 6 ukuran berbeda. Sejauh ini terutama anda menggunakan yang paling besar: &lt;h1&gt;. Nomor '1' dalam desain tag HTML adalah  heading yang paling besar.
        Heading yang terkecil adalah &lt;h6&gt;. Anda juga bisa mencoba tag &lt;h2&gt;,&lt;h3&gt;, &lt;h4&gt;, dan &lt;h5&, yang semakin kecil karena jumlahnya yang semakin besar.
        </h1>
        </details>
        <details>
        <summary>

        \*\* Apa  HTML Itu?\*\*

        </summary>
        HTML adalah singkatan dari Hypertext Markup Language. HTML digunakan untuk menambah struktur konten pada sebuah halaman web. HTML menggunakan tag untuk menentukan dimana beberapa struktur mulai dan selesai. Tag tag tersebut diset dalam karakter yang tidak ditemukan dalam bahasa inggris sehingga konten dan strukturnya bisa jadi berbeda.
        </details>
        <details>
        <summary>

        **Apakah Elemen Sebuah HTML?**

        </summary>
        Sebuah elemen HTML adalah bagian dari website yang ditandai dengan tag mulai dan terkadang ditutup dengan tag selesai.Elemen juga termasuk konten didalam tag. Contohnya:
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png" style="width:500px">
        </details>
        <details>
        <summary>

        \*\* Apa Tag HTML Itu?\*\*

        </summary>
        Sebuah tag HTML adalah set khusus dari karakter yang memberitahu mesin dimana sebuah elemen HTML mulai dan selesai dan apa jenisnya.

        </details>
        </div>

        Sejauh ini,anda sudah mengelola konten ke dalam paragrap. Cara lain HTML mengizinkan anda mengelola kode adalah dengan menggunakan **heading**. Sebuah heading adalah teks singkat yang ada dibagian atas konten,seperti sebuah judul.

        Lakukan Ini

        \-Carilah heading di halaman web bagian bawah dan gunakan Inspector Tool melihat kode yang membuatnya.
        \-Pastikan anda dan teman anda setuju pada tag apa yang dilakukan.
        \-Ubah kode sehingga "Drawing" dan "2 years" sesuai dengan heading di akhir halaman.
      CSD U2 Heading Demo_2019: "# Headings\n\n<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n:::
        details [**What are headings?**]\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so it's easier for a user to read.\n:::\n\n::: details [**How do I make
        different sized headings?**]\nHeadings come in 6 different sizes. So far you
        have primarily used the biggest one: `<h1>`. The number '1' in the HTML tag
        designates that this is the biggest heading. The smallest heading is `<h6>`.
        You can also try the `<h2>`, `<h3>`, `<h4>`, and `<h5>` tags, which get smaller
        as the number gets larger.\n:::\n\n::: details [**What is HTML?**]\nHTML stands
        for Hypertext Markup Language. HTML is used to add structure to the content
        of a web page. HTML uses tags to specify where certain structures start and
        end. These tags are sets of characters not found in the English language so
        that the content and structure can be differentiated. \n:::\n\n::: details
        [**What is an HTML element?**]\nAn HTML element is a piece of a website that
        is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n:::\n\n::: details [**What is an HTML tag?**]\n\nAn
        HTML tag is the special set of characters that tells the machine where the
        start or end of an HTML element is and what type it is.\n\n:::\n\n</div>\n\nSo
        far, you've organized your content into paragraphs.  Another way HTML allows
        you to organize your code is by using **headings**.  A heading is a short
        piece of text that goes at the top of a section of content, like a title.\n\n#
        Do This:\n\n-   Find the headings in the web page below and use the Inspector
        Tool to see the code that makes them.\n-   Make sure you and your partner
        agree on what the tags do.\n-   Change the code so that \"Drawing\" and \"2
        years\" match the headings on the rest of the page."
      CSD U2 Heading Sizes: "# Heading Sizes\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>What are headings?</strong>\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong>\n\n</summary>\nHeadings come
        in 6 different sizes.  The most common heading is &lt;h1&gt; The number 1
        in the HTML tag designates that this is the biggest heading. The smallest
        heading is &lt;h6&gt;. You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;,
        and &lt;h5&gt; tags which get smaller as the number gets larger.\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong>\n\n</summary>\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n</details>\n<details>\n<summary><strong>What is an
        HTML element?</strong>\n\n</summary>\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary><strong>What is an
        HTML tag?</strong>\n\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nHeadings can come in different sizes.
        \ In this page, there are six different sized headings, but they are all mixed
        up.  Can you and your partner figure out how to fix them?\n\nDo This:\n\n-
        \  Use the inspector tool to figure out what makes the headings different
        sizes\n-   Make sure you and your partner agree on what the different heading
        tags do.\n-   Change the tags so that the headings are in order from biggest
        to smallest, and the text says the correct size, as in the picture below.
        \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Sizes_2018: "# Heading Sizes\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n\n**What are headings?**\n\n</summary>\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so its easier for a user to read.\n</details>\n<details>\n<summary>\n\n**How
        do I make different sized headings?**\n\n</summary>\nHeadings come in 6 different
        sizes.  The most common heading is &lt;h1&gt; The number 1 in the HTML tag
        designates that this is the biggest heading. The smallest heading is &lt;h6&gt;.
        You can also try the &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, and &lt;h5&gt; tags
        which get smaller as the number gets larger.\n</details>\n<details>\n<summary>\n\n**What
        is HTML?**\n\n</summary>\nHTML stands for Hypertext Markup Language. HTML
        is used to add structure to the content of a web page. HTML uses tags to specify
        where certain structures start and end. These tags are sets of characters
        not found in the English language so that the content and structure can be
        differentiated. \n</details>\n<details>\n<summary>\n\n**What is an HTML element?**\n\n</summary>\nAn
        HTML element is a piece of a website that is marked by a start tag and sometimes
        closed with an end tag. The element also includes the content inside the tags.
        For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n</details>\n<details>\n<summary>\n\n**What is an HTML
        tag?**\n\n</summary>\n\nAn HTML tag is the special set of characters that
        tells the machine where the start or end of an HTML element is and what type
        it is.\n\n</details>\n</div>\n\nHeadings can come in different sizes.  In
        this page, there are six different sized headings, but they are all mixed
        up.  Can you and your partner figure out how to fix them?\n\nDo This:\n\n-
        \  Use the inspector tool to figure out what makes the headings different
        sizes\n-   Make sure you and your partner agree on what the different heading
        tags do.\n-   Change the tags so that the headings are in order from biggest
        to smallest, and the text says the correct size, as in the picture below.
        \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Sizes_2019: "# Heading Sizes\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\">\n\n::: details [**What are headings?**]\nHeadings
        are the different sized section titles throughout a web page. Headings add
        structure to your web page by breaking it up so it's easier for a user to
        read.\n:::\n\n::: details [**How do I make different sized headings?**]\nHeadings
        come in 6 different sizes.  The most common heading is `<h1>` The number 1
        in the HTML tag designates that this is the biggest heading. The smallest
        heading is `<h6>`. You can also try the `<h2>`, `<h3>`, `<h4>`, and `<h5>`
        tags which get smaller as the number gets larger.\n:::\n\n::: details [**What
        is HTML?**]\nHTML stands for Hypertext Markup Language. HTML is used to add
        structure to the content of a web page. HTML uses tags to specify where certain
        structures start and end. These tags are sets of characters not found in the
        English language so that the content and structure can be differentiated.
        \n:::\n\n::: details [**What is an HTML element?**]\nAn HTML element is a
        piece of a website that is marked by a start tag and sometimes closed with
        an end tag. The element also includes the content inside the tags. For example:
        \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n:::\n\n::: details [**What is an HTML tag?**]\n\nAn
        HTML tag is the special set of characters that tells the machine where the
        start or end of an HTML element is and what type it is.\n\n:::\n\n</div>\n\nHeadings
        can come in different sizes.  In this page, there are six different sized
        headings, but they are all mixed up.  Can you and your partner figure out
        how to fix them?\n\nDo This:\n\n-   Use the inspector tool to figure out what
        makes the headings different sizes\n-   Make sure you and your partner agree
        on what the different heading tags do.\n-   Change the tags so that the headings
        are in order from biggest to smallest, and the text says the correct size,
        as in the picture below. \n\n<img src=\"https://images.code.org/762022f97a355dd63dce5ecc8d0127aa-image-1493161154608.58.15
        PM.png\" style=\"width:100px; float:left\">"
      CSD U2 Heading Test: "# Headings and Paragraphs\n\n<div style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What is a paragraph element?</strong>\n</summary>\n\nParagraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs
        in HTML can be any length of text from one word to a bunch of sentences. All
        of your text in your web page should be contained in an HTML element (headings
        or paragraphs). Paragraphs group together sets of sentences and put some space
        between that group of text and the next group of text.\n\n</details>\n<details>\n<summary><strong>How
        do I create multiple paragraphs?</strong>\n</summary>\n\nParagraphs are marked
        by opening(`<p>`) and closing(`</p>`) tags as well. To create more than one
        paragraph you will want multiple sets of opening and closing `<p>` tags. For
        example\n\n<pre>\n&lt;p&gt;\n  This is a paragraph.\n&lt;/p&gt;\n&lt;p&gt;\n
        \ This is another paragraph.\n&lt;/p&gt;\n</pre>\n\n</details>\n<details>\n<summary><strong>What
        are headings?</strong>\n</summary>\n\nHeadings are the different sized section
        titles throughout a web page. Headings add structure to your web page by breaking
        it up so its easier for a user to read.\n\n</details>\n<details>\n<summary><strong>How
        do I make different sized headings?</strong>\n</summary>\n\nHeadings come
        in 6 different sizes. So far you have primarily used the biggest one \\<h1>.
        The number 1 in the HTML tag designates that this is the biggest heading.
        The smallest heading is \\<h6>. You can also try the \\<h2>, \\<h3>, \\<h4>,
        and \\<h5> tags which get smaller as the number gets larger.\n\n</details>\n<details>\n<summary><strong>What
        is HTML?</strong>\n</summary>\n\nHTML stands for Hypertext Markup Language.
        HTML is used to add structure to the content of a web page. HTML uses tags
        to specify where certain structures start and end. These tags are sets of
        characters not found in the English language so that the content and structure
        can be differentiated. \n\n</details>\n<details>\n<summary><strong>What is
        an HTML element?</strong>\n</summary>\n\nAn HTML element is a piece of a website
        that is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example:\n\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n\n</details>\n<details>\n<summary><strong>What is
        an HTML tag?</strong>\n</summary>\n\nAn HTML tag is the special set of characters
        that tells the machine where the start or end of an HTML element is and what
        type it is.\n\n</details>\n</div>\n\nThe author of this page added in a lot
        of content, but did not think about structure.  All of the text is mashed
        together.\n\nDo This:\n\n-   Look through the content with your partner and
        decide what you think the best structure should be.\n-   Use your heading
        and paragraph tags to code the structure into the page."
      CSD U2 Heading Test_2018: |-
        # Heading dan Paragrap

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong> apa elemen paragrap itu? </strong></summary>

        Paragrap ditandai dengan  tag pembukaan ('<p>') dan penutupan ('</p>') juga. Paragrap dalam HTML bisa berapapun panjangnya teks  dari sebuah kata. Seluruh teks dalam halaman web anda harus terkandung dalam sebuah elemenHTML (heading atau paragrap). Kelompok paragrap bersama menyusun kalimat dan memberi beberapa jarak antara kelompok teks dan kelompok teks berikutnya.

        </details>
        <details>
        <summary>

        <strong> Bagaimana saya membuat paragrap ganda?</strong>

        </summary>
        Paragrap ditandai dengan tag pembukaan ('<p>') dan penutupan('</p>') juga.Untuk membuat lebih dari satu paragrap anda akan menginginkan penyusun ganda dari tag pembukaan dan penutupan. Contohnya:
        <pre>
        &lt;p&gt;
        Ini adalah sebuah paragrap
        &lt;/p&gt;
        &lt;p&gt;
        Ini adalah paragrap yang lain
        &lt;/p&gt;

        </pre>
        </details>
        <details>
        <summary>
        </strong> Apakah heading itu? <strong>
        </summary>
        Heading adalah bagian judul yang berbeda ukuran sepanjang halaman web. Heading menambahkan struktur pada halaman web anda dengan memisahkannya sehingga pengguna lebih mudah membaca.
        </details>
        <details>
        <summary>
        <strong> Bagaimana saya membuat ukuran heading berbeda? </strong>
        </summary>
        Heading tersedia dalam 6ukuran berbeda. Hingga kini terutama anda menggunakan ukuran paling besar &lt;h1&gt;.Angka 1dalam tag HTML adalah heading paling besar.Heading terkecil adalah &lt;h6&gt;.Anda juga bisa mencoba tag &lt;h2&gt;,&lt;h3&gt;,&lt;h4&gt;,dan&lt;h5&gt;, yang semakin kecil karena angka semakin besar.
        </details>
        <details>
        <summary>
        <strong> Apakah HTML itu? </strong>
        </summary>
        HTML singkatan dari Hypertext Markup Language. HTML digunakan untuk menambah struktur pada konten dari sebuah halaman web. HTML menggunakan tag untuk menentukan dimana struktur mulai dan selesai.Tag tersebut disusun dalam karakter yang tidak ditemukan dalam bahasa inggris sehingga konten dan struktur bisa berbeda.
        </details>
        <details>
        <summary>
        <strong> Apa Elemen HTML? </strong>
        </summary>
        Sebuah elemen HTML adalah bagian dari website yang ditandai dengan sebuah tag mulai dan kadang ditutup dengan tag selesai. Elemennya juga termasuk konten di dalam tag. Contoh:
        <img src="https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png" style="width:500px">
        </details>
        <details>
        <summary>
        <strong> Apa tag HTML?</strong>
        </summary>
        Sebuah tag HTML adalah set khusus dari karakter yang memberitahu mesin dimana mulai dan selesai dari elemen HTML dan apa jenisnya.
        </details>
        </div>

        Lakukan Ini:
        \-Periksa konten dengan teman anda dan putuskan struktur yang terbaik menurut anda
        \-Gunakan tag heading dan paragrap untuk kode struktur menuju halaman.
      CSD U2 Heading Test_2019: "# Headings and Paragraphs\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\">\n\n::: details [**What is a paragraph element?**]\n\nParagraphs
        are marked by opening(`<p>`) and closing(`</p>`) tags as well. Paragraphs
        in HTML can be any length of text from one word to a bunch of sentences. All
        of your text in your web page should be contained in an HTML element (headings
        or paragraphs). Paragraphs group together sets of sentences and put some space
        between that group of text and the next group of text.\n\n:::\n\n::: details
        [**How do I create multiple paragraphs?**]\n\nParagraphs are marked by opening
        (`<p>`) and closing (`</p>`) tags as well. To create more than one paragraph
        you will want multiple sets of opening and closing `<p>` tags. For example\n\n
        \       <p>\n            This is a paragraph.\n        </p>\n        <p>\n
        \           This is another paragraph.\n        </p>\n\n:::\n\n::: details
        [**What are headings?**]\nHeadings are the different sized section titles
        throughout a web page. Headings add structure to your web page by breaking
        it up so it's easier for a user to read.\n:::\n\n::: details [**How do I make
        different sized headings?**]\nHeadings come in 6 different sizes. So far you
        have primarily used the biggest one \\<h1>. The number 1 in the HTML tag designates
        that this is the biggest heading. The smallest heading is \\<h6>. You can
        also try the \\<h2>, \\<h3>, \\<h4>, and \\<h5> tags which get smaller as
        the number gets larger.\n:::\n\n::: details [**What is HTML?**]\nHTML stands
        for Hypertext Markup Language. HTML is used to add structure to the content
        of a web page. HTML uses tags to specify where certain structures start and
        end. These tags are sets of characters not found in the English language so
        that the content and structure can be differentiated. \n:::\n\n::: details
        [**What is an HTML element?**]\nAn HTML element is a piece of a website that
        is marked by a start tag and sometimes closed with an end tag. The element
        also includes the content inside the tags. For example: \n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\"
        style=\"width:500px\">\n:::\n\n::: details [**What is an HTML tag?**]\n\nAn
        HTML tag is the special set of characters that tells the machine where the
        start or end of an HTML element is and what type it is.\n\n:::\n\n</div>\n\nThe
        author of this page added in a lot of content, but did not think about structure.
        \ All of the text is mashed together.\n\nDo This:\n\n-   Look through the
        content with your partner and decide what you think the best structure should
        be.\n-   Use your heading and paragraph tags to code the structure into the
        page."
      CSD U2 Image Tag 1: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Images\n\nA Dog vs Cat web page has
        been started for you. The dog image has already been added to the below web
        page. Use an image tag to add the `cat.jpeg` image to the page below the cat
        heading."
      CSD U2 Image Tag 1_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How do I add images?</strong>
        </summary>

        The `<img>` tag allows you to show images on your web page. <br><br>

        Example:

        <pre>&lt;img src="dog.png" alt="dog jumping"/&gt;</pre><br><br>

        In order to tell the browser which file to use, extra information, called an **attribute**, is added to the \<img> tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>

        In addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesn’t load or for people who have trouble with their eyesight. <br><br>

        An `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag. To mark this we put the `/` which usually goes in the close tag at the end of the image tag.

        </details>
        <details>
        <summary>
        <strong>Why does an image tag not have a closing tag?</strong>
        </summary>
        An image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.
        </details>
        <details>
        <summary>
        <strong>What is an attribute?</strong>
        </summary>

        Attributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag.

        For example \<img> tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.

        </details>
        </div>

        # Images

        A Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Use an image tag to add the `cat.jpeg` image to the page below the cat heading.
      CSD U2 Image Tag 1_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How do I add images?**]

        The `<img>` tag allows you to show images on your web page. <br><br>

        Example:

            <img src="dog.png" alt="dog jumping">

        In order to tell the browser which file to use, extra information, called an **attribute**, is added to the <img> tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and tell the name of the image. Image files names include extensions which tell the computer which type of image they are working with. Common extensions are .jpg, .jpeg, .png. <br><br>

        In addition to have the src attribute, image elements also have the `alt` attribute which describe the image. This is important in case the image doesn’t load or for people who have trouble with their eyesight. <br><br>

        An `<img>` tag is an example of a  **self-closing tag** because it starts and closes in one tag.

        :::

        ::: details [**Why does an image tag not have a closing tag?**]
        An image tag doesn't need a closing tag because there is no text content which must be wrapped in tags. The content that shows on the screen is specified through the tags attributes.
        :::

        ::: details [**What is an attribute?**]

        Attributes are extra information included in a tag.  Attributes have names and values. The name tells what type of information is being provided and then the value gives the specific information for that tag.

        For example `<img>` tags have two attributes, src and alt. src specifies the name of the image file and alt tells the browser in readable text what the image is.

        :::

        </div>

        # Images

        A Dog vs Cat web page has been started for you. The dog image has already been added to the below web page. Look at the code that made the dog image appear, then use an image tag to add the `cat.jpeg` image to the page below the cat heading.

        This image was found at pixabay and was uploaded by the user "Alexas\_Fotos", who used a "free for commercial use" and "no attribution required" license.
      CSD U2 Image Tag 2: "<div style=\"float: right; height: 250px; width: 40%; overflow-y:
        scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload
        images that you've found elsewhere using the **Add Image** button. Go find
        an image of a different type of pet that you like and download it to your
        computer (using right-click \"Save As\").\n\nOnce you have your images, click
        ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2018: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Uploading Images\n\nYou can upload
        images that you've found elsewhere using the **Add Image** button. Go find
        an image of a different type of pet that you like and download it to your
        computer (using right-click \"Save As\").\n\nOnce you have your images, click
        ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag 2_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page.\n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# Uploading Images\n\nYou can upload images
        that you've found elsewhere using the **Add Image** button. Go find an image
        of a different type of pet that you like and download it to your computer
        (using right-click \"Save As\").\n\nOnce you have your images, click ![](<https://images.code.org/c35789d00e59b0dbe42879390dabf925-image-1493240590385.01.49
        PM.png>) and upload the image from your computer into your project, where
        you can then use it in your page.\n\n# Do This\n\n-   Upload at least one
        image into this web page\n-   Use the `<img>` tag to display the image(s)
        in your website.\n-   Make sure to add an `alt` attribute."
      CSD U2 Image Tag Attribution: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong></summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong></summary>\n\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong></summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Attribution_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page. \n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# Giving Credit\n\nWhen using a Creative
        Commons licensed image, you need to give credit to the original creator (this
        is also called _attribution_). There are lots of ways to provide attribution,
        but the easiest way is to add text below the image that identifies the creator
        and website it came from.\n\n# Do This\n\nIn this page we've already added
        and attributed an image of a frog. Use the Creative Commons search engine
        to find another image of an amphibian. Add your found image to this page,
        along with proper attribution, including:\n\n-   The name of the creator (if
        available)\n-   The website it was found on (e.g. commons.wikimedia.org)\n-
        \  The license it was published under (e.g. CC-BY)"
      CSD U2 Image Tag Debug: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary><strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\n\nAn image
        tag doesn't need a closing tag because there is no text content which must
        be wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n\n</details>\n<details>\n<summary><strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        do I add images?</strong>\n</summary>\n\nThe `<img>` tag allows you to show
        images on your web page. <br><br>\n\nExample:\n\n<pre>&lt;img src=\"dog.png\"
        alt=\"dog jumping\"/&gt;</pre><br><br>\n\nIn order to tell the browser which
        file to use, extra information, called an **attribute**, is added to the \\<img>
        tag inside the brackets. The attribute `src` stands for **s**ou**rc**e and
        tell the name of the image. Image files names include extensions which tell
        the computer which type of image they are working with. Common extensions
        are .jpg, .jpeg, .png. <br><br>\n\nIn addition to have the src attribute,
        image elements also have the `alt` attribute which describe the image. This
        is important in case the image doesn’t load or for people who have trouble
        with their eyesight. <br><br>\n\nAn `<img>` tag is an example of a  **self-closing
        tag** because it starts and closes in one tag. To mark this we put the `/`
        which usually goes in the close tag at the end of the image tag.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does an image tag not have a closing tag?</strong>\n</summary>\nAn image tag
        doesn't need a closing tag because there is no text content which must be
        wrapped in tags. The content that shows on the screen is specified through
        the tags attributes.\n</details>\n<details>\n<summary>\n<strong>What is an
        attribute?</strong>\n</summary>\n\nAttributes are extra information included
        in a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example \\<img> tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n</details>\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Image Tag Debug_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How do I add images?**]\n\nThe `<img>` tag
        allows you to show images on your web page.\n\nExample:\n\n    <img src=\"dog.png\"
        alt=\"dog jumping\">\n\nIn order to tell the browser which file to use, extra
        information, called an **attribute**, is added to the <img> tag inside the
        brackets. The attribute `src` stands for **s**ou**rc**e and tell the name
        of the image. Image files names include extensions which tell the computer
        which type of image they are working with. Common extensions are .jpg, .jpeg,
        .png. <br><br>\n\nIn addition to have the src attribute, image elements also
        have the `alt` attribute which describe the image. This is important in case
        the image doesn’t load or for people who have trouble with their eyesight.
        <br><br>\n\nAn `<img>` tag is an example of a  **self-closing tag** because
        it starts and closes in one tag.\n:::\n\n::: details [**Why does an image
        tag not have a closing tag?**]\nAn image tag doesn't need a closing tag because
        there is no text content which must be wrapped in tags. The content that shows
        on the screen is specified through the tags attributes.\n:::\n\n::: details
        [**What is an attribute?**]\n\nAttributes are extra information included in
        a tag.  Attributes have names and values. The name tells what type of information
        is being provided and then the value gives the specific information for that
        tag. \n\nFor example `<img>` tags have two attributes, src and alt. src specifies
        the name of the image file and alt tells the browser in readable text what
        the image is.\n\n:::\n\n</div>\n\n# The Details Matter\n\nThe `src` attribute
        needs to point to the _exact_ filename of the image you want to use. That
        means you need to pay attention to spelling, capitalization, and the file
        extension. Each of the three images on this page is broken because of an improper
        `src` attribute. Using the file menu for reference, fix each of the image
        tags.\n\n_Note: Even though the images are not loading properly, our website
        is still showing descriptive text of what should be there because we used
        `alt` attributes. Cool!_"
      CSD U2 Info Page Final Touches: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        <h2>
        Checklist
        </h2>

        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Ensure that your image is properly licensed</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Upload image into Web Lab</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Create an image tag with a descriptive alt attribute</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">If the image isn't your own, add attribution underneath<br/>

        </div>

        # Adding Images to Your Site

        You've already created some pages with great content on your website, now you can add some images!

        # Do This

        Using either your own images or those found through a Commons Search, add some images to the pages you've already created. Get creative! Use the checklist to the right to keep track of the steps you need to follow when adding images.
      CSD U2 Info Page Final Touches_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        <h2>
        Checklist
        </h2>

        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Ensure that your image is properly licensed</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Upload image into Web Lab</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Create an image tag with a descriptive alt attribute</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">If the image isn't your own, add attribution underneath<br/>

        </div>

        # Adding Images to Your Site

        You've already created some pages with great content on your website, now you can add some images!

        # Do This

        Using either your own images or those found through a Commons Search, add some images to the pages you've already created. Get creative! Use the checklist to the right to keep track of the steps you need to follow when adding images.
      CSD U2 Info Page Final Touches_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        <h2>
        Checklist
        </h2>

        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Ensure that your image is properly licensed</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Upload image into Web Lab</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">Create an image tag with a descriptive alt attribute</span>
        <input type="checkbox" style="float: left"><span style="display: block; margin-left: 20px; margin-bottom: 10px">If the image isn't your own, add attribution underneath<br/>

        </div>

        # Adding Images to Your Site

        You've already created some pages with great content on your website, now you can add some images!

        # Do This

        Using either your own images or those found through a Commons Search, add some images to the pages you've already created. Get creative! Use the checklist to the right to keep track of the steps you need to follow when adding images.
      CSD U2 Inspector Warm Up: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>
        <summary><strong> Bagaimana saya menggunakan inspektor Tool? </strong>

        </summary>
        Inspektor Tool adalah cara yang bagus untuk belajar lebih tentang kode yang tidak biasa di Web Lab. Untuk ke Inspektor Tool,klik<img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png" style="width:100px">.Anda akan tahu bahwasanya Inspektor Tool yang membuat tombol berubah putih dan berkata "Inspektor: On". Sekali anda menghidupkan Inspektor Tool anda bisa menunggu diarea preview dan Web Lab akan menyoroti kode yang dibuat adalah bagian tampilan halaman.

        </details>
        </div>

        # Eksplor HTML

        Halaman web ini ditulis dalam HTML, bahasa web. Anda akan belajar lebih tentang cara kerjanya,tapi pertama tama eksplor dengan Inspektor Tool.

        # Lakukan Ini

        -   klik tip"bagaimana saya menggunakan Inspektor Tool?", dengan benar bagaimana saya menggunakan Inspektor Tool.
            \-Ikuti perintah di halaman web untuk memeriksa halaman web dan diskusikan dengan teman bagaimana ini bekerja.
      CSD U2 Inspector Warm Up_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px"><strong>
        <summary>
        <strong><span> bagaimana saya menggunakan alat inspektor </span></strong>
        </summary>

        Inspektor Tool adalah cara yang bagus untuk belajar lebih tentang kode yang tidak biasa di Web Lab.Untuk ke Inspektor Tool,klik<img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png" style="width:100px"> Anda akan tahu bahwa Inspektor Tool adalah yang menyebabkan tombol menjadi putih dan berkata "Inspektor: On".
        Sekali anda menghidupkan Inspektor Tool,anda bisa menunggu di area preview dan Web Lab akan menyoroti kode yang dibuat adalah bagian dari tampilan halaman.

        </details>
        </div>

        # Memeriksa HTML

        Halaman web ini ditulis dalam HTML, bahasa web. Anda akan belajar lebih tentang bagaimana ini bekerja, tapi pertama tama periksa ini dengan Inspektor Tool.

        # Lakukan Ini

        -   Klik Tip " Bagaimana saya menggunakan Inspektor Tool?" dengan benar untuk belajar bagaimana menggunakan Inspektor Tool.
        -   Ikuti instruksi di halaman web untuk memeriksa halaman web dan diskusikan dengan teman bagaimana ini bekerja.
      CSD U2 Inspector Warm Up_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary>
        <strong><span> How do I use the Inspector Tool? </span></strong>
        </summary>

        The Inspector Tool is a great way to learn more about unfamiliar code in Web Lab. To turn on the Inspector Tool, click <img src="https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png" style="width:100px">. You will know that the Inspector Tool is on because the button will turn white and say "Inspector: On". Once you turn on the Inspector Tool, you can hover over anything in the preview area and Web Lab will highlight the code that is making that part of the page appear.

        </details>
        </div>

        # Explore HTML

        This is a web page written in HTML, the language of the web. You'll learn more about how it works, but first explore it by using the Inspector Tool.

        # Do This

        -   Click the Tip "How do I use the Inspector Tool?" on the right to learn how to use the Inspector Tool.
        -   Follow the instructions in the web page to explore the web page and discuss with a partner how it is working.
      CSD U2 Pair Programming Video_2019: |-
        ## Pertanyaan untuk dipertimbangkan

        -   Mengapa anda berfikir programer profesional menggunakan programming ganda?
        -   Bagaimana menurut anda bahwa programming ganda akan membantu anda untuk program yang lebih baik?
      CSD U2 Project Start: |-
        # Start Your Project

        Now that you have a plan for your personal website, you can start coding it here.  Don't worry if you can't do everything you want today.  You'll have plenty of chances to improve your work as you learn more about developing websites.

        # Do This

        -   Use HTML to create the page that you sketched out.  Make sure it includes
            -   At least **two headings of different sizes**
            -   At least **one paragraph**
        -   **Reflect** on your page by comparing to your sketch and showing it to your partner
      CSD U2 Project Start_2018: |-
        # Start Your Project

        Now that you have a plan for your personal website, you can start coding it here.  Don't worry if you can't do everything you want today.  You'll have plenty of chances to improve your work as you learn more about developing websites.

        # Do This

        -   Use HTML to create the page that you sketched out.  Make sure it includes
            -   At least **two headings of different sizes**
            -   At least **one paragraph**
        -   **Reflect** on your page by comparing to your sketch and showing it to your partner
      CSD U2 Project Start_2019: |-
        # Start Your Project

        Now that you have a plan for your personal website, you can start coding it here.  Don't worry if you can't do everything you want today.  You'll have plenty of chances to improve your work as you learn more about developing websites.

        # Do This

        -   Use HTML to create the page that you sketched out.  Make sure it includes
            -   At least **two headings of different sizes**
            -   At least **one paragraph**
        -   **Reflect** on your page by comparing to your sketch and showing it to your partner
      CSD U2 RGB intro: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB intro_2018: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        <p>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </p> </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB intro_2019: |-
        # RGB Colors

        All colors, whether they have names or not, can be described by the level of red, green, and blue light it takes to make them.  This is called an RGB value (short for Red-Green-Blue).  You can use the widget on your left to try out different RGB values and see what colors they make.

        -   **Click "Run" to start the widget on the left,** and use the sliders to adjust the levels of red, green, and blue light.
        -   For each of the colors below, match it to its RGB value.

        A) red: 216, green: 191, blue: 216 - rgb(216,191,216)

        B) red: 255, green: 239, blue: 213 - rgb(255,239,213)

        C) red: 250, green: 128, blue: 114 - rgb(250,128,114)

        D) red: 70, green: 130, blue: 180 - rgb(70, 130, 180)

        E) red: 107, green: 142, blue: 35 - rgb(107,142,35)

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        <p>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </p> </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        <p>
        You can make over sixteen million different colors with RGB color mixing.
        </p>

        </details>
        </div>
      CSD U2 RGB others: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Where can I see the whole range of color types?</strong></summary>
        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp">W3Schools - HTML Color Picker</a></details>
        <details>
        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB others_2018: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Where can I see the whole range of color types?</strong>
        </summary>

        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML Color Picker</a>

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB others_2019: |-
        # Spring and Autumn Colors

        Choose RGB values for spring and autumn colors.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you find a spring color you like, then write down the values on your activity guide.
        -   Do the same for an autumn color.   You will need the RGB values for the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Where can I see the whole range of color types?</strong>
        </summary>

        You can find many options for colors at <a href="http://www.w3schools.com/colors/colors_picker.asp" target="_new">W3Schools - HTML Color Picker</a>

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB summer: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB summer_2018: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB summer_2019: |-
        # Summer Color

        Find the RGB values for a summery yellow color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the summery yellow at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB winter: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary><strong>How do I make a color lighter?</strong></summary>
        <p>To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.</p></details>
        <details>
        <summary><strong>Why do red and green make yellow?</strong></summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary><strong>How many colors can I make with RGB color mixing?</strong></summary>

        <p>You can make make over sixteen million different colors with RGB color mixing.</p>

        </details>
        </div>
      CSD U2 RGB winter_2018: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>How do I make a color lighter?</strong>
        </summary>

        To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 RGB winter_2019: |-
        # Winter Color

        In the next few levels, you'll be finding seasonal colors for a website.  Here, you'll need to find the RGB values for a wintery blue color.

        -   Click "Run" to start the widget.
        -   Adjust the levels until you match the wintery blue color at the bottom of the widget.
        -   Write the RGB values on your activity guide.  You will need them in the next activity.

        <div style="font-size: 16px">
        <br />
        <details>

        <summary>
        <strong>How do I make a color lighter?</strong>
        </summary>

        To make a color lighter, you need to add more light (increase the level of the slider).  If you have already added the maximum amount of blue light, you will need to add more red and green light to make your blue lighter.

        </details>
        <details>
        <summary>
        <strong>Why do red and green make yellow?</strong>
        </summary>

        When you mix paint, red and green make brown, but RGB color mixing uses light instead of paint, so the colors mix differently.  RGB uses _additive color mixing_.  In additive color mixing, red and green make yellow, red and blue make magenta, and blue and green make cyan.  When you mix the three primary colors together (red, green, and blue), they make white.  You can read more at <a href="https://en.wikipedia.org/wiki/Additive_color" target="_new">Wikipedia - Additive Color</a>

        </details>
        <details>
        <summary>
        <strong>How many colors can I make with RGB color mixing?</strong>
        </summary>

        You can make make over sixteen million different colors with RGB color mixing.

        </details>
        </div>
      CSD U2 add content: |-
        # Add HTML

        Next, you should add the HTML to your pages.

        # Do This

        -   For each of the new pages that you've created, add HTML to make the page you sketched in your project guide.
        -   You may also add more HTML to the pages you've already created.
      CSD U2 add content_2018: |-
        # Add HTML

        Next, you should add the HTML to your pages.

        # Do This

        -   For each of the new pages that you've created, add HTML to make the page you sketched in your project guide.
        -   You may also add more HTML to the pages you've already created.
      CSD U2 add content_2019: |-
        # Add HTML

        Next, you should add the HTML to your pages.

        # Do This

        -   For each of the new pages that you've created, add HTML to make the page you sketched in your project guide.
        -   You may also add more HTML to the pages you've already created.
      CSD U2 add file: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is a style sheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        <details>
        <summary><strong>How do I create a new style sheet?</strong></summary>
        To create a new style sheet, click on the "Add CSS" button above the code area.
        </details>
        <details>
        <summary><strong>What should I name my style sheet?</strong></summary>

        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.

        </details>
        <details>
        <summary><strong>How do I rename a file?</strong></summary>

        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.

        </details>
        <details>
        <summary><strong>How do I add a style sheet to a web page?</strong></summary>

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        </details>
        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add file_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        <details>
        <summary>
        <strong>How do I create a new style sheet?</strong>
        </summary>
        To create a new style sheet, click on the "Add CSS" button above the code area.
        </details>
        <details>
        <summary>
        <strong>What should I name my style sheet?</strong>
        </summary>
        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.
        </details>
        <details>
        <summary>
        <strong>How do I rename a file?</strong>
        </summary>
        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.
        </details>
        <details>
        <summary>
        <strong>How do I add a style sheet to a web page?</strong>
        </summary>

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        </details>
        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add file_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.
        :::

        ::: details [**How do I create a new style sheet?**]
        To create a new style sheet, click on the "Add CSS" button above the code area.
        :::

        ::: details [**What should I name my style sheet?**]
        You can name your style sheet anything, but it's better to choose a relevant name, such as "style.css" or "aboutmestyles.css" so that it's clear what the file is.  Your file should always end in the ".css" extension.
        :::

        ::: details [**How do I rename a file?**]
        To rename a file, you can right click (or control click) on the file name and choose the "Rename" option.  This will allow you to type in a new file name.  Clicking on a file name after it is already highlighted will also allow you to rename the file.
        :::

        ::: details [**How do I add a style sheet to a web page?**]

        To add a style sheet to a web page, open up the code for the web page.  Inside the head tag, add the following code `<link rel="stylesheet" href="style.css">`.  Then change "style.css" to the name of your style sheet.

        :::

        </div>

        # Adding a Style Sheet

        This is your project from before.  In the next level, you'll have a chance to add some different styles to it, but first, you need to add a style sheet, name it, and link it to your html page.

        1.  Create a new style sheet for your project.
        2.  Rename the style sheet file.
        3.  Add your style sheet to your HTML page.

        <img src="https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png" style=" max-width:500px">
      CSD U2 add style_2019: |-
        # Coba!

        Sekarang anda sudah melihat berbagai cara berbeda untuk gaya/ ragam, saatnya untuk mencoba sendiri! Ini adalah sebuah halaman web yang pernah anda lihat sebelumnya, tapi ini memerlukan gaya/ragam.

        # Lakukan Ini

        \-Beri webpage warna latar belakang
        \-Letakkan beberapa ruang/jarak  disekitar gambar
        \-Buat seluruh teks dalam warna berbeda
        \-Tambahkan beberapa gaya yang anda mau.
      CSD U2 challenge: |-
        # Challenge

        Check with your teacher before starting on this challenge.

        This page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.

        # Do This

        -   Look at the code and with your partner and discuss what the page should look like.
        -   Work together to finish the page, paying attention to formatting.
        -   Compare with another pair to see whether your pages are the same.
      CSD U2 challenge_2018: |-
        # Challenge

        Check with your teacher before starting on this challenge.

        This page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.

        # Do This

        -   Look at the code with your partner and discuss what the page should look like.
        -   Work together to finish the page, paying attention to formatting.
        -   Compare with another pair to see whether your pages are the same.
      CSD U2 challenge_2019: |-
        # Challenge

        Check with your teacher before starting on this challenge.

        This page is only partially finished, and it has some bugs.  Luckily, there are comments that should help you to finish the page as the author intended.

        # Do This

        -   Look at the code with your partner and discuss what the page should look like.
        -   Work together to finish the page, paying attention to formatting.
        -   Compare with another pair to see whether your pages are the same.
      CSD U2 classes modify: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>

        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        </details>
        <details>
        <summary>
        <strong>I got different RGB values, but mine are right, too.</strong>

        </summary>

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        </details>
        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>

        <summary>
        <strong>What rules can be added to a class rule-set?</strong>
        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        </details>
        <details>
        <summary>
        <strong>I got different RGB values, but mine are right, too.</strong>
        </summary>

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        </details>
        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes modify_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        For the code to work, you need to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

            .winter {
              color: rgb(195,230,255);
            }

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.
        :::

        ::: details [**What rules can be added to a class rule-set?**]

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        :::

        ::: details [**Why does the selector have a period in front of it?**]
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        :::

        ::: details [**Why would a web developer use classes?**]
        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.
        :::

        ::: details [**I got different RGB values, but mine are right, too.**]

        Because RGB creates millions of different colors, some are so similar that people have a hard time telling them apart.  That means that there are multiple RGB values that are close enough to work for our winter color.

        :::

        </div>

        # Adding Rules

        Your winter words should all have the same color and font.

        -   Find the CSS rule-set in the style sheet that gives the winter words their style.
        -   Add a rule that changes the font of the winter words.  It can be any font, but it will need to be different from that of the other three seasons.
        -   Add any other rules you'd like for your winter words.
      CSD U2 classes sample: "<div style=\"float: right; height: 250px; width: 40%;
        overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nFor the code to work, you need to
        both create a winter class and add elements to the class.\n\nThe class is
        created in the style sheet, with the following code.\n\n<pre>.winter {\n  color:
        rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and
        makes everything in the class our winter blue, which has the RGB values of
        (195,230,255).\n\nThe code that adds a `h5` element to the winter class is
        `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything
        inside the tag to the class.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does the selector have a period in front of it?</strong>\n\n</summary>\nIn
        CSS, a period in front of a selector means that the selector is the name of
        a class.  If there is no period, it means that the selector is the name of
        an HTML tag.\n</details>\n<details>\n<summary>\n<strong>Why would a web developer
        use classes?</strong>\n\n</summary>\nA web developer uses classes when some
        elements should be styled differently than others, even if they are the same
        tag.  Classes can also be used to give elements that have different tags the
        same style.\n</details>\n<details>\n<summary>\n<strong>I got different RGB
        values, but mine are right, too.</strong>\n\n</summary>\n\nBecause RGB creates
        millions of different colors, some are so similar that people have a hard
        time telling them apart.  That means that there are multiple RGB values that
        are close enough to work for our winter color.\n\n</details>\n</div>\n\n#
        Classes\n\nIn this page, the web developer has used classes to give some of
        the words our winter color.\n\n-   Look at the HTML code for the winter words.
        \ Why is \"snowy\" the only winter word without the winter color?\n-   Add
        code to the HTML that will give \"snowy\" the same winter blue as the other
        words.\n-   Look inside the style sheet to find the rule that makes all the
        words in the winter class blue, and check whether your RGB numbers are close
        to the ones in the style sheet.  \n-   Discuss with your partner how the code
        works."
      CSD U2 classes sample_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nFor the code to work, you need to
        both create a winter class and add elements to the class.\n\nThe class is
        created in the style sheet, with the following code.\n\n<pre>.winter {\n  color:
        rgb(195,230,255);\n}</pre>\n\nThis code creates a class called `winter` and
        makes everything in the class our winter blue, which has the RGB values of
        (195,230,255).\n\nThe code that adds a `h5` element to the winter class is
        `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag adds everything
        inside the tag to the class.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does the selector have a period in front of it?</strong>\n</summary>\nIn CSS,
        a period in front of a selector means that the selector is the name of a class.
        \ If there is no period, it means that the selector is the name of an HTML
        tag.\n</details>\n<details>\n<summary>\n<strong>Why would a web developer
        use classes?</strong>\n</summary>\nA web developer uses classes when some
        elements should be styled differently than others, even if they are the same
        tag.  Classes can also be used to give elements that have different tags the
        same style.\n</details>\n<details>\n<summary>\n<strong>I got different RGB
        values, but mine are right, too.</strong>\n</summary>\n\nBecause RGB creates
        millions of different colors, some are so similar that people have a hard
        time telling them apart.  That means that there are multiple RGB values that
        are close enough to work for our winter color.\n\n</details>\n</div>\n\n#
        Classes\n\nIn this page, the web developer has used classes to give some of
        the words our winter color.\n\n-   Look at the HTML code for the winter words.
        \ Why is \"snowy\" the only winter word without the winter color?\n-   Add
        code to the HTML that will give \"snowy\" the same winter blue as the other
        words.\n-   Look inside the style sheet to find the rule that makes all the
        words in the winter class blue, and check whether your RGB numbers are close
        to the ones in the style sheet.  \n-   Discuss with your partner how the code
        works."
      CSD U2 classes sample_2019: "<div class=\"no-pullthrough\" style=\"float: right;
        height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How does the code work?**]\nFor the code
        to work, you need to both create a winter class and add elements to the class.\n\nThe
        class is created in the style sheet, with the following code.\n\n    .winter
        {\n      color: rgb(195,230,255);\n    }\n\nThis code creates a class called
        `winter` and makes everything in the class our winter blue, which has the
        RGB values of (195,230,255).\n\nThe code that adds a `h5` element to the winter
        class is `<h5 class=\"winter\">`.  The `class=winter` inside the opening tag
        adds everything inside the tag to the class.\n:::\n\n::: details [**Why does
        the selector have a period in front of it?**]\nIn CSS, a period in front of
        a selector means that the selector is the name of a class.  If there is no
        period, it means that the selector is the name of an HTML tag.\n:::\n\n:::
        details [**Why would a web developer use classes?**]\nA web developer uses
        classes when some elements should be styled differently than others, even
        if they are the same tag.  Classes can also be used to give elements that
        have different tags the same style.\n:::\n\n::: details [**I got different
        RGB values, but mine are right, too.**]\n\nBecause RGB creates millions of
        different colors, some are so similar that people have a hard time telling
        them apart.  That means that there are multiple RGB values that are close
        enough to work for our winter color.\n\n:::\n\n</div>\n\n# Classes\n\nIn this
        page, the web developer has used classes to give some of the words our winter
        color.\n\n-   Look at the HTML code for the winter words.  Why is \"snowy\"
        the only winter word without the winter color?\n-   Add code to the HTML that
        will give \"snowy\" the same winter blue as the other words.\n-   Look inside
        the style sheet to find the rule that makes all the words in the winter class
        blue, and check whether your RGB numbers are close to the ones in the style
        sheet.  \n-   Discuss with your partner how the code works."
      CSD U2 classes spring: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>

        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes spring_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

        <pre>.spring {
          color: rgb(195,230,255);
        }</pre>

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.

        </details>
        <details>
        <summary>
        <strong>What rules can be added to a class rule-set?</strong>
        </summary>

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes spring_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        For the code to work, you need to both create a spring class and add elements to the class.

        The spring class is already created in the style sheet, but it doesn't have any rules.

            .spring {
              color: rgb(195,230,255);
            }

        Look at the rules in the `winter` class for clues to how to make rules for the summer class.

        You will also need to add some elements to the spring class inside your HTML file.

        The code in the HTML file that adds a `h5` element to the winter class is `<h5 class="winter">`.  Use this pattern to add elements to the spring class, too.
        :::

        ::: details [**What rules can be added to a class rule-set?**]

        A class rule-set can have the same rules as any other type of selector.  If a rule does not apply to the content of the class (for example, using `font-size` on an element with no text), then the computer will ignore that rule, but still use the rules that work.
        :::

        ::: details [**Why does the selector have a period in front of it?**]
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        :::

        ::: details [**Why would a web developer use classes?**]

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        :::

        </div>

        # Spring Class

        Now that your winter class is ready, you can start on the other seasons.

        -   Find the empty CSS rule-set in the style sheet that gives the spring words their style.
        -   Add two rules, one to give the text your spring color for earlier in the lesson, and another to give the text a different font, font size, or decoration.
        -   Add the spring class to the spring elements in the HTML page.
      CSD U2 classes summer: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>

        </summary>
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>How do I create a new rule-set?</strong>

        </summary>
        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.
        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        The selector name and the color values will be different, but the following pattern is always the same.

        <pre>.classname {
          property1: value1;
          property2: value2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>

        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>

        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 classes summer_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.

        </details>
        <details>
        <summary>
        <strong>How do I create a new rule-set?</strong>
        </summary>

        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.

        <pre>.winter {
          color: rgb(195,230,255);
        }</pre>

        The selector name and the color values will be different, but the following pattern is always the same.

        <pre>.classname {
          property1: value1;
          property2: value2;
        }</pre>

        </details>
        <details>
        <summary>
        <strong>Why does the selector have a period in front of it?</strong>
        </summary>
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        </details>
        <details>
        <summary>
        <strong>Why would a web developer use classes?</strong>
        </summary>

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        </details>
        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 classes summer_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        For the code for the winter class to work, it needs to both create a winter class and add elements to the class.

        The class is created in the style sheet, with the following code.

            .winter {
              color: rgb(195,230,255);
            }

        This code creates a class called `winter` and makes everything in the class our winter blue, which has the RGB values of (195,230,255).

        The code that adds a `h5` element to the winter class is `<h5 class="winter">`.  The `class=winter` inside the opening tag adds everything inside the tag to the class.
        :::

        ::: details [**How do I create a new rule-set?**]

        You can create a new rule-set by following the pattern that the `winter` and `spring` classes used in the style sheet.

            .winter {
              color: rgb(195,230,255);
            }

        The selector name and the color values will be different, but the following pattern is always the same.

            .classname {
              property1: value1;
              property2: value2;
            }

        :::

        ::: details [**Why does the selector have a period in front of it?**]
        In CSS, a period in front of a selector means that the selector is the name of a class.  If there is no period, it means that the selector is the name of an HTML tag.
        :::

        ::: details [**Why would a web developer use classes?**]

        A web developer uses classes when some elements should be styled differently than others, even if they are the same tag.  Classes can also be used to give elements that have different tags the same style.

        :::

        </div>

        # Summer and Autumn Classes

        -   Inside the style sheet, create a new rule-set for a "summer" class.
        -   Add a rule to set the text in the summer class to your summer RGB color.
        -   Add the summer class to the summer elements in the HTML page.
        -   Do the same for the autumn class.
      CSD U2 commenting: |-
        # Comments

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong></summary>

        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.

        </details>
        <details>
        <summary>
        <strong>What is indentation?</strong>
        </summary>
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary>
        <strong>What is formatting?</strong>
        </summary>

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        </div>

        You can add **comments** to your code to explain the different parts of the code and what it should create.  Comments can help you to debug, and will also help other people who are trying to understand your code.

        <pre>
        &lt;!-- this is a comment --&gt;
        </pre>

        # Do This

        -   Look at the code with your partner and find the comments.
        -   Use the comments to help you fix the bugs in the HTML.
      CSD U2 commenting_2018: |-
        # Comments

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What is whitespace?</strong></summary>
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        </details>
        <details>
        <summary><strong>What is indentation?</strong></summary>
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:
        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>
        </details>
        <details>
        <summary><strong>What is formatting?</strong></summary>

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

        <pre>
           &lt;body&gt;
              &lt;p&gt;This paragraph is inside the "body" element.&lt;/p&gt;
           &lt;/body&gt;
        </pre>

        </details>
        </div>

        You can add **comments** to your code to explain the different parts of the code and what it should create.  Comments can help you to debug, and will also help other people who are trying to understand your code.

        <pre>
        &lt;!-- this is a comment --&gt;
        </pre>

        # Do This

        -   Look at the code with your partner and find the comments.
        -   Use the comments to help you fix the bugs in the HTML.
      CSD U2 commenting_2019: |-
        # Comments

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What is whitespace?**]
        Whitespace refers to any character that shows up as a blank space on the screen, such as a space, a tab, or a new line. Whitespace helps separate different parts of the document to make it easier to read.  For example, in HTML code new elements are usually put on a new line, even though it doesn't make any difference in how the page is displayed.
        :::

        ::: details [**What is indentation?**]
        Indentation is the placement of text farther to the right, or left, to separate it from surrounding text.  Indentation helps to convey the program's structure.  In HTML, elements that are inside other elements are usually indented.  Here is an example:

               <body>
                  <p>This paragraph is inside the "body" element.</p>
               </body>

        :::

        ::: details [**What is formatting?**]

        Formatting is arranging text in a way that makes it easier to understand.  HTML is usually formatted using indentation.  That means that elements that are inside other elements are further to the right in code.  Here is an example:

               <body>
                  <p>This paragraph is inside the "body" element.</p>
               </body>

        :::

        </div>

        You can add **comments** to your code to explain the different parts of the code and what it should create.  Comments can help you to debug, and will also help other people who are trying to understand your code.

            <!-- this is a comment -->

        # Do This

        -   Look at the code with your partner and find the comments.
        -   Use the comments to help you fix the bugs in the HTML.
      CSD U2 create page: |-
        # Create and Name Your New Page

        Before you start coding, you should make sure that you have all the pages that you need in your project.

        # Do This

        -   Create a new HTML page and rename it. (Look at <a href="/s/csd2-2017/stage/6/puzzle/8" target="_new">Lesson 6 Level 8</a> if you've forgotten how.)
        -   Repeat this process for any other pages you want to add.
      CSD U2 create page_2018: |-
        # Create and Name Your New Page

        Before you start coding, you should make sure that you have all the pages that you need in your project.

        # Do This

        -   Create a new HTML page and rename it. (Look at <a href="../../../stage/6/puzzle/8" target="_new">Lesson 6 Level 8</a> if you've forgotten how.)
        -   Repeat this process for any other pages you want to add.
      CSD U2 create page_2019: |-
        # Create and Name Your New Page

        Before you start coding, you should make sure that you have all the pages that you need in your project.

        # Do This

        -   Create a new HTML page and rename it. (Look at <a href="../../../stage/6/puzzle/8" target="_new">Lesson 6 Level 8</a> if you've forgotten how.)
        -   Repeat this process for any other pages you want to add.
      CSD U2 header footer: |-
        # Navigation Bar and Footer

        Each of your pages needs a navigation bar and a footer.

        # Do This

        -   For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href="/s/csd2-2017/stage/9/puzzle/4" target="_new">Lesson 9 Level 4</a>.
        -   For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative Commons</a> for help in creating this HTML.)
      CSD U2 header footer_2018: |-
        # Navigation Bar and Footer

        Each of your pages needs a navigation bar and a footer.

        # Do This

        -   For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href="4" target="_new">Lesson 9 Level 4</a>.
        -   For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative Commons</a> for help in creating this HTML.)
      CSD U2 header footer_2019: |-
        # Navigation Bar and Footer

        Each of your pages needs a navigation bar and a footer.

        # Do This

        -   For each page, make sure it has a navigation bar that links to other pages in your site.  For a review of the navigation bar, go to <a href="4" target="_new">Lesson 9 Level 4</a>.
        -   For each page, make sure it has a footer at the bottom that explains the copyright information for your page. (Go to <a href="https://creativecommons.org/choose/" target="_new">Creative Commons</a> for help in creating this HTML.)
      CSD U2 layout style bgcolor: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the background of the page blue:

        <pre>body {
          background-color: lightblue;
        }</pre>

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.
                </details>
                <details>
                <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>What does the `background-color` property do?</strong></summary>

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary><strong>What if an element inside the page has a different background color from the body?</strong></summary>

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style bgcolor_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the background of the page blue:

        <pre>
        body {
          background-color: lightblue;
        }
        </pre>

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.

        </details>
        <details>
        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary>
        <strong>What does the background-color property do?</strong>
        </summary>

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp" target="_new">W3Schools - CSS background-color Property</a>

        </details>
        <details>
        <summary>
        <strong>What if an element inside the page has a different background color from the body?</strong>
        </summary>

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>
        h2 {
          color: blue;
          font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style bgcolor_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is making the background of the page blue:

            body {
              background-color: lightblue;
            }

        -   `body` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the body element is the entire page.
        -   `background-color: lightblue;` is the rule that makes the entire page light blue.
            -   `background-color` is the _property_.  It explains what the rule is about, in this case the color of the background.
            -   `lightblue` is the _value_.  It explains how the rule should be applied, in this case making the background light blue.

        :::

        ::: details [**What colors can I use in CSS?**]

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        :::

        ::: details [**What does the background-color property do?**]

        The `background-color` property determines the color of the background of an element.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_background-color.asp" target="_new">W3Schools - CSS background-color Property</a>

        :::

        ::: details [**What if an element inside the page has a different background color from the body?**]

        You can see the answer to this question by adding a `background-color` rule to the `p` tag.  The paragraphs will have the background color in the rule for the `p` tag, and the rest of the page will follow the rule for the `body` tag.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
              color: blue;
              font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Background Color

        -   Find the code in the style sheet that is making the background of the entire page light blue.
        -   Change the code to make the page a different color.
        -   Try to change the background color of just the paragraphs.
      CSD U2 layout style body: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">
        <details>

        <summary><strong>What does the `body` selector do?</strong></summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary><strong>What does the `color` property do?</strong></summary>

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary><strong>What does the `text-align` property do?</strong></summary>

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary><strong>What does the `text-decoration` property do?</strong></summary>

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary><strong>What does the `font-family` property do?</strong></summary>

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary><strong>What does the `font-size` property do?</strong></summary>

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style body_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What does the body selector do?</strong>
        </summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary>
        <strong>What does the color property do?</strong>
        </summary>

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the text-align property do?</strong>
        </summary>

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the text-decoration property do?</strong>
        </summary>

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the font-family property do?</strong>
        </summary>

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the font-size property do?</strong>
        </summary>

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>

        </details>
        <details>
        <summary>
        <strong>What is a stylesheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>
        h2 {
           color: blue;
           font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style body_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What does the body selector do?**]

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        :::

        ::: details [**What does the color property do?**]

        The `color` property specifies the color of the text.  If there’s no text, it won’t do anything. Read more at <a href="http://www.w3schools.com/cssref/pr_text_color.asp" target="_new"> W3Schools - CSS color Property</a>

        :::

        ::: details [**What does the text-align property do?**]

        The `text-align` property aligns the text to the left, right, or center. You can read more at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        :::

        ::: details [**What does the text-decoration property do?**]

        The `text-decoration` property puts a line over, under, or through a piece of text.  You can read more about the property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>

        :::

        ::: details [**What does the font-family property do?**]

        The `font-family` property changes the font of the text.  It gives a general description of the type of font that should be used, but each browser might display the font slightly differently.  Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-family.asp" target="_new">W3chools - CSS font-family Property</a>

        :::

        ::: details [**What does the font-size property do?**]

        The `font-size` property changes the size of the text.  You can use general terms, such as `small`, `medium`, and `large`, or you can specify the exact size in pixels, such as `20px`. Read more at <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp" target="_new">W3Schools - CSS font-size Property</a>

        :::

        ::: details [**What is a stylesheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # The Body Element

        -   Find the `body` rule-set in the style sheet.
        -   Discuss with a partner what you think will happen if you add `text-align`, `color`, or other text properties to the `body` rule set.
        -   Try out some different properties to check your guesses.
      CSD U2 layout style border: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary><strong>What does the <code>border-style</code> property do?</strong></summary>

        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the <code>border-radius</code> property do?</strong></summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the <code>float</code> property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style border_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>
        </details>
        <details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-style</code> property do?</strong>
            </summary>
            The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-radius</code> property do?</strong>
            </summary>
            The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>float</code> property do?</strong>
            </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style border_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What colors can I use in CSS?**]
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>
        :::

        ::: details [**How does the code work?**]
        Here is the code that is making the image borders:

            img {
              border-color: saddlebrown;
              border-width: 4px;
              border-style: solid;
              border-radius: 10px;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            :::

        ::: details [**What does the <code>border-style</code> property do?**]
        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
        :::

        ::: details [**What does the <code>border-radius</code> property do?**]
        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
        :::

        ::: details [**What does the `float` property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Borders

        -   Find the rules in the style sheet that set image borders color and width.
        -   Change the color and width of your borders.
        -   Try out some different border styles.
            -   Choose from `dotted`, `dashed`, `solid`, and `double`
        -   Put a border on another type of page element, such as one of the headings or the paragraphs.
      CSD U2 layout style borderradius: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary><strong>What does the `border-style` property do?</strong>
            </summary>

        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the <code>border-radius</code>code> property do?</strong>

        </summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the <code>float</code> property do?</strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image borders:

        <pre>img {
          border-color: saddlebrown;
          border-width: 4px;
          border-style: solid;
          border-radius: 10px;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-style</code> property do?</strong>
            </summary>
            The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>border-radius</code> property do?</strong>
            </summary>
            The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
            </details>
            <details>
            <summary>
            <strong>What does the <code>float</code> property do?</strong>
            </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style borderradius_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**How does the code work?**]
        Here is the code that is making the image borders:

            img {
              border-color: saddlebrown;
              border-width: 4px;
              border-style: solid;
              border-radius: 10px;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `border-color: saddlebrown;`,`border-width: 4px;`,`border-style: solid;`, and `border-radius: 10px;` are the rules that make the border.
            :::

        ::: details [**What does the <code>border-style</code> property do?**]
        The `border-style` property determines what kind of border (solid, dotted, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>
        :::

        ::: details [**What does the <code>border-radius</code> property do?**]
        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>
        :::

        ::: details [**What does the <code>float</code> property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Border Radius

        -   Look at the `border-radius` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Try different values for border radius and decide which one you like the best.
      CSD U2 layout style float: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is making the image float on the left hand side of the page:

        <pre>img {
          float: left;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            </details>
            <details>
            <summary><strong>What does the <code>float</code> property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style float_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>
        Here is the code that is making the image float on the left hand side of the page:

        <pre>img {
          float: left;
        }</pre>

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            </details>
            <details>
            <summary>
            <strong>
            What does the <code>float</code> property do?

        </strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style float_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]
        Here is the code that is making the image float on the left hand side of the page:

            img {
              float: left;
            }

        -   `img` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces, in this case, the images.
        -   `float: left;` is the rule that makes the image float to the left.
            :::

        ::: details [**What does the `float` property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Float

        -   Look at the `float` property inside your `img` rule-set
        -   Discuss with your partner what you think the property does.
        -   Change the value from `left` to `right`.
      CSD U2 layout style freeplay: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2018: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style freeplay_2019: |-
        # Personal Web Site

        Try out some of these new CSS properties on your personal web site.

        -   Add styling of your choice to your web site. Be sure to use at least three new CSS properties.

        # Checklist

        -   At least three of the following CSS Properties are used:

            -   `background-color`
            -   `height`
            -   `width`
            -   `border-style`
            -   `border-radius`
            -   `border-width`
            -   `float`
            -   `margin`

        We encourage you to use more than three, though!  Explore additional CSS properties and add them to your page.
      CSD U2 layout style margin: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        does the code work?</strong></summary>\n\nHere is the code that is putting
        extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n-   `margin:
        10px;` is the rule that puts 10 pixels of space around the image.\n    </details>\n
        \   <details>\n    <summary><strong>What does the `margin` property do?</strong></summary>\n\nThe
        `margin` property determines how much space will be around the image.  Most
        of the time, you will define in the margin in pixels.  You can read more about
        this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\">W3Schools
        - CSS margin Property</a>\n\n</details>\n<details>\n<summary><strong>What
        does `px` mean / What is a pixel?</strong></summary>\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n</details>\n</div>\n\n# Margin\n\nMargins specify
        how much space should be around an element.\n\n-   Find the `margin` property
        in the `img` rule-set.\n-   Change the margin to be larger, and discuss the
        effect with a partner.\n-   Choose another element type and give it a margin,
        too."
      CSD U2 layout style margin_2018: "<div style=\"float: right; height: 250px;
        width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\nHere is the code that is putting
        extra space around the images:\n\n<pre>img {\n\tmargin: 10px;\n}</pre>\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n\n-   `margin:
        10px;` is the rule that puts 10 pixels of space around the image.\n    </details>\n
        \   <details>\n    <summary>\n    <strong>What does the `margin` property
        do?</strong>\n    </summary>\n\nThe `margin` property determines how much
        space will be around the image.  Most of the time, you will define in the
        margin in pixels.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\"
        target=\"_new\">W3Schools - CSS margin Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does `px` mean / What is a pixel?</strong>\n</summary>\n\nPixel, which is
        abbreviated `px`, is how elements are measured in CSS.  It’s the size of a
        single point of light on the screen.\n\n</details>\n</div>\n\n# Margin\n\nMargins
        specify how much space should be around an element.\n\n-   Find the `margin`
        property in the `img` rule-set.\n-   Change the margin to be larger, and discuss
        the effect with a partner.\n-   Choose another element type and give it a
        margin, too."
      CSD U2 layout style margin_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n\n::: details [**How does the code work?**]\nHere is the
        code that is putting extra space around the images:\n\n    img {\n    \tmargin:
        10px;\n    }\n\n-   `img` is the _selector_.  It specifies which elements
        will have to follow the rules inside the curly braces, in this case, the images.\n\n-
        \  `margin: 10px;` is the rule that puts 10 pixels of space around the image.\n
        \   :::\n\n::: details [**What does the `margin` property do?**]\n\nThe `margin`
        property determines how much space will be around the image.  Most of the
        time, you will define in the margin in pixels.  You can read more about this
        property at <a href=\"http://www.w3schools.com/cssref/pr_margin.asp\" target=\"_new\">W3Schools
        - CSS margin Property</a>\n:::\n\n::: details [**What does `px` mean / What
        is a pixel?**]\n\nPixel, which is abbreviated `px`, is how elements are measured
        in CSS.  It’s the size of a single point of light on the screen.\n\n:::\n\n</div>\n\n#
        Margin\n\nMargins specify how much space should be around an element.\n\n-
        \  Find the `margin` property in the `img` rule-set.\n-   Change the margin
        to be larger, and discuss the effect with a partner.\n-   Choose another element
        type and give it a margin, too."
      CSD U2 layout style sample: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What does the `body` selector do?</strong></summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary><strong>What does the `border-style` property do?</strong></summary>

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary><strong>What does the `border-radius` property do?</strong></summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary><strong>What does the `float` property do?</strong></summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style sample_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What does the body selector do?</strong>
        </summary>

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        </details>
        <details>
        <summary>
        <strong>What does the border-style property do?</strong>
        </summary>

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>

        </details>
        <details>
        <summary>
        <strong>What does the border-radius property do?</strong>
        </summary>

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>

        </details>
        <details>
        <summary>
        <strong>What does the float property do?</strong>
        </summary>

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        </details>
        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style sample_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What does the body selector do?**]

        Because the content of the web page is all inside the `body` tag, the body selector gives style rules for everything on the web page.

        :::

        ::: details [**What does the border-style property do?**]

        The `border-style` property determines what kind of border (solid, dotted, dashed, etc.) the element has.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_border-style.asp" target="_new">W3Schools - CSS border-style Property</a>

        :::

        ::: details [**What does the border-radius property do?**]

        The `border-radius` property determines the radius of the curves at the corners of the element.  A bigger radius makes a bigger, softer curve, and a smaller radius makes a smaller, sharper curve.  A radius of zero makes a regular corner.  You can read more about this property at <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp" target="_new">W3Schools - CSS3 border-radius property</a>

        :::

        ::: details [**What does the float property do?**]

        The `float` property makes an element "float", meaning that the elements that come after it all flow around it.  If the `float` value is `left`, the element will float to the left, and the elements after it will show up on its right.  If the `float` value is `right`, the element will float to the right, and the elements after it will show up on its left.  You can read more about this property at <a href="http://www.w3schools.com/cssref/pr_class_float.asp" target="_new">W3Schools - CSS float Property</a>

        :::

        </div>

        # Layout and Style

        -   Look through web page below for new styles.
        -   Open the style sheet
        -   With your partner, discuss which parts of the CSS code you think are making the page appear different.
            -   What makes the entire page blue?
            -   How are the images positioned to the left of all the other elements?
            -   What made the image corners rounded?

        In the next few levels, you'll be changing and adding new styles on this page.
      CSD U2 layout style width: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary><strong>How
        does the code work?</strong></summary>\nHere is the code that is making the
        image its current size:\n\n<pre>img {\n\twidth: 250px;\n}</pre>\n\n-   `img`
        is the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces, in this case, the images.\n-   `width: 250px` is
        the rule that makes the image 250 pixels wide.  It also changes the height
        so that the image does not stretch.\n    </details>\n    <details>\n    <summary><strong>What
        does the `width` property do?</strong></summary>\n\nThe `width` property determines
        how wide the element will be.  Most of the time, you will define in the width
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the width will also change the height so that the image
        does not stretch, unless you have also defined the height.  You can read more
        about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\">W3Schools
        - CSS width Property</a>\n\n</details>\n<details>\n<summary><strong>What does
        the `height` property do?</strong></summary>\n\nThe `height` property determines
        how tall the element will be.  Most of the time, you will define in the height
        in pixels, which makes the element take up an exact amount of space on the
        screen.  Defining the height will also change the width so that the image
        does not stretch, unless you have also defined the width.  You can read more
        about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\">W3Schools
        - CSS width Property</a>\n\n</details>\n<details>\n<summary><strong>What does
        `px` mean / What is a pixel?</strong></summary>\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n</details>\n<details>\n<summary><strong>Why does
        using a width and height rule at the same time sometimes stretch out the image?</strong></summary>\n\nWhen
        the width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\n\n</details>\n</div>\n\n#
        Width and Height\n\n-   Find the property in the style sheet that controls
        the width of the images.\n-   Change the width of the images to be larger
        or smaller.\n-   Create a new rule with a `height` property to control the
        height of the images.\n-   Use the `width` property in the `p` rule-set to
        change the width of your paragraphs."
      CSD U2 layout style width_2018: "<div style=\"float: right; height: 250px; width:
        40%; overflow-y: scroll; margin-left: 20px; font-size:14px\" markdown=\"1\">\n<details>\n\n<summary>\n<strong>How
        does the code work?</strong>\n</summary>\n\nHere is the code that is making
        the image its current size:\n\n    img {\n    \twidth: 250px;\n    }\n\n-
        \  `img` is the _selector_.  It specifies which elements will have to follow
        the rules inside the curly braces, in this case, the images.\n-   `width:
        250px` is the rule that makes the image 250 pixels wide.  It also changes
        the height so that the image does not stretch.\n\n</details>\n<details>\n<summary>\n<strong>What
        does the <code>width</code> property do?</strong>\n</summary>\n\nThe `width`
        property determines how wide the element will be.  Most of the time, you will
        define the width in pixels, which makes the element take up an exact amount
        of space on the screen.  Defining the width will also change the height so
        that the image does not stretch, unless you have also defined the height.
        \ You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\"
        target=\"_new\">W3Schools - CSS width Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does the <code>height</code> property do?</strong>\n</summary>\n\nThe `height`
        property determines how tall the element will be.  Most of the time, you will
        define the height in pixels, which makes the element take up an exact amount
        of space on the screen.  Defining the height will also change the width so
        that the image does not stretch, unless you have also defined the width.  You
        can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\"
        target=\"_new\">W3Schools - CSS height Property</a>\n\n</details>\n<details>\n<summary>\n<strong>What
        does <code>px</code> mean / What is a pixel?</strong>\n</summary>\n\nPixel,
        which is abbreviated `px`, is how elements are measured in CSS.  It’s the
        size of a single point of light on the screen.\n\n</details>\n<details>\n<summary>\n<strong>Why
        does using a width and height rule at the same time sometimes stretch out
        the image?</strong>\n</summary>\n\nWhen the width of an images changes, the
        height must change by the same percentage, otherwise the image will stretch.
        \ For example, if you double the width of an image, you must also double the
        height, or the image will be stretched horizonally.  When you only define
        the width or the height, the computer will automatically change the other
        property so that the image looks the same.\n\n</details>\n</div>\n\n# Width
        and Height\n\n-   Find the property in the style sheet that controls the width
        of the images.\n-   Change the width of the images to be larger or smaller.\n-
        \  Create a new rule with a `height` property to control the height of the
        images.\n-   Use the `width` property in the `p` rule-set to change the width
        of your paragraphs."
      CSD U2 layout style width_2019: "<div class=\"no-pullthrough\" style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n:::
        details [**How does the code work?**]\n\nHere is the code that is making the
        image its current size:\n\n    img {\n    \twidth: 250px;\n    }\n\n-   `img`
        is the _selector_.  It specifies which elements will have to follow the rules
        inside the curly braces, in this case, the images.\n-   `width: 250px` is
        the rule that makes the image 250 pixels wide.  It also changes the height
        so that the image does not stretch.\n\n:::\n\n::: details [**What does the
        `width` property do?**]\n\nThe `width` property determines how wide the element
        will be.  Most of the time, you will define the width in pixels, which makes
        the element take up an exact amount of space on the screen.  Defining the
        width will also change the height so that the image does not stretch, unless
        you have also defined the height.  You can read more about this property at
        <a href=\"http://www.w3schools.com/cssref/pr_dim_width.asp\" target=\"_new\">W3Schools
        - CSS width Property</a>\n\n:::\n\n::: details [**What does the `height` property
        do?**]\n\nThe `height` property determines how tall the element will be.  Most
        of the time, you will define the height in pixels, which makes the element
        take up an exact amount of space on the screen.  Defining the height will
        also change the width so that the image does not stretch, unless you have
        also defined the width.  You can read more about this property at <a href=\"http://www.w3schools.com/cssref/pr_dim_height.asp\"
        target=\"_new\">W3Schools - CSS height Property</a>\n\n:::\n\n::: details
        [**What does `px` mean / What is a pixel?**]\n\nPixel, which is abbreviated
        `px`, is how elements are measured in CSS.  It’s the size of a single point
        of light on the screen.\n\n:::\n\n::: details [**Why does using a width and
        height rule at the same time sometimes stretch out the image?**]\n\nWhen the
        width of an images changes, the height must change by the same percentage,
        otherwise the image will stretch.  For example, if you double the width of
        an image, you must also double the height, or the image will be stretched
        horizonally.  When you only define the width or the height, the computer will
        automatically change the other property so that the image looks the same.\n\n:::\n\n</div>\n\n#
        Width and Height\n\n-   Find the property in the style sheet that controls
        the width of the images.\n-   Change the width of the images to be larger
        or smaller.\n-   Create a new rule with a `height` property to control the
        height of the images.\n-   Use the `width` property in the `p` rule-set to
        change the width of your paragraphs."
      CSD U2 link demo: |-
        # Making a Multi-page Site

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are hyperlinks?</strong>
        </summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary><strong>How do I add a hyperlink?</strong>
        </summary>

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        A web site should include more than one web page, and they should connect to each other.   Here's an example of a project with multiple pages that are connected by hyperlinks (the blue underlined words that take you to another page when you click on them).

        # Do This

        -   Use the inspector tool to see the code that creates the hyperlinks on the top of index.html.
        -   Discuss with your partner how you think that code works.
        -   Click on recipe.html in the files list on the left hand side.  Add a hyperlink to the top of this page that will take you back to index.html.
      CSD U2 link demo_2018: |-
        # Making a Multi-page Site

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are hyperlinks?</strong></summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>

        <details>
        <summary>
        <strong>How do I add a hyperlink?</strong>
        </summary>

        You can <strong>add hyperlinks to your web page using the `<a>` element</strong>.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        A web site should include more than one web page, and they should connect to each other.   Here's an example of a project with multiple pages that are connected by hyperlinks (the blue underlined words that take you to another page when you click on them).

        # Do This

        -   Use the inspector tool to see the code that creates the hyperlinks on the top of index.html.
        -   Discuss with your partner how you think that code works.
        -   Click on recipe.html in the files list on the left hand side.  Add a hyperlink to the top of this page that will take you back to index.html.
      CSD U2 link demo_2019: |-
        # Making a Multi-page Site

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What are hyperlinks?**]

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

            <a href="houses.html"> Unique Houses </a>

        :::

        ::: details [**How do I add a hyperlink?**]

        You can <strong>add hyperlinks to your web page using the `<a>` element</strong>.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

            <a href="houses.html"> Unique Houses </a>

        :::

        </div>

        A web site should include more than one web page, and they should connect to each other.   Here's an example of a project with multiple pages that are connected by hyperlinks (the blue underlined words that take you to another page when you click on them).

        # Do This

        -   Use the inspector tool to see the code that creates the hyperlinks on the top of index.html.
        -   Discuss with your partner how you think that code works.
        -   Click on recipe.html in the files list on the left hand side.  Add a hyperlink to the top of this page that will take you back to index.html.
      CSD U2 lists intro: |-
        # Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are the two types of lists?</strong>
        </summary>
         There are two types of lists in HTML, ordered and unordered lists.
        </details>

        <details>
        <summary><strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.

        An unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.

        </details>

        <details>
        <summary><strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.

        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.

        </details>

        <details>
        <summary><strong>What is an ordered list?</strong>
        </summary>

        An ordered list is a set of bulleted items which are numbered.

        An ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.

        </details>

        <details>
        <summary><strong>How do I make an ordered list?</strong>
        </summary>

        Making an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.

        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.

        </details>
        </div>

        You can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).

        # Do This

        -   Use the inspector tool to see the code that is making the two different kinds of lists.
        -   Make sure you and your partner agree on what the different tags do.
        -   Fix the code so that the second item in each list displays correctly
      CSD U2 lists intro_2018: |-
        # Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are the two types of lists?</strong>
        </summary>
         There are two types of lists in HTML, ordered and unordered lists.
        </details>

        <details>
        <summary>
        <strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.

        An unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.

        </details>

        <details>
        <summary>
        <strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.

        </details>

        <details>
        <summary>
        <strong>What is an ordered list?</strong>
        </summary>

        An ordered list is a set of bulleted items which are numbered.

        An ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.

        </details>
        <details>
        <summary>
        <strong>How do I make an ordered list?</strong>
        </summary>

        Making an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br/>
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.

        </details>
        </div>

        You can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).

        # Do This

        -   Use the inspector tool to see the code that is making the two different kinds of lists.
        -   Make sure you and your partner agree on what the different tags do.
        -   Fix the code so that the second item in each list displays correctly
      CSD U2 lists intro_2019: |-
        # Lists

        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">

        ::: details [**What are the two types of lists?**]
         There are two types of lists in HTML, ordered and unordered lists.
        :::

        ::: details [**What is an unordered list?**]

        An unordered list is just a set of bulleted items.

        An unordered list element has the tag `<ul> </ul>`. This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list.

        :::

        ::: details [**How do I make an unordered list?**]

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul> </ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ul> </ul>` tags.
        :::

        ::: details [**What is an ordered list?**]

        An ordered list is a set of bulleted items which are numbered.

        An ordered list element has the tags `<ol> </ol>`. This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item in the list is marked by a list item element `<li> </li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the ordered list.

        :::

        ::: details [**How do I make an ordered list?**]

        Making an ordered list has two steps: making the list and adding the list items. To make the ordered list, write the ordered list tags `<ol> </ol>`. Next, add your list items **inside** the ordered list tags. To make each list item, use the list item tags `<li> </li>` and write the list item inside the tags.
        <br /><br/>
        It can be helpful to indent your `<li> </li>` tags so it's clear they are contained in the `<ol> </ol>` tags.

        :::

        </div>

        You can also use HTML to make different types of lists on your web page.  This recipe includes two different types of lists, one ordered (with numbers) and one unordered (with bullets).

        # Do This

        -   Use the inspector tool to see the code that is making the two different kinds of lists.
        -   Make sure you and your partner agree on what the different tags do.
        -   Fix the code so that the second item in each list displays correctly
      CSD U2 navigation: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are hyperlinks?</strong>
        </summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>How do I add a hyperlink?</strong>
        </summary>

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page. <br> <br>

        For example to link to the unique houses page you would add the following code inside your `<body>` element. <br><br>

        <pre>
        &lt;a href=”houses.html”&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        # Create a Navigation Bar

        Here's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">this page</a>

        # Do This

        -   In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.
            -   _Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page._
        -   Copy the code for the navigation bar, then add it to the top of your lists page.
        -   Test your links in the preview area by clicking on them.
      CSD U2 navigation_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are hyperlinks?</strong>
        </summary>

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        <details>
        <summary>
        <strong>How do I add a hyperlink?</strong>
        </summary>

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

        <pre>
        &lt;a href="houses.html"&gt; Unique Houses &lt;/a&gt;
        </pre>

        </details>
        </div>

        # Create a Navigation Bar

        Here's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">this page</a>

        # Do This

        -   In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.
            -   _Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page._
        -   Copy the code for the navigation bar, then add it to the top of your lists page.
        -   Test your links in the preview area by clicking on them.
      CSD U2 navigation_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What are hyperlinks?**]

        Hyperlinks can connect to local web pages or external web pages. To add navigation to your website you will need to add hyperlinks which connect your individual web pages. You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

            <a href="houses.html"> Unique Houses </a>

        :::

        ::: details [**How do I add a hyperlink?**]

        You can **add hyperlinks to your web page using the `<a>` element**.  The text you want to display as the hyperlink goes between the opening and closing hyperlink tags. The `<a>` element has an attribute `href` which is the location to link to.  The location of a local page is just the file path for that page.
        <br/><br/>
        For example to link to the unique houses page you would add the following code inside your `<body>` element.

            <a href="houses.html"> Unique Houses </a>

        :::

        </div>

        # Create a Navigation Bar

        Here's your project from before.  You'll be linking the two pages by creating a **navigation bar** at the top of the page.  Websites usually have the same navigation bar across all of their pages so you can get back and forth between things on the site.  You can see an example of a navigation bar on <a href="https://studio.code.org/projects/weblab/2KO4FIjN89QPeYnTG_NzLIjroaG8daOY3jRl5uHm1Co/" target="_new">this page</a>

        # Do This

        -   In your home page (index.html), add two hyperlinks at the top of the page, one to your lists page, and one to the home page.
            -   _Even though it might seem strange to link a page to itself, it's less confusing if the navigation bar is exactly the same on every page._
        -   Copy the code for the navigation bar, then add it to the top of your lists page.
        -   Test your links in the preview area by clicking on them.
      CSD U2 new page: |-
        # Create a New Page for Your Website.

        Here's your project from before.  You'll be adding another page.  Your new page can be a top 10 list, a recipe, or anything you like.

        # Do This

        -   Add a new HTML file by clicking  ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  The new file will appear in the files list on the left side of the workspace.
        -   Rename the file, either by right clicking it and choosing "Rename", or by clicking on it when it's already highlighted.  **Make sure the name is unique, descriptive and ends in ".html"**.
        -   Use HTML to fill out your new page.  It should include:
            -   a list
            -   a heading
      CSD U2 new page_2018: |-
        # Create a New Page for Your Website.

        Here's your project from before.  You'll be adding another page.  Your new page can be a top 10 list, a recipe, or anything you like.

        # Do This

        -   Add a new HTML file by clicking  ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  The new file will appear in the files list on the left side of the workspace.
        -   Rename the file, either by right clicking it and choosing "Rename", or by clicking on it when it's already highlighted.  **Make sure the name is unique, descriptive and ends in ".html"**.
        -   Use HTML to fill out your new page.  It should include:
            -   a list
            -   a heading
      CSD U2 new page_2019: |-
        # Create a New Page for Your Website.

        Here's your project from before.  You'll be adding another page.  Your new page can be a top 10 list, a recipe, or anything you like.

        # Do This

        -   Add a new HTML file by clicking  ![](<https://images.code.org/9b9f9f78962ef77664333d1b0f762ff1-image-1493252448756.19.38 PM.png>).  The new file will appear in the files list on the left side of the workspace.
        -   Rename the file, either by right clicking it and choosing "Rename", or by clicking on it when it's already highlighted.  **Make sure the name is unique, descriptive and ends in ".html"**.
        -   Use HTML to fill out your new page.  It should include:
            -   a list
            -   a heading
      CSD U2 ordered list: "# Ordered Lists\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary><strong>What are the two types of lists?</strong>\n</summary>\n
        There are two types of lists in HTML, ordered and unordered lists.\n</details>\n<details>\n<summary><strong>What
        is an ordered list?</strong>\n</summary>\n\nAn ordered list is a set of bulleted
        items which are numbered.\n\nAn ordered list element has the tag `<ol>` .
        This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`;. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the ordered list (`<ol>`).\n\n</details>\n\n<details>\n<summary><strong>How
        do I make an ordered list?</strong>\n</summary>\n\nMaking an ordered list
        has two steps: making the list and adding the list items.  To make the ordered
        list, write the ordered list tags `<ol></ol>`.  Next, add your list items
        **inside** the ordered list tags.  To make each list item, use the list item
        tags `<li></li>` and write the list item inside the tags.\n\nIt can be helpful
        to indent your `<li>` tags so it's clear they are contained in the `<ol>`
        tag.\n\n</details>\n\n<details>\n<summary><strong>Show me working code.</strong>\n</summary>\n\n<table
        border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;
        <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img
        src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nThis
        page should include an ordered list, but it's missing the list tags.\n\n#
        Do This\n\n-   Use the `<ol>` and `<li>` tags to structure this content into
        an ordered list that looks like the one below.\n\n_Hint: There will be NO
        NUMBERS in your code._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 ordered list_2018: "# Ordered Lists\n\n<div style=\"float: right; height:
        250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\"
        markdown=\"1\">\n<details>\n\n<summary>\n<strong>What are the two types of
        lists?</strong>\n</summary>\n There are two types of lists in HTML, ordered
        and unordered lists.\n</details>\n<details>\n<summary>\n<strong>What is an
        ordered list?</strong>\n</summary>\n\nAn ordered list is a set of bulleted
        items which are numbered.\n<br /><br />\nAn ordered list element has the tag
        `<ol>` . This is an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`;. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the ordered list (`<ol>`).\n\n</details>\n\n<details>\n<summary>\n<strong>How
        do I make an ordered list?</strong>\n</summary>\n\nMaking an ordered list
        has two steps: making the list and adding the list items.  To make the ordered
        list, write the ordered list tags `<ol></ol>`.  Next, add your list items
        **inside** the ordered list tags.  To make each list item, use the list item
        tags `<li></li>` and write the list item inside the tags.\n<br /><br />\nIt
        can be helpful to indent your `<li>` tags so it's clear they are contained
        in the `<ol>` tag.\n\n</details>\n\n<details>\n<summary>\n<strong>Show me
        working code.</strong>\n</summary>\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td><pre>
        &lt;ol&gt; <br>   &lt;li&gt;Step 1 &lt;/li&gt; <br>   &lt;li&gt;Step 2 &lt;/li&gt;
        <br>   &lt;li&gt;Step 3 &lt;/li&gt; <br> &lt;/ol&gt; </pre></td>\n<td><img
        src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n</details>\n</div>\n\nThis
        page should include an ordered list, but it's missing the list tags.\n\n#
        Do This\n\n-   Use the `<ol>` and `<li>` tags to structure this content into
        an ordered list that looks like the one below.\n\n_Hint: There will be NO
        NUMBERS in your code._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 ordered list_2019: "# Ordered Lists\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**What are the two
        types of lists?**]\n There are two types of lists in HTML, ordered and unordered
        lists.\n:::\n\n::: details [**What is an ordered list?**]\n\nAn ordered list
        is a set of bulleted items which are numbered.\n<br /><br />\nAn ordered list
        element has the tag `<ol>` . This is an abbreviation for <strong>O</strong>rdered
        <strong>L</strong>ist. Each item in the list is marked by a list item element
        `<li>`;. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.
        \ The list item element is a child element, which means that it goes inside
        of its parent element, the ordered list (`<ol>`).\n:::\n\n::: details [**How
        do I make an ordered list?**]\n\nMaking an ordered list has two steps: making
        the list and adding the list items.  To make the ordered list, write the ordered
        list tags `<ol></ol>`.  Next, add your list items **inside** the ordered list
        tags.  To make each list item, use the list item tags `<li></li>` and write
        the list item inside the tags.\n\nIt can be helpful to indent your `<li>`
        tags so it's clear they are contained in the `<ol>` tag.\n:::\n\n::: details
        [**Show me working code.**]\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ol>\n      <li>Step 1 </li>\n      <li>Step 2 </li>\n      <li>Step 3
        </li>\n    </ol>\n\n</td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nThis
        page should include an ordered list, but it's missing the list tags.\n\n#
        Do This\n\n-   Use the `<ol>` and `<li>` tags to structure this content into
        an ordered list that looks like the one below.\n\n_Hint: There will be NO
        NUMBERS in your code._ \n\n![](<https://images.code.org/b3186e83c3e3bd2680a1a300e5abd126-image-1493238064706.17.03
        PM.png>)"
      CSD U2 project review: |-
        # Review Your Project

        You're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.

        # Do This

        -   Check that you are comfortable sharing all the information that's on your site.
        -   Check that all of your images are correctly attributed, and that you have the right to put them on your site.
        -   Check that your project includes everything included in the project rubric.
        -   Use comments and whitespace to make your website readable.
        -   Ask your partner to help you find any potential problems with your site.
      CSD U2 project review_2018: |-
        # Review Your Project

        You're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.

        # Do This

        -   Check that you are comfortable sharing all the information that's on your site.
        -   Check that all of your images are correctly attributed, and that you have the right to put them on your site.
        -   Check that your project includes everything included in the project rubric.
        -   Use comments and whitespace to make your website readable.
        -   Ask your partner to help you find any potential problems with your site.
      CSD U2 project review_2019: |-
        # Review Your Project

        You're almost ready to publish your project, but you should check one more time that you have fulfilled all the requirements for this project.

        # Do This

        -   Check that you are comfortable sharing all the information that's on your site.
        -   Check that all of your images are correctly attributed, and that you have the right to put them on your site.
        -   Check that your project includes everything included in the project rubric.
        -   Use comments and whitespace to make your website readable.
        -   Ask your partner to help you find any potential problems with your site.
      CSD U2 project share: |-
        # Share Your Project

        It's time to share your project with the world!

        # Do This

        -   Click the ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png>) button at the top of this page.
        -   Copy the URL it gives you, and email it to the people you want to see your page.
      CSD U2 project share_2018: |-
        # Share Your Project

        It's time to share your project with the world!

        # Do This

        -   Click the ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png>) button at the top of this page.
        -   Copy the URL it gives you, and email it to the people you want to see your page.
      CSD U2 project share_2019: |-
        # Share Your Project

        It's time to share your project with the world!

        # Do This

        -   Click the ![](<https://images.code.org/26bcf1645e18ac064cf0631fb5ca023c-image-1493744000091.52.27 AM.png>) button at the top of this page.
        -   Copy the URL it gives you, and email it to the people you want to see your page.
      CSD U2 publish video: |-
        ## Pertanyaan untuk di pertimbangkan

        \-Apa yang anda pikirkan tentang tanggung jawab  anda sebagai seorang publisher website?
        \-kenapa bisa anda ingin melihat kode atau meremiks situs orang lain?
      CSD U2 text style decoration: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that makes the `h1` elements underlined:

        <pre>h1 {
          text-decoration: underline;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                </details>
                <details>
                <summary><strong>What are the possible values for text decoration?</strong></summary>
                You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp">W3Schools - CSS text-decoration Property</a>
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that makes the `h1` elements underlined:

        <pre>h1 {
          text-decoration: underline;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                </details>
                <details>
                <summary><strong>What are the possible values for text decoration?</strong></summary>
                You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
                </details>

        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>

        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style decoration_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]
        Here is the code that makes the `h1` elements underlined:

            h1 {
              text-decoration: underline;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-decoration: underline;` is the rule that makes the text inside the `h1` tag underlined.
            -   `text-decoration` is the _property_.  It explains what the rule is about, in this case where the line goes.
            -   `underline` is the _value_.  It explains how the rule should be applied, in this case making the test underlined.
                :::

        ::: details [**What are the possible values for text decoration?**]
        You can choose between "underline", "overline", and "line-through".  You can read more about the text-decoration property at <a href="http://www.w3schools.com/cssref/pr_text_text-decoration.asp" target="_new">W3Schools - CSS text-decoration Property</a>
        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a stylesheet?**]
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Underlining

        -   Find the code in the style sheet that makes the h1 tag underlined.
        -   Change the text decoration and see which one you like.
            -   Choose from "underline", "overline", and "line-through"
        -   Add a text decoration rule for the paragraph or h3 tag.
      CSD U2 text style font family: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>

        Here is the code that is controlling the paragraph font:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        </details>
        <details>
        <summary><strong>What are the possible values for font family?</strong></summary>

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a stylesheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style font family_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph font:

        <pre>p {
          font-family: cursive;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        </details>
        <details>
        <summary>
        <strong>What are the possible values for font family?</strong>
        </summary>

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp" target="_new">W3Schools - CSS Web Safe Font Combinations</a>

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a stylesheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style font family_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph font:

            p {
              font-family: cursive;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-family: cursive;` is the rule that makes the text inside the `p` tags a particular font.
            -   `font-family` is the _property_.  It explains what the rule is about, in this case the font.
            -   `cursive` is the _value_.  It explains how the rule should be applied, in this case making the text cursive.

        :::

        ::: details [**What are the possible values for font family?**]

        You can choose between "serif", "sans-serif", "cursive", "fantasy", and "monospace".  You can also try more specific fonts as described in <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp" target="_new">W3Schools - CSS Web Safe Font Combinations</a>

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the stylesheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a stylesheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Changing the Font

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the font family and choose which one you like the best.
            -   Choose from "serif", "sans-serif", "cursive", "fantasy", and "monospace"
        -   Add a font family rule for the h1 or h3 tags.
      CSD U2 text style freeplay: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style freeplay_2018: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style freeplay_2019: |-
        # Adding Styles

        Now you can style the text on your personal web site!

        -   Open your style sheet and add styling of your choice to your project. Be sure to use at least 3 different CSS properties.

        # Checklist

        -   At least 3 of the following CSS Properties are used:
            -   `font-size`
            -   `font-family`
            -   `color`
            -   `text-decoration`
            -   `text-align`

        If you’ve used at least 3 of the properties from the checklist, you can explore some additional text properties to add to your project.
      CSD U2 text style h1: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        </details><details>
        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is making the `h1` heading red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>
                The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.
                </details>
                <details>
                <summary><strong>What is a style sheet?</strong></summary>
                A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
                </details>
                <details>
                <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # CSS and Text Color

        This HTML file uses a style sheet ("style.css") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.

        -   Find the code in the style sheet (click on "style.css" in the files list) that is making the h1 heading red.
        -   Change the code for the color of the h1 heading from `red` to a different color.
      CSD U2 text style h1_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp" target="_new">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp" target="_new">W3Schools - CSS Legal Color Values</a>

        </details><details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the `h1` heading red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # CSS and Text Color

        This HTML file uses a style sheet ("style.css") to give the page a particular style.  The style sheet contains information about what each of the HTML elements should look like.

        -   Find the code in the style sheet (click on "style.css" in the files list) that is making the h1 heading red.
        -   Change the code for the color of the h1 heading from `red` to a different color.
      CSD U2 text style h1_2019: "<div class=\"no-pullthrough\" \n style=\"float:
        right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px\">\n\n:::
        details [**What colors can I use in CSS?**]\nCSS includes most common color
        names (red, blue, green, etc.), and many uncommon ones.  You can see a full
        list of CSS color names at [W3Schools - HTML Color Names](http://www.w3schools.com/colors/colors_names.asp).
        \ You can still use colors that are not included in the named list, but you
        will need to use their RGB values.  You can read more about using colors in
        CSS at [W3Schools - CSS Legal Color Values](http://www.w3schools.com/cssref/css_colors_legal.asp)\n:::\n\n:::
        details [**How does the code work?**]\nHere is the code that is making the
        `h1` heading red:\n\n    h1 {\n      color: red;\n    }\n\n-   `h1` is the
        _selector_.  It specifies which elements will have to follow the rules inside
        the curly braces.\n-   `color: red;` is the rule that makes the text inside
        the `h1` tags red.\n    -   `color` is the _property_.  It explains what the
        rule is about, in this case the text color.\n    -   `red` is the _value_.
        \ It explains how the rule should be applied, in this case making the text
        red.\n\n:::\n\n::: details [**Why do I need all the punctuation?**]\n\nThe
        punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon
        `;`, help the computer to understand the rules in the style sheet.  The curly
        braces hold all the rules for a particular selector.  Each rule should end
        in a semicolon, and the properties and values are always separated by a colon.\n\n:::\n\n:::
        details [**What is a style sheet?**]\n\nA style sheet is a document that controls
        how a web page will appear.  External style sheets are separate files that
        are linked to the HTML page.\n\n:::\n\n::: details [**What is CSS?**]\nCSS
        is a language that controls the way content on a web site appears.  It uses
        rule-sets to change the look of a page.  Each rule set has a selector, which
        specifies which elements on the page will be affected, and the rules, which
        explain how to display the elements.   Each rule consists of a property and
        a value for that property.\n\nHere’s an example of a rule-set that makes the
        text in an `h2` tag blue and cursive:\n\n    h2 {\n       color: blue;\n       font-family:
        cursive;\n    }\n\nIn this example, `h2` is the selector, `color` and `font-family`
        are properties, and `blue` and `cursive` are the values for those properties.\n:::\n\n</div>\n\n#
        CSS and Text Color\n\nThis HTML file uses a style sheet (\"style.css\") to
        give the page a particular style.  The style sheet contains information about
        what each of the HTML elements should look like.\n\n-   Find the code in the
        style sheet (click on \"style.css\" in the files list) that is making the
        h1 heading red.\n-   Change the code for the color of the h1 heading from
        `red` to a different color."
      CSD U2 text style h3: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What colors can I use in CSS?</strong></summary>

        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>

        </details>
        <details>
        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is making the `h1` header red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>How do I make a new rule-set?</strong></summary>

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.
                </details>
                <details>
                <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the h1 tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the h3 tag.
        -   Add code to set a different color for the h3 tags.
      CSD U2 text style h3_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What colors can I use in CSS?</strong>
        </summary>
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        </details>
        <details>
        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is making the `h1` header red:

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>How do I make a new rule-set?</strong>
        </summary>

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

        <pre>h1 {
          color: red;
        }</pre>

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the `h1` tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the `h3` tag.
        -   Add code to set a different color for the `h3` tags.
      CSD U2 text style h3_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**What colors can I use in CSS?**]
        CSS includes most common color names (red, blue, green, etc.), and many uncommon ones.  You can see a full list of CSS color names at <a href="http://www.w3schools.com/colors/colors_names.asp">W3Schools - HTML Color Names</a>.  You can still use colors that are not included in the named list, but you will need to use their RGB values.  You can read more about using colors in CSS at <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">W3Schools - CSS Legal Color Values</a>
        :::

        ::: details [**How does the code work?**]

        Here is the code that is making the `h1` header red:

            h1 {
              color: red;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        :::

        ::: details [**How do I make a new rule-set?**]

        To make a new rule set, you'll need a selector and a list of rules.  The selector is the name of the tag you want the rules to be applied to.  The rules are a list of property and value pairs.  You'll also need to pay careful attention to the punctuation in the rule set.  Look at the code below for an example of how the code should look.  You'll need to change the specifics for your page.

            h1 {
              color: red;
            }

        -   `h1` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces.
        -   `color: red;` is the rule that makes the text inside the `h1` tags red.
            -   `color` is the _property_.  It explains what the rule is about, in this case the text color.
            -   `red` is the _value_.  It explains how the rule should be applied, in this case making the text red.

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Making a new CSS rule-set

        The block of code that gives rules for a particular tag is called a _rule-set_.  You can make a new rule set by copying the pattern you see in the rule-set for the `h1` tag.

        -   Find the CSS rule-set in the style sheet that determines the styles for the `h1` tag.
        -   Using the same pattern, write a new CSS rule-set that will determine the style for the `h3` tag.
        -   Add code to set a different color for the `h3` tags.
      CSD U2 text style size: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>How does the code work?</strong></summary>
        Here is the code that is controlling the paragraph text size:

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.
                </details>
                <details>
                <summary><strong>What does `px` mean / What is a pixel?</strong></summary>

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        </details>
        <details>
        <summary><strong>Why do I need all the punctuation?</strong></summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary><strong>What is a style sheet?</strong></summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary><strong>What is CSS?</strong></summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style size_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph text size:

        <pre>p {
          font-size: 14px;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.

        </details>
        <details>
        <summary>
        <strong>What does <code>px</code> mean / What is a pixel?</strong>
        </summary>

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>
        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style size_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph text size:

            p {
              font-size: 14px;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `font-size: 14px;` is the rule that makes the text inside the `p` tags a particular size.
            -   `font-size` is the _property_.  It explains what the rule is about, in this case the text size.
            -   `14px` is the _value_.  It explains how the rule should be applied, in this case making the text 14 pixels big.

        :::

        ::: details [**What does <code>px</code> mean / What is a pixel?**]

        Pixel, which is abbreviated `px`, is how elements are measured in CSS.  It’s the size of a single point of light on the screen.

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Changing text size

        You can control other things besides colors by using other properties.

        -   Find the CSS rule-set in the style sheet that determines the style for the paragraph tag.
        -   Change the text size of the paragraphs to be bigger.
        -   Add a new rule to your rule-set for your h3 tag to make the text bigger or smaller.
      CSD U2 text style text align: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>

        **How does the code work?**

        </summary>
        Here is the code that is controlling the paragraph text alignment:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.
                </details>
                <details>
                <summary>

        **Why doesn't `text-align: left;` do anything?**

        </summary>
        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.
        </details>
        <details>
        <summary>

        **What are the possible values for text align?**

        </summary>
        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">W3Schools - CSS text-align Property</a>
        </details>
        <details>
        <summary>

        **Why do I need all the punctuation?**

        </summary>
        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.
        </details>
        <details>
        <summary>

        **What is a style sheet?**

        </summary>
        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.
        </details>
        <details>
        <summary>

        **What is CSS?**

        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.

        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        </pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>

        </details>
        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 text style text align_2018: |-
        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>How does the code work?</strong>
        </summary>

        Here is the code that is controlling the paragraph text alignment:

        <pre>p {
          text-align: left;
        }</pre>

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.

        </details>
        <details>
        <summary>
        <strong>Why doesn't <code>text-align: left;</code> do anything?</strong>
        </summary>

        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.

        </details>
        <details>
        <summary>
        <strong>What are the possible values for text align?</strong>
        </summary>

        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        </details>
        <details>
        <summary>
        <strong>Why do I need all the punctuation?</strong>
        </summary>

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        </details>
        <details>
        <summary>
        <strong>What is a style sheet?</strong>
        </summary>

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        </details>
        <details>
        <summary>
        <strong>What is CSS?</strong>
        </summary>

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.
        <br/><br/>
        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

        <pre>h2 {
           color: blue;
           font-family: cursive;
        }</pre>

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        </details>

        </details>
        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 text style text align_2019: |-
        <div class="no-pullthrough" style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px">

        ::: details [**How does the code work?**]

        Here is the code that is controlling the paragraph text alignment:

            p {
              text-align: left;
            }

        -   `p` is the _selector_.  It specifies which elements will have to follow the rules inside the curly braces. The `p` stands for paragraph.
        -   `text-align: left;` is the rule that makes the text inside the `p` tags align to the left side of the paragraph.
            -   `text-align` is the _property_.  It explains what the rule is about, in this case the text alignment.
            -   `left` is the _value_.  It explains how the rule should be applied, in this case making the text align to the left side of the paragraph.

        :::

        ::: details [**Why doesn't <code>text-align: left;</code> do anything?**]

        Most properties have default values.  The default values are the styles that an element will have automatically, before you add your style sheet.  The default value for `text-align` is `left`, so it doesn't change from how it already looked.

        :::

        ::: details [**What are the possible values for text align?**]

        You can choose between "left", "right", and "center".  You can read more about the text-align property at <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp" target="_new">W3Schools - CSS text-align Property</a>

        :::

        ::: details [**Why do I need all the punctuation?**]

        The punctuation, such as the curly braces `{}`, the colon `:`, and the semicolon `;`, help the computer to understand the rules in the style sheet.  The curly braces hold all the rules for a particular selector.  Each rule should end in a semicolon, and the properties and values are always separated by a colon.

        :::

        ::: details [**What is a style sheet?**]

        A style sheet is a document that controls how a web page will appear.  External style sheets are separate files that are linked to the HTML page.

        :::

        ::: details [**What is CSS?**]

        CSS is a language that controls the way content on a web site appears.  It uses rule-sets to change the look of a page.  Each rule set has a selector, which specifies which elements on the page will be affected, and the rules, which explain how to display the elements.   Each rule consists of a property and a value for that property.
        <br/><br/>
        Here’s an example of a rule-set that makes the text in an `h2` tag blue and cursive:

            h2 {
               color: blue;
               font-family: cursive;
            }

        In this example, `h2` is the selector, `color` and `font-family` are properties, and `blue` and `cursive` are the values for those properties.

        :::

        </div>

        # Text Alignment

        The `text-align` property sets the horizontal (side to side) position of the text within each line.

        -   Find the "text-align" property in the paragraph tag.
        -   Change the paragraph alignment.
            -   Choose from "left", "right", and "center"
      CSD U2 un_ordered lists: "# Combining Lists\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**What are the two
        types of lists?**]\n There are two types of lists in HTML, ordered and unordered
        lists.\n:::\n\n::: details [**What is an unordered list?**]\n\nAn unordered
        list is just a set of bulleted items.\n\nAn unordered list element has the
        tag `<ul>` . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist.
        Each item in the list is marked by a list item element `<li>`. This is an
        abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item
        element is a child element, which means that it goes inside of its parent
        element, the unordered list (`<ul>`).\n\n:::\n\n::: details [**How do I make
        an unordered list?**]\n\nMaking an unordered list has two steps: making the
        list and adding the list items.  To make the unordered list, write the unordered
        list tags `<ul></ul>`.  Next, add your list items **inside** the unordered
        list tags.  To make each list item, use the list item tags `<li></li>` and
        write the list item inside the tags.\n\nIt can be helpful to indent your `<li>`
        tags so it's clear they are contained in the `<ul>` tag.\n\n:::\n\n::: details
        [**What is an ordered list?**]\n\nAn ordered list is a set of bulleted items
        which are numbered.\n\nAn ordered list element has the tag `<ol>`. This is
        an abbreviation for <strong>O</strong>rdered <strong>L</strong>ist. Each item
        in the list is marked by a list item element `<li>`;. This is an abbreviation
        for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is
        a child element, which means that it goes inside of its parent element, the
        ordered list (`<ol>`).\n:::\n\n::: details [**How do I make an ordered list?**]\n\nMaking
        an ordered list has two steps: making the list and adding the list items.
        \ To make the ordered list, write the ordered list tags `<ol></ol>`.  Next,
        add your list items **inside** the ordered list tags.  To make each list item,
        use the list item tags `<li></li>` and write the list item inside the tags.\n<br
        /><br />\nIt can be helpful to indent your `<li>` tags so it's clear they
        are contained in the `<ol>` tag.\n:::\n\n::: details [**Show me working code.**]\n\n<table
        border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ul>\n     \t<li>Red </li>\n        <li>Green </li>\n        <li>Blue</li>\n
        \   </ul> \n\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \   <ol>\n     \t<li>Step 1</li>\n        <li>Step 2</li>\n        <li>Step
        3</li> \n    </ol> \n\n</td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nThis
        page should include both an unordered list and an ordered list.\n\n# Do This\n\n-
        \  Use the list tags to structure this content into two lists that look like
        the ones below.\n\n_Hint: There will be NO NUMBERS in your code._ \n\n![](https://images.code.org/c9c002b39893ab09e8bc6be4b20ad7c2-image-1553714125509.png)"
      CSD U2 unordered list: |-
        # Unordered Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary><strong>What are the two types of lists?</strong>
        </summary>
         There are two types of lists in HTML, ordered and unordered lists.
        </details>
        <details>
        <summary><strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.
        <br /><br />An unordered list element has the tag \<ul> . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element \<li>. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (\<ul>).

        </details>

        <details>
        <summary><strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.

        It can be helpful to indent your \<li> tags so it's clear they are contained in the \<ul> tag.

        </details>

        <details>
        <summary><strong>Show me working code.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        This page should have an unordered list, but it's missing the list tags.

        # Do This

        -   Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 unordered list_2018: |-
        # Unordered Lists

        <div style="float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left: 20px; font-size:14px" markdown="1">
        <details>

        <summary>
        <strong>What are the two types of lists?</strong>
        </summary>
        There are two types of lists in HTML, ordered and unordered lists.

        </details>
        <details>
        <summary>
        <strong>What is an unordered list?</strong>
        </summary>

        An unordered list is just a set of bulleted items.
        <br /><br />An unordered list element has the tag \<ul> . This is an abbreviation for <strong>U</strong>nordered <strong>L</strong>ist. Each item in the list is marked by a list item element \<li>. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.  The list item element is a child element, which means that it goes inside of its parent element, the unordered list (\<ul>).

        </details>

        <details>
        <summary>
        <strong>How do I make an unordered list?</strong>
        </summary>

        Making an unordered list has two steps: making the list and adding the list items.  To make the unordered list, write the unordered list tags `<ul></ul>`.  Next, add your list items **inside** the unordered list tags.  To make each list item, use the list item tags `<li></li>` and write the list item inside the tags.
        <br /><br />
        It can be helpful to indent your \<li> tags so it's clear they are contained in the \<ul> tag.

        </details>

        <details>
        <summary>
        <strong>Show me working code.</strong>
        </summary>

        <table border="1">
        <tr>
        <td>Example</td>
        <td>Result</td>
        </tr>
        <tr>
        <td><pre> &lt;ul&gt; <br>   &lt;li&gt;Red &lt;/li&gt; <br>   &lt;li&gt;Green &lt;/li&gt; <br>   &lt;li&gt;Blue&lt;/li&gt; <br> &lt;/ul&gt; </pre></td>
        <td><img src="https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png" style="width:200px"></td>
        </tr>
        </table>

        </details>
        </div>

        This page should have an unordered list, but it's missing the list tags.

        # Do This

        -   Use the `<ul>` and `<li>` tags to structure the content into an unordered list like the picture below.

        ![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04 PM.png>)
      CSD U2 unordered list_2019: "# Unordered Lists\n\n<div class=\"no-pullthrough\"
        style=\"float: right; height: 250px; width: 40%; overflow-y: scroll; margin-left:
        20px; font-size:14px\" markdown=\"1\">\n\n::: details [**What are the two
        types of lists?**]\nThere are two types of lists in HTML, ordered and unordered
        lists.\n\n:::\n\n::: details [**What is an unordered list?**]\n\nAn unordered
        list is just a set of bulleted items.\n<br /><br />An unordered list element
        has the tag `<ul>`. This is an abbreviation for <strong>U</strong>nordered
        <strong>L</strong>ist. Each item in the list is marked by a list item element
        `<li>`. This is an abbreviation for <strong>L</strong>ist <strong>I</strong>tem.
        \ The list item element is a child element, which means that it goes inside
        of its parent element, the unordered list (`<ul>`).\n\n:::\n\n::: details
        [**How do I make an unordered list?**]\n\nMaking an unordered list has two
        steps: making the list and adding the list items.  To make the unordered list,
        write the unordered list tags `<ul></ul>`.  Next, add your list items **inside**
        the unordered list tags.  To make each list item, use the list item tags `<li></li>`
        and write the list item inside the tags.\n<br /><br />\nIt can be helpful
        to indent your <li> tags so it's clear they are contained in the <ul> tag.\n\n:::\n\n:::
        details [**Show me working code.**]\n\n<table border=\"1\">\n<tr>\n<td>Example</td>\n<td>Result</td>\n</tr>\n<tr>\n<td>\n\n
        \    <ul> <br>\n     \t<li>Red </li>\n        <li>Green </li>\n        <li>Blue</li>\n
        \    </ul>\n\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32
        PM.png\" style=\"width:200px\"></td>\n</tr>\n</table>\n\n:::\n\n</div>\n\nThis
        page should have an unordered list, but it's missing the list tags.\n\n# Do
        This\n\n-   Use the `<ul>` and `<li>` tags to structure the content into an
        unordered list like the picture below.\n\n![](<https://images.code.org/64581a90765cd2d53b6c5235c48f2855-image-1493238358294.25.04
        PM.png>)"
      CSD U2 upload images: |-
        # Upload Images

        Next, you'll need to upload all of your images into your project.

        # Do This

        -   Download all the images you want onto your computer. Visit <a href="/s/csd2-2017/stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> for help if you need it.
            -   Make sure you have the right to use these images.
            -   Write down all of the attribution information that you need.
            -   Upload all of the images into your project.  Visit <a href="/s/csd2-2017/stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> if you've forgotten how.
      CSD U2 upload images_2018: |-
        # Upload Images

        Next, you'll need to upload all of your images into your project.

        # Do This

        -   Download all the images you want onto your computer. Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> for help if you need it.
            -   Make sure you have the right to use these images.
            -   Write down all of the attribution information that you need.
            -   Upload all of the images into your project.  Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> if you've forgotten how.
      CSD U2 upload images_2019: |-
        # Upload Images

        Next, you'll need to upload all of your images into your project.

        # Do This

        -   Download all the images you want onto your computer. Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> for help if you need it.
            -   Make sure you have the right to use these images.
            -   Write down all of the attribution information that you need.
            -   Upload all of the images into your project.  Visit <a href="../../../stage/7/puzzle/5" target="_new">Lesson 7 Level 5</a> if you've forgotten how.
      CSD U3 - Booleans Video: "# Boolean Expressions Video"
      CSD U3 - Booleans Video_2019: |-
        ## Questions to Consider

        -   What is a Boolean expression?
        -   What’s an expression that would evaluate to true?
        -   What’s an expression that would evaluate to false?
      CSD U3 - Conditionals Video_2019: |-
        ## Questions to Consider

        -   What’s an example of when you would need an “if/else” statement?
      CSD U3 - Simple Counter Predict: "# The Counter Pattern\n\nThis pattern is one
        of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - Simple Counter Predict_2018: "# The Counter Pattern\n\nThis pattern
        is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - Simple Counter Predict_2019: "# The Counter Pattern\n\nThis pattern
        is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 - complex - key up and down: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - key up and down_2018: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - key up and down_2019: |-
        # Responding to a Single Click

        Earlier we learned that `keyWentDown` and `keyWentUp` can be used to respond to a keypress a single time. The blocks `mouseWentUp` and `mouseWentDown` allow you to do that for the mouse!

        # Do This

        Let's make a simple game that counts how many times you've clicked. We've already provided a variable `clicks` that you can use to track how many times the user has clicked.

        -   Add a conditional that checks if the mouse went down.
        -   Inside your conditional, add to the `clicks` variable.

        _Challenge: Can you add a sprite that responds to `mouseWentDown` as well? Add an image of your choice and increase the sprite's size each time the mouse is clicked._
      CSD U3 - complex - mouse down: "# Mouse Clicks\n\nKeypresses are great, but
        sometimes you want users to interact through mouse clicks. There's a new block
        called `mouseDown` which, similar to `keyDown`, checks whether the left or
        right mouse buttons is being pressed. If you are using a computer with a mouse
        or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse down_2018: "# Mouse Clicks\n\nKeypresses are great,
        but sometimes you want users to interact through mouse clicks. There's a new
        block called `mouseDown` which, similar to `keyDown`, checks whether the left
        or right mouse buttons is being pressed. If you are using a computer with
        a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse down_2019: "# Mouse Clicks\n\nKeypresses are great,
        but sometimes you want users to interact through mouse clicks. There's a new
        block called `mouseDown` which, similar to `keyDown`, checks whether the left
        or right mouse buttons is being pressed. If you are using a computer with
        a mouse or trackpad that has only one button, you'll want to always use `mouseDown(\"left\")`.
        \n\n# Do This\n\nHere's a program that drops a balloon down the screen - you're
        going to program the mouse button to raise the balloon back up while it's
        clicked.\n\n-   Add an if else statment that checks for `mouseDown`.\n-   Inside
        the conditional, move the balloon up one pixel if the mouse is down. Otherwise,
        move the balloon down.\n\n_Hint: You'll need to move the code that drops the
        balloon for this to work - you only want it to run if `mouseDown` is `false`_\n\n_Challenge:
        Can you make the balloon drift randomly to the left and right as it rises
        and falls?_"
      CSD U3 - complex - mouse move: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - complex - mouse move_2018: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - complex - mouse move_2019: |-
        # mouseDidMove

        We can also use Boolean expressions to check whether or not the mouse has moved. The `mouseDidMove` block will return `false` if the mouse is still, but `true` if the mouse has been moving.

        # Do This

        Right now, this program just displays a salt shaker sprite. You'll need to use `mouseDidMove` so that you can "shake" the salt by moving the mouse back and forth.

        -   Add a conditional that checks if `mouseDidMove`.
        -   If the conditional is true, rotate the salt sprite randomly to the left or right.

        _Challenge: Can you keep track of how many times the `mouseDidMove` shakes the salt, and then rotate it right side up after 100 shakes?_
      CSD U3 - conditionals - first conditional: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement add a
        statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - first conditional 2: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Now that you have conditionals and images, sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add an `if` statement that checks to see if the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Set the pop's `visible` property to `false` to start.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_2018: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add a conditional that checks to see whether the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Use the `visible` property to keep the "pop" sprite hidden at the beginning.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional 2_2018_2019: |-
        <img src="https://images.code.org/abd459d8d1477ac2f582417f4334cdaa-image-1466107090414.gif" style="width:200px;float:right">

        # Visible

        Sometimes it's useful to hide the image for a while and then show it again. You can do this using the `visible` property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either `true` (the sprite is visible) or `false` (the sprite is **not** visible). By default, visible is set to `true`.

        # Do This

        Make the balloon pop when it hits the edge of the game area!

        -   Add a conditional that checks to see whether the balloon has hit the edge.
            -   Use a watcher on `balloon.scale` to help you out.
        -   Create a pop sprite which uses the "pop" visual in the animation tab.
        -   Use the `visible` property to keep the "pop" sprite hidden at the beginning.
        -   Inside the `if` add two statements.
            -   One that sets the `visible` property to hide the balloon sprite.
            -   One that sets the `visible` property to show the pop sprite.
      CSD U3 - conditionals - first conditional_2018: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement add a
        statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - first conditional_2019: "<img src=\"https://images.code.org/36c5543076622c96f7dabce8bc37f995-image-1468425774455.54.03
        PM.png\" style=\"float:right;width:100px\">\n\n# If Statement\n\nThe Boolean
        expressions you used earlier allow us to ask questions, but in order to _respond
        to those questions_, we need to use an `if` statement.\n\n`if` statements
        usually go inside your draw loop because we want to check them each time the
        loop runs. \n\n# Do This\n\nThe race car program you wrote earlier is loaded
        here for you.\n\n-   Add an `if` statement after you update the position of
        the race car.\n-   Move the Boolean expression from the console.log statement
        to the condition of the if statement.\n-   Inside the `if` statement, add
        a statement to draw text on the screen to say \"Winner\"."
      CSD U3 - conditionals - transition: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add an Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 - conditionals - transition_2018: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add an Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 - conditionals - transition_2019: |-
        # Booleans

        In the past few levels, we have been comparing values of sprites to find out whether something is true or false. Let's start putting that in the context of an animation.

        # Do This

        The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.

        -   Add a `console.log` statement inside the draw loop. ( [Show me where](#triggercallout=callout) )
        -   Add a Boolean expression inside the `console.log` that asks "Is the x position of the race car less than the x position of the finish line?"
        -   Look at the output of the program as the car moves. When does the output change? Why?
      CSD U3 AnimationsMulti Play Defender: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti Play Defender_2018: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti Play Defender_2019: |-
        # Defend Your Cake!

        This is an example of a defender game that you'll build by the end of this lesson. To defend your cake, move the alien with arrow keys to block the lady bugs and push them into the water.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   How many sprites are there in this game. Which are they?
        -   What variables are needed to make this game? What do they store?
        -   If you were to split the code of this game into functions what do you think they would be? What are the major pieces of behavior you'd need to create in your code?
      CSD U3 AnimationsMulti defender animate cake enemies: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](/s/csd3-2017/stage/20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate cake enemies_2018: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](/s/csd3-2018/stage/20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate cake enemies_2019: |-
        # Getting Started: Set Animations

        You should have already reviewed the planning guide for this project. A lot of the work to turn this project guide into a working game has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        Before we get started you'll want some better animations for each of your sprites.

        -   In the Animation Tab are animations for each of your sprites. Go look at what they are.
        -   In your code give each sprite its appropriate animation. **Use the ones provided for now** but later you'll be able to go change them.
        -   Head to [Level 4](../../20/puzzle/4) if you need help remembering how to do this.
      CSD U3 AnimationsMulti defender animate player: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender animate player_2018: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender animate player_2019: |-
        # Change Player Animations

        Right now your player is always facing the same direction. You can make things look a lot more realistic by switching between animations. Your player should switch between a left-facing and right-facing animation depending on which key was last pressed. Remember, you can quickly copy and edit animations inside the Animation Tab.

        # Do This

        -   Inside the Animation Tab copy the animation of your player sprite.
        -   Flip each frame of the new animation so that the sprite is facing in the opposite direction.
        -   Rename your new animation.
        -   Use the `setAnimation` command inside the `movePlayer` function so that the player changes the direction it is facing when the "left" and "right" arrows are pressed.
      CSD U3 AnimationsMulti defender create set enemies: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender create set enemies_2018: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender create set enemies_2019: |-
        # Creating Functions

        <img src="https://images.code.org/126982cbde9ae62e9a77ca1e53c92024-image-1476291567280.58.00 AM.png" style="float:right; height:90px">

        Your program now includes code in two places to set the enemies on the left side of the screen at a random y location. You can create functions to reset each of your two enemies to remove repetitions from your program. This will make your program easier to read, allow you to change it more easily, and allow you to quickly reset your sprites at other points in your program if you need to.

        # Do This

        <img src="https://images.code.org/01a2f4d9725162482fda9f74734c992c-image-1476461412974.09.52 AM.png" style="
        float:right; height:70px">

        -   At the bottom of your program create two new functions, `setEnemy1` and `setEnemy2`.
        -   Inside each of these functions place the code that sets the enemies on the left side of the screen and gives them a random y position.
        -   Wherever the code for `setEnemy1` and `setEnemy2` appears in your program replace them with a call to the functions you just created.
      CSD U3 AnimationsMulti defender displace enemies: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender displace enemies_2018: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender displace enemies_2019: |-
        # Displace Enemies

        It's time to write code for some more sprite interactions. Your player sprite should displace the enemy sprites.

        # Do This

        For this level you'll be writing code inside the `displaceEnemies` function.

        -   Write code that makes player displace both enemy sprites.
        -   Test your program to make sure your player is displacing enemies but they keep moving right after the player moves away.

        _Hint: You can use `sprite.debug` to see your sprites' colliders if you need to debug your program._
      CSD U3 AnimationsMulti defender enemies move: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies move_2018: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies move_2019: |-
        # Moving The Enemies

        It's time to start writing the code that will move your sprites. To begin you'll need to get your enemy sprites to a random position and moving across the screen.

        # Do This

        At the top of your program, after you create each enemy sprite, write code that will move it to the correct position and give it the correct velocity.

        -   Use `sprite.x` to set the x position to 0.
        -   Use `sprite.y` to set the y position should be a random number between 150 and 250.
        -   Use `sprite.velocityX` to set the x velocity to 2.

        Test your program. Your enemy sprites should now be moving across the bridge.
      CSD U3 AnimationsMulti defender enemies touch cake: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2018: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake sprite2_2019: |-
        # Touching the Cake: Second Ladybug

        Your first enemy sprite should now be resetting when it gets to the cake. Now you'll want the other ladybug to reset as well.

        # Do This

        Inside the `enemiesTouchCake` function you should have written code that resets `enemy1`.

        -   Copy the entire if-statement you wrote in the last level (Ctrl-C).
        -   Paste the code inside of the `enemiesTouchCake` function, just below the last one (Ctrl-V).
        -   Change the name of the sprite in that code from `enemy1` to `enemy2`.

        Test your code. Now both bugs should reset when they touch the cake.
      CSD U3 AnimationsMulti defender enemies touch cake_2018: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender enemies touch cake_2019: |-
        # Touching the Cake

        If the enemies get all the way across to the cake you should place them back at the left side of the screen and decrease the score. To start you'll **write code for only one of your enemies**.

        # Do This

        Inside the `enemiesTouchCake` function you'll need to write code that checks when a ladybug is touching the cake, resets its position, and changes the score.

        -   Use an `if` and `isTouching` to detect whether enemy1 has touched the cake.
        -   Inside your `if` block place code that:
            -   sets enemy1's x position back to 0.
            -   sets enemy1's y position to a random number between 150 and 250.
            -   uses the counter pattern to decrease the score by 2.

        (_Hint: You can reuse some code you already wrote_)

        Test your code. One of your ladybugs should now reset when it gets across to the cake, and the score should go down by 2.
      CSD U3 AnimationsMulti defender make it your own: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender make it your own_2018: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender make it your own_2019: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a game, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the visuals of the game so that your player, enemies, or cake look different.
        -   End the game when the enemies get to the cake and print the score. For an extra challenge end the game only after 3 enemies get through.
        -   Randomize the speed of the enemies.
        -   Create a new background that shows up when players reach a higher score.
      CSD U3 AnimationsMulti defender move player: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move player_2018: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move player_2019: |-
        # Moving Left and Right

        Now that your enemy sprites are moving correctly, it's time to write the code to move your player. For now you'll just need to get your character moving left and right and changing its animations.

        # Do This

        For this level you'll be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "right" arrow is pressed.
        -   Use `sprite.x` and the counter pattern increase the player's x position by 3.
        -   Use another `if` block to move the player to the left when the "left" arrow is pressed. This time you'll need to decrease the player's x position.

        Test your game. Your character sprite should now move left and right when you press the left and right arrows.
      CSD U3 AnimationsMulti defender move up down: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to increase the player's y position by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender move up down_2018: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to make the player go up by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender move up down_2019: |-
        # Moving Up and Down

        You'll want your player sprite to move up and down as well.

        # Do This

        For this level you'll still be writing code inside the `movePlayer` function.

        -   Use an `if` block along with `keyDown` to detect when the "up" arrow is pressed.
        -   Use `sprite.y` to make the player go up by 3 using the counter pattern.
        -   Use another `if` block to move the player down when the "down" arrow is pressed.

        Test your code. Your character should now move in all 4 directions.
      CSD U3 AnimationsMulti defender touch water: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti defender touch water_2018: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti defender touch water_2019: |-
        # Touching the Water

        The last part of the game that you'll need to write is the code to reset the sprites when they touch the water. Luckily you should have already written functions that reset each sprite, so you'll just need a good way to know when either sprite leaves the bridge. Start by writing the code for a single enemy and then copy-paste and make small changes to create code for your second enemy.

        # Do This

        For this level you'll be writing code inside the `enemiesTouchWater` function.

        -   Use an `if` statement to check whether enemy1 is off the top of the bridge by checking whether its y value is below 140. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Use an if statement to check whether enemy1 is off the bottom of the bridge by checking whether its y value is above 260. Within your if statement:
            -   use your `setEnemy1` function to reset the sprite.
            -   add 1 to the score.
        -   Test your program for the first enemy sprite. Make sure the sprite is resetting and the score goes up.
        -   Once it is working copy and paste the code you wrote to create the same behavior for `enemy2`. You'll need to change the name of the sprite and the name of the functions you use.
      CSD U3 AnimationsMulti introducing multiframe: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti introducing multiframe_2018: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti introducing multiframe_2019: |-
        # Using Multiframe Animations

        In the sample defender game the sprites themselves were animated. Before getting started on programming this game, take a minute to get familiar with this new way of animating sprites.

        # Do This

        This program already includes several sprites but they don't yet have any animations.

        -   Go to the Animation Tab and check out the multi-frame animations already added to your project. Choose one for each of your characters.
        -   Remember you can use `setAnimation` to give your sprites animations you've created in the Animation Tab.
      CSD U3 AnimationsMulti mirror animation: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti mirror animation_2018: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti mirror animation_2019: "# Editing Multiframe Animations\n\nYour
        sprites will look a lot more realistic if they turn around when they're moving.
        You can switch back and forth between multiframe animations when the user
        presses different keys.\n\n# Do This\n\nRead this code and run the program.
        Make sure you know how the sprite responds to the arrow keys.\n\n-   In the
        Animation Tab, create a copy of the alien animation by clicking the following
        button: ![](<https://images.code.org/aee81f9cd3f63bb8a9c91ac3ab250a87-image-1475699896387.38.09
        PM.png>)\n-   Use the tool to flip your animation. Make sure you flip both
        frames using this button:  ![](<https://images.code.org/3b10b4a612f9a7c640dc7bb18f4c2b91-image-1475699599617.33.03
        PM.png>) \n-   Rename your new animation.\n-   Use your new animation and
        old animation so that the alien faces the correct direction when moving. Where
        do you think you'll need to set the sprite's animation in your code?"
      CSD U3 AnimationsMulti slow down: "# Slow Down\n\nNice work! Time to start learning
        how to control these multiframe animations.\n\n# Do This\n\nYour sprites should
        be animated but they're moving really quickly. \n\n-   Head back to the Animation
        Tab. Underneath each animation you should see a slider. ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 AnimationsMulti slow down_2018: "# Slow Down\n\nNice work! Time to start
        learning how to control these multiframe animations.\n\n# Do This\n\nYour
        sprites should be animated but they're moving really quickly. \n\n-   Head
        back to the Animation Tab. Underneath each animation you should see a slider.
        ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 AnimationsMulti slow down_2019: "# Slow Down\n\nNice work! Time to start
        learning how to control these multiframe animations.\n\n# Do This\n\nYour
        sprites should be animated but they're moving really quickly. \n\n-   Head
        back to the Animation Tab. Underneath each animation you should see a slider.
        ![](<https://images.code.org/169e11c1f6f55b607937fe9cb7e5e390-image-1476209267457.07.26
        AM.png>)\n-   Use these sliders to slow down your animations so they look
        more realistic."
      CSD U3 Boolean Modify: "# Boolean Expressions\n\nThe simplest Boolean expressions
        are questions that the computer can answer with true or false. These expressions
        are made using **comparison operators**, as shown below.\n\n|                                                Comparison
        Operator                                                | Boolean Expression
        |        Meaning        |\n| :---------------------------------------------------------------------------------------------------------------:
        | :----------------: | :-------------------: |\n| <img src=\"https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png\"
        style=\"width: 100px\"> |       `1 < 9`      |   Is 1 less than 9?   |\n|
        <img src=\"https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png\"
        style=\"width: 100px\"> |       `1 > 9`      | Is 1 greater than 9 ? |\n|
        <img src=\"https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png\"
        style=\"width: 100px\"> |      `1 == 9`      |    Is 1 equal to 9?   |\n\n<br>\n\n**Note:**
        If you saw the statement 3 \\< 2 in math class, you'd think something was
        terribly wrong, but this is not math class.  In computer science, the comparison
        operators **ask a question** that the computer will answer with `true` or
        `false`. So you can read 3 \\< 2 as **\"Is 3 less than 2?\"** The answer in
        this case is no, or `false`.  \n\nAnother way to say this is that the Boolean
        expression `3 < 2` **evaluates** to `false`.\n\n# Do This\n\nCan you modify
        the values of the sprite properties so that each of the Boolean expressions
        evaluates to `true`?\n\n-   Read through the entire program to see how `sprite1`
        and `sprite2` are being created and which properties are compared.\n-   For
        each of the Boolean expressions, identify the sprite properties being compared.\n-
        \  Change the code _in the first **11** lines only_ so that each of the `console.log()`
        statements print `true`."
      CSD U3 Boolean Modify_2018: |-
        # Boolean Expressions

        The simplest Boolean expressions are questions that the computer can answer with true or false. These expressions are made using **comparison operators**, as shown below.

        |                                                Comparison Operator                                                | Boolean Expression |        Meaning        |
        | :---------------------------------------------------------------------------------------------------------------: | :----------------: | :-------------------: |
        | <img src="https://images.code.org/1a0798d75d4242715e7608d825f95101-image-1447271431312.png" style="width: 100px"> |       `1 < 9`      |   Is 1 less than 9?   |
        | <img src="https://images.code.org/5ff460ac121f0ac51b569e96a4404c57-image-1447271431310.png" style="width: 100px"> |       `1 > 9`      | Is 1 greater than 9 ? |
        | <img src="https://images.code.org/a4daa9efccea2278e165592efe343c1a-image-1447271431308.png" style="width: 100px"> |      `1 == 9`      |    Is 1 equal to 9?   |

        **Note:** If you saw the statement 3 \< 2 in math class, you'd think something was terribly wrong, but this is not math class.  In computer science, the comparison operators **ask a question** that the computer will answer with `true` or `false`. So you can read 3 \< 2 as **"Is 3 less than 2?"** The answer in this case is no, or `false`.

        Another way to say this is that the Boolean expression `3 < 2` **evaluates** to `false`.

        # Do This

        Can you modify the values of the sprite properties so that each of the Boolean expressions evaluates to `true`?

        -   Read through the entire program to see how `sprite1` and `sprite2` are being created and which properties are compared.
        -   For each of the Boolean expressions, identify the sprite properties being compared.
        -   Change the code _in the first **11** lines only_ so that each of the `console.log()` statements print `true`.
      CSD U3 Boolean Modify_2019: "# Boolean Expressions\n\nThe simplest Boolean expressions
        are questions that the computer can answer with true or false. \nAnother way
        to say this is that Boolean expressions **evaluate** to `true` or `false`.\n\n#
        Do This\n\nCan you modify the values of the sprite properties so that each
        of the Boolean expressions evaluates to `true`?\n\n-   Read through the entire
        program to see how `sprite1` and `sprite2` are being created and which properties
        are compared.\n-   For each of the Boolean expressions, identify the sprite
        properties being compared.\n-   Change the code _in the first **11** lines
        only_ so that each of the `console.log()` statements print `true`."
      CSD U3 Complex Movement counter prediction: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Complex Movement counter prediction_2018: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Complex Movement counter prediction_2019: |-
        # Velocity and the Counter Pattern

        Using the counter pattern with a sprite's x and y property makes a sprite move smoothly across the screen. In this program **the counter pattern is being used with the `sprite.velocityX` property** instead.

        # Predict

        What do you think will happen when the code is run? Why? Once you're ready you can run the code to find out.
      CSD U3 Compound Nested Challenge: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with the whole class so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Compound Nested Challenge_2018: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with other classmates so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Compound Nested Challenge_2019: |-
        # Challenge: Checking for Multiple Conditions

        _Check with your teacher before taking on this challenge._

        So far we've looked at a lot of ways to check if a single condition is true, but often a program needs to check the state of many conditions simultaneously before making a decision. For this challenge, let's assume the following scenario:

        -   The sprite should move up, down, left, and right if the corresponding arrow key is pressed.
        -   The sprite should _not_ go all the way off the screen in any direction.

        # Do This Together

        Before you tackle writing this program, you'll need to figure out how to check multiple conditions at once.

        -   **Brainstorm** with your neighbors ways you might check for more than one condition.
        -   **Share** back with other classmates so you can see other potential approaches.
        -   **Explore** the toolbox for blocks that might help (pay extra attention to the Math and Control drawers).
        -   **Program** your proposed solution.
        -   **Test** your program to make sure it's actually checking all of the conditions you intended.
      CSD U3 Conditionals Apple: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.

        # Do This

        There is a growing apple sprite created for you. It starts as green and should turn red when it gets to a scale of 2. We won't worry about making it red yet, let's just use a `console.log` command to check whether it's scale is 2 yet.

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `apple.scale` is greater than 2.
      CSD U3 Conditionals Apple 2: |-
        # Turning Red

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2, you turn it red once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `apple.scale` is greater than 2 - if it is, set the apples new animation to "apple\_red".

        _Challenge: Can you also make the apple stop growing once it turns red?_
      CSD U3 Conditionals Apple 2_2018: |-
        # Changing Fruit

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to "pear".

        _Challenge: Can you also make the fruit stop growing once it turns into a pear?_
      CSD U3 Conditionals Apple 2_2018_2019: |-
        # Changing Fruit

        Now that we know how to use _if_ statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.

        # Do This

        Use a conditional in the draw loop to check whether `fruit.scale` is greater than 2.  If it is, change the fruit's animation to "pear".

        _Challenge: Can you also make the fruit stop growing once it turns into a pear?_
      CSD U3 Conditionals Apple_2018: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.

        # Do This

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `fruit.scale` is greater than 2.
      CSD U3 Conditionals Apple_2018_2019: |-
        # More Practice With Booleans

        Let's use one more Boolean expression to check the condition of a sprite.  You can use a `console.log` command to check whether its scale is 2 yet.

        # Do This

        -   Add a `console.log` statement.
        -   Add a Boolean expression inside the `console.log` that checks whether the `fruit.scale` is greater than 2.
      CSD U3 Counters explaining counters contained 2: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Counters explaining counters contained 2_2018: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Counters explaining counters contained 2_2019: "# The Counter Pattern\n\nThis
        pattern is one of the most important ones in all of programming. \n\n![](<https://images.code.org/83af2e40443ab294ba635f2a01a48ac7-image-1465506512065.06.56
        PM.png>)\n\nIt is used to increase the value of a variable by 1. You might
        call it the **counter pattern** since it can be used to make a variable that
        counts up. You'll use this pattern a lot, especially with the draw loop. Let's
        see what that looks like.\n\n# Do This\n\nThis program creates a variable
        `counter` and then uses the **counter pattern** to make it count up. When
        you run the program what do you think you'll see on the screen?\n\n-   **Read
        the program** and make a prediction of what the output will be.\n-   **Run
        the program** to check your prediction.\n-   **Discuss with a neighbor**.
        Can you explain what you observed?"
      CSD U3 Diagonal Movement: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Diagonal Movement

        Updating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to update _both_ of those properties.

        This program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?

        _Challenge: Can you make the mouse point in the same direction as the image?_
      CSD U3 Diagonal Movement_2018: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Diagonal Movement

        Updating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to updated _both_ of those properties.

        This program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?

        _Challenge: Can you make the mouse point in the same direction as the image?_
      CSD U3 Diagonal Movement_2019: |-
        <img src="https://images.code.org/f92774863b17074adc85b8f6bbd017f2-image-1492726926884.gif" style="float: right; margin-left: 20px;">

        # Diagonal Movement

        Updating only the `x` or `y` properties of a sprite can only make it move straight up and down or left and right. If you want a sprite to move on a diagonal path you'll need to updated _both_ of those properties.

        This program currently makes the mouse move straight down the screen - can you update it so that it moves diagonally across the screen like the image to the right?

        _Challenge: Can you make the mouse point in the same direction as the image?_
      CSD U3 Direction Animations: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Animations_2018: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Animations_2018_2019: |-
        # Changing Images as you Move

        Right now your conditionals only do one thing (change your sprite's x or y), but you can actually put as much code as you want inside a conditional. A common thing to do in games is to change your character's image depending on which direction they're walking.

        # Do This

        Using the provided program and images:

        -   Duplicate your chosen bug image four times.
        -   Edit each of your images to point in one of the four directions.
        -   Write code that uses `sprite.setAnimation()` to change the image on your bug sprite when different arrow keys are pressed.
      CSD U3 Direction Arrows: |-
        # Move in All Directions

        Once you've got your sprite moving in one direction by responding to a `keyDown`, getting it to move in all four directions should be more of the same. The basic keyboard control that you're developing here will become the basis for many of the games you make down the road.

        # Do This

        The bug sprite you made that responds to the up arrow has been brought to this level. Add the interaction for the other three arrow keys!

        -   Add three if statements - one for each arrow.
        -   Each if statement should move the sprite in the direction of the arrow.

        _HINT: Make sure you consider both the axis (x or y) of movement, **and** whether you need to increase or decrease that value._
      CSD U3 Direction Arrows_2018: "# Move in All Directions\n\nOnce you've got your
        sprite moving in one direction by responding to a `keyDown`, getting it to
        move in all four directions should be more of the same. The basic keyboard
        control that you're developing here will become the basis for many of the
        games you make down the road.\n\n# Do This\n\nThe bug sprite you made that
        responds to the right arrow has been brought to this level. Add the interaction
        for the other three arrow keys!\n\n-   Add three if statements - one for each
        arrow.  \n-   Don't forget to include a comment for each if statement!\n-
        \  Each if statement should move the sprite in the direction of the arrow.\n\n_HINT:
        Make sure you consider both the axis (x or y) of movement, **and** whether
        you need to increase or decrease that value._"
      CSD U3 Direction Arrows_2018_2019: "# Move in All Directions\n\nOnce you've
        got your sprite moving in one direction by responding to a `keyDown`, getting
        it to move in all four directions should be more of the same. The basic keyboard
        control that you're developing here will become the basis for many of the
        games you make down the road.\n\n# Do This\n\nThe bug sprite you made that
        responds to the right arrow has been brought to this level. Add the interaction
        for the other three arrow keys!\n\n-   Add three if statements - one for each
        arrow.  \n-   Don't forget to include a comment for each if statement!\n-
        \  Each if statement should move the sprite in the direction of the arrow.\n\n_HINT:
        Make sure you consider both the axis (x or y) of movement, **and** whether
        you need to increase or decrease that value._"
      CSD U3 Draw Loop Plugged orange and green: |-
        <img src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png" style="float:right;width:150px">

        # Using the Draw Loop

        Now it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.

        # Do This

        -   Add code to this program so that your drawing has orange circles being drawn, too.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged orange and green_2018: |-
        <img src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png" style="float:right;width:150px">

        # Using the Draw Loop

        Now it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.

        # Do This

        -   Add code to this program so that your drawing has orange circles being drawn, too.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged orange and green_2019: |-
        <img src="https://images.code.org/2b5b2ce029e2f1d7377db7dcd7760cf0-image-1492031771047.15.45 PM.png" style="float:right;width:150px">

        # Using the Draw Loop

        Now it's your turn to do some work with the draw loop. Remember that the code inside the draw loop is run by Game Lab over and over again.

        # Do This

        -   Add code to this program so that your drawing has orange circles being drawn, too.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged predict 1: |-
        # Draw Loop

        Here's an example of the draw loop at work.

        # Do this

        -   Run the code and see how it works.
        -   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 1_2018: |-
        # Draw Loop

        Here's an example of the draw loop at work.

        # Do this

        -   Run the code and see how it works.
        -   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 1_2019: |-
        # Draw Loop

        Here's an example of the draw loop at work.

        # Do this

        -   Run the code and see how it works.
        -   Discuss with your partner whether this looks like the flip book you saw in the video.  Why or why not?
      CSD U3 Draw Loop Plugged predict 2 embed: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged predict 2 embed_2018: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged predict 2 embed_2019: |-
        # Predict

        This program has one small difference that will make it run a little differently. Again though, remember:

        -   All your code outside the draw loop is run first, one time
        -   All your code inside the draw loop is run over and over forever

        What will this program do? Write your prediction below.
      CSD U3 Draw Loop Plugged update your scene: |-
        # Extend Your Scene

        This is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Do This

        -   Add a draw loop to your program (you should only have one).
        -   Use the lasso selector (click, hold and drag) to select all your code and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.
        -   Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.
      CSD U3 Draw Loop Plugged update your scene_2018: |-
        # Extend Your Scene

        This is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Do This

        -   Add a draw loop to your program (you should only have one).
        -   Use the lasso selector (click, hold and drag) to select all your code and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.
        -   Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.
      CSD U3 Draw Loop Plugged update your scene_2019: |-
        # Extend Your Scene

        This is the sprite scene you made in the last lesson. You'll now be updating it a little bit to use the draw loop and sprite properties.

        <img src="https://images.code.org/ce257c4d91da460c9c2add1733873769-image-1492209174198.32.29 PM.png" style="float:right;height:100px">

        # Do This

        -   Add a draw loop to your program (you should only have one).
        -   Use the lasso selector (click, hold and drag) to select the code that will be updated each time and place it inside your draw loop. Ctrl-Z will let you undo any mistakes you make.
        -   Add code to your program that updates your sprites' `sprite.x`, `sprite.y`, or `sprite.rotation` properties so that they move. You'll need to update them with `randomNumber()`.
      CSD U3 Draw Loop Plugged wiggle sprite rotation: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # Updating Properties

        This level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.

        # Do This

        This animation already is updating one sprite's rotation property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Add code to this program to make the other alien shake just like the first.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2018: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # Updating Properties

        This level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.

        # Do This

        This animation already is updating one sprite's rotation property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Add code to this program to make the other alien shake just like the first.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite rotation_2019: |-
        <img src="https://images.code.org/03f98fedbe59ceb5ef0a8530cb81c367-image-1492040405357.gif" style="float:right;height:150px">

        # Updating Properties

        This level combines some of the skills you've already seen. It's drawing ellipses in the background and also updating sprite properties. This time it's changing the sprite's `sprite.rotation` property.

        # Do This

        This animation already is updating one sprite's rotation property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Add code to this program to make the other alien shake just like the first.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite x: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # Updating Properties

        Sprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.

        # Do This

        This animation already is updating one sprite's x property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Edit the code in this program to make the second sprite shake like the first one.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite x_2018: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # Updating Properties

        Sprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.

        # Do This

        This animation already is updating one sprite's x property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Edit the code in this program to make the second sprite shake like the first one.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite x_2019: |-
        <img src="https://images.code.org/71ae26edcc3286ff4d7697aaffecf144-image-1492036602240.gif" style="float:right;height:150px">

        # Updating Properties

        Sprites have properties that let the computer know where and how to draw them. Two common properties to use are `sprite.x` and `sprite.y` which control the location of the sprite. Assigning these properties a new value will move your sprite to a new location on the screen.

        # Do This

        This animation already is updating one sprite's x property to make it look like it's shaking

        -   Run the program to see how it works.
        -   Edit the code in this program to make the second sprite shake like the first one.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite y: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # Updating Properties

        This level is very similar to the last, but this time, you'll add in the draw loop yourself.

        # Do This

        -   Add the draw loop block to the bottom of this program.
        -   Move any blocks that need to be inside the draw loop.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite y_2018: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # Updating Properties

        This level is very similar to the last, but this time, you'll add in the draw loop yourself.

        # Do This

        -   Add the draw loop block to the bottom of this program.
        -   Move any blocks that need to be inside the draw loop.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Draw Loop Plugged wiggle sprite y_2019: |-
        <img src="https://images.code.org/1e22fb89bcdf99168aee6324d17137ee-image-1493138232702.gif" style="float:right;height:150px">

        # Updating Properties

        This level is very similar to the last, but this time, you'll add in the draw loop yourself.

        # Do This

        -   Add the draw loop block to the bottom of this program.
        -   Move any blocks that need to be inside the draw loop.
        -   Move on when your program looks like the picture to the right.
      CSD U3 Drawing Squares to Corners: |-
        <img src="https://images.code.org/9e09a96901b1e5ad9d5869b2b1fd3897-image-1498671940133.45.12 AM.png" style="float:right;width:150px">

        # Place Squares in Corners

        A big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.

        # Do This

        -   Place two rectangles exactly in the corners of the screen, just like the picture.
      CSD U3 Drawing Squares to Corners_2018: |-
        <img src="https://images.code.org/716209ce879925f89bf661f337946509-image-1529019186051.32.48 PM.png" style="float:right;width:150px">

        # Place Squares in Corners

        A big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.

        # Do This

        -   Place two rectangles exactly in the corners of the screen, just like the picture.
      CSD U3 Drawing Squares to Corners_2019: |-
        <img src="https://images.code.org/716209ce879925f89bf661f337946509-image-1529019186051.32.48 PM.png" style="float:right;width:150px">

        # Place Squares in Corners

        A big part of using Game Lab is understanding position. Remember you can always turn on the grid or hover with the mouse to help find the x and y position you want.

        # Do This

        -   Place two rectangles exactly in the corners of the screen, just like the picture.
      CSD U3 Else: |-
        # What If My Condition Isn't True?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        Sometimes we want to tell our program what to do if a condition is `true`, but also what to do if it's `false`. Pressing the plus button at the bottom of your conditional block will give you another section called `else`. This `else` section is a fallback - it will get called whenever the condition in the `if` before it is `false`.

        # Do This

        The gears are back again. The last time you worked with them, you made them spin when the space bar is pressed. Instead of the gears only spinning when the space key is pressed, we want them to spin one way when the space key is pressed and spin the other way when it's not pressed.
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   Click the _plus_ button at the bottom of the if block to add an else.
        -   Add commands to make the gears spin opposite of the direction that they do when the space bar is pressed.
      CSD U3 Else_2018: |-
        # What If My Condition Isn't True?

        <img src="https://images.code.org/1a997d78fcd88efeb9e6dc5a02aa88e8-image-1464706463138.53.58.png" width="125px" style="float:right">

        Sometimes we want to tell our program what to do if a condition is `true`, but also what to do if it's `false`. Pressing the plus button at the bottom of your conditional block will give you another section called `else`. This `else` section will be run whenever the condition in the `if` before it is `false`.

        # Do This

        The gears are back again. The last time you worked with them, you made them spin when the space bar is pressed. Instead of the gears only spinning when the space key is pressed, we want them to spin one way when the space key is pressed and spin the other way when it's not pressed.
        <img src="https://images.code.org/b074d47ca8dfa5ab3bfd08344b4f4e42-image-1464706389475.gif" style="float:right">

        -   Click the _plus_ button at the bottom of the if block to add an else.
        -   Add commands to make the gears spin opposite of the direction that they do when the space bar is pressed.
      CSD U3 Else_2019: |-
        # Reverse the Gears

        The gears are back. They already spin one direction when you press the space bar, now you'll want them to spin the other direction when the space bar isn't pressed.

        # Do This

        -   Makes the gears spin opposite of the direction that they do when the space bar is pressed.
      CSD U3 Entertainment Sample 1: |-
        # Alien Jumper

        Press "Run" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.
      CSD U3 Entertainment Sample 1_2018: |-
        # Alien Jumper

        Press "Run" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.
      CSD U3 Entertainment Sample 1_2019: |-
        # Alien Jumper

        Press "Run" to play the game on the left.  You can make the alien jump with the space bar, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.
      CSD U3 Entertainment Sample 2: |-
        # Hungry Bunny

        The bunny is hungry, and it's looking for mushrooms and carrots for dinner.

        To win, you'll need to find a dinner bowl, then collect at least ten carrots and five mushrooms.

        Make sure to avoid the bugs.  Ladybugs and snails will eat your food, and bees will sting you, making you drop everything!

        Use the space bar to jump.  You can squash ladybugs and snails by jumping on them.

        Click "Run" to start the program.
      CSD U3 Entertainment Sample 2_2018: |-
        # Hungry Bunny

        The bunny is hungry, and it's looking for mushrooms and carrots for dinner.

        To win, you'll need to find a dinner bowl, then collect at least ten carrots and five mushrooms.

        Make sure to avoid the bugs.  Ladybugs and snails will eat your food, and bees will sting you, making you drop everything!

        Use the space bar to jump.  You can squash ladybugs and snails by jumping on them.

        Click "Run" to start the program.
      CSD U3 Entertainment Sample 2_2019: |-
        # Hungry Bunny

        The bunny is hungry, and it's looking for mushrooms and carrots for dinner.

        To win, you'll need to find a dinner bowl, then collect at least ten carrots and five mushrooms.

        Make sure to avoid the bugs.  Ladybugs and snails will eat your food, and bees will sting you, making you drop everything!

        Use the space bar to jump.  You can squash ladybugs and snails by jumping on them.

        Click "Run" to start the program.
      CSD U3 Entertainment Sample 3: |-
        # Animated Comics

        Combining images, text, and some subtle animation can make for really interesting comics or graphic stories.  Click "Run" to see an example.
      CSD U3 Entertainment Sample 3_2018: |-
        # Animated Comics

        Combining images, text, and some subtle animation can make for really interesting comics or graphic stories.  Click "Run" to see an example.
      CSD U3 Entertainment Sample 3_2019: |-
        # Animated Comics

        Combining images, text, and some subtle animation can make for really interesting comics or graphic stories.  Click "Run" to see an example.
      CSD U3 Entertainment Sample 4: |-
        # Stamp Pad

        Click "Run" to start the program, then use the stamp pad to draw pictures with simple colors and animal stamps.
      CSD U3 Entertainment Sample 4_2018: |-
        # Stamp Pad

        Click "Run" to start the program, then use the stamp pad to draw pictures with simple colors and animal stamps.
      CSD U3 Entertainment Sample 4_2019: |-
        # Stamp Pad

        Click "Run" to start the program, then use the stamp pad to draw pictures with simple colors and animal stamps.
      CSD U3 Functions Add Change Background: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        <img src="https://images.code.org/943c67e59502334fc65a25e690076bdb-image-1475030156530.33.54 PM.png" style="float:right; height:100px">

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "crazy" background are. Have fun with it!
      CSD U3 Functions Add Change Background_2018: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "silly" background are. Have fun with it!
      CSD U3 Functions Add Change Background_2019: |-
        # Change the Background with the Score

        Once you've caught 10 coins it's time to celebrate. You should change the background to be something fun.

        # Do This

        -   Use an **if-statement** and two separate functions to draw your backgrounds.
        -   Then go write your functions outside your draw loop. You get to decide what a "simple" or "silly" background are. Have fun with it!
      CSD U3 Functions Add IsTouching: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Add IsTouching_2018: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Add IsTouching_2019: |-
        # Catch the Coin, Increase the Score

        Let's make that score change now, too, to complete the game. You'll need to be able to tell when the bunny is touching the coin and then reset it.

        # Do This

        -   Use an **if-statement** and the **isTouching** block to increase the score when the bunny catches the coin.
        -   Make sure you're **calling your function** to reset the coin once it's been caught.
        -   Play the game and **randomize the velocity of the coin** to a range that you think is fun.
      CSD U3 Functions Call Draw Loop: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Draw Loop_2018: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Draw Loop_2019: |-
        # Calling Functions in the Draw Loop

        You can call a function inside the draw loop, just as you would anywhere else in your code.

        # Do This

        A function that will draw a background has been created for you. A sprite has been created to move across the background.

        -   **Call the function inside the draw loop** so that the sprite appears on top of the background.
        -   **Note:** Don't create functions inside the draw loop. Make them at the bottom of your code.
      CSD U3 Functions Call Function: |-
        # Calling Functions

        Functions let you build your own blocks and decide what code goes inside of them. This is the command that lets you create a new function.

        ![](<https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09 PM.png>)

        You use or "call" your function like any other block by using the name you gave it.

        ![](<https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00 PM.png>)

        The blocks to create and call functions can be found in the "Functions" tab of the palette.

        ![](<https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36 PM.png>)

        # Do This

        This program has already created 2 functions. Only one of them is being called.

        -   **Call the second function** to reveal the full image. Use the function that is being called as a guide.
        -   **Tip:** Just as with all other blocks, spelling and capitalization are important here.
      CSD U3 Functions Call Function_2018: |-
        # Calling Functions

        Functions let you build your own blocks and decide what code goes inside of them. This is the command that lets you create a new function.

        ![](<https://images.code.org/2493f74065d4e642ca51429b8832e431-image-1474913839061.17.09 PM.png>)

        You use or "call" your function like any other block by using the name you gave it.

        ![](<https://images.code.org/61a6eb716e263b580ecd63fab0de7547-image-1474913770359.16.00 PM.png>)

        The blocks to create and call functions can be found in the "Functions" tab of the palette.

        ![](<https://images.code.org/a570a05be61297ee9f0d79a02df8db6e-image-1474922721897.44.36 PM.png>)

        # Do This

        This program has already created 2 functions. Only one of them is being called.

        -   **Call the second function** to reveal the full image. Use the function that is being called as a guide.
        -   **Tip:** Just as with all other blocks, spelling and capitalization are important here.
      CSD U3 Functions Call Function_2019: |-
        # Calling Functions

        Functions let you build your own blocks and decide what code goes inside of them.  This program has already created two functions, but only one of them is being called.

        # Do This

        -   **Call the second function** to reveal the full image. Use the function that is being called as a guide.
        -   **Tip:** Just as with all other blocks, spelling and capitalization are important here.
      CSD U3 Functions Create Function: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Create Function_2018: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Create Function_2019: |-
        # Creating Functions to Organize Code

        In Game Lab all the action is happening in the draw loop, but too much complex code makes it really confusing to read. To keep your draw loop easy to read, use functions for larger chunks of code. You can call them inside the draw loop and define them below. This is a really good example of using **abstraction** to think about problems at a high level and worry about details later.

        <img src="https://images.code.org/1a5beeaad6e55c5b27a43604be4f039a-image-1475199750468.42.07 PM.png" style="float:right;width:150px">

        # Do This

        This program should draw a daytime scene or a nighttime scene, depending on the location of the mouse. The draw loop describes what needs to happen but one of the functions hasn't been written yet.

        -   **Write the `drawNight` function** which has been created but is empty.
        -   Hint: Look at the picture to the right for how your night image should look. Can you use the `drawDay` function to help you at all?
      CSD U3 Functions Order Functions: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Order Functions_2018: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Order Functions_2019: |-
        # Reordering Code

        Placing code inside functions makes it easy to read and make changes to. Good names for functions indicate what your program is doing to a reader. You can call your functions in a different order to quickly make significant changes to how your program runs.

        # Do This

        This program has already created 4 functions that draw parts of a scene. Unfortunately it's not coming out right.

        -   **Read the 4 functions** to know what they do
        -   **Call the functions** in an order that draws the scene in the way that looks best to you
      CSD U3 Functions Randomize Sprite: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Randomize Sprite_2018: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Randomize Sprite_2019: |-
        # Making Changes to Functions

        A nice benefit of using functions to remove repeated code is that you can now easily make changes to multiple places in your code. Just change how you create the functions, and your program will now use the new code everywhere your function is called.

        # Do This

        Make changes to the `setFlyer` function so that the flyer starts at a random Y location between 0 and 400, and moves at a random velocity every time he is reset.
      CSD U3 Functions Reset Sprite: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Reset Sprite_2018: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Reset Sprite_2019: |-
        # Calling Functions Multiple Times

        You'll often want to use the same code at many places in your program. Once you've created a function you can call it as many times as you like.

        # Do This

        This code creates a sprite that moves across the screen once. How can you make it go back across the screen?

        -   **Note:** The function is already called once at the beginning of your program
        -   Read the condition of the **if-statement** inside the draw loop. Why do you think it's there?
        -   Use this if-statement and the function written for you to make the sprite move across the screen multiple times.
      CSD U3 Functions Write Reset: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 Functions Write Reset_2018: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 Functions Write Reset_2019: |-
        # Write Your Own Function

        Time to practice writing functions of your own. This is a very simple game in which coins fall from the sky and the bunny tries to catch them. All you need to do is write the function that sets up the coin.

        # Do This

        -   **Read and run the code** that already exists to make sure you know how it works.
        -   **Write the code for the `setCoin`** function to make the coin fall from the sky.
        -   You can go look at some of the previous levels if you need help.
      CSD U3 If Else: |-
        # When to Provide a Fallback

        The else clause is useful as a fallback to the main condition that you're checking - that is, if you _care_ what happens when your primary condition is `false`, you should provide an else clause to take care of it.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Do This

        Click "Run" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.

        -   Add an `if else` statement after you update the position of the bees.
        -   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.
        -   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.
      CSD U3 If Else predict question: |-
        # If/Else Predict

        Read through the following program, paying special attention to the `if/else` block on Line 10.  After discussing the following questions with your partner, write down your predictions and run the code to see what the program does.

        -   What happens when you press the space bar?
        -   What happens when you **don't** press the space bar?
      CSD U3 If Else_2018: |-
        # When to Provide a Fallback

        The else clause is useful as a fallback to the main condition that you're checking - that is, if you _care_ what happens when your primary condition is `false`, you should provide an else clause to take care of it.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Do This

        Click "Run" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.

        -   Add an `if else` statement after you update the position of the bees.
        -   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.
        -   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.
      CSD U3 If Else_2019: |-
        # When to Provide an "Else"

        The else clause is useful when you want the program to do one thing when your condition is true, and a _different_ thing when your condition is false.

        <img src="https://images.code.org/730a895b50375781e72c95f5fa21d09d-image-1477681109870.gif" style="float:right;">

        # Do This

        Click "Run" to see the swarm of bees created for you and a flower on the left side of the screen. Make the swarm of bees **appear when the mouse is near the flower** (on the left side of the screen) and **disappear when the mouse is away from the flower** (on the right side of the screen). Look at the example on the right.

        -   Add an `if else` statement after the code that updates the position of the bees
        -   In the input of the if use a boolean to check if the x position of the mouse is on the side of the screen with the flower.
        -   Set the `visible` property of each bee inside both the if and else statements appropriately to make the bees only show near the flower.
      CSD U3 Input Fish: |-
        # Fish With Arrows

        The fish are back. Can you make the fish move left only when the left arrow key is pressed down?

        # Do This

        -   Add an if statement to check when the left arrow key is pressed down.
        -   Move the commands for moving the fish inside the if statement.
      CSD U3 Input Fish_2018: |-
        # Fish With Arrows

        The fish are back. Can you make the fish move left only when the left arrow key is pressed down?

        # Do This

        -   Add an if statement to check when the left arrow key is pressed down.
        -   Move the commands for moving the fish inside the if statement.
      CSD U3 Input Fish_2019: |-
        # Fish With Arrows

        The fish are back. Can you make the fish move left only when the left arrow key is pressed down?

        # Do This

        -   Add an if statement to check when the left arrow key is pressed down.
        -   Move the commands for moving the fish inside the if statement.
      CSD U3 Input Gears: |-
        # Gears with Conditionals

        Let's make the gears spin only when the space key is being held down.

        # Do This

        -   Add an `if` statement.
        -   Use `keyDown` as input to the if statement to check when the space key is pressed.
        -   Move the code that makes the gears rotate inside the `if`.
      CSD U3 Input Gears_2018: |-
        # Gears with Conditionals

        Let's make the gears spin only when the space key is being held down.

        # Do This

        -   Add an `if` statement.
        -   Use `keyDown` as input to the if statement to check when the space key is pressed.
        -   Move the code that makes the gears rotate inside the `if`.
      CSD U3 Input Gears_2019: |-
        # Gears with Conditionals

        Let's make the gears spin only when the space key is being held down.

        # Do This

        -   Add an `if` statement.
        -   Use `keyDown` as input to the if statement to check when the space key is pressed.
        -   Move the code that makes the gears rotate inside the `if`.
      CSD U3 Interactive Card Background: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Background_2018: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Background_2019: |-
        # Laying Out Your Background

        Before beginning this project, you should have already completed the Interactive Card Planning activity, and you'll want to have that paper with you as you develop your program. Preparation is one of the **most important** elements of successfully creating a program!

        # Do This

        Refer to your planning activity sheet to help you lay out the shapes that will become the background to your card.

        -   First, figure out what the lowest layer in your image is (this should use the `background()` block) and add it to the very top of the draw loop.
        -   Next, layer each additional drawing block in the order you want them to appear in the stack.
        -   Finally, add a comment to the top of this section of code to describe what it does, and if you have any particularly complicated chunks of code within (such as code to draw a tree or a house), add a descriptive comment to that as well.

        **Challenge:** Can you use variables or `randomNumber()` to add some subtle animation to your background layer?
      CSD U3 Interactive Card Exemplar: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Exemplar_2018: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Exemplar_2019: |-
        # Example Project

        Run the program a few times and answer the following questions:

        1.  Which elements appear to use drawing commands?

        2.  Which elements appear to be Sprites?

        3.  For each Sprite, which properties are being updated?

        4.  Where do you see conditionals being used?

        5.  Are there elements that you don’t understand?
      CSD U3 Interactive Card Final: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out now to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Final_2018: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out how to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Final_2019: |-
        # Finishing Touches

        Now's your chance to put some finishing touches on your card. We've included some new blocks that you haven't seen before, so take some time to look around and try out some new blocks.

        # Do This

        Consider adding any of the following to finish up your card:

        -   Text
        -   Additional images for your sprites
        -   Subtle animation in the background
        -   Sound effects  (Can you figure out how to do this?)
        -   More ways for a user to interact with your card
      CSD U3 Interactive Card Other Conditionals: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Other Conditionals_2018: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Other Conditionals_2019: |-
        # Other Conditionals

        The _surprise_ in your card comes from conditionals that don't directly respond to user input, but to some other element of your card. This could be triggered by a variable that gets updated as the user interacts with your card, or a Sprite moving into a certain part of the screen.

        # Do This

        For each of the remaining items on your interactions table:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the draw loop.
        -   Add the appropriate Boolean comparison block to the condition (eg. `<`, `>`, or `==`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card Sprites: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card Sprites_2018: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card Sprites_2019: |-
        # Adding Sprites

        Now that you have the more static elements of your card layed out, it's time to add the Sprites. Your Sprites should provide the primary animations and interactions for your card - so feel free to get creative here and have fun.

        # Do This

        Check out the Sprites table on the back of your planning sheet. For each Sprite in your table:

        -   Initialize the Sprite at the top of your program with `createSprite()`.
        -   Find or create the image(s) for the Sprite and set it with `setAnimation()`.
        -   Inside the `draw()` loop update any Sprite properties that we will be constantly animating (we'll deal with conditionals in a minute).
      CSD U3 Interactive Card User Input: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card User Input_2018: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Interactive Card User Input_2019: |-
        # User Input

        You've got a background, you've got Sprites, now it's time to give your user something to do!

        # Do This

        On the interactions table from your planning sheet, find all of the interactions that rely on user input (key presses and mouse movements). For each of those interactions:

        -   Add an `if` block (or `if-else` block if you need a fallback action) inside the `draw()` loop.
        -   Add the appropriate input block for your condition (such as `keyDown()` or `mouseDown()`).
        -   Add the necessary actions inside the `if` block.

        **Challenge:** Can you create more sophisticated conditionals by nesting them or using compound booleans?
      CSD U3 Keyboard Input Challenge: |-
        # Challenge

        _Check with your teacher before trying this challenge._

        Here's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!

        -   Use the "space" key to control another property of your bug sprite, such as rotation or scale.
        -   Add some randomization to your movement.
        -   Add a second sprite and control it with a different set of keys ("w", "a", "s", and "d" are common choices).
        -   Add some shapes to your background to make the scene more interesting.
      CSD U3 Keyboard Input Challenge_2018: |-
        # Challenge

        _Check with your teacher before trying this challenge._

        Here's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!

        -   Use the "space" key to control another property of your bug sprite, such as rotation or scale.
        -   Add some randomization to your movement.
        -   Add a second sprite and control it with a different set of keys ("w", "a", "s", and "d" are common choices).
        -   Add some shapes to your background to make the scene more interesting.
      CSD U3 Keyboard Input Challenge_2018_2019: |-
        # Challenge

        _Check with your teacher before trying this challenge._

        Here's the bug program you've been working on for the past few levels. Choose one or more of following challenges, or add new features of your own!

        -   Use the "space" key to control another property of your bug sprite, such as rotation or scale.
        -   Add some randomization to your movement.
        -   Add a second sprite and control it with a different set of keys ("w", "a", "s", and "d" are common choices).
        -   Add some shapes to your background to make the scene more interesting.
      CSD U3 Keypress Boolean: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the up arrow on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the up arrow on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed-2018: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the space bar on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Boolean embed-2018_2019: |-
        # Prediction - keyDown()

        The `keyDown()` block is the first of a new set of blocks that will let us get input from the user. This is the first step on our road to actually making games! See if you can predict how the `keyDown()` block works. You will **not write any code**.

        # Do This

        -   Read the program carefully.
        -   **Make a prediction about how the code will run** and write it in the box below. Be specific!
        -   Run the program.
        -   While the program is running, press the space bar on your keyboard.
        -   Were you correct? Were you surprised? Discuss with a classmate.
      CSD U3 Keypress Watchers Predict: |-
        # Make a Prediction: User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        Read the program and predict below what will happen when you press each of the up, down, left, and right arrows.

        After making your prediction, run the code and write down or share with your neighbor your observations.

        -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   What do you think the exclamation mark (`!`) on line 10 does?
        -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers Predict_2018: |-
        # Make a Prediction: User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        Read the program and predict below what will happen when you press each of the up, down, left, and right arrows.

        After making your prediction, run the code and write down or share with your neighbor your observations.

        -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   What do you think the exclamation mark (`!`) on line 10 does?
        -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers Predict_2019: |-
        # Make a Prediction: User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        Read the program and predict below what will happen when you press each of the up, down, left, and right arrows.

        After making your prediction, run the code and write down or share with your neighbor your observations.

        -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
        -   What do you think the exclamation mark (`!`) on line 10 does?
        -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers_2018: |-
        # More Ways to Get User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        # Do This

        You will **not write any code** in this program.

        -   Read the program and see if you can guess what will happen.
        -   While the program is running, press the arrow keys and observe how the screen responds.
        -   Write down or share with your neighbor your observations.
            -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
            -   What do you think the exclamation mark (`!`) on line 10 does?
            -   How might you use the different keypress blocks in a game?
      CSD U3 Keypress Watchers_2019: |-
        # More Ways to Get User Input

        So far you've used `keyDown` as a way to let users control your programs, but that's just one of many ways to take input. In fact, just one of many ways _to detect keypresses_! Depending on how you want to react to a keypress, there are a few other blocks you might want to use.

        # Do This

        You will **not write any code** in this program.

        -   Read the program and see if you can guess what will happen.
        -   While the program is running, press the arrow keys and observe how the screen responds.
        -   Write down or share with your neighbor your observations.
            -   What seems to be the difference between `keyDown()`, `keyWentDown()`, and `keyWentUp()`?
            -   What do you think the exclamation mark (`!`) on line 10 does?
            -   How might you use the different keypress blocks in a game?
      CSD U3 L11 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L11 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L11 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L12 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L12 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L12 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L13 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L13 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L13 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L15 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L15 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L15 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L16 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L16 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L16 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L17 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L17 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L17 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L18 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L18 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L18 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L19 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L19 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L19 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L3 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L3 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L3 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L4 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L4 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L4 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L5 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L5 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L5 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L6 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L6 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L6 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L7 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L7 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L7 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L9 Freeplay: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L9 Freeplay_2018: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 L9 Freeplay_2019: |-
        # Free Play

        Use what you've learned to create whatever you like.  When you're finished, you can click  ![](<https://images.code.org/2fd36aba2af21d292932b77fb0b9fd0e-image-1498689573973.36.43 PM.png>)  to send your creation to a friend, or ![](<https://images.code.org/1ddae93513aff160349643f1909590e8-image-1498689597186.36.50 PM.png>) to send it to your Projects Gallery.
      CSD U3 Mouse Input Bee 1: |-
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif" style="float:right">

        # Mouse X and Y

        One of the simplest ways to take input is to just make a sprite follow the user's mouse position. **You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This follows the pattern you learned with sprite properties. `World` is the name of the object. `mouseX` and `mouseY` are the names of the properties.

        # Do This

        You are going to make a bee sprite follow the mouse around the game area.

        -   The bee image is already loaded in the animation tab for you.
        -   Create a bee sprite that draws in the center of the window.
        -   Inside the draw loop update the position of the sprite to the position of the mouse:
            -   Set the x position of the sprite to the value of `World.mouseX`.
            -   Set the y position of the sprite to the value of `World.mouseY`.
        -   Run the program to test that it works.
      CSD U3 Mouse Input Bee 1_2018: |-
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif" style="float:right">

        # Mouse X and Y

        One of the simplest ways to take input is to just make a sprite follow the user's mouse position. **You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This follows the pattern you learned with sprite properties. `World` is the name of the object. `mouseX` and `mouseY` are the names of the properties.

        # Do This

        You are going to make a bee sprite follow the mouse around the game area.

        -   The bee image is already loaded in the animation tab for you.
        -   Create a bee sprite that draws in the center of the window.
        -   Inside the draw loop update the position of the sprite to the position of the mouse:
            -   Set the x position of the sprite to the value of `World.mouseX`.
            -   Set the y position of the sprite to the value of `World.mouseY`.
        -   Run the program to test that it works.
      CSD U3 Mouse Input Bee 1_2019: |-
        <img src="https://images.code.org/d2092b4f2debc336f963d48bd6cf4973-image-1477681020928.gif" style="float:right">

        # Mouse X and Y

        One of the simplest ways to take input is to just make a sprite follow the user's mouse position. **You can get the x and y location of the mouse using `World.mouseX` and `World.mouseY`.**  This follows the pattern you learned with sprite properties. `World` is the name of the object. `mouseX` and `mouseY` are the names of the properties.

        # Do This

        You are going to make a bee sprite follow the mouse around the game area.

        -   The bee image is already loaded in the animation tab for you.
        -   Create a bee sprite that draws in the center of the window.
        -   Inside the draw loop update the position of the sprite to the position of the mouse:
            -   Set the x position of the sprite to the value of `World.mouseX`.
            -   Set the y position of the sprite to the value of `World.mouseY`.
        -   Run the program to test that it works.
      CSD U3 Mouse Input Bee 2: |-
        # Random Around Point

        <img src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif" style="float:right">

        Now that you can make the bee follow the mouse, lets make a bee fly around the mouse as shown in the picture on the right.  In order to do this, you will need to **add a random amount between -50 and 50 to the `mouseX` or `mouseY`.**

        # Do This

        You already have a bee sprite that follows the mouse.

        -   Update the x and y location to be randomly close to the mouse.
            -   Add a random number between -50 and 50 to the `World.mouseX` and `World.mouseY`.
        -   If necessary, use the `World.frameRate` block to slow down the animation and find the best frame rate.

        _Challenge: **Add 3 more bees** that follow the mouse in the same way to make a swarm of bees._
      CSD U3 Mouse Input Bee 2_2018: |-
        # Random Around Point

        <img src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif" style="float:right">

        Now that you can make the bee follow the mouse, lets make a bee fly around the mouse as shown in the picture on the right.  In order to do this, you will need to **add a random amount between -50 and 50 to the `mouseX` or `mouseY`.**

        # Do This

        You already have a bee sprite that follows the mouse.

        -   Update the x and y location to be randomly close to the mouse.
            -   Add a random number between -50 and 50 to the `World.mouseX` and `World.mouseY`.
        -   If necessary, use the `World.frameRate` block to slow down the animation and find the best frame rate.

        _Challenge: **Add 3 more bees** that follow the mouse in the same way to make a swarm of bees._
      CSD U3 Mouse Input Bee 2_2019: |-
        # Random Around Point

        <img src="https://images.code.org/d124946bb9e01a3623078c2a87beea8c-image-1477681483067.gif" style="float:right">

        Now that you can make the bee follow the mouse, lets make a bee fly around the mouse as shown in the picture on the right.  In order to do this, you will need to **add a random amount between -50 and 50 to the `mouseX` or `mouseY`.**

        # Do This

        You already have a bee sprite that follows the mouse.

        -   Update the x and y location to be randomly close to the mouse.
            -   Add a random number between -50 and 50 to the `World.mouseX` and `World.mouseY`.
        -   If necessary, use the `World.frameRate` block to slow down the animation and find the best frame rate.

        _Challenge: **Add 3 more bees** that follow the mouse in the same way to make a swarm of bees._
      CSD U3 Movement Fish: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Fish Animation

        Using the counter pattern, make all three of the fish move in the image to the left. The blue fish should move the fastest, followed by the orange fish, with the green fish being the slowest.
      CSD U3 Movement Fish challenge_2018: |-
        # More fish!

        This time, try updating the the rotation of each fish as it moves to make it look even more like it is swimming.  You can also try adding extra features, such as bubbles that rise up through the water.
      CSD U3 Movement Fish challenge_2019: |-
        # More fish!

        This time, try updating the the rotation of each fish as it moves to make it look even more like it is swimming.  You can also try adding extra features, such as bubbles that rise up through the water.
      CSD U3 Movement Fish_2018: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Fish Animation

        Using the counter pattern, make all three of the fish move as in the image to the right. The blue fish should move the fastest, and the green fish should move the slowest.
      CSD U3 Movement Fish_2019: |-
        <img src="https://images.code.org/7852ab38a8222ee827edeff2767e8efd-image-1492037897236.gif" style="float: right; margin-left: 20px;">

        # Fish Animation

        Using the counter pattern, make all three of the fish move as in the image to the right. The blue fish should move the fastest, and the green fish should move the slowest.
      CSD U3 Movement Gears: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif" style="width:200px; float:right; margin-left: 20px;">

        # Rotation Direction

        When you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!

        # Do This

        There are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.

        -   Make the gears rotate so they look like they are working as one system.
        -   **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Gears_2018: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif" style="width:200px; float:right; margin-left: 20px;">

        # Rotation Direction

        When you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!

        # Do This

        There are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.

        -   Make the gears rotate so they look like they are working as one system.
        -   **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Gears_2019: |-
        <img src="https://images.code.org/eac110e64ccad62482c82d4ef66f237b-image-1465518920408.gif" style="width:200px; float:right; margin-left: 20px;">

        # Rotation Direction

        When you use the counter pattern for the `rotation` property with addition, the object will always rotate clockwise. Sometimes however you will want your sprite to rotate the other direction. To do this you can just use subtraction!

        # Do This

        There are three gears set up for you. You need to make the gears all look like they are rotating in sync with each other.

        -   Make the gears rotate so they look like they are working as one system.
        -   **Hint: They won't all rotate the same direction**.
      CSD U3 Movement Your Own 1: "# Membuat sebuah animasi untuk anda\n\nsendiri\\\r\n\\\r\nMenggunakan
        pola counter dan dan bersifat sprite, membuat animasi milikmu semuanya. Anda
        mungkin mempertimbangkan pada gambar untuk membangun statis yang telah anda
        buat di masa lalu, atau masa datang dengan membuat gambar baru atau cerita
        untuk memberitahukan.\\\r\n\\\r\n\n# \n\nLakukan Ini\\\r\n\\\r\nUntuk memulai,
        mari kita tetapkan hanya dengan statis.\\\r\n\\\r\n\n-   Tambahkan tab\n    gambar
        Animasi.\\\r\n-   Membuat sprite dan menetapkan gambar.\\\r\n-   M\n-   Tetapkan\n
        \   hingga gambar loop untuk gambar latar belakang dan sprite anda."
      CSD U3 Movement Your Own 1_2018: "# Membuat sebuah animasi untuk anda\n\nsendiri\\\r\n\\\r\nMenggunakan
        pola counter dan dan bersifat sprite, membuat animasi milikmu semuanya. Anda
        mungkin mempertimbangkan pada gambar untuk membangun statis yang telah anda
        buat di masa lalu, atau masa datang dengan membuat gambar baru atau cerita
        untuk memberitahukan.\\\r\n\\\r\n\n# \n\nLakukan Ini\\\r\n\\\r\nUntuk memulai,
        mari kita tetapkan hanya dengan statis.\\\r\n\\\r\n\n-   Tambahkan tab\n    gambar
        Animasi.\\\r\n-   Membuat sprite dan menetapkan gambar.\\\r\n-   M\n-   Tetapkan\n
        \   hingga gambar loop untuk gambar latar belakang dan sprite anda."
      CSD U3 Movement Your Own 1_2019: "# Membuat sebuah animasi untuk anda\n\nsendiri\\\r\n\\\r\nMenggunakan
        pola counter dan dan bersifat sprite, membuat animasi milikmu semuanya. Anda
        mungkin mempertimbangkan pada gambar untuk membangun statis yang telah anda
        buat di masa lalu, atau masa datang dengan membuat gambar baru atau cerita
        untuk memberitahukan.\\\r\n\\\r\n\n# \n\nLakukan Ini\\\r\n\\\r\nUntuk memulai,
        mari kita tetapkan hanya dengan statis.\\\r\n\\\r\n\n-   Tambahkan tab\n    gambar
        Animasi.\\\r\n-   Membuat sprite dan menetapkan gambar.\\\r\n-   M\n-   Tetapkan\n
        \   hingga gambar loop untuk gambar latar belakang dan sprite anda."
      CSD U3 Movement Your Own 2: |-
        # Add movement to your animation

        With your static scene set up, you can now add some movement. When you are satisfied with your program, click the "Submit" button to turn it in. You can always unsubmit and continue working if you want to add features.

        # Do This

        In the draw loop

        -   Identify which sprite properties to change.
        -   Update those properties using the counter pattern.

        _Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._
      CSD U3 Movement Your Own 2_2018: |-
        # Add movement to your animation

        With your static scene set up, you can now add some movement.

        # Do This

        In the draw loop

        -   Identify which sprite properties to change.
        -   Update those properties using the counter pattern.

        _Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._
      CSD U3 Movement Your Own 2_2019: |-
        # Add movement to your animation

        With your static scene set up, you can now add some movement. When you are satisfied with your program, click the "Submit" button to turn it in. You can always unsubmit and continue working if you want to add features.

        # Do This

        In the draw loop

        -   Identify which sprite properties to change.
        -   Update those properties using the counter pattern.

        _Tip: If your counter pattern isn't working like you expect, add watchers to help debug your program._
      CSD U3 Plotting Shapes Shape Lab: "# Drawing Shapes\n\nExplore using this tool
        that lets you draw different colored shapes. \n\nMake sure you hit \"Run\"
        and try out turning on the grid to help you place shapes precisely.\n\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png>)"
      CSD U3 Plotting Shapes Shape Lab_2018: "# Drawing Shapes\n\nExplore using this
        tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\"
        and try out turning on the grid to help you place shapes precisely.\n\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png>)"
      CSD U3 Plotting Shapes Shape Lab_2019: "# Drawing Shapes\n\nExplore using this
        tool that lets you draw different colored shapes. \n\nMake sure you hit \"Run\"
        and try out turning on the grid to help you place shapes precisely.\n\n![](<https://images.code.org/d52dbc112dcc088858c4b8f54be09aa1-image-1502914103923.07.59
        PM.png>)"
      CSD U3 Random Debug Cloud: |-
        <img src="https://images.code.org/529b7e5ddda4683e6a0cc5b3028e4dbf-image-1490824752133.58.50 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?

        _Challenge: The sun is not in the exact same place as in the picture.  Can you change the sun's coordinates so that the picture matches completely?_
      CSD U3 Random Debug Cloud_2018: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?
      CSD U3 Random Debug Cloud_2018_2019: |-
        <img src="https://images.code.org/45d1d513f5ed63592e98ea3e4a08840c-image-1520403109680.11.28 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        Now that the grass is working, let's add a cloud to the sky. Unfortunately, it looks a little funny right now.

        # Do This

        -   Debug this program to make the cloud wider than it is tall, like in the image.
        -   Hint: You'll need to change two parameters. Which ones set your cloud's width and height?
      CSD U3 Random Debug Grass: |-
        <img src="https://images.code.org/83269268e1c4f8af8551253ff4573b43-image-1490825158453.03.45 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Debug Grass_2018: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Debug Grass_2019: |-
        <img src="https://images.code.org/08c7c6cd82f4d4ff57459165f29ab624-image-1520402652290.03.37 PM.png" style="float:right;height:150px">

        # Debug - Using 4 Parameters

        This program uses the four parameter version of `rect()` and `ellipse()` to draw a simple scene.

        # Do This

        -   Debug this program and correct the error so that the grass extends across the entire bottom.
        -   Hint: You only have to change one number. Which parameter makes your rectangle (the grass) wider?
      CSD U3 Random Ellipse Behind: |-
        <img src="https://images.code.org/a8ed6092389aedceceb38a83ac59fae1-image-1490832453029.07.10 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Ellipse Behind_2018: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Ellipse Behind_2018_2019: |-
        <img src="https://images.code.org/dd73760e7129225b1e9f53a542960b9a-image-1520402430622.59.19 PM.png" style="float:right;height:150px">

        # Do This

        -   Write code that makes an orange ellipse behind the green one.
        -   Don't worry about the exact size as long as the green ellipse is entirely inside the orange one.
      CSD U3 Random Taller Rectangle: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Rectangle Size

        These `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.

        # Do This

        -   Look at the code and try to figure out how the last two inputs in `rect` work.
        -   Change the numbers in the second `rect` to make red rectangle longer than the blue one.
      CSD U3 Random Taller Rectangle_2018: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Rectangle Size

        These `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.

        # Do This

        -   Look at the code and try to figure out how the last two inputs in `rect` work.
        -   Change the numbers in the second `rect` to make red rectangle longer than the blue one.
      CSD U3 Random Taller Rectangle_2019: |-
        <img src="https://images.code.org/02871e5c5d041ea1724e4a02d3697941-image-1492721665345.54.10 PM.png" style="float:right;height:150px; border: 1px solid #CCC">

        # Rectangle Size

        These `rect` blocks have two more parameters that you can use to control the size. Notice that the `noStroke()` block turns off the stroke (border) for shapes.

        # Do This

        -   Look at the code and try to figure out how the last two inputs in `rect` work.
        -   Change the numbers in the second `rect` to make red rectangle longer than the blue one.
      CSD U3 Random background: |-
        # Background

        Sometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.

        # Do This

        -   Run the code to see `background` work.
        -   Change the background from yellow to orange.

        _Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_
      CSD U3 Random background2: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png" style="float:right;height:150px">

        # Background

        `background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.

        # Do This

        -   Use `background()` to make a "black" background behind the green circle.
      CSD U3 Random background2_2018: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png" style="float:right;height:150px">

        # Background

        `background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.

        # Do This

        -   Use `background()` to make a "black" background behind the green circle.
      CSD U3 Random background2_2019: |-
        <img src="https://images.code.org/a68cfd23a13b6bdeef91dc9fd584f657-image-1491332601738.03.04 PM.png" style="float:right;height:150px">

        # Background

        `background()` will draw on top of everything already in your drawing, so it's important to think about the order of your code.

        # Do This

        -   Use `background()` to make a "black" background behind the green circle.
      CSD U3 Random background_2018: |-
        # Background

        Sometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.

        # Do This

        -   Run the code to see `background` work.
        -   Change the background from yellow to orange.

        _Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_
      CSD U3 Random background_2019: |-
        # Background

        Sometimes you'll want to fill the entire screen with a color.  For that, you can use `background`.  It covers everything on the screen with the color you choose.

        # Do This

        -   Run the code to see `background` work.
        -   Change the background from yellow to orange.

        _Challenge: There is a purple square that is covered up by the background.  Can you change the order of the code so you can see both the purple and blue squares?_
      CSD U3 Random rainbow snake: |-
        <img src="https://images.code.org/d1e4780e483ffa510a27e91b2b1f1963-image-1491341267537.26.14 PM.png" style="float:right;height:150px">

        # Rainbow Snake

        This program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.

        # Do This

        -   Run the program several times to see how the starter code works.
        -   Add at least three new different colored circles to your rainbow snake.
        -   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.

        _Challenge: Can you make size of some of the circles random, too?_
      CSD U3 Random rainbow snake_2018: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png" style="float:right;height:150px">

        # Rainbow Snake

        This program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.

        # Do This

        -   Run the program several times to see how the starter code works.
        -   Add at least three new different colored circles to your rainbow snake.
        -   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.

        _Challenge: Can you make size of some of the circles random, too?_
      CSD U3 Random rainbow snake_2018_2019: |-
        <img src="https://images.code.org/6af643f712b042e5b076f06cc2f902e2-image-1520404404645.32.58 PM.png" style="float:right;height:150px">

        # Rainbow Snake

        This program draws a very rare breed of rainbow snake. To make the snake draw differently every time you'll need to use random numbers.

        # Do This

        -   Run the program several times to see how the starter code works.
        -   Add at least three new different colored circles to your rainbow snake.
        -   Use `randomNumber()` to make the rest of the snake's body move up and down like the first three.

        _Challenge: Can you make the size of some of the circles random, too?_
      CSD U3 Random random ellipse: |-
        # Random Numbers

        `randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.

        # Do This

        -   Run the program several times to see how it works.
        -   Change the numbers inside `randomNumber` and run the code again a few times to see what changes.
      CSD U3 Random random ellipse2: |-
        <img src="https://images.code.org/ff3be801c7e634d49584aac103df292a-image-1491334428729.33.18 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse2_2018: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse2_2018_2019: |-
        <img src="https://images.code.org/8306a9fd01470ac8582cf4374dde7033-image-1520403513967.17.40 PM.png" style="float:right;height:150px">

        # Random Numbers

        Here's the same sun from last time.  Right now only the x-coordinate is random, but you can make the y-coordinate random, too.

        # Do This

        -   Use `randomNumber()` for the ellipse's Y parameter so the circle is drawn in a random Y position, too.
        -   As long as your circle is appearing at random X and Y positions, you can move on.
      CSD U3 Random random ellipse_2018: |-
        # Random Numbers

        `randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.

        # Do This

        -   Run the program several times to see how it works.
        -   Change the numbers inside `randomNumber` and run the code again a few times to see what changes.
      CSD U3 Random random ellipse_2018_2019: |-
        # Random Numbers

        `randomNumber()` chooses a random number between a minimum and maximum value. You can use this code instead of writing in the specific number.  If you make your drawings with random numbers it will look a little bit different every time you run your program.

        # Do This

        -   Run the program several times to see how it works.
        -   Change the numbers inside `randomNumber` and run the code again a few times to see what changes.
      CSD U3 Scene Example: |-
        # Sprite Scenes

        By combining shapes, sprites, and a new block called `text`, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.

        ## Sketch It Out

        Before moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about `text` and how to compose a scene.
      CSD U3 Scene Example_2018: |-
        # Sprite Scenes

        By combining shapes, sprites, and text, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.

        ## Sketch It Out

        Before moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about `text` and how to compose a scene.
      CSD U3 Scene Example_2018_2019: |-
        # Sprite Scenes

        By combining shapes, sprites, and text, you can create simple scenes, stories, or comics. While this example is fairly simple, you can combine as many sprites and shapes as you like to create scenes as complex or detailed as you like.

        ## Sketch It Out

        Before moving on, take a second to sketch out a scene that you'd like to make at the end of this lesson. Consider the simple shapes that you've used in the past, sprites for your characters, and any text that you'd like on the screen. Once you've sketched out an idea, you'll learn about how to compose a scene.
      CSD U3 Sprite Movement Left: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif" style="float: right; margin-left: 20px">

        # Moving to the Left

        If adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?

        # Do This

        Make your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.

        _Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._
      CSD U3 Sprite Movement Left_2018: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif" style="float: right; margin-left: 20px">

        # Moving to the Left

        If adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?

        # Do This

        Make your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.

        _Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._
      CSD U3 Sprite Movement Left_2019: |-
        <img src="https://images.code.org/9f9162cb94a02d9b3aba9b6067d0281a-image-1491862771496.gif" style="float: right; margin-left: 20px">

        # Moving to the Left

        If adding to a sprite's x coordinate makes it move to the right, how could you make it move to the left?

        # Do This

        Make your program animate like the image to the right. Update `fly.x` inside the draw loop so that in each frame the fly is drawn a little bit further to the left.

        _Tip: You can make your sprites move faster by adding or subtracting larger numbers. The fly in our example moves about twice as fast as the plane in the last level._
      CSD U3 Sprite Movement Right: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif" style="float: right; margin-left: 20px">

        # Sprite Movement

        Using the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.

        # Do This

        Make your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.
      CSD U3 Sprite Movement Right_2018: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif" style="float: right; margin-left: 20px">

        # Sprite Movement

        Using the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.

        # Do This

        Make your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.
      CSD U3 Sprite Movement Right_2019: |-
        <img src="https://images.code.org/629bc615a879f0f3dc9f290bea2358c8-image-1491861334164.gif" style="float: right; margin-left: 20px">

        # Sprite Movement

        Using the counter pattern, you can write programs that animate sprites smoothly. Adding to or removing from a sprite's `x` or `y` property in the draw loop makes your sprite move just a bit each time it is redrawn.

        # Do This

        Make your program animate like the image to the right. We've already added a line to update `plane.x` in the draw loop, but it needs to be finished.
      CSD U3 Sprites anitab 1: |-
        # Images

        Over on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png" style="width:300px;float:right">

        Once you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.

        # Do This

        Change the sprite to your favorite image from the animations tab.

        -   A sprite that is set to an image has already been created for you.
        -   Run the code to see how it works.
        -   Change the input to the `setAnimation` command to change the look of the sprite.
        -   Try out all the different images.
      CSD U3 Sprites anitab 1_2018: |-
        # Images

        Over on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png" style="width:300px;float:right">

        Once you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.

        # Do This

        Change the sprite to your favorite image from the animations tab.

        -   A sprite that is set to an image has already been created for you.
        -   Run the code to see how it works.
        -   Change the input to the `setAnimation` command to change the look of the sprite.
        -   Try out all the different images.
      CSD U3 Sprites anitab 1_2019: |-
        # Images

        Over on the **Animations Tab**, you'll see three images that have been loaded for you. You can get to the animations tab by clicking the **Animation** button above the display area.

        <img src="https://images.code.org/f694a37bbadcf0533e7b19d8c0f5309b-image-1465580394090.35.11 PM.png" style="width:300px;float:right">

        Once you have created a sprite, you can **use the `sprite.setAnimation()` command to change the look of your sprite from a rectangle to a picture.** All the images you have loaded in the Animation Tab show up in the `sprite.setAnimation()` dropdown.  The alien is set up for you as an example.

        # Do This

        Change the sprite to your favorite image from the animations tab.

        -   A sprite that is set to an image has already been created for you.
        -   Run the code to see how it works.
        -   Change the input to the `setAnimation` command to change the look of the sprite.
        -   Try out all the different images.
      CSD U3 Sprites anitab 2: |-
        # Upload your own image

        You can also use the Animation tab to upload or draw your own image.

        # Do This

        You are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.

        -   Download your kite image. Images with transparent backgrounds work best.
        -   Open the animations tab.
        -   Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png" style="width:50px"> to upload an image.
        -   Select the file from your computer.
        -   Rename your image so it is easy to remember. To rename it click the text below the image.
        -   Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.

        Don't worry if your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 2_2018: |-
        # Upload your own image

        You can also use the Animation tab to upload or draw your own image.

        # Do This

        You are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.

        -   Download your kite image. Images with transparent backgrounds work best.
        -   Open the animations tab.
        -   Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png" style="width:50px"> to upload an image.
        -   Select the file from your computer.
        -   Rename your image so it is easy to remember. To rename it click the text below the image.
        -   Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.

        Don't worry if your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 2_2019: |-
        # Upload your own image

        You can also use the Animation tab to upload or draw your own image.

        # Do This

        You are going to make a flying kite. You can search the web for an image or create a new animation from scratch by drawing your own kite.

        -   Download your kite image. Images with transparent backgrounds work best.
        -   Open the animations tab.
        -   Click <img src="https://images.code.org/346f6657dba57b0c3bd5deb534f76b69-image-1466194432449.13.05 PM.png" style="width:50px"> and then <img src="https://images.code.org/60c0371b45b29f10a3c8530db9154428-image-1466194434329.13.16 PM.png" style="width:50px"> to upload an image.
        -   Select the file from your computer.
        -   Rename your image so it is easy to remember. To rename it click the text below the image.
        -   Back in code mode, use `sprite.setAnimation()` to make your `kite` sprite show your new animation.

        Don't worry if your kite image is too big! You'll learn how to fix that in the next level.
      CSD U3 Sprites anitab 3: |-
        # Resizing with Scale

        In the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.

        # Do This

        The program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.

        _Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._
      CSD U3 Sprites anitab 3_2018: |-
        # Resizing with Scale

        In the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.

        # Do This

        The program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.

        _Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._
      CSD U3 Sprites anitab 3_2019: |-
        # Resizing with Scale

        In the _Sprites_ drawer of the toolbox, you'll see a new block called `sprite.scale`. It lets you change the size of a sprite in relation to its original size. `sprite.scale = 1` is the normal size. `sprite.scale = 0.5` makes your sprite half as big, while `sprite.scale = 2` makes it twice as big.

        # Do This

        The program should already include your newly uploaded image, but it's probably not the _perfect_ size. Use `sprite.scale` to change the size of your `kite` sprite.

        _Hint: the order of your code matters! You need to add `sprite.scale` **after** you've created the sprite, but **before** you draw the sprite with `drawSprites()`. For clarity, try to keep all of your sprite code together at the top of your program._
      CSD U3 Sprites intro debug: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Debug

        This program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.
      CSD U3 Sprites intro debug_2018: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Debug

        This program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.
      CSD U3 Sprites intro debug_2019: |-
        <img src="https://images.code.org/63207a624d751aacb376db18cdf09eec-image-1491255841823.png" style="width: 150px; float: right; margin-left: 20px; border: 1px solid #f2f2f2;">

        # Debug

        This program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. **You don't need to add any code**, just rearrange the code already present to make sure that both sprites show up like the picture on the right.
      CSD U3 Sprites intro sprites: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2018: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites intro sprites_2019: |-
        # Sprites

        **Creating Sprites:**  <img src = "https://images.code.org/92e06cddc5355dc37aa2c6a033793dd0-image-1466027030772.43.41 PM.png" style = "height:30px">  creates a new sprite and assigns it to a variable.  The default name is `sprite`, so you'll want to change it to something more meaningful.

        **Drawing Sprites:** Sprites only appear on the screen when you draw them there. Calling ![](<https://images.code.org/82a18afda6463323529acaa3dc326d55-image-1466004008638.19.16 AM.png>) will draw all of your created sprites on the screen.

        <img src="https://images.code.org/fe5905d6b89c14dca525865f4e579104-image-1491254588895.png" style="width: 150px; float: right; border: 1px solid #f2f2f2; margin-left: 20px">

        # Do This

        This program includes comments that let you know where to place code but otherwise is blank. Your program should look like the image on the right.

        -   Add `var sprite = createSprite(200, 200)` under the comment `Creating Sprites`.
            -   You can ignore the yellow triangle warning for now.  It's just telling you that you haven't used your sprite yet.
        -   Add `drawSprites()` under the comment `Drawing`.
        -   **Run the code** to draw your first sprite on the screen.

        _Hint: Sprites are drawn from their center, which means that center of the square (not the top left corner) is at (200, 200)._
      CSD U3 Sprites scene challenge: |-
        # Challenge: Extend your scene

        _Check with your teacher before starting this challenge._

        Now that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene challenge_2018: |-
        # Challenge: Extend your scene

        _Check with your teacher before starting this challenge._

        Now that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene challenge_2019: |-
        # Challenge: Extend your scene

        _Check with your teacher before starting this challenge._

        Now that you've finished your scene, consider adding to it or creating another.
      CSD U3 Sprites scene drawing: |-
        # Create Your Scene - Drawing

        You're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.

        # Do This

        -   Use a `background()` command to fill the screen with a color.
        -   Add any necessary shape commands to draw the non-sprite elements of your scene.
      CSD U3 Sprites scene drawing_2018: |-
        # Create Your Scene - Drawing

        You're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.

        # Do This

        -   Use a `background()` command to fill the screen with a color.
        -   Add any necessary shape commands to draw the non-sprite elements of your scene.
      CSD U3 Sprites scene drawing_2019: |-
        # Create Your Scene - Drawing

        You're going to start creating a scene of your own. If you haven't already, take a minute to sketch out a picture of your scene (consider using graph paper). Once you have an idea and plan for your scene, start drawing the background.

        # Do This

        -   Use a `background()` command to fill the screen with a color.
        -   Add any necessary shape commands to draw the non-sprite elements of your scene.
      CSD U3 Sprites scene sprites: |-
        # Create Your Scene - Sprites

        With your background in place, it's time to add your sprites.

        # Do This

        -   Add or create all of your sprite images in the Animation Tab.
        -   Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.
        -   Call `drawSprites()` once at the end of your program.

        _Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene sprites_2018: |-
        # Create Your Scene - Sprites

        With your background in place, it's time to add your sprites.

        # Do This

        -   Add or create all of your sprite images in the Animation Tab.
        -   Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.
        -   Call `drawSprites()` once at the end of your program.

        _Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene sprites_2019: |-
        # Create Your Scene - Sprites

        With your background in place, it's time to add your sprites.

        # Do This

        -   Add or create all of your sprite images in the Animation Tab.
        -   Create a variable for each sprite at the top of your program and use `setAnimation()` to assign the images you created in the Animation Tab.
        -   Call `drawSprites()` once at the end of your program.

        _Hint: You probably want to call `drawSprites()` at the very end of your program so the sprites are on top of your background, but for some designs you may want to call `drawSprites()` earlier so that your sprites are on top of some shapes but below others._
      CSD U3 Sprites scene text: |-
        # Create Your Scene - Text

        The final piece of your scene is to add text.

        # Do This

        -   Add a `text()` command for each separate line of text.
        -   If necessary, use `fill()` and `textSize()` to change the appearance of your text.

        _Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._
      CSD U3 Sprites scene text_2018: |-
        # Create Your Scene - Text

        The final piece of your scene is to add text.

        # Do This

        -   Add a `text()` command for each separate line of text.
        -   If necessary, use `fill()` and `textSize()` to change the appearance of your text.

        _Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._
      CSD U3 Sprites scene text_2019: |-
        # Create Your Scene - Text

        The final piece of your scene is to add text.

        # Do This

        -   Add a `text()` command for each separate line of text.
        -   If necessary, use `fill()` and `textSize()` to change the appearance of your text.

        _Hint: Most scenes have the text on top of everything else, which would require your `text()` commands to be the last lines in your program. If, however, you want the text layered in with other elements, you might consider changing the order._
      CSD U3 Sprites text: |-
        # Adding Text

        You can put text anywhere you'd like on the screen using `text`. Change the displayed text in the provided code, then add a second `text` to write in a different part of the screen.

        _Tip: The default text size is pretty small, but you can use the `textSize` block to change that. You can also use `fill` to change the color of your text._
      CSD U3 Sprites text debug: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Debug

        This scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?
      CSD U3 Sprites text debug_2018: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Debug

        This scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?
      CSD U3 Sprites text debug_2018_2019: |-
        <img src="https://images.code.org/a313a455ef7033e840dfb21cb15cbb30-image-1491277088617.png" style="float: right; width: 200px; margin-left: 20px;">

        # Debug

        This scene has all the right code, but it's not in the right order. The scene should look like the image to the right.  Can you reorder the blocks so that each part of the scene is drawn in the correct order?
      CSD U3 Sprites text_2018: "# Adding Text\n\nYou can put text anywhere you'd
        like on the screen using `text`. \n\n# Do This\n\n-   Change the displayed
        text in the provided code.\n-   Add a second `text` to write in a different
        part of the screen.\n\n_Tip: The default text size is pretty small, but you
        can use the `textSize` block to change that. You can also use `fill` to change
        the color of your text._"
      CSD U3 Sprites text_2019: "# Adding Text\n\nYou can put text anywhere you'd
        like on the screen using `text`. \n\n# Do This\n\n-   Change the displayed
        text in the provided code.\n-   Add a second `text` to write in a different
        part of the screen.\n\n_Tip: The default text size is pretty small, but you
        can use the `textSize` block to change that. You can also use `fill` to change
        the color of your text._"
      CSD U3 UP_ARROW: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        You have been provided with the start of a bug sprite. You need to pick the bug picture you want to use from the animation tab.

        -   Set the animation of the sprite to your favorite bug.
        -   Add an if statement inside your draw loop.
        -   Add a call to keyDown as the input to the if statement to check if the up arrow was pressed.
        -   Add code inside the conditional to move the sprite up if the up arrow is down.

        _Do you need to change sprite's x or y property to move it up?_
      CSD U3 UP_ARROW_2018: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        -   Add an `if` statement inside your draw loop.
        -   Check whether the right arrow key has been pressed down.
        -   Add code inside the conditional to move the sprite right if the right arrow is down.

        _Do you need to change sprite's x or y property to move it right?_
      CSD U3 UP_ARROW_2018_2019: |-
        # Moving Sprites

        You can change your sprite's position based on key presses in the same way you changed its animations.

        # Do This

        -   Add an `if` statement inside your draw loop.
        -   Check whether the right arrow key has been pressed down.
        -   Add code inside the conditional to move the sprite right if the right arrow is down.

        _Do you need to change sprite's x or y property to move it right?_
      CSD U3 Variables Challenge: |-
        # Challenge: Updating Variables

        _Check with your teacher before tackling this challenge level._

        So far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.

        <img src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png" style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Challenge_2018: |-
        # Challenge: Updating Variables

        _Check with your teacher before tackling this challenge level._

        So far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.

        <img src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png" style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Challenge_2019: |-
        # Challenge: Updating Variables

        _Check with your teacher before tackling this challenge level._

        So far we've only ever assigned a value to a variable once, but did you know you can update a variable during a program?  Read through the example program we've provided, run it a few times to understand how it works, and then attempt to modify the program to draw one of the following images.

        <img src="https://images.code.org/29f4d46d5aa041fb7d27aa2e3c77652e-image-1493161823337.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/629819fe91016ee1b8275c81e41770b5-image-1493161823334.png" style="width:150px; border: 1px solid grey; margin:20px;">
        <img src="https://images.code.org/acf7b8223b3a87594e20348306464de7-image-1493161823305.png" style="width:150px; border: 1px solid grey; margin:20px;">
      CSD U3 Variables Draw Challenge: |-
        # Challenge: Draw an Image

        _Check with your teacher before tackling this challenge level._

        Using variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.
      CSD U3 Variables Draw Challenge_2018: |-
        # Challenge: Draw an Image

        _Check with your teacher before tackling this challenge level._

        Using variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.
      CSD U3 Variables Draw Challenge_2019: |-
        # Challenge: Draw an Image

        _Check with your teacher before tackling this challenge level._

        Using variables, draw an image where many of the items rely on a common variable for size or placement. For example, draw a face with variables controlling the size and/or placement of both eyes, ears, and nostrils. Once you have your drawing completed, try changing the values of your variables to make sure that the whole image changes together.
      CSD U3 Variables Draw Poppy: |-
        # Using a Variable Many Times

        This program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.

        # Do This

        -   Change the number assigned to `petalSize` so the red petals touch one another.
        -   Try to find the size that makes the most sense. Compare your answer with someone around you.
      CSD U3 Variables Draw Poppy_2018: |-
        # Using a Variable Many Times

        This program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.

        # Do This

        -   Change the number assigned to `petalSize` so the red petals touch one another.
        -   Try to find the size that makes the most sense. Compare your answer with someone around you.
      CSD U3 Variables Draw Poppy_2019: |-
        # Using a Variable Many Times

        This program has only one variable called `petalSize` but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.

        # Do This

        -   Change the number assigned to `petalSize` so the red petals touch one another.
        -   Try to find the size that makes the most sense. Compare your answer with someone around you.
      CSD U3 Variables Predict Where X: |-
        # Using Variables

        In this program, the variable `xPosition` is used to store the x-coordinate of the circle.

        # Do This

        -   Run the program to see how it works.
        -   Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.
      CSD U3 Variables Predict Where XY Embed: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2018: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where XY Embed_2019: |-
        # Predict

        In which corner of the screen will the circle be drawn?

        _Hint: Click the "Show grid" box to help you find the exact coordinates on the screen._
      CSD U3 Variables Predict Where X_2018: |-
        # Using Variables

        In this program, the variable `xPosition` is used to store the x-coordinate of the circle.

        # Do This

        -   Run the program to see how it works.
        -   Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.
      CSD U3 Variables Predict Where X_2019: |-
        # Using Variables

        In this program, the variable `xPosition` is used to store the x-coordinate of the circle.

        # Do This

        -   Run the program to see how it works.
        -   Change the number that is stored into the variable ([Show me where](#triggercallout=code_triggered)) and run the code again.
      CSD U3 Variables change circle size: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png" style="float:right; height:150px">

        # Debug: Using Variables

        This program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.

        # Do This

        -   Change the value assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables change circle size_2018: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png" style="float:right; height:150px">

        # Debug: Using Variables

        This program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.

        # Do This

        -   Change the value assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables change circle size_2019: |-
        <img src="https://images.code.org/acc7f5763a9ca1c17647f7dd9711c9f5-image-1490977696189.28.01 AM.png" style="float:right; height:150px">

        # Debug: Using Variables

        This program uses the variable `circleSize` to control the width and height of a circle.  If you make the circle big enough, it will fill up the entire screen, as in the picture on the right.

        # Do This

        -   Change the value assigned to `circleSize` so that the circle takes up the entire screen.
      CSD U3 Variables naming rules v2: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debug: Naming Variables

        This program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.

        # Do This

        -   Find the rule each variable label violates.
        -   **Correct the errors by picking new names that follow the rules you learned in the last level.**
        -   If your program works it should draw the image on the right.

        <summary><em>Hint: Click the arrow for a quick review of the rules.</em><details><ul>
        <li>Labels can't have spaces.</li>
        <li>Labels can't start with a number.</li>
        <li>Capitalization and spelling must be exactly the same.</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debug: Naming Variables

        This program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.

        # Do This

        -   Find the rule each variable label violates.
        -   **Correct the errors by picking new names that follow the rules you learned in the last level.**
        -   If your program works it should draw the image on the right.

        <summary><em>Hint: Click the arrow for a quick review of the rules.</em><details><ul>
        <li>Labels can't have spaces.</li>
        <li>Labels can't start with a number.</li>
        <li>Capitalization and spelling must be exactly the same.</li>
        </ul></details></summary>
      CSD U3 Variables naming rules v2_2018_2019: |-
        <img style="float: right" src="https://images.code.org/f4b306422763c84bb924f4f7d3a6dca6-image-1492798058864.06.38 AM.png">

        # Debug: Naming Variables

        This program has multiple errors caused by bad label names.  The errors prevent the program from being viewed in block mode, so the code is in text.

        # Do This

        -   Try to figure out what problems with the variable names are causing the errors.
        -   **Correct the errors by picking new names.**
        -   If your program works it should draw the image on the right.

        <summary><em>Hint: Click the arrow to see a few rules.</em><details><ul>
        <li>Labels can't have spaces.</li>
        <li>Labels can't start with a number.</li>
        <li>Capitalization and spelling must be exactly the same.</li>
        </ul></details></summary>
      CSD U3 Variables random with assignment: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif" style="float:right;height:150px">

        # Debug: Variables and Random Numbers

        Variables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.

        # Do This

        `eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.

        -   **Run the program** to see how it works.
        -   **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Variables random with assignment_2018: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif" style="float:right;height:150px">

        # Debug: Variables and Random Numbers

        Variables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.

        # Do This

        `eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.

        -   **Run the program** to see how it works.
        -   **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Variables random with assignment_2019: |-
        <img src="https://images.code.org/ba9592e887f52c1a538a0517560cdacf-image-1493913633878.gif" style="float:right;height:150px">

        # Debug: Variables and Random Numbers

        Variables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.

        # Do This

        `eyeSize` is assigned a random number. Unfortunately only one of the eyes is currently using it.

        -   **Run the program** to see how it works.
        -   **Change the program** so that both eyes are always the same random size. Hint: you'll only need to make changes to one line of code.
      CSD U3 Watcher Debug: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif" style="float: right; margin-left: 20px;">

        # Debug: Watching the Counter Pattern

        Let's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.

        Using the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.
      CSD U3 Watcher Debug_2018: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif" style="float: right; margin-left: 20px;">

        # Debug: Watching the Counter Pattern

        Let's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.

        Using the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.
      CSD U3 Watcher Debug_2019: |-
        <img src="https://images.code.org/20cc981b4b4f99b2ff96415e19af7600-image-1492034149715.gif" style="float: right; margin-left: 20px;">

        # Debug: Watching the Counter Pattern

        Let's practice using watchers to debug your code. This program should move the motorcycle from the bottom left to the top right, like the image to the right. Unfortunately the motorcycle moves off screen too quickly to see what's going wrong.

        Using the provided watchers for `cycle.x` and `cycle.y`, figure out which one is moving in the wrong direction and fix the program.
      CSD U3 Watcher Predict response: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 Watcher Predict response_2018: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 Watcher Predict response_2019: |-
        # Watching the Counter Pattern

        Watchers are a really useful tool for debugging programs that use the counter pattern.

        -   **Read the program** and predict what the program will do.
        -   **Run the program** to check your prediction.
        -   **Look at the watchers** and explain to a neighbor what you are seeing.
      CSD U3 abstraction accelerateX: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateX_2018: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateX_2019: |-
        # Velocity and the Counter Pattern

        As you just saw, using a `sprite.velocityX` property with the counter pattern will change a sprite's velocity during the program. This makes the sprite speed up. Do a little practice using this pattern yourself.

        # Do This

        This program already makes a car move across the screen, but it's going very slowly.

        -   Use the counter pattern with the sprite's velocityX property to make the car speed up. ( [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction accelerateY: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction accelerateY up: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY up_2018: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY up_2019: |-
        # Rising Bubble

        This program makes a bubble rise up the water. Can you make it get faster as it rises?

        # Do This

        -   Use the counter pattern and the sprite's y velocity to make the bubble move up more quickly.
      CSD U3 abstraction accelerateY_2018: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction accelerateY_2019: |-
        # Falling Rock

        The rock should speed up as it falls down the screen.  Can you use the same counter pattern with `velocityY` inside the draw loop to make the rock go faster and faster as it falls?

        # Do This

        -   Use the counter pattern with the sprite's y velocity to make the rock speed up as it falls.  ( [Show me where](#triggercallout=code_triggered) )

        _Challenge: Can you make the rock spin as it falls?_
      CSD U3 abstraction add coin: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction add coin_2018: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction add coin_2019: |-
        # Add a Coin

        In the next few levels you'll add to your program to make a simple game. In this game the player will collect points to increase the score. This is a good chance to see how different kinds of movement can affect the way a game feels, and it will also just help you practice programming skills.

        # Do This

        In this level you'll just be adding a new coin sprite to the game. You should be working at the top of your program, outside the draw loop.

        -   Use the `createSprite()` block to create a new sprite. Make sure to give it a descriptive name such as **coin**.
        -   Use the `sprite.x` and `sprite.y` properties of the sprite to give it a random X and Y position between 0 and 400.
        -   In the Animation Tab there is already a coin animation. Use the `sprite.setAnimation()` block to give your sprite this animation.

        Test your code before moving on. When you run the game, you should see a coin sprite appear somewhere randomly on the screen.
      CSD U3 abstraction decelerateX: "# Slowing Things Down\n\nNow that you've had
        some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if his velocityX is greater than 0._"
      CSD U3 abstraction decelerateX_2018: "# Slowing Things Down\n\nNow that you've
        had some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if its velocityX is greater than 0._"
      CSD U3 abstraction decelerateX_2019: "# Slowing Things Down\n\nNow that you've
        had some practice speeding things up, can you use the counter pattern to slow
        sprites down? \n\n# Do This\n\nThe car is going to run into the water! You'll
        need to use the counter pattern to slow it down.\n\n-   Use the `sprite.velocityX`
        block with a counter pattern to slow the car down by 0.25 as it moves across
        the screen.  \n-   Discuss with your Partner: What do you think will happen
        when the car finally stops?\n\n_Challenge: Add code that makes the car slow
        down only if its velocityX is greater than 0._"
      CSD U3 abstraction decelerateY: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction decelerateY_2018: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction decelerateY_2019: |-
        # Simulating Gravity

        In the last level you slowed down the car with the `sprite.velocityX` block and the counter pattern. It almost looked like the car was getting pulled to the left.

        If you use this same pattern with the `sprite.velocityY` block it will look like your sprite is always being pulled down, which is exactly what gravity does!

        # Do This

        The rock is thrown in the air but it never falls back down.

        -   Use the `sprite.velocityY` block with the counter pattern to make the rock slow down and then fall in the other direction.
        -   Experiment with different values in your counter pattern. Do you want the rock to slow down quickly or gradually? What looks most realistic to you?
        -   Discuss with your partner: Why are you setting the rock's initial velocity outside the draw loop? Why are you changing the sprite's velocity inside the draw loop?
      CSD U3 abstraction jump: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!

        Just as you checked whether your fish was at the left edge, you'll need to check whether the frog is on the ground.  If it is, it could either jump up or stay still, so you'll need one more `if` block to check whether the user has pressed the up arrow ( [Show me where](#triggercallout=code_triggered1) ).

        You'll also need to check whether the frog has reached its highest point, and send it back down if it has.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Use the `velocityY` block to make the frog jump up when the user presses the arrow key.
            -   Use the `velocityY` block to make the frog stop moving otherwise.
        -   Add an if statement that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, use the `velocityY` block to make the sprite fall back down.
      CSD U3 abstraction jump_2018: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the "up" key, then should start moving back down when it reaches the top of its jump.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Make the frog jump up when the user presses the arrow key.
            -   Make the frog stop moving otherwise.
        -   Add code that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, make the sprite go back down.
      CSD U3 abstraction jump_2018_2019: |-
        # Jumping

        You now have all the blocks you need to make your sprite jump!  The sprite should jump up if it's on the ground and the user presses the "up" key, then should start moving back down when it reaches the top of its jump.

        # Do this

        -   Find the `if` statement that checks whether the sprite is on the ground, and look at the `if` statement inside of it that checks whether the user has pressed the "up" arrow key. ( [Show me where](#triggercallout=code_triggered1) )
            -   Make the frog jump up when the user presses the arrow key.
            -   Make the frog stop moving otherwise.
        -   Add code that does the following  ( [Show me where](#triggercallout=code_triggered2) )
            -   Checks whether the frog sprite has reached its highest point.
            -   If so, make the sprite go back down.
      CSD U3 abstraction jumping: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction jumping_2018: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction jumping_2019: |-
        # Jumping

        Increasing a sprite's y velocity inside the counter pattern can simulate gravity. By adding user interactions you can make your sprite appear to jump as well. For starters you'll make a simple jump, and then make it more realistic looking in the next level.

        # Do This

        A sprite has already been created for you that falls because its y velocity is increased inside the draw loop. You'll need to make this sprite appear to jump.

        -   Inside the `if` block that checks whether the up arrow has been pressed, set the sprite's y velocity to -5. ( [Show me where](#triggercallout=callout1) )
        -   Discuss with a neighbor: Why does this code run the way it does? How would using a number besides -5 affect the way the code works? How could you jump higher or lower?
      CSD U3 abstraction left right counter: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction left right counter 2: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter 2_2018: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter 2_2019: |-
        # Floating Left

        In the last level you got detailed instructions on how to make your sprite start floating to the right. This time you'll need to make your sprite float to the left on your own. You should be pretty comfortable with using velocity and the counter pattern together at this point. If you're having trouble, talk to a neighbor or review some of the past levels.

        # Do This

        -   Add code to your draw loop that will make the sprite start moving to the left when the "left" arrow is down.
        -   Make sure you're using velocity and the counter pattern together.

        Once your code is working share what you wrote with a partner. Is your sprite easy to control? Does changing the amount you add or subtract in the counter patterns you wrote affect the way the game feels? What kind of game might be fun to make with a player that moves like this?
      CSD U3 abstraction left right counter_2018: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction left right counter_2019: |-
        # Floating Right

        You're now using the counter pattern with the sprite's Y velocity to simulate gravity and jumping. If you use the sprite's X velocity in the counter pattern then you can make your sprite float from side to side as well.

        # Do This

        In this level you'll make your sprite start floating to the right when the right arrow is pressed.

        -   Add an `if` statement inside your draw loop below the one you created for the "up" arrow.
        -   Use the `keyDown` block to make the `if` statement respond to when the "right" arrow is pressed.
        -   Inside the `if` block use the counter pattern with the `sprite.velocityX` block to add 0.1 to the sprite's X velocity.

        Run your code to see how it works. The sprite should start floating to the right when you press the right arrow and jump when you press "up". You'll make the left arrow work in the next level.
      CSD U3 abstraction looping: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction looping_2018: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction looping_2019: |-
        # Looping

        The game will be more fun if the frog can jump more than once.  You can make the mushroom "loop" by checking whether it's moved past the left edge and moving it back to the right edge when it has.

        # Do this

        -   Find the `if` statement that checks whether the mushroom has passed the left edge. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `sprite.x` block to set the mushroom's position back to the right edge if it has.
      CSD U3 abstraction make it your own: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction make it your own_2018: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction make it your own_2019: |-
        # Make It Your Own

        You now have the basic mechanics of your game in place, so it's time to make it your own. What do you want to happen? Should the character get points every time it collects a coin? Can you add a scoreboard like you learned in the last lesson? Do you want to make another coin? What about a "bad coin" that takes away points?

        # Do This

        Make at least one improvement to the game that makes it your own. Be prepared to share your changes and improvements with your classmate.
      CSD U3 abstraction reset coin: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction reset coin_2018: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction reset coin_2019: |-
        # Reset Coin

        When your character touches the coin you should reset it somewhere on the screen.

        # Do This

        -   Place an `if` block inside of your draw loop.
        -   Use the `sprite.isTouching()` block as the condition to detect when the character touches the coin.
        -   Inside the `if` block write code that sets the coin's X and Y position to random numbers between 0 and 400.
            -   _Hint: You've already written this code elsewhere in your program._

        Test your code before moving on. When your player touches the coin, it should move somewhere else on the screen.
      CSD U3 abstraction rotation: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction rotation control: |-
        # Controlling Speed

        You used `rotatationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation control_2018: |-
        # Controlling Speed

        You used `rotatationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation control_2019: |-
        # Controlling Speed

        You used `rotationSpeed` outside the draw loop to make your sprite rotate when your program started.  You can also use `rotationSpeed` **inside** the draw loop to change the speed of the sprite during the game.  For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.

        # Do This

        -   Look at the `if` statement inside the draw loop that checks whether the space bar has been pressed. ( [Show me where](#triggercallout=code_triggered1) )
        -   Use the `rotationSpeed` block to make the color wheel start spinning when the user presses the space bar.
      CSD U3 abstraction rotation_2018: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction rotation_2019: |-
        # rotationSpeed

        You've already learned how to make your sprite spin by using the `rotation` block.  For example, when you wanted your sprite to rotate by two degrees each time it was drawn, you put `sprite.rotation = sprite.rotation + 2` inside the draw loop.

        Now, you can use `rotationSpeed` to make your sprites rotate by a certain amount each time they are drawn. If you want your sun to rotate by two degrees each time it's drawn, you can use `sun.rotationSpeed = 2` before the draw loop, after you create your sprite.

        # Do This

        Make the sun rotate by 3 degrees each time using the `rotationSpeed` block. ( [Show me where](#triggercallout=callout1) )
      CSD U3 abstraction tumbleweed: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction tumbleweed_2018: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction tumbleweed_2019: |-
        # Mushroom

        Now you just need something for your sprite to jump over.  This program already has a mushroom just past the right edge of the screen, but it needs to move toward your frog.

        # Do this

        -   Use the `velocityX` block to make the mushroom move left across the screen.

        _Hint: The mushroom should start moving at the very beginning of the game, and never change, so should it be inside or outside the draw loop?_
      CSD U3 abstraction velocityX: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityX control: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX control_2018: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX control_2019: |-
        # Multiple Controls

        As you saw in the last level, you can change the sprite's velocity with multiple `if` statements. In this program, the fish has three different types of movement, each of which should be controlled by its own `if` statement.

        # Do This

        -   Look at the three `if` statements inside the draw loop.

        -   Use a `sprite.velocityX` block inside each `if` statement to make the three following movements:
            -   If the user presses the right arrow key, move the fish to the right.
            -   If the fish gets to the right-hand side of the screen, move the fish to the left.
            -   If the fish gets to the left-hand side of the screen, stop the fish.
      CSD U3 abstraction velocityX if-statements: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX if-statements predict: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss what you think the code will do, and write your answer below.
        -   Once you have submitted your answer, run the code.
      CSD U3 abstraction velocityX if-statements predict_2018: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss what you think the code will do, and write your answer below.
        -   Once you have submitted your answer, run the code.
      CSD U3 abstraction velocityX if-statements predict_2019: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.  The code below uses if statements to make a fish sprite move in different directions.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss what you think the code will do, and write your answer below.
        -   Once you have submitted your answer, run the code.
      CSD U3 abstraction velocityX if-statements_2018: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX if-statements_2019: |-
        # Changing Velocity with Position

        One advantage to using the velocity blocks inside conditionals (`if` blocks) is that your sprite keeps moving, even after the condition stops being true.  For example, you only had to press a key once to launch your fly bot, and it kept flying forever.

        In the code below, the fish sprite moves to the left when it hits the right edge, and to the right when it hits the left edge.  The sprite keeps moving, even when it's not touching the edge anymore.

        # Do This

        -   Look at `if` statements that check the sprite's position and set its velocity.
        -   With your partner, discuss how the sprite knows which way to move when neither of the `if` statements are true (the sprite is in the middle of the screen).
      CSD U3 abstraction velocityX_2018: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityX_2019: |-
        # velocityX

        One way to move sprites in Game Lab is with the counter pattern. For example `sprite1.x = sprite1.x + 1` moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a `velocityX` property that does this for you.

        # Do This

        -   Drag a `sprite.velocityX` block directly below where your sprite is created.       ( [Show me where](#triggercallout=code_triggered) )
        -   Write the name of your sprite in the block.
        -   Assign the `velocityX` property a value of 1.
        -   Run the code. What happens?
        -   Re-run the code giving the `velocityX` property a different value. What's changing?
      CSD U3 abstraction velocityY: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY control: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY control_2018: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY control_2019: |-
        # Controlling Speed

        Your code before the draw loop sets up the beginning of your game.  Your code inside the draw loop controls how the game will change while it's being played.  In this game, the helicopter bot starts off at the bottom of the screen, but when the space key is pressed, it flies up.

        # Do This

        -   Use an `if` statement inside the draw loop to check when the space bar is pressed.
        -   Use the `velocityY` block to make the sprite fly up when the user presses the space bar.  The sprite should keep moving up even after you let go of the space bar.
      CSD U3 abstraction velocityY_2018: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 abstraction velocityY_2019: |-
        # Moving Down

        Here is a feather sprite that should be floating down the screen.  If `velocityX` makes a sprite move to the right, can you find the block that will make the feather move down?

        # Do This

        Find the block that will make the feather sprite go down the screen, and use it outside the draw loop.   (  [Show me where](#triggercallout=code_triggered) )
      CSD U3 challenge face: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Face

        _Check with your teacher before starting any of the challenges._

        Write a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are "lightblue", "red", and "lightgreen".
        Once you've finished, add your own personal touches to the image.
      CSD U3 challenge face_2018: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Face

        _Check with your teacher before starting any of the challenges._

        Write a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are "lightblue", "red", and "lightgreen".
        Once you've finished, add your own personal touches to the image.
      CSD U3 challenge face_2019: |-
        <img src="https://images.code.org/aa5aedbcfec082c2886d88b565e5fc09-image-1495732712591.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Face

        _Check with your teacher before starting any of the challenges._

        Write a program that uses `rect`, `ellipse`, and `fill` to create the face on the right. The colors used are "lightblue", "red", and "lightgreen".
        Once you've finished, add your own personal touches to the image.
      CSD U3 challenge new shape: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Shape of Shapes

        _Check with your teacher before starting any of the challenges._

        Using only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?
      CSD U3 challenge new shape_2018: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Shape of Shapes

        _Check with your teacher before starting any of the challenges._

        Using only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?
      CSD U3 challenge new shape_2019: |-
        <img src="https://images.code.org/cc725698ade5282931002db3bf762cbc-image-1495733456927.png" style="float: right; max-width: 200px; border: 1px solid grey">

        # Challenge: Shape of Shapes

        _Check with your teacher before starting any of the challenges._

        Using only the `rect` and `ellipse` commands, can you draw a new shape, such as this triangle made out of circles?
      CSD U3 collisions bounciness: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions bounciness_2018: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions bounciness_2019: |-
        # Bounciness

        So far, `bounceOff` has made sprites bounce away from other objects as fast as they bounced into them.  In the real world, almost everything slows down just a little bit when it bounces off something else.  You can use the `bounciness` block to tell your sprite how much to slow down or speed up when it bounces off something else.

        # Do This

        -   Read the code below and press "Run" to see the behavior of the basketball and pool ball.
        -   Use a `bounciness` block to set the bounciness of your soccer ball.
        -   Run the code again to see how the sprites bounce off the floor.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"

        [//]: # "https://images.code.org/0e4e9c26bed0d31d14f6b3f8f8bb4c27-image-1475786966986.png"
      CSD U3 collisions build isTouching: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions build isTouching_2018: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions build isTouching_2019: |-
        # Balloon

        The code below uses the sprites' x and y positions to check whether they are touching.  It will change the balloon sprite's animation when the tack touches it.  Use the arrow keys to move the tack until it touches the balloon.

        # Do This

        -   You do not need to change any code on this level.
        -   Read the if statements inside the draw loop and find the different sprite properties and how they are compared.
        -   Discuss the code with your partner.  Would you want to write this code every time you checked whether sprites were touching?

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions car intro: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions car intro_2018: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions car intro_2019: |-
        # Frog Jump

        Look at the frog jumping game to the left.   It looks like the game from the last lesson, but the frog moves the mushroom if it hits it.  What code do you think would help the computer to know whether two sprites are touching?

        [//]: # "https://images.code.org/ee9b677e93213846fe12abb3b34f563c-image-1469742494237.png"

        [//]: # "https://images.code.org/5f738da1a2b1ef8af124e4470e2babe7-image-1469742830481.png"

        [//]: # "https://images.code.org/f22e6b1a636337820e53fb37a137b3d1-image-1469742992179.png"
      CSD U3 collisions debug: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions debug isTouching: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug isTouching_2018: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug isTouching_2019: |-
        # Debugging Collisions

        The balloon is popping before the tack touches it.  When sprites aren't doing what you expect, you can use the `debug` block to get more information about why the sprites are behaving that way.  Can you find out what's wrong in the code below?

        # Do This

        -   Run the code and use the arrow keys to move the tack to pop the balloon.
        -   In the code below, change `balloon.debug = false` to `balloon.debug = true`.
        -   Add a new `debug` block to the code and set the tack sprite's debug property to `true`.
        -   Run the code again, then discuss with your partner why the balloon is popping early.

        _Challenge: Can you use the animations tab to resize the balloon picture so it pops at the correct time?_

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"

        [//]: # "https://images.code.org/2892e65635d7a43d0664bb8ff58eb698-image-1471200175665.png"

        [//]: # "https://images.code.org/9ffeb3f543033353d073794071316860-image-1471200179449.png"
      CSD U3 collisions debug_2018: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions debug_2019: |-
        # Debug

        Sometimes sprites will behave in ways that are unexpected. There is a special `sprite.debug` property you can use to better understand why the sprites interact the way that they do.

        # Do This

        These two coins are round, so you would expect them to bounce in a certain way. Something weird is happening though!

        -   Run the code and watch the way that the coins interact.
        -   Use the `sprite.debug` block to make debug 'true' for both the sprites and run the code again.
        -   Change the gold coin's starting x position to 51 and run the code again.
        -   Discuss with a partner: Why do you think the coins are bouncing strangely?
      CSD U3 collisions displace intro: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace intro_2018: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace intro_2019: |-
        # Displace

        The interaction you've been programming is so common that there's a block designed to do the interaction for you. `sprite.displace()` that will make one sprite push the other when they touch. The code underlying this block might look a lot like what you just wrote, but now you no longer need to worry about writing those details yourself.

        # Do This

        Someone tried to use the `sprite.displace()` block to make the **elephant push the hippo**, but there is a bug. Can you change the code so that the elephant pushes the hippo off the screen?

        -   Find the line of code where the `sprite.displace()` block is used and fix the error.
      CSD U3 collisions displace x: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace x_2018: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace x_2019: |-
        # Program a Sprite Interaction

        You should have discussed with your classmates how you could create the sprite interaction you saw in the last level. Now it's your turn to program it yourself. How can you make the giraffe move the monkey off the screen?

        # Do This

        The giraffe is already moving across the screen toward the monkey but the sprite interaction itself hasn't been programmed.

        -   Use the plan you developed with your classmates on the last level to program the sprite interaction yourself.

        [//]: # "https://images.code.org/2e6b993747a39cd5076dce219037903d-image-1470319674401.png"

        [//]: # "https://images.code.org/d44d7c1aa87ea7eeceea9e9b023408f9-image-1470319674396.png"
      CSD U3 collisions displace y: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions displace y_2018: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions displace y_2019: |-
        # Write Your Own Sprite Interaction

        In the last level you should have written code for a sprite interaction that you developed with your classmates. This time try to write the program on your own, but you can use the patterns you saw in the last level.

        # Do This

        The elephant should **push the hippo off the screen**. Notice that the elephant moves at a random Y velocity each time the program runs.

        -   Using the patterns from the last level, write code that makes the elephant push the hippo off the screen.
      CSD U3 collisions egg: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions egg2: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg2_2018: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg2_2019: |-
        # Making Sounds

        You can also use code to play a blender sound.

        # Do This

        Use the `playSound` block from the "World" drawer to play the "<https://studio.code.org/docs/sounds/blender.mp3>" sound when the apple touches the blender.  You will need to paste the address of the sound into the block, so it looks like this: ![](<https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png>)

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"

        [//]: # "https://images.code.org/8376df7a92ff8e6ba0a2d6e51c24547e-image-1484091385498.34.57 PM.png"
      CSD U3 collisions egg_2018: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions egg_2019: |-
        # Applesauce

        When the apple hits the blender, the blender should turn on.

        # Do This

        Use the `isTouching` block to make the blender shake back and forth when the apple sprite touches the blender sprite.  The shaking motion is already coded using the random block, so you just have to check when the two sprites are touching.

        _Challenge: Can you make the apple disappear when it touches the blender?_

        [//]: # "https://images.code.org/82436176c744caa106cfc4971cd1db6c-image-1470247395711.png"

        [//]: # "https://images.code.org/ea5def7998ed88d016ac7d8223aabb75-image-1470247399852.png"

        [//]: # "https://images.code.org/b3a38abe5aeb799e61b7368ceb210873-image-1470247402163.png"

        [//]: # "https://images.code.org/57c724cf77b338f3c13dc8271a76dd77-image-1470247525113.png"

        [//]: # "https://images.code.org/68b31e0fe8b8b454225d87b0f4a0a5f8-image-1470317549553.png"

        [//]: # "https://images.code.org/00e4ee128c4beb11c0c7a6bba6024494-image-1470317549555.png"
      CSD U3 collisions flyman add obstacles: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman add obstacles_2018: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman add obstacles_2019: |-
        # Flyer Game - Add Obstacle

        This is the flyer game you built in the last lesson. For the next several levels, you'll be adding an obstacle sprite to the game, using some of the sprite interactions you just learned. At the end you'll have a chance to keep adding on ideas of your own.

        <img src="https://images.code.org/47f8c130ca668080d48520ef9aced093-image-1477069764142.08.58 AM.png" style="float:right;width:200px">

        # Do This

        Add an obstacle sprite to the game. You can use whatever image you like from the animation tab but the example shown here uses a sun. Right now you just need to add the sprite to your game and give it an animation.

        -   Add a new sprite to your game called "obstacle".
        -   In the animation tab create a new animation for your obstacle. In the example a sun image was chosen.
        -   Use the `sprite.setAnimation()` block to give your sprite the image you chose.
        -   Run the code and make sure the sprite appears where you want it on the screen. You may need to set its X, Y, and scale properties to get it to look the way you want.
      CSD U3 collisions flyman bounceOff: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman bounceOff_2018: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman bounceOff_2019: |-
        # Flyer Game - Interacting with the Obstacle

        You don't want your player to be able to move through the obstacle, so you'll need to use one of the sprite interactions.

        # Do This

        -   Add code to your game that prevents your player from moving through the obstacle.
        -   If you use one of the bounce interactions, decide whether you want to reset the bounciness of your character.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman change colliders: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman change colliders_2018: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman change colliders_2019: |-
        # Flyer Game - Change Colliders

        Right now your colliders are all rectangular. Switch them over to circles to get more interesting and realistic bounces and collisions.

        # Do This

        -   Use the `sprite.setCollider()` block to change the colliders of your sprites to circles.
        -   Set your sprites' debug properties to `true` to make sure your game is working the way you want.
        -   Play your game to make sure it's working the way you want.
      CSD U3 collisions flyman displace coin: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman displace coin_2018: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman displace coin_2019: |-
        # Flyer Game - Coin Behind the Obstacle

        Right now your coin is moving to random locations. That means sometimes it even will appear behind your obstacle, so your character can't get to it. Using sprite interactions you can fix this problem.

        # Do This

        -   Add code to your game that prevents the coin from moving behind the obstacle. Don't be afraid to try out ideas just to see how they work.
        -   Discuss with a neighbor: Which sprite interaction did you decide to use? Is there more than one sprite interaction that works the way you'd expect?
      CSD U3 collisions flyman make it your own: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create "edge" sprites to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions flyman make it your own_2018: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create invisible sprites at the edge of your game to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions flyman make it your own_2019: |-
        # Flyer Game - Make It Your Own

        Time to make this game your own by using what you've learned about sprite interactions.

        # Do This

        Add at least one more aspect to your game that uses sprite interactions. There's some ideas below or you can choose to add features of your own. Make sure you're ready to share your ideas with your classmates.

        -   Create invisible sprites at the edge of your game to keep your character from bouncing out.
        -   Add platforms to the game for your character to navigate around.
        -   Add another obstacle to your game.
        -   Create another idea of your own.
      CSD U3 collisions horse: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions horse_2018: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions horse_2019: |-
        # Rainbow Horse

        When the rainbow touches the horse, it should turn into a unicorn.

        # Do This

        Use the `if`, `isTouching`, and `setAnimation` blocks to change the horse sprite's image when the rainbow touches it.  The unicorn image is already loaded in the animations tab for you.

        [//]: # "https://images.code.org/4d1d0e36e574117140ecc377d406c1de-image-1470256869920.png"

        [//]: # "https://images.code.org/b913bc2ee2231b908892472240a70105-image-1470256869922.png"

        [//]: # "https://images.code.org/558b42903bf40cc26410e651a85de922-image-1470256869923.png"

        [//]: # "https://images.code.org/1d41d2e5b3b55037911b8f73bdc2ff48-image-1470257277875.png"
      CSD U3 collisions isTouching intro: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions isTouching intro_2018: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions isTouching intro_2019: |-
        # isTouching()

        Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the `isTouching` block, which can check whether one sprite is touching another sprite (the _target_).  The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.

        # Do This

        Inside the draw loop, drag the `isTouching` block into the `if` block.     ( [Show me where](#triggercallout=code_triggered) )

        _Hint: Don't forget to change the "sprite" to "balloon" and the "target" to "tack"._

        [//]: # "https://images.code.org/7afe11fccea99cd7f31497710cce5ac3-image-1471190004988.png"

        [//]: # "https://images.code.org/0b6e98b829379d88b9952ee013cf70bd-image-1471190009596.png"

        [//]: # "https://images.code.org/49c7a3b6fe2eff7e51d3f40581b1dcbb-image-1471190256258.png"
      CSD U3 collisions predict set velocity code: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions predict set velocity code_2018: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions predict set velocity code_2019: |-
        # Sprite Interactions

        So far you've been able to create simple sprite interactions by using the `sprite.isTouching()` block. For example, you've reset a coin to a different location on the screen when a character touches it. Now it's time to start making sprites have more complex interactions.

        # Do This

        -   Run the program and observe the interaction between the two sprites.
        -   Discuss with a neighbor: Using only the commands you already know how could you create this kind of interaction? There are many ways to do it, but here are some blocks to consider:
            -   `sprite.isTouching()`
            -   `sprite.velocityX`
            -   `sprite.velocityY`
            -   `sprite.x`
            -   `sprite.y`

        Be ready to share your ideas with your classmates.
      CSD U3 collisions scoreboard: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions scoreboard_2018: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions scoreboard_2019: |-
        # Scoreboard

        You can also use `isTouching` to decide whether you should increase the score.  In this game, the score is stored inside the 'score' variable.  It is displayed on the screen using the `text` block.  ( [Show me where](#triggercallout=code_triggered) )

        # Do This

        -   Use the `if` and `isTouching` blocks to determine whether the bunny has caught the carrot. ( [Show me where](#triggercallout=code_triggered2) )
        -   If it has, do the following three things:
            -   Use the counter pattern on the score variable to increase the score.
            -   Reset the carrot's x position off the right-hand side of the screen.
            -   Set the carrot's y position to a random number between 10 and 390.
      CSD U3 collisions setCollider: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions setCollider_2018: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions setCollider_2019: |-
        # setCollider

        Sprites interact based on the size and shape of their collider, not the images that are assigned to them. You can only see the collider when debug mode is turned on.  You can change the shape of the collider using the `sprite.setCollider()` block, which lets you pick between a "rectangle" or a "circle".  By default all colliders are "rectangle".

        # Do This

        -   Find the `sprite.setCollider()` block for the gold coin, and change it from "rectangle" to "circle".
        -   Add a new `sprite.setCollider()` block for the silver coin, and choose "circle" for the shape of the collider.
        -   Run the code again to see how the sprites bounce.

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions sidescroll2: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions sidescroll2_2018: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions sidescroll2_2019: |-
        # Improve Your Game

        Now that you know how to use `isTouching` and `playSound`, you can make some fun things happen when your sprites run into each other.

        _Note: The `playSound` block now has an extra parameter called "loop" that can be set to true or false.  If this parameter is true, the sound will continue to play in a loop._

        # Do This

        -   Add at least two effects when your sprites collide.

        _Challenge: Add a scoreboard to the top of your screen._
      CSD U3 collisions try blocks: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions try blocks_2018: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions try blocks_2019: |-
        # More Collision Blocks

        Three new types of sprite interactions have been added to the toolbox, `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()`. How do you think they'll affect the sprites?

        # Do This

        -   Switch out the displace block for the `sprite.collide()`, `sprite.bounce()`, and `sprite.bounceOff()` blocks. ( [Show me where](#triggercallout=code_triggered) )
            -   _Hint: If you're having trouble doing this with blocks then switch over to text mode._
        -   Discuss with a neighbor: What is the difference between the four different sprite interactions? What do you think the purpose of each block is?

        [//]: # "https://images.code.org/8b7730146eaa9d439e6af34c0a21e802-image-1470321391887.png"

        [//]: # "https://images.code.org/eca470a686b01c19981152fdab808804-image-1470321391888.png"
      CSD U3 collisions turtle: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions turtle_2018: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions turtle_2019: |-
        # Debugging Sprite Interactions

        Sprite interactions just run some code when they're called. The interactions are not "remembered" by the game. If you want one sprite to bounce or collide with another then it needs to be a part of the draw loop. If you forget then this can lead to unexpected behavior.

        # Do This

        The turtle can be moved with the arrow keys. It's not supposed to be able to walk through the tree, but something is wrong in the code. Can you find and correct the bug in the code?

        -   Run the code and try to make the turtle collide with the tree.
        -   Look through the code and discuss with your partner what the problem is.
        -   Correct the code, then run it again to make sure it works.
      CSD U3 collisions types: |-
        # Collision Types

        There are four types of collisions that we use in Game Lab.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.

        ## displace

        The `displace` block causes the sprite to push the target as long as they are touching each other. The sprite keeps moving normally.

        ## collide

        The `collide` block makes the sprite stop when it runs into the target.  If the target is moving, it will push the sprite with it.  The target keeps moving normally.

        ## bounce

        The `bounce` block makes the sprite and the target bounce when they touch each other.  Both the sprite and the target change how they are moving.

        ## bounceOff

        The `bounceOff` block makes the sprite bounce off the target.  The target keeps moving normally.

        # Do This

        Choose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )

        [//]: # "https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png"

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 collisions types_2018: |-
        # Collision Types

        There are four types of collisions that we use in Game Lab.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.

        ## displace

        The `displace` block causes the sprite to push the target as long as they are touching each other. The sprite keeps moving normally.

        ## collide

        The `collide` block makes the sprite stop when it runs into the target.  If the target is moving, it will push the sprite with it.  The target keeps moving normally.

        ## bounce

        The `bounce` block makes the sprite and the target bounce when they touch each other.  Both the sprite and the target change how they are moving.

        ## bounceOff

        The `bounceOff` block makes the sprite bounce off the target.  The target keeps moving normally.

        # Do This

        Choose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )

        [//]: # "https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png"

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 collisions types_2019: |-
        # Collision Types

        There are four types of collisions that we use in Game Lab: `displace`, `collide`, `bounce`, and `bounceOff`.  These blocks will cause a certain type of interaction between the _sprite_ and its _target_.

        # Do This

        Choose the best block to model the basketball bouncing off the floor. ( [Show me where](#triggercallout=code_triggered) )
        \*Hint: You can try the different blocks out, or read more about them in the "Help and Tips" tab.
        [//]\: # (<https://images.code.org/24355fc6377cfafdce3ce2b3568a33c3-image-1470343728940.png>)

        [//]: # "https://images.code.org/87e4306e0371c7975b8fb2583657ee4a-image-1470343728942.png"
      CSD U3 dancing alien: "# Sprites in the Draw Loop\n\nBy changing sprite properties
        in the draw loop, you can animate your characters. \n\nThis animation has
        also been slowed down.  At the beginning of the program the `World.frameRate`
        block has been used to set the frame rate to 10. Usually the frame rate is
        30. Feel free to explore different frame rates.\n\n# Do This\n\n-   Run the
        code to see how it works.\n-   Discuss with your partner why some code is
        inside the draw loop and some code is outside.\n-   Try changing the frame
        rate and running the code again."
      CSD U3 dancing alien_2018: "# Sprites in the Draw Loop\n\nBy changing sprite
        properties in the draw loop, you can animate your characters. \n\nThis animation
        has also been slowed down.  At the beginning of the program the `World.frameRate`
        block has been used to set the frame rate to 10. Usually the frame rate is
        30. Feel free to explore different frame rates.\n\n# Do This\n\n-   Run the
        code to see how it works.\n-   Discuss with your partner why some code is
        inside the draw loop and some code is outside.\n-   Try changing the frame
        rate and running the code again."
      CSD U3 dancing alien_2019: "# Sprites in the Draw Loop\n\nBy changing sprite
        properties in the draw loop, you can animate your characters. \n\nThis animation
        has also been slowed down.  At the beginning of the program the `World.frameRate`
        block has been used to set the frame rate to 10. Usually the frame rate is
        30. Feel free to explore different frame rates.\n\n# Do This\n\n-   Run the
        code to see how it works.\n-   Discuss with your partner why some code is
        inside the draw loop and some code is outside.\n-   Try changing the frame
        rate and running the code again."
      CSD U3 debug: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png" style="float:right;width:150px;">

        # Debugging

        Often, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.

        # Do This

        -   Look at the code in the workspace.
        -   Change the code so it makes the picture on the right.
            -   (You'll need to move one line of code AND change the coordinates of the square.)
      CSD U3 debug_2018: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png" style="float:right;width:150px;">

        # Debugging

        Often, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.

        # Do This

        -   Look at the code in the workspace.
        -   Change the code so it makes the picture on the right.
            -   (You'll need to move one line of code AND change the coordinates of the square.)
      CSD U3 debug_2019: |-
        <img src="https://images.code.org/249f124a9bbd3da7d6327a7be8ab73c9-image-1493138569984.41.50 AM.png" style="float:right;width:150px;">

        # Debugging

        Often, code doesn't work the first time it runs, and programmers have to debug it.  The code below is supposed to make the picture on the right, but the programmer got confused about which order the code should be in, as well as how to put a square in the right place on the screen.

        # Do This

        -   Look at the code in the workspace.
        -   Change the code so it makes the picture on the right.
            -   (You'll need to move one line of code AND change the coordinates of the square.)
      CSD U3 ellipse: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png" style="float:right;width:150px;">

        # ellipse

        You can use `ellipse` to make a circle.

        # Do This

        -   Look at the code that makes the ellipse.
        -   Add a new ellipse of a different color.
      CSD U3 ellipse_2018: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png" style="float:right;width:150px;">

        # ellipse

        You can use `ellipse` to make a circle.

        # Do This

        -   Look at the code that makes the ellipse.
        -   Add a new ellipse of a different color.
      CSD U3 ellipse_2019: |-
        <img src="https://images.code.org/2ef29be10261f6a2c5df8f214d524f4d-image-1493060602794.02.44 PM.png" style="float:right;width:150px;">

        # ellipse

        You can use `ellipse` to make a circle.

        # Do This

        -   Look at the code that makes the ellipse.
        -   Add a new ellipse of a different color.
      CSD U3 fill: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(color)

        You can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.

        # Do This

        -   Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )
        -   Change the color from blue to yellow.
        -   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.
      CSD U3 fill_2018: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(color)

        You can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.

        # Do This

        -   Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )
        -   Change the color from blue to yellow.
        -   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.
      CSD U3 fill_2019: |-
        <img src="https://images.code.org/c91390d63e52a3349c48f7b6b0057258-image-1493060802897.05.19 PM.png" style="float:right;width:200px;">

        # fill(color)

        You can also make your rectangles different colors with `fill`. It will set the color for every shape that comes after it in the code.

        # Do This

        -   Look at the code that sets the color. ( [Show me where](#triggercallout=fill) )
        -   Change the color from blue to yellow.
        -   Add a new square by dragging a `rect` block into the code area below the fill command ( [Show me where](#triggercallout=rect_block) ).  The new square can go any location on the screen you like.
      CSD U3 finishing touches: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 finishing touches_2018: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 finishing touches_2019: |-
        # Finishing Touches

        Now that you have the basis for your game, it's time to add some finishing touches.

        To make your game even better, try making at least two improvements to it. You can use the list below to help you, or you can come up with your own improvements that you'd like to make.

        -   Find a way to keep your player from going off the edges of the screen.
        -   Add a different item for your player to collect or avoid that are worth different point values.
        -   Make a variable to keep track of how many lives your player has, and then end the game when the lives run out.
        -   Add sprites that move in the background of your game.
        -   Make another background to switch to when the score gets even higher, or when the game ends.
        -   Give your game a way to end. Possible events to end your game could be the score reaching a certain value, or the amount of lives to keep the game running runs out.
        -   If your game has platforms, try making the objects in your game interact with these platforms in some way.
      CSD U3 function video: |-
        ## Questions to Consider

        -   Think of a time when a function might have helped you write a program.
            -   What code would go in the **definition** of the function?
            -   When would you **call** the function?
            -   What would you name it?
      CSD U3 game animations: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game animations_2018: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game animations_2019: |-
        # Create your Animations

        Next you will create your animations in the animation tab.  Don't forget to make multiple animations if you want your sprite to change appearance according to how it's moving.
      CSD U3 game backgrounds: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game backgrounds_2018: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game backgrounds_2019: |-
        # Create your Backgrounds

        Next, you'll create all of the background functions that you need for your game.  Some games only have one background, and others have more than one that's chosen according to user score or another aspect of gameplay.  You'll need to create a function for each separate background in your game.  You'll write the code to choose the correct background in the next level.

        -   [Show me the block to create a new function](#triggercallout=callout1)
        -   [Show me the area in the code to put my function](#triggercallout=callout2)

        After you create your functions, test them by calling them inside the draw loop, one background per test.

        -   [Show me the block to call my function](#triggercallout=callout3)
      CSD U3 game choose background: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](/s/csd3-2017/stage/19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game choose background_2018: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](../../19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game choose background_2019: |-
        # Choose your Backgrounds

        Now that you have the backgrounds that you need, you'll write the code to choose the correct background.  You've seen this done in [Lesson 19 Level 11](../../19/puzzle/11).

        After you've written the code, test it by changing the starting value of your variables and making sure the correct background shows up.
      CSD U3 game create sprites: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprites position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game create sprites_2018: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game create sprites_2019: |-
        # Create your Sprites

        Next you will create your sprites and give them starting properties in the "Create Sprites" area of your code.  For each sprite your should:

        -   Create the sprite in the correct place on the screen
        -   Set its animation (or color and size)
        -   Set its velocity and rotation speed, if needed
        -   Set its collider and bounciness, if needed

        After you create each sprite, test it before making the next one.  If your sprite starts off screen, first place it on the screen to test it, them move it back off screen once you know that it looks right.

        If your sprite's position will need to be reset later in your game, it's a good idea to make a function that sets the position of this sprite that you can use again later.
      CSD U3 game display boards: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](/s/csd3-2017/stage/16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game display boards_2018: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game display boards_2019: |-
        # Display Boards

        Now that your backgrounds are working, you can add your display boards.  Most games have a score board, but you might also want to display information about player level or lives remaining.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example of how to make a scoreboard.

        For each display board:

        -   Create a function to display the information
        -   Call the function in the draw loop

        Be sure to test your boards by changing the starting value of your variables and making sure the board also changes when you run the code.
      CSD U3 game interactions: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3-2017/stage/21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3-2017/stage/20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game interactions_2018: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](/s/csd3-2018/stage/21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](/s/csd3-2018/stage/20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game interactions_2019: |-
        # Sprite Interactions

        The last step is to create the functions that make your sprites interact in the right ways.  You'll need a function for each type of sprite interaction. You can use the `collectItems` in [Lesson 21 Puzzle 17](../../21/puzzle/17) and `displaceEnemies` in [Lesson 20 Puzzle 15](../../20/puzzle/15) as examples.

        For each interaction:

        -   Create a function in the functions area of your code
        -   Call the function inside the draw loop

        After you make each function, run the code to test it before making another.
      CSD U3 game sprite movement: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](/s/csd3-2017/stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](/s/csd3-2017/stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game sprite movement_2018: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](../../../stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](../../../stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game sprite movement_2019: |-
        # Sprite Movement Functions

        Now you'll make the functions that make the sprite move in different ways as the game is played.  Some examples of functions that you've written are `loopPlatforms` in [Lesson 21 Puzzle 9](../../../stage/21/puzzle/9) and `playerFall` in [Lesson 21 Puzzle 14](../../../stage/21/puzzle/14).

        For each movement:

        -   Create a function that will make the sprite move in that way
        -   Call the function inside the draw loop
      CSD U3 game user controls: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](/s/csd3-2017/stage/20/puzzle/13) as an example.
      CSD U3 game user controls_2018: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](../../20/puzzle/13) as an example.
      CSD U3 game user controls_2019: |-
        # User Controls

        Next, you'll want to make sure your user controls are working.  Create a function that makes your sprites respond to user controls as defined in your project guide.  You can use the function in in [Lesson 20 Puzzle 13](../../20/puzzle/13) as an example.
      CSD U3 game variables: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 game variables_2018: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 game variables_2019: |-
        # Create your Variables

        First, you'll need to create all of your variables and put them in the variables area of your code.

        -   [Show me the block](#triggercallout=callout1)
        -   [Show me the area in the code](#triggercallout=callout2)

        Don't forget, each variable needs a label (name) and a starting value.  You can change the value of the variable later in your code.
      CSD U3 if else predict: Predict Level, see contained level for instructions.
      CSD U3 keydown conditional: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the up and down arrows.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Hint: you can use the rabbit that's already in the Animations tab, or add a new animation._
      CSD U3 keydown conditional_2018: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the "p" and "h" keys.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?_
      CSD U3 keydown conditional_2018_2019: |-
        # Changing Sprites

        You saw on the last level that `keyDown` returns `true` while you are holding a key down and `false` when the key is not pressed down.   The input for the `keyDown` command is the name of key you want to check in quotes. Some examples are "x", "up" and "space".

        We can use `keyDown` as an input to an `if` statement to change our animations based on key presses!

        # Do This

        -   Run the code and try pressing the "p" and "h" keys.
        -   Look inside the `if` statement to see how the code works.
        -   Add a block inside the third `if` statement to change the animation to a different animal.

        _Challenge: When you use `setAnimation`, it keeps the new animation until you change it again.  Can you change the code so that the sprite will automatically go back to a giraffe when you're not holding one of the keys down?_
      CSD U3 picture: |-
        # Challenge: Draw an Image

        _Check with your teacher before starting any of the challenges._

        In the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.
      CSD U3 picture_2018: |-
        # Challenge: Draw an Image

        _Check with your teacher before starting any of the challenges._

        In the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.
      CSD U3 picture_2019: |-
        # Challenge: Draw an Image

        _Check with your teacher before starting any of the challenges._

        In the previous lesson you and your partner created several interesting images. See if you can recreate one of them using code.
      CSD U3 platform background1: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background1_2018: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background1_2019: |-
        # Background

        The first thing that you will create for your game is the background.   The sample game had two different backgrounds that were chosen according to the user's score.  The first background has already been created for you.  Look at the `background1` function in the code below to see how it works. ([Show me where](#triggercallout=code_triggered1))

        In order for the background function to do something, you have to call it inside the draw loop. ([Show me where](#triggercallout=code_triggered2))

        There is also an empty function named `background2`. ([Show me where](#triggercallout=code_triggered3))  You will need to fill that function with new code to make a different background, then test the code by calling the function inside the draw loop.

        # Do this

        -   Read the code for `background1`.
        -   Fill the `background2` function with new code for a second background.
        -   Test your `background2` function by calling it inside the draw loop.

        _Hint: It's much easier to copy, paste, and make small changes to your code in text mode._
      CSD U3 platform background2: |-
        # Choosing your Background

        Now that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 11](/s/csd3-2017/stage/19/puzzle/11)

        # Do This

        -   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.
        -   Test your code by changing the start score to 100, then running to code to see whether the background changes.

        _Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._
      CSD U3 platform background2_2018: |-
        # Choosing your Background

        Now that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 11](/s/csd3-2018/stage/19/puzzle/11)

        # Do This

        -   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.
        -   Test your code by changing the start score to 100, then running to code to see whether the background changes.

        _Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._
      CSD U3 platform background2_2019: |-
        # Choosing your Background

        Now that you have your score variable, you can use it to choose the right background for your game.  You can see an example of changing your background according to your score in [Lesson 19 Level 12](../../19/puzzle/12)

        # Do This

        -   Inside the draw loop, use an `if` statement and your two background functions to draw your background according to your score level.
        -   Test your code by changing the start score to 100, then running to code to see whether the background changes.

        _Challenge: If you have a third background, you can click the plus sign at the bottom of the `if` block.  Another space will appear for your third background function, as well as a place to check the score again._
      CSD U3 platform challenge: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform challenge_2018: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform challenge_2019: |-
        # Improve Your Game

        Improve your game by adding in two or more of the features you saw in the last two examples.  You can use the list below to help you.

        -   Choose new animations for your player, platform, and items.
        -   Prevent your player from going off the side of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
        -   Make your player's animation change direction when the player changes direction.
        -   Change the player to only jump when it is on a platform.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform items1: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items1_2018: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items1_2019: |-
        # Create an Item

        <img src="https://images.code.org/2cdb64a2e23e68c8a86296240642cd13-image-1476211650103.gif" style="float:right;">

        Next, you need to add the items that fall from the top of the screen.  These move just like the platforms, but faster.  In order to make the game more interesting, the items start at a random location above the screen.  For the sample game, the item's x position is a random number between 50 and 350, and the y position is a random number between -30 and -60.

        # Do This

        -   Use the `createSprite` block to make an item sprite in the "create sprites" section of your code.
        -   Use the `randomNumber` block inside your `createSprite` block to start the item at a random x and y position.
        -   Use `setAnimation` and `velocityY` to give your sprite the correct image and make it fall from the top of the screen.
        -   Run the code to test your sprite.
      CSD U3 platform items2: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items2_2018: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items2_2019: |-
        # Loop your Item

        <img src="https://images.code.org/bf06ad06acbba65dfd48b63608a08c90-image-1476212006882.gif" style="float:right">
        Now that your item is falling, you can add code to loop it back to the top.  This is similar to what you did for the platform sprite, but the item sprite will loop back to a random x and y location when it goes to the top of the screen.

        # Do This

        -   Create a `loopItems` function that uses an `if` block to check whether the item sprite is off the bottom of the screen, then sends the item back to a random x and y position, just as it did when you first created the sprite.
        -   Call the function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform items3: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform items3_2018: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform items3_2019: |-
        # Make your Second Item

        <img src="https://images.code.org/dfd53f2ea4b4380c126dde8035bcdc45-image-1476212495388.gif" style="float: right">

        Next, you'll copy and paste the code for your first item to create a second item.  Remember that this is a lot easier in **text mode**, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the item, and the part in your `loopItem` function, where you looped the item back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first item sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "star", you could name this one "star2".
        -   Inside your `loopItems` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.
      CSD U3 platform platform1: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform1_2018: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform1_2019: "# Create a Platform Sprite\n\n<img src=\"https://images.code.org/6e5aa80eb72809d761a695fae1b42b81-image-1476210749306.gif\"
        style=\"float: right;\"> \n\nNow that you have your background and your variables,
        it's time to create your sprites.  Usually, it will be easiest to start with
        the sprites that are part of the environment, such as your platforms.  The
        sample game had two platform sprites, but you'll make just one first, then
        test it before copying and pasting the code to make the second.\n\n# Do This\n\n-
        \  Look at your worksheet and choose a platform sprite to create.\n-   In
        the \"Create sprites\" area at the top of your code, create your new sprite
        with the `createSprite` block, giving it the correct position and label (name).
        ([Show me the block](#triggercallout=callout))\n-   Use the `setAnimation`
        and `velocityY` blocks to give your sprite the correct image and downward
        velocity.\n-   Test the sprite to make sure that it's moving in the correct
        way.  You might need to adjust its velocity.\n\n_Hint: The sprite will go
        off the screen and not come back.  You'll make it loop back around in the
        next level._"
      CSD U3 platform platform2: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](/s/csd3-2017/stage/15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform2_2018: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](/s/csd3-2018/stage/15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform2_2019: |-
        # Loop the Platform Sprite

        <img src="https://images.code.org/6bfe6dd078b2022315a7f54a38c90826-image-1476211068588.gif" style="float: right;">

        Right now, your platform sprite moves down, but it doesn't loop back up to the top of the screen. You can look at [Lesson 15 Level 13](../../15/puzzle/13) to see an example of a sprite looping around a screen.

        # Do This

        -   Use the `function` block to create a `loopPlatforms` function at the bottom of your code.
        -   Use the `if` block inside the function to check whether the platform has gone off the bottom of screen and, if it has, move it back to the top of the screen.
        -   Call the function inside the draw loop, in the "update sprites" area.
        -   Run the code to test your sprite.

        _Hint: What will platform.y be when the sprite moves off the bottom of the screen?  What should platform.y be when you put it back at the top of the screen?_
      CSD U3 platform platform3: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform platform3_2018: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform platform3_2019: |-
        # Make your Second Platform

        <img src="https://images.code.org/94abf92949a82f6ba18a8cfafb9231b1-image-1476211447371.gif" style="float:right;">

        Making a second platform will be easier than making the first, because you can copy and paste a lot of the code, then make a few small changes.  This is a lot easier in _text mode_, so be sure to try it out if you haven't already.

        You'll need to copy two parts of your code: the part at the beginning where you made the platform, and the part in your `loopPlatforms` function, where you looped the platform back to the top of the screen.

        # Do This

        -   Copy the code you used to create the first platform sprite (`createSprite`, `setAnimation`, and `velocityY`), and paste it directly beneath the original code.
        -   Change the names of the sprite in the new lines.  For example, if you named your original sprite "platform", you could name this one "platform2".
        -   Change the starting position of your new platform sprite.
        -   Inside your `loopPlatforms` function, copy the if statement, then paste it directly underneath the original code, inside the function.
        -   Change the sprite name in the new lines of code.
        -   Run your code to test it.

        _Challenge: You can make your platforms appear at random x positions when they loop back to the top of the screen._
      CSD U3 platform player1: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](/s/csd3-2017/stage/17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player1_2018: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](/s/csd3-2018/stage/17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player1_2019: |-
        # Create your Player

        <img src="https://images.code.org/8358b8d2eef2461e113e0b3093da7403-image-1476212944204.gif" style="float:right">

        Now you can create your player sprite.  Just like the item sprites, the player sprite will fall from the top of the screen.  Unlike the items, your player sprite will get faster as it falls, just like real falling objects.  This is what allows it to jump up, and fall back down.

        # Do This

        -   Use the `createSprite` block to make a player sprite with the label and starting position that you put on your worksheet.
        -   Use `setAnimation` to give it the correct image.
        -   Create a `playerFall` function that makes the sprite fall from the top of the screen.  The code inside the function should use `velocityY` in a counter pattern, just as when you made the falling rock in [Lesson 17 Level 4](../../17/puzzle/4).
        -   Call the `playerFall` function inside the draw loop.
        -   Run the code to test your sprite.
      CSD U3 platform player2: |-
        # User Controls

        Next, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.

        # Do This

        -   Create a new `controlPlayer` function in the "functions" area of your code.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href="/s/csd3-2017/stage/12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> for examples.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href="/s/csd3-2017/stage/15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11 </a> for an example.
        -   Call the `controlPlayer` function inside the draw loop.
        -   Run the game and test your code.
      CSD U3 platform player2_2018: |-
        # User Controls

        Next, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.

        # Do This

        -   Create a new `controlPlayer` function in the "functions" area of your code.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href="/s/csd3-2018/stage/12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> for examples.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href="/s/csd3-2018/stage/15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11 </a> for an example.
        -   Call the `controlPlayer` function inside the draw loop.
        -   Run the game and test your code.
      CSD U3 platform player2_2019: |-
        # User Controls

        Next, you should add user controls so that you can move your player around.  Your player needs to move to the left when the left arrow key is pressed, to the right when the right arrow key is pressed, and jump when the space bar is pressed.

        # Do This

        -   Create a new `controlPlayer` function in the "functions" area of your code.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `sprite.x` blocks to make your player move to the left and right according to the arrow keys.  Look at <a href="../../12/puzzle/7" target="_blank"> Lesson 12 Puzzle 7 </a> for examples.
        -   Inside the `controlPlayer` function, use the `if`, `keyDown`, and `velocityY` blocks to make your player jump when the up arrow is pressed.  Look at <a href="../../15/puzzle/11" target="_blank"> Lesson 15 Puzzle 11 </a> for an example.
        -   Call the `controlPlayer` function inside the draw loop.
        -   Run the game and test your code.
      CSD U3 platform player3: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player3_2018: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player3_2019: |-
        # Player Interactions

        The last part of making your game is programming the player interactions with the other sprites.  First, your player needs to land on the platforms.

        # Do This

        -   Create a `playerLands` function and add it to the "functions" area of your code.
        -   Inside the function, use the `collide` block so that your player can land on both the platforms.
        -   Call the function inside the draw loop.
        -   Run the code to test your function.
      CSD U3 platform player4: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](/s/csd3-2017/stage/16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform player4_2018: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](/s/csd3-2018/stage/16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform player4_2019: |-
        # Collect Items

        Last, you'll want your player to collect the items falling from the top of the screen.

        # Do This

        -   Create a `collectItems` function and add it to the "functions" area of your code.
        -   Use the `if` and `isTouching` blocks to change the x and y position of the items when the player touches them.  You can look at the `loopItem` function for clues in how to reset the item position.
        -   Inside your `if` statement, add a counter pattern that will increase the score every time the player touches an item.  Look at [Lesson 16 Puzzle 9](../../16/puzzle/9) for an example.
        -   Call the function inside the draw loop, in the "update sprites" area of your code.
        -   Run the code to test your function.
      CSD U3 platform sample1: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample1_2018: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample1_2019: |-
        # Platform Jumper

        The game on the left is an example of a platform jumper.  Press "Run" to play it.  You can make the alien jump with the up arrow, and move it to the left and right with the arrow keys.  You score by collecting stars, and if you score high enough, the background will change.

        You already know how to use all the blocks you need to make a game just like this one, and you'll be making your own platform jumper in this lesson.
      CSD U3 platform sample2: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample2_2018: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample2_2019: |-
        # Plane Jumper

        Here's another example of a platform jumper, but it has a few more features.  You can use it to get ideas to improve your own game.  For example, there is a coin sprite that gives the player an extra life.

        Choose one or more of the following changes and add them to your game.

        -   Choose new animations for your player, platform, and items.
        -   Make it impossible for your player to go off the left or right of the screen.
        -   Add a different type of item for the player to collect or avoid.
        -   Add a variable that keeps track of how many lives the player has, and end the game if the player runs out.
      CSD U3 platform sample3: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform sample3_2018: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform sample3_2019: |-
        # Bunny Jumper

        Here's another example of a jumper.  In this one, the items get faster when they fall, and bounce off the platforms.

        Choose one or more of the following changes and add them to your game.

        -   Make your player's animation change direction when the player changes direction.
        -   Add another background and make it appear when the score gets even higher.
        -   Make your items interact with the platforms in some way.
      CSD U3 platform scoreboard: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](/s/csd3-2017/stage/16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform scoreboard_2018: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](../../16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform scoreboard_2019: |-
        # Make the Scoreboard

        <img src="https://images.code.org/ea490a1915a70676fd3a783adce93cdd-image-1476142534609.png" style="float:right;">

        You'll also need a scoreboard so the player can keep track of the score.   There's already a `showScore` function written, but it only shows the text "Score" and not the actual score. ([Show me where](#triggercallout=code_triggered))  You can see an example of a working scoreboard in [Lesson 16 Level 9](../../16/puzzle/9).

        # Do This

        -   Read the code in the `showScore` function.
        -   Call the function inside the draw loop, right after you draw the backgrounds.
        -   Use the `text` block to display the score at the top of the screen.
      CSD U3 platform variable1: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 platform variable1_2018: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 platform variable1_2019: |-
        # Score Variable

        Now that you've created your backgrounds, you'll need to choose when each background is drawn.  For that, you'll need a score variable to hold information about your player's score.

        You should always give your variables a starting value at the very beginning of the program.  That way, they are available for any code that comes after.

        # Do This

        -   Create a score variable at the beginning of your game program. ( [Show me the block](#triggercallout=callout) )
        -   Set the score equal to 0.
      CSD U3 rect: "# Explore Game Lab\n\nWelcome to Game Lab, where you can create
        interactive animations and games!   \n\nYou've already practiced the basics
        of putting shapes on a grid.  In Game Lab, you'll do the same with the display
        area on the left.\n\n# Do This\n\n-   Look at the line of code in the workspace
        below these instructions ( [Show me where](#triggercallout=block_trigger)
        ) and discuss with your partner where you think the shape will be drawn on
        the grid.\n-   Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png\" width=100> to run the program and see what happens. ( [Show me where](#triggercallout=run_trigger)
        )\n-   Change the numbers inside the block, then try running the program again.\n-
        \  Try to place the rectangle near the bottom right of the screen."
      CSD U3 rect_2018: "# Explore Game Lab\n\nWelcome to Game Lab, where you can
        create interactive animations and games!   \n\nYou've already practiced the
        basics of putting shapes on a grid.  In Game Lab, you'll do the same with
        the display area on the left.\n\n# Do This\n\n-   Look at the line of code
        in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger)
        ) and discuss with your partner where you think the shape will be drawn on
        the grid.\n-   Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png\" width=100> to run the program and see what happens.\n-   Change the
        numbers inside the block, then try running the program again.\n-   Try to
        place the rectangle near the bottom right of the screen."
      CSD U3 rect_2019: "# Explore Game Lab\n\nWelcome to Game Lab, where you can
        create interactive animations and games!   \n\nYou've already practiced the
        basics of putting shapes on a grid.  In Game Lab, you'll do the same with
        the display area on the left.\n\n# Do This\n\n-   Look at the line of code
        in the workspace below these instructions ( [Show me where](#triggercallout=block_trigger)
        ) and discuss with your partner where you think the shape will be drawn on
        the grid.\n-   Click <img src=\"https://images.code.org/9e963203e9cafd558b760730d13537ca-image-1461783998310.06.20
        PM.png\" width=100> to run the program and see what happens.\n-   Change the
        numbers inside the block, then try running the program again.\n-   Try to
        place the rectangle near the bottom right of the screen."
      CSD U3 sequence: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Order Matters

        In Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.

        # Do This

        -   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.
        -   Change the red rectangle's color to green.
        -   Change the order of the code so the green rectangle appears on top.
      CSD U3 sequence_2018: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Order Matters

        In Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.

        # Do This

        -   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.
        -   Change the red rectangle's color to green.
        -   Change the order of the code so the green rectangle appears on top.
      CSD U3 sequence_2019: |-
        <img src="https://images.code.org/30d68fb30db5b61187f104f46292e052-image-1493060980724.08.05 PM.png" style="float:right">

        # Order Matters

        In Game Lab, it matters what order your code is in.  New shapes are drawn on top of the ones that came before, covering up the shapes that are drawn first.  You can see the difference when you use more than one color in your code.

        # Do This

        -   Look at the code that draws the two rectangles.  The first is drawn red, and the second is drawn blue.
        -   Change the red rectangle's color to green.
        -   Change the order of the code so the green rectangle appears on top.
      CSD U4 - Design Mode Input Widgets: |-
        # Input Elements

        <img src="https://images.code.org/108fcc6fc89bf88edde00353afb33d75-image-1469814642375.49.23.png" style="float: right; width: 150px"/>

        Buttons are a great way to navigate around your app, and text labels are the primary way to display content in your app. When it comes to taking input from your users, sometimes you need a place for them to type or boxes to check. The **Text Input**, **Dropdown**, **Radio Button**, and **Checkbox** elements all provide ways for your users to input information to your app.

        # Do This

        Choose at least two of the input elements, and for each one:

        -   Drag it out and position it on the screen
        -   Change the id to something meaningful
        -   Read through the properties and experiment with them
        -   Add a label element next to each that describes what they do (don't forget to give it an id too!)
      CSD U4 - Design Mode Project: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is "home\_" you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Share your design regularly with your teammates to ensure consistent style
      CSD U4 - Design Mode Project_2018: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is `home_` you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Make sure that you and your teammates are regularly looking at each other's designs to ensure consistent style
      CSD U4 - Design Mode Project_2019: |-
        # Mocking Up Your App

        Using your paper prototype, create a digital version of your screen using the Design Mode elements you've learned about.

        # Do This

        -   Rename the screen to match your _namespace_.
        -   Use the built-in elements to lay out your app screen, giving each a proper ID
            -   For example, if your namespace is `home_` you might create IDs like:
                -   `home_title`
                -   `home_login_button`
                -   `home_logo`
        -   For any components of your app that can't be recreated with the built in elements you can either:
            -   Redesign to utilize built in elements
            -   Find an image to use in place of your element
            -   Draw the element using your preferred image editor
        -   Make sure that you and your teammates are regularly looking at each other's designs to ensure consistent style
      CSD U4 - Design Mode Text: "# Adding Text\n\n<img src=\"https://images.code.org/86ba633e04f90f3ca47dff3dcd064847-image-1469812708683.15.36.png\"
        style=\"float: right; width: 75px\"/>\nThe label element lets you add any
        text you'd like to your app. Just drag out a label block and set its \"text\"
        property. \n\n# Do This\n\nUse a label element to create a title for this
        app.\n\n-   Drag out a label and place it on the top of the screen\n-   Change
        the id to \"titleLabel\"\n-   Change the text to \"My App\"\n-   Increase
        the font size\n-   Choose a color you like for the title"
      CSD U5 Amazon Data Video: Watch this video to learn how this problem is solved
        by Amazon. As you watch think about what data is being collected and where
        it's coming from.
      CSD U5 Amazon Data Video_2018: Watch this video to learn how this problem is
        solved by Amazon. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Amazon Data Video_2019: Watch this video to learn how this problem is
        solved by Amazon. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Netflix Data Video: Watch this video to learn how this problem is solved
        by Netflix. As you watch think about what data is being collected and where
        it's coming from.
      CSD U5 Netflix Data Video_2018: Watch this video to learn how this problem is
        solved by Netflix. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Netflix Data Video_2019: Watch this video to learn how this problem is
        solved by Netflix. As you watch think about what data is being collected and
        where it's coming from.
      CSD U5 Pizza: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza 2: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza 2_2018: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza 2_2019: |-
        # Pizza Party

        When people work with data, they know to leave off answers that don't make sense, and that some answers, such as "peppers", "pepppers" and "green peppers", actually meant the same thing. Computers don't know how to do this, so we have to clean the data before the computer is able to use it.

        This version of the app has a second column for data to be cleaned.

        ## Do this

        -   Click "Run" to see the new list of answers to be cleaned.
        -   Click on each answer that needs to be cleaned and correct it so that the computer will chart it properly. (You may want to delete some answers entirely.)
        -   When you are finished, click "Show Chart" to see the new chart of cleaned answers.
      CSD U5 Pizza_2018: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Pizza_2019: |-
        # Pizza Party

        The pizza party data has been put into an app for you, and the answers from another class have been added.  Because this is an app, we can automate the creation of the bar chart from the given data.

        # Do This

        -   Click "Run" to see the list of answers that the classes have given.
        -   Discuss with a partner what you think the chart of this data will look like.
        -   Click "Show Chart" to see for yourself.

        # Spreadsheet Version

        The pizza party data has also been put into a spreadsheet for you, if you would like to use it instead.  To use the spreadsheet, you'll need to make your own copy of it.

        -   This link will make you your own copy of the "Pizza Topping Choices" data: [Pizza Topping Choices](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/copy)
        -   You can also download a CSV version of the file [here](https://docs.google.com/spreadsheets/d/1q1vdgmIlGgxiqJs_VnqHvko18UD6XvRXrnY3JSU97NQ/export?format=csv).
      CSD U5 Waze Data Video: Watch this video to learn how this problem is solved
        by Waze. As you watch think about what data is being collected and where it's
        coming from.
      CSD U5 Waze Data Video_2018: Watch this video to learn how this problem is solved
        by Waze. As you watch think about what data is being collected and where it's
        coming from.
      CSD U5 Waze Data Video_2019: Watch this video to learn how this problem is solved
        by Waze. As you watch think about what data is being collected and where it's
        coming from.
      CSD U5 binary 1: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 1_2018: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 1_2019: |-
        # 5-Bit Number

        When you only had four bits, the highest number that you could make was fifteen.  Now you'll have a chance to work with more bits to make higher numbers.

        In this activity, the dots are replaced with numbers, but you still add up everything that's showing to see what number the binary code stands for.  The left-most bit doesn't have a number yet, so you'll have to give it one.

        # Do This

        -   Click on the bits to turn them on and off, and see the different numbers you can make.
        -   With your partner, discuss the pattern in the numbers.  Decide what number you think should go in the left most box.
        -   Click "Edit" to change the value of the left most bit.
        -   Once you've decided on the value, try to make the following numbers: 16, 27, 31
      CSD U5 binary 2: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 2_2018: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 2_2019: |-
        # 6-Bit Number

        This widget helps you to calculate 6-bit binary numbers.

        # Do This

        -   With your partner, answer the following questions:
            1.  What's the biggest number you can make with this widget?
            2.  The record for most skips by a dog and person in one minute is 59.  How would you encode 59 in binary?
      CSD U5 binary 4-new: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 4-new_2018: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 4-new_2019: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers of 4, 5, or 6 bits.  You can use it to find the two world records encoded in the binary string below.

        ![](<https://images.code.org/13b0d3307e688575b53e3e6bc86fb739-image-1505426509385.01.06 PM.png>)

        1.  Most number of people lifted and thrown in two minutes. (4 bits)
        2.  Most canned drinks opened by a parrot in one minute. (6 bits)

        # Do This

        -   Decode the two numbers from the binary string.
      CSD U5 binary 5-new: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.

        Don't forget to make sure that the "1" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Longest tail on a dog (in inches) (5 bits)
        2.  Most spoons balanced on someone's face (5 bits)

        # Do This

        -   Decode the two numbers from a the binary string.
      CSD U5 binary 5-new_2018: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.

        Don't forget to make sure that the "1" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Longest tail on a dog (in inches) (5 bits)
        2.  Most spoons balanced on someone's face (5 bits)

        # Do This

        -   Decode the two numbers from a the binary string.
            -   _Hint: You'll need to read the numbers in order, with the first answer using the first five bits, and the second answer using the five bits after that._
      CSD U5 binary 5-new_2019: |-
        # Decoding multiple numbers

        Here's a widget that can calculate numbers up to to eight bits. You can use it to find the values of the two world records below.

        Don't forget to make sure that the "1" bit is always the right most bit.  If you have extra bits on the left side of the widget, just keep them turned off.

        ![](<https://images.code.org/e86788ff9b92a2b01b99749fa1aba8e8-image-1505426626592.01.14 PM.png>)

        1.  Longest tail on a dog (in inches) (5 bits)
        2.  Most spoons balanced on someone's face (5 bits)

        # Do This

        -   Decode the two numbers from a the binary string.
            -   _Hint: You'll need to read the numbers in order, with the first answer using the first five bits, and the second answer using the five bits after that._
      CSD U5 binary 6-new: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 6-new_2018: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 6-new_2019: |-
        # Decoding multiple numbers

        Here's a new bit string.  This time, you don't know the bit length of the two numbers.  Try to decode the numbers without knowing the bit length.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        1.  Largest wind chime, in feet (? bits)
        2.  Furthest arrow shot with someone's feet (in feet) (? bits)

        # Do This

        -   Try to decode the two numbers from the binary string.
        -   Discuss with your partner why you cannot know for sure whether your answer is correct.
      CSD U5 binary 7-new: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary 7-new_2018: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary 7-new_2019: |-
        # Bit Length

        If you don't know how many bits long each number is, you won't be able to decode a string of numbers.

        For example, the following binary string could be decoded many different ways.

        ![](<https://images.code.org/cde9a4d100147b950a9be7540453fe89-image-1505426886341.07.46 PM.png>)

        If you split the string like this, the string reads 10, 84.

        ![](<https://images.code.org/c8586b93427166ae6ecfdb8b1ff66bdd-image-1505427228630.13.01 PM.png>) ![](<https://images.code.org/7d9814dc4bae8512dfaebbe459c29c9b-image-1505427230882.13.08 PM.png>)

        If you split it like this, the string reads 42, 20.

        ![](<https://images.code.org/2e62b4a71b98b68bdf04713c508e4cb2-image-1505427233001.13.13 PM.png>) ![](<https://images.code.org/10a316c870b575db4b30a687815bf481-image-1505427235482.13.19 PM.png>)

        To solve this problem, people agree on a fixed length for every number.  The following string uses the same two numbers, but each number takes up exactly eight bits, no matter how many bits it actually needs.

        ![](<https://images.code.org/257cb728fde57421e58ef31164be5a51-image-1505427467235.13.26 PM.png>)

        # Do This

        -   Use the binary widget to decode the string that uses eight bit numbers.
        -   Check you answer with a partner to see whether you got the same answer.
      CSD U5 binary video_2019: |-
        ## Pertanyaan Renungan

        -   Kenapa semua jenis data dalam komputer disimpan dalam bentuk angka?
        -   Jika semua disimpan dalam bentuk angka, menurutmu bagaimana caranya komputer itu bisa membedakan antara angka, huruf, gambar, dan suara?
      CSD U5 black white images pixelation: |-
        # Do This

        Complete the "X" shape by typing 0s and 1s. You can always click "Readable Format" if you want to clean up your work.
      CSD U5 black white images pixelation 2: "# lakukan ini\\\r\n\n\\\r\ngunakan\nwidget
        pixelasi untuk menggambar wajah tersenyum\\\r\n\\\r\n!\\[](\\<<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image->\n1491425592286.52.47\nPM.png>)"
      CSD U5 black white images pixelation 2_2018: "# lakukan ini\\\r\n\n\\\r\ngunakan\nwidget
        pixelasi untuk menggambar wajah tersenyum\\\r\n\\\r\n!\\[](\\<<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image->\n1491425592286.52.47\nPM.png>)"
      CSD U5 black white images pixelation 2_2019: "# lakukan ini\\\r\n\n\\\r\ngunakan\nwidget
        pixelasi untuk menggambar wajah tersenyum\\\r\n\\\r\n!\\[](\\<<https://images.code.org/3e81e7e5c95a63173242552de2e9c094-image->\n1491425592286.52.47\nPM.png>)"
      CSD U5 black white images pixelation 3: |-
        # Do This

        The width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.

        ![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png>)
      CSD U5 black white images pixelation 3_2018: |-
        # Do This

        The width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.

        ![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png>)
      CSD U5 black white images pixelation 3_2019: |-
        # Do This

        The width and height sliders are set incorrectly for this image so it doesn't look like anything. Change them until you find the image.

        ![](<https://images.code.org/c2abe82051e700f22ce613e407e71536-image-1491426050751.00.17 PM.png>)
      CSD U5 black white images pixelation 4: |-
        # Do This

        Add eyebrows to this smiley face. Remember to use the "Readable Format" if you get stuck.

        ![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png>)
      CSD U5 black white images pixelation 4_2018: |-
        # Do This

        Add eyebrows to this smiley face. Remember to use the "Readable Format" if you get stuck.

        ![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png>)
      CSD U5 black white images pixelation 4_2019: |-
        # Do This

        Add eyebrows to this smiley face. Remember to use the "Readable Format" if you get stuck.

        ![](<https://images.code.org/269725fa3d9d6857912fe4a20464a830-image-1491427249017.18.37 PM.png>)
      CSD U5 black white images pixelation 5: |-
        # Do This

        Now it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.
      CSD U5 black white images pixelation 5_2018: |-
        # Do This

        Now it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.
      CSD U5 black white images pixelation 5_2019: |-
        # Do This

        Now it's your turn. Draw anything you want in the pixelation widget. Feel free to change the width and height of your image if you wish.
      CSD U5 black white images pixelation_2018: |-
        # Do This

        Complete the "X" shape by typing 0s and 1s. You can always click "Readable Format" if you want to clean up your work.
      CSD U5 black white images pixelation_2019: |-
        # Do This

        Complete the "X" shape by typing 0s and 1s. You can always click "Readable Format" if you want to clean up your work.
      CSD U6 Catch the Mouse: Embedded Prediction
      CSD U6 Catch the Mouse prediction: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse prediction_2018: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse prediction_2019: |-
        # Catch the Mouse

        This is a clicker game, similar to the one that you built in the last lesson.

        Look at the code with your partner and answer the following question:

        -   How many times do you need to click the mouse before the LED starts to blink?

        Write your answer in the box below, then run the code and see what happens.
      CSD U6 Catch the Mouse_2018: Embedded Prediction
      CSD U6 Catch the Mouse_2019: Embedded Prediction
      CSD U6 Driver pt 2: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt 2_2018: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt 2_2019: |-
        # Limiting Turn

        You might have noticed that it was really hard to steer the car unless your hands were moving slowly and carefully. This is because the number that `roll` returns can be a really big number depending on how much the accelerometer is being turned. Remember, `roll` has a range from -90 to 90.

        # Do This

        Find a way to make `roll` a smaller number while still using it to steer the car. You have all of the math operators available to you for this.

        _Challenge_: Can you keep the car from going off the side of the screen?
      CSD U6 Driver pt1: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 Driver pt1_2018: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 Driver pt1_2019: |-
        # Steering Wheel

        This game is similar to the goalie game that you just played, except a little different. Use your board as a steering wheel for the car (moving side to side). You have to get to the checkered flag at while avoiding the red flags along the way!

        # Do This

        -   Make the car move down the screen while the program runs.
        -   Give the car the ability to steer side to side.

        Think back to the programs you've made up until this point, how can you update these values?
      CSD U6 LED all: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED all_2018: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED all_2019: |-
        # Multi-function Light

        This app should let you choose between three types of lights: on, blink, and pulse.  It should also have a button that turns the light completely off.  Right now only the "on" button works, and the "off" button is completely missing.

        # Do This

        -   Add code to make the "blink" and "pulse" buttons work.
        -   In design mode, add a new "off" button.
        -   Add code to make the "off" button work.
      CSD U6 LED toggle: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LED toggle_2018: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LED toggle_2019: |-
        # Light Switch

        There are three more LED blocks that you haven't used yet. One of them can make the button work like a light switch, turning the LED on when it's off, but off when it's on.

        # Do This

        -   Try the `blink`, `toggle` and `pulse` blocks to see what they do.
        -   Use one of the blocks to make the button work like a light switch.
            -   If the LED is off, the button should turn it on.
            -   If the LED is on, the button should turn it off.
      CSD U6 LEDbutton predict embed: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDbutton predict embed_2018: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDbutton predict embed_2019: |-
        # Using Events

        This program uses events.  Look at the code with a partner and discuss what you think it will do.  Once you have answered the questions click "Run" to check your answer.

        -   Will the light turn on when the program is "Run"?  Why or why not?
      CSD U6 LEDs color: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 LEDs color_2018: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 LEDs color_2019: |-
        # Adding Some Color

        You probably noticed when you used `colorLeds[0].on()` in the last level, the LEDs turned on as white. If you don't specify a color, `on()` will turn on all three parts of the LED (red, green, and blue) to produce white. You'll see a new command in the toolbox called `colorLeds[0].color()` which lets you specify a color, either as a string like "blue" or an RGB value using color `color()` command.

        # Do This

        Use the `.color()` command to set each of the color LEDs to a different color.
      CSD U6 Pedometer: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 Pedometer_2018: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 Pedometer_2019: |-
        # Jogger

        This program should use the `shake` event, which is triggered when the board is shaken.  It should add a step to the jogger's total every time the user shakes the board.

        # Do This

        -   Change the event so it triggers every time the board is shaken.
        -   Add code inside the event so that `steps` increases every time the board is shaken.
      CSD U6 add LED button: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 add LED button_2018: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 add LED button_2019: |-
        # Using Events

        This program has two buttons.  The "on" button works, but the "off" button still needs to be programmed.

        # Do This

        -   Add code so that the second button turns the LED off.
      CSD U6 airplane predict markdown: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 airplane predict markdown_2018: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 airplane predict markdown_2019: |-
        # Accelerometer

        Look at the code below. What do you think it's going to do? Give it a guess, and run the code to find out!
      CSD U6 analog challenge: |-
        # Challenge

        _Check with your teacher before pursuing this challenge_

        Now that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.

        Consider the following ways you might communicate sensor data:

        -   Use the board outputs
        -   Change the width, height, or position of a UI element
        -   Use conditionals to display different images based on sensor values
      CSD U6 analog challenge_2018: |-
        # Challenge

        _Check with your teacher before pursuing this challenge_

        Now that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.

        Consider the following ways you might communicate sensor data:

        -   Use the board outputs
        -   Change the width, height, or position of a UI element
        -   Use conditionals to display different images based on sensor values
      CSD U6 analog challenge_2019: |-
        # Challenge

        _Check with your teacher before pursuing this challenge_

        Now that you've practiced taking input from the various analog sensors and changing their scale to meet your needs, can you come up with an interesting use for sensor data? It's easy to display the raw numbers coming out of a sensor, but far more interesting to present that data in different ways.

        Consider the following ways you might communicate sensor data:

        -   Use the board outputs
        -   Change the width, height, or position of a UI element
        -   Use conditionals to display different images based on sensor values
      CSD U6 analog change: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog change_2018: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog change_2019: |-
        # Change Event

        The data event is fine if you don't mind your code running constantly, but sometimes that's not the most efficient solution to your problem. The sensor "change" event only fires if the sensor value has changed since the last reading, which can make sure your program isn't running code when it's not necessary.

        # Do This

        Using the provided event handler, write a program that buzzes the buzzer and updates "temp\_value" whenever the temperature sensor reading changes. Place your thumb over the temperature sensor to get it to change and see how your program responds.
      CSD U6 analog data: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, we can write programs that continually update.

        # Do This

        This is the first program you worked on in this lesson, let's see if we can make it continually update the sound reading using the "data" event.

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog data_2018: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, you can rewrite the first program you worked on in this lesson so that it continually updates.

        # Do This

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog data_2019: |-
        # Data Event

        Each of these analog sensors emits a special event called "data" which occurs every time new data comes in from the sensor. Using this event, you can rewrite the first program you worked on in this lesson so that it continually updates.

        # Do This

        -   Create an event handler to respond to sound sensor's "data" event
        -   Move the existing code into your event handler
      CSD U6 analog light: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog light_2018: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog light_2019: |-
        # Light Sensor Updates

        This app is very similar to the last, but we've added a button with the ID "update\_button". Write a program that displays the current value of the light sensor every time the update button is clicked.

        # Do This

        Use an event handler to update the text of "light\_value" using the `lightSensor.value` block.
      CSD U6 analog rbg 1: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 1_2018: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 1_2019: |-
        # Displaying Sensor Readings in Color

        In the earlier prediction level you saw how the `setScale()` method can convert the full range of sensor readings (0-1023) into a range that can be used for RGB values (0-255). Let's build on that idea to make an app that can communicate the current value of all three analog sensors with a single color.

        # Do This

        To start, we just need to set the sensor scales correctly - don't worry about actually setting the color of the background yet.

        -   Using the `sensor.setScale()` block, set each of light and sound sensors to the right scale for an RGB color channel.
        -   Create a variable for each of the three colors and assign each one to the value of a different sensor.
        -   Use `console.log()` to test that your variables are in the correct range.

        _Hint: Order matters. You need to set the scale of a sensor before checking its value_

        _Hint: Remember that the temperature sensor can be read in both Celsius and Fahrenheit - either way it should already give you a value that's within the necessary range for RGB_
      CSD U6 analog rbg 2: |-
        # Putting Color on the Screen

        Now that your sensor data is in a scale that works for RGB, you can go about setting the screen color.

        # Do This

        -   Add a `setProperty()` block and set it to change the screen's background color.
        -   Add an `rgb()` block to the last parameter of `setProperty()`.
        -   Use the three color variables you created as inputs to the `rgb()` block.
      CSD U6 analog rbg 2_2018: |-
        # Putting Color on the Screen

        Now that your sensor data is in a scale that works for RGB, you can go about setting the screen color.

        # Do This

        -   Add a `setProperty()` block and set it to change the screen's background color.
        -   Add an `rgb()` block to the last parameter of `setProperty()`.
        -   Use the three color variables you created as inputs to the `rgb()` block.
      CSD U6 analog rbg 2_2019: |-
        # Putting Color on the Screen

        Now that your sensor data is in a scale that works for RGB, you can go about setting the screen color.

        # Do This

        -   Add a `setProperty()` block and set it to change the screen's background color.
        -   Add an `rgb()` block to the last parameter of `setProperty()`.
        -   Use the three color variables you created as inputs to the `rgb()` block.
      CSD U6 analog rgb 3: |-
        # Continuous Updates

        This sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' "data" event to make your app continually update the background color every time the value changes.

        Move your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.
      CSD U6 analog rgb 3_2018: |-
        # Continuous Updates

        This sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' "data" event to make your app continually update the background color every time the value changes.

        Move your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.
      CSD U6 analog rgb 3_2019: |-
        # Continuous Updates

        This sensor-to-color app isn't super useful if it only sets the color once when you start the app. You can use the sensors' "data" event to make your app continually update the background color every time the value changes.

        Move your `setProperty()` block into a an event handler for one of the sensors to make the app update continually.
      CSD U6 analog sound: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2018: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog sound_2019: |-
        # Reading the Sound Sensor

        The `soundSensor.value` block allows you to get the current sound sensor reading

        # Do This

        In this app we've already added a text label with the id "sound\_value". Using the `soundSensor.value` block, display the value of the sound sensor.

        _Tip: You can drag the `soundSensor.value` block directly into any other block where you could type a value instead._

        ![](https://images.code.org/3bd9ac3f869e42f48aaf190944fe1c22-image-1511293198110.png)
      CSD U6 analog temp: |-
        # Make a Thermometer App

        While the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.

        # Do This

        Make a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)

        -   Using Design Mode, create a button for updating and a label to display the temperature
        -   Add an event handler to respond to your update button being clicked
        -   Add code to your event handler to read the temperature sensor and display the value on screen
      CSD U6 analog temp_2018: |-
        # Make a Thermometer App

        While the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.

        # Do This

        Make a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)

        -   Using Design Mode, create a button for updating and a label to display the temperature
        -   Add an event handler to respond to your update button being clicked
        -   Add code to your event handler to read the temperature sensor and display the value on screen
      CSD U6 analog temp_2019: |-
        # Make a Thermometer App

        While the light and sound sensors have just a raw value with the `value` property, the temperature sensor is a little bit smarter. Instead of `tempSensor.value`, there are two properties `tempSensor.F` and `tempSensor.C` which convert the raw input value to either Fahrenheit or Celsius.

        # Do This

        Make a simple thermometer app that reads in values from the temperature sensor. Your app can display the temperature in either Fahrenheit or Celsius (or both!)

        -   Using Design Mode, create a button for updating and a label to display the temperature
        -   Add an event handler to respond to your update button being clicked
        -   Add code to your event handler to read the temperature sensor and display the value on screen
      CSD U6 analog threshold: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out which how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 analog threshold_2018: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 analog threshold_2019: |-
        # Change Threshold

        By default a sensor's "change" event fires every time the sensor value changes at all, even by one. The light and sound sensors are constantly fluctuating, so you probably want the "change" event to be a little less responsive. The `threshold` property allows you to set how much a sensor should change before considering it a "change" event - so setting `soundSensor.threshold = 100` would cause the sound sensor's "change" event only to trigger if its value increased or decreased by at least 100.

        # Do This

        This app changes the background color of the screen whenever the sound sensor value changes, but we want to only respond to big changes in volume (like a loud noise). Use the `soundSensor.threshold` block to fix it.

        -   Add a `soundSensor.threshold` block before the event handler
        -   Test out how different threshold values impact the "change" event
        -   Choose a threshold value that makes the screen background change only when a loud noise is sensed.

        _Tip: Your threshold depends on how much ambient noise there is in the room, and how much it changes. A threshold that works in a quiet room may not work in a louder classroom._
      CSD U6 array piano: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 array piano_2018: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 array piano_2019: |-
        # Piano Panic

        So far you’ve just been using the elements of an array. Now, you're going to change what's inside the array.

        Our good friend the piano is back, except now it plays notes from two arrays: `notes`, which holds natural notes (C, D, E, F, G, A, B), and `sharpNotes`, which holds sharp notes (C#, D#, F#, G#, A#).

        # Do this

        The `sharpNotes` array only has one item inside of it right now.

        -   Fix the array so that the sharp keys on the piano can actually play the right note.

        _Hint: Modifying arrays is much easier in text mode.  You can always switch between block and text mode by clicking the button at the top right of your code workspace._
      CSD U6 arrays video: |-
        ## Questions to Consider

        -   When might an array be more useful than a variable?
        -   Why do you always need to assign an array to a variable?
        -   How can you access the elements in your array?
      CSD U6 board getters: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 board getters_2018: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 board getters_2019: |-
        # Using the Circuit Playground

        You can also use getters and setters with the Circuit Playground.  For this level, you'll need to plug in your board.

        Read through the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 challenge motorcycle_2018: |-
        # Challenge

        Use this program to experiment some more with getting and setting properties. Some ideas you might try include:

        -   Use the toggle switch to change the motorcycle's movement to go up and down.
        -   Use a dropdown with color names to change the motorcycle's color
        -   Make the buzzer or LED turn on when the motorcycle reaches the top or bottom of the screen.
      CSD U6 challenge motorcycle_2019: |-
        # Challenge

        Use this program to experiment some more with getting and setting properties. Some ideas you might try include:

        -   Use the toggle switch to change the motorcycle's movement to go up and down.
        -   Use a dropdown with color names to change the motorcycle's color
        -   Make the buzzer or LED turn on when the motorcycle reaches the top or bottom of the screen.
      CSD U6 change: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 change_2018: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 change_2019: |-
        # Change

        In the last level, the program only got the interval value from the slider when you pressed the left button.  Sometimes, though, you'll want to change the interval of the LED as soon as the user chooses a new value.   For that, you'll need the "change" event.

        # Do This

        -   Look at the first event block in the program and find where it says "change".
        -   Inside the event block, get the interval value from the slider and use it to make the LED blink at that new rate.
        -   Run your program, moving the slider to see whether the LED speed changes automatically.
      CSD U6 circuit createButton: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createButton_2018: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createButton_2019: |-
        <div style="float: right" markdown="1">

        ![expandable](https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png)

        </div>

        # Make Your Own Buttons

        Similar to LEDs, buttons are a really simple circuit that you can add to your board pretty easily. Like LEDs, buttons should be wired from a numbered pin to a ground pin, but unlike LEDs, a button circuit should be disconnected in the middle. When you connect the circuit, it will produce a button press event.

        # Do This

        -   Grab two wires.
        -   Connect one wire to an open numbered pin.
        -   Connect the second wire to a ground pin.
        -   Update line 2 so that it's referencing the pin you chose.
        -   Run the provided code.
        -   With the program running, touch the unconnected ends of both wires together to "press" the button.

        _Tip: A button circuit can be made with many different kinds of materials, as long as they are electrically conductive. Try making buttons with foil, silverware, or paper clips._
      CSD U6 circuit createLed: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit createLed_2018: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit createLed_2019: |-
        # Creating Board Objects

        You might have noticed that the new blocks we're using are in a different toolbox drawer. The **Circuit** drawer contains all of the board objects that are built into the Circuit Playground, but when you start wiring your own circuits the Maker Toolkit no longer knows where everything is.

        The new **Maker** drawer contains general purpose commands instead of ones that are customized for the Circuit Playground. In addition to the `pinMode()` and `digitalWrite()` commands you've seen, it includes commands to create new objects on the board that can be programmed in the same way as the blocks in the **Circuit** drawer. The `var myLed = createLed()` command, for example, creates a new LED object that behaves just like the `led` blocks you've been using.

        # Do This

        Now that you're creating new board objects that we don't have blocks for, you'll need to work in text mode. You can still drag out blocks that you're familiar with from the **Circuit** drawer, you'll just need to change the name of the object.

        -   Keep your LED wired just as it was before (connected to pin 2)
        -   Make sure you're in text mode, not block mode.
        -   Drag out an `led.blink()` block below the comment `// Blink myLed`.
        -   Replace the text `led` with `myLed`.
        -   Test your code.
      CSD U6 circuit multi led: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2018: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit multi led_2019: |-
        # Wiring Multiple LEDs

        Using the `createLed()` block you can connect and control as many LEDs as your board has room for. Each LED needs to be connected to a separate numbered pin, but they can all share the same ground pin.

        # Do This

        Leave the current LED connected to pin 2, but add another one to a numbered pin of your choice. For your new LED:

        -   Add a `var myLed = createLed()` block.
        -   Replace the variable label `myLed` with a unique label.
        -   Make sure you're in text mode, not block mode.
        -   Add an `led.blink()` command.
        -   Replace the text `led` with your new LED variable.
        -   Test your code.

        _Challenge: Try adding a third LED and make all three LED blink at different intervals._
      CSD U6 circuit pinMode: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit pinMode_2018: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit pinMode_2019: |-
        # Wire a Circuit

        You can use any of the numbered pads to add additional circuits to your board. Let's use pin 2 to add another LED.

        # Do This

        -   Using a wire, connect pin 2 to the positive (+) side of an LED
        -   Using another wire, connect the negative (-) side of the LED to a ground (GND) pin (it doesn't matter which one)
        -   Run this program to test your circuit. If it worked, your LED should turn on.

        _Debugging Tip: LEDs only work if the electricity is flowing from positive to negative. If your LED doesn't light up, make sure that it's oriented the right way._
      CSD U6 circuit predict multi: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit predict multi_2018: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit predict multi_2019: |-
        # Make a Prediction

        All of the devices that you've used so far are actually circuits connected to numbered pins! Look for **#13** on your board to see which circuit is connected to pin 13, then read through this code and predict what will happen when the program is run.
      CSD U6 circuit smart bike blinker buttons: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinker buttons_2018: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinker buttons_2019: |-
        # Smart Bike - Blinker Controls

        With your turn signal LEDs hooked up, you just need to program some buttons to control them. You may want to place buttons elsewhere on the bike to make controlling your turn signals easier, but for now we'll just use the built in left and right buttons.

        # Do This

        -   Add event handlers to blink the left turn signal when the left button is pressed.
        -   Add event handlers to blink the right turn signal when the right button is pressed.
        -   Test your code!

        _Hint: You'll need to be in text mode to make the blinkers work, since there are no built-in blocks for the elements that you add on to the board._
      CSD U6 circuit smart bike blinkers: "# Smart Bike - Blinkers\n\nUsing your planning
        guide, wire up the two LEDs that will serve as the blinkers. In order to make
        sure that the blinkers can be mounted at the end of the handlebars, make sure
        you wire them so that they can stretch out in opposite directions.\n\n# Do
        This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike blinkers_2018: "# Smart Bike - Blinkers\n\nUsing your
        planning guide, wire up the two LEDs that will serve as the blinkers. In order
        to make sure that the blinkers can be mounted at the end of the handlebars,
        make sure you wire them so that they can stretch out in opposite directions.\n\n#
        Do This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike blinkers_2019: "# Smart Bike - Blinkers\n\nUsing your
        planning guide, wire up the two LEDs that will serve as the blinkers. In order
        to make sure that the blinkers can be mounted at the end of the handlebars,
        make sure you wire them so that they can stretch out in opposite directions.\n\n#
        Do This\n\nUsing alligator clips, wire, or other conductive material, connect
        two LEDs to your board, one for each turn signal blinker.\n\n-   Hook up each
        LED to a different numbered pin on the board.\n-   Use the `createLed()` block
        to create an LED object for each blinker.\n\n_Tip: Make your wiring easier
        by considering how your blinkers will be mounted when selecting a pin to use._ "
      CSD U6 circuit smart bike buzzer: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2018: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike buzzer_2019: |-
        # Smart Bike - Buzzer

        Now that we know how to add more buttons, you can add a button to control the smart bike's horn.

        # Do This

        Using the button that you've already wired to the board, find a good spot to place your horn button. Then:

        -   Create a button object for your horn button
        -   Add an event handler to buzz when button is pressed

        _Hint: The button object that you create won't be in the `onBoardEvent()` dropdown, so you'll need to type the name you've chosen in. Make sure not to use quotation marks!_
      CSD U6 circuit smart bike final: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2018: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike final_2019: |-
        # Smart Bike - Final Touches

        At this point your smart bike should have all of its basic functionality in place. Now is your chance to add any finishing touches.

        # Do This

        You may want to divide and conquer at this point, allowing some members of your group to focus on the physical aspects of the prototype while others work on improving the code. As this is a prototype, don't worry about making everything perfect, but do try to ensure that the prototype communicates your design well enough to test and get feedback.
      CSD U6 circuit smart bike light: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 circuit smart bike light_2018: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 circuit smart bike light_2019: |-
        # Smart Bike - Headlight

        The last part of the smart bike plan that we need to figure out is the automatic headlight.

        # Do This

        First you'll need to decide what to use for your headlight. You could add another LED circuit, or perhaps you can find a way to mount the board that allows for using the color LEDs as a headlight. Once you've figured out the physical layout of your lights, add code to your program that turns on and off the headlight based on how light or dark it is.

        _Hint: If you're using the built-in color LEDs, you might need to protect the light sensor to make sure that it's responding to the ambient light level and not the light from the LEDs._
      CSD U6 colorLED on: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2018: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLED on_2019: |-
        <img src="//curriculum.code.org/images/circuitplayground/colorLedonoff.gif" style="float: right; margin: 10px;">

        # colorLeds

        The color LEDs can use the same basic commands that you used with the red LED, such as `on()` and `off()`. This program should turn on and off the bottom LEDs as shown in the picture, but only one LED is working.

        # Do This

        -   Read and run the code to see how the program turns the bottom left LED on and off.
        -   Add more code to make both bottom LEDs turn on and off.
      CSD U6 colorLeds debug: |-
        <img src="https://images.code.org/e055be621221385d3503962bee5aa616-image-1491493475417.44.28.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds debug_2018: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds debug_2019: |-
        <img src="https://images.code.org/723f036c40ef2770426d5d437e69fcde-image-1527268321449.png" style="width:250px; float:right">

        # Debug: colorLeds

        Can you debug the index values so that the rainbow shows up on the board like in the picture?
      CSD U6 colorLeds intensity: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2018: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds intensity_2019: |-
        # Changing Brightness

        The `intensity()` command lets you set an LED's brightness (or _intensity_) from 0 - 100. This program lets you choose three levels of brightness for your rainbow lights, but the medium level doesn't work yet.

        # Do This

        -   Read the program and see how the "Bright" and "Dim" buttons work.
        -   Add code to make the "Medium" button make the rainbow a medium level of brightness (between "Bright" and "Dim"). ([Show me where](#triggercallout=code_triggered))
      CSD U6 colorLeds light pattern: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds light pattern_2018: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds light pattern_2019: |-
        # Light Patterns

        This app already has one light pattern program, which can be activated by clicking a button. Notice that we put this pattern into a function to make the code cleaner and clearer.

        # Do This

        Create a light pattern function of your own - maybe the colors of your favorite holiday, college, sports team, or try to create an image with the lights.

        After you've created your new function, add a button and event handler so that you can switch between the two light patterns.
      CSD U6 colorLeds predict embed: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2018: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 colorLeds predict embed_2019: |-
        # colorLEDs

        This program uses the colorLEDs array, which lets you control the color LEDs in your Circuit Playground.

        What do you think this code will do?  Write your prediction in the box below, then run the code to see what happens.
      CSD U6 create LED app: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app 2: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app 2_2018: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app 2_2019: |-
        # Make Your App - The Code

        Next, you'll need to add the code that makes your app work.

        # Do This

        -   Discuss with your partner what code you will need in your app.  Do you need...
            -   Events?
            -   Variables?
            -   Setters?
            -   Random Numbers?
        -   In Code Mode, add in the code that will make your app work.
      CSD U6 create LED app_2018: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 create LED app_2019: |-
        # Make Your App - The Screen

        Now, you and your partner can make your own app using the LED.  Discuss with your partner what kind of app you want to make.

        # Do This

        -   Discuss with your partner what screen elements you will need in your app.  Do you want...
            -   Buttons?
            -   Images?
            -   Text?
        -   In Design Mode, add the elements, making sure you give each a meaningful ID.
      CSD U6 design motorcycle: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2018: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 design motorcycle_2019: |-
        # Add Your Own Elements

        Now it's time to add some elements of your own. The motorcycle should be able to move up and down right now, but how can you control its speed?

        # Do This

        -   Add a slider in design mode.
            -   Make sure you set the min and max values of the slider in design mode.
        -   Create an event that will trigger when the slider value is changed.
        -   Add code to get the slider value and store it into the `speed` variable when the event is triggered.
      CSD U6 directional LEDs roll: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2018: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional LEDs roll_2019: |-
        # Roll

        This program should display "Left" or "Right" on the screen, depending on which way the board is tilted.

        # Do this

        -   Use the "roll" property of the accelerometer to determine whether the board is tilted to the left or right.
        -   Use a conditional to change the text for the "direction" element to be either "Left" or "Right", depending on the board's orientation.
      CSD U6 directional leds pitch: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 directional leds pitch_2018: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 directional leds pitch_2019: |-
        # Pitch

        This program lights the top LEDs (0 and 9) when you tilt the board forward. If you tilt the board back, the LEDs at the bottom (4 and 5) should light.

        # Do This

        -   Use the board's pitch to make LEDs 4 and 5 light up when you tilt the board back.
        -   Run your code and test it a few times.
      CSD U6 emoji race demo: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emoji race demo_2018: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emoji race demo_2019: |-
        # Emoji Race!

        This is an example of a race game that you'll build by the end of this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get their emoji to the bottom of the screen first wins.

        # Do This

        Turn to a classmate and make a list of the following information.

        -   What components of the board does this program use?
        -   What events is this program responding to?
        -   What functions might you create to make this program work?
      CSD U6 emotion machine 1: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 1_2018: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 1_2019: |-
        # Changing Images

        The first thing you'll need your emotion machine to do is change to the appropriate image when a button is clicked. If you look at the starting code, you'll see that we already added `setProperty("face", "image", "icon://fa-smile-o")` to change to a smiley face when you click happy.

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/uploads/select_image.gif)

        </div>

        Create an event handler for "sad\_button" and make it change to a sad emoji. To do this you'll need to set the "image" property of the image with id "face".

        _Tip: when you click the last dropdown in the `setProperty` block click "Choose..." to go to your media library. From there you can select an icon from our icon library or upload an image of your own._
      CSD U6 emotion machine 2: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 2_2018: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 2_2019: |-
        # Changing Color

        If you look back at the example for this app, you should notice that not only do the emojis change when you click a button, but their color changes as well.

        # Do This

        In each of the event handlers, set the "icon-color" property of "face". Pick a warm color for happy and a cool color for sad.
      CSD U6 emotion machine 3: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 3_2018: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 3_2019: |-
        # Setting Text

        Your happy and sad buttons should be almost completely functional now. The only thing they still need to do is change the text at the bottom of the screen.

        # Do This

        Make each of the event handlers change the text of "feeling" to the appropriate emotion (either "happy" or "sad")
      CSD U6 emotion machine 4: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine 4_2018: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine 4_2019: |-
        # Add Another Emotion

        In the example app you saw earlier, you could set the emotion to happy, sad, or meh. Your app only has happy and sad, can you add a third emotion?

        # Do This

        Using all of the same techniques you used for the happy and sad buttons, create a third emotion button. You could stick with meh, or you could pick an emotion of your own.

        When you're all done, feel free to add more emotions or features before submitting your final version.
      CSD U6 emotion machine example: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 emotion machine example_2018: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 emotion machine example_2019: |-
        # The Emotion Machine

        Check out this Emotion Machine app that you'll be building next. Try clicking on the buttons to see how it works.

        # Do This

        Try out the app, and then with a neighbor discuss:

        -   What events handlers does this app use?
        -   Which elements are being changed with code?
        -   Which properties are being changed when you click a button?
      CSD U6 for loop button array: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2018: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop button array_2019: |-
        # Looping Over Arrays

        One of the most powerful ways to use a for loop is to loop over an array, running code on each item in the array. We can do this by using the for loop counter variable (usually `i`) as the index of your array.

        # Do This

        This program should loop over the array `buttons` and do two things to each button - change the background color to red, and change the height to 50 px.

        -   Add a second `setProperty` block inside the loop
        -   Change the target to `buttons[i]`
        -   Set the "height" property to 50

        ![expandable](https://images.code.org/df3d514bae5c23de9e0fbdf1d7798432-image-1512431649584.png)
      CSD U6 for loop click exit: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click exit_2018: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click exit_2019: |-
        # Knowing When to Stop

        If you clicked the button too many times in the last level, you got an error. Whenever you're writing code that repeats, you should think about when to _stop_ repeating.

        # Do This

        This program is similar to the previous one, but there is a conditional inside the event handler. You'll need to complete the conditional so that we don't try to toggle an LED that doesn't exist.

        _Would your code work without changes for a board with more or fewer LEDs? If not, could you modify it so it would?_
      CSD U6 for loop click predict question: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop click predict question_2018: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop click predict question_2019: |-
        # Make a Prediction

        Read through the code for this program and predict what will happen each time the button is clicked?
      CSD U6 for loop images: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop images_2018: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop images_2019: |-
        # Constructing a for loop from scratch

        Now that you've had some practice modifying for loops to process arrays, let's see if you can do it yourself.

        # Do This

        We've provided the design elements and an array to start with, but the rest is on you.

        -   Add an event handler to respond to the "thumbsup\_button" being clicked
        -   Place a _for loop_ inside the event handler
        -   Modify the exit condition of the _for loop_ so that it will run until it gets to the end of the array `images`
        -   Inside your _for loop_ change the current image to "icon://fa-thumbs-o-up"

        _Challenge: Can you add a second button that turns all of the images back to thumbs down?_
      CSD U6 for loop led bonus 1_2018: |-
        # Challenge: Add More Buttons

        Extend the program by adding more buttons that change the board to different colors.

        # Do This

        Add your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.
      CSD U6 for loop led bonus 2_2018: |-
        # Challenge: Color Patterns

        Extend the program by adding more buttons that create different patterns of light.

        # Do This

        Add your new buttons in Design Mode and create event handlers to respond to your buttons and change the LED colors.

        _Hint: As you design your patterns, consider whether a function with parameters could help simplify your program._
      CSD U6 for loop led bonus 3_2018: |-
        # Challenge: Music

        Use what you learned in the Making Music lesson to make the board play music when the lights change.

        # Do This

        Create some arrays of notes for different songs and add code to your event handlers to play your music.
      CSD U6 for loop led color_2019: |-
        # Add Some Color

        Now that you can turn the LEDs on and off, it's time to add some color.

        # Do This

        Add event handlers to "button\_red" and "button\_green" that turns all the LEDs those colors.
      CSD U6 for loop led function: |-
        # Switching Colors with a Function

        We could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.

        # Do This

        Create a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs

        -   At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter name from `n` to `color`
        -   Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`
        -   Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`

        We'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor("blue")`
      CSD U6 for loop led function call: |-
        # Calling Your Function

        Now that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.

        # Do This

        We'll start simple by just creating an event handler for "button\_red"

        -   Create a new event handler to respond to "button\_red"
        -   Inside your event handler, add a "call function with parameter" block
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter from `n` to "red" (note the quotation marks!)
        -   Test your program, the "Red" button should turn all of your LEDs red
      CSD U6 for loop led function call_2018: |-
        # Calling Your Function

        Now that you've created a function that can behave differently based on the parameter it is passed, we can use it in multiple different event handlers to change the lights to different colors.

        # Do This

        We'll start simple by just creating an event handler for "button\_red"

        -   Create a new event handler to respond to "button\_red"
        -   Inside your event handler, add a "call function with parameter" block
            ![expandable](https://images.code.org/ee8e026b59682066eccfc4795b5c5036-image-1512771755527.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter from `n` to "red" (note the quotation marks!)
        -   Test your program, the "Red" button should turn all of your LEDs red
      CSD U6 for loop led function finish: |-
        # Finish the App

        If your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.

        # Do This

        For each of the remaining buttons (green, blue, and white):

        -   Create a new event handler
        -   Call your `setLedsColor` function with the appropriate color ("green", "blue", or "white")
        -   Test your program to make sure all of the buttons work

        When you've got all of your buttons working properly, click "Submit" to turn your program in.
      CSD U6 for loop led function finish_2018: |-
        # Finish the App

        If your red button worked, the only thing left is to call your new function when all of the remaining buttons is pressed.

        # Do This

        For each of the remaining buttons (green, blue, and white):

        -   Create a new event handler
        -   Call your `setLedsColor` function with the appropriate color ("green", "blue", or "white")
        -   Test your program to make sure all of the buttons work

        When you've got all of your buttons working properly, click "Submit" to turn your program in.
      CSD U6 for loop led function_2018: |-
        # Switching Colors with a Function

        We could write a for loop for each different color that we want to set LEDs to, but that would be a lot of duplicate code that's _almost_ the same. This is the perfect place to use a _function with a parameter_! You've seen and used functions with parameters before, but now you're going to make one from scratch.

        # Do This

        Create a function called `setLedsColor` that takes a parameter `color` and uses it to change the color of all of the LEDs

        -   At the bottom of your program, drag out a function with parameter block ![expandable](https://images.code.org/bd6ec3d9a651cf760a7dc8e1949658c0-image-1512761901850.png)
        -   Change the name from `myFunction` to `setLedsColor`
        -   Change the parameter name from `n` to `color`
        -   Inside your function, add a _for loop_ that repeats until it reaches the end of `colorLeds`
        -   Inside your _for loop_, set the color of the current led to the parameter `color` (eg. `colorLeds[i].color(color)`

        We'll add event handlers that use this function in the next level, but for now you can test your function by your program and typing this into the debug console: `setLedsColor("blue")`
      CSD U6 for loop led off: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2018: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led off_2019: |-
        # Turning all the Color LEDs Off

        Now that you've got one button to turn the color LEDs on, you can make another turn them off.

        # Do This

        Add an event handler to "button\_off" with a for loop that turns each color LED off.
      CSD U6 for loop led on: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        We're going to start an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2018: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        Over the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led on_2019: |-
        # Turning all the Color LEDs On

        Now that you know how to use a _for loop_ to process all of the elements in an array, you can turn on all of the Color LEDs much more easily than before.

        # Do This

        Over the next few levels, you'll create an app that will control all of the Color LEDs on your board. The first step is to wire up the button that turns all of the LEDs on.  (Don't worry about the rest of the comments in the workspace.  You'll work on those in later levels.)

        -   Add an event handler for "button\_on"
        -   Place a _for loop_ in your event handler that repeats until it reaches in the end of the array `colorLeds`
        -   Inside the for loop, call `colorLeds[i].on()` to turn on the current color LED
      CSD U6 for loop led personalize_2019: |-
        # Make it Your Own

        Think of a new button that you would like in this project.  Don't forget about the other LED options, such as pulse and blink.

        # Do This

        Add a new button to the project, and program it with a behavior of your choice.
      CSD U6 for loop list.length: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2018: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 for loop list.length_2019: |-
        # Array Length

        In the last program we told the loop to run three times with the code `for (var i = 0; i < 3; i++)`. This works, but we could write smarter programs by using the length of the array to decide how many times to loop.

        # Do This

        Change the exit condition of this for loop so that it runs while `i < buttons.length`.
      CSD U6 frequency: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 frequency_2018: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 frequency_2019: |-
        # Frequency

        This buzzer controller has been expanded to control frequency as well, but the code isn't finished yet.

        # Do This

        -   Using the `duration` variable as a model, create a `frequency` variable that gets the value from the _frequency_ slider.
        -   Modify the line of code that makes the buzzer sound so that it uses the `frequency` variable rather than the default frequency of `500`.
        -   Run your code, then change the frequency and the duration to hear the difference in the buzzer.  (Don't forget to hit the button after you make a change!)
      CSD U6 functions paramters video_2019: |-
        ## Questions to Consider

        -   How do parameters make functions more useful?
        -   How do you know when you can combine multiple functions into one?
      CSD U6 game project board events: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2018: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project board events_2019: |-
        # Board Events

        Go back to the Events section of your activity guide and find any events that respond to your board (ones that would use `onBoardEvent()`). Create event handlers for each of those now. If these events rely on functions you haven't written yet, just leave yourself a comment in the code.
      CSD U6 game project finish: "# Menyelesaikan Sentuhan dan Pengujian\\\r\n\n\\\r\nDi\nPoin
        ini anda harus memiliki sebagian besar program di tempat Anda. Sekarang anda
        perlu untuk\nMenambahkan dengan menyelesaikan sentuhan yang diperlukan dan
        melakukan pengujian. Ketika aplikasi Anda siap, mintalah teman-teman sekelas
        anda untuk mencobanya. Lihat jika anda dapat menemukan bug,\npilihan desain
        membingungkan, atau hilang fitur yang anda ingin bekerja.\\\r\n\\\r\nSetelah
        Anda selesai dengan semua versi ini dari program anda, klik Submit untuk mengaktifkannya."
      CSD U6 game project finish_2018: "# Menyelesaikan Sentuhan dan Pengujian\\\r\n\n\\\r\nDi\nPoin
        ini anda harus memiliki sebagian besar program di tempat Anda. Sekarang anda
        perlu untuk\nMenambahkan dengan menyelesaikan sentuhan yang diperlukan dan
        melakukan pengujian. Ketika aplikasi Anda siap, mintalah teman-teman sekelas
        anda untuk mencobanya. Lihat jika anda dapat menemukan bug,\npilihan desain
        membingungkan, atau hilang fitur yang anda ingin bekerja.\\\r\n\\\r\nSetelah
        Anda selesai dengan semua versi ini dari program anda, klik Submit untuk mengaktifkannya."
      CSD U6 game project finish_2019: "# Menyelesaikan Sentuhan dan Pengujian\\\r\n\n\\\r\nDi\nPoin
        ini anda harus memiliki sebagian besar program di tempat Anda. Sekarang anda
        perlu untuk\nMenambahkan dengan menyelesaikan sentuhan yang diperlukan dan
        melakukan pengujian. Ketika aplikasi Anda siap, mintalah teman-teman sekelas
        anda untuk mencobanya. Lihat jika anda dapat menemukan bug,\npilihan desain
        membingungkan, atau hilang fitur yang anda ingin bekerja.\\\r\n\\\r\nSetelah
        Anda selesai dengan semua versi ini dari program anda, klik Submit untuk mengaktifkannya."
      CSD U6 game project functions call: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions call_2018: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions call_2019: |-
        # Calling your Functions

        With your functions defined, you can can call them wherever you need. Go through your event handlers, or anywhere else in your program that your function should be used, and add calls to the function you created.
      CSD U6 game project functions define: "# Define Your Functions\n\nDefine all
        of your functions at the bottom of the program, under the comment `// Create
        your functions here`.\n\nRight now we're only worrying about writing the function
        _definitions_, the part which looks like:\n\n    function myFunction() {\n
        \   \t// Things my function does\n    }"
      CSD U6 game project functions define_2018: "# Define Your Functions\n\nDefine
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\n\nRight now we're only worrying about writing
        the function _definitions_, the part which looks like:\n\n    function myFunction()
        {\n    \t// Things my function does\n    }"
      CSD U6 game project functions define_2019: "# Define Your Functions\n\nDefine
        all of your functions at the bottom of the program, under the comment `//
        Create your functions here`.\n\nRight now we're only worrying about writing
        the function _definitions_, the part which looks like:\n\n    function myFunction()
        {\n    \t// Things my function does\n    }"
      CSD U6 game project screen links: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2018: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screen links_2019: |-
        # UI Element Events

        Now that all of your screens are designed, you can add any event handlers that will respond to _screen interaction_. These should be listed in the "Events" section of your activity guide. If you run into new events that you hadn't thought of in the planning stage, make sure you add them to your project guide.

        Don't worry about making these completely functional yet. If your events rely on board elements or your own functions, we'll take care of that in later levels.
      CSD U6 game project screens: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 game project screens_2018: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 game project screens_2019: |-
        # Create Your Screens

        The first thing you'll need to do is create all of the screens that you've sketched in your planning guide.

        # Do This

        Use Design Mode to create all of the screens that your program will need. Don't forget to **pick sensible IDs** for all of your design elements.
      CSD U6 get toggle: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the duration slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 get toggle_2018: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the frequency slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 get toggle_2019: |-
        # change

        This program has events that detect three different changes: the toggle switch, the interval slider, and the frequency slider.  Because there are so many different things that cause the LED and buzzer to reset, it uses functions to organize the code.

        # Do This

        -   Read the `updateLED` function to see what it does.
        -   Add code to `updateBuzzer` to make the buzzer only turn on when the toggle switch is open.
      CSD U6 getProperty Demo: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2018: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty Demo_2019: |-
        # Updating Properties

        Here's an example of an app that uses both `getProperty` and `setProperty` to update elements on the screen. Read through the code, and then test it out by filling out the input fields and clicking "Save"

        _Note: you don't need to change any code here, but read through the provided code to see how it works._
      CSD U6 getProperty board predict: Predict Level (See contained level for markdown)
      CSD U6 getProperty board predict_2018: Predict Level (See contained level for
        markdown)
      CSD U6 getProperty board predict_2019: Predict Level (See contained level for
        markdown)
      CSD U6 getProperty buzzer: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty buzzer_2018: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty buzzer_2019: |-
        # Using the Circuit Playground

        Here's the same code you saw in the last level, but this time there's another dropdown menu to control the buzzer.  You'll have to add the code to make it work.

        # Do This

        -   Using the LED code as a model, add new code inside the buttonL event that will play a long or short buzz according to the chosen value property of the *buzzer\_input* dropdown menu.
        -   Add new code that will turn the buzzer off when the right button is pressed.
            -   (Hint: the event is already in the code.)
      CSD U6 getProperty dropdown: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty dropdown_2018: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty dropdown_2019: |-
        # Dropdowns

        Text Inputs are nice when you want users to be able to enter _anything_ they want, but often you want to restrict them to just a few choices. For example, if you want your user to pick a color, you probably want to make sure they can only choose colors that will actually work.

        The provided dropdown with the ID "color\_input" allows a user to choose from a handful of background colors. When the "Set Color" button is clicked, the screen will turn that color.

        # Do This

        -   Inside the event block, create a variable called `color` and assign it a value using the `getProperty` block.
            -   Hint: You'll need to use the "value" property to get the user's choice.
        -   Use the `setProperty` block to set the "background-color" property of "screen1" to your variable `color`.
            -   Hint: Make sure you type `color` without quotation marks.
        -   Test your program by picking a color and clicking "Set Color".
      CSD U6 getProperty input: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2018: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getProperty input_2019: |-
        # getProperty and Variables

        This program uses the `name` variable to display the name typed into "name\_input" when the Submit button is clicked. It should do the same for *friend\_input* and *friend\_output*, but it's missing a block.

        # Do This

        -   Read the code and comments, then run the program to see how it works. (Make sure you type in your name and your friend's name before hitting "Submit".)
        -   Use a `getProperty` block to store the text property of *friend\_input* into your the variable "friend\_name". ([Show me where.](#triggercallout=code_triggered))
      CSD U6 getters debug: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2018: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 getters debug_2019: |-
        # LED and Buzzer Controller

        This program operates the LED and the buzzer, but it has some problems.

        # Do This

        -   Read the program to understand how it is supposed to work.
        -   Find and correct the bugs so that the program works properly.
      CSD U6 goalie: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 goalie_2018: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 goalie_2019: |-
        # Updating Values with Data

        In this program the goalie is trying to block the soccer ball, but right now the ball isn't moving.

        # Do This

        -   Use the counter pattern to update the ball's `x` value so that it moves across the screen.
      CSD U6 hardware software video_2019: |-
        ## Questions to Consider

        -   What's the difference between hardware and software?
        -   What does the operating system of a computer do?
      CSD U6 interval: Predict Level
      CSD U6 interval predict: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval predict_2018: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval predict_2019: |-
        # Interval

        Now we're using the slider to affect the behavior of the LED.   Just as we could change the values for the frequency and duration of the buzzer, we can change the value for the blink or pulse interval of the LED.

        # Do This

        -   Read the code and predict what the program will do, then hit "Run" to test your prediction.
      CSD U6 interval_2018: Predict Level
      CSD U6 interval_2019: Predict Level
      CSD U6 investigate orientation: "# Pitch and Roll\n\nThis program displays the
        board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 investigate orientation_2018: "# Pitch and Roll\n\nThis program displays
        the board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 investigate orientation_2019: "# Pitch and Roll\n\nThis program displays
        the board's pitch and roll, and it will also change colors depending on their
        values.  \n\n# Do This\n\nMake the program change the following colors by
        tilting the board to the correct pitch and roll.\n\n<div style=\"display:inline-block;
        background-color: skyblue; height: 30px; width:30px\">&nbsp;</div> Pitch:
        0 | Roll: -20\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        burlywood; height: 30px; width:30px\">&nbsp;</div> Pitch: 30 | Roll: 0\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: mistyrose; height: 30px; width:30px\">&nbsp;</div>
        Pitch: -15 | Roll: 10\n\n<p/>\n\n<div style=\"display:inline-block; background-color:
        yellowgreen; height: 30px; width:30px\">&nbsp;</div> Pitch: 5 | Roll: -25\n\n<p/>\n\n<div
        style=\"display:inline-block; background-color: thistle; height: 30px; width:30px\">&nbsp;</div>
        Pitch: 10 | Roll: 30\n\n<p/>\n\nWhich way should you tilt to get a positive
        pitch?\n\nWhich way should you tilt to get a negative roll?"
      CSD U6 iter create notes: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2018: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter create notes_2019: |-
        # Music Player

        This program lets you play music by waving a wand over the different notes, but it's missing a function definition.

        # Do This

        -   Create a `checkNotes()` function that will call `checkNote(note)` on everything in the "notes" array.
      CSD U6 iter modify bugs: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter modify bugs_2018: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter modify bugs_2019: |-
        # Bug Shaker

        This program shakes bugs around when the board is shaken, but it's only working for one bug.

        # Do This

        -   Change the `moveBugs()` function so that it calls `moveBug(color)` on every bug color.
            -   (Hint: Look at the `detectHits()` function for clues how to do this.)
      CSD U6 iter predict bubbles: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 iter predict bubbles contained: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2018: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles contained_2019: |-
        # Fish Bubbles

        This program uses the sound sensor in the same way as the clouds program.  How many bubbles will move when you blow on the board?
      CSD U6 iter predict bubbles_2018: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 iter predict bubbles_2019: "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
      CSD U6 light pattern challenge_2018: |-
        # Challenge: More Patterns

        Add some more patterns to your app. Find a partner and add their pattern as an option. Make sure to put each pattern into its own function.
      CSD U6 light pattern challenge_2019: |-
        # Challenge: More Patterns

        Add some more patterns to your app. Find a partner and add their pattern as an option. Make sure to put each pattern into its own function.
      CSD U6 light pattern off: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light pattern off_2018: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light pattern off_2019: |-
        # Turning It Off

        When you start this app your lights are off, but as soon as you choose a pattern, there's no way to turn the lights back off!

        # Do This

        Create a function that turns all of the LEDs off, and then add a "Off" button to your app and make it turn off all of the color LEDs.
      CSD U6 light show predict: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2018: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 light show predict_2019: |-
        # Put on a Light Show

        This app lets you put on a light show with the LED.

        Look at the code with your partner and answer the following questions:

        -   What does this line of code do: `setProperty("screen", "background-color", rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));`?

        Once you have answered the question, run the code and click the buttons to see what happens.
      CSD U6 move motorcycle: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2018: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 move motorcycle_2019: |-
        # Movement with Properties

        Earlier we used `setProperty` to change the x and y position of elements on the screen, but we could only move them to either a single specific location, or a random location. By using `getProperty` to find out an element's current position, we can use the **counter pattern** from Unit 3 to update that position.

        # Do This

        -   Read the program and discuss with your partner how the left button makes the motorcycle go up.
        -   Using the working left button as an example, program the right button to make the motorcycle go down.
      CSD U6 params create colors: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params create colors_2018: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params create colors_2019: |-
        # Color Picker

        In this program, pressing the buttons at the bottom of the screen changes the color of the images and the color LEDs.

        # Do This

        -   Create a function `chooseColor(color)` that changes each of the images and the color LEDs to the given color.
        -   Call your function in the event blocks so that all the buttons work.
      CSD U6 params modify clouds_2019: |-
        # Clouds

        This program makes the clouds move when you blow on the sound sensor, but it's not finished.

        # Do This

        -   Create a new function `moveCloud(name)` that will move any cloud.
            -   (Hint: you will use almost all the same code as the `moveCloud0` function)
        -   Call your new `moveCloud(name)` function inside the event block, once for each cloud name.
            -   (Hint: this is similar to how the `loopCloud(name)` function is called many times.)
      CSD U6 params predict contained: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params predict contained_2018: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params predict contained_2019: |-
        # Bug Crawl

        Look at the program below, paying special attention to the function `crawl(bug)`.  What happens if you press the left or right button?
      CSD U6 params starchaser 1: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 1_2018: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 1_2019: |-
        # Make your `loopStar(color)` function

        Right now only the red star works, so you'll need to change this code.

        # Do This

        -   Use the code from the `loopRedStar()` function to create a `loopStar(color)` function that will work with any star.
        -   Test your function by calling `loopStar("red")` and `loopStar("blue")` inside the `loopStars()` function.
      CSD U6 params starchaser 2: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 2_2018: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 2_2019: |-
        # Star Chaser

        Now you'll need to make all the stars loop around the screen.

        # Do This

        -   Use a `for` loop inside your `loopStars()` function to make every star in "starArray" loop around the screen.
      CSD U6 params starchaser 3: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 3_2018: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 3_2019: |-
        # Star Chaser

        All the stars loop, but you can still only catch the red star.

        # Do This

        -   Use code from the `moveRedStar()` function to make a `moveStar(color)` function that can move any star.
        -   Use code from the `checkRedStar()` function to make a `checkStar(color)` function that works for any star.
        -   Test your code by calling `checkStar("red")` and `checkStar("blue")` inside your event block.
      CSD U6 params starchaser 4: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2018: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 4_2019: |-
        # Star Chaser

        Now make it work for all the stars

        # Do This

        -   Create a `checkStars()` functions that uses a `for` loop to check every star in the star array.
        -   Test your code by calling the `checkStars()` function inside the event block.
      CSD U6 params starchaser 5: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser 5_2018: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser 5_2019: |-
        # Star Chaser

        Now you can add extra stars, and your functions will work with them, too.

        # Do This

        -   In design mode, copy one of the stars, and change its name and color to "yellow".
        -   Add a new element, "yellow", to your star array.
        -   Test the game with your new star.
      CSD U6 params starchaser challenge 1_2018: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Start the user with 5 "lives", and take one away every time the user touches the **wrong** star.
        -   Make an end screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 1_2019: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Start the user with 5 "lives", and take one away every time the user touches the **wrong** star.
        -   Make an end screen, and change to that screen when the user runs out of lives.
      CSD U6 params starchaser challenge 2_2018: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Make the player go back to the middle of the screen when the left button is pressed.
      CSD U6 params starchaser challenge 2_2019: |-
        # Star Chaser

        Now that you have a working game, you can challenge yourself with some different features.

        # Do This

        -   Make the player go back to the middle of the screen when the left button is pressed.
      CSD U6 params starchaser intro: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 params starchaser intro_2018: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 params starchaser intro_2019: |-
        # Star Chaser

        In this game, the user tries to catch the stars according to the color of the LEDs.

        # Do This

        -   Play the game, and discuss the following with a partner:
            -   What functions might this program need?
            -   What parameters should these functions have?
      CSD U6 predict LED button: Embedded Prediction
      CSD U6 predict LED button_2018: Embedded Prediction
      CSD U6 predict LED button_2019: Embedded Prediction
      CSD U6 random array notes: "# Random Song Generator\n\nYou're going to make
        a random song generator. When you press a button, a random note should play.
        Press it enough times, and you have yourself a beautiful arrangement of bleeps
        and bloops. \n\nYou used `randomNumber()` to select an element from an array
        in the previous lesson, so this should be familiar.\n\n# Do This\n\n-   Add
        code to randomly select a note from the `notes` array and play it.\n-   Run
        the program and press the left button to hear your buzzer sing its beautiful
        tune."
      CSD U6 random array notes_2018: "# Random Song Generator\n\nYou're going to
        make a random song generator. When you press a button, a random note should
        play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from
        an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n-
        \  Add code to randomly select a note from the `notes` array and play it.\n-
        \  Run the program and press the left button to hear your buzzer sing its
        beautiful tune."
      CSD U6 random array notes_2019: "# Random Song Generator\n\nYou're going to
        make a random song generator. When you press a button, a random note should
        play. Press it enough times, and you have yourself a beautiful arrangement
        of bleeps and bloops. \n\nYou used `randomNumber()` to select an element from
        an array in the previous lesson, so this should be familiar.\n\n# Do This\n\n-
        \  Add code to randomly select a note from the `notes` array and play it.\n-
        \  Run the program and press the left button to hear your buzzer sing its
        beautiful tune."
      CSD U6 sensor experiment embedded: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 sensor experiment embedded_2018: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 sensor experiment embedded_2019: |-
        # Sensor Experiment

        Run the program to the right and experiment with your board. Try interacting with your board in many different ways to figure out what each sensor might be. As you experiment with each sensor, discuss with a neighbor:

        -   What does this sensor measure?
        -   What is its maximum value?
        -   What is its minimum value?
      CSD U6 setProperty Text: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty Text_2018: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty Text_2019: |-
        # Changing the Text

        The `setProperty` block can be used to change lots of things about your design elements, including the text they contain.

        # Do This

        -   Drag out a `setProperty` block
        -   For the first parameter, select "name" (the element's id)
        -   For the second parameter, select "text" (the property you want to set)
        -   For the third parameter, write your name in quotes (the value to set)

        _Note: We've removed the Design Mode tab for now so you can practice working with `setProperty`, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty hidden: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden 2: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Add a second `onEvent` block to watch for the "stopAlarmButton" to be clicked. Inside that block:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2018: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Add a second `onEvent` block to watch for the "stopAlarmButton" to be clicked. Inside that block:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden 2_2019: |-
        # Showing/Hiding

        This alarm app isn't super useful if you can't turn the alarm off once it's been triggered. Let's fix that.

        # Do This

        Create a second event to watch for the "stopAlarmButton" to be clicked. When that event is triggered:

        -   Change the status text to "OFF"
        -   Hide the "stopAlarmButton"

        _Hint: "hidden" is a boolean property. If we used `false` to make the button show up, what should you use to make it hidden again?_
      CSD U6 setProperty hidden_2018: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty hidden_2019: |-
        # Hidden

        Design elements have a property called "hidden" that controls whether the element should show on screen or not. We are going to use this property to create an alarm app. Notice that when the program starts one button is hidden, and one is not.

        We have already set up an event handler for the "triggerAlarmButton" which will do two things when clicked:

        -   Change the "text" property of "statusLabel" to "on"
        -   Set the "hidden" property of "stopAlarmButton" to `false` (meaning it should _not_ be hidden)

        # Do This

        -   Run the program and click "Trigger Alarm" to see how it works
        -   Add code to the provided event handler that hides the "triggerAlarmButton"

        _Note: the button "stopAlarmButton" is already on the screen, but because its "hidden" property is marked true, it isn't shown when the program starts._
      CSD U6 setProperty xy: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy click: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy click_2018: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy click_2019: |-
        # Changing With a Click

        It's not really useful to only set a property when your program is first run. After all, you could just do all of that in Design Mode. When you use an `onEvent` block with `setProperty`, you're able to do things you couldn't do with Design Mode alone.

        # Do This

        We've provided an empty `onEvent` block that's watching the "smiley" image. Inside the `onEvent` block, use two `setProperty` blocks to move the smiley somewhere else (it doesn't really matter where for now). Test your program by running it and clicking on the smiley.
      CSD U6 setProperty xy random: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2018: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy random_2019: |-
        <img src="https://images.code.org/67c6cc358b235e2c2ae39f3f72a3e0b1-image-1507326303839.gif" style="float:right; max-width: 150px; margin: 10px;">

        # Randomization

        Moving on the first click is fine, but this smiley would be even cooler if it moved somewhere new _every time_ we clicked. Fortunately, we can use the `randomNumber` block to do just that.

        # Do This

        Instead of setting the "x" and "y" properties to a specific number, use the `randomNumber` block to pick a new random "x" and "y" each time the smiley is clicked.

        _Tip: The App Lab screen is 320 pixels wide by 450 pixels tall. What range of random numbers will ensure that the smiley is always visible on screen?_
      CSD U6 setProperty xy_2018: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 setProperty xy_2019: |-
        # Changing Position

        Every design element (except for the screen) has an "x" and a "y" property that controls its position.

        # Do This

        <div markdown="1" style="float:right">

        ![expandable](https://images.code.org/3a67642609071cf6766c296b8ca5a68e-image-1526944857178.png)

        </div>

        Using the `setProperty` block, move "red\_button" so that it matches the image to the right. (Click on the image to see the full size.)

        _Note: We've removed the Design Mode tab for now so you can practice working with setProperty, but it'll come back later once you're building apps of your own._
      CSD U6 slider intro: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2018: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 slider intro_2019: |-
        # Sliders

        Last time, your users were only able to choose between a short and long buzz.  To give the user control over the exact duration of the buzzer, you'll want to use a slider.

        This slider lets users choose a value between 100 and 1000 for the duration of the buzz, but there's something not quite right about how it's working.

        # Do This

        -   Look over the code and find the bug that's keeping the duration from being set correctly.
            -   (Hint: Hover over the yellow triangles for clues as to what might be wrong with the code.)
      CSD U6 stillness game predict code: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 stillness game predict code_2018: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 stillness game predict code_2019: |-
        # Change with the Accelerometer

        This program uses the change event to increase a movement meter every time the board moves. When the movement meter reaches 100, the alarm will sound.

        # Do This

        This program has two bugs that you need to fix:

        -   The movement meter is being triggered by a button press, instead of the accelerometer's `change` event.
        -   The programmer forgot how to use the counter pattern to increase the movement variable.

        Once you have found the bugs, run the program and try to pass the board to your partner without setting off the alarm.
      CSD U6 test LED: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 test LED_2018: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 test LED_2019: |-
        # Control the LED

        Now that you know your board is working, you can try out the different LED blocks.

        # Do This

        -   Click "Run" and discuss with your partner how the code works.
        -   Try the different LED blocks to see what they do.
            -   Hint: Don't forget to hit "Reset" and run your code again after you change it
      CSD U6 tugowar buzzer: "# Winning Buzzer\n\nThat last thing that that is missing
        from your project guide's description of this project is the buzzer. It should
        buzz a high tone if player 1 wins and a low tone if player 2 wins. \n\n# Do
        This\n\nSo far we've been able to just use the `player` parameter directly
        to report which player won, but that won't work for buzzing different sounds.
        Inside the conditional that checks if a player won, you'll need to add _another_
        conditional that checks which player it was. If `player == \"red\"` the buzzer
        should play a high note, otherwise (else) it should play a low note."
      CSD U6 tugowar buzzer_2018: "# Winning Buzzer\n\nThat last thing that that is
        missing from your project guide's description of this project is the buzzer.
        It should buzz a high tone if player 1 wins and a low tone if player 2 wins.
        \n\n# Do This\n\nSo far we've been able to just use the `player` parameter
        directly to report which player won, but that won't work for buzzing different
        sounds. Inside the conditional that checks if a player won, you'll need to
        add _another_ conditional that checks which player it was. If `player == \"red\"`
        the buzzer should play a high note, otherwise (else) it should play a low
        note."
      CSD U6 tugowar buzzer_2019: "# Winning Buzzer\n\nThat last thing that that is
        missing from your project guide's description of this project is the buzzer.
        It should buzz a high tone if player 1 wins and a low tone if player 2 wins.
        \n\n# Do This\n\nSo far we've been able to just use the `player` parameter
        directly to report which player won, but that won't work for buzzing different
        sounds. Inside the conditional that checks if a player won, you'll need to
        add _another_ conditional that checks which player it was. If `player == \"red\"`
        the buzzer should play a high note, otherwise (else) it should play a low
        note."
      CSD U6 tugowar conditional: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar conditional_2018: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar conditional_2019: |-
        # Check for a Winner

        Your game should be pretty playable by now. Two players can click their respective buttons, and their emojies will race down the screen. We still need a way for a player to win though.

        # Do This

        Using a conditional inside the `checkWin()` function, you want to check if a player has won each time they click. For now, we can just use `console.log` to report the winner.

        -   Add an if statement to the bottom of `checkWin()`
        -   For the condition of your if statement, check if `player_y` is greater than 350 (or use the bottom of screen value you decided on in the last level)
        -   In your conditional, add a `console.log` that reports which player won
        -   Test your program to make sure that it reports a winner when one of the emojis makes it to the bottom of the screen
      CSD U6 tugowar demo: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar demo_2018: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar demo_2019: |-
        # Grab that Bug!

        This is an example of a tug o' war game that could be built in this lesson. To play, pair up with another student. The student on the left will the click the left button on the Circuit Playground as fast as they can, while the student on the right clicks the right button. Whoever can get the bug over to their side first wins.
      CSD U6 tugowar design 1: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5_2018: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1.5_2019: |-
        # Game Screen Design

        We've also added a "game" screen where the game will be played. It just needs a couple of tweaks.

        # Do This

        Switch to the "game" screen and, using your planning guide, fix this screen by changing the color of the two emoji images.

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1_2018: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 1_2019: |-
        # Getting Started: Screen Design

        You should have already reviewed the planning guide for this project. Some of the work to turn this project guide into a working program has already been started. Based on the project guide you're going to do the rest of this work.

        # Do This

        We've already created a "start" screen and included a title and "play" button. Using your planning guide, finish creating this screen. Specifically you'll want to:

        -   Update the title text to say "Emoji Race"
        -   Add instructions for playing using the ID "instructions"

        Feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2_2018: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar design 2_2019: |-
        # Designing the Win Screen

        The final screen in this program shows who won. It's totally blank right now.

        # Do This

        Switch to "win" and design it based on your project guide. Make sure to pay close attention to the ID of each element. Once you've added the required elements, feel free to add any other design tweaks that you'd like.
      CSD U6 tugowar final: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2018: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar final_2019: |-
        # Make It Your Own

        You just walked through someone else's plan for creating a program, so now it's time to make it your own. What additional features or challenges do you want to create?

        # Do This

        Select one of the challenges below to add to the game or come up with a challenge of your own.

        -   Change the look and layout of the screens
        -   Use the buzzer or the led to show when one of the buttons has been clicked
        -   Set the "icon-color" property of "winner\_image" to the winning color
        -   Make the emojis start out sad, change to meh halfway, and end up happy
        -   Use a variable and conditionals to make sure that players can only move their emojis when the "game" screen is showing
      CSD U6 tugowar setProperty: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before each call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setProperty_2018: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before the call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setProperty_2019: |-
        # Display the Winner

        The winning screen doesn't actually know _who_ won the game. Let's fix that now.

        # Do This

        Before the call to `setScreen`, add a `setProperty` block to change the "text" property of "winner" to display the actual winner.
      CSD U6 tugowar setScreen: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar setScreen_2018: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar setScreen_2019: |-
        # Change to the Win Screen

        Now that we have conditionals to check which player won, let's switch to the "win" screen when a player wins.

        # Do This

        Inside the conditional that you've created to check if a player has reached the bottom, add a `setScreen` block to change to the "win" screen. Make sure you test that your new code works before moving on!
      CSD U6 tugowar variables 1: "# The startGame() Function\n\nIf you look at the
        events we planned for in the planning guide, you may notice that two events
        do essentially the same thing. The events that respond to both the \"play\"
        and \"replay\" buttons could be written with identical code, but duplicate
        code like this is a perfect place to use a **function**.\n\n# Do This\n\nWe've
        already added blocks that call a new function named `startGame()` to the appropriate
        event handlers, and we've created an empty function for you to build out.
        \n\n-   Find the `startGame()` function definition ( [Show me where](#triggercallout=block_trigger)
        )\n-   Inside the function:\n    -   Move both of the emoji images to the
        top of the screen by setting each one's \"y\" property to 0\n    -   Change
        the screen to \"game\"\n\nOnce you've fleshed out the `startGame()` function,
        try clicking the \"play\" button to check that it's working."
      CSD U6 tugowar variables 1_2018: "# The startGame() Function\n\nIf you look
        at the events we planned for in the planning guide, you may notice that two
        events do essentially the same thing. The events that respond to both the
        \"play\" and \"replay\" buttons could be written with identical code, but
        duplicate code like this is a perfect place to use a **function**.\n\n# Do
        This\n\nWe've already added blocks that call a new function named `startGame()`
        to the appropriate event handlers, and we've created an empty function for
        you to build out. \n\n-   Find the `startGame()` function definition ( [Show
        me where](#triggercallout=block_trigger) )\n-   Inside the function:\n    -
        \  Move both of the emoji images to the top of the screen by setting each
        one's \"y\" property to 0\n    -   Change the screen to \"game\"\n\nOnce you've
        fleshed out the `startGame()` function, try clicking the \"play\" button to
        check that it's working."
      CSD U6 tugowar variables 1_2019: "# The startGame() Function\n\nIf you look
        at the events we planned for in the planning guide, you may notice that two
        events do essentially the same thing. The events that respond to both the
        \"play\" and \"replay\" buttons could be written with identical code, but
        duplicate code like this is a perfect place to use a **function**.\n\n# Do
        This\n\nWe've already added blocks that call a new function named `startGame()`
        to the appropriate event handlers, and we've created an empty function for
        you to build out. \n\n-   Find the `startGame()` function definition ( [Show
        me where](#triggercallout=block_trigger) )\n-   Inside the function:\n    -
        \  Move both of the emoji images to the top of the screen by setting each
        one's \"y\" property to 0\n    -   Change the screen to \"game\"\n\nOnce you've
        fleshed out the `startGame()` function, try clicking the \"play\" button to
        check that it's working."
      CSD U6 tugowar variables 2: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 2_2018: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 2_2019: |-
        # Functions with Parameters

        Most of the existing functions you use in App Lab need inputs, or **parameters**, to pass the function necessary information. For example, when changing a screen, you pass the ID of that screen as a parameter, which looks like `setScreen("win")`.

        These parameters show up as a variable that can be used inside the function, and you can create functions that use parameters too!

        # Do This

        <div markdown="1" style="float:right; margin: 20px;">

        ![expandable](https://images.code.org/2eccd9fc9f4887aefd0bfd94d7f332c8-image-1509402194012.png)

        <br/>

        Click to expand

        </div>

        Instead of a separate function to move the red and the blue players, we've created one function called `movePlayer()` that takes the ID of the player image as a parameter called `player`. Inside this function, you can use `player` any place where you need to specify the ID of the player you want to control.

        -   Find where `movePlayer()` is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Inside the `movePlayer()` definition:
            -   Get the current "y" property of the player and save it to a variable called `player_y`
            -   Increase the value of `player_y` by 10
            -   Set the "y" property of player to your new value `player_y`

        Once you've added your code, test it. You should see that _both buttons_ work even though we only created one function - cool!
      CSD U6 tugowar variables 3: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2018: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD U6 tugowar variables 3_2019: |-
        # The checkWin() Function

        The last function that you need to figure out is the `checkWin()` function, which after each player is moved, and is used to both check if that player has made it to the bottom of the screen and to announce the winner if necessary. For now, we're just going to find out where the player is and log it to the console.

        # Do This

        Just like the `movePlayer()` function, `checkWin()` takes a single parameter called `player`. If you call `checkWin("red")`, then the variable `player` will have the value "red".

        -   Find where the function is defined ( [Show me where](#triggercallout=block_trigger) )
        -   Create a variable called `player_y` and assign it the "y" property of the player
        -   Use either a `console.log()` command or a watcher to report the value of `player_y`
        -   Play the game with only one button, keeping an eye on the value of `player_y`
        -   Decide what value of `player_y` should be considered the bottom of the screen
      CSD What Makes a Computer a Computer Video_2019: |-
        ## Pertanyaan untuk dipikirkan

        \-Apa yang membuat komputer berbeda dari mesin mesin sebelumnya?
        \-pikirkan sesuatu yang anda lakukan pada komputer, jenis input, output, penyimpanan, dan proses apa yang terjadi?
      CSD sprite movement challenge_2018: |-
        # Improve your animation

        Make your animation even better by changing more sprite properties, or by adding even more sprites!
      CSD sprite movement challenge_2019: |-
        # Improve your animation

        Make your animation even better by changing more sprite properties, or by adding even more sprites!
      CSD-Arrays: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      CSD-Arrays_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      CSD-Arrays_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      'CSD: Animating Sprite Movement_2019': |-
        ## Questions to Consider

        -   What is the counter pattern?
        -   How does the counter pattern move sprites across the screen?
      'CSD: Animation Tab_2019': |-
        ## Questions to Consider

        -   What are the steps to adding an image to a sprite?
        -   What are the different ways to get an image?
      'CSD: Drawing in Game Lab 1_2019': |-
        ## Questions to Consider

        -   Where can you find more information about how to use the blocks?
        -   What’s an advantage of using block mode?
      'CSD: Drawing in Game Lab 2_2019': |-
        ## Questions to Consider

        -   What’s the difference between stroke and fill?
      'CSD: For Loop_2019': |-
        ## Questions to Consider

        -   What are loops used for in programming?
        -   Where do loops go in your code?
      'CSD: Introduction to the Draw Loop_2019': |-
        ## Question to Consider

        -   What does the draw function do?
      'CSD: Sprite Velocity_2019': |-
        ## Questions to Consider

        -   Why might you want to use a velocity block instead of the counter pattern?
        -   Give an example of a counter pattern and how you could use a velocity block instead.
      'CSD: Sprites in Game Lab_2019': |-
        ## Questions to Consider

        -   What is a sprite?
        -   What are properties?
        -   What problem do sprites solve?
      CSDU2 - PW - Class Style Personal Site: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2018: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - PW - Class Style Personal Site_2019: |-
        # Free Play Styling

        Your turn to decide what you want to style! Play with the classes styling and RGB colors to improve your personal website.

        -   Make sure you have completed the checklist below.
        -   Take a screenshot of your home page and save it somewhere on your computer so you can find it later.

        ## Checklist

        -   Somewhere on your site, give text a particular color using RGB values.
        -   On your lists page, give all the list items the same background color.
        -   Use classes to style at least two other elements of your personal website
      CSDU2 - Type Anything: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Selamat datang di Web Lab

        Platform yang anda masuki disebut Web Lab. Ada tiga bagian utama pada layar Web Lab.

        # Lakukan Ini

        \-Coba ketik sesuatu di workspace.
        \-Tekan<img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> untuk melihat area preview!
      CSDU2 - Type Anything_2018: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Selamat datang di Web Lab

        Platform yang anda masuki disebut Web Lab. Ada tiga bagian utama pada layar Web Lab.

        # Lakukan Ini

        \-Coba ketik sesuatu di workspace.
        \-Tekan<img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> untuk melihat area preview!
      CSDU2 - Type Anything_2019: |-
        <img src="https://images.code.org/12ffe6980a25a3664eabe69be487a921-image-1485384422334.jpg" style="width:400px; float:right">

        # Selamat datang di Web Lab

        Platform yang anda masuki disebut Web Lab. Ada tiga bagian utama pada layar Web Lab.

        # Lakukan Ini

        \-Coba ketik sesuatu di workspace.
        \-Tekan<img src="https://images.code.org/678619085e37ea6ce904ac8abd0df2f2-image-1493226906609.14.45 AM.png" style="width:150px"> untuk melihat area preview!
      CSDU4 - Design Mode - 15: "# Design Mode\n\nWelcome to Design Mode in AppLab!
        This will allow you to easily create a digital version of your sketched wireframes
        by adding UI elements from the toolbox and and styling them the way you want!\n\n**Goal:**
        Add a large red button to your app using Design Mode.\n\n# Do This:\n\n-   **Find
        <img src=\"https://images.code.org/278f146396c80c97d0b5d73f24d48aec-image-1444335461720.png\">
        in the Design Toolbox** and drag out a button and resize it. \n\n-   **Change
        the button text** to say \"Click Me\".\n\n-   **Set the color for the button**
        to be red.\n\n<img src=\"https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif\"
        style=\"width: 500px; float: middle\">"
      CSDU4 - Design Mode - 16: |-
        # Activate Your Button

        In the last lesson you focused on laying out a page of your app in Design Mode. This is a great, quick way to get the visual side of an app figured out, but it's not very functional. If you click any of the buttons you added, nothing happens. Now you're work towards adding some basic functionality by making the buttons in your app actually _do_ something!

        **Goal:** Add code using Design Mode to make the button respond to a click.

        # Do This

        Your starter app has two elements, a _label_ with the id `titleLabel` and a _button_ with the id `changeTitleButton`. To start with, you're going to make the button log a message to the console when it's clicked.

        -   In Design Mode, **click on the provided button to edit its properties**
        -   Click on the **Events** tab
        -   Insert an `onEvent` from Design Mode by clicking **Insert and show code** under the **Events Tab**.
        -   Take a look at the block that was added to the **Code Mode** tab.
        -   Run the program, click your button and **look for the output in the _Debug Console_** below the workspace instead of the app window. We will discuss the _Debug Console_ on the next level.
      CSDU4 - Design Mode - 17: |-
        # Updating IDs and Debugging with Console Log

        Here we have a couple buttons with event handlers and `console.log` statements, but they are all switched around!

        We should have given the buttons better ID names so we could tell the difference based on the ID. **Can you update the ID names and `console.log` messages to match the correct button?**

        # Do This

        -   **Change the IDs** of the buttons in Design Mode to more descriptive names.

        -   Switch to Code Mode and notice that the **ID pulldowns have been updated to include the new IDs**. (You still need to select the correct ID from the pulldown menu.)

        -   **Update the `console.log` messages** to match the buttons.
      CSDU4 - Design Mode - 18: "# Layering and Deleting\n\n<img src=\"https://images.code.org/9e620f70869de438c4f0c66663686876-image-1444678130772.gif\"
        style=\"width: 200px; float: right\">User interface elements can overlap one
        another, so you'll want the ability to change the order or **depth** at which
        each one is rendered. \n\nIf you **scroll to the bottom of the Properties
        tab** you'll find buttons which allow you to easily **delete or change the
        depth** of an element.\n\n-   **Delete an Element** by selecting it (clicking
        on it) in the design view and then clicking **Delete** in the properties tab.\n-
        \  **Change the depth** of elements by using the double or single arrows.\n
        \   -   Click the double arrow to send all the way to front or back.\n    -
        \  Click the single arrow to move up or down one layer.\n\n# Do This:\n\nUse
        the **delete** and **depth** tools to **create the \"After\" image**\n\n<table>\n<tr>\n\t<th
        style=\"text-align:center\">Before</th>\n    <th style=\"text-align:center\">After</th>\n</tr>\n<tr>\n\t<td
        align=center><img src=\"https://images.code.org/023f749ecb58c91869a4eacab6701203-image-1444685187662.png\"
        style=\"width:200px ; border: solid 1px black\"></td>\n    <td style=\"text-align:center\"><img
        src=\"https://images.code.org/e45fc7d451c071683fd3b59466b106b0-image-1444684677212.png\"
        style=\"width:200px; border: solid 1px black\"></td>\n</tr>\n</table>"
      CSDU4 - Design Mode - 19: "# Second Screen\n\nMost apps have more than one screen
        or page that each have different contents. With Design Mode you can quickly
        add new screen to your app.\n\n# Do This\n\nYou're going to add a second screen
        to your app and add a button to that screen. Make sure you're using good IDs!\n\n-
        \  Drag out <img src=\"https://images.code.org/4337b39cfd797ed9289b70fb6cb365fb-image-1444353631083.17.39
        PM.png\" style=\"width: 50px\"> from the Design Toolbox into your app. You
        now have two screens!\n-   Using Design Mode create a button in your new screen.
        \ <img src=\"https://images.code.org/bbf464e2fc94bacba39407d6842f2336-image-1478300698068.04.35
        PM.png\" style=\"width: 150px\"> \n-   Set the IDs for your screens and buttons
        to something meaningful, for example _\"homeScreen\"_, _\"detailsScreen\"_,
        _\"homeButton\"_, and _\"detailsButton\"_\n\nYou can always use the screen
        dropdown menu at the top of the app window to switch between your screens
        <img src=\"https://images.code.org/404e0b3f520a413c8a5e62e74b70bb19-image-1478300388689.58.59
        PM.png\" style=\"width: 150px\"> "
      CSDU4 - Design Mode - 20: |-
        # Switching Screens

        You can set which screen is showing in your app with the `setScreen()` command. If you're working in blocks you can select which screen you want to switch to from a dropdown.

        ![](<https://images.code.org/615fae136488e1e6d1349e4383388e08-image-1478303858022.13.25 PM.png>)

        # Do This

        You'll use an `onEvent()` block with `setScreen()` to make the two buttons in your app switch between the two screen.

        -   Drag out two `onEvent()` blocks
        -   Set the IDs for your `onEvent()` blocks for each of your two buttons
        -   Place a `setScreen` block inside each of the `onEvent` blocks.
        -   Choose the appropriate screen from the dropdown of each `setScreen` block.
        -   Test out your app to make sure your buttons let you switch back and forth between the two screens
      CSDU4 - Design Mode - 21: "# Adding Images\n\nSometimes the functionality you
        want to represent in your prototype is too complicated to do with just the
        default buttons and fields. If you want to mock up more advanced interfaces
        (like a map), the easiest way to do it is with an image\n\n# Do This\n\n-
        \  Find and download an image of a map you like\n-   Drag an image element
        into your app ![](<https://images.code.org/cda02ffe3acc869822a551f5cdbf8606-image-1444667846363.37.14
        AM.png>)\n-   Choose your image ![](<https://images.code.org/e5b9571ae54af60a3ae597b787e741ea-image-1444667688762.34.42
        AM.png>)\n    -   **URLs** can be added directly into the \"picture\" field.
        \ \n    -   **Upload images** by clicking \"Choose\".\n    -   **Note:** You
        can always see all the files you've uploaded by clicking the gear at the top
        of the toolbox. ![](<https://images.code.org/53b405b771bc11bf5d24c84c878c80dd-image-1444668067826.35.10
        AM.png>)\n-   Make sure to give your image a good ID!"
      CSDU4 - Design Mode - 3: |-
        # How Do Events Work?

        Event-driven apps are made up of elements that can trigger events (such as buttons) and pieces of code called **event handlers**. Event handlers are commands that "watch" for certain events to occur in your program, and then run some function when an event occurs.

        When you first create an event handler from Design Mode, puts a `console.log()` block inside to help you test the event, but you can put just about any code you want inside the event hander.

        # Do This

        The toolbox has a new block called `setText` which allows you to change the text of an element on the screen. You're going to modify the button event handler so that it changes the title text when clicked.

        -   Drag out a `setText()` block to the _inside_ of the `onEvent()` callback function (where the `console.log()` block currently is)
        -   From the block's dropdown, select "titleLabel" (the id of the element you want to change)
        -   In the block's second input, replace "text" with a new title for the app
        -   Run your program and click the button to see it work
      CSDU4 - Design Mode - 4: |-
        # IDs

        The `id` (we'll typically write **ID**) is a **unique identifier** used for each element in the app.

        Each element that appears in the app must have a **unique ID**. In fact, if you try to run a program that has two buttons with same ID you will get a warning message in the console.

        # Do This

        While each element you drag out in Design Mode gets a default ID, they aren't really that helpful (like `button1` and `button2`), so you should get in the habit of creating your own IDs.

        -   Change the ID of your "click me" button to something useful (like `redButton`)
        -   Drag out a second button
        -   Make the second button blue and give it an ID of `blueButton`
      CSDU4 - Design Mode Icons: |-
        <img src="https://images.code.org/2b405319f597910b1563ae607958171c-image-1475866226306.49.51.png" style="width: 200px; float:right">

        # Icons

        Icons help users find the right functionality while also making your app feel more polished.

        # Do This

        Add a few icons to your app. For each icon:

        -   Drag out an image element
        -   Next to the "Picture" field click "Choose..."
        -   Click on the "Icons" tab and select one
        -   Make sure to give your image a good ID! (do we still need to say it?)
      CSDU4 Connecting Screens: |-
        # Navigating

        Once you start adding multiple screens to an app, you need to make sure that users can always get where they want to go. In the next two levels you'll learn how to make sure a user can always get back to the "homepage" of your app.

        # Do This

        Here's an app with four different pages, but only the "red" screen is linked so far. In this level you'll make the other two buttons take the user to the correct screen.

        -   Add two `onEvent()` blocks, one each for the "greenButton" and "blueButton"
        -   Use the `setScreen()` block to make each button switch to the appropriate screen
        -   Test your app to make sure both buttons work. For example, when you click the green button you should go to the green screen.
      CSDU4 Connecting Screens Getting Back: |-
        # Navigating Back

        Someone using your app can now get to each of the red, green, and blue pages, but they can't get back to the homepage. You can add buttons and event handlers of your own to help them do this.

        # Do This

        Create buttons and event handlers to help a user navigate back to the "home" screen

        -   Use Design Mode to create a button inside each of the "red", "green", and "blue" screens. Make sure to give them descriptive IDs.
        -   Back in your code drag in three `onEvent()` blocks, one for each of the three buttons you made.
        -   Inside each `onEvent()` block use the `setScreen()` block that switches back to your "home" screen.
        -   Test your app. You should now be able to navigate back to the home screen from each of the other three.
      CSDU4 Crowdsource App Demo: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Crowdsource App Demo_2018: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Crowdsource App Demo_2019: |-
        # Crowdsourcing

        Crowdsourcing apps allow multiple users to submit content for everyone to use (the _source_ of content is the _crowd_). This app is very similar to the list app, with the main difference being that the list app assumes a single user while this app allows all users to add to the same list and "like" submissions.

        This example uses a list of crowdsourced information for simplicity, but you could display any kind of information in many different formats. A crowdsourcing app could allow users to submit locations for display on a map, images to go into a gallery, or any number of other types of information.

        # Functionality Missing from this Prototype

        -   User's can't create accounts or profiles
        -   Submitted things aren't added to the list
        -   Clicking on the "like" icons don't change their state
      CSDU4 Decision App Demo: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Decision App Demo_2018: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Decision App Demo_2019: |-
        # Decision Maker

        Similar to the quiz app, a decision tree app asks the user a series of questions. The primary difference between the two is that a decision tree doesn't check for right or wrong answers, but instead attempts to give the user a suggestion or help them make a decision based on their answers.

        This simple decision maker asks only three questions,  but more advanced ones actually take the form of a tree as seen below:

        ![](https://images.code.org/aeadfca116011949855c169905ff89a3-image-1476823699500.png)

        Depending on the user's answer to each question, they're given a different page for the next question. This allows the app to gradually narrow down the decision one question at a time. This type of app can be really useful to help users understand complex processes - for example, you might introduce a recycling program by using a decision tree app to help users figure out which bin to sort items into - first asking what material it's made out of, then whether it is clean or not, and so on.

        # Functionality Missing from this Prototype

        -   Question buttons don't direct you to different screens
        -   The final screen doesn't give you a recommended decision
      CSDU4 Design Mode Video_2019: |-
        ## Pertanyaan Renungan

        -   Di bagian mana dalam App Lab kamu bisa merancang antarmuka pengguna aplikasimu?
        -   Jenis elemen apa saja yang bisa kamu tambahkan ke dalam aplikasimu?
      CSDU4 Functionality visible: |-
        # Controlling Visibility

        Earlier in this lesson, when we were proposing ways to simplify the quiz app, we mentioned that it was possible to show or hide design elements with code. App Lab has two functions that let you control the visibility of an element:

        -   `hideElement()` makes the specified element invisible
        -   `showElement()` makes the specified element visible

        # Do This

        The provided app has an image and two buttons.

        -   Attach an event handler to the "Hide" button that hides the image when clicked
        -   Attach an event handler to the "Show" button that shows the image when clicked
      CSDU4 List App Demo: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 List App Demo_2018: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 List App Demo_2019: |-
        # List Manager

        The list manager app allows user to keep track of the state of information and can be modified to serve many different purposes, such as checking in / out loaned items, tracking personal To Dos, or keeping track of where things are in a multi-step process.

        While this example focuses on a single list, more sophisticated list apps could allow the user to create multiple lists, or even move items between lists. This app also only keeps track of the name of an item and whether or not it is "Done," but it could be extended to track and organize any amount of information about the list items.

        # Functionality Missing from this Prototype

        -   Delete buttons don't actually delete items from the list
        -   Add screen doesn't actually add an item to the list
      CSDU4 Project Bug Feature: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Bug Feature_2018: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Bug Feature_2019: |-
        # Improving and Iterating

        You've put your app in front of users, gathered feedback, and identified bugs and new features - time to do something about it.

        # Do This

        Each team member is going to implement select features and bug fixes on their own version of the team's app. Start by selecting a sticky note from the **To Do** column of your team's chart and moving it to the **Doing** column. For each sticky you tackle:

        -   Add a comment to the top of your program describing the feature or bug fix you are implementing
        -   Work on your iteration until it works. Try to stay focused on only the single feature or bug that you've selected.
        -   When done, move your sticky to the **Done** column, pick a new one, and start the process over.
      CSDU4 Project Events: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Events_2018: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Events_2019: |-
        # Linking Screens

        With all of your screens in place you can start adding events that will change the screens. When you're done with this step you'll actually have an interactive prototype!

        # Do This

        For each screen of your app:

        -   Find all of the button IDs
        -   For each button, add an event handler that watches that ID
        -   In each event handler, use `setScreen()` to move the the right screen
        -   Test it all out!

        Depending on the number of screens and buttons your app has, this can be a pretty involved process. Make sure that you test your work often, using `console.log()` blocks to debug any strange behavior with your app. When you think you've got the whole thing working, compare your app with other members of your group to see if they work the same.
      CSDU4 Project Import: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.

        -   Collect all of the sharing urls for your team's pages
            -   You can find the share url by going back to the last level of the previous lesson, or by finding the screen in your [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Project Import_2018: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.  (Don't forget that you'll also need to import your own screen into this project.)

        -   Collect all of the sharing urls for your team's pages, **including your own**
            -   Each team member can find the share url for their own screen by going back to the last level of the previous lesson, or by finding the screen in their [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Project Import_2019: |-
        # Back To Your App

        Now that you've had some practice with importing screens, it's time to start working on your team's app.

        # Do This

        Each member of your team is going to create their own copy of the app, with all of the team members' screens imported in. This will be your copy of the app, and the copy that you will start to add code to in the next lesson.  (Don't forget that you'll also need to import your own screen into this project.)

        -   Collect all of the sharing urls for your team's pages, **including your own**
            -   Each team member can find the share url for their own screen by going back to the last level of the previous lesson, or by finding the screen in their [projects directory](/projects)
        -   Import each of the screens, one at a time
            -   If you run into an ID error with one of the screens, discuss the issue with the screen's creator so it can be fixed and imported
        -   Delete the default "screen1"
        -   Set the main screen as the default

        Don't worry about adding any code at this point; we'll get to that in the next level.
      CSDU4 Quiz App Demo: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU4 Quiz App Demo_2018: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU4 Quiz App Demo_2019: |-
        # Quiz Me

        A quiz app can be used to teach, or help reinforce, information important to your chosen topic.

        At its most basic, a quiz app is composed of a screen for each question with two or more buttons for multiple choice answers. Each button links to a page that either confirms that you were correct, or gives you information about why you were were wrong.

        More advanced quiz apps could include features such as:

        -   Different types of questions (such as matching, free response, or even interactive games)
        -   Randomizing the order of questions
        -   Changing the questions based on how we'll you're doing
        -   Providing a final score
        -   Incorporating study material

        # Functionality Missing from this Prototype

        -   Questions aren't actually checked for correctness
      CSDU6 - LED buttonL: "# Using Board Events\n\nRight now the LED turns on when
        the left button (`buttonL`) is pressed down. It should turn off when the right
        button (buttonR) is pressed down.\n\n<div style=\"float:right;\" markdown=1>
        \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2018: "# Using Board Events\n\nRight now the LED turns on
        when the left button (`buttonL`) is pressed down. It should turn off when
        the right button (buttonR) is pressed down.\n\n<div style=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED buttonL_2019: "# Using Board Events\n\nRight now the LED turns on
        when the left button (`buttonL`) is pressed down. It should turn off when
        the right button (buttonR) is pressed down.\n\n<div style=\"float:right;\"
        markdown=1> \n\n![expandable](https://images.code.org/402489ec13fb6c6f38910829a9633ac3-image-1510874304220.png)
        \n\n</div>\n\n# Do this\n\n-   Add another `onBoardEvent()` block to turn
        the LED off when the right button is pressed down."
      CSDU6 - LED toggle buttonL up: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - LED toggle buttonL up_2018: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - LED toggle buttonL up_2019: |-
        # Other Board Events with the Buttons

        Instead of using the right button, you can make the LED turn off when the left button comes back up.

        # Do this

        -   Create an 'up' event for the left button.
        -   Add code to turn the LED off when the button pops back up.
      CSDU6 - UI and Inputs - dropdown setText: |-
        # setText and getText

        Often you will want to get the text of a UI Element and use it to set the text of another element on the screen. Can you get the text from the dropdown when the user picks a new input and use it to set the text of the "choiceDisplay" label.
      CSDU6 - UI and Inputs - get set with text input: |-
        # setText and getText

        You've seen how to use getText and setText already. Can you make this app get the text the user typed once they hit enter and show it in the text area at the bottom?

        _Tip: The "change" event is triggered when the user clicks "enter" in a field. Use an event handler for the text input watching for the "change" event._
      CSDU6 - UI and Inputs - getNumber: |-
        # getNumber

        **Starter Code:** This program creates a simple calculator but **there is something wrong with it. Try putting in 2 + 2.**

        We can fix this by using `getNumber()` instead of `getText()`. Can you fix the program by changing `getText()` to `getNumber()`?
      CSDU6 - UI and Inputs - getNumber practice: |-
        # getNumber

        **Starter Code:** The program tries to update the valueDisplay whenever the slider value changes but it always sets the value to 10.

        Can you use `getNumber()` to get the value of the slider and update the valueDisplay as it changes?
      CSDU6 - UI and Inputs - getText: |-
        # getText

        Try to set up an event handler that gets the text from the dropdown whenever a user selects a new item from the dropdown. You will need to use the getter `getText()`. Whenever you use a getter you should save it in a variable. Use `console.log()` to make sure it is working.
      CSDU6 - UI and Inputs - hide show: |-
        # Hide and Show

        It is a little weird that both buttons are on the screen at the same time. You don't need the stop alarm button until the alarm is on. Can you make the buttons only show when they are needed?

        -   You will want the stop alarm button to be hidden when the program starts. You can do this in design mode.

        Hint: When you click the trigger alarm button, you should change the text, hide the trigger alarm button, _and_ show the stop alarm button.
      CSDU6 - UI and Inputs - setProperty: |-
        # setProperty background-color

        Change the `background-color` of a button to a new random color each time it is clicked using `setProperty()`.
      CSDU6 - UI and Inputs - setProperty Image: "# setProperty image\n\n**Note:**
        This level starts in Design Mode.\n\nThere is an image element set up for
        you but it does not show when you leave Design Mode because it has not been
        told what image to display. \n\n-   Use the `setProperty()` command to set
        the image of the UI Image Element on the screen."
      CSDU6 - UI and Inputs - setProperty first level: |-
        # setProperty

        **Starter Code:** There is one call to `setProperty()` which sets the text-color to blue when you run the program.

        Can you add more calls to `setProperty()` that change other things about the text when you run the program? Try to change at least 3 more things.
      CSDU6 - UI and Inputs - setScreen: "# setScreen\n\nLets start with a setter
        you have used before `setScreen()`. \n\n-   Make the About Me button on the
        Home page go to the About Me page.\n-   Make the Back button on the About
        Me go to the Home page."
      CSDU6 - UI and Inputs - setText: |-
        # setText

        We are going to start making an alarm app. We have already set up an event handler for the "triggerAlarmButton" which will change the "statusLabel" text to ON when clicked. Can you make the stop alarm button change the text to OFF when clicked?
      CSDU6 - board event challenge_2018: |-
        # Challenge: Sound Board

        Check with your teacher before starting the challenge.

        Now that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.
      CSDU6 - board event challenge_2019: |-
        # Challenge: Sound Board

        Check with your teacher before starting the challenge.

        Now that you know how to use board events, the buttons, switch, and the buzzer, try making a program that turns your board into a sound board when you press the buttons or flip the switch. Play around with the duration and frequencies of the sounds, and listen to how it turns out.
      CSDU6 - button LED prediction: See contained level for markdown
      CSDU6 - button LED prediction_2018: See contained level for markdown
      CSDU6 - button LED prediction_2019: See contained level for markdown
      CSDU6 - button_LED_prediction: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2018: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - button_LED_prediction_2019: |-
        # Board Events

        The `onBoardEvent()` block allows you to start taking input from your Circuit Playground. Look at the program with a partner and discuss what you think it'll do. Once you've come up with an answer, click "Run" to check your answer.

        -   What will happen when you press the left button down?
      CSDU6 - buzzer duration: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration buttons: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2018: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration buttons_2019: |-
        # Buzzer and the Buttons

        This program should use the buttons to play long and short buzzes.

        # Do this

        -   Change the duration parameter of `buzzer.frequency` to make the left button play a long buzz, and the right button play a short buzz.
      CSDU6 - buzzer duration_2018: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer duration_2019: |-
        # Buzzer Duration

        As you've noticed, `buzzer.frequency()` has two parameters: frequency and duration. Both of these take a number as input.

        -   Frequency changes how the buzzer sounds. The bigger the number you give it, the higher the buzzer's sound will be.

        -   Duration determines how long the buzzer is going to play a sound for in milliseconds.

        For right now we're going to focus on duration, the second parameter.

        # Do this

        Try out a few things with duration:

        -   Change the duration of the buzzer to something longer than 100.
        -   Try setting the duration to 0, what happens?

        Run the program multiple times to see what happens before you move on.
      CSDU6 - buzzer intro: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2018: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - buzzer intro_2019: |-
        # Using the Buzzer

        You can use the buzzer in a lot of different ways, but right now we're just going to use the `buzzer.frequency()`.

        # Do this

        -   Pull out a `buzzer.frequency()` block from the toolbox and play around with it. You'll notice it has two parameters, what happens when you change either, or both of those?
        -   Run the program and enjoy the music of your Circuit Playground.
      CSDU6 - final project 1: |-
        # Designing the User Interface

        Before worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.
      CSDU6 - final project 1_2018: |-
        # Designing the User Interface

        Before worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.
      CSDU6 - final project 1_2019: |-
        # Designing the User Interface

        Before worrying about the code for your program, start by laying out the user interface. As you add elements in Design Mode, make sure to give everything a meaningful ID. Even if you don't plan on accessing an element with code, making sure that all of your IDs are descriptive will help make your program more readable and easier to program.
      CSDU6 - final project 2: |-
        # Wiring Up the UI

        With your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.
      CSDU6 - final project 2_2018: |-
        # Wiring Up the UI

        With your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.
      CSDU6 - final project 2_2019: |-
        # Wiring Up the UI

        With your user interface in place, you can now add event handlers for your interface elements. At this point you may want to just include `console.log()` commands to make sure that your events are working as expected - you can add the functional code later one.
      CSDU6 - final project 3: |-
        # Board Input Events

        Now you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.
      CSDU6 - final project 3_2018: |-
        # Board Input Events

        Now you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.
      CSDU6 - final project 3_2019: |-
        # Board Input Events

        Now you can add the events which will take input from the board. Again, feel free to just use `console.log()` statements at this point to ensure that your events are working.
      CSDU6 - final project 4: |-
        # Functions

        As you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 4_2018: |-
        # Functions

        As you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 4_2019: |-
        # Functions

        As you continue to work through your program, look for patterns that can be abstracted into functions. Can you find code that is repeated multiple places, or chunks of code that could be better understood of given a name? Don't forget that you can use parameters to write functions for repeated code that is _mostly_ the same, but varies a bit (such as setting color on multiple LEDs).
      CSDU6 - final project 5: |-
        # Board Output

        If you haven't already, use some of the output elements on the board to communicate useful information to the user.
      CSDU6 - final project 5_2018: |-
        # Board Output

        If you haven't already, use some of the output elements on the board to communicate useful information to the user.
      CSDU6 - final project 5_2019: |-
        # Board Output

        If you haven't already, use some of the output elements on the board to communicate useful information to the user.
      CSDU6 - final project 6: |-
        # Finishing Touches

        Add any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the "Submit" button to turn it in!
      CSDU6 - final project 6_2018: |-
        # Finishing Touches

        Add any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the "Submit" button to turn it in!
      CSDU6 - final project 6_2019: |-
        # Finishing Touches

        Add any finishing touches still needed to make your innovation awesome. If you have time, test out your innovation with some potential users to gather feedback and find opportunities for improvement. When you're totally finished, click the "Submit" button to turn it in!
      CSDU6 - lightswitch toggleswitch: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2018: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - lightswitch toggleswitch_2019: |-
        # Using the Toggle Switch

        The toggle switch can flip in one of two positions: `open` and `close`.  This program uses it to make a light switch.  Right now it can only turn the light on.

        # Do this

        -   Create a new toggle switch event that is triggered when the switch is flipped to `close`.
        -   Add code so that when the toggle switch is flipped to `close` the light turns off.
      CSDU6 - sensors predict question: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - sensors predict question_2018: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - sensors predict question_2019: |-
        # Make a Prediction

        Read the code in this program and make a prediction below. What do you think this program will do when you run it? How is the user intended to interact with the board? You may need to blow onto the board to see the full range of this app.
      CSDU6 - toggle state LED prediction: See contained level for markdown
      CSDU6 - toggle state LED prediction_2018: See contained level for markdown
      CSDU6 - toggle state LED prediction_2019: See contained level for markdown
      CSDU6 - toggleswitch state setProp: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 - toggleswitch state setProp_2018: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 - toggleswitch state setProp_2019: |-
        # State and the Toggle Switch

        This program tells you whether the toggle switch is opened or closed, but it needs the `toggleSwitch.isOpen` block to work.  `toggleSwitch.isOpen` is `true` if the switch is opened and `false` if the switch is closed.

        # Do this

        -   Complete the if-statement with the `toggleSwitch.isOpen` property.
        -   Run the program and press the left button, then flip the toggle switch and press the button again.
      CSDU6 AppLab Input 1: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2018: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 AppLab Input 1_2019: |-
        # Input in App Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the right input?
        4.  What is the program doing when there is no input?
      CSDU6 Circuit Playground Test: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 Circuit Playground Test_2018: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 Circuit Playground Test_2019: |-
        # Test Your Board

        This level is just a quick test to make sure your board is working. To run this test, do the following:

        1.  Plug your board into your computer with a USB cable
        2.  Click "Run"
        3.  Wait a few seconds for either a Success or Error screen to pop up
        4.  If your test was successful, move on to the next level. If not, try some of the troubleshooting steps

        ## Troubleshooting

        There are a number of things that could prevent your test from passing.

        1.  Try refreshing the page and running the test again (you should refresh the page for each of the following ideas as well)
        2.  Try connecting your board to a different USB port
        3.  Try a different USB cable. Some USB cables can only be used for charging, so make sure your cable supports data transfer!
        4.  Try a different board
        5.  Go to [studio.code.org/maker/setup](/maker/setup) to run a more detailed test
      CSDU6 GameLab Input 1: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2018: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 GameLab Input 1_2019: |-
        # Input in Game Lab

        _You don't need to make any changes to the code here_

        Take a minute to read through the code and run the program. Discuss with a partner:

        1.  What is the source of input?
        2.  Where and how does the program check for input?
        3.  What does the program do when it gets the correct input?
        4.  What is the program doing when there is no input?
      CSDU6 array index predict contained: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array index predict contained_2018: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array index predict contained_2019: |-
        # Predict

        The code below will display four things on the screen.  What do you think they will be?
      CSDU6 array select days: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 array select days_2018: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 array select days_2019: |-
        # Accessing Items in an Array

        This program uses the Circuit Playground.  It creates an array of the days of the week.  When the left button is pressed, it displays the day as "Tuesday".

        # Do This

        -   Add code that will display the day as "Thursday" when the right button is pressed.
      CSDU6 arrays select rainbow: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2018: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select rainbow_2019: |-
        # Index Practice

        <img src="https://images.code.org/d3b8a9275703944808bc832c02f19fda-image-1486501806089.09.45 PM.png" style="width: 150px; float: right">

        **Starter code** has been provided that creates a list called `colors` and uses it to set the colors of the rectangles on the screen.  Unfortunately, the colors are out of order.

        # Do This

        -   Change the index numbers inside each selection block to make the rainbow appear as in the picture on the right.
      CSDU6 arrays select random: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select random_2018: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select random_2019: |-
        # Random Selection

        You can also select a random element in the list by using the `randomNumber` block instead of an index.  This program selects a random icon from a list and displays it on the screen when the left button is pressed.  Right now, the icons are always blue.

        # Do This

        -   Add code that will select a random color from the list and use that as the icon color.
      CSDU6 arrays select variable: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2018: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 arrays select variable_2019: |-
        # Using Variables

        This program is like the last one, but the icons should always match the colors (red heart, yellow star, green leaf, and blue water).  You can do this using the variable "myIndex", which will store the value of a random number so that it can be used to get the icon and the color from the same place on each list.

        # Do This

        -   Change the code so that both the icon and its color are chosen using the "myIndex" variable.
      CSDU6 buzzer 2d arrays_2018: |-
        # Challenge: 2D Arrays

        Arrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.

        The structure that you've been using to play notes looks like this:

        `buzzer.playNotes( [array of notes to play] , tempo of the whole song);`

        The main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:

        `buzzer.playSong([
          ["G3",0.25],
          ["C4",0.25],
          ["E4",0.25],
          ["G4",0.125],
          [null,0.375],
          ["E4",0.1875],
          ["G4",1]
        ], 120);`

        # Do this

        -   Use the `buzzer.playSong` block to make a different song.
        -   When you get comfortable with the structure, add more notes to the song.
      CSDU6 buzzer 2d arrays_2019: |-
        # Challenge: 2D Arrays

        Arrays can hold all sorts of data, like numbers, strings, and even other arrays. When we put an array inside another, this becomes a 2D array. The `buzzer.playSong()` block can be used to play songs that sound more precise with 2D arrays.

        The structure that you've been using to play notes looks like this:

        `buzzer.playNotes( [array of notes to play] , tempo of the whole song);`

        The main difference with `buzzer.playSong()` is each element inside the `[array of notes to play]`, is an array with two elements: the note you want to play, and the duration of the note. Sometime you'll want a quarter note in your song, other times you'll want a full note, or maybe somewhere in between. A full song might look something like this:

        `buzzer.playSong([
          ["G3",0.25],
          ["C4",0.25],
          ["E4",0.25],
          ["G4",0.125],
          [null,0.375],
          ["E4",0.1875],
          ["G4",1]
        ], 120);`

        # Do this

        -   Use the `buzzer.playSong` block to make a different song.
        -   When you get comfortable with the structure, add more notes to the song.
      CSDU6 buzzer.stop_2018: |-
        # Stopping the Music

        Sometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.

        # Do this

        -   Find a way to get the note to stop playing with `buzzer.stop()`.
        -   Celebrate your win over the endless note!
      CSDU6 buzzer.stop_2019: |-
        # Stopping the Music

        Sometimes you need to be able to stop the music when you want, like in the code below. Duration wasn't specified so now the note plays continuously. Luckily, the `buzzer.stop()` method is here to save your ears.

        # Do this

        -   Find a way to get the note to stop playing with `buzzer.stop()`.
        -   Celebrate your win over the endless note!
      CSDU6 circuit playground piano: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 circuit playground piano_2018: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 circuit playground piano_2019: "# Circuit Piano\n\nLook at the code below.
        You're not going to be changing it, but try to see what it does. \n\n# Do
        this\n\n-   Run the program and play with the piano on the screen."
      CSDU6 frequency creation: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency creation_2018: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency creation_2019: |-
        # Making the Buzzer Buzz

        Now that you can use the buzzer's frequency, try to make the buzzer play a high sound when the same button pops back up.

        # Do this

        -   Add another onBoardEvent block so the buzzer plays a high sound when the left button comes back **up**
      CSDU6 frequency modification: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 frequency modification_2018: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 frequency modification_2019: |-
        # Making the Buzzer Buzz

        The frequency of the buzzer determines how high or how low the buzzer will sound when it plays. The higher the number you give frequency, the higher the buzzer will sound.

        # Do this

        -   Right now the buzzer plays a high note when the left button is pressed. Make the buzzer play a low note instead.
      CSDU6 making new arrays: |-
        # Making New Arrays

        You know how to change arrays, now it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 making new arrays_2018: |-
        # Making New Arrays

        You know how to change arrays, now it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 making new arrays_2019: |-
        # Making New Arrays

        Now that you can change arrays, it's time for you to make your own.

        # Do this

        -   Make a new array with whatever notes you want. They can be in different octaves, arranged in a certain key, etc. Anything you want!
        -   Have the buzzer play a random note from your array when the **right** button is pressed.
      CSDU6 piano with notes: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2018: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 piano with notes_2019: |-
        # Piano Notes

        This is the same piano that you saw at the beginning of the lesson, but there are some bugs!

        # Do this

        -   Edit the code so that all keys are using a `buzzer.note()` block to play the corresponding note.
        -   Make sure that all the values passed in to `buzzer.note()` are notes, and not frequencies.

        _Hint: Remember to put quotes around the notes! e.g `buzzer.note("A4", 100);`_
      CSDU6 play null notes: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play null notes_2018: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play null notes_2019: |-
        # Null Notes

        You may have noticed that if you put the same note side-by-side in the array, the buzzer just plays that note as one long sound instead of as individual notes. In music we often want a break (or _rest_) between notes. You can get your buzzer to play a rest by sending it the value `null`.

        `null` is a special value that represents emptiness in computer science. `playNotes` plays each note for the same duration, so a `null` element in the array is just telling `playNotes` to play nothing for the same duration as everything else.

        # Do this

        -   Run the code to hear what it sounds like first.
        -   Examine the array inside `buzzer.playNotes()`.
        -   Put a pause between notes that are the same and side-by-side, and any other place you deem appropriate.

        _Tip: `null` references a value, just like a variable name. Make sure you don't put it in quotation marks!_
      CSDU6 play predict code: Markdown is in contained level
      CSDU6 play predict code_2018: Markdown is in contained level
      CSDU6 play predict code_2019: Markdown is in contained level
      CSDU6 play predict markdown: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play predict markdown_2018: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play predict markdown_2019: |-
        # Make a Prediction

        Look at the code below. What do you think it's going to do?

        Give it a guess and run the code to find out!
      CSDU6 play songs: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 play songs_2018: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 play songs_2019: |-
        # Making Songs

        You can make and play full songs with `buzzer.playNotes()`. It takes two parameters: an array of notes to play, and a tempo at which to play the notes. In previous bubbles you created arrays of notes and played through them randomly, but `buzzer.playNotes()` plays each note consecutively instead.

        # Do this

        -   Pull out a `buzzer.playNotes` block and change the starting array inside.
        -   Make sure the new array you give it has at least two pairs of notes that are next to each other in the list (Example: `["A5", "A5", "G4", "G4"]`)

        _Hint: Don't forget that you can always switch back and forth between block and text mode._
      CSDU6 toggle state prediction: "# More on the Toggle Switch\n\nYou can also
        check whether the toggle switch is in the `open` or `close` position anywhere
        in your program. \n\nWhat different things does the button do when the toggle
        switch is `open` or `close`?"
      CSDU6 toggle state prediction_2018: "# More on the Toggle Switch\n\nYou can
        also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \n\nWhat different things does the button do when
        the toggle switch is `open` or `close`?"
      CSDU6 toggle state prediction_2019: "# More on the Toggle Switch\n\nYou can
        also check whether the toggle switch is in the `open` or `close` position
        anywhere in your program. \n\nWhat different things does the button do when
        the toggle switch is `open` or `close`?"
      Course 4 Artist 1: "Help me draw a box.\\\n(Each line is 200 pixels long) \n\n<br/><br/>"
      Course 4 Artist 10: "<img src=\"https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png\"
        width=\"150px;\" style=\"mix-blend-mode: multiply;\" />\n\n**Play time:**
        \ Here is the code for an interesting shape.   \n\nWhat happens when you repeat
        it multiple times, turning between each iteration?   \n\nNotice that the turns
        in this shape add up to _420 degrees_, which means that when your artist is
        done drawing, it will be facing a different direction than when you started.
        \ That new direction is exactly _60 degrees_ to the _right_ of where you began.\n\n<hr/>\n\n<h4>\n<details>\n<summary><b>Repeat
        4</b></summary>\n<br/>\n\nIf you want to come full circle in just 4 repetitions,
        you need the artist to turn a total of **360 degrees/4 = 90 degrees** each
        time.  You can do that by adding an extra `turn right by 30 degrees` block
        to the outer loop (since **60+30 = 90**.)\n\n<br/>\n<img src=\"https://images.code.org/9da67a628ed72e87520a02a0d917e2af-image-1440132370113.44.12.png\"
        width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n<br/><br/>\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat
        6</b></summary>\n<br/>\n\nWhen you repeat the shape as-is 6 times, you get
        a total rotation of **6x60 degrees** which is a full **360 degree** cycle.\n\n<img
        src=\"https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png\"
        \ width=\"500px;\"  style=\"mix-blend-mode: multiply;\" />\n</details>\n</h4>\n\n<h4>\n<details>\n<summary><b>Repeat
        12</b></summary>\n\n<br/>\n\nIf you want to repeat the image 12 times, you
        need the artist to turn a total of **360 degrees/12 = 30 degrees** each iteration.
        \ That means you will need to adjust the artist back a bit with `turn left
        by 30 degrees` before you repeat the shape again.\n\n<br/><br/>\n<img src=\"https://images.code.org/ad254952522674496918561096817c66-image-1440132424792.44.01.png\"
        width=\"500px;\" style=\"mix-blend-mode: multiply;\" />\n\n</details>\n</h4>\n\nNow
        it's your turn!  Can you recreate each image by repeating the starting shape?
        \ "
      Course 4 Artist 11: "<img src=\"https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png\"
        width=\"200px\"/>\n\nNow for a challenge!  \n\nHere is a design that uses
        only blocks that you have already been shown.  Can you figure out how to recreate
        it?  Feel free to use trial and error. You are not expected to get it perfect
        the first time.\n\nThe repeated shape is almost identical to the one from
        the last puzzle, except that the length used in the first loop is a little
        smaller. "
      Course 4 Artist 12: |-
        <img src="https://images.code.org/70795d84048767ae7fb65883f476b27c-image-1440050836837.01.09.png" width="250px"/>

        Free Play Inspiration: You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.
      Course 4 Artist 13: Still playing?  Here is a blank canvas where you can design
        anything you want!
      Course 4 Artist 2: |-
        Can you use a loop to draw the greyed out square?\
        (Each side is 300px long)
      Course 4 Artist 20: "Still playing?  \n\nHere is a blank canvas where you can
        create whatever you want!"
      Course 4 Artist 3: "Try to figure out what happens if you run this code (or
        press \"Run\" to test it).  \n\nThen, repeat it enough times to complete the
        drawing."
      Course 4 Artist 4: |-
        How many degrees are in a circle?\
        Fill in the repeat block with that number to create a circle of colors.
      Course 4 Artist 5: "Draw the other half of this design so it's symmetrical.
        \nThe triangles are equilateral and are 50 pixels long.  \n\nYou may have
        to run the code several times to figure out all of the blocks that need to
        be added."
      Course 4 Artist 6: Complete the code to draw these three, equilateral triangles.
      Course 4 Artist 7: 'Now nest this loop inside another loop to draw 10 triangles. '
      Course 4 Artist 8: Draw this sun by looping this whole block of code multiple
        times.
      Course 4 Artist 8a: Remember this shape?  Now we're going to let you build it
        without giving you any blocks to start!
      Course 4 Artist 9: 'Loop this design 10 times and make sure to turn between
        each shape that''s drawn. '
      Course 4 Artist Binary 1: "Here's a function that takes a binary string of 1's
        and 0's and instructs the artist to follow them from left to right, top to
        bottom.  \n\nThe artist will fill-in the squares when it sees a 1 and ignore
        the square when it sees a 0. \n\n**Run this code to see how the artist uses
        binary to draw this pattern.**"
      Course 4 Artist Binary Free Play 2b: "<img src=\"https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \n\nIf this picture inspires
        you, try to make something similar. Otherwise, create something all your own.
        \n<br/>"
      Course 4 Artist Binary pre1: |-
        Binary is a way of representing information using only two options. In this case, <b>off</b> and <b>on</b>.
        <br/>
        Here, we're going to use the number <b>0</b> as code for "off" and the number <b>1</b> as code for "on".

        <hr/>

        We've provided you with a grid of "pixels" that you can walk through and make designs by turning on only certain squares.

        <b>Use the blocks below to have the artist draw "01010101" in binary in the first row.</b>
      Course 4 Artist For Loops 1: Use a repeat block to draw this triangle that is
        50 pixels wide.
      Course 4 Artist For Loops 11: "Remember back in a previous stage when we used
        a variable to control the number of sides in a shape? We are going to do the
        same thing with the `counter` variable now.  \n\nThis pattern starts with
        a triangle and adds one side at a time until it draws a decagon (10 sides).
        Each side should be 100 pixels long. \n\nHow will you use the `counter` variable
        from the `for` loop to recreate this drawing?"
      Course 4 Artist For Loops 11a: "Let's put it all together!   \n\nUsing your
        knowledge of `for` loops and the `counter` variable, create this drawing where
        each shape has two more sides than the last.  Make sure that each side is
        10 times as long as the number of sides in the polygon.\n\nVery little of
        the code has been provided for you."
      Course 4 Artist For Loops 14: "If you turn a little bit more or less than you
        normally would for a shape, it creates a neat effect. \n\nTry using some of
        the code from the last level, but turning 89 degrees to create this twisted
        square spiral."
      Course 4 Artist For Loops 15: "**Free Play:** Try making some drawings of your
        own using `for loops`. We've added a few useful variables for you as well."
      Course 4 Artist For Loops 2: |-
        I've put the code for drawing a triangle inside a `for loop` that counts from 50 to 100 by 10.

        **NOTE:** Make sure you look at the code _before_ you hit "Run".
      Course 4 Artist For Loops 3: Use the last puzzle as a reference to complete
        this one.  The smallest triangle has 20 pixel sides, the largest has 200 pixel
        sides, and each triangle is 20 pixels larger than the last.
      Course 4 Artist For Loops 4: 'How would you modify what you''ve learned to draw
        these squares? They start at 15 pixels long, the largest is 300 pixels long,
        and each square is 15 pixels larger than the last. '
      Course 4 Artist For Loops 6a: |-
        Buat tiga perubahan kecil pada
        kode dari level terakhir untuk mendapatkan ini!
      Course 4 Artist For Loops 8: "Just one little change to the code from the last
        image can create this drawing. Can you figure out what that change is?\n\nHint:
        \ You need to remove something!  "
      Course 4 Artist For Loops Challenge: |-
        **Challenge:** Can you figure out how to use all of the things you've learned to create this image of polygons, all with 40 pixel sides?

        Remember, in order to create a spiral, you cannot close the polygon.  This means that each shape will need to have one fewer sides than usual.
      Course 4 Artist For Loops inspire: |-
        <br/><br/>
        <img src="https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png" width="250px"/>\
        <br/><br/>
        **Free-Play Inspiration:** You've now learned everything you need to know to make a pattern like this! If this picture inspires you, try to make something similar. Otherwise, create something all your own.
      Course 4 Artist Functions Inspiration: "<img src=\"https://images.code.org/cf373e03bede480ae54aec72ce823454-image-1442951867535.54.11.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \n\nIf this picture inspires
        you, try to make something similar. Otherwise, create something all your own. "
      Course 4 Artist Functions challenge: "<img src=\"https://images.code.org/69f1c2b415f907c86aaa6ed2534c3682-image-1442870371171.13.38.png\"
        width=\"250px\"/>\n\n**Challenge Level:** Use what you've learned in this
        stage and others to figure out how to make the drawing above.  "
      Course 4 Artist Inspire: "<img src=\"https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! If this picture inspires you,
        try to make something similar. Otherwise, create something all your own. "
      Course 4 Artist Vars 1: "Let's draw an equilateral triangle. \n\nIt has to be
        exactly 100 pixels long on each side.\n\n<br/>"
      Course 4 Artist Vars 11: "Here’s some more complicated code using the same concepts
        from the last puzzle - what should you set the `sides` variable to in order
        to draw this picture made of squares?\n\n<p style=\"font-size:small; padding:
        15px 15px 15px 40px; background-color:#dcf3f3; border-radius:10px;\">\n\tJust
        for fun: Try using a few different numbers to see what happens to the pattern!\n</p>"
      Course 4 Artist Vars 12: |-
        Let's set the `sides` variable to 5. The more sides we add to this algorithm, the bigger this whole pattern gets!

        Notice that there is another variable called `length`.
        We can now use that variable wherever we have a `move forward` block.

        Set the `length` variable to 75 for this shape.
      Course 4 Artist Vars 13: "When a shape has lots of sides, each side needs to
        be shorter if you want the whole pattern to fit on the screen. \n\nLet's recreate
        the algorithm for this amazing pattern, but instead of manually setting the
        `length` variable, let's use a math block with the `sides` variable inside
        to make sure that each shape fits correctly.  \n\nThe perimeter of each polygon
        is 300 pixels."
      Course 4 Artist Vars 14: |-
        **Free Play**: Check it out! Now your algorithm is nested within one more loop. Experiment with changing the values of your two variables to draw cool patterns.

        For even more effect, try playing with color!  Use random colors inside loops to see how it changes your design.
      Course 4 Artist Vars 2: Instead of using `move forward by 150`, the `move` block
        is now referencing a variable called `length`. Can you set `length` to 150
        to draw this new triangle?
      Course 4 Artist Vars 4: Now I want to make a rectangle that is twice as tall
        as it is wide. We've got a variable called `width` that needs to be set to
        100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 6: "Here’s some code that can draw any regular polygon.
        \n\nThere’s a new variable called `sides` that is set to 4. \n\nCan you use
        the `sides` variable (along with the math block) to turn the right amount
        regardless of how many sides are in the polygon?"
      Course 4 Artist Vars 7: |-
        Use what you learned in the last puzzle to create this hexagon using the `sides` variable.

        See how you could change just one value to draw a triangle,  square, pentagon, or octagon?
      Course 4 Artist Vars 8: "**Free Play:** Experiment with the number of sides
        this shape has. Can you change the algorithm so that the overall size of the
        shape stays the same, no matter how many sides it has? "
      Course 4 Bee 1: "The bee can't tell what's under the cloud! \n\nUse the `if`
        block to check whether there is a flower under the cloud. \n\nGet nectar one
        time, **ONLY** if there is a flower."
      Course 4 Bee 2: "Use the `if/else` block to check each object to see if it's
        a flower or a honeycomb. \n\nIf it's a flower, collect one nectar...otherwise,
        make one honey!"
      Course 4 Bee 3: "The unknown object is either a flower or a honeycomb. \n\nThis
        time, use the `if/else` block to collect one nectar **if** it is a flower,
        **else** make one honey (because then it would be a honeycomb)."
      Course 4 Bee Params 1: Write a sequence to collect all of the nectar using `get
        3 nectar` which turns, moves to collect the nectar, and then returns to the
        original location.
      Course 4 Bee Params 2: Modify the `get 3 nectar` function so it makes me turn
        right instead of left to the flowers.
      Course 4 Bee Params 3: "Now there are flowers on both sides!  \n\nWe've added
        variables called `left` and `right` for you to use, and now there is a parameter
        called `direction` inside `get 3 nectar`. \n\n**Edit `get 3 nectar` so that
        the bee turns the correct direction when the variables `left` or `right` are
        passed into the function.**"
      Course 4 Bee Params 5: Let's start from scratch - can you create a new function
        called `get 5 nectar` with a direction parameter?
      Course 4 Bee Params 6: |-
        Wouldn't it be nice if we could collect all of these nectars with a single function?

        Try adding a new parameter to your function called `nectar units` to control the amount of nectar to collect. You'll probably want to rename the function too!
      Course 4 Bee Params 7: |-
        Try using your new function to collect all of this nectar.

        <br/>
      Course 4 Bee Params 8: "**Challenge:** Now there's honey to deal with too! \n\nRewrite
        your function to use both the number of honey units and the number of nectar
        units.  How would you use those numbers to decide what you should do?"
      Course 4 EC 1a: "**Extreme Challenge:**  No rules. No clues. Just the challenge!"
      Course 4 EC 1b: "**Extreme Challenge:**  No rules. No clues. Just the challenge!"
      Course 4 EC 2a: "**Extreme Challenge:**  No rules. No clues. Just the challenge!"
      Course 4 EC 2b: "**Extreme Challenge:**  No rules. No clues. Just the challenge!"
      Course 4 EC 2c: "**Extreme Challenge:**  No rules. No clues. Just the challenge!"
      Course 4 Maze 4: Try the `repeat` block to use fewer blocks when solving this
        puzzle...
      Course 4 Play Lab Params 1: "Here's a function called `jump` that causes your
        main character to jump up 100 pixels. \n\nRun the program and use the jump
        function to collect all of the flags by moving the dog with the arrow keys."
      Course 4 Play Lab Params 10: |-
        We've added one last function for you.

        <hr/>

        Use an `if` statement to program your game to call the `level_up` function only when `player_score` becomes greater than a certain number.

        </h4>

        *For example: `player_score` > 6*

        <hr/>

        _Play the game, and make it to level 3 to move to the next puzzle._
      Course 4 Play Lab Params 2: "Now we've got flags that are too high for our current
        jump! Let's use both the \"up\" and \"down\" arrows so that we can have multiple
        jump heights.  \n\nWe need to add a parameter to our jump function called
        `height`.  \n\n-   The up arrow should cause the dog to jump 200 pixels \n-
        \  The down arrow should make it jump only 100 pixels. "
      Course 4 Play Lab Params 3: |-
        We have added another parameter to the jump function so that we can use it with other actors. Each actor is represented by a number, starting from one.

        Edit the `jump` function so that it uses the `actor` parameter to make the correct character jump.
      Course 4 Play Lab Params 4: "Here's a function called `patrol`. \n\nEdit `patrol`
        to move Cat up 400 pixels and then down 400 pixels."
      Course 4 Play Lab Params 5: Edit the the `patrol` function to add an `actor`
        parameter, so that we can call it for each of the actors on the screen. Remember,
        the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6: Add another parameter called `speed` to the `patrol`
        function. Try using a `set speed` block with the new `speed` parameter to
        help Penguin get both flags before the other sprites even get one.
      Course 4 Play Lab Params 7: "Let's have some fun! Look at the code provided
        to see if you can figure out what each block does.  \n\nWhen you're done,
        use the arrow keys to control Dog and collect all of the flags.\n\n**NOTE:**
        You don't need to make any changes to the program"
      Course 4 Play Lab Params 8: Use the `when actor touches` block to send Dog back
        to the top-left ONLY if Dog touches any of the other actors.
      Course 4 Play Lab Params 9: |-
        Here's our game from an earlier stage but most of the code is hidden. We've added a new function called `score_points.`

        * * *

        #### Edit the function so that a new parameter called `points` is added to `player_score`.

        #### The variable `player_score` should increase each time Dog tags Cat with pie, and decrease each time that Cat tags Dog with a sandwich.

        * * *

        _Note: When you're done, click "Run" to play.  When Dog scores 6 points, you will move on to the next puzzle._
      Course 4 Play Lab Vars 1: |-
        This time you don't have to write any code, just hit `Run` to play the game!

        In this game, you're the dog who is trying to collect more flags than the cat. Use the down arrow to control the dog. Press `Finish` when you're done playing.
      Course 4 Play Lab Vars 2: The race in that last puzzle wasn't very fair! Change
        the `dog_speed` variable to make sure you can collect more flags than Cat.
        The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3: "Here's a new kind of game! \n\nYou don't need to
        change anything on this level.\n\n**Directions:** Use the left and right arrows
        to move, and the up arrow to jump. See if you can collect all of the flags."
      Course 4 Play Lab Vars 4: 'Now we''re using a variable called `height` to control
        how high the dog can jump. Update the `height` variable so that the dog can
        jump high enough to reach all the flags. '
      Course 4 Play Lab Vars 6: |-
        In our game, how should we score points?

        1.  Add 1 to your `points` variable each time Dog hits Cat with a piece of pie.

        2.  Use the `when actor 2 touches anything` event to trigger an update to your score. You can increment your variable by setting `points = points + 1.`

        3.  Get your score up to 10 to pass the level.

        **Note:** Use the right arrow to throw pie!
      Course 4 Play Lab Vars 7: "Nice, now let's make sure this game isn't too easy
        to play!  \n\nAny time Dog (actor 1) gets hit by a sandwich from Cat (actor
        2), you should lose a point. \n\nStart with 10 points so it's not too hard.
        Let your score drop down from 10 to 0 to pass the level."
      Course 4 Play Lab Vars 9: "Free Play time! Here are all of the variables we've
        played with so far in this stage, as well as a few more in case you want them.
        \n\nNotice that there are now so many blocks in our toolbox that they need
        to be organized!  Here, we've put each piece into an appropriate category.
        \ Take some time to explore everything that is available. When you're done
        browsing, make a game or story using repeats, variables, and events.  \n\n_Hint:
        scroll down to see all the commands in the workspace._"
      Course 4 Play Labs For Loops 1: Let's make the dog speak every number from 1
        to 100. Use a `for` loop and the counter block to speak the counter variable
        each time the loop is run.
      Course 4 Playlab For Loop Freeplay: "**Freeplay:** Use everything you've learned
        so far to make a game that includes a `for` loop!"
      Course 4 Playlab For Loops 4b: "Now, these two characters are going to race!
        \ \n\nEach of them will move `counter` steps at a time, but their counters
        will have different values because of the `for` loops.  \n\nCan you change
        the **increment** in one of the loops so that the race is a tie?"
      Course 4 Playlab For Loops 5b: Adjust the interval on these `for` loops so that
        the two characters end in the exact same place.
      Course 4 Playlab For Loops 6b: "Now we're going to use `for` loops in a whole
        different way!\n\nThis game gets hard quickly because the time between disappearances
        shrinks fast!\n\n<hr/>\n\n**Edit this `for` loop to create a game that's fun
        for you to play!**  \n\n<hr/>\n\nPress \"Run\" and click Madame Unicorn as
        many times as you can.  Can you beat our score of 24? "
      Course 4 SCF 1: "**Functions Super Challenge:** Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?"
      Course 4 SCF 1a: "**Functions Super Challenge:** Can you figure out how to collect
        all of this nectar with the fewest blocks possible?"
      Course 4 SCF 1b: "**Functions Super Challenge:** Can you figure out how to collect
        all of this honey with the fewest blocks possible?"
      Course 4 SCF 2: "**Functions Super Challenge:** Use what you learned in the
        previous level to draw an image like this.\n\n_Note: The code becomes more
        simple if you incorporate parameters._  "
      Course 4 SCF 3: "**Functions Super Challenge:** Use what you learned in the
        previous level to draw an image like this.\n\n_Note: The code becomes more
        simple if you incorporate parameters._\n\n<br/>\n<img src=\"https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png\"
        width=\"300px\"/>\n<br/>  "
      Course 4 SCFL 1: "**For-Loops Super Challenge:** Solve this puzzle with the
        fewest number of blocks possible."
      Course 4 SCFL 1a: "**For Loops Super Challenge:** Can you get Scrat to his acorn
        using as few blocks as possible?"
      Course 4 SCFL 1b: "**For Loops Super Challenge:** Can you get Scrat to his acorn
        using as few blocks as possible?"
      Course 4 SCFL 2: |-
        **For-Loops Super Challenge:** Solve this puzzle with the fewest number of blocks possible.\
        <br/>
      Course 4 SCFL 3: "**For-Loops Super Challenge:** Can you figure out how to re-create
        this drawing? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/>"
      Course 4 SCFL 4: "**For-Loops Super Challenge:** Can you figure out how to re-create
        this drawing? \n\n<img src=\"https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png\"
        width=\"350px\"/>"
      Course 4 SCFL 6: "**For-Loops Super Challenge:** Can you figure out how to re-create
        this drawing with a single loop? \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"
        width=\"350px\"/>"
      Course 4 SCFL 7: "**For-Loops Super Challenge:** The artist wants to catch some
        waves! Can you figure out how to re-create this drawing? \n\n<img src=\"https://images.code.org/fba3423f2e9a405d4d3859de32cdb0f3-image-1446102880655.13.36.png\"
        width=\"350px\"/>"
      Course 4 SCV 1: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png" width="250px"/>

        **Variables Super Challenge:** You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?
      Course 4 SCV 2: |-
        <img src="https://images.code.org/85f0b27009edd86eff78692004b9ed52-image-1444712655590.02.32.png" width="250px"/>

        **Variables Super Challenge:** You've now learned everything you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can you stick with it until you figure out the solution?
      Course 4 SCV 3: |-
        **Variables Super Challenge:** You've now learned everything you need to know to solve this puzzle! This game is meant to be difficult.  Can you stick with it until you figure out the solution?

        * * *

        Now for a game of tag!  Tag Cat to get 2 points. Tag Penguin to get 3 points.  Get exactly 10 points to win!
        But be careful, when Cat and Penguin tag each other, they take points away.

        **Add the blocks necessary to make this game work the way it's been explained.**

        -   **How will you get Dog to move in all directions using the arrow keys?**
        -   **How will you add points when Dog tags Cat or Penguin?**
        -   **How will you subtract points when Cat and Penguin touch?**
      Course 4 SCV 4: "**Variables Super Challenge:** Solve this puzzle with the fewest
        number of blocks possible."
      Course 4 SCV 5: "**Variables Super Challenge:** Solve this puzzle with the fewest
        number of blocks possible."
      Course 4 SCV 6: "<img src=\"https://images.code.org/499fc71a0a06bacb68a9789ad57f8148-image-1445574373673.16.44.png\"
        width=\"250px\"/>\n\n**Variables Super Challenge:** You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.
        \ Can you stick with it until you figure out the solution?  "
      CourseD_Dance_Party_01: "_Mari kita berpesta tari!_\n\nTarik blok `buat baru`
        ke ruang kerja, lalu hubungkan di dalam blok `penyetelan` untuk menciptakan
        penari pertama Anda. \n\n-   _Anda juga dapat mengklik bola lampu ke kiri
        jika Anda ingin informasi lebih lanjut atau tantangan tambahan._"
      CourseD_Dance_Party_02: |-
        Ayo bikin rusa ini menari!

        Tarik keluar <xml><block type="Dancelab_changeMoveLR" block-text="new_dancer do floss"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> blok ke ruang kerja. Hubungkanlah di bawah <xml><block type="Dancelab_atTimestamp" block-text="after 4 measures"><title name="TIMESTAMP">4</title><title name="UNIT">"measures"</title></block></xml> blok. Penari Anda harus memulai gerakan baru setelah birama keempat.

        **Birama** digunakan untuk menghitung waktu dalam musik. Dalam tutorial ini, birama memiliki panjang empat ketukan.
      CourseD_Dance_Party_03: "_Sekarang kita nge-groove!_ \n\nTambahkan <xml><block
        type=\"Dancelab_atTimestamp\" block-text=\"after 6 measures\"><title name=\"TIMESTAMP\">6</title><title
        name=\"UNIT\">\"measures\"</title></block></xml> blok ke ruang kerja Anda.
        Buat penari memulai gerakan baru setelah 6 birama."
      CourseD_Dance_Party_04: |-
        _Tari ini memerlukan flash!_

        Cari blok baru di kotak alat Anda yang menambahkan efek latar belakang di belakang penari Anda. Perhatikan efeknya berubah tepat pada waktunya dengan musik!
      CourseD_Dance_Party_05: |-
        Gunakan blok baru lainnya untuk membuat penari mengganti gerakan **setiap 2 birama**!

        -   Memilih `(Berikutnya)`, `(Sebelumnya)`, atau `(Acak)` akan menyuruh penari melakukan gerakan berbeda setiap kali kode dijalankan.
      CourseD_Dance_Party_06: |-
        _Kita membutuhkan lebih banyak penari!_

        Ciptakan penari cadangan yang disebut `penari_cadangan1` untuk menari dengan kucing.
      CourseD_Dance_Party_08: |-
        Setiap penari memiliki sejumlah _properti_ yang mengontrol seperti apakah penampakannya.

        Anda dapat membuat seperti tampak ada penari di latar belakang dengan menjadikan _ukuran_ mereka lebih kecil. Dapatkah Anda membuat kedua penari cadangan berukuran sama?
      CourseD_Dance_Party_09: |-
        Penari memiliki properti ""warna"" yang dapat menambahkan lapisan warna. Cobalah mengubah warna salah satu penari Anda.

        -   Warna akan mencampur warna yang Anda pilih dengan warna penari.
      CourseD_Dance_Party_10: |-
        Kini Anda mengetahui cara mengubah properti penari. Kita juga dapat membuat properti yang sama merespons musik secara otomatis dengan blok ini:
        <xml>
          <block type="Dancelab_startMapping" block-text="right_unicorn begins following bass">
            <title name="SPRITE">right\_unicorn</title>
            <title name="PROPERTY">"scale"</title>
            <title name="RANGE">"bass"</title>
          </block></xml>

        Program ini menggunakan volume "bas" musik (suara rendah) untuk mengontrol tinggi satu penari. Apakah Anda dapat membuat penari lain yang juga merespons musik?
      CourseD_Dance_Party_11: "<xml><block type=\"Dancelab_whenKey\" block-text=\"when
        up pressed\"></block></xml> blok memungkinkan Anda menjalankan kode saat panah
        atas ditekan. \n\nAnda dapat mengganti gerakan tari, mengubah properti penari,
        atau melakukan gerakan cepat sekali saja. Silakan berkreasi dan awasi apakah
        ada blok baru!"
      CourseD_Dance_Party_11_5: |-
        Periksa blok ini:

        <xml>
          <block type="Dancelab_makeNewDanceSpriteGroup" block-text="Make 6 new ducks in a circle">
            <title name="N">6</title>
            <title name="COSTUME">"DUCK"</title>
            <title name="LAYOUT">"circle"</title>
          </block></xml>

        Kini Anda dapat menciptakan banyak penari sekaligus!

        Cobalah menggunakan beberapa blok "semua bebek" untuk menulis kode yang akan membuat semua bebek menari bersama.
      CourseD_Dance_Party_11b: |-
        Kini saatnya untuk kompetisi tari! Kucing melakukan dab saat Anda menekan tombol panah kiri. Buat Robot "jatuh" begitu Anda menekan tombol panah kanan, dan "bertepuk tangan" begitu Anda menekan tombol panah atas.

        **Gunakan tombol-tombol untuk membuat Robot jatuh-bertepuk tangan-jatuh-bertepuk tangan secepat mungkin!**
      CourseD_Dance_Party_12: Hidupkan groove Anda! Ciptakan tarian Anda sendiri untuk
        dibagikan ke teman-teman.
      CourseE_HOC 2018 Level_1: Anda perlu persediaan untuk perjalanan selanjutnya.
        Kumpulkan **perahu**![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        dari **peti**![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png).
      CourseE_HOC 2018 Level_10: Ada **cumi-cumi** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png)
        sedang bersembunyi di suatu tempat di Monumen Laut ini, dapatkah Anda menemukannya?
      CourseE_HOC 2018 Level_11: Bangun dinding **prismarine** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        di sekitar beton hitam. Ini akan mengaktifkan **pipa** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        dan menyelesaikan tantangan Anda!
      CourseE_HOC 2018 Level_2: Perahu jauh lebih mudah berjalan di perairan terbuka!
        Menuju ujung galangan kapal untuk menaiki kapal.
      CourseE_HOC 2018 Level_3: Ambil dayung dan jalankan perahumu menyebrangi lautan
        untuk menangkap **ikan kod**![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png).
      CourseE_HOC 2018 Level_4: Ayo beri makan ikan kod untuk **lumba-lumba**![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png).
        Gunakan lingkaran sampai blok untuk menyebrangi lautan lebih cepat.
      CourseE_HOC 2018 Level_5: Ada **kerang nautillus** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)
        bersembunyi di suatu tempat! Jelajahi kapal karam untuk mencapai **peti**
        ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png).
      CourseE_HOC 2018 Level_6: Tampak beku di sana! Tangkap **salmon** ![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)
        dalam perjalanan ke reruntuhan bawah laut.
      CourseE_HOC 2018 Level_7a: Anda menemukan reruntuhan bawah laut. Pencarian batu
        pasir untuk **peti** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)
        yang memuat **prismarine** ![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png)
        harta karun.
      CourseE_HOC 2018 Level_8: Pertama gunung es, sekarang lava? Lintasi pulau vulkanik
        ini dan temukan **ikan tropis** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)
        di batu karang.
      CourseE_HOC 2018 Level_9b: Anda berhasil mencapai karang, sekarang cari **Jantung
        Laut**![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)
        ! Gunakan karang biru dan merah untuk mencapai harta karun **peti** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png).
      Crack Random Substitution: |-
        # Membuka sebuah sandi substitusi acak

        Versi alat ini memberikan anda informasi lebih tentang teks terenkripsi dan banyak opsi untuk bagaimana mencoba membuat subtitusi yang berbeda.

        ### Cara berbeda untuk menganalisis teks

        \-Bermain dengan beberapa macam opsi yang tersedia di tab sandi subtitusi acak untuk mendapatkan view berbeda pada frekuensi huruf dalam input teks sebaik standar teks Inggris.

        ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        ### Cara berbeda untuk substitusi

        \-Untuk subtitusi sebuah huruf anda bisa menarik sebuah huruf biru dari alpabet secara langsung dibawah huruf oranye yang ingin anda ubah di chipertext asli.

        ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        ### Bermain.Selalu bermain

        \-Ada cara lain untuk menganalisa dan mensubtitusi karakter yang dapat anda temukan dengan meng-klik tombol dan mencoba apapun yang anda suka.
        \-Ingat anda tidak bisa membukanya:)

        Perhatikan berapa lama waktu yang dibutuhkan untuk memecahkan sandi!Apakah ini metode yang bagus untuk mengenkripsi data rahasia?

        <img src="http://code.org/api/hour/finish_encryption.png">
      Crack a Caesar Cipher: |-
        # Memecahkan sebuah sandi Caesar!

        Alat ini membiarkan anda bermain dengan teks dan sandi caesar.Anda bisa menggunakan ini untuk mengenkripsi atau mendekripsinya.

        # Lakukan ini

        Muat sebuah**contoh pesan**dari pesan dropdown.Ini akan memuat sebuah pesan yang telah dienkripsi oleh sebuah sandi caesar.

        ![](https://images.code.org/347139486c8c729bf3c6e72ce67da878-image-1476286380409.gif)

        \-Meggunakan tombol tab subtitusi caesar anda bisa menggeser alpabet kedepan atau kebelakang untuk mencoba menguraikan pesan.

        ![](https://images.code.org/ef9ebc16d2f1442dc46fba9bd48b5d43-image-1476285966821.gif)

        Perhatikan berapa lama anda bisa memecahkan sandinya!Apakah ini metode yang bagus dalam mengenkripsi data rahasia?.

        <img src="http://code.org/api/hour/begin_encryption.png">
      Dance Party 1-validated: "**Buat prediksi:** Berikut peri bernama `alien1`!
        \n\nMenurut Anda, apa yang akan terjadi ketika Anda mengekliknya?"
      Dance Party 2: "Alien bangga dengan keterampilan menari di Mars, tetapi sekarang
        hanya dapat bergerak dari sisi ke sisi.  \n\nDapatkah Anda mengubah perilaku
        di dalam blok <xml> <block type=\"gamelab_addBehaviorSimple\" inline=\"true\">\n
        \     <value name=\"SPRITE\">\n        <block type=\"sprite_variables_get\">\n
        \         <title name=\"VAR\">alien1</title>\n        </block>\n      </value>\n
        \   </block></xml> untuk membuatnya mulai berputar?"
      Dance Party 2_2019: |-
        Alien bangga dengan keterampilan dansanya  di Mars, tetapi sekarang dia hanya bisa bergerak ke samping.

        Gantikan blok perilaku di <xml><block type="gamelab_addBehaviorSimple" block-text="the sprite begins block"><value name="SPRITE">
        <block type="gamelab_allSpritesWithAnimation">

        <title name="ANIMATION">"alien biru"</title>
        </block>
        </value>
        </block></xml>  yang berbeda sehingga membuat alien mulai berputar!
      Dance Party 3: "Buat peri baru yang disebut `alien2`.  \n\nBuat gerakan tarian
        yang berbeda ketika diklik."
      Dance Party 3_2019: |-
        Buat peri baru yang nampak seperti alien biru. <img src="https://levelbuilder-studio.code.org/media?u=https%3A%2F%2Flevelbuilder-studio.code.org%2Fapi%2Fv1%2Fanimation-library%2FecnW7rdKTB0fUrKRKrqIHbrHVvyWh5hu%2Fcategory_characters%2FalienPink.png" width="3%"></img>

        Buatlah berbagai gerakan yang Anda inginkan ketika diklik. Coba gunakan gerakan baru saat ini!
      Dance Party 4: "Buat peri ketiga yang disebut `alien3`.  \n\nDapatkah Anda mengatur
        semua alien Anda untuk berdiri dalam garis lurus? Itulah gerombolan alien
        menari!"
      Dance Party 4_2019: "Bentuk kru tarian alien! \n\n\\-Buat peri ketiga yang nampak
        seperti alien kuning, dan buat dia mulai gerakan dansa ketika diklik.\n\n-
        \  Atur semua alien Anda untuk berdiri di garis horizontal, seperti ini:\n\n![](https://images.code.org/09380fc01069e79d9d33a979379a666b-image-1555960752137.png)"
      Dance Party 5: "Kami dapat mengubah segala macam hal dalam program ini ketika
        Anda mengeklik peri. Ayo ubah warnanya!  \n\n**Tambahkan kode untuk mengubah
        warna setiap alien ketika diklik.**"
      Dance Party 5_2019: |-
        <!--Kita bisa mengubah semua hal diprogram ini saat anda meng-klik peri. Tambahkan kode untuk merubah warna setiap alien ketika diklik.-->

        Ayo mencoba menggunakan berbagai macam event berbeda.

        Buat sebuah event keypress menggunakan <xml><block type="gamelab_keyPressed" block-text="the keypress event block"></block></xml>.

        Untuk event ini, buat sehingga ketika ditekan, setiap alien berubah warna!, pilih tombol yang anda suka, tapi jika anda menggunakan layar sentuh kami merekomendasikan _up_,_down_,_left_, atau_right_.
      Dance Party 6: "Alien ini berjalan liar!  \n\nGunakan blok <xml><block type=\"gamelab_removeAllBehaviors\"
        inline=\"true\">\n      <value name=\"SPRITE\"/>\n    </block></xml> untuk
        membuat setiap alien berhenti bergerak ketika diklik."
      Dance Party 6_2019: |-
        Alien ini berjalan dengan liar! Ayo kita tenangkan mereka dengan membunyikan bel.

        Pertama, tambahkan peri baru yang nampak seperti bel.

        Lalu, tambahkan peristiwa yang membuat setiap alien berhenti menari ketika bel diklik, gunakan <xml><block type="gamelab_removeAllBehaviors" block-text="the stops everything block"><value name="SPRITE"><block type="gamelab_allSpritesWithAnimation"><title name="ANIMATION">"blue alien"</title></block></value></block></xml>!
      Dance Party 7: "Terakhir, tambahkan peri lonceng baru bernama `myBell`.  \n\nKetika
        Anda mengekliknya, buat semua alien mulai melakukan gerakan menari yang sama!"
      Dance Party 7_2019: "Untuk alien merah muda, kesenangan menular! Menyentuh membuat
        setiap orang ingin berdansa! \n\nGunakan <xml><block type=\"gamelab_checkTouching\"
        block-text=\"the when touching event block\"><title name=\"CONDITION\">\"when\"</title><value
        name=\"SPRITE1\"><block type=\"gamelab_allSpritesWithAnimation\"><title name=\"ANIMATION\">\"blue
        alien\"</title></block></value><value name=\"SPRITE2\"><block type=\"gamelab_allSpritesWithAnimation\"><title
        name=\"ANIMATION\">\"pink alien\"</title></block></value></block></xml> untuk
        membuat alien biru memulai gerakan menari baru ketika alien merah muda menyentuhnya."
      Dance Party Freeplay: |-
        Sekarang buat disko alien Anda sendiri! Mencari inspirasi? Coba gagasan ini:

        -   Buat dua peri lonceng, dan buat alien melakukan gerakan tarian yang masing-masing berbeda
        -   Buat para alien melakukan gerakan menari baru setiap kali menyentuh satu sama lain
      Dance Party Freeplay_2019: |-
        Sekarang buat diskotek alien Anda sendiri! Mencari inspirasi? Coba ide-ide ini:

        -   Buat alien lain yang melakukan gerakan lain ketika diklik.
        -   Buat alien melakukan lebih banyak gerakan menari ketika mereka saling menyentuh.
      Dance Party Predict: "**Buat prediksi:** Berikut peri bernama `alien1`!   \n\nMenurut
        Anda, apa yang akan terjadi ketika Anda mengekliknya?"
      Dance Party Predict_2019: "**Buat prediksi:** Ini peri yang nampak seperti alien
        biru!   \n\nMenurut Anda, apa yang akan terjadi ketika Anda mengekliknya?
        \ "
      Dance_2019_01: |-
        _Ayo berpesta dansa!_

        Tarik blok <xml><block type="Dancelab_makeAnonymousDanceSprite" block-text="make a new dancer"><title name="COSTUME" config="&quot;CAT&quot;, &quot;PINEAPPLE&quot;">"CAT"</title><title name="LOCATION">{x: 200, y: 200}</title></block></xml> ke ruang kerja, lalu hubungkanlah di dalam blok <xml><block type="Dancelab_whenSetup2" next_connection_disabled="true" block-text="setup"></block></xml> untuk membuat penari pertama Anda.

        -   _Anda juga dapat mengklik bola lampu ke kiri jika Anda ingin informasi lebih lanjut atau tantangan tambahan._
      Dance_2019_02: |-
        Blok <xml><block type="Dancelab_whenKey" block-text="when up pressed"></block></xml> memungkinkan Anda menjalankan kode saat panah atas ditekan. Gunakan blok <xml><block type="Dancelab_doMoveEachLR" block-text="do once"><title name="GROUP">"CAT"</title><title name="MOVE">MOVES.XClapSide</title><title name="DIR">-1</title></block></xml> untuk membuat penari bertepuk tangan saat Anda menekan ke atas atau cobalah gerakan lain!

        _Pastikan Anda menekan panas ke atas Anda atau ![](<https://images.code.org/419e704e6841c0b696016bf5029b8cb9-image-1571864825506.06.45 PM.png>) setelah mengklik tombol Jalankan!_
      Dance_2019_03: Kini saatnya untuk kompetisi tari! Program setiap penari untuk
        bergerak ketika Anda menekan tombol berbeda. Pilihlah gerakan favorit Anda
        untuk setiap penari atau aturlah ke ‘(Acak)’ untuk sesuatu yang sama sekali
        tidak dapat diprediksi!
      Dance_2019_04: |-
        Ayo bikin penari bergerak tepat pada waktunya dengan musik!

        Tarik keluar blok <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"measures"</title></block></xml> ke ruang kerja. Hubungkanlah di bawah <xml><block type="Dancelab_changeMoveEachLR"><title name="GROUP">"SHARK"</title><title name="MOVE">MOVES.ThisOrThat</title><title name="DIR">-1</title></block></xml>. Penari Anda harus memulai gerakan baru setelah birama keempat.

        **Birama** digunakan untuk menghitung waktu dalam musik. Dalam tutorial ini, birama memiliki panjang empat ketukan.
      Dance_2019_05: "_Sekarang kita nge-groove!_ \n\nTambahkan <xml><block type=\"Dancelab_atTimestamp\"><title
        name=\"TIMESTAMP\">6</title><title name=\"UNIT\">\"measures\"</title></block></xml>
        blok ke ruang kerja Anda. Buat penari memulai gerakan baru setelah 6 birama."
      Dance_2019_06: "Gunakan blok baru ini untuk membuat kelompok penari cadangan
        yang lebih kecil di sekitar penari utama di tengah. \n  <xml><block type=\"Dancelab_makeNewDanceSpriteGroup\">\n
        \   <title name=\"N\">???</title>\n    <title name=\"COSTUME\" config=\"&quot;BEAR&quot;,
        &quot;CAT&quot;, &quot;FROG&quot;, &quot;PINEAPPLE&quot;, &quot;SHARK&quot;,
        &quot;UNICORN&quot;, &quot;SLOTH&quot;\">???</title>\n    <title name=\"LAYOUT\">\"circle\"</title>\n
        \ </block></xml>\nKini Anda dapat membuat banyak penari sekaligus!"
      Dance_2019_07: "Setiap penari memiliki sejumlah _properti_ yang mengontrol seperti
        apakah penampakannya. \n\nGunakan <xml><block type=\"Dancelab_setPropEach\"
        block-text=\"the set block\"><title name=\"GROUP\" config=\"sprites, &quot;BEAR&quot;,
        &quot;CAT&quot;, &quot;DUCK&quot;, &quot;FROG&quot;, &quot;PINEAPPLE&quot;,
        &quot;SHARK&quot;, &quot;UNICORN&quot;, &quot;SLOTH&quot;\">???</title><title
        name=\"PROPERTY\">\"scale\"</title><title name=\"VAL\">???</title></block></xml>
        di bawah blok acara hijau untuk membuat penari tampak lebih dekat atau lebih
        jauh."
      Dance_2019_08: Penari memiliki properti "warna" yang dapat menambahkan lapisan
        warna. Cobalah mengubah warna salah satu penari Anda (atau seluruh kelompok)!
      Dance_2019_09: |-
        Ini adalah jenis acara khusus yang dipicu secara berulang-ulang.

        <xml><block type="Dancelab_everySeconds"><title name="N">2</title><title name="UNIT">"measures"</title></block></xml>

        Blok baru lainnya dalam kotak alat Anda memungkinkan Anda untuk secara perlahan (atau secara acak!) mengubah properti penari seiring waktu berjalan.

        _Berkreasilah dan selamat bersenang-senang!_
      Dance_2019_10: Hidupkan groove Anda! Ciptakan tarian Anda sendiri untuk dibagikan
        ke teman-teman.
      Dance_Party_01: "_Mari kita berpesta tari!_\n\nTarik blok `buat baru` ke ruang
        kerja, lalu hubungkan di dalam blok `penyetelan` untuk menciptakan penari
        pertama Anda. \n\n-   _Anda juga dapat mengklik bola lampu ke kiri jika Anda
        ingin informasi lebih lanjut atau tantangan tambahan._"
      Dance_Party_02: |-
        Ayo bikin rusa ini menari!

        Tarik keluar <xml><block type="Dancelab_changeMoveLR"><title name="SPRITE">new\_dancer</title><title name="MOVE" config="MOVES.Dab, MOVES.Drop, MOVES.Floss">Floss</title><title name="DIR">-1</title></block></xml> blok ke ruang kerja. Hubungkanlah di bawah <xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">4</title><title name="UNIT">"measures"</title></block></xml> blok. Penari Anda harus memulai gerakan baru setelah birama keempat.

        **Birama** digunakan untuk menghitung waktu dalam musik. Dalam tutorial ini, birama memiliki panjang empat ketukan.
      Dance_Party_03: "_Sekarang kita nge-groove!_ \n\nTambahkan <xml><block type=\"Dancelab_atTimestamp\"><title
        name=\"TIMESTAMP\">6</title><title name=\"UNIT\">\"measures\"</title></block></xml>
        blok ke ruang kerja Anda. Buat penari memulai gerakan baru setelah 6 birama."
      Dance_Party_04: |-
        _Tari ini memerlukan flash!_

        Cari blok baru di kotak alat Anda yang menambahkan efek latar belakang di belakang penari Anda. Perhatikan efeknya berubah tepat pada waktunya dengan musik!
      Dance_Party_05: |-
        Gunakan blok baru lainnya untuk membuat penari mengganti gerakan **setiap 2 birama**!

        -   Memilih `(Berikutnya)`, `(Sebelumnya)`, atau `(Acak)` akan menyuruh penari melakukan gerakan berbeda setiap kali kode dijalankan.
      Dance_Party_06: |-
        _Kita membutuhkan lebih banyak penari!_

        Ciptakan penari cadangan yang disebut `penari_cadangan1` untuk menari dengan kucing.
      Dance_Party_08: |-
        Setiap penari memiliki sejumlah _properti_ yang mengontrol seperti apakah penampakannya.

        Anda dapat membuat seperti tampak ada penari di latar belakang dengan menjadikan _ukuran_ mereka lebih kecil. Dapatkah Anda membuat kedua penari cadangan berukuran sama?
      Dance_Party_09: |-
        Penari memiliki properti ""warna"" yang dapat menambahkan lapisan warna. Cobalah mengubah warna salah satu penari Anda.

        -   Warna akan mencampur warna yang Anda pilih dengan warna penari.
      Dance_Party_10: |-
        Sekarang kita tahu bagaimana mengubah properti penari. kita juga bisa membuat properti yang sama secara otomatis respon ke musik menggunakan blok ini:<xml>
        <block type="Dancelab_startMapping">

        <title
         name="SPRITE">right \_unicorn</title>
        <title name="PROPERTY">" scale"<title name="RANGE"></title> "bass"</title>
        </block></xml>

        Program ini menggunakan musik volume "bass" (suara randah) untuk mengontrol tinggi seorang penari. Bisakah kamu membuat penari lain merespon musik juga?
      Dance_Party_11: "Blok <xml><block type=\"Dancelab_whenKey\"></block></xml> memungkinkan
        Anda menjalankan kode ketika panah atas ditekan. \n\nAnda dapat mengubah gerakan
        menari, mengubah properti penari, atau melakukan gerakan cepat hanya sekali.
        Jadilah kreatif dan cari blok baru!"
      Dance_Party_11_5: |-
        Periksa blok ini:

        <xml>
          <block type="Dancelab_makeNewDanceSpriteGroup">
            <title name="N">6</title>
            <title name="COSTUME">"DUCK"</title>
            <title name="LAYOUT">"circle"</title>
          </block></xml>

        Kini Anda dapat menciptakan banyak penari sekaligus!

        Cobalah menggunakan beberapa blok ""semua bebek"" untuk menulis kode yang akan membuat semua bebek menari bersama.
      Dance_Party_11b: |-
        Kini saatnya untuk kompetisi tari! Kucing melakukan dab saat Anda menekan tombol panah kiri. Buat Robot "jatuh" begitu Anda menekan tombol panah kanan, dan "bertepuk tangan" begitu Anda menekan tombol panah atas.

        **Gunakan tombol-tombol untuk membuat Robot jatuh-bertepuk tangan-jatuh-bertepuk tangan secepat mungkin!**
      Dance_Party_12: Hidupkan groove Anda! Ciptakan tarian Anda sendiri untuk dibagikan
        ke teman-teman.
      Dance_Party_extras_alternate_2019: "# Maju Mundur!\n\nTerkadang Anda mungkin
        ingin membuat pola gerakan tari yang Anda pilih. Blok baru ini memungkinkan
        Anda melakukan hal tersebut. \n\n<xml><block type=\"Dancelab_alternateMoves\"><title
        name=\"GROUP\">sprites</title><title name=\"N\">2</title><title name=\"MOVE1\">MOVES.Roll</title><title
        name=\"MOVE2\">MOVES.ClapHigh</title></block></xml> \n\nGerakan yang Anda
        pilih di atas akan diulang secara berurutan selamanya. \n\n-   Buatlah rutinitas
        yang bergantian untuk penari pertama di depan!\n-   Gunakan angka yang berbeda
        untuk mengubah tingkat kecepatan di mana gerakan akan berganti. Cobalah `1`
        atau `0,5` untuk berganti secara lebih cepat!"
      Dance_Party_extras_battle: |-
        # Kru Tari

        Ini adalah kompetisi tari antara dua kru. Tombol panah mengontrol salah satu penari dan tombol "w,a,s,d" mengontrol yang lain. Silakan berkompetisi tari dengan teman, lalu cobalah meningkatkan kompetisi tari ini.

        -   Menambahkan tombol lebih banyak untuk mengontrol tarian
        -   Membuat penari cadangan untuk juga merespons saat tombol ditekan
        -   Mengganti penari setiap 4 birama dengan mengatur visibilitas mereka
      Dance_Party_extras_battle_2019: |-
        # Kru Tari

        Ini adalah kompetisi tari antara dua kru. Tombol panah mengontrol salah satu penari dan tombol "w,a,s,d" mengontrol yang lain. Silakan berkompetisi tari dengan teman, lalu cobalah meningkatkan kompetisi tari ini.

        -   Menambahkan tombol lebih banyak untuk mengontrol tarian
        -   Membuat penari cadangan untuk juga merespons saat tombol ditekan
        -   Mengganti penari setiap 4 birama dengan mengatur visibilitas mereka
      Dance_Party_extras_every_beat: |-
        # Not Seperempat

        Sebagian besar penari kita telah menggunakan birama penuh, tetapi setiap birama terdiri atas 4 not seperempat. Tarian ini menggunakan `setiap 0,25 birama` untuk membuat penari bertepuk tangan pada setiap not seperempat.

        Tarian ini juga menggunakan _blok_ bersyarat untuk mengontrol kapan blok `setiap 0,25 birama` dapat mengubah tarian. Cobalah mengubah angka dalam blok bersyarat untuk melihat bagaimana hal itu mengubah tarian.

        -   Bereksperimenlah dengan durasi not lain (seperti 0,5 untuk setengah not atau 0,125 untuk not kedelapan).
        -   Tambahkan beberapa acara `setelah birama`.
        -   Tukar ""birama"" dengan ""detik"" cobalah mengatur waktu tarian Anda seperti itu.
      Dance_Party_extras_every_beat_2019: |-
        "# Not Seperempat

        Sebagian besar penari kita telah menggunakan birama penuh, tetapi setiap birama terdiri atas 4 not seperempat. Tarian ini menggunakan <xml><block type="controls_if"><value name="IF0"><block type="logic_compare"><title name="OP">LT</title><value name="A"><block type="Dancelab_getTime"><title name="UNIT">"measures"</title></block></value><value name="B"><block type="math_number"><title name="NUM">5</title></block></value></block></value><statement name="DO0"></statement></block></xml> untuk membuat penari bertepuk tangan setiap not seperempat, tetapi hanya untuk 4 birama pertama.

        Cobalah mengubah angka di dalam blok untuk melihat bagaimana hal itu mengubah tarian.

        -   Bereksperimenlah dengan durasi not lain (seperti 0,5 untuk setengah not atau 0,125 untuk not kedelapan).
        -   Tambahkan beberapa acara lain.".
      Dance_Party_extras_layout: |-
        # Ayo Masuk Formasi!

        Lihat tarian ini yang menggunakan blok `layout` untuk mengubah formasi penari cadangan 'sepanjang tarian. Cobalah salah satu dari ide-ide ini untuk memperluasnya:

        -   Buat grup penari kedua dalam tata letak yang berbeda
        -   Ubah tata letak saat tombol ditekan
        -   Ubah properti ketika penari mengubah formasi
      Dance_Party_extras_layout_2019: |-
        # Ayo Masuk Formasi!

        Lihatlah tarian ini yang menggunakan blok <xml><block type="Dancelab_layoutSprites" block-text="layout"><title name="GROUP">"MOOSE"</title><title name="FORMAT">???</title></block></xml> untuk mengubah formasi penari cadangan sepanjang tarian. Cobalah salah satu dari ide-ide ini untuk memperluasnya:

        -   Buat grup penari kedua dalam tata letak yang berbeda
        -   Ubah tata letak ketika tombol ditekan
        -   Ubah properti ketika penari mengubah formasi
      Dance_Party_extras_mixed_2019: "# Lebih Banyak\n\nTombol Tarian ini memungkinkan
        Anda mengontrol properti penari dalam waktu nyata sementara mereka menari
        secara otomatis. Cobalah melakukan perubahan properti lainnya ketika Anda
        menekan tombol. Misalnya: \n\n-   Acak warna penari ketika Anda menekan \"bawah\".
        \n-   Tambahkan kelompok penari dengan tata letak acak ketika Anda menekan
        \"ruang\"."
      Dance_Party_extras_on_beat: |-
        # Bas, Mid, dan Treble

        Tarian ini menggunakan acara "puncak" untuk memicu kode ketika bagian musik yang berbeda menjadi keras. Cobalah mengutak-atik lagu yang berbeda untuk melihat bagaimana mereka mengubah tarian.
      Dance_Party_extras_on_beat_2019: |-
        # Bas, Mid, dan Treble

        Tarian ini menggunakan acara "puncak" untuk memicu kode ketika bagian musik yang berbeda menjadi keras. Cobalah mengutak-atik lagu yang berbeda untuk melihat bagaimana mereka mengubah tarian.
      Dance_Party_extras_speed: |-
        # Percepat, Perlambat

        Tarian final ini menggunakan blok `atur kecepatan` untuk mengontrol seberapa cepatnya setiap penari bergerak. Cobalah bereksperimen dengan kecepatan yang berlainan pada berbagai titik berbeda dalam lagu. Silakan terus mengutak-atik tarian ini, atau kembalilah ke tarian sebelumnya untuk membuatnya semakin keren.
      Dance_Party_extras_speed_2019: |-
        # Percepat, Perlambat

        Tarian final ini menggunakan blok <xml><block type="Dancelab_setDanceSpeedEach"><title name="GROUP">"SHARK"</title><title name="SPEED">2</title></block></xml> untuk mengontrol seberapa cepat setiap penari bergerak. Cobalah bereksperimen dengan kecepatan yang berlainan pada berbagai titik berbeda dalam lagu. Silakan terus mengutak-atik tarian ini, atau kembalilah ke tarian sebelumnya untuk membuatnya semakin keren.
      Dance_Party_extras_visible: |-
        # Kemana Mereka Pergi?

        Tarian ini memperlihatkan dan menyembunyikan dua kelompok penari yang berbeda. Silakan dicek lalu cobalah menambahkan bakat Anda sendiri.

        -   Tambahkan kelompok penari lain
        -   Perlihatkan dan sembunyikan penari dengan tombol panah
        -   Sembunyikan semua penari dan beralihlah ke efek latar belakang yang mengasyikkan
      Dance_Party_extras_visible_2019: |-
        # Kemana Mereka Pergi?

        Tarian ini memperlihatkan dan menyembunyikan dua kelompok penari yang berbeda. Silakan dicek lalu cobalah menambahkan bakat Anda sendiri.

        -   Tambahkan kelompok penari lain
        -   Perlihatkan dan sembunyikan penari dengan tombol panah
        -   Sembunyikan semua penari dan beralihlah ke efek latar belakang yang mengasyikkan
      Escape Room Example: |-
        # Room Escape

        Workshop hari ini anda akan bekerja membuat sebuah aplikasi room escape!
        Level ini memiliki contoh aplikasi yang harus anda mainkan untuk mendapatkan rasa pada apa yang akan anda buat.

        # Lakukan ini

        \-Klik RUN untuk memulai aplikasi
        \-Coba temukan kunci yang akan membuka pintu.
      Final Personal Website: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (_Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/">website </a>._)
      Final Personal Website_2018: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/" target="_new">website </a>.*)
      Final Personal Website_2019: |-
        # Personal Website

        This is it! You have been working on your Personal Website for the whole unit. Put the finishing touches on it and submit it to your teacher! Remember to use the problem solving process as your guide in preparing your final product.

        # Do This

        -   Define: Read the rubric so you know what is expected
        -   Plan: Decide what you still need to work on and put those things in priority order
        -   Try: Implement your improvements to your personal website.
        -   Reflect: Get feedback from a classmate and decide what of that feedback to act on.

        Don't forget to take a screenshot of your home page and save it somewhere on your computer so you can find it later (*Need help with how to screenshot? Check out this <a href="http://www.take-a-screenshot.org/" target="_new">website </a>.*)
      Final Room Escape App: |-
        # Anda sudah melakukannya!

        Anda telah membuat escape room! Waktunya untuk menyesuaikannya.

        Pertimbangkan:

        \-Tambahkan beberapa gaya dalam ruangan
        \-Tambahkan lebih banyak benda/hal yang pengguna bisa berinteraksi dengannya di dalam ruangan
        \-Coba buat kode rahasia acak
        \-Tambahkan lebih banyak ruang
      Fish Tank 1-validated: "**Buat prediksi**: Menurut Anda, apa yang akan terjadi
        ketika Anda menjalankan kode ini?"
      Fish Tank 2-validated: "Ayo kita membuat tangki ikan!  \n\nUbah Dusty (tumbleweed)
        menjadi ikan."
      Fish Tank 2-validated_2019: |-
        Ayo membuat kolam ikan!

        Ubah peri tumbleweed menjadi berbagai jenis ikan dengan meng-klik <xml><block type="gamelab_allSpritesWithAnimation" block-text="the sprite picker block"><title name="ANIMATION">"tumbleweed"</title></block></xml>.

        Pastikan juga memperbaharui kostum peri dalam <xml><block type="gamelab_addBehaviorSimple" block-text="the add behavior block"></block></xml>.
      Fish Tank 3-validated: "Ikan mulai pusing! \n\nUbah perilaku ikan sehingga berenang
        di sekitar tangki."
      Fish Tank 3-validated_2019: "Ikan mulai pusing! \n\nUbah perilaku ikan sehingga
        berenang ke kiri dan kanan."
      Fish Tank 4-validated: "Tangki ikan kami membutuhkan air! \n\nGunakan <xml><block
        type=\"gamelab_setBackground\" inline=\"true\">\n    <value name=\"COLOR\">\n
        \     <block type=\"colour_picker\">\n        <title name=\"COLOUR\">#0000ff</title>\n
        \     </block>\n    </value>\n  </block></xml> untuk membuat latar belakang
        warna biru."
      Fish Tank 4-validated_2019: |-
        Kolam ikan perlu air!

        Gunakan<xml><block type="gamelab_setBackground" inline="true" block-text="the set background color block">
        <value name="COLOR">
        <block type="colour_picker">

        <title name="COLOUR">000ff</title>
        </block>
        </value>
        </block></xml> untuk membuat berbagai warna latar. Kami merekomendasikan biru!
      Fish Tank 5-validated: Ikan kami menjadi sedikit kesepian. Tambahkan peri lain
        ke tangki ikan.
      Fish Tank 5-validated_2019: Ikan adalah petualang dan ingin bertemu dengan mahluk
        baru di laut. Tambahkan peri lain ke kolam ikan. Peri ini bisa memiliki berbagai
        macam kostum lain selain yang anda gunakan untuk ikan!
      Fish Tank 6-validated: "Apa yang Anda ingin teman baru ikan Anda lakukan?   \n\nTambahkan
        perilaku dan lihat mereka pergi!"
      Fish Tank 6-validated_2019: |-
        Apa yang Anda inginkan dari teman baru ikan Anda untuk dilakukan?

        Tambahkan perilaku dan lihat mereka pergi!
      Fish Tank 7-validated: "Kami telah menambahkan banyak blok baru ke kotak perlengkapan.
        \  \n\nBermain bersama mereka untuk membuat tangki ikan Anda istimewa!"
      Fish Tank 7-validated_2019: "Kami telah menambahkan banyak blok baru ke kotak
        perlengkapan.   \n\nBermain bersama mereka untuk membuat tangki ikan Anda
        istimewa!"
      Fish Tank Predict: "**Buat prediksi**: Menurut Anda, apa yang akan terjadi ketika
        Anda menjalankan kode ini?"
      Fish Tank Predict_2019: "**Buat prediksi**: Menurut Anda, apa yang akan terjadi
        ketika Anda menjalankan kode ini?"
      Frequency Analysis: |-
        # Break a random substitution cipher!

        Messages encrypted with the **Caesar cipher** are very easy to crack. What if instead of shifting the whole alphabet, we mapped every letter of the alphabet to a random different letter of the alphabet? This is called a **random substitution cipher**.

        In this version of the tool, you'll be interacting more with the graphs that show letter frequency. By analyzing the frequency of the letters in the encrypted input message compared to the frequency of letters in a typical piece of English prose, you can start to narrow in on what some of the letter mappings might be. Did you know that _'E'_ is the most common letter used in the English language? Maybe the most common letter in your encrypted text maps to the letter _'E'_, but maybe not! You'll have to do a bit of guess and check to see if that substitution makes sense.

        # Do this

        -   Load the **Sample message (hard)** from the message dropdown. This will load a message that has been encrypted with a random substitution cipher.\
            ![](https://images.code.org/04c6230c9607110126581c298bc09183-image-1443569176380.gif)

        -   You will crack the message by guessing what each letter of the alphabet contained in the original ciphertext should be changed to. You can do so by dragging the blue letters of the alphabet directly underneath the orange letter you want changed in the original ciphertext. Letters that have been changed using your guesses will no longer be highlighted orange in the message window on the left.
            ![](https://images.code.org/da9a7af7568d8c1698872ab91b4d79d7-image-1443572471212.gif)

        -   Play with some of the sorting options available in the Random substitution cipher tab to get different views on the letter frequencies in the input text as well as standard English text.
            ![](https://images.code.org/82efbca1807206c9a07de520fdb22027-image-1443572614493.23.28.png)

        See how long it takes you to crack the cipher! Is this a good method of encrypting secret data?
      Function intro Ryan: "**Fungsi** bernama `bangun jembatan` ada di ruang kerja
        Anda.  Semua kode yang Anda butuhkan untuk melintasi sungai dibuat dengan
        benar! \n\nPosisikan blok hijau <xml> <block type=\"procedures_callnoreturn\"
        id=\"callMe\"><mutation name=\"build bridge\"/></block></xml> kecil dua kali
        ke ruang kerjamu untuk memperbaiki jalur dan bawa {currentPlayerName} ke Obor
        Batu Merah [redstone_torch]."
      Function intro Ryan_2019: "**Fungsi** bernama `bangun jembatan` ada di ruang
        kerjamu.  Semua kode yang kamu butuhkan untuk menyeberangi sungai sudah tersedia!
        \\\r\n \\\r\nPosisikan blok hijau kecil dua kali ke ruang kerjamu untuk memperbaiki
        jalur dan bawa {currentPlayerName} ke Obor Batu Merah [redstone_torch]."
      Gamelab StartScreen Change State: |-
        # Changing the State

        Now that you can display a different screen according to the state of your program, you will need a way to change between states.  To go from the "starting" state to the "playing" state, you can have the user press the "s" key.  You'll **only** want the program to check for the key press when the program is in the "starting" state, so your code for this will go inside the "starting" conditional.  Putting one `if` block inside another is called **nesting** conditionals.

        ## Do this

        -   Inside the `if` statement that checks for "starting", add in a new `if` statement that checks whether the user has pressed the "s" key.  (`if (keyDown("s")) {`)
        -   Inside your new `if` statement, set the value of your `gameState` variable to "playing". (`gameState = "playing";`)
        -   Test the code by starting the game and pressing "s".  The game should start playing after the key is pressed.

        If the game isn't starting on the start screen, double check that when the `gameState` variable is created at the beginning of the program, its value is "starting".  (`var gameState = "starting";`)
      Gamelab StartScreen Check State: |-
        # Checking Game State

        Now that you have your game state stored in a variable, you can check it to determine what should be displayed.  This should happen inside the draw loop, since it's something that will change as the program is being run.  The program should check whether the game is in the "playing" state, and only run the program if it is.  We can worry about the other states later.

        ## Do This

        -   Inside the draw loop, add a conditional (`if` statement).
        -   For the condition, check if `gameState == "playing"`.
        -   Move the rest of the code from the draw loop inside the `if` statement, so it only runs if the game is "playing".
        -   Run the program.  Nothing should happen because the game is still in the "starting" state.
        -   Go back to where you set the value of your `gameState` variable and change it from "starting" to "playing".
        -   Run the game again, and it should play normally, because it is now in the "playing" state.
        -   Change the value of the variable back to "starting".

        (It is important to find ways to check your code as you go, rather than wait until the end of many complex changes to run it.  By checking both the playing and starting states, you know that your conditional is working properly and that the game should play while in the "playing" state.)
      Gamelab StartScreen Check States: |-
        # Check all States

        Right now the only state your program can deal with is "playing", but you can add more conditionals to account for the other three states.

        ## Do this

        -   Inside the draw loop, add in three more `if` statements that check for `gameState == "starting"`, `gameState == "won"`, and `gameState == "lost"`, respectively.
        -   Inside each `if` statement, add code that will draw text to the screen, so you can see the results of the different states.  You may also want to use `drawSprites` so you can see the background image and the player sprites, but make sure you are drawing the text on top of the sprites.
        -   Check your code by running the program in the different states.  (Don't worry about making them perfect yet, just make sure that the conditionals are working as they should.)

        In order to keep track of your code, you might find it useful to create a function for each of the different text displays, then call those functions inside the conditionals.
      Gamelab StartScreen End Game: |-
        # Ending the Game

        Next, you'll need to add code that changes the state of the game when you lose.   Scroll down to the bottom of the program, to the `gameStatus` function.  Inside the function, the program checks the score and lives variables to check whether the use should win or lose the game.  Instead of displaying a win or lose message, you'll want to change the state of the game to "won" or "lost";

        ## Do this

        -   Inside the `gameStatus` function, replace the code `text("You Won!", 35, 200);` with `gameState = "won"`.
        -   Inside the `gameStatus` function, replace the code `text("You Lost!", 35, 200);` with `gameState = "lost"`.
        -   Check your code by running the game and losing.
        -   Check your code by running the game and winning.

        (To make the game much easier to win, change the original number of lives to 1000 by replacing `var lives = 3;` to `var lives = 1000;`.)
      Gamelab StartScreen Hide Sprites: |-
        # Hide and Show Sprites

        You may prefer that the platform, coin, and rock sprites only be visible when the game is playing.  You can change the game setup to set their visible property to `false` at the beginning of the game, then set it to `true` when you start the game, then `false` again when the game is won or lost.

        ## Do this

        -   Add code after you create your platforms, gold, and rocks sprite groups that sets those sprite groups' visible properties to `false` (e.g. `platforms.setVisibileEach(false);` )
        -   In the same  three places where you set `gameState = "playing";`, set the sprite groups' visible properties to `true`.
        -   In the same places where you set `gameState = "lost";` and `gameState = "won";`, set the sprite groups' visible
        -   Check your code by running the game and losing and restarting the game.
        -   Check your code by running the game and winning and restarting the game.
      Gamelab StartScreen Intro: |-
        # Start and End Screens

        This tutorial will teach you how to make start and end screens in Game Lab, as well as restart the game from the end screen.

        Hit run to play the game on the left.  Follow the instructions on the start screen to play.  Once the game is over, follow the instructions on the end screen to restart the game.

        In the next bubble, you'll see the code for game play and start to add your own start and end screens.

        ## Start Screen

        The start screen is the introductory screen that appears before the user starts playing the game.  It usually has the title of the game and some basic instructions for playing.  It might also include the game developer.

        ## End Screen

        The end screen appears after the user has won or lost the game.  It sometimes includes the final score, player rankings or other information.  It can also have an option to play the game again.
      Gamelab StartScreen Restart Game: |-
        # Restarting the Game

        Last, you'll need to add code that restarts the game.   This is similar to how you started the game by having the user press the "s" key.  This time, you'll need to check during the "lost" and "won" states.  If the user presses the "r" key during on of these states, you should restart the game by setting the `gameState` to "playing" and also resetting the `score` and `lives` variables to 0 and 3, respectively.

        ## Do this

        -   Inside the `if (gameState == "lost") {` statement, add an if statement that checks whether the user has pressed the "r" key.
        -   Inside your new `if` statement, set `score` to 0, `lives` to 3, and `gameState` to "playing".
        -   Inside the `if (gameState == "won") {` statement, add an if statement that checks whether the user has pressed the "r" key.
        -   Inside your new `if` statement, set `score` to 0, `lives` to 3, and `gameState` to "playing".
        -   Inside the `gameStatus` function, replace the code `text("You Lost!", 35, 200);` with `gameState = "lost"`.
        -   Check your code by running the game and losing and restarting the game.
        -   Check your code by running the game and winning and restarting the game.
      Gamelab StartScreen State: |-
        # Game State Variable

        Our sample game had four different scenarios (or **states**) that we need to keep track of in order to display the right screen: "starting", "playing", "won", and "lost".  The first step in adding a start or end screen to the game is creating a variable to keep track of any changes in the state of the game.

        ## Do This

        -   Declare a variable called `gameState` at the beginning of the program.  (A good place to do this would be near where `score` and `lives` are declared.
        -   Set the initial value of  your `gameState` variable to "starting"

        (Because you are not using this variable yet, you will see a warning triangle next to the line where it is declared.  It also will not affect how the program runs.)
      Gamelab StartScreen base code: |-
        # Game Code

        This is the code for the game without the start and end screens.  The function `gameStatus` (called on line 43 and defined on line 208) checks whether the user has won or lost, but it only adds a text message to the screen.  Gameplay also continues even after the game is over.

        ## Do This

        Read the code, in particular the code before the draw loop (lines 1-24), inside the draw loop (lines 27-43), and inside the `gameStatus` function (lines 209-224).  It's okay if you don't understand everything in the game, but you should see that the code before the draw loop sets up the sprites, and the code inside the draw loop controls the gameplay.
      Geometric Sun: "**Ide Proyek:** Buat pola menggunakan ide-ide geometris seperti
        bentuk. Ini membutuhkan kegigihan dan perencanaan!"
      Geometric Sun_2018: "**Ide Proyek:** Buat pola menggunakan ide-ide geometris
        seperti bentuk. Ini membutuhkan kegigihan dan perencanaan!"
      HOC 2018 Level_1: Anda perlu persediaan untuk perjalanan selanjutnya. Kumpulkan
        **perahu**![](https://images.code.org/0b3162de9dc0abf3e0890d315b8cc699-image-1538697977747.png)
        dari **peti**![](https://images.code.org/e0cf43fd36a50dd16ee06595047bfd8f-image-1538697999418.png).
      HOC 2018 Level_10: Ada **cumi-cumi** ![](https://images.code.org/82f305ab1cb4a9ff9044991a18edb16e-image-1538947827218.png)
        sedang bersembunyi di suatu tempat di Monumen Laut ini, dapatkah Anda menemukannya?
      HOC 2018 Level_11: Bangun dinding **prismarine** ![](https://images.code.org/d110b8d13c01756fcdbef3768b2e2859-image-1538699770898.png)
        di sekitar beton hitam. Ini akan mengaktifkan **pipa** ![](https://images.code.org/7773cf30f42e6727a23c8cb364d4664b-image-1538699800030.png)
        dan menyelesaikan tantangan Anda!
      HOC 2018 Level_12: Selamat! Dunia air terbuka menunggumu.Bangun sebuah batu
        karang! Sebuah gunung! Kapal karam! Terserah padamu
      HOC 2018 Level_2: Perahu jauh lebih mudah berjalan di perairan terbuka! Menuju
        ujung galangan kapal untuk menaiki kapal.
      HOC 2018 Level_3: Ambil dayung dan jalankan perahumu menyebrangi lautan untuk
        menangkap **ikan kod**![](https://images.code.org/9b636884eefb1efe18f9f844e1e916a9-image-1538698597353.png).
      HOC 2018 Level_4: Ayo beri makan ikan kod untuk **lumba-lumba**![](https://images.code.org/8c240fd4df4da2795ba7ca942b77a057-image-1538947890991.png).
        Gunakan lingkaran sampai blok untuk menyebrangi lautan lebih cepat.
      HOC 2018 Level_5: Ada **kerang nautillus** ![](https://images.code.org/2eb084fa0c718dee6ca4b6379381f735-image-1538698936660.png)
        bersembunyi di suatu tempat! Jelajahi kapal karam untuk mencapai **peti**
        ![](https://images.code.org/16cdd5779b38909d4bf47b29535c92b0-image-1538698950602.png).
      HOC 2018 Level_6: Tampak beku di sana! Tangkap **salmon** ![](https://images.code.org/c66eadf25b3cdfe20bbfdc91e2c28c94-image-1538699000102.png)
        dalam perjalanan ke reruntuhan bawah laut.
      HOC 2018 Level_7a: Anda menemukan reruntuhan bawah laut. Pencarian batu pasir
        untuk **peti** ![](https://images.code.org/29a5fd76b869d755a60d39fbbb4057eb-image-1538699081910.png)
        yang memuat **prismarine** ![](https://images.code.org/5f5ebe5121b8f9787d7dbd38ad0a86cc-image-1538699091018.png)
        harta karun.
      HOC 2018 Level_8: Pertama gunung es, sekarang lava? Lintasi pulau vulkanik ini
        dan temukan **ikan tropis** ![](https://images.code.org/6d3293e7709cb1a43d9f7617fd0cc2b8-image-1538699180397.png)
        di batu karang.
      HOC 2018 Level_9b: Anda berhasil mencapai karang, sekarang cari **Jantung Laut**![](https://images.code.org/3035926d2a37aa695b5d47413adcffa2-image-1538699398781.png)
        ! Gunakan karang biru dan merah untuk mencapai harta karun **peti** ![](https://images.code.org/af697397dd70e5b6b93b00eb46c558af-image-1538699377397.png).
      InspirationalArtwork: "Sekarang anda mempelajari semuanya yang Anda perlu ketahui
        untuk membuat pola seperti ini! \n\nJika gambar ini memberi Anda inspirasi,
        coba untuk membuat sesuatu yang mirip. Jika tidak, ciptakan sesuatu dengan
        sendiri."
      InspirationalArtwork_2018: "Sekarang anda mempelajari semuanya yang Anda perlu
        ketahui untuk membuat pola seperti ini! \n\nJika gambar ini memberi Anda inspirasi,
        coba untuk membuat sesuatu yang mirip. Jika tidak, ciptakan sesuatu dengan
        sendiri."
      Intro to Web Lab - Part 1_2019: "## Pertanyaan untuk dipertimbangkan:\n\n-   Apa
        perbedaan  bagian bagian dari Web \n    Lab, dan apa fungsinya?"
      Intro to Web Lab - Part 2_2019: |-
        ## Pertanyaan untuk dipertimbangkan

        -   Mengapa tags HTML  berguna?
        -   Apa yang tag paragrap lakukan?
      Introduction to Variables - Part 1_2019: |-
        ## Questions to Consider

        -   What are variables used to do?
        -   How do you create a variable and assign it a value?
        -   What can go into a variable?
      K-1 Bee Loops 2: Use a `repeat` loop to move and then get the nectar and make
        honey!
      K-1 Bee Loops 3: Use three `repeat` loops to get the nectar and make honey!
      K-1 Bee Loops 4: Use `repeat` loops to get the nectar, make honey, and to move!
      K-1 Bee Loops 5: Gunakan perulagan untuk mendapatkan nektar dan madu!
      K-1 Bee Loops 6: Use a `repeat` loop to get the nectar, get honey, and to move!
      K-1 Maze Loops 10: |-
        Get me to the pig!\
        Using the `repeat` loop will make it much easier.
      K-1 Maze Loops 11: |-
        Get me to the pig!\
        The `repeat` loop will make this easier.
      K-1 Maze Loops 12: |-
        Get me to the pig!\
        The `repeat` loop will make this easier.
      K-1 Maze Loops 2: Menggunakan blok 'ulangi' untuk mendapatkan saya ke babi!
      K-1 Maze Loops 3: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 5: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 6: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 7: |-
        Get me to the pig!\
        Be sure to use `repeat` loops.
      K-1 Maze Loops 8: Use `repeat` loops to get me to the pig.
      K-1 Maze Loops Assessment 1: |-
        Look at all we've learned!\
        Use a `repeat` loop to get me to the pig!
      MC HOC 2016 SCORE LEVEL: |-
        Beberapa permainan membiarkan anda meyimpan skor. Mainkan tag dengan Iron Golem dan gunakan blok <xml><block type="craft_addScore"><title name="SCORE">1</title>
        </block></xml>untuk memberimu sebuah poin saat anda men-tagnya!
      MC_HOC_2017_01_RETRY: "Pintunya terkunci, tetapi Agen siap membantu!\n\nPosisikan
        blok `bergerak maju` ke bagian bawah blok `ketika dijalankan` di ruang kerja
        untuk membawa Agent ke pelat tekanan [PressurePlate_Up], lalu tekan \"Jalankan\"
        dan gunakan tombol panah untuk memindahkan ke luar rumah untuk mengumpulkan
        **peti** [chest].  "
      MC_HOC_2017_01_RETRY_2019: "Pintunya terkunci, tetapi Agen siap membantu!\n\nPosisikan
        blok `bergerak maju` ke bagian bawah blok `ketika dijalankan` di ruang kerja
        untuk membawa Agent ke pelat tekanan [PressurePlate_Up], lalu tekan \"Jalankan\"
        dan gunakan tombol panah untuk memindahkan ke luar rumah untuk mengumpulkan
        **peti** [chest].  "
      MC_HOC_2017_02_Cole: "{currentPlayerName} pergi berpetualang! Untuk membantu,
        dapatkan **peta** [map_empty] di balik pintu terkunci di sebelah kanan. \n\nPosisikan
        kode ke ruang kerja untuk memindahkan Agent ke pelat tekanan [PressurePlate_Up]
        sehingga {currentPlayerName} dapat melewatinya."
      MC_HOC_2017_02_Cole_2019: "{currentPlayerName} pergi berpetualang! Untuk membantu,
        dapatkan **peta** [map_empty] di balik pintu terkunci di sebelah kanan. \n\nPosisikan
        kode ke ruang kerja untuk memindahkan Agent ke pelat tekanan [PressurePlate_Up]
        sehingga {currentPlayerName} dapat melewatinya."
      MC_HOC_2017_03_Cole: "{currentPlayerName} melanjutkan petualangan dan membutuhkan
        **kompas** [compass] untuk mempersiapkan perjalanan.  \n\nBuat kode agar Agent
        membuka gerbang. "
      MC_HOC_2017_03_Cole_2019: "{currentPlayerName} melanjutkan petualangan dan membutuhkan
        **kompas** [compass] untuk mempersiapkan perjalanan.  \n\nBuat kode agar Agent
        membuka gerbang. "
      MC_HOC_2017_04POINT5_RYAN: "Anda berhasil menyeberang! \n\nSekarang, bawa {currentPlayerName}
        dengan aman melalui labirin untuk mengumpulkan **kapak** [diamond_axe]"
      MC_HOC_2017_04POINT5_RYAN_2019: "Anda berhasil menyeberang! \n\nSekarang, bawa
        {currentPlayerName} dengan aman melalui labirin untuk mengumpulkan **kapak**
        [diamond_axe]"
      MC_HOC_2017_04_Cole: "Agent dapat bergerak melintasi air! \n\nGunakan lingkaran
        `ulangi` untuk memecahkan teka-teki ini dan membantu {currentPlayerName} menuju
        ke **ember** [bucket_empty] di balik pintu. "
      MC_HOC_2017_04_Cole_2019: "Agent dapat bergerak melintasi air! \n\nGunakan lingkaran
        `ulangi` untuk memecahkan teka-teki ini dan membantu {currentPlayerName} menuju
        ke **ember** [bucket_empty] di balik pintu. "
      MC_HOC_2017_05_Cole: "Oh tidak, jembatannya hilang! \n\nBuat kode agar Agent
        membangun kembali jembatan menggunakan blok <xml>  <block type=\"craft_placeBlock\">\n
        \   <title name=\"TYPE\">       </title>\n  </block></xml> sehingga {currentPlayerName}
        dapat mencapai **sekop** [diamond_shovel]."
      MC_HOC_2017_05_Cole_2019: "Oh tidak, jembatannya hilang! \\\r\n\\\r\nBuat kode
        agar Agent membangun kembali jembatan menggunakan blok `tempatkan` sehingga
        {currentPlayerName} bisa mencapai **sekop** [diamond_shovel]."
      MC_HOC_2017_06_Cole: "Ada sungai lain, tetapi sungai ini jauh lebih lebar! \n\nPerbaiki
        kode ini untuk membantu Agent membangun jembatan sehingga {currentPlayerName}
        dapat mencapai **beliung** [diamond_pickaxe]. "
      MC_HOC_2017_06_Cole_2019: "Ada sungai lain, tetapi sungai ini jauh lebih lebar!
        \n\nPerbaiki kode ini untuk membantu Agent membangun jembatan sehingga {currentPlayerName}
        dapat mencapai **beliung** [diamond_pickaxe]. "
      MC_HOC_2017_07_Cole: "Ada es yang menghalangi!  \n\nFungsi `bersihkan jalan`
        dapat membantu Anda menghancurkan es dan membawa {currentPlayerName} ke Kereta
        Tambang [minecart_normal]! "
      MC_HOC_2017_07_Cole_2019: "Ada es yang menghalangi!  \n\nFungsi `bersihkan jalan`
        dapat membantu Anda menghancurkan es dan membawa {currentPlayerName} ke Kereta
        Tambang [minecart_normal]! "
      MC_HOC_2017_10_RETRY: "Dapatkah Anda melihat perbedaan antara dua fungsi di
        ruang kerja Anda? \n\nGunakan fungsi-fungsi ini dengan kode lain dari kotak
        perlengkapan untuk membersihkan jalan Kereta Tambang, lalu kumpulkan **Batu
        Api dan Baja** [flint_and_steel]. "
      MC_HOC_2017_10_RETRY_2019: "Dapatkah Anda melihat perbedaan antara dua fungsi
        di ruang kerja Anda? \n\nGunakan fungsi-fungsi ini dengan kode lain dari kotak
        perlengkapan untuk membersihkan jalan Kereta Tambang, lalu kumpulkan **Batu
        Api dan Baja** [flint_and_steel]. "
      MC_HOC_2017_Ali: 'Lihat fungsi di bawah.  Bagaimana Anda dapat menggunakannya
        untuk menghindari Ghast dan membantu {currentPlayerName} mencapai **Buku Ajaib**
        [book_enchanted] dengan aman?  '
      MC_HOC_2017_Ali_2019: 'Lihat fungsi di bawah.  Bagaimana Anda dapat menggunakannya
        untuk menghindari Ghast dan membantu {currentPlayerName} mencapai **Buku Ajaib**
        [book_enchanted] dengan aman?  '
      MC_HOC_2017_FP20x20: "**Main Bebas:** Sekarang terserah Anda! Gunakan kode Agent
        untuk membantu Anda menjelajahi dunia ini."
      MC_HOC_2017_FP20x20_2019: "**Main Bebas:** Sekarang terserah Anda! Gunakan kode
        Agent untuk membantu Anda menjelajahi dunia ini."
      Making Music: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      Making Music_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      Making Music_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      NEW Course 4 Artist Functions 1: Can you draw a square that is 100 pixels in
        length, using a repeat loop?
      NEW Course 4 Artist Functions 11: "Now we want to create a new function called
        `draw a line of squares` that draws six squares all in a row.  \n\nCan you
        build this function using this `draw a square 20` function that we created
        for you?\n<br/><br/>\n\n_Note: See that we've changed the pen to be much thinner.
        Click \"edit\" on the `draw a square 20` function to see how!_"
      NEW Course 4 Artist Functions 12: Use the `draw a line of squares` function
        from the last puzzle to draw this pattern.
      NEW Course 4 Artist Functions 13: "Can you draw a star shape using the `draw
        a line of squares` function?  \n\n(Be sure to `move forward` 60 pixels before
        you turn 144 degrees!)"
      NEW Course 4 Artist Functions 14: It's free-play time! Draw anything you like!
      NEW Course 4 Artist Functions 2: "Can you draw 3 squares 20 pixels apart from
        one another? \n\nEach square is 100 pixels in size."
      NEW Course 4 Artist Functions 3: "Here is a new type of Block. It is called
        a `function` block. Click \"edit\" then fill it with the code for drawing
        a square with 100 pixel sides. \n\nWhen you're done editing the function,
        click \"Close\" to go back to your program."
      NEW Course 4 Artist Functions 4: 'Use the `draw a square` function to draw this
        pattern. '
      NEW Course 4 Artist Functions 7: "Are you getting the hang of how to use function
        blocks? Let's modify `draw a square` so that it draws squares that are 200
        pixels in size. \n\nClick on \"edit\" to enter the `draw a square` function
        editor.\n\nRemember to click on \"Close\" to get out of the function editor. "
      NEW Course 4 Artist Functions 8: We have created a new function for you called
        `draw a triangle`.  Can you edit the function definition to draw a triangle
        with 100 pixel sides?
      NEW Course 4 Artist Functions 9: Can you solve this by adding only one block?
      NEW Course 4 Artist Params 1: Let's define this function to draw a square with
        50 pixel sides. Click "edit" to get started.
      NEW Course 4 Artist Params 10: "Create a `draw a hexagon` function block with
        a length parameter. \n\nThis hexagon has sides that are 100 pixels in length."
      NEW Course 4 Artist Params 11: "Can you figure out how to draw this shape? \n\nEdit
        the function to use the `sides` parameter."
      NEW Course 4 Artist Params 12: "Can you complete this drawing? \n\nThe sides
        of all the shapes are 100 pixels long."
      NEW Course 4 Artist Params 12a: "This image is similar to the last.  \n\nCan
        you use a `for` loop with your function to make this design?"
      NEW Course 4 Artist Params 13: "Let's edit this `draw a polygon` function. \n\nIt
        already has a `sides` parameter. Now, let's add a `length` parameter. \n\nThe
        perimeter of each shape is 200 pixels. Do you remember the equation to make
        shapes the same size when they have a different number of sides?"
      NEW Course 4 Artist Params 14: "Edit `draw a spiral edge` to use `length` and
        `sides` parameters, then recreate these shapes.\n\n-   The smallest side length
        of the square is 5 pixels.\n-   The smallest side length of the triangle is
        10 pixels.\n-   The smallest side length of the hexagon is 2 pixels.\n-   All
        increase to 100 pixels.  "
      NEW Course 4 Artist Params 15: "**Freeplay:** Here are the functions you've
        written, and some more for you to play with. Play with the pen width to see
        how different your drawings look!"
      NEW Course 4 Artist Params 2: Create a `draw triangle` function from scratch
        that makes a triangle with  50 pixel sides.
      NEW Course 4 Artist Params 3: "Now let's use the function to draw 5 triangles
        in a row. \n\nEach triangle is 30 pixels apart."
      NEW Course 4 Artist Params 4: Do you notice anything different about these function
        blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5: "Replace the `???` in the `length` parameter input
        block. \n\nThe pentagon has 100 pixel sides."
      NEW Course 4 Artist Params 6: "Fill in the `length` parameter to draw these
        shapes by replacing the `???` with the right numbers.  \n\nThe square and
        triangle have 100 pixel sides.\\\nThe hexagon sides are 75 pixels long. "
      NEW Course 4 Artist Params 7: "Can you complete this drawing? \n\nThe sides
        of each triangle are 25 pixels larger than the last.\\\nThe first triangle
        has 25 pixel sides."
      NEW Course 4 Artist Params 8: "The code for this triangle function is broken.
        \n\nCan you edit the function to fix it, and then make triangles of length
        25, 50, and 75?"
      NEW Course 4 Artist Params 9: "Click \"edit\" to fill in the function definition
        of `draw a square` and add a parameter.\\\nIt should take a length parameter
        just like the triangle. \n\n**This time, draw 3 squares:** 25, 50 and 75 pixels
        in length. The lefthand corners are each 100 pixels away from the last."
      NEW Course 4 Artist Params inspire: "<img src=\"https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png\"
        width=\"250px\"/>\n\n**Free-Play Inspiration:** You've now learned everything
        you need to know to make a pattern like this! \n\nIf this picture inspires
        you, try to make something similar. Otherwise, create something all your own.\n\nNotice:
        We've used the `set alpha` block to make the \"petals\" fade toward the outside."
      NEW Course 4 Artist Vars 12: Now, recreate the algorithm from the last level
        and create a pentagon with sides of length 150.
      NEW Course 4 Artist Vars 2: 'Drag a number block to the `set length` block and
        to the `repeat _ times` block to draw a set of 50 pixel triangles. '
      NEW Course 4 Artist Vars 4: "Let's try it again! \n\nCan you set the `length`
        variable to 60 to make this cool design with hexagons?"
      NEW Course 4 Artist Vars 6: "Draw this pattern of pentagons with 100 pixel sides
        by setting the right value for `length` and dropping the `length` variable
        into all of the the correct places. \n\nSee how you only have to set the value
        for `length` once, and the code uses the right value everywhere?"
      NEW Course 4 Bee For Loops 10a: "Ready for a challenge?  Take what you've learned
        about loops and try to solve this problem. \n\nRemember: You may have to run
        through solutions multiple times before you figure out all of the steps."
      NEW Course 4 Bee For Loops 2: "Add the code necessary to make sure the bee collects
        all the nectar. \n\nLook at how much code you need for this puzzle!\\\n(We'll
        learn a simpler way in the next puzzle.)"
      NEW Course 4 Bee For Loops 3: 'Ah, the `for loop` makes this much easier! All
        the code you need is here, take a look at how it is put together then click
        `Run` to see how it works. '
      NEW Course 4 Bee For Loops 4: 'Replace the ??? in the `for loop` with the largest
        amount of nectar the bee has to collect. '
      NEW Course 4 Bee For Loops 4 4: Now we need to `move forward` `counter` times,
        then `get nectar` `counter` times.  Can you use two `repeat` loops to solve
        this challenge?
      NEW Course 4 Bee For Loops 5: You can also use a `for loop` to count down. Try
        gathering this nectar by counting down from 5 to 1 by 1.
      NEW Course 4 Bee For Loops 6: "The last number in your for loop is called the
        `increment`.  Each time the loop is run, the counter variable changes by the
        value of the increment. \n\nTry collecting these flowers using an increment
        of 2."
      NEW Course 4 Bee For Loops 7: "Now, let's combine the `counter` variable with
        a math block! How can you use the `counter` variable to navigate this garden
        with the fewest number of blocks possible? \n\nWhat do you need to do to collect
        3, 6, 9, 12, 15 nectar this time?  The secret is in the `counter` variable!\n\nRemember:
        If your loop is counting up, the increment is added to your `counter` variable
        each time through."
      NEW Course 4 Bee For Loops 8: "You've got this!  \n\nWhat should your increment
        be to collect 3, 6, 9, 12, 15 nectar?"
      NEW Course 4 Play Lab Params 11: "It's free play time! Have fun with all the
        blocks in your tool box.\\\n<br/>\n\n<h5>\n<details>\n<summary><b>Need some
        ideas?</b></summary>\n\t<br>\n\t<h5>\n\t\t<ul>\n        \t<li><strong>Tag</strong>
        - Have character 2 patrol and use your arrow keys to make character 1 chase
        until they collide. </li>\n            <li><strong>Whack-a-Sprite</strong>
        - Have a character constantly pop up at a random location. Award points for
        clicking the sprite before it disappears. </li>\n            <li><strong>Best
        Guess</strong> - Make both characters disappear, change location to a random
        spot, then reappear as a random character.  Click on the first one and get
        a point...but if you click on the second one you LOSE a point! </li>\n        </ul>\n\t</h5>\n\n</details>\n</h5>"
      NetSim Standalone Automatic DNS: |-
        # Domain Name System (DNS)

        In this version of the Internet Simulator, a Domain Name System (DNS) is provided for you and knows the IP addresses of all connected computers. You can only see the hostnames of other connected computers.\
        ![](https://images.code.org/3ac2c23ed610abc7e785ec85054e89a9-image-1434746293690.PNG)

        The address of the DNS is always \<yourRouterNumber>.15. Send a message with protocol `GET [hostname]`, for example `GET Bob2`, to the DNS to get another student's address. You can keep track of the responses in the Notes section in the DNS tab.\
        ![](https://images.code.org/c81c1a6b876eb46674a7f7e5e70506ce-image-1434746797267.png)

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Broadcast: |-
        # Broadcast messages in the Internet Simulator

        In this version of the Internet Simulator, you can connect to up to 5 other people in a room. When you send messages in the room, everyone receives them. What are some of the challenges of this system, and how might you solve them?

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Classroom Routers: |-
        # Routing messages

        In this version of the Internet Simulator, everyone connects to a router and has a specific address. To send messages, you have to address your message to the specific address of the recipient, and the router will take care of delivering it to the right computer. If there are other routers created in your class, ask for the address of one of your classmates and send them a message! View the Log Router to see the path the messages have taken through the network.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Freeplay: |-
        # Internet Simulator Freeplay

        In this version of the Internet Simulator, most of the options are turned on and are configurable. Messages can be sent to any router within the class, and messages will take different paths to reach their destination.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Manual DNS: |-
        # Introduction to DNS

        In this version of the simulator you can't see the other students' addresses.  Instead, one of you must act as a name service, to help share addresses with each other. From the DNS tab in the left column, one person can take over as DNS.

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Packets TCP: |-
        # Packets and Making a Reliable Internet

        Messages on the Internet can take many paths to get to their destination, and sometimes along the way the message gets dropped. In this version of the Internet Simulator:

        -   There is a 10% chance of a packet being dropped
        -   Multiple packets may take different paths to the destination
        -   The default max packet size is set to 6 additional characters

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone SendAB: |-
        # Sending bits with the Internet Simulator

        You and your partner share a single wire that can only be in state A or state B. You can set the wire to either state at any time, and you can read the state of the wire at any time. Can you figure out a way to effectively communicate with just this system?

        Your teacher will hand out more specific instructions for this activity.
      NetSim Standalone Sending Numbers: "# Sending Numbers with the Internet Simulator\n\nYou
        and your partner can now reliably send messages back and forth without extra
        coordination! While you're always sending bits back and forth, you can also
        represent those bits as decimal numbers. What kinds of information can you
        represent with this system? \n\nYour teacher will hand out more specific instructions
        for this activity."
      NetSim Standalone Sending Numbers Ascii: "# Sending Text with the Internet Simulator\n\nNow
        that you've transmitted information represented as decimal numbers, you can
        map those numbers to text characters to send text-based information back and
        forth. With a text-based protocol, you can easily represent and communicate
        all kinds of information. \n\nYour teacher will hand out more specific instructions
        for this activity."
      New Minecraft Hero Project: "**Main Bebas:** Sekarang terserah Anda! Gunakan
        kode Agent untuk membantu Anda menjelajahi dunia ini."
      OPD-K5 CS Video: "## Getting Started: Why Computer Science (CS) Fundamentals?\n\nYou'll
        complete this free, self-paced course using the same learning platform you
        can use in your classroom with your students. \n\nLet's start by learning
        a bit about what Computer Science (CS) Fundamentals is, and how it's worked
        for teachers and students around the globe. In the next level, we'll cover
        how to interact with the CS Fundamentals learning platform, which you'll be
        using to complete this course.\n\n> ## Reflect\n>\n> What are your first impressions
        of CS Fundamentals?\n>\n> [Tweet your thoughts](https://twitter.com/teachcode)
        and be sure to tag @teachcode in your tweet so we can respond.\n>\n> <a href=\"http://ctt.ec/Bfjw3\"
        target=\"blank\">Share on Twitter >></a>\n>\n> Don't have a Twitter account?
        You can also find us on [Facebook](https://www.facebook.com/Code.org/) or
        [Instagram](https://www.instagram.com/codeorg/)."
      OPD-K5 CS Video_copy: "## Get to know CS Fundamentals\n\nLet's start by learning
        a bit about what Computer Science (CS) Fundamentals is, and how it has worked
        for teachers and students around the globe. "
      OPD-K5 Closing: |-
        > **If you enjoyed this course, sign up for an in-person workshop:**
        >
        > [Sign up now](http://code.org/professional-development-workshops) to continue learning computer science and its pedagogy. The free in-person workshops are a valuable place to collaborate and engage with other passionate educators in your area.
      OPD-K5 Closing_copy: |-
        > **If you enjoyed this course, sign up for an in-person workshop:**
        >
        > <a href="http://code.org/professional-development-workshops" target="blank">Sign up now</a> to continue learning computer science and its pedagogy. The free in-person workshops are a valuable place to collaborate and engage with other passionate educators in your area.
      OPD-K5 EventsVid: |-
        Watch this video that defines "events" and shows how they work in CS Fundamentals. Afterwards, you will try some puzzles that require you to code events.

        > An event is a line of code that tells your computer to "listen" for something to happen, then take an action. For example, on web pages, you often can display a drop down menu when you roll over the navigation bar with your mouse. The "mouse rollover" is an "event" that triggers an action.
      OPD-K5 FirstProgram: Watch the video below, which explains the very first program
        that young students will write in [Course A](https://studio.code.org/s/coursea-2018?section_id=2042045).
        On the next page, you'll get to write a similar program of your own!
      OPD-K5 FirstProgram_copy: Watch the video below, which explains a program that
        young students will write in <a href="https://studio.code.org/s/coursea-2019"
        target="blank">Course A</a>. On the next page, you'll get to write a similar
        program of your own!
      OPD-K5 LessonPlanning: "So far, you've been introduced to some of our unplugged
        lesson plans. However, there are lesson plans for every single CS Fundamentals
        lesson -- both plugged and online. You can find the full list of lesson plans
        for each course below:\n<br/>\n<br/> \n[Course A lesson plans](https://curriculum.code.org/csf-18/coursea/)<br/>
        \n[Course B lesson plans](https://curriculum.code.org/csf-18/courseb/)<br/>\n[Course
        C lesson plans](https://curriculum.code.org/csf-18/coursec/)<br/> \n[Course
        D lesson plans](https://curriculum.code.org/csf-18/coursed/)<br/> \n[Course
        E lesson plans](https://curriculum.code.org/csf-18/coursee/)<br/> \n[Course
        F lesson plans](https://curriculum.code.org/csf-18/coursef/)<br/> \n\nHowever,
        you may want to adapt these lessons, or build your own! The video below explains
        the structure of the CS Fundamentals lessons, but also provides tips in case
        if you want to develop your own lessons."
      OPD-K5 Problem Solving: |-
        # Best Practices > Meta-Cognitive Problem Solving

        Explicitly teaching meta-cognitive problem solving strategies before, during and after coding is extremely important in helping students process their learning. Mega-cognitive problem solving involves thinking about your thought process itself, and reflecting on _how_ you solve problems. Watch the video below to learn about Code.org's "Puzzle Solving Recipe" that can help students have success with difficult problems:

        [This worksheet](http://code.org/curriculum/docs/k-5/PuzzleSolvingStudent.png) details the different steps of the Puzzle Solving Recipe.

        <img src="https://images.code.org/18ec61f8b911b83ca1cdea404a34c40e-image-1434399798952.png" width="650px" style="margin-right:45px; border-radius:10px;">

        > ## Reflect:
        >
        > How might you explicitly teach problem solving in your CS classroom?
        >
        > [Tweet your thoughts](https://twitter.com/teachcode) and be sure to tag @teachcode in your tweet so we can respond.
        >
        > <a href="http://ctt.ec/ic2bx" target="blank"><h4><i class="fa fa-external-link-square" ></i> Share on Twitter</h4></a>
      OPD-K5 RepeatBlock: Watch the video below, which explains how loops work and
        introduces the 'Repeat' block in CS Fundamentals.
      OPD-K5 RepeatBlock_copy: Watch the video below, which explains how loops work
        and introduces the 'Repeat' block in CS Fundamentals.
      OPD-K5 Unplugged Video: |-
        ## Looking Ahead > Getting "Unplugged"

        <img src="https://images.code.org/ae83fdee9390a1155e5173b2a06f9773-image-1434399991310.JPG" class="level-image">

        In teaching computer science, you might think it would be best to have access to top tier technology -- new computers, fast Internet, the latest apps. But at Code.org, we've found that some of the most impactful computer science lessons are actually "unplugged," or conducted with little to no technology at all. In these lessons, students learn computer concepts without a computer.

        That's why all of our CS Fundamentals courses use unplugged activities to introduce computer science concepts with physical manipulatives before students write computer programs using those concepts. An example of this would be doing a dance of repeated movements with the class to understand the concept of how loops repeat commands in a computer program. This way when the students go on to writing programs using loops, the unplugged activity has set them up with something they are already familiar with and they can relate this new concept back to that activity.

        Watch the video below to understand the benefits of using unplugged activities to teach computer science.

        **As you work your way through Stages 4-8**, you'll have a chance to review some of our unplugged activities for each of the core concepts covered in this course.
      OPD-K5 Unplugged Video_copy: "It might seem counterproductive to teach computer
        science away from the computer! However, we've found that some of the most
        impactful  lessons are actually \"unplugged,\" or conducted with little to
        no technology at all. \n\nAll of our CS Fundamentals courses use unplugged
        activities to introduce computer science concepts with physical manipulatives
        before students write computer programs using those concepts. We also use
        unplugged activities to teach important concepts that are not coding, like
        digital citizenship. Watch the video below to understand the benefits of using
        unplugged activities to teach computer science."
      OPD-K5 WhatIsCS: Have you ever wondered "Exactly what is computer science?"
        Or, "Why are some computer programs written with words and some are written
        using images?" If so, watch this video; it's a great introduction to the field
        of computer science.
      OPD-K5 WhatIsCS_copy: |-
        <span style="font-size: 1.1em">
        Have you ever wondered what computer science is, or what kinds of different program languages there are? This video provides an introduction to the field of computer science.
        </span>
      OPD-K5 conditionals free response: |-
        # Reflect on Conditionals

        In this lesson, we explored how conditionals help programmers add logic to their code.

        Now take a moment to reflect. How would you explain the concept of conditionals to your students? What is the benefit of journaling as a teaching practice for comptuer science?
      OPD-K5 events free response: |-
        # Reflect on Events

        In this lesson, you stretched your coding muscles by using events to trigger certain actions in your program.

        Now take a moment to reflect. How would you explain the concept of events to your students? What are the steps you could take to debug a program?
      OPD-K5 for loops free response: |-
        # Reflect on For Loops

        Take a moment to reflect. How would you explain the concept of for loops to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 functions free response: |-
        # Reflect on Functions

        In this lesson, we explored how functions can make you a faster and better programmer by allowing you to reuse segments of your code. In the next lesson, we'll look at the concept of variables.

        Now take a moment to reflect. How would you explain the concept of functions to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 loops free response: |-
        # Reflect on Loops

        In this lesson, we explored how loops can be used to make code more efficient. In the next lesson, we'll look at how events can add interactivity into a program.

        Now take a moment to reflect. How can you connect the concept of loops to your students’ prior experience outside of the CS classroom? What are the benefits of pair programming, and how could you use the it when teaching this lesson?
      OPD-K5 projects free response: |-
        # Reflect on end-of-course projects

        Take a moment to reflect. How would you use end-of-course proejcts in your classroom? What is the benefit of having students complete a project?
      OPD-K5 sequencing free response: "# Reflect on Sequencing\n\nCongratulations!
        You just wrote some code. You are officially a programmer!\n\nDid you notice
        that the last puzzle was a little more difficult? It was a challenge puzzle.
        Challenge puzzles are meant to stretch the boundaries of what students will
        do. We make it clear that they should be attempted, but do not require that
        they be completed for students to succeed for the lesson.\n\nNow take a moment
        to reflect. How would you describe the difference between computer science
        and coding? How would you explain sequencing and algorithms to your students? "
      OPD-K5 sprite lab free response: "# Reflect on Sprite Lab\n\nTake a moment to
        reflect. How would you use Sprite Lab in your classroom? "
      OPD-K5 variables free response: |-
        # Reflect on Variables

        Take a moment to reflect. How would you explain the concept of variables to your students? What is one teaching practice that you could use to teach this concept?
      OPD-K5 whats your plan: "# What's your plan?\n\nThroughout the course, you will
        be asked to write reflections on what you have learned. Once you submit your
        response, it will save, and you can always come back to it. We will revisit
        it at the end of this online course.\n\nTake a moment now to reflect. How
        and when will you complete this online course to make ensure you get the most
        benefit from the experience? "
      OPD-K5-events-2: "Tempelkan blok `flap normal amount` ke event `when click`,
        lalu tekan \"Run\".   \n\n* * *\n\nKlik atau ketuk area bermain untuk menggerakkan
        Flappy ke target."
      OPD-K5-events-3: "Event `when run` memungkinkan Anda menjalankan kode tak lama
        setelah permainan dimulai.  \n\nCoba tambahkan blok yang mengatur kecepatan
        level saat tombol \"Run\" ditekan. \n\n* * *\n\nMainkan permainan dan kepakkan
        ke target untuk melanjutkan."
      OPD-K5-events-4: "Sekarang kita sudah menambahkan tanah. \n\nTempelkan blok
        `end game` ke event `when hit the ground`.\n\n* * *\n\nMainkan permainannya
        dan jatuhkan burung ke tanah untuk melanjutkan."
      OPD-K5-events-5: "Flappy akan terbang melewati rintangan kecuali Anda menulis
        kode yang membuatnya menabrak. \n\nTempelkan blok ke event `when hit an obstacle`
        sehingga permainan berakhir ketika Flappy membentur kelompok pipa pertama."
      OPD-K5-events-6: "Kami sudah menambahkan papan skor untuk menghitung poin ketika
        Flappy melewati rintangan.  \n\nTambahkan blok ke event `when pass an obstacle`
        yang mencetak poin, lalu tekan \"Run\" untuk menerbangkan Flappy melewati
        kelompok pipa pertama."
      OPD-K5-forloops-2: "Tulis kodenya untuk membantu si lebah mengumpulkan semua
        nektar.\n\nAnda akan membutuhkan banyak kode untuk tantangan ini, tapi kita
        akan belajar dengan cara yang lebih mudah dalam teka-teki berikutnya. "
      OPD-K5-forloops-6: "Anda juga dapat menggunakan sebuah loop `for` untuk menghitung
        mundur. \n\nCoba mengumpulkan nektar ini dengan menghitung mundur dari **5**
        ke **1** dengan **1**."
      OPD-K5-forloops-7: |-
        Angka terakhir dalam loop `for` bernama **"increment"**.  Tiap loop dijalankan, variabel berubah dengan nilai dari **increment**.

        Coba mengumpulkan bunga ini menggunakan sebuah **increment** 2.
      OPD-K5-projects-2: |-
        Sungguh menakjubkan betapa banyaknya pelajaran yang sudah Anda petik! Ayo buat permainan langkah demi langkah.

        Menggunakan blok baru di dalam toolbox, pilih latar belakang baru, lalu pilih aktor dalam permainan Anda.
      OPD-K5-projects-3: "Gunakan blok seperti acara dan tindakan untuk membuat pemain
        Anda bergerak ketika Anda menekan tombol panah.  \n\nBawa pemain ke sasaran
        untuk menyelesaikan teka-teki ini."
      OPD-K5-projects-4: |-
        Ayo tambahkan beberapa karakter lagi ke permainan Anda!

        Gunakan blok `set actor` untuk menambahkan karakter lebih banyak lalu beralihlah ke tujuan untuk menyelesaikan puzzle ini.
      OPD-K5-projects-5: |-
        Beragam tokoh dan membuat aktor bergerak adalah permulaan yang bagus untuk sebuah permainan, tetapi kita perlu berbuat lebih banyak untuk membuat ini terasa seperti permainan nyata. Mari kita tambahkan skor!

        Gunakan blok acara seperti `ketika aktor menyentuh` untuk mengubah skor atau memenangkan permainan. Skor 5 poin atau memenangkan permainan untuk menyelesaikan teka-teki ini.
      OPD-K5-projects-6: Kerja bagus! Anda memiliki semua komponen dasar permainan
        yang berfungsi. Sekarang luangkan waktu untuk memastikan permainan berfungsi
        seperti yang Anda inginkan. Setelah selesai, klik "Selesai"!
      OPD-K5-projects-7: Anda sudah selesai! Sekarang Anda dapat memainkan permainan
        atau membagikannya kepada teman dan rekan kelas!
      OPD-K5-spritelab-2: "Ayo buat kolam ikan!  \n\nUbah peri tumbleweed menjadi
        berbagai macam ikan dengan mengeklik <xml><block type=\"gamelab_allSpritesWithAnimation\"
        block-text=\"the sprite picker block\"><title name=\"ANIMATION\">\"tumbleweed\"</title></block></xml>.\n\nPastikan
        juga untuk memperbarui kostum peri ini di <xml><block type=\"gamelab_addBehaviorSimple\"
        block-text=\"the add behavior block\"></block></xml>."
      OPD-K5-spritelab-3: "Ikan mulai pusing! \n\nUbah perilaku ikan sehingga berenang
        ke kiri dan kanan."
      OPD-K5-spritelab-4: "Kolam ikan perlu air! \n\nGunakan <xml><block type=\"gamelab_setBackground\"
        inline=\"true\" block-text=\"the set background color block\">\n    <value
        name=\"COLOR\">\n      <block type=\"colour_picker\">\n        <title name=\"COLOUR\">#0000ff</title>\n
        \     </block>\n    </value>\n  </block></xml> untuk membuat berbagai warna
        latar. Kami merekomendasikan warna biru!"
      OPD-K5-spritelab-6: Ikan adalah petualang dan ingin bertemu dengan mahluk baru
        di laut. Tambahkan peri lain ke kolam ikan. Peri ini bisa memiliki berbagai
        macam kostum lain selain yang anda gunakan untuk ikan!
      OPD-K5-spritelab-7: |-
        Apa yang Anda inginkan dari teman baru ikan Anda untuk dilakukan?

        Tambahkan perilaku dan lihat mereka pergi!
      OPD-K5-variables-1: "Mari gambar sebuah segitiga sama sisi. \n\nSegitiga harus
        persis sepanjang 50 piksel pada tiap sisi."
      OPD-K5-variables-2: "Sekarang gunakan loop yang lain untuk menggambar tiga segitiga
        itu saling berdekatan.   \n\nAnda dapat menyarang sisa kode dari teka-teki
        terakhir Anda di dalam."
      OPD-K5-variables-5: |-
        Sebelum hal menjadi sulit, bisakah Anda memindahkan kepanjangan dari 50 ke dalam sebuah variabel agar kita dapat menggunakannya di teka-teki berikutnya?

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      OPD-K5-variables-6: Sekarang, gunakan variabel `length` untuk membuat artis
        meloncat ke depan dan bawah demgam piksel `length` diantara segitiga.
      Overworld Chop Tree: Kayu adalah sumber daya yang sengat penting. Banyak hal
        terbuat darinya. Jalan menuju pohon dan gunakan blok perintah `destroy` untuk
        memotongnya.
      Overworld Chop Tree_2019: Kayu adalah sumber daya yang sengat penting. Banyak
        hal terbuat darinya. Jalan menuju pohon dan gunakan blok perintah `destroy`
        untuk memotongnya.
      Overworld House Frame Chosen: Bangunlah sisa rumah Anda dari material sesuka
        Anda. Perintah `repeat` akan membantu.
      Overworld House Frame Chosen_2019: Bangunlah sisa rumah Anda dari material sesuka
        Anda. Perintah `repeat` akan membantu.
      Overworld Move to Sheep: Tambahkan perintah "bergerak maju" kedua untuk mencapai
        domba
      Overworld Move to Sheep_2019: Tambahkan perintah "bergerak maju" kedua untuk
        mencapai domba
      Overworld Place Wall: Setiap rumah dimulai dengan sebuah dinding. Bangunlah
        bagian pertama dari rumah Anda dengan menaruh perintah `place forward` di
        dalam repeat loop.
      Overworld Place Wall_2019: Setiap rumah dimulai dengan sebuah dinding. Bangunlah
        bagian pertama dari rumah Anda dengan menaruh perintah `place forward` di
        dalam repeat loop.
      Overworld Shear Sheep: Waktunya mencukur domba! Gunakan perintah `shear` untuk
        mengumpulkan wool dari domba.
      Overworld Shear Sheep_2019: Waktunya mencukur domba! Gunakan perintah `shear`
        untuk mengumpulkan wool dari domba.
      Pixelation - Lesson 15 - Color Shades: |-
        # Color Pixelation: Task 2

        **Directions:**
        <img src='https://images.code.org/548d1daa698a17b1005b1747f152587f-image-1439476855059.png' style="width: 150px; float:right">We start you out with the row of shades of red that Maddie created in the video. Experiment with 6-bit color by filling in the bottom row of the image with shades of a different color.  Here is an example with some shades of blue.  Try your own color!
      Pixelation - Lesson 15 - Color Shades 4x4: "# Pixelation: Task 3\n\n<img src
        = \"https://code.org/images/cspunit1/ColorTask3.png\" style=\"float:right;
        margin:0 20px\" width=200>\n\n**Directions:**\nWe start you out with the 4x4
        image Maddie created in the video.\n\nYour task is to fill a 4x4 grid with
        colors using _12-bits per pixel_. The result should look something like (but
        not exactly) the image shown at right.  \n\nHere are the requirements:\n\n-
        \  Row 1 - fill with shades of red. \n-   Row 2 - shades of green. \n-   Row
        3 - shades of blue. \n-   Row 4 - shades of gray."
      Pixelation - Lesson 15 - Complete 3-bit color: "# Color Pixelation: Task 1\n\n**Directions:**\n\n-
        \  We start you with the 4x2 image Maddie was creating, but we've left out
        the last two squares. \n-   Finish off the image by figuring out which two
        colors are missing and encode them."
      Pixelation 4x4 Empty: The width and height are now encoded in the pixel data.
        Can you figure out how to adjust the dimensions?
      Pixelation Bee: |-
        # Example of 12 bits per pixel

        -   This larger image of a bee encodes color with 12 bits per pixel, but viewing in hex makes it easier to see the color of each pixel.
        -   If you switch to binary mode - hold on to your hat - it's a lot of bits.
        -   Here's another mind-blowing thing to try: slide the bits per pixel up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy: |-
        # Example of more bits per pixel

        Here is a bigger image at 9 bits per pixel. With 9 bits per pixel you can express 512 different colors. Click through to see the next image which is even more sophisticated, but easier to understand.
      Predict Loop I: |-
        # Predict

        What will print as a result of this loop?
      Predict Loop I_2018: |-
        # Predict

        What will print as a result of this loop?
      Predict Loop I_2019: |-
        # Predict

        What will print as a result of this loop?
      Revisiting the Counter Pattern: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2018: "Today you’re going to learn how to use
        and create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Revisiting the Counter Pattern_2019: "Today you’re going to learn how to use
        and create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Robot Doodle: "**Ide Proyek:** Buat gambar sesuatu yang dikenal dari dunia nyata.
        Ini membutuhkan kegigihan dan perencanaan!"
      Robot Doodle_2018: "**Ide Proyek:** Buat gambar sesuatu yang dikenal dari dunia
        nyata. Ini membutuhkan kegigihan dan perencanaan!"
      Room Escape Workshop - 1: |-
        # Mengatur ruangan

        <img src="https://images.code.org/9d103d74f7c2da05aeccd5fc317e6ab6-image-1490368234432.08.44 AM.png" style="width:200px; float:right">

        Untuk membuat ruang pelarian anda perlu  mengatur ruangan user yang bisa untuk menjelajah sekitarnya.Sebagian sudah dikerjakan untuk anda.Anda hanya perlu memutuskan apa bagian yang berbeda dari ruangan itu yang akan nampak dengan mengambil salah satu gambar!

        # Lakukan ini

        \-level mulai dalam desain mode
        \-untuk setiap elemen gambar yang blank (persegi panjang abu) tambah gambar yang sesuai.Sebagai contoh  anda perlu gambar pintu untuk label elemen gambar pintu.
        \-Sebuah contoh dari bagaimana sebuah ruangan mungkin nampak ada disebelah kanan.
      Room Escape Workshop - 10: |-
        <img src="https://images.code.org/3651f7d5306bdcfd2d9a3d9bb842626e-image-1491066778787.12.36 PM.png" style="width:200px;float:right">

        Tertutup!Ayo atur pintu agar siap untuk membukanya.

        # Lakukan ini

        \-Tambahkan gambar untuk outdoor
        \-Beri sebuah ID yang bagus(mungkin_diluar_)
        \-Sembunyikan gambar untuk outdoor (ini mungkin terlihat ketika pintu dibuka)
      Room Escape Workshop - 10 - 2: |-
        # Pintu Terbuka

        <img src="https://images.code.org/57407cb-51f50e08ecddb8ce7d2d89157-image-1491065952915.58.58 PM.png" style="width:200px;float:right">

        Buka pintunya jika mereka memiliki kunci!

        # Lakukan ini

        \-Tambahkan blok 'onEvent' untuk meng-klik pintu
        \-Tambahkan statement 'if' di dalam 'onEvent'untuk memeriksa posisi kunci sudah berpindah ke tombol di layar
        \-Tambahkan sebuah statement if
        \-Dalam if statement tambahkan '=='
        \-Pada satu sisi '=='letakkan posisi x pindahkan kunci pada saat anda meng-klik
        \-Pada sisi lain tambahkan blok 'getXPosition()'-ID untuk itu seharusnya adalah ID kuncimu!
        \-Di dalam statement'if'gunakan 'showelement'untuk menampilkan gambar outdoor tersembunyi jika mereka memiliki kunci
      Room Escape Workshop - 3: |-
        # Hide the Code

        <img src="https://images.code.org/6fa80456a39d9b6417545f5f66ec83a5-image-1490368827625.png" style="width:400px;float:right">

        1.  In Design Mode Click on the white square where it says "CODE". Change it to show a secret code of your choice
        2.  Drag the picture down to cover the secret code

        ![](<>)
      Room Escape Workshop - 3-2: |-
        # Move Picture

        Now make it so the user can find the secret code by clicking the picture. When they click the picture it should move up and out of the way.

        # Do This

        -   Pull out an `onEvent` block
        -   Change the id spot in the `onEvent` block to picture (which is the ID of the picture element)
        -   Inside the `onEvent` block add the `setPosition` block with the following inputs
            -   ID: picture
            -   The next two inputs are x and y values - test out some numbers to try to get the picture to move like in the pictures on the right
      Room Escape Workshop - 4: "# Setting Up the Safe\n\nYou have generated a secret
        code and made it so users can navigate to the second room. Lets give the user
        the ability to enter the secret code when they click on the safe\n\n# Do This\n\n-
        \  Add an `onEvent` block\n    -   Pick the ID for the safe\n-   Inside the
        `onEvent` block add a <img src=\"https://images.code.org/c0964a8543728d018d5d9583319e22b9-image-1491060910093.34.36
        AM.png\" style=\"width:300px\"> block\n    -   On the left side change the
        _x_ (the name of the variable) to be _guess_ \n    -   On the right side change
        _\"Enter a value\"_ (the prompt to ask the user) to _\"Enter the code\"_"
      Room Escape Workshop - 5: "# Checking the Secret Code\n\nNow that you have collected
        a guess of the secret code from the user you will need to check if it is correct!
        We can do this using an `if` statement. An if statement checks if a condition
        is true, in this case it will check if the number the user entered is equal
        to the secret code\n\n# Do This\n\n-   Inside the `onEvent` block for the
        safe below the prompt command add an <img src=\"https://images.code.org/5e9a434b1ad6b8f010db928b668127a5-image-1491061131564.37.01
        AM.png\" style=\"width:100px\"> statement \n-   Create the condition by pulling
        out the <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08
        AM.png\" style=\"width:100px\"> block which will check if two things are equal\n-
        \  On one side of <img src=\"https://images.code.org/f0680979704c30975550211b03ed222e-image-1491061134985.37.08
        AM.png\" style=\"width:100px\"> put _guess_ (the name of the value we used
        to store the users guess)\n-   On the other side put the value for your secret
        code"
      Room Escape Workshop - 7: "# Showing inside the safe\n\n<img src=\"https://images.code.org/71e74305187a46d0badeb29a9a69ac56-image-1490371014841.55.37
        AM.png\" style=\"width:200px;float:right\">\n\nOnce you have the program working
        to check the secret code you are going to want to \"open\" the safe and show
        the key inside. First you will need to create these elements in design mode.\n\n#
        Do This\n\n-   Go to Design Mode and add a gray square image\n    -   Click
        and Drag a Image Element <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13
        AM.png\" style=\"width:75px\"> onto the screen\n    -   Give it a good ID
        (maybe _insideSafe_)\n    -   Find an gray square to use as the picture\n
        \   -   This will act as the inside of the safe as it will hide the front
        of the safe when shown\n-   Add a key image\n    -   Click and Drag a Image
        Element <img src=\"https://images.code.org/8f4bc108415d83e5c528c9204502efc2-image-1491059181186.06.13
        AM.png\" style=\"width:75px\"> onto the screen\n    -   Give it a good ID
        (maybe _key_)\n    -   Find an key image to use \n-   Click the hidden property
        in Design Mode for the gray square and key. When they are hidden it will look
        something like below in Design Mode\n\n<img src=\"https://images.code.org/2c2c7e9996515f2b30d416b558fd1360-image-1489605526794.17.55
        PM.png\" style=\"width:200px\">"
      Room Escape Workshop - 8: |-
        # Showing inside the safe

        Now set up the code to show the key and the gray square when the user inputs the correct code.

        # Do This

        -   Inside the `if` statement you created in the `onEvent` command for the safe add:
            -   The `showElement` block to show the gray square
            -   The `showElement` block to show the key
      Room Escape Workshop - 9-2: |-
        # klik tombol

        <img src="https://images.code.org/1a736d2774860bebc5072b8ae8b38f34-image-1491066638078.10.00 PM.png" style="width:170px;float:right">

        Sekali pengguna meng-klik tombol anda akan ingin menunjukkan pada mereka saat menahannya.Anda bisa melakukan hal ini dengan memindahkan tombol  ke pojok bawah dari ruangan.

        # Lakukan ini

        \-Tambahkan  blok 'onEvent' saat user meng-klik tombol.
        \-Di dalam blok 'onEvent':
         \-gunakan setposition untuk memindahkan tombol ke sudut bawah layar
      Standalone_Artist_2: Gambarlah berlian dengan sudut120 dan 60 derajat dan sisi
        sepanjang 150 pixel.
      Standalone_Artist_3: Bisakah anda menggambar hexagon ini dengan 100 pixel dan
        60 derajat?
      Standalone_Artist_4: Sekarang anda sudah mendapatkan blok baru untuk bermain,
        pengulangan. Ini akan mengulangi seperangkat perintah. Apa yang terjadi jika
        anda mengulang perintah 6 kali?
      Standalone_Artist_5: Berapa kali Anda perlu loop (mengulangi) berlian untuk
        menggambar bunga?
      Standalone_Artist_5.5: 'Perhatikan bagaimana kami disederhanakan kode berlian
        dengan mengubahnya menjadi sebuah pengulangan. Anda bisa mengulang seluruh
        urutan sebanyak 12 kali untuk menggambar bunga. Petunjuk: anda perlu merubah
        30 derajat setelah anda mengulang berlian sehingga anda tidak perlu menggambar
        berlian yang sama.'
      Standalone_Artist_6: 'Ulangi kode segienam ini 6 kali untuk membuat rancangan.
        Berapa derajat yang anda perlukan untuk berubah setiap waktu? Petunjuk: bagilah
        jumlah derajat dalam sebuah lingkaran dengan jumlah waktu pengulangan.'
      Standalone_Artist_7: Fungsi adalah alat pemrograman untuk membantu anda menghindari
        pengulangan. Fungsi ini menggambar sebuah bunga, jadi anda bisa menggunakannya
        setiap saat anda ingin menggambar bunga. Gunakan ini dan blok melompat baru
        untuk menggambar bunga bunga tersebut. Bunga bunga ini 150 pixel terpisah
      Standalone_Artist_8: Berikut adalah fungsi yang disebut'menggambar bentuk'yang
        sudah kami program untuk menggambar segienam. Jalankan kode untuk mengetahui
        apa fungsinya dan bereksperimen untuk melihat apa yang terjadi. Dapatkah anda
        membuatnya untuk menggambar sebuah pola dari segiempat, segitiga, atau segidelapan?
      Standalone_Artist_9: Sekarang buatlah gambar apapun yang anda suka! Anda bahkan
        punya fungsi kosong yang anda dapat isi dengan apapun yang anda sukai!
      The Accelerometer: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      The Accelerometer_2018: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      The Accelerometer_2019: "Today you’re going to learn how to use and create **functions**.\n\nCreating
        a function lets you make your own blocks! There are two parts to a function:
        \n\nMaking a newly named block that has all of the code you want to run inside
        of it. \n\\-xml of function definition- \n\nThe single green block itself
        that you use, or call, to run the function you created.\n\\-xml of function
        call-\n\nPrepare to get familiar with functions, learn how to edit them, and
        create your own!"
      U4 Model Design 1: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 1_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 1_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Creating a digital prototype

        Using the prototype to the right (click the image to enlarge it) you're going to create a digital prototype of the example app "Recycling Finder". We've already added a few of the elements for you, including the title, but it doesn't look quite right yet. We'll go over each element of this as we go, but for now let's **just focus on the title**.

        <!--<img src="https://images.code.org/66633526e03550bedb8503fefdc2ece3-image-1502921575904.png" style="width: 300px; float: right; clear: both;">-->

        # Do This

        -   **Make sure you are in Design Mode,** the switch appears above your app window on the left.
        -   **Click on the title text** to view its properties.
        -   **Change the property "text"** to "Recycling Finder".
        -   **Change the "font size"** to make the title larger.
        -   **Change the "text alignment"** so the title is centered on the screen.

        _Note: Make sure you click **"Run"** before moving on to save your progress._
      U4 Model Design 2: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 2_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 2_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/c0a6e147bc1cb940893f87ffd25b5015-image-1505758331506.png)

        <br/>

        Click to expand

        </div>

        # Adding more text

        Each screen of your app is composed of multiple design _elements_. You can drag out elements from the "Design Toolbox" on the left side of the workspace. To add more blocks of text, just drag out additional "label" elements.

        # Do This

        -   **Drag out a new "label" element** and place it where the "home\_description" text should be.
        -   **Change the id** to match the prototype (home\_description)
        -   **Change the field "text"** to match the prototype.
        -   **Resize** the text area by clicking and dragging the bottom right corner.
        -   **Change any other properties** to make the text look like you want it to.
      U4 Model Design 3: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 3_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 3_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/cad5b0e54f67976fee68ecf29c2a603b-image-1505758463551.png)

        <br/>

        Click to expand

        </div>

        # Adding images

        The prototype just has a plain black square where the logo should be - let's add an image to spice it up. The "image" element allows you to either upload an image from your computer or select from a library of graphic icons.

        # Do This

        -   **Drag out a new "image" element** and place between the description and the title.
        -   **Change the id** to match the prototype.
        -   **Click the "Choose..." link** next to the "image" field.
        -   **Select the "Icons" tab** and choose an icon for your logo.
        -   **Change the color** of the icon using the "icon color" field.
      U4 Model Design 4: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 4_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 4_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/17b565cb2f5da12babc16fbd22685732-image-1505758655682.png)

        <br/>

        Click to expand

        </div>

        # Adding buttons

        Buttons allow your user to interact with your app. This prototype screen will need three buttons (each shaded gray on the prototype.) We've already added the Search button, so you just need to add Contact and About.

        # Do This

        -   **Drag out a new "button" element** for each of the two remaining buttons.
        -   **Change the ids** to match the prototype.
        -   **Change the text** to match the prototype.
        -   **Modify other properties** to make the screen look like you'd like.

        <img src="https://images.code.org/4cab6a5233cf07df0d8e312932762012-image-1444314797615.gif" style="width: 500px;">
      U4 Model Design 5: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 5_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 5_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/d257d0b06a24195a40adc60e4c96c0e1-image-1505759167176.png)

        <br/>

        Click to expand

        </div>

        # Making a Search Box

        The search box in our prototype can be created using a "Text Input" element. This is a box that your user can type into, and later your software can read what was entered and do something with it.

        # Do This

        -   **Add a Text Input** element.
        -   **Change the id** to match the prototype.
        -   **Add a Label** with the text "Location" next to your text input.
      U4 Model Design 6: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 6_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 6_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/7c8f4893c0b1f4bcd2280c950e389c95-image-1505759396699.png)

        <br/>

        Click to expand

        </div>

        # Checkboxes

        The type of recyclables you're searching for can be set using "Checkbox" elements. We already added a checkbox and label for glass, so you just need to add ones for paper and plastic.

        # Do This

        -   **Add a Checkbox** for each of the options.
        -   **Change the ids** to match the prototype.
        -   **Add labels** to describe each checkbox.
      U4 Model Design 7: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Design 7_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Design 7_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model.png)

        <br/>

        Click to expand

        </div>

        # Finishing Touches

        By now you should have a fairly complete (though non-functional) digital version of the paper prototype we started with. All that's left to do is check back over your paper prototype and add any final touches you might have missed.

        # Do This

        -   **Check over the prototype** to make sure you've included everything.
        -   **Read through your IDs** and fix any that aren't descriptive.
        -   **Clean up** any rough edges by resizing or moving around elements.
      U4 Model Program 1: |-
        # Adding a New Screen

        To complete your app, you're going to need more than than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 1.5: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1.5_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1.5_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://curriculum.code.org/media/screen_model_about.png)

        <br/>

        Click to expand

        </div>

        # Design the About Screen

        To add elements to your new About screen, you'll need to first select it from the screens dropdown.

        # Do This

        -   **Complete the About screen** using the prototype to the right.
        -   **Use the screens dropdown** to switch between your Home and About screens.
      U4 Model Program 1_2018: |-
        # Adding a New Screen

        To complete your app, you're going to need more than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 1_2019: |-
        # Adding a New Screen

        To complete your app, you're going to need more than just a home screen. Each card that you created in your paper prototype is represented by a "screen" in App Lab. To create more screens, just click the dropdown at the top of the app display and select "New Screen..."

        <img src="https://images.code.org/2b49c36a57fb904d4fcf219ca498647d-image-1504714832027.png" style="width: 200px">

        # Do This

        -   **Create a New Screen** and give it the ID "about".
      U4 Model Program 2: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 2.5: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2.5_2018: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2.5_2019: |-
        # Contact Screen Import

        Yet another student created a Contact screen that you can import into your app. Their share link is **<a href ="https://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/" target="_blank">https\://studio.code.org/projects/applab/QUAOln68kifScEwQauwNqw/</a>**

        # Do This

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to make sure your app has Home, About, Contact, and Search screens.
      U4 Model Program 2_2018: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 2_2019: |-
        <div markdown="1" style="float: right; margin: 20px;">

        ![expandable](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)

        <br/>

        Click to expand

        </div>

        # Screen Import

        In addition to adding new blank screens, you can import screens from "Import Screen..." To import a screen from someone else, you'll need them to give you the sharing URL.

        **Note:** Screens you import _must not_ share any IDs with elements already in your app!

        # Do This

        Another student has created a search results screen that you can import into your app. Their app's share link is **<a href="https://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/" target="_blank">https\://studio.code.org/projects/applab/XkcpDVj8MJWQvUr9OSgIlA/</a>**

        -   **Select "Import Screen...** from the screens dropdown.
        -   **Copy and paste the above url** into the import screens dialog.
        -   **Select the screen** you wish to import.
        -   **Click Import** to import the screen.
        -   **Use the screens dropdown** to switch between your Home, About, and Search screens.
      U4 Model Program 3: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the "home\_search\_btn" button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select "home\_search\_btn"** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 3_2018: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the `home_search_btn` button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select `home_search_btn`** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 3_2019: |-
        # Button Events

        With our screens in place, it's time to start actually _programming_ the app so that it responds to button clicks. For each button on each screen, you'll want to add an `onEvent` block that watches for that button to be clicked and responds appropriately. To start off with we'll just watch the `home_search_btn` button and print something to the console when it's clicked

        # Do This

        You're now in Code Mode (you can use the buttons above your app to switch between Code Mode and Design Mode). This is where you can write the code that will respond to users interacting with your app.

        ![](https://images.code.org/278b27dd31b6ca014c0dd32c5f964a54-image-1505764431751.png)

        -   **Drag out an `onEvent` block** from the code toolbox.
        -   **Select `home_search_btn`** from the "id" dropdown.
        -   **Drag out a `console.log` block** from the variables drawer.
        -   **Run your app**.
        -   **Click the Search button** and look for messages in the console.
      U4 Model Program 4: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the "home\_search\_btn" is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the "home\_search\_btn" button.
      U4 Model Program 4_2018: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the `home_search_btn` is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the `home_search_btn` button.
      U4 Model Program 4_2019: |-
        # Changing Screens On Click

        The `setScreen` block will change your app to whichever screen you specify. If you place a `setScreen` block _inside_ an `onEvent` block, you can program your buttons to change to the correct screen.

        # Do This

        Using the `onEvent` block that you've created, make your program change to the "search" screen when the `home_search_btn` is clicked.

        -   **Drag out a `setScreen` block** an put it inside the `onEvent` block.
        -   **Select "search"** from the `setScreen` dropdown.
        -   **Run your app** and test the `home_search_btn` button.
      U4 Model Program 5: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   **Add an `onEvent` block** for each button.
        -   **Select the button ID** from the "id" dropdown.
        -   **Add a `setScreen` block** inside each `onEvent` block.
        -   **Select the screen ID** from each `setScreen` dropdown.
        -   **Run your app** and test that all of the buttons work.
      U4 Model Program 5_2018: |-
        # Wire Up the Other Buttons

        Now that you've made one button work, just follow the same pattern for all of your others.

        # Do This

        -   **Add an `onEvent` block** for each button.
        -   **Select the button ID** from the "id" dropdown.
        -   **Add a `setScreen` block** inside each `onEvent` block.
        -   **Select the screen ID** from each `setScreen` dropdown.
        -   **Run your app** and test that all of the buttons work.
      U4 Model Program 5_2019: "# Sambungkan Tombol Lainnya\n\nKamu sudah berhasil
        menjalankan satu tombol, ikuti saja pola yang sama untuk tombolmu yang lain.
        \n\n# Lakukan Ini\n\n-   Untuk setiap tombol, buat peristiwa yang terhubung
        dengan layar yang sesuai saat tombol itu ditekan.\n-   Jalankan aplikasimu
        dan tes fungsi semua tombolnya."
      Underground Avoiding Lava: Lava tersembunyi di bawah beberapa blok ini. Yang
        Anda akan perlu tutup sebelum maju. Sebuah perintah `if` akan membantu di
        sini. Tambah sebuah perintah `move forward` di tempat yang benar untuk menambang
        blok ini.
      Underground Avoiding Lava_2019: Lava tersembunyi di bawah beberapa blok ini.
        Yang Anda akan perlu tutup sebelum maju. Sebuah perintah `if` akan membantu
        di sini. Tambah sebuah perintah `move forward` di tempat yang benar untuk
        menambang blok ini.
      Underground If Statements: Sekarang hal akan menjadi lebih rumit. Kumpulkan
        3 redstone, tapi jangan jatuh ke lava. Gunakan perintah `if` untuk meletakkan
        cobblestone di atas lava yang anda temukan.
      Underground If Statements_2019: Sekarang hal akan menjadi lebih rumit. Kumpulkan
        3 redstone, tapi jangan jatuh ke lava. Gunakan perintah `if` untuk meletakkan
        cobblestone di atas lava yang anda temukan.
      Using Accelerometer Events: "Today you’re going to learn how to use and create
        **functions**.\n\nCreating a function lets you make your own blocks! There
        are two parts to a function: \n\nMaking a newly named block that has all of
        the code you want to run inside of it. \n\\-xml of function definition- \n\nThe
        single green block itself that you use, or call, to run the function you created.\n\\-xml
        of function call-\n\nPrepare to get familiar with functions, learn how to
        edit them, and create your own!"
      Using Accelerometer Events_2018: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      Using Accelerometer Events_2019: "Today you’re going to learn how to use and
        create **functions**.\n\nCreating a function lets you make your own blocks!
        There are two parts to a function: \n\nMaking a newly named block that has
        all of the code you want to run inside of it. \n\\-xml of function definition-
        \n\nThe single green block itself that you use, or call, to run the function
        you created.\n\\-xml of function call-\n\nPrepare to get familiar with functions,
        learn how to edit them, and create your own!"
      'Video: Intro to CSS Part 2_2019': |-
        ## Question to Consider

        -   How does the web page know what stylesheet it should be using?
      'Video: Intro to CSS_2019': |-
        ## Questions to Consider

        -   How is the style of a web page different from structure?
        -   Why might you want your web page to have a certain style?
      Vigenere: "# Encrypt and decrypt a message with the Vigenère cipher\n\nThis
        is an interactive version of the Vigenère cipher that animates the encryption
        and decryption as it’s happening, given a piece of text to encrypt or decrypt
        and the key.\n\n# Do this\n\n### Encrypt a message\n\nClick Step several times,
        and trace what’s happening. Pay attention to:\n\n-   How the ciphertext is
        being produced\n-   What happens when you get to the last character of the
        key\n-   After you’ve stepped through a few characters click Play to watch
        the rest animate\n-   Hit Restart and play the animation again. You can use
        the speed slider to speed it up or slow it down  \n\n![](https://images.code.org/06858f88ac12997bba73f4f76638a068-image-1443574425185.gif)\n\n###
        Decrypt a message\n\nEncrypt a message as above, then:  \n\n-   Highlight
        and copy the ciphertext\n-   Paste it into the plaintext area. Note: Don’t
        change the key\n-   Change the Encrypt/Decrypt toggle to Decrypt\n-   Hit
        Step a few times, and then Play\n\nYou should see the original text emerge.\\\n![](https://images.code.org/dc89d6c19c17adb23b6b5ff9a62c4583-image-1443574425182.gif)\n\nHow
        hard would it be to crack a message encrypted with this cipher? Does the length
        of the key make a difference?"
      Virtual Pet 1: "Ini Geraldine, jerapah peliharaan Anda yang baru.  \n\nMenurut
        Anda, apa yang akan terjadi jika Anda menekan \"▶ Jalankan\" lalu klik padanya?"
      Virtual Pet 1 Predict: |-
        **Buat prediksi:** Ini Geraldine, jerapah peliharaan Anda yang baru.

        Menurut Anda, apa yang akan terjadi jika Anda menekan "▶ Jalankan" lalu klik padanya?
      Virtual Pet 1_2019: |-
        **Permainan Bebas**:Tunggu! Lihat binatang peliharaan yang keren!

        Sambil membaca kode di bawah, tanyakan diri anda:

        -   Bagaimana Anda menyuruh binatang peliharaan agar bergerak?
        -   Apa yang terjadi ketika binatang peliharaan menyentuh es krim? Bagaimana dengan lada?
        -   Bagaimana variabel 'energi' digunakan? Bagaimana Anda dapat memeriksa nilai `energi` hewan peliharaan saat ini?

        Jalankan kode dan bermain dengan binatang peliharaan! Ketika Anda selesai, klik **Selesai**.
      Virtual Pet 2: "Ada genangan lumpur di sudut.  \n\nBuat **peristiwa** sehingga
        ketika Geraldine menyentuh genangan air, warnanya berubah menjadi cokelat."
      Virtual Pet 2_2019: |-
        Sekarang giliran Anda untuk membuat binatang peliharaan virtual sendiri! Mulai dengan bentuk yang Anda suka.

        1.  Klik  tab **Kostum** di kiri atas layar (setelah **Kode**).
        2.  Sunting permulaan kostum, atau tambahkan kostum baru yang Anda suka.
        3.  Ganti kostum peri untuk Anda sendiri dengan kode di bawah.
        4.  Klik **Jalankan** untuk melihat binatang peliharaan Anda dalam tampilan baru!
      Virtual Pet 3: "Kami tidak dapat memiliki jerapah kotor yang berkeliaran!  \n\n1.
        \ Tambahkan peri sabun baru ke layar.\n2.  Dapatkah Anda membuatnya sehingga
        ketika jerapah dan sabun menyentuh, jerapah kembali ke warna normal?\n\n*
        * *\n\nUntuk mengatur ulang warna, gunakan blok ini:\n<xml><block type=\"gamelab_removeTint\"
        inline=\"true\">\n      <value name=\"THIS\">\n        <block type=\"sprite_variables_get\">\n
        \         <title name=\"VAR\">mySprite</title>\n        </block>\n      </value>\n
        \   </block></xml>"
      Virtual Pet 3_2019: |-
        Buat acara untuk membuat binatang peliharaanmu mematuhi perintah!

        Mulai dengan <xml><block type="gamelab_keyPressed" block-text="the while up key pressed event block"><title name="CONDITION">"ketika"</title><title name="KEY">"up"</title></block></xml>dengan<xml><block type="gamelab_moveInDirection" block-text="the move in direction action block"><title name="DIRECTION">"North"</title></block></xml>untuk membuat binatang peliharaanmu bergerak ke utara **ketika**panah atas ditekan.

        Ulangi hal di atas untuk tiga arah lain(selatan, barat, timur) dan tombol panah (turun, kiri, kanan)!
      Virtual Pet 4: "Kami tidak ingin menunggu jerapah membersihkan dirinya sendiri
        setiap saat.  \n\nTambahkan perilaku pada sabun Anda untuk membuatnya dapat
        diatur ulang, lalu pindahkan ke atas untuk membersihkan jerapah!"
      Virtual Pet 4_2019: "Mari kita membuat makanan mengembara!\n\n1.  Tambahkan
        **dua** peri ke dunia Anda. \n2.  Buat satu peri terlihat seperti apa yang
        **suka** dimakan oleh hewan peliharaan Anda, dan yang lainnya terlihat seperti
        **tidak suka** untuk dimakan.\n3.  Buat setiap peri makanan memulai perilaku
        **mengembara** segera setelah muncul."
      Virtual Pet 5: "Semua permainan ini membutuhkan energi!  \n\nTambahkan tindakan
        ke setiap peristiwa sehingga jerapah menjadi sedikit lebih kecil (menyusut
        5 kali) setiap kali bertabrakan dengan peri lain."
      Virtual Pet 5_2019: |-
        Gunakan<xml><block type="gamelab_checkTouching" block-text="the when touching block"></xml>dengan<xml><block type="gamelab_jumpTo" block-text="the jump to location block"></block></xml>**simulasi**makan\*\*dalam dunia virtualmu!

        1.  Buat sebuah acara yang membuat salah satu peri makanan meloncat ke lokasi acak saat binatang peliharaanmu menyentuhnya.
        2.  Ulangi hal di atas untuk peri makanan lainnya.
      Virtual Pet 6: "Diet seimbang itu penting! Kita harus memberi makan jerapah
        untuk mendapatkan kekuatannya kembali.  \n\nTambahkan apel ke tempat kejadian
        dan minta jerapah dikembalikan ke ukuran biasa ketika kedua peri bersentuhan."
      Virtual Pet 6_2019: |-
        Gunakan<xml><block type="variables_set" block-text="the set variable block"><title name="VAR">energi</title></block></xml>bersama<xml><block type="math_change" block-text="the change variable block"><title name="VAR">energi</title></block></xml>untuk membuat makanan yang mempengaruhi energi binatang peliharaanmu! Semakin banyak energi yang di miliki semakin cepat dia bergerak!

        1.  Set variabel'energi' ke angka 5 saat program mulai.
        2.  Ketika binatang peliharaanmu memakan makanan itu**suka**tambahkan1 ke 'energi.
        3.  Ketika binatang peliharaanmu memakan makanan itu**tidak suka**, set 'energi'kembali ke angka 5
        4.  Ubah setiap tombol panah acara sehingga binatang peliharaanmu bergerak'energi'piksel sebagai pengganti dari angka tertentu.
      Virtual Pet 7_2019: "Anda bisa memeriksa nilai 'energy' bintang peliharaan dengan
        <xml><block type=\"gamelab_printText\" block-text=\"the print block\"></xml>,
        blok baru ditemukan di kategori'Dunia'!\n\nBuat sebuah acara yang membuat
        nilai'energi' dicetak saat peri binatang diklik. "
      Virtual Pet 8_2019: "**Permainan Bebas:** Binatang peliharaan virtual Anda adalah
        _BINATANG VIRTUAL YANG LUAR BIASA!_ \n\nApalagi yang dapat Anda lakukan? Coba
        ide berikut:\n\n-   Ubah warna latar menjadi berwarna atau gambar.\n-   Cetak
        lagi! Coba mencetak _\"Yummi! Energi bertambah!\"_ ketika binatang peliharaan
        makan makanan yang disukainya, atau \\_ \"Yuck! Energi diatur ulang!\"\\_
        ketika memakan makanan yang tidak disukainya.\n-   Tambahkan peri lainnya
        yang berinteraksi dengan binatang peliharaan Anda dengan cara berbeda. Bagaimana
        dengan peri **boneka**?\n-   Tambahkan variabel lainnya yang dapat memengaruhi
        binatang peliharaan Anda atau dunia. Apa yang dapat \"kebahagiaan\" atau \"zaman\"
        lakukan?\n-   Bereksperimenlah dengan perilaku! Coba sunting perilaku **mengembara**
        untuk memperlambat atau mempercepat peri makanan (petunjuk: \"kecepatan\"
        mereka saat ini 5...)."
      Virtual Pet Freeplay: "Main bebas: Apa lagi yang lebih banyak dapat Anda lakukan
        untuk jerapah? \n\n-   Dapatkah Anda menambahkan lebih banyak materi khusus
        untuk hewan peliharaan virtual Anda?  \n-   Dapatkah Anda memberi teman kepadanya?"
      'Widget: Text Compression': Perhatikan pola (pengulangan kata atau frase) dalam
        teks.Masukkan pola yang anda lihat ke dalam kamus dengan benar. Ketika anda
        mengetik entri kedalam kamus,simbol untuk entri dimasukkan kedalam teks di
        tempat pola tersebut.
      behaviors 1: |-
        Buat prediksi! Pelajari kodenya.

        -   Peri akan berputar.
        -   Peri akan menyusut.
        -   Peri akan bergerak.
        -   Peri akan berubah warna.
      behaviors 2: |-
        Terbangkan roket menuju bintang!

        -   Ubah perilaku roket sehingga terbang ke atas di area display.
      behaviors 3: |-
        Bantu bajak berlari melampaui robot!

        -   Sunting perilaku peri bajak (atas) sehingga lebih cepat dari robot.
      behaviors 3a: |-
        <xml><block type="sprite_parameter_get" block-text="this sprite"><title name="VAR">peri ini</title></block></xml>blok harus digunakan sebagai ganti blok'costume'. Ini akan bekerja untuk setiap peri, bagaimanapun juga kostumnya berguna.

        **Debug:**Buat semua bintang berputar dengan cara sama!
      behaviors 4: Buat prediksi! Jalan mana yang akan diikuti satelit untuk mencapai
        tata surya?
      behaviors 5: |-
        Tuliskan perilakumu

        -   Tulis perilaku baru astronot ini untuk memimpin ke arah salah satu dari empat kapal di area display.
      behaviors 6: |-
        Buat bila menggelinding

        \-Buat sebuah perilaku baru dan gunakan untuk membuat bola menggelinding. Perilaku harus mengkombinasi dua aksi berbeda.
      behaviors 7: |-
        Pergi ke horizon!

        \-Buat sebuah perilaku baru dan gunakan untuk membuat mobil  naik dan menciut. Jika anda melakukannya dengan benar, ini akan terlihat seperti sedang  pergi ke horizon.
      behaviors free play: "**Permainan bebas:** Buat adegan luar angkasa Anda sendiri!"
      comment_intro_maze_2018: "_\"Saya bingung. Bantu saya mengingat cara mengatasi
        labirin ini.\"_  \n\n* * *\n\nUntuk melewati teka-teki ini, pecahkan teka-teki
        dan gunakan blok <xml><block type=\"comment\">\n    <title name=\"TEXT\">
        </title>\n  </block></xml> yang baru untuk meninggalkan pengingat cepat bagi
        Anda. Mereka dapat membantu Anda mengingat yang Anda lakukan dan alasannya!
        \  \n\nKomentar hanya digunakan untuk **Anda**, tidak memengaruhi area bermain."
      course1_artist_loops_challenge2: Let's play a game! Draw as many X's as you
        can! Can you get 3 in a row?
      course1_artist_loops_challenge3: |-
        **Tweet!**

        _"Can you help me make two bird houses?"_
      course1_artist_loops_challenge4: _"Saatnya melemparkan dadu! Apakah Anda bisa
        membantu saya menggambarkan ini?"_
      course1_maze_debugging_challenge1: Debug level ini. Singkirkan blok-blok ekstra,
        dan tambahi blok-blok yang hilang. Giring burungnya ke babi!
      course1_maze_debugging_challenge2: Debug level ini. Bloknya sudah benar, tertapi
        urutannya salah!
      course1_maze_seq_challenge2: You can only move up to four times in each direction.
        Can you find a path before you run out of blocks?
      course1_playlab_events_challenge1: |-
        _"Where are my friends hiding? In this game, clicking on me will show my friend Olive the cat!"_

        Clicking Olive will make Robin appear! Can you write code to show the rest of the characters too?

        In this puzzle, make sure to click for hints! The hints will help you do this project step-by-step!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      course1_playlab_events_challenge2: |-
        _"Let's have a party! Give my friends something to do when you click or tap them."_

        What will the animals say? What else will happen?

        In this puzzle, make sure to click for hints! The hints will give you fun things to try!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      course2_artist_nestedLoops_challenge1: |-
        Bisakah Anda mengira-ngira cara membuat gambar seperti ini?

        -   Kedua bentuk memiliki **sisi 50 piksel.**
        -   _Oktagon_ dibuat dengan belokan **45 derajat**.
        -   _Segitiga_ dibuat dengan belokan **120 derajat**.
      course2_artist_nestedLoops_challenge2: |-
        Can you figure out how to make a picture like this?

        -   The first inner loop should make an octagon.
        -   The second inner loop should make a hexagon.
        -   The third inner loop should make a square.
      course2_artist_prog_challenge1: Draw rooms for each of the animals. There are
        many different ways to solve this puzzle, so have some fun!
      course2_artist_prog_challenge2: _Help me paint the yellow lines on this road!_
      course2_bee_conditionals_challenge1: Collect all of the nectar or make all the
        honey. You can only collect nectar from flowers and make honey from honeycombs.
        Check any space to see if there is a flower or honeycomb.
      course2_bee_conditionals_challenge2: Kumpulkan semua nektar dan buat semua madu.
        Anda dapat mengumpulkan semua nektar di satu bunga dengan menggunakan loop
        `while nectar > 0`.
      course2_collector_loops_challenge2: |-
        _"Let's hunt for treasure - using loops!"_

        Help the collector by debugging this code. Get all of the treasure!
      course2_collector_prog_challenge1: Lihat dengan cermat! Bisakah Anda mengumpulkan
        **10** buah harta karun seluruhnya?
      course2_collector_prog_challenge2: There are **20** pieces of treasure in this
        cave. Collect at least half to finish the challenge!
      course2_harvester_loops_challenge1: Kumpulkan semua jagung.
      course2_harvester_loops_challenge2: Kumpulkan semua selada. Hindari pohon dan
        ladang!
      course2_maze_programming_challenge1: _"The pig is hiding! Can you help me find
        a way around?"_
      course2_maze_programming_challenge2: Kadang-kadang ada lebih dari satu cara
        untuk memecahkan masalah yang sama. Kadang-kadang lebih cepat mundur daripada
        maju!
      course3_artist_functions_challenge1: Setelah menetapkan fungsi, Anda dapat memanggilnya
        berkali-kali - kapan pun dan di mana pun Anda inginkan! Coba kode ini untuk
        mengetahui cara kerjanya, lalu ubahlah untuk membuat desain sendiri yang memukau!
      course3_artist_functions_challenge2: |-
        Anda tidak hanya dapat melompat ke beberapa lokasi yang sudah ditentukan, seperti pojok kanvas, Anda juga dapat menggunakan perintah `jump to` untuk sampai di sembarang tempat yang Anda sukai! Coba kode ini untuk mengetahui cara kerjanya, lalu buat sendiri programnya!

        <xml>
          <block type="jump_to_xy">
            <title name="XPOS">???</title>
            <title name="YPOS">???</title>
            </block></xml>
      course3_bee_debugging_challenge1: Watch how the bee gets the nectar. Can you
        use the same kind of pattern to help the bee make all of the honey?
      course3_bee_functions_challenge1: Anda sendirian dalam tantangan ini.  Ini bisa
        "jadi" lebih sulit daripada yang terlihat mata!
      course3_bee_functions_challenge2: You are on your own for this challenge!
      course3_bee_functions_challenge3: Buatlah fungsi baru untuk mengumpulkan semua
        nektar dan madu selagi ada jalan di depan. Gunakan itu untuk menyelesaikan
        teka-tekinya!
      course3_bee_functions_challenge4: Gunakan semua yang Anda pelajari untuk menyelesaikan
        teka-teki ini!
      course3_collector_debugging_challenge2: Are you an expert of nested loops? Use
        what you have learned so far to collect all of the treasure!
      course3_farmer_condLoops_challenge1: "The pumpkins mark the place where you
        should turn. _Turn right at the pumpkins._ Otherwise keep going forward, but
        remember to collect all of the lettuce or corn along the way. \n\n**Each hidden
        crop has only one corn or lettuce.**"
      course3_farmer_condLoops_challenge2: "_\"It's a vegetable maze!\"_ \n\nTurn
        right at pumpkins, turn left at the lettuce. Collect everything to complete
        the level."
      course3_farmer_until_challenge2: Gunakan blok If/Else untuk mengikuti jalan
        melengkung. Pada tiap pojok, gunakan perintah `remove 1` di dalam loop untuk
        membersihkan tumpukan.
      course3_maze_debugging_challenge1: _"Am I just going around in circles?"_
      course3_maze_debugging_challenge2: _"If I turn too often, I might get dizzy!
        Help me reach the pig with only four `turn` commands."_
      course3_maze_until_challenge1: Tidak ada petunjuk, hanya tantangan. Gerakkan
        zombie menuju bunga matahari.
      course3_playLab_challenge1: "_**Tupai** ketakutan ketika tahu **dinosaurus**
        telah mendatangi kota! Bisakah **ksatria** pemberani menenangkan semuanya
        agar tidak panik?_\n\nAturan:\n\n1.  _Menyentuh tupai memberi Anda poin._\n2.
        \ _Menyentuh dinosaurus mengurangi banyak poin._\n\nIni adalah jenis permainan
        lain yang sudah dimulai untuk Anda! Mainkan untuk mengetahui cara kerjanya.
        \n\nHarus terjadi sesuatu ketika Anda mendapat cukup poin atau ketika Anda
        kehabisan poin. Tambahkan kode tertentu ke fungsi `win game` dan `lose game`
        untuk membuat permainannya berjalan semestinya. \nKlik tips untuk mendapatkan
        ide!"
      course4_artist_binary_challenge1: Anda hanya dapat menggunakan setiap nilai
        berpasangan (0 atau 1) masing-masing sekali dalam teka-teki ini. Coba gunakan
        lingkaran bersarang untuk menyelesaikan gambar ini.
      course4_artist_binary_challenge2: |-
        Ada 256 bit yang ditunjukkan pada kisi ini - itu berarti perubahan kecil mudah menyebabkan masalah besar. Apakah Anda cukup gigih mengembalikan logo ini ke kondisi normal?

        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      course4_artist_concept_challenge2: Buat lima desain kincir menggunakan code
        di bawah ini.
      course4_artist_functions_challenge2: |-
        Anda tidak hanya dapat melompat ke beberapa lokasi yang sudah ditentukan, seperti pojok kanvas, Anda juga dapat menggunakan perintah `jump to` untuk sampai di sembarang tempat yang Anda sukai! Coba kode ini untuk mengetahui cara kerjanya, lalu buat sendiri programnya!

        <xml>
          <block type="jump_to_xy">
            <title name="XPOS">???</title>
            <title name="YPOS">???</title>
            </block></xml>
      course4_artist_fwp_challenge1: Cobalah jalankan program ini, dan buatlah perubahan
        untuk melihat apa yang terjadi. Apa Anda mengerti cara kerjanya? (Coba hapus
        dan ganti dengan komposisi yang berbeda)
      course4_artist_variables_challenge1: Can you create a `length` variable and
        use it to create this interesting pattern?
      course4_bee_for_challenge1: Use this for loop to collect all of the nectar.
        There are a few actions that you will want to `repeat 'counter' times`.
      course4_bee_fwp_challenge1: Gunakan satu `for loop` dalam sebuah fungsi untuk
        mengumpulkan semua jagung. `for loop` yang sama dapat menghitung sampai nilai
        maksimum berbeda dengan menggunakan parameter `length`.
      course4_bee_fwp_challenge2: |-
        Let's see if you can handle this one final test! Give it everything you've got!

        Use one `for loop` in a function to collect all of the vegetables in the row. Make the `for loop` count to different maximum values by using the `length` parameter. Make your program as short as possible by using a second `for loop` outside the function.

        Good luck!
      course4_collector_nested_loops_challenge2: "_\"Ayo berburu harta karun - menggunakan
        loops!\"_ \n\nBantu si pengumpul mencapai setidaknya dua tumpuk harta karun
        hanya menggunakan blok yang ada di toolbox Anda. Memungkinkan sekali untuk
        mendapatkan 4 harta karunnya"
      course4_harvester_nested_loops_challenge1: _”Aku butuh bantuan di pertanian!
        Bantu aku memanen jagung ini dengan hanya menggunakan blok yang ada di dalam
        toolbox Anda.”_
      course4_playlab_variables_challenge1: Gunakan balok ini untuk membuat aktor
        membagikan sebuah lelucon ketukan. Ganti bagian lucunya dan pengaturannya
        untuk menyeritakan lelucon Anda sendiri
      courseA_artist_loops10: |-
        ## Saatnya balik ke daratan. Bantu saya menaruh batu agar saya tidak jatuh!

        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops10_2018: |-
        ## Saatnya balik ke daratan. Bantu saya menaruh batu agar saya tidak jatuh!

        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops10_2019: |-
        ## Saatnya balik ke daratan. Bantu saya menaruh batu agar saya tidak jatuh!

        ![expandable](https://images.code.org/d3213d375d0271e114aa4313cdeb34be-image-1498064942606.gif)
      courseA_artist_loops11: |-
        ## Bantu saya membuat langkah-langkah untuk melihat kapal pergi berlayar.

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2018: |-
        ## Bantu saya membuat langkah-langkah untuk melihat kapal pergi berlayar.

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops11_2019: |-
        ## Bantu saya membuat langkah-langkah untuk melihat kapal pergi berlayar.

        ![expandable](https://images.code.org/ed19f00a2350b186fbe86ea805e17925-image-1498065450651.gif)
      courseA_artist_loops12: |-
        Artis melihat sesuatu yang lucu di kejauhan.  Gambarlah apa yang menurut Anda dilihat olehnya.

        * * *

        ### Ide

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2018: |-
        Artis melihat sesuatu yang lucu di kejauhan.  Gambarlah apa yang menurut Anda dilihat olehnya.

        * * *

        ### Ide

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops12_2019: |-
        Artis melihat sesuatu yang lucu di kejauhan.  Gambarlah apa yang menurut Anda dilihat olehnya.

        * * *

        ### Ide

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseA_artist_loops2: |-
        Bantu si artis membuat garis ini dua kali ke depan.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2018: |-
        Bantu si artis membuat garis ini dua kali ke depan.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops2_2019: |-
        Bantu si artis membuat garis ini dua kali ke depan.

        ![](https://images.code.org/04501f26a36673460f5c8fe04e3e7686-image-1498002095108.gif)
      courseA_artist_loops3: |-
        Artis kita sedang mencoba membuat garis lima kali, tetapi tidak berhasil. Bisakah Anda membantu?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops3_2018: |-
        Artis kita sedang mencoba membuat garis lima kali, tetapi tidak berhasil. Bisakah Anda membantu?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops3_2019: |-
        Artis kita sedang mencoba membuat garis lima kali, tetapi tidak berhasil. Bisakah Anda membantu?

        ![expandable](https://images.code.org/6d79b5f8291bd8e11c427bff25f423c2-image-1467935497388.gif)
      courseA_artist_loops4: |-
        Sekarang, gunakan loop <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> untuk membuat garis ini lima kali!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2018: |-
        Sekarang, gunakan loop <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="2-6">5</title></block></xml> untuk membuat garis ini lima kali!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops4_2019: |-
        Sekarang, gunakan loop <xml><block type="controls_repeat_simplified_dropdown" block-text="repeat"><title name="TIMES" config="2-6">5</title></block></xml> untuk membuat garis ini lima kali!

        ![](https://images.code.org/b2bc7f52ffdac2ad0d8e7c2d798c24df-image-1501875818062.gif)
      courseA_artist_loops5: |-
        ## Buat garis sepanjang tujuh langkah. Ini akan menjadi cakrawala kita.

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2018: |-
        ## Buat garis sepanjang tujuh langkah. Ini akan menjadi cakrawala kita.

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops5_2019: |-
        ## Buat garis sepanjang tujuh langkah. Ini akan menjadi cakrawala kita.

        ![expandable](https://images.code.org/dc7c4317177f2b94421c5aa589c31ac7-image-1498002771889.gif)
      courseA_artist_loops6: |-
        ## Gambar sebuah bukit yang cantik di permukaan.

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2018: |-
        ## Gambar sebuah bukit yang cantik di permukaan.

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops6_2019: |-
        ## Gambar sebuah bukit yang cantik di permukaan.

        ![expandable](https://images.code.org/f64d93b6d9a7d9c3edfce3c227c0dd49-image-1498062074031.gif)
      courseA_artist_loops7: |-
        ## Gunakan loop <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> untuk menambahkan ombak ke air.

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2018: |-
        ## Gunakan loop <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml> untuk menambahkan ombak ke air.

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops7_2019: |-
        Gunakan lingkaran <xml><block type="controls_repeat_simplified_dropdown" block-text="repeat"><title name="TIMES" config="3-10">???</title></block></xml> untuk menambahkan gelombang ke air.

        ![expandable](https://images.code.org/01c5f6772a8b608a2fca5f6de7e25c67-image-1498062629139.gif)
      courseA_artist_loops8: |-
        ## Kita membutuhkan tangga naik ke perahu.

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2018: |-
        ## Kita membutuhkan tangga naik ke perahu.

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops8_2019: |-
        ## Kita membutuhkan tangga naik ke perahu.

        ![expandable](https://images.code.org/ee90228fae25ecca1fba589b721f9120-image-1498063066878.gif)
      courseA_artist_loops9: |-
        ## **Tantangan:** Tangga turun ke dok patah. Bantu saya memperbaikinya.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2018: |-
        ## **Tantangan:** Tangga turun ke dok patah. Bantu saya memperbaikinya.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops9_2019: |-
        ## **Tantangan:** Tangga turun ke dok patah. Bantu saya memperbaikinya.

        ![expandable](https://images.code.org/9d36df1afb6a738ba7bcff8734403ff3-image-1498063282074.gif)
      courseA_artist_loops_challenge1: |-
        Anda dapat menggunakan loop untuk membuat banyak garis sekaligus.

        Bisakah Anda menggambar rumah? Buat rupa gambarnya sesuka hati Anda!  Coba cari pola-pola yang berulang!

        Berikut ini beberapa ide:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2018: |-
        Anda dapat menggunakan loop untuk membuat banyak garis sekaligus.

        Bisakah Anda menggambar rumah? Buat rupa gambarnya sesuka hati Anda!  Coba cari pola-pola yang berulang!

        Berikut ini beberapa ide:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge1_2019: |-
        Anda dapat menggunakan loop untuk membuat banyak garis sekaligus.

        Bisakah Anda menggambar rumah? Buat rupa gambarnya sesuka hati Anda!  Coba cari pola-pola yang berulang!

        Berikut ini beberapa ide:

        ![](https://images.code.org/6e59e881e0aa1d31186e81a203655a0b-image-1501785654664.png)
      courseA_artist_loops_challenge2a: |-
        _"Bantu saya mempersiapkan tempat perkemahan!"_

        Gunakan blok di toolbox untuk menggambar tiga tenda ini.
      courseA_artist_loops_challenge2a_2018: |-
        _"Bantu saya mempersiapkan tempat perkemahan!"_

        Gunakan blok di toolbox untuk menggambar tiga tenda ini.
      courseA_artist_loops_challenge2a_2019: |-
        _"Bantu saya mempersiapkan tempat perkemahan!"_

        Gunakan blok di toolbox untuk menggambar tiga tenda ini.
      courseA_collector_loops1: |-
        **Bermain Bebas:** Ini adalah Laurel si Petualang! Buat dia bergerak ke sana-sini dan dapatkan harta karun sebanyak-banyaknya.

        Pindahkan blok ke area kerja dan coba tebak cara mendapatkan harta karun. Dapatkan sedikitnya satu item untuk lulus level ini.
      courseA_collector_loops12: |-
        _"Eureka!  Ambil harta karun sebanyak-banyaknya!"_\
        (Anda tidak harus mengambil semuanya.)
      courseA_collector_loops12_2018: |-
        _"Eureka!  Ambil harta karun sebanyak-banyaknya!"_\
        (Anda tidak harus mengambil semuanya.)
      courseA_collector_loops12_2019: |-
        _"Eureka!  Ambil harta karun sebanyak-banyaknya!"_\
        (Anda tidak harus mengambil semuanya.)
      courseA_collector_loops1_2018: |-
        **Bermain Bebas:** Ini adalah Laurel si Petualang! Buat dia bergerak ke sana-sini dan dapatkan harta karun sebanyak-banyaknya.

        Pindahkan blok ke area kerja dan coba tebak cara mendapatkan harta karun. Dapatkan sedikitnya satu item untuk lulus level ini.
      courseA_collector_loops1_2019: |-
        **Bermain Bebas:** Ini adalah Laurel si Petualang! Buat dia bergerak ke sana-sini dan dapatkan harta karun sebanyak-banyaknya.

        Pindahkan blok ke area kerja dan coba tebak cara mendapatkan harta karun. Dapatkan sedikitnya satu item untuk lulus level ini.
      courseA_collector_loops2: |-
        Ambil ketiga tumpukan! Gerakkan Laurel ke tiap-tiap harta karun, lalu gunakan blok ini:
          <xml><block type="collector_collect"/></xml>
      courseA_collector_loops2_2018: 'Bawa ketiga timbunan! Pindahkan Laurel ke setiap
        bagian harta karun, lalu gunakan blok ini: <xml><block type="collector_collect"/></xml>'
      courseA_collector_loops2_2019: Ambil ketiga tumpukan! Pindahkan Laurel ke setiap
        bagian harta karun, lalu gunakan blok <xml><block type="collector_collect"
        block-text="get treasure"/></xml>.
      courseA_collector_loops3: Bagaimana Laurel bisa mengambil kelima tumpukan harta
        karun dengan satu blok <xml><block type="maze_moveEast"/></xml> saja?
      courseA_collector_loops3_2018: Bagaimana Laurel bisa mengambil kelima tumpukan
        harta karun dengan satu blok <xml><block type="maze_moveEast"/></xml> saja?
      courseA_collector_loops3_2019: Bagaimana Laurel bisa mengambil kelima tumpukan
        harta karun dengan satu blok <xml><block type="maze_moveEast" block-text="move
        east"/></xml> saja?
      courseA_collector_loops_challenge1: _"Bisakah saya dibantu mencari beberapa
        bug? Saya tahu jalan yang harus dilalui, tetapi saya tidak yakin berapa langkah
        yang harus ditempuh."_
      courseA_collector_loops_challenge1_2018: _"Bisakah saya dibantu mencari beberapa
        bug? Saya tahu jalan yang harus dilalui, tetapi saya tidak yakin berapa langkah
        yang harus ditempuh."_
      courseA_collector_loops_challenge1_2019: _"Bisakah saya dibantu mencari beberapa
        bug? Saya tahu jalan yang harus dilalui, tetapi saya tidak yakin berapa langkah
        yang harus ditempuh."_
      courseA_collector_preLoops1: "This is Laurel the Adventurer! \n\nPress \"Run\"
        to see her walk up to the treasure and grab it."
      courseA_collector_preLoops2: "Great!  Now you get to add code yourself!  \n\nSnap
        a ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        block to the bottom of the program and click \"Run\"!"
      courseA_collector_preLoops3: To grab the treasure, snap two ![](https://images.code.org/54c206b62a02f1d7ea8f1bee52664ecb-image-1508905670742.25.37.png)
        blocks and one ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
        block to the bottom of the program and click "Run"!
      courseA_collector_preLoops7: |-
        Ambil ketiga tumpukan! Gerakkan Laurel ke tiap-tiap harta karun, lalu gunakan blok ini:
          <xml><block type="collector_collect"/></xml>
      courseA_harvester_loops1: Bantu pemanen mengambil semua jagung!
      courseA_harvester_loops10: Bantu pemanen memilih lima bulir jagung!
      courseA_harvester_loops10_2019: Bantu pemanen memilih lima bulir jagung!
      courseA_harvester_loops11: Coba satu lagi sendiri!
      courseA_harvester_loops11_2019: Coba satu lagi sendiri!
      courseA_harvester_loops1_2019: Bantu pemanen mengambil semua jagung!
      courseA_harvester_loops2: Pemanen perlu mengambil semua jagung! Apakah Anda
        melihat pola?
      courseA_harvester_loops2_2019: Pemanen perlu mengambil semua jagung! Apakah
        Anda melihat pola?
      courseA_harvester_loops3: Dapatkah Anda mengambil semua jagung hanya menggunakan
        **satu** blok yang bergerak?
      courseA_harvester_loops3_2019: Dapatkah Anda mengambil semua jagung hanya menggunakan
        **satu** blok yang bergerak?
      courseA_harvester_loops4: |-
        _"Saya perlu bantuan untuk menemukan apa yang salah!"_

        Dapatkah Anda membantu pemanen menemukan bug di kodenya?
      courseA_harvester_loops4_2019: |-
        _"Saya perlu bantuan untuk menemukan apa yang salah!"_

        Dapatkah Anda membantu pemanen menemukan bug di kodenya?
      courseA_harvester_loops5: Cobalah sendiri! Dapatkah Anda mengambil jagung di
        akhir juga?
      courseA_harvester_loops5_2019: Cobalah sendiri! Dapatkah Anda mengambil jagung
        di akhir juga?
      courseA_harvester_loops5a: Lihat semua jagung ini? Bisakah Anda mengambil semuanya
        sendiri?
      courseA_harvester_loops5a_2019: Lihat semua jagung ini? Bisakah Anda mengambil
        semuanya sendiri?
      courseA_harvester_loops5b: Dapatkah Anda mengubah kode Anda untuk membuat pemanen
        mengambil semua jagung?
      courseA_harvester_loops5b_2019: Dapatkah Anda mengubah kode Anda untuk membuat
        pemanen mengambil semua jagung?
      courseA_harvester_loops6: Anda membutuhkan **satu** blok <xml><block type="maze_moveWest"
        block-text="move west"></block></xml> dan **satu** blok <xml><block type="maze_moveNorth"
        block-text="move north"></block></xml> untuk menyelesaikan teka-teki ini!
      courseA_harvester_loops6_2019: Anda membutuhkan **satu** blok <xml><block type="maze_moveWest"
        block-text="move west"></block></xml> dan **satu** blok <xml><block type="maze_moveNorth"
        block-text="move north"></block></xml> untuk menyelesaikan teka-teki ini!
      courseA_harvester_loops7: Cobalah sendiri!
      courseA_harvester_loops7_2019: Cobalah sendiri!
      courseA_harvester_loops9: Dapatkah Anda mengetahui cara memilih_semua_jagung
        ini?
      courseA_harvester_loops9_2019: Dapatkah Anda mengetahui cara memilih_semua_jagung
        ini?
      courseA_harvester_seq1: Bantu pemanen mengambil sepotong jagung!
      courseA_harvester_seq10: Pemanen perlu mengambil semua jagung! Apakah Anda melihat
        pola?
      courseA_harvester_seq10_2019: Pemanen perlu mengambil semua jagung! Apakah Anda
        melihat pola?
      courseA_harvester_seq11: Cobalah sendiri! Ambil semua jagung.
      courseA_harvester_seq11_2019: Cobalah sendiri! Ambil semua jagung.
      courseA_harvester_seq12: "_Terima kasih sudah membantu saya!_ \n\nAmbil semua
        jagung."
      courseA_harvester_seq12_2019: "_Terima kasih sudah membantu saya!_ \n\nAmbil
        semua jagung."
      courseA_harvester_seq13: Bantu pemanen mengambil jagung!
      courseA_harvester_seq13_2019: Bantu pemanen mengambil jagung!
      courseA_harvester_seq1_2019: Bantu pemanen mengambil sepotong jagung!
      courseA_harvester_seq2: Gunakan <xml><block type="maze_moveWest"/></xml> **tiga**
        kali untuk membawa pemanen ke jagung!
      courseA_harvester_seq2_2019: Gunakan **tiga** blok <xml><block type="maze_moveWest"
        block-text="move west"/></xml> untuk membawa pemanen ke jagung!
      courseA_harvester_seq3: Gunakan <xml><block type="maze_moveNorth"/></xml> **tiga**
        kali untuk membawa pemanen ke jagung! Jangan lupa untuk mengambil jagung di
        akhir.
      courseA_harvester_seq3_2019: Gunakan **tiga** blok <xml><block type="maze_moveNorth"
        block-text="move north"/></xml> untuk membawa pemanen ke jagung! Jangan lupa
        untuk mengambil jagung di akhir.
      courseA_harvester_seq4: Tambahkan _satu_ blok untuk membantu pemanen mengambil
        jagung.
      courseA_harvester_seq4_2019: Tambahkan _satu_ blok untuk membantu pemanen mengambil
        jagung.
      courseA_harvester_seq5: Dapatkah Anda mencari tahu apa yang salah dengan kode
        ini? Bantu pemanen mengambil jagung!
      courseA_harvester_seq5_2019: Dapatkah Anda mencari tahu apa yang salah dengan
        kode ini? Bantu pemanen mengambil jagung!
      courseA_harvester_seq6: Cobalah sendiri!
      courseA_harvester_seq6_2019: Cobalah sendiri!
      courseA_harvester_seq7: Anda harus bergerak dalam dua arah untuk membawa jagung!
        Bantu pemanen mengambil arah yang benar.
      courseA_harvester_seq7_2019: Anda harus bergerak dalam dua arah untuk membawa
        jagung! Bantu pemanen mengambil arah yang benar.
      courseA_harvester_seq8: Sekarang pemanen perlu mengambil jagung dua kali!
      courseA_harvester_seq8_2019: Sekarang pemanen perlu mengambil jagung dua kali!
      courseA_harvester_seq9: Tambahkan dua blok untuk menyelesaikan teka-teki ini!
      courseA_harvester_seq9_2019: Tambahkan dua blok untuk menyelesaikan teka-teki
        ini!
      courseA_maze_ramp2_2018: Lampirkan kedua blok <xml><block type="maze_moveEast"/></xml>
        ke <xml><block type="when_run"/></xml> untuk menyelesaikan kode Anda, lalu
        klik "▶ Jalankan".
      courseA_maze_ramp2_2019: Lekatkan blok <xml><block type="maze_moveEast" block-text="move
        east"/></xml> dan blok <xml><block type="when_run" block-text="when run"/></xml>
        untuk menyelesaikan kode Anda, lalu klik "▶ Jalankan".
      courseA_maze_ramp3a_2018: Ambil <xml><block type="maze_moveNorth"/></xml> dari
        kotak perlengkapan dan tambahkan ke bagian bawah blok lain untuk menyelesaikan
        kode ini, lalu klik "▶ Jalankan".
      courseA_maze_ramp3a_2019: Ambil blok <xml><block type="maze_moveNorth" block-text="move
        north"/></xml> dari kotak perlengkapan dan tambahkan ke bagian bawah blok
        lain untuk menyelesaikan kode ini, lalu klik "▶ Jalankan".
      courseA_maze_ramp3b_2018: "Ada blok tambahan di akhir kode ini!  \n\nPindahkan
        kembali ke kotak perlengkapan untuk membuangnya."
      courseA_maze_ramp3b_2019: "Ada blok tambahan di akhir kode ini!  \n\nPindahkan
        kembali ke kotak perlengkapan untuk membuangnya."
      courseA_maze_ramp4a_2018: Dapatkah Anda mengetahui blok mana yang perlu Anda
        tambahkan ke bagian bawah blok lain untuk menyelesaikan kode ini?
      courseA_maze_ramp4a_2019: Dapatkah Anda mengetahui blok mana yang perlu Anda
        tambahkan ke bagian bawah blok lain untuk menyelesaikan kode ini?
      courseA_maze_ramp5a_2018: Cobalah ini semua sendiri!
      courseA_maze_ramp5a_2019: Cobalah ini semua sendiri!
      courseA_maze_seq1: _"Mainkan blok-blok ini dan coba giring saya ke babi jahat!"_
      courseA_maze_seq10: |-
        **Tantangan:** Putari TNT agar burung sampai ke babi!

        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq10_2018: "**Tantangan:** Hindari TNT untuk membawa burung ke
        babi!"
      courseA_maze_seq10_2019: "**Tantangan:** Hindari TNT untuk membawa burung ke
        babi!"
      courseA_maze_seq10_copy: |-
        **Tantangan:** Putari TNT agar burung sampai ke babi!

        ![expandable](https://images.code.org/a656e421bc90e530a7e1ce636e507752-image-1497996976195.gif)
      courseA_maze_seq11: |-
        Saatnya puzzle pendek! Gerakkan ke satu arah, lalu ke arah lainnya untuk menggiring burung ke babi.

        ![expandable](https://images.code.org/bb4571384fc56702704a0c9395ee3695-image-1497996380902.gif)
      courseA_maze_seq11_2018: Waktu untuk teka-teki yang lebih singkat! Bergerak
        satu arah, lalu yang lain membawa burung ke babi.
      courseA_maze_seq11_2019: Waktu untuk teka-teki yang lebih singkat! Bergerak
        satu arah, lalu yang lain membawa burung ke babi.
      courseA_maze_seq12: |-
        Tangkap babi itu!

        ![expandable](https://images.code.org/c6ae5024441e2305db82d06679e5a281-image-1497997160569.gif)
      courseA_maze_seq12_2018: Bawa babi itu!
      courseA_maze_seq12_2019: Bawa babi itu!
      courseA_maze_seq13_2019: Tangkap babi itu bagaimana pun caranya!
      courseA_maze_seq1_2018: _"Mainkan blok-blok ini dan coba giring saya ke babi
        jahat!"_
      courseA_maze_seq1_2019: _"Mainkan blok-blok ini dan coba giring saya ke babi
        jahat!"_
      courseA_maze_seq2: |-
        _"Ada bug! Perbaiki code agar saya sampai ke babi."_

        ![expandable](https://images.code.org/4af4959874b3ca1fdd3008dc4f77add4-image-1497994904322.gif)
      courseA_maze_seq3: |-
        _"Perbaiki code agar saya sampai ke babi!"_

        ![expandable](https://images.code.org/4adca88dc6df7378846a91d0fb0e59d1-image-1497995239069.gif)
      courseA_maze_seq4: "_\"Ada yang tidak beres.\"_ \n\nSINGKIRKAN blok agar burung
        sampai ke babi!\n\n![expandable](https://images.code.org/6af44fb0ba5ac5dd5502e2538f51fb9c-image-1497996162453.gif)"
      courseA_maze_seq5: |-
        Coba sendiri yang ini sejak awal.

        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5_2018: Cobalah yang ini.
      courseA_maze_seq5_2019: Cobalah yang ini.
      courseA_maze_seq5_copy: |-
        Coba sendiri yang ini sejak awal.

        ![expandable](https://images.code.org/e4ef591b4580db478330c298d1af756f-image-1497997080163.gif)
      courseA_maze_seq5a_2018: |-
        _"Sini babi, babi!"_

        Apa yang dapat Anda tambahkan di akhir kode ini untuk membawa burung ke babi?
      courseA_maze_seq5a_2019: |-
        _"Sini babi, babi!"_

        Apa yang dapat Anda tambahkan di akhir kode ini untuk membawa burung ke babi?
      courseA_maze_seq6: |-
        Gerakkan ke satu arah, lalu ke arah lainnya untuk menggiring burung ke babi!

        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq6_2018: Gerakkan ke satu arah, lalu ke arah lainnya untuk menggiring
        burung ke babi!
      courseA_maze_seq6_2019: Gerakkan ke satu arah, lalu ke arah lainnya untuk menggiring
        burung ke babi!
      courseA_maze_seq6_copy: |-
        Gerakkan ke satu arah, lalu ke arah lainnya untuk menggiring burung ke babi!

        ![expandable](https://images.code.org/8f71c406afa60c6898937d950c670205-image-1497996506419.gif)
      courseA_maze_seq7: |-
        Temukan apa yang kurang lalu tambahkan blok agar burung sampai ke babi!

        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq7_copy: |-
        Temukan apa yang kurang lalu tambahkan blok agar burung sampai ke babi!

        ![expandable](https://images.code.org/35bdb628dabd4259b581286b071c02f3-image-1497996651260.gif)
      courseA_maze_seq8: |-
        Selesaikan level ini dan giring burung sampai ke babi!

        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq8_2018: Selesaikan level ini dan giring burung sampai ke babi!
      courseA_maze_seq8_2019: Selesaikan level ini dan giring burung sampai ke babi!
      courseA_maze_seq8_copy: |-
        Selesaikan level ini dan giring burung sampai ke babi!

        ![expandable](https://images.code.org/fb4735244f74a4e001d1fa7b5c6028f9-image-1497998330218.gif)
      courseA_maze_seq9: |-
        **Tantangan:** Debug level ini dengan menambahkan blok untuk menggiring burung sampai ke babi!

        ![expandable](https://images.code.org/3f35068dd3cf51c420a536fa078f854d-image-1497996843105.gif)
      courseA_maze_seq_challenge1: Debug level ini. Singkirkan blok-blok ekstra, dan
        tambahi blok-blok yang hilang. Giring burungnya ke babi!
      courseA_maze_seq_challenge1_2018: Debug level ini. Singkirkan blok-blok ekstra,
        dan tambahi blok-blok yang hilang. Giring burungnya ke babi!
      courseA_maze_seq_challenge1_2019: Debug level ini. Singkirkan blok-blok ekstra,
        dan tambahi blok-blok yang hilang. Giring burungnya ke babi!
      courseA_maze_seq_challenge2_2019: Telusuri jalan untuk menggiring burung ke
        babi. Hindari TNT atau bulu-bulu akan beterbangan!
      courseA_playLab_events1_2019: Ini adalah tingkat Play Lab. Pindahkan blok ke
        ruang kerja dan lihat yang terjadi!
      courseA_playLab_events2_2019: Jorge the Dog ingin mengatakan "Halo." Dapatkah
        Anda membantunya?
      courseA_playLab_events3: |-
        Bantu Jorge si Anjing bergerak dengan menghubungkan blok <xml><block type="studio_move">
            <title name="SPRITE">1</title>
            <title name="DIR">8</title>
          </block></xml> dengan blok event <xml><block type="studio_whenArrow">
            <title name="VALUE">left</title>
          </block></xml> yang sudah ada di area kerja.

        Giring Jorge ke bendera untuk menyelesaikan level ini!
      courseA_playLab_events3_2018: |-
        Bantu Jorge si Anjing bergerak dengan menghubungkan blok <xml><block type="studio_move">
            <title name="SPRITE">1</title>
            <title name="DIR">8</title>
          </block></xml> dengan blok event <xml><block type="studio_whenArrow">
            <title name="VALUE">left</title>
          </block></xml> yang sudah ada di area kerja.

        Giring Jorge ke bendera untuk menyelesaikan level ini!
      courseA_playLab_events3_2019: "Bantu Jorge the Dog bergerak dengan menghubungkan
        blok <xml><block type=\"studio_move\" block-text=\"move dog west\">\n    <title
        name=\"SPRITE\">1</title>\n    <title name=\"DIR\">8</title>\n  </block></xml>
        ke blok peristiwa <xml><block type=\"studio_whenArrow\" block-text=\"when
        left arrow\">\n    <title name=\"VALUE\">left</title>\n  </block></xml> yang
        sudah ada di ruang kerja. \n\nGunakan tombol panah atau tekan tombol panah
        untuk memindahkan Jorge ke bendera dan menyelesaikan tingkatnya!"
      courseA_playLab_events4: Sekarang tambahkan blok-blok lagi untuk menggerakkan
        Jorge ke kanan ketika tombol panah kanan diklik.
      courseA_playLab_events4_2018: Sekarang, tambahkan blok acara lain untuk membuat
        Jorge bergerak ke kanan ketika tombol panah kanan diklik.
      courseA_playLab_events4_2019: Sekarang, tambahkan blok peristiwa lain untuk
        membuat Jorge bergerak ke kanan ketika tombol panah kanan diklik. Gunakan
        tombol panah atau tekan tombol panah untuk memindahkan Jorge ke kedua bendera
        dan menyelesaikan tingkatnya!
      courseA_playLab_events5: Tambahkan event  untuk menggerakkan Jorge naik dan
        turun ketika tombol panah naik dan turun ditekan.
      courseA_playLab_events5_2018: Tambahkan event  untuk menggerakkan Jorge naik
        dan turun ketika tombol panah naik dan turun ditekan.
      courseA_playLab_events5_2019: Tambahkan peristiwa agar Jorge bergerak ke atas
        dan ke bawah saat tombol \`atas\` dan \`bawah\` ditekan. Buat Jorge mendapatkan
        bendera untuk menyelesaikan tingkatnya!
      courseA_playLab_events6_2019: Jadikan ini lebih menarik dengan mengubah latar
        belakang dan memainkan suara acak saat Jorge diklik. Ketika kode Anda siap,
        klik pada Jorge untuk mencobanya!
      courseA_playLab_events7_2018: _Freeplay:_ Tambahkan apa pun yang Anda inginkan
        ke permainan ini. Dapatkah Anda membuat dinosaurus menghilang ketika Jorge
        menabraknya?
      courseA_playLab_events7_2019: _Freeplay:_ Tambahkan apa pun yang Anda inginkan
        ke permainan ini. Dapatkah Anda membuat dinosaurus menghilang ketika Jorge
        menabraknya?
      courseA_playlab_events_challenge1: |-
        Mengklik Olive akan memunculkan Robin! Apakah Anda juga dapat menulis kode untuk menampilkan karakter selebihnya?

        Dalam puzzle ini, pastikan mengklik tips! Tips tersebut akan membantu Anda mengerjakan proyek ini langkah demi langkah!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge1_2018: |-
        Mengklik Olive akan memunculkan Robin! Apakah Anda juga dapat menulis kode untuk menampilkan karakter selebihnya?

        Dalam puzzle ini, pastikan mengklik tips! Tips tersebut akan membantu Anda mengerjakan proyek ini langkah demi langkah!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge1_2019: |-
        Mengklik Olive akan memunculkan Robin! Apakah Anda juga dapat menulis kode untuk menampilkan karakter selebihnya?

        Dalam puzzle ini, pastikan mengklik tips! Tips tersebut akan membantu Anda mengerjakan proyek ini langkah demi langkah!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2: |-
        Beri semuanya sesuatu untuk dikerjakan ketika Anda mengklik mereka. Apa yang akan diucapkan binatang? Apa lagi yang akan terjadi?

        Dalam puzzle ini, pastikan mengklik tips. Tips akan memberikan hal-hal seru yang layak dicoba!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2_2018: |-
        Beri semuanya sesuatu untuk dikerjakan ketika Anda mengklik mereka. Apa yang akan diucapkan binatang? Apa lagi yang akan terjadi?

        Dalam puzzle ini, pastikan mengklik tips. Tips akan memberikan hal-hal seru yang layak dicoba!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseA_playlab_events_challenge2_2019: |-
        Beri semuanya sesuatu untuk dikerjakan ketika Anda mengklik mereka. Apa yang akan diucapkan binatang? Apa lagi yang akan terjadi?

        Dalam puzzle ini, pastikan mengklik tips. Tips akan memberikan hal-hal seru yang layak dicoba!

        ![](<https://images.code.org/d42103835215d4b070f7f463b5e3073c-image-1494531456899.30.19 PM.png>)
      courseB_Scrat_ramp1_2018: Untuk membawa Scrat ke biji, pasang blok <xml><block
        type="maze_moveEast"/></xml> ke bagian bawah blok <xml><block type="when_run"/></xml>,
        lalu tekan "▶ Jalankan"!
      courseB_Scrat_ramp1_2019: Untuk membawa Scrat ke biji, pasang blok <xml><block
        type="maze_moveEast" block-text="move East"/></xml> ke bagian bawah blok <xml><block
        type="when_run" block-text="when run"/></xml>, lalu tekan "▶ Jalankan"!
      courseB_Scrat_ramp2_2018: Gabungkan kedua blok <xml><block type="maze_moveEast"/></xml>
        ke bagian bawah <xml><block type="when_run"/></xml> untuk menyelesaikan kode
        Anda, lalu klik "▶ Jalankan".
      courseB_Scrat_ramp2_2019: Gabungkan kedua blok <xml><block type="maze_moveEast"
        block-text="move east"/></xml> ke bagian bawah <xml><block type="when_run"
        block-text="when run"/></xml> untuk menyelesaikan kode Anda, lalu klik "▶
        Jalankan".
      courseB_Scrat_ramp3a_2018: Ambil <xml><block type="maze_moveNorth"/></xml> dari
        kotak perlengkapan dan tambahkan ke bagian bawah blok lain untuk menyelesaikan
        kode ini, lalu klik "▶ Jalankan".
      courseB_Scrat_ramp3a_2019: Ambil blok <xml><block type="maze_moveNorth" block-text="move
        north"/></xml> dari kotak perlengkapan dan tambahkan ke bagian bawah blok
        lain untuk menyelesaikan kode ini, lalu klik "▶ Jalankan".
      courseB_Scrat_ramp3b_2018: |-
        Ada blok tambahan di akhir kode ini!

        Pindahkan kembali ke kotak peralatan untuk membuangnya.
      courseB_Scrat_ramp3b_2019: |-
        Ada blok tambahan di akhir kode ini!

        Pindahkan kembali ke kotak peralatan untuk membuangnya.
      courseB_Scrat_ramp4a_2018: Dapatkah Anda mengetahui blok mana yang perlu Anda
        tambahkan ke bagian bawah blok lain untuk menyelesaikan kode ini?
      courseB_Scrat_ramp4a_2019: Dapatkah Anda mengetahui blok mana yang perlu Anda
        tambahkan ke bagian bawah blok lain untuk menyelesaikan kode ini?
      courseB_Scrat_ramp5a_2018: Cobalah ini semua sendiri!
      courseB_Scrat_ramp5a_2019: Cobalah ini semua sendiri!
      courseB_artist_loops10: |-
        Gunakan apa yang telah kamu pelajari untuk membuat gambar yang menurutmu dilihat oleh artis, saat dia sampai di rumah.

        * * *

        ### Ide

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops10_2018: |-
        Gunakan apa yang telah kamu pelajari untuk membuat gambar yang menurutmu dilihat oleh artis, saat dia sampai di rumah.

        * * *

        ### Ide

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops10_2019: |-
        Gunakan apa yang telah kamu pelajari untuk membuat gambar yang menurutmu dilihat oleh artis, saat dia sampai di rumah.

        * * *

        ### Ide

        ![](https://images.code.org/b329e035f02cf0273987a530d4ff93b3-image-1497998147979.gif)
        ![](https://images.code.org/126edbb030b78586c620fea11bd9c867-image-1497998152966.gif)
        ![](https://images.code.org/a4fc9deba0ecdae5f434a828708d997b-image-1497998171788.gif)
        ![](https://images.code.org/55271714dcfc01bf49441cdf3bf17649-image-1497998176661.gif)
      courseB_artist_loops1_2019: Ini adalah jenis puzzle baru bernama "Artist". Coba
        mainkan level tersebut dan gambarlah sesuatu yang menyenangkan.
      courseB_artist_loops2_2019: Artis sedang mencoba menggambar garis **6** kali,
        tetapi tidak berhasil. Apakah anda dapat membantu?
      courseB_artist_loops3_2019: Bantu artis menggambar garis 7 kali untuk membuat
        dinding taman.
      courseB_artist_loops4_2019: Sekarang kita perlu menyiapkan tanah untuk ditanam.
        Temukan bug dalam kode dan bantu seniman menyiapkan lapangan.
      courseB_artist_loops5_2019: Waktunya memperbaiki tangga! Ulangi pola ini **5**
        kali agar artis dapat mencapai puncak semak.
      courseB_artist_loops6: Di belakang semak ada tanaman menjalar penuh bunga. Bisakah
        kamu memanjat tanaman menjalar dan melihat kemana perginya?
      courseB_artist_loops6_2018: Di belakang semak ada tanaman menjalar penuh bunga.
        Bisakah kamu memanjat tanaman menjalar dan melihat kemana perginya?
      courseB_artist_loops6_2019: Di belakang semak ada tanaman menjalar penuh bunga.
        Bisakah kamu memanjat tanaman menjalar dan melihat kemana perginya?
      courseB_artist_loops7: "**Tantangan:**  Itu taman tersembunyi! Mari kita berjalan
        berkeliling."
      courseB_artist_loops7_2018: "**Tantangan:**  Itu taman tersembunyi! Mari kita
        berjalan berkeliling."
      courseB_artist_loops7_2019: "**Tantangan:**  Itu taman tersembunyi! Mari kita
        berjalan berkeliling."
      courseB_artist_loops8_2019: Waktunya pulang ke rumah. Dengan hanya menggunakan
        satu blok, bisakah anda memperbaiki tangga ini untuk membantu artis turun?
      courseB_artist_loops9_2019: Ayo lewat pintasan ke rumah, melalui kolam. Bisakah
        kami membantu artis tetap ada di batu?
      courseB_artist_loops_challenge1: _"Saatnya melemparkan dadu! Apakah Anda bisa
        membantu saya menggambarkan ini?"_
      courseB_artist_loops_challenge1_2018: _"Saatnya melemparkan dadu! Apakah Anda
        bisa membantu saya menggambarkan ini?"_
      courseB_artist_loops_challenge1_2019: _"Saatnya melemparkan dadu! Apakah Anda
        bisa membantu saya menggambarkan ini?"_
      courseB_artist_loops_challenge2: Gambar X sebanyak mungkin. Kamu bisa menggambar
        3 kali berturut-turut?
      courseB_artist_loops_challenge2_2018: Gambar X sebanyak mungkin. Kamu bisa menggambar
        3 kali berturut-turut?
      courseB_artist_loops_challenge2_2019: Gambar X sebanyak mungkin. Kamu bisa menggambar
        3 kali berturut-turut?
      courseB_collector_loops1: |-
        **Bermain Bebas:** Ini adalah Laurel si Petualang! Buat dia bergerak ke sana-sini dan dapatkan harta karun sebanyak-banyaknya.

        Pindahkan blok ke area kerja dan coba tebak cara mendapatkan harta karun. Dapatkan sedikitnya satu item untuk lulus level ini.
      courseB_collector_loops10_2019: Bantu Laurel mengambil semua harta karun dari
        gua ini.
      courseB_collector_loops11_2019: Eureka! Ambil sebanyak mungkin harta karun!
      courseB_collector_loops1_2018: "**Free Play:** Bergerak di sekitar Laurel dan
        dapatkan harta sebanyak yang Anda dapat. Dapatkan paling sedikit satu item
        tanpa kesalahan untuk melewati tingkat ini.  \n\n* * *\n\nPindahkan blok ke
        ruang kerja dan coba cari tahu cara mendapatkan harta."
      courseB_collector_loops1_2019: "**Free Play:** Bergerak di sekitar Laurel dan
        dapatkan harta sebanyak yang Anda dapat. Dapatkan paling sedikit satu item
        tanpa kesalahan untuk melewati tingkat ini.  \n\n* * *\n\nPindahkan blok ke
        ruang kerja dan coba cari tahu cara mendapatkan harta."
      courseB_collector_loops2: |-
        Pindahkan Laurel ke harta karun, lalu gunakan blok <xml><block type="collector_collect"/></xml> untuk mengambilnya.

        Ambil keempat tumpukan untuk lulus dari level ini.
      courseB_collector_loops2_2018: |-
        Pindahkan Laurel ke harta karun, lalu gunakan blok <xml><block type="collector_collect"/></xml> untuk mengambilnya.

        Ambil keempat tumpukan untuk lulus dari level ini.
      courseB_collector_loops2_2019: |-
        Pindahkan Laurel ke harta karun, lalu gunakan blok <xml><block type="collector_collect" block-text="get treasure"/></xml> untuk mengambilnya.

        Dapatkan keempat timbunan untuk melewati tingkat ini.
      courseB_collector_loops3: Bagaimana Laurel bisa mengambil kelima tumpukan harta
        karun dengan satu blok <xml><block type="maze_moveEast"/></xml> saja?
      courseB_collector_loops3_2018: Bagaimana Laurel bisa mengambil kelima tumpukan
        harta karun dengan satu blok <xml><block type="maze_moveEast"/></xml> saja?
      courseB_collector_loops3_2019: Bagaimana Laurel bisa mengambil kelima tumpukan
        harta karun dengan satu blok <xml><block type="maze_moveEast" block-text="move
        east"/></xml> saja?
      courseB_collector_loops4_2019: Perbaiki jalur Laurel untuk mengambil semua harta
        karun ini!
      courseB_collector_loops5_2019: Tambahkan kode dari puzzle terakhir untuk mengambil
        semua harta karun.
      courseB_collector_loops6_2019: Pikirkan kode untuk membantu Laurel mengambil
        semua harta karun!
      courseB_collector_loops7_2019: Tulis kode untuk mengambil semua harta karun
        ini.
      courseB_collector_loops8_2019: "**Tantangan:** Harta karun ada di sepanjang
        tangga turun ini! Tulis kode untuk membantu Laurel mengambil semuanya."
      courseB_collector_loops9_2019: _"Bantu aku mengambil harta karun dari lembah
        yang curam ini."_
      courseB_collector_loops_challenge1_2019: Saat ini jumlah blokmu terbatas. Ambil
        semua harta karun!
      courseB_collector_loops_challenge2a: |-
        _"Ayo ambil harta karunnya!"_

        Bantu Laurel setidaknya mendapatkan **5** harta karun untuk menyelesaikan puzzle ini.
      courseB_collector_loops_challenge2a_2018: |-
        _"Ayo ambil harta karunnya!"_

        Bantu Laurel setidaknya mendapatkan **5** harta karun untuk menyelesaikan puzzle ini.
      courseB_collector_loops_challenge2a_2019: |-
        _"Ayo ambil harta karunnya!"_

        Bantu Laurel setidaknya mendapatkan **5** harta karun untuk menyelesaikan puzzle ini.
      courseB_iceage_loops1: Bantu Scrat melintasi es yang licin untuk menuju ke biji!
      courseB_iceage_loops10: Bantu Scrat sepenuhnya menuju ke biji!
      courseB_iceage_loops10_2019: Bantu Scrat sepenuhnya menuju ke biji!
      courseB_iceage_loops11: Bantu Scrat menuju ke biji!
      courseB_iceage_loops11_2019: Bantu Scrat menuju ke biji!
      courseB_iceage_loops12: Menuju ke biji dengan cara apa pun yang dapat Anda lakukan!
      courseB_iceage_loops12_2019: Menuju ke biji dengan cara apa pun yang dapat Anda
        lakukan!
      courseB_iceage_loops1_2019: Bantu Scrat melintasi es yang licin untuk menuju
        ke biji!
      courseB_iceage_loops2: Gunakan blok <xml><block type="maze_moveWest"/></xml>
        dan <xml><block type="maze_moveSouth"/></xml> untuk menuju ke biji!
      courseB_iceage_loops2_2019: Gunakan blok <xml><block type="maze_moveWest" block_text="move
        west"/></xml> dan <xml><block type="maze_moveSouth" block_text="move south"/></xml>
        untuk menuju ke biji!
      courseB_iceage_loops3: Dapatkah Anda menuju ke biji hanya dengan satu blok <xml><block
        type="maze_moveWest"/></xml>? Coba gunakan satu lingkaran!
      courseB_iceage_loops3_2019: Dapatkah Anda menuju ke biji hanya dengan satu blok
        <xml><block type="maze_moveWest" block-text="move west"/></xml>? Coba gunakan
        satu lingkaran!
      courseB_iceage_loops4: Tambahkan satu blok lagi untuk membawa sepenuhnya Scrat
        menuju ke biji!
      courseB_iceage_loops4_2019: Tambahkan satu blok lagi untuk membawa sepenuhnya
        Scrat menuju ke biji!
      courseB_iceage_loops6: Dapatkah Anda menambahkan lingkaran untuk menuju ke biji?
      courseB_iceage_loops6_2019: Dapatkah Anda menambahkan lingkaran untuk menuju
        ke biji?
      courseB_iceage_loops7: Scrat benar-benar menginginkan biji itu!
      courseB_iceage_loops7_2019: Scrat benar-benar menginginkan biji itu!
      courseB_iceage_loops8: Dapatkah Anda memperbaiki kode ini?
      courseB_iceage_loops8_2019: Dapatkah Anda memperbaiki kode ini?
      courseB_iceage_loops9: Biji itu sangat jauh! Dapatkah Anda menggunakan lingkaran
        untuk membantu Scrat sampai di sana?
      courseB_iceage_loops9_2019: Biji itu sangat jauh! Dapatkah Anda menggunakan
        lingkaran untuk membantu Scrat sampai di sana?
      courseB_maze_seq10_2019: Perbaiki bug untuk membawa Scrat ke biji.
      courseB_maze_seq11_2019: Ini semua milik Anda! Bawa Scrat ke biji.
      courseB_maze_seq12_2019: Sekarang bawa biji itu dengan cara apa pun yang Anda
        dapat lakukan!
      courseB_maze_seq1_2019: |-
        Bermainlah dengan blok-blok ini untuk melihat yang dilakukan Scrat!

        Bawa Scrat ke biji untuk menyelesaikan tingkatnya.
      courseB_maze_seq3: _"Perbaiki kode agar aku sampai ke babi!"_
      courseB_maze_seq4_2019: Gunakan **2** blok gerakan untuk membawa Scrat ke biji.
      courseB_maze_seq5_2019: Teka-teki ini sedikit rumit!
      courseB_maze_seq6_2019: Bergerak satu arah, lalu yang lain membawa Scrat ke
        biji!
      courseB_maze_seq7_2019: Cari tahu yang hilang lalu tambahkan blok untuk membawa
        Scrat ke biji!
      courseB_maze_seq8_2019: Giliran Anda! Apa yang perlu Anda lakukan untuk membawa
        Scrat ke biji?
      courseB_maze_seq9: "**Tantangan:** Bergerak di sekeliling TNT agar burung sampai
        ke babi."
      courseB_maze_seq9_2018: "**Tantangan:** Bergerak di sekitar es yang pecah untuk
        membawa Scrat ke biji."
      courseB_maze_seq9_2019: "**Tantangan:** Bergerak di sekitar es yang pecah untuk
        membawa Scrat ke biji."
      courseB_maze_seq_challenge1: Kamu hanya punya empat perpindahan blok. Bisakah
        kamu menemukan jalur sebelum kehabisan blok?
      courseB_maze_seq_challenge1_2018: Kamu hanya punya empat perpindahan blok. Bisakah
        kamu menemukan jalur sebelum kehabisan blok?
      courseB_maze_seq_challenge1_2019: Kamu hanya punya empat perpindahan blok. Bisakah
        kamu menemukan jalur sebelum kehabisan blok?
      courseB_maze_seq_challenge2_2019: Debug level ini. Bloknya sudah benar, tertapi
        urutannya salah!
      courseB_playLab_events1: "Game ini disebut \"Play Lab\".  \n\nLihat apakah kamu
        bisa tahu apa yang dilakukan setiap blok."
      courseB_playLab_events1_2018: "Game ini disebut \"Play Lab\".  \n\nLihat apakah
        kamu bisa tahu apa yang dilakukan setiap blok."
      courseB_playLab_events1_2019: "Game ini disebut \"Play Lab\".  \n\nLihat apakah
        kamu bisa tahu apa yang dilakukan setiap blok."
      courseB_playlab_events2_2019: Buat Daisy si Naga mengatakan sesuatu bila kami
        mengeklik "Run".
      courseB_playlab_events3: Gunakan suatu event agar Daisy si Naga beralih ke suasana
        hati acak ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        jika diklik.
      courseB_playlab_events3_2018: Gunakan suatu event agar Daisy si Naga beralih
        ke suasana hati acak ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        jika diklik.
      courseB_playlab_events3_2019: Gunakan suatu event agar Daisy si Naga beralih
        ke suasana hati acak ![](https://images.code.org/c365e065614fea592612264f33624c09-image-1475698889081.17.53.png)
        jika diklik.
      courseB_playlab_events4: "Waktunya kstaria!  \n\nTambahkan satu event agar ksatria
        bergerak ke arah naga ketika tanda panah kiri diklik."
      courseB_playlab_events4_2018: |-
        Waktu ksatria! Dapatkan naga untuk menyelesaikan tingkat ini.

        Tambahkan acara sehingga ksatria bergerak ke arah naga ketika panah kiri diklik.
      courseB_playlab_events4_2019: |-
        Waktu ksatria! Dapatkan naga untuk menyelesaikan tingkat ini.

        Tambahkan acara sehingga ksatria bergerak ke arah naga ketika panah kiri diklik.
      courseB_playlab_events5_2018: "Sekarang tambahkan acara sehingga ksatria melarikan
        diri dari naga ketika Anda menekan panah kanan.  \n\nPindahkan ksatria ke
        kanan untuk melewati tingkat ini."
      courseB_playlab_events5_2019: "Sekarang tambahkan acara sehingga ksatria melarikan
        diri dari naga ketika Anda menekan panah kanan.  \n\nPindahkan ksatria ke
        kanan untuk melewati tingkat ini."
      courseB_playlab_events6: |-
        Bantu ksatriamu mengambil semua bendera!

        Untuk melakukannya, kamu akan perlu menambahkan events untuk membantu ksatria bergerak ke atas, bawah, kiri, dan kanan.
      courseB_playlab_events6_2018: |-
        Bantu ksatriamu mengambil semua bendera!

        Untuk melakukannya, kamu akan perlu menambahkan events untuk membantu ksatria bergerak ke atas, bawah, kiri, dan kanan.
      courseB_playlab_events6_2019: |-
        Bantu ksatriamu mengambil semua bendera!

        Untuk melakukannya, kamu akan perlu menambahkan events untuk membantu ksatria bergerak ke atas, bawah, kiri, dan kanan.
      courseB_playlab_events7: "Buat permainan ini menyenangkan dengan mengatur ksatria
        agar menghilang jika dia lari ke arah naga dalam perjalanan untuk mengambil
        bendera! \n\nPutar suara jika mereka bertabrakan untuk membuatnya terasa nyata.\n\nKunjungi
        semua tujuan, lalu lari ke arah naga untuk lulus level ini."
      courseB_playlab_events7_2018: "Buat permainan ini menyenangkan dengan menambahkan
        lebih banyak hal!\n\n1.  Atur ksatria untuk menghilang ketika berlari ke naga.
        \  \n2.  Mainkan suara ketika mereka bertabrakan untuk membuatnya terasa lebih
        nyata.   \n\n* * *\n\nKunjungi semua sasaran, lalu berlari ke naga untuk melewati
        tingkat ini."
      courseB_playlab_events7_2019: "Buat permainan ini menyenangkan dengan menambahkan
        lebih banyak hal!\n\n1.  Atur ksatria untuk menghilang ketika berlari ke naga.
        \  \n2.  Mainkan suara ketika mereka bertabrakan untuk membuatnya terasa lebih
        nyata.   \n\n* * *\n\nKunjungi semua sasaran, lalu berlari ke naga untuk melewati
        tingkat ini."
      courseB_playlab_eventsFP_2019: "**Free play:** Gunakan imajinasi Anda. Apa yang
        dapat Anda lakukan untuk membuat permainan ini lebih menyenangkan?"
      courseB_playlab_events_challenge1: "Waktunya untuk Balapan Hewan Hebat! Buat
        hewan bergerak ke bawah jika kamu menekan `▼`. \n\nSiapa yang akan berlari
        paling cepat?"
      courseB_playlab_events_challenge1_2018: "Waktunya untuk Balapan Hewan Hebat!
        Buat hewan bergerak ke bawah jika kamu menekan `▼`. \n\nSiapa yang akan berlari
        paling cepat?"
      courseB_playlab_events_challenge1_2019: "Waktunya untuk Balapan Hewan Hebat!
        Buat hewan bergerak ke bawah jika kamu menekan `▼`. \n\nSiapa yang akan berlari
        paling cepat?"
      courseB_playlab_events_challenge2: |-
        Mari kita buat hewan menghilang jika diklik.
        Coba bermain dengan anjing sekarang, lalu bantu hewan lain turut bersenang-senang. Kamu juga bisa menambahkan suara dan mendapat nilai untuk membuat permainan Tag Hewan!

        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2018: |-
        Mari kita buat hewan menghilang jika diklik.
        Coba bermain dengan anjing sekarang, lalu bantu hewan lain turut bersenang-senang. Kamu juga bisa menambahkan suara dan mendapat nilai untuk membuat permainan Tag Hewan!

        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_playlab_events_challenge2_2019: |-
        Mari kita buat hewan menghilang jika diklik.
        Coba bermain dengan anjing sekarang, lalu bantu hewan lain turut bersenang-senang. Kamu juga bisa menambahkan suara dan mendapat nilai untuk membuat permainan Tag Hewan!

        ![](https://images.code.org/d48437a0b08be90110541e0ef21076e0-image-1497907722000.gif)
      courseB_starWars_prog1: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Ambil logam rongsokan, BB-8!"_

        Perhatikan dinding dan peti. Logam rongsokan terlihat seperti ini: ![gambar logam rongsokan](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog10: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Apalah anda bisa mendapatkan semuanya?"_'
      courseB_starWars_prog10_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Apalah anda bisa mendapatkan semuanya?"_'
      courseB_starWars_prog10_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Apalah anda bisa mendapatkan semuanya?"_'
      courseB_starWars_prog11: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Lanjutkan!"_'
      courseB_starWars_prog11_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Lanjutkan!"_'
      courseB_starWars_prog11_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Lanjutkan!"_'
      courseB_starWars_prog1_2018: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Ambil logam rongsokan, BB-8!"_

        Perhatikan dinding dan peti. Logam rongsokan terlihat seperti ini: ![gambar logam rongsokan](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog1_2019: |-
        ![Rey](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)_"Ambil logam rongsokan, BB-8!"_

        Perhatikan dinding dan peti. Logam rongsokan terlihat seperti ini: ![gambar logam rongsokan](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)
      courseB_starWars_prog2: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ambil semua logam."_'
      courseB_starWars_prog2_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ambil semua logam."_'
      courseB_starWars_prog2_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ambil semua logam."_'
      courseB_starWars_prog3: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Teruskan, BB-8!"_'
      courseB_starWars_prog3_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Teruskan, BB-8!"_'
      courseB_starWars_prog3_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Teruskan, BB-8!"_'
      courseB_starWars_prog4: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ambil, BB-8!"_'
      courseB_starWars_prog4_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ambil, BB-8!"_'
      courseB_starWars_prog4_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ambil, BB-8!"_'
      courseB_starWars_prog5: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Apalah anda bisa mendapatkan semuanya?"_'
      courseB_starWars_prog5_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Apalah anda bisa mendapatkan semuanya?"_'
      courseB_starWars_prog5_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Apalah anda bisa mendapatkan semuanya?"_'
      courseB_starWars_prog6: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Kamu bisa melakukannya!"_'
      courseB_starWars_prog6_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Kamu bisa melakukannya!"_'
      courseB_starWars_prog6_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Kamu bisa melakukannya!"_'
      courseB_starWars_prog7: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ayo ambil!"_'
      courseB_starWars_prog7_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ayo ambil!"_'
      courseB_starWars_prog7_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ayo ambil!"_'
      courseB_starWars_prog8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Lanjutkan, BB-8."_

        **Tantangan**: Kumpulkan semua logam rongsokan.
      courseB_starWars_prog8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Lanjutkan, BB-8."_

        **Tantangan**: Kumpulkan semua logam rongsokan.
      courseB_starWars_prog8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Lanjutkan, BB-8."_

        **Tantangan**: Kumpulkan semua logam rongsokan.
      courseB_starWars_prog9: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Kamu bisa melakukannya!"_'
      courseB_starWars_prog9_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Kamu bisa melakukannya!"_'
      courseB_starWars_prog9_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Kamu bisa melakukannya!"_'
      courseC19_playLab_EOC1: |-
        Sungguh menakjubkan betapa banyaknya pelajaran yang sudah Anda petik! Ayo buat permainan langkah demi langkah.

        Menggunakan blok baru di dalam toolbox, pilih latar belakang baru, lalu pilih aktor dalam permainan Anda.
      courseC19_playLab_EOC2: "Gunakan blok seperti acara dan tindakan untuk membuat
        pemain Anda bergerak ketika Anda menekan tombol panah.  \n\nBawa pemain ke
        sasaran untuk menyelesaikan teka-teki ini."
      courseC19_playLab_EOC3: |-
        Ayo tambahkan beberapa karakter lagi ke permainan Anda!

        Gunakan blok `set actor` untuk menambahkan karakter lebih banyak lalu beralihlah ke tujuan untuk menyelesaikan puzzle ini.
      courseC19_playLab_EOC4: |-
        Beragam tokoh dan membuat aktor bergerak adalah permulaan yang bagus untuk sebuah permainan, tetapi kita perlu berbuat lebih banyak untuk membuat ini terasa seperti permainan nyata. Mari kita tambahkan skor!

        Gunakan blok acara seperti `ketika aktor menyentuh` untuk mengubah skor atau memenangkan permainan. Skor 5 poin atau memenangkan permainan untuk menyelesaikan teka-teki ini.
      courseC19_playLab_EOC5: Kerja bagus! Anda memiliki semua komponen dasar permainan
        yang berfungsi. Sekarang luangkan waktu untuk memastikan permainan berfungsi
        seperti yang Anda inginkan. Setelah selesai, klik "Selesai"!
      courseC19_playLab_EOC6: Anda sudah selesai! Sekarang Anda dapat memainkan permainan
        atau membagikannya kepada teman dan rekan kelas!
      courseC_PlayLab_events6_2019: Sekarang, tulis program yang membuat Waddles si
        Penguin bergerak sana-sini menggunakan tombol atas / bawah / kiri / kanan
        untuk memukul semua target!
      courseC_PlayLab_events7: |-
        Blok `repeat forever` memungkinkan Anda menjalankan kode berulang-ulang selamanya. Gunakan blok ini untuk menggerakkan Chomp si Dino (aktor 2) naik-turun sebesar 400 piksel selamanya.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2018: |-
        Blok `repeat forever` memungkinkan Anda menjalankan kode berulang-ulang selamanya. Gunakan blok ini untuk menggerakkan Chomp si Dino (aktor 2) naik-turun sebesar 400 piksel selamanya.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events7_2019: |-
        Blok `repeat forever` memungkinkan Anda menjalankan kode berulang-ulang selamanya. Gunakan blok ini untuk menggerakkan Chomp si Dino (aktor 2) naik-turun sebesar 400 piksel selamanya.

        ![](https://images.code.org/0cbe6dd5f4e2251e3f121dbabc0cc19d-image-1523040103822.com-resize.gif)
      courseC_PlayLab_events8: |-
        Bisakah Anda memerintah Waddles (aktor 1) berseru "Aduh!" dan membunyikan suara "tabrak" jika dia menabrak Chomp?

        Ketika selesai, mainkan permainannya untuk mewujudkan hal itu.

        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events8_2018: |-
        Bisakah Anda memerintah Waddles (aktor 1) berseru "Aduh!" dan membunyikan suara "tabrak" jika dia menabrak Chomp?

        Ketika selesai, mainkan permainannya untuk mewujudkan hal itu.

        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_events8_2019: |-
        Bisakah Anda memerintah Waddles (aktor 1) berseru "Aduh!" dan membunyikan suara "tabrak" jika dia menabrak Chomp?

        Ketika selesai, mainkan permainannya untuk mewujudkan hal itu.

        ![](https://images.code.org/a634f249021651f60a1acf37bf78d07d-image-1475342557950.gif)
      courseC_PlayLab_eventsA_embed_2019: Ayo bermain permainan. Pindahkan pinguin
        ke gurita untuk mencetak poin. Skor 5 poin untuk menang.
      courseC_PlayLab_events_challenge1: |-
        Gunakan blok baru untuk otomatis membuat Waddles bergerak kembali ke awal saat dia menabrak Dinosaurus dan saat dia mencetak poin. Dengan cara ini, permainan Anda jadi lebih menantang dan seru!

        Mainkan permainan dan gerakkan Waddles dengan panah sampai Anda mendapatkan cukup poin. Waddles harus digerakkan ke posisi  `middle left` (tengah kiri) layar untuk menyelesaikan tantangan ini.
      courseC_PlayLab_events_challenge1_2018: |-
        Gunakan blok baru untuk membuat Waddles secara otomatis mundur ke titik awal saat dia bertemu dengan Dinosaurus dan saat dia berhasil mendapat poin. Ini akan membuat permainanmu menjadi lebih menantang dan menyenangkan!

        Mainkanlah dan gerakkan Waddles dengan tombol panah hingga kamu memperoleh 5 poin atau lebih. Waddles harus bergerak ke posisi `tengah kiri` layar untuk menyelesaikan tantangan ini.
      courseC_PlayLab_events_challenge1_2019: |-
        Gunakan blok baru untuk membuat Waddles secara otomatis mundur ke titik awal saat dia bertemu dengan Dinosaurus dan saat dia berhasil mendapat poin. Ini akan membuat permainanmu menjadi lebih menantang dan menyenangkan!

        Mainkanlah dan gerakkan Waddles dengan tombol panah hingga kamu memperoleh 5 poin atau lebih. Waddles harus bergerak ke posisi `tengah kiri` layar untuk menyelesaikan tantangan ini.
      courseC_artist_loop1: "Hebat!\"\\_ \n\nAyo, tambahkan sedikit gaya dengan mengganti
        kuasnya dengan blok `set pattern` sebelum loopnya mulai."
      courseC_artist_loop1_2018: "_\"Hebat!\"_ \n\nAyo, tambahkan gaya dengan mengganti
        kuasnya dengan blok <xml><block type=\"draw_line_style_pattern\"> <title name=\"VALUE\">DEFAULT</title></block></xml>
        sebelum loopnya mulai."
      courseC_artist_loop1_2019: "_\"Hebat!\"_ \n\nAyo, tambahkan gaya dengan mengganti
        kuasnya dengan blok <xml><block type=\"draw_line_style_pattern\" block-text=\"set
        pattern\"> <title name=\"VALUE\">DEFAULT</title></block></xml> sebelum loopnya
        mulai."
      courseC_artist_loops1a: |-
        **Free Play:** Mari buat sesuatu yang lebih besar, satu langkah per satu! Anda bisa membuat apa pun yang Anda mau, tapi kami akan menunjukkan Anda bagaimana cara membuat sesuatu seperti ini!

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)

        Gunakan `jump to 200 over 200 down` untuk memindahkan si artis ke tengah-tengah area permainan, lalu gunakan blok `draw a sticker` untuk membuat seekor burung muncul.

        * * *

        Tekan "Finish" saat Anda senang dengan apa yang Anda buat.
      courseC_artist_loops1a_2018: "**Permainan Bebas** Ayo, buat sesuatu yang besar,
        tahap demi tahap!\n\nGunakan `lompat 200 ke atas 200 ke bawah` untuk membawa
        Sang pelukis ke tengah area bermain, lalu gunakan blok `gambar stiker` untuk
        memunculkan seekor burung.  \n\n* * *\n\nTekan \"Selesai\" saat kamu sudah
        puas dengan hasil karyamu."
      courseC_artist_loops1a_2019: |-
        **Bermain Bebas:** Mari kita membangun sesuatu yang lebih besar, selangkah demi selangkah!

        Bawa seniman ke tengah area bermain menggunakan blok <xml> <block type="jump_to" block-text="jump to the middle center position"><title name="VALUE">13</title></block></xml>, lalu gunakan blok <xml><block type="sticker" block-text="draw sticker"><title name="VALUE">Beaver</title></block></xml> untuk membuat sesuatu menjadi muncul.

        * * *

        Tekan "Selesai" ketika Anda senang dengan yang Anda buat.

        ![expandable](https://images.code.org/1435d3650553df44eba973572d409a50-image-1553096405891.png)
        ![expandable](https://images.code.org/6912d2144b90aa7087fe854742d1e8b9-image-1553096425394.png)
        ![expandable](https://images.code.org/8de9e1aa15fdfe30ffed763e0e1d6e04-image-1553096428531.png)
      courseC_artist_loops1b_2019: "Ubah arah yang dihadapi stiker Anda dengan menambahkan
        perintah `berbalik` ke kode Anda. \n\n* * *\n\nTekan \"Selesai\" ketika Anda
        senang dengan yang Anda buat.\n\n![expandable](https://images.code.org/30fe9d37758abd27055d9a6e5a890680-image-1553097358155.png)\n![expandable](https://images.code.org/61feed00662019b99ac774322231f084-image-1553097362176.png)\n![expandable](https://images.code.org/fd123bb703ea4c630218a12eb5994053-image-1553097354066.png)"
      courseC_artist_loops2a: Sekarang gunakan loop untuk memutar burung Anda sekitar
        12 kali dengan putaran 30 derajat.
      courseC_artist_loops2a_2018: Sekarang gunakan loop untuk memutar burung Anda
        sekitar 12 kali dengan putaran 30 derajat.
      courseC_artist_loops2a_2019: |-
        Sekarang, gunakan lingkaran untuk membuat lebih banyak salinan stiker Anda. Coba ubah angka di blok `berbalik` dan `ulangi` untuk membuat pola yang berbeda.

        * * *

        Tekan "Selesai" ketika Anda senang dengan yang Anda buat.

        ![expandable](https://images.code.org/8b4352a1abe72419043d278752261b57-image-1553097917337.png)
        ![expandable](https://images.code.org/5211e2fe2852e25a884a790155ba47d5-image-1553097923167.png)
        ![expandable](https://images.code.org/0e3fbe8bbd20526cc735dfd26d2473ee-image-1553097925789.png)
      courseC_artist_loops3a: "Sangat menyenangkan!  \n\nSekarang, tambahkan stiker
        kelelawar setelah burung untuk membuat sebuah gambar seperti di bawah.\n\n*
        * *\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2018: "Sangat menyenangkan!  \n\nSekarang, tambahkan
        stiker kelelawar setelah burung untuk membuat sebuah gambar seperti di bawah.\n\n*
        * *\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)"
      courseC_artist_loops3a_2019: "Sangat menyenangkan!  \n\nSekarang, tambahkan
        stiker kedua tepat di atas stiker pertama untuk membuat gambar seperti di
        bawah.\n\n* * *\n\nTekan \"Selesai\" ketika Anda senang dengan yang Anda buat.\n\n![expandable](https://images.code.org/3aa37f679eabc7a5a337291db614dd98-image-1496711069351.03.49.png)\n![expandable](https://images.code.org/dd0e0eee69d37493c5ba584164316a9f-image-1553098351969.png)\n![expandable](https://images.code.org/880908899d8e6ceac8a8ce1bd0bf47eb-image-1553098355311.png)"
      courseC_artist_loops4a: |-
        Tambahkan sebuah blok ke kode Anda agar si artis meloncat ke depan sejauh 75 piksel di antara menginjak burung dan kelelawar. Dalam teka-teki ini, pastikan Anda memiliki `jump to 200 over 200 down` di dalam loop Anda, sehingga Anda tetap di pusat!

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2018: |-
        Edit kodemu agar kamu bisa melompat 75 pixel antara menginjak burung dan kelelawar. Dalam teka-teki ini, pastikan kamu memasang `lompat 200 ke atas 200 ke bawah` dalam loopmu, jadi kamu tetap ada di tengah!

        * * *

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
      courseC_artist_loops4a_2019: |-
        Sunting kode Anda sehingga Anda melompat ke depan di antara menggambar dua stiker. Dalam teka-teki ini, pastikan Anda memiliki `posisi lompat ke tengah` di dalam lingkaran Anda, sehingga Anda tetap berada di tengah!

        * * *

        Tekan "Selesai" ketika Anda puas dengan yang Anda buat.

        ![expandable](https://images.code.org/5b67ed8d878d6c2a5009eee054427fd5-image-1496711253365.05.35.png)
        ![expandable](https://images.code.org/5774170704916cfddcf2e98c2c01d718-image-1553099207939.png)
        ![expandable](https://images.code.org/9b016314df4aed5165c76282bab0cea1-image-1553099212229.png)
        ![expandable](https://images.code.org/2cf50b8e9ae75803f15908304c22a10b-image-1553099215987.png)
      courseC_artist_loops5a: |-
        Apa yang terjadi saat Anda mengganti salah satu atau kedua stiker dengan makhluk yang lain?

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2018: |-
        Apa yang terjadi saat Anda mengganti salah satu atau kedua stiker dengan makhluk yang lain?

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5a_2019: |-
        Apa yang terjadi saat Anda mengganti salah satu atau kedua stiker dengan makhluk yang lain?

        * * *

        ![expandable](https://images.code.org/cadb5e244db64a781bc02b55f2e7ccca-image-1496711397989.08.28.png)
      courseC_artist_loops5b: "Apa yang terjadi saat Anda `move forward` lalu `move
        backward` sejauh 100, 200, atau 400 piksel di suatu tempat di dalam loop?
        \ \n\n-   Coba gunakan blok `set pattern` sebelum Anda memulai loop Anda untuk
        membuat sebuah karya seni!\n    * * *\n    ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2018: "Apa yang terjadi saat Anda `move forward` lalu
        `move backward` sejauh 100, 200, atau 400 piksel di suatu tempat di dalam
        loop?  \n\n-   Coba gunakan blok `set pattern` sebelum Anda memulai loop Anda
        untuk membuat sebuah karya seni!\n    * * *\n    ![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)"
      courseC_artist_loops5b_2019: "Apa yang terjadi ketika Anda `bergerak maju` lalu
        `bergerak mundur` sebanyak 100, 200, atau 400 piksel di suatu tempat di dalam
        lingkaran?  \n\n-   Coba gunakan blok `atur pola` sebelum Anda memulai lingkaran
        untuk membuat karya seni!\n\n* * *\n\n![expandable](https://images.code.org/d523de02389fd23db3029327c03b727d-image-1497039953252.24.18.png)\n![expandable](https://images.code.org/55285e9e5c5ae1cf1c895cc0bf92824d-image-1553100970790.png)\n![expandable](https://images.code.org/6b8e67db2a3b341bc56fa53f67c284c2-image-1553100974645.png)"
      courseC_artist_loops6a: |-
        Tambahkan stiker ketiga ke titik mana saja dalam loop sesuka Anda! Bagaimana tampilannya sekarang?

        -   Ubah pola pada kuas agar lebih variatif!

        * * *

        ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2018: |-
        Tambahkan stiker ketiga ke titik mana saja dalam loop sesuka Anda! Bagaimana tampilannya sekarang?

        -   Ubah pola pada kuas agar lebih variatif!

        * * *

        ![expandable](https://images.code.org/b0f999ef4b9ab6bd9780e9fbac07dc8d-image-1497040845047.39.55.png)
      courseC_artist_loops6a_2019: |-
        Tambahkan stiker ketiga di mana saja di lingkaran yang Anda inginkan! Seperti apa bentuknya sekarang?

        -   Ubah pola pada kuas Anda untuk variasi yang lebih banyak!

        * * *

        ![expandable](https://images.code.org/edc53f27379e018e61a6ab9dcc2717ea-image-1560984648573.png)
        ![expandable](https://images.code.org/c41b00a743f245f98d2cfb66cb18e771-image-1560984690182.png)
        ![expandable](https://images.code.org/4c8910f72a7f0cd81713ded7b866a883-image-1560984706203.png)
      courseC_artist_loops7a: |-
        Coba ganti loop `ulangi` agar berputar sekian kali lagi. Seberapa jauh Anda harus belok dalam satu lingkaran penuh?

        -   Coba ganti berapa kali Anda berputar
            -   Coba belokan 60 derajat selama 6 kali berputar
            -   Coba belokan 20 derajat selama 18 kali berputar

        * * *

        Gambar ini menggunakan perompak, ninja, dan jerapah. Ketiganya mengulang 18 kali dengan belokan 20 derajat.

        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
      courseC_artist_loops7a_2018: |-
        Coba ganti loop `ulangi` agar berputar sekian kali lagi. Seberapa jauh Anda harus belok dalam satu lingkaran penuh?

        -   Coba ganti berapa kali Anda berputar
            -   Coba belokan 60 derajat selama 6 kali berputar
            -   Coba belokan 20 derajat selama 18 kali berputar

        * * *

        Gambar ini menggunakan perompak, ninja, dan jerapah. Ketiganya mengulang 18 kali dengan belokan 20 derajat.

        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
      courseC_artist_loops7a_2019: |-
        Coba ubah lingkaran `ulangi` untuk menjalankan jumlah waktu yang berbeda. Seberapa jauh Anda harus berbalik untuk berputar dalam lingkaran penuh?

        -   Coba ubah berapa kali Anda berputar
            -   Coba putaran 60 derajat selama 6 kali
            -   Coba putaran 20 derajat selama 18 kali

        * * *

        Gambar pertama menggunakan bajak laut, ninja, dan jerapah. Mereka berputar 18 kali dengan putaran 20 derajat.

        ![expandable](https://images.code.org/99411638acb44e8a7ba5b9696fe11fa4-image-1496714175039.53.24.png)
        ![expandable](https://images.code.org/9f28cb9b434b914846c3846bc6652f66-image-1560982666379.png)
        ![expandable](https://images.code.org/e9128684956504b0172708d63b65f93a-image-1560982686482.png)
        ![expandable](https://images.code.org/8e9cf52ecaf72678c65558f18f3e0d3e-image-1560982695632.png)
      courseC_artist_loops8a: |-
        Sekarang buatlah sesuatu sediri. Apa yang terjadi jika Anda membuat dua lingkaran berbeda dari stiker yang berbeda?

        * * *

        Butuh ide? Cobalah membuat desain seperti ini.

        ![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)
      courseC_artist_loops8a_2018: |-
        Sekarang buatlah sesuatu sediri. Apa yang terjadi jika Anda membuat dua lingkaran berbeda dari stiker yang berbeda?

        * * *

        Butuh ide? Cobalah membuat desain seperti ini.

        ![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)
      courseC_artist_loops8a_2019: |-
        Sekarang buatlah sesuatu sediri. Apa yang terjadi jika Anda membuat dua lingkaran berbeda dari stiker yang berbeda?

        * * *

        Butuh ide? Cobalah membuat desain seperti ini.

        ![expandable](https://images.code.org/d8e0ad6294aa5e04e4aab56631a6b50b-image-1496714582863.02.14.png)
      courseC_artist_loopsPre1a: |-
        Sekarang masukkan kode ini ke dalam blok `repeat` dan ulangi **6** kali.

        -   Perhatikan bahwa kita telah menambahkan satu perputaran 60 derajat pada akhir kode loop untuk mendapatkan rotasi penuh.
      courseC_artist_loopsPre1a_2018: |-
        Sekarang masukkan kode ini ke dalam blok `repeat` dan ulangi **6** kali.

        -   Perhatikan bahwa kita telah menambahkan satu perputaran 60 derajat pada akhir kode loop untuk mendapatkan rotasi penuh.
      courseC_artist_loopsPre1a_2019: |-
        Sekarang masukkan kode ini ke dalam blok `repeat` dan ulangi **6** kali.

        -   Perhatikan bahwa kita telah menambahkan satu perputaran 60 derajat pada akhir kode loop untuk mendapatkan rotasi penuh.
      courseC_artist_loopsPrePre1a: |-
        Gunakan blok <xml><block type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml> untuk membawa artis ke tengah-tengah area bermain.\
        Lalu buat garis berukuran 50 piksel dengan blok <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>.
      courseC_artist_loopsPrePre1a_2018: |-
        ### Sang pelukis ada di tempat yang salah!

        Gunakan blok <xml><block type="jump_to_xy" id="callMe"><title name="XPOS">200</title><title name="YPOS">200</title></block></xml> untuk membawa Sang pelukis ke tengah area bermain.\
        Lalu gambarlah sebuah garis berukuran 50 pixel dengan blok <xml><block type="draw_move_by_constant"><title name="DIR">moveForward</title><title name="VALUE">50</title></block></xml>.
      courseC_artist_loopsPrePre1a_2019: "The artist is in the wrong spot!  \n\nUse
        the <xml><block type=\"jump_to_xy\" id=\"callMe\" block-text=\"jump to 200
        over 200 down\"><title name=\"XPOS\">200</title><title name=\"YPOS\">200</title></block></xml>
        block to get the artist to the center of the play area.\\\nThen draw a line
        50 pixels long with the <xml><block type=\"draw_move_by_constant\" block-text=\"move
        forward\"><title name=\"DIR\">moveForward</title><title name=\"VALUE\">50</title></block></xml>
        block."
      courseC_artist_prog1: |-
        _"Hai, saya seorang artis. Anda dapat menulis code untuk membuat saya menggambar nyaris apa saja."_

        Main-mainkan blok di toolbox untuk melihat apa yang dilakukannya!
      courseC_artist_prog1_2018: |-
        _"Hai, saya seorang artis. Anda dapat menulis code untuk membuat saya menggambar nyaris apa saja."_

        Main-mainkan blok di toolbox untuk melihat apa yang dilakukannya!
      courseC_artist_prog1_2019: |-
        _"Hai, saya seorang artis. Anda dapat menulis code untuk membuat saya menggambar nyaris apa saja."_

        Main-mainkan blok di toolbox untuk melihat apa yang dilakukannya!
      courseC_artist_prog2: |-
        _"Ayo buat sangkar untuk monster piaraan saya!"_

        Geser blok ke layar untuk memerintahkan artis menggambar di atas garis abu-abu di dalam gambar.\
        (Panjang setiap garis adalah 100 piksel)
      courseC_artist_prog2_2018: |-
        _"Ayo buat sangkar untuk monster piaraan saya!"_

        Geser blok ke layar untuk memerintahkan artis menggambar di atas garis abu-abu di dalam gambar.\
        (Panjang setiap garis adalah 100 piksel)
      courseC_artist_prog2_2019: |-
        _"Ayo buat sangkar untuk monster piaraan saya!"_

        Geser blok ke layar untuk memerintahkan artis menggambar di atas garis abu-abu di dalam gambar.\
        (Panjang setiap garis adalah 100 piksel)
      courseC_artist_prog3: |-
        _"Pesawat antariksa ini membutuhkan jendela!"_

        Setiap sisi persegi empat-dalam adalah 100 piksel dan semua sudut adalah 90 derajat.
      courseC_artist_prog3_2018: |-
        _"Pesawat antariksa ini membutuhkan jendela!"_

        Setiap sisi persegi empat-dalam adalah 100 piksel dan semua sudut adalah 90 derajat.
      courseC_artist_prog3_2019: |-
        _"Pesawat antariksa ini membutuhkan jendela!"_

        Setiap sisi persegi empat-dalam adalah 100 piksel dan semua sudut adalah 90 derajat.
      courseC_artist_prog4: |-
        _"Oh tidak!  Alien piaraan Starla kabur begitu saja! Ayo bantu antariksawati!"_

        Selesaikan roket Starla agar dia dapat mengejar hewan piaraannya.\
        (Panjang setiap sisi segitiga adalah 100 piksel dan sudut luar 120 derajat.)
      courseC_artist_prog4_2018: |-
        _"Oh tidak!  Alien piaraan Starla kabur begitu saja! Ayo bantu antariksawati!"_

        Selesaikan roket Starla agar dia dapat mengejar hewan piaraannya.\
        (Panjang setiap sisi segitiga adalah 100 piksel dan sudut luar 120 derajat.)
      courseC_artist_prog4_2019: |-
        _"Oh tidak!  Alien piaraan Starla kabur begitu saja! Ayo bantu antariksawati!"_

        Selesaikan roket Starla agar dia dapat mengejar hewan piaraannya.\
        (Panjang setiap sisi segitiga adalah 100 piksel dan sudut luar 120 derajat.)
      courseC_artist_prog5: |-
        _"Kita mungkin perlu membuat tanda untuk setiap hewan piaraan kalau-kalau mereka hilang!"_

        Selesaikan tanda ini dengan menggambar persegi panjang melingkari bagian luar.\
        (Panjang masing-masing sisinya adalah 200 piksel dan masing-masing sisi pendeknya adalah 100 piksel)
      courseC_artist_prog5_2018: |-
        _"Kita mungkin perlu membuat tanda untuk setiap hewan piaraan kalau-kalau mereka hilang!"_

        Selesaikan tanda ini dengan menggambar persegi panjang melingkari bagian luar.\
        (Panjang masing-masing sisinya adalah 200 piksel dan masing-masing sisi pendeknya adalah 100 piksel)
      courseC_artist_prog5_2019: |-
        _"Kita mungkin perlu membuat tanda untuk setiap hewan piaraan kalau-kalau mereka hilang!"_

        Selesaikan tanda ini dengan menggambar persegi panjang melingkari bagian luar.\
        (Panjang masing-masing sisinya adalah 200 piksel dan masing-masing sisi pendeknya adalah 100 piksel)
      courseC_artist_prog6: |-
        _"Sekarang sebuah tanda untuk Belle!"_

        Gambar berlian dengan sisi 200 piksel ini.
      courseC_artist_prog6_2018: |-
        _"Sekarang sebuah tanda untuk Belle!"_

        Gambar kotak ini dengan ukuran keping 200 pixel.
      courseC_artist_prog6_2019: |-
        _"Sekarang sebuah tanda untuk Belle!"_

        Gambar kotak ini dengan ukuran keping 200 pixel.
      courseC_artist_prog7: "**Tantangan:** Tanda ini memang spesial!  \n\nBisakah
        Anda mengira-ngira cara menggambar garis luar?\\\n(Sisi panjangnya adalah
        150 piksel dan setiap sisi pendeknya adalah 75 piksel.)"
      courseC_artist_prog7_2018: "**Tantangan:** Tanda ini memang spesial!  \n\nBisakah
        Anda mengira-ngira cara menggambar garis luar?\\\n(Sisi panjangnya adalah
        150 piksel dan setiap sisi pendeknya adalah 75 piksel.)"
      courseC_artist_prog7_2019: "**Tantangan:** Tanda ini memang spesial!  \n\nBisakah
        Anda mengira-ngira cara menggambar garis luar?\\\n(Sisi panjangnya adalah
        150 piksel dan setiap sisi pendeknya adalah 75 piksel.)"
      courseC_artist_prog8: |-
        Satu tanda lagi.  Ini adalah segitiga untuk Pi.\
        (Setiap sisi adalah 150 piksel)
      courseC_artist_prog8_2018: |-
        Satu tanda lagi.  Ini adalah segitiga untuk Pi.\
        (Setiap sisi adalah 150 piksel)
      courseC_artist_prog8_2019: |-
        Satu tanda lagi.  Ini adalah segitiga untuk Pi.\
        (Setiap sisi adalah 150 piksel)
      courseC_artist_prog_challenge1: Gambar ruangan untuk setiap binatang. Ada berbagai
        cara untuk memecahkan puzzle ini, karena itu nikmati keseruannya! Setiap persegi
        empat memiliki panjang sisi 100 piksel.
      courseC_artist_prog_challenge1_2018: Gambar ruangan untuk setiap binatang. Ada
        berbagai cara untuk memecahkan puzzle ini, karena itu nikmati keseruannya!
        Setiap persegi empat memiliki panjang sisi 100 piksel.
      courseC_artist_prog_challenge1_2019: Gambar ruangan untuk setiap binatang. Ada
        berbagai cara untuk memecahkan puzzle ini, karena itu nikmati keseruannya!
        Setiap persegi empat memiliki panjang sisi 100 piksel.
      courseC_artist_prog_challenge2a: |-
        _"Bantu saya mengecat garis-garis kuning di jalan ini!"_

        Tiga potong garis itu memiliki panjang 150, 100, dan 200 piksel!
      courseC_artist_prog_challenge2a_2018: |-
        _"Bantu saya mengecat garis-garis kuning di jalan ini!"_

        Tiga potong garis itu memiliki panjang 150, 100, dan 200 piksel!
      courseC_artist_prog_challenge2a_2019: |-
        _"Bantu saya mengecat garis-garis kuning di jalan ini!"_

        Tiga potong garis itu memiliki panjang 150, 100, dan 200 piksel!
      courseC_collector_loops_challenge2: |-
        _"Ayo berburu harta karun!"_

        Bantu kolektor mendapatkan sedikitnya **5** buah harta karun.
      courseC_collector_loops_challenge2_2018: |-
        _"Ayo berburu harta karun!"_

        Bantu kolektor mendapatkan sedikitnya **5** buah harta karun.
      courseC_collector_loops_challenge2_2019: |-
        _"Ayo berburu harta karun!"_

        Bantu kolektor mendapatkan sedikitnya **5** buah harta karun.
      courseC_collector_prog1: |-
        **Bermain Bebas:** Ini adalah Laurel si Petualang! Gerak-gerakkan dia dan dapatkan harta karun sebanyak-banyaknya. Gunakan blok `collect` untuk mengambil harta karun!

        Seret blok ke area kerja dan coba tebak cara mendapatkan harta karun. Dapatkan sedikitnya satu item untuk lulus level ini.
      courseC_collector_prog1_2018: |-
        **Bermain Bebas:** Ini adalah Laurel si Petualang! Gerak-gerakkan dia dan dapatkan harta karun sebanyak-banyaknya. Gunakan blok `collect` untuk mengambil harta karun!

        Seret blok ke area kerja dan coba tebak cara mendapatkan harta karun. Dapatkan sedikitnya satu item untuk lulus level ini.
      courseC_collector_prog1_2019: |-
        **Bermain Bebas:** Ini adalah Laurel si Petualang! Gerak-gerakkan dia dan dapatkan harta karun sebanyak-banyaknya. Gunakan blok `collect` untuk mengambil harta karun!

        Seret blok ke area kerja dan coba tebak cara mendapatkan harta karun. Dapatkan sedikitnya satu item untuk lulus level ini.
      courseC_collector_prog2: Gerakkan Laurel ke harta karun, lalu gunakan <xml><block
        type="collector_collect"/></xml>  untuk mengambilnya.
      courseC_collector_prog2_2018: Gerakkan Laurel ke harta karun, lalu gunakan <xml><block
        type="collector_collect"/></xml>  untuk mengambilnya.
      courseC_collector_prog2_2019: Pindahkan Laurel ke harta karun, lalu gunakan
        blok <xml><block type="collector_collect" block-text="collect"/></xml> untuk
        mengambilnya.
      courseC_collector_prog3: "_\"Urutan itu penting!\"_ \n\nBlok yang anda butuhkan
        sudah ada di area kerja, tetapi belum tersambung.\\\nSusun bloknya untuk mengumpulkan
        harta karun dan memecahkan puzzle."
      courseC_collector_prog3_2018: "_\"Urutan itu penting!\"_ \n\nBlok yang anda
        butuhkan sudah ada di area kerja, tetapi belum tersambung.\\\nSusun bloknya
        untuk mengumpulkan harta karun dan memecahkan puzzle."
      courseC_collector_prog3_2019: "_\"Urutan itu penting!\"_ \n\nBlok yang anda
        butuhkan sudah ada di area kerja, tetapi belum tersambung.\\\nSusun bloknya
        untuk mengumpulkan harta karun dan memecahkan puzzle."
      courseC_collector_prog4: "_\"Urutan itu penting!\"_ \n\nBlok yang anda butuhkan
        sudah ada di area kerja, tetapi belum tersambung.\n\nSusun bloknya untuk mengumpulkan
        semua harta karun dan memecahkan puzzle."
      courseC_collector_prog4_2018: "_\"Urutan itu penting!\"_ \n\nBlok yang anda
        butuhkan sudah ada di area kerja, tetapi belum tersambung.\n\nSusun bloknya
        untuk mengumpulkan semua harta karun dan memecahkan puzzle."
      courseC_collector_prog4_2019: "_\"Urutan itu penting!\"_ \n\nBlok yang anda
        butuhkan sudah ada di area kerja, tetapi belum tersambung.\n\nSusun bloknya
        untuk mengumpulkan semua harta karun dan memecahkan puzzle."
      courseC_collector_prog5: |-
        _"Bantu saya mengumpulkan setiap buah harta karun!"_

        Susunan blok-blok ini salah. Bisakah anda memperbaikinya?
      courseC_collector_prog5_2018: |-
        _"Bantu saya mengumpulkan setiap buah harta karun!"_

        Susunan blok-blok ini salah. Bisakah anda memperbaikinya?
      courseC_collector_prog5_2019: |-
        _"Bantu saya mengumpulkan setiap buah harta karun!"_

        Susunan blok-blok ini salah. Bisakah anda memperbaikinya?
      courseC_collector_prog6: |-
        _"Bantu saya mengumpulkan semua harta karun!"_

        Susunan blok-blok ini salah. Susun ulang untuk mengumpulkan semua harta karun.
      courseC_collector_prog6_2018: |-
        _"Bantu saya mengumpulkan semua harta karun!"_

        Susunan blok-blok ini salah. Susun ulang untuk mengumpulkan semua harta karun.
      courseC_collector_prog6_2019: |-
        _"Bantu saya mengumpulkan semua harta karun!"_

        Susunan blok-blok ini salah. Susun ulang untuk mengumpulkan semua harta karun.
      courseC_collector_prog7: |-
        **Tantangan:** _"Apa yang sedang terjadi di sini?"_

        Meskipun sudah benar susunannya, selalu saja ada yang terlewat.\
        Gunakan blok dari toolbox untuk mengumpulkan semua harta karun.
      courseC_collector_prog7_2018: |-
        **Tantangan:** _"Apa yang sedang terjadi di sini?"_

        Meskipun sudah benar susunannya, selalu saja ada yang terlewat.\
        Gunakan blok dari toolbox untuk mengumpulkan semua harta karun.
      courseC_collector_prog7_2019: |-
        **Tantangan:** _"Apa yang sedang terjadi di sini?"_

        Meskipun sudah benar susunannya, selalu saja ada yang terlewat.\
        Gunakan blok dari toolbox untuk mengumpulkan semua harta karun.
      courseC_collector_prog8: _"Pertahankan kerja baik anda! Bantu saya mengumpulkan
        semua harta karun."_
      courseC_collector_prog8_2018: _"Pertahankan kerja baik anda! Bantu saya mengumpulkan
        semua harta karun."_
      courseC_collector_prog8_2019: _"Pertahankan kerja baik anda! Bantu saya mengumpulkan
        semua harta karun."_
      courseC_collector_prog9: _"Ayo ambil semua harta karun!"_
      courseC_collector_prog9_2018: _"Ayo ambil semua harta karun!"_
      courseC_collector_prog9_2019: _"Ayo ambil semua harta karun!"_
      courseC_collector_prog_challenge2: Ada 20 buah harta karun di gua ini. Kumpulkan
        sedikitnya **10** untuk menyelesaikan tantangan ini!
      courseC_collector_prog_challenge2_2018: Ada 20 buah harta karun di gua ini.
        Kumpulkan sedikitnya **10** untuk menyelesaikan tantangan ini!
      courseC_collector_prog_challenge2_2019: Ada 20 buah harta karun di gua ini.
        Kumpulkan sedikitnya **10** untuk menyelesaikan tantangan ini!
      courseC_data wizard: Tekan Jalankan. Penyihir akan membuat hewan muncul.Hitung
        mereka. Apa yang Anda perhatikan?
      courseC_flappy_events1: "Tempelkan blok `flap normal amount` ke event `when
        click`, lalu tekan \"Run\".   \n\n* * *\n\nKlik atau ketuk area bermain untuk
        menggerakkan Flappy ke target."
      courseC_flappy_events10: |-
        Buat permainan Flappy Anda sendiri!

        Anda dapat mengganti penampilan dan aturan...bahkan gravitasi! Setelah selesai, klik "Selesai" untuk memberikannya kepada teman lewat ponsel.
      courseC_flappy_events10_2018: |-
        Buat permainan Flappy Anda sendiri!

        Anda dapat mengganti penampilan dan aturan...bahkan gravitasi! Setelah selesai, klik "Selesai" untuk memberikannya kepada teman lewat ponsel.
      courseC_flappy_events10_2019: |-
        Buat permainan Flappy Anda sendiri!

        Anda dapat mengganti penampilan dan aturan...bahkan gravitasi! Setelah selesai, klik "Selesai" untuk memberikannya kepada teman lewat ponsel.
      courseC_flappy_events1_2018: "Tempelkan blok `flap normal amount` ke event `when
        click`, lalu tekan \"Run\".   \n\n* * *\n\nKlik atau ketuk area bermain untuk
        menggerakkan Flappy ke target."
      courseC_flappy_events1_2019: "Tempelkan blok `flap normal amount` ke event `when
        click`, lalu tekan \"Run\".   \n\n* * *\n\nKlik atau ketuk area bermain untuk
        menggerakkan Flappy ke target."
      courseC_flappy_events2: "Event `when run` memungkinkan Anda menjalankan kode
        tak lama setelah permainan dimulai.  \n\nCoba tambahkan blok yang mengatur
        kecepatan level saat tombol \"Run\" ditekan. \n\n* * *\n\nMainkan permainan
        dan kepakkan ke target untuk melanjutkan."
      courseC_flappy_events2_2018: "Event `when run` memungkinkan Anda menjalankan
        kode tak lama setelah permainan dimulai.  \n\nCoba tambahkan blok yang mengatur
        kecepatan level saat tombol \"Run\" ditekan. \n\n* * *\n\nMainkan permainan
        dan kepakkan ke target untuk melanjutkan."
      courseC_flappy_events2_2019: "Event `when run` memungkinkan Anda menjalankan
        kode tak lama setelah permainan dimulai.  \n\nCoba tambahkan blok yang mengatur
        kecepatan level saat tombol \"Run\" ditekan. \n\n* * *\n\nMainkan permainan
        dan kepakkan ke target untuk melanjutkan."
      courseC_flappy_events3: "Sekarang kita sudah menambahkan tanah. \n\nTempelkan
        blok `end game` ke event `when hit the ground`.\n\n* * *\n\nMainkan permainannya
        dan jatuhkan burung ke tanah untuk melanjutkan."
      courseC_flappy_events3_2018: "Sekarang kita sudah menambahkan tanah. \n\nTempelkan
        blok `end game` ke event `when hit the ground`.\n\n* * *\n\nMainkan permainannya
        dan jatuhkan burung ke tanah untuk melanjutkan."
      courseC_flappy_events3_2019: "Sekarang kita sudah menambahkan tanah. \n\nTempelkan
        blok `end game` ke event `when hit the ground`.\n\n* * *\n\nMainkan permainannya
        dan jatuhkan burung ke tanah untuk melanjutkan."
      courseC_flappy_events4: "Flappy akan terbang melewati rintangan kecuali Anda
        menulis kode yang membuatnya menabrak. \n\nTempelkan blok ke event `when hit
        an obstacle` sehingga permainan berakhir ketika Flappy membentur kelompok
        pipa pertama."
      courseC_flappy_events4_2018: "Flappy akan terbang melewati rintangan kecuali
        Anda menulis kode yang membuatnya menabrak. \n\nTempelkan blok ke event `when
        hit an obstacle` sehingga permainan berakhir ketika Flappy membentur kelompok
        pipa pertama."
      courseC_flappy_events4_2019: "Flappy akan terbang melewati rintangan kecuali
        Anda menulis kode yang membuatnya menabrak. \n\nTempelkan blok ke event `when
        hit an obstacle` sehingga permainan berakhir ketika Flappy membentur kelompok
        pipa pertama."
      courseC_flappy_events5: "Kami sudah menambahkan papan skor untuk menghitung
        poin ketika Flappy melewati rintangan.  \n\nTambahkan blok ke event `when
        pass an obstacle` yang mencetak poin, lalu tekan \"Run\" untuk menerbangkan
        Flappy melewati kelompok pipa pertama."
      courseC_flappy_events5_2018: "Kami sudah menambahkan papan skor untuk menghitung
        poin ketika Flappy melewati rintangan.  \n\nTambahkan blok ke event `when
        pass an obstacle` yang mencetak poin, lalu tekan \"Run\" untuk menerbangkan
        Flappy melewati kelompok pipa pertama."
      courseC_flappy_events5_2019: "Kami sudah menambahkan papan skor untuk menghitung
        poin ketika Flappy melewati rintangan.  \n\nTambahkan blok ke event `when
        pass an obstacle` yang mencetak poin, lalu tekan \"Run\" untuk menerbangkan
        Flappy melewati kelompok pipa pertama."
      courseC_flappy_events6: "Klik panah turun di dalam blok `flap a normal amount`
        untuk mendapatkan daya kepak yang berbeda.  \n\nLihat apakah Anda masih dapat
        mencetak poin setelah membuat Flappy mengepak lebih banyak atau lebih sedikit
        setiap kali Anda mengklik."
      courseC_flappy_events6_2018: "Klik panah turun di dalam blok `flap a normal
        amount` untuk mendapatkan daya kepak yang berbeda.  \n\nLihat apakah Anda
        masih dapat mencetak poin setelah membuat Flappy mengepak lebih banyak atau
        lebih sedikit setiap kali Anda mengklik."
      courseC_flappy_events6_2019: "Klik panah turun di dalam blok `flap a normal
        amount` untuk mendapatkan daya kepak yang berbeda.  \n\nLihat apakah Anda
        masih dapat mencetak poin setelah membuat Flappy mengepak lebih banyak atau
        lebih sedikit setiap kali Anda mengklik."
      courseC_flappy_events7: Selanjutnya, coba ganti adegan dengan menempelkan blok
        ke event "when run".
      courseC_flappy_events7_2018: Selanjutnya, coba ganti adegan dengan menempelkan
        blok ke event "when run".
      courseC_flappy_events7_2019: Selanjutnya, coba ganti adegan dengan menempelkan
        blok ke event "when run".
      courseC_flappy_events8: |-
        Anda dapat mengatur latar belakang sewaktu-waktu, tidak melulu saat permainan dimulai.

        Coba setel adegan **acak** ketika event lain terjadi, misalnya, ketika melewati rintangan.
      courseC_flappy_events8_2018: |-
        Anda dapat mengatur latar belakang sewaktu-waktu, tidak melulu saat permainan dimulai.

        Coba setel adegan **acak** ketika event lain terjadi, misalnya, ketika melewati rintangan.
      courseC_flappy_events8_2019: |-
        Anda dapat mengatur latar belakang sewaktu-waktu, tidak melulu saat permainan dimulai.

        Coba setel adegan **acak** ketika event lain terjadi, misalnya, ketika melewati rintangan.
      courseC_flappy_events9: Untuk menciptakan variasi, alih-alih mengakhiri permainan
        ketika Flappy menabrak rintangan, coba setel skornya kembali ke 0.
      courseC_flappy_events9_2018: Untuk menciptakan variasi, alih-alih mengakhiri
        permainan ketika Flappy menabrak rintangan, coba setel skornya kembali ke
        0.
      courseC_flappy_events9_2019: Untuk menciptakan variasi, alih-alih mengakhiri
        permainan ketika Flappy menabrak rintangan, coba setel skornya kembali ke
        0.
      courseC_harvester_loops1: "Loop dapat digunakan untuk mengulang lebih banyak
        daripada gerakan.  \n\nGunakan loop untuk mengumpulkan keempat labu."
      courseC_harvester_loops10: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops10_2018: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops10_2019: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops11: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops11_2018: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops11_2019: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops1_2018: "Loop dapat digunakan untuk mengulang lebih banyak
        daripada gerakan.  \n\nGunakan loop untuk mengumpulkan keempat labu."
      courseC_harvester_loops1_2019: "Loop dapat digunakan untuk mengulang lebih banyak
        daripada gerakan.  \n\nGunakan loop untuk mengumpulkan keempat labu."
      courseC_harvester_loops2: Bisakah Anda menggabungkan dua loop berbeda untuk
        bergerak menuju labu, lalu mengumpulkan semuanya?
      courseC_harvester_loops2_2018: Bisakah Anda menggabungkan dua loop berbeda untuk
        bergerak menuju labu, lalu mengumpulkan semuanya?
      courseC_harvester_loops2_2019: Bisakah Anda menggabungkan dua loop berbeda untuk
        bergerak menuju labu, lalu mengumpulkan semuanya?
      courseC_harvester_loops3: Kumpulkan semua labu.
      courseC_harvester_loops3_2018: Kumpulkan semua labu.
      courseC_harvester_loops3_2019: Kumpulkan semua labu.
      courseC_harvester_loops4: |-
        Nah, ada jagung sedang tumbuh juga!

        Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops4_2018: |-
        Nah, ada jagung sedang tumbuh juga!

        Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops4_2019: |-
        Nah, ada jagung sedang tumbuh juga!

        Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops5: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops5_2018: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops5_2019: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops6: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops6_2018: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops6_2019: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops7: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops7_2018: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops7_2019: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops8: |-
        **Tantangan:** Kumpulkan semua jagung dan semua labu.

        Anda dapat menyelesaikan tantangan ini sesuka hati, tapi yang jelas akan banyak menguras tenaga atau pikiran!
      courseC_harvester_loops8_2018: |-
        **Tantangan:** Kumpulkan semua jagung dan semua labu.

        Anda dapat menyelesaikan tantangan ini sesuka hati, tapi yang jelas akan banyak menguras tenaga atau pikiran!
      courseC_harvester_loops8_2019: |-
        **Tantangan:** Kumpulkan semua jagung dan semua labu.

        Anda dapat menyelesaikan tantangan ini sesuka hati, tapi yang jelas akan banyak menguras tenaga atau pikiran!
      courseC_harvester_loops9: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops9_2018: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops9_2019: Kumpulkan semua jagung dan semua labu.
      courseC_harvester_loops_challenge2: Kumpulkan semua selada. Hindari pohon dan
        ladang!
      courseC_harvester_loops_challenge2_2018: Kumpulkan semua selada. Hindari pohon
        dan ladang!
      courseC_harvester_loops_challenge2_2019: Kumpulkan semua selada. Hindari pohon
        dan ladang!
      courseC_maze_debugging1: "Code ini tidak benar-benar tepat!  \n\nPerbaiki code
        untuk membantu Scrat sampai ke akorn."
      courseC_maze_debugging1_2018: "Code ini tidak benar-benar tepat!  \n\nPerbaiki
        code untuk membantu Scrat sampai ke akorn."
      courseC_maze_debugging1_2019: "Code ini tidak benar-benar tepat!  \n\nPerbaiki
        code untuk membantu Scrat sampai ke akorn."
      courseC_maze_debugging3: "Ada sesuatu yang tidak beres. \n\nSingkirkan blok
        untuk menggiring Scrat ke akorn!"
      courseC_maze_debugging3_2018: "Ada sesuatu yang tidak beres. \n\nSingkirkan
        blok untuk menggiring Scrat ke akorn!"
      courseC_maze_debugging3_2019: "Ada sesuatu yang tidak beres. \n\nSingkirkan
        blok untuk menggiring Scrat ke akorn!"
      courseC_maze_debugging_challenge2: Jika Scrat terlalu sering berbelok, dia akan
        menjadi pusing! Bantu dia mencapai biji ek dengan hanya empat perintah `turn`.
      courseC_maze_debugging_challenge2_2018: Jika Scrat terlalu sering berbelok,
        dia akan menjadi pusing! Bantu dia mencapai biji ek dengan hanya empat perintah
        `turn`.
      courseC_maze_debugging_challenge2_2019: Jika Scrat terlalu sering berbelok,
        dia akan menjadi pusing! Bantu dia mencapai biji ek dengan hanya empat perintah
        `turn`.
      courseC_maze_programming1: Untuk puzzle ini, pindahkan semua blok sekaligus
        dan klik "Run" untuk memulainya!
      courseC_maze_programming1_2018: Untuk puzzle ini, pindahkan semua blok sekaligus
        dan klik "Run" untuk memulainya!
      courseC_maze_programming1_2019: Untuk puzzle ini, pindahkan semua blok sekaligus
        dan klik "Run" untuk memulainya!
      courseC_maze_programming2: Seret blok <xml><block type="maze_moveForward"/></xml>
        ekstra keluar dari toolbox untuk menyelesaikan kode Anda.
      courseC_maze_programming2_2018: Seret blok <xml><block type="maze_moveForward"/></xml>
        ekstra keluar dari toolbox untuk menyelesaikan kode Anda.
      courseC_maze_programming2_2019: Seret blok <xml><block type="maze_moveForward"
        block-text="move forward"/></xml> ekstra keluar dari toolbox untuk menyelesaikan
        kode Anda.
      courseC_maze_programming3: |-
        _"Babi ini mengacak-acak bulu saya."_

        Ada satu blok ekstra yang bisa membuat burungnya tertabrak.\
        Buanglah dengan melepasnya dari blok abu-abu dan menyeretnya kembali ke toolbox.
      courseC_maze_programming3_2018: |-
        _"Babi ini mengacak-acak bulu saya."_

        Ada satu blok ekstra yang bisa membuat burungnya tertabrak.\
        Buanglah dengan melepasnya dari blok abu-abu dan menyeretnya kembali ke toolbox.
      courseC_maze_programming3_2019: |-
        _"Babi ini mengacak-acak bulu saya."_

        Ada satu blok ekstra yang bisa membuat burungnya tertabrak.\
        Buanglah dengan melepasnya dari blok abu-abu dan menyeretnya kembali ke toolbox.
      courseC_maze_programming4: "_\"Telusuri jalur dan bawa saya menuju babi nakal
        .\"_ \n\nHindari TNT atau bulu-bulu akan beterbangan!"
      courseC_maze_programming4_2018: "_\"Telusuri jalur dan bawa saya menuju babi
        nakal .\"_ \n\nHindari TNT atau bulu-bulu akan beterbangan!"
      courseC_maze_programming4_2019: "_\"Telusuri jalur dan bawa saya menuju babi
        nakal .\"_ \n\nHindari TNT atau bulu-bulu akan beterbangan!"
      courseC_maze_programming5: |-
        _"Ikuti jalur ini untuk membawa saya ke babi!"_

        Hindari TNT.
      courseC_maze_programming5_2018: |-
        _"Ikuti jalur ini untuk membawa saya ke babi!"_

        Hindari TNT.
      courseC_maze_programming5_2019: |-
        _"Ikuti jalur ini untuk membawa saya ke babi!"_

        Hindari TNT.
      courseC_maze_programming6: |-
        _"Tenang saja dan bantu saya menemukan babi jahat itu. Kalau tidak, saya bisa marah!"_

        Giring burungnya ke babi dan hindari TNT.
      courseC_maze_programming6_2018: |-
        _"Tenang saja dan bantu saya menemukan babi jahat itu. Kalau tidak, saya bisa marah!"_

        Giring burungnya ke babi dan hindari TNT.
      courseC_maze_programming6_2019: |-
        _"Tenang saja dan bantu saya menemukan babi jahat itu. Kalau tidak, saya bisa marah!"_

        Giring burungnya ke babi dan hindari TNT.
      courseC_maze_programming7: |-
        _"Saatnya marah!"_

        **Tantangan:** Kode ini banyak bug-nya. Anda harus menghapus beberapa blok dan menambahkan blok lain.
      courseC_maze_programming7_2018: |-
        _"Saatnya marah!"_

        **Tantangan:** Kode ini banyak bug-nya. Anda harus menghapus beberapa blok dan menambahkan blok lain.
      courseC_maze_programming7_2019: |-
        _"Saatnya marah!"_

        **Tantangan:** Kode ini banyak bug-nya. Anda harus menghapus beberapa blok dan menambahkan blok lain.
      courseC_maze_programming8: _"Tenang saja dan bantu saya menemukan babi jahat
        itu."_
      courseC_maze_programming8_2018: _"Tenang saja dan bantu saya menemukan babi
        jahat itu."_
      courseC_maze_programming8_2019: _"Tenang saja dan bantu saya menemukan babi
        jahat itu."_
      courseC_maze_programming8_predict1: _"Tenang saja dan bantu saya menemukan babi
        jahat itu."_
      courseC_maze_programming8_predict1_2018: _"Tenang saja dan bantu saya menemukan
        babi jahat itu."_
      courseC_maze_programming8_predict1_2019: _"Tenang saja dan bantu saya menemukan
        babi jahat itu."_
      courseC_maze_programming9: _"Sekarang, bantu saya mengintai babi dengan cara
        sesuka Anda!"_
      courseC_maze_programming9_2018: _"Sekarang, bantu saya mengintai babi dengan
        cara sesuka Anda!"_
      courseC_maze_programming9_2019: _"Sekarang, bantu saya mengintai babi dengan
        cara sesuka Anda!"_
      courseC_maze_programming_challenge1: 'Burung perlu bantuan Anda! Babinya bersembunyi,
        dan tujuannya adalah menemukannya. '
      courseC_maze_programming_challenge1_2018: 'Burung perlu bantuan Anda! Babinya
        bersembunyi, dan tujuannya adalah menemukannya. '
      courseC_maze_programming_challenge1_2019: 'Burung perlu bantuan Anda! Babinya
        bersembunyi, dan tujuannya adalah menemukannya. '
      courseC_maze_programming_challenge2: Kadang-kadang ada lebih dari satu cara
        untuk memecahkan masalah yang sama. Kadang-kadang lebih cepat mundur daripada
        maju!
      courseC_maze_programming_challenge2_2018: Kadang-kadang ada lebih dari satu
        cara untuk memecahkan masalah yang sama. Kadang-kadang lebih cepat mundur
        daripada maju!
      courseC_maze_programming_challenge2_2019: Kadang-kadang ada lebih dari satu
        cara untuk memecahkan masalah yang sama. Kadang-kadang lebih cepat mundur
        daripada maju!
      courseC_starWars_loops1: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _\"Ayo ambil logam rongsokan, BB-8!\"_ \n\nGunakan lima blok yang sama untuk
        mengambil logam rongsokan. Logam rongsokan berkilau seperti ini: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops10: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
         _"Ayo BB-8!"_

        Pekerjaan Anda bagus! Ayo dipertahankan!
      courseC_starWars_loops10_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
         _"Ayo BB-8!"_

        Pekerjaan Anda bagus! Ayo dipertahankan!
      courseC_starWars_loops10_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
         _"Ayo BB-8!"_

        Pekerjaan Anda bagus! Ayo dipertahankan!
      courseC_starWars_loops11: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus maju, BB-8!"_

        Anda hampir sampai! Kali ini, pilih jalur kesukaan anda!
      courseC_starWars_loops11_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus maju, BB-8!"_

        Anda hampir sampai! Kali ini, pilih jalur kesukaan anda!
      courseC_starWars_loops11_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus maju, BB-8!"_

        Anda hampir sampai! Kali ini, pilih jalur kesukaan anda!
      courseC_starWars_loops1_2018: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _\"Ayo ambil logam rongsokan, BB-8!\"_ \n\nGunakan lima blok yang sama untuk
        mengambil logam rongsokan. Logam rongsokan berkilau seperti ini: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops1_2019: "![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _\"Ayo ambil logam rongsokan, BB-8!\"_ \n\nGunakan lima blok yang sama untuk
        mengambil logam rongsokan. Logam rongsokan berkilau seperti ini: ![](https://images.code.org/5665566ab779d9b63d03cf8ba127a98f-image-1500570606896.gif)"
      courseC_starWars_loops2: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Ayo, BB-8!"_

        Untuk mengambil semua logam rongsokan, coba buat loop yang hanya menggunakan satu blok di dalam blok `repeat`.
      courseC_starWars_loops2_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Ayo, BB-8!"_

        Untuk mengambil semua logam rongsokan, coba buat loop yang hanya menggunakan satu blok di dalam blok `repeat`.
      courseC_starWars_loops2_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Ayo, BB-8!"_

        Untuk mengambil semua logam rongsokan, coba buat loop yang hanya menggunakan satu blok di dalam blok `repeat`.
      courseC_starWars_loops2_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Ayo, BB-8!"_

        Untuk mengambil semua logam rongsokan, coba buat loop yang hanya menggunakan satu blok di dalam blok `repeat`.
      courseC_starWars_loops4: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus semangat, BB-8."_

        Dalam puzzle ini, dua loop `repeat` akan membantu Anda membawa BB-8 ke semua pecahan logam dengan jumlah blok paling sedikit!
      courseC_starWars_loops4_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus semangat, BB-8."_

        Dalam puzzle ini, dua loop `repeat` akan membantu Anda membawa BB-8 ke semua pecahan logam dengan jumlah blok paling sedikit!
      courseC_starWars_loops4_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus semangat, BB-8."_

        Dalam puzzle ini, dua loop `repeat` akan membantu Anda membawa BB-8 ke semua pecahan logam dengan jumlah blok paling sedikit!
      courseC_starWars_loops4_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus semangat, BB-8."_

        Dalam puzzle ini, dua loop `repeat` akan membantu Anda membawa BB-8 ke semua pecahan logam dengan jumlah blok paling sedikit!
      courseC_starWars_loops5: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ayo, BB-8!"_'
      courseC_starWars_loops5_2018: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ayo, BB-8!"_'
      courseC_starWars_loops5_2019: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ayo, BB-8!"_'
      courseC_starWars_loops5_copy: '![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png)
        _"Ayo, BB-8!"_'
      courseC_starWars_loops6: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Bisakah Anda mengambil semuanya?"_

        Loop bahkan bekerja dengan lebih dari satu blok di dalam!  Bisakah Anda mengulang (loop) urutan ini?
      courseC_starWars_loops6_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Bisakah Anda mengambil semuanya?"_

        Loop bahkan bekerja dengan lebih dari satu blok di dalam!  Bisakah Anda mengulang (loop) urutan ini?
      courseC_starWars_loops6_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Bisakah Anda mengambil semuanya?"_

        Loop bahkan bekerja dengan lebih dari satu blok di dalam!  Bisakah Anda mengulang (loop) urutan ini?
      courseC_starWars_loops6_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Bisakah Anda mengambil semuanya?"_

        Loop bahkan bekerja dengan lebih dari satu blok di dalam!  Bisakah Anda mengulang (loop) urutan ini?
      courseC_starWars_loops7: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Anda pasti bisa!"_

        Bisakah Anda mencoba mengambil semua pecahan logam hanya dengan satu loop? Coba diprogram semua lalu cari kode yang berulang untuk dimasukkan ke dalam loop.
      courseC_starWars_loops7_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Anda pasti bisa!"_

        Bisakah Anda mencoba mengambil semua pecahan logam hanya dengan satu loop? Coba diprogram semua lalu cari kode yang berulang untuk dimasukkan ke dalam loop.
      courseC_starWars_loops7_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Anda pasti bisa!"_

        Bisakah Anda mencoba mengambil semua pecahan logam hanya dengan satu loop? Coba diprogram semua lalu cari kode yang berulang untuk dimasukkan ke dalam loop.
      courseC_starWars_loops7_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Anda pasti bisa!"_

        Bisakah Anda mencoba mengambil semua pecahan logam hanya dengan satu loop? Coba diprogram semua lalu cari kode yang berulang untuk dimasukkan ke dalam loop.
      courseC_starWars_loops8: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus kerja keras ya, BB-8."_

        **Tantangan:** Gabungkan ide dari beberapa puzzle terakhir untuk menyelesaikan level ini.
      courseC_starWars_loops8_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus kerja keras ya, BB-8."_

        **Tantangan:** Gabungkan ide dari beberapa puzzle terakhir untuk menyelesaikan level ini.
      courseC_starWars_loops8_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus kerja keras ya, BB-8."_

        **Tantangan:** Gabungkan ide dari beberapa puzzle terakhir untuk menyelesaikan level ini.
      courseC_starWars_loops8_copy: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Terus kerja keras ya, BB-8."_

        **Tantangan:** Gabungkan ide dari beberapa puzzle terakhir untuk menyelesaikan level ini.
      courseC_starWars_loops9: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Maju terus!"_

        Gunakan apa yang telah Anda pelajari untuk mengambil semua pecahan logam!
      courseC_starWars_loops9_2018: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Maju terus!"_

        Gunakan apa yang telah Anda pelajari untuk mengambil semua pecahan logam!
      courseC_starWars_loops9_2019: |-
        ![](https://images.code.org/51347264025d71343bb2b5bd6b49813b-image-1500569514703.png) _"Maju terus!"_

        Gunakan apa yang telah Anda pelajari untuk mengambil semua pecahan logam!
      courseD_artist_1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Halo, saya Elsa dari Arendelle, bantu saya menggambar bentuk.\"_\n\nGambar
        segi enam dengan sisi panjang **50** piksel.  \n\n* * *\n\nUntuk menggambar
        segi enam, Anda perlu: \n\n-   bergerak maju dengan **50** piksel\n-   belok
        kanan sebesar **60** derajat\n-   ulangi sebanyak **6** kali"
      courseD_artist_1_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Halo, saya Elsa dari Arendelle, bantu saya menggambar bentuk.\"_\n\nGambar
        segi enam dengan sisi panjang **50** piksel.  \n\n* * *\n\nUntuk menggambar
        segi enam, Anda perlu: \n\n-   bergerak maju dengan **50** piksel\n-   belok
        kanan sebesar **60** derajat\n-   ulangi sebanyak **6** kali"
      courseD_artist_2_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Kerja bagus!”_\n\nSetelah segi enam Anda, belok kanan sebesar **60** derajat,
        lalu gambar garis dengan panjang **150** piksel.   \n\nSelesai dengan menempatkan
        Elsa kembali ke tengah area bermain, gunakan blok <xml><block type=\"jump_to\"><title
        name=\"VALUE\">middle center</title></block></xml>."
      courseD_artist_2_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Kerja bagus!”_\n\nSetelah segi enam Anda, belok kanan sebesar **60** derajat,
        lalu gambar garis dengan panjang **150** piksel.   \n\nSelesai dengan menempatkan
        Elsa kembali ke tengah area bermain, gunakan blok <xml><block type=\"jump_to\"
        block-text=\"jump to the middle center position\"><title name=\"VALUE\">middle
        center</title></block></xml>."
      courseD_artist_3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Ayo kita buat kepingan salju.”_

        Untuk mengubah kode ini menjadi kepingan salju, tempatkan semua kode di dalam lingkaran `ulangi` lainnya dan jalankan sebanyak **6** kali. Anda hanya perlu menambahkan satu blok.
      courseD_artist_3_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _“Ayo kita buat kepingan salju.”_

        Untuk mengubah kode ini menjadi kepingan salju, tempatkan semua kode di dalam lingkaran `ulangi` lainnya dan jalankan sebanyak **6** kali. Anda hanya perlu menambahkan satu blok.
      courseD_artist_4_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Ayo kita buat kepingan salju istimewa!"_

        **Inspirasi:** Di mana Anda perlu menambahkan kode jika Anda ingin menggambar kotak kecil di ujung setiap garis panjang?

        * * *

        Anda dapat mencoba apa pun yang Anda inginkan dalam teka-teki ini, tetapi di sini ada gagasan:

        Cobalah membuat kotak kecil di ujung setiap baris

        -   Setiap sisi harus memiliki panjang 15 piksel
        -   Anda harus berputar 90 derajat
        -   Ulangi tindakan itu sebanyak 4 kali
      courseD_artist_4_2018_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Ayo kita buat kepingan salju istimewa!"_

        **Inspirasi:** Di mana Anda perlu menambahkan kode jika Anda ingin menggambar kotak kecil di ujung setiap garis panjang?

        * * *

        Anda dapat mencoba apa pun yang Anda inginkan dalam teka-teki ini, tetapi di sini ada gagasan:

        Cobalah membuat kotak kecil di ujung setiap baris

        -   Setiap sisi harus memiliki panjang 15 piksel
        -   Anda harus berputar 90 derajat
        -   Ulangi tindakan itu sebanyak 4 kali
      courseD_artist_5_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Coba ubah bentuk atau panjang garis untuk menjadikan ini milik Anda!"_

        **Inspirasi:** Anda dapat mengubah gambar dengan cara apa pun yang Anda inginkan, tetapi di sini ada gagasan:

        -   Coba ganti jenis bentuk di tengah kepingan salju dengan yang ada di ujung setiap baris!
      courseD_artist_5_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Try changing the shapes or the lengths of the lines to make this your own!\"_\n\n<br/>
        \ \n\n**Inspiration:** You can change your drawing in any way you want, but
        here is an idea:\n\n-   Try switching the types of shape in the middle of
        the snowflake with the one at the end of each line!"
      courseD_artist_6_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Ayo coba sesuatu yang baru. Kali ini, berseluncur dengan berliku-liku.\"_\n\n<br/>
        \ \n\n**Inspirasi:** Coba ubah garis panjang Anda sebesar 150 piksel menjadi
        6 garis pendek sebesar **25** piksel\n\n-   Putar sebesar **45** derajat ke
        arah bergantian setelah setiap garis pendek untuk mendapatkan tampilan berliku-liku\n-
        \  Di mana Anda perlu meletakkan blok `ulangi` baru untuk membuat hal ini
        terjadi?\n-   Berapa kali Anda harus mengulangi pola 2 garis pendek untuk
        mendapatkan sebanyak 6?"
      courseD_artist_6_2018_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Ayo coba sesuatu yang baru. Kali ini, berseluncur dengan berliku-liku.\"_\n\n<br/>
        \ \n\n**Inspirasi:** Coba ubah garis panjang Anda sebesar 150 piksel menjadi
        6 garis pendek sebesar **25** piksel\n\n-   Putar sebesar **45** derajat ke
        arah bergantian setelah setiap garis pendek untuk mendapatkan tampilan berliku-liku\n-
        \  Di mana Anda perlu meletakkan blok `ulangi` baru untuk membuat hal ini
        terjadi?\n-   Berapa kali Anda harus mengulangi pola 2 garis pendek untuk
        mendapatkan sebanyak 6?"
      courseD_artist_binary1: |-
        Kami sudah menyediakan kisi-kisi "piksel" yang dapat Anda lalui dan membuat desain hanya dengan mengaktifkan kotak tertentu.

        Gunakan blok di bawah ini untuk memerintahkan artis menggambar "01010101" dalam binary di baris pertama.
      courseD_artist_binary1_2018: |-
        Kami sudah menyediakan kisi-kisi "piksel" yang dapat Anda lalui dan membuat desain hanya dengan mengaktifkan kotak tertentu.

        Gunakan blok di bawah ini untuk memerintahkan artis menggambar "01010101" dalam binary di baris pertama.
      courseD_artist_binary1_2019: |-
        Kami sudah menyediakan kisi-kisi "piksel" yang dapat Anda lalui dan membuat desain hanya dengan mengaktifkan kotak tertentu.

        Gunakan blok di bawah ini untuk memerintahkan artis menggambar "01010101" dalam binary di baris pertama.
      courseD_artist_binary2: "Berikut adalah function yang mengambil string binary
        1 dan 0, dan menginstruksikan artis untuk mengikuti string binary dari kiri
        ke kanan, dari atas ke bawah. \n\n* * *\n\nArtis akan mengisi kotak ketika
        melihat 1 dan mengabaikan kotak saat melihat 0.  \n\n* * *\n\n**Jalankan kode
        ini untuk melihat cara artis menggunakan biner untuk menggambar pola ini.**"
      courseD_artist_binary2_2018: "Berikut adalah function yang mengambil string
        binary 1 dan 0, dan menginstruksikan artis untuk mengikuti string binary dari
        kiri ke kanan, dari atas ke bawah. \n\n* * *\n\nArtis akan mengisi kotak ketika
        melihat 1 dan mengabaikan kotak saat melihat 0.  \n\n* * *\n\n**Jalankan kode
        ini untuk melihat cara artis menggunakan biner untuk menggambar pola ini.**"
      courseD_artist_binary2_2019: "Berikut adalah function yang mengambil string
        binary 1 dan 0, dan menginstruksikan artis untuk mengikuti string binary dari
        kiri ke kanan, dari atas ke bawah. \n\n* * *\n\nArtis akan mengisi kotak ketika
        melihat 1 dan mengabaikan kotak saat melihat 0.  \n\n* * *\n\n**Jalankan kode
        ini untuk melihat cara artis menggunakan biner untuk menggambar pola ini.**"
      courseD_artist_binary_challenge1_2018: Anda hanya dapat menggunakan setiap nilai
        berpasangan (0 atau 1) masing-masing sekali dalam teka-teki ini. Coba gunakan
        lingkaran bersarang untuk menyelesaikan gambar ini.
      courseD_artist_binary_challenge1_2019: Anda hanya dapat menggunakan setiap nilai
        berpasangan (0 atau 1) masing-masing sekali dalam teka-teki ini. Coba gunakan
        lingkaran bersarang untuk menyelesaikan gambar ini.
      courseD_artist_binary_challenge2_2018: |-
        Ada 256 bit yang ditunjukkan pada kisi ini - itu berarti perubahan kecil mudah menyebabkan masalah besar. Apakah Anda cukup gigih mengembalikan logo ini ke kondisi normal?

        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_binary_challenge2_2019: |-
        Ada 256 bit yang ditunjukkan pada kisi ini - itu berarti perubahan kecil mudah menyebabkan masalah besar. Apakah Anda cukup gigih mengembalikan logo ini ke kondisi normal?

        ![](https://images.code.org/74e15f513982b47762dd33ebbc21e5e9-image-1498776314610.png)
      courseD_artist_nestedLoops1a: "Sekarang ulangi segitiga 6 kali. \n\nSetiap selesai
        satu segitiga, putar posisi 60 derajat untuk menggambar segitiga berikutnya. "
      courseD_artist_nestedLoops1a_2018: "Sekarang ulangi segitiga 6 kali. \n\nSetiap
        selesai satu segitiga, putar posisi 60 derajat untuk menggambar segitiga berikutnya. "
      courseD_artist_nestedLoops1a_2019: "Sekarang ulangi segitiga 6 kali. \n\nSetiap
        selesai satu segitiga, putar posisi 60 derajat untuk menggambar segitiga berikutnya. "
      courseD_artist_nestedLoops2: |-
        Kali ini, selesaikan puzzle dengan menggunakan jumlah blok sesedikit mungkin.

        Setiap selesai satu segitiga, Anda harus memutar posisi 60 derajat sebelum menggambar segitiga berikutnya.
        Lihat betapa mudahnya jika menggunakan **loop berlapis**?
      courseD_artist_nestedLoops2_2018: |-
        Kali ini, selesaikan puzzle dengan menggunakan jumlah blok sesedikit mungkin.

        Setiap selesai satu segitiga, Anda harus memutar posisi 60 derajat sebelum menggambar segitiga berikutnya.
        Lihat betapa mudahnya jika menggunakan **loop berlapis**?
      courseD_artist_nestedLoops2_2019: |-
        Kali ini, selesaikan puzzle dengan menggunakan jumlah blok sesedikit mungkin.

        Setiap selesai satu segitiga, Anda harus memutar posisi 60 derajat sebelum menggambar segitiga berikutnya.
        Lihat betapa mudahnya jika menggunakan **loop berlapis**?
      courseD_artist_nestedLoops4: "Bagus!  Lakukan hal yang sama dengan lingkaran-lingkaran
        ini. \n\n-   Setiap lingkaran dibuat dengan menggerakkan 1 piksel sebelum
        belok 1 derajat, 360 kali.\n-   Setiap lingkaran dimulai 50 piksel saja dari
        lingkaran terakhir yang selesai"
      courseD_artist_nestedLoops4_2018: "Bagus!  Lakukan hal yang sama dengan lingkaran-lingkaran
        ini. \n\n-   Setiap lingkaran dibuat dengan menggerakkan 1 piksel sebelum
        belok 1 derajat, 360 kali.\n-   Setiap lingkaran dimulai 50 piksel saja dari
        lingkaran terakhir yang selesai"
      courseD_artist_nestedLoops4_2019: "Bagus!  Lakukan hal yang sama dengan lingkaran-lingkaran
        ini. \n\n-   Setiap lingkaran dibuat dengan menggerakkan 1 piksel sebelum
        belok 1 derajat, 360 kali.\n-   Setiap lingkaran dimulai 50 piksel saja dari
        lingkaran terakhir yang selesai"
      courseD_artist_nestedLoops5: |-
        Apa yang terjadi jika Anda juga belok 90 derajat di antara lingkaran?

        (Untuk mendapatkan gambar ini, Anda masih harus melompat 50 piksel di antara lingkaran)
      courseD_artist_nestedLoops5_2018: |-
        Apa yang terjadi jika Anda juga belok 90 derajat di antara lingkaran?

        (Untuk mendapatkan gambar ini, Anda masih harus melompat 50 piksel di antara lingkaran)
      courseD_artist_nestedLoops5_2019: |-
        Apa yang terjadi jika Anda juga belok 90 derajat di antara lingkaran?

        (Untuk mendapatkan gambar ini, Anda masih harus melompat 50 piksel di antara lingkaran)
      courseD_artist_nestedLoops7: |-
        Gunakan materi yang sudah dipelajari untuk membuat gambar ini.

        -   Setiap kotak memiliki **sisi 100 piksel** dan **sudut 90 derajat**
        -   Anda harus belok **60 derajat di antara tiap-tiap kotak**. Mengapa? Karena ada 6 kotak, dan 360 derajat (satu putaran penuh) dibagi 6 sama dengan 60 derajat.
        -   Pastikan Anda melompat **50 piksel agar sampai di kotak berikutnya**
      courseD_artist_nestedLoops7_2018: |-
        Gunakan materi yang sudah dipelajari untuk membuat gambar ini.

        -   Setiap kotak memiliki **sisi 100 piksel** dan **sudut 90 derajat**
        -   Anda harus belok **60 derajat di antara tiap-tiap kotak**. Mengapa? Karena ada 6 kotak, dan 360 derajat (satu putaran penuh) dibagi 6 sama dengan 60 derajat.
        -   Pastikan Anda melompat **50 piksel agar sampai di kotak berikutnya**
      courseD_artist_nestedLoops7_2019: |-
        Gunakan materi yang sudah dipelajari untuk membuat gambar ini.

        -   Setiap kotak memiliki **sisi 100 piksel** dan **sudut 90 derajat**
        -   Anda harus belok **60 derajat di antara tiap-tiap kotak**. Mengapa? Karena ada 6 kotak, dan 360 derajat (satu putaran penuh) dibagi 6 sama dengan 60 derajat.
        -   Pastikan Anda melompat **50 piksel agar sampai di kotak berikutnya**
      courseD_artist_nestedLoops8: |-
        Dengan bekal pengetahuan dari beberapa puzzle terakhir, buat gambar ini dari awal.

        -   Setiap heksagon memiliki **sisi 50 piksel** dan **belokan 60 derajat**
      courseD_artist_nestedLoops8_2018: |-
        Dengan bekal pengetahuan dari beberapa puzzle terakhir, buat gambar ini dari awal.

        -   Setiap heksagon memiliki **sisi 50 piksel** dan **belokan 60 derajat**
      courseD_artist_nestedLoops8_2019: |-
        Dengan bekal pengetahuan dari beberapa puzzle terakhir, buat gambar ini dari awal.

        -   Setiap heksagon memiliki **sisi 50 piksel** dan **belokan 60 derajat**
      courseD_artist_nestedLoops9: |-
        **Tantangan:** Bisakah Anda mengira-ngira cara membuat gambar seperti ini?

        -   Kedua bentuk memiliki **sisi 50 piksel**
        -   Di antara masing-masing pasang bentuk, Anda harus melompat ke depan sejauh satu sisi, dan belok 45 derajat.
      courseD_artist_nestedLoops9_2018: |-
        **Tantangan:** Bisakah Anda mengira-ngira cara membuat gambar seperti ini?

        -   Kedua bentuk memiliki **sisi 50 piksel**
        -   Di antara masing-masing pasang bentuk, Anda harus melompat ke depan sejauh satu sisi, dan belok 45 derajat.
      courseD_artist_nestedLoops9_2019: |-
        **Tantangan:** Bisakah Anda mengira-ngira cara membuat gambar seperti ini?

        -   Kedua bentuk memiliki **sisi 50 piksel**
        -   Di antara masing-masing pasang bentuk, Anda harus melompat ke depan sejauh satu sisi, dan belok 45 derajat.
      courseD_artist_nestedLoops9_predict1: |-
        **Tantangan:** Bisakah Anda mengira-ngira cara membuat gambar seperti ini?

        -   Kedua bentuk memiliki sisi 50 piksel
      courseD_artist_nestedLoops9_predict1_2018: |-
        **Tantangan:** Bisakah Anda mengira-ngira cara membuat gambar seperti ini?

        -   Kedua bentuk memiliki sisi 50 piksel
      courseD_artist_nestedLoops9_predict1_2019: |-
        **Tantangan:** Bisakah Anda mengira-ngira cara membuat gambar seperti ini?

        -   Kedua bentuk memiliki sisi 50 piksel
      courseD_artist_nestedLoopsFP: |-
        Sekarang giliran Anda.  Kerahkan keterampilan yang sudah didapat dan buat sesuatu yang Anda suka!

        Butuh ide?  Coba buat kreasi dari yang berikut ini:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2018: |-
        Sekarang giliran Anda.  Kerahkan keterampilan yang sudah didapat dan buat sesuatu yang Anda suka!

        Butuh ide?  Coba buat kreasi dari yang berikut ini:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoopsFP_2019: |-
        Sekarang giliran Anda.  Kerahkan keterampilan yang sudah didapat dan buat sesuatu yang Anda suka!

        Butuh ide?  Coba buat kreasi dari yang berikut ini:

        ![expandable](https://images.code.org/7ac814e356b3548f57bfab8a9eb31dff-image-1497993113904.png)
        ![expandable](https://images.code.org/bd29d35c9a8abf9d27591b90b0f3ec0f-image-1497993121072.png)
        ![expandable](https://images.code.org/2970f34785e51ae98be7aff6fe0827ce-image-1497993126938.png)
      courseD_artist_nestedLoops_challenge1: |-
        Bisakah Anda mengira-ngira cara membuat gambar seperti ini?

        -   Kedua bentuk memiliki **sisi 50 piksel.**
        -   _Oktagon_ dibuat dengan belokan **45 derajat**.
        -   _Segitiga_ dibuat dengan belokan **120 derajat**.
      courseD_artist_nestedLoops_challenge1_2018: |-
        Bisakah Anda mengira-ngira cara membuat gambar seperti ini?

        -   Kedua bentuk memiliki **sisi 50 piksel.**
        -   _Oktagon_ dibuat dengan belokan **45 derajat**.
        -   _Segitiga_ dibuat dengan belokan **120 derajat**.
      courseD_artist_nestedLoops_challenge1_2019: |-
        Bisakah Anda mengira-ngira cara membuat gambar seperti ini?

        -   Kedua bentuk memiliki **sisi 50 piksel.**
        -   _Oktagon_ dibuat dengan belokan **45 derajat**.
        -   _Segitiga_ dibuat dengan belokan **120 derajat**.
      courseD_artist_nestedLoops_challenge2: |-
        Kode ini sedikit bermasalah!  Bisakah Anda memperbaikinya agar gambar yang dibuat di area kerja benar?

        -   Loop-dalam pertama mestinya menghasilkan oktagon.
        -   Loop-dalam kedua mestinya menghasilkan heksagon.
        -   Loop-dalam ketiga mestinya menghasilkan kotak.
      courseD_artist_nestedLoops_challenge2_2018: |-
        Kode ini sedikit bermasalah!  Bisakah Anda memperbaikinya agar gambar yang dibuat di area kerja benar?

        -   Loop-dalam pertama mestinya menghasilkan oktagon.
        -   Loop-dalam kedua mestinya menghasilkan heksagon.
        -   Loop-dalam ketiga mestinya menghasilkan kotak.
      courseD_artist_nestedLoops_challenge2_2019: |-
        Kode ini sedikit bermasalah!  Bisakah Anda memperbaikinya agar gambar yang dibuat di area kerja benar?

        -   Loop-dalam pertama mestinya menghasilkan oktagon.
        -   Loop-dalam kedua mestinya menghasilkan heksagon.
        -   Loop-dalam ketiga mestinya menghasilkan kotak.
      courseD_artist_project1: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hai, aku Elsa dari Arendelle, bantu aku menggambar sebuah bentuk.”_\n\nGambar
        sebuah bentuk kecil, antara**20 and 50** piksel lebar.  Bisa bentuk apa saja
        yang Anda mau..  \n\n<hr/>\n\nAnda bisa mencoba membuat sebuah poligon, seperti
        ini:\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \n\nAtau bahkan sebuah bentuk abstrak, seperti ini:\\\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hai, aku Elsa dari Arendelle, bantu aku menggambar sebuah bentuk.”_\n\nGambar
        sebuah bentuk kecil, antara**20 and 50** piksel lebar.  Bisa bentuk apa saja
        yang Anda mau..  \n\n<hr/>\n\nAnda bisa mencoba membuat sebuah poligon, seperti
        ini:\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \n\nAtau bahkan sebuah bentuk abstrak, seperti ini:\\\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Hai, aku Elsa dari Arendelle, bantu aku menggambar sebuah bentuk.”_\n\nGambar
        sebuah bentuk kecil, antara**20 and 50** piksel lebar.  Bisa bentuk apa saja
        yang Anda mau..  \n\n<hr/>\n\nAnda bisa mencoba membuat sebuah poligon, seperti
        ini:\\\n![](https://images.code.org/14e58b3901ca7c13319cc64f18ae5d82-image-1495765942356.21.06.png)\n![](https://images.code.org/8f79d689ea4936a3725a37025f8fda40-image-1495765942357.25.49.png)\n![](https://images.code.org/e5d222ae7356af4811aa153640af135e-image-1495765942357.26.09.png)
        \ \n\nAtau bahkan sebuah bentuk abstrak, seperti ini:\\\n![](https://images.code.org/8471c095219da3044b3830bebeedefb3-image-1496436883704.32.19.png)\n![](https://images.code.org/2fe6ed2db5308f4b34f7632fc6b8a64d-image-1496436883705.40.32.png)\n![](https://images.code.org/abb0947f634bc4b712d47516587a6cb8-image-1496436883705.47.21.png)"
      courseD_artist_project1a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Ayo coba sesuatu yang baru. Kali ini, meluncur dalam sebuah zig-zag."_

        <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" style="float: left; margin: 0 15px 15px 0;" />

        Gambar pola kaki tangga yang menggunakan putaran antara 75 dan 105 derajat -- tapi pastikan belokan kiri dan kanan Anda menggunakan sudut yang sama.\
        (Anda akan melihat mengapa nanti.)
      courseD_artist_project1a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Ayo coba sesuatu yang baru. Kali ini, meluncur dalam sebuah zig-zag."_

        <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" style="float: left; margin: 0 15px 15px 0;" />

        Gambar pola kaki tangga yang menggunakan putaran antara 75 dan 105 derajat -- tapi pastikan belokan kiri dan kanan Anda menggunakan sudut yang sama.\
        (Anda akan melihat mengapa nanti.)
      courseD_artist_project1a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Ayo coba sesuatu yang baru. Kali ini, meluncur dalam sebuah zig-zag."_

        <img src="https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png" width="200px" style="float: left; margin: 0 15px 15px 0;" />

        Gambar pola kaki tangga yang menggunakan putaran antara 75 dan 105 derajat -- tapi pastikan belokan kiri dan kanan Anda menggunakan sudut yang sama.\
        (Anda akan melihat mengapa nanti.)
      courseD_artist_project2: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Sekarang, mari gambar lebih dari satu.”_\n\nSekarang ambil bentuk Anda dan
        gambar dua atau tiga berturut-turut dengan meloncat ke depan beberapa piksel.
        \ \n\n-   Jika Anda meloncat ke depan **less** dari kelebaran bentuk Anda,
        mereka akan overlap.\n-   Jika Anda meloncat ke depan **more** dari kelebaran
        bentuk Anda, Anda akan mendapatkan celah.\n\n<hr/>\n\nBarisan Anda akan berakhir
        lurus seperti inii:\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>
        \ <br/>\n\nAtau, bentuk anda akan bergerak seperti ini: \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Sekarang, mari gambar lebih dari satu.”_\n\nSekarang ambil bentuk Anda dan
        gambar dua atau tiga berturut-turut dengan meloncat ke depan beberapa piksel.
        \ \n\n-   Jika Anda meloncat ke depan **less** dari kelebaran bentuk Anda,
        mereka akan overlap.\n-   Jika Anda meloncat ke depan **more** dari kelebaran
        bentuk Anda, Anda akan mendapatkan celah.\n\n<hr/>\n\nBarisan Anda akan berakhir
        lurus seperti inii:\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>
        \ <br/>\n\nAtau, bentuk anda akan bergerak seperti ini: \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _“Sekarang, mari gambar lebih dari satu.”_\n\nSekarang ambil bentuk Anda dan
        gambar dua atau tiga berturut-turut dengan meloncat ke depan beberapa piksel.
        \ \n\n-   Jika Anda meloncat ke depan **less** dari kelebaran bentuk Anda,
        mereka akan overlap.\n-   Jika Anda meloncat ke depan **more** dari kelebaran
        bentuk Anda, Anda akan mendapatkan celah.\n\n<hr/>\n\nBarisan Anda akan berakhir
        lurus seperti inii:\n\n![](https://images.code.org/cefc818d8636c7ce185738311870ff1d-image-1495820778762.39.25.png)\n![](https://images.code.org/80dc77914de15685dc696825dff61723-image-1495820778762.39.43.png)\n![](https://images.code.org/00cda078f119b1ddb0af27ae4a44b089-image-1495820778761.39.08.png)\n<br/>
        \ <br/>\n\nAtau, bentuk anda akan bergerak seperti ini: \n\n![](https://images.code.org/0c4066fe7547bc1f4495aacbeecdea6d-image-1496437220447.47.04.png)\n![](https://images.code.org/4069376b784c147a8d443d49e22f783f-image-1496437220446.40.15.png)\n![](https://images.code.org/02704ab3fb3356f76c544bb64c1a7cce-image-1496437220446.32.04.png)"
      courseD_artist_project2a: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Sekarang mari berputar dan kembali ke tempat asal kita.\"_\n\nBerputar
        180 derajat dan gambar pola tangga yang sama lagi!  \n\n-   Sisa tahap ini
        akan lebih mudah jika Anda memasukan semua kode Anda ke dalam sebuah loop
        untuk membuat Elsa  menggambar, berputar 180 derajat, lalu berputar 180 derajat
        lagi.\n    <hr/>\n\nIni adalah contoh dari tangga yang menggunakan belokan
        76 derajat:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Sekarang mari berputar dan kembali ke tempat asal kita.\"_\n\nBerputar
        180 derajat dan gambar pola tangga yang sama lagi!  \n\n-   Sisa tahap ini
        akan lebih mudah jika Anda memasukan semua kode Anda ke dalam sebuah loop
        untuk membuat Elsa  menggambar, berputar 180 derajat, lalu berputar 180 derajat
        lagi.\n    <hr/>\n\nIni adalah contoh dari tangga yang menggunakan belokan
        76 derajat:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project2a_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Sekarang mari berputar dan kembali ke tempat asal kita.\"_\n\nBerputar
        180 derajat dan gambar pola tangga yang sama lagi!  \n\n-   Sisa tahap ini
        akan lebih mudah jika Anda memasukan semua kode Anda ke dalam sebuah loop
        untuk membuat Elsa  menggambar, berputar 180 derajat, lalu berputar 180 derajat
        lagi.\n    <hr/>\n\nIni adalah contoh dari tangga yang menggunakan belokan
        76 derajat:\n\n![](https://images.code.org/ceea66fad37e79cc45a850911f90440c-image-1496696286635.16.27.png)"
      courseD_artist_project3: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Aya membuatnya menjadi sebuah menjadi keping salju."_

        Selanjutnya, loncatkan Elsa kembali ke pusat menggunakan blok `jump to 200 over and 200 down`, dan putar Elsa untuk menggambar garis dari bentuk lagi dan lagi dalam arah yang berbeda.

        Betapa hebatnya keping salju yang Anda bisa buat!

        * * *

        Lihatlah contoh ini dengan poligon:\
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)

        Bentuk abstrak akan membuat sebuah keping salju lebih seperti ini:\
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Aya membuatnya menjadi sebuah menjadi keping salju."_

        Selanjutnya, loncatkan Elsa kembali ke pusat menggunakan blok `jump to 200 over and 200 down`, dan putar Elsa untuk menggambar garis dari bentuk lagi dan lagi dalam arah yang berbeda.

        Betapa hebatnya keping salju yang Anda bisa buat!

        * * *

        Lihatlah contoh ini dengan poligon:\
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)

        Bentuk abstrak akan membuat sebuah keping salju lebih seperti ini:\
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Aya membuatnya menjadi sebuah menjadi keping salju."_

        Selanjutnya, loncatkan Elsa kembali ke pusat menggunakan blok `jump to 200 over and 200 down`, dan putar Elsa untuk menggambar garis dari bentuk lagi dan lagi dalam arah yang berbeda.

        Betapa hebatnya keping salju yang Anda bisa buat!

        * * *

        Lihatlah contoh ini dengan poligon:\
        ![](https://images.code.org/b32ebfb3be559bf8a6d017a854e0b97e-image-1495821528995.42.08.png)
        ![](https://images.code.org/08d7155f6829f82d878dfa57ad5dcaf3-image-1495821528996.42.26.png)
        ![](https://images.code.org/7d461ee9046871e6993406e558f28176-image-1495821528996.42.58.png)

        Bentuk abstrak akan membuat sebuah keping salju lebih seperti ini:\
        ![](https://images.code.org/376d7ba20b6bb86e08b1675370e87b92-image-1496695869798.44.00.png)
        ![](https://images.code.org/4f649cc779920632674afac5acce5c95-image-1496695869798.47.51.png)
        ![](https://images.code.org/a68f925ffd87241ebc09183acc908b4b-image-1496695869796.31.49.png)
      courseD_artist_project3a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Ayo berputar dan membuatnya menjadi keping salju."_

        Putar benuk itu sekitar 5 atau 6 kali dalam lingkaran.

        -   Jika anda memilih 5 kali,  coba putaran 72 derajat.
        -   Jika Anda memilih 6 kali,  coba putaran 60 derajat
            <hr/>

        Ini contoh Elsa memutar pola 6 kali:

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Ayo berputar dan membuatnya menjadi keping salju."_

        Putar benuk itu sekitar 5 atau 6 kali dalam lingkaran.

        -   Jika anda memilih 5 kali,  coba putaran 72 derajat.
        -   Jika Anda memilih 6 kali,  coba putaran 60 derajat
            <hr/>

        Ini contoh Elsa memutar pola 6 kali:

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project3a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png) _"Ayo berputar dan membuatnya menjadi keping salju."_

        Putar benuk itu sekitar 5 atau 6 kali dalam lingkaran.

        -   Jika anda memilih 5 kali,  coba putaran 72 derajat.
        -   Jika Anda memilih 6 kali,  coba putaran 60 derajat
            <hr/>

        Ini contoh Elsa memutar pola 6 kali:

        ![](https://images.code.org/b0fe02e728f80ae7a4b731f32371a37b-image-1496697582505.19.34.png)
      courseD_artist_project4: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Apa yang terjadi jika kita menggambar keping salju satu sama lain?\"_\n\nCoba
        lapisi dua bentuk berbeda dari keping salju di atas satu sama lain dengan
        sedikit putaran di antaranya - lihat apa yang Anda dapat! "
      courseD_artist_project4_2018: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Apa yang terjadi jika kita menggambar keping salju satu sama lain?\"_\n\nCoba
        lapisi dua bentuk berbeda dari keping salju di atas satu sama lain dengan
        sedikit putaran di antaranya - lihat apa yang Anda dapat! "
      courseD_artist_project4_2019: "![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _\"Apa yang terjadi jika kita menggambar keping salju satu sama lain?\"_\n\nCoba
        lapisi dua bentuk berbeda dari keping salju di atas satu sama lain dengan
        sedikit putaran di antaranya - lihat apa yang Anda dapat! "
      courseD_artist_project4a: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Sekarang, apa yang harus kita lakukan? Mari jelajahi dan buat negeri ajaib musim dingin kita sendiri!"_

        Coba bermain dengan apa yang Anda ciptakan. Gambar apa pun yang Anda mau!

        -   Apa yang terjadi jika Anda menggunakan dua sudut berbeda dalam pola tangga Anda?
        -   Apa yang terjadi jika pola berlian Anda lebih panjang atau pendek?
        -   Terlihat seperti apa untuk menggambar dua keping salju d iatas satu sama lain?
      courseD_artist_project4a_2018: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Sekarang, apa yang harus kita lakukan? Mari jelajahi dan buat negeri ajaib musim dingin kita sendiri!"_

        Coba bermain dengan apa yang Anda ciptakan. Gambar apa pun yang Anda mau!

        -   Apa yang terjadi jika Anda menggunakan dua sudut berbeda dalam pola tangga Anda?
        -   Apa yang terjadi jika pola berlian Anda lebih panjang atau pendek?
        -   Terlihat seperti apa untuk menggambar dua keping salju d iatas satu sama lain?
      courseD_artist_project4a_2019: |-
        ![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)  _"Sekarang, apa yang harus kita lakukan? Mari jelajahi dan buat negeri ajaib musim dingin kita sendiri!"_

        Coba bermain dengan apa yang Anda ciptakan. Gambar apa pun yang Anda mau!

        -   Apa yang terjadi jika Anda menggunakan dua sudut berbeda dalam pola tangga Anda?
        -   Apa yang terjadi jika pola berlian Anda lebih panjang atau pendek?
        -   Terlihat seperti apa untuk menggambar dua keping salju d iatas satu sama lain?
      courseD_artist_project5: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Jadi kreatif dengan bentuk dan sudut untuk melihat jenis keping salju yang
        Anda bisa gambar!"_'
      courseD_artist_project5_2018: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Jadi kreatif dengan bentuk dan sudut untuk melihat jenis keping salju yang
        Anda bisa gambar!"_'
      courseD_artist_project5_2019: '![](https://images.code.org/109aa2afaa3b7b1ecebff518bacdf3c5-image-1500660008987.png)
        _"Jadi kreatif dengan bentuk dan sudut untuk melihat jenis keping salju yang
        Anda bisa gambar!"_'
      courseD_artist_ramp11: |-
        Sip!  Sekarang ayo kita buat persegi empat menggunakan Artis!  Bloknya sedikit berbeda, tetapi idenya tetap sama.

        * * *

        Panjang setiap sisi persegi empat adalah 200 piksel, dan Anda hanya perlu belok 90 derajat untuk membuat setiap sudut.
      courseD_artist_ramp12: |-
        Gunakan materi yang sudah dipelajari untuk menggambar segitiga ini di dalam persegi empat.

        * * *

        ##### Panjang setiap sisi adalah 200 piksel. Anda hanya perlu belok 90 derajat untuk membuat persegi empat dan 120 derajat untuk membuat segitiga.
      courseD_autorun_binary2_2019: "Berikut adalah function yang mengambil string
        binary 1 dan 0, dan menginstruksikan artis untuk mengikuti string binary dari
        kiri ke kanan, dari atas ke bawah. \n\n* * *\n\nArtis akan mengisi kotak ketika
        melihat 1 dan mengabaikan kotak saat melihat 0.  \n\n* * *\n\n**Jalankan kode
        ini untuk melihat cara artis menggunakan biner untuk menggambar pola ini.**"
      courseD_bee_conditionals10: |-
        Kondisional dapat membantu, bahkan jika Anda tahu apa yang berada pada tiap tempat!

        Kumpulkan semua nektar dan buat semua madunya.
      courseD_bee_conditionals10_2018: |-
        Kondisional dapat membantu, bahkan jika Anda tahu apa yang berada pada tiap tempat!

        Kumpulkan semua nektar dan buat semua madunya.
      courseD_bee_conditionals10_2019: |-
        Kondisional dapat membantu, bahkan jika Anda tahu apa yang berada pada tiap tempat!

        Kumpulkan semua nektar dan buat semua madunya.
      courseD_bee_conditionals1_predict1: |-
        _"Awan ini menghalang pandanganku!"_

        Lihat apakah ada bunga di bawah awan. Jika ada bunga, mendapatkan nektar.
      courseD_bee_conditionals1_predict1_2018: |-
        _"Awan ini menghalang pandanganku!"_

        Lihat apakah ada bunga di bawah awan. Jika ada bunga, mendapatkan nektar.
      courseD_bee_conditionals1_predict1_2019: |-
        _"Awan ini menghalang pandanganku!"_

        Lihat apakah ada bunga di bawah awan. Jika ada bunga, mendapatkan nektar.
      courseD_bee_conditionals1_predict1_copy: |-
        _"Awan ini menghalang pandanganku!"_

        Lihat apakah ada bunga di bawah awan. Jika ada bunga, mendapatkan nektar.
      courseD_bee_conditionals2: "Lebih banyak awan!\n\nPeriksa di bawah tiap-tiap
        awan untuk melihat apakah tersembunyi bunga sebelum Anda mengambil nektar.
        Jika ada bunga di bawah awan, lebah akan mengisap nektar _satu kali_.   \n\nIngat:
        Tidak semua awan menyembunyikan benda yang sama!"
      courseD_bee_conditionals2_2018: "Lebih banyak awan!\n\nPeriksa di bawah tiap-tiap
        awan untuk melihat apakah tersembunyi bunga sebelum Anda mengambil nektar.
        Jika ada bunga di bawah awan, lebah akan mengisap nektar _satu kali_.   \n\nIngat:
        Tidak semua awan menyembunyikan benda yang sama!"
      courseD_bee_conditionals2_2019: "Lebih banyak awan!\n\nPeriksa di bawah tiap-tiap
        awan untuk melihat apakah tersembunyi bunga sebelum Anda mengambil nektar.
        Jika ada bunga di bawah awan, lebah akan mengisap nektar _satu kali_.   \n\nIngat:
        Tidak semua awan menyembunyikan benda yang sama!"
      courseD_bee_conditionals2_copy: "Lebih banyak awan!\n\nPeriksa di bawah tiap-tiap
        awan untuk melihat apakah tersembunyi bunga sebelum Anda mengambil nektar.
        Jika ada bunga di bawah awan, lebah akan mengisap nektar _satu kali_.   \n\nIngat:
        Tidak semua awan menyembunyikan benda yang sama!"
      courseD_bee_conditionals3: Anda hanya dapat mengumpulkan nektar dari bunga,
        tetapi Anda dapat memeriksa setiap tempat untuk melihat apakah ada bunga.
        Jika ada bunga di bawah sembarang awan, lebah perlu mengumpulkan nektar _satu
        kali_.
      courseD_bee_conditionals3_2018: Anda hanya dapat mengumpulkan nektar dari bunga,
        tetapi Anda dapat memeriksa setiap tempat untuk melihat apakah ada bunga.
        Jika ada bunga di bawah sembarang awan, lebah perlu mengumpulkan nektar _satu
        kali_.
      courseD_bee_conditionals3_2019: Anda hanya dapat mengumpulkan nektar dari bunga,
        tetapi Anda dapat memeriksa setiap tempat untuk melihat apakah ada bunga.
        Jika ada bunga di bawah sembarang awan, lebah perlu mengumpulkan nektar _satu
        kali_.
      courseD_bee_conditionals3_copy: Anda hanya dapat mengumpulkan nektar dari bunga,
        tetapi Anda dapat memeriksa setiap tempat untuk melihat apakah ada bunga.
        Jika ada bunga di bawah sembarang awan, lebah perlu mengumpulkan nektar _satu
        kali_.
      courseD_bee_conditionals4: |-
        Dalam teka-teki ini, kita tahu bahwa setiap bunga memiliki satu nekta, tapi bunganya tidak diletakkan dengan rata.

        Dapatkan semua nektar menggunakan blok sesedikit mungkin..
      courseD_bee_conditionals4_2018: |-
        Dalam teka-teki ini, kita tahu bahwa setiap bunga memiliki satu nekta, tapi bunganya tidak diletakkan dengan rata.

        Dapatkan semua nektar menggunakan blok sesedikit mungkin..
      courseD_bee_conditionals4_2019: |-
        Dalam teka-teki ini, kita tahu bahwa setiap bunga memiliki satu nekta, tapi bunganya tidak diletakkan dengan rata.

        Dapatkan semua nektar menggunakan blok sesedikit mungkin..
      courseD_bee_conditionals4_copy: |-
        Dalam teka-teki ini, kita tahu bahwa setiap bunga memiliki satu nekta, tapi bunganya tidak diletakkan dengan rata.

        Dapatkan semua nektar menggunakan blok sesedikit mungkin..
      courseD_bee_conditionals6: |-
        _"Sekarang saya hanya ingin membuat madu."_

        Mungkin ada sarang lebah di bawah sebagian awan ini. Pastikan diperiksa siapa tahu tersembunyi sarang lebah di bawah tiap-tiap awan! Jika ada sarang lebah, lebah hanya perlu membuat madu _satu kali_.
      courseD_bee_conditionals6_2018: |-
        _"Sekarang saya hanya ingin membuat madu."_

        Mungkin ada sarang lebah di bawah sebagian awan ini. Pastikan diperiksa siapa tahu tersembunyi sarang lebah di bawah tiap-tiap awan! Jika ada sarang lebah, lebah hanya perlu membuat madu _satu kali_.
      courseD_bee_conditionals6_2019: |-
        _"Sekarang saya hanya ingin membuat madu."_

        Mungkin ada sarang lebah di bawah sebagian awan ini. Pastikan diperiksa siapa tahu tersembunyi sarang lebah di bawah tiap-tiap awan! Jika ada sarang lebah, lebah hanya perlu membuat madu _satu kali_.
      courseD_bee_conditionals7: "Kadang-kadang awan menutupi bunga, kadang-kadang
        awan menutupi sarang lebah!  \n\nGunakan blok `if/else` untuk mengumpulkan
        nektar pada bunga dan membuat madu di sarang. Ingat: jika ada bunga, lebah
        hanya perlu mengisap nektar _satu kali_. Jika ada sarang, lebah hanya perlu
        membuat madu _satu kali_."
      courseD_bee_conditionals7_2018: "Kadang-kadang awan menutupi bunga, kadang-kadang
        awan menutupi sarang lebah!  \n\nGunakan blok `if/else` untuk mengumpulkan
        nektar pada bunga dan membuat madu di sarang. Ingat: jika ada bunga, lebah
        hanya perlu mengisap nektar _satu kali_. Jika ada sarang, lebah hanya perlu
        membuat madu _satu kali_."
      courseD_bee_conditionals7_2019: "Kadang-kadang awan menutupi bunga, kadang-kadang
        awan menutupi sarang lebah!  \n\nGunakan blok `if/else` untuk mengumpulkan
        nektar pada bunga dan membuat madu di sarang. Ingat: jika ada bunga, lebah
        hanya perlu mengisap nektar _satu kali_. Jika ada sarang, lebah hanya perlu
        membuat madu _satu kali_."
      courseD_bee_conditionals7_predict2: "Kadang-kadang awan menutupi bunga, kadang-kadang
        awan menutupi sarang lebah!  \n\nGunakan blok `if/else` untuk mengumpulkan
        nektar pada bunga dan membuat madu di sarang. Ingat: hanya akan **ada** _satu_
        sarang lebah atau _satu_ bunga di balik tiap-tiap awan."
      courseD_bee_conditionals7_predict2_2018: "Terkadang awan menutupi bunga, terkadang
        menutupi sarang lebah! \n\nGunakan blok `jika/lain` untuk mengumpulkan madu
        bunga pada bunga dan membuat madu di sarang lebah. Ingatlah: hanya akan ada
        _satu_ sarang lebah atau _satu_ bunga di balik setiap awan."
      courseD_bee_conditionals7_predict2_2019: "Terkadang awan menutupi bunga, terkadang
        menutupi sarang lebah! \n\nGunakan blok `jika/lain` untuk mengumpulkan madu
        bunga pada bunga dan membuat madu di sarang lebah. Ingatlah: hanya akan ada
        _satu_ sarang lebah atau _satu_ bunga di balik setiap awan."
      courseD_bee_conditionals8: |-
        **Tantangan:** Akan ada bunga atau sarang lebah di bawah setiap awan itu!

        Kumpulkan nektar satu kali jika ada bunga.
        Kalau tidak, buat madu satu kali (karena ada sarang lebah).
      courseD_bee_conditionals8_2018: |-
        **Tantangan:** Akan ada bunga atau sarang lebah di bawah setiap awan itu!

        Kumpulkan nektar satu kali jika ada bunga.
        Kalau tidak, buat madu satu kali (karena ada sarang lebah).
      courseD_bee_conditionals8_2019: |-
        **Tantangan:** Akan ada bunga atau sarang lebah di bawah setiap awan itu!

        Kumpulkan nektar satu kali jika ada bunga.
        Kalau tidak, buat madu satu kali (karena ada sarang lebah).
      courseD_bee_conditionals9: Kumpulkan semua nektar atau buat semua madu. Anda
        hanya dapat mengumpulkan nektar dari bunga dan membuat madu dari sarang lebah.
        Periksa setiap kotak jika ada bunga atau sarang lebah. Hanya akan ada satu
        bunga atau satu sarang lebah di balik setiap awan.
      courseD_bee_conditionals9_2018: Kumpulkan semua nektar atau buat semua madu.
        Anda hanya dapat mengumpulkan nektar dari bunga dan membuat madu dari sarang
        lebah. Periksa setiap kotak jika ada bunga atau sarang lebah. Hanya akan ada
        satu bunga atau satu sarang lebah di balik setiap awan.
      courseD_bee_conditionals9_2019: Kumpulkan semua nektar atau buat semua madu.
        Anda hanya dapat mengumpulkan nektar dari bunga dan membuat madu dari sarang
        lebah. Periksa setiap kotak jika ada bunga atau sarang lebah. Hanya akan ada
        satu bunga atau satu sarang lebah di balik setiap awan.
      courseD_bee_conditionals_challenge1: Kumpulkan semua nektar atau buat semua
        madu. Anda hanya dapat mengumpulkan nektar dari bunga dan membuat madu dari
        sarang lebah. Periksa setiap kotak jika ada bunga atau sarang lebah.
      courseD_bee_conditionals_challenge1_2018: Kumpulkan semua nektar atau buat semua
        madu. Anda hanya dapat mengumpulkan nektar dari bunga dan membuat madu dari
        sarang lebah. Periksa setiap kotak jika ada bunga atau sarang lebah.
      courseD_bee_conditionals_challenge1_2019: Kumpulkan semua nektar atau buat semua
        madu. Anda hanya dapat mengumpulkan nektar dari bunga dan membuat madu dari
        sarang lebah. Periksa setiap kotak jika ada bunga atau sarang lebah.
      courseD_bee_conditionals_challenge2: Kumpulkan semua nektar dan buat semua madu.
        Anda dapat mengumpulkan semua nektar di satu bunga dengan menggunakan loop
        `while nectar > 0`.
      courseD_bee_conditionals_challenge2_2018: Kumpulkan semua nektar dan buat semua
        madu. Anda dapat mengumpulkan semua nektar di satu bunga dengan menggunakan
        loop `while nectar > 0`.
      courseD_bee_conditionals_challenge2_2019: Kumpulkan semua nektar dan buat semua
        madu. Anda dapat mengumpulkan semua nektar di satu bunga dengan menggunakan
        loop `while nectar > 0`.
      courseD_bee_debugging_challenge1: Lihat bagaimana para lebah mendapatkan nektar.
        Bisakah Anda menggunakan semacam pola untuk membantu si lebah menghasilkan
        madu?
      courseD_bee_debugging_challenge1a: |-
        _"Ngung ngung! Saya tahu cara mengisap nektar, sekarang bantu saya membuat madu!"_

        Perhatikan cara lebah mengisap nektar. Bisakah Anda menggunakan jenis pola yang sama untuk membantu lebah membuat semua madu?
      courseD_bee_nestedLoops1: |-
        _"This is going to **BEE** great!"_

        Bantu si lebah mengumpulkan semua nektar.
      courseD_bee_nestedLoops1_2018: |-
        _"This is going to **BEE** great!"_

        Bantu si lebah mengumpulkan semua nektar.
      courseD_bee_nestedLoops1_2019: |-
        _"This is going to **BEE** great!"_

        Bantu si lebah mengumpulkan semua nektar.
      courseD_bee_nestedLoops1a: |-
        _"This is going to **BEE** great!"_

        Bantu si lebah mengumpulkan semua nektar.
      courseD_bee_nestedLoops1a_2018: |-
        _"This is going to **BEE** great!"_

        Bantu si lebah mengumpulkan semua nektar.
      courseD_bee_nestedLoops1a_2019: |-
        _"This is going to **BEE** great!"_

        Bantu si lebah mengumpulkan semua nektar.
      courseD_bee_nestedLoops2: Kali ini, bantulah si lebah mengumpulkan semua nektar
        menggunakan blok sesedikit mungkin.
      courseD_bee_nestedLoops2_2018: Kali ini, bantulah si lebah mengumpulkan semua
        nektar menggunakan blok sesedikit mungkin.
      courseD_bee_nestedLoops2_2019: Kali ini, bantulah si lebah mengumpulkan semua
        nektar menggunakan blok sesedikit mungkin.
      courseD_bee_nestedLoops2_predict1: Kali ini, bantulah si lebah mengumpulkan
        semua nektar menggunakan blok sesedikit mungkin.
      courseD_bee_nestedLoops2_predict1_2018: Kali ini, bantulah si lebah mengumpulkan
        semua nektar menggunakan blok sesedikit mungkin.
      courseD_bee_nestedLoops2_predict1_2019: Kali ini, bantulah si lebah mengumpulkan
        semua nektar menggunakan blok sesedikit mungkin.
      courseD_bee_nestedLoops7: "\\*\\* Tantangan:\\*\\* Cari tahu bagaimana cara
        mendapatkan semua nektar hanya menggunakan blok yang tersedia."
      courseD_bee_nestedLoops7_2018: "\\*\\* Tantangan:\\*\\* Cari tahu bagaimana
        cara mendapatkan semua nektar hanya menggunakan blok yang tersedia."
      courseD_bee_nestedLoops7_2019: "\\*\\* Tantangan:\\*\\* Cari tahu bagaimana
        cara mendapatkan semua nektar hanya menggunakan blok yang tersedia."
      courseD_bee_nestedLoops8: 'Kumpulkan semua nektar dari setiap bunga dan buatlah
        madu pada setiap sarang madu. Gunakan putaran bersarang. '
      courseD_bee_nestedLoops8_2018: 'Kumpulkan semua nektar dari setiap bunga dan
        buatlah madu pada setiap sarang madu. Gunakan putaran bersarang. '
      courseD_bee_nestedLoops8_2019: 'Kumpulkan semua nektar dari setiap bunga dan
        buatlah madu pada setiap sarang madu. Gunakan putaran bersarang. '
      courseD_bee_nestedLoops9: Hasilkan semua madunya
      courseD_bee_nestedLoops9_2018: Hasilkan semua madunya
      courseD_bee_nestedLoops9_2019: Hasilkan semua madunya
      courseD_bee_nestedLoops9_predict2: Hasilkan semua madunya
      courseD_bee_nestedLoops9_predict2_2018: Hasilkan semua madunya
      courseD_bee_nestedLoops9_predict2_2019: Hasilkan semua madunya
      courseD_bounce_events10s_2018: "Sekarang ada lingkaran kayu di bagian atas.
        \ \n\nLekatkan blok `poin skor` ke peristiwa `ketika bola di gawang` dan blok
        `poin skor lawan` ke peristiwa `ketika bola meleset` untuk membuat permainan.
        \n\n* * *\n\nLihat jumlah poin skor yang dapat Anda cetak sebelum lawan Anda
        mencetak skor dua kali."
      courseD_bounce_events10s_2019: "Sekarang ada lingkaran kayu di bagian atas.
        \ \n\nLekatkan blok `poin skor` ke peristiwa `ketika bola di gawang` dan blok
        `poin skor lawan` ke peristiwa `ketika bola meleset` untuk membuat permainan.
        \n\n* * *\n\nLihat jumlah poin skor yang dapat Anda cetak sebelum lawan Anda
        mencetak skor dua kali."
      courseD_bounce_events11s_2018: |-
        Sekarang, Anda mengendalikan bola! Lekatkan blok `lempar bola baru` pada semua tempat di mana permainan membutuhkan bola baru.

        * * *

        Lihat jumlah poin skor yang dapat Anda cetak sebelum lawan Anda mencetak skor dua kali!
      courseD_bounce_events11s_2019: |-
        Sekarang, Anda mengendalikan bola! Lekatkan blok `lempar bola baru` pada semua tempat di mana permainan membutuhkan bola baru.

        * * *

        Lihat jumlah poin skor yang dapat Anda cetak sebelum lawan Anda mencetak skor dua kali!
      courseD_bounce_events1s_2018: "Dapatkan lingkaran kayu itu!     \n\nLekatkan
        blok ke peristiwa `ketika panah kiri` dan tekan \"Jalankan\" untuk memindahkan
        pemain ke jala."
      courseD_bounce_events1s_2019: "Dapatkan lingkaran kayu itu!     \n\nLekatkan
        blok ke peristiwa `ketika panah kiri` dan tekan \"Jalankan\" untuk memindahkan
        pemain ke jala."
      courseD_bounce_events2s_2018: Sekarang, lekatkan blok ke `ketika peristiwa kanan`
        sehingga tangan dapat mencapai kedua keranjang.
      courseD_bounce_events2s_2019: Sekarang, lekatkan blok ke `ketika peristiwa kanan`
        sehingga tangan dapat mencapai kedua keranjang.
      courseD_bounce_events5s_2018: Kami akan mengirimkan bola basket ke arah tangan.
        Lekatkan blok ke peristiwa `ketika bola menyentuh tangan` untuk memastikan
        bola mencapai keranjang.
      courseD_bounce_events5s_2019: Kami akan mengirimkan bola basket ke arah tangan.
        Lekatkan blok ke peristiwa `ketika bola menyentuh tangan` untuk memastikan
        bola mencapai keranjang.
      courseD_bounce_events6s_2018: "Sekarang, keranjangnya ada di atas.  \n\nLekatkan
        kode untuk membuat bola memantul ketika menyentuh dinding sehingga Anda dapat
        memecahkan teka-teki ini."
      courseD_bounce_events6s_2019: "Sekarang, keranjangnya ada di atas.  \n\nLekatkan
        kode untuk membuat bola memantul ketika menyentuh dinding sehingga Anda dapat
        memecahkan teka-teki ini."
      courseD_bounce_events7s_2018: "Lekatkan blok suara untuk membuat jala mengibas
        ketika Anda memukul keranjang dan meniup peluit ketika bola meleset di tangan
        Anda.  \n\n* * *\n\nPantulkan bola hingga menyentuh target selesai."
      courseD_bounce_events7s_2019: "Lekatkan blok suara untuk membuat jala mengibas
        ketika Anda memukul keranjang dan meniup peluit ketika bola meleset di tangan
        Anda.  \n\n* * *\n\nPantulkan bola hingga menyentuh target selesai."
      courseD_collector_debugging1: |-
        _"Aduh! Ada masalah."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging10_predict1: |-
        _"Ini pulau harta karun!"_

        Bantu Laurel memperbaiki code untuk mengambil semua harta karun.
      courseD_collector_debugging1a_2018: |-
        _"Aduh! Ada masalah."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging1a_2019: |-
        _"Aduh! Ada masalah."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging2: |-
        _"Anda dapat melakukan ini."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging2a_2018: |-
        _"Anda dapat melakukan ini."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging2a_2019: |-
        _"Anda dapat melakukan ini."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging3: |-
        _"Tetaplah gigih dan Anda akan tahu caranya."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging3a_2018: |-
        _"Tetaplah gigih dan Anda akan tahu caranya."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging3a_2019: |-
        _"Tetaplah gigih dan Anda akan tahu caranya."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging4: |-
        _"Jangan frustrasi. Anda dapat melakukannya."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging4a_2018: |-
        _"Jangan frustrasi. Anda dapat melakukannya."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging4a_2019: |-
        _"Jangan frustrasi. Anda dapat melakukannya."_

        Perbaiki kesalahan agar dapat mengumpulkan semua harta karun.
      courseD_collector_debugging5: |-
        _"Teka-teki ini membuat saya ketagihan!"_

        Semua perintah yang Anda butuhkan sudah ada di sini...nah, gunakan keterampilan debugging untuk menebak cara memecahkan puzzle ini.
      courseD_collector_debugging5a_2018: |-
        _"Teka-teki ini membuat saya ketagihan!"_

        Semua perintah yang Anda butuhkan sudah ada di sini...nah, gunakan keterampilan debugging untuk menebak cara memecahkan puzzle ini.
      courseD_collector_debugging5a_2019: |-
        _"Teka-teki ini membuat saya ketagihan!"_

        Semua perintah yang Anda butuhkan sudah ada di sini...nah, gunakan keterampilan debugging untuk menebak cara memecahkan puzzle ini.
      courseD_collector_debugging6: "**Tantangan:**  Semua blok yang Anda butuhkan
        sudah ada di sini...Nah, gunakan keterampilan debugging Anda untuk memperbaiki
        kesalahan dan mengumpulkan semua harta karun."
      courseD_collector_debugging6a_2018: 'Tantangan: Gunakan kode di area kerja untuk
        mendapatkan paling sedikit **6** harta karun!'
      courseD_collector_debugging6a_2019: 'Tantangan: Gunakan kode di area kerja untuk
        mendapatkan paling sedikit **6** harta karun!'
      courseD_collector_debugging8: |-
        _"Begitu banyak harta karun!"_

        Bantu Laurel memperbaiki code untuk mengambil semua harta karun.
      courseD_collector_debugging8a_2018: |-
        _"Begitu banyak harta karun!"_

        Bantu Laurel memperbaiki code untuk mengambil semua harta karun.
      courseD_collector_debugging8a_2019: |-
        _"Begitu banyak harta karun!"_

        Bantu Laurel memperbaiki code untuk mengambil semua harta karun.
      courseD_collector_debugging9: |-
        _"Ini pulau harta karun!"_

        Bantu Laurel memperbaiki code untuk mengambil semua harta karun.
      courseD_collector_debugging9a_2018: |-
        _"Ini pulau harta karun!"_

        Bantu Laurel memperbaiki code untuk mengambil semua harta karun.
      courseD_collector_debugging9a_2019: |-
        _"Ini pulau harta karun!"_

        Bantu Laurel memperbaiki code untuk mengambil semua harta karun.
      courseD_collector_nested_loops_challenge2: "_\"Ayo berburu harta karun - menggunakan
        loops!\"_ \n\nBantu si pengumpul mencapai setidaknya dua tumpuk harta karun
        hanya menggunakan blok yang ada di toolbox Anda. Memungkinkan sekali untuk
        mendapatkan 4 harta karunnya"
      courseD_collector_nested_loops_challenge2_2018: "_\"Ayo berburu harta karun
        - menggunakan loops!\"_ \n\nBantu si pengumpul mencapai setidaknya dua tumpuk
        harta karun hanya menggunakan blok yang ada di toolbox Anda. Memungkinkan
        sekali untuk mendapatkan 4 harta karunnya"
      courseD_collector_nested_loops_challenge2_2019: "_\"Ayo berburu harta karun
        - menggunakan loops!\"_ \n\nBantu si pengumpul mencapai setidaknya dua tumpuk
        harta karun hanya menggunakan blok yang ada di toolbox Anda. Memungkinkan
        sekali untuk mendapatkan 4 harta karunnya"
      courseD_collector_nested_loops_challenge2a: "_\"Ayo berburu harta karun - menggunakan
        loop!\"_ \n\nBantu Laurel mengumpulkan sedikitnya dua tumpuk harta karun hanya
        menggunakan blok-blok di dalam toolbox. Anda berpeluang mengumpulkan 4 itu
        semua."
      courseD_collector_ramp10: Buat Laurel mengitari lapangan ini untuk mengumpulkan
        harta karun yang ditemui.
      courseD_collector_ramp8: |-
        Puzzle ini mirip sekali dengan puzzle terakhir, tetapi kini yang jadi bintang adalah Laurel si Petualang!

        * * *

        Tempuh jalur yang sama dengan sebelumnya, tetapi kali ini, gunakan loop repeat untuk mengumpulkan harta karun ketika Anda sampai padanya.
      courseD_collector_ramp9: Kini harta karunnya lebih banyak. Bisakah Anda membantu
        Laurel mengumpulkan semuanya?
      courseD_farmer_condLoops1: |-
        _"Bisakah Anda membantuku memanen hari ini"_

        Bantu pemanen mengecek barisan jagungnya untuk melihat jika ada yang siap dipilih.  Gunakan kondisional untuk melihat tiap tunas. Tiap batang memiliki antara **0 atau 1** jagung siap untuk panen.
      courseD_farmer_condLoops1_2018: |-
        _"Bisakah Anda membantuku memanen hari ini"_

        Bantu pemanen mengecek barisan jagungnya untuk melihat jika ada yang siap dipilih.  Gunakan kondisional untuk melihat tiap tunas. Tiap batang memiliki antara **0 atau 1** jagung siap untuk panen.
      courseD_farmer_condLoops1_2019: |-
        _"Bisakah Anda membantuku memanen hari ini"_

        Bantu pemanen mengecek barisan jagungnya untuk melihat jika ada yang siap dipilih.  Gunakan kondisional untuk melihat tiap tunas. Tiap batang memiliki antara **0 atau 1** jagung siap untuk panen.
      courseD_farmer_condLoops2: "_\"Selada mengumpulkan kedua tanaman dari barisan
        ini!\"_\n\nKebun ini bercampur-aduk, memiliki **jagung dan selada**!  \n\nBantu
        si pemanen memetik barang yang siap dipanen.  Tiap tanaman akan memiliki **one**
        jagung atau **one** selada."
      courseD_farmer_condLoops2_2018: "_\"Selada mengumpulkan kedua tanaman dari barisan
        ini!\"_\n\nKebun ini bercampur-aduk, memiliki **jagung dan selada**!  \n\nBantu
        si pemanen memetik barang yang siap dipanen.  Tiap tanaman akan memiliki **one**
        jagung atau **one** selada."
      courseD_farmer_condLoops2_2019: "_\"Selada mengumpulkan kedua tanaman dari barisan
        ini!\"_\n\nKebun ini bercampur-aduk, memiliki **jagung dan selada**!  \n\nBantu
        si pemanen memetik barang yang siap dipanen.  Tiap tanaman akan memiliki **one**
        jagung atau **one** selada."
      courseD_farmer_condLoops3: |-
        _"Jagung, selada, DAN labu! Bantu aku memanen mereka semua."_

        Setiap tanaman akan memiliki satu jagung, satu selada, atau satu labu.
      courseD_farmer_condLoops3_2018: |-
        _"Jagung, selada, DAN labu! Bantu aku memanen mereka semua."_

        Setiap tanaman akan memiliki satu jagung, satu selada, atau satu labu.
      courseD_farmer_condLoops3_2019: |-
        _"Jagung, selada, DAN labu! Bantu aku memanen mereka semua."_

        Setiap tanaman akan memiliki satu jagung, satu selada, atau satu labu.
      courseD_farmer_condLoops4: "_\"Astaga! Sekarang seladanya bertumbuh dalam gugusan!\"_
        \ \n\nSi pemanen ingin memetik semuanya dari kebun seladanya. Tiap tanaman
        sekarang akan memiliki sebuah selada padanya, sehingga si petani perlu tetap
        memetik selagi ada selada tumbuh.  \n\n##### (Ingat: Kebun ini hanya memiliki
        selada!)"
      courseD_farmer_condLoops4_2018: "_\"Astaga! Sekarang selada tumbuh berkelompok!\"_
        \ \n\nPemanen ingin mengambil segala sesuatu dari kebun selada. Setiap tanaman
        sekarang akan memiliki lebih dari satu kepala selada di atasnya, sehingga
        pemanen harus terus memetik walaupun masih ada selada yang tumbuh.  \n\n#####
        (Ingatlah: Kebun ini hanya memiliki selada!)"
      courseD_farmer_condLoops4_2019: "_\"Astaga! Sekarang selada tumbuh berkelompok!\"_
        \ \n\nPemanen ingin mengambil segala sesuatu dari kebun selada. Setiap tanaman
        sekarang akan memiliki lebih dari satu kepala selada di atasnya, sehingga
        pemanen harus terus memetik walaupun masih ada selada yang tumbuh.  \n\n#####
        (Ingatlah: Kebun ini hanya memiliki selada!)"
      courseD_farmer_condLoops5: |-
        _"Tanaman yang sangat berlimpah!"_

        Ladang ini memiliki gugusan jagung dan selada yang tumbuh bersama -- dengan satu labu di akhir.  Bisakah Anda memanen semuanya?
      courseD_farmer_condLoops5_2018: |-
        _"Tanaman yang sangat berlimpah!"_

        Ladang ini memiliki gugusan jagung dan selada yang tumbuh bersama -- dengan satu labu di akhir.  Bisakah Anda memanen semuanya?
      courseD_farmer_condLoops5_2019: |-
        _"Tanaman yang sangat berlimpah!"_

        Ladang ini memiliki gugusan jagung dan selada yang tumbuh bersama -- dengan satu labu di akhir.  Bisakah Anda memanen semuanya?
      courseD_farmer_condLoops6: |-
        _"Mari bawa ini satu langkah ke depan!"_

        Bisakah Anda cari tahu bagaimana cara memetik labu? Pastikan untuk mengumpulkan semua jagung di sepanjang jalan!
      courseD_farmer_condLoops6_2018: |-
        _"Mari bawa ini satu langkah ke depan!"_

        Bisakah Anda cari tahu bagaimana cara memetik labu? Pastikan untuk mengumpulkan semua jagung di sepanjang jalan!
      courseD_farmer_condLoops6_2019: |-
        _"Mari bawa ini satu langkah ke depan!"_

        Bisakah Anda cari tahu bagaimana cara memetik labu? Pastikan untuk mengumpulkan semua jagung di sepanjang jalan!
      courseD_farmer_condLoops7: "**Tantangan:** Kumpukan semua jagung dan selada,
        lalu petik labunya."
      courseD_farmer_condLoops7_2018: "**Tantangan:** Kumpukan semua jagung dan selada,
        lalu petik labunya."
      courseD_farmer_condLoops7_2019: "**Tantangan:** Kumpukan semua jagung dan selada,
        lalu petik labunya."
      courseD_farmer_condLoops8: Kumpukan semua jagung dan selada, lalu petik labunya.
      courseD_farmer_condLoops8_2018: Kumpukan semua jagung dan selada, lalu petik
        labunya.
      courseD_farmer_condLoops8_2019: Kumpukan semua jagung dan selada, lalu petik
        labunya.
      courseD_farmer_condLoops9: Kumpukan semua jagung dan selada, lalu petik labunya.
      courseD_farmer_condLoops9_2018: Kumpukan semua jagung dan selada, lalu petik
        labunya.
      courseD_farmer_condLoops9_2019: Kumpukan semua jagung dan selada, lalu petik
        labunya.
      courseD_farmer_condLoops9_predict1: Kumpukan semua jagung dan selada, lalu petik
        labunya.
      courseD_farmer_condLoops9_predict1_2018: Kumpukan semua jagung dan selada, lalu
        petik labunya.
      courseD_farmer_condLoops9_predict1_2019: Kumpukan semua jagung dan selada, lalu
        petik labunya.
      courseD_farmer_condLoops_challenge1: "Labu menandakan tempat di mana Anda harus
        `turn right`. Jika tidak tetap maju, tapi ingat untuk mengumpulkan semua selada
        dan jagung di sepanjang jalan \n\n**Each hidden crop has only one corn or
        lettuce.**"
      courseD_farmer_condLoops_challenge1_2018: "Labu menandakan tempat di mana Anda
        harus `turn right`. Jika tidak tetap maju, tapi ingat untuk mengumpulkan semua
        selada dan jagung di sepanjang jalan \n\n**Each hidden crop has only one corn
        or lettuce.**"
      courseD_farmer_condLoops_challenge1_2019: "Labu menandakan tempat di mana Anda
        harus `turn right`. Jika tidak tetap maju, tapi ingat untuk mengumpulkan semua
        selada dan jagung di sepanjang jalan \n\n**Each hidden crop has only one corn
        or lettuce.**"
      courseD_farmer_condLoops_challenge2: "_\"Ini adalah sebuah labirin sayur yang
        sangat bervariasi!\"_ \n\nBelok kanan pada labu,  belok kiri pada selada.
        Kumpulkan semuanya untuk menyelesaikan tingkat ini."
      courseD_farmer_condLoops_challenge2_2018: "_\"Ini adalah sebuah labirin sayur
        yang sangat bervariasi!\"_ \n\nBelok kanan pada labu,  belok kiri pada selada.
        Kumpulkan semuanya untuk menyelesaikan tingkat ini."
      courseD_farmer_condLoops_challenge2_2019: "_\"Ini adalah sebuah labirin sayur
        yang sangat bervariasi!\"_ \n\nBelok kanan pada labu,  belok kiri pada selada.
        Kumpulkan semuanya untuk menyelesaikan tingkat ini."
      courseD_farmer_until_challenge2: Gunakan blok `If/Else` untuk mengikuti jalan
        melengkung. Pada tiap pojok, gunakan perintah `remove 1` di dalam loop untuk
        membersihkan tumpukan.
      courseD_farmer_while1: "_\"Hai, aku seorang petani. Aku butuh bantuan Anda untuk
        meratakan lahan taniku agar lahan itu siap untuk di tanami!\"_  \n\nBergerak
        menuju tumpukan tanah dan gunakan blok `remove` untuk menghilangkannya. "
      courseD_farmer_while1_2018: "_\"Hai, aku seorang petani. Aku butuh bantuan Anda
        untuk meratakan lahan taniku agar lahan itu siap untuk di tanami!\"_  \n\nBergerak
        menuju tumpukan tanah dan gunakan blok `remove` untuk menghilangkannya. "
      courseD_farmer_while1_2019: "_\"Hai, aku seorang petani. Aku butuh bantuan Anda
        untuk meratakan lahan taniku agar lahan itu siap untuk di tanami!\"_  \n\nBergerak
        menuju tumpukan tanah dan gunakan blok `remove` untuk menghilangkannya. "
      courseD_farmer_while3: |-
        _"Bergerak menuju tumpukan tanah dan bilang kepadaku berapa banyak sekop untuk menghilangkan."_

        Gunakan blok sesedikit mungkin untuk menyelesaikan teka-teki ini.
      courseD_farmer_while3_2018: |-
        _"Bergerak menuju tumpukan tanah dan bilang kepadaku berapa banyak sekop untuk menghilangkan."_

        Gunakan blok sesedikit mungkin untuk menyelesaikan teka-teki ini.
      courseD_farmer_while3_2019: |-
        _"Bergerak menuju tumpukan tanah dan bilang kepadaku berapa banyak sekop untuk menghilangkan."_

        Gunakan blok sesedikit mungkin untuk menyelesaikan teka-teki ini.
      courseD_farmer_while4: |-
        _"Aku tidak tahu berapa banyak tanah dalam tumpukan ini!"_

        Bantu si petani menghilangkan seluruh tumpukan ini menggunakan loop `while`.
      courseD_farmer_while4_2018: |-
        _"Aku tidak tahu berapa banyak tanah dalam tumpukan ini!"_

        Bantu si petani menghilangkan seluruh tumpukan ini menggunakan loop `while`.
      courseD_farmer_while4_2019: |-
        _"Aku tidak tahu berapa banyak tanah dalam tumpukan ini!"_

        Bantu si petani menghilangkan seluruh tumpukan ini menggunakan loop `while`.
      courseD_farmer_while4_predict1: |-
        _"Aku tidak tahu berapa banyak tanah dalam tumpukan ini!"_

        Bantu si petani menghilangkan seluruh tumpukan ini menggunakan loop `while`.
      courseD_farmer_while4_predict1_2018: |-
        _"Aku tidak tahu berapa banyak tanah dalam tumpukan ini!"_

        Bantu si petani menghilangkan seluruh tumpukan ini menggunakan loop `while`.
      courseD_farmer_while4_predict1_2019: |-
        _"Aku tidak tahu berapa banyak tanah dalam tumpukan ini!"_

        Bantu si petani menghilangkan seluruh tumpukan ini menggunakan loop `while`.
      courseD_farmer_while6: "Lihat semua lubang itu!  Setiap lubang membutuhkan jumlah
        tanah yang berbeda.   \n\nAnda dapat menggunakan loop `while` untuk mengisi
        mereka dengan mudah!"
      courseD_farmer_while6_2018: "Lihat semua lubang itu!  Setiap lubang membutuhkan
        jumlah tanah yang berbeda.   \n\nAnda dapat menggunakan loop `while` untuk
        mengisi mereka dengan mudah!"
      courseD_farmer_while6_2019: "Lihat semua lubang itu!  Setiap lubang membutuhkan
        jumlah tanah yang berbeda.   \n\nAnda dapat menggunakan loop `while` untuk
        mengisi mereka dengan mudah!"
      courseD_farmer_while8: "\\*\\* Challenge:\\*\\* Penuhi semua lubang ini dengan
        menggunakan blok sesedikit mungkin."
      courseD_farmer_while8_2018: "\\*\\* Challenge:\\*\\* Penuhi semua lubang ini
        dengan menggunakan blok sesedikit mungkin."
      courseD_farmer_while8_2019: "\\*\\* Challenge:\\*\\* Penuhi semua lubang ini
        dengan menggunakan blok sesedikit mungkin."
      courseD_farmer_while_challenge1: Isi semua lubang dan hilangkan semua tumpukan.
      courseD_farmer_while_challenge1_2018: Isi semua lubang dan hilangkan semua tumpukan.
      courseD_farmer_while_challenge1_2019: Isi semua lubang dan hilangkan semua tumpukan.
      courseD_farmer_while_challenge2: Isi semua lubang dan hilangkan semua tumpukan.
      courseD_harvester_nested_loops_challenge1: _”Aku butuh bantuan di pertanian!
        Bantu aku memanen jagung ini dengan hanya menggunakan blok yang ada di dalam
        toolbox Anda.”_
      courseD_harvester_nested_loops_challenge1_2018: _”Aku butuh bantuan di pertanian!
        Bantu aku memanen jagung ini dengan hanya menggunakan blok yang ada di dalam
        toolbox Anda.”_
      courseD_harvester_nested_loops_challenge1_2019: _”Aku butuh bantuan di pertanian!
        Bantu aku memanen jagung ini dengan hanya menggunakan blok yang ada di dalam
        toolbox Anda.”_
      courseD_iceage_loops1: Bantu Scrat melintasi es yang licin untuk menuju ke biji!
      courseD_iceage_loops10: Bantu Scrat sepenuhnya menuju ke biji!
      courseD_iceage_loops10_2019: Bantu Scrat sepenuhnya menuju ke biji!
      courseD_iceage_loops11: Bantu Scrat menuju ke biji!
      courseD_iceage_loops11_2019: Bantu Scrat menuju ke biji!
      courseD_iceage_loops12: Menuju ke biji dengan cara apa pun yang dapat Anda lakukan!
      courseD_iceage_loops12_2019: Menuju ke biji dengan cara apa pun yang dapat Anda
        lakukan!
      courseD_iceage_loops1_2019: Bantu Scrat melintasi es yang licin untuk menuju
        ke biji!
      courseD_iceage_loops2: |-
        Gunakan blok <xml><block type="maze_turn">
            <title name="DIR">turnLeft</title>
          </block></xml> untuk menuju ke biji pohon ek!
      courseD_iceage_loops2_2019: |-
        Gunakan blok <xml><block type="maze_turn" block-text="turn left">
            <title name="DIR">turnLeft</title>
          </block></xml> untuk menuju ke biji pohon ek!
      courseD_iceage_loops3: Dapatkah Anda menuju ke biji hanya dengan satu blok <xml><block
        type="maze_moveForward"/></xml>? Coba gunakan satu lingkaran!
      courseD_iceage_loops3_2019: Dapatkah Anda menuju ke biji hanya dengan satu blok
        <xml><block type="maze_moveForward" block-text="move forward"/></xml>? Coba
        gunakan satu lingkaran!
      courseD_iceage_loops4: Tambahkan satu blok lagi untuk membawa sepenuhnya Scrat
        menuju ke biji!
      courseD_iceage_loops4_2019: Tambahkan satu blok lagi untuk membawa sepenuhnya
        Scrat menuju ke biji!
      courseD_iceage_loops6: Dapatkah Anda menambahkan lingkaran untuk menuju ke biji?
      courseD_iceage_loops6_2019: Dapatkah Anda menambahkan lingkaran untuk menuju
        ke biji?
      courseD_iceage_loops7: Scrat benar-benar menginginkan biji itu!
      courseD_iceage_loops7_2019: Scrat benar-benar menginginkan biji itu!
      courseD_iceage_loops8: Dapatkah Anda memperbaiki kode ini?
      courseD_iceage_loops8_2019: Dapatkah Anda memperbaiki kode ini?
      courseD_iceage_loops9: Biji itu sangat jauh! Dapatkah Anda menggunakan lingkaran
        untuk membantu Scrat sampai di sana?
      courseD_iceage_loops9_2019: Biji itu sangat jauh! Dapatkah Anda menggunakan
        lingkaran untuk membantu Scrat sampai di sana?
      courseD_maze_intro4_2019: _"Telusuri jalan dan bawa aku ke babi."_
      courseD_maze_intro5a_2019: Hitung spasi di kisi-kisi dengan hati-hati!
      courseD_maze_intro5c_2019: Hati-hati dengan TNT! Bantu Red menuju ke babi.
      courseD_maze_nestedLoops3: _”Zombie lapar!”_
      courseD_maze_nestedLoops3_2018: _”Zombie lapar!”_
      courseD_maze_nestedLoops3_2019: _”Zombie lapar!”_
      courseD_maze_nestedLoops4: Bawa aku ke bunga matahari!
      courseD_maze_nestedLoops4_2018: Bawa aku ke bunga matahari!
      courseD_maze_nestedLoops4_2019: Bawa aku ke bunga matahari!
      courseD_maze_nestedLoops6: |-
        _"Harus makan bunga matahari!"_

        Gerakkan zombie menuju bunga matahari menggunakan blok yang tersedia.
      courseD_maze_nestedLoops6_2018: |-
        _"Harus makan bunga matahari!"_

        Gerakkan zombie menuju bunga matahari menggunakan blok yang tersedia.
      courseD_maze_nestedLoops6_2019: |-
        _"Harus makan bunga matahari!"_

        Gerakkan zombie menuju bunga matahari menggunakan blok yang tersedia.
      courseD_maze_ramp1: Untuk puzzle ini, pasang semua blok sekaligus dan klik "Run"
        untuk memulainya!
      courseD_maze_ramp1_2018: Untuk puzzle ini, pasang semua blok sekaligus dan klik
        "Run" untuk memulainya!
      courseD_maze_ramp1_2019: Untuk puzzle ini, pasang semua blok sekaligus dan klik
        "Run" untuk memulainya!
      courseD_maze_ramp2: Pindahkan blok `pindah ke depan` tambahan keluar dari toolbox,
        lalu pasang semua blok ke `saat jalan` untuk menyelesaikan kode Anda.
      courseD_maze_ramp2_2018: Pindahkan blok `pindah ke depan` tambahan keluar dari
        toolbox, lalu pasang semua blok ke `saat jalan` untuk menyelesaikan kode Anda.
      courseD_maze_ramp2_2019: Pindahkan blok `pindah ke depan` tambahan keluar dari
        toolbox, lalu pasang semua blok ke `saat jalan` untuk menyelesaikan kode Anda.
      courseD_maze_ramp3: |-
        _"Babi ini mengacak-acak bulu saya."_

        Ada satu blok ekstra yang akan menyebabkan burung tertabrak.\
        Buanglah dengan melepasnya dari blok lain dan menyeretnya kembali ke toolbox.
      courseD_maze_ramp3_2018: |-
        _"Babi ini mengacak-acak bulu saya."_

        Ada satu blok ekstra yang akan menyebabkan burung tertabrak.\
        Buanglah dengan melepasnya dari blok lain dan menyeretnya kembali ke toolbox.
      courseD_maze_ramp3_2019: |-
        "Bantu burung untuk menuju ke babi. Ada satu blok tambahan `bergerak maju` warna biru.

        Buang blok tambahan dengan menghapusnya dari blok lain dan pindahkan kembali ke kotak peralatan."
      courseD_maze_ramp4: "_\"Telusuri jalur dan bawa saya menuju babi nakal .\"_
        \n\nHindari TNT atau bulu-bulu akan beterbangan!"
      courseD_maze_ramp4_2018: "_\"Telusuri jalur dan bawa saya menuju babi nakal
        .\"_ \n\nHindari TNT atau bulu-bulu akan beterbangan!"
      courseD_maze_ramp4_2019: _"Telusuri jalan dan bawa saya ke biji pohon ek."_
      courseD_maze_ramp5: |-
        _"Ikuti jalur ini untuk membawa saya ke babi!"_

        Hindari TNT.
      courseD_maze_ramp5_2018: |-
        _"Ikuti jalur ini untuk membawa saya ke babi!"_

        Hindari TNT.
      courseD_maze_ramp5_2019: |-
        _"Ikuti jalur ini untuk membawa saya ke babi!"_

        Hindari TNT.
      courseD_maze_ramp5a: Perhatikan urutan dan lihat apakah Anda bisa menebak caranya
        sampai ke babi itu!
      courseD_maze_ramp5a_2018: Perhatikan urutan dan lihat apakah Anda bisa menebak
        caranya sampai ke babi itu!
      courseD_maze_ramp5a_2019: Hitung spasi di kisi-kisi dengan hati-hati!
      courseD_maze_ramp5b: "**Tantangan:** Navigasi labirin ini untuk membantu burung
        menemukan babi!"
      courseD_maze_ramp5b_2018: "**Tantangan:** Navigasi labirin ini untuk membantu
        burung menemukan babi!"
      courseD_maze_ramp5b_2019: "**Tantangan:** Navigasi labirin ini untuk membantu
        burung menemukan babi!"
      courseD_maze_ramp5c: Bantu burungnya sampai ke babi.
      courseD_maze_ramp5c_2018: Bantu burungnya sampai ke babi.
      courseD_maze_ramp5c_2019: Bantu Scrat menuju ke biji pohon ek.
      courseD_maze_ramp5d: Gerakan burung menuju babi.
      courseD_maze_ramp5d_2018: Gerakan burung menuju babi.
      courseD_maze_ramp5d_2019: Gerakan burung menuju babi.
      courseD_maze_ramp6: |-
        _"Tenang saja dan bantu saya menemukan babi jelek itu. Kalau tidak, saya bisa marah!"_

        Ketika ada beberapa blok yang sama dalam suatu baris, coba saja gunakan loop `repeat`.  Cara ini juga efektif dengan kode yang lebih sederhana!
      courseD_maze_ramp7: "_\"Ini saatnya marah!\"_  \n\nGunakan yang sudah Anda pelajari
        untuk menggiring burung ke babi!"
      courseD_maze_until10: Bantu zombie mencapai bunga matahari.
      courseD_maze_until10_2018: Bantu zombie mencapai bunga matahari.
      courseD_maze_until10_2019: Bantu zombie mencapai bunga matahari.
      courseD_maze_until10_predict2: Bantu zombie mencapai bunga matahari.
      courseD_maze_until10_predict2_2018: Bantu zombie mencapai bunga matahari.
      courseD_maze_until10_predict2_2019: Bantu zombie mencapai bunga matahari.
      courseD_maze_until4: |-
        _"Manusia. Aku zombie. Aku lapar. Harus... mencapai... Ke bunga matahari..."_

        Bisakah Anda menggerakkan zombie menuju bunga matahari dengan hanya menggunakan blok yang tersedia??
      courseD_maze_until4_2018: |-
        _"Manusia. Aku zombie. Aku lapar. Harus... mencapai... Ke bunga matahari..."_

        Bisakah Anda menggerakkan zombie menuju bunga matahari dengan hanya menggunakan blok yang tersedia??
      courseD_maze_until4_2019: |-
        _"Manusia. Aku zombie. Aku lapar. Harus... mencapai... Ke bunga matahari..."_

        Bisakah Anda menggerakkan zombie menuju bunga matahari dengan hanya menggunakan blok yang tersedia??
      courseD_maze_until5: Gunakan blok `if` untuk membantu zombie memutuskan kapan
        untuk belok, lalu gerakan zombie menuju bunga matahari.
      courseD_maze_until5_2018: Gunakan blok `if` untuk membantu zombie memutuskan
        kapan untuk belok, lalu gerakan zombie menuju bunga matahari.
      courseD_maze_until5_2019: Gunakan blok `if` untuk membantu zombie memutuskan
        kapan untuk belok, lalu gerakan zombie menuju bunga matahari.
      courseD_maze_until6: Bantu zombie mencapai bunga matahari.
      courseD_maze_until6_2018: Bantu zombie mencapai bunga matahari.
      courseD_maze_until6_2019: Bantu zombie mencapai bunga matahari.
      courseD_maze_until7: Bantu zombie mencapai bunga matahari.
      courseD_maze_until7_2018: Bantu zombie mencapai bunga matahari.
      courseD_maze_until7_2019: Bantu zombie mencapai bunga matahari.
      courseD_maze_until8: Bantu zombie mencapai bunga matahari.
      courseD_maze_until9: "**Tantangan:** Hindari penggigit dan bantu zombie mencapai
        bunga matahari."
      courseD_maze_until9_2018: "**Tantangan:** Hindari penggigit dan bantu zombie
        mencapai bunga matahari."
      courseD_maze_until9_2019: "**Tantangan:** Hindari penggigit dan bantu zombie
        mencapai bunga matahari."
      courseD_maze_until_challenge1: Tidak ada petunjuk, hanya tantangan. Gerakkan
        zombie menuju bunga matahari.
      courseD_playLab_cond1: "Untuk memulai permainan, Perompak Pegleg (aktor 1) harus
        dapat berkeliaran ke semua arah.   Hubungkan blok dengan event yang tepat
        untuk membuat Pegleg bergerak.  \n\n* * *\n\nBantu Pegleg mengumpulkan bendera
        untuk memecahkan puzzle ini."
      courseD_playLab_cond1_2018: "Untuk memulai permainan, Perompak Pegleg (aktor
        1) harus dapat berkeliaran ke semua arah.   Hubungkan blok dengan event yang
        tepat untuk membuat Pegleg bergerak.  \n\n* * *\n\nBantu Pegleg mengumpulkan
        bendera untuk memecahkan puzzle ini."
      courseD_playLab_cond2: "Saatnya menambah poin!  \n\nUbah kode untuk memberi
        Pegleg (aktor 1) poin ketika dia berhasil sampai ke naga (aktor 2). "
      courseD_playLab_cond2_2018: "Saatnya menambah poin!  \n\nUbah kode untuk memberi
        Pegleg (aktor 1) poin ketika dia berhasil sampai ke naga (aktor 2). "
      courseD_playLab_cond3: 'Gunakan loop `repeat forever` untuk membuat naga (aktor
        2) berubah emosinya secara acak setiap detik.  '
      courseD_playLab_cond3_2018: 'Gunakan loop `repeat forever` untuk membuat naga
        (aktor 2) berubah emosinya secara acak setiap detik.  '
      courseD_playLab_cond3a: "Saatnya menggunakan pengetahuan yang sudah kita pelajari
        tentang conditionals agar permainan ini terasa mengasyikkan. \n\nTambahkan
        kode agar ketika Pegleg sampai ke naga, dia mendapat dua poin _jika_ naganya
        senang. Jika tidak, dia hanya mendapat tambahan satu poin ke skornya."
      courseD_playLab_cond3a_2018: "Saatnya menggunakan pengetahuan yang sudah kita
        pelajari tentang conditionals agar permainan ini terasa mengasyikkan. \n\nTambahkan
        kode agar ketika Pegleg sampai ke naga, dia mendapat dua poin _jika_ naganya
        senang. Jika tidak, dia hanya mendapat tambahan satu poin ke skornya."
      courseD_playLab_cond4: |-
        Sebentar lagi permainan ini akan jadi asyik!

        Tambahkan beberapa kode agar ninja (aktor 3) mulai mengejar Pegleg tidak lama setelah permainan dimulai.  Akhiri permainan sebagai kalah jika ninja menangkapnya.
      courseD_playLab_cond4_2018: |-
        Sebentar lagi permainan ini akan jadi asyik!

        Tambahkan beberapa kode agar ninja (aktor 3) mulai mengejar Pegleg tidak lama setelah permainan dimulai.  Akhiri permainan sebagai kalah jika ninja menangkapnya.
      courseD_playLab_cond5: |-
        Sekarang kita perlu cara untuk menang.

        Tambahkan loop `repeat forever` yang terus-menerus memeriksa **jika** skor di atas 5, maka mengakhiri permainan sebagai **menang**.
      courseD_playLab_cond5_2018: |-
        Sekarang kita perlu cara untuk menang.

        Tambahkan loop `repeat forever` yang terus-menerus memeriksa **jika** skor di atas 5, maka mengakhiri permainan sebagai **menang**.
      courseD_playLab_cond6: "Wow, permainan ini sulit menangnya!\n\nAyo kita sesuaikan
        permainan ini agar terasa lebih seru.  Tantangan ini memiliki dua bagian:\n\n*
        * *\n\n1.  Perlambat ninja (aktor 3) sebelum Anda menyetelnya untuk mengejar
        perompak (aktor 1).  \n\n2.  Gunakan loop `repeat forever` untuk melihat apakah
        perompak berada di \"zona aman\" di bawah garis gurita (lebih besar daripada
        225 piksel turun). Jika iya, setel ninjanya untuk **kabur** dari perompak.
        \ Sebaliknya, setel ninjanya untuk **mengejar** perompak.  "
      courseD_playLab_cond6_2018: "Wow, permainan ini sulit dimenangkan!\n\nAyo sesuaikan
        permainan ini agar lebih menyenangkan. Tantangan ini memiliki dua bagian:\n\n*
        * *\n\n1.  Perlambat ninja (aktor 3) sebelum Anda mengaturnya untuk mengejar
        bajak laut (aktor 1).  \n\n2.  Gunakan lingkaran `ulangi selamanya` untuk
        memeriksa apakah bajak laut berada di \"zona aman\" di bawah garis gurita
        (lebih dari 225 piksel ke bawah). Jika ya, atur ninja menjadi bajak laut yang
        **kabur**. Jika tidak, atur ninja menjadi bajak laut yang **dikejar**."
      courseD_playLab_cond6a: "Kami tidak menginginkan perompak kelamaan berada di
        \"zona aman\"!  \n\nTambahkan kode pernyataan `if` di bawah ini sehingga jika
        perompak (aktor 1) berada di zona aman, program akan menunggu satu detik,
        lalu mengurangi poin sepanjang perompak bertahan di bawah garis gurita.."
      courseD_playLab_cond6a_2018: "Kami tidak menginginkan perompak kelamaan berada
        di \"zona aman\"!  \n\nTambahkan kode pernyataan `if` di bawah ini sehingga
        jika perompak (aktor 1) berada di zona aman, program akan menunggu satu detik,
        lalu mengurangi poin sepanjang perompak bertahan di bawah garis gurita.."
      courseD_playLab_condFP_2018: |-
        Sekarang, bangun permainan Anda sendiri untuk dipamerkan kepada teman-teman Anda!

        * * *

        Anda dapat:

        -   Meminta bajak laut dan ninja bekerja sama untuk mendapatkan poin dari gurita
        -   Meminta kedua gurita mengikuti bajak laut, melakukan kerusakan ganda pada ninja ketika mereka bertabrakan
        -   Meminta setiap sifat menghilang ketika disentuh ninja
        -   Menciptakan permainan Anda sendiri!
      courseD_scrat_ramp1: Untuk puzzle ini, pasang semua blok sekaligus dan klik
        "Run" untuk memulainya!
      courseD_scrat_ramp2: Pindahkan blok `pindah ke depan` tambahan keluar dari toolbox,
        lalu pasang semua blok ke `saat jalan` untuk menyelesaikan kode Anda.
      courseD_scrat_ramp3: |-
        Ada satu blok ekstra yang akan membuat Scrat crash.\
        Buanglah dengan memutuskannya dari blok lain dan membawa blok itu kembali ke toolbox.
      courseD_scrat_ramp4: Hindari es yang retak untuk menjaga Scrat aman!
      courseD_scrat_ramp5: Hindari es yang retak!
      courseD_scrat_ramp6: Tolong Scrat mencapai biji ek dengan loop!
      courseD_scrat_ramp7: Bantu Scrat menuju ke biji!
      courseD_scrat_ramp8: "**Tantangan:** Gunakan materi yang sudah dipelajari untuk
        menggiring Scrat ke akorn!"
      courseE_aboutme_1: "![](https://images.code.org/93e1c04857ff781bb5c4cc76b15ed563-image-1557179820861.png)
        _\"Halo, dunia! Nama saya Rikki, dan berikut beberapa hal yang ingin saya
        bagikan tentang diri saya!\"_\n\n**Bermain Bebas**: Rikki sedang menggunakan
        Sprite Lab untuk membuat _poster interaktif_ tentang dirinya sendiri yang
        dapat dibagikannya di web.  \n\nRikki telah memberikan izin kepada Anda untuk
        memeriksa posternya. Bahkan, Anda dapat menyunting kodenya! \n\nMainkan poster
        dan kode Rikki sebentar, lalu klik **Selesai**."
      courseE_aboutme_2: "![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png)
        _\"Rikki di sini! Saya akan membantu Anda membuat poster keren. Pertama, klik
        tab Kostum!\"_\n\n1.  Klik tab **Kostum** di kiri atas layar Anda (di sebelah
        **Kode**). \n2.  Sunting kostum awal, atau tambahkan kostum baru yang Anda
        suka. \n3.  Ubah kostum peri menjadi kostum Anda pada kode di bawah.\n4.  Klik
        **Jalankan** untuk melihat tampilan baru peri Anda!"
      courseE_aboutme_3: "![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png)
        _\"Katakan sesuatu tentang diri Anda, dan pastikan itu AMAN!\"_\n\nGunakan
        <xml><block type=\"gamelab_spriteClicked\" block-text=\"the when sprite clicked
        event block\"></block></xml> dan <xml><block type=\"gamelab_printText\" block-text=\"the
        print text block\"></block></xml> (dalam kategori blok `Dunia`) untuk berbagi
        informasi tentang diri Anda ketika peri Anda diklik! \n\n**Pastikan informasi
        yang Anda bagikan itu AMAN.**\n\n* * *\n\n#### Contoh Informasi AMAN vs TIDAK
        AMAN\n\n| AMAN            | TIDAK AMAN               |\n| ---------------
        | ------------------------ |\n| nama pertama    | nama lengkap             |\n|
        hal favorit     | alamat rumah             |\n| pendapat hormat | nomor telepon
        atau surel |"
      courseE_aboutme_4: |-
        ![](https://images.code.org/2bae4bc7c7d59fac0cd4b1370d3c4a11-image-1557179992653.png) _"Tambahkan lebih banyak peri ke poster Anda! Jangan lupa untuk memberi mereka kostum!"_

        Tambah **setidaknya dua** peri lain ke poster Anda. Berikan masing-masing kostum unik peri!
      courseE_aboutme_5: |-
        ![](https://images.code.org/0c3ec1da3493c3e10f5ec714ef1670e3-image-1557185359875.png) _"Ceritakan pada dunia lebih banyak tentang diri Anda melalui peri baru Anda!"_

        Buat informasi klise peri Anda yang lain ketika diklik. Pastikan apa pun yang Anda bagikan itu AMAN!
      courseE_aboutme_6: "![](https://images.code.org/4e9c4465463d0c061b2b47b23d5817ca-image-1557185863600.png)
        _\"Wow! Poster Anda hampir sama kerennya dengan milik saya! Hampir. \U0001F609\"_\n\nDunia
        siapa ini? Itu milikmu! \n\nJadi, teruskan! Berikut beberapa ide untuk menjadikan
        poster Anda lebih baik:\n\n-   Tambahkan latar belakang! Pilih latar belakang
        yang sesuai dengan poster Anda.\n-   Tambahkan perilaku! Buat setiap peri
        Anda bereaksi berbeda ketika diklik.\n-   Tambahkan lebih banyak peristiwa!
        Gunakan blok lain dalam kategori blok `Peristiwa`."
      courseE_artist_concept1: "Buat ulang gambar ini. \n\n-   Heksagon memiliki sisi
        50 piksel\n-   Jarak di antara heksagon adalah 100 piksel\n-   Tebal pena
        heksagon adalah 1 piksel, 4 piksel, dan 8 piksel."
      courseE_artist_concept1_2018: "Buat ulang gambar ini. \n\n-   Heksagon memiliki
        sisi 50 piksel\n-   Jarak di antara heksagon adalah 100 piksel\n-   Tebal
        pena heksagon adalah 1 piksel, 4 piksel, dan 8 piksel."
      courseE_artist_concept4: "Buat lagi gambar ini. \n\nSetiap persegi empat memiliki
        panjang sisi **20 piksel** dan ada **15 persegi empat per baris**."
      courseE_artist_concept4_2018: "Buat lagi gambar ini. \n\nSetiap persegi empat
        memiliki panjang sisi **20 piksel** dan ada **15 persegi empat per baris**."
      courseE_artist_concept_challenge1: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png" width="200px"/>

        Sekarang, ini tantangannya!

        Berikut adalah desain yang hanya menggunakan blok yang sudah Anda lihat. Bisakah Anda mengira-ngira cara membuatnya lagi? Jangan ragu-ragu melakukan uji coba. Anda tidak harus menggambarnya sempurna untuk pertama kali.
      courseE_artist_concept_challenge1_2018: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png" width="200px"/>

        Sekarang, ini tantangannya!

        Berikut adalah desain yang hanya menggunakan blok yang sudah Anda lihat. Bisakah Anda mengira-ngira cara membuatnya lagi? Jangan ragu-ragu melakukan uji coba. Anda tidak harus menggambarnya sempurna untuk pertama kali.
      courseE_artist_concept_challenge2: Buat lima desain kincir menggunakan code
        di bawah ini.
      courseE_artist_concept_challenge2_2018: Buat lima desain kincir menggunakan
        code di bawah ini.
      courseE_artist_functions1: |-
        _"Saya zombi si artis. Saya suka menggambar!"_

        Bantu zombi menggambar kacamata menggunakan kotak bersisi 100 piksel.\
        Panjang jembatan antar kacamata adalah 75 piksel.
      courseE_artist_functions10: |-
        Kali ini, gunakan garis 8 heksagon dengan sisi 25 piksel.

        -   Untuk membuat masing-masing heksagon, ulangi sisinya 6 kali, dengan membelok 60 derajat.
        -   Lompat 25 piksel di antara masing-masing heksagon.
        -   Untuk menggambar berlian, Anda harus belok bergantian antara 60 derajat dan 120 derajat.
      courseE_artist_functions10_2018: |-
        Kali ini, gunakan garis 8 heksagon dengan sisi 25 piksel.

        -   Untuk membuat masing-masing heksagon, ulangi sisinya 6 kali, dengan membelok 60 derajat.
        -   Lompat 25 piksel di antara masing-masing heksagon.
        -   Untuk menggambar berlian, Anda harus belok bergantian antara 60 derajat dan 120 derajat.
      courseE_artist_functions10_2019: |-
        Kali ini, gunakan garis 8 heksagon dengan sisi 25 piksel.

        -   Untuk membuat masing-masing heksagon, ulangi sisinya 6 kali, dengan membelok 60 derajat.
        -   Lompat 25 piksel di antara masing-masing heksagon.
        -   Untuk menggambar berlian, Anda harus belok bergantian antara 60 derajat dan 120 derajat.
      courseE_artist_functions1_copy: |-
        _"Saya zombi si artis. Saya suka menggambar!"_

        Bantu zombi menggambar kacamata menggunakan kotak bersisi 100 piksel.\
        Panjang jembatan antar kacamata adalah 75 piksel.
      courseE_artist_functions2: "Function memudahkan Anda menentukan blok baru! \n\nKita
        sudah memindahkan blok yang diperlukan untuk menggambar persegi empat menjadi
        function `menggambar persegi empat`. Kali ini, gunakan function `menggambar
        persegi empat` untuk membuat kacamata. \n\n* * *\n\nPersegi empat itu berjarak
        75 piksel."
      courseE_artist_functions2_2018: "Ini adalah fungsi yang disebut `menggambar
        kotak`. Gunakan untuk menyelesaikan gambar ini. \n\n* * *\n\nKotak adalah
        75 piksel terpisah."
      courseE_artist_functions2_2019: "Ini adalah fungsi yang disebut `menggambar
        kotak`. Gunakan untuk menyelesaikan gambar ini. \n\n* * *\n\nKotak adalah
        75 piksel terpisah."
      courseE_artist_functions2_copy: "Function memudahkan Anda menentukan blok baru!
        \n\nKita sudah memindahkan blok yang diperlukan untuk menggambar persegi empat
        menjadi function `menggambar persegi empat`. Kali ini, gunakan function `menggambar
        persegi empat` untuk membuat kacamata. \n\n* * *\n\nPersegi empat itu berjarak
        75 piksel."
      courseE_artist_functions3: "Kami akan segera kembali ke fungsi. Ayo istirahat
        sambil praktik membuat bintang ini. \n\nAnda dapat membuat gambar ini dengan
        menambahkan blok ulangi."
      courseE_artist_functions3_2018: |-
        Buat fungsi yang akan membuat bintang ini.

        * * *

        -   Setiap lengan bintang memiliki panjang 25 piksel
        -   Anda perlu memutar 45 derajat untuk mendapatkan 8 lengan
        -   Tidak apa-apa untuk bergerak maju dan mundur melalui lengan yang sama
      courseE_artist_functions3_2019: |-
        Buat fungsi yang akan membuat bintang ini.

        * * *

        -   Setiap lengan bintang memiliki panjang 25 piksel
        -   Anda perlu memutar 45 derajat untuk mendapatkan 8 lengan
        -   Tidak apa-apa untuk bergerak maju dan mundur melalui lengan yang sama
      courseE_artist_functions3_copy: "Kami akan segera kembali ke fungsi. Ayo istirahat
        sambil praktik membuat bintang ini. \n\nAnda dapat membuat gambar ini dengan
        menambahkan blok ulangi."
      courseE_artist_functions4: |-
        Sekarang Anda dapat menggambar bintang, coba gambar empat bintang!

        -   Panjang setiap sisi bintang adalah 25 piksel
        -   Belok 45 derajat di antara sisi
        -   Lompat 100 piksel di antara setiap bintang
      courseE_artist_functions4_copy: |-
        Sekarang Anda dapat menggambar bintang, coba gambar empat bintang!

        -   Panjang setiap sisi bintang adalah 25 piksel
        -   Belok 45 derajat di antara sisi
        -   Lompat 100 piksel di antara setiap bintang
      courseE_artist_functions5: |-
        Kapankah menggambar tiga bintang lebih sulit daripada menggambar empat bintang? Kapan Anda juga harus melompati bulan!

        Cukup gambar tiga bintang untuk menyelesaikan puzzle ini.
      courseE_artist_functions5_2018: |-
        Kapan menggambar tiga bintang lebih sulit daripada menggambar empat bintang? Sementara Anda juga harus melompati bulan!

        Gambar hanya tiga bintang untuk menyelesaikan teka-teki ini.

        * * *

        -   Lompatan antara bintang pertama dan kedua adalah **200** piksel
        -   Lompatan antara bintang kedua dan bintang ketiga adalah **100** piksel
      courseE_artist_functions5_2019: |-
        Kapan menggambar tiga bintang lebih sulit daripada menggambar empat bintang? Sementara Anda juga harus melompati bulan!

        Gambar hanya tiga bintang untuk menyelesaikan teka-teki ini.

        * * *

        -   Lompatan antara bintang pertama dan kedua adalah **200** piksel
        -   Lompatan antara bintang kedua dan bintang ketiga adalah **100** piksel
      courseE_artist_functions5_copy: |-
        Kapankah menggambar tiga bintang lebih sulit daripada menggambar empat bintang? Kapan Anda juga harus melompati bulan!

        Cukup gambar tiga bintang untuk menyelesaikan puzzle ini.
      courseE_artist_functions6: "Anda hebat! \n\nBuat jendela ini dengan menggambar
        persegi empat, lalu membelok 90 derajat sebelum menggambar yang lain, dan
        seterusnya."
      courseE_artist_functions7: "Ayo ambil kode untuk jendela dan tambahkan ke fungsi
        `draw a window`. Sekarang kita dapat memanggil fungsi ini setiap kali kita
        perlu menggambar jendela tanpa harus menulis kodenya lagi. \n\n![](https://images.code.org/615a5e93abdaffeed438a976a56fc1f5-image-1497998528859.gif)\n\nCoba
        pecahkan puzzle ini dengan membuat `draw a window` dan memanggilnya lima kali.
        Awasi pintu!\n\n-   Jarak jendela atas adalah 50 piksel satu sama lain.  \n-
        \  Jarak jendela bawah adalah 100 piksel di bawah deretan jendela atas."
      courseE_artist_functions7_2018: "Menggambar semua jendela ini satu per satu
        akan menyebalkan!  \n\nCoba pecahkan teka-teki ini dengan membuat `gambar
        jendela` dan menyebutnya lima kali. Hati-hati dengan pintu!\n\n* * *\n\n-
        \  Setiap jendela terdiri atas empat kotak **25** piksel.\n-   Jendela atas
        adalah lompatan **100** piksel satu sama lain.  \n-   Jendela bawah adalah
        lompatan **150** piksel di bawah pengaturan atas."
      courseE_artist_functions7_2019: "Menggambar semua jendela ini satu per satu
        akan menyebalkan!  \n\nCoba pecahkan teka-teki ini dengan membuat `gambar
        jendela` dan menyebutnya lima kali. Hati-hati dengan pintu!\n\n* * *\n\n-
        \  Setiap jendela terdiri atas empat kotak **25** piksel.\n-   Jendela atas
        adalah lompatan **100** piksel satu sama lain.  \n-   Jendela bawah adalah
        lompatan **150** piksel di bawah pengaturan atas."
      courseE_artist_functions8: |-
        **Tantangan:** Tahukah Anda bahwa Anda dapat memanggil fungsi dari _dalam_ fungsi lain?!

        Buat fungsi sebanyak-banyaknya yang Anda rasa diperlukan untuk membuat gambar persegi empat 50 piksel ini.
      courseE_artist_functions8a_2018: |-
        _"Fungsinya mudah!"_

        Kita akan membangun sesuatu yang mewah! Mulai dengan membuat fungsi untuk kotak ini.
      courseE_artist_functions8a_2019: |-
        _"Fungsinya mudah!"_

        Kita akan membangun sesuatu yang mewah! Mulai dengan membuat fungsi untuk kotak ini.
      courseE_artist_functions8b_2018: |-
        _"Zombie pusing."_

        Sebut fungsi `gambar kotak` dari dalam fungsi `gambar garis kotak` Anda untuk membuatnya lebih mudah!

        * * *

        -   Kotaknya adalah _50_ piksel terpisah.
      courseE_artist_functions8b_2019: |-
        _"Zombie pusing."_

        Sebut fungsi `gambar kotak` dari dalam fungsi `gambar garis kotak` Anda untuk membuatnya lebih mudah!

        * * *

        -   Kotaknya adalah _50_ piksel terpisah.
      courseE_artist_functions8c_2018: Tambahkan satu fungsi lagi yang membuat tumpukan
        kotak terhuyung ini menggunakan fungsi `gambar garis kotak`.
      courseE_artist_functions8c_2019: Tambahkan satu fungsi lagi yang membuat tumpukan
        kotak terhuyung ini menggunakan fungsi `gambar garis kotak`.
      courseE_artist_functions9: "Buat gambar ini menggunakan blok-blok terbatas yang
        tersedia. \n\n-   Setiap segitiga memiliki sisi **50 piksel**  \n-   Untuk
        menggambar berlian, Anda harus bergantian belok antara **60 derajat dan 120
        derajat**."
      courseE_artist_functions9_2018: "**Tantangan:** Buat gambar ini hanya dengan
        menggunakan blok yang disediakan. \n\n-   Setiap segitiga memiliki sisi **50
        piksel**  \n-   Untuk menggambar berlian, Anda perlu bergantian antara memutar
        **60 derajat dan 120 derajat**."
      courseE_artist_functions9_2019: "**Tantangan:** Buat gambar ini hanya dengan
        menggunakan blok yang disediakan. \n\n-   Setiap segitiga memiliki sisi **50
        piksel**  \n-   Untuk menggambar berlian, Anda perlu bergantian antara memutar
        **60 derajat dan 120 derajat**."
      courseE_artist_functionsProj_2018: "**Inspirasi:** Gunakan yang telah Anda pelajari
        untuk membuat apa pun yang Anda inginkan!  \n\nDapatkah Anda membuat sesuatu
        seperti kincir ini?"
      courseE_artist_functionsProj_2019: "**Inspirasi:** Gunakan yang telah Anda pelajari
        untuk membuat apa pun yang Anda inginkan!  \n\nDapatkah Anda membuat sesuatu
        seperti kincir ini?"
      courseE_artist_functions_challenge1: Setelah menetapkan fungsi, Anda dapat memanggilnya
        berkali-kali - kapan pun dan di mana pun Anda inginkan! Coba kode ini untuk
        mengetahui cara kerjanya, lalu ubahlah untuk membuat desain sendiri yang memukau!
      courseE_artist_functions_challenge1_2018: Setelah menetapkan fungsi, Anda dapat
        memanggilnya berkali-kali - kapan pun dan di mana pun Anda inginkan! Coba
        kode ini untuk mengetahui cara kerjanya, lalu ubahlah untuk membuat desain
        sendiri yang memukau!
      courseE_artist_functions_challenge1_2019: Setelah menetapkan fungsi, Anda dapat
        memanggilnya berkali-kali - kapan pun dan di mana pun Anda inginkan! Coba
        kode ini untuk mengetahui cara kerjanya, lalu ubahlah untuk membuat desain
        sendiri yang memukau!
      courseE_artist_functions_challenge2: |-
        Anda tidak hanya dapat melompat ke beberapa lokasi yang sudah ditentukan, seperti pojok kanvas, Anda juga dapat menggunakan perintah `jump to` untuk sampai di sembarang tempat yang Anda sukai! Coba kode ini untuk mengetahui cara kerjanya, lalu buat sendiri programnya!

        <xml>
          <block type="jump_to_xy">
            <title name="XPOS">???</title>
            <title name="YPOS">???</title>
            </block></xml>
      courseE_artist_functions_challenge2_2018: |-
        Anda tidak hanya dapat melompat ke beberapa lokasi yang sudah ditentukan, seperti pojok kanvas, Anda juga dapat menggunakan perintah `jump to` untuk sampai di sembarang tempat yang Anda sukai! Coba kode ini untuk mengetahui cara kerjanya, lalu buat sendiri programnya!

        <xml>
          <block type="jump_to_xy">
            <title name="XPOS">???</title>
            <title name="YPOS">???</title>
            </block></xml>
      courseE_artist_functions_challenge2_2019: |-
        Anda tidak hanya dapat melompat ke beberapa lokasi yang sudah ditentukan, seperti pojok kanvas, Anda juga dapat menggunakan perintah `jump to` untuk sampai di sembarang tempat yang Anda sukai! Coba kode ini untuk mengetahui cara kerjanya, lalu buat sendiri programnya!

        <xml>
          <block type="jump_to_xy">
            <title name="XPOS">???</title>
            <title name="YPOS">???</title>
            </block></xml>
      courseE_artist_functions_predict1: 'Berikut adalah puzzle yang menggunakan function
        yang sudah kita tentukan. '
      courseE_artist_functions_predict1_2018: 'Berikut adalah puzzle yang menggunakan
        function yang sudah kita tentukan. '
      courseE_artist_functions_predict1_2019: 'Berikut adalah puzzle yang menggunakan
        function yang sudah kita tentukan. '
      courseE_artist_functions_predict1_copy: 'Berikut adalah puzzle yang menggunakan
        function yang sudah kita tentukan. '
      courseE_artist_ramp8: |-
        Sip!  Sekarang ayo gunakan loop `repeat` untuk membuat persegi empat menggunakan Artis!  Blok untuk artis sedikit berbeda dengan puzzle lain, tetapi idenya tetap sama.

        * * *

        ##### Panjang setiap sisi persegi empat adalah 200 piksel, dan Anda hanya perlu belok 90 derajat untuk membuat setiap sudut.
      courseE_artist_ramp8_2: |-
        Sip!  Sekarang ayo gunakan loop `repeat` untuk membuat persegi empat menggunakan Artis!  Blok untuk artis sedikit berbeda dengan puzzle lain, tetapi idenya tetap sama.

        * * *

        ##### Panjang setiap sisi persegi empat adalah 200 piksel, dan Anda hanya perlu belok 90 derajat untuk membuat setiap sudut.
      courseE_artist_ramp9: |-
        Gunakan materi yang sudah dipelajari untuk menggambar segitiga ini.

        * * *

        ##### Panjang setiap sisi adalah 100 piksel. Anda harus belok 120 derajat di setiap sudut.
      courseE_artist_ramp9_2: |-
        Gunakan materi yang sudah dipelajari untuk menggambar segitiga ini.

        * * *

        ##### Panjang setiap sisi adalah 100 piksel. Anda harus belok 120 derajat di setiap sudut.
      courseE_bee_concept1: "_\"Bisakah Anda memercayai semua bunga ini?\"_\n\nKumpulkan
        semua nektar dari setiap bunga. "
      courseE_bee_concept1_2018: "_\"Bisakah Anda memercayai semua bunga ini?\"_\n\nKumpulkan
        semua nektar dari setiap bunga. "
      courseE_bee_concept2: "Bantu lebah membuat semua madu. \n\nAnda hanya dapat
        membuat madu di sarang, tetapi Anda dapat memeriksa setiap tempat untuk melihat
        apakah ada sarang madu."
      courseE_bee_concept2_2018: "Bantu lebah membuat semua madu. \n\nAnda hanya dapat
        membuat madu di sarang, tetapi Anda dapat memeriksa setiap tempat untuk melihat
        apakah ada sarang madu."
      courseE_bee_concept5: "Bisakah Anda membantu lebah mengumpulkan nektar dari
        bunga? \n\nAnda hanya dapat mengumpulkan nektar dari bunga, tetapi Anda dapat
        memeriksa setiap kotak untuk melihat apakah ada bunga."
      courseE_bee_concept5_2018: "Bisakah Anda membantu lebah mengumpulkan nektar
        dari bunga? \n\nAnda hanya dapat mengumpulkan nektar dari bunga, tetapi Anda
        dapat memeriksa setiap kotak untuk melihat apakah ada bunga."
      courseE_bee_functions10: "_\"Tunjukkan MADU ke saya!\"_\n\nPecahkan puzzle ini
        dengan membuat fungsi yang menyebabkan lebah: \n\n-   belok ke arah cabang
        jalur\n-   bergerak maju\n-   membuat semua madu\n-   kembali ke jalur utama
        \n-   balik ke arah semula"
      courseE_bee_functions2: "Fungsi adalah blok kode yang melakukan suatu tugas.
        \ \\\\ r \n\\\\ r \nGunakan `mendapatkan 2 nectar` fungsi untuk mengumpulkan
        nektar dari bunga masing-masing."
      courseE_bee_functions3: Buat fungsi `get 5` untuk digunakan di puzzle ini.
      courseE_bee_functions4: "Fungsi `move and get nectar` membelokkan lebah, mengumpulkan
        nektar, dan kemudian mengembalikan lebah ke tempat semula.  \n\nGunakan fungsi
        `move and get nectar` untuk mengumpulkan semua nektar."
      courseE_bee_functions8: "**Tantangan:** Bunga-bunga ini dapat memiliki nektar
        dalam jumlah yang berbeda setiap kali Anda menjalankan puzzle. \n\nBuat fungsi
        yang mengumpulkan semua nektar dari setiap bunga."
      courseE_bee_functions_challenge1: Anda sendirian dalam tantangan ini.  Ini bisa
        "jadi" lebih sulit daripada yang terlihat mata!
      courseE_farmer_functions1: |-
        _"Apakah kita sudah bertemu sebelumnya? Saya seorang pemanen!"_

        Bantu pemanen tiba di labu dan mengambilnya.
      courseE_farmer_functions10a1_2018: "**Tantangan:** Gunakan semua yang telah
        Anda pelajari sejauh ini untuk menyelesaikan teka-teki ini dalam 19 blok atau
        kurang!"
      courseE_farmer_functions10a1_2019: "**Tantangan:** Gunakan semua yang telah
        Anda pelajari sejauh ini untuk menyelesaikan teka-teki ini dalam 19 blok atau
        kurang!"
      courseE_farmer_functions10b: Gunakan fungsi yang baru dua kali untuk memecahkan
        puzzle ini.
      courseE_farmer_functions11_predict: Tebak fungsi mana yang harus digunakan dan
        mana yang harus dihapus, lalu pecahkan puzzle ini!
      courseE_farmer_functions11_predict_2018: Tebak fungsi mana yang harus digunakan
        dan mana yang harus dihapus, lalu pecahkan puzzle ini!
      courseE_farmer_functions11_predict_2019: Tebak fungsi mana yang harus digunakan
        dan mana yang harus dihapus, lalu pecahkan puzzle ini!
      courseE_farmer_functions13_2018: |-
        Pecahkan teka-teki ini dalam 23 blok atau kurang.

        * * *

        ##### Setiap tunas akan menghasilkan _satu_ jagung atau tidak sama sekali. Untuk menemukan solusi terbaik, Anda perlu menyunting fungsi secara langsung.
      courseE_farmer_functions13_2019: |-
        Pecahkan teka-teki ini dalam 23 blok atau kurang.

        * * *

        ##### Setiap tunas akan menghasilkan _satu_ jagung atau tidak sama sekali. Untuk menemukan solusi terbaik, Anda perlu menyunting fungsi secara langsung.
      courseE_farmer_functions1_2018: |-
        _"Apakah kita sudah bertemu sebelumnya? Saya seorang pemanen!"_

        Bantu pemanen tiba di labu dan mengambilnya.
      courseE_farmer_functions1_2019: |-
        _"Apakah kita sudah bertemu sebelumnya? Saya seorang pemanen!"_

        Bantu pemanen tiba di labu dan mengambilnya.
      courseE_farmer_functions1a: |-
        _"Wow, sayuran bermunculan di mana-mana!"_

        Sekarang bantu pemanen mengambil semua jagung di sepanjang jalan menuju labu di ujung.

        * * *

        ##### Catatan: Setiap persegi empat di jalur yang menuju labu bisa berisi _satu_ jagung atau kosong.  Anda perlu menggunakan pernyataan `jika` untuk memeriksa ada tidaknya jagung sebelum mencoba mengambilnya!
      courseE_farmer_functions1a_2018: |-
        \_"Oooh, sayuran muncul di mana-mana!" \_

        Sekarang, bantu pemanen mengambil semua jagung dalam perjalanan menuju labu di akhir.

        * * *

        ##### Catatan: Setiap kotak dalam perjalanan menuju labu memiliki **1** jagung atau tidak sama sekali. Gunakan fungsi `periksa jagung` yang disediakan untuk memastikan Anda mendapatkan semuanya.
      courseE_farmer_functions1a_2019: |-
        \_"Oooh, sayuran muncul di mana-mana!" \_

        Sekarang, bantu pemanen mengambil semua jagung dalam perjalanan menuju labu di akhir.

        * * *

        ##### Catatan: Setiap kotak dalam perjalanan menuju labu memiliki **1** jagung atau tidak sama sekali. Gunakan fungsi `periksa jagung` yang disediakan untuk memastikan Anda mendapatkan semuanya.
      courseE_farmer_functions2b: |-
        Bantu pemanen mengambil jagung dan labu.

        * * *

        ##### Setiap tunas akan menumbuhkan _satu_ jagung atau kosong.
      courseE_farmer_functions2b_2018: |-
        Gunakan fungsi ini untuk membantu pemanen mengambil jagung dan labu.

        * * *

        ##### Setiap tunas akan menghasilkan _satu_ jagung atau tidak sama sekali.
      courseE_farmer_functions2b_2019: |-
        Gunakan fungsi ini untuk membantu pemanen mengambil jagung dan labu.

        * * *

        ##### Setiap tunas akan menghasilkan _satu_ jagung atau tidak sama sekali.
      courseE_farmer_functions2ba: "_\"Saya merasa begitu berguna!\"_\n\nApakah Anda
        memperhatikan adanya kode berulang di dalam puzzle terakhir?  Tidak ada gunanya
        memasukkan semua kode ke dalam loop, tetapi kita **dapat** menggunakan fungsi.
        \ \n\nUntuk puzzle ini, kami telah memindahkan kode berulang ke dalam fungsi
        yang disebut `corn and pumpkin`. Sekarang yang perlu Anda lakukan adalah meletakkan
        **blok panggilan fungsi** `jagung dan labu` yang kecil ke dalam kode di lokasi
        Anda membutuhkannya.\n\n* * *\n\n##### Setiap tunas akan menumbuhkan _satu_
        jagung atau kosong."
      courseE_farmer_functions2ba_2018: |-
        \_ "Saya merasa sangat berfungsi!" \_

        Sekarang ada beberapa labu di setiap tambalan! Perhatikan baik-baik definisi fungsi di bawah untuk mengetahui cara menggunakannya masing-masing.

        * * *

        ##### Setiap tunas akan menghasilkan _satu_ jagung atau tidak sama sekali.
      courseE_farmer_functions2ba_2019: |-
        \_ "Saya merasa sangat berfungsi!" \_

        Sekarang ada beberapa labu di setiap tambalan! Perhatikan baik-baik definisi fungsi di bawah untuk mengetahui cara menggunakannya masing-masing.

        * * *

        ##### Setiap tunas akan menghasilkan _satu_ jagung atau tidak sama sekali.
      courseE_farmer_functions3c: "Sekarang, isi sendiri fungsinya dengan menarik
        blok dari kode lalu meletakkannya ke dalam **definisi fungsi**.  \n\nJangan
        lupa menambahkan blok **panggilan fungsi** kecil untuk menggunakan fungsi
        tersebut di dalam program ketika Anda selesai."
      courseE_farmer_functions3c1_2018: |-
        Apakah Anda memperhatikan bahwa ada banyak kode berulang dalam teka-teki terakhir itu?  Kita dapat menghemat ruang dengan menyebut kode itu `ambil di sepanjang jalan` dan menggunakan fungsi baru untuk menyebut fungsi lain!

        Gunakan `ambil di sepanjang jalan` untuk memecahkan teka-teki ini lagi menggunakan blok yang lebih sedikit.
      courseE_farmer_functions3c1_2019: |-
        Apakah Anda memperhatikan bahwa ada banyak kode berulang dalam teka-teki terakhir itu?  Kita dapat menghemat ruang dengan menyebut kode itu `ambil di sepanjang jalan` dan menggunakan fungsi baru untuk menyebut fungsi lain!

        Gunakan `ambil di sepanjang jalan` untuk memecahkan teka-teki ini lagi menggunakan blok yang lebih sedikit.
      courseE_farmer_functions3c_2018: Bagus!  Coba fungsi Anda di jalur yang lebih
        panjang.
      courseE_farmer_functions3c_2019: Bagus!  Coba fungsi Anda di jalur yang lebih
        panjang.
      courseE_farmer_functions4b: Gunakan fungsi baru Anda untuk memecahkan teka-teki
        ini.
      courseE_farmer_functions5c: Fungsi Anda akan bermanfaat di sini.
      courseE_farmer_functions6c: |-
        _"Selada, ambil semua hasil panen!"_

        Sekarang tunas bisa berupa jagung **atau** selada.  Apakah yang Anda perlukan untuk menambahkan program ini agar bisa memeriksa setiap tunas sebelum Anda ambil?

        * * *

        ##### Catatan: Setiap tunas akan bisa berubah menjadi **satu** jagung atau **satu** selada.
      courseE_farmer_functions7a1_2018: |-
        _"Fungsi **selada** melakukan lebih banyak hal dengan lebih sedikit bekerja!"_

        Buat fungsi mengirim pemanen ke jalur kotak untuk memilih satu kepala selada dari tengah setiap baris.
      courseE_farmer_functions7a1_2019: |-
        _"Fungsi **selada** melakukan lebih banyak hal dengan lebih sedikit bekerja!"_

        Buat fungsi mengirim pemanen ke jalur kotak untuk memilih satu kepala selada dari tengah setiap baris.
      courseE_farmer_functions7b: "_\"Panenan ini membikin TAKJUB!\"_\n\nBantu pemanen
        menemukan jalan di jalur yang membingungkan ini dan menuju labu dengan membelok
        **kiri** di jagung dan **kanan** di selada.  \n\n_(Jangan lupa mengumpulkan
        semua hasil panen di sepanjang jalan!)_"
      courseE_farmer_functions8a1_2018: Coba tulis fungsi Anda lagi. Apakah masih
        bermanfaat? Bagaimana Anda membuatnya berfungsi untuk teka-teki ini?
      courseE_farmer_functions8a1_2019: Coba tulis fungsi Anda lagi. Apakah masih
        bermanfaat? Bagaimana Anda membuatnya berfungsi untuk teka-teki ini?
      courseE_farmer_functions8b: "**Tantangan:** Tidak semua pojok ditandai dalam
        labirin ini, artinya Anda harus menggunakan kode navigasi lebih dari sekali
        agar bisa sampai di tujuan yang diinginkan.  \n\nBisakah Anda menebak apa
        yang perlu dilakukan?"
      courseE_farmer_functions9a1_2018: |-
        **Teka-teki ini MENAKJUBKAN!**

        Apakah fungsi Anda masih bermanfaat untuk teka-teki ini?
      courseE_farmer_functions9a1_2019: |-
        **Teka-teki ini MENAKJUBKAN!**

        Apakah fungsi Anda masih bermanfaat untuk teka-teki ini?
      courseE_farmer_functions9b: Perhatikan puzzle ini. Bisakah Anda menebak polanya?
      courseE_farmer_ramp11a: "Astaga!  Tumpukan ini begitu besar sehingga sulit ditebak
        berapa banyak kotoran di dalamnya.  \n\n* * *\n\nKami sudah menambahkan blok
        baru yang disebut blok `while there is a pile` ke toolbox.  Gunakan blok ini
        untuk menghilangkan kotoran hanya ketika masih ada kotoran yang bisa disekop! "
      courseE_farmer_ramp11a_2018: "Astaga!  Tumpukan ini begitu besar sehingga sulit
        ditebak berapa banyak kotoran di dalamnya.  \n\n* * *\n\nKami sudah menambahkan
        blok baru yang disebut blok `while there is a pile` ke toolbox.  Gunakan blok
        ini untuk menghilangkan kotoran hanya ketika masih ada kotoran yang bisa disekop! "
      courseE_farmer_ramp11a_2019: "Astaga!  Tumpukan ini begitu besar sehingga sulit
        ditebak berapa banyak kotoran di dalamnya.  \n\n* * *\n\nKami sudah menambahkan
        blok baru yang disebut blok `while there is a pile` ke toolbox.  Gunakan blok
        ini untuk menghilangkan kotoran hanya ketika masih ada kotoran yang bisa disekop! "
      courseE_farmer_ramp11b: Ayo kita coba lagi, tetapi dengan lebih banyak tumpukan!
      courseE_farmer_ramp11b_2018: Ayo kita coba lagi, tetapi dengan lebih banyak
        tumpukan!
      courseE_farmer_ramp11b_2019: Ayo kita coba lagi, tetapi dengan lebih banyak
        tumpukan!
      courseE_farmer_ramp12_forswap: Ambil semua selada.
      courseE_farmer_ramp12_forswap_2018: Ambil semua selada.
      courseE_farmer_ramp12_forswap_2019: Ambil semua selada.
      courseE_farmer_ramp12b: Sekarang, pemanen harus mengambil semua selada. Gunakan
        `sementara ada selada` di dalam lingkaran `ulangi` untuk mendapatkan semuanya!
      courseE_farmer_ramp12b_2018: Sekarang, pemanen harus mengambil semua selada.
        Gunakan `sementara ada selada` di dalam lingkaran `ulangi` untuk mendapatkan
        semuanya!
      courseE_farmer_ramp12b_2019: Sekarang, pemanen harus mengambil semua selada.
        Gunakan `sementara ada selada` di dalam lingkaran `ulangi` untuk mendapatkan
        semuanya!
      courseE_farmer_ramp12c: "Kini selada hanya ada di ujung jalur.\\\nTelusuri jalur
        **hingga** Anda sampai di depan selada, lalu lanjutkan mengambilnya **selagi**
        masih ada yang tersisa.  "
      courseE_farmer_ramp12c_2018: "Kini selada hanya ada di ujung jalur.\\\nTelusuri
        jalur **hingga** Anda sampai di depan selada, lalu lanjutkan mengambilnya
        **selagi** masih ada yang tersisa.  "
      courseE_farmer_ramp12c_2019: "Kini selada hanya ada di ujung jalur.\\\nTelusuri
        jalur **hingga** Anda sampai di depan selada, lalu lanjutkan mengambilnya
        **selagi** masih ada yang tersisa.  "
      courseE_farmer_ramp12d: "Selada tersebar rata di seluruh ladang.\\\nTelusuri
        setiap jalur **hingga** Anda sampai di depan selada, lalu lanjutkan mengambilnya
        **selagi** masih ada yang tersisa.  "
      courseE_farmer_ramp12d_2018: "Selada tersebar rata di seluruh ladang.\\\nTelusuri
        setiap jalur **hingga** Anda sampai di depan selada, lalu lanjutkan mengambilnya
        **selagi** masih ada yang tersisa.  "
      courseE_farmer_ramp12d_2019: "Selada tersebar rata di seluruh ladang.\\\nTelusuri
        setiap jalur **hingga** Anda sampai di depan selada, lalu lanjutkan mengambilnya
        **selagi** masih ada yang tersisa.  "
      courseE_farmer_ramp12e: "Selada tersebar rata di seluruh ladang.\\\nTelusuri
        setiap jalur **hingga** Anda sampai di depan selada, lalu lanjutkan mengambilnya
        **selagi** masih ada yang tersisa.  "
      courseE_farmer_ramp12e_2018: "Selada tersebar rata di seluruh ladang.\\\nTelusuri
        setiap jalur **hingga** Anda sampai di depan selada, lalu lanjutkan mengambilnya
        **selagi** masih ada yang tersisa.  "
      courseE_farmer_ramp12e_2019: "Selada tersebar rata di seluruh ladang.\\\nTelusuri
        setiap jalur **hingga** Anda sampai di depan selada, lalu lanjutkan mengambilnya
        **selagi** masih ada yang tersisa.  "
      courseE_farmer_ramp12f: "**Tantangan**: Satu-satunya cara untuk mendapatkan
        semua tanaman adalah untuk bergerak maju sampai Anda mendapatkan selada, lalu
        belok kiri **jika** ada jalan ke kiri. Kalau tidak, belok kanan."
      courseE_farmer_ramp12f_2018: "**Tantangan**: Satu-satunya cara untuk mendapatkan
        semua tanaman adalah untuk bergerak maju sampai Anda mendapatkan selada, lalu
        belok kiri **jika** ada jalan ke kiri. Kalau tidak, belok kanan."
      courseE_farmer_ramp12f_2019: "**Tantangan**: Satu-satunya cara untuk mendapatkan
        semua tanaman adalah untuk bergerak maju sampai Anda mendapatkan selada, lalu
        belok kiri **jika** ada jalan ke kiri. Kalau tidak, belok kanan."
      courseE_farmer_ramp12g: Majulah hingga Anda tiba di selada, lalu belok kiri
        **jika** ada jalur ke kiri. Sebaliknya, belok kanan.
      courseE_farmer_ramp12g_2018: Majulah hingga Anda tiba di selada, lalu belok
        kiri **jika** ada jalur ke kiri. Sebaliknya, belok kanan.
      courseE_farmer_ramp12g_2019: Majulah hingga Anda tiba di selada, lalu belok
        kiri **jika** ada jalur ke kiri. Sebaliknya, belok kanan.
      courseE_playLab_challenge1: "_**Tupai** ketakutan ketika tahu **dinosaurus**
        telah mendatangi kota! Bisakah **ksatria** pemberani menenangkan semuanya
        agar tidak panik?_\n\nAturan:\n\n1.  _Menyentuh tupai memberi Anda poin._\n2.
        \ _Menyentuh dinosaurus mengurangi banyak poin._\n\nIni adalah jenis permainan
        lain yang sudah dimulai untuk Anda! Mainkan untuk mengetahui cara kerjanya.
        \n\nHarus terjadi sesuatu ketika Anda mendapat cukup poin atau ketika Anda
        kehabisan poin. Tambahkan kode tertentu ke fungsi `win game` dan `lose game`
        untuk membuat permainannya berjalan semestinya. \nKlik tips untuk mendapatkan
        ide!"
      courseE_playLab_scaffold1: |-
        Sungguh menakjubkan betapa banyaknya pelajaran yang sudah Anda petik! Ayo buat permainan langkah demi langkah.

        Menggunakan blok baru di dalam toolbox, pilih latar belakang baru, lalu pilih aktor dalam permainan Anda.
      courseE_playLab_scaffold2: "Gunakan blok seperti pengatur event dan tindakan
        untuk membuat pemain Anda bergerak sesuai tanda panah di keyboard.  \n\nArahkan
        pemain ke target untuk menyelesaikan puzzle ini."
      courseE_playLab_scaffold3: |-
        Ayo tambahkan beberapa karakter lagi ke permainan Anda!

        Gunakan blok `set actor` untuk menambahkan karakter lebih banyak lalu beralihlah ke tujuan untuk menyelesaikan puzzle ini.
      courseE_playLab_scaffold4: |-
        Beberapa karakter dan membuat aktor bergerak merupakan permulaan yang bagus untuk permainan, tetapi kita harus melakukan kreasi lebih banyak lagi agar permainannya terasa nyata. Ayo tambahkan skor!

        Gunakan blok event seperti `when actor touches` untuk mengubah skor. Cetak 10 poin untuk menyelesaikan teka-teki ini.
      courseE_playLab_scaffold5: Hasil kerjanya bagus! Anda sudah memiliki semua komponen
        permainan yang siap dimainkan. Sekarang luangkan waktu untuk memastikan permainan
        berjalan sesuai keinginan. Cantumkan cara untuk menang atau kalah dalam permainan,
        lalu mainkan sampai Anda mengalami salah satu kondisi tersebut.
      courseE_playLab_scaffold6: Anda sudah selesai! Sekarang Anda dapat memainkan
        permainan atau membagikannya kepada teman dan rekan kelas!
      courseF_artist_for1: "**Free Play:** Eksperimen dengan loop `for` dan variabel
        `counter`.  \n\nPindahkan beberapa blok dal lihat apa yang terjadi.  "
      courseF_artist_for10: |-
        \*\* Free Play:\*\* Coba gunakan variabel `counter` dengan elemen gambar lain untuk membuat gambar ajaib seperti ini.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2018: |-
        \*\* Free Play:\*\* Coba gunakan variabel `counter` dengan elemen gambar lain untuk membuat gambar ajaib seperti ini.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for10_2019: |-
        \*\* Free Play:\*\* Coba gunakan variabel `counter` dengan elemen gambar lain untuk membuat gambar ajaib seperti ini.

        ![](https://images.code.org/5a4eec10a53aa78ad6b12fb5e48680f8-image-1497991505852.png)
      courseF_artist_for1_2018: "**Free Play:** Eksperimen dengan loop `for` dan variabel
        `counter`.  \n\nPindahkan beberapa blok dal lihat apa yang terjadi.  "
      courseF_artist_for1_2019: "**Free Play:** Eksperimen dengan loop `for` dan variabel
        `counter`.  \n\nPindahkan beberapa blok dal lihat apa yang terjadi.  "
      courseF_artist_for2: Gunakan sebuah loop `repeat` di dalam sebuah loop `for`
        untuk menciptakan tumpukan segitiga yang berwal dari sisi 50 piksel menjadi
        100 piksel.
      courseF_artist_for2_2018: Gunakan sebuah loop `repeat` di dalam sebuah loop
        `for` untuk menciptakan tumpukan segitiga yang berwal dari sisi 50 piksel
        menjadi 100 piksel.
      courseF_artist_for2_2019: Gunakan sebuah loop `repeat` di dalam sebuah loop
        `for` untuk menciptakan tumpukan segitiga yang berwal dari sisi 50 piksel
        menjadi 100 piksel.
      courseF_artist_for3: Buat segitiga ini yang bermula dari sisi 20 piksel ke sisi
        200 piksel, dan tiap segitiga 20 piksel lebih besar dari yang terakhir.
      courseF_artist_for3_2018: Buat segitiga ini yang bermula dari sisi 20 piksel
        ke sisi 200 piksel, dan tiap segitiga 20 piksel lebih besar dari yang terakhir.
      courseF_artist_for3_2019: Buat segitiga ini yang bermula dari sisi 20 piksel
        ke sisi 200 piksel, dan tiap segitiga 20 piksel lebih besar dari yang terakhir.
      courseF_artist_for5: |-
        Hanya perubahan kecil pada kodenya dari gambar terakhir bisa membuat gambar ini. Bisakah Anda mencari tahu apakah perubahan itu?

        * * *

        Petunjuk:  Anda perlu menghilangkan sesuatu!
      courseF_artist_for5_2018: |-
        Hanya perubahan kecil pada kodenya dari gambar terakhir bisa membuat gambar ini. Bisakah Anda mencari tahu apakah perubahan itu?

        * * *

        Petunjuk:  Anda perlu menghilangkan sesuatu!
      courseF_artist_for5_2019: |-
        Hanya perubahan kecil pada kodenya dari gambar terakhir bisa membuat gambar ini. Bisakah Anda mencari tahu apakah perubahan itu?

        * * *

        Petunjuk:  Anda perlu menghilangkan sesuatu!
      courseF_artist_for6: |-
        Jika Anda berbelok lebih atau kurang sedikit maka umumnya akan membuat bentuk, itu membuat sebuah efek yang rapi.

        Buat ulang ini dari tingkat sebelumnya, yang berbelok 89 derajat untuk menciptakan spiral persegi mengerikan ini.
      courseF_artist_for6_2018: |-
        Jika Anda berbelok lebih atau kurang sedikit maka umumnya akan membuat bentuk, itu membuat sebuah efek yang rapi.

        Buat ulang ini dari tingkat sebelumnya, yang berbelok 89 derajat untuk menciptakan spiral persegi mengerikan ini.
      courseF_artist_for6_2019: |-
        Jika Anda berbelok lebih atau kurang sedikit maka umumnya akan membuat bentuk, itu membuat sebuah efek yang rapi.

        Buat ulang ini dari tingkat sebelumnya, yang berbelok 89 derajat untuk menciptakan spiral persegi mengerikan ini.
      courseF_artist_for7: 'Buat tiga perbedaan kecil pada kode dari tinkat sebelumnya
        untuk mendapatkan ini!  '
      courseF_artist_for7_2018: 'Buat tiga perbedaan kecil pada kode dari tinkat sebelumnya
        untuk mendapatkan ini!  '
      courseF_artist_for7_2019: 'Buat tiga perbedaan kecil pada kode dari tinkat sebelumnya
        untuk mendapatkan ini!  '
      courseF_artist_for9: |-
        **Inspirasi:** Gunakan counter ini di dalam blok `set alpha` untuk mencapai pusat semu ini..\
        (Pola segi enam ini dibuat pada turunan 60 derajat.)
      courseF_artist_for9_2018: |-
        **Inspirasi:** Gunakan counter ini di dalam blok `set alpha` untuk mencapai pusat semu ini..\
        (Pola segi enam ini dibuat pada turunan 60 derajat.)
      courseF_artist_for9_2019: |-
        **Inspirasi:** Gunakan counter ini di dalam blok `set alpha` untuk mencapai pusat semu ini..\
        (Pola segi enam ini dibuat pada turunan 60 derajat.)
      courseF_artist_for_challenge1: "Bisakah Anda mencari tahu bagaimana cara untuk
        membuat ulang gambaran ini? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/>"
      courseF_artist_for_challenge1_2018: "Bisakah Anda mencari tahu bagaimana cara
        untuk membuat ulang gambaran ini? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/>"
      courseF_artist_for_challenge1_2019: "Bisakah Anda mencari tahu bagaimana cara
        untuk membuat ulang gambaran ini? \n\n<img src=\"https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png\"
        width=\"350px\"/>"
      courseF_artist_for_challenge2: "Bisakah Anda mencari tahu bagaimana cara untuk
        membuat ulang gambaran ini dengan sebuah loop?   \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"
        width=\"350px\"/>"
      courseF_artist_for_challenge2_2018: "Bisakah Anda mencari tahu bagaimana cara
        untuk membuat ulang gambaran ini dengan sebuah loop?   \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"
        width=\"350px\"/>"
      courseF_artist_for_challenge2_2019: "Bisakah Anda mencari tahu bagaimana cara
        untuk membuat ulang gambaran ini dengan sebuah loop?   \n\n<img src=\"https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png\"
        width=\"350px\"/>"
      courseF_artist_fwp1: Hari ini, lita akan tetap menggunakan editor fungsi yang
        kuat. Lihatlah jika Anda ingat bagaimana cara mengedit fungsi `draw a square`
        untuk mencari gangguan.
      courseF_artist_fwp2: |-
        Edit fungsi untuk menerima parameter disebut `length`.

        Sisi tiap persegi harus 25 kali lebih besar dari sebelumnya.  Persegi pertama memeiliki sisi 25 piksel.
      courseF_artist_fwp2_predict1: |-
        Edit fungsi untuk menerima parameter disebut `length`.

        Sisi tiap persegi harus 25 kali lebih besar dari sebelumnya.  Persegi pertama memeiliki sisi 25 piksel. Gantikan `???` dengan nilai yang benar untuk menggambar gambarnya.
      courseF_artist_fwp3: "Sekarang coba membuat fungsi itu dari awal!  \n\nMembuat
        fungsi bernama `draw a square` dan gunakan itu untuk membatasi keempat persegi
        ini.\\\\ \nPastikan untuk menambah sebuah parameter untuk`length`!\n\n* *
        *\n\nMulai dari kanan atas, kelebaran persegi adalah 50, 100, 150, dan 200."
      courseF_artist_fwp4: |-
        Kerja bagus!  Sekarang edit fungsi ini untuk menambah sebuah parameter untuk jumlah sisi dalam poligon Anda.

        Sisi pada semua bentuk adalah sepanjang 100 piksel.
      courseF_artist_fwp5: "Gunakan fungsi dari teka-teki terakhir untuk menggambar
        rangkaian bentuk ini.  \n\nSegitiganya memiliki sisi 21 piksel, dan sisi pada
        tiap gambar berikut merupakan 7 piksel lebih panjang dari sebelumnya.\\\nGunakan
        blok `multiplication` untuk membuat semua ini terjadi hanya dengan satu panggilan
        fungsi.\n\n* * *\n\nBalok `multipication` akan terlihat seperti ini <xml><block
        type=\"math_arithmetic\" inline=\"true\">\n      <title name=\"OP\">MULTIPLY</title>\n
        \   </block></xml>"
      courseF_artist_fwp6: |-
        **Tantangan:** Edit `draw a spiral edge` untuk menggunakan `length` dan parameter `sides`, lalu buat ulang bentuk ini..

        -   Persegi bermula dari 3 piksel menjadi 90 piksel.
        -   Heksagon bermula dari 3 piksel menjadi 100 piksel.
        -   Segitiga bermula dari 3 piksel menjadi 95 piksel.
      courseF_artist_fwp7: |-
        Selesaikan fungsi `draw a spiral edge` untuk meminta kepanjangan minimum untuk pusat spiral.

        -   Sisi paling kecil pada pusat persegi ini adalah sepanjang 50 piksel
        -   Sisi paling panjang pada pusat persegi ini adalah sepanjang 200 piksel
      courseF_artist_fwp8: |-
        Freeplay! Bisakah Anda mencari tahu bagaimana cara untuk membuat gambar ini menggunakan fungsi yang baru saja Anda buat?

        -   Spiral merah bermula dari 50 menjadi 200 piksel
        -   Spiral biru bermula dari 25 menjadi 150 piksel
        -   Spiral hijau bermula dari 100 menjadi 350 piksel
      courseF_artist_fwp9: "**Freeplay:** Di bawah adalah fungsi yang telah anda tulis,
        dan lebih banyak untuk dimainkan Anda. Bermain dengan kelebaran pena untuk
        melihat betapa bedanya gambar Anda! Saran ada di dalam petunjuk!"
      courseF_artist_fwp_challenge1: Coba jalankan program ini. Buat perubahan untuk
        melihat apa yang terjadi. Bisakah Anda mencari tahu bagaimana itu bekerja?
        Anda juga dapat menghapusnya dan menggantinya dengan sesuatu yang sangat berbeda.
      courseF_artist_fwp_challenge2: |-
        Wow! Gunakan apa yang telah Anda pelajari di tingkat sebelumnya untuk menggambar seperti ini.

        _Hint: Use parameters to make your code simpler._

        <br/>
        <img src="https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png" width="300px"/>
        <br/>
      courseF_artist_variables10: "Ini adalah kode dari teka-teki sebelumnya.  Coba
        mengedit variabel dalam berbagai cara.    \n\n-   Apa yang terjadi jika Anda
        memulai dengan `length` kurang dari 150? \n-   Bagaimana jika Anda menggandakan
        variabel Anda 1.25 tiap kali melalui?\n-   Apa yang akan dilakukan kode Anda
        jika Anda berbelok 119 derajat?"
      courseF_artist_variables10_2018: "Ini adalah kode dari teka-teki sebelumnya.
        \ Coba mengedit variabel dalam berbagai cara.    \n\n-   Apa yang terjadi
        jika Anda memulai dengan `length` kurang dari 150? \n-   Bagaimana jika Anda
        menggandakan variabel Anda 1.25 tiap kali melalui?\n-   Apa yang akan dilakukan
        kode Anda jika Anda berbelok 119 derajat?"
      courseF_artist_variables10_2019: "Ini adalah kode dari teka-teki sebelumnya.
        \ Coba mengedit variabel dalam berbagai cara.    \n\n-   Apa yang terjadi
        jika Anda memulai dengan `length` kurang dari 150? \n-   Bagaimana jika Anda
        menggandakan variabel Anda 1.25 tiap kali melalui?\n-   Apa yang akan dilakukan
        kode Anda jika Anda berbelok 119 derajat?"
      courseF_artist_variables2: "Sekarang gunakan loop yang lain untuk menggambar
        tiga segitiga itu saling berdekatan.   \n\nAnda dapat menyarang sisa kode
        dari teka-teki terakhir Anda di dalam."
      courseF_artist_variables2_2018: "Sekarang gunakan loop yang lain untuk menggambar
        tiga segitiga itu saling berdekatan.   \n\nAnda dapat menyarang sisa kode
        dari teka-teki terakhir Anda di dalam."
      courseF_artist_variables2_2019: "Sekarang gunakan loop yang lain untuk menggambar
        tiga segitiga itu saling berdekatan.   \n\nAnda dapat menyarang sisa kode
        dari teka-teki terakhir Anda di dalam."
      courseF_artist_variables3: |-
        Sebelum hal menjadi sulit, bisakah Anda memindahkan kepanjangan dari 50 ke dalam sebuah variabel agar kita dapat menggunakannya di teka-teki berikutnya?

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables3_2018: |-
        Sebelum hal menjadi sulit, bisakah Anda memindahkan kepanjangan dari 50 ke dalam sebuah variabel agar kita dapat menggunakannya di teka-teki berikutnya?

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables3_2019: |-
        Sebelum hal menjadi sulit, bisakah Anda memindahkan kepanjangan dari 50 ke dalam sebuah variabel agar kita dapat menggunakannya di teka-teki berikutnya?

        ![expandable](https://images.code.org/73447d004093c6be8ab01a1358155f16-image-1498068386665.gif)
      courseF_artist_variables4: Sekarang, gunakan variabel `length` untuk membuat
        artis meloncat ke depan dan bawah demgam piksel `length` diantara segitiga.
      courseF_artist_variables4_2018: Sekarang, gunakan variabel `length` untuk membuat
        artis meloncat ke depan dan bawah demgam piksel `length` diantara segitiga.
      courseF_artist_variables4_2019: Sekarang, gunakan variabel `length` untuk membuat
        artis meloncat ke depan dan bawah demgam piksel `length` diantara segitiga.
      courseF_artist_variables6: "**UPS!**  \n\nKita sebenarnya butuh segitiganya
        menjadi lebar 60 piksel, dengan lompatan 60 piksel.  \n\nTidakkah Anda lega
        Anda menggunakan variabel?"
      courseF_artist_variables6_2018: "**UPS!**  \n\nKita sebenarnya butuh segitiganya
        menjadi lebar 60 piksel, dengan lompatan 60 piksel.  \n\nTidakkah Anda lega
        Anda menggunakan variabel?"
      courseF_artist_variables6_2019: "**UPS!**  \n\nKita sebenarnya butuh segitiganya
        menjadi lebar 60 piksel, dengan lompatan 60 piksel.  \n\nTidakkah Anda lega
        Anda menggunakan variabel?"
      courseF_artist_variables6a: Gunakan apa yang telah Anda pelajari untuk membangun
        desain ini di mana persegi memiliki sisi 80 piksel dan artis meloncat 80 piksel
        melewati atas dan bawah persegi.
      courseF_artist_variables6a_2018: Gunakan apa yang telah Anda pelajari untuk
        membangun desain ini di mana persegi memiliki sisi 80 piksel dan artis meloncat
        80 piksel melewati atas dan bawah persegi.
      courseF_artist_variables6a_2019: Gunakan apa yang telah Anda pelajari untuk
        membangun desain ini di mana persegi memiliki sisi 80 piksel dan artis meloncat
        80 piksel melewati atas dan bawah persegi.
      courseF_artist_variables7: "Mari memulai bagian ini dengan menggambar sebuah
        segitiga dengan sisi 150 piksel. \n\nPastikan untuk menggunakan variabel `length`
        dan sebuah repeat loop."
      courseF_artist_variables7_2018: "Mari memulai bagian ini dengan menggambar sebuah
        segitiga dengan sisi 150 piksel. \n\nPastikan untuk menggunakan variabel `length`
        dan sebuah repeat loop."
      courseF_artist_variables7_2019: "Mari memulai bagian ini dengan menggambar sebuah
        segitiga dengan sisi 150 piksel. \n\nPastikan untuk menggunakan variabel `length`
        dan sebuah repeat loop."
      courseF_artist_variables8: |-
        Bangun ulang kode segitiga dari teka-teki berikutnya, tapi kali ini gunakan blok `set length to` untuk mengatur ulang variabel `length` menjadi `length`+10 pada tiap akhir pengulangan loop.

        <xml>
        <block type="variables_set" inline="false">
                                <title name="VAR">length</title>
                                <value name="VALUE">
                                  <block type="math_arithmetic" inline="true">
                                    <title name="OP">ADD</title>
                                    <value name="A">
                                      <block type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value name="B">
                                      <block type="math_number">
                                        <title name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        Panjang sisi pertama segitiga adalah 150 piksel.
      courseF_artist_variables8_2018: |-
        Bangun ulang kode segitiga dari teka-teki berikutnya, tapi kali ini gunakan blok `set length to` untuk mengatur ulang variabel `length` menjadi `length`+10 pada tiap akhir pengulangan loop.

        <xml>
        <block type="variables_set" inline="false">
                                <title name="VAR">length</title>
                                <value name="VALUE">
                                  <block type="math_arithmetic" inline="true">
                                    <title name="OP">ADD</title>
                                    <value name="A">
                                      <block type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value name="B">
                                      <block type="math_number">
                                        <title name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        Panjang sisi pertama segitiga adalah 150 piksel.
      courseF_artist_variables8_2019: |-
        Bangun ulang kode segitiga dari teka-teki berikutnya, tapi kali ini gunakan blok `set length to` untuk mengatur ulang variabel `length` menjadi `length`+10 pada tiap akhir pengulangan loop.

        <xml>
        <block type="variables_set" inline="false">
                                <title name="VAR">length</title>
                                <value name="VALUE">
                                  <block type="math_arithmetic" inline="true">
                                    <title name="OP">ADD</title>
                                    <value name="A">
                                      <block type="variables_get">
                                        <title name="VAR">length</title>
                                      </block>
                                    </value>
                                    <value name="B">
                                      <block type="math_number">
                                        <title name="NUM">10</title>
                                      </block>
                                    </value>
                                  </block>
                                </value>
                              </block>
        </xml>

        Panjang sisi pertama segitiga adalah 150 piksel.
      courseF_artist_variables9: "Saatnya membuat seni!  \n\nLihat apa yang terjadi
        saat Anda mengulangi kode dari teka-teki terakhir **30** kali daripada hanya
        3!\n\nSilakan membuat garis Anda dengan warna atau pola apa pun untuk hiasan
        ekstra."
      courseF_artist_variables9_2018: "Saatnya membuat seni!  \n\nLihat apa yang terjadi
        saat Anda mengulangi kode dari teka-teki terakhir **30** kali daripada hanya
        3!\n\nSilakan membuat garis Anda dengan warna atau pola apa pun untuk hiasan
        ekstra."
      courseF_artist_variables9_2019: "Saatnya membuat seni!  \n\nLihat apa yang terjadi
        saat Anda mengulangi kode dari teka-teki terakhir **30** kali daripada hanya
        3!\n\nSilakan membuat garis Anda dengan warna atau pola apa pun untuk hiasan
        ekstra."
      courseF_artist_variablesFP: "**Freeplay:** Ambil apa yang Anda pelajari dan
        buatlah gambarmu sendiri. \n\nBagaimana cara Anda menggunakan variabel dengan
        persegi, pentagon, atau heksagon?"
      courseF_artist_variablesFP_2018: "**Freeplay:** Ambil apa yang Anda pelajari
        dan buatlah gambarmu sendiri. \n\nBagaimana cara Anda menggunakan variabel
        dengan persegi, pentagon, atau heksagon?"
      courseF_artist_variablesFP_2019: "**Freeplay:** Ambil apa yang Anda pelajari
        dan buatlah gambarmu sendiri. \n\nBagaimana cara Anda menggunakan variabel
        dengan persegi, pentagon, atau heksagon?"
      courseF_artist_variables_challenge1: Peringatan tantangan! Bisakah anda membuat
        sebuah variabel `length` dan gunakan itu untuk membuat pola menarik ini?
      courseF_artist_variables_challenge1_2018: Peringatan tantangan! Bisakah anda
        membuat sebuah variabel `length` dan gunakan itu untuk membuat pola menarik
        ini?
      courseF_artist_variables_challenge1_2019: Peringatan tantangan! Bisakah anda
        membuat sebuah variabel `length` dan gunakan itu untuk membuat pola menarik
        ini?
      courseF_artist_variables_challenge2: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png" width="250px"/>

        Anda sekarang mempelajari semua yang Anda tahu untuk membuat sebuah pola seperti ini! Teka-teki ini dimaksudkan untuk menjadi sulit.  Bisakah Anda menetap dengannya sampai Anda menemukan solusinya?
      courseF_artist_variables_challenge2_2018: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png" width="250px"/>

        Anda sekarang mempelajari semua yang Anda tahu untuk membuat sebuah pola seperti ini! Teka-teki ini dimaksudkan untuk menjadi sulit.  Bisakah Anda menetap dengannya sampai Anda menemukan solusinya?
      courseF_artist_variables_challenge2_2019: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png" width="250px"/>

        Anda sekarang mempelajari semua yang Anda tahu untuk membuat sebuah pola seperti ini! Teka-teki ini dimaksudkan untuk menjadi sulit.  Bisakah Anda menetap dengannya sampai Anda menemukan solusinya?
      courseF_bee_conditionals10: |-
        Kondisional dapat membantu, bahkan jika Anda tahu apa yang berada pada tiap tempat!

        Kumpulkan semua nektar dan buat semua madunya.
      courseF_bee_conditionals1_predict1: |-
        _"Awan ini menghalang pandanganku!"_

        Lihat apakah ada bunga di bawah awan. Jika ada bunga, mendapatkan nektar.
      courseF_bee_conditionals2: "_\"Di sini terlalu berawan untuk melihat bunga!\"_\n\nLihat
        di bawah tiap awan untuk melihat jika awan itu menyembunyikan bunga sebelum
        Anda mendapatkan nektar. Jika Ada bunga tersembunyi di bawah awan, lebah perlu
        mengambil nektar **sekali**.  \n\nIngat: Tidak semua awan menyembunyikan hal
        yang sama!"
      courseF_bee_conditionals3: 'Anda hanya dapat mengumpulkan nektar dari bunga,
        tapi Anda dapat mengecek ruang manapun untuk melihat jika ada bunga. Jika
        Ada bunga tersembunyi di bawah awan, lebah perlu mengambil nektar **sekali**. '
      courseF_bee_conditionals4: |-
        Dalam teka-teki ini, kita tahu bahwa setiap bunga memiliki satu nekta, tapi bunganya tidak diletakkan dengan rata.

        Dapatkan semua nektar menggunakan blok sesedikit mungkin..
      courseF_bee_conditionals7_predict2: |-
        Terkadang, sebuah awan menyembunyikan bunga, terkadang menyembunykan sarang madu!

        Gunakan blok `if/else` untuk mengumpulkan nektar pada bunga dan membuat madu pada sarang madu..
      courseF_bee_conditionals8: |-
        **Tantangan:** Akan ada antara bunga atau sarang madu dibawah tiap awan itu!

        Kumpulkan nektar jika ada bunga. Jika tidak, buat madu sekali (karena ada sarang madu).
      courseF_bee_for10: "**Tantangan:** Ambil dari apa yang Anda pelajari tentang
        loop `for` dan coba untuk memecahkan masalah ini. \n\nIngat: Anda mungkin
        perlu menjalani melalui solusi berkali-kali sebelum Anda memahami semua dari
        langkah-langkah ini."
      courseF_bee_for10_2018: "**Tantangan:** Ambil dari apa yang Anda pelajari tentang
        loop `for` dan coba untuk memecahkan masalah ini. \n\nIngat: Anda mungkin
        perlu menjalani melalui solusi berkali-kali sebelum Anda memahami semua dari
        langkah-langkah ini."
      courseF_bee_for10_2019: "**Tantangan:** Ambil dari apa yang Anda pelajari tentang
        loop `for` dan coba untuk memecahkan masalah ini. \n\nIngat: Anda mungkin
        perlu menjalani melalui solusi berkali-kali sebelum Anda memahami semua dari
        langkah-langkah ini."
      courseF_bee_for11: "Loop anda sedang menghitung mundurm peningkatannya **dikurangi**
        dari variabel lawan tiap kali melewati. \n\nApa peningkatan Anda untuk mengumpulkan
        15, lalu 12, lalu 9, 6, 3 nektar?"
      courseF_bee_for11_2018: "Loop anda sedang menghitung mundurm peningkatannya
        **dikurangi** dari variabel lawan tiap kali melewati. \n\nApa peningkatan
        Anda untuk mengumpulkan 15, lalu 12, lalu 9, 6, 3 nektar?"
      courseF_bee_for11_2019: "Loop anda sedang menghitung mundurm peningkatannya
        **dikurangi** dari variabel lawan tiap kali melewati. \n\nApa peningkatan
        Anda untuk mengumpulkan 15, lalu 12, lalu 9, 6, 3 nektar?"
      courseF_bee_for2: "Tulis kodenya untuk membantu si lebah mengumpulkan semua
        nektar.\n\nAnda akan membutuhkan banyak kode untuk tantangan ini, tapi kita
        akan belajar dengan cara yang lebih mudah dalam teka-teki berikutnya. "
      courseF_bee_for2_2018: "Tulis kodenya untuk membantu si lebah mengumpulkan semua
        nektar.\n\nAnda akan membutuhkan banyak kode untuk tantangan ini, tapi kita
        akan belajar dengan cara yang lebih mudah dalam teka-teki berikutnya. "
      courseF_bee_for2_2019: "Tulis kodenya untuk membantu si lebah mengumpulkan semua
        nektar.\n\nAnda akan membutuhkan banyak kode untuk tantangan ini, tapi kita
        akan belajar dengan cara yang lebih mudah dalam teka-teki berikutnya. "
      courseF_bee_for6: "Anda juga dapat menggunakan sebuah loop `for` untuk menghitung
        mundur. \n\nCoba mengumpulkan nektar ini dengan menghitung mundur dari **5**
        ke **1** dengan **1**."
      courseF_bee_for6_2018: "Anda juga dapat menggunakan sebuah loop `for` untuk
        menghitung mundur. \n\nCoba mengumpulkan nektar ini dengan menghitung mundur
        dari **5** ke **1** dengan **1**."
      courseF_bee_for6_2019: "Anda juga dapat menggunakan sebuah loop `for` untuk
        menghitung mundur. \n\nCoba mengumpulkan nektar ini dengan menghitung mundur
        dari **5** ke **1** dengan **1**."
      courseF_bee_for7: |-
        Angka terakhir dalam loop `for` bernama **"increment"**.  Tiap loop dijalankan, variabel berubah dengan nilai dari **increment**.

        Coba mengumpulkan bunga ini menggunakan sebuah **increment** 2.
      courseF_bee_for7_2018: |-
        Angka terakhir dalam loop `for` bernama **"increment"**.  Tiap loop dijalankan, variabel berubah dengan nilai dari **increment**.

        Coba mengumpulkan bunga ini menggunakan sebuah **increment** 2.
      courseF_bee_for7_2019: |-
        Angka terakhir dalam loop `for` bernama **"increment"**.  Tiap loop dijalankan, variabel berubah dengan nilai dari **increment**.

        Coba mengumpulkan bunga ini menggunakan sebuah **increment** 2.
      courseF_bee_for8: "Anda bisa melakukannya! \n\nApa **increment** Anda untuk
        mengumpulkan 3, 6, 9, 12, 15 nektar?"
      courseF_bee_for8_2018: "Anda bisa melakukannya! \n\nApa **increment** Anda untuk
        mengumpulkan 3, 6, 9, 12, 15 nektar?"
      courseF_bee_for8_2019: "Anda bisa melakukannya! \n\nApa **increment** Anda untuk
        mengumpulkan 3, 6, 9, 12, 15 nektar?"
      courseF_bee_for9: "Sekarang, mari gabungkan variabel `counter` dengan sebuah
        blok `math`! \n\nBagaimana Anda dapat menggunakan variabel `counter` untuk
        menavigasi kebun ini dengan blok angka sesedikit mungkin?"
      courseF_bee_for9_2018: "Sekarang, mari gabungkan variabel `counter` dengan sebuah
        blok `math`! \n\nBagaimana Anda dapat menggunakan variabel `counter` untuk
        menavigasi kebun ini dengan blok angka sesedikit mungkin?"
      courseF_bee_for9_2019: "Sekarang, mari gabungkan variabel `counter` dengan sebuah
        blok `math`! \n\nBagaimana Anda dapat menggunakan variabel `counter` untuk
        menavigasi kebun ini dengan blok angka sesedikit mungkin?"
      courseF_bee_for_challenge1: |-
        Anda dapat menggunakan `for loop` ini untuk mengumpulkan semua nektar. Tak bisa dipercaya!

        Ada beberapa aksi yang Anda ingin `repeat 'counter' times`.
      courseF_bee_for_challenge1_2018: |-
        Anda dapat menggunakan `for loop` ini untuk mengumpulkan semua nektar. Tak bisa dipercaya!

        Ada beberapa aksi yang Anda ingin `repeat 'counter' times`.
      courseF_bee_for_challenge1_2019: |-
        Anda dapat menggunakan `for loop` ini untuk mengumpulkan semua nektar. Tak bisa dipercaya!

        Ada beberapa aksi yang Anda ingin `repeat 'counter' times`.
      courseF_bee_for_challenge2: Selesaikan teka-teki ini dengan menggunakan blok
        sesedikit mungkin.
      courseF_bee_for_challenge2_2018: Selesaikan teka-teki ini dengan menggunakan
        blok sesedikit mungkin.
      courseF_bee_for_challenge2_2019: Selesaikan teka-teki ini dengan menggunakan
        blok sesedikit mungkin.
      courseF_bee_functions2: "Untuk membuat hal lebih mudah, saatnya untuk belajar
        tentang fungsi!\n\nDari sini, Anda akan menggunakan _editor fungsi_.  Editor
        ini adalah jendela terpisah yang akan muncul saat Abda pergi untuk mengedit
        fungsi.  Anda tidak akan melihat semua kode dari fungsi Anda selagi Anda coding
        di ruang kerja, tapi jangan khawatir... Itu masih di sana!  \n\n* * *\n\nAyo
        berlatih dengan fungsi ini yang mendapatkan nektar hanya jika lebah berada
        pada bunga.  Untuk melihat kode di dalam, klik tombol “edit” biru!\n\nGunakan
        fungsi `get only nectar` untuk mengumpulkan nektar dari tiap bunga."
      courseF_bee_functions3: Sekarang giliran Anda untuk membuat fungsi untuk mendapatkan
        beberapa **hanya** jika ada sarang madu!  Klilk "edit" untuk membuat fungsi
        `only make honey`, lalu gunakan itu untuk memecahkan teka-teki ini.
      courseF_bee_functions3a: |-
        Tiap awan bisa menyembunyikan satu bunga atau satu sarang madu! Tulis sebuah fungsi yang mengumpulkan nektar jika lebah berada di bunga, jika tidak lebah mendapatkan madu.

        Gunakan fungsi Anda untuk memecahkan teka-teki ini!
      courseF_bee_functions4: "Tahukah Anda bahwa Anda dapat memanggil sebuah fungsi
        dari _inside_ fungsi lain?  \n\nGunakan fungsi `check nectar or honey` Abda
        di dalam fungsi `move and check` Anda yang baru untuk membantu lebah belok,
        mengambil apa yang di bawah awan, lalu mundur dan putar balik!"
      courseF_bee_functions5a: Sekarang, bangun `move and check` sehingga itu membawa
        lebah menuju awan setiap ada jalur ke kanan, lalu gunakan itu untuk memecahkan
        teka-teki ini!
      courseF_bee_functions6: |-
        _"This field is a-MAZE-ing!"_

        Bangunlah fungsi anda sendiri untuk membantu lebah melalui labirin dengan berbelok kiri pada bunga dan kanan pada sarang madu.  Jangan lupa untuk mengumpulkan nektar dan membuat madu di sepanjang jalan!
      courseF_bee_functions7: |-
        Bangun ulang fungsi anda dari teka-teki terakhir untuk memecahkan labirin ini.

        Belok kiri pada sarang madu dan kiri pada bunga.\
        **Note:** Beberapa pojok tidak ditandai!
      courseF_bee_functions8a: |-
        Di bawah awan ini, kemungkinan ada bunga dengan jumlah nektar yang tidak diketahui, atau sebuah sarang madu dengan jumlah madu yang tidak diketahui.

        Bisakah Anda menulis program yang dapat mengatasi keduanya?
      courseF_bee_functionsPre7: |-
        Sekarang coba membangun sebuah fungsi dalam labirin ini.  Bagaimana ini berbeda dari terakhir kali?

        Belok kiri pada sarang madu dan kiri pada bunga.\
        **Note:** Beberapa pojok tidak ditandai!
      courseF_bee_functions_challenge1: Buatlah fungsi baru untuk mengumpulkan semua
        nektar dan madu selagi ada jalan di depan. Gunakan itu untuk menyelesaikan
        teka-tekinya!
      courseF_bee_functions_challenge2: Gunakan semua yang Anda pelajari untuk menyelesaikan
        teka-teki ini!
      courseF_bee_fwp1: "Periksa di bawah awan untuk melihat apakah bunganya memiliki
        nektar.  \n\nUntuk seluruh tahap ini, tiap bunga akan memilioki tepatnya **one**
        satu unit nektar, dan tiap sarang madu akan membutuhkan tepatnya **one** unit
        madu. "
      courseF_bee_fwp2: "Ini beberapa kode yang memecahkan teka-teki sebelumnya.\\\nMari
        menariknya ini menjadi sebuah fungsi, lalu panggil fungsinya untuk mengecek
        barisan ini untuk nektar. \n\n* * *\n\nIni terlihat seperti sesbuah langkah
        yang aneh sekarang, tapi akan menjadi sangat membantu nantinya!"
      courseF_bee_fwp3: "Saatnya untuk menguji fungsinya! \n\nMari lihat jika fungsinya
        membuat mengumpulkan tiga baris nektar ini lebih mudah."
      courseF_bee_fwp4: "_\"How is your function holding up?\"_   \n\nKita perlu membuat
        perbaikan di sini. Klik \"edit\" untuk menambah parameter `length` kepada
        fungsi agar akan tetap bekerja saat panjang barisan berbeda.."
      courseF_bee_fwp5: |-
        _"You're doing great so far!"_

        Mari gunakan fungsi ini untuk mengumpulkan nektar.
      courseF_bee_fwp6: "Anda dapat membuat kode lebih pendek dan lebih efisien saat
        Anda menggabungkan fungsi dengan elemen program lainnya.  \n\n* * *\n\nBlok
        apa yanf dapat Anda gunakan dengan fungsi Anda untuk membuat sebuah solusi
        yang pendek dan manis kepada teka-teki ini.?"
      courseF_bee_fwp7: "**Challenge:** Sesuatu terlihat berbeda. Modifikasi fungsi
        Anda untuk membuat madu juga."
      courseF_bee_fwp_challenge1: Gunakan satu `for loop` dalam sebuah fungsi untuk
        mengumpulkan semua jagung. `for loop` yang sama dapat menghitung sampai nilai
        maksimum berbeda dengan menggunakan parameter `length`.
      courseF_bee_fwp_challenge2: |-
        _"**Lettuce** see if you can handle this one final test! Give it everything you've got!"_

        Gunakan satu `for loop` dalam sebuah fungsi untuk mengumpulkan semua sayur dalam barisan. Buat jumlah `for loop` ke nilai maksimum yang berbeda dengan menggunakan parameter `length`. Buat program Anda sependek mungkin dengan menggunakan `for loop` kedua di luar fungsi.

        Semoga beruntung!
      courseF_bee_variables_3_2018: |-
        _"Seperti -taman yang LUAR BIASA!"_

        Dalam teka-teki ini, setiap tambalan membutuhkan variabel menjadi satu tambalan yang lebih kecil dari tambalan sebelumnya. Kurangi satu variabel setiap kali melalui lingkaran jika Anda ingin menggunakan fungsi yang sama untuk menyelesaikan tingkat ini.
      courseF_bee_variables_3_2019: |-
        _"Seperti -taman yang LUAR BIASA!"_

        Dalam teka-teki ini, setiap tambalan membutuhkan variabel menjadi satu tambalan yang lebih kecil dari tambalan sebelumnya. Kurangi satu variabel setiap kali melalui lingkaran jika Anda ingin menggunakan fungsi yang sama untuk menyelesaikan tingkat ini.
      courseF_bee_variables_4_2018: |-
        "Tidak dapat DIPERCAYA!"

        Sunting kode untuk membuatnya berfungsi pada teka-teki ini.
      courseF_bee_variables_4_2019: |-
        "Ayo teruskan!"

        Sunting kode agar membuatnya berfungsi untuk teka teki ini.
      courseF_playlab_variables1a: 'Variabel dapat digunakan untuk menyimpan teks
        yang ingin Anda gunakan nanti. '
      courseF_playlab_variables2b: |-
        Kita dapat membuat kalimat lebih menarik dengan mencampur bagian teks dengan variabel.

        Masukkan variabel `color` di tengah-tengah sebuah kalimat dengan menaruhnya ke dalam tempat kosong di dalam blok `join`.
      courseF_playlab_variables3b_josh: 'Bantu Kiki membuat percakapan dengan Brian
        dengan menggunakan variabel `age` di dalam semua tempat di mana `12` seharusnya
        digunakan. '
      courseF_playlab_variables4b: "Sekarang, Bajak Laut Pegleg memiliki pertanyaan
        untuk Brian.\n\nIni menggunakan sebuah blok `ask`, sehingga Anda dapat mengetik
        jawaban Brian sestelah Anda mengeklik \"Run\". \n\nMasukan variabel dalam
        tempat yang benar untuk membuat percakapan ini."
      courseF_playlab_variables5c: |-
        Mari gabungkan blok `ask` dengan sebuah pernyataan `if/else` untuk bersenang-senang!

        Bajak Laut Pegleg akan menanyakan Anda sesuatu.  Pindahkan sebuah salinan dari variabel `answer` ke dalam kondisional untuk pernyataan `if` untuk melihat jika Anda memasukan warna yang benar.
      courseF_playlab_variables6c: |-
        Dalam sisa tahap ini, kita akan menggunakan blok `ask` berganda dan pernyataan `if/else` berganda untuk menciptakan sebuah game yang **you** kendalikan!

        Mulai dengan menentukan variabel “codename” kepada kata yang Anda bisa ingat.  Lalu, gunakan sebuah blok `ask` untuk mendapatkan nama kode dari pengguna.  Anda memerlukan blok `if/else` untuk melihat jika nama kode yang dimasukkan cocok dengan nama kode yang sudah anda tentukan
      courseF_playlab_variables7b: "Saatnya untuk membuat proyekmu sendiri  \n\nBuatlah
        beberapa pertanyaan dan gabungkan pertanyaan bersama menjadi ceritamu sendiri\n\nJika
        Anda butuh ide, klik ikon petunjuk."
      courseF_playlab_variables7c: "Tambah blok `ask` lain untuk menanyakan pengguna
        untuk menebak sebuah warna..  \n\nTetapkan pernyataan `if/else` Anda begitu
        sehingga nama kode Anda selalu memenangkan permainan, tetapi nama kode lain
        selalu kalah.."
      courseF_playlab_variables8c: Gunakan blok `join` (dalam toolboks di bawah "Text")
        untuk membuat pesan menang/kalah lebih personal menggunakan variabel `codename`
        dan `color` kepada jawaban.
      courseF_playlab_variables_challenge1: Gunakan balok ini untuk membuat aktor
        membagikan sebuah lelucon ketukan. Ganti bagian lucunya dan pengaturannya
        untuk menyeritakan lelucon Anda sendiri
      courseF_playlab_variables_challenge2: "Sekarang untuk sebuah permainan tag!
        Tandai Kucing (aktor 2) atau dapat 2 poin. Tandai Penguin (aktor 3) atau dapat
        3 poin.  Dapatkan 10 poin untuk menang!  \n\nTetapi hati-hati, saat Kucing
        dan Penguin saling menandai, mereka mengambil poin.\n\n* * *\n\nTambah blok
        yang dibutuhkan untuk membuat permainan ini bekerja sesuai penjelasan.\n\n-
        \  Bagaimana Anda akan membuat si Anjing bergerak dalam semua arah menggunakan
        tombol panah?\n-   Bagaimana Anda akan menambah poin saat Anjing menandai
        Kucing atau Penguin?\n-   Bagaimana Anda akan mengurangi poin saat Kucing
        dan Penguin bersentuh?"
      coursea_maze_ramp1_2018: Untuk membawa burung ke babi, gabungkan blok <xml><block
        type="maze_moveEast"/></xml> ke bagian bawah blok <xml><block type="when_run"/></xml>,
        lalu tekan "▶ Jalankan"!
      coursea_maze_ramp1_2019: Untuk membawa burung ke babi, gabungkan blok <xml><block
        type="maze_moveEast" block-text="move east"/></xml> ke bagian bawah blok <xml><block
        type="when_run" block-text="when run"/></xml>, lalu tekan "▶ Jalankan"!
      csd U3 conditional statements video_2019: |-
        ## Question to Consider

        -   When would you want to use an if statement?
      csd u5 recommender sample: "# Sample App\n\nHere is an example of an app that
        uses data to help the user solve a problem.  With a partner, play through
        the app a few times to see how it works.\n\nDiscuss the following questions
        with your partner:\n\n-   What choice does the app help the user to make?
        \n-   What data does it use to make that recommendation?\n-   How do you think
        the creators of the app decided on the algorithm that they use to make the
        choice?"
      csd u5 recommender sample_2019: "# Sample App\n\nHere is an example of an app
        that uses data to help the user solve a problem.  With a partner, play through
        the app a few times to see how it works.\n\nDiscuss the following questions
        with your partner:\n\n-   What choice does the app help the user to make?
        \n-   What data does it use to make that recommendation?\n-   How do you think
        the creators of the app decided on the algorithm that they use to make the
        choice?"
      frozen circle: Lingkaran adalah bentuk yang spesial. Bisakah kamu menebak berapa
        angka yang dapat menggantikan tanda tanya itu untuk menggambar sebuah lingkaran?
      frozen circle function: Gunakan blok baru "Buatlah lingkaran" untuk membuat
        10 lingkaran yang tumpang tindih. Jangan lupa untuk lompat maju antara lingkaran.
      frozen circle function in circle: Sekarang, mari kita membuat 20 lingkaran yang
        tumpang tindih, berbelok 18 derajat antara setiap lingkaran.
      frozen circle function with parameter: Ini adalah blok "Buatlah lingkaran" yang
        dapat membuat lingkaran-lingkaran dengan ukuran yang berbeda-beda. Bisakah
        kamu menggunakannya untuk membuat sebuah lingkaran kecil berukuran 5 dan lingkaran
        yang lebih besar berukuran 10?
      frozen cross: Bungkuskan blok "Ulangi" pada perintah-perintah tersebut untuk
        membuat tanda plus (tambah). Apakah kamu memperhatikan bahwa Elsa dapat bergerak
        maju dan mundur?
      frozen cross rotate: Sekarang coba ulangi 10 kali. Berapa derajat yang kamu
        perlukan untuk berbelok antara setiap garis?
      frozen cross rotate dense: 'Mari kita ulangi 90 kali. Berapa kali 90 menjadi
        360? Petunjuk: Ini adalah angka yang sangat kecil.'
      frozen diamond: Gunakan pengulangan pada blok-blok ini untuk membuat sebuah
        jajaran genjang. Ini seperti sebuah persegi panjang, tetapi memiliki sudut
        yang berbeda. Jajaran genjang ini bukan memiliki sudut 90 derajat, melainkan
        60 derajat dan 120 derajat.
      frozen diamond mini snowflake: Tahukah kamu bahwa setiap kepingan salju memiliki
        bentuk yang berbeda? Mari membuat kepingan salju baru dengan menggunakan blok
        "Ulangi" untuk mengulangi pembuatan jajaran genjang sebanyak 4 kali, berbelok
        90 derajat antara setiap jajaran genjang.
      frozen diamond snowflake: Sekarang, mari kita membuat kepingan salju baru dengan
        menggunakan blok "Ulangi" untuk mengulangi pembuatan jajaran genjang sebanyak
        10 kali, berbelok 36 derajat antara masing-masing bentuk.
      frozen freeplay: Kamu telah resmi menjadi seniman ahli! Buatlah sebuah dunia
        musim dingin.
      frozen perpendicular: Sekarang, mari kita lihat apakah kita bisa membuat dua
        garis yang tegak lurus 90 derajat satu dengan yang lain. Kamu akan memerlukan
        blok "Belok" dan juga blok "Gerak".
      frozen snowflake branch: Cobalah menggunakan balok "Buatlah cabang kepingan
        salju" untuk membuat tiga cabang, yang mulai terlihat seperti kepingan salju.
      frozen snowflake full: Sekarang mari kita ulangi 8 kali untuk membuat kepingan
        salju yang indah!
      frozen snowflower: Pola salju yang rumit dapat dibuat dari bentuk yang sangat
        sederhana. Bisakah kamu membuat sebuah pola dengan mengulangi membuat 5 lingkaran
        berukuran 5, dan 5 lingkaran berukuran 10?
      frozen square iterative: Sepertinya kita sudah setengah jalan untuk membuat
        sebuah persegi. Mari kita tempatkan 4 garis untuk membuat sebuah persegi.
      frozen square loop: Halo, aku Anna dari Arendelle! Mari kita membuat sebuah
        persegi dengan blok "Ulangi", yang akan menggunakan lebih sedikit blok. Berapa
        kali (???) blok "Ulangi" harus mengulang blok di dalamnya untuk membuat sebuah
        persegi?
      frozen square loop 3x: Mari kita membuat tiga persegi, berputar setelah setiap
        persegi. Pastikan untuk berputar 120 derajat sebelum membuat setiap persegi
        baru.
      frozen square snowflake: Dapatkah kamu membuat sebuah kepingan salju dengan
        menggunakan blok "Ulangi" untuk membuat sebuah persegi sebanyak 10 kali, dan
        blok "Belok" untuk berbelok 36 derajat antara setiap persegi?
      grade2_collector_10: |-
        Anda hampir selesai!

        Kumpulkan harta karun sebanyak-banyaknya untuk menyelesaikan tahapan ini!
      grade2_collector_10_2018: |-
        Anda hampir selesai!

        Kumpulkan harta karun sebanyak-banyaknya untuk menyelesaikan tahapan ini!
      grade2_collector_10_2019: |-
        Anda hampir selesai!

        Kumpulkan harta karun sebanyak-banyaknya untuk menyelesaikan tahapan ini!
      grade2_collector_A: Bantu Laurel mengumpulkan semua harta karun.
      grade2_collector_A_2018: Bantu Laurel mengumpulkan semua harta karun.
      grade2_collector_A_2019: Bantu Laurel mengumpulkan semua harta karun.
      grade5_artist_variables_triangles1: "Mari gambar sebuah segitiga sama sisi.
        \n\nSegitiga harus persis sepanjang 50 piksel pada tiap sisi."
      grade5_artist_variables_triangles1_2018: "Mari gambar sebuah segitiga sama sisi.
        \n\nSegitiga harus persis sepanjang 50 piksel pada tiap sisi."
      grade5_artist_variables_triangles1_2019: "Mari gambar sebuah segitiga sama sisi.
        \n\nSegitiga harus persis sepanjang 50 piksel pada tiap sisi."
      grade5_pixelation: "# Make your own image of any size\n\n![](https://images.code.org/01c15fed4f1a2c6c3af531edc35e736e-image-1439596066108.png)\n![](https://images.code.org/24efcaa184d1fc852f37c32911b3b87c-image-1439596070178.png)\n![](https://images.code.org/c9a5d0fd5ba445b7f6b5744e08b50e49-image-1439596071878.png)\n![](https://images.code.org/f14e1b8dd722b0ca5bc54fa96b34f2eb-image-1439596074236.png)\n![](https://images.code.org/fe938c0c16453b9d461b4023098079df-image-1439596075744.png)\n![](https://images.code.org/02c88a7da51289b2f2d1f64bd8c97b28-image-1439596077514.png)\n![](https://images.code.org/309e3157dcfd91956181007f483f8e58-image-1439596079084.png)\n\n**Directions:**\n\n-
        \  Encode an image of anything you like using `binary`.\n-   The binary language
        will be represented with `0` and `1` only.\n-   You might want to do some
        planning and sketching with graph paper first. \n-   Depict something, perhaps
        your name written out, your initials, an icon or logo of some sort.\n-   Get
        creative! The image doesn't have to be a perfect square, it can be long and
        skinny."
      iceage_click_hello: "Bisakah Anda membantu Sid memanggil teman-temannya saat
        Anda mengkliknya? \nSetelah selesai, tekan \"Run\" untuk memainkannya.  Klik
        Sid untuk melihat keberhasilan kode Anda!"
      iceage_free_play: "Saatnya membuat permainan atau cerita Anda sendiri! \n\nKetika
        selesai, klik \"Finish\" untuk mengizinkan teman-teman mencoba permainan Anda
        lewat ponsel, tablet, atau komputer!\nTidak tahu harus membuat apa? Klik tips
        untuk perinciannya."
      iceage_hello1: "Sid (aktor 1) ingin mengundang semua orang untuk melakukan petualangan
        baru. Bisakah Anda membantunya mengucapkan \"Halo!\" dengan memindah keluar
        blok `say` dan menghubungkannya ke dasar event `when run`?   \n\nJangan lupa
        mengetik \"Halo!\" di dalamnya!"
      iceage_hello2: Manny (aktor 2) menemui Sid (aktor 1) dan ingin mengajaknya berpetualang.
        Bantu keduanya saling menyapa dengan menggunakan blok `actor ___ say` dua
        kali.
      iceage_move_events: "Scrat masih mencari akorn! \nBantu dia berlari cepat dengan
        menempelkan blok `move actor 1` ke masing-masing event dan mengubah arah bekerja
        untuk setiap tombol panah.\nKetika selesai, klik \"Run\" dan coba kumpulkan
        semua akorn."
      iceage_move_to_actor: Diego (aktor 1) sedang mencari Manny (aktor 2). Bisakah
        Anda membantu mempertemukan keduanya? Sambungkan sebuah blok ke event "when
        actor touches" untuk memunculkan suara ketika keduanya saling bertemu.
      iceage_move_to_flag: Scrat sedang mencari akorn! Bisakah Anda membantunya berjalan
        sejauh 200 piksel terakhir?
      iceage_repeat: Blok `repeat forever` memudahkan Anda menjalankan kode secara
        terus menerus. Bisakah Anda meletakkan blok-blok ke dalam blok tersebut untuk
        membantu Granny sedikit berolahraga dengan bergerak ke kiri dan ke kanan berkali-kali?
      iceage_sound_and_points: "Berikut adalah kode Anda dari puzzle terakhir, berikut
        kode untuk menggerakkan Granny ke kiri dan ke kanan. \nBisakah Anda menyelesaikan
        programnya begitu rupa sehingga Anda **memutar suara** sekaligus **mencetak
        poin** ketika Sid dan Granny bertabrakan? \nTekan \"Run\" untuk memutar permainan."
      iceage_throw_hearts: "Sid ingin memberi tahu neneknya, Granny, bahwa dia mencintainya.
        \  \n\nGunakan perintah `actor __ throw` untuk memerintahkan Sid (aktor 1)
        melempar hati ke Granny (aktor 2)!\nSetel suasana hati Granny ke bahagia ketika
        terkena lemparan hati."
      iceage_warn_ice_age: |-
        Semua orang harus bergerak cepat karena badai salju datang! Ubah pemandangan ke latar belakang salju dan setel kecepatan Sid (aktor 1) ke cepat.
        Tekan "Run" dan gerakkan Sid ke Diego untuk memperingatkannya.
      mike3bit: "# 3-Bit Color\n\n**Directions:**\n\n-   We start you with the 4x2
        image Maddie was creating, but we've left out the last few pixels. \n-   Finish
        off the image by figuring out which colors are missing and encoding them."
      mike3bitbird: "# 3-Bit Color\n\nHere's an example of an image made with 3-bit
        color. Try changing it to understand how it works. \n\n_If you want to reset
        the image, press \"Start Over\"._"
      mike3bitfreeplay: |-
        # 3-Bit Color

        You have one last chance to experiment and get creative with the pixelation widget. Make something awesome and share it with your classmates!

        -   _Hint:_ You can copy and paste the value of a pixel to use it repeatedly.
      mike3bitmario: "# 3-Bit Color\n\n**Challenge:** \n\nA careless binary coder
        typed in ONE extra 0 or 1 somewhere within this image's data. The extra bit
        that is causing Mario to glitch out! \n\nDelete the extra bit to restore Mario
        back to normal!\n\n![](<https://images.code.org/8b7c17ba204a1a4d33e1bd6de7f01d76-image-1477306657312.54.57
        AM.png>)"
      ramp_artist_loops1: |-
        Hari yang indah!

        Bantu si Artis menutup bunganya sebelum musim dingin dengan maju ke depan 60 piksel.
      ramp_artist_loops1_2018: |-
        Hari yang indah!

        Bantu si Artis menutup bunganya sebelum musim dingin dengan maju ke depan 60 piksel.
      ramp_artist_loops1_2019: |-
        Hari yang indah!

        Bantu si Artis menutup bunganya sebelum musim dingin dengan maju ke depan 60 piksel.
      ramp_artist_loops2: 'Tambahkan beberapa kecantikan dengan mengulangi langkah
        itu lima kali, mengubah menjadi warna acak di antara tiap gerakan. '
      ramp_artist_loops2_2018: 'Tambahkan beberapa kecantikan dengan mengulangi langkah
        itu lima kali, mengubah menjadi warna acak di antara tiap gerakan. '
      ramp_artist_loops2_2019: 'Tambahkan beberapa kecantikan dengan mengulangi langkah
        itu lima kali, mengubah menjadi warna acak di antara tiap gerakan. '
      ramp_artist_loops3: Gambar garis berwarna itu 5 kali lagi, kali ini menggunakan
        loop `repeat`.
      ramp_artist_loops3_2018: Gambar garis berwarna itu 5 kali lagi, kali ini menggunakan
        loop `repeat`.
      ramp_artist_loops3_2019: Gambar garis berwarna itu 5 kali lagi, kali ini menggunakan
        loop `repeat`.
      ramp_artist_loops4: Apa yang terjadi saat Anda menambah belokan ke kanan 72
        derajat setelah semuanya yang lain di dalam loop Anda?
      ramp_artist_loops4_2018: Apa yang terjadi saat Anda menambah belokan ke kanan
        72 derajat setelah semuanya yang lain di dalam loop Anda?
      ramp_artist_loops4_2019: Anda dapat membuat bintang ini dengan mengulang urutan
        blok `bergerak maju` dan `belok ke kanan sebesar 144 derajat`.
      ramp_artist_loops5: |-
        Loops membuat menulis kode mudah!

        Gunakan loops untuk menggambar tangga ini..

        -   Tiap anak tangga sepanjang 50 piksel dan setinggi 50 piksel
        -   Anda perlu berbelok 90 derajat ke tiap arah.
      ramp_artist_loops5_2018: |-
        Loops membuat menulis kode mudah!

        Gunakan loops untuk menggambar tangga ini..

        -   Tiap anak tangga sepanjang 50 piksel dan setinggi 50 piksel
        -   Anda perlu berbelok 90 derajat ke tiap arah.
      ramp_artist_loops5_2019: |-
        Loops membuat menulis kode mudah!

        Gunakan loops untuk menggambar tangga ini..

        -   Tiap anak tangga sepanjang 50 piksel dan setinggi 50 piksel
        -   Anda perlu berbelok 90 derajat ke tiap arah.
      ramp_artist_loops6: |-
        Tangga ini lebih besar, namun akan menggunakan jumlah kode yang sama seperti teka-teki terakhir!

        Betulkan loop ini untuk melengkapi teka-teki ini.
      ramp_artist_loops6_2018: |-
        Tangga ini lebih besar, namun akan menggunakan jumlah kode yang sama seperti teka-teki terakhir!

        Betulkan loop ini untuk melengkapi teka-teki ini.
      ramp_artist_loops6_2019: |-
        Tangga ini lebih besar, namun akan menggunakan jumlah kode yang sama seperti teka-teki terakhir!

        Betulkan loop ini untuk melengkapi teka-teki ini.
      ramp_artist_loops7: Carilah sebuah pola dan buatlah kode ini lebih pendek menggunakan
        loops!
      ramp_artist_loops7_2018: Carilah sebuah pola dan buatlah kode ini lebih pendek
        menggunakan loops!
      ramp_artist_loops7_2019: Carilah sebuah pola dan buatlah kode ini lebih pendek
        menggunakan loops!
      ramp_artist_loops8: "**Challenge** Carilah sebuah pola dan buatlah kode ini
        lebih pendek menggunakan loops."
      ramp_artist_loops8_2018: "**Challenge** Carilah sebuah pola dan buatlah kode
        ini lebih pendek menggunakan loops."
      ramp_artist_loops8_2019: "**Challenge** Carilah sebuah pola dan buatlah kode
        ini lebih pendek menggunakan loops."
      ramp_artist_loops9: Pecahkan teka-teki ini dengan menggambar sebuah persegi
        dengan 200 sisi piksel.
      ramp_artist_loops9_2018: Pecahkan teka-teki ini dengan menggambar sebuah persegi
        dengan 200 sisi piksel.
      ramp_artist_loops9_2019: Pecahkan teka-teki ini dengan menggambar sebuah persegi
        dengan 200 sisi piksel.
      simconfig: |-
        # Ubah dan Prediksi

        Ambil salah satu variabel yang mengendalikan simulasi ini untuk mengubah dan memprediksi cara itu akan mengubah hasil.

        Setelah Anda menulis prediksi, jalankan simulasi 5 kali dan tuliskan temuan Anda. Apakah prediksi Anda akurat?
      simstarter: |-
        # Mengumpulkan Data

        Jalankan simulasi ini 5 kali. Setiap kali, gunakan panduan aktivitas Mengumpulkan Data untuk mencatat:

        -   Berapa banyak apel yang dikumpulkan oleh gajah?
        -   Berapa banyak apel yang dikumpulkan oleh kuda nil?
        -   Berapa lama waktu yang digunakan untuk mengumpulkan semua apel?
