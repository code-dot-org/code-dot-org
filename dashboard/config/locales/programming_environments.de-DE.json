{
  "de-DE": {
    "data": {
      "programming_environments": {
        "applab": {
          "categories": {
            "advanced": {
              "name": "Erweitert"
            },
            "canvas": {
              "expressions": {
                "circle": {
                  "palette_params": {
                    "radius": {
                      "description": "Der Radius des Kreises in Pixeln."
                    }
                  }
                },
                "drawImage": {
                  "palette_params": {
                    "id": {
                      "description": "Die X-Position in Pixeln der oberen linken Ecke des zu zeichnenden Bildes."
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln der oberen linken Ecke des zu zeichnenden Bildes."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln der oberen linken Ecke des zu zeichnenden Bildes."
                    }
                  }
                },
                "getAlpha": {
                  "palette_params": {
                    "imageData": {
                      "type": "Objekt"
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    }
                  },
                  "short_description": "Gibt die Menge an Alpha (Opazität=Lichtundurchlässigkeit) (im Bereich von 0 bis 255) in der Farbe des Pixels zurück, das sich an der angegebenen X- und Y-Position in den angegebenen Bilddaten befindet."
                },
                "getBlue": {
                  "palette_params": {
                    "imageData": {
                      "type": "Objekt"
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    }
                  }
                },
                "getGreen": {
                  "palette_params": {
                    "imageData": {
                      "type": "Objekt"
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    }
                  }
                },
                "getImageData": {
                  "examples": {
                    "Example: Duplicate": {
                      "name": "Beispiel: Duplizieren"
                    }
                  },
                  "palette_params": {
                    "height": {
                      "description": "Die Höhe des umgebenden Rechtecks zur Erfassung der Bilddaten."
                    },
                    "width": {
                      "description": "Die Breite des umgebenden Rechtecks zur Erfassung der Bilddaten."
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, um die Aufnahme zu starten."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, um die Aufnahme zu starten."
                    }
                  }
                },
                "getRed": {
                  "palette_params": {
                    "imageData": {
                      "type": "Objekt"
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    }
                  }
                },
                "line": {
                  "examples": {
                    "Example: two lines": {
                      "name": "Beispiel: zwei Linien"
                    }
                  }
                },
                "putImageData": {
                  "palette_params": {
                    "imageData": {
                      "type": "Objekt"
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes, um die Daten auf der Leinwand zu platzieren."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes, um die Daten auf der Leinwand zu platzieren."
                    }
                  }
                },
                "rect": {
                  "palette_params": {
                    "height": {
                      "description": "Die vertikale Höhe des Rechtecks in Pixeln."
                    },
                    "width": {
                      "description": "Die horizontale Breite des Rechtecks in Pixeln."
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln der oberen linken Ecke des Rechtecks."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln der oberen linken Ecke des Rechtecks."
                    }
                  }
                },
                "setAlpha": {
                  "palette_params": {
                    "alphaValue": {
                      "description": "Die Menge an Alpha (Opazität) (von 0 bis 255), die im Pixel festgelegt werden soll."
                    },
                    "imageData": {
                      "type": "Objekt"
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    }
                  },
                  "short_description": "Legt den Alphawert (Opazität) (im Bereich von 0 bis 255) in der Farbe des Pixels fest, das sich an der angegebenen X- und Y-Position in den angegebenen Bilddaten befindet."
                },
                "setBlue": {
                  "palette_params": {
                    "blueValue": {
                      "description": "Die Menge an Blau (von 0 bis 255), die im Pixel eingestellt werden soll."
                    },
                    "imageData": {
                      "type": "Objekt"
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    }
                  },
                  "short_description": "Setzt den Blauanteil (im Bereich von 0 bis 255) in der Farbe des Pixels, das sich an der angegebenen X- und Y-Position in den angegebenen Bilddaten befindet, auf den BlueValue-Eingabebetrag."
                },
                "setGreen": {
                  "palette_params": {
                    "greenValue": {
                      "description": "Die Menge an Grün (von 0 bis 255), die im Pixel eingestellt werden soll."
                    },
                    "imageData": {
                      "type": "Objekt"
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    }
                  },
                  "short_description": "Setzt den Grünanteil (im Bereich von 0 bis 255) in der Farbe des Pixels, das sich an der angegebenen X- und Y-Position in den angegebenen Bilddaten befindet, auf den GreenValue-Eingabewert."
                },
                "setRGB": {
                  "palette_params": {
                    "alpha": {
                      "description": "Optional. Der Grad der Opazität (von 0 bis 255), der im Pixel eingestellt werden soll. Der Standardwert ist 255 (volle Opazität). (Opazität = Lichtundurchlässigkeit)"
                    },
                    "blue": {
                      "description": "Die Menge an Blau (von 0 bis 255), die im Pixel eingestellt werden soll."
                    },
                    "green": {
                      "description": "Die Menge an Grün (von 0 bis 255), die im Pixel eingestellt werden soll."
                    },
                    "imageData": {
                      "type": "Objekt"
                    },
                    "red": {
                      "description": "Die Anteil der Farbe Rot (von 0 bis 255), die im Pixel eingestellt werden soll."
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    }
                  }
                },
                "setRed": {
                  "palette_params": {
                    "imageData": {
                      "type": "Objekt"
                    },
                    "redValue": {
                      "description": "Die Anteil der Farbe Rot (von 0 bis 255), die im Pixel eingestellt werden soll."
                    },
                    "x": {
                      "description": "Die X-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    },
                    "y": {
                      "description": "Die Y-Position in Pixeln, beginnend mit der oberen linken Ecke des Bildes."
                    }
                  },
                  "short_description": "Setzt den Rotanteil (im Bereich von 0 bis 255) in der Farbe des Pixels, das sich an der angegebenen X- und Y-Position in den angegebenen Bilddaten befindet, auf den  Eingabe für redValue."
                }
              }
            },
            "circuit": {
              "expressions": {
                "buzzer.play": {
                  "palette_params": {
                    "notes": {
                      "type": "Liste"
                    }
                  }
                },
                "buzzer.playNotes": {
                  "palette_params": {
                    "notes": {
                      "type": "Liste"
                    }
                  }
                },
                "buzzer.playSong": {
                  "palette_params": {
                    "notes": {
                      "type": "Liste"
                    }
                  }
                },
                "lightSensor.start": {
                  "short_description": "lightSensor.start"
                },
                "lightSensor.value": {
                  "short_description": "lightSensor.value"
                },
                "soundSensor.value": {
                  "short_description": "soundSensor.value"
                },
                "tempSensor": {
                  "examples": {
                    "Thermometer": {
                      "name": "Thermometer"
                    }
                  }
                }
              }
            },
            "control": {
              "expressions": {
                "clearTimeout": {
                  "palette_params": {
                    "timeout": {
                      "description": "Der Wert, der von der setTimeout-Funktion zum Abbrechen zurückgegeben wird."
                    }
                  }
                },
                "setInterval": {
                  "palette_params": {
                    "ms": {
                      "description": "Die Anzahl der Millisekunden zwischen jeder Ausführung der Funktion."
                    }
                  }
                },
                "setTimeout": {
                  "palette_params": {
                    "ms": {
                      "description": "Die Anzahl der Millisekunden, die gewartet werden muss, bevor die Funktion ausgeführt wird."
                    }
                  }
                },
                "stopTimedLoop": {
                  "examples": {
                    "Countdown": {
                      "name": "Countdown"
                    }
                  }
                },
                "timedLoop": {
                  "palette_params": {
                    "callback": {
                      "type": "Funktion"
                    }
                  }
                }
              }
            },
            "data": {
              "expressions": {
                "createRecord": {
                  "palette_params": {
                    "record": {
                      "type": "Objekt"
                    }
                  }
                },
                "deleteRecord": {
                  "palette_params": {
                    "record": {
                      "type": "Objekt"
                    }
                  }
                },
                "drawChart": {
                  "palette_params": {
                    "options": {
                      "type": "Objekt"
                    }
                  }
                },
                "drawChartFromRecords": {
                  "palette_params": {
                    "options": {
                      "type": "Objekt"
                    },
                    "tableName": {
                      "description": "Der Name der Tabelle, aus der Datensätze abgerufen werden sollen."
                    }
                  }
                },
                "getKeyValue": {
                  "palette_params": {
                    "key": {
                      "description": "Der Name des Schlüssels (key), der abgerufen werden soll."
                    }
                  }
                },
                "getPrediction": {
                  "palette_params": {
                    "callback": {
                      "type": "Funktion"
                    }
                  }
                },
                "getUserId": {
                  "short_description": "Ruft eine eindeutige Kennung für den aktuellen Benutzer dieser App ab."
                },
                "onRecordEvent": {
                  "palette_params": {
                    "table": {
                      "description": "Der Name der Tabelle, für die dieser Event-Handler gilt."
                    }
                  }
                },
                "readRecords": {
                  "palette_params": {
                    "terms": {
                      "type": "Objekt"
                    }
                  }
                },
                "setKeyValue": {
                  "palette_params": {
                    "key": {
                      "description": "Der Name des Schlüssels, der gespeichert werden soll."
                    },
                    "value": {
                      "description": "Die zu speichernden Daten."
                    }
                  },
                  "short_description": "Speichert ein Schlüssel/Wert-Paar im Schlüssel/Wert-Datenspeicher von App Lab und ruft die Callback-Funktion auf, wenn die Aktion abgeschlossen ist."
                },
                "startWebRequest": {
                  "palette_params": {
                    "url": {
                      "description": "Die Webadresse eines Dienstes, der Daten zurückgibt."
                    }
                  }
                },
                "updateRecord": {
                  "palette_params": {
                    "record": {
                      "type": "Objekt"
                    }
                  }
                }
              },
              "name": "Daten"
            },
            "functions": {
              "name": "Funktionen"
            },
            "maker": {
              "expressions": {
                "createLed": {
                  "return_value": "Neues LED-Objekt"
                }
              }
            },
            "math": {
              "expressions": {
                "moduloOperator": {
                  "examples": {
                    "Odd or Even?": {
                      "name": "Gerade oder ungerade?"
                    }
                  }
                },
                "randomNumber": {
                  "palette_params": {
                    "max": {
                      "description": "Der größte Rückgabewert"
                    },
                    "min": {
                      "description": "Der kleinste Rückgabewert"
                    }
                  }
                },
                "randomNumber_min_max": {
                  "palette_params": {
                    "max": {
                      "description": "Der größte Rückgabewert"
                    },
                    "min": {
                      "description": "Der kleinste Rückgabewert"
                    }
                  }
                }
              },
              "name": "Mathematik"
            },
            "turtle": {
              "expressions": {
                "arcLeft": {
                  "short_description": "Bewegt die Schildkröte in einem gleichmäßigen und kreisförmigen Bogen vorwärts und nach links."
                },
                "getX": {
                  "short_description": "Ruft die aktuelle X-Koordinate der Schildkröte in Pixeln ab."
                },
                "getY": {
                  "short_description": "Ruft die aktuelle Y-Koordinate der Schildkröte in Pixeln ab."
                },
                "hide": {
                  "short_description": "Macht die Schildkröte an ihrem aktuellen Standort unsichtbar."
                },
                "move": {
                  "palette_params": {
                    "x": {
                      "description": "Die Anzahl der Pixel, um die Schildkröte nach rechts zu bewegen."
                    },
                    "y": {
                      "description": "Die Anzahl der Pixel, um die Schildkröte nach unten zu bewegen."
                    }
                  }
                },
                "moveBackward": {
                  "short_description": "Verschiebt die Schildkröte um eine bestimmte Anzahl von Pixeln aus der aktuellen Richtung rückwärts."
                },
                "moveForward": {
                  "short_description": "Verschiebt die Schildkröte um eine bestimmte Anzahl von Pixeln in die aktuelle Richtung vorwärts."
                },
                "moveTo": {
                  "short_description": "Verschiebt die Schildkröte an eine bestimmte (x, y) Position auf dem Bildschirm."
                },
                "penColor": {
                  "short_description": "Legt die Farbe des Stifts fest, mit dem die Schildkröte Linien und Punkte zeichnet."
                },
                "penDown": {
                  "short_description": "Setzt den Stift auf, sodass die Schildkröte eine Linie hinter sich zieht, während sie sich bewegt."
                },
                "penRGB": {
                  "short_description": "Legt anhand von RGBA-Werten die Farbe des Stifts fest, mit dem die Schildkröte Linien und Punkte zeichnet."
                },
                "penUp": {
                  "short_description": "Hebt den Stift hoch, sodass die Schildkröte keine Linie zeichnet, wenn sie sich bewegt."
                },
                "penWidth": {
                  "short_description": "Legt die Breite der Linie in Pixeln fest, die die Schildkröte hinter sich zieht, wenn sie sich bewegt."
                },
                "show": {
                  "short_description": "Macht die Schildkröte an ihrem aktuellen Standort sichtbar."
                },
                "speed": {
                  "short_description": "Legt die Geschwindigkeit für die Ausführung der App fest, das gilt auch für die Geschwindigkeit der Schildkröte."
                },
                "turnLeft": {
                  "examples": {
                    "Example: House": {
                      "name": "Beispiel: Haus"
                    }
                  },
                  "short_description": "Dreht die Schildkröte um den angegebenen Winkel nach links. Die Position der Schildkröte bleibt dieselbe."
                },
                "turnRight": {
                  "short_description": "Dreht die Schildkröte um den angegebenen Winkel nach rechts. Die Position der Schildkröte bleibt dieselbe."
                },
                "turnTo": {
                  "short_description": "Ändert die Richtung der Schildkröte um einen bestimmten Winkel. 0 ist oben, 90 ist rechts, 180 ist unten und 270 ist links."
                }
              }
            },
            "ui_controls": {
              "expressions": {
                "button": {
                  "short_description": "Erstellt eine Schaltfläche auf dem Bildschirm, auf der ein Text an der Standardposition (0,0) angezeigt wird, welcher von der angegebenen ID bereitgestellt und referenziert wurde."
                },
                "onEvent": {
                  "examples": {
                    "Shrink and Grow": {
                      "name": "Vergrößern und verkleinern"
                    }
                  },
                  "palette_params": {
                    "callback": {
                      "type": "Funktion"
                    }
                  }
                },
                "playSound": {
                  "examples": {
                    "Making Music": {
                      "name": "Musik machen"
                    }
                  },
                  "short_description": "Spielt eine MP3-Audio-Datei von der angegebenen URL."
                },
                "setProperty": {
                  "palette_params": {
                    "property": {
                      "description": "Die Eigenschaft, die geändert wird."
                    }
                  },
                  "short_description": "Setzt eine Eigenschaft auf einen neuen Wert für das angegebene Element."
                },
                "setScreen": {
                  "short_description": "Setzt den Bildschirm auf die angegebene ScreenID."
                },
                "showElement": {
                  "short_description": "Zeigt das Element mit der angegebenen ID an."
                },
                "textLabel": {
                  "short_description": "Erstellt eine Textbeschriftung auf dem Bildschirm an der Standardposition (0,0), in der der von der angegebenen ID bereitgestellte und referenzierte Text angezeigt wird."
                }
              }
            },
            "variables": {
              "expressions": {
                "addPair": {
                  "return_value": "Keiner"
                },
                "assign_x": {
                  "examples": {
                    "Fibonacci": {
                      "name": "Fibonacci"
                    }
                  }
                },
                "declareAssign_list_123": {
                  "short_description": "Deklariere ein Array und weise es einer Variablen zu"
                },
                "declareAssign_object": {
                  "examples": {
                    "Choose Your Own Adventure": {
                      "name": "Wähle dein eigenes Abenteuer"
                    }
                  }
                },
                "includes": {
                  "palette_params": {
                    "searchValue": {
                      "description": "Die Zeichenfolge, nach der gesucht werden soll."
                    }
                  }
                },
                "indexOf": {
                  "palette_params": {
                    "searchValue": {
                      "description": "Die Zeichenfolge, nach der gesucht werden soll."
                    }
                  }
                },
                "length": {
                  "return_value": "Die Länge der Zeichenfolge"
                }
              },
              "name": "Variablen"
            }
          },
          "description": "App-Lab ist eine Programmierumgebung, wo man einfache apps machen kann. Entwerfe eine Anwendung/App, Code mit Blöcken oder JavaScript damit es funktioniert, dann teile die App in Sekunden.",
          "name": "App-Labor"
        },
        "gamelab": {
          "categories": {
            "control": {
              "expressions": {
                "setInterval": {
                  "palette_params": {
                    "ms": {
                      "description": "Die Anzahl der Millisekunden zwischen jeder Ausführung der Funktion."
                    }
                  }
                },
                "setTimeout": {
                  "palette_params": {
                    "ms": {
                      "description": "Die Anzahl der Millisekunden, die gewartet werden muss, bevor die Funktion ausgeführt wird."
                    }
                  }
                }
              }
            },
            "drawing": {
              "expressions": {
                "shape": {
                  "examples": {
                    "Star": {
                      "name": "Stern"
                    }
                  }
                }
              },
              "name": "Zeichnung"
            },
            "functions": {
              "name": "Funktionen"
            },
            "game_lab": {
              "expressions": {
                "mouseIsOver": {
                  "palette_params": {
                    "sprite": {
                      "type": "Sprite"
                    }
                  }
                },
                "mousePressedOver": {
                  "palette_params": {
                    "sprite": {
                      "type": "Sprite"
                    }
                  }
                },
                "mouseWentDown": {
                  "examples": {
                    "Black and White": {
                      "name": "Schwarzweiß"
                    }
                  }
                },
                "playSound": {
                  "examples": {
                    "Making Music": {
                      "name": "Musik machen"
                    }
                  },
                  "short_description": "Spielt eine MP3-Audio-Datei von der angegebenen URL."
                },
                "showMobileControls": {
                  "content": "Ändert die mobilen Steuerelemente, die unter dem Spielfeld sichtbar sind.",
                  "short_description": "Ändert die mobilen Steuerelemente, die unter dem Spielfeld sichtbar sind."
                }
              },
              "name": "Spielelabor"
            },
            "groups": {
              "expressions": {
                "add": {
                  "palette_params": {
                    "sprite": {
                      "type": "Sprite"
                    }
                  }
                },
                "contains": {
                  "palette_params": {
                    "sprite": {
                      "type": "Sprite"
                    }
                  }
                },
                "remove": {
                  "palette_params": {
                    "sprite": {
                      "type": "Sprite"
                    }
                  }
                },
                "setColorEach": {
                  "palette_params": {
                    "color": {
                      "type": "Farbe"
                    }
                  }
                },
                "setTintEach": {
                  "palette_params": {
                    "color": {
                      "type": "Farbe"
                    }
                  }
                }
              },
              "name": "Gruppen"
            },
            "math": {
              "expressions": {
                "randomNumber": {
                  "palette_params": {
                    "max": {
                      "description": "Der größte Rückgabewert"
                    },
                    "min": {
                      "description": "Der kleinste Rückgabewert"
                    }
                  }
                },
                "randomNumber_min_max": {
                  "palette_params": {
                    "max": {
                      "description": "Der größte Rückgabewert"
                    },
                    "min": {
                      "description": "Der kleinste Rückgabewert"
                    }
                  }
                }
              },
              "name": "Mathematik"
            },
            "sprites": {
              "expressions": {
                "getSpeed": {
                  "examples": {
                    "Spiral": {
                      "name": "Spirale"
                    }
                  }
                },
                "sprite.height": {
                  "return_value": "Die Höhe des Sprites."
                },
                "sprite.width": {
                  "return_value": "Die Breite des Sprites."
                }
              },
              "name": "Sprites"
            },
            "variables": {
              "expressions": {
                "includes": {
                  "palette_params": {
                    "searchValue": {
                      "description": "Die Zeichenfolge, nach der gesucht werden soll."
                    }
                  }
                },
                "indexOf": {
                  "palette_params": {
                    "searchValue": {
                      "description": "Die Zeichenfolge, nach der gesucht werden soll."
                    }
                  }
                },
                "length": {
                  "return_value": "Die Länge der Zeichenfolge"
                }
              },
              "name": "Variablen"
            }
          },
          "name": "Spielelabor"
        },
        "javalab": {
          "name": "Java-Labor"
        },
        "spritelab": {
          "categories": {
            "actions": {
              "name": "Aktionen"
            },
            "behaviors": {
              "name": "Verhaltensweisen"
            },
            "comments": {
              "name": "Kommentare"
            },
            "events": {
              "name": "Ereignisse"
            },
            "functions": {
              "name": "Funktionen"
            },
            "location": {
              "name": "Orte"
            },
            "logic": {
              "name": "Logik"
            },
            "loops": {
              "name": "Schleifen"
            },
            "math": {
              "name": "Mathematik"
            },
            "sprites": {
              "name": "Sprites"
            },
            "text": {
              "name": "Text"
            },
            "variables": {
              "name": "Variablen"
            },
            "world": {
              "name": "Welt"
            }
          },
          "name": "Sprite Lab"
        },
        "weblab": {
          "categories": {
            "html_tags": {
              "name": "HTML-Tags"
            }
          },
          "description": "Web basierter HTML/CSS-Editor.",
          "name": "Web Lab"
        }
      }
    }
  }
}