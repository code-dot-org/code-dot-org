"fil":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Maligayang pagdating sa iyong unang oras ng code! Halina at umpisahan
          natin kaagad ang iyong unang tikim sa programming.
      2:
        image: notes/hoc1_2.jpg
        text: Ang gagamitin natin ay Blockly, isang visual na programming language
          kung saan maaari kang mag-drag at mag-drop ng mga block upang makapagsulat
          ng code.
      3:
        image: notes/hoc1_3.jpg
        text: Halos lahat ng code ay tina-type, ngunit ang Blockly ay visual. Bawat
          mga block ay tumutugon sa isang linya ng "tunay" na code.
      4:
        image: notes/hoc1_4.jpg
        text: Matututuhan mo ang pundasyon ng computer science, mga konsepto na ginagamit
          kahit saan mula sa paggawa ng apps hanggang sa pagkontrol ng Mars rover.
      5:
        image: notes/hoc1_5.jpg
        text: Ang program ay grupo ng mga instruksiyon upang sundin ng iyong computer.
      6:
        image: notes/hoc1_6.jpg
        text: Ang layunin ng iyong unang programa ay upang makalusot ang isang Angry
          Bird sa isang maze at matumbok ang isang Green Pig.
      7:
        image: notes/hoc1_7.jpg
        text: Ang kaliwang bahagi ay ang maze kung saan ang iyong programa ay tumakbo.
          Ang mga instruction para sa bawat palaisipan ay nasa ibaba ng maze.
      8:
        image: notes/hoc1_8.jpg
        text: Ang gitnang toolbox ay may mga command para sa Angry Bird. Magagamit
          mo ang mga ito upang bumuo ng iyong code.
      9:
        image: notes/hoc1_9.jpg
        text: Sa iyong kanan makikita ang magsisilbing lugar ng iyong proyekto kung
          saan maari mong mailagay ang mga blocks na naihugot mula sa toolbox para
          sa iyong proyekto. Upang burahin ang block, hugutin ito papunta sa basurahan
          sa sulok.
      10:
        image: notes/hoc1_10.jpg
        text: Bawat bloke ay isang instruksyon. Kung mag-drag ka ng "move forward"
          na bloke sa iyong workspace at magpindut ng "Run Program", ang ibon ay gagalaw
          na isang patlang sa maze.
      11:
        image: notes/hoc1_11.jpg
        text: Para makagawa ng higit sa isang aksyon, maaari kang mag-drag ng maraming
          mga bloke sa iyong workspace at idikit ang mga ito ng sama-sama. Gagawin
          ng ibon ang mga utos mula sa taas hanggang sa ibaba.
      12:
        image: notes/hoc1_12.jpg
        text: Kung ikaw ay nagpatakbo sa programa at gusto mo itong ayusin at muling
          subukan, pindutin ang "Reset" na button.
      13:
        image: notes/hoc1_13.jpg
        text: Halina at hulihin natin ang mga baboy!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hi, ako si JR! Kailangan ng bawat race car team ang mga computer scientist
          upang manalo. Kailangan nilang pagaralan ang mga nakolektang impormasyon
          mula sa sasakyan upang mapabilis ito.
      2:
        image: notes/stage5_2.jpg
        text: Sa mga palaisipang ito, ikaw ay maging isang artista na gumuguhit ng
          isang linya sa likuran nila kahit saan man sila magpunta.
      3:
        image: notes/stage5_3.jpg
        text: Ang blokeng ito ay nagsasabing "move forward by 100 pixels." Ang pixel
          ay isang maliit na tuldok sa iyong screen.
      4:
        image: notes/stage5_4.jpg
        text: Ang blokeng ito na nagsasabing "turn right by 90 degrees." Ito ay magpapaikot
          sa iyong artista ng parehong halaga na nasa "turn" na mga bloke sa loob
          ng maze na palaisipan.
      5:
        image: notes/stage5_5.jpg
        text: I-click ang arrow sa alinman sa mga blokeng ito para mabago ang halaga
          nang pagsulong at pagliko ng artista. Paglaruan para maging pamilyar sa
          mga bagong mga bloke na ito.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hi, ako si Paola! Sa mga puzzles na ito, ikaw ay magsasaka na nangangailangang
          maipatag ang iyong lupain upang ikaw ay makapagumpisang magtanim.
      2:
        image: notes/stage9_2.jpg
        text: Tulungan mo siya na alisin ang mga tumpok ng dumi at barahin ang mga
          butas sa lupa.
      3:
        image: notes/stage9_3.jpg
        text: Ang mga bagong bloke ay nagtatanggal ng 1 palang dumi mula sa tumpok
          at magpunan ng 1 palang dumi sa butas.
      4:
        image: notes/stage9_4.jpg
        text: Ang mga tumpok at mga butas ay iba-iba ang laki, kaya dapat mong pagsabihan
          ang magsasaka kung ilang pala ang gagamitin.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hi, ako si Katie! Isa sa mga nakaka-excite na bagay tungkol sa computer
          science ay ang pagiging interactive ng computer program.
      2:
        image: notes/flappy02.jpg
        text: Anumang oras na may mag-click o magtapik o mag-type sa kompyuter o telepono,
          na nagpatakbo ng isang EVENT, at may ilang code din na nagpasya kung ano
          ang gagawin kapag nangyari ang isang EVENT.
      3:
        image: notes/flappy03.jpg
        text: 'Halimbawa, maaari kang magkaroon ng EVENT-HANDLER na nagsasabing "kung
          ang mouse ay na-click, magpapatunog ng tunog" '
      4:
        image: notes/flappy04.jpg
        text: Narinig mo na ba ang larong FlappyBird? Sa pamamagitan ng Event handlers,
          matututunan nating gumawa ng sarili nating FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Ang code na isusulat mo ay may kinalaman sa pagkaladkad at pagpababa
          ng mga bloke na kumakatawan sa mga utos para sa kompyuter. Sa likod nito,
          bawat bloke ay kinakatawan ang tunay na code.
      6:
        image: notes/flappy06.jpg
        text: 'Kung tingnan mo ang workspace, may mga ilang berdeng mga bloke na nilagay
          para sa iyo - ang mga ito ay tinatawag na mga "event handler" '
      7:
        image: notes/flappy07.jpg
        text: Kung gusto mo ang ibon na mag-FLAP pag na-CLICK mo ang mouse, maaari
          mo itong magawa sa pamamagitan ng paglakip ng "FLAP" na bloke sa angkop
          na event handler, at ngayon sa laro mo, tuwing mapindot ang mouse, ang ibon
          ay magpagaspas.
      8:
        image: notes/flappy08.jpg
        text: Sa bawat palaisipan ng aktibididad na ito, ipapakilala namin ang mga
          bagong tipo ng mga kaganapan bilang mga berdeng bloke sa workspace, at maaari
          kang magpasya kung anong angkop na mga bloke ang idadagdag bilang tugon
          sa mga pangyayaring iyon.
      9:
        image: notes/flappy09.jpg
        text: Kapag nakakita ka na ng drop down arrow gaya nito, ibig sabihin nito
          maaari mo nang baguhin ang mga setting - gaya ng tunog na ipapatunog kapag
          lumapag na sa lupa si flappy.
      10:
        image: notes/flappy10.jpg
        text: Sa huling palaisipan, maaari kang makalikha ng sariling mong laro ang
          magbahagi nito sa iyong mga kaibigan! Magsaya!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hi, ako si Mark! Pag-aralan natin ang tungkol sa mga loop. Sa paggamit
          ng mga loop maaari mong sabihan ang iyong kompyuter na mag-ulit ng anumang
          grupo ng mga aksyon nang paulit-ulit, libu-libo or kahit bilyun-bilyong
          beses.
      2:
        image: notes/hoc2_2.jpg
        text: Sa palaisipang ito, nais nating pagalawin ang ibon pasulong nang 5 puwang
          para makarating sa mga baboy.
      3:
        image: notes/hoc2_3.jpg
        text: Magagamit na natin ang bagong "repeat" na bloke para makatulong sa atin.
      4:
        image: notes/hoc2_4.jpg
        text: Sa halip na i-drag palabas ang 5 "move forward" na mga bloke...
      5:
        image: notes/hoc2_5.jpg
        text: Maaari nating ilagay ang "move forward" na bloke sa loob ng "repeat"
          na bloke at isulat ang numero sa bloke para sabihan ito kung ilang beses
          ito uulitin.
      6:
        image: notes/hoc2_6.jpg
        text: 'At ito ay mahalaga: maaari kang maglagay ng higit sa isang utos sa
          loob ng "repeat" na bloke.'
      7:
        image: notes/hoc2_7.jpg
        text: Masiyahan sa paggamit ng iyong bagong "repeat" na bloke!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hi, ako si Chris. Bago ako sumali sa Miami Heat, ako ay nag-aral ng
          Computer Science sa Georgia Tech. Subukan natin ang ating bagong bloke,
          ang "repeat until" na bloke.
      2:
        image: notes/hoc3_2.jpg
        text: Paano kung hindi natin alam kung gaano kalayo ang lalakarin ng ibon
          para makapunta sa baboy?
      3:
        image: notes/hoc3_3.jpg
        text: Kung maglagay tayo ng "move forward" na bloke sa loob ng "repeat until"
          na bloke, ang ibon ay gagalaw pasulong HANGGANG umabot ito sa baboy (o mabangga
          sa pader).
      4:
        image: notes/hoc3_4.jpg
        text: 'At ito ay mahalaga: gaya ng dati, maaari tayong maglagay ng maraming
          mga bloke sa loob ng "repeat until" na bloke, at silang lahat ay uulitin.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Kumusta! Ako si Juan. Tayo ay matuto ng mga bagong panimulang konsepto:
          "If" statements. Ganito kung paano ang mga computer ay nakakapag desisyon.'
      2:
        image: notes/hoc4_2.jpg
        text: Ikaw ay gumagamit ng mga "if" na pahayag araw-araw. Bago ka lumabas
          tuwing umaga, sasabihin mo na kung umuulan sa labas, kailangan mong magsuot
          ng diyaket.
      3:
        image: notes/hoc4_3.jpg
        text: Maaari nating sabihan ang mga zombie na mag-suri KUNG may dadaanan sa
          kaliwa, at kung makakahanap siya ng dadaanan sa kaliwa, maari natin siyang
          ipabaling sa direksyong iyon.
      4:
        image: notes/hoc4_4.jpg
        text: Para makasulat ng code para dito, i-drag natin palabas ang ating "if"
          na bloke at maglagay ng "turn left" na bloke sa loob nito.
      5:
        image: notes/hoc4_5.jpg
        text: Ngayon, kung maglagay tayo ng "move forward" na bloke sa taas nito at
          isang "repeat" na bloke sa paligid ng lahat, bawat beses na gumalaw ang
          zombie, susuriin niya kung mayroong daan sa kaliwa at liliko ito doon. Ang
          "repeat" na utos ay kritical, para masuri kung may mabalingan sa bawat hakbang.
      6:
        image: notes/hoc4_6.jpg
        text: Ang mga 'if statements' ay lubhang importante sa computer science. Isa
          sa mga unang programa na naisulat ko ay isang tic-tac-toe na laro, at mayroon
          itong if statement na nagsasabi na KUNG ang isang tao ay malapit ng manalo,
          haharangin niya ang dako kung saan sila ay mananalo.
      7:
        image: notes/hoc4_7.jpg
        text: Magsaya sa paggamit ng "if" na bloke!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hi, ang aking pangalan ay Saloni. Gumagamit ako ng computer science
          para makatulong sa paglutas ng mga problema sa kalusugan at medisina. Pag-aaralan
          natin ang "if else" na bloke. Kamukha lang ito ng "if" na bloke, ngunit
          may ekstrang bahagi ito sa huli na nagsasabing "else".
      2:
        image: notes/hoc5_2.jpg
        text: Kung maglalagay ako ng "move forward" na bloke sa lugar kung saan nagsasabi
          ng "do" at ang "turn left" na bloke kung saan nagsasabi ng "else", ibig
          sabihin nito na ang zombie ay pipili sa dalawang opsyon. Kung mayroong daan
          sa unahan, ang zombie ay lalakad pasulong, at kung hindi (walang daan sa
          unahan), ang zombie ay liliko sa kaliwa.
      3:
        image: notes/hoc5_3.jpg
        text: Tulad ng "if" na bloke, maaari tayong maglagay ng "if else" na mga bloke
          sa loob ng mga "repeat" na bloke para ang zombie ay manatiling maglakad
          at ang "if else" na bloke ay magsusuri kung may lugar ba na pwedeng balingan.
      4:
        image: notes/hoc5_4.jpg
        text: Ngayon, dalhin ang mga zombing iyon kung saan sila kabilang!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Ang if-else na pahayay ay isang desisyon sa pagitan ng dalawang bagay.
          Tingnan natin kung paano natin magagamit ang if-else na pahayag gamit ang
          ating kaibigan na si Scrat, ang iskwirel.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Ang blokeng ito ay kamukha lang ng "if" na bloke, ngunit mayroon itong
          ekstrang parte sa baba na nagsasabing "else". Kung maglagay ako ng "move
          forward" na bloke kung saan nagsasabi ng "do" at ang "turn left" na bloke
          kung saan nagsasabi ng "else", ibig sabihin nito na si Scrat, ang iskwirel
          ay lalakad pasulong kung may daanan sa unahan. Kung wala, liliko pakaliwa
          si Scrat.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Ito ay gumagawa ng desisyon at gagawin nya ang isa sa dalawang askyon
          ayon sa desisyong iyon. At gaya ng "if" na mga bloke, maaari kang maglagay
          ng mga "if-else" na bloke sa loob ng "repeat" na mga bloke.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Ngayon, tutulungan natin si Scrat, ang iskwirel, na makuha ang bungang
          iyon!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hi, ako si Brina, isang inhinyero sa Instagram. Ang function ay isang
          linya ng code na nais mong gamitin ng paulit-ulit, kaya sa halip na isulat
          mo ito sa bawat oras na gusto mo itong gamitin, maari kang gumamit ng isang
          bloke lang.
      2:
        image: notes/stage13_2.jpg
        text: Tayo ay mag-aaral kung paano maglarawan ng mga functions. Ang paglalarawan
          ng function ay mayroong bituin sa sulok. Ang pangalan ng function ay nakasulat
          sa taas ng linya.
      3:
        image: notes/stage13_3.jpg
        text: Ang mga bloke na papasok sa loob ng paglalarawan ay nagsasabi kung ano
          ang gagawin nito. Kaya ang depinisyon ng function ay tinatawag na "fill
          5" at ito ay binubuo ng "repeat" na bloke at "fill" na bloke.
      4:
        image: notes/stage13_4.jpg
        text: Ang kahulugan ay nandoon lang sa workspace, ngunit ang ating magsasaka
          ay hindi makapatakbo ng function hanggang i-drag natin palabas ang ating
          "fill 5" na function na bloke mula sa kategorya ng mga function.
      5:
        image: notes/stage13_5.jpg
        text: Halina't ibalik natin ang "fun" sa "FUNction!" 
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hi, ako si Makinde! Pag-aralan natin ang tungkol sa "while block." '
      2:
        image: notes/stage9_6.jpg
        text: Ang "while block" ay gagawa ng anumang ilalagay natin sa loob BASTA
          ang pahayag sa itaas ay TRUE.
      3:
        image: notes/stage9_7.jpg
        text: Halimbawa, kung ang magsasaka ay nakatayo sa isang tumpok, siya ay magpapatuloy
          sa pagtanggal ng 1 palang lupa HANGGANG may tumpok pa sa baba niya.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hi, ako si Trina at nagtatrabaho ako sa Pixar. Ang Shrek ay kasali sa
          napakaraming pelikula na itrinabaho ko.
      2:
        image: notes/stage11_2.jpg
        text: Ito ang aming bagong "counter" na loop. Ito ay magsasagawa ng mga aksyon
          nang paulit-ulit at maaari mong baguhin nang kaunti ang mga aksyon sa bawat
          oras.
      3:
        image: notes/stage11_3.jpg
        text: Sa halimbawang ito, ang ating "counter" na loop ay nagsasabing "magbilang
          gamit ang counter mula 50 hanggang sa 90 sa pamamagitan ng 10" at sa loob
          nito nandoon ang ating "draw a square" na bloke. I-drag ang "counter" na
          bloke mula sa "Variables" na seskyon papunta sa "length" na lugar.
      4:
        image: notes/stage11_4.jpg
        text: Ibig sabihin nito na ang artista ay guguhit ng parisukat na may 50 pixels
          ang haba ng gilid, pagkatapos magdadagdag ito ng 10 dito at guguhit ulit
          ng 60 pixel na haba ng gilid. Pagkatapos ay manatili itong magdagdag ng
          10 at magguhit ng mga parisukat hanggang sa aaabot ito sa 90. Kaya magkakaroon
          tayo ng parisukat na 50, 60, 70, 80, at 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hi, ako si Janete at ako ay engineer sa Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Paano kung dusto nating gumuhit ng isang bungkos ng mga tatsulok at
          gawin ang haba nila sa iba't ibang mga laki?
      3:
        image: notes/stage15_3.jpg
        text: Maaari nating isulat ang lahat ng code nito gamit ang kamay o maari
          tayong gumamit ng isang function na may mga parameters.
      4:
        image: notes/stage15_4.jpg
        text: Para magawa ito, mag-click sa asul na butuin na nasa "draw a triangle"
          na pag-dedefine ng function. Pagkatapos i-drag ang "input name" sa loob
          ng "input" na bloke.
      5:
        image: notes/stage15_5.jpg
        text: Pagkatapos kung magsusulat ka ng "length" sa lugar kung saan nagsasabi
          ito na "x" at magpindot ng "Enter", makakalikha ka ng isang lengh input
          para sa iyong function.
      6:
        image: notes/stage15_6.jpg
        text: Pagkatapos ay mag-click sa bituin. Ngayon, gusto mong i-click ang mga
          kategorya ng variable at i-drag ang "length" na bloke sa "move forward"
          na bloke ng iyong pagbigay-kahulugan sa iyong function. At i-drag ito palayo
          sa lumang numero na bloke.
      7:
        image: notes/stage15_7.jpg
        text: Para magamit ang iyong function na may mga parameters, i-click ang kategorya
          ng mga functions at i-drag palabas ang iyong "draw a triangle with length"
          na function.
      8:
        image: notes/stage15_8.jpg
        text: Ngayon maaari mo nang gamitin ang matematika na bloke para mag-input
          ng iba-ibang numero para makaguhit ng tatsulok na may iba't ibang laki.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Maligayang bati! Sa huling palaisipan na nalutas mo, nakakasulat ka
          na ng code na maaring makapagsabi sa robot kung paano niya mahanap ang daan
          sa pamamagitan ng isang non-branching na maze o tunel na anuman ang haba,
          kahit ito ay isa mang zombie, ibon, rovers ng mars, or kahit na ang mga
          kotse na sariling nagmamaneho.
      2:
        image: notes/hoc6_2.jpg
        text: Ang pinakapangunahing konsepto na ginamit mo ay nasa puso ng bawat programa
          o app na masubukan mo. Natutunan natin ang tungkol sa repeat loops, repeat
          until na mga pahayag, if na mga pahayag, at if else na mga pahayag.
      3:
        image: notes/hoc6_3.jpg
        text: Kung nagustuhan mo ang iyong unang hour of code, bumisita sa code.org
          at ipagpatuloy ang iyong pag-aaral sa computer science! Kapag nakompleto
          mo na ang 20 oras na kurso, malamang bihasa ka na sa mga pangunahing konsepto
          ng pagproprogram, at maaari ka nang magsimulang mag-aral kung paano magsulat
          ng mga app sa telepono, mga instruksyon sa robot, mga laro, kahit ano.
      4:
        image: notes/hoc6_4.jpg
        text: 'Ang teknolohiya ang nagbabago sa lahat ng ginagawa natin at hindi mahalaga
          kung bata ka man o matanda: ang pag-program ay masaya, malikhain at kahit
          sinuman ay maaaring matuto!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Ipakita ang mga tala na paparating!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hi, ang aking pangalan ay Lyndsey. Ako ay nagmodelo, naggawa at nagsulat
          ng sarili kong mga app. Gagamit tayo ng code para makasama tayo kay Anna
          at Elsa habang nililibot nila ang mahika at ang kagandahan ng yelo.
      2:
        image: notes/frozen1_2.jpg
        text: Lilikha ka nga mga snowflakes at mga disenyo habang nag ice skate ka
          at gagawa tayo ng isang winter wonderland na maaari mong ibahagi sa iyong
          mga kaibigan.
      3:
        image: notes/frozen1_3.jpg
        text: Sa susunod na oras, matutunan mo ang mga pangunahing konsepto kung paano
          mag-code. Ang tradisyonal na pagprogram ay kadalasang nasa teksto, ngunit
          gagamit tayo ng Blockly, na gumagamit ng mga visual na bloke na maaari mong
          i-drag and drop para makasulat ng mga programa. Ito ang paraan para matuto
          sa pangunahing konsepto kahit na ang mga estudyante ng mga unibersidad.
          Sa likod nito, naglilikha ka pa rin ng code.
      4:
        image: notes/frozen1_4.jpg
        text: Ang program ay isang grupo ng mga instruksyon na nagsasabi sa kompyuter
          kung ano ang gagawin nito. Gagawa tayo ng code, o isang programa, na makakatulong
          kay Elsa sa paglikha ng isang simpleng linya. Gagamitin natin ito mamaya
          para sa paglikha ng mas kompikadong mga disenyo.
      5:
        image: notes/frozen1_5.jpg
        text: Ang iyong screen ay nahati sa tatlong pangunahing bahagi. Sa kaliwa,
          ay ang ibabaw ng yelo kung saan mo papatakbuhin ang iyong programa. Ang
          instruksyon sa bawat antas ay nakasulat sa baba ng yelo.
      6:
        image: notes/frozen1_6.jpg
        text: Ang gitnang lugar na ito ay isang toolbox, at bawat isa sa mga blokeng
          ito ay isang aksyon na maaaring gawin ni Elsa at ni Anna.
      7:
        image: notes/frozen1_7.jpg
        text: Ang white space sa kanan ay ang tinatawag na workspace, at ito ay kung
          saan natin magagawa ang ating programa. Para makagalaw sa paligid ng yelo,
          gagamit ka ng "Move Forward" na bloke.
      8:
        image: notes/frozen1_8.jpg
        text: Dito, ang "Move Forward" na bloke ay nagsasabi, "kumilos pasulong ng
          100 pixels." Kapag napindot natin ang "Run", ano ang mangyayari? Si Elsa
          ay kikilos pasulong sa isang tiyak na halaga sa screen, 100 pixels sa totoo
          lang. Ang pixels ay isang napakaliit na mga parisukat sa iyong screen ng
          kompyuter.
      9:
        image: notes/frozen1_9.jpg
        text: Ang isa pang bloke na mayroon tayo sa palaisipang ito ay nagsasabing
          "lumiko pakanan mga 90 degrees." At kung gagamitin natin itong "Turn Right"
          na bloke, napapaliko nito si Elsa sa isang tiyak na halaga. Maaari kang
          maglaro muna ang tingnan kung gaano kalaki ang gusto mong lilikuan ni Elsa.
          Ang anggulo ay sinusukat mula sa daanan sa harap ni Elsa. Kaya, ito ay isang
          90 degree na pagliko. At ito naman ay 120 degree na pagliko.
      10:
        image: notes/frozen1_10.jpg
        text: Tandaan, na maaari mong palitan ang bilang ng pixel at degrees sa pamamagitan
          ng pag-click sa mga arrows na kasunod nila.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hi, ako si Paola! Ang mga kompyuter ay mahusay sa pag-uulit ng mga askyon.
          Maaari kang magbilang hanggang sa 10, 20, o 100. Ngunit ang kompyuter ay
          maaaring magbilang hanggang sa isang bilyon o trilyon. Hindi ito tinatamad
          at aabot lang ito ng ilang segundo. Pagbibilang man ito, o pagdodrowing,
          or kahit na ano- ang mga kompyuter ay maaring mag-ulit sa mga bagay-bagay
          nang isang daan o kahit isang bilyong beses.
      2:
        image: notes/frozen2_2.jpg
        text: Sa pag-program, tinatawag natin itong loop. Ang loop ay ang paraan para
          ulitin natin ang ating code ng paulit-ulit. Para sa susunod na palaisipan,
          ang layunin mo ay matulungan si Anna sa paglikha ng mga parisukat gamit
          ang "Repeat" na bloke.
      3:
        image: notes/frozen2_3.jpg
        text: Anumang mga bloke ng code na ilagay mo sa loob ng "Repeat" ba bloke
          ay uulitin ayon sa pagkakasunod-sunod, ilang beses man na gusto mo.
      4:
        image: notes/frozen2_4.jpg
        text: Para makaguhit ng parisukat, maaari kang gumamit ng "Move Forward" at
          "Turn Right" na bloke ng 4 na beses. Ngunit ang pinakamadaling paraan ay
          ang pagsabi sa kompyuter na "Move Forward" at "Turn Right by 20 degrees"
          ng isang beses, at pagkatapos sabihan natin ito na ulitin ang mga aksyong
          ito ng 4 na beses. Para magawa ito, kailangan mong maglagay ng "Move Forward"
          at "Turn Right" na bloke sa loob ng "Repeat" na bloke.
      5:
        image: notes/frozen2_5.jpg
        text: Tandaan, maaari mong baguhin ang numero sa "Repeat" na bloke sa kahit
          na ano, at uulitin nito ang anumang nasa loob nito sa bilang na nilagay
          mo.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hi, ako si Chris Bosh. Ako ay isang propesyonal na manlalaro ng basketbol,
          at ako ay nag-kocode sa kolehiyo.
      2:
        image: notes/frozen3_2.jpg
        text: Isa sa pinakamahalagang konsepto sa computer science ay kung paano mag-define
          ng mga bagong utos. Karamihan sa mga wika ng kompyuter ay mayroon lang mga
          100 na salita o utos. At talagang, ang sining at mahika ay nasa paglikha
          ng sariling mga bagong salita mula sa mga pundasyon na mga blokeng ito.
      3:
        image: notes/frozen3_3.jpg
        text: Kapag naturuan mo na ang kompyuter kung paano gumawa ng aksyon nang
          makaisa gamit ang pagkasunod-sunod ng mga utos, maaari ka nang gumawa ng
          sariling pangalan para sa askyon na iyan para madali itong matandaan sa
          kalaunan. Kapag nagbigay-kahulagan ka sa sarili mong utos at nagbigbigay
          ng pangalan nito, tinatawag itong function.
      4:
        image: notes/frozen3_4.jpg
        text: Hi, ako si Jess. Kapag nag-program ka gamit ang mga bloke, gagamitin
          mo ang functions kung may isang grupo ng mga aksyon ka na gusto mong gamitin
          ng maraming beses. Halimbawa, kapag sumulat ka ng code na lumikha ng parisukat.
      5:
        image: notes/frozen3_5.jpg
        text: 'Maaari mo itong tukuyin bilang isang function na tinatawag na "create
          a square." '
      6:
        image: notes/frozen3_6.jpg
        text: Ngayon mayroon ka nang isang bagong bloke na maaari mong gamitin nang
          maraming beses para makalilha ng maraming mga parisukat.
      7:
        image: notes/frozen3_7.jpg
        text: Maraming mga simpleng hugis ang maaari mong gamitin para makalikha ng
          kumplikadong mga disenyo. Sa susunod na palaisipian, ang code na kakasulat
          mo lang para makagawa ng bilog ay magagamit mo bilang isang bagong function
          na makakagawa ng mga bilog sa iba't ibang laki. Maaari mo ba itong magamit
          para matulungan si Elsa sa paglikha ng mga masalimuot at magandang disenyo
          sa niyebe?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Maglilikha tayo ng mga laro gamit ang Play Lab. Ang magagandang laro
          ay mayroong kuwento, at bawat kuwento ay mga mga artista. Matutunan natin
          kung paano gumawa ng mga artista gaya ng mga mangkukulam, mga alien, at
          mga hayop na nagsasalita, gumagalaw at nakikipag-ugnayan sa bawat isa. Sa
          katapusan ng tutorial na ito, maaari ka nang bumuo ng isang laro mula sa
          wala at magbahagi nito sa iyong mga kaibigan.
      2:
        image: notes/playlab_intro_2.png
        text: Ang iyong screen ay nahati sa 3 pangunahing bahagi. Sa kaliwang banda
          ay ang espasyo ng laro kung saan tatakbo ang iyong programa. Ang mga instruksyon
          sa bawat antas ay nakasulat sa baba.
      3:
        image: notes/playlab_intro_3.png
        text: Ang gitnang bahagi ay ang toolbox, at bawat isa sa mga blokeng ito ay
          isang piraso ng code. Ang puting espasyo sa kanang bahagi ay tinatawag na
          workspace at ito ang lugar kung saan natin gagawin ang ating programa.
      4:
        image: notes/playlab_intro_4.png
        text: Para makapagsimula, kakailanganin mo ng isang link sa iyong mga bloke
          sa dalandan na "when run" na bloke. Maaari kang mag-ugnay ng maramihang
          mga bloke sa pamamagitan ng pagkaladkad sa mga ito palabas hanggang makita
          mo na ang dilaw na linya, at pagkatapos ay maugnay na ang dalawa.
      5:
        image: notes/playlab_intro_5.png
        text: Sa unang palaisipang ito, ang ating artista ay isang pingguwino at pasasabihin
          natin siya nang "Hello!" sa pamamagitan ng pagkaladkad sa "say" na bloke
          palabas, nag-uugnay ito sa "when run" na bloke, at nagtatype ng "Hello."
          Maaari din nating pagalawakin ang pingguwino sa pamamagitan ng paggamit
          ng "move right" at "move left" na mga bloke. Kapag nakapuwesto na ang iyong
          mga bloke, pindutin ang run na button para makita mo ang iyong ginawa.
      6:
        image: notes/playlab_intro_6.png
        text: Magsimula na at sa katapusan, makakalikha ka na ng sariling mong laro
          na may lahat ng uri ng mga manlalaro na maaaring makipag-ugnayan, maging
          masaya o malungkot, makakapuntos, o magtapon ng bolang apoy, o kahit mapawala
          ang bawat isa. Ikaw ang bahala nito at sa kung ano ang laro na gusto mong
          gawin.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Ngayon, pag-aaralan natin ang tungkol sa isang bagay na ginagamit ng
          mga programmer araw-araw. Sila ay tinatawag na mga "events". Ang isang "event"
          ay nagsasabi sa iyong programa na makinig kung may mga pangyayaring naganap.
          At kung nangyari na ang bagay na iyon, magpapatakbo ito ng isang aksyon.
      2:
        image: notes/playlab_events_2.png
        text: Ilang halimbawa ng mga "event" ay ang pagkikinig sa pag-click ng mouse,
          arrow na button, o pag-tap sa screen.
      3:
        image: notes/playlab_events_3.png
        text: Dito, papabatiin natin ang space bot sa mga taong lupa kapag nag-click
          sa kanya ang manlalaro. Gagamit tayo ng "when clicked" na bloke at maglakip
          ng "say" na bloke dito. Kapag nag-click ang manlalaro sa space bot, lahat
          na nakalakip sa "when clicked" na blokeng event ay papatakbuhin. Ano ang
          sasabihin ng iyong alien?
      4:
        image: notes/playlab_events_4.png
        text: Mayroon ding mga "when arrow" na mga bloke. Kung iugnay mo ang "move"
          na mga bloke sa mga ito, maari mo nang pagalawin ang iyong artista sa taas,
          baba, kaliwa, o kanan. Paunti-unti, ang laro mo ang nagiging mas interactive.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Ito ang "repeat forever" na bloke. Anumang nasa loob ng blokeng ito
          ay mangyayari magpakailanman sa loob ng laro.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Kung gusto natin ang artista ng gumawa ng isang bagay nang paulit-ulit,
          nang walang gagawin ang manlalaro, ilalagay natin ang mga blokeng ito sa
          loob ng "repeat forever" na bloke.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Sa sunod na palaisipang ito, ang ating layunin ay para matulungan ang
          salamangkero na maglibot sa mga hangganan ng kaharian, sa kaliwa at kanat
          nang paulit-ulit. Ang pag-aaral kung paano gumagana ang utos na ito, ay
          makakatulong sa iyo para makatipid ng maraming oras kapag gumagawa ka na
          ng sarili mong laro.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Ito ang iyong mga bloke sa pagguhit. Gamitin ang tama para mapagalaw
          ang artista kung saan siya dapat pumunta para mapunan ang mga abong linya.
      2:
        image: notes/C1_artist_intro_2.png
        text: Ito ay mga bloke sa pagtalon. Kapag gagamitin mo ang mga ito, ang iyong
          artista ay gagalaw ngunit hindi to guguhit, kaya gamitin ang mga ito para
          tumalon sa sunod na abong linya.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Ang sobrang astig ng mga bubuyog di ba? Sa sunod na hanay ng mga palaisipang
          ito, ang iyong layunin ay matulungan ang bubuyog na makapunta sa mga bulaklak
          at makakuha ng nektar mula sa mga bulaklak at lumipad sa taas ng pulot-pukyutan
          para gumawa ng pulot. Kakailangan mong gumamit ng "kumuha ng nektar" at
          ang "gumawa ng pulot" na bloke para sa pagsasanay na ito.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Bawat bulaklak ay may iba-ibang bilang ng nektar: 1, 2, 3, o higit
          pa. Alam natin kung ilang nektar mayroon ang mga pulang bulaklak, sa pamamagitan
          ng maliit na numero sa gilid. Kaya siguradohing makuha mo ang lahat ng nektar
          mula sa bulaklak bago ka lumipat. At, bawat pulot-pukyutan ay maaari lang
          maglaman ng iilang pulot: 1, 2, 3, o higit pa. Kaya siguraduhing makagawa
          ka ng pulot na mailalagay sa pulot-pukyutan hangga''t maaari.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Kung makuha mo na ang lahat ng mga nektar at nagawa mo na ang lahat
          ng mga pulot, matagumpay ka na at maaari ka nang pumunta sa sunod na antas.
          Kung hindi, kailangan mong subukan ulit ang palaisipang ito. Paglaruan muna
          ito at tingnan kung ano ang pakiramdam ng isang "bee" na programmer!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Ang loop ay isang pag-uulit na aktibidad. Kaya pumunta ako sa pugad
          para siyasatin ito, tiningnan ko ang isang kuwadro at pagkatapos ay binalik
          ko ito, kaya inuulit ko ang parehong aktibidad ng ilang beses. Ito ay paikot-ikot
          lang, gumawa ng parehong aktibidad ng ilang beses.
      2:
        image: notes/C1_bee_loops_2.png
        text: Sa antas na ito, gusto natin ang bubuyog na magkolekta ng 3 nektar mula
          sa bulaklak. Sa halip na gumamit ng 3 "kumuha ng nektar" na mga bloke, gagamit
          tayo ng "repeat" na bloke para makakuha ng nektar nang 3 beses. Pindutin
          ang "Run" at tingnan kung nakuha mo ba ito nang tama. Mahusay!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Ang aralin na ito ay tinatawag na "big event". Ito ay tungkol sa lahat
          ng bagay kung paano natin kontrolin ang ating programa at talagang baguhin
          ang pagpapatakbo ng programa ng direkta gamit ang mga event, gaya ng pagpindot
          ng button o pag-click ng mouse.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Para sa araling ito, ikaw ay makokontrol gamit ang papel na remote control.
          Gaya lang ito ng isang tunay na live na video game.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Ang isang "event" ay isang aksyon na nagiging sanhi na mangyari ang
          isang bagay. Gaya na pag-click mo sa button ng mouse at naglo-load ang webpage.
          Yan ay isang "event". Kapag hinipo mo ang tablet para makapag-scroll, isang
          "event" din ito. Ang mga "event" ay isang mahusay na paraan para mabigyan
          ng kontrol ang gumagamit kung kailangan o kung gusto nila.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: May mga bagay na nangyayari na kailangan nating bigyang pansin. Nakadama
          tayo ng gutom at pumunta tayo sa repridyeretor. Narinig natin ang kartero
          na paparating at pumunta tayo para kunin ang ating sulat. Ang mga iyon ay
          katulad ng pangyayari sa pagpindot ng mga button o paggalaw ng joystick.
          Sila ay mga bagay na nangyari ay nag-udyok sa atin na gumawa ng isang bagay.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Sa mga video games, may isang pangyayari na tinatawag na "Update" at
          nangyayari ito 30 o 60 na beses sa isang segundo. Para sa mga programmer
          ng video game ito ay mas mahalagang pangyayari kaysa sa pangyayari sa mga
          button o ng joystick.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Ang pangunahing kaganapan na pinapanood natin ay ang "Update" na kaganapan.
          At pagkatapos susuriin natin ang joystick sa tick. Kaya sasabihin natin,
          "Oh, may nagpindot ba sa button ng frame na ito? Oo o hindi?". Kung wala
          ang mga pangyayaring ito, ang manlalaro ay hindi maaaring tumalon, hindi
          mo makontrol ang mga pangyayari. Ang videogame ay hindi rin maaaring mag-animate
          ng kahit ano.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Sa buhanging iskultura nalaman mo na ang kabiguan ay bahagi ng programa.
          Ngunit kung ikaw ay magtitiyaga, ito ay walang patutunguhan kundi ang mas
          mabuti at mas kapana-panabik para sa iyo. Ang pagtitiyaga ang pangalan ng
          laro. Manatili dito, at magugustuhan mo ito.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Ang aralin na ito ay tinatawag na pagtatayo ng pundasyon. Sa araling
          ito, gagawa tayo ng isang gawain na sinadya talagang mahirap. Malalaman
          mo dito kung paano gumawa ng istraktura na kasing taas lang ng isa sa mga
          tasang ito at ito ay dapat matatag para makaya ang bigat ng isang aklat.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Maaaring may mga pagkakataon talaga na ang ating nilikha ay hindi gumagana.
          Maaaring may mga pagkakataon din na tayo ay maiinis at gusto nating sumuko.
          Maaaring may maraming ganoong mga sandali. Ngunit kung mananatili lang tayong
          sumubok, magbigay ng lahat ng ating makakaya ng paulit-ulit, tiyak na makukuha
          din natin ito ng hindi magtatagal.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Ang pagtitiyaga ay tungkol sa pagtitiis kahit gusto mo na talagang sumuko.
          Kung gusto mong maglikha ng bago at kakaiba, may marami talagang kabiguan
          ang madadaanan.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Ang sekreto sa pagtitiyaga ay ang pagpili na magpatuloy at matuto mula
          sa iyong mga kabiguan sa halip na titigil dahil ikaw ay nainis. Ang pagkakainis
          ay nangangahulugan lang na mayroon magagandang bagay sa paligid. Kaya huwag
          susuko bago mo makuha ang mga ito. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hi, ang aking pangalan ay Miral Kotb at ako ang lumikha ng Illuminate.
          Sa aking trabaho, may isang bagay na ginagamit namit sa parehong sayawan
          at sa pag-program ng mga lightsuits. At iyan ay ang mga loop. Ang mga loop
          ay nag-uulit ng aksyon nang paulit-ulit.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Kapag inuulit mo ang isang bagay nang maraming beses, tulad ng aking
          mga kilos para mapanatili ang pag-ikot ng hula hoop, ako ay gumagawa ng
          isang loop na aksyon. Ito ay isang loop. Ito ay isang loop. At ito ay isang
          loop.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Ngayon magkakaroon tayo ng sayawan. Magsasadula tayo bilang loop sa
          isang bagong sayaw. Ang pag-uulit. Matutunan natin ang tungkol sa mga loops
          gamit ang sayaw. Matutunan mo ang iilang madaling mga hakbang at uulitin
          mo ito ng ilang beses para makompleto ang sayaw.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Ito ang mga hakbang na kailangan mong malaman. Ipalakpak ang iyong mga
          kamay. Ilagay ang iyong kamay sa likod ng iyong ulo. Ilagay ang iyong kamay
          sa iyong baywang. Itaas ang kanang kamay pataas. Napakasimple lang, di ba?
          Matutuklasan mo na maaaring paiklian ang mga direksyon sa pamamagitan ng
          paglagay ng ilang mga hakbang ng sayaw sa isang loop.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Talagang gumagamit tayo ng mga loop sa ating pagsayaw. Ang mga mananayaw
          ay nagsusuot ng mga kompyuter, lahat ay nasa parehong network. Maaaring
          kong i-loop ang mga ilaw sa parehong mananayaw ng paulit-ulit. Sa loob maaari
          akong magkaroon ng iterasyon kung saan sasabihin ko na gusto kong magloop
          sa 6 na mga mananayaw nang paulit-ulit at sa loob ng loop gusto mong pabilisan
          ang ilaw. At lahat nang ito ay magagawa sa pamamagitan ng mga loops. Ang
          loop ay importante sa computer science dahil sila ang nagpaikli at nagpadali
          ng ating gawain.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Ang araling ito ay tinatawag na Masayang Mapa. Ngayon tutulungan natin
          ang ating mabalahibong maliit na kaibigan na si Flurb para makapunta sa
          kanyang bunga.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Papuntahin ang iyong Flurb sa iyong bunga. Para magawa ito kailangan
          mong malaman kung aling daanan kailangang pumunta si Flurb at gabayan siya
          gamit ang mga palaso. Para makapunta si Flurb sa mansanas, anong direskyon
          dapat pupunta si Flurb? Maglinya para mapataas ito.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Para mapapunta ito doon, bilugan mo ang direksyon kung saan siya dapat
          pumunta.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Lumikha ng algoritmo sa pamamagitan ng pagdikit ng mga palaso kasunod
          ng mapa na sinisubukan mong malutas. Ang pangalawa ay pareho lang ngunit
          ito ay papunta sa baba.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Gaya lang ito ng pag-program gamit ang papel. At iyan na ito!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Ang pag-debug ay ang paghahanap at pag-aayos ng mga problema. Mayroong
          maraming mga paraan para maka-debug ng mga problema. Isa sa pinakamadali
          ay ang pag-usad ng paunti-unti hanggang sa makita mo na may mga kamalian.
          Dito, sinusubukan kung gumawa ng back handspring sa beam ngunit palagi akong
          nahuhulog.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Naglakad ako sa bawat bahagi nang paisa-isa at natanto ko kung saan
          ako nagkamali. Hindi ko nilagay ang kamay ko sa beam sa tamang paraan. Kaya
          sinubukan ko ulit ang isa pang back handspring sa beam gamit ang bagong
          posisyon ng kamay at nakuha ko agad ito. Masaya ako na dinebug ko ang aking
          back handspring.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Para matuto tungkol sa pagde-debug, magsimula tayo sa isang grupo ng
          mga bloke na nasa stage na. Mapapansin mo na ang mga blokeng ito ay hindi
          makakatulong sa layunin mo. Kailangan nating i-debug ang solusyon at ayusin
          ito. Saan nagkamali? Mapapansin mo na kailangan mong dumiretso sa kanluran
          nang isa pang bloke.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Ayusin natin ito sa pamamagitan nang pagdagdag ng isang kanluran na
          bloke at pindutin ang run para makita natin kung nakuha natin it nang tama.
          Yay, nakuha natin ito!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Para sa palaisipang ito, kailangan mong dalhin ang ibon sa baboy. Tingnan
          ang palaisipan at suriin kung aling direksyon ang dapat mong kunin.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Kailangan mong i-drag ang mga bloke mula sa toolbox papunta sa workspace.
          Siguraduhing nasa baba ito ng "when run" na bloke at kung naisip mo na nakuha
          mo na ang tamang solusyion, i-click mo ang "Run" at tingnan ang ibon na
          pupunta sa baboy.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Isa sa mga bagay na talagang mahusay ang kompyuter ay ang pag-uulit
          ng mga utos. Bilang isang tao, ikaw ay tinatamad kung kinakailangan mong
          gawin ang parehong mga bagay nang paulit-ulit at maraming beses sa isang
          hanay. Ngunit ang kompyuter ay maaring gumawa ng parehong bagay na milyun-milyon
          o kahit bilyong beses at hindi ito tatamarin at magagawa niya ang mga ito
          ng maayos.
      2:
        image: notes/C1_maze_loops_2.png
        text: Halimbawa, kung gusto kong batiin ang lahat ng tao sa Facebook nang
          maligayang kaarawan sa pamamagitan ng pagpapadala ng email sa kanila, maaari
          itong tatagal ng isang siglo para maisulat ang lahat nang email na iyon
          sa kanilang lahat. Ngunit gamit ang iilang linya lang ng code, maaari akong
          magkaroon ng sistema na magpapadala ng email sa lahat nang nasa Facebook
          na magbabati ng maligayang kaarawan sa kanila.
      3:
        image: notes/C1_maze_loops_3.png
        text: Para mapapunta ang ibon sa baboy sa antas na ito... sa halip na i-drag
          ang tatlong Hilagang mga bloke papunta sa workspace, gagamit ka lang ng
          "repeat" na bloke. I-drag ang "repeat" na bloke sa workspace at lagyan ito
          nang numero na 3. Pagkatapos i-drag ang "move North" na bloke sa "repeat"
          na bloke at pindutin ang "Run" para makita kung nakuha mo ito nang tama.
          Maligayang bati, nakuha mo ito!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Ang araling ito ay tinatawag na "galawin ang mga ito, galawin ang mga
          ito". Magkasama nating isulat ang isang programa para makuha natin ang ating
          mga kaibigan mula sa simulang compass na rosas papunta sa layunin na smiley
          na mukha.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Ngunit ang smiley ay nakataob at isang tao lang ang may alam kung paano
          makapunta doon. Simulan na natin ang programang ito.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Ang program ay isang algoritmo na ginawang code para maging bagay na
          maaaring mapapatakbo ng isang makina. Karamihan sa atin ay nag-iisip na
          ang program ay isang bagay na isinusulat natin para sa kompyuter. Ang mga
          program at talagang mahusay para dito ngunit nakakatulong din ito sa iba
          pang mga lugar. Maaari kang gumawa ng sarili mong laro o kahit na magprogram
          sa robot na gumawa ng mga bagay para sa iyo.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Ang aking pangalan ay Jeremiah. Hi! Ako ay pitong taong gulang. Gusto
          kong maglaro sa kompyuter ng nanay ko pero palagi akong humihingi ng pahintulot
          muna. "Nay, maaari ba akong magkompyuter? Sige honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Mahal ko ang kompyuter ng nanay ko dahil maaari akong makapunta sa Internet.
          Ang internet ay tulad lang ng iyong kapitbahayan. Maaari kang bumisita nang
          magagandang mga lugar, maaari kang makipag-usap sa iyong pamilya at mga
          kaibigan at maari kang matuto ng napakaraming mga bagong bagay.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Kahapon, bumisita ako sa zoo malapit sa aking bahay. Nakakita ako ng
          batang zebra. Kinunan ko siya ng larawan at binago ang kulay ng guhit-guhit
          nito, pagkatapos nagdagdag ako ng sombrero at dinagdag ito sa aking koleksyon
          ng mga baliw na mga hayop. Magaling! Mayamaya, pumunta ako sa isang lugar
          na malayong malayo. Bumisita ako sa Kenya. Isa itong bansa sa Africa. At
          napakaraming mga zebra ang nakatira doon.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Minsan sa Internet, nakipag-usap ako sa mga taong kilala ko, gaya ng
          aking lola na nakatira sa ibang estado. Hi lola! Siya ay gumagawa ng mga
          biskwit na ipapadala niya para sa aking kaarawan. "Ang sarap, hangad kong
          magkaroon ang Internat ng smellorama!" Maaari akong makipag-usap sa iba't
          ibang tao sa Internet, gaya na mga pinsan ko ngunit nakikipag-usap lang
          ako sa mga taong kilala ko.
      5:
        image: notes/C1_going_places_safely_5.png
        text: Ang pinakagusto ko sa Internet ay maaari akong makapaglaro ng masayang
          mga laro. Puntos! Gusto ko ring gumuhit at lumikha ng mga bagong bagay at
          magbahagi nito sa aking mga kaibigan. Mahusay! Minsan binibisita ko ang
          mga website kung saan matuturo akong ng mga bagong bagay ngunit ako ay nanatili
          lang sa mga website na tama lang para sa aking! Wow, mga dinosaur!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Ang internet ay sobrang napakasaya na lugar. Ngunit tulad ng pagtawid
          mo sa kalye ng iyong kapitbahayan, kailangan mo ring mag-ingat kung ikaw
          ay nag-oonline. Ito ang mga 3 patakaraan na dapat mong tandaan. Patakaran
          bilang 1: Palaging magtanong sa iyong mga magulang muna. Patakaran bilang
          2: Makipag-usap lang sa mga taong kilala mo. Patakaran bilang 3: Manatili
          sa mga lugar na tama lang para sa iyo.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, ang saya non! Oras na para maghapunan. Ako ay maglog-off ngayon.
          Hindi ako makapaghintay na makalog-in ulit para tingnan kung saan ako makabisita
          sa sunod.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Ngayon, pag-aaralan natin ang tungkol sa Pair programming. Sa pair programming
          kayo magtatrabaho bilang isang koponan. Bakit dapat dalawang tao ang gagamit
          sa isang kompyuter? Dahil ang dalawang ulo ay mas mabuti sa isa. Sa pair
          programming, ikaw at ang iyong kasama ay magtatabi sa isang kompyuter at
          kayong dalawa ay magtatrabaho sa parehong proyekto.
      2:
        image: notes/C1_pair_programming_2.png
        text: Sa pair programming, ang isang tao ay ang drayber at ang isa naman ay
          ang nabigante, gaya lang ng pagmamaneho ng sasakyan. Ang drayber ay uupo
          sa kompyuter at ang gagamit ng keyboard at mouse o touchscreen at nagkokongrol
          ng mga pangunahing mga aksyon ng kompyuter. Ang isang tao ay ang nabigante.
          Ang nabigante ay tumutulong sa drayber sa pamamagitan ng pagsagot sa mga
          katanungan ng drayber at pagturo ng mga potensyal na mga problema o kamalian.
      3:
        image: notes/C1_pair_programming_3.png
        text: Ang komunikasyon ay ang susi sa matagumpay ng pair programming. Walang
          mga insulto, at maging magalang, huwag maging isang nakakaasar na nabigante,
          dahil walang gustong maging drayber sa likod. Ikaw at ang iyong kasama ay
          dapat palaging nag-uusap. Ang drayber ay magpapaliwanag kung ano ang ginagawa
          niya. At ang nabigante ay maaaring magmungkahi kung ano ang susunod na gagawin.
      4:
        image: notes/C1_pair_programming_4.png
        text: Ang nabigante ay dapat nag-iisip sa malaking larawan at ang drayber
          ay nakatuon sa mga detalye. Ang dalawang papel ay importante. Ang pair programming
          ay tungkol sa pagtutulungan bilang isang koponan.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Ang araling ito ay tinatawag ng pagtatanim ng binhi at makakatulong
          ito para maintindihan natin ang mga algoritmo. Ang mga algoritmo ay mga
          tiyak ng istruksyon na nagpapaliwanag sa pagkasunod-sunod ng mga gawain.
          Kahit na sa araw-araw na mga bagay gaya ng pagkain ng almusal o pagsisipilyo
          ay mga algoritmo na nangangailangan ng maliliit na mga hakbang para magawa
          ito.
      2:
        image: notes/C1_planting_seed_2.png
        text: Ang mga kompyuter ay maaring napakatalino ngunit makakaintindi lang
          sila sa iyo kung sasabihan mo sila nang eksaktong gusto mong gagawin nila
          sa bawat hakbang. Ang maganda lang sa mga algoritmo ay kung sundin mo lang
          ang mga instruksyon ayon sa pagkakasunod, maaari mong gawin ang isang bagay
          na hindi mo alam nang maaga pa. Gaya lang ng pagsunod ng isang resipe.
      3:
        image: notes/C1_planting_seed_3.png
        text: Ngayon, magtatanim tayo nang sarili nating mga binhi gamit ang mga algoritmo.
          Maglikha ng sarili mong algoritmo sa pamamagitan nang pagputol-putol sa
          mga larawan. Piliin ang mga larawan na nagpapakita ng mga hakbang sa pagtatanim
          ng binhi at ayusin mo ang mga larawang iyon sa tamang pagkakasunod.
      4:
        image: notes/C1_planting_seed_4.png
        text: Ngayon, oras na para makita mo kung gumagana ba ang iyong algoritmo.
          Sundin mong mabuti ang mga hakbang sa algorithmo. Nasa tamang pagkakasunod
          ba ang mga ito? Matagumpay mo bang natanim ang mga binhi sa pamamagitan
          ng pagsunod sa algoritmo? Para lang itong pagproprogram gamit ang mga larawan!
      5:
        image: notes/C1_planting_seed_5.png
        text: Kung gusto nating gumawa ng tsokolate, mayroong mga malalaking hakbang
          sa prosesong iyan at bawat isa sa malaking mga hakbang ay may mga hanay
          ng mga malilit na hakbang at mayroong iba-ibang mga resipe o mga algoritmo
          depende kung anong lasa ang gusto natin sa tsokolate. Bawat hakbang ay importante,
          kahit ang mga malilit, kung walang isang hakbang, ang iba sa kanila ay hindi
          makokompleto. Ang paglikha ng mga algoritmo na maiintindihan ng iba ay napakaimportante.
          Iyan ang dahilan kung bakit ang bawat hakbang ay dapat nakasulat para kahit
          sinuman ang gumawa nito, ang resulta ay pareho lang.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Oras na para maging malikhain at gamitin ang iyong mga abilidad sa pag-code
          para magsalaysay ng isang kuwento. Ang iyong kuwento ay magkakaroon ng mga
          artista at maaari mo silang mapasalita at mapa-ugnay sa bawat isa. Magsimulang
          mag-isip kung anong uri ng kuwento ang gusto mong isalaysay.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Ang pusa ay palaging natatakot sa aso at paano kung malaman ng pusa
          na ang aso ay nagsisikap na maging mabait? Ang "when run" na bloke ang nagpasimula
          nang lahat. Ang "move" na bloke ay magpapagalaw sa iyong karakter at ang
          "say" na bloke ay magpapasalita ng iyong karakter sa kahit anumang tinatype
          mo.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Ito ang "when actors collide" na bloke na maaari mong iugnay sa iba
          pang mga bloke.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Pinapalapit ko ang aso at pinagsabi ng "Hi" ngunit ang pusa ay natakot
          at tumakbo palayo. "Ahh" Kung may marami pang oras, masayang wakas na sana.
          Ang wakas!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Ito ang antas ng pagbabaybay na palakasan. Gumamit ng mga piraso ng
          palaisipan para mapagalaw ang bubuyog. Sa paggalaw nito, mangongolekto ito
          ng mga titik para makabaybay ng salita.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Tingnan kung mabaybay mo ba ang salitang binagay nila sa iyo sa kahon
          na nasa ibaba ng entablado. Ngunit mag-ingat ka! Ang paggalaw sa maling
          direksyon ay magdadagdag ng letra na hindi mo kailangan.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Isa sa mga bagay na talagang mahusay ang kompyuter ay ang pag-uulit
          ng mga utos. Bilang isang tao, ikaw ay tinatamad kung kinakailangan mong
          gawin ang parehong mga bagay nang paulit-ulit at maraming beses sa isang
          hanay. Ngunit ang kompyuter ay maaring gumawa ng parehong bagay na milyun-milyon
          o kahit bilyong beses at hindi ito tatamarin at magagawa niya ang mga ito
          ng maayos.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Halimbawa, kung gusto kong batiin ang lahat ng tao sa Facebook nang
          maligayang kaarawan sa pamamagitan ng pagpapadala ng email sa kanila, maaari
          itong tatagal ng isang siglo para maisulat ang lahat nang email na iyon
          sa kanilang lahat. Ngunit gamit ang iilang linya lang ng code, maaari akong
          magkaroon ng sistema na magpapadala ng email sa lahat nang nasa Facebook
          na magbabati ng maligayang kaarawan sa kanila.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: Sa halimbawang ito, ang iyong layunin ay pagalawin ang ibon papunta
          sa baboy. Ngayon, maaari na tayong gumamit ng mga "repeat" na bloke para
          madali natin itong magawa. Maari nating gawin ito sa pamamagitan ng pagbigay
          sa kompyuter nang gumalaw pasulong na utos nang limang beses para makagalaw
          ang ibon ng isang hakbang sa bawat aksyon palapit sa baboy o maaari nating
          sabihan ang kompyuter na gumalaw pasulong nang isang beses, at pagkatapos
          sabihan natin ito na ulitin ito ng limang beses at gagawin nito ang parehong
          bagay.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: Para magawa ito, i-drag mo lang ang gumalaw pasulong na utos at pagkatapos
          ay ilagay ito sa loob ng "repeat" na bloke. At maaari kang mag-click dito
          at sabihan kung ilang beses mo ba gustong ulitin ang bloke para masabihan
          mo kung ilang hakbang ang gusto mong lalakarin niya.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Isa pang bagay ay maaari tayong maglagay ng maraming mga utos hangga't
          gusto mo sa loob ng paulit-ulit na bloke. Sa halimbawang ito, sinasabihan
          mo ito na gumalaw pasulong at lumiko sa kaliwa, kung saan gagawin niya ito
          nang limang beses! Magsaya!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Hindi ka nga maging kwalipikado sa karera kung wala kang mga tao na
          bihasa sa computer science dahil sa gaanong kalaki nang datos na ikokolekta
          at ang pangangailangang magkaroon ng mga taong makakasulat ng mga programa
          para malaman kung paano natin malalaman kung paano natin palakihin ang performance.
      2:
        image: notes/C2_artist_intro_2.png
        text: Sa mga palaisipang ito, ikaw ang artista na gumagamit ng lapis para
          makaguhit ng iba't ibang mga hugis. Kahit saan pupunta ang iyong artista,
          mag-iiwan ito ng guhit sa likod mo.
      3:
        image: notes/C2_artist_intro_3.png
        text: Para makagalaw sa paligid ng kanbas, gagamit ka ng "move forward" na
          bloke. Dito ang "move forward" na bloke ay nagsasabi na lumakad pasulong
          mga 100 pixels ang layo. Kapag pinindut natin ang "run", ano ang mangyayari?
          Ang artista ay lalakad pasulong sa isang tiyak na halaga at ang halagang
          ito ay 100 pixels. Ang mga pixel ay talagang napakaliit na mga parisukat
          sa screen ng iyong kompyuter.
      4:
        image: notes/C2_artist_intro_4.png
        text: Ang isa pang bloke na meron tayo sa palaisipang ito ay nagsasabi na
          lumiko pakanan ng mga 90 degrees. At kung ikaladkad natin ito palabas ay
          magpapaikot sa ating artista sa isang tiyak na halaga. Kaya maaari kang
          maglaro at tingnan kung gaano kalayo mo ba gustong paikutin ang iyong artista.
          Ito ay isang 90 degree na pag-ikot.
      5:
        image: notes/C2_artist_intro_5.png
        text: At ito ang 120 degree na pagliko. At tandaan, maaari mong baguhin ang
          mga halagang ito sa pamamagitan ng pagpindut sa mga pana kasunod ng mga
          numero para sa mga pixel at mga degrees. Magsaya sa pagguhit gamit ang iyong
          artista!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Ito ay isang konsisyonal na bloke. Nagsasabi ito na IF mayroong nektar
          o pulot na mas mababa, o katumbas o mas malaki pa sa isang numero, THEN
          gawin ang isang bagay.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Ito ay nakakatulong kung hindi natin alam kung ilang nektar o pulot
          ang kukunin, gaya na nakikita natin dito sa tandang pananong na ito.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: Sa halimbawang ito, sasabihan natin na kung ang lilang bulaklak ay mayroong
          nektar na higit pa sa 0, kukunin natin ang nektar. Sasabihan nito ang ating
          bubuyog na kumuha ng nektar hangga't mayroon pang laman. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Ito ay ang binary na pulseras na aralin. I-code natin ang ating mga
          inisyal sa pulseras na maaari nating isuot at ipakita sa lahat ng ating
          mga kaibigan!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Ang binary ay isang paraan para kumatawan sa mga impormasyon gamit ang
          dalawang opsyon lang. Minsan iisipin ng mga tao ito na 1s at 0s lang. Ngunit
          maaari kang magrepresenta nang kombinasyon ng mga on o off, taas at baba,
          labas at loob o kahit anumang magkaiba na mga bagay.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hi, ako si Orion at ako ay nagpoprogram ng mga robot dito sa Play-im.
          Lahat ng kompyuter at mga utak ng robot sa kanilang pinakapangunahing antas
          ay mga malilit lang na electronic gates. Kung bukas ang pintuan, ang kuryente
          ay maaaring makadaloy at kung nakasara, ay hindi maaari.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Isang halimbawa nang binary na nasa robot ay ang mga mata nito. Ang
          mga mata ng robot ay mga LEDs at iyon ay mga ilaw na naka-on o naka-off.
          Ito ay isang sistema ng binary, isa o ang ang isa pa. Maaari tayong gumamit
          ng mga ilaw para magrepresenta ng mga numero sa binary. Kung mayroon tayong
          isang grupo ng mga robot, maaari nating sabihin ang ang unang robot ay nasa
          lugar ng mga 1 at ang pangalawang robot ay nasa lugar ng mga 2, ang pangatlong
          robot ay nasa lugar ng mga 4 at iba pa. Iyan ay kung paano mo irepresenta
          ang isang numero na binary. Ang mga robot ay gagawin ito gamit ang kanilang
          mata na binary at magbilang nito para sa iyo.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Ang araling ito ay tinatawag na mga kondisyonal gamit ang mga kard.
          Araw-araw gumagawa ka ng mga desisyon ayon sa nakikita mo at naririnig.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Gusto kong maglakad papunta sa parke pero dapat muna akong magpasya
          kung dapat ba akong magdala ng payong o hindi. Kaya tumingin ako sa labas
          ng bintana. Kung ito ay maulap, dadalhin ko ang aking payong. Kung hindi,
          magdadala ako ng mga salamin sa mata. Naisip ko na mas mainam na magdala
          ako ng payong. Kung ano ang nakita at narinig ang nagpasiya kung ano ang
          dadalhin ko sa parke.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Ang mga kondisyonal ay ginagamit din sa mga laro. Ngayon mag-ensayo
          tayo gamit ang mga kondisyonal sa isang kard na laro. Sa larong ito, ang
          kard na iguguhit ko ang nagtutukoy kung ano ang gagawin ng mga kaibigan
          ko. Kung nakaguhit ako ng 7, papalakpak ang lahat. Kung hindi, lahat ay
          magsasabing "awww." Subukan natin ito! "Awww" "magsaya"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Tiyak na makakagawa ka nang laro na mas masaya pa gamit ang mga kondisyonal.
          Subukan mo ito! Ang mga kondisyonal ang dahilan kung bakit mukhang matalino
          ang mga kompyuter. Ang programa ng kompyuter na naglalaman ng mga kondisyonal
          ay maaaring tumugon sa mga gumagamit at baguhin ang tiyak na hakbang.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Isipin ang tungkol sa iyong paboritong video game. Nakakuha ka ba nang
          higit pang mga puntos para sa iilang mga askyon kaysa sa ginawa mo sa iba?
          Nangyari ito dahil ang kompyuter ay gumagamit ng mga kondisyonal. Ito ang
          paraan ng kompyuter na makagawa ng desisyon. Paano na, kung matatamaan mo
          ang target, at nakakuha ka ng sampung puntos. Kung hindi, mawawalan ka nang
          tatlo. Kung alam mo kung paano gumagana ang mga kondisyonal, maaari kang
          lumikha nang lahat ng klase nang nakakasabik na mga laro.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Dito mayroon na tayong ilang mga bloke na nailabas sa ating workspace.
          Ngunit mayroong isang bagay na mali.
      2:
        image: notes/C2_artist_debugging_2.png
        text: I-debug natin ang code sa pamamagitan nang pagpapabagal ng bilis at
          pagtingin dito habang dahan-dahan itong dumaan sa bawat bloke.
      3:
        image: notes/C2_artist_debugging_3.png
        text: O, nariyan ang problema. Ang balbas ng pusa ay 75 pixels ang haba, hindi
          25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Nakarinig ka na ba nang pag-dedebug ng isang programa? Ito ang paraan
          para malaman mo kung ano ang hindi gumagana. Kapag nag-debug ka ng code,
          matutukoy mo at matanggal ang mga kamalian.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Dito ay binigyan lang tayo nang iilang mga bloke na nasa workspace na
          natin. Gagamit tayo ng hakbang na button para makatawid sa mga bloke, paisa-isa,
          para makita kung ito ang tamang solusyon at kung saan natin kailangang ayusin
          ito.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Mukhang iyan na ang ating problema! Kailangan natin nang isa pang "move
          forward" na bloke. Ang hakbang na button ay nakakatulong sa atin na mag-debug
          sa problema sa pamamagitan nang pagtukoy kung saan ang mali para maayos
          natin ito.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: Sa iyong ulo taglay mo ang iyong sumbrero, at sasabihin ni Smarts sa
          iyo kung saan ka na at para mag-isip tungkol sa zoo, at para bumati nang
          "hello" sa iyo at at sa iyo! Gamitin ang iyong ulo kapag ikaw ay online
          para manatili sa iyong isipan at malaman kung paano maging ligtas, paano
          mabigyan ang iyong buhay ng pribadong espasyo! Mula sa iyong ulo pababa
          sa iyong mga daliri ng paa, tumigil sandali, at isipin ito. Mula sa iyong
          paa pataas sa iyong ilong, tumigil sandali at mag-isip online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Gamitin ang iyong puso para lumaki at lumaki, at para mabigyan ang iyong
          sarili nang malusog na kislap, at para makagawa ng balentina, sabihan ang
          iba na ikaw ay magiging akin! Gamitin ang iyong puso kapag ikaw ay online,
          pakiramdaman ang tama at palaging maganda ang loob, at ipakita sa iyong
          mga kaibigan ang respeto, maging patas at maging mabait sa Internet. Mula
          sa iyong ulo pababa sa daliri ng paa, tumigil sandali, at isipin ang tungkol
          sa mga ito. Mula sa iyong paa pataas sa iyong ilong, tumigil sandali at
          mag-isip online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Gamitin ang iyong mga bisig upang mayakap ang iyong alagang hayop, para
          mapanatiling tuyo ang iyong mga damit, at para masuot mo ang iyong paboritong
          damit at matulungan kang lumipad at maniwala. Gamitin ang iyong kamay kapag
          ikaw ay online, magpahinga at ibalanse ang oras at iwan ang iyong mga gadyet
          at para maghanap nang puno na maakyat. Mula sa iyong ulo pababa sa mga darili
          ng paa mo, tumigil sandali, at mag-isip tungkol dito. Mula sa iyong paa
          pataas sa iyong ilong, tumigil sandali at mag-isip online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Gamitin ang iyong kutob para maka-imbak ng iyong pagkain, at para makarinig
          sa padabog na sumpong nito, para makagawa nang "belly flop", at para madama
          ang hangin sa soda na puputok. Gamitin ang iyong kutob kapag ikaw ay online,
          para malaman ang pagmasid sa mga sinyales, at para hayaan itong mag-alalay
          sa iyo at magsabi sa iyo na kung hindi na ito tama. Mula sa iyong ulo pababa
          sa darili ng iyong mga paa, tumigil sandali, at mag-isip tungkol dito. Mula
          sa iyong paa pataas sa iyong ilong, tumigil sandali at mag-isip online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Kaya gamitin ang iyong ulo sa pag-isip, at magdamdam gamit ang iyong
          puso, magbalanse gamit ang iyong mga kamay, makinig sa iyong kutob, online.
          Gamitin ang iyong mga paa para makatakbo at makapatid, at para makatalon
          at makatalbog sa isang pogo na patpat, at para makasayaw sa paligid ng bloke,
          at para makalaktaw sa iyong mabahong medyas. Gamitin ang iyong paa kapag
          ikaw ay online, manindigan laban sa mga mang-aapi na gumawa nang hindi kanais-nais,
          at tandaan na ipagmalaki ang sarili, maging mabait sa mga nilikhang malaki
          man o maliit.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Mula sa iyong ulo pababa sa darili ng iyong mga paa, tumigil sandali,
          mag-isip tungkol dito, Mula sa iyong paa hanggang sa iyong ilong, tumigil
          sandali at mag-isip online! Kaya mag-isip gamit ang iyong ulo, at magdama
          gamit ang iyong puso, magbalanse gamit ang iyong mga bisig, makinig sa iyong
          kutob, tumayo sa iyong mga paa. Mula sa iyong ulo pababa sa mga darili ng
          iyong paa, tumigil sandali, mag-isip tungkol dito. Mula sa iyong paa pataas
          sa iyong ilong, tumigil sandali at mag-isip online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Bawat oras na ikaw ay mag-online, nag-iiwan ka ng bakas na maaaring
          mahanap, makopya, maibahagi, maisahimpapawid at ito ay permanente. Anong
          uri ng digital na bakas ang iniiwan mo? Anong uri ng digital na bakas ang
          gusto mong iwan?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Ang araling ito ay tinatawag na "Graph Paper Programming" at ito ay
          tungkol sa mga algoritmo. Ngayon pag-aaralan natin kung paano magsulat ng
          mga programa na magpapakita sa bawat isa kung paano malikha ulit ang simpleng
          itim at puti na mga larawan, gamit ang mga guhit kamay na mga pana lang.
      2:
        image: notes/C2_graph_paper_2.png
        text: Ang algoritmo ay isang lista ng mga instruksyon para makompleto ang
          isang gawain. Susundin natin ang grupo ng mga instruksyon para makagawa
          ng mangkok. Ang mga algoritmo ay talagang nakakatulong kung kailangan mo
          ang iba na makaintindi kung paano gumawa ng isang bagay.
      3:
        image: notes/C2_graph_paper_3.png
        text: Kung nagsusulat ka ng isang algoritmo para sa kompyuter, kailangan mo
          itong pasimplehin sa maliliit na mga hakbang. Para matapos ang hanay na
          ito at makapunta sa sumunod, pagkatapos sa sumunod pa na isa, at matatapos
          ka na.
      4:
        image: notes/C2_graph_paper_4.png
        text: Gumagamit ako ng mga algoritmo para sa aking trabaho. Kung isusulat
          ko ang lahat ng mga hakbang maaari kung ulitin ang bawat piraso, o maaari
          kung itong ituro sa iba para gumawa nito. Ilagay ang baso sa hurno, idikat
          ang dalawa, ang sundin ang iba pang instruksyon para makagawa ng mangkok.
          Ang mga algoritmo ay nagbibigay sa iyo ng mapa para magawa ang isang bagay.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Dito gagamit tayo ng mga "repeat" na bloke para makatulong sa atin na
          mapadali ang mga hakbang habang tayo ay gumagawa ng programa sa ating artista.
          Mayroon na tayong iilang bloke sa ating entablado ngunin nandyan lang ang
          mga ito para makapagsimula tayo.
      2:
        image: notes/C2_artist_loops_2.png
        text: Para ma-loop ang mga blokeng iyon nang apat na beses para makaguhit
          ng buong parisukat, kailangan lang nating kaladkarin palabas ang "repeat"
          na bloke at maglagay ng "move forward" at "turn right" na mga bloke sa loob
          ng paulit-ulit na bloke. Kapag pinindot natin ang "run", uulitin ng artista
          ang mga hakbang na iyon nang apat na beses para makompleto ang parisukat.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Ang loop ay isang pag-uulit ng aktibidad. Pumunta ako sa pugad para
          siyasatin ito, tiningnan ko ang kuwadro at pagkatapos ay binalik ko ito.
          Inuulit ko ang parehong aktibidad nang ilang beses. Paikot-ikot lang ito,
          at gumagawa ng parehong aktibidad nang ilang beses.
      2:
        image: notes/C2_bee_loops_2.png
        text: Ito ang repeat na bloke. Anuman ang ilagay mo sa loob ng repeat na bloke
          ay mag-uulit sa mga aksyon nang ilang beses na binigay mo. Halimbawa, sa
          antas na ito, sa halip na ikaladkad palabas ang "move forward" at kumuha
          ng nektar nang tatlong beses, kakaladkarin lang natin ito palabas nang isang
          beses at uulitin ang aksyon nang tatlong beses. Iyan ay nagpapadali nito!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Karaniwang nasa teksto lang ang pag-poprogram ngunit gagamit tayo ng
          Blockly na gumagamit ng mga visual na mga bloke na kailangan mong i-drag
          and drop para makasulat ng mga programa. Sa likod nito, naglilikha ka pa
          rin ng code. Para makapagsimula, gagawa tayo ng code para sa isang programa
          na makakatulong sa Angry Bird na ito na gumalaw sa loob ng maze para marating
          ang mga masasamang baboy na nagnakaw sa mga itlog nito.
      2:
        image: notes/C2_maze_intro_2.png
        text: Ang Blockly ay nahahati sa tatlong pangunahing bahagi. Sa kaliwang bahagi
          ang maze ng ibon, kung saan tatakbo ang iyong programa. Ang mga instruksyon
          sa bawat antas ay nakasulat sa baba ng maze. Ang gitnang bahaging ito ay
          ang toolbox at bawat isa sa mga blokeng ito ay mga utos na naiintindihan
          ng ibon. Ang puting espasyo sa kanan ay tinatawag na workspace at dito mo
          gagawin ang ating programa.
      3:
        image: notes/C2_maze_intro_3.png
        text: Kung kakaladkarin ko ang "move" na bloke sa ating workspace at pindutin
          ko ang "Run", ano ang mangyari? Ang ibon ay gagalaw pasulong nang isang
          kahon sa loob ng grid. At paano kung gusto ko ang ibon na gagawa ng isang
          bagay pagkatapos gumalaw pasulong nang isang kahon? Maaari akong magdagdag
          ng isa pang bloke sa ating programa.
      4:
        image: notes/C2_maze_intro_4.png
        text: Pipiliin ko ang "turn right" na bloke at kakaladkarin ko ito sa baba
          ng aking "move" na bloke hanggang ang dilaw na pana ay lilitaw. Pagkatapos
          ibaba ko ito at ang dalawang bloke ay magdidikit. Kung pipindutin ko ang
          "Run" ulit, ang ibon ay gagawa sa mga utos na nakasalansan mula sa taas
          hanggang sa baba ng ating workspace.
      5:
        image: notes/C2_maze_intro_5.png
        text: Kung gusto mong magbura ng bloke, tanggalin lang ito mula sa salansan
          at kaladkarin ito sa basurahan. Pagkatapos mong mapindot ang "run", maaari
          mong palaging pindutin ang reset na button para maibalik ang ibon sa simula.
          Ngayon, puntahan natin ang mga baboy na iyon!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Ang araling ito ay tinatawag na Real Life Algorithms. Ang mga algoritmo
          ay naglalarawan sa mga bagay na ginagawa ng mga tao araw-araw. Mga resipe
          ng biskwit at mga direksyon para sa paggawa ng bahay ng ibon ay parehong
          pang-araw-araw na mga algorithmo.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Ngayon, gagawa, lilikha, at magsubok tayo sa isang algoritmo para sa
          isang papel na eroplano. Ngunit una, kailangan nating hatiin ang malaking
          prokyektong ito sa simpleng mga hakbang na madaling sundin. Para sa paggawa
          ng papel na eroplano, kailangan nating magpasiya kung anong mga hakbang
          na gagawin at kung ano ang pagkakasunod sa paggawa natin.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Lilikha ka nang iyong algoritmo sa pamamagitang nang pagputol-putol
          ng mga larawan. Kasunod ay pipili ka ng 6 na mga larawan na nagpapakita
          sa mga hakbang na kinakailangan para sa paggawa ng papel na eroplano at
          iayos ang mga larawang ito sa tamang pagkakasunod. Pagkatapos mong maayos
          ang pagkakasunod, makikipagpalitan ka ng mga algoritmo sa ibang estudyanteng
          koponan para masubukan kung gumagana ba ang algoritmo. Ang magandang pagkadisenyo
          ng algoritmo ay lubhang importante para magawa ang pinakamagandang papel
          na eroplano.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Kung gusto nating makagawa ng tsokolate, mayroong maraming malalaking
          hakbang sa prosesong ito. At bawat isa sa mga malalaking hakbang na ito
          ay may sariling grupo ng malilit na mga hakbang. At mayroong iba't ibang
          mga resipe, o mga algoritmo, depende kung anong lasa ng tsokolate ang gusto
          mo. Bawat hakbang ay importante, kahit ang maliliit na mga bagay. Kaya kung
          wala ang isang hakbang, ang natira ay hindi maaaring makompleto. Ang paglikha
          ng mga algoritmo ay lubhang importante. Ito ang dahilan kung bawat hakbang
          ay nakasulat, kaya di bale kung sino ang gumagawa nito, ang resulta ay pareho
          lang.
    C2_playlab_createstory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Hanggang sa panahong ito, bumuo ka lang ng mga animasyon o mga kuwento
          na gumagawa ng parehong bagay bawat oras na patakbuhin mo ito. Ngayon, maaari
          ka nang lumikha ng isang inter-aktib na laro na talagang mapaglaruan mo.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: May mga ilang bagong mga bloke na dapat mong subukan. Mayroon ang "when
          arrow" na bloke at ang "move actor" na bloke. Maaari mong ilagay ang mga
          blokeng ito nang sabay-sabay para mapagalaw ang mga artista sa paligid gamit
          ang mga arrow na keys. Ay mayroon ding iilang mga bloke na gumagawa ng mga
          bagay kapag nagkabanggaan ang mga artista o kapag may nag-click. Suriin
          ang mga ito at magsaya!
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Ngayon gagawa tayo ng relay programming. Ito ay tungkol sa pag-program
          sa ilalim ng kagipitan at pag-dedebug sa mga mali na minsan ay nangyayari
          kung magtatarabaho ka ng mabilisan o nasa mga koponan. Gagamitin natin ang
          graph paper programming para ma-simulate ang pagko-code, at gumamit ng relay
          races para masimulate ang pagkaroon ng deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: Sa relay programming, ang mga koponan ay maghahabulan na makatapos sa
          graph paper na programa. Kailangan mong suriin ang nagawa ng iyong mga kasama,
          i-debug ito, ayusin ito kung may mga mali, magdagdag ng iyong pana, at tatakbo
          pabalik at mag-tag sa iyong kasama.
      3:
        image: notes/C2_relay_programming_3.png
        text: Ang mga programmer ay gugamit ng pag-dedebug nang maraming beses para
          makahanap at makaayos ng mga problema sa kanilang algoritmo o code. Mayroong
          maraming paraan para ma-debug ang mga problema. Isa sa pinakamadali ay ang
          paggalaw ng paunti-unti hanggang makita mo kung saan ang mali, at pagkatapos
          ay ayusin ito.
      4:
        image: notes/C2_relay_programming_4.png
        text: Dito, sinusubukan kong gumawa ng back handspring, ngunit palagi akong
          nahuhulog. Sinunod ko ang bawat parte, bawat hakbang at natanto ko kung
          saan ako nagkamali. Ipinakita sa akin ng coach ko na hindi ko nilagay ng
          tama ang mga kamay ko sa beam. Kaya sinubukan ko ang isa pang back handspring
          sa beam gamit ang bagong posisyon ng kamay, at nakuha ko ito! Masaya ako
          dahil na-debug ko ang aking back handspring. Napag-alaman natin ito! Ang
          pag-dedebug ay ang paghahanap at pag-aayos ng mga problema. Mahusay, magandang
          trabaho!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Isang bagay na talagang mahusay ang mga kompyuter ay ang paulit-ulit
          na mga utos. Bilang isang tao, tatamarin ka kung kailangan mong gawin ang
          parehong bagay ng napakaraming beses. Ngunit ang kompyuter ay maaaring gumawa
          ng parehong bagay sa isang milyon o kahit bilyong beses, at hindi ito tatamarin
          at magagawa niya iyon ng maayos.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Kaya isang halimbawa, kung gusto kung bumati sa lahat ng tao sa Facebook
          nang maligayang kaarawan sa pamamagitan ng pagpapadala sa kanila ng email,
          maaaring tatagal ito ng isang siglo para maisulat ang lahat ng mga email
          na iyon para sa lahat. Ngunit gamit ang iilang linya ng code, maaari akong
          magkaroon ng sistema na magpapadala ng email sa lahat ng tao sa Facebook
          na bumabati sa kanila ng maligayang kaarawan. Iyan ang mga loops, at kung
          bakit sila napakahalaga, at isang bagay na maaaring magawa nang mahusay
          ng mga kompyuter.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: Sa halimbawang ito ang iyong layunin ay mapagalaw ang ibon papunta sa
          baboy. Ngayon maaari tayong gumamit ng "repeat" na bloke para magawa natin
          ito na madali lang. Maaari nating magawa ito sa pamamagitan ng pagbigay
          ng komputer ng "move forward" na utos ng limang beses para mapagalaw ang
          ibong ng isang hakbang bawat beses papunta sa baboy.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: O maaari mo lang sabihan ang kompyuter na gumamit ng "move forward"
          nang isang beses, at sabihan na uulitin ito ng 5 beses, at gagawin niya
          ang parehong bagay. Kaya para magawa ito, kaladkarin ang iyong "move forward"
          na utos, at pagkatapos ay ilagay ito sa loob ng "repeat" na bloke. At maaari
          mo itong pindutin at sabihan kung ilang beses mo ito gustong ulitin ang
          bloke para masabihan ito kung ilang hakbang ang gusto mong lalakarin niya
          pasulong.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Ngayon, isa pang bagay ay maaari tayong maglagay ng maraming mga utos
          hangga't gusto mo sa loob ng "repeat" na bloke. Sa halimbawang ito, sinasabihan
          mo ito na kumilos paharap at lumiko sa kaliwa, kung saan uulitin niya ito
          nang limang beses. Sige, mahusay at magsaya!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Isa sa mga dakilang bagay sa kompyuter na pagproprogram ay kapag naturuan
          mo na ang kompyuter na gumawa ng isang aksyon, maaari mong tawagin ang function
          na iyan ulit. Bibigyan mo ito ng pangalan at pagkatapos ay maaari mo na
          itong tawagin. Para lang pagpapalawak ng wika.
      2:
        image: notes/C3_artist_functions_2.png
        text: Sa programa na ginawa natin, natutunan natin kung paano gumuhit ng parisukat
          sa pamamagitan ng paggalaw at pagliko ng apat na beses. Maaari nating kunin
          ang function at bibigyan ito ng pangalan, "draw a square", para kahit anumang
          oras na gusto natin itong gawin, sasabi lang tayo ng "draw a square" at
          babalik ito at papatakbuhin ang function, ang code na iyon. Magagawa ito
          para sa atin. Nadagdag na natin ang konseptong ito sa ating programming
          na wika.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Hindi ka nga maging kwalipikado sa karera kung wala kang mga tao na
          bihasa sa computer science dahil sa gaanong kalaki nang datos na ikokolekta
          at ang pangangailangang magkaroon ng mga taong makakasulat ng mga programa
          para malaman kung paano natin malalaman kung paano natin palakihin ang performance.
      2:
        image: notes/C3_artist_intro_2.png
        text: Sa mga palaisipang ito, ikaw ang artista na gumagamit ng lapis para
          makaguhit ng iba't ibang mga hugis. Kahit saan pupunta ang iyong artista,
          mag-iiwan ito ng guhit sa likod mo.
      3:
        image: notes/C3_artist_intro_3.png
        text: Para makagalaw sa paligid ng kanbas, gagamit ka ng "move forward" na
          bloke. Dito ang "move forward" na bloke ay nagsasabi na lumakad pasulong
          mga 100 pixels ang layo. Kapag pinindut natin ang "run", ano ang mangyayari?
          Ang artista ay lalakad pasulong sa isang tiyak na halaga at ang halagang
          ito ay 100 pixels. Ang mga pixel ay talagang napakaliit na mga parisukat
          sa screen ng iyong kompyuter.
      4:
        image: notes/C3_artist_intro_4.png
        text: Ang isa pang bloke na meron tayo sa palaisipang ito ay nagsasabi na
          lumiko pakanan ng mga 90 degrees. At kung ikaladkad natin ito palabas ay
          magpapaikot sa ating artista sa isang tiyak na halaga. Kaya maaari kang
          maglaro at tingnan kung gaano kalayo mo ba gustong paikutin ang iyong artista.
          Ito ay isang 90 degree na pag-ikot.
      5:
        image: notes/C3_artist_intro_5.png
        text: At ito ang 120 degree na pagliko. At tandaan, maaari mong baguhin ang
          mga halagang ito sa pamamagitan ng pagpindut sa mga pana kasunod ng mga
          numero para sa mga pixel at mga degrees. Magsaya sa pagguhit gamit ang iyong
          artista!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Kung maglalagay ka ng isang loop sa loob ng isa pang loop, tinatawag
          itong nested loop. Halimbawa, dito binigyan na tayo ng code para makaguhit
          ng tatsulok na may gilid na 100 pixels ang haba gamit ang "repeat times"
          na bloke na tinakda sa tatlo, isa para sa bawat gilid ng tatsulok.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Ngunit gusto nating gumuhit ng 6 na tatsulok. Para magawa iyon, kukunin
          natin ang loop na iyan at ilagay ito sa loob ng isa pang "repeat times"
          na bloke. Ang galing!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Ito ay isang konsisyonal na bloke. Nagsasabi ito na IF mayroong nektar
          o pulot na mas mababa, o katumbas o mas malaki pa sa isang numero, THEN
          gawin ang isang bagay.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Ito ay nakakatulong kung hindi natin alam kung ilang nektar o pulot
          ang kukunin, gaya na nakikita natin dito sa tandang pananong na ito.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: Sa halimbawang ito, sasabihan natin na kung ang lilang bulaklak ay mayroong
          nektar na higit pa sa 0, kukunin natin ang nektar. Sasabihan nito ang ating
          bubuyog na kumuha ng nektar hangga't mayroon pang laman. Ta-dah!
    C3_bee_debugging:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Nakarinig ka na ba nang pag-dedebug ng isang programa? Ito ang paraan
          para malaman mo kung ano ang hindi gumagana. Kapag nag-debug ka ng code,
          matutukoy mo at matanggal ang mga kamalian.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Dito ay binigyan lang tayo nang iilang mga bloke na nasa workspace na
          natin. Gagamit tayo ng hakbang na button para makatawid sa mga bloke, paisa-isa,
          para makita kung ito ang tamang solusyon at kung saan natin kailangang ayusin
          ito.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Mukhang iyan na ang ating problema! Kailangan natin nang isa pang "move
          forward" na bloke. Ang hakbang na button ay nakakatulong sa atin na mag-debug
          sa problema sa pamamagitan nang pagtukoy kung saan ang mali para maayos
          natin ito.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: Isa sa pinakamahalagang konsepto sa computer science ay kung paano mabigyan
          ng kahulugan ang mga bagong mga utos, paano magdagdag ng sarili mong mga
          salita sa wika ng kompyuter. Karamihan sa mga wika ng kompyuter ay mayroon
          lang mga isang daang salita o mga utos. Ang sining at mahika ay nasa pagbigay
          kahulugan sa sarili mong mga bagong salita mula sa mga blokeng pundasyon
          na ito.
      2:
        image: notes/C3_bee_functions_2.png
        text: Ginagawa natin ito sa lahat ng oras sa palakasan. Halimbawa, sa basketbol,
          nagsisimula ka sa pagtuto kung paano magdribol, paano gumawa ng lay-up,
          paano mag-rebound. Kapag natutunan mo na ang mga pangunahing mga galaw,
          mag-aaral ka naman ng mga bagong galaw at sama-samahin mo ang pundasyon
          na blokeng ito, gaya ng "pick and roll" o "give and go". Maaari ka na ding
          gumawa ng mga komplikadong mga laro. Kapag natutunan mo na ang larong iyan
          at nabigyan ng pangalan, lahat ng nasa koponon ay malalaman din nila kung
          paano gawin ito.
      3:
        image: notes/C3_bee_functions_3.png
        text: Sa gayunding paraan, kapag naturuan mo na ang kompyuter kung paano gagawa
          ng aksyon nang isang beses gamit ang pagkakasunod ng mga utos na ito, maaari
          ka nang gumawa ng sarili mong pangalan para sa aksyon na iyan para madali
          lang itong magamit mamaya. Kapag nagbibigay ka na ng kahulugan sa iyong
          sariling mga utos at nagbigay ng pangalan, ito ay tinatawag na function.
          Ngayon gagamit tayo ng mga function para matulungan ang bubuyog.
      4:
        image: notes/C3_bee_functions_4.png
        text: Sa halimbawang ito, ang ating function ay tinatawag na kumuha ng 2 nektar,
          ang berdeng bloke na nandito. Alam natin kung ano ang gagawin ng kumuha
          ng 2 nektar sa pamamagitan ng pagmamasid sa abong kahon na ito kung saan
          natin binigyang kahulugan ang function. Kung titingnan natin sa loob, ang
          kumuha ng 2 nektar ay kukuha ng nektar at pagkatapos ay uulitin na naman
          niya ang pagkuha ng nektar. Palaging tingnan kung ano ang laman ng abong
          kahon para malaman mo kung ano ang ginagawa ng berdeng function na mga blokeng
          ito.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Ngayon gagamit tayo ng isang nested na mga loop para sa bubuyog. Binigyan
          namin kayo ng panimulang code na nagsasabi sa bubuyog na lumakad pasulong
          at kumuha ng nektar nang tatlong beses at pagkatapos ay liliko sa kanan.
          Kunin natin ang buong piraso ng code at i-nest natin ito sa isa pang "repeat"
          na bloke at itakda natin na uulit ito nang tatlong beses. Tapos na!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Lilikha ka ng sarili mong bounce na laro na maaari mong ibahagi sa iyong
          mga kaibigan! Ang cool!
      2:
        image: notes/C3_bounce_2.png
        text: Para makapagsimula, kailangan nating iugnay ang mga paddle na mga kontrol
          sa mga arrow key na nasa keyboard natin.
      3:
        image: notes/C3_bounce_3.png
        text: Magagawa natin ito sa pamamagitan ng pag-ugnay ng kaliwang arrow na
          bloke papunta sa move left na bloke at ang when right arrow na bloke papunta
          sa move right na bloke. Subukan ito at makakagawa ka na ng sarili mong bounce
          na laro kaagad!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Ang araling ito ay computational thinking. Minsan ang pag-aaral ng bagong
          laro ay medyo mahirap, di ba? Sa una maaari itong nakakalito at minsan,
          walang sinuman ang maaaring makapagturo sa iyo sa mga patakaran, kailangan
          mo itong malaman nang ikaw lang.
      2:
        image: notes/C3_computational_thinking_2.png
        text: Ang magandang balita ay maaari mo pang mapahusay ang pag-iisip sa mga
          bagay-bagay nang ikaw lang kung alam mo ang iilang mga sekreto sa pag-iisip.
          Ang mga sekretong ito ay mga pambihirang paraan para sa pagtingin at paglutas
          ng mga problema. Sa araling ito, matutunan mo ang apat na mga sekreto at
          magsanay sa mga ito kasama ang iyong kaibigan para malaman niyo ang mga
          patakaran ng laro.
      3:
        image: notes/C3_computational_thinking_3.png
        text: Kung hahatiin mo ang malaking problema sa malilit na mga piraso, gumagamit
          ka sa iyong utak para maayos ang malaking problema. Kapag na hati na natin
          ang problema sa iilang malilit na piraso, maaari na tayong pumunta sa susunod
          na sekreto, na tinatawag na pattern match.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Ito ang paraan kung saan naghahanap tayo ng pagkakatulod sa mga bagay.
          Kapag nakita na natin ang mga bagay na pareha, maaari na nating malaman
          kung anong mga bagay ang magkaiba. Kapag tinanggal ko na ang mga pagkakaibang
          iyon, ito ay tinatawag na abstraction.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Kapag nalaman ko na ang mga hakbang sa paglutas ng problema, maaari
          ko nang ilagay ang mga hakbang na iyon sa isang partikular na pagkakasunod
          na tinatawag na algoritmo para kahit na sino ay maaaring gumamit ng mga
          direksyon ko para malutas ang problema. Gagamitin natin ang apat na hakbang
          na ito para malaman kung paano maglaro sa larong ito na walang mga alituntunin.
          Sa katapusan ng laro, makakapaglaro ka ng kagaya nito!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Ang araling ito ay tinatawag na crowdsourcing. Sa araling ito gagamit
          tayo ng mga baraha para matuto tayo kung paano kadali ang iilang mga bagay
          na gawin kapag nasa grupo, sa halip na susubukan mo ito nang ikaw lang.
          Kaya isama ang iyong mga kaibigan at gumawa ng isang bagay na kasindak-sindak.
          Ang crowdsourcing ay ang pagkuha ng mga tulong mula sa isang malaking grupo
          ng mga tao para matapos ang isang bagay nang mabilisan.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: Sa computer science, gumagamit tayo ng crowdsourcing sa lahat ng oras.
          Libo-libong mga baguhan at mga propesyonal ang nag-uugnay sa kanilang mga
          kompyuter para maghanap mula sa bilyun-bilyong piraso ng mga impormasyon.
          Ang paghahanap sa mga bagay gaya ng susunod na Mersenne prime number, o
          kahit na mga posibleng komunikasyon ng mga alien.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Kapag nakakita ka ng isang pelikula, bawat sedundo ng pelikula ay 24
          na indibidwal na mga larawan, na tinatawag naming mga frames. Kaya sa bawat
          isa sa ma larawang iyon na kailangang ilikha at isabay-sabay. Ang koponan
          ko at ako, lahat kami ay mga software developers. Nagtulong-tulong kami
          para makalikha ng iasang piraso ng makina na naglilikha ng mga larawan,
          at lumikha sa huling image na makikita mo sa screen. Ito ay isang magandang
          tool na mgagamit ng mga artista, at ibang mga developers isip bahagi ng
          kanilang koponan at ang prosesong ito ay nagbibigay sa kanila ng paraan
          na makalikha ng mga larawan na gusto nila sa screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: Halimbawa, sa Finding Nemo, nang sina Crush at Squirt at lahat ng mga
          kaibigan nila ay lumipad sa East Australian Current. Nakakakita ka ng mga
          larawan ng tubig na dumadaloy, nakakakita ka ng mga kulay sa likod ng mga
          pagong, at nakakakita ka sa gilid ng mga isda. Lahat ng mga bagay na iyon
          ay nagawa sa pamamagitan ng matematika at mga programa sa kompyuter na isinulat
          namin, na binigay namin sa mga artista at ginamit nila para magawa ang huling
          larawan at baguhin ito at pagandahin at gawing masayang tingnan.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: Ang araling ito ay tinatawag na dice race. Halos lahat ay gustong maglaro
          ng mga kompyuter na mga laro. Nakakapag-isip ka ba kung paano ginawa ng
          mga komputer programmer ang mga hakbang ng laro bilang programa? Ang unang
          hakbang sa paglikha ng mga kompyuter na laro at sa paglutas ng kahit na
          anong mga problema ay nangangailangan ng pag-iisip at pagpaplano.
      2:
        image: notes/C3_dice_race_2.png
        text: Ang pag-iisip na hakbang ng paglutos ng problema ay magbubunga ng isang
          algoritmo, kung saan ito ay isang paunti-unting hakbang para malutas ang
          problema o matapos ang gawain. Sa araling ito, lilikha ka ng algoritmo para
          sa isang dice race na laro. Pagkatapos sasabihan mo ang iyong mga kaibigan
          na subukan ang iyong plano at tingnan kung masunod ba nila ang mga hakbang
          mo sa paglaro ng laro. Pagkatos masiguro ng programmer na ang mga hakbang
          ay tama, oras na para magsalin sa algoritmo papunta sa programa na may wika
          na maiintindihan ng kompyuter.
      3:
        image: notes/C3_dice_race_3.png
        text: Halos lahat ng ginagawa natin araw-araw ay nangangailangan ng algoritmo,
          ang lista ng mga hakbang na sinusunod mo para matapos ang isang gawain.
          Isipin ang paghahanda para sa pasukan o pagpaplano ng masayang araw kasama
          ang iyong mga kaibigan o paghahanda ng meryenda. Para makompleto ang mga
          gawaing ito, kakailanganin mo itong hatiin sa maliliit na mga hakbang at
          minsan ang mga hakbang ay dapat nasa isang tiyak na pagkakasunod.
      4:
        image: notes/C3_dice_race_4.png
        text: Isipin ang paggawa ng sandwich. Hindi mahalaga kung anumang kasangkapan
          ang uunahin mo sa pagkuha mula sa kabinet. Ngunit hindi mo maaaring i-spread
          ang peanut butter hangga't hindi mo mabuksan ang lalagyan. Ang mga kompyuter
          ay nangangailangan din ng mga algoritmo at mga programa para maipakita kung
          paano gumawa ng mga simpleng bagay na maaari nating magawa ng hindi mag-iisip
          tungkol dito.
      5:
        image: notes/C3_dice_race_5.png
        text: Ang isang algoritmo ay ang pag-iisip kung ano ang kailangang mangyari
          habang ang programa ay ang aktwal na mga instrusyon na binigay sa kompyuter
          para magawa ito. Ang algoritmo ay dapat nakasalin sa isang programa bago
          mapatakbo ng kompyuter. Ang paghahati sa gawain sa maliliit na hakbang na
          tinatawag na algoritmo ay minsan mahirap. Ngunit gaya ng kahit anong kakayahan,
          naging madali ito kapag nagsasanay.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: Habang ang mga loop ay katulad lang ng karaniwang ginawa mo sa araw-araw
          na buhay. Isipin na ikaw ay naghuhugas ng kotse, palagi kang nagkukuskos
          hanggang ito ay malinis na. Habang hindi ito malinis, patuloy ka sa pagkuskos.
          Palagi mong tinatasa ang mga bagay-bagay sa lahat ng oras.
      2:
        image: notes/C3_farmer_while_2.png
        text: Mayroon tayong bagong anyo para matulongan natin ang magsasaka. Tinatawag
          itong while-block. Napakasimple lang talaga ito. Habang ang pahayag sa taas
          ay 'true', gawin ang bagay na ito. Halimbawa, habang may mga tumpok, maglipat
          ng isang dayami. Sige at subukan mo ito sa iyong magsasaka.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: Ang araling ito ay isang functional suncatchers. Lilikha ka ng magagandang
          suncatchers gamit ang mga function. Mayroong iilang mga hakbang sa paglikha
          ng mga suncatcher na ito. Ang ilan sa mga hakbang ay kailangan mong ulitin
          ng maraming beses.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: Ang unang hakbang para mapasimple ang proseso sa paggawa ng isang suncatcher
          ay ang pagtukoy kung alin ang dapat nating ulit-ulitin. Maaari nating i-grupo
          ang mga hakbang na ito sa tinatawag natin na function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: Ngunit may higit pa sa paglikha ng magagandang suncatcher kaysa sa pagsunod
          ng tumpak na mga hakbang. Minsan gusto nating maging malikhain at baguhin
          ang kulay ng butil na ginagamit natin. Maaari nating gawin ang bawat suncatcher
          na kakaiba kung gagamit tayo ng iba-ibang kulay ng butil.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Ang iyong suncatcher ay mapapasaiyo kung matutunan mong mag-isip sa
          mga butil isip isang variable kung saan ang salita ay nangahulugang isang
          placeholder para sa impormasyon na maaaring magbago. Magsaya sa paglikha
          ng mga magagandang suncatcher gamit ang mga function at mga variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: Ang araling ito ay tungkol lahat sa internet. Ang Internet ay isang
          napakataong lugar at katulad ng isang abalang kalsada. Ang mga mensahe ay
          gaya ng mga kotse na mabilis na tumakbo para makapunta sa kanilang mga destinasyon.
          Ang mga mensahe ay mabilis na mabilis na gumalaw sa internet.
      2:
        image: notes/C3_internet_2.png
        text: Ang pagsasadula kung paano gumagana ang internet ay makakatulong para
          maintindihan mo kung ano ang mangyayari kung gagamit ka sa internet. Matutunan
          mo kung paano mapunta ang mensahe mula sa iyong kompyuter papunta sa paboritong
          website o mula sa kaibigan papunta sa email na inbox. Tulad na madali lang
          natin ma-navigate ang abalang mga kalsada kung alam mo ang daan at makakabasa
          ka ng mga palatandaan, ang paglalakbay sa internet ay hindi masyong kumplikado
          kung alam mo ang nangyayari sa likod nito.
      3:
        image: notes/C3_internet_3.png
        text: Ang pagpapadala ng mga mensahe sa internet ay medyo pareha lang ng pagpapadala
          ng mensahe sa koreo ngunit may iilang kaibahan lang. Nandito ako sa Google.com.
          Ang IP address para sa website na ito ay ang numerong ito. Maaari mong isipin
          ang IP address bilang iyong address sa koreo. Isipin natin na gusto kong
          magpadala ng mensahe sa koreo para sa isang tao sa opisina sa baba. Nakikita
          mo ba ang URL at ang IP address sa pintuan? Sinulat ko ang mensaheng ito
          at pinindot ko ang "send".
      4:
        image: notes/C3_internet_4.png
        text: Hindi tulad ng Postal Service, ang unang bagay na mangyari ay hinahati
          ng Internet ang iyong mensahe sa maliliit na bahagi para madali lang itong
          mapadala. Ang maliliit na bahaging ito ay tinatawag na packets. Bawat packet
          ng mensahe ay pinapadala sa destinasyon ng paisa-isa. Ang mga packets na
          ito ay isinama-sama sa tamang pagkakasunod para mababasa ng tumatanggap
          nang tama. Siyempre, may marami pang mga bagay na dapat nating matutunan
          tungkol sa paano gumagana ang internet ngunit ito ay isa nang magandang
          simula. Ikaw ay papunta na para maging isang mahusay na gumagamit ng interenet!
          Siguraduhin na ipag-alam sa iyong pamilya at mga kaibigan kung ano ang natutunan
          mo!
      5:
        image: notes/C3_internet_5.png
        text: Ang pangalan ko ay Amanda Camp at ako ay isang software na enhinyero
          sa Google. Kabilang ako sa isang koponan na nagtatrabaho sa isang backend
          na server na nag-imbak ng mga profile at mga kontak. Sa aking trabaho, palagi
          kaming nag-iisip tungkol sa paano ang mga kontak mapadala sa ibang mga kagamitan,
          gaya ng iyong telepono. Karamihan sa mga tao ay may maraming mga kontak,
          maaaring magkaroon ka ng sabihin na nating, 1000 na mga kontak at hindi
          natin gusto na ipadala ang lahat ng kontak na iyon sa iyong telepono nang
          sabay-sabay dahil ito ay masyadong malaki na mensahe. Kagaya ng paano hinati
          ng internet ang malalaking mensahe sa mga packets, gagamit tayo ng isang
          konsepto na tinatawag na paging kung saan maaari tayong magpadala sa iyong
          telepono ng 100 na mga kontaks sa bawat beses at hahayaan natin ang telepono
          na tumugon sa atin at humingi ng susunod na 100.
      6:
        image: notes/C3_internet_6.png
        text: Ang pinaka-nakakatuwang bagay sa software ay ang katotohan na maaring
          makaimpluwensiya sa buong mundo. Una akong natuto na mag-program noong 19
          anyos pa lang ako. Siguro nasa ikalawang taon o pangatlong taon ako noon
          sa kolehiyo. Ang unang programa na naalala kong sinulat ko ay isang bagay
          na nagpapalit sa Celsius papuntang Fahrenheit. Nagustohan ko ang pag-program
          dahil gusto kong makatulong sa mga tao. Maaari akong magsulat ng mga programa
          sa Google na makakatulong sa lahat ng tao sa buong mundo at iyan ay masalimuot
          at nakakatuwa.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: Ang mga tao ay gumagawa ng mga desisyon araw-araw. Halimbawa, bago ka
          lumabas, mayroon kang kung na pahayag na nagsasabi na kung umuulan, kailangan
          kong kunin ang aking jacket. Ang mga kompyuter ay kamangha-mangha kapag
          nakapili ka ng mga uri ng mga pahayag na maari nilang mapatakbo at sa hindi
          kapanipaniwalang bilis. Ang programa ng kompyuter ay may kaunting matematiko
          at iilang mga kung na mga pahayag kung saan ginagawa ang mga desisyon.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: Ang kung na bloke ay nakakatulong sa zombie na gumawa ng desisyon. Sinusuri
          nito ang isang bagay. Halimbawa, gagamit tayo ng isang bloke na nagsasabi
          na kung may daanan pakaliwa, at maglagay ng pagliko sa kaliwa na utos sa
          loob nito. Sinasabihan natin ang zombie na magmasid sa paligid nito, at
          kung may nakita itong daanan sa kaliwa, liliko ito.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Pagkatapos ay gagamitin natin ang "move forward" na bloke sa loob ng
          "repeat" na blokeng ito para mapagalaw natin ito pasulong hangga't gusto
          niya lang gumalaw pasulong. Pagkatapos kung may lilikuan, ang "if" na bloke
          ay magsasabi dito na gawin ang pagliko sa kaliwa. Makikita mo na kung gagawin
          natin ito, kung gawin natin ang pagliko sa kaliwa at hindi dumiretso pasulong,
          makakamit natin ang ating layunin.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: Ito ay isang halimbawa ng paggamit ng "if" na pahayag kung saan ay isang
          napakahalagang konsepto sa pag-program para sa kompyuter. Isa sa mga unang
          bagay na natutunan ko ay kung paano magsulat ng isang programa na naglalaro
          ng tic-tac-toe. Mayroon akong mga "if" na pahayag, sige, kung ang kalaro
          natin ay malapit nang manalo, ituloy mo at harangan ang lugar na iyon. Magsayang
          mag-aral kung paano gamitin ang mga "if" na pahayag, ito ay isang pangunahing
          konsepto.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: Sa halimbawang ito, ang layunin mo ay mapapunta ang zombie sa mirasol.
          Maaari tayong gumamit ng limang "move forward" na mga bloke o maaari nating
          sabihan ang kompyuter na gumalaw pasulong at ulitin ito nang limang beses
          gamit ang isang "repeat" na bloke.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Ito ay nakakatipid ng oras at nagpapadali nito. Para magamit ito, ilagay
          lang "move forward" na bloke sa loob ng isang "repeat" na bloke. Pindutin
          ang "run" at ang zombie ay gagalaw pasulong nang limang beses papunta sa
          masarap na mirasol.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Hanggang sa panahong ito, bumuo ka lang ng mga animasyon o mga kuwento
          na gumagawa ng parehong bagay bawat oras na patakbuhin mo ito. Ngayon, maaari
          ka nang lumikha ng isang inter-aktib na laro na talagang mapaglaruan mo.
      2:
        image: notes/playlab_2.png
        text: May mga ilang bagong mga bloke na dapat mong subukan. Mayroon ang "when
          arrow" na bloke at ang "move actor" na bloke. Maaari mong ilagay ang mga
          blokeng ito nang sabay-sabay para mapagalaw ang mga artista sa paligid gamit
          ang mga arrow na keys. Ay mayroon ding iilang mga bloke na gumagawa ng mga
          bagay kapag nagkabanggaan ang mga artista o kapag may nag-click. Suriin
          ang mga ito at magsaya!
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Ito ang pagsulat ng kanta na aralin. Ang musika ay para lang ding pagprogram
          sa kompyuter. Ang mga nakasulat na tala at mga salita ay nagsasabi sa mang-aawit
          kung ano ang eksaktong gagawin. May ilang mga parte ng musika na ginagamit
          nang paulit-ulit.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Tinatawag natin itong koro. Sa programa ng kompyuter, ang mga parte
          ng mga programa na ginagamit nang paulit-ulit ay tinatawag na mga functions.
          Kung ikaw ay nagbabasa ng titik ng kanta at nagsasabi ito nang salitang
          koro, aawitin mo ba ang salitang koro? Hindi, tingnan mo lang sa taas ng
          pahina para makita mo ang mga salitang bumubuo ng koro.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: Sa araling ito, matutunan mo ang isang walang-katuturan at kaunting
          awitin na tinatawag na "little bunny foo foo". Ang awit ay may koro na aawitin
          mo nang maraming beses at paulit-ulit. Ang function ay isang piraso ng code
          na maaari mong tawagin at gamitin nang paulit-ulit. Napapadali nito ang
          pag-program at naging mas mabisa para hindi mo na isulat ulit ang mga hakbang
          na nasa function nang paulit-ulit. Maaari mo lang itong isulat nang isang
          beses!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Ito ay ang kondisyonal na bloke. Nagsasabi ito na kung ikaw ay nasa
          bulaklak o sa pulot-pukyutan, gawin mo ang isang bagay. Nakakatulong ito
          kung hindi natin alam kung ilang pulot o nektar ang kukunin dahil sa nakikita
          natin dito ang tandang pananong.
      2:
        image: notes/C4_bee_conditional_2.png
        text: Sa halimbawang ito, sasabihin natin, kung ito ay isang bulaklak, kunin
          ang lahat ng nektar at pagkatapos gumamit ng isa pa na nagsabing, kung ito
          ay pulot-pukyutan, gumawa ng pulot. Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Mayroon tayong bagong bloke na tinatawag na "if/else" na bloke. Ito
          ay isang kondisyonal na pahayag gaya ng "if" na bloke na ginagamit natin
          sa mga palaisipan dati. Ngunit ngayon, mayroong bagong bahagi sa baba na
          nagsasabing "else". Ang if/else na bloke ay nagbibigay ng pagkakataon sa
          bubuyog na gumawa ng desisyon sa pagitan ng dalawang grupo ng mga aksyon.
          Kung ang bubuyog ay nasa bulaklak, gagawin ng bubuyog ang grupo ng mga aksyon
          na nilagay mo sa unang bahagi kung saan nagsasabi itong "do". Kung ang bubuyog
          ay wala sa bulaklak, gagawin ng bubuyog ang grupo ng mga askyon na nilagay
          natin sa lugar kung saan nagsasabi ng "else".
      2:
        image: notes/C4_conditionals_2.png
        text: Ang mga "if" na pahayag ay ang paraan ng mga kompyuter na makagawa ng
          mga desisyon. Ang mga tao ang nagtakda sa mga kondisyon para sa kompyuter
          na nagsasabi ng kung ang kompyuter ay pinapakitaan ng ganitong sitwasyon,
          gawin ito. Else, kung saan ibig sabihin ay ang isang pang gawain, gawin
          iyon. Ang nasa taas ng ating if/else na bloke ay nagsasabi na 'kung nasa
          bulaklak'. Ngunit ang nasa taas ng ating bloke ay maaaring magsabi ng ibang
          mga bagay, gaya ng 'kung ang bilang ng nektar ay 2' o 'kung may daanan sa
          hinaharap', ang ating bloke ay gayundin ang gagawin. Na kung ang pahayag
          sa taas ay "true", gagawin niya ang unang grupo ng mga aksyon. Pero kung
          ang pahayag sa taas ay "false", gagawin niya ang pangalawang grupo ng mga
          aksyon.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: Kapag gumagamit ka ng "repeat" na bloke para ma-loop ang iyong code,
          paano malaman ng kompyuter kung naulit na ba niya ito nang sapat? Ang repeat
          na bloke ay talagang nagtatago ng isang sopistikadong piraso ng code na
          tinatawag na "for loop" kung saan binibilang nito mula sa isang halaga hanggang
          sa katapusang halaga, sa pamamagitan ng isang tiyak na pagdagdag.
      2:
        image: notes/C4_for_loops_2.png
        text: Halimbawa, ang isang "repeat three" na bloke ay nagbibilang mula sa
          1 hanggang sa 3 sa pamamagitan ng pagdagdag ng 1. Bawat beses na nagbibilang
          ito, pinapatakbo nito ang code sa loob ng loop. Alam ng "for loop" kung
          ilang ulit siya nakatakbo sa pamamagitan ng paggamit ng isang tagabilang
          na variable na itinakda sa isang panimulang halaga sa simula ng loop at
          dinagdagan niya ito bawat beses na napatakbo ang loop. Kapag mas malaki
          na ang tagabilang na variable kaysa sa katapusang halaga, titigil na sa
          pagtakbo ang loop.
      3:
        image: notes/C4_for_loops_3.png
        text: Ang pakinabang sa paggamit ng tunay na "for loop" sa halip nang "repeat"
          na bloke ay maaari mo talagang makita ang tagabilang na variable at magamit
          ito sa loob ng iyong loop. Halimbawa, kung mayroon akong hanay ng mga bulaklak
          at ang una ay mayroong isang nektar, ang pangalawa ay mayroong dalawang
          nektar at ang pangatlo ay may tatlo, maaari kong gamitin ang for loop para
          sabihan ang bubuyog na kumolekta ng "counter" na nektar bawat beses, kung
          saan sa unang bulaklak ay isa, 2 sa pangalawa at 3 sa pangatlo.
      4:
        image: notes/C4_for_loops_4.png
        text: Sa for loop din, maaari mong dagdagan ang tagabilang ng isang numero
          maliban sa "isa" bawat beses. Posible ka ring magbilang ng dalawahan, apatan
          o kahit mga halaga na pabago-bago sa bawat panahon.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: Kapag gumagamit ka ng "repeat" na bloke para ma-loop ang iyong code,
          paano malaman ng kompyuter kung naulit na ba niya ito nang sapat? Ang repeat
          na bloke ay talagang nagtatago ng isang sopistikadong piraso ng code na
          tinatawag na "for loop" kung saan binibilang nito mula sa isang halaga hanggang
          sa katapusang halaga, sa pamamagitan ng isang tiyak na pagdagdag.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: Halimbawa, ang isang "repeat three" na bloke ay nagbibilang mula sa
          1 hanggang sa 3 sa pamamagitan ng pagdagdag ng 1. Bawat beses na nagbibilang
          ito, pinapatakbo nito ang code sa loob ng loop. Alam ng "for loop" kung
          ilang ulit siya nakatakbo sa pamamagitan ng paggamit ng isang tagabilang
          na variable na itinakda sa isang panimulang halaga sa simula ng loop at
          dinagdagan niya ito bawat beses na napatakbo ang loop. Kapag mas malaki
          na ang tagabilang na variable kaysa sa katapusang halaga, titigil na sa
          pagtakbo ang loop.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: Ang pakinabang sa paggamit ng tunay na "for loop" sa halip nang "repeat"
          na bloke ay maaari mo talagang makita ang tagabilang na variable at magamit
          ito sa loob ng iyong loop. Halimbawa, kung mayroon akong hanay ng mga bulaklak
          at ang una ay mayroong isang nektar, ang pangalawa ay mayroong dalawang
          nektar at ang pangatlo ay may tatlo, maaari kong gamitin ang for loop para
          sabihan ang bubuyog na kumolekta ng "counter" na nektar bawat beses, kung
          saan sa unang bulaklak ay isa, 2 sa pangalawa at 3 sa pangatlo.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Sa for loop din, maaari mong dagdagan ang tagabilang ng isang numero
          maliban sa "isa" bawat beses. Posible ka ring magbilang ng dalawahan, apatan
          o kahit mga halaga na pabago-bago sa bawat panahon.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: Kapag gumagamit ka ng "repeat" na bloke para ma-loop ang iyong code,
          paano malaman ng kompyuter kung naulit na ba niya ito nang sapat? Ang repeat
          na bloke ay talagang nagtatago ng isang sopistikadong piraso ng code na
          tinatawag na "for loop" kung saan binibilang nito mula sa isang halaga hanggang
          sa katapusang halaga, sa pamamagitan ng isang tiyak na pagdagdag.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: Halimbawa, ang isang "repeat three" na bloke ay nagbibilang mula sa
          1 hanggang sa 3 sa pamamagitan ng pagdagdag ng 1. Bawat beses na nagbibilang
          ito, pinapatakbo nito ang code sa loob ng loop. Alam ng "for loop" kung
          ilang ulit siya nakatakbo sa pamamagitan ng paggamit ng isang tagabilang
          na variable na itinakda sa isang panimulang halaga sa simula ng loop at
          dinagdagan niya ito bawat beses na napatakbo ang loop. Kapag mas malaki
          na ang tagabilang na variable kaysa sa katapusang halaga, titigil na sa
          pagtakbo ang loop. Ang pakinabang lang sa paggamit ng tunay na for loop
          sa halip na repeat na bloke ay makikita mo talaga ang tagabilang na variable
          at maaari mo itong gamitin sa loob ng iyong loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Ngayon na na-edit mo na mga function na bloke, oras na para lumikha
          ng bagong function na bloke mula sa wala. Simple lang ito. Makikita mo na
          ang toolbox ay mayroong kategorya na tinatawag na "functions". Kung mag-click
          ka dito, makakakita ka ng dalandan na button na tinatawag na "create a function".
          Ang pag-click nito ay nagpapakita ng isang editor ng function na nagagamit
          na natin dati sa pag-edit ng mga umiiral na mga function na bloke.
      2:
        image: notes/C4_function_create_2.png
        text: Gaya ng dati, magsisimula tayo sa pagbigay ng pangalan ng iyong function,
          pagsulat ng paglalarawan kung ano ba dapat ang gagawin ng function. Halimbawa,
          guguhit ito na parisukat o guguhit ng tatsulok at pagkatapos magkaladkad
          sa mga bloke mula sa toolbox papunta sa puting workspace sa baba. Tandaan
          na ikaladkad ang mga blokeng ito sa loob ng berde na "wrapping" na bloke
          para sa function.
      3:
        image: notes/C4_function_create_3.png
        text: Kapag tapos ka na, i-click ang "save and exit". Ito ay magdadala sa
          iyo pabalik sa loob ng pangunahing workspace ng palaisipan. Ang bagong function
          na nalikha mo ay lilitaw bilang isang berdeng bloke sa loob ng function
          na kategorya sa iyong toolbox. Kaladkarin at ihulog ito sa iyong pangunahing
          work space at gamitin ito gaya ng ibang mga bloke para malutas ang palaisipan.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Isa sa mga dakilang bagay sa kompyuter na pagproprogram ay kapag naturuan
          mo na ang kompyuter na gumawa ng isang aksyon, maaari mong tawagin ang function
          na iyan ulit. Bibigyan mo ito ng pangalan at pagkatapos ay maaari mo na
          itong tawagin. Para lang pagpapalawak ng wika.
      2:
        image: notes/C4_function_edit_2.png
        text: Sa programang nagawa natin, natutunan natin kung paano gumuhit ng parisukat
          sa pamamagitan ng paggalaw at pagliko nang apat na beses. Maaari nating
          kunin ang function at bigyang ito ng pangalan na "draw a square" para kahit
          anumang oras na gusto nating gawin ito, tatawag lang tayo ng "draw a square"
          at babalik ito at ipatakbo ang function na iyon, ang code na 'yan at ito
          na gagawa nito para sa atin. Nadagdag na natin ang konseptong iyan sa ating
          wika ng pag-program.
      3:
        image: notes/C4_function_edit_3.png
        text: Sa palaisipang ito, nakalikha na tayo nang "draw a square" na function
          para sa iyo. Makikita mo ito sa loob ng toolbox bilang isang berdeng bloke.
          Ang kailangan mo lang gawin ay magsulat ng parehong code na isinulat mo
          dati para makaguhit ng parisukat at ilagay ito sa loob ng function. Para
          magawa ito, i-click ang edit na opsyon sa berdeng "draw a square" na bloke.
          Magbubukas ito ng taga-edit ng function. Ang editor ng function ay may tatlong
          bahagi. Isang lugar kung saan mo bibigyan ng pangalan ang iyong function.
          Makikita ito sa berdeng bloke bago ang function. Pagkatapos ay magsulat
          ng maikling paglalarawan kung ano dapat ang gagawin ng iyong function.
      4:
        image: notes/C4_function_edit_4.png
        text: Sa kasong ito, ito ay dapat guguhit ng parisukat. Ang puting espasyo
          sa ibaba nito ay ang work space at gumagana ito gaya ng mga work space na
          nagagamit mo. Kaladkarin at ihulog ang mga bloke mula sa toolbox papunta
          sa work space na ito. Tandaan na ilagay ang mga bloke na maglilikha ng parisukat
          sa loob ng berdeng "wrapping" na bloke para sa function. Kapag tapos ka
          na, i-click ang "save and exit". Ito ay magdadala sa iyo pabalik sa pangunahing
          work space ng palaisipan. Ngayon maaari mo nang gamitin ang "draw a square"
          na function na bloke gaya ng ibang mga bloke para malutas ang palaisipan.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Narito ang function na guguhit ng parisukat na may 50 pixels ang gilid.
          Ang galing nito pero paano kung gusto mong gumihit ng parisukat na may gilid
          na 50 pixel at isa pang parisukat na may 100 pixels ang gilid? Hindi tayo
          dapat lilikha ng magkahiwalay na mga function na pareho lang ang ginagawa.
          Sa halip, maaari tayong gumamit ng isang function na may parameter.
      2:
        image: notes/C4_function_parameters_2.png
        text: Ang mga parameter ay nagbigay sa atin ng paraan na makapasa ng mga halaga
          sa ating function na magagamit isip mga variable sa loob ng function. Subukan
          nating magdagdag ng parameter na tinatawag na haba ng function na ito para
          magamit natin ito sa paglikha ng parisukat na may iba't ibang laki. Sa editor
          ng function, maaari mong baguhin ang pangalan at paglalarawan gaya ng dati,
          pero ngayon maaari ka na ring magdagdag ng parameter. Isulat ang pangalan
          ng iyong parameter sa espasyo at i-click ang "Add Parameter". Maglilikha
          ito ng pulang bloke na may pangalan ng parameter na kakalikha mo lang. Ngayon,
          maaari na nating palitan ang "move forward by 100" na bloke sa haba ng parameter
          para ito ay gagalaw pasulong ayon sa haba.
      3:
        image: notes/C4_function_parameters_3.png
        text: I-click ang "save and close" at kaladkarin palabas ang iyong bagong
          "create a square" na bloke mula sa functions na kategorya sa toolbox. Mapapansin
          mo na may espasyong walang laman sa sunod ng "haba" dahil gustong malaman
          ng function kung ano dapat ang halaga ng parameter na Haba. Kaladkarin ang
          numerong bloke mula sa Matematika na kategorya at ilagay ito sa loob ng
          espasyo. Tingnan kung paano mo magagamit ang function nang paulit-ulit na
          may iba-ibang haba para makagawa ng mga parisukat na may iba't ibang laki?
          Subukan mo ito!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Karaniwang nasa teksto lang ang pag-poprogram ngunit gagamit tayo ng
          Blockly na gumagamit ng mga visual na mga bloke na kailangan mong i-drag
          and drop para makasulat ng mga programa. Sa likod nito, naglilikha ka pa
          rin ng code. Para makapagsimula, gagawa tayo ng code para sa isang programa
          na makakatulong sa Angry Bird na ito na gumalaw sa loob ng maze para marating
          ang mga masasamang baboy na nagnakaw sa mga itlog nito.
      2:
        image: notes/C4_intro_2.png
        text: Ang Blockly ay nahahati sa tatlong pangunahing bahagi. Sa kaliwang bahagi
          ang maze ng ibon, kung saan tatakbo ang iyong programa. Ang mga instruksyon
          sa bawat antas ay nakasulat sa baba ng maze. Ang gitnang bahaging ito ay
          ang toolbox at bawat isa sa mga blokeng ito ay mga utos na naiintindihan
          ng ibon. Ang puting espasyo sa kanan ay tinatawag na workspace at dito mo
          gagawin ang ating programa.
      3:
        image: notes/C4_intro_3.png
        text: Kung kaladkarin ko ang "move" na bloke sa ating work space at pindutin
          ang "run", ano ang mangyayari? Ang ibon ay gagalaw pasulong nang isang kahon
          sa grid. At paano kung gusto ko ang ibon na gumawa ng isang bagay pagkatapos
          gumalaw nito nang isang kahon? Maaari akong magdagdag ng isa pang bloke
          sa ating programa.
      4:
        image: notes/C4_intro_4.png
        text: Pipiliin ko ang "turn right" na bloke at kakaladkarin ko ito sa baba
          ng "move" na bloke hanggang lilitaw ang dilaw na arrow. Pagkatapos ihuhulog
          ko ito at ang dalawang bloke ay magdidikit. Kapag pinindot ko ang "run"
          ulit, ang ibon ay gagawa sa mga utos na nakasalansan mula sa taas hanggang
          sa baba ng ating work space.
      5:
        image: notes/C4_intro_5.png
        text: Kung gusto mong magbura ng bloke, tanggalin lang ito mula sa salansan
          at kaladkarin ito sa basurahan. Pagkatapos mong mapindot ang "run", maaari
          mong palaging pindutin ang reset na button para maibalik ang ibon sa simula.
          Ngayon, puntahan natin ang mga baboy na iyon!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: Kung gusto kong gumuhit ng parihaba na may 50 pixels ang tangkad at
          may haba na doble nang tangkad nito, paano ko maprogram ang kompyuter na
          gawin ito? Buweno, maaari kong sabihan ang artista na lumakad sa taas nang
          50, lumiko sa kanan, at pagkatapos 100 na naman at galawin ko ang buong
          bagay na ito nang dalawang beses. Ngunit kapag ganito, ako ang gumagawa
          ng kompyutasyon para sa kompyuter.
      2:
        image: notes/C4_math_artist_2.png
        text: Ang pag-multiply ng limampu sa dalawa gamit ang iyong ulo ay hindi masyadong
          mahirap pero ang mga kompyuter ay talagang mahusay sa matematika at dapat
          nating hayaan natin ito hangga't maaari. Kung gagamit ako ng variable na
          tinatawag na taas sa halip, madali ko lang mabago ang taas sa limampu at
          pagkatapos baguhin ang aking algoritmo para masabihan ang artista na pumunta
          sa pataas ayon sa taas, lumiko sa kanan at pumunta ayon sa doble ng taas,
          nagbibigay ito sa atin ng parihaba na doble ang haba sa taas nito.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: Ang araling ito ay tinatawag na Tangram na mga Algorimo. Ang tangram
          ay isang palaisipan na may pitong piraso na maaaring ipagsama-sama para
          makalikha ng ibang mga hugis. Gagamit ka ng isang algoritmo para ipaliwanag
          sa iyong kasama kung paano buuin ang palaisipan.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: Ang algoritmo ay isa lang lista ng mga hakbang na maaari mong gawin
          para makompleto ang isang gawain. Ginagamit natin ang mga ito araw-araw
          sa mga bagay gaya ng listahan ng mga bibilhin at mga resipe. Kung panatilihin
          nating simple ang algoritmo, mayroong maraming paraan para mabigyan ito
          ng kahulugan at kahit na sino na gagamit sa algoritmo ay maaaring hindi
          makuha ang gusto mong mangyari. Para makasiguro ka na ang lahat ay magtatapos
          sa parehong bagay, dapat ang algoritmo mo ay detalyado at dapat tiyak na
          tiyak.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: Gumagamit ako ngayon ng isang algoritmo para matapos ko ang larawan.
          Gusto ko sanang subukang gumawa ng larawan ng mga lobo ngunit hindi ako
          isang kahanga-hangang pintor. Sa kabutihang-palad para sa mga tao gaya ko,
          maayroon tayong pagpintura gamit ang mga numero. Mayroong apatnapung kulay
          at mayroon itong maliliit na mga letra at mga numero na nagsasabi sa iyo
          kung anong kulay ang gagamitin sa bawat bahagi. Ang pagpintura ayon sa mga
          numero ay nagsasabi sa akin kung anong dapat na kulay ang gagamitin at kung
          saan.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: Ito ay tiyak na tiyak kaya nagagawa kong sumunod sa mga tagubilin at
          ang larawaan ay maganda ang kinaalalabasan. Ito ay isang mahusay na algoritmo.
          Kung ang mga instruksyon ay hindi sapat ang pagkakatiyak, ang aking mga
          lobo ay hindi maging maganda kagaya nito. Kung gusto mo talaga ang isang
          bagay na eksakto ang kalalabasan ayon sa plano mo, mahusay na ito ay tumpak
          na pagkakagawa.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Bawat koponan, ang taong nagbibigay ng instruksyon ay ang taong nakahawak
          sa papel, ay dapat malaman kung ano ang kanilang "off" na simbolo at kung
          ano ang "on" na simbolo nila. Sa binary, ito ay isang uri gaya ng alpabeto
          na may dalawang titik. Tulad ng pagkakaron ng A at B sa iyong buong alpabeto
          ngunit dito ay 0 at 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: Ang pinaka-karaniwang paraan sa paggamit ng binary ay sa isang "if"
          na pahayag. Ito ay isang klasikong bagay mula sa programming. Ang programa
          ay tumatakbo at kung nagsasabi ito na kung ang isang bagay ay totoo, gawin
          ito. O kung hindi totoo, gumawa ng ibang bagay. Paano kung gusto mong gumawa
          ng isa pang bagay na mas masyadong kumplikado. Sa halip na if na pahayag,
          maaaring gusto mong gumamit ng isang bagay gaya ng larawan o tunog sa isang
          kompyuter.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'Alam lang ng kompyuter ang binary ngunit ang isang larawan, ito ay
          hindi binary. Hindi ito mga 1s at 0s, kaya paano mo magawa ito? Narito ang
          isang halimbawa: Mayroon kang magandang larawan na ito. Ngayon, ang larawan
          ay isa lang uri ng impormasyon. Lahat ng impormasyon ay maaaring ma-encode
          sa binary sa anumang paraan, kailangan mo lang malaman kung paano gawin
          ito.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: Isipin mo na maglalagay tayo ng isang grid sa larawan ng panda at sa
          bawat parisukat, magpapasya tayo kung ang parisukat na ito ay may maraming
          itim o maraming puti. At pagkatapos kukulayan natin ito sa ganitong paraan.
          Ngayon bawat cell sa ating grid ay may kulay na itim o puti at ang bawat
          itim na parisukat ay sasabihin nating iyon ay ang mga sero (binary na numero)
          at ang mga puting parisukat ay mga uno, ang isang pang numero sa binary.
          Sa bandang huli, mayroon ka nang isang grupo ng mga uno at mga sero. Ito
          ang paraan kung paano mo i-representa ang isang larawan sa binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: Ang araling ito ay tinatawag na for loop fun. Sa araling ito, gagamit
          tayo ng numerong linya para makalaro ng dice na laro. Bawat manlalaro ay
          gugulong nang tatlong beses para makatakda ng panimulang halaga, paghinto
          na halaga at ang ating pagitan. Bawat turno, iikot tayo sa ating panimulang
          halaga, at bawat halaga na pareho ang numero ay magiging pagitan na halaga.
          Titigil tayo sa pag-ikot kapag nakuha na natin ang ating paghinto na halaga.
          Ang taong may pinakamataas na puntos ang mananalo!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: Ang for loops ay mabuti at madaling gamitin sa lahat ng lugar at kung
          ikaw ay maging isang meteorologo, gagamit ka ng mga for loops sa lahat ng
          oras. Hi, ako si Becky. Nagtatrabaho ako sa Everpower Renewables bilang
          isang meteorologo ng hangin. Hinuhulaan ko ang mga bilis ng hangin para
          sa Columbia River Gorge na lugar kung saan ang kompanya ko ay nagmamay-ari
          ng mga sakahan ng hangin.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: Sinisikap namin na maintindihan kung gaano karaming hangin ang pupunta
          dito para malaman namin kung magkano ang enerhiya ang mailabas nito. Binibigyan
          namin ang impormasyon na iyan nang real-time na taga-trade ng enerhiya.
          Sila ang bumibili at nagbebenta ng enerhiya base sa kung ilang enerhiya
          ang mapupunta doon para mapanatiling balanse ang power grid, manatiling
          bukas ang iyong mga ilaw, at maparami ang halaga ng enerhiya na makukuha
          namin sa aming mga sakahan.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: Kami ay nasa pambansang sentro ng kontrol para sa EverPower Renewables
          dito sa Portland at ito ay kung saan pupunta ang lahat ng impormasyon mula
          sa aming mga sakahan sa buong bansa. Kahit ang mga pinakamakapangyarihang
          kompyuter ngayon ay hindi kayang mag-simulate sa himpapawid kahit saan.
          Sa mga modelo ng kompyuter na pag-forecast, mayroon kaming tinatawag na
          grid. Bawat punto ng grid ay may latitud, longhitud. Kailangan naming ikalkula
          ang pisika at subukang alamin ang bilis ng hangin, temperatura, presyon,
          mga bagay na iyan.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Dahil ang mga ito ay lubhang malalaking mga grid at ginagawa namin ito
          sa napakaraming mga punto, nagloop kami sa mga bagay na ito nang milyung-milyong
          beses. Lahat ng ginagawa ko, gumagamit ako ng mga loops. Narito ang isang
          halimbawa ng for loop na nandoon. Kapag nag-forecast ka ng hangin, mayroong
          iba't ibang mga parameter na isasama dito, imposible ito para sa isang tao
          na umupo at gumawa ng mga kalkulasyon na iyon. Mayroong napakarami at iba't
          ibang aspeto sa kung ano ang nakakaapekto sa mga nangyari sa hangin, kaya
          kailangan natin ng isang kompyuter na model para ma-forecast ito.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: Sa araling ito, maglalaro tayo gamit ang iilang "fill in the blank stories".
          Mayroon kang template kung saan maaari mung punan ito para makalikha ng
          kaparehang mga kuwento na may nakakatuwang kaibahan.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: Sa araling ito, natutunan din natin kung paano gumawa ng naka-abstract
          na template mula sa dalawang kuwento na nalikha natin kanina. Ang "abstraction"
          ay isang sining sa pagtatanggal ng mga kaibahan at mga detalye para makita
          natin kung paano makagawa ng isang solusyon para sa iba't ibang mga problema.
          Sobra itong nakakatulong sa computer science dahil nagbibigay ito sa atin
          ng paraan na makalikha ng mga functions na maaaring makakatulong sa iba't
          ibang sitwasyon.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: Ang araling ito ay tinatawag na "songwriting with parameters". Magsusulat
          tayo ng mga awitin dito. Minsan ang koro ay may kaunting kaibahan bawat
          beses na awitin natin ito. Naalala mo ba ang "Old McDonal had a farm"? Ang
          koro ay may kaunting kaibahan sa bawat hayop. Ang sa bukid na iyon, mayroon
          siyang baka, e-i-e-i-o. Ang konting kaibahan sa bawat koro ay maaari nating
          maipakita gamit ang tinatawag nating mga parameter.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Minsan ang mga function ay nangangailangan ng mga parameter. Ang parameter
          ay isang karagdagang piraso ng impormasyon na maaari nating ipasa sa isang
          function para ma-customize natin ito para isang espesyal na pangangailangan,
          Kung gagawa ka ng mga ice cream sundae sa iyong mga kaibigan, gumagamit
          ka ng isang proseso na kagaya ng mga parameter sa isang kompyuter na programa.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: Ang disk ng vanilla na ice cream ay maaaring pareho sa bawat sundae,
          pero kung tatanungin mo ang iyong mga kaibigan kung aling dalawang toppings
          ang gusto nila, maaari kang magkaroon ng iba-ibang kombinasyon. Ang topping
          ay isang pangalan ng function ngunit bawat tipo ng topping ay isang parameter.
          Ang mga function at mga parameter ay nagtatrabaho ng sama-sama para makagawa
          ng mga mahusay na mga programa ng kompyuter at magagandang mga sundaes din.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: Ang araling ito ay tinatawag na "variables in envelopes". Matutunan
          natin kung paano gumawa ng mga pangungusap kung saan mayroon pa tayong mga
          kulang na mga piraso ng mga impormasyon. Karamihan sa atin ay kabisado na
          sa ideya nang pagpunan ng mga puwang. Gagawin natin ito habang naglalagay
          tayo ng pangalan natin sa ating takdang-aralin. Minsan mayroong higit sa
          isang salita ang kailangan nating punan at sa kasong iyan, bibigyan natin
          ang patlang ng marka para malaman natin kung saan napunta ang mga piraso
          ng impormasyon.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Ang mga variable ay lalagyanan ng mga piraso ng impormasyon na maaaring
          magbago. Sa pamamagitan ng paggamit ng mga variable para sa kulang na mga
          impormasyon, maaari tayong magpatuloy na magtrabaho sa kung anumang ginagawa
          natin at hayaan ang iba na magpunan sa mga kulang na impormasyon mamaya.
          Sa software, madalas tayong gagamit ng mga variables. Gagamit tayo ng mga
          variables bilang lalagyanan ng pangalan, email address, at kahit na ang
          bansag. Sa ganitong paraan maaari nating sabihan ang programa kung sa lilitaw
          ang mga detalye pagkatapos punan ng user ang mga ito. Gumagamit tayo ng
          mga variable sa lahat ng oras sa ating trabaho.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Anumang oras na kailangan mong mag-imbak ng piraso ng impormasyon para
          magamit mamaya, gagamit tayo ng variable. Sabihin na nating kailangan nating
          magbilang kung ilang beses ang isang user nag-tweet. Bawat oras na nag-tweet
          ang user, magdadagdag tayo sa numerong iyon at bawat oras na magbubura ng
          tweet ang user, babaan natin ito nang isa. Kahit anong oras na kailangan
          nating malaman kung ilang beses na nagtweet ang isang user, titingin lang
          tayo sa variable na iyon.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: Ang variable ay isang lalagyanan kung saan maaari kang mag-imbak ng
          impormasyon. Kung gagamitin mo ang variable na iyon sa isang algoritmo,
          bubuksan nito ang lalagyanan at titingnan kung ano ang laman nito. Ito ay
          nagbibigay sa iyo ng pamamaraan para makasulat ng matalinong mga algoritmo
          na kumikilos ng kakaiba depende sa halaga na inilagay sa loob ng variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: Halimbawa, kung gusto mong magsulat ng algoritmo na nagsasabing Maligayang
          kaarawan, ikaw ay 10 na! sa aking nakababatang kapatid, mahusay na ito ngayon
          ngunit kapag ipapatakbo ko ito ulit sa sunod na taon at gusto ko itong magsabi
          ng, Maligayang kaarawan, ikaw ay 11 na! Maaari akong lumikha ng isang variable
          na tinatawag na edad para ilagay ang edad ng kapatid ko at magsusulat ng
          isang algoritmo na nagsasabing Maligayang kaarawan, ikaw ay 'edad' na. Dahil
          ang variable ay maaaring magbago, maaari kong baguhin ang variable na 'edad'
          na maging katumbas ng 'edad' na dinagdagan ng isa sa bawat taon.
      3:
        image: notes/C4_variables_artist_3.png
        text: Sa palaisipang ito, gagamit tayo ng isang variable na magtatakda sa
          haba ng linya kung saan iguguhit ng ating artista. Kalaunan sa ating code,
          ang "move forward" na bloke ay titingin sa haba na variable para malaman
          kung ano ang itinakda mo dito.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: Ang variable ay isang lalagyanan kung saan maaari kang maglagay ng halaga
          sa loob. Kung gagamit ka ng variable sa isang algoritmo, nagbubukas ito
          sa lalagyanan at tiningnan kung ano ang laman nito sa loob. Ito ay nabibigay
          sa atin ng pamamaraan na makasulat ng matalinong mga programa na kumikilos
          ng kakaiba depende sa halaga na inilagay sa variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Ngayon ikaw ay susubok sa playlab kung saan ikaw ay binigyan ng iba't
          ibang mga laro at maaari mong palitan ang mga halaga ng variables gaya ng
          bilis, taas, puntos, para mabago ang laro. Hindi mo na kailangang baguhin
          ang algoritmo ng laro para mabago kung paano ito lalaruin, ang variable
          lang.
      3:
        image: notes/C4_variables_playlab_3.png
        text: Sa aking trabaho para sa Kindle at sa X-ray ng mga aklat, gumagamit
          kami ng mga variables sa iba't ibang paraan. Isang paraan na magagamit mo
          ang variable ay ang pag-imbak ng numero ng mga pahina ng aklat. Ang user
          ay maaaring magpataas o magpababa sa laki ng font na nasa pahina. Base sa
          laki ng font, ang bilang ng pahina sa isang aklat ay maaaring magbago. Maaari
          natin itong baguhin sa pamamagitan ng pag-imbak ng numero ng mga pahina
          sa isang variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Ngayon matutunan natin ang tungkol sa isang bagay na ginagamit ng lahat
          ng mga programmer araw-araw. Sila ay tinatawag na mga events. Ang event
          ay nagsasabi sa iyong programa na makinig kung may mga pangyayaring naganap.
          At kung nangyari ito, gumagawa ito ng aksyon. Ilang mga halimbawa ng mga
          event ay ang pakikinig para sa pag-click ng mouse, arrow na button, o pag-tap
          sa screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Dito, pagagalawin natin si Baymax pataas para hawakan si Hiro at gumalaw
          pababa para hawakan si Rapunzel kung ginagamit ng manlalaro ang pataas/pababa
          na mga arrow keys o ang pataas/pababa na mga buttons. Gagamitin natin ang
          "when up arrow" na bloke at ilakip ang "move actor up" na bloke dito, para
          kung pinindot ang pataas na arrow key, lahat nang nakalakip sa "when up
          arrow" na bloke ay tatakbo. Gagawin natin ang parehong bagay para mapagalaw
          si Baymax pababa. Paunti-unti ang iyong laro ay naging mas interaktib.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: Kaya anong grado ka na? Ikalawa. Ikasampung baitang. Unang baitang.
          Ako ay nasa ikawalong baitang nang natutunan ko ang pagprogram. Nagkaroon
          ako ng una kong kompyuter nang ako ay nasa ikaanim na baitang. Ang nakakasabik
          sa akin ay ang kakayahang makatulong para lutasin ang problema ng ibang
          tao. Maaari mong ipahayag ang iyong sarili, maaari kang gumawa ng mga bagay
          mula sa isang ideya.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Ang computer science ay ang batayan para sa napakaraming mga bagay na
          gagawin ng mga estudyante sa kolehiyo at mga propesyonal sa susunod na dalawampu
          o tatlumpung taon. Nagustuhan ko ang pagprogram dahil gusto kong makatulong
          sa mga tao. Nagkaroon ako ng oportunidad na gumawa ng isang bagay na makakapadali
          sa buhay ng mga tao. Naisip ko na ito ang pinakamalapit na bagay sa pagkakaroon
          ng isang superpower. Ang pagsimula ay ang pinakaimportanteng bahagi. Ako
          ay isang baguhan din at gusto ko kayong matuto kasama ako.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: Ako si John Vechey, ako ang isa sa mga nagtatag ng PopCap Games. Gumagawa
          kami ng mga laro gaya ng Plants vs. Zombies, Bejeweled, at Peggle. Maraming
          mga bagay tungkol sa mga laro ay hindi kung gaano ka perpekto ang iyong
          code. Hindi ito kung gaano ka perpekto ang iyong nagawa. Ito ay tungkol
          sa kung ano ang pakiramdam at kung gaano kasaya ito. Maaari mo lang malaman
          ang pakiramdan na ito kung susubukan mo ito, sa pamamagitan ng pag-aral
          at pag-akma at pagpahusay sa iyong sariling kakayahan sa paggawa ng mga
          laro.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Mayroon ka bang paboritong video game? Sige, gagawa tayo ng isang hakbang
          patungo sa paglikha ng mga laro gamit ang Play Lab. Ang magagandang laro
          ay mayroong kuwento at bawat kuwento ay may artista. Ang mga artista ay
          gumagawa ng mga bagay tulad ng pagsalita, paggalaw at pakikipag-ugnayan
          sa bawat isa. Pati na rin ang pagkuha ng mga puntos ayon sa mga tuntunin
          ng laro. Ngayon matutunan natin kung paano gawin ang lahat ng mga ito, nang
          paisa-isa, gamit ang mga karakter sa Disney na sina Anna, Elsa, Hiro, Baymax,
          at Rapunzel. Gagawa tayo ng isang laro mula sa wala na maaaring ibahagi
          at malaro sa telepono.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Ang iyong screen ay nahati sa tatlong pangunahing bahagi. Sa kaliwa
          ay ang gamespace, kung saan tatakbo ang iyong laro. Ang mga instruksyon
          sa bawat antas ay nakasulat sa baba. Ang gitnang bahagi ay ang toolbox,
          at bawat isa sa mga blokeng ito ay isang piraso ng code. Ang puting espasyo
          sa kanan ay tinatawag na workspace, at ito ay kung saan natin gagawin ang
          ating programa.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: Para makasimula, kailangan mong iugnay ang iyong mga bloke sa dalandan
          na "when run" na bloke. Maaari mong iugnay ang maraming mga bloke sa pamamagitan
          ng pagkaladkad sa mga ito hanggang makita mo ang dilaw na balangkas, at
          pagkatapos ay idikit ang mga ito. Sa unang palaisipan, si Hiro ang Artista
          1 at si Baymax ang Artista 2. Kailangan nating pagalawin si Hiro para makapunta
          kay Baymax sa pamamagitan ng pagkaladkad ng "move right" na bloke palabas
          at pag-ugnay nito sa "when run" na bloke. Kapag nasa lugar na ang iyong
          mga bloke, pindutin ang "Run" na button para makita ang na-program mo.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Magsimula at sa bandang huli ay maaari kang makalikha ng sarili mong
          laro gamit ang mga kamangha-manghang mga artista na maaaring makipag-ugnayan
          at makakuha ng mga puntos, maghagis ng mga microbots, mga seresa, mga kasirola,
          mga sparkles, at yelo... at pawalain ang bawat isa. Lahat ng ito ay nakapaubaya
          sa iyo!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Naiisip mo ba kung kailangan mong ulitin ang isang bagay magpakailanman?
          Mabuti na lang ay hindi mo na kailangan dahil ang mga kompyuter ay sobrang
          magaling sa pag-uulit ng mga bagay. Ito ang "repeat forever" na bloke. Lahat
          ng inilagay mo sa loob ng blokeng ito ay mangyayari magpakailanman sa loob
          ng laro.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: Kaya kung gusto natin ang artista na gumawa ng isang bagay nang paulit-ulit
          kahit na walang ginawa ang manlalaro, ilalagay natin ang mga blokeng iyon
          sa loob ng "repeat forever" na bloke. Sa sunod na palaisipan, ang ating
          layunin ay matulungan si Anna na maglakad ng pataas at pababa nang sunod-sunod.
          Ang pag-aaral sa kung paano gumagana ang mga paulit-ulit na utos ay makakatulong
          sa iyo para makatipid ng oras mamaya kapag gagawa ka na ng sarili mong laro.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: Ano ang gusto mong maging paglaki mo Olivia? Isang astronota. Mangyaring
          alam mo ba kung ano ang isang taga-program ng kompyuter? Oo um hindi. Umm
          sandali lang, ano? Hindi talaga ako sigurado kung paano ko ipapaliwananag
          ito, ang pagprogram ng kompyuter ay simple lang. Isa itong grupo ng mga
          instruksyon tulad ng isang resipe, na kailangan mong sundin ang bawat hakbang
          para makuha mo ang resulta na gusto mo.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: Maaari kong baguhin ang bilang ng mga pixels, ang haba ng linya, gamit
          ang dropdown na ito. Gaano nga ulit kahaba ito? Maaari mong makita ang mga
          instruksyon ulit sa pamamagitan ng pagtingin sa baba ng run na button. Dito,
          ginamit ko ang "move forward" na bloke at pipiliin ko ang 100 pixels. Maaari
          kong burahin ang bloke sa pamamagitan ng pagkaladkad nito sa toolbox o sa
          basurahan. Ibalik natin ito.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Patakbuhin ang code sa pamamagitan ng pagpindot ng "run". Ngunit hindi
          ito gumagana! Pipindutin ko ang "reset" para malaman ko ang problema. Maaari
          mong subukan ang palaisipan nang napakaraming beses hangga't gusto mo at
          maglaktaw sa mga palaisipan at babalikan ang mga ito. Siguraduhin mo lang
          na gawin ang lahat ng makakaya mo at huwag susuko. Magdagdag pa tayo ng
          isang "move forward". Hindi pa rin gumana ito. Maaari akong maglagay ng
          bloke sa pagitan ng ibang mga bloke.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Kukuha tayo ng "turn" na bloke at ilagay ito sa pagitan ng mga "move
          forward" na bloke. Lumiko sa kaliwa mga 45 degrees. At patakbuhin natin
          ulit ito. Reset, run, magaling! Narito pa ang isang palaisipan. Minsan bibigyan
          ka ng panimulang code para makumpleto. Dito kailangan kong magdagdag ng
          angkop na haba at degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: Minsan maaarin mong aksidenteng mabura ang panimulang code. Ano ang
          magagawa mo ngayon? Maaari mong pindutin ang "clear puzzle" at magsimulang
          muli. Kakaladkarin ko ang numerong bloke na ito sa iba't ibang pixel. Pumili
          ng 100 para sa pixels, 45 para sa degrees, at 100 para sa pixels ulit. Kahanga-hanga!
          Ito ang Code Studio bee. Kailangan kong pagalawin ang bubuyog sa bawat bulaklak
          at kukuha ng nektar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: Ang unang bulaklak ay tatlong bloke ang layo kaya kailangan ko ng tatlong
          "move forwards". 1, 2, 3. Pagkatapos ay "get a nectar", at pagkatapos ay
          isa pang "get a nectar". Ngunit hindi ito gumagana! Maglalagay ako ng isang
          pang "move forward" sa pagitan ng mga "get nectars" at patatakbuhin ko ito
          ulit. Yun, gumana na! Natutunan mo na kung paano gamitin ang artista ng
          Code Studio at bubuyog na palaisipan. Pagbutihan mo ang palaisipan na hamon
          ng Code Studio.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: Ano ang gusto mong maging paglaki mo Olivia? Umm, isang astronota! Alam
          mo ba kung ano ang taga-program ng kompyuter? Oo, umm, hindi. Umm, ano nga
          iyon? Hindi talaga ako sigurado kung paano ito ipapaliwanag. Ang pag-program
          sa kompyuter ay napakasimple lang. Ito ay isang grupo ng mga instruksyon,
          gaya ng isang resipe. Kailangan mo lang sundin ang bawat hakbang para makuha
          ang resulta na gusto mo.
      2:
        image: notes/unplug1_2.png
        text: Ang computer science ay isang paraan para makaapekto sa mundo. Maari
          itong mga video ng musika, maari itong mga laro, o pagtuklas kung ang isang
          tao ay may kaugnayan sa isang tao o wala. Maghanap ng kakilala mo, at mga
          kaibigan ng mga tao. Maaari kang gumawa ng lahat ng kakaibang mga bagay
          na talagang nakakaligtas ng buhay. Naisip ko na dapat magkaroon ka talaga
          ng lakas. Para sa aking pareho lang ito ng isang pinsel. Palagay ko ang
          mahusay na pag-program ay hindi talaga kakaiba sa isang mahusay na sining.
      3:
        image: notes/unplug1_3.png
        text: Noong natuto na ako ng kaunti sa pag-proprogram, ang blankong pader
          ay naging isang bungkos ng mga pintuan at bubuksan mo ang mga iyon at siyempre
          makakita ka na naman ng isa pang pasilyo na may maraming pintuan. Ang pag-program
          ay masaya at madali. Maaari kang gumawa ng kahit na anong maiisip mo. Sa
          wakas nagsisimula ka nang magbukas ng sapat na pintuan at ang liwanag ay
          nakapasok na. Para sa akin, ang isang natapos na programa ay tulad ng isang
          istraktura na puno ng liwanag. Lahat ng sulok nito ay naliliwanagan. Ang
          bilang ng tao na maaari mong mahawakan at makipag-ugnayan ay isang bagay
          na hindi pa nakita sa mundo.
      4:
        image: notes/unplug1_4.png
        text: Ang ating unang aralin sa series na ito ay tungkol sa kung ano ang computer
          science, at kung ano ang ginagawa ng mga siyentipiko ng kompyuter at paano
          ka mas maging responsable sa paggamit ng teknolohiya. Ito ay isang napakaimportanteng
          aralin, ngunit ito ay medyo mabigat sa mga teksto. Sa bandang huli, makakagawa
          ka ng sariling mong naka-customize na encoding gamit ang iyong mga inisyal.
          Ito ay isang masayang gawain at sobrang nakakabigay ng lakas dahil ang binary
          ay isa sa mga bagay na pakiramdam ko ay lubhang teknikal ngunit kapag naintindihan
          mo na ito, para lang itong nagsasalita ng sekreto na wika.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: Ang aralin sa "computational thinking" ay inilaan para magturo sa iyo
          kung paano dalhin ang isang malaking mahirap na problema at hatiin ang mga
          ito sa iilang mga simpleng problema. Ang layunin ng araling ito ay para
          makasulat ng isang grupo ng mga instruksyon na maaaring sundin ng iba para
          makaguhit ng isa sa mga halimaw na kasali sa ating banghay-aralin.
      2:
        image: notes/unplug2_2.png
        text: 'Ang estudyante ay hahatiin sa mga grupo para magsulat ng instruksyon
          at pagkatapos ay lilipat sila sa iba namang grupo kung saan iguguhit ang
          halimaw. Ang mga grupo ay magsusulat ng mga instruksyon gamit ang apat na
          hakbang sa computational na pag-iisip: pag-decompose, paghanap ng mga pattern,
          abstraksyon at mga algoritmo.'
      3:
        image: notes/unplug2_3.png
        text: Ang unang mga grupo ang maghati-hati sa mga gawain, ibig sasabihin ay
          gagawa sila ng plano. Pagkatapos ay maghahanap sila nga mga pattern sa lahat
          ng mga halimaw na nasa katalogo. Kapag may nakita silang kaibahan sa mga
          halimaw, gagawin nila itong abstract at tanggalin ang mga detalyeng iyon.
          Halimbawa, ang isang halimaw sa katalogo ay may mata ni Vegita at ang isa
          ay may mata ni Spritem. Ngunit pareho silang may mata, kaya maaari tayong
          magsulat ng linya na nagsasabi na ang halimaw ay blanko ang mata.
      4:
        image: notes/unplug2_4.png
        text: Para makasulat ang mga estudyante nang isang hanay ng mga tagubilin,
          na tinatawag na algoritmo, na naglilista sa mga parte ng halimaw gamit ang
          mga blanko para kung ano dapat ang istilo. Ito ay ang hanay ng tagubilin
          na ipapasa nila sa ibang mga estudyante para malikha ang sarili nilang halimaw.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: Sa graph paper na programming, kami ay tumutulong na magpaliwanag kung
          paano gumagana ang code sa pamamagitan ng pagsubok na makatulong sa mga
          tao na lumikha ng mga drowing nila gamit lang ang mga arrow at mga iskribol.
          Ang isang tao ay bibigyan ng maliit na drowing sa isang graph paper at kailangan
          nila itong sundan gamit ang mga partikular na mga arrow at subukang ilarawan
          kung paano magawa ang drowing na ito.
      2:
        image: notes/unplug3_2.png
        text: 'Sa gawaing ito, ang mga simbolo na maaari mo lang gamitin ay ang mga
          ito: move one square forward, one square backward, move one square up, move
          one square down, change to next color, at fill in your square with color.
          Kapag nacode mo na ang mga ito, maaari natin itong ibigay sa ibang tao na
          makakapagbasa ng code at subukan at muling ilikha ang larawan.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: Sa graph paper na programming, kami ay tumutulong na magpaliwanag kung
          paano gumagana ang code sa pamamagitan ng pagsubok na makatulong sa mga
          tao na lumikha ng mga drowing nila gamit lang ang mga arrow at mga iskribol.
          Ang isang tao ay bibigyan ng maliit na drowing sa isang graph paper at kailangan
          nila itong sundan gamit ang mga partikular na mga arrow at subukang ilarawan
          kung paano magawa ang drowing na ito.
      2:
        image: notes/unplug4_2.png
        text: Sa pangalawang bahagi ng gawain, tatanungin namin ang mga estudyante
          kung ilang paraan maaaring tupiin ang piraso ng papel para makalikha ng
          labing-anim na magkatulad na mga parihaba. Pagkatapos ay tatalakayin natin
          ang iilang mga solusyon na hahantong sa parehong resulta at kung bakit ang
          ibang solusyon ay mas mahusay sa isang tiyak na sitwasyon.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: Sa graph paper na programming, kami ay tumutulong na magpaliwanag kung
          paano gumagana ang code sa pamamagitan ng pagsubok na makatulong sa mga
          tao na lumikha ng mga drowing nila gamit lang ang mga arrow at mga iskribol.
          Ang isang tao ay bibigyan ng maliit na drowing sa isang graph paper at kailangan
          nila itong sundan gamit ang mga partikular na mga arrow at subukang ilarawan
          kung paano magawa ang drowing na ito.
      2:
        image: notes/unplug5_2.png
        text: Sa pangalawang bahagi ng gawain, tatanungin namin ang mga estudyante
          kung ilang paraan maaaring tupiin ang piraso ng papel para makalikha ng
          labing-anim na magkatulad na mga parihaba. Pagkatapos ay tatalakayin natin
          ang iilang mga solusyon na hahantong sa parehong resulta at kung bakit ang
          ibang solusyon ay mas mahusay sa isang tiyak na sitwasyon.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: Ang gawaing ito ay tinatawag na pag-code gamit ang mga kard at ito ay
          mainam para sa anumang edad. Tulad ng natutunan mo sa mga "if" na pahayag
          sa nakaraang aralin, sa Blockly, ang if na mga pahayag ay may piraso tungkol
          kung paano mo suriin ang mga ito kung tama ba ito o hindi. Iyan ang mga
          kondisyonal at maaari itong gamitin sa iba't ibang paraan.
      2:
        image: notes/unplug6_2.png
        text: Maaaring samantalahin natin ito sa pamamagitan ng paglikha ng mga programa
          sa papel na patatakbuhin mo gamit ang random na drow ng mga baraha, Maaari
          kang magkaroon ng if na pahayag na nagsasabi na "kung ang baraha na naguhit
          ay mas higit pa sa 8", makakuha ka ng puntos. Kung hindi, ang kalaban mo
          ang makakakuha ng puntos. Maaari mo itong gawing simple o kumplikado basta
          komportable ka.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: Alam mo ba kung paano maghanap ng mga titik ng isang awitin at sila
          ang nagbibigay kahulagan sa koro sa pinakasimula at pagkatapos ay sa lahat
          ng awitin, sila ay pinabalik lang sa koro? Iyan ang paaran para makatawag
          ng isang function.
      2:
        image: notes/unplug7_2.png
        text: Sa araling ito, binigyan natin ng kahulugan ang koro sa pinakasimula
          ng ating awitin at pagkatapos ay kakantahin natin ang kanta at babalik at
          mapansin natin na ang klase ay hindi umaawit sa salitang koro, awtomatiko
          silang pumunta sa taas kung saan natin nilagay ang koro at umawit nito.
          Gagamitin namin ito isang magandang introduksyon kung paano maunawaan ang
          ginagawa ng isang programa kapag ito ay nagbibigay kahulugan at tumatawag
          ng function.
      3:
        image: notes/unplug7_3.png
        text: Gagamit tayo ng isang pamilyar na mga awit kalakip na ang Old Macdonald
          para mapag-usapan ang tungkol sa paano ang koro tinawag nang paulit-ulit
          at paano minsan nagbabago ang koro. Kung may awitin ka gaya ng Old Macdonald,
          kung saan ang iilang mga salita ay nagbabago, iyan ay isang magandang bahagi
          para ipakilala ang ideya ng mga paremeter. Ang pagpasa ng mga tiyak na salita
          para makapadala ng karagdagang impormasyon sa iyong function. Kapag natiyak
          na namin na nakuha na nang lahat, maaari mong gamitin ang iyong sariling
          mga pamilyar na awitin at hatiin ang mga ito nang ikaw lang. Tingnan kung
          magagawa niyo ba ito nang sabay-sabay.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Ang ating aralin sa paglalahat ay gumagamit ng mga pamilyar na konsepto
          ng madlibs, kung saan ikaw ay maglakip lang nang puwang sa isang kuwento
          na maaaring punan na maraming iba-ibang mga salita. Kinuha namin ang ideyang
          iyan, hinamon ang mga bata na makalikha ng sarili nilang mga salita para
          makagawa ng sarili nilang mga kuwento at talagang ipaliwanag ang konsepto
          ng paglalahat.
      2:
        image: notes/unplug8_2.png
        text: Ito tungkol sa mga functions at kung paano ka magkaroon ng function,
          gaya ng sa Old Macdonald, kung saan mayroong kang istraktura para sa iyong
          koro ngunit mayroon kang maliit na bahagi na pabago-bago at ginawa mong
          abstract ang malilit na bahagi na nagbago at maaari mong punan ito nang
          iyong sariling salita sa bawat pagkakataon. Ngunit minsan mayroon kang tatlong
          salita na nagbabago at kaya nilagay mo ang mga iyon sa tatlong parameter,
          at ito ay lubhang nakakatulong.
      3:
        image: notes/unplug8_3.png
        text: Maaari kang magkaroon ng isang function na humahawak sa maraming iba't
          ibang mga problema. Maraming beses na magsusulat ang mga tao ng hiwalay
          na mga function para sa lahat ng problemang iyon, hindi nila natanto na
          mayroon lang isang kaunting kaibahan. Kung makakahanap lang sila ng paraan
          para mahawakan ang isang maliit na kaibahan na iyan, maaari nilang gamitin
          uli ang isang function nang paulit-ulit, sa halip na magkaroon ng 14 na
          iba-ibang mga function.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Ang relay na pagprogram ay isang lubhang masaya na aralin na palaging
          matatagpuan sa computer science. Minsan ang lahat ay medyo takot at gusto
          mo silang makatayo sa kanilang mga paa. Ito ay isang magandang paraan para
          makadagdag ng tuwa sa computer science.
      2:
        image: notes/unplug9_2.png
        text: Hahatiin mo ang lahat sa dalawang mga grupo kung saan sila ay pipila
          at tatakbo sa estilo ng relay. Ang unang tao sa bawat grupo ay tatakbo sa
          kabilang panig ng silid kung saan mayroong isang graph paper na drowing
          at isang blankong piraso ng papel na nag-aabang sa kanila. Isusulat nila
          ang unang hakbang sa paglikha ng larawan, tumakbo pabalik sa likod ng linya,
          tapikin ang sunod na manlalaro na pupunta sa harap para isulat ang kasunod
          na hakbang.
      3:
        image: notes/unplug9_3.png
        text: Ito ay isang masuhay na paraan para maituro ang ideya ng pagdebug, kailangang
          repasuhin ang sarili mong gawa at kailangang suriin ang nagawa ng ibang
          tao bago sa 'yo. Mauunawaan mo agad kung gaano ka importante ang pag-iingat
          sa pag-code kapag ang buong grupo ay nakadepende sa iyo.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: Ang gawaing ito ay nagpapaliwanag sa isang madaling maintindihan na
          paraan kung paano gumagana ang internet. Ipapaliwanag namin ang lahat ng
          mga terminolohiya na kakailanganin mo sa simpleng pananalita para maaaring
          i-simulate ng mga estudyante ang pagpapadala ng mga mensahe, gaya ng email.
      2:
        image: notes/unplug10_2.png
        text: Ang mga estudyante ay nagpapadala ng mga mensahe habang nagkukunwari
          na isa sa tatlong pamamaraan ng pagpapadala. Wireless na internet, DSL,
          o fiber optic. Ang mga estudyante na kumakatawan sa wifi ay kailangang isuot
          ang mensahe na pinapadala nila sa kanilang ulo dahil ang wifi ay kadalasang
          nag-iiwan ng iilang mga impormasyon.
      3:
        image: notes/unplug10_3.png
        text: Ang mga estudyante na nagkukunwaring DSL o kable ay magdadala ng mga
          mensahe sa likod ng kanilang kamay, kung saan sila ay hindi masyadong mag-iwan
          ng mga impormasyon. At ang mga estudyante na kumakatawan sa fiber optic
          ay magdadala sa mga ito gamit ang dalawang kamay. Ang gawaing ito ay isang
          mahusay na paraan para maunawaan ang isang bagay na ginagamit ng karamihan
          araw-araw.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: Kaya ngayon oras na para balikan at kumuha ng malawak na pananaw sa
          lahat ng nagawa natin sa huling labing-siyam na mga aralin. Ito ay isang
          magandang panahon para ipaalam sa mga estudyante na ang nagawa nila ay isang
          malaking tagumpay. Natutunan nila ang maraming mga bagay sa araling ito
          nang higit pa sa nalalaman ng karamihang nakakatanda tungkol sa computer
          science.
      2:
        image: notes/unplug11_2.png
        text: Talakayin sa klase o sa maliliit na mga grupo ang tungkol sa kanilang
          paboritong aralin. Kapag tiningnan mo ang lahat ng natutunan mo, ito ang
          panahon kung saan makikita ang pagkamalikhain ng iyong mga estudyante. Hatiin
          sila sa mga grupo at palikhain sila ng sarili nilang unplugged na aralin.
          Atasan ang bawat grupo ng isang pangunahing konsepto, gaya ng mga function
          o mga algoritmo at magkaroon na napakaraming mga materyales sa pag-craft
          na magagamit nila. Itakda ang bawat grupo na magbahagi sa kanilang bagong
          unplugged na gawain o kahit magtakda ng ibang araw para magawa ang iilang
          mga gawain na nalikha ng mga estudyante.
      3:
        image: notes/unplug11_3.png
        text: Mula sa lahat ng tao dito sa Code.org, kami ay umaasa na nagkaroon ka
          ng isang tolenadang saya sa kursong ito. At kung ang hangarin mo man ay
          ang lumikha ng pinakamahusay na app, gumamit ng programming para makatulong
          sa pagbigay lunas sa mga sakit, o gusto mo lang maging isang mahusay na
          tagalutas ng problema, ang kursong ito ay ang unang hakbang sa pag-abot
          ng iyong mga pangarap.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'Hi, ako si Kathleen Kennedy at ako ang prodyuser ng Star Wars: The
          Force Awakens. Ngayon ay magtatrabaho ka kasama ang isa sa aming mga bida
          na si BB-8. Si BB-8 ay isang bilog na droid. Lahat ng ginagawa niya at bawat
          galaw na ginagawa niya ay kontrolado ng isang software ng kompyuter. Ang
          laki ng epekto ng computer science sa bawat industriya, mula sa pamimili
          hanggang sa pangangalaga ng kalusugan hanggang sa pelikula. Sa katunayan,
          daan-daang mga inihinyero ng kompyuter ang sasamang gumawa ng pelikula gaya
          ng The Force Awakens.'
      2:
        image: notes/starwars_intro_2.JPG
        text: Hi ako si Rachel Rose, ako ay isang senior R&D na inhinyero sa ILB at
          ako ang nangungulo sa animasyon at development na koponan ng mga nilalang.
          Sa Force Awakens, ako ang responsable para tulongan ang mga artisa na gumawa
          ng mga kasangkapan kung saan ang mga ito ay bahagi ng isang karakter na
          gumagalaw para mabigyan ang karakter ng kapani-paniwala sa mga kalawakan
          na malayong-malayo.
      3:
        image: notes/starwars_intro_3.JPG
        text: Sa susunod na oras, gagagawa tayo na sarili nating Star Wars game. Tuturuan
          namin kayo ng mga pangunahing konsepto ng pag-program. Kadalasasan ang programming
          ay puro tesksto ngunit susubukan natin ito gamit ang mga bloke para makapag-drag
          and drop tayo at makasulat ng mga programa. Sa likod nito, naglilikha ka
          parin ng code. Pagkatapos mong masubukan ang mga pangunahing bloke, ililipat
          ka sa Javascript, isa mga pinakapopular na wika na nasa web.
      4:
        image: notes/starwars_intro_4.JPG
        text: Para magsimula, sasama tayong magtrabaho ni Rey para ma-program si BB-8
          na lumakad para mangolekta ng mga tira-tirang parte. Ang iyong screen ay
          hinati sa tatlong bahagi. Sa kaliwa ay ang game space ng Star Wars, kung
          saan tatakbo ang iyong code. Ang mga instruksyon para sa bawat antas ay
          nakasulat sa ibaba ng game space.
      5:
        image: notes/starwars_intro_5.JPG
        text: Ang gitnang bahaging ito ay ang toolbox at bawat isa sa mga blokeng
          ito ay isang utos na maiintindihan ni BB-8.
      6:
        image: notes/starwars_intro_6.JPG
        text: Ang puting bahagi sa kanan ay tinatawag na workspace at ito ang lugar
          kung saan gagawin natin ang ating programa.
      7:
        image: notes/starwars_intro_7.JPG
        text: Kung kakaladkarin ko ang moveLeft(); na bloke sa ating workspace at
          pindutin ang run, ano ang mangyayari? Si BB-8 ay gagalaw pakaliwa ng isang
          bloke sa grid.
      8:
        image: notes/starwars_intro_8.JPG
        text: At paano kapag gusto ko si BB-8 na gumawa ng isang bagay pagkatapos
          ng moveLeft(); na bloke? Maaari akong magdagdag ng isang pang bloke sa ating
          programa. Pipiliin ko ang moveUp(); na bloke at kakaladkarin ko ito sa baba
          ng moveLeft(); na bloke hanggang sa lilitaw ang highlight. Pagkatapos ay
          ihuhulog ko ito at ang dalawang bloke ay magdidikit.
      9:
        image: notes/starwars_intro_9.JPG
        text: Kapag pinindot ko ulit ang run, si BB-8 ay gagawin niya ang mga utos
          na isinalansan mula sa taas hanggang sa baba ng ating workspace. Kung gusto
          kong magbura ng bloke, tanggalin lang ito mula sa salansan at kaladkarin
          ito pabalik sa toolbox.
      10:
        image: notes/starwars_intro_10.JPG
        text: Pagkatapos mong mapindot ang run, maaari mong pindutin ang reset na
          button para mapabalik si BB-8 sa simula. Ngayon, simulan na natin!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Sa loob na mga bloke na ginagamit natin ay mga utos sa JavaScript. Ang
          JavaScript ay ang pinakapopular na wika na pang-program para sa mga propesyonal
          na developers ngayon. Ang mga bloke ay mahusay na paraan para magsimulang
          matuto nang pag-code at sa katunayan, ang mga kilalang paaralan gaya ng
          Harvard at Berkeley ay nagsimula nang magturo sa ganitong paraan. Ngunit
          kapag natutunan na natin ang mga pangunahing konsepto, ang mga inhinyero
          ay sumulat ng code sa pamamagitan ng pag-type dahil ito ay nagbigay sa atin
          ng pagkakataon na mapabilis ang proseso.
      2:
        image: notes/starwars_typing_2.JPG
        text: Maaari tayong mag-type nang daan-daang mga utos kahit hindi natin hanapin
          ang mga ito sa toolbox o magkaladkad sa mga ito palabas. Dahil ang iyong
          pag-type ay maaaring mabagal sa simula ngunit gusto namin na masubukan mo
          ito.
      3:
        image: notes/starwars_typing_3.JPG
        text: Sa kanang itaas na sulok ng iyong workspace, maaari kang mag-click sa
          "show text" na button sa kahit saang palaisipan para makalipat mula sa mga
          bloke papunta sa pag-type ng code bilang teksto.
      4:
        image: notes/starwars_typing_4.JPG
        text: Sa sunod na aralin, sisimulan ka na namin sa pag-type na mode. Dito
          maaari ka pa ring magkaladkad ng bloke mula sa toolbox o maari kang mag-type
          ng pangalan ng utos. Habang nagtatype ka, makakita ka ng mga pangalan ng
          posibleng mga utos sa baba ng tina-type mo. Sa halip na mag-type sa buong
          pangalan ng utos, maaari kang pumili sa isa sa mga ito para madali kang
          matapos. Sa aking trabaho, ginagamit ko ang auto-complete na katangiang
          ito sa lahat ng oras kapag nagsusulat ng code.
      5:
        image: notes/starwars_typing_5.JPG
        text: Kung ikaw ay nagtatype ng code, ang kompyuter ay kinailangang napakaeksakto.
          Kailangan mong baybayin at gawing malaki ang titik ng pangalan ng utos nang
          tumpak at tama, kasama ang panaklong at tuldok-kuwit. Kahit ang mga malilit
          na kamalian sa pag-type, hindi maiintindihan ni BB-8 ang code at hindi ito
          makagalaw.
      6:
        image: notes/starwars_typing_6.JPG
        text: Kapag nakagawa ka nang mali sa isang linya, ang editor ay mag-highlight
          nito para sa iyo para masubukan mong mabago ang teksto para maayos ito.
      7:
        image: notes/starwars_typing_7.JPG
        text: Kung ikaw ay hindi makausad, maari kang magsisimula ulit gamit ang "start
          over" na button at maaari kang lumipat pabalik sa bloke na mode kahit anumang
          oras sa pamamagitan ng pag-click sa kanang itaas na bahagi. Ok, subukan
          natin ang pag-type! At kung magkaroon ka ng mga mali, huwag mainis. Lahat
          ay nangangailangan nang ilang ulit bago makuha ito nang tama.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hello, ang aking pangalan ay Charita Carter. Ako ay isang senior creative
          na prodyuser dito sa Walt Disney Imagineering. Ako ay responsable sa pamumuno
          sa mga koponan na talagang gumagawa ng mga panghalina na nararanasan ng
          aming mga bisita. Kami ay palaging naghahanap ng mga paraan para mapahusay
          at mapaganda pa ang karanasan ng aming mga bisita at ang teknolohiya ang
          nasa gitna nito.
      2:
        image: notes/starwars_events_2.JPG
        text: Maligayang bati, nagawa mo ito! Naprogram mo si BB-8. Ngayon, siguro
          ay handa na tayo sa mas mahirap na mga bagay. Gawin natin ito. Ngayon na
          natutunan mo na ang pangunahing konsepto ng pagprogram, babalik tayo sa
          oras para magawa mo ang iyong sariling laro, makikita sina R2-D2 at C-3PO
          dito.
      3:
        image: notes/starwars_events_3.JPG
        text: 'Para makagawa ng laro, kailangan nating matutunan ang isang bagay na
          ginagamit ng mga programmer ng laro araw-araw: tinatawag ang mga ito na
          events. Ang mga event ay nagsasabi sa iyong programa na makinig o maghintay
          na mangyari ang isang bagay at kung nagyari na ito, gagawa ito ng aksyon.'
      4:
        image: notes/starwars_events_4.JPG
        text: Ilang halimba ng mga events ay pag-aabang sa pag-click ng mouse, nang
          arrow na button o pag-tap sa screen.
      5:
        image: notes/starwars_events_5.JPG
        text: Dito pagagalawin natin si R2-D2 pataas para magdala ng mensahe sa isang
          rebeldeng piloto at pagkatapos ay gagalaw pababa sa isa pang rebeldeng piloto.
          Gagamit tayo ng mga events para mapagalaw siya. Kapag ang manlalaro ay gumagamit
          ng taas/baba na arrow na mga keys, o ang taas/baba na mga button.
      6:
        image: notes/starwars_events_6.JPG
        text: Gagamit tayo ng whenUp() event na bloke at ilakip ang goUp() na bloke
          dito. Kapag ang player ay pipindot ng up arrow key, ang code na nakalakip
          sa whenUp() na bloke ay papatakbuhin. At gagawa tayo ng parehong bagay para
          mapagalaw si R2-D2 pababa.
      7:
        image: notes/starwars_events_7.JPG
        text: Para magawa ito, gagamit tayo ng utos na tinatawag na whenUp(). Kapag
          kinaladkad mo ang utos palabas ng toolbox, makikita mo na nagsimula at nagtapos
          ito sa isang kulot na braket sa halip na tuldok-kuwit. Ito ay nagbibigay
          sa atin ng espasyo para maglagay ng ibang mga utos sa gitna. Bawat utos
          na inilagay natin sa loob ng mga braket ay mapapatakbo kung ang manlalaro
          ay pumindot ng up na arrow.
      8:
        image: notes/starwars_events_8.JPG
        text: Gusto natin si R2-D2 na pupunta sa taas kaya lagyan natin ng goUp();
          na bloke sa loob ng utos. At gagawin natin ang parehong bagay para mapapunta
          sa baba si R2-D2.
      9:
        image: notes/starwars_events_9.JPG
        text: Ngayon sa halip na isulat ang lahat ng code para makontrol ang droid
          bago maganap ang mga pangyayari, maaari nating hayaan si R2-D2 na tumugon
          sa mga pagpindut ng button na mga events na nakakapagalaw sa kanya sa paligid
          ng screen. Paunti-unti, ang iyong laro ay naging mas inter-aktib.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hi, ang pangalan ko ay Alice at ako ay nangangasiwa ng mga produkto
          at mga grupo ng mga inhinyero dito sa Code.org at ako nagtatrabaho sa tutoryal
          na pinaglalaruan mo ngayon.
      2:
        image: notes/starwars_congrats_2.JPG
        text: Kakaabot mo lang sa huling antas. Maligayang bati! Kakatuto mo lang
          sa lahat ng kailangan mong malaman para makagawa ng sarili mong Star Wars
          na laro. Ngayon ay wala nang mga instruksyon, walang mga palaisipan na lulutasin.
          Maaari ka nang gumawa ng sarili mong laro at ikaw ang pipili kung paano
          ito gagana. Isa pang bagay, na buksan mo na ang mga bagong tunog at mga
          bagong utos para makagawa ng higit pa.
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[mga estudyante na nagsasalita] Halos nakagawa tayo na laro kung saan
          makakakuha ka ng puntos kapag nakuha mo ang humuhingal na mga baboy. Ang
          pilihin ay bawat pagkakataon na makakuha ka ng humihingal na baboy, may
          isang storm trooper na lilitaw. Sa totoo lang ang buong screen ay puno ng
          mga humihingal na mga baboy at pagkatapos kapag nahawakan mo ang 10,000
          na mga ito, panalo ka na."
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[mga estudyante na nagsasalita] Gumawa kami ng laro kung saan hindi
          ka maaaring matalo at lahat nang mapatay mo ay nagbibigay sa iyo ng puntos.
          Para sa aking programa, binaligtad ko ang mga keys para kung mag click ka
          sa taas, ang iyong karakter ay pupunta sa baba at kung pupunta ka sa kanan,
          ang iyong karakter ay pupunta sa kaliwa. Masyado itong mahirap! Minsan mayroon
          ka lang talaga ng kalamangan, isang hindi patas na kalamangan kapag ikaw
          ang gumagawa ng laro. Nakuha ko ba ito? Yay!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: Kapag tapos ka na sa paggawa ng laro, piliin ang "share" para makakuha
          ka ng link na maaari mong ibahagi sa iyong mga kaibigan o maglaro sa iyong
          laro sa iyong mga telepono. Magsaya!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Hi, ako si Kathleen Kennedy at ako ay isang prodyuser ng Star Wars:
          The Force Awakens. Ngayon, magtatrabaho ka kasama ang isa sa aming mga bida,
          si BB-8. Si BB-8 ay isang bilog na droid. Lahat ng ginagawa nito at bawat
          galaw na gagawin nya ay kontrolado ng isang kompyuter na software. Ang computer
          science ay talagang nakaapekto sa bawat industriya, mula sa pamimili hanggang
          sa pag-aalaga ng pangangatawan hanggang sa mga pelikula. Sa totoo lang,
          daan-daang mga inhinyero ang nagtrabaho ng sabay-sabay para magawa ang isang
          peilikula gaya ng The Force Awakens.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hi, ako si Rachel Rose, isa akong senior R&D na inhinyero sa ILM at
          ako ay nangungulo sa animasyon at nang creature development na grupo. Sa
          The Force Awakens, ako ang responsable sa pagtulong sa mga artista na makagawa
          ng mga kasangkapan, kung saan ang mga ito ay parte ng isang karakter na
          gumagalaw at nagbigay sa karakter na maging kapani-paniwala sa kalawakan
          na malayong-malayo.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: Sa susunod na oras, gagawa tayo ng sariling nating Star Wars na laro
          na magtuturo sa iyo sa mga pangunahing konsepto ng pag-program. Karaniwan
          sa pag-program ay puro mga teksto ngunit gagamit tayo ng mga bloke para
          maaari tayong mag-drag and drop para makasulat ng mga programa. Para makasimula,
          sasamahan natin si Rey na mag-program kay BB-8 para makalakad at makakolekta
          ng mga tira-tirang mga bahagi.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Ang iyong screen ay nahati sa tatlong pangunahing bahagi. Sa kaliwa
          ay ang Star Wars na game space kung saan tatakbo ang iyong code. Ang mga
          instruksyon para sa bawat antas ay nakasulat sa baba ng game space.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Ang gitnang bahaging ito ay ang toolbox at bawat isa sa mga blokeng
          ito ay isang utos na maiintindihan ni BB-8.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: Ang punting espasyo sa kanan ay tinatawag na work space at ito ay ang
          lugar kung saan gagawin natin ang ating programa.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Kung kakaladkarin ko ang moveLeft(); na bloke papunta sa ating workspace,
          ano ang mangyayari? Si BB-8 ay gagalaw pakaliwa ng isang bloke sa grid.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: At paano kung gusto ko si BB-8 na gumawa ng isang bagay pagkatapos ng
          moveLeft(); na bloke? Maaari akong magdagdag ng isang pang bloke sa ating
          programa, pipiliin ko ang moveUp(); na bloke at kakaladkarin ko ito sa baba
          ng aking moveLeft(); na bloke hanggang sa lilitaw ang highlight. Pagkatapos
          ihuhulog ko ito at ang dalawang bloke ay magdidikit. Kapag pinindot ko ang
          run ulit, gagawin ni BB-8 ang mga utos na nakasalansan mula sa taas hanggang
          sa baba ng ating workspace.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Kung gusto mo mang magbura ng bloke, tanggalin lang ito mula sa salansan
          at kaladkarin ito pabalik sa toolbox.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Pagkatapos mong mapindot ang run, maari mong pindutin ang reset na button
          para mapabalik si BB-8 sa simula. Ngayon, simulan na natin!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hello, ang aking pangalan ay Charita Carter. Ako ay isang senior creative
          na prodyuser dito sa Walt Disney Imagineering. Ako ay responsable sa pamumuno
          sa mga koponan na talagang gumagawa ng mga panghalina na nararanasan ng
          aming mga bisita. Kami ay palaging naghahanap ng mga paraan para mapahusay
          at mapaganda pa ang karanasan ng aming mga bisita at ang teknolohiya ang
          nasa gitna nito.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Maligayang bati, nagawa mo ito! Naprogram mo si BB-8. Ngayon, siguro
          ay handa na tayo sa mas mahirap na mga bagay. Gawin natin ito. Ngayon na
          natutunan mo na ang pangunahing konsepto ng pagprogram, babalik tayo sa
          oras para magawa mo ang iyong sariling laro, makikita sina R2-D2 at C-3PO
          dito.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'Para makagawa ng laro, kailangan nating matutunan ang isang bagay na
          ginagamit ng mga programmer ng laro araw-araw: tinatawag ang mga ito na
          events. Ang mga event ay nagsasabi sa iyong programa na makinig o maghintay
          na mangyari ang isang bagay at kung nagyari na ito, gagawa ito ng aksyon.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Ilang halimba ng mga events ay pag-aabang sa pag-click ng mouse, nang
          arrow na button o pag-tap sa screen.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Dito pagagalawin natin si R2-D2 pataas para magdala ng mensahe sa isang
          rebeldeng piloto at pagkatapos ay gagalaw pababa sa isa pang rebeldeng piloto.
          Gagamit tayo ng mga events para mapagalaw siya. Kapag ang manlalaro ay gumagamit
          ng taas/baba na arrow na mga keys, o ang taas/baba na mga button.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: Gagamit tayo ng whenUp() na event na bloke at ilakip ang goUp() na bloke
          dito. Kapag pinindot ng manlalaro ang up na arrow key, ang code na nakalakip
          sa whenUp() na bloke ay tatakbo. At gagawa tayo ng parehong bagay para mapagalaw
          si R2-D2 pababa. Ngayon sa halip na isulat lahat ng code para makontrol
          ang ating droid bago maganap ang mga pangyayari, maaari nating hayaan si
          R2-D2 na tumugon sa mga events nang pagpindot na mga button na nakapagalaw
          sa kanya sa paligid ng screen.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Paunti-unti, ang iyong laro ay naging mas inter-aktib.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hi, ang pangalan ko ay Alice at ako ay nangangasiwa ng mga produkto
          at mga grupo ng mga inhinyero dito sa Code.org at ako nagtatrabaho sa tutoryal
          na pinaglalaruan mo ngayon.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: Kakaabot mo lang sa huling antas. Maligayang bati! Kakatuto mo lang
          sa lahat ng kailangan mong malaman para makagawa ng sarili mong Star Wars
          na laro. Ngayon ay wala nang mga instruksyon, walang mga palaisipan na lulutasin.
          Maaari ka nang gumawa ng sarili mong laro at ikaw ang pipili kung paano
          ito gagana. Isa pang bagay, na buksan mo na ang mga bagong tunog at mga
          bagong utos para makagawa ng higit pa.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[mga estudyante na nagsasalita] Halos nakagawa tayo na laro kung saan
          makakakuha ka ng puntos kapag nakuha mo ang humuhingal na mga baboy. Ang
          pilihin ay bawat pagkakataon na makakuha ka ng humihingal na baboy, may
          isang storm trooper na lilitaw. Sa totoo lang ang buong screen ay puno ng
          mga humihingal na mga baboy at pagkatapos kapag nahawakan mo ang 10,000
          na mga ito, panalo ka na."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[mga estudyante na nagsasalita] Gumawa kami ng laro kung saan hindi
          ka maaaring matalo at lahat nang mapatay mo ay nagbibigay sa iyo ng puntos.
          Para sa aking programa, binaligtad ko ang mga keys para kung mag click ka
          sa taas, ang iyong karakter ay pupunta sa baba at kung pupunta ka sa kanan,
          ang iyong karakter ay pupunta sa kaliwa. Masyado itong mahirap! Minsan mayroon
          ka lang talaga ng kalamangan, isang hindi patas na kalamangan kapag ikaw
          ang gumagawa ng laro. Nakuha ko ba ito? Yay!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: Kapag tapos ka na sa paggawa ng laro, piliin ang "share" para makakuha
          ka ng link na maaari mong ibahagi sa iyong mga kaibigan o maglaro sa iyong
          laro sa iyong mga telepono. Magsaya!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Ang aking pangalan ay Jens Bergensten ngunit mas kilala ako bilang Jeb.
          Ako ay isang lead developer sa Minecraft, dito sa Mojang sa Stockholm. Siguro
          mga nasa labing-isa o labing-dalawa ako nang nagsimula akong mag-program
          dahil gusto kong makagawa ng mga laro. Isa sa mga kaibigan ng aking ama
          ang nagsabi sa akin na para makagawa ng mga laro, kailangan kong matuto
          kung paano mag-program. Iyan ay kung paano ako nagsimula. Gusto kong mag-design
          at mag-unawa sa mga arkitektura ng mga laro. Iyan ang nagustuhan ko sa Minecraft.
      2:
        image: notes/mc_intro_2.JPG
        text: Sa mga susunod na oras, matutunan mo ang mga pangunahing konsepto ng
          computer science sa pamamagitan ng pagprogram kay Alex o Steve na gumalaw
          sa loob ng isang naka-simulate na piraso ng mundo ng Minecraft.
      3:
        image: notes/mc_intro_3.JPG
        text: Ang tradisyonal na pag-program ay kadalasang nasa teksto ngunit ngayon
          gagamit tayo ng Blockly, isa itong sistema na gumagamit ng mga visual na
          mga bloke na maaari mo lang kaladkarin at ihulog para makasulat ng mga programa.
          Sa likod nito, lumilikha ka ng code sa Javascript.
      4:
        image: notes/mc_intro_4.JPG
        text: Ang mga konsepto na matutunan mo ay ginagamit ng mga programmer araw-araw
          at ang mga pundasyon ng computer science. Dito sa Mojang, ginagamit namin
          ang parehong mga konspeto para mapagana ang Minecraft.
      5:
        image: notes/mc_intro_5.JPG
        text: Bago ka magsimula, pipili ka ng iyong karakter. Pipiliin ko si Alex.
          Gagawa tayo ng code para sa isang programa na makakatulong sa kanya na gumalaw
          sa paligid ng screen.
      6:
        image: notes/mc_intro_6.JPG
        text: Ang iyong screen ay nahati sa tatlong pangunahing mga bahagi. Sa kaliwa
          ay ang Minecraft na playspace kung saan tatakbo ang iyong programa. Ang
          mga instruksyon sa bawat antas ay nakasulat sa baba.
      7:
        image: notes/mc_intro_7.JPG
        text: Ang gitnang bahaging ito ay ang toolbox at bawat isa sa mga blokeng
          ito ay mga utos na pumapatnubay sa mga kilos ni Alex.
      8:
        image: notes/mc_intro_8.JPG
        text: Ang puting espasyo sa kanan ay tinatawag na work space at ito ay ang
          lugar kung saan gagawin natin ang ating programa.
      9:
        image: notes/mc_intro_9.JPG
        text: Kung kakaladkarin natin ang moveForward(); na bloke sa ating workspace
          at pagkatapos ay pindutin ang run, ano ang mangyayari? Si Alex ay gagalaw
          pasulong ng isang espasyo sa grid.
      10:
        image: notes/mc_intro_10.JPG
        text: At paano kung gusto nating gumawa ng isang bagay pagkatapos niyang gumalaw
          pasulong ng isang espasyo? Maaari tayong magdagdag ng isang pang bloke sa
          ating programa. Pipiliin ko ang turnRight(); na bloke at kakaladkarin ko
          ito sa ibaba ng aking moveForward(); na bloke hanggang sa lilitaw ang dalandan
          na linya. Pagkatapos ay ihuhulog ko ito at ang dalawang bloke ay magdidikit.
          Kapag pinindot natin ang run ulit, si Alex ay gagawa sa mga utos na nakasalansan
          mula sa taas hanggang sa baba ng ating workspace.
      11:
        image: notes/mc_intro_11.JPG
        text: Kung gusto mo mang magbura ng bloke, kaladkarin lang ito mula sa salansan
          pabalik sa toolbox.
      12:
        image: notes/mc_intro_12.JPG
        text: 'Upang maibalik ang iyong mga binago at mapabalik sa kung paano nagsimula
          ang antas, gamitin ang Start Over na button sa kanang itaas na sulok ng
          workspace. Isa pang bagay: nakita mo ba ang mga maliliit na tatsulok sa
          ating pagliko na mga bloke? Kahit anumang oras na makakakita ka ng mga tatsulok
          na ito, ibig sabihin ay maaari kang pumili ng ibang opsyon. Magsimula na
          tayong mag-code!'
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Ako ay si Lydia Winters, ang brand director ng Mojang. Gumawa kami ng
          isang maliit na laro na tinatawag na Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: Ang paborito kong gawin sa Minecraft ay ang magsiyasat. Mahal ko ang
          pakikipagsapalaran sa mga kuweba at makita kung ano ang mahanap ko. Bilang
          isang tao na hindi programmer, ako ay talagang sabik na makadaan sa aralin
          ng Minecraft at talagang matutong mag-code.
      3:
        image: notes/mc_repeat_3.JPG
        text: Ang huling antas ay nangangailangan ng maraming mga moveForward(); na
          mga bloke. Madali lang sana ito kung maaari nating sabihan ang kompyuter
          na gawin ang moveForward(); na utos nang apat o limang beses. Mabuti nalang
          para sa atin, ang mga kompyuter ay magaling sa paulit-ulit na mga utos gamit
          ang mga repeat loops.
      4:
        image: notes/mc_repeat_4.JPG
        text: Kapag bumubuo ng Minecraft, gagamit tayo ng mga repeat na loops para
          ilagay ang lahat nating mga patiunang mga materyales para sa paglikha ng
          bagong mundo. Ito ay libu-libong mga bloke. Gagamit din tayo ng mga loops
          sa mga maliliit na bagay, halimbawa, para mapagalaw natin ang paa ni Alex
          nang pabalik-balik habang naglalakad siya. Ang repeat na mga loops ay makapangyarihang
          bahagi ng pag-program.
      5:
        image: notes/mc_repeat_5.JPG
        text: Parating na ang gabi kaya sa susunod na mga dalawang antas, gagawa tayo
          ng bahay para manatili tayong ligtas. Gagamit tayo ng mga repeat na bloke
          para madali natin itong magawa.
      6:
        image: notes/mc_repeat_6.JPG
        text: Para makagawa ng pader ng ating bahay, maaari nating sabihan si Alex
          na moveForward(); at ilagay ang mga tabla nang apat na beses o maari natin
          siyang sabihan na moveFoward(); at ilagay ang isang tabla, pagkatapos ay
          kunin ang utos na ito at gamitin ang repeat na bloke para magawa niya ang
          aksyon ng iilang beses. Ngayon, i-click natin ang repeat na bloke, at sabihan
          siya kung ilang beses natin gustong gawin niya ang aksyon, Ngayon, gawin
          na natin ang bahay bago gumabi! Magsaya.
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Ngayon pag-aaralan natin ang tungkol sa mga "if" na pahayag. Ang if
          na pahayag ay pangunahing bahagi sa ating pag-aaral na mag-program. Nakakatulong
          sila sa kompyuter na gumawa ng mga desisyon.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Lahat ng mga kompyuter ay gumagamit ng mga if na pahayag, kalakip na
          ang mga telepono. Halimbawa, kapag i-unlock ko ang aking telepono, nagpapatakbo
          ito ng ilang code na nagsasabi na kung tama ang pagkalagay ko ng password,
          i-unlock niya ang telepono. Kung hindi, magpapakita ito ng error na mensahe.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Maaari kang gumamit ng mga if na pahayag sa iyong code para magawa natin
          sina Steve at Alice na tumugon sa kung ano ang makikita nila sa mundo. Halimbawa,
          kung may bato sa harap nila, maaari silang lumiko sa kaliwa. O lumiko sa
          kanan kapag nakatagpo sila ng puno.
      4:
        image: notes/mc_if_statements_4.JPG
        text: Sa kasong ito, hindi natin gusto na mahulog sa laba. Madali lang ang
          magplano para sa laba. Maaari natin itong makita sa screen. Ngunit paano
          na ang mga laba na hindi natin makikita sa ilalim ng bato?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Pagkatapos nating minahin ang bato, kailangan natin itong suriin kung
          may mga laba ba sa lugar na iyon bago tayo gumalaw pasulong. Kung may laba
          doon, gusto nating maglagay ng bato sa harap ng ating karakter bago tayo
          makausad. Sa ganitong paraan, maaari tayong makagalaw pasulong nang ligtas.
          Oras na para sa karagdagang pagmimina! At tandaan na gumamit ng mga if na
          pahayag para magmasid sa iyong mga hakbang.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Maligayang bati! Katututo mo pa lang sa mga pangunahing pambuong bloke
          ng computer science.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Ngayon maaari mo nang gamitin ang mga blokeng ito para magawa ang iyong
          mga nilikha. Wala nang mga instruksyon at wala ng mga palaisipan na malutas.
          Maaari ka nang gumawa ng kahit anong gusto mo. Ikaw ang pipili.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[mga estudyante na nag-uusap] Malapit na itong maging tunay. Shear.
          Nakagawa ako ng L mula sa mga sulo. Nakagawa ako ng A mula sa mga bitulang
          tabla. Gumana ito, gumana ito. Nakagawa tayo ng isang bahay gamit ang balahibo
          ng tupa!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Kapag tapos ka nang gumawa sa iyong nilikha, piliin ang "share to get
          a link" para maibahagi mo ito sa iyong mga kaibigan. Magsaya!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Maligayang bati! Katututo mo pa lang sa mga pangunahing pambuong bloke
          ng computer science.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Ngayon maaari mo nang gamitin ang mga blokeng ito para magawa ang iyong
          mga nilikha. Wala nang mga instruksyon at wala ng mga palaisipan na malutas.
          Maaari ka nang gumawa ng kahit anong gusto mo. Ikaw ang pipili.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[mga estudyante na nag-uusap] Malapit na itong maging tunay. Shear.
          Nakagawa ako ng L mula sa mga sulo. Nakagawa ako ng A mula sa mga bitulang
          tabla. Gumana ito, gumana ito. Nakagawa tayo ng isang bahay gamit ang balahibo
          ng tupa!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Ngayon maaari ka nang gumawa ng kahit na anumang gusto mo. Magsaya!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: Kung gusto mong gumawa ng sarili mong laro, madali lang ito. Ang kailangan
          mo lang ay iilang mga pangunahing konsepto sa pag-program at maaari ka nang
          magsimulang maglaro sa laro na nilikha mo.
      2:
        image: notes/gumball_intro_2.JPG
        text: Mayroon ka bang paboritong video game? Gagawa tayo ng isang hakbang
          tungo sa paglikha ng mga laro gaya ng larong iyan sa PlayLab. Ang mga magagandang
          laro ay mayroong kuwento at bawat kuwento ay may mga artista. Ang mga artista
          ay gumagawa ng mga bagay tulad ng pagsalita, paggalaw at pakikipag-ugnayan
          sa bawat isa. Pati na rin ang pagkuha ng mga puntos ayon sa mga tuntunin
          ng laro. Ngayon, matutunan natin kung paano gawin ang lahat ng mga bagay
          na ito nang paisa-isa gamit ang nakakatuwang mga artista at pagkatapos ay
          lilikha tayo ng laro mula sa wala na maaaring ibahagi at laruin sa telepono.
      3:
        image: notes/gumball_intro_3.JPG
        text: Ngayon, matutunan natin kung paano gawin ang mga bagay na ito nang paisa-isa
          kasama ang nakakatuwang mga artista at pagkatapos ay gagawa tayo ng laro
          mula sa wala na maaaring ibahagi at laruin sa telepono.
      4:
        image: notes/gumball_intro_4.JPG
        text: Ang iyong screen ay nahati sa tatlong pangunahing bahagi. Sa kaliwa
          ay ang gamespace kung saan tatakbo ang iyong programa. Ang mga instruksyon
          sa bawat antas ay nakasulat sa baba.
      5:
        image: notes/gumball_intro_5.JPG
        text: Ang gitnang bahaging ito ay ang toolbox at bawat isa sa mga blokeng
          ito ay isang piraso ng code.
      6:
        image: notes/gumball_intro_6.JPG
        text: Ang puting espasyo sa kanan ay tinatawag na work space at ito ay ang
          lugar kung saan gagawin natin ang ating programa.
      7:
        image: notes/gumball_intro_7.JPG
        text: Para makapagsimula, kailangan mong iugnay ang iyong mga bloke sa dalandan
          na when run na bloke. Maaari mong iugnay ang maraming bloke nang sabay-sabay
          sa pamamagitan na pagkaladkad sa mga ito palabas hanggang sa makita mo ang
          dilaw na linya at pagkatapos ay magdidikit sila.
      8:
        image: notes/gumball_intro_8.JPG
        text: Sa unang palaisipan na ito, pasasalitain natin ang mga artista sa pamamagitan
          ng pag-ugnay ng "say" na bloke sa when run na bloke at pag-type ng iyong
          mensahe. Kapag nasa posisyon na ang iyong mga bloke, pindutin ang run na
          button at tingnan ang naprogram mo.
      9:
        image: notes/gumball_intro_9.JPG
        text: Magsimula at sa bandang huli makakalikha ka na ng sarili mong laro na
          may iba't bang uri ng mga manlalaro na maaaring makipag-ugnayan, makakuha
          ng puntos, maghagis ng mga bagay, at pawalain ang bawat isa. Lahat ng ito
          ay pinaubaya sa iyo!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Pag-aaralan natin ngayon ang isang bagay na ginagamit ng mga programmer
          ng laro araw-araw. Tinatawag ang mga ito na "events". Ang events ay nagsasabi
          sa iyong programa ma makinig kung may mga pangyayaring naganap at kapag
          nangyari ito, ang laro ay magpapatakbo ng mga aksyon.
      2:
        image: notes/gumball_events_2.JPG
        text: Ilang halimbawa ng mga events ay ang pag-aabang sa pag-click ng mouse
          o nang taas o baba na arrow key o kahit na ang pag-tap sa screen.
      3:
        image: notes/gumball_events_3.JPG
        text: Dito, papasalitain natin ang artista kapag nag-click ang manlalaro dito.
          Gagamit tayo ng when clicked na bloke at ilakip dito ang "say" na bloke.
          Kapag nag-click ang manlalaro, lahat ng mga bloke na nakalakip sa blokeng
          ito ay patatakbuhin.
      4:
        image: notes/gumball_events_4.JPG
        text: Mayroon ding mga "when arrow" na bloke. Kung iugnay mo ang mga move
          na bloke sa mga ito, maaari ka nang magsimulang pagalawin ang iyong artista
          sa taas, baba, kaliwa, kanan, gamit ang mg arrow keys. Paunti-unti ang iyong
          laro ay naging mas inter-aktib.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Naiisip mo ba kung kailangan mong ulitin ang isang bagay magpakailanman?
          Sana hindi mo na kailangan pa dahil ang mga kompyuter ay sadyang mahusay
          sa pag-uulit ng mga bagay.
      2:
        image: notes/gumball_repeat_2.JPG
        text: Ito ang repeat forever na bloke. Lahat ng nasa loob ng blokeng ito ay
          mangyayari magpakailanman sa laro. Kung gusto natin ang artista na gumawa
          ng isang bagay nang paulit-ulit kahit walang ginawa ang manlalaro, ilalagay
          natin ang mga blokeng ito sa loob ng repeat forever na bloke.
      3:
        image: notes/gumball_repeat_3.JPG
        text: Sa sunod na palaisipang ito, ang ating layunin ay ang matulungan ang
          artista na gumawa ng isang bagay nang paulit-ulit. Ang pag-aaral kung paano
          gumagana ang mga paulit-ulit na kautusan ay makakatipid sa iyo ng tolenadang
          oras mamaya kapag gumagawa ka na ng sarili mong laro.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: Kung gusto mong gumawa ng sarili mong laro, madali lang ito. Ang kailangan
          mo lang ay iilang mga pangunahing konsepto sa pag-program at maaari ka nang
          magsimulang maglaro sa laro na nilikha mo.
      2:
        image: notes/iceage_intro_2.JPG
        text: Mayroon ka bang paboritong video game? Gagawa tayo ng isang hakbang
          tungo sa paglikha ng mga laro gaya ng larong iyan sa PlayLab. Ang mga magagandang
          laro ay mayroong kuwento at bawat kuwento ay may mga artista. Ang mga artista
          ay gumagawa ng mga bagay tulad ng pagsalita, paggalaw at pakikipag-ugnayan
          sa bawat isa. Pati na rin ang pagkuha ng mga puntos ayon sa mga tuntunin
          ng laro. Ngayon, matutunan natin kung paano gawin ang lahat ng mga bagay
          na ito nang paisa-isa gamit ang nakakatuwang mga artista at pagkatapos ay
          lilikha tayo ng laro mula sa wala na maaaring ibahagi at laruin sa telepono.
      3:
        image: notes/iceage_intro_3.JPG
        text: Ngayon, matutunan natin kung paano gawin ang mga bagay na ito nang paisa-isa
          kasama ang nakakatuwang mga artista at pagkatapos ay gagawa tayo ng laro
          mula sa wala na maaaring ibahagi at laruin sa telepono.
      4:
        image: notes/iceage_intro_4.JPG
        text: Ang iyong screen ay nahati sa tatlong pangunahing bahagi. Sa kaliwa
          ay ang gamespace kung saan tatakbo ang iyong programa. Ang mga instruksyon
          sa bawat antas ay nakasulat sa baba.
      5:
        image: notes/iceage_intro_5.JPG
        text: Ang gitnang bahaging ito ay ang toolbox at bawat isa sa mga blokeng
          ito ay isang piraso ng code.
      6:
        image: notes/iceage_intro_6.JPG
        text: Ang puting espasyo sa kanan ay tinatawag na work space at ito ay ang
          lugar kung saan gagawin natin ang ating programa.
      7:
        image: notes/iceage_intro_7.JPG
        text: Para makapagsimula, kailangan mong iugnay ang iyong mga bloke sa dalandan
          na when run na bloke. Maaari mong iugnay ang maraming bloke nang sabay-sabay
          sa pamamagitan na pagkaladkad sa mga ito palabas hanggang sa makita mo ang
          dilaw na linya at pagkatapos ay magdidikit sila.
      8:
        image: notes/iceage_intro_8.JPG
        text: Sa unang palaisipan na ito, pasasalitain natin ang mga artista sa pamamagitan
          ng pag-ugnay ng "say" na bloke sa when run na bloke at pag-type ng iyong
          mensahe. Kapag nasa posisyon na ang iyong mga bloke, pindutin ang run na
          button at tingnan ang naprogram mo.
      9:
        image: notes/iceage_intro_9.JPG
        text: Magsimula at sa bandang huli makakalikha ka na ng sarili mong laro na
          may iba't bang uri ng mga manlalaro na maaaring makipag-ugnayan, makakuha
          ng puntos, maghagis ng mga bagay, at pawalain ang bawat isa. Lahat ng ito
          ay pinaubaya sa iyo!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Pag-aaralan natin ngayon ang isang bagay na ginagamit ng mga programmer
          ng laro araw-araw. Tinatawag ang mga ito na "events". Ang events ay nagsasabi
          sa iyong programa ma makinig kung may mga pangyayaring naganap at kapag
          nangyari ito, ang laro ay magpapatakbo ng mga aksyon.
      2:
        image: notes/iceage_events_2.JPG
        text: Ilang halimbawa ng mga events ay ang pag-aabang sa pag-click ng mouse
          o nang taas o baba na arrow key o kahit na ang pag-tap sa screen.
      3:
        image: notes/iceage_events_3.JPG
        text: Dito, papasalitain natin ang artista kapag nag-click ang manlalaro dito.
          Gagamit tayo ng when clicked na bloke at ilakip dito ang "say" na bloke.
          Kapag nag-click ang manlalaro, lahat ng mga bloke na nakalakip sa blokeng
          ito ay patatakbuhin.
      4:
        image: notes/iceage_events_4.JPG
        text: Mayroon ding mga "when arrow" na bloke. Kung iugnay mo ang mga move
          na bloke sa mga ito, maaari ka nang magsimulang pagalawin ang iyong artista
          sa taas, baba, kaliwa, kanan, gamit ang mg arrow keys. Paunti-unti ang iyong
          laro ay naging mas inter-aktib.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Naiisip mo ba kung kailangan mong ulitin ang isang bagay magpakailanman?
          Sana hindi mo na kailangan pa dahil ang mga kompyuter ay sadyang mahusay
          sa pag-uulit ng mga bagay.
      2:
        image: notes/iceage_repeat_2.JPG
        text: Ito ang repeat forever na bloke. Lahat ng nasa loob ng blokeng ito ay
          mangyayari magpakailanman sa laro. Kung gusto natin ang artista na gumawa
          ng isang bagay nang paulit-ulit kahit walang ginawa ang manlalaro, ilalagay
          natin ang mga blokeng ito sa loob ng repeat forever na bloke.
      3:
        image: notes/iceage_repeat_3.JPG
        text: Sa sunod na palaisipang ito, ang ating layunin ay ang matulungan ang
          artista na gumawa ng isang bagay nang paulit-ulit. Ang pag-aaral kung paano
          gumagana ang mga paulit-ulit na kautusan ay makakatipid sa iyo ng tolenadang
          oras mamaya kapag gumagawa ka na ng sarili mong laro.
    mc_2016_intro:
      1:
        image: notes/mc_2016_intro_1.jpg
        text: Hi, ang pangalan ko ay Jens at ako ang pangulong creative designer ng
          Minecraft. Sa susunod na oras, gagawa ka ng sarili mong Minecraft na laro.
          Ito ay kamukha ng Minecraft ngunit ang mundo ay huminto. Ang mga tupa ay
          hindi na gumagalaw, ang mga manok ay hindi na nangingitlog, at ang mga zombie
          ay nakatayo lang. Ikaw na ang bahala na magdagdag ng code para mapagana
          ang mundo ng Minecraft.
      2:
        image: notes/mc_2016_intro_2.jpg
        text: 'Ang pangalan ko ay Melissa at ako ay isang user researcher ng Minecraft.
          Ako ay talagang interesado sa kung paano mag-isip ang mga tao at kung paano
          sila makipag-ugnayan sa teknolohiya at kaya ang trabahong ito ay talagang
          perpekto para sa akin na maihalo ko ang computer science sa sikolohiya:
          kung paano ang tao mag-isip at kumilos.'
      3:
        image: notes/mc_2016_intro_3.jpg
        text: Makikita mo ang iyong screen na nahati sa tatlong pangunahing bahagi.
          1) Sa kaliwa ay ang Minecraft na laro. Ang mundo ngayon ay nakahinto ngunit
          aayusin natin ito gamit ang code.
      4:
        image: notes/mc_2016_intro_4.jpg
        text: 2) Ang gitnang bahaging ito ay ang toolbox. Bawat isa sa mga blokeng
          ito ay mga kautusan na naiintindihan ng mga manok, tupa, at iba pang mga
          nilalang sa Minecraft.
      5:
        image: notes/mc_2016_intro_5.jpg
        text: 3) Ang espasyo sa kanan ay tinatawag na workspace at ito ang lugar kung
          saan natin gagawin ang ating programa.
      6:
        image: notes/mc_2016_intro_6.jpg
        text: Kung nakalimutan mo kung ano ang gagawin, ang mga instruksyon sa bawat
          antas ay nasa taas.
      7:
        image: notes/mc_2016_intro_7.jpg
        text: Para makapagsimula, mag-program tayo ng isang manok. Kaladkarin natin
          ang "move forward" na utos papunta sa workspace. Kapag pipindutin ko ang
          "Run" ang manok ay lalakad pasulong ng isang hakbang. Para makausad pa,
          magkaladkad na naman ako ng isa pang "move forward" na bloke sa baba ng
          unang "move forward" na bloke hanggang sa ang highlight ay lilitaw. Pagkatapos
          ay ihuhulog ko ito at ang dalawang bloke ay magdidikit. Kung pipindutin
          ko ang "Run" ulit, ang manok ay lalakad ng dalawang hakbang.
      8:
        image: notes/mc_2016_intro_8.jpg
        text: Kung gusto mo mang magbura ng bloke, tanggalin lang ito mula sa salansan
          at kaladkarin ito pabalik sa toolbox.
      9:
        image: notes/mc_2016_intro_9.jpg
        text: Pagkatapos mong mapindot ang "Run", maaari mo mapindot ang "Reset" na
          button para maireset ang laro at magsimulang muli. Ngayon, panahon na para
          gumawa ng sarili mong bersyon ng Minecraft. Magsaya!
    mc_2016_loops:
      1:
        image: notes/mc_2016_loops_1.jpg
        text: Hi, ako si Lisa. Ako ay isang software developer sa Minecraft at nagtatrabaho
          ako sa iilang mga hayop at mga kalaban sa laro. Isa sa mga hayop na nagawa
          ko ay si ocelot. Ako ang gumawa sa bahagi kung saan maaari mong pakainin
          si ocelot ng isda para maamo mo ito bilang sarili mong pusa.
      2:
        image: notes/mc_2016_loops_2.jpg
        text: Bilang mga tao, tayo ay nababagot kapag kailangan nating gawin ang parehong
          bagay nang paulit-ulit. Pero ang napakahusay na bagay tungkol sa mga kompyuter
          ay maaari silang gumawa ng parehong bagay na milyon o kahit bilyong beses
          sa isang hilera na hindi naiinip. Ang pag-uulit na ito ay tinatawag na loop
          at bawat nilalang sa Minecraft ay gumagamit ng mga loops.
      3:
        image: notes/mc_2016_loops_3.jpg
        text: Kanina, nagkaroon tayo ng isang manok na gumalaw sa buong screen ngunit
          pagkatapos ay tumigil ito. Sa minecraft, ang mga manok ay pagala-gala lang
          sa paligid nang walang katapusan. Gagamit tayo ng "forever do" na loop mula
          sa ating toolbox para mapanatiling nakagalaw ang mga manok nang walang katapusan
          din. Ang kapangyarihan ng mga loop ay makakakitpid sa iyo ng maraming oras
          at nagbibigay ng lahat ng klase ng maaayos na opsyon habang binubuo mo ang
          sarili mong bersyon ng Minecraft.
    mc_2016_events:
      1:
        image: notes/mc_2016_events_1.jpg
        text: Sa susunod na antas na ito, maaari mong piliin ang alinman nina Steve
          o Alex. Pindutin ang mga arrow buttons sa iyong keyboard para makagalaw
          pataas, pababa, pakaliwa, at pakanan. Ngayon maaari ka nang lumipat kahit
          anong antas na gusto mo. Para magamit ang nilalang, maglakad lang papunta
          dito, bumaling para harapin ito, at pindutin ang spacebar.
      2:
        image: notes/mc_2016_events_2.jpg
        text: Kung ikaw ay gumagamit ng touch screen, mag-swipe pataas, pababa, pakaliwa
          at pakanan para makagala sa paligid. Pagkatapos ay i-tap ang laro para magamit
          mo ang aytem na nasa harap mo.
      3:
        image: notes/mc_2016_events_3.jpg
        text: Ngunit, ano ang mangyayari kung gagamitin mo ito? Sa Minecraft, ang
          mga tupa ay maghuhulog ng lana kapag gugupitan mo sila, ang mga baka ay
          tatakbo kapang sisipain mo sila, at ang mga creeper ay puputok kapag lalapit
          ka sa kanila. Ang mga reaksyong ito ay nangyari salamat sa bagay na tinatawag
          na mga "events". Ang events ay nagsasabi sa iyong programa na makinig o
          maghintay na mangyari ang isang bagay. At kapag nangyari na ito, magsasagawa
          ito ng aksyon.
      4:
        image: notes/mc_2016_events_4.jpg
        text: Hanggang sa ngayon, nakagamit ka pa lang ng isang event. Ang code na
          nilagay mo sa "when spawned" na puwang ay mapapatakbo kapag ang iyong nilalang
          ay nalikha o kapag nagsisimula na ang laro. Sa susunod na iilang mga antas,
          magkakaroon ka ng mga bagong puwang para sa mga events gaya ng "when touched"
          na mapatakbo tuwing may hahawak sa nilalang, o "when used" kapag ginamit
          mo ang nilalang. O, kung gusto mong maglaho ang zombie kapag sisikat na
          ang araw, ilagay ito sa "when day" na puwang
    mc_2016_spawn:
      1:
        image: notes/mc_2016_spawn_1.jpg
        text: Sa laro, ang ibig sabihin ng spawn ay pareho lang ng paglikha. Sa antas
          na ito, gagawa tayo ng mga zombie na mag-spawn kapag lumubog na ang araw.
          Para magawa ito, gagamit tayo ng "when night" na bloke.
      2:
        image: notes/mc_2016_spawn_2.jpg
        text: Dahil gusto natin ang mga zombie na mag-spawn sa gabi, mag-dagdag tayo
          ng "spawn zombie" na bloke sa baba ng "when night" na bloke. Pagkatapos
          ma-spawn, bawat zombie ay magpapatakbo sa code na inilagay mo sa "when spawned"
          na puwang ng event. Magsaya sa pag-spawn ng mga zombies!
    mc_2016_congrats:
      1:
        image: notes/mc_2016_congrats_1.jpg
        text: Maligayang bati! Natutuhan mo nang gumamit ng mga utos ng computer science
          para mabigyan ng buhay ang mundo ng Minecraft. Isa ka nang developer ngayon.
          Nabuksan mo na ang lahat ng mga utos at lahat ng mga nilalang. Ikaw ang
          pipili kung ano na ang mangyayari.
      2:
        image: notes/mc_2016_congrats_2.jpg
        text: Kapag tapos ka na sa paggawa ng laro, piliin ang "share" para makakuha
          ng link na maaari mong ibahagi sa iyong mga kaibigan o para makalaro sa
          laro sa iyong telepono. Magsaya! Inaasam kong malaro ang iyong bersyon ng
          Minecraft.
    applab_intro_welcome:
      1:
        image: notes/applab_intro_welcome_1.png
        text: Ang aking pangalan ay Mei'lani. Isa akong intern sa code.org at isa
          din akong estudyante ng computer science. Gusto ko ang computer science
          dahil ito ay lubhang malikhain. Maaari akong maging tagalutas ng mga problema.
          Maaari kong gawin ang lahat ayon sa gusto ko. Pero maaari din akong maging
          designer. aakong maging isang artista at pumili sa lahat ng mga malikhaing
          bahagi nito.
      2:
        image: notes/applab_intro_welcome_2.png
        text: Ang paggawa ng sarili mong mga app ay madali lang sa App Lab! Kung ikaw
          man ay bago sa pag-code o mayroon nang karanasan. Ang App Lab ay isang mahusay
          na kagamitan sa paglikha ng mga bagong apps at magbahagi nito sa iyong mga
          kaibigan.
      3:
        image: notes/applab_intro_welcome_3.png
        text: Ito ang App Lab. Sa kaliwang bahagi ay ang iyong app. Sa kanang bahagi
          ay ang code na nagpapatakbo nito. Gagawa ka ng iyong program sa pamamagitang
          ng pagkaladkad ng mga bloke mula sa toolbox. Para makapagsimula mayroon
          ka lang isang bloke na tinatawag na 'setProperty'.
      4:
        image: notes/applab_intro_welcome_4.png
        text: Ang set property na bloke ay nagbabago sa hitsura ng mga elemento sa
          iyong screen. Tulad ng mga buttons, mga labels, o kahit na ang screen mismo.
          Una kailangan mong pumili kung anong elemento ang gusto mong baguhin. Kung
          mag-hover ka sa isang elemento sa iyong app, makikita mo ang pangalan o
          ID dito. Pagkatapos piliin ang ID na iyan mula sa unang drop down.
      5:
        image: notes/applab_intro_welcome_5.png
        text: Ang mga elemento ay mayroong maraming mga katangian na maaari mong baguhin
          gaya ng kulay ng teksto, kulay ng background o ang laki ng titik. Maaari
          mong makita ang buong lista at pumili kung aling katangian ang gusto mong
          baguhin sa pangalawang drop down.
      6:
        image: notes/applab_intro_welcome_6.png
        text: Ang huling drop down ay kung saan ka susulat ng halaga na gusto mong
          gamitin. Ang bloke ay gagawa ng isang mungkahi para sa iyo. Subalit maaari
          ka ring mag-type ng ibang kulay o mga numero nang ikaw lang.
      7:
        image: notes/applab_intro_welcome_7.png
        text: 'Kapag tapos ka na, ang bloke ay magbabasa gaya ng isang pangungusap:
          ''Itakda ang background na kulang ng button na 1 sa berde.'' Pindutin ang
          run para makita ang pagbabaya ng ginawa mo sa code. Kung i-reset mo ito
          maaari kang magkaladkad ng karagdagang bloke para mabago ang ibang mga bagay
          tungkol sa iyong app. Gaya ng teksto!'
      8:
        image: notes/applab_intro_welcome_8.png
        text: Para sa tutoryal na ito magtatrabaho tayo sa bloke na mode pero ang
          App Lab ay sumusuporta rin sa pagtatrabaho sa tekso.
      9:
        image: notes/applab_intro_welcome_9.png
        text: Alinman dito ikaw ay magproprogram ka sa JavaScript, ang wika ng web.
          Bawat antas ay may layunin, instruksyon at isang larawan na pinupuntirya
          ng likhain.
      10:
        image: notes/applab_intro_welcome_10.png
        text: Kung ikaw ay hindi makausad, mag-click sa larawang ito at ito ay magpapakita
          sa iyo kung paano mo makumpleto ang antas. Ngunit tingnan muna kung magawa
          mo ba ito nang ikaw lang.
      11:
        image: notes/applab_intro_welcome_11.png
        text: Kapag nakompleto mo na ang layunin para sa antas na ito, i-click ang
          Finish para makapagpatuloy. Iyan na lahat ang nandito! Pindutin ang dalandan
          na "continue" na button para makapunta sa sunod na antas at makapagsimula
          sa iyong pakikipagsapalaran a App Lab!
    applab_intro_events:
      1:
        image: notes/applab_intro_events_1.png
        text: Ang mga apps ay talagang cool dahil para lang itong pagsisimula ng sarili
          mong negosyo. Ibig kong sabihin, maaari mong idisenyo ang lahat mula sa
          wala, magagawa mong mangasiwa sa lahat, at ikaw ang may-ari nang piraso
          na gawaing ito na nalikha mo gamit ang code.
      2:
        image: notes/applab_intro_events_2.png
        text: Ngayon na maaari mo nang baguhin ang hitsura ng iyong app, gagawin natin
          itong inter-aktib sa pamamagitan ng pagtugon sa mga events! Ang mga event
          ay mga aksyon ng gumagamit gaya ng pag-click sa button, pag-scroll sa menu,
          o pag-hover sa isang larawan. Ang mga interk-aktib na mga apps ay nangangailangan
          ng pamamaraan para tumugon sa mga events, gaya ng pagpapatunog ng tunog
          kapag nag-click sa button na ito. Para magawa ito sa App Lab kailangan mong
          gumamit ng bagong bloke na tinatawag na 'onEvent'.
      3:
        image: notes/applab_intro_events_3.png
        text: Ang programang ito ay nagtatakda sa screen na maging asul. Gusto ko
          ang screen na maging berde kapag nag-click ako sa button na ito. Una, kakailanganin
          kong magkaladkad sa isang onEvent na bloke. Sa pamamagitan ng pag-hover,
          malalaman ko ang na ang ID ng button ay "bigButton" kaya pipiliin ko ito
          sa unang drop-down.
      4:
        image: notes/applab_intro_events_4.png
        text: Sumunod ay pipili ako ng tipo ng event. Mayroong napakaraming mga pagpipilian
          na maaari mong piliin ngunit sa ngayon hahayaan ko muna itong maging isang
          regular na lumang pag-click.
      5:
        image: notes/applab_intro_events_5.png
        text: 'Sa wakas ay magdadagdag ako ng code sa loob ng on na event na magbabago
          sa kulay ng background ng screen. Maaari mong basahin ang blokeng ito gaya
          ng isang pangungusap: "Sa event na na-click ang button, patakbuhin ang lahat
          ng code na ito."'
      6:
        image: notes/applab_intro_events_6.png
        text: Subukan natin ito. Ang mga bloke sa labas ng onEnvent ay mapapatakbo
          pa rin agad kaya ang screen ay nagsisimula sa asul.
      7:
        image: notes/applab_intro_events_7.png
        text: At kapag na-click ang malaking button, ang code sa loob ng aking onEvent
          ay mapatakbo at ang aking screen ay maging berde.
      8:
        image: notes/applab_intro_events_8.png
        text: Kung gusto kong baguhin ang marami pang mga bagay pagkatapos ng event,
          gaya ng tekso sa screen, magdagdag lang ng code sa onEvent
      9:
        image: notes/applab_intro_events_9.png
        text: Para mapagawa ang iyong programa na tumugon sa karagdagang mga events,
          magdagdag pa ng mga onEvent na mga bloke. Siguraduhin lang na hindi mo sila
          nalagay sa loob ng bawat isa. Ngayon oras na para subukan mo ito nang ikaw
          lang. Magsaya!
    applab_intro_sounds:
      1:
        image: notes/applab_intro_sounds_1.png
        text: Sa sunod, matutunan mo ang tungkol sa pagdagdag ng mga larawan at mga
          tunog sa iyong app. Magsisimula tayo sa pamamagitan ng pagsusuri sa mga
          opsyon ng tunog.
      2:
        image: notes/applab_intro_sounds_2.png
        text: Sa toolbox ay makakakita ka nang bagong bloke na tinatawag na "playSound".
          Kaladkarin ito papunta sa iyong workspace. Maaari kang pumili ng tunog na
          papatunugin sa pamamagitan ng pag-click sa drown-down at pagkatapos ay mag-click
          sa "Choose".
      3:
        image: notes/applab_intro_sounds_3.png
        text: Mula dito maaari kang mag-upload ng isang tunog na file mula sa iyong
          kompyuter, o maghanap ng mga tunog mula sa library ng mga tunog. Ang library
          ng mga tunog ay mayroong iba't ibang mga kategorya gaya ng mga instrumento,
          background na music o mga hayop.
      4:
        image: notes/applab_intro_sounds_4.png
        text: Kapag nakahanap ka na nang tunog na gusto mo, i-click ang "Choose".
          Kapag tatakbo ang blokeng ito, papatunugin niya ang tunog na napili mo.
      5:
        image: notes/applab_intro_sounds_5.png
        text: Para makadagdag ng mga larawan sa iyong mga elemento maaari ka lang
          gumamit ng setProperty na bloke. Piliin ang katangian ng larawan sa pangalawang
          drop-down
      6:
        image: notes/applab_intro_sounds_6.png
        text: Pagkatapos piliin ang "Choose" mula sa pangatlong drop down.
      7:
        image: notes/applab_intro_sounds_7.png
        text: Mula dito maaari kang mag-upload ng larawan mula sa iyong kompyuter
          o maghanap sa isang napakalaking library ng mga icons sa iyong library ng
          mga icons.
      8:
        image: notes/applab_intro_sounds_8.png
        text: Balik sa mode nang pag-code, maaari kang gumamit ng "setProperty" na
          bloke para mabago ang kulay ng icon. Kapag napili mo na ang larawan ng icon
          na gagamitin mo, i-click ang "Run" para makita ang hitsura nito.
      9:
        image: notes/applab_intro_sounds_9.png
        text: Iyan na ang lahat na nandito! Maaari ka na ngayong magsimulang magdagdag
          ng mga larawan at mga tunog para maging mas masaya at mas dynamic ang iyong
          mga app.
    applab_intro_designmode:
      1:
        image: notes/applab_intro_designmode_1.png
        text: Para makabuo ng sarili mong mga app, kakailanganin mong magsimula sa
          pagdisenyo ng mga screen at mga elemento mula sa wala. Pinapadali ang paggawa
          nito ni App Lab gamit ang Design na Mode.
      2:
        image: notes/applab_intro_designmode_2.png
        text: Gamitin ang switch sa taas ng iyong app para makapunta sa Design na
          Mode.
      3:
        image: notes/applab_intro_designmode_3.png
        text: Maaari ka nang magdagdag ng mga bagong elemento sa pamamagitan ng pagkaladkad
          sa mga ito sa iyong screen. Maaari mo silang ilipat sa iba't ibang lokasyon
          at baguhin ang kanilang laki sa pamamagitan ng pagkaladkad sa kanang ibabang
          sulok.
      4:
        image: notes/applab_intro_designmode_4.png
        text: Para mabago ang mga katangian ng mga elemento gamatin ang mga kontrols
          na nasa kanan. Halibawa, napakadali lang baguhin ang teksto, kulay at laki
          ng titik ng buttton na ito.
      5:
        image: notes/applab_intro_designmode_5.png
        text: Kapag nagdadagdag ka ng bagong elemento sa iyong screen, magkakaroon
          ito ng generic ID gaya ng button1. Magandang ideya na baguhin ang button
          ID na ito sa isang mas makabuluhan pangalan gaya ng "rightButton". Para
          malaman mo kung alin ang mga ito kapag pumunta ka na sa iyong programa.
      6:
        image: notes/applab_intro_designmode_6.png
        text: Kung magdadagdag ka ng elemento sa iyong app nang hindi sinasadya, kaladkarin
          lang ito palabas o pindutin ang delete.
      7:
        image: notes/applab_intro_designmode_7.png
        text: Maaari kang magdagdag ng bagong screen sa iyong app sa pamamagitan ng
          pagkaladkad ng isang elemento ng screen
      8:
        image: notes/applab_intro_designmode_8.png
        text: Mula sa drop-down sa taas maaari kang kaagad lumipat pabalik-balik sa
          pagitan ng mga screen na nilikha mo.
      9:
        image: notes/applab_intro_designmode_9.png
        text: Sa loob ng iyong app, kakailanganin mo ng pamamaraan na makalipat sa
          pagitan ng lahat ng mga screen na ito, kaya ang setScreen na bloke ay naidagdag
          sa iyong toolbox. Gamitin ang "setScreen" sa loob ng "onEvent" na bloke
          para mabago ang mga screen sa pag-click ng button.
      10:
        image: notes/applab_intro_designmode_10.png
        text: Sa susunod na iilang antas ikaw ay magtatrabaho sa isang solo na proyekto.
          Una, ikaw ay magdadagdag ng button at pagkatapos ay magdadagdag ka ng bagong
          screen at sa huli ay magsusulat ka ng code para magawa mo ang button na
          makalipat sa bagong screen.
    applab_intro_share:
      1:
        image: notes/applab_intro_share_1.png
        text: Ngayon na natutunan mo na ang iilan sa pangunahing konsepto ng App Lab
          gaya ng pagdagdag ng mga button, mga tunog, mga larawan, teskto at mga bagong
          screens, maaari ka nang makagawa ng kahit anong klaseng mga app.
      2:
        image: notes/applab_intro_share_2.png
        text: Sa kasunod na antas, makikita mo ang app na kakatapos mo lang gawin.
          Gamit ang kaunting pagkamalikhain, maaari mong gawin ito bilang isang quiz
          sa personalidad para sa iyong mga kaibigan, isang pagbati na kard na maaari
          mong ibahagi sa iyong pamilya, o isang pumili-ng-sarili-mong-pakikipagsapalaran
          na laro. Lahat ng mga app na ito ay kombinasyon lang ng mga kakayahang natutunan
          mo na, at tiyak na ikaw ay makagawa ka rin nang higit pa.
      3:
        image: notes/applab_intro_share_3.png
        text: Kapag tapos ka na sa iyong app, madali mo lang itong mapadala sa iyong
          telepono para makita mo ang hitsura nito. I-click lang ang "Share" at ilagay
          ang numero ng iyong telepono doon.
      4:
        image: notes/applab_intro_share_4.png
        text: Makakatanggap ka ng isang text message na magbibigay sa iyo ng pamamaraan
          na mabuksan agad ang iyong app.
      5:
        image: notes/applab_intro_share_5.png
        text: Maari mo ring ibahagi ang link patungo sa iyong app sa social media
          o i-post ito sa publikong galeriya ng code.org para mapaglaruan at mabahagi
          ng ibang tao.
      6:
        image: notes/applab_intro_share_6.png
        text: Kakasimula mo pa lang malaman kung ano ang magagawa ng App Lab. Ang
          buong App Lab ay naglalaman ng mas pinahusay na mga interk-aksyon ng mga
          gumagamit, bagong mga elemento ng screen at pati na rin ang sariling database
          para madali ka lang makagawa ng buong itinampok na mga apps. Sa "code.org/applab"
          makikita mo ang buong kagamitan at ang napakaraming mga ideya kung gusto
          mong magpatuloy.
      7:
        image: notes/applab_intro_share_7.png
        text: Salamat sa pagsama sa kahabaan ng biyahe. Ngayon ay magbuo at magbahagi
          sa iyong unang app, at patuloy na bubuo ng mga apps sa App Lab!
    mc_2017_agent_intro:
      1:
        image: notes/mc_2017_agent_intro_1.png
        text: 'Stacy: Stampy, Lizzy, Preston - salamat sa pagsama sa akin. Ang gusto
          ko lang maipakita sa inyo ay nasa ibabaw lang ng mesa plateau na ito. Palagay
          ko ay magugustuhan mo ito!'
      2:
        image: notes/mc_2017_agent_intro_2.png
        text: Sandali lang - may butas sa daanan! (sumisigaw)
      3:
        image: notes/mc_2017_agent_intro_3.png
        text: 'Okay lang ba ang lahat? Stampy: Ah, nakita ko na ang problema. Tingnan
          ninyo! Nagkaroon ng butas ang daanan. Stacy: Talaga, Stampy? Lizzy: Siguro
          dapat tayong magtipon ng mga bloke para ayusin ito. Preston: Maghabulan
          tayo. Ang unang makabalik sa tuktok ang mananalo. Stacy: Ok, maghanda at
          humayo! Ok, magtitipon lang ako ng iilang terracotta. Sandali lang. Hindi
          ako makamina! Preston: Dito din. Lizzy: Hindi rin ako. Stacy: Ok, iyan ay
          talagang kakaiba. Stampy, makamina ka ba? Stampy: Hindi ako makamina! Stacy:
          Ok, lahat ay manatiling mahinahon. Stampy: Sira ba ang laro? Stacy: Kung
          ito ay sira, paano natin ito ayusin? Lizzy: Hindi ko alam. Stampy: May nakakaalam
          ba dito kung paano magsulat ng Minecraft na code?'
      4:
        image: notes/mc_2017_agent_intro_4.png
        text: "(poof) Preston: Ano iyon? Stampy: Hindi pa ako nakakakita niyan dati.
          Lizzy: Ito ay kaibig-ibig. Stacy:  Maari ba iyang maamo? Preston: Okay,
          ano ang nangyayari? May dapat bumalik sa totoong mundo at ayusin ito. All:
          Hindi ito! Stacy: Hindi a- (Hay.) Sige, pupunta ako."
      5:
        image: notes/mc_2017_agent_intro_5.png
        text: O, okay, uy, nasa totoong mundo na ako ngayon. Susubukang kung pumunta
          at maghanap ng mga opisina ng Minecraft.
      6:
        image: notes/mc_2017_agent_intro_6.png
        text: Ngunit, nangangailangan ako ng tulong ninyo. Simulan ang paggawa sa
          tutoryal, magsimulang mag-aral kung paano mag-code, at hahabol sa sa inyo
          mga ilang antas, okay? Sana swertehin ako. Ow! Kaktus! Okay lang ako!
      7:
        image: notes/mc_2017_agent_intro_7.png
        text: Para makompleto ang hamon ng Hour of Code, kailangan mong magsulat ng
          code para ma-program ang ahente. Kasama kayong magtatrabaho ng Ahente para
          matanggal ang anumang mga balakid sa daan, kaya maaari mong kunin ang mga
          aytem na kakailanganin mo sa inyong paglalakbay. Ang ahente lang ang maaaring
          maglagay at maggiba ng mga bloke, at ikaw lang ang maaaring magkolekta ng
          mga ayem. Ang iyong screen ay nakahati sa tatlong pangunahing bahagi. Sa
          kaliwa ay ang Minecraft.
      8:
        image: notes/mc_2017_agent_intro_8.png
        text: Ang gitnang bahagi ay ang toolbox na may mga utos na naiintindihan ng
          ahente.
      9:
        image: notes/mc_2017_agent_intro_9.png
        text: At ang nasa kanan, ay ang workspace. Ito ang lugar kung saan isalansan
          mo ang mga utos para magawa ang iyong programa na nagkontrol sa Ahente.
      10:
        image: notes/mc_2017_agent_intro_10.png
        text: Ang ahente ay maaaring maglakad, bumaling at magpagana ng mga pressure
          plates. Maaari din siyang magsira ng mga bloke at maglagay ng mga bloke.
          Kapag naglagay siya ng mga bloke gaya ng mga minecard na riles na mga ito,
          ilalagay niya ito sa ilalim niya mismo.
      11:
        image: notes/mc_2017_agent_intro_11.png
        text: Kung nakalimutan mo kung ano ang gagawin, ang mga instruksyon sa bawat
          antas ay nasa taas.
      12:
        image: notes/mc_2017_agent_intro_12.png
        text: Kung gusto mong subukang muli, maaari mong pindutin ang asul na reset
          na button para ma-reset ang lahat sa kung saan ito nagsimula. At kung kailangan
          mong magbura ng bloke ng code, kaladkarin lang ito mula sa iyong workspace
          papunta sa toolbox. Tandaan na pindutin ang run para mapagalaw ang Ahente.
          Okay, sige at subukan mo ang unang iilang mga antas! Pagbutihin mo!
    mc_2017_repeat:
      1:
        image: notes/mc_2017_repeat_1.png
        text: 'Stampy: Nagtaka ako kung ano kaya ang ginagawa ni Stacy?'
      2:
        image: notes/mc_2017_repeat_2.png
        text: 'Stacy: Woah, siguro ay nasa tamang lugar ako. Ito ay nakakagulat!'
      3:
        image: notes/mc_2017_repeat_3.png
        text: Pakiramdam ko ay nakabalik na ako sa Minecraft! Hello. Kumusta na kayo?
          Hello?
      4:
        image: notes/mc_2017_repeat_4.png
        text: 'O, mayroong creeper. Wala kang ginawang kahit na ano, di ba? Katie:
          Stacy? Stacy: Hi, Katie? Katie: Oo, maligayang pagdating sa Minecraft!'
      5:
        image: notes/mc_2017_repeat_5.png
        text: 'Stacy: Nakakagulat ito. Nagtatrabaho ka dito bilang isang developer
          araw-araw, tama ba? Katie: Oo, ito ay sadyang nakakakilabot. Isa akong developer
          sa Minecraft marketplace na grupo. Stacy: Ilang mga coding na wika ang alaman
          mo? Katie: Sa buong karera ko, siguro nakagamit ng ako ng higit sa isang
          dosena. Stacy: Isang dosena? Katie: Oo. Stacy: Kaya ngayon, alam mo siguro
          ang kahit na ano tungkol sa maliit na golem na tinatawag ang sariling niya
          bilang Ahente? Katie: Ginagamit namin ang Ahente para gumawa ng mga bagay
          na hindi magagawa nila Steve o Alex, gaya ng pagtawid sa laba. Stacy: Gusto
          kong matuto kung paano mag-code at gusto din nilang matutong mag code, kaya
          ano ang isa sa mga unang bagay na kailangan kong malaman kung ako ay mag-aaral?'
      6:
        image: notes/mc_2017_repeat_6.png
        text: 'Katie: Kailangan mong malaman kung paano gumamit ng mga loops. Ang
          mga loops ay isang bagay na sinulat ng mga developers para makabigay ng
          mga utos sa isang kompyuter na maaaring ipatakbo nang paulit-ulit. Stacy:
          Nakuha ko na, kaya siguro mayroong mga iilan ang gagamit nito sa paparating
          na mga antas sa unahan, kaya sige at subukan mo ang mga loops.'
      7:
        image: notes/mc_2017_repeat_7.png
        text: Sa susunod na antas, maaari kang gumamit ng loop para mapagalaw ang
          Ahente sa daanan. Kaladkarin ang repeat na bloke sa workspace at ilagay
          ang move forward na bloke sa loob ng repeat na bloke. Ito ay nagsasabi sa
          kompyuter na gawin ang parehas na bagay nang paulit-ulit sa isang hanay
          kahit na hindi mo kaladkarin ang lahat ng mga bloke sa workspace. Maaari
          kang pumili kung ilang ulit mo ito uulitin sa pamamagitan ng paglagay ng
          numero sa repeat na bloke.
      8:
        image: notes/mc_2017_repeat_8.png
        text: Maaari kang maglagay ng mga turno at mga maraming mga utos din sa repeat
          na bloke, pero sa ngayon susubukan muna nating gamitin ang repeat para mapagalaw
          ang Ahente pasulong ng iilang mga hakbang. Tandaan, kung ikaw ay hindi makausad,
          maaari mo lang pindutin ang asul na reset na button at subukan ulit.
      9:
        image: notes/mc_2017_repeat_9.png
        text: 'Kung ikaw ay nag-iisip na magkaroon ng magandang trabahao gaya ni Katie,
          magpatuloy at i-click ang show code na button kapag natapos mo ang bawat
          antas. Ito ay magpapakita sa Javascript na code na ginagamit ng mga kagaya
          ni Katie kapag siya ay nagprogram sa Minecraft. Katie: Oo, good luck sa
          lahat!'
    mc_2017_functions:
      1:
        image: notes/mc_2017_functions_1.png
        text: 'Preston: Hindi sa pinagmamalaki ko, ngunit mahusay ako sa parkour.
          Lizzy: Matulog muna tayo para umaga na pagbalik ni Stacy.'
      2:
        image: notes/mc_2017_functions_2.png
        text: 'Stacy: Ok guys, nakabalik na ako mula sa mga opisina ng Minecraft,
          at sa palagay ko alam ko na kung paano lutasin ang problema na naranasan
          ko sa laro ko. Sa palagay ko ay gagamit ako ng function. Buksan ko lang
          ito.'
      3:
        image: notes/mc_2017_functions_3.png
        text: Ang function ay isang tiyak ng hanay ng mga instruksyon para magawa
          ang isang partikular na gawain, gaya lang ng isang resipe. Sa sunod na iilang
          mga antas, magkakaroon ka na ng access sa mga function na maari mong gamitin
          para malutas ang mga palaisipan.
      4:
        image: notes/mc_2017_functions_4.png
        text: Tingnan ang code sa loob ng funtion kung ito ay nasa workspace para
          makita kung ano ang ginagawa nito.
      5:
        image: notes/mc_2017_functions_5.png
        text: Pagkatapos, hanapin ang bloke na may pangalan na iyan sa toolbox at
          kaladkarin ito mula sa toolbox papunta sa when run na bloke.
      6:
        image: notes/mc_2017_functions_6.png
        text: Tandaan, maaari kang gumamit ng parehong function bawat beses na kailangan
          mong magpatakbo nang parehong hanay ng mga instruksyon para magawa ang isang
          bagay. Good luck, alam ko na magagawa mo ito!
    mc_2017_congratulations:
      1:
        image: notes/mc_2017_congratulations_1.png
        text: 'Preston: Maligayang bati!'
      2:
        image: notes/mc_2017_congratulations_2.png
        text: 'Lizzy: Maligayang bati!'
      3:
        image: notes/mc_2017_congratulations_3.png
        text: 'Stampy: Maligayang bati, nagawa mo ito!'
      4:
        image: notes/mc_2017_congratulations_4.png
        text: 'Stacy: Maligayang bati, sobrang ginagalingan mo iyon! At ngayon na
          nakompleto mo na ang Hour of Code, maaari ka nang magsimulang mag-code sa
          Minecraft. Natutunan mo na ang tungkol sa mga loop, mga function at kung
          ano ang gagawin ng isang software Agent.'
      5:
        image: notes/mc_2017_congratulations_5.png
        text: Ngayon, oras na para maglaro ng libreng antas, kung saan ikaw ang developer.
          Gamitin ang natitirang oras para magsulat ng sarili mong function para makatuklas,
          makamina, at makagawa.
      6:
        image: notes/mc_2017_congratulations_6.png
        text: 'Maaari mong kunin ang code na nasulat mo sa antas na ito papunta sa
          iyong mundo ng Minecraft sa Minecraft: Education Edition. I-click lang ang
          ''Finish'' at sundin ang mga instruksyon para makakuha ng link para magamit
          sa iyong mundo, para magpatuloy sa pag-code gamit ang Ahente. Magsaya at
          magaling!'
      7:
        image: notes/mc_2017_congratulations_7.png
        text: 'Stacy: At nakabalik na ako! Okay, ito ang Ahente! Ipapakita ko sa inyo
          kung ano ang magagawa nito. Tingnan, ginagawa nito ito. Sinabihan ko siyang
          gumawa ng isang hagdanan mula sa mga terra cotta na blokeng ito, ngayon
          maaari lang natin itong gamitin para makaalis sa lugar na ito. At hindi
          lang ito basta bastang hagdanan. Maaari kong sabihan ang Ahente na gawin
          ang kahit anumang gusto ko, at gagawin niya ito para sa akin.'
      8:
        image: notes/mc_2017_congratulations_8.png
        text: 'Stampy: Paano mo nagawa iyan? Stacy: Ito ay madali lang, talaga. Gumamit
          ako ng code!'
    csd_concept_how_computers_work:
      1:
        image: notes/csd_concept_how_computers_work_1.png
        text: 'Kahit saan ka tumingin, ang mga kompyuter ay nagbabago sa mundo. Kahit
          sila ay nasa desktop, sa ating mga tahanan, ating mga bulsa, o kahit saan
          man. Ngunit habang ang karamihan ay gumagamit sa rebolusyonaryong teknolihiyang
          ito araw-araw, kadalasan ay hindi natin naitanong: "Paano ba gumagana ang
          mga kompyuter?" Sa seryeng ito, matutunan mo kung paano talaga gumagana
          ang mga kompyuter, magsimula tayo sa kung paano naging kompyuter ang kompyuter.
          Pagkatapos ay titingnan mo kung paano nirepresenta ang mga impormasyon sa
          loob ng kompyuter gamit ang mga maliliit ng elektrikal na mga signals na
          palipat-lipat sa on at off sa kahanga-hangang bilis.'
      2:
        image: notes/csd_concept_how_computers_work_2.png
        text: Pagkatapos nito, matutunan mo kung paano gumagamit ng mga circuits ang
          kompyuter para gawin ang lahat mula sa simpleng matematika hanggang sa pag-simulate
          ng buong mga birtwal na mundo. Sa sunod, titingnan natin ang iba't ibang
          piraso ng kompyuter na sadyang nagpapasok, nagpapalabas at nag-store sa
          lahat ng mga impormasyon. Sa wakas, titingnan mo kung ano talaga ang code
          at kung paano ang mga software kumukontrol sa hardware. Kaya kahit kung
          interesado ka lang sa mga kagamitan na ginagamit mo araw-araw o gusto mong
          mag-disenyo ng pagbabago para sa hinaharap, ang unang hakbang ay nag pag-aaral
          kung pano gumagana ang mga kompyuter.
    csd_concept_computer:
      1:
        image: notes/csd_concept_computer_1.png
        text: Ang pangalan ko ay May-Li Khoe at ako ay isang taga-disenyo at isang
          imbentor. Ilan sa mga bagay na dinisenyo ko ay nasa Apple, at ngayon ay
          nagdidisenyo ako ng mga produkto na magagamit ng mga bata para mapadali
          ang kanilang panahon sa paaralan. Ang iba kong mga trabaho ay pag-diDJ at
          pagsasayaw.
      2:
        image: notes/csd_concept_computer_2.png
        text: Ang mga kompyuter ay nasa lahat ng dako. Sila ay nasa bulsa ng mga tao,
          nasa mga sasakyan ng mga tao, at nasa pulsuhan ng mga tao. Maaari din silang
          nasa iyong backpack ngayon sa oras na ito. Ngunit paano naging kompyuter
          ang isang kompyuter? Ano ang bumubuo sa kompyuter para maging isang kompyuter?
          At paano nga ba ito gumagana?
      3:
        image: notes/csd_concept_computer_3.png
        text: Hi, ako si Nat! Ako ay isa sa mga orihinal na taga-disenyo ng Xbox.
          Nagtatrabaho ako sa mga kompyuter, siguro ay mula pitong taong gulang at
          ngayon ay nagtatrabaho ako sa Virtual Reality. Bilang mga tao, kadalasan
          ay gumagawa tayo ng mga kagamitan para makatulong sa atin na maglutas ng
          mga problema. Mga kagamitan gaya ng wheelbarrow, martiyo, palimbagan, o
          isang traktorang-treyler.
      4:
        image: notes/csd_concept_computer_4.png
        text: Lahat ng mga imbensyong ito ay nakakatulong sa atin sa mga manwal na
          gawin. Sa paglipas ng panahon, ang mga tao ay nagsimulang mag-isip kung
          kung ang makina ay maaaring idisenyo at gawin para makatulong sa atin sa
          mga pag-iisip na gawawin natin, gaya ng paglutas ng mga ekwasyon o pagsubaybay
          sa mga bituin sa kalawakan. Sa halip na galawin at imanipula ang pisikal
          na bagay gaya ng lupa at bato, ang mga makinang ito ay kailangang idisenyo
          para magmanipula ng mga impormasyon. Gaya ng paggalugad ng mga nangunguna
          sa computer science kung paano makadisenyo ng isang makina na nag-iisip,
          napag-alaman nila na kailangan nilang gumawa ng apat na iba't ibang gawain.
      5:
        image: notes/csd_concept_computer_5.png
        text: Kailangan nitong kumuha ng input, mag-store ng mga impormasyon, mag-proseso
          nito at pagkatapos ay ipalabas ang mga resulta. Ngayon, maaaring simple
          lang ito tingnan, ngunit ang apat na bagay na ito ay karaniwan sa lahat
          ng mga kompyuter. Ito ang dahilan kung bakit naging kompyuter ang isang
          kompyuter.
      6:
        image: notes/csd_concept_computer_6.png
        text: Ang kompyuter ay nagsimula bilang isang pangunahing mga calculator,
          kung saan ito ay kasindak-sindak na sa panahong iyon, ay sila ay nagmamanipula
          lang ng mga numero noon. Pero ngayon maaari na natin silang gamitin para
          makipag-usap sa bawat isa, maaari natin silang gamitin para maglaro ng mga
          laro, magkontrol ng mga robots, at gumawa ng kahit anong bagay na maaari
          mong maisip. Ang mga modernong kompyuter ay para lang mga lumang mabagal
          na makina ngunit sila ay gumagawa pa rin ng parehong apat na mga bagay.
      7:
        image: notes/csd_concept_computer_7.png
        text: First, we're going to talk about input. You can tell computers what
          to do with the keyboard, you can tell them what to do with the mouse, the
          microphone, the camera. All these different inputs give a computer information,
          which is then stored in memory.
      8:
        image: notes/csd_concept_computer_8.png
        text: A computer's processor takes information from memory. It manipulates
          it or changes it using an algorithm, which is just a series of commands.
          And then it sends the processed information back to be stored in memory
          again. This continues until the processed information is ready to be output.
      9:
        image: notes/csd_concept_computer_9.png
        text: How a computer outputs information depends on what the computer is designed
          to do. A computer display can show text, photos, videos, or interactive
          games -- even virtual reality! The output of a computer may even include
          signals to control a robot.
      10:
        image: notes/csd_concept_computer_10.png
        text: And who knows what the computers of tomorrow will be like? My hope is
          that you get to help decide what you want the computers of tomorrow to look
          like. But across all computers, regardless of the different types of technology
          they use, they're always doing those same four things. They take in information,
          they store it as data, they process it, and then they output the results.
    csd_concept_binary_data:
      1:
        image: notes/csd_concept_binary_data_1.png
        text: Hi! My name is Limor Fried, and I'm an engineer here at Adafruit Industries.
          And this is where I do engineering and design, and I design circuits for
          fashion and music and technology.
      2:
        image: notes/csd_concept_binary_data_2.png
        text: My name is Federico Gomez Suarez, and I'm a software developer with
          Microsoft Hack for Good. And I look into using technology to help us solve
          some of the big social problems of our times.
      3:
        image: notes/csd_concept_binary_data_3.png
        text: You may have heard that computers work on ones and zeros. But almost
          nobody today actually deals directly with these ones and zeros. But ones
          and zeroes do play a big role in how computers work on the inside.
      4:
        image: notes/csd_concept_binary_data_4.png
        text: Inside a computer are electric wires and circuits that carry all the
          information in a computer. How do you store or represent information using
          electricity?
      5:
        image: notes/csd_concept_binary_data_5.png
        text: Well, if you have a single wire with electricity flowing through it,
          the signal could either be on or off. That's not a lot of choices, but it's
          a really important start. With one wire, we can represent a yes or no, true
          or false, a one or zero, or anything else with only two options. This on/off
          state of a single wire is called a bit, and it's the smallest piece of information
          a computer can store.
      6:
        image: notes/csd_concept_binary_data_6.png
        text: 'If you use more wires you get more bits: more ones and zeros. With
          more bits you can represent more complex information. But to understand
          that, we need to learn about something called the binary number system.'
      7:
        image: notes/csd_concept_binary_data_7.png
        text: 'In the decimal number system, we have ten digits from zero to nine,
          and that''s how we''ve all learned to count. In the binary number system,
          we only have two digits: zero and one. With these two digits, we can count
          up to any number.'
      8:
        image: notes/csd_concept_binary_data_8.png
        text: Here's how this works. In a decimal number system we're all used to,
          each position in a number has a different value. There's a 1 position, the
          10 position, the 100 position, and so on. For example, a 9 in the 100 position
          is a 900. In binary, each position also carries a value. But instead of
          multiplying by 10 each time, we multiply by 2. So there's the 1 position,
          the 2 position, the 4 position, the 8 position, and so on. For example,
          the number 9 in binary is 1001. To calculate the value, we add 1 times 8,
          plus 0 times 4, plus 0 times 2, plus 1 times 1. Almost nobody does this
          math because computers do it for us. What's important is that any number
          can be represented with only ones and zeros, or by a bunch of wires that
          are on or off. The more wires you use, the larger the numbers you can store.
          With 8 wires, you can store numbers between 0 and 255. That's 8 ones. With
          just 32 wires, you can store all the way from 0 to over 4 billion. Using
          the binary number system, you can represent any number you like.
      9:
        image: notes/csd_concept_binary_data_9.png
        text: But what about other types of information? Like text, images, or sound?
          It turns out that all these things can also be represented with numbers.
          Think of all the letters in the alphabet. You could assign a number to each
          letter. A could be 1, B could be 2, and so on. You can then represent any
          word or paragraph as a sequence of numbers. And as we saw, these numbers
          can be stored as on or off electrical signals. Every word you see on every
          webpage or your phone is represented using a system like this.
      10:
        image: notes/csd_concept_binary_data_10.png
        text: Now, let's consider photos, videos, and all the graphics you see on
          a screen.
      11:
        image: notes/csd_concept_binary_data_11.png
        text: All of these images are made out of teeny dots called pixels, and each
          pixel has a color. Each of the colors can be represented with numbers. When
          you consider the typical image has millions of these pixels, and the typical
          video shows 30 images per second now we're talking about a lot of data here.
      12:
        image: notes/csd_concept_binary_data_12.png
        text: Every sound is basically a series of vibrations in the air. Vibrations
          can be represented graphically as a waveform. Any point on this waveform
          can be represented by a number. And this way, any sound can be broken down
          into a series of numbers. If you want higher quality sound, you will pick
          32-bit audio or an 8-bit audio. More bits means a higher range of numbers.
      13:
        image: notes/csd_concept_binary_data_13.png
        text: When you use a computer to write code or make your own app, you're not
          dealing directly with these ones and zeros. But you will be dealing with
          images or sound or video. So if you want to understand how computers work
          on the inside, it all comes down these simple ones and zeros and the electrical
          signals in the circuits behind them.
    csd_concept_circuits_logic:
      1:
        image: notes/csd_concept_circuits_logic_1.png
        text: One of the coolest things I've discovered about circuits is circuitry
          can be an art form like if I have a creative idea, I can get that creative
          idea out using circuits. So if you have ideas, you can use technology to
          make those ideas come to life.
      2:
        image: notes/csd_concept_circuits_logic_2.png
        text: Every input or output of a computer is effectively a type of information,
          which can be represented by on or off electrical signals or ones and zeros.
      3:
        image: notes/csd_concept_circuits_logic_3.png
        text: In order to process the information that comes in as input, and to make
          the information that is output, a computer needs to modify and combine the
          input signals. To do this, a computer uses millions of teeny electronic
          components, which come together to form circuits.
      4:
        image: notes/csd_concept_circuits_logic_4.png
        text: Let's take a closer look at how circuits can modify and process information
          that's represented in ones and zeros. This is an incredibly simple circuit.
          It takes an electrical signal, on or off, and it flips it. So if the signal
          you give it is a 1, the circuit gives you a 0, and if you give the circuit
          a 0, it gives you a 1. The signal that goes in is not the same as the signal
          that comes out, and so we call this circuit NOT.
      5:
        image: notes/csd_concept_circuits_logic_5.png
        text: More complicated circuits can take multiple signals and combine them,
          and give you a different result. In this example, a circuit will take two
          electrical signals, now each one might be a 1 or a 0. If either of the signals
          coming in is a 0, then the result is also a 0. This circuit will only give
          you a 1, if the first signal and the second signal are both a 1, and so
          we call the circuit AND.
      6:
        image: notes/csd_concept_circuits_logic_6.png
        text: There are many small circuits like this that perform simple logical
          calculations. By connecting these circuits together, we can make more complex
          circuits that perform more complex calculations.
      7:
        image: notes/csd_concept_circuits_logic_7.png
        text: For example, you can make a circuit that adds 2 bits together called
          an adder. This circuit takes in 2 individual bits, each one a 1 or a 0,
          and adds them together to calculate the sum. The sum can be 0 plus 0 equals
          0, 0 plus 1 equals 1, or 1 plus 1 equals 2. You need two wires coming out
          because it can take up to two binary digits to represent the sum. Once you
          have a single adder for adding two bits of information, you can put together
          multiples of these adder circuits side-by-side to add together much larger
          numbers.
      8:
        image: notes/csd_concept_circuits_logic_8.png
        text: For example, here's how an 8-bit adder adds the numbers 25 and 50. Each
          number is represented using 8 bits, resulting in 16 different electrical
          signals that go into the circuit. The circuit for an 8-bit adder has lots
          of little adders inside of it, which together, calculate the sum.
      9:
        image: notes/csd_concept_circuits_logic_9.png
        text: Different electrical circuits can perform other simple calculations
          like subtraction or multiplication. In fact, all the information processing
          your computer does is just lots and lots of small simple operations put
          together. Each individual operation done by a computer is so, so simple
          it could be done by a human, but these circuits inside computers are way
          way faster.
      10:
        image: notes/csd_concept_circuits_logic_10.png
        text: Back in the day, these circuits were big and clunky, and an 8-bit adder
          could be as big as a fridge, and it would take minutes for them to perform
          a simple calculation. Today, computer circuits are microscopic in size,
          and way way faster. Why are smaller computers also faster? Well, because
          the smaller the circuit is, the less distance the electrical signal has
          to go. Electricity moves at just about the speed of light, which is why
          modern circuits can perform billions of calculations per second.
      11:
        image: notes/csd_concept_circuits_logic_11.png
        text: So whether you're playing a game, recording a video, or exploring the
          cosmos, everything you could possibly do with technology requires lots of
          information to be processed extremely quickly. Underneath all this complexity
          is just lots of teeny little circuits that turn binary signals into websites,
          videos, music, and games. These circuits can even help us decode DNA to
          diagnose and cure disease. So what would you like to do with all these circuits?
    csd_concept_memory_cpu_input_output:
      1:
        image: notes/csd_concept_memory_cpu_input_output_1.png
        text: Hi, my name is Madison Maxey. I have a company called Loomia, and we
          focus on making smart fabrics for smart clothing and smart soft good products.
          The sky's the limit when it comes to textiles.
      2:
        image: notes/csd_concept_memory_cpu_input_output_2.png
        text: My name is Danielle Applestone, and I'm CEO of Othermachine Company.
          We build a desktop milling machine. A milling machine takes a rotating cutting
          tool and moves it through material to create a 3D object.
      3:
        image: notes/csd_concept_memory_cpu_input_output_3.png
        text: Under the hood, all computers do the same four basic things. They input
          information, store and process the information, and then, output information.
          Each of these things is done by a different part of the computer.
      4:
        image: notes/csd_concept_memory_cpu_input_output_4.png
        text: There are input devices that take input from the outside world and convert
          it into binary information. There is memory to store this information. There's
          a central processing unit or CPU, where all the calculations are done. And,
          finally, there are output devices that take information and convert it into
          a physical output.
      5:
        image: notes/csd_concept_memory_cpu_input_output_5.png
        text: Let's talk about input first. Computers can take many different types
          of input, like the keyboard of a computer, the touchpad of a phone, a camera,
          a microphone, or a GPS. But even the sensors on a car, a thermostat, or
          a drone are also different input devices.
      6:
        image: notes/csd_concept_memory_cpu_input_output_6.png
        text: Now, let's look at a simple example of how input travels through a computer
          and becomes output. When you press a key on your keyboard - let's say the
          letter "B". The keyboard converts the letter to a number. That number is
          sent as binary, ones and zeros, into the computer.
      7:
        image: notes/csd_concept_memory_cpu_input_output_7.png
        text: Starting from this number, the CPU calculates how to display the letter
          "B" pixel by pixel. The CPU requests step-by-step instructions from memory,
          which tell it how to draw the letter "B". The CPU runs these instructions
          and stores the results as pixels in memory.
      8:
        image: notes/csd_concept_memory_cpu_input_output_8.png
        text: Finally, this pixel information is sent in binary to the screen. The
          screen is an output device, which converts the binary signals into the tiny
          lights and colors that make up what you see.
      9:
        image: notes/csd_concept_memory_cpu_input_output_9.png
        text: This all happens so quickly it feels instantaneous, but to display each
          letter a computer runs thousands of instructions, starting from the moment
          your finger presses the key point.
      10:
        image: notes/csd_concept_memory_cpu_input_output_10.png
        text: In that example, the output device was the screen, but there are many
          different types of output which take a binary signal from the computer and
          do something in the physical world. For example, a speaker will play sound,
          and a 3D printer will print an object. Output devices can also control physical
          motion like a robotic arm, the motor of a car, or the cutting tool of the
          milling machine that my company makes. New types of inputs and outputs let
          computers interact with the world in entirely new ways. This has been helped
          out by improvements to the speed and size of the memory and CPU.
      11:
        image: notes/csd_concept_memory_cpu_input_output_11.png
        text: The more complicated a task is and the more information that is input
          or output, the more processing power and memory a computer needs. Typing
          letters on a screen may be easy but to do complicated 3d graphics or record
          a high-definition movie, modern computers often have multiple CPUs to process
          all that information and many gigabytes of memory to store it.
      12:
        image: notes/csd_concept_memory_cpu_input_output_12.png
        text: 'No matter what it is you want to do with the computer, every single
          action is about: inputting information from the physical world, storing
          and processing that information, and getting some output back into the physical
          world.'
    csd_concept_hardware_software:
      1:
        image: notes/csd_concept_hardware_software_1.png
        text: Hi, my name is Erica Gomez and I'm an engineering manager at Amazon.com.
          One of the best things about working in tech, and at Amazon in particular,
          is that I get to bring my dog with me to work every day. My job is to help
          make sure software gets out the door and her job is to nap under my desk
          and snore very loudly.
      2:
        image: notes/csd_concept_hardware_software_2.png
        text: 'My name is Jerome Holman, and I''m a Program Manager on Team Xbox and
          I have a really fun job: Basically bringing the hardware and the software
          together to give you all the games that you love on your Xbox.'
      3:
        image: notes/csd_concept_hardware_software_3.png
        text: When you look inside a computing device you see a bunch of circuits,
          chips, wires, speakers, plugs, and all sorts of other stuff. This is the
          hardware.
      4:
        image: notes/csd_concept_hardware_software_4.png
        text: But what you don't see is the software. Software is all of the computer
          programs, or code, running on this machine. Software can be anything from
          apps and games to webpages and the data science software that me and my
          teams use at Amazon to understand how customers behave.
      5:
        image: notes/csd_concept_hardware_software_5.png
        text: But how do the hardware and the software interact with one another?
          Let's start at looking at a computer's central processing unit, or CPU.
      6:
        image: notes/csd_concept_hardware_software_6.png
        text: The CPU is the master chip that controls all the other parts of the
          computer. A CPU needs to do different things so inside it has smaller, simpler
          parts that handle specific tasks. It has circuits to do simple math and
          logic. It has other circuits to send and receive information to and from
          different parts of the computer.
      7:
        image: notes/csd_concept_hardware_software_7.png
        text: The real magic of the CPU is how it knows which circuits to use and
          when to use them. The CPU receives simple commands that tell it which circuit
          to use to do a specific job. For example, an "add" command tells the CPU
          to use its outer circuit to calculate a new number. And then the "store"
          command tells the CPU to use a different circuit to save that result into
          memory.
      8:
        image: notes/csd_concept_hardware_software_8.png
        text: Just like numbers, all of these simple commands can be represented in
          binary ones and zeros or on and off electrical signals. The binary commands
          are stored in memory and the CPU fetches and executes them in sequence one
          after the other. This sequence of commands is, in fact, a very simple computer
          program.
      9:
        image: notes/csd_concept_hardware_software_9.png
        text: Binary code is the most basic form of software and it controls all the
          hardware of a computer. These days, nobody writes software in binary. It
          would take forever!
      10:
        image: notes/csd_concept_hardware_software_10.png
        text: Today, the software we write looks more like this (Python), or this
          (Ruby), or even this (Blockly). Programming languages like these let you
          type in commands in something that looks a lot like English.
      11:
        image: notes/csd_concept_hardware_software_11.png
        text: To draw a rectangle on the screen, you just need a single command. This
          high-level command is converted into hundreds, or thousands, of simpler
          binary commands that the CPU understands. Software tells the CPU what to
          do, but when you're listening to music, and browsing the web, and chatting
          with a friend, your computer is running multiple pieces of software all
          at once.
      12:
        image: notes/csd_concept_hardware_software_12.png
        text: So, how do all of these programs get on the computer in the first place,
          and how can the CPU run them all at once? To find out we'll have to take
          a look at the operating system.
      13:
        image: notes/csd_concept_hardware_software_13.png
        text: The operating system of the computer is the master program that manages
          how software gets to use the hardware of the computer. For example, I helped
          create the Windows operating system that runs on most personal computers.
      14:
        image: notes/csd_concept_hardware_software_14.png
        text: The operating system is a program with special abilities that let it
          control the other software on the computer. It lets you install new programs
          by loading them into your computer's memory. It decides when a program is
          run by the central processing unit, and whether that program can access
          the computer's input and output devices. And when you think your computer
          is running many programs at once, in reality, it's the operating system
          that's quickly switching between programs sharing that CPU for fractions
          of a second.
      15:
        image: notes/csd_concept_hardware_software_15.png
        text: Inside every computer is an operating system managing software that
          controls the computer's hardware.
      16:
        image: notes/csd_concept_hardware_software_16.png
        text: The software is a series of commands made of simple binary code, and
          that binary code is just electrical signals flowing through billions of
          tiny circuits.
      17:
        image: notes/csd_concept_hardware_software_17.png
        text: Computers have the potential to do all kinds of amazing things. But
          the only thing that makes the computer smart, or useful, is you. When you
          learn to code you get to define the problem you want to solve, and write
          the software that turns those ideas into reality.
