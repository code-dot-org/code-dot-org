---
zh-CN:
  data:
    authored_hints:
      2-3 Artist 1 new:
        2-3_Artist_1_new_a: 如果使用模块让我 '前进 100 像素'，我会自动画一条线。
        2-3_Artist_1_new_b: 怎么才能转弯呢？使用 '向右转 90 度' 模块。
      2-3 Artist 11:
        2-3_Artist_11_a: '遇到角度的问题了？在转 8 次后，应该转了 360 度。360除以8是多少呢？ '
      2-3 Artist 12:
        2-3_Artist_12_a: 一个圆有360度，所以如果小艺术家在进行循环时每次转1度，为了画这个圆就需要运行循环360次 。
      2-3 Artist 2 new:
        2-3_Artist_2_new_a: 看起来似乎这位小艺术家没有面向正确的方向。能想出办法让他在画线前先转向吗？
      2-3 Artist 3new:
        2-3_Artist_3new_a: 100-70 是什么？从故事的问题来看，这就是帽子所需的高度！
        2-3_Artist_3new_b: 看起来似乎这位小艺术家没有面向正确的方向。能想出办法让他在画线前先转向吗？
      2-3 Artist 4:
        2-3_Artist_4_a: 要想完成这栋房子，唯一需要做的就是画个正方形。
      2-3 Artist 6:
        2-3_Artist_6_a: '为了制造那些小的角度，需要每次比上个正方形转更 _多_ 的角度。   '
        2-3_Artist_6_b: 既然已经面向右边了。那么先往前走，再往左转来画三角形是最容易的。
        2-3_Artist_6_c: 三角形的每一条边都跟正方形一样长...100像素！
      2-3 Artist 7:
        2-3_Artist_7_a: 解决这个难题最简单的方法，是画完第一个正方形后，让小艺术家朝向下方，再开始画第二个正方形。
      2-3 Artist 8:
        2-3_Artist_8_a: 如果把 200 分成两份，每个方块需要多少像素宽？
      2-3 Artist 9 NEW:
        2-3_Artist_9_a: 这个菱形真的和边上的正方形一样
      2-3 Artist Debugging 10:
        2-3_Artist_Debugging_10_a: 记住，要让控制面板 _宽_ 10个像素......所以要在更改的数量上 **加** 10 。
        2-3_Artist_Debugging_10_b: |-
          **反复试错是很正常的！**

          通过一次改变一个数字开始。

          那些数字是干什么用的？

          如果彻底弄乱了，只需单击 "重新开始"，代码就会重置。
      2-3 Artist Debugging 2:
        2-3_Artist_Debugging_2_a: 提示︰ 每根胡须有 75 个像素长。
      2-3 Artist Debugging 3:
        2-3_Artist_Debugging_3_a: 其中的一个转向角度太小，只有15度。
        2-3_Artist_Debugging_3_b: 如果程序运行得太快，看不清楚发生了什么，试着用滑块让它慢下来。
      2-3 Artist Debugging 7:
        2-3_Artist_Debugging_7_a: 如果让小艺术家在绘制第一条线后向后移动或跳，会发生什么？
      2-3 Artist Debugging 8:
        2-3_Artist_Debugging_8_a: |-
          形状重复了多少次？

          这个形状 _应该_ 重复多少次？

          在程序的哪里更改？
      2-3 Artist Debugging 9:
        2-3_Artist_Debugging_9_a: 小艺术家在开始绘图之前还要再向左边旋转60度！
        2-3_Artist_Debugging_9_b: 不需要再添加别的模块来转整圈，只要在已有的 “向左转” 模块上增加 60 度就可以了！
      2-3 Artist Functions 1:
        2-3_Artist_Functions_1_a: 这些方块的每个边都有100个像素，这意味着你将不得不在绘制你的第二个正方形前向前移动175个像素。
        2-3_Artist_Functions_1_b: 制作你的眼镜时绘制重叠的线条是可以的。
      2-3 Artist Functions 11:
        2-3_Artist_Functions_11_a: 不仅需要改变函数里的数字和长度，还要改变每条边之间转的角度。
      2-3 Artist Functions 12:
        2-3_Artist_Functions_12_a: 运行一次试试，看看需要加点什么。
      2-3 Artist Functions 2:
        2-3_Artist_Functions_2_a: |-
          你的程序应该：

          -   使用函数
          -   向前移动 100+75像素
          -   使用函数
      2-3 Artist Functions 3:
        2-3_Artist_Functions_3_a: "-   -   115 + 45 = 160 \\* \\*"
      2-3 Artist Functions 4:
        2-3_Artist_Functions_4_a: 艺术家需要在每个方块之间旋转 120 度来完成这个设计。
      2-3 Artist Loops New 11:
        2-3_Artist_Loops_New_11_a: |-
          记住上一关的代码是：

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">8</title>
                  <statement name="DO">
                    <block type="draw_colour" inline="true">
                      <value name="COLOUR">
                        <block type="colour_random"/>
                      </value>
                      <next>
                        <block type="draw_turn_by_constant_dropdown">
                          <title name="DIR">turnRight</title>
                          <title name="VALUE" config="45,60,90,120,180">45</title>
                          <next>
                            <block type="draw_move_by_constant">
                              <title name="DIR">moveForward</title>
                              <title name="VALUE">50</title>
                              <next>
                                <block type="draw_turn_by_constant_dropdown">
                                  <title name="DIR">turnLeft</title>
                                  <title name="VALUE" config="45,60,90,120,180">90</title>
                                  <next>
                                    <block type="draw_move_by_constant">
                                      <title name="DIR">moveForward</title>
                                      <title name="VALUE">50</title>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </next>
            </block>
          </xml>
        2-3_Artist_Loops_New_11_b: 新的转向代码应该在循环的**最后**。
      2-3 Artist Loops New 12:
        2-3_Artist Loops_New_12_a: 在开始画菱形之前，小艺术家需要左转 60 度走上正确的路径。
        2-3_Artist Loops_New_12_b: 小艺术家向前走100像素之后，他将需要向右转120度来画出锐角。
        2-3_Artist Loops_New_12_c: 小艺术家只要向右转60度就能画出一个钝角。
      2-3 Artist Loops New 13:
        2-3_Artist_Loops_New_13_a: |-
          在每个菱形结束时，小艺术家已经朝向右边开始了下一步。

          这样就不用在开始前，再加一个`向左转`模块。
        2-3_Artist_Loops_New_13_b: "画每个菱形的时候，小艺术家需要：   \n\n-   移动\n-   向右转120度\n-
          \  移动\n-   向右转60度  \n\n然后重复上面的动作！"
      2-3 Artist Loops New 9:
        2-3_Artist_Loops_New_9_a: 小艺术家在开始画画之前，需要向右转45度。
        2-3_Artist_Loops_New_9_b: 这个 V 实际上是半个正方形。什么样的代码能画出半个正方形呢？
      2-3 Artist Nested Loops 1:
        2-3_Artist_Nested_Loops_1_a: 记得把所有灰色的模块都放到你的循环里。
      2-3 Artist Nested Loops 3:
        2-3_Artist_Nested_Loops_3_a: "需要知道角度吗？ \n**360/12 = 30**"
        2-3_Artist_Nested_Loops_3_b: 记得把所有灰色的代码和你的转向模块都放到一个循环里。
      2-3 Artist Nested Loops 4:
        2-3_Artist_Nested_Loops_3_a: "需要知道角度吗？ \n**360/12 = 30**"
      2-3 Artist Nested Loops 5:
        2-3_Artist_Nested_Loops_5_a: |-
          试着用“向前跳”模块来从一个正方形的顶部到下一个正方形开始的地方。

          如果你的正方形有20像素高，且它们相隔20像素，你需要跳多远？
      2-3 Artist Nested Loops 7:
        2-3_Artist_Nested_Loops_7_a: |-
          每次循环时应该转多少度？

          306/10是多少？
      2-3 Artist Nested Loops 9:
        2-3_Artist_Nested_Loops_9_a: |-
          需要帮忙找到正确的角度吗？

          **360 / 12 = 30**
      2-3 Bee Conditionals 14:
        2-3_Bee_Conditionals_14_a: 很难琢磨出放什么模块吗？试着在红色花朵上重复紫色花朵的动作！
        2-3_Bee_Conditionals_14_b: 如果红色的花是紫色，你能想出如何再加一个 `重复` 循环来减少代码吗？
        2-3_Bee_Conditionals_14_c: "试着把它分成两个独立的块：\n\n![](https://images.code.org/895a52f3febff9edb83979f7861cf67a-image-1469640892331.png)\n\n1.
          \ 收集花蜜 3 次\n    -   向前移动 5 次\n    -   检查是否有花蜜。如果有，就收集。\n    -   向左转\n\n2.
          \ 酿蜂蜜 \n    -   向前移动 1 次\n    -   酿两个蜂蜜"
      2-3 Bee Conditionals 15:
        2-3_Bee_Conditionals_15_a: 记住：紫色的花只有0个或1个花蜜，而且每次运行程序时都会发生变化。
      2-3 Bee Conditionals 3:
        2-3_Bee_Conditionals_3_a: 如果用循环的话，代码会非常短。一个用来循环向前移动，一个循环用来收集花蜜，还有一个来酿造蜂蜜。
      2-3 Bee Conditionals 6:
        2-3_Bee_Conditionals_6_a: 记住：紫色的花里的花蜜数量是0或者1，会在每次运行程序时变化。
      2-3 Bee Debugging 1:
        2-3_Bee_Debugging_1_a: 当找到并修复了错误的模块，是否发现了可以用`重复`循环来简化的规律了吗？
      2-3 Bee Debugging 2:
        2-3_Bee_Debugging_2_a: 当找到并修复了错误的模块，是否发现了可以用`重复`循环来简化的规律了吗？
      2-3 Bee Debugging 4:
        2-3_Bee_Debugging_4_a: 蜜蜂是不是做了什么没有道理的事情？更改那个模块后，会发生什么？
      2-3 Bee Functions 4:
        2-3_Bee_Functions_4_a: 不一定要在循环中使用函数。试试用函数移动，然后使用该函数再次移动。
      2-3 Bee Functions 6:
        2-3_Bee_Functions_6_a: 不一定要在循环中使用函数。试试用函数移动，然后使用该函数再次移动。
      2-3 Bee Functions 8:
        2-3_Bee_Functions_8_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！\n\n
          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
      2-3 Bee Functions 9:
        2-3_Bee_Functions_8_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        2-3_Bee_Functions_8_b: |-
          别忘了把你的代码创建在绿色的函数模块中。

           ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
      2-3 Bee Loops 2:
        2-3_Bee_Loops_2_a: 在循环里应该有四个模块。
      2-3 Bee Loops 3:
        2-3_Bee_Loops_3_a: 在循环里应该有六个模块。
      2-3 Bee Loops 3B:
        2-3_Bee_Loops_3B_a: 需要两个连在一起的`重复`循环。
      2-3 Bee Loops 4:
        2-3_Bee_Loops_4_a: 在循环里应该有五个模块。
      2-3 Bee Loops 4A:
        2-3_Bee_Loops_4A_a: 第一个动作要是转向，而不是移动。
        2-3_Bee_Loops_4A_b: 最后一段程序可以写在循环外的结尾处。
        2-3_Bee_Loops_4A_c: 如果找不到循环，试着先用长的代码把它编出来，最后看能不能合并成一个`重复`循环。
      2-3 Bee Loops 5:
        2-3_Bee_Loops_5_a: 如果不能马上发现该放进 `重复` 的模块，可以先编出每次移动之后，再寻找规律。
      2-3 Bee Loops 6:
        2-3_Bee_Loops_6_a: 如果不知道应该把什么放入`重复`循环，尝试一个接一个地拖出模块，看看能不能找到规律。
        2-3_Bee_Loops_6_b: 当完成时，在`重复`循环中应有6个模块。
      2-3 Bee Loops 7:
        2-3_Bee_Loops_7_a: 第一个动作要是转向，而不是移动。
        2-3_Bee_Loops_7_b: '如果不能想出这个循环，试着先用长的方法把它编出来，然后寻找规律。  '
      2-3 Maze 1:
        2-3_Maze_1_a: 要使用`向前移动`模块，将它从工具栏拖进工作区并将其连接到`当运行时`模块。
      2-3 Maze 16:
        2-3_Maze_16_a: 如果很难找到规律，尝试全写出来，然后看看什么地方重复了好几遍，并把它们放进循环。
        2-3_Maze_16_b: |-
          要在`重复`循环内放置多个模块，只要将一个循环拖进工作区，然后把程序开始的所有模块拖到里面。

          再把它接回`当运行时`模块就行了！
      2-3 Maze 6:
        2-3_Maze_6_a: 有两种方法来解决这个难题 ！
      2-3 Maze Loops 17:
        2-3_Maze_Loops_17_a: 如果很难找到规律，尝试全写出来，然后看看什么地方重复了好几遍，并把它们放进循环。
        2-3_Maze_Loops_17_b: 初始的代码被删除了？点击`重新开始`找回来！
      2-3 Maze Loops 18:
        2-3_Maze_Loops_18_a: 如果很难找到规律，尝试全写出来，然后看看什么地方重复了好几遍，并把它们放进循环。
      2-3 Maze Loops 19:
        2-3_Maze_Loops_19_a: 如果被难住了，试着先不用循环写下代码，再寻找规律。
        2-3_Maze_Loops_19_b: 将一个循环放入另一个循环中，这样可以帮助减少使用的模块数量。
      2-3 Maze Loops 20:
        2-3_Maze_Loops_20_a: 寻找楼梯的规律，找到可以用循环的地方。
      2-3 Maze Loops 21:
        2-3_Maze_Loops_21_a: 如果找不到楼梯的规律，试试用手指挡上堵住的路。
      4-5 Artist 1:
        4-5_Artist_1_a: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      4-5 Artist 11:
        4-5_Artist_11_a: 在循环里，确保小艺术家在画了每条线以后，向后向上跳。
      4-5 Artist 3:
        4-5_Artist_3_a: |-
          如果花床的周长是 600 像素，并且有两条边是 200 像素长，那么计算两条短边和的方法如下：

          **600 - 200 - 200 = 200**

          这表示两条短边的和是200像素。

          **200除以2是多少？**
        4-5_Artist_3_b: 如果不能很快找到哪里需要`重复`循环，试着把代码都写出来，并寻找其中的规律。
      4-5 Artist 4:
        4-5_Artist_4_a: "一个圆有360度！ \n\n你需要重复多少次（每次转1度），才能画好整个圆？"
      4-5 Artist 5:
        4-5_Artist_5_a: |-
          反复试错是一个非常棒的方法，但是也能通过将 90 度分成 3 份来解决这个问题。

          **90 / 3 = \_\_\_\_\_**
      4-5 Artist 7:
        4-5_Artist_7_a: '哪个角度是最小的？小艺术家站的角度是多少？ '
      4-5 Artist 8:
        4-5_Artist_8_a: "每条长边是 240 像素。这表示两条短边的和必须为：\n\n**800 - 240 - 240 = 320**\n\n**320/2**
          是多少? "
        4-5_Artist_8_b: "这个图可以用两种方法来完成！  \n\n-   画两个 **120** 长和 **160** 高的长方形，有一条边重叠。\n\n-
          \  画一个 **240** 长和 **160** 高的长方形，然后在正中间画一条线。"
      4-5 Artist 9:
        4-5_Artist_9_a: '当一个三角形是等边三角形时，三条边的长和三个角的角度都是一样的。  '
        4-5_Artist_9_b: 需要画三个同样大小的三角形。别忘了画完每个后跳到新的位置。
      4-5 Artist Assessment 1:
        4-5_Artist_Assessment_1_a: 只需要画外面的三角形就能完成这一关。
      4-5 Artist Patterns 11:
        4-5_Artist_Patterns_11_a: 如果一个圆有360度，每次循环转3度，那么画完这半个圆需要循环多少次呢？
      4-5 Artist Patterns 2:
        4-5_Artist_Patterns_2_a: 注意，因为这个正方形是20像素长，你需要在开始下一个正方形之前跳20像素。
      4-5 Artist Patterns 3:
        4-5_Artist_Patterns_3_a: 每次你试验新的时候，要小心的拖拽出整块代码。
        4-5_Artist_Patterns_3_b: 如果你的代码变得太乱了，随时可以点击“重新开始”来从头再来一遍。
      4-5 Artist Patterns 5:
        4-5_Artist_Patterns_5_a: 现在，当小艺术家完成每个菱形后，他面对的方向和下一个要画的方向是相反的。
      4-5 Bee Conditionals 4:
        remember_quantum: |-
          **记住：**这一关在每次运行的时候都会变化。

          你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。
      4-5 Bee Conditionals 5:
        remember_quantum: |-
          **记住：**这一关在每次运行的时候都会变化。

          你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。
      4-5 Bee Conditionals 6:
        4-5 Bee Conditionals 6_a: 你能只用工作区的模块来解决这个难题。它们应该是什么顺序呢？
        4-5 Bee Conditionals 6_b: 确保检查了是否花朵有多于**0**份花蜜，且检查至少**3**次来通过这一关。
      4-5 Bee Debugging 1:
        4-5_Bee_Debugging_1_a: 如果不知道哪里不对，试着运行一下看看哪里错了。
      4-5 Bee Nested Loops Rows:
        4-5_Bee_Nested_Loops_Rows_a: 试着将这一关当成一个长方形，蜜蜂需要向前移动，向左转好几次来走完这条路。
      4-5 Maze 10:
        4-5_Maze_10_a: |-
          如果不能马上看出如何用循环来通过这一关，试着先用长一点的方法把代码写出来，然后再寻找规律。

          应该将`重复`放在什么地方来缩短代码？
      4-5 Maze 4:
        4-5_Maze_4_a: 如果难以找到在哪里放循环，试着先将代码写出来，然后再找规律。
      4-5 Maze 5:
        4-5_Maze_5_a: 试着在每次需要`向前移动`”两次的时候，用一个`重复`循环来替代。
        4-5_Maze_5_b: 可以在一关中用多个`重复`循环。
      4-5 Maze 6:
        4-5_Maze_6_a: |-
          试着先用手指画画路径。\
          这是能找到的最短路径么？
      4-5 Maze 7:
        4-5_Maze_7_a: |-
          **想让代码尽可能的少吗？**

          在模块里寻找规律。找到重复的代码了么？试着用循环来代替它！
      4-5 Nested Loops 12:
        4-5_Nested_Loops_12_a: "**360 / 36 = ?**"
      4-5 Nested Loops 6:
        4-5_Nested_Loops_6_a: |-
          别忘了在里面的循环里转向。

          需要在 360 度里循环出 6 个三角形。

          **360 / 6 = ?**
      4-5 Nested Loops 7:
        4-5_Nested_Loops_7_a: |-
          这个图案会在360度里循环10次。

          **360 / 10 = ?**
      4-5 Nested Loops 8:
        4-5_Nested_Loops_8_a: |-
          在360度里循环这个图形6次。

          **360 / 6 = ?**
      4-5 While Loops 8:
        4-5_While_Loops_8_a: 每个条目都需要自己的`当`循环。
      Course 4 Artist 11:
        Course_4_Artist_11_a: '这半个六边形有一条**30像素长**的边，并且需要向右转**60度**。  '
        Course_4_Artist_11_b: '这2/3个三角形有一条**80像素长**的边，并且需要向右转**120度**。 '
      Course 4 Artist 12:
        Course_4_Artist_12_a: '每个重复的形状都是 **半个六边形** 的组合，跟着 **2/3个三角形**。 '
        Course_4_Artist_12_b: '这个单元的形状几乎和上一关是一样的，只是半个六边形有点大。 '
        Course_4_Artist_12_c: |-
          1.  开始的三条线时 60 像素长，需要转 60 度。

          2.  接下来的两条线是 80 像素长，需要转 120 度
        Course_4_Artist_12_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist 6:
        Course_4_Artist_6_a: 旋转360度会有3个三角形... 360除以3等于多少呢？
      Course 4 Artist 8a:
        Course_4_Artist_8a: |-
          需要帮忙弄清应该转多少度吗？

          转360度有3个三角形。

          360除以3是多少？
      Course 4 Artist 9:
        Course_4_Artist_9_a: |-
          想知道转角是多大吗？

          360除以10等于多少呢？
      Course 4 Artist Binary Free Play 2b:
        Course_4_Artist_Binary_Free_Play_2b_a: 这个程序使用了两个`计数循环`。其中一个从 1 数到 8，另外一个从
          8数到 1。
        Course_4_Artist_Binary_Free_Play_2b_b: 每个`计数循环`都重复 3 次。第一个画最左边的 1，第二个画中间的
          0，第三个画右边的 1。
        Course_4_Artist_Binary_Free_Play_2b_c: 每次重复时，需要 `counter`（计数器）个 1 ，以及 `16-(2
          x counter)`个 0。
        Course_4_Artist_Binary_Free_Play_2b_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist For Loops 11:
        Course_4_Artist_For_Loops_11_a: "每个图型之后转角角度都会改变！ \n\n通过数学模块输入 360 度除以图形的边数，来得到正确的转角角度。 "
      Course 4 Artist For Loops 11a:
        Course_4_Artist_For_Loops_11a_a: '360度除以图形的边数得出的结果，即是需要的转角角度。 '
        Course_4_Artist_For_Loops_11a_b: '每一次需要移动的距离相当于目前边数的10倍。 '
      Course 4 Artist For Loops 3:
        Course_4_Artist_For_Loops_3_a: 若通过`计数循环`来实现移动，需确保使用`counter`（计数器）来作为移动距离。
      Course 4 Artist For Loops 4:
        Course_4_Artist_For_Loops_4_a: "**你需要的数字最小是多少？ \n最大是多少？ \n那每次增加多少？**\n\n这些都是你在使用计数循环之前需要思考的问题。"
      Course 4 Artist For Loops Challenge:
        Course_4_Artist_For_Loops_Challenge_a: 最大的形状有 19 条边，最小的只有两条。
        Course_4_Artist_For_Loops_Challenge_b: "`计数循环` 每次增加 2。"
      Course 4 Artist For Loops inspire:
        Course_4_Artist_For_Loops_inspire_a: 这个代码的基础跟之前的挑战关卡的解决方案大体相同，只有些小变化。
        Course_4_Artist_For_Loops_inspire_b: 试试`计数循环`，从3到10，增量为1。
        Course_4_Artist_For_Loops_inspire_c: 这个`计数循环`里有两个重复循环，但是第二个循环的方向相反。
        Course_4_Artist_For_Loops_inspire_d: "**解决方案：**  \n\n<xml>\n  <block type=\"when_run\"
          deletable=\"false\" movable=\"false\">\n    <next>\n      <block type=\"controls_for_counter\"
          inline=\"true\" movable=\"false\">\n      <mutation counter=\"counter\"></mutation>\n
          \       <value name=\"FROM\">\n          <block type=\"math_number\">\n
          \           <title name=\"NUM\">3</title>\n          </block>\n        </value>\n
          \       <value name=\"TO\">\n          <block type=\"math_number\">\n            <title
          name=\"NUM\">10</title>\n          </block>\n        </value>\n        <value
          name=\"BY\">\n          <block type=\"math_number\">\n            <title
          name=\"NUM\">1</title>\n          </block>\n        </value>\n        <statement
          name=\"DO\">\n          <block type=\"controls_repeat_ext\" inline=\"true\">\n
          \           <value name=\"TIMES\">\n              <block type=\"math_arithmetic\"
          inline=\"true\">\n                <title name=\"OP\">MINUS</title>\n                <value
          name=\"A\">\n                  <block type=\"variables_get\">\n                    <title
          name=\"VAR\">counter</title>\n                  </block>\n                </value>\n
          \               <value name=\"B\">\n                  <block type=\"math_number\">\n
          \                   <title name=\"NUM\">1</title>\n                  </block>\n
          \               </value>\n              </block>\n            </value>\n
          \           <statement name=\"DO\">\n              <block type=\"draw_move\"
          inline=\"true\">\n                <title name=\"DIR\">moveForward</title>\n
          \               <value name=\"VALUE\">\n                  <block type=\"math_number\">\n
          \                   <title name=\"NUM\">40</title>\n                  </block>\n
          \               </value>\n                <next>\n                  <block
          type=\"draw_turn\" inline=\"true\">\n                    <title name=\"DIR\">turnRight</title>\n
          \                   <value name=\"VALUE\">\n                      <block
          type=\"math_arithmetic\" inline=\"true\">\n                        <title
          name=\"OP\">DIVIDE</title>\n                        <value name=\"A\">\n
          \                         <block type=\"math_number\">\n                            <title
          name=\"NUM\">360</title>\n                          </block>\n                        </value>\n
          \                       <value name=\"B\">\n                          <block
          type=\"variables_get\">\n                            <title name=\"VAR\">counter</title>\n
          \                         </block>\n                        </value>\n                      </block>\n
          \                   </value>\n                  </block>\n                </next>\n
          \             </block>\n            </statement>\n            <next>\n              <block
          type=\"controls_repeat_ext\" inline=\"true\">\n                <value name=\"TIMES\">\n
          \                 <block type=\"math_arithmetic\" inline=\"true\">\n                    <title
          name=\"OP\">MINUS</title>\n                    <value name=\"A\">\n                      <block
          type=\"variables_get\">\n                        <title name=\"VAR\">counter</title>\n
          \                     </block>\n                    </value>\n                    <value
          name=\"B\">\n                      <block type=\"math_number\">\n                        <title
          name=\"NUM\">1</title>\n                      </block>\n                    </value>\n
          \                 </block>\n                </value>\n                <statement
          name=\"DO\">\n                  <block type=\"draw_move\" inline=\"true\">\n
          \                   <title name=\"DIR\">moveForward</title>\n                    <value
          name=\"VALUE\">\n                      <block type=\"math_number\">\n                        <title
          name=\"NUM\">40</title>\n                      </block>\n                    </value>\n
          \                   <next>\n                      <block type=\"draw_turn\"
          inline=\"true\">\n                        <title name=\"DIR\">turnLeft</title>\n
          \                       <value name=\"VALUE\">\n                          <block
          type=\"math_arithmetic\" inline=\"true\">\n                            <title
          name=\"OP\">DIVIDE</title>\n                            <value name=\"A\">\n
          \                             <block type=\"math_number\">\n                                <title
          name=\"NUM\">360</title>\n                              </block>\n                            </value>\n
          \                           <value name=\"B\">\n                              <block
          type=\"variables_get\">\n                                <title name=\"VAR\">counter</title>\n
          \                             </block>\n                            </value>\n
          \                         </block>\n                        </value>\n                      </block>\n
          \                   </next>\n                  </block>\n                </statement>\n
          \             </block>\n            </next>\n          </block>\n        </statement>\n
          \     </block>\n    </next>\n  </block>\n</xml>"
      Course 4 Artist Functions Inspiration:
        Course_4_Artist_Functions_Inspiration_a: 继续上一个关卡的代码，在重复循环里新增一个`向右转` 3 度的指令。
        Course_4_Artist_Functions_Inspiration_b: 试试在`重复`循环外，`计数循环`内将转角度数大于 90 度。
        Course_4_Artist_Functions_Inspiration_c: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist Functions challenge:
        Course_4_Artist_Functions_challenge_a: 理解如何使用函数的其中一点是弄清楚哪些函数是自己需要的，哪些是不需要的。
        Course_4_Artist_Functions_challenge_b: 使用`计数循环`，用其计数器作为内部嵌套的`重复`循环的变量。
        Course_4_Artist_Functions_challenge_c: 每次迭代，要画一个方形，然后向前跳转。
        Course_4_Artist_Functions_challenge_d: 要在`重复`循环外，但仍在`计数循环`内左转90度。
      Course 4 Artist Inspire:
        Course_4_Artist_Inspire_a: 当完成一个正方形后，在转向和绘制另一个正方形之前，尝试先向前跳半个边长的距离。
        Course_4_Artist_Inspire_b: 绘制方形后跳转，以上动作重复循环四次(每次循环中间需左转)，可以得到一个完整的类似风车图案。
        Course_4_Artist_Inspire_c: 每个风车也重复四次，每次右转度数为:**360度/边数**。
        Course_4_Artist_Inspire_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 Artist Vars 13:
        Course_4_Artist_Vars_13_a: 你需要两个重复循环（一个循环嵌套在另外一个循环里），两个循环重复的次数均为“边数”。
        Course_4_Artist_Vars_13_b: "内部嵌套重复循环绘制一个八边型（左转）。 \n\n然后，你需要在外部循环前行并右转。"
        Course_4_Artist_Vars_13_c: 如需在边数改变的同时保持图形的大小，可以使用数学模块将长度（像素为单位）除以边数。
      Course 4 Artist Vars 6:
        Course_4_Artist_Vars_6_a: 若要画一个正多边形，需每次转动 **360/边数** 度。
      Course 4 Artist Vars 8:
        Course_4_Artist_Vars_8_a: 如果将起始长度除以边数，边长会随着边数的增加而缩短。
      Course 4 Bee Params 7:
        notice_pattern: '发现花蜜数量变化的规律了吗？ '
        count_with_for: 注意，花蜜每一步都在增加。需使用哪一个模块在增加计数的同时，实现重复循环呢？
      Course 4 Bee Params 8:
        Course_4_Bee_Params_8_a: 可以在每次循环时查询蜂蜜和花蜜数量。如果任意一个没有的话，它的数量则为 0 。
      Course 4 Play Lab Params 2:
        Course_4_Play_Lab_Params_2_a: 需要在跳转函数上点击“编辑”并进行更新，以使用 `height`（高度）参数。
      Course 4 Play Lab Vars 2:
        Course_4_Play_Lab_Vars_2_a: 请确保将 `dog_speed` 的数值设置为大于 `cat_speed` 的数值。
      Course 4 Play Labs For Loops 2:
        Course_4_Play_Labs_For_Loops_2_a: "`计数循环`每次需要增加多少才能跳过偶数呢？"
      Course 4 Playlab For Loops 4b:
        Course_4_Playlab_For_Loops_4b_a: 标志距离角色约 330 像素。
        Course_4_Playlab_For_Loops_4b_b: 在不同起点和终点的情况下，如何能让每个角色经同样次数移动后，都到达 330 像素呢？
        Course_4_Playlab_For_Loops_4b_c: 记住，只要角色到达标志所用的次数是相同的，那角色最后一步超过标志多远都不重要。
      Course 4 Playlab For Loops 5b:
        Course_4_Playlab_For_Loops_5b_a: 角色距离中心约 175 像素。
        Course_4_Playlab_For_Loops_5b_b: 记住，因为计数器不断变大，角色的下一步会比上一步长。
      Course 4 SCF 1:
        Course_4_SCF_1_a: 每个六边形的边长都是40像素。
        Course_4_SCF_1_b: 每个六边形之间需平行跳转120像素。
        Course_4_SCF_1_c: "在你绘制第二排的六边形之前，你需要右转60度，然后向前跳转40像素。 \n\n一旦你到达正确的垂直位置，你需要再次转动小艺术家，向后跳转320像素。"
        Course_4_SCF_1_d: "在你绘制第三排的六边形之前，你需要右转60度，然后向前跳转40像素。 \n\n一旦你到达正确的垂直位置，你需要再次转动小艺术家，向后跳转440像素（比“向下/向前”函数多120像素）。 "
        Course_4_SCF_1_e: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCF 1a:
        Course_4_SCF_1a_a: 记得从第16阶段开始使用过的函数。
        Course_4_SCF_1a_b: "看看这条主路径：  \n\n![](https://images.code.org/1c3feab70af706409b3a05af4dc83c2e-image-1469726967858.png)"
        Course_4_SCF_1a_c: 您应该考虑使用计数循环。不是循环这些步骤，而是循环不同参数来调用函数。
        Course_4_SCF_1a_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCF 1b:
        Course_4_SCF_1b_a: |-
          注意，所有蜂蜜位置的形状都是相似的。

          是个使用函数的好地方！
        Course_4_SCF_1b_b: "看看蜜蜂如何旅行的想法：  \n\n![](https://images.code.org/996ab4a2de6048cbb99b84c56cc4ad61-image-1469726859769.png)"
        Course_4_SCF_1b_c: 你应该考虑使用计数循环来计算蜜蜂旅行的距离。
        Course_4_SCF_1b_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCF 2:
        Course_4_SCF_2_a: 每个八边形的边长都是40像素。
        Course_4_SCF_2_b: 每个八边形之间需水平跳转136像素
        Course_4_SCF_2_c: "当你画第二行八边形的之前，你需要向右转45度并且向前跳转96像素。 \n\n一旦你达到正确的垂直位置，你需要再次向后转小艺术家并且跳408像素。 "
        Course_4_SCF_2_d: "请注意，由于偶数行中的八角形较少，因此不必再跳到后面，就可以到达奇数行的起始位置。   \n\n这意味着您可以对所有行使用相同的函数。"
        Course_4_SCF_2_e: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCF 3:
        Course_4_SCF_3_a: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
        Course_4_SCF_3_b: '这是一系列的八角形, 两侧是`counter`（计数器）像素长。 '
        Course_4_SCF_3_c: '每个八角形是从里面的一个`计数循环`, 从200到2，每次递减 2。 '
        Course_4_SCF_3_d: '在每次迭代结束时, 不要忘记转22.5 度的角度。 '
        Course_4_SCF_3_e: 每个八角形的颜色和钢笔的宽度都由 "计数器" 变量控制。
        Course_4_SCF_3_f: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1:
        Course_4_SCFL_1_a: |-
          看看这个移动选项:

          \!\[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        Course_4_SCFL_1_b: '试着用两个 "计数" 循环: 一个用于攀爬和抓取花蜜, 另一种用于攀爬和制作蜂蜜。'
        Course_4_SCFL_1_c: |-
          注意，一个`计数循环`里需要几个普通的循环来重复`counter`（计数器）次数来增加楼梯图案。

          另一个`计数循环`循环只需要一个普通的循环来酿造`counter`（计数器）个蜂蜜。
        Course_4_SCFL_1_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1a:
        Course_4_SCFL_1a_a: 你需要用更少的模块来走完所有路程。
        Course_4_SCFL_1a_b: |-
          看看这个移动选项:

          \!\[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        Course_4_SCFL_1a_c: "`计数循环` 将帮助您执行相同的模式，但步骤数不断变化。请注意，所需步骤的数量从7开始，每次减1，直到 5。"
        Course_4_SCFL_1a_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 1b:
        Course_4_SCFL_1b_a: 试试使用“计数循环”
        Course_4_SCFL_1b_b: |-
          看看这个移动选项:

          \!\[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        Course_4_SCFL_1b_c: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 2:
        Course_4_SCFL_2_a: |-
          看看这个移动选项:

          \!\[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        Course_4_SCFL_2_b: 请注意，在`计数循环` 的每次迭代中，在你停止与目标互动后，都有3个点。
        Course_4_SCFL_2_c: 在`计数循环`的每次迭代中，每个对象的数字都与 `counter`（计数器）变量有某种关联。
        Course_4_SCFL_2_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 3:
        Course_4_SCFL_3_a: "·笔宽度·是1。第一个正方形有50像素边, 每个正方形比前一个宽50像素。"
        Course_4_SCFL_3_b: 画笔上的不透明度始终是 `counter`/2 （计数器/2）。
        Course_4_SCFL_3_c: 在你画了每个正方形后, 别忘了向后跳, 转身, 再跳, 然后回头!
        Course_4_SCFL_3_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 4:
        Course_4_SCFL_4_a: 颜色的变化使用`用红色，绿色，蓝色设置颜色`模块。 红色一直设置为`counter`（计数器）的值。绿色一直为`255-counter`，蓝色设置为常量255。
        Course_4_SCFL_4_b: 每一个形状是一个正方形，边长是`counter`（计数器）像素长，从5px 开始，每次增加5像素，一直到200像素。
        Course_4_SCFL_4_c: 小艺术家在每个正方形之间旋转15度。
        Course_4_SCFL_4_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 6:
        Course_4_SCFL_6_a: 使用`用红色，绿色和蓝色设置颜色`的模块。红色设为常量255，绿色一直是`counter`（计数器）的值，蓝色一直是`255-counter`。
        Course_4_SCFL_6_b: 这个代码比你想象的要简单得多。 只需在 `计数循环`中设置颜色，向前移动，然后转向。
        Course_4_SCFL_6_c: "`计数循环` 从5增加到250，每次增加2。 "
        Course_4_SCFL_6_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCFL 7:
        Course_4_SCFL_7_a: 颜色的变化使用`用红色，绿色，蓝色设置颜色`模块。 红色设置为`counter`（计数器）的值。绿色为`255-counter`，蓝色设置为常量255。
        Course_4_SCFL_7_b: '此绘图使用了两个类似的`计数循环`。 一个以2为增量从5到200，另一个以2为减量从200到5。 '
        Course_4_SCFL_7_c: 在每个`计数循环`中，在转向`360 / counter`之前，向前移动5像素。别忘了在你做之前，设置画笔宽度为`counter`！
        Course_4_SCFL_7_d: 你需要在两个`计数循环`之间左转225度。
        Course_4_SCFL_7_e: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 1:
        Course_4_SCV_1_a: '变量非常有用，因为可以通过每次循环来增加它。 '
        Course_4_SCV_1_b: 这个难题有一个循环来创建多边形，一个循环来重复多边形`sides`（边）的次数，然后另一个循环把 5 加到`sides`（边）后再重新计算。
        Course_4_SCV_1_c: 使用`sides`和`length`的变量使代码更整洁，因为可以多次循环相同的代码，而不是为每组数字创建一个新的副本。
        Course_4_SCV_1_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 2:
        Course_4_SCV_2_a: |-
          完整的图像由 10 朵 "花" 组成：\
          ![](https://images.code.org/bac2a606dfa59c00409294499540267d-image-1469641972385.png)

          ...每个由 10 个十边形组成：\
          ![](https://images.code.org/1e15f278c9c1606f90a2490ec3a94eb4-image-1469642051512.png)
        Course_4_SCV_2_b: '此设计使用嵌套循环（有三层深）。所有循环运行`sides`（边数）次。 '
        Course_4_SCV_2_c: 艺术家在创建每个十边形时向左转，但在其他两个循环中向右转。
        Course_4_SCV_2_d: 为了防止10瓣"花"画在了同一个地方，确保在最外层的循环中，在转向`360/sides`度前，向前跳`length`/`sides`。
        Course_4_SCV_2_e: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 3:
        Course_4_SCV_3_a: '当精灵图碰到时，用数学模块来给`points` （分数）变量加上或减去分数。 '
        Course_4_SCV_3_b: 可以用这个参数来改变每次按下方向键时，精灵图移动的距离。
        Course_4_SCV_3_c: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 4:
        Course_4_SCV_4_a: 需要三个变量。 一个是花蜜的数量，一个是蜂蜜的数量，一个是蜜蜂每次迭代要移动的距离。
        Course_4_SCV_4_b: '在主循环里使用三个循环会非常提一听。 一个用于前进，一个用于收集花蜜，一个用于制作蜂蜜。 '
        Course_4_SCV_4_c: |-
          看看这个移动选项:

          \!\[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        Course_4_SCV_4_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 5:
        Course_4_SCV_5_a: |-
          看看这个移动选项:

          ![](https://images.code.org/7f6f09c55cf9552a91fc1d33f44a7315-image-1469641639330.png)
        Course_4_SCV_5_b: 每次循环后，会少 2 个花蜜，蜜蜂需要多制作一个蜂蜜。
        Course_4_SCV_5_c: 请注意，在外层循环开始的地方，蜜蜂需要尽可能多的移动，直到下一朵花里有花蜜。
        Course_4_SCV_5_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      Course 4 SCV 6:
        Course_4_SCV_6_a: |-
          看看单个完整的图像是什么样的

          ![](https://images.code.org/9e30d3a87186cefe730984feee195806-image-1469642178866.png)
        Course_4_SCV_6_b: 创建 8 个变量会很有用： red1，green1， blue1，red2，green2，blue2，length，和sides。（分别表示红色1，绿色1，蓝色1，红色2，绿色2，蓝色2，长度和边数）
        Course_4_SCV_6_c: 当锯齿是青色 (rgb = 0,175,200) 和紫色的 (rgb = 100，50，150) 时候，将每个形状的5边分成`length`/`sides`部分。
        Course_4_SCV_6_d: '先左转`360`/`sides`，再右转`360`/`sides`。 '
        Course_4_SCV_6_e: '程序的其余部分是非常标准的转动 360 的形状，但会有一半的图形是重叠的。因此，我们必须向右转`180`/`sides`，这标识通常需要转动两倍次数（`sides`\*`2`
          次重复）。 '
        Course_4_SCV_6_f: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      CourseD_Dance_Party_01:
        validation: |-
          **我如何通过此关？**

          -   确保屏幕上出现一个舞者。

          _此关在 4 个小节后结束。_
        challenges: |-
          **可选挑战**

          -   选择播放一首不同的歌曲。
          -   选择一个像驼鹿的不同项目！
          -   重命名您的舞者。
      CourseD_Dance_Party_02:
        validation: |-
          **我如何通过此关？**

          -   舞者需要在 4 个小节后变换到新动作。

          _此关在 8 个小节后结束。_
      CourseD_Dance_Party_03:
        validation: |-
          **如何通过此关？**

          -   6 个小节后，舞者需要跳与 4 个小节后不同的舞蹈。

          _此关在 12 个小节后结束。_
      CourseD_Dance_Party_04:
        validation: |-
          **如何通过此关？**

          -   需要在歌曲的第七个小节变换背景效果。

          _此关在 10 个小节后结束。_
        challenges: |-
          **可选挑战**

          通过连接<xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"小节"</title></block></xml>事件下的新模块，在歌曲的不同时间点变换背景效果。
      CourseD_Dance_Party_06:
        validation: |-
          **如何通过此关？**

          -   需要至少两个舞者。

          _此关在 6 个小节后结束。_
        challenges: |-
          **可选挑战**

          -   添加第三个舞者（或者更多数量！）
          -   让所有舞者在歌曲的不同时间点做不同的动作。
      CourseD_Dance_Party_08:
        validation: |-
          **如何通过此关？**

          -   两个舞者的大小不能为 100。

          _此关在 6 个小节后结束。_
        challenges: |-
          **可选挑战**

          -   通过更改其他属性（宽度、高度、旋转等）来尝试
      CourseD_Dance_Party_09:
        validation: |-
          **如何通过此关？**

          -   更改至少一个舞者的色彩。

          _此关在 8 个小节后结束。_
      CourseD_Dance_Party_10:
        validation: |-
          **如何通过此关？**

          -   必须更改两个或更多的舞者属性。

          _此关在 8 个小节后结束。_
      CourseD_Dance_Party_11:
        validation: |-
          **如何通过此关？**

          -   只需发挥想象力！

          _此关在 8 个小节后结束。_
      CourseD_Dance_Party_11_5:
        validation: |-
          **如何通过此关？**

          -   只需发挥想象力！

          _此关在 8 个小节后结束。_
      CourseD_Dance_Party_11b:
        validation: |-
          **如何通过此关？**

          -   使用`当按左方向键时`模块让机器人在按下时做一个舞蹈动作。

          _此关在 8 个小节后结束。_
      CourseE_HOC 2018 Level_10:
        voyage_aquatic_10a: 看到**海晶灯** ![](https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png)
          了吗？怎样可以用条件来使用它们，穿过海底遗迹？
      CourseE_HOC 2018 Level_7a:
        aquatic7: 可以用 如果路径 模块来正确的转弯。
      CourseE_HOC 2018 Level_9b:
        voyage_aquatic_9a: 看见红色和蓝色的珊瑚块了吗？将它们用作向右向左转的路标来通过礁石。
      Dance_2019_01:
        validation: |-
          **我如何通过此关？**

          -   确保屏幕上出现一个舞者。

          _此关在 4 个小节后结束。_
        challenges: |-
          **可选挑战**

          -   选择另一首歌曲播放。
          -   将舞者移到新位置。
          -   创建多个舞者。
      Dance_2019_02:
        validation: |-
          **如何通过此关？**

          -   舞者必须做出一个动作。
          -   必须按方向键。

          _此关在4个小节后结束。_
        challenges: |-
          **可选挑战**

          使用多个 <xml><block type="Dancelab_whenKey"><title name="KEY"></title></block></xml> 模块。
      Dance_2019_03:
        validation: |-
          **如何通过这关？**

          -   两个舞者都必须做出动作。
          -   必须按下方向键。

          _此关在 6 个小节后结束。_
        challenges: |-
          **可选挑战**

          -   让舞者响应左右方向键。
      Dance_2019_04:
        validation: |-
          **我如何通过此关？**

          -   舞者需要在 4 个小节后变换到新动作。

          _此关在 8 个小节后结束。_
      Dance_2019_05:
        validation: |-
          **如何通过此关？**

          -   6 个小节后，舞者需要跳与 4 个小节后不同的舞蹈。

          _此关在 12 个小节后结束。_
        challenges: |-
          **可选挑战**

          -   每当舞者换动作时，更换背景。
      Dance_2019_06:
        validation: |-
          **如何通过这一关？**

          -   创建一个领舞者和一组伴舞演员。

          _此关在 7 个小节后结束。_
        challenges: |-
          **可选挑战**

          -   创建多组伴舞演员。
      Dance_2019_07:
        validation: |-
          **如何通过这关？**

          -   音乐开始后，更改至少一个舞者的大小。

          _此关在 6 个小节后结束。_
        challenges: |-
          **可选挑战**

          \*通过更改其他属性（宽度、高度、旋转等）来尝试
      Dance_2019_08:
        validation: |-
          **如何通过此关？**

          -   更改至少一个舞者的色彩。

          _此关在 6 个小节后结束。_
        tint_hint: 是否注意到舞者没有完全变为选择的颜色？这是因为 **色彩** 会将选择的颜色与舞者本身的颜色混合在一起。
      Dance_2019_09:
        validation: |-
          **如何通过此关？**

          -   只需按“完成”按钮即可！
        repeat_every_ideas: |-
          **需要新点子吗？**

          -   反复更改舞者的大小可以使其成长。
          -   反复更改舞者的旋转角度可以使其旋转。

          _还可以使用负数来产生相反的效果！_
        next_previous: |-
          \*可选挑战\*\*

          -   还可以使用此新事件模块，将动作设置为`(随机)`、`(下一个)` 或`(上一个)`，这样就可以循环整个舞蹈动作列表。
              <xml><block type="Dancelab_changeMoveEachLR">
              <title name="GROUP">???</title>
              <title name="MOVE">"rand"</title>
              <title name="DIR">-1</title>
              </block></xml>
      Dance_Party_01:
        validation: |-
          **我如何通过此关？**

          -   确保屏幕上出现一个舞者。

          _此关在 4 个小节后结束。_
        challenges: |-
          **可选挑战**

          -   选择播放一首不同的歌曲。
          -   选择一个像驼鹿的不同项目！
          -   重命名您的舞者。
      Dance_Party_02:
        validation: |-
          **我如何通过此关？**

          -   舞者需要在 4 个小节后变换到新动作。

          _此关在 8 个小节后结束。_
      Dance_Party_03:
        validation: |-
          **如何通过此关？**

          -   6 个小节后，舞者需要跳与 4 个小节后不同的舞蹈。

          _此关在 12 个小节后结束。_
      Dance_Party_04:
        validation: |-
          **如何通过此关？**

          -   需要在歌曲的第七个小节变换背景效果。

          _此关在 10 个小节后结束。_
        challenges: |-
          **可选挑战**

          通过连接<xml><block type="Dancelab_atTimestamp"><title name="TIMESTAMP">???</title><title name="UNIT">"measures"</title></block></xml> 事件下的新模块，在歌曲的不同时间点变换背景效果。
      Dance_Party_05:
        validation: |-
          **如何通过这一关？**

          -   您的舞者需要在关卡结束之前至少循环 4 种不同的舞蹈动作。

          _此关在 12 个小节后结束。_
      Dance_Party_06:
        validation: |-
          **如何通过此关？**

          -   需要至少两个舞者。

          _此关在 6 个小节后结束。_
        challenges: |-
          **可选挑战**

          -   添加第三个舞者（或者更多数量！）
          -   让所有舞者在歌曲的不同时间点做不同的动作。
      Dance_Party_08:
        validation: |-
          **如何通过此关？**

          -   两个舞者的大小不能为 100。

          _此关在 6 个小节后结束。_
        challenges: |-
          **可选挑战**

          -   通过更改其他属性（宽度、高度、旋转等）来尝试
      Dance_Party_09:
        validation: |-
          **如何通过此关？**

          -   更改至少一个舞者的色彩。

          _此关在 8 个小节后结束。_
      Dance_Party_10:
        validation: |-
          **如何通过此关？**

          -   必须更改两个或更多的舞者属性。

          _此关在 8 个小节后结束。_
      Dance_Party_11:
        validation: |-
          **如何通过此关？**

          -   只需发挥想象力！

          _此关在 8 个小节后结束。_
      Dance_Party_11_5:
        validation: |-
          **如何通过此关？**

          -   只需发挥想象力！

          _此关在 8 个小节后结束。_
      Dance_Party_11b:
        validation: |-
          **如何通过此关？**

          -   使用`当按左方向键时`模块让机器人在按下时做一个舞蹈动作。

          _此关在 8 个小节后结束。_
      Dance_Party_extras_alternate_2019:
        alternate: 交替模块在“舞者”类别中。
      Function intro Ryan:
        Function_intro_Ryan_b: 如果您调用的函数正确, 这将是您要旅行的路径。
        Function_intro_Ryan_a: 您可以在程序中多次调用某一函数！尝试调用两次以解决该难题。
      Function intro Ryan_2019:
        Function_intro_Ryan_b: 如果您调用的函数正确, 这将是您要旅行的路径。
        Function_intro_Ryan_a: 您可以在程序中多次调用某一函数！尝试调用两次以解决该难题。
      HOC 2018 Level_10:
        voyage_aquatic_10a: 看到**海晶灯** ![](https://images.code.org/471b33234222ddffb463aeb65de6b371-image-1539183353423.net-resizeimage.png)
          了吗？怎样可以用条件来使用它们，穿过海底遗迹？
      HOC 2018 Level_7a:
        aquatic7: 可以用 如果路径 模块来正确的转弯。
      HOC 2018 Level_9b:
        voyage_aquatic_9a: 看见红色和蓝色的珊瑚块了吗？将它们用作向右向左转的路标来通过礁石。
      MC_HOC_2017_01_RETRY:
        MC_HOC_2017_01_RETRY_a: 将一个"向前移动"方块从工具箱拖拽入工作区，并将其粘贴到"当运行时"方块下面的位置。
        MC_HOC_2017_01_RETRY_b: 别忘了点击"运行"来运行为代理人写的代码。
        MC_HOC_2017_01_RETRY_c: 一旦代理人运行完全部代码，您就可以使用方向键移动玩家了！
      MC_HOC_2017_01_RETRY_2019:
        MC_HOC_2017_01_RETRY_a: 将一个"向前移动"方块从工具箱拖拽入工作区，并将其粘贴到"当运行时"方块下面的位置。
        MC_HOC_2017_01_RETRY_b: 别忘了点击"运行"来运行为代理人写的代码。
        MC_HOC_2017_01_RETRY_c: 一旦代理人运行完全部代码，您就可以使用方向键移动玩家了！
      MC_HOC_2017_02_Cole:
        MC_HOC_2017_02_Cole_a: 将代理人向前移动两个空格，使其站立在压力板上。这将为您的玩家打开门。
        MC_HOC_2017_02_Cole_b: "按\"运行\"！ \n\n即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。"
        MC_HOC_2017_02_Cole_c: 一旦代理人将门打开，使用方向键将玩家移动至地图上！
        MC_HOC_2017_02_Cole_d: 确保代理人正在跟踪地图上的路径!
      MC_HOC_2017_02_Cole_2019:
        MC_HOC_2017_02_Cole_a: 将代理人向前移动两个空格，使其站立在压力板上。这将为您的玩家打开门。
        MC_HOC_2017_02_Cole_b: "按\"运行\"！ \n\n即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。"
        MC_HOC_2017_02_Cole_c: 一旦代理人将门打开，使用方向键将玩家移动至地图上！
        MC_HOC_2017_02_Cole_d: 确保代理人正在跟踪地图上的路径!
      MC_HOC_2017_03_Cole:
        MC_HOC_2017_03_Cole_a: 一旦您将代理人移动至压力板上，就可以使用方向键使玩家走至指南针处！
        MC_HOC_2017_03_Cole_b: 代码是不是感觉有点儿长？尝试使用"重复"循环，看看能不能设法将代码变短点儿！
      MC_HOC_2017_03_Cole_2019:
        MC_HOC_2017_03_Cole_a: 一旦您将代理人移动至压力板上，就可以使用方向键使玩家走至指南针处！
        MC_HOC_2017_03_Cole_b: 代码是不是感觉有点儿长？尝试使用"重复"循环，看看能不能设法将代码变短点儿！
      MC_HOC_2017_04POINT5_RYAN:
        MC_HOC_2017_04POINT5_RYAN_b: '使用"向右转"模块改变代理人的方向 '
        MC_HOC_2017_04POINT5_RYAN_a: 代理人只需要抵达第一块压力板即可使艾利克斯或者史蒂夫通过并抵达斧头。
      MC_HOC_2017_04POINT5_RYAN_2019:
        MC_HOC_2017_04POINT5_RYAN_b: '使用"向右转"模块改变代理人的方向 '
        MC_HOC_2017_04POINT5_RYAN_a: 代理人只需要抵达第一块压力板即可使艾利克斯或者史蒂夫通过并抵达斧头。
      MC_HOC_2017_04_Cole:
        MC_HOC_2017_04_Cole_a: 代理人需要向前移动7次。您将如何使用"重复"循环来实现这一点？
        MC_HOC_2017_04_Cole_c: "按\"运行\"！ \n\n即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。"
        MC_HOC_2017_04_Cole_b: 一旦代理人抵达了压力板，将为玩家打开门。
      MC_HOC_2017_04_Cole_2019:
        MC_HOC_2017_04_Cole_a: 代理人需要向前移动7次。您将如何使用"重复"循环来实现这一点？
        MC_HOC_2017_04_Cole_c: "按\"运行\"！ \n\n即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。"
        MC_HOC_2017_04_Cole_b: 一旦代理人抵达了压力板，将为玩家打开门。
      MC_HOC_2017_05_Cole:
        MC_HOC_2017_05_Cole_a: 您是否知道您可以在一个循环中放置不止一条指令？尝试在某个"重复中"放置一块木板**并**向前移动来解决这一难题。
        MC_HOC_2017_05_Cole_b: 在你行走的时候，建一座桥来让代理人过河。
      MC_HOC_2017_05_Cole_2019:
        MC_HOC_2017_05_Cole_a: 您是否知道您可以在一个循环中放置不止一条指令？尝试在某个"重复中"放置一块木板**并**向前移动来解决这一难题。
        MC_HOC_2017_05_Cole_b: 在你行走的时候，建一座桥来让代理人过河。
      MC_HOC_2017_06_Cole:
        MC_HOC_2017_06_Cole_a: 这个循环运行了多少次？它又_应该_运行多少次？
        MC_HOC_2017_06_Cole_b: '帮助代理人建立一座横跨水的桥梁 ！ '
      MC_HOC_2017_06_Cole_2019:
        MC_HOC_2017_06_Cole_a: 这个循环运行了多少次？它又_应该_运行多少次？
        MC_HOC_2017_06_Cole_b: '帮助代理人建立一座横跨水的桥梁 ！ '
      MC_HOC_2017_07_Cole:
        MC_HOC_2017_07_Cole_c: 所有你需要代理人做的是清除到矿车的路径 。
        MC_HOC_2017_07_Cole_a: 为了解决该难题，您需要搞清楚"清空路径"函数的作用是什么，并在任何有需要的时候，使用工具箱中的绿色小"清空路径"方块调用它。
        MC_HOC_2017_07_Cole_b: 尝试将这些函数模块与工具箱中的其他模块混合，来帮助您解决该难题。
      MC_HOC_2017_07_Cole_2019:
        MC_HOC_2017_07_Cole_c: 所有你需要代理人做的是清除到矿车的路径 。
        MC_HOC_2017_07_Cole_a: 为了解决该难题，您需要搞清楚"清空路径"函数的作用是什么，并在任何有需要的时候，使用工具箱中的绿色小"清空路径"方块调用它。
        MC_HOC_2017_07_Cole_b: 尝试将这些函数模块与工具箱中的其他模块混合，来帮助您解决该难题。
      MC_HOC_2017_10_RETRY:
        MC_HOC_2017_10_Cole_b: 不知道去哪里？ 看看你是否能找到虚线!
        MC_HOC_2017_10_Cole_a: 使用函数来更容易的解决难题。
      MC_HOC_2017_10_RETRY_2019:
        MC_HOC_2017_10_Cole_b: 不知道去哪里？ 看看你是否能找到虚线!
        MC_HOC_2017_10_Cole_a: 使用函数来更容易的解决难题。
      MC_HOC_2017_Ali:
        MC_HOC_2017_08_RY_a: "按\"运行\"！ \n\n即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。"
        MC_HOC_2017_08_RY_b: 有许多方法可以解决这一难题。接着尝试吧！
        MC_HOC_2017_08_RY_c: 尝试沿着虚线, 找到通过熔岩的简单路径。
      MC_HOC_2017_Ali_2019:
        MC_HOC_2017_08_RY_a: "按\"运行\"！ \n\n即便您的代码并不正确，您仍然可以运行。一遍遍运行并重置您的代码，直至您找出问题所在。"
        MC_HOC_2017_08_RY_b: 有许多方法可以解决这一难题。接着尝试吧！
        MC_HOC_2017_08_RY_c: 尝试沿着虚线, 找到通过熔岩的简单路径。
      MC_HOC_2017_FP20x20:
        MC_HOC_2017_13_Cole_a: 尝试让代理人建造一些桥梁，这样艾莉克斯和史蒂夫就可以在地图边缘以外的地区走动了。
      MC_HOC_2017_FP20x20_2019:
        MC_HOC_2017_13_Cole_a: 尝试让代理人建造一些桥梁，这样艾莉克斯和史蒂夫就可以在地图边缘以外的地区走动了。
      NEW Course 4 Artist Functions 13:
        NEW_Course_4_Artist_Functions_13_a: 尝试编辑 `draw a line of squares`（用正方形画一条线）的函数，这样就不用调用它两次了。
        NEW_Course_4_Artist_Functions_13_c: 如果要尝试用普通的线条而不是盒子来做星星，代码会是什么样的？
      NEW Course 4 Artist Functions 4:
        NEW_Course_4_Artist_Functions_4_a: 在每个正方形之后，必须使用 `向右转120度` 模块。
      NEW Course 4 Artist Functions 9:
        NEW_Course_4_Artist_Functions_9_a: 在添加任何模块之前，先尝试运行代码。 是什么使绘图看起来有点不对？
        NEW_Course_4_Artist_Functions_9_b: 如果不能很好地发现哪里出了问题，试着向左移动滑块来减慢艺术家的速度。
      NEW Course 4 Artist Params 11:
        NEW_Course_4_Artist_Params_11_a: 有多个需要由函数内的变量替换的数字。
      NEW Course 4 Artist Params 13:
        NEW_Course_4_Artist_Params_13_a: '为了保持这些形状大小一致，需要将 _周长_ 除以边数。 '
      NEW Course 4 Artist Params 14:
        NEW_Course_4_Artist_Params_14_a: 可以运行该程序几次以找出使用不同的参数函数如何工作。
      NEW Course 4 Artist Params inspire:
        brush_width: 在开始前，将画笔的宽度设为1，并将颜色设置为蓝色。
        double_loop: 试着将一个`计数循环`放到一个`重复`循环里。
        specifics: |-
          画出这 6 个 "花瓣" 的 `计数循环`，每次从 3 增加到 17，只画出奇数条边出来。

          `设置透明度` 模块在计数器变大的时候，用除法来变淡。
        after: 当画完每个“花瓣”后，确保在转60度前，`向前移动`了 20 像素。
        solution: |-
          **解决方案**

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="draw_width" inline="false">
                  <value name="WIDTH">
                    <block type="math_number">
                      <title name="NUM">1</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_colour" inline="true" id="draw-color">
                      <value name="COLOUR">
                        <block type="colour_picker">
                          <title name="COLOUR">#0000cd</title>
                        </block>
                      </value>
                      <next>
                        <block type="controls_repeat_ext" inline="true">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">6</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="controls_for_counter" inline="true">
                            <mutation counter="counter"></mutation>
                              <value name="FROM">
                                <block type="math_number">
                                  <title name="NUM">3</title>
                                </block>
                              </value>
                              <value name="TO">
                                <block type="math_number">
                                  <title name="NUM">17</title>
                                </block>
                              </value>
                              <value name="BY">
                                <block type="math_number">
                                  <title name="NUM">2</title>
                                </block>
                              </value>
                              <statement name="DO">
                                <block type="alpha" inline="true" id="alpha">
                                  <value name="VALUE">
                                    <block type="math_arithmetic" inline="true">
                                      <title name="OP">DIVIDE</title>
                                      <value name="A">
                                        <block type="math_number">
                                          <title name="NUM">500</title>
                                        </block>
                                      </value>
                                      <value name="B">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="procedures_callnoreturn" inline="false">
                                      <mutation name="draw a polygon">
                                      <arg name="length"></arg>
                                      <arg name="sides"></arg>
                                      </mutation>
                                      <value name="ARG0">
                                        <block type="math_number">
                                          <title name="NUM">30</title>
                                        </block>
                                      </value>
                                      <value name="ARG1">
                                        <block type="variables_get">
                                          <title name="VAR">counter</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </statement>
                              <next>
                                <block type="draw_move" inline="true">
                                  <title name="DIR">moveForward</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">20</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="draw_turn" inline="true">
                                      <title name="DIR">turnRight</title>
                                      <value name="VALUE">
                                        <block type="math_number">
                                          <title name="NUM">60</title>
                                        </block>
                                      </value>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </statement>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
            </xml>
      NEW Course 4 Bee For Loops 10a:
        NEW_Course_4_Bee_For_Loops_10a_a: 你能在需要走的步数和采花蜜的数量之间找到一个规律吗？
        NEW_Course_4_Bee_For_Loops_10a_b: 你需要有2个重复循环，其中一个将使用数学模块。
      NEW Course 4 Bee For Loops 7:
        NEW_Course_4_Bee_For_Loops_7_a: |-
          试着用计数器变量来做些数学。

          要得到和你需要收集的花蜜一样的数量，你需要对每朵花的计数器做什么？
      NEW Course 4 Bee For Loops 8:
        NEW_Course_4_Bee_For_Loops_8_a: "如果循环往上计数，那么每次运行时都会将增量加到计数器变量中。 \n\n每个数字上加多少，来得到下一个数字？"
      Overworld Avoid Monsters:
        mc_8_a: 你可以走几条路径。哪一条最短？
        mc_8_b: 使用`重复`循环来简化代码。
        mc_8_c: 你的目标是进入屏幕顶部的房子入口。
      Overworld Avoid Monsters_2019:
        mc_8_a: 你可以走几条路径。哪一条最短？
        mc_8_b: 使用`重复`循环来简化代码。
        mc_8_c: 你的目标是进入屏幕顶部的房子入口。
      Overworld Chop Tree:
        mc_2_a: '你需要`向前移动`两次才能站在树前。  '
        mc_2_b: "`摧毁方块`命令让你砍倒你前面的树。"
      Overworld Chop Tree_2019:
        mc_2_a: '你需要`向前移动`两次才能站在树前。  '
        mc_2_b: "`摧毁方块`命令让你砍倒你前面的树。"
      Overworld Chop Trees:
        mc_4_a: '你可以按任何顺序砍伐树木。什么路径需要的模块最少？  '
        mc_4_b: "`摧毁方块`命令让你砍倒你前面的树。"
      Overworld Chop Trees_2019:
        mc_4_a: '你可以按任何顺序砍伐树木。什么路径需要的模块最少？  '
        mc_4_b: "`摧毁方块`命令让你砍倒你前面的树。"
      Overworld House Frame Chosen:
        mc_6_a: 单击`放置`模块上的箭头可选择要放置的位置。
        mc_6_b: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        mc_6_c: 您可以在一个`重复`循环中放置多个模块。
      Overworld House Frame Chosen_2019:
        mc_6_a: 单击`放置`模块上的箭头可选择要放置的位置。
        mc_6_b: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        mc_6_c: 您可以在一个`重复`循环中放置多个模块。
      Overworld Move to Sheep:
        mc_1_a: "`向前移动`模块位于工具箱的顶部。  "
        mc_1_b: '确保把两个`向前移动`模块粘到`当运行时`模块下。  '
      Overworld Move to Sheep_2019:
        mc_1_a: "`向前移动`模块位于工具箱的顶部。  "
        mc_1_b: '确保把两个`向前移动`模块粘到`当运行时`模块下。  '
      Overworld Place Wall:
        mc_5_a: 先使用`放置`模块, 然后是`移动`模块。
        mc_5_b: 让代码多次运行，要确保两个模块都在`重复`循环里。
        mc_5_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      Overworld Place Wall_2019:
        mc_5_a: 先使用`放置`模块, 然后是`移动`模块。
        mc_5_b: 让代码多次运行，要确保两个模块都在`重复`循环里。
        mc_5_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      Overworld Plant Crops:
        mc_7_a: 使用`种植作物`模块在你所站的地方种植庄稼。
        mc_7_b: 两条暗褐色的土地都需要用庄稼来填满。
        mc_7_c: 您可以在一个`重复`循环中放置多个模块。
      Overworld Plant Crops_2019:
        mc_7_a: 使用`种植作物`模块在你所站的地方种植庄稼。
        mc_7_b: 两条暗褐色的土地都需要用庄稼来填满。
        mc_7_c: 您可以在一个`重复`循环中放置多个模块。
      Overworld Powered Minecart:
        mc_13_a: 使用`放置铁轨`在您所站的广场上铺设铁轨。
        mc_13_b: 使用`重复`循环使代码更短。
      Overworld Powered Minecart_2019:
        mc_13_a: 使用`放置铁轨`在您所站的广场上铺设铁轨。
        mc_13_b: 使用`重复`循环使代码更短。
      Overworld Shear Sheep:
        mc_3_a: "`修剪`模块能修剪前面的羊。你面对着羊群吗？  "
        mc_3_b: '如果要更改你的朝向, 请使用`转向`模块。  '
        mc_3_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      Overworld Shear Sheep_2019:
        mc_3_a: "`修剪`模块能修剪前面的羊。你面对着羊群吗？  "
        mc_3_b: '如果要更改你的朝向, 请使用`转向`模块。  '
        mc_3_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      Underground Avoiding Lava:
        mc_11_a: 所有的来检查和处理熔岩代码都有了。您需要做的就是添加一个模块来移动。
        mc_11_b: 你的`向前移动`命令要在`如果`语句的里面还是后面？
      Underground Avoiding Lava_2019:
        mc_11_a: 所有的来检查和处理熔岩代码都有了。您需要做的就是添加一个模块来移动。
        mc_11_b: 你的`向前移动`命令要在`如果`语句的里面还是后面？
      Underground If Statements:
        mc_12_a: 红色斑点就是你发现红石的地方。
        mc_12_b: 你是否可以使用`重复`循环使代码更短？
        mc_12_c: '使用`如果`语句来检查熔岩空间, 然后放置圆石。 '
      Underground If Statements_2019:
        mc_12_a: 红色斑点就是你发现红石的地方。
        mc_12_b: 你是否可以使用`重复`循环使代码更短？
        mc_12_c: '使用`如果`语句来检查熔岩空间, 然后放置圆石。 '
      Underground Iron:
        mc_10_a: 铁块是火炬背后有斑点的空间！你怎么去那里？
        mc_10_b: 当你站在熔岩的边缘时, 用`把圆石放在前面`来制造一条安全的道路。然后，你就可以走过去了！
        mc_10_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      Underground Iron_2019:
        mc_10_a: 铁块是火炬背后有斑点的空间！你怎么去那里？
        mc_10_b: 当你站在熔岩的边缘时, 用`把圆石放在前面`来制造一条安全的道路。然后，你就可以走过去了！
        mc_10_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      Underground Mining Coal:
        mc_9_a: 你正朝向正确的方向吗？用`摧毁方块`挖你前面的方块。
        mc_9_b: 墙上的黑色斑点是煤！使用`摧毁方块`来挖煤。
        mc_9_c: 用`放火把` 把火把放在你所站的地方。
      Underground Mining Coal_2019:
        mc_9_a: 你正朝向正确的方向吗？用`摧毁方块`挖你前面的方块。
        mc_9_b: 墙上的黑色斑点是煤！使用`摧毁方块`来挖煤。
        mc_9_c: 用`放火把` 把火把放在你所站的地方。
      behaviors 2:
        behavior hint: |-
          尝试编辑行为！
          鸟需要朝哪个方向飞？
      behaviors 3:
        behavior hint: |-
          尝试编辑行为！
          \*哪个值控制每个精灵图的速度？
      behaviors 3a:
        behavior hint: |-
          尝试编辑行为！
          \*哪个值控制每个精灵图的速度？
      behaviors 5:
        target hint: 你可以选择这四个玩具中的任何一个。宠物想要哪一个?
        behavior hint: 编辑行为来解决这个难题。宠物小精灵图需要在两个不同的方向移动，以结束对角线移动。
      behaviors 6:
        behavior hint: |-
          尝试编辑行为！
          \*哪个值控制每个精灵图的速度？
      behaviors 7:
        behaviors_hint1: 可以创建一个新的行为，来使用两个动作，或组合两个行为。
        sprites_idea1: |-
          为了好玩，还可以用类似的行为让飞船飞向太空，或让角色跑到前面来。试试在场景中改变背景和精灵图图案！

          ![](<https://images.code.org/7070e44239b53f4b33a5b4fe054bb61c-image-1567714335486.2019-09-05 16_05_19.gif>)

          ![](<https://images.code.org/278494432d56f1f5d41e345a51223695-image-1567714335485.2019-09-05 16_11_12.gif>)
      comment_intro_maze_2018:
        courseC_maze_programming4_a: 当其他人试图读取您的代码时，注释也很有用。
        courseC_maze_programming4_b: 当你更改方向时，增加一条注释 - 如果转向另一条路，会发生什么情况？
      course1_artist_loops_challenge1:
        courseA_artist_loops_challenge1_a: |-
          可以像这样使用循环，来画出墙和屋顶。试试重复不同的模块。

          ![](https://images.code.org/1581a2f599b501103064fc9864aa964d-image-1491863694560.png)

          自己设计或点击 ![](https://images.code.org/53090194cea5dbf35ce9e35205156f5d-image-1491864793265.png) 获得灵感！
        courseA_artist_loops_challenge1_b: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
        courseA_artist_loops_challenge1_c: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
        courseA_artist_loops_challenge1_d: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      course1_artist_loops_challenge2:
        harvey_tictactoe: 可使用 `跳转` 模块移动到其他位置。
      course1_artist_loops_challenge3:
        courseA_artist_loops_challenge2_a: 像这样的块：<xml> <block type="simple_move_up_left"/></xml>将让您的艺术家在斜面上移动!
        courseA_artist_loops_challenge2_b: 当你完成一个鸟舍后，`跳`到下一个!
        courseA_artist_loops_challenge2_c: 在这个挑战中，您需要在循环中放很多模块。
      course1_artist_loops_challenge4:
        courseB_artist_loops_challenge1_a: '像这样的模块:  <xml> <block type="simple_move_up_right"/></xml>
          将让您的艺术家在斜线上移动！'
        courseB_artist_loops_challenge1_b: 当你完成一个骰子, `跳`到下一个!
        courseB_artist_loops_challenge1_c: '您将需要`移动`或`跳过`一些相同的行两次。 '
      course1_collector_loops_challenge1:
        courseA_collector_loops_challenge1_a: 如果有问题，请尝试更改循环中的数字。
        courseA_collector_loops_challenge1_b: 如果有什么事情只做一次，就不需要使用循环, 。
        courseA_collector_loops_challenge1_c: 有 6 块宝石在右侧的洞穴，但只需要移动和收集 5 次。你知道为什么吗？
      course1_collector_loops_challenge2:
        courseA_collector_loops_challenge2_b: 只需要用一个 ![](<https://images.code.org/803e9ee8b5bc9311a26edf955cd3c03f-image-1491001702274.07.34
          PM.png>) 模块来解决这个问题。
        courseA_collector_loops_challenge2_a: |-
          在向南移动之前，可以再次原路返回。

          ![](<https://images.code.org/88c28c76dbea70e20253083d22b5f5fd-image-1491001404225.01.21 PM.png>)
      course1_collector_loops_challenge3:
        courseB_collector_loops_challenge1_b: |-
          通过循环 `向南移动` 和 `获得宝藏` 命令来开始。

          <xml>
            <block type="maze_moveSouth"/><next>
            <block type="collector_collect"/></next>
            </xml>
        courseB_collector_loops_challenge1_a: |-
          向北的规律和向南的规律有一点不同。

          <xml>
            <block type="collector_collect"/><next>
            <block type="maze_moveNorth"/></next>next>
            </xml>
        courseB_collector_loops_challenge1_c: |-
          在每条路径之间向东移动两次。

          <xml>
          <block type="maze_moveEast"><next>
          <block type="maze_moveEast"></block></next></block>
          </xml>

          只能使用14个模块来实现。单击查看更多解决方案来得到更多提示。
        courseB_collector_loops_challenge1_d: |-
          试试这个！

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course1_collector_loops_challenge4:
        courseB_collector_loops_challenge2_a: 如果出了差错, 不要害怕重新开始。不要放弃!
        courseB_collector_loops_challenge2_b: "如果你重复这个模式, 劳雷尔不会撞到洞穴底部的墙上! \n\n<xml><block
          type=\"maze_moveEast\">\n<next>\n<block type=\"collector_collect\">\n<next>\n<block
          type=\"maze_moveWest\">\n<next>\n<block type=\"maze_moveWest\">\n<next>\n<block
          type=\"maze_moveSouth\"/>\n</next>\n</block>\n</next>\n</block>\n</next>\n</block>\n</next>\n</block></xml>"
        courseB_collector_loops_challenge2_c: 尝试使用 "重复" 块收集最后一堆的宝藏!
        courseB_collector_loops_challenge2_d: |-
          尝试此解决方案：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">4</title>
          <statement name="DO">
          <block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">6</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course1_maze_debugging_challenge1:
        courseA_maze_seq_challenge1_a: 如果走得太远，有些路会通向 TNT 炸药。
      course1_maze_debugging_challenge2:
        courseB_maze_seq_challenge2_a: 您不需要添加或删除块来解决此关卡。
        courseB_maze_seq_challenge2_b: 重新排列模块并走中间的路。
      course1_maze_seq_challenge1:
        courseA_maze_seq_challenge2_a: 试着用手指数一下空格。记住不要数你开始的空间!
      course1_maze_seq_challenge2:
        courseB_maze_seq_challenge1_a: 这一次最短路径可能无法解决问题。
        courseB_maze_seq_challenge1_b: 尝试向西移动来开始。
      course1_playlab_events_challenge1:
        courseA_playlab_events_challenge1_a: "当点击罗宾时，让企鹅出现！\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_setSprite\">\n<title
          name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">3</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_b: "当点击企鹅时，让布出现！\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">3</title>\n<next>\n<block type=\"studio_setSprite\">\n<title
          name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">4</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_c: "当点击布时，让毛绒绒的怪物杰登出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">4</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">5</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_d: "当点击怪物的时候让机器人史毕福出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">5</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">6</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_e: "最后，当你点史毕福的时候让巫师温德尔出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">7</title>\n</block>\n</next>\n</block></xml>"
      course1_playlab_events_challenge2:
        courseA_playlab_events_challenge2_a: "可以让小鸟唱歌。\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_saySprite\">\n<title
          name=\"SPRITE\">2</title>\n<title name=\"TEXT\">吱喳</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge2_b: |-
          可以让机器人发出咕噜声。

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">6</title>
          <next>

          <block type="studio_playSound">
          <title name="SOUND">咕噜</title>
          </block>
          </next>
          </block></xml>
        courseA_playlab_events_challenge2_c: |-
          你可以让生气的怪物咆哮。

          <xml> <block type="studio_whenSpriteClicked">

          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      course2_artist_nestedLoops_challenge1:
        courseD_artist_nestedLoops_challenge1_a: 首先, 创建一个嵌套循环, 来建立四个八角形。旋转45度来做八角形。跳,
          然后每个转90度。
        courseD_artist_nestedLoops_challenge1_b: 添加代码在嵌套循环内绘制三角形。使用120度来转弯。
        courseD_artist_nestedLoops_challenge1_c: |-
          使用嵌套循环：

          -   重复8次
          -   绘制八角形
          -   绘制三角形
          -   向前跳50像素
          -   向右转90度
      course2_artist_nestedLoops_challenge2:
        courseD_artist_nestedLoops_challenge2_a: 要画一个正八边形, 艺术家需要转45度8次。
        courseD_artist_nestedLoops_challenge2_b: 要画正方形, 艺术家需要转动90度4次。
      course2_artist_prog_challenge1:
        courseC_artist_prog_challenge1_a: '矩形是200像素宽，100 像素高。 '
      course2_artist_prog_challenge2:
        courseC_artist_prog_challenge2_a: "可以将命令放在`重复`模块中反复循环。试试看！\n\n<xml>\n  \n
          \         <block type=\"controls_repeat\">\n            <title name=\"TIMES\">6</title>\n
          \           <statement name=\"DO\">\n              <block type=\"draw_move_by_constant_dropdown\">\n
          \               <title name=\"DIR\">moveForward</title>\n                <title
          name=\"VALUE\" config=\"25,50,100,150,200,300\">25</title>\n                <next>\n
          \                 <block type=\"jump_by_constant_dropdown\">\n                    <title
          name=\"DIR\">jumpForward</title>\n                    <title name=\"VALUE\"
          config=\"25,50,100,150,200,300\">25</title>\n                  </block>\n
          \               </next>\n              </block>\n              </statement></block></xml>"
      course2_bee_conditionals_challenge1:
        courseD_bee_conditionals_challenge1_a: "能找到一条通向每朵花和蜂窝的小路而不撞到任何树木吗？最好的路径是螺旋式的。
          \n\n**可以在不向左拐的情况下解决这个问题。**"
        courseD_bee_conditionals_challenge1_b: 在这个关卡中, 每个空间都可以有一朵花, 一只蜂蜜梳子, 或者什么都没有。
          这意味着你在每个正方形可以重复你的`如果/否则`条件。
      course2_bee_conditionals_challenge2:
        courseD_bee_conditionals_challenge1_b: |-
          就像`如果有花`模块, 里面的代码`当花蜜数量 > 0`，只在蜜蜂在花那里的时候运行。不同的是, 里面的代码会反复运行, 直到没有花蜜。 尝试此模式：

          <xml>  <block type="bee_whileNectarAmount">
              <title name="ARG1">nectarRemaining</title>
              <title name="OP">&gt;</title>
              <title name="ARG2">0</title>                    <statement name="DO">
                                <block type="maze_nectar"/>
                              </statement>
            </block></xml>
      course2_collector_loops_challenge2:
        courseC_maze_loops_challenge2_a: 如果每个土堆只有一个宝藏，原来的代码非常好用！
        courseC_maze_loops_challenge2_b: 使用循环，这样就不会用光`收集`模块！
      course2_collector_prog_challenge1:
        courseC_collector_prog_challenge1_a: 可以更多的使用`收集`命令来收集额外的宝藏。
      course2_collector_prog_challenge2:
        courseC_collector_prog_challenge1_a: 可以更多的使用`收集`命令来收集额外的宝藏。
      course2_harvester_loops_challenge1:
        courseC_harvester_loops_challenge1_a: 不用循环，是不可能成功的！
        courseC_harvester_loops_challenge1_b: 可以多次重复`向前移动`和`采摘玉米`然后在每个角落`右转`。
        courseC_harvester_loops_challenge1_c: |-
          采摘头 4 个玉米的最好方法是在 `重复` 模块里加上另一个 `重复` 模块。还可以将这个规律用到剩下的难关中！

          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">2</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></next></block></xml>
      course2_harvester_loops_challenge2:
        courseC_harvester_loops_challenge2_a: 解决这个问题的一种方法看起来像是一个锯齿形。另一种方式看起来像一个螺旋！有很多不同的解决这个关卡的方案。请坚持下去!
        courseC_harvester_loops_challenge2_b: 你可以多次重复`前进`和`采摘莴苣`，然后在每个角落右转。
        courseC_harvester_loops_challenge2_c: |-
          重复运用这个曲折的模式两次就可以只用20个模块来完成这个关卡！

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          这种螺旋模式只要18个模块的编码!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      course2_maze_loops_challenge1:
        courseC_maze_loops_challenge1_a: 把这条路看成是三个不同的部分。每个都有可以重复的规律。
        courseC_maze_loops_challenge1_b: 在每个`重复`模块之间，`向左转`或`向右转`，让斯奎特为下一个规律作好准备 。
        courseC_maze_loops_challenge1_c: |-
          如果到了这里，只需要用 `向左转`，然后 `向前移动` 几次。别放弃！

          ![](<https://images.code.org/7696c5c16b8ddf1d53436cdc7fb6346d-image-1494101728016.14.34 PM.png>)
      course2_maze_programming_challenge2:
        courseC_maze_programming_challenge2_a: _如果要让我倒退，要格外小心，确认我转向了正确的路！_
        courseC_maze_programming_challenge2_b: 最短的解决方案仅使用了 5 个模块，但它使用了`重复`模块！
      course3_artist_functions_challenge1:
        courseE_artist_functions_challenge1_a: 如果再次调用该函数，则可以在最后一个角落创造出相同的设计。也可以`跳到`所想其他位置，或者将整个改成自己想要的样子！
      course3_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">350</title>
          <title name="YPOS">200</title>
          </block>
          </xml>

          此`跳到`块能随时将僵尸艺术家移动到网格上的任何像素。它的工作原理是向右下角移动一定的像素。这总是从左上角开始计算的，这意味着在命令运行_之前_，僵尸艺术家的位置无关紧要。

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      course3_bee_debugging_challenge1:
        courseD_bee_debugging_challenge1_a: 为什么这个程序的前半部分工作？考虑一下为什么蜜蜂需要向后移动。蜜蜂每次在花上移动时采集多少花蜜？
        courseD_bee_debugging_challenge1_b: 在回来的路上, 让蜜蜂遵循同样的模式。蜜蜂每次在蜂窝上移动需要制作多少蜂蜜？
        courseD_bee_debugging_challenge1_c: |-
          当蜜蜂移到最下面一行，让它重复这些命令：

          -   重复2次:
          -   向前移动
          -   酿3个蜂蜜
          -   向后移动
      course3_bee_functions_challenge1:
        courseE_bee_functions_challenge1_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions_challenge1_b: 请记住在绿色函数模块内部构建代码。
      course3_bee_functions_challenge2:
        courseE_bee_functions_challenge1_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions_challenge1_b: 请记住在绿色函数模块内部构建代码。
      course3_bee_functions_challenge3:
        courseF_bee_functions_challenge1_a: 您可以使用工具框中的函数来帮助您。您可以调用另一个函数的定义内的函数!
      course3_bee_functions_challenge4:
        courseF_bee_functions_challenge2_a: "如果右侧有路径, 则应执行以下操作:\n\n-   得到花蜜或酿蜂蜜。\n-
          \  向右拐, 往侧面走。\n-   移动到侧边路径的末尾。\n-   向右拐。 \n\n如果重复上述操作两次, 您将准备好往下回到主路。 \n\n\\*\\*
          只有当你想看到完整的解决方案时才点击另一个提示!"
        courseF_bee_functions_challenge2_b: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course3_collector_debugging_challenge2:
        courseD_collector_debugging_challenge2_a: "开始时，先聚焦于从前两堆中收集两个宝石。\n\n![](<https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04
          AM copy.png>)\n用这些模块。\n\n<xml>\n<block type=\"collector_collect\"></block>\n<block
          type=\"controls_repeat\" limit=\"2\">\n    <title name=\"TIMES\">2</title>\n
          \ </block>\n<block type=\"maze_move\" x=\"175px\" y=\"17px\">\n                    <title
          name=\"DIR\">moveForward</title>\n                  </block>\n                  \n
          \n   <block type=\"controls_repeat\" limit=\"2\" x=\"175px\" y=\"56px\">\n
          \   <title name=\"TIMES\">2</title>\n  </block>\n\n\n\n</xml>"
        courseD_collector_debugging_challenge2_b: "接下来, 在此行中收集剩余的宝石。 \n\n![](<https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04
          AM.png>)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n\n<title
          name=\"DIR\">moveBackward</title>\n</block>\n<block type=\"controls_repeat\">\n<title
          name=\"TIMES\">4</title>\n<statement name=\"DO\">\n\n</statement>\n</block>\n</xml>"
        courseD_collector_debugging_challenge2_c: |-
          最后, 收集剩余的宝藏。将这些块添加到程序中。

          <xml>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">

          </statement>
          </block>
          </xml>
        courseD_collector_debugging_challenge2_d: |-
          这里是这个关卡的完整解决方案。

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      course3_farmer_condLoops_challenge1:
        courseD_farmer_condLoops_challenge1_a: 在这个挑战中，`步进`按钮可能非常有用。
        courseD_farmer_condLoops_challenge1_b: 通常情况下, 如果你是在南瓜那里, 你只会`摘南瓜`。如果你在南瓜那里,
          你还需要做什么？
      course3_farmer_condLoops_challenge2:
        courseD_farmer_condLoops_challenge2_a: 每种蔬菜在每个空间的数量各不相同。使用`当`循环。
      course3_maze_debugging_challenge1:
        courseC_maze_debugging_challenge1_a: 向左还是向右？由你决定!
        courseC_maze_debugging_challenge1_b: 斯奎特的路径是一个矩形！他每次都要以同样的方式转动！
        courseC_maze_debugging_challenge1_c: 如果被难住了，可以随时重新开始，或删除所有的代码，找到自己的方法！
      course3_maze_debugging_challenge2:
        courseC_maze_debugging_challenge2_a: 解决这一问题的一个方法是在转角之间增加更多的步骤。
        courseC_maze_debugging_challenge2_b: 如果被难住了，可以随时重新开始，或删除所有的代码，找到自己的方法！
        courseC_maze_debugging_challenge2_c: |-
          有两条不同的路线，可以使用`向前移动`模块并且只转 4 次。如果想出办法来使用`重复`模块，甚至只需要更少的指令。

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      course3_playLab_challenge1:
        courseE_playLab_challenge1_a: |-
          当玩家赢得比赛时, 你可以做一些事情：

          -   让恐龙消失。
          -   阻止松鼠
          -   让松鼠和骑士开心
          -   设置新的背景。
          -   让骑士感谢玩家的帮助。
          -   让所有的演员消失, 并显示一个 "你赢了！"的信息
        courseE_playLab_challenge1_b: |-
          当玩家输掉游戏时, 你可以做一些事情：

          -   让骑士消失。
          -   让松鼠伤心
          -   让恐龙说点什么
          -   设置新的背景。\*
              让所有的演员消失, 并显示一个"游戏结束"的消息。
      course4_artist_binary_challenge2:
        courseD_artist_binary_challenge2_a: "最好的提示是，如果开始变混乱，请按 `⟲重新开始`。 \n\n原来的程序中只有几行错误。如果一种方法失败了，请备份并重试。一定是能解决的！"
      course4_artist_concept_challenge2:
        courseE_artist_concept_challenge2_a: 一旦你定义了一个函数, 你可以一次又一次地调用它 - 任何想用的地方或时机！
        courseE_artist_concept_challenge2_b: |-
          可以使用以下命令跳转到画布上的不同位置：

          <xml> <block type="jump_to">

          <title name="VALUE">???</title>
          </block></xml>
      course4_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">350</title>
          <title name="YPOS">200</title>
          </block>
          </xml>

          此`跳到`块能随时将僵尸艺术家移动到网格上的任何像素。它的工作原理是向右下角移动一定的像素。这总是从左上角开始计算的，这意味着在命令运行_之前_，僵尸艺术家的位置无关紧要。

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      course4_artist_variables_challenge1:
        courseF_artist_variables_challenge1_a: 每条竖线的长度都是 "10"。每条水平线的长度应为 "长度"。
        courseF_artist_variables_challenge1_b: 您将希望把 "长度" 的值在循环中增加10 **两次**。
        courseF_artist_variables_challenge1_c: 要完成该模式, 您将需要向左两次, 右转两次, 并向前移动共四次。
        courseF_artist_variables_challenge1_d: |-
          这个谜题只用一个循环。没有变量的话，类似的路径可能只是一个锯齿形。

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          如果您遇到麻烦, 请从创建此映像开始, 然后尝试查看可以使用变量更改水平线的长度。
        courseF_artist_variables_challenge1_e: |-
          这里是解决方案。

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course4_bee_fwp_challenge1:
        courseF_bee_fwp_challenge1_a: |-
          主程序应该类似于以下内容:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: "看看在每个空间里有多少玉米可以收割。找到计数器规律了吗？`length`（长度）参数用来设置`计数循环`中的最大值。
          \n\n收割后别忘了让农夫回到主路！"
        courseF_bee_fwp_challenge1_c: |-
          将 "计数循环" 放在函数中, 并将其设置为从 "1" 到 "长度" ，每次增加1。
          在这个循环中, 你应该前进, 捡起所有的玉米。

          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: |-
          在`计数循环`里，要`向前移动`，然后`采花蜜` \*\*计数器次数 \*\*。
          在`计数循环`后，只需要`向后移动` \*\*长度次数 \*\*。

          可能需要多次阅读此提示才能理解它。**黑体** 的部分是需要用到的关于如何使用两个`重复`循环的提示。
        courseF_bee_fwp_challenge1_e: |-
          **解决方案：**

          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">捡起一行</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      course4_bee_fwp_challenge2:
        courseF_bee_fwp_challenge2_a: |-
          首先确保你明白这个函数是如何工作的。当农夫沿着每条小路向下移动时, 她只会尝试收集玉米。相反, 你怎么能让她查找3种蔬菜, 并只捡起她发现的那一种？

           将条件声明添加到函数中, 来查找玉米、南瓜和生菜。
        courseF_bee_fwp_challenge2_b: "`向前移动` 模块是否不够了？\n尝试在主程序中使用 _第二个_ `计数循环`。 \n\n\\*\\*
          注意: \\*\\* 小心不要将代码中的 `counter` 与 `counter2` 用混了。"
        courseF_bee_fwp_challenge2_c: |-
          \*\* 您的函数应该是这个样的: \*\*

          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>

          <title name="NAME">捡起一行</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">玉米</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">南瓜</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">莴苣</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |-
          \*\* 您的主要程序应该是这个样的: \*\*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">计数器2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      course4_collector_nested_loops_challenge2:
        courseD_bee_nested_loops_challenge2_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_bee_nested_loops_challenge2_b: 要获得所有4个宝石, 首先使用一个循环离开中心。向左或向右转, 然后使用嵌套循环从第一堆宝藏移动到第二个。如果重复嵌套循环足够多次,
          收集器将在 \* 整个 \* 洞周围移动!
        courseD_bee_nested_loops_challenge2_c: 到达所有宝藏的最短程序只使用一个`收集`块和两个转弯。
        courseD_bee_nested_loops_challenge2_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      course4_harvester_nested_loops_challenge1:
        courseD_harvester_nested_loops_challenge1_a: 也许你已经使用了循环来创建一个之字形图案。如果记得那个算法，可以加到这里。
      course4_playlab_variables_challenge1:
        courseF_playlab_variables_challenge1_a: |-
          要用到工具箱里别的模块，来让演员说话。

          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">

          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">敲、敲</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      courseA_artist_loops2:
        courseA_artist_loops2_a: 无法想到怎样画线吗？请开始把模块添加到 <xml><block type="when_run"/></xml>模块看会发生什么。
        courseA_artist_loops2_b: 使用模块<xml><block type="simple_move_right"/></xml>来解决此关卡。
      courseA_artist_loops2_2018:
        courseA_artist_loops2_a: 无法想到怎样画线吗？请开始把模块添加到 <xml><block type="when_run"/></xml>模块看会发生什么。
        courseA_artist_loops2_b: 使用模块<xml><block type="simple_move_right"/></xml>来解决此关卡。
      courseA_artist_loops2_2019:
        courseA_artist_loops2_a: 无法想到怎样画线吗？请开始把模块添加到 <xml><block type="when_run"/></xml>模块看会发生什么。
        courseA_artist_loops2_b: 使用模块<xml><block type="simple_move_right"/></xml>来解决此关卡。
      courseA_artist_loops3:
        courseA_artist_loops3_a: 用手指慢慢地追踪程序, 看看是哪里出问题了。
        courseA_artist_loops3_b: |-
          您将使用这样的模块来解决这个关卡。

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops3_2018:
        courseA_artist_loops3_a: 用手指慢慢地追踪程序, 看看是哪里出问题了。
        courseA_artist_loops3_b: |-
          您将使用这样的模块来解决这个关卡。

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops3_2019:
        courseA_artist_loops3_a: 用手指慢慢地追踪程序, 看看是哪里出问题了。
        courseA_artist_loops3_b: |-
          您将使用这样的模块来解决这个关卡。

          ![](<https://images.code.org/16a3ab2e639eacee18ee5405ed9966dc-image-1498670745551.24.49 AM.png>)
      courseA_artist_loops4:
        courseA_artist_loops4_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseA_artist_loops4_b: 由于只能使用一个<xml><block type="simple_move_right"/></xml>模块,
          请尝试将其放入<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="2-6">5</title></block></xml> 循环中。
      courseA_artist_loops4_2018:
        courseA_artist_loops4_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseA_artist_loops4_b: 由于只能使用一个<xml><block type="simple_move_right"/></xml>模块,
          请尝试将其放入<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="2-6">5</title></block></xml> 循环中。
      courseA_artist_loops4_2019:
        courseA_artist_loops4_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseA_artist_loops4_b: 由于只能使用一个<xml><block type="simple_move_right"/></xml>模块,
          请尝试将其放入<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES"
          config="2-6">5</title></block></xml> 循环中。
      courseA_artist_loops5:
        courseA_artist_loops5_a: 请试着使用你已经学到的<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>模块知识来完成此关卡。
        courseA_artist_loops5_b: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseA_artist_loops5_c: |-
          由于只能使用一个<xml><block type="simple_move_right"/></xml>模块, 请尝试将其放入

          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环中。
      courseA_artist_loops5_2018:
        courseA_artist_loops5_a: 请试着使用你已经学到的<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>模块知识来完成此关卡。
        courseA_artist_loops5_b: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseA_artist_loops5_c: |-
          由于只能使用一个<xml><block type="simple_move_right"/></xml>模块, 请尝试将其放入

          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环中。
      courseA_artist_loops5_2019:
        courseA_artist_loops5_a: 请试着使用你已经学到的<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>模块知识来完成此关卡。
        courseA_artist_loops5_b: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseA_artist_loops5_c: |-
          由于只能使用一个<xml><block type="simple_move_right"/></xml>模块, 请尝试将其放入

          <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环中。
      courseA_artist_loops6:
        courseA_artist_loops6_a: 无法想出如何制作山峰吗？请试着运行这些模块看它们每个是画什么的？
        courseA_artist_loops6_b: 您需要两个方向的两个模块来解决这个难题。
      courseA_artist_loops6_2018:
        courseA_artist_loops6_a: 无法想出如何制作山峰吗？请试着运行这些模块看它们每个是画什么的？
        courseA_artist_loops6_b: 您需要两个方向的两个模块来解决这个难题。
      courseA_artist_loops6_2019:
        courseA_artist_loops6_a: 无法想出如何制作山峰吗？请试着运行这些模块看它们每个是画什么的？
        courseA_artist_loops6_b: 您需要两个方向的两个模块来解决这个难题。
      courseA_artist_loops7:
        courseA_artist_loops7_a: 想不出在哪里放此循环吗？请试着逐步写下代码并寻找规律模式。
        courseA_artist_loops7_b: 先写一个波浪的代码, 然后再重复来画另外两个。
        courseA_artist_loops7_c: |-
          请记住, 可以在<xml><block type="controls_repeat">

          <title name="TIMES">???</title>
          </block></xml>循环中放置多个块。
      courseA_artist_loops7_2018:
        courseA_artist_loops7_a: 想不出在哪里放此循环吗？请试着逐步写下代码并寻找规律模式。
        courseA_artist_loops7_b: 先写一个波浪的代码, 然后再重复来画另外两个。
        courseA_artist_loops7_c: |-
          请记住, 可以在<xml><block type="controls_repeat">

          <title name="TIMES">???</title>
          </block></xml>循环中放置多个块。
      courseA_artist_loops7_2019:
        courseA_artist_loops7_a: 想不出在哪里放此循环吗？请试着逐步写下代码并寻找规律模式。
        courseA_artist_loops7_b: 先写一个波浪的代码, 然后再重复来画另外两个。
        courseA_artist_loops7_c: |-
          请记住, 可以在<xml><block type="controls_repeat">

          <title name="TIMES">???</title>
          </block></xml>循环中放置多个块。
      courseA_artist_loops8:
        courseA_artist_loops8_a: 请尝试运行代码看已经为你写了些什么。
        courseA_artist_loops8_b: 如何循环已经给你的代码？
        courseA_artist_loops8_c: |-
          这个代码是做什么的？
          它应该做什么？
          那告诉你什么？
      courseA_artist_loops8_2018:
        courseA_artist_loops8_a: 请尝试运行代码看已经为你写了些什么。
        courseA_artist_loops8_b: 如何循环已经给你的代码？
        courseA_artist_loops8_c: |-
          这个代码是做什么的？
          它应该做什么？
          那告诉你什么？
      courseA_artist_loops8_2019:
        courseA_artist_loops8_a: 请尝试运行代码看已经为你写了些什么。
        courseA_artist_loops8_b: 如何循环已经给你的代码？
        courseA_artist_loops8_c: |-
          这个代码是做什么的？
          它应该做什么？
          那告诉你什么？
      courseA_artist_loops9:
        courseA_artist_loops9_a: 将另一个模块添加到已经给您的代码中来绘制其余的楼梯。
        courseA_artist_loops9_b: |-
          您添加的模块应该在<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block>
          </xml>循环的内部。
        courseA_artist_loops9_c: 如果您无法确定将循环放在何处, 请尝试逐步编写代码并查找规律。
      courseA_artist_loops9_2018:
        courseA_artist_loops9_a: 将另一个模块添加到已经给您的代码中来绘制其余的楼梯。
        courseA_artist_loops9_b: |-
          您添加的模块应该在<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block>
          </xml>循环的内部。
        courseA_artist_loops9_c: 如果您无法确定将循环放在何处, 请尝试逐步编写代码并查找规律。
      courseA_artist_loops9_2019:
        courseA_artist_loops9_a: 将另一个模块添加到已经给您的代码中来绘制其余的楼梯。
        courseA_artist_loops9_b: |-
          您添加的模块应该在<xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">5</title></block>
          </xml>循环的内部。
        courseA_artist_loops9_c: 如果您无法确定将循环放在何处, 请尝试逐步编写代码并查找规律。
      courseA_artist_loops_challenge2a:
        courseA_artist_loops_challenge2_a: 像这样的模块 <xml> <block type="simple_move_up_left"/></xml>会让你的艺术家在斜面上移动!
        courseA_artist_loops_challenge2_b: 当您完成一个帐篷时，向上`跳跃`两次到达下一个!
        courseA_artist_loops_challenge2_c: 所有的模块都将需要在一个循环内才可以完成此关卡。
      courseA_artist_loops_challenge2a_2018:
        courseA_artist_loops_challenge2_a: 像这样的模块 <xml> <block type="simple_move_up_left"/></xml>会让你的艺术家在斜面上移动!
        courseA_artist_loops_challenge2_b: 当您完成一个帐篷时，向上`跳跃`两次到达下一个!
        courseA_artist_loops_challenge2_c: 所有的模块都将需要在一个循环内才可以完成此关卡。
      courseA_artist_loops_challenge2a_2019:
        courseA_artist_loops_challenge2_a: 像这样的模块 <xml> <block type="simple_move_up_left"/></xml>会让你的艺术家在斜面上移动!
        courseA_artist_loops_challenge2_b: 当您完成一个帐篷时，向上`跳跃`两次到达下一个!
        courseA_artist_loops_challenge2_c: 所有的模块都将需要在一个循环内才可以完成此关卡。
      courseA_collector_loops1:
        courseA_collector_loops1_a: |-
          在你到了一个有宝藏的正方形后, 用这个模块来把它捡起来。
          <xml> <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: 一个简单的解决方案是向东移动两次, 然后得到宝藏。
      courseA_collector_loops1_2018:
        courseA_collector_loops1_a: |-
          在你到了一个有宝藏的正方形后, 用这个模块来把它捡起来。
          <xml> <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: 一个简单的解决方案是向东移动两次, 然后得到宝藏。
      courseA_collector_loops1_2019:
        courseA_collector_loops1_a: |-
          在你到了一个有宝藏的正方形后, 用这个模块来把它捡起来。
          <xml> <block type="collector_collect"/></xml>
        courseA_collector_loops1_b: 一个简单的解决方案是向东移动两次, 然后得到宝藏。
      courseA_collector_loops2:
        courseA_collector_loops2_a: 在你收集财宝之前, 你必须先向前移动。
        courseA_collector_loops2_b: |-
          在你到了一个有宝藏的正方形后, 用这个模块来把它捡起来。
          <xml> <block type="collector_collect"/></xml>
      courseA_collector_loops2_2018:
        courseA_collector_loops2_a: 在你收集财宝之前, 你必须先向前移动。
        courseA_collector_loops2_b: |-
          在你到了一个有宝藏的正方形后, 用这个模块来把它捡起来。
          <xml> <block type="collector_collect"/></xml>
      courseA_collector_loops2_2019:
        courseA_collector_loops2_a: 在你收集财宝之前, 你必须先向前移动。
        courseA_collector_loops2_b: |-
          在你到了一个有宝藏的正方形后, 用这个模块来把它捡起来。
          <xml> <block type="collector_collect"/></xml>
      courseA_collector_loops3:
        courseA_collector_loops3_a: |-
          试试用
           <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环!
        courseA_collector_loops3_b: 请记住, 您可以在 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> 循环中放置超过1个模块。
      courseA_collector_loops3_2018:
        courseA_collector_loops3_a: |-
          试试用
           <xml><block type="controls_repeat_simplified_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>循环!
        courseA_collector_loops3_b: 请记住, 您可以在 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> 循环中放置超过1个模块。
      courseA_collector_loops3_2019:
        courseA_collector_loops3_a: "试试使用 \n\n<xml><block type=\"controls_repeat_simplified_dropdown\"><title
          name=\"TIMES\" config=\"3-10\">???</title></block></xml>\n\n 循环！"
        courseA_collector_loops3_b: 请记住, 您可以在 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> 循环中放置超过1个模块。
      courseA_collector_loops4:
        courseA_collector_loops4_a: 要改变劳雷尔所走的距离, 请更改循环运行的次数。
        courseA_collector_loops4_b: 请别忘了罗瑞尔需要在她完成 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>循环后走下去收集所有的宝藏！
      courseA_collector_loops4_2018:
        courseA_collector_loops4_a: 要改变劳雷尔所走的距离, 请更改循环运行的次数。
        courseA_collector_loops4_b: 请别忘了罗瑞尔需要在她完成 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>循环后走下去收集所有的宝藏！
      courseA_collector_loops4_2019:
        courseA_collector_loops4_a: 要改变劳雷尔所走的距离, 请更改循环运行的次数。
        courseA_collector_loops4_b: 请别忘了罗瑞尔需要在她完成 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>循环后走下去收集所有的宝藏！
      courseA_collector_loops5:
        courseA_collector_loops5_a: 如果你不能马上找到答案，试着用一张纸来找出你需要的箭头并找到一个图案。
        courseA_collector_loops5_b: 试着把问题分成2部分, 然后侧身移动, 然后向下。
        courseA_collector_loops5_c: 您将开始使用 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> 循环, 来让劳雷尔向西移动并收集宝藏。
      courseA_collector_loops5_2018:
        courseA_collector_loops5_a: 如果你不能马上找到答案，试着用一张纸来找出你需要的箭头并找到一个图案。
        courseA_collector_loops5_b: 试着把问题分成2部分, 然后侧身移动, 然后向下。
        courseA_collector_loops5_c: 您将开始使用 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> 循环, 来让劳雷尔向西移动并收集宝藏。
      courseA_collector_loops5_2019:
        courseA_collector_loops5_a: 如果你不能马上找到答案，试着用一张纸来找出你需要的箭头并找到一个图案。
        courseA_collector_loops5_b: 试着把问题分成2部分, 然后侧身移动, 然后向下。
        courseA_collector_loops5_c: 您将开始使用 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml> 循环, 来让劳雷尔向西移动并收集宝藏。
      courseA_collector_loops6:
        courseA_collector_loops6_a: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
        courseA_collector_loops6_b: 最短解决方案有 2 个<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>循环, 一个接一个。
      courseA_collector_loops6_2018:
        courseA_collector_loops6_a: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
        courseA_collector_loops6_b: 最短解决方案有 2 个<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>循环, 一个接一个。
      courseA_collector_loops6_2019:
        courseA_collector_loops6_a: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
        courseA_collector_loops6_b: 最短解决方案有 2 个<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>循环, 一个接一个。
      courseA_collector_loops7:
        courseA_collector_loops7_a: 如果您不知道接下来会发生什么，请尝试运行代码以查看罗瑞尔结束的位置。
      courseA_collector_loops7_2018:
        courseA_collector_loops7_a: 如果您不知道接下来会发生什么，请尝试运行代码以查看罗瑞尔结束的位置。
      courseA_collector_loops7_2019:
        courseA_collector_loops7_a: 如果您不知道接下来会发生什么，请尝试运行代码以查看罗瑞尔结束的位置。
      courseA_collector_loops8:
        courseA_collector_loops8_a: 如果您遇到此难题，请尝试在一张纸上写下所有的动作并寻找规律。
        courseA_collector_loops8_b: 尝试将这个谜题分解成3个单独的问题, 并为每一个编写循环。
        courseA_collector_loops8_c: 记住, 你可以一次写一段代码, 然后按 "运行" 来找出你需要去哪里。
      courseA_collector_loops8_2018:
        courseA_collector_loops8_a: 如果您遇到此难题，请尝试在一张纸上写下所有的动作并寻找规律。
        courseA_collector_loops8_b: 尝试将这个谜题分解成3个单独的问题, 并为每一个编写循环。
        courseA_collector_loops8_c: 记住, 你可以一次写一段代码, 然后按 "运行" 来找出你需要去哪里。
      courseA_collector_loops8_2019:
        courseA_collector_loops8_a: 如果您遇到此难题，请尝试在一张纸上写下所有的动作并寻找规律。
        courseA_collector_loops8_b: 尝试将这个谜题分解成3个单独的问题, 并为每一个编写循环。
        courseA_collector_loops8_c: 记住, 你可以一次写一段代码, 然后按 "运行" 来找出你需要去哪里。
      courseA_collector_loops9:
        courseA_collector_loops9_a: '如果无法发现使用循环的最佳位置, 请尝试逐步对其进行编码, 并寻找规律。 '
        courseA_collector_loops9_b: 尝试将你的两个<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>循环之一放入另一个循环中, 来让代码更短!
      courseA_collector_loops9_2018:
        courseA_collector_loops9_a: '如果无法发现使用循环的最佳位置, 请尝试逐步对其进行编码, 并寻找规律。 '
        courseA_collector_loops9_b: 尝试将你的两个<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>循环之一放入另一个循环中, 来让代码更短!
      courseA_collector_loops9_2019:
        courseA_collector_loops9_a: '如果无法发现使用循环的最佳位置, 请尝试逐步对其进行编码, 并寻找规律。 '
        courseA_collector_loops9_b: 尝试将你的两个<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">???</title></block></xml>循环之一放入另一个循环中, 来让代码更短!
      courseA_collector_loops_challenge1:
        courseA_collector_loops_challenge1_a: 如果有错误，请尝试更改每个循环中的数字。
        courseA_collector_loops_challenge1_b: 如果有什么事情只做一次，就不需要使用循环, 。
        courseA_collector_loops_challenge1_c: 当你开始的时候, 有6个宝石在洞穴的右侧, 但你只需要向南移动5次获得宝藏。你知道这是为什么吗？
        courseA_collector_loops_challenge1_d: "开始的程序没有收集最后两个宝石。尝试在末尾添加此代码: \n\n<xml><block
          type=\"maze_moveEast\">\n<next>\n<block type=\"collector_collect_simplified\">\n<next>\n<block
          type=\"maze_moveSouth\">\n<next>\n<block type=\"collector_collect\"/>\n</next>\n</block>\n</next>\n</block>\n</next>\n</block></xml>"
      courseA_collector_loops_challenge1_2018:
        courseA_collector_loops_challenge1_a: 如果有错误，请尝试更改每个循环中的数字。
        courseA_collector_loops_challenge1_b: 如果有什么事情只做一次，就不需要使用循环, 。
        courseA_collector_loops_challenge1_c: 当你开始的时候, 有6个宝石在洞穴的右侧, 但你只需要向南移动5次获得宝藏。你知道这是为什么吗？
        courseA_collector_loops_challenge1_d: "开始的程序没有收集最后两个宝石。尝试在末尾添加此代码: \n\n<xml><block
          type=\"maze_moveEast\">\n<next>\n<block type=\"collector_collect_simplified\">\n<next>\n<block
          type=\"maze_moveSouth\">\n<next>\n<block type=\"collector_collect\"/>\n</next>\n</block>\n</next>\n</block>\n</next>\n</block></xml>"
      courseA_collector_loops_challenge1_2019:
        courseA_collector_loops_challenge1_a: 如果有错误，请尝试更改每个循环中的数字。
        courseA_collector_loops_challenge1_b: 如果有什么事情只做一次，就不需要使用循环, 。
        courseA_collector_loops_challenge1_c: 当你开始的时候, 有6个宝石在洞穴的右侧, 但你只需要向南移动5次获得宝藏。你知道这是为什么吗？
        courseA_collector_loops_challenge1_d: "开始的程序没有收集最后两个宝石。尝试在末尾添加此代码: \n\n<xml><block
          type=\"maze_moveEast\">\n<next>\n<block type=\"collector_collect_simplified\">\n<next>\n<block
          type=\"maze_moveSouth\">\n<next>\n<block type=\"collector_collect\"/>\n</next>\n</block>\n</next>\n</block>\n</next>\n</block></xml>"
      courseA_collector_loops_challenge2:
        courseA_collector_loops_challenge2_b: 只需用一个模块来过关。
        courseA_collector_loops_challenge2_a: 在向南移动之前，可以再次原路返回。
      courseA_collector_loops_challenge2kp:
        courseA_collector_loops_challenge2kp_b: 请尝试此路径以获得解决方案。
        courseA_collector_loops_challenge2kp_a: 你能用循环来解决这个关卡吗？
      courseA_collector_loops_challenge2kp_2018:
        courseA_collector_loops_challenge2kp_b: 请尝试此路径以获得解决方案。
        courseA_collector_loops_challenge2kp_a: 你能用循环来解决这个关卡吗？
      courseA_collector_loops_challenge2kp_2019:
        courseA_collector_loops_challenge2kp_b: 请尝试此路径以获得解决方案。
        courseA_collector_loops_challenge2kp_a: 你能用循环来解决这个关卡吗？
      courseA_collector_preLoops4:
        courseA_collector_preLoops4_a: 要获得宝藏，将两个 ![](https://images.code.org/2df8a25d7e96207f57d1a6b504950b70-image-1508906116743.34.37.png)
          模块和一个 ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
          模块粘到程序底部，并点击 "运行"！
      courseA_collector_preLoops5:
        courseA_collector_preLoops5_a: 哪怕只用得到一个宝石，都需要去两个不同的方向！
      courseA_collector_preLoops6:
        courseA_collector_preLoops6_a: 您将需要使用两个 ![](https://images.code.org/563c0deb5c51d43cdfa72d62dec3419d-image-1508904559201.05.30.png)
          模块来解决这个关卡。
      courseA_collector_preLoops7:
        courseA_collector_loops2_b: |-
          在你到了一个有宝藏的正方形后, 用这个模块来把它捡起来。
          <xml> <block type="collector_collect"/></xml>
      courseA_harvester_loops1:
        courseA_harvester_loops1_a: |-
          一旦移动到了某个玉米上，用这个模块采摘它！

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops1_2019:
        courseA_harvester_loops1_a: |-
          一旦移动到了某个玉米上，用这个模块采摘它！

          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_loops2:
        courseA_harvester_loops2_a: "代码会有 **四个**`向西移动`\n\n<xml><block type=\"maze_moveWest\"/></xml>\n\n模块和**四个**<xml>`采摘玉米`<block
          type=\"harvester_corn\"/></xml>模块。 "
        courseA_harvester_loops2_b: '如果你仍然遇到麻烦，请尝试将步骤大声说出来。 '
      courseA_harvester_loops2_2019:
        courseA_harvester_loops2_a: "代码会有 **四个**`向西移动`\n\n<xml><block type=\"maze_moveWest\"/></xml>\n\n模块和**四个**<xml>`采摘玉米`<block
          type=\"harvester_corn\"/></xml>模块。 "
        courseA_harvester_loops2_b: '如果你仍然遇到麻烦，请尝试将步骤大声说出来。 '
      courseA_harvester_loops3:
        courseA_harvester_loops3_a: |-
          用一个这样的`重复`模块来帮忙！

          <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="2-10">4</title>
          </block></xml>
        courseA_harvester_loops3_b: 要重复代码, 拖出一个`重复`循环, 然后把它放在你想要的模块里面。
      courseA_harvester_loops3_2019:
        courseA_harvester_loops3_a: |-
          用一个这样的`重复`模块来帮忙！

          <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="2-10">4</title>
          </block></xml>
        courseA_harvester_loops3_b: 要重复代码, 拖出一个`重复`循环, 然后把它放在你想要的模块里面。
      courseA_harvester_loops4:
        courseA_harvester_loops4_a: 勇敢按下`运行`按钮，看看会发生什么！
        courseA_harvester_loops4_b: 有多少块玉米？你的代码重复了多少次？
      courseA_harvester_loops4_2019:
        courseA_harvester_loops4_a: 勇敢按下`运行`按钮，看看会发生什么！
        courseA_harvester_loops4_b: 有多少块玉米？你的代码重复了多少次？
      courseA_harvester_loops5:
        courseA_harvester_loops5_a: 如果你被难住了，试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
        courseA_harvester_loops5_b: 最终的代码会有**一个**`重复`<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="2-10">6</title></block></xml>循环，**一个**`向南移动`<xml><block
          type="maze_moveSouth" limit="1"/></xml>模块和**一个**`向东`<xml><block type="maze_moveEast"
          limit="1"/></xml>移动的模块。
        courseA_harvester_loops5_c: 通过这条路来采摘所有的玉米。
      courseA_harvester_loops5_2019:
        courseA_harvester_loops5_a: 如果你被难住了，试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
        courseA_harvester_loops5_b: 最终的代码会有**一个**`重复`<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="2-10">6</title></block></xml>循环，**一个**`向南移动`<xml><block
          type="maze_moveSouth" limit="1"/></xml>模块和**一个**`向东`<xml><block type="maze_moveEast"
          limit="1"/></xml>移动的模块。
        courseA_harvester_loops5_c: 通过这条路来采摘所有的玉米。
      courseA_harvester_loops5a:
        courseA_harvester_loops5a_a: 你需要一个`重复`循环连着另一个。
        courseA_harvester_loops5a_b: 一个循环要重复`向南移动`<xml><block type="maze_moveSouth"
          limit="1"/></xml>，另一个要重复`向东移动`<xml><block type="maze_moveEast" limit="1"/></xml>。
        courseA_harvester_loops5a_c: 走这条路，先往一个方向走，再往另一个方向走。
      courseA_harvester_loops5a_2019:
        courseA_harvester_loops5a_a: 你需要一个`重复`循环连着另一个。
        courseA_harvester_loops5a_b: 一个循环要重复`向南移动`<xml><block type="maze_moveSouth"
          limit="1"/></xml>，另一个要重复`向东移动`<xml><block type="maze_moveEast" limit="1"/></xml>。
        courseA_harvester_loops5a_c: 走这条路，先往一个方向走，再往另一个方向走。
      courseA_harvester_loops5b:
        courseA_harvester_loops5b_a: 点击`运行`看看会发生什么！
        courseA_harvester_loops5b_b: 你的循环重复了正确的次数吗？
        courseA_harvester_loops5b_c: 沿着这条路往一个方向移动，然后往另一个方向移动。
      courseA_harvester_loops5b_2019:
        courseA_harvester_loops5b_a: 点击`运行`看看会发生什么！
        courseA_harvester_loops5b_b: 你的循环重复了正确的次数吗？
        courseA_harvester_loops5b_c: 沿着这条路往一个方向移动，然后往另一个方向移动。
      courseA_harvester_loops6:
        courseA_harvester_loops6_a: 如果你被难住了，试着在纸上写下步骤, 寻找重复的规律。
        courseA_harvester_loops6_b: 想要采摘所有玉米就得走这条路。
      courseA_harvester_loops6_2019:
        courseA_harvester_loops6_a: 如果你被难住了，试着在纸上写下步骤, 寻找重复的规律。
        courseA_harvester_loops6_b: 想要采摘所有玉米就得走这条路。
      courseA_harvester_loops7:
        courseA_harvester_loops7_a: 你需要两个`重复`<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="2-10">5</title></block></xml>循环相连！
        courseA_harvester_loops7_b: 用两个循环来沿着这条路走。
      courseA_harvester_loops7_2019:
        courseA_harvester_loops7_a: 你需要两个`重复`<xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="2-10">5</title></block></xml>循环相连！
        courseA_harvester_loops7_b: 用两个循环来沿着这条路走。
      courseA_harvester_loops9:
        courseA_harvester_loops9_a: 将这一关分成三个不同部分，一部分到达第一个角落，一部分到达第二个角落，最后一部分到达终点。
        courseA_harvester_loops9_b: 在每个部分完成后，别害怕运行代码，看看会发生什么！
        courseA_harvester_loops9_c: 沿这条路来收获所有的玉米。
      courseA_harvester_loops9_2019:
        courseA_harvester_loops9_a: 将这一关分成三个不同部分，一部分到达第一个角落，一部分到达第二个角落，最后一部分到达终点。
        courseA_harvester_loops9_b: 在每个部分完成后，别害怕运行代码，看看会发生什么！
        courseA_harvester_loops9_c: 沿这条路来收获所有的玉米。
      courseA_harvester_seq1:
        courseA_harvester_seq1_a: |-
          用这个模块来让收割者一旦找到玉米，就采摘它！

          <xml>
          <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          收割者需要向东移动三次来采摘玉米，用这个模块：

          <xml>
          <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq10:
        courseA_harvester_seq10_a: 被难住了？请试着先在一张纸上写下步骤。
        courseA_harvester_seq10_b: 你需要`向东移动`，然后`向北移动`。这样做两次。别忘了还要采摘所有的玉米！
        courseA_harvester_seq10_c: 试着用这条路捡起所有橡子。
      courseA_harvester_seq10_2019:
        courseA_harvester_seq10_a: 被难住了？请试着先在一张纸上写下步骤。
        courseA_harvester_seq10_b: 你需要`向东移动`，然后`向北移动`。这样做两次。别忘了还要采摘所有的玉米！
        courseA_harvester_seq10_c: 试着用这条路捡起所有橡子。
      courseA_harvester_seq13:
        courseA_bee_seq1_a: |-
          用这个模块来让收割者到达玉米时，采摘它。

          <xml>
          <block type="harvester_corn"/>
          </xml>
      courseA_harvester_seq13_2019:
        courseA_bee_seq1_a: |-
          用这个模块来让收割者到达玉米时，采摘它。

          <xml>
          <block type="harvester_corn"/>
          </xml>
      courseA_harvester_seq1_2019:
        courseA_harvester_seq1_a: |-
          用这个模块来让收割者一旦找到玉米，就采摘它！

          <xml>
          <block type="harvester_corn"/>
          </xml>
        courseA_harvester_seq1_b: |-
          收割者需要向东移动三次来采摘玉米，用这个模块：

          <xml>
          <block type="maze_moveEast"/>
          </xml>
      courseA_harvester_seq2:
        courseA_harvester_seq2_a: 别忘了用<xml><block type="harvester_corn"/></xml>来采摘玉米！
        courseA_harvester_seq2_b: 请试着在纸张上写下步骤来找到解决方法！
      courseA_harvester_seq2_2019:
        courseA_harvester_seq2_a: 别忘了用<xml><block type="harvester_corn"/></xml>来采摘玉米！
        courseA_harvester_seq2_b: 请试着在纸张上写下步骤来找到解决方法！
      courseA_harvester_seq3:
        courseA_harvester_seq3_a: |-
          还记得用这个模块吗？

          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: 大声的说出这些步骤，来看看是否能帮你找到答案。
      courseA_harvester_seq3_2019:
        courseA_harvester_seq3_a: |-
          还记得用这个模块吗？

          <xml><block type="harvester_corn"/></xml>
        courseA_harvester_seq3_b: 大声的说出这些步骤，来看看是否能帮你找到答案。
      courseA_harvester_seq4:
        courseA_harvester_seq4_a: 在收割者和玉米之间有多少空间？工作区里已经有多少个模块了？
        courseA_harvester_seq4_b: |-
          你需要用5次`向西移动`和一次`采摘玉米`模块：
          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_seq4_2019:
        courseA_harvester_seq4_a: 在收割者和玉米之间有多少空间？工作区里已经有多少个模块了？
        courseA_harvester_seq4_b: |-
          你需要用5次`向西移动`和一次`采摘玉米`模块：
          <xml><block type="harvester_corn"/></xml>
      courseA_harvester_seq5:
        courseA_harvester_seq5_a: 哪个模块将收割者移向了错误的路？
        courseA_harvester_seq5_b: 你需要去掉一个模块。
        courseA_harvester_seq5_c: |-
          将这个模块扔进垃圾箱！
          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq5_2019:
        courseA_harvester_seq5_a: 哪个模块将收割者移向了错误的路？
        courseA_harvester_seq5_b: 你需要去掉一个模块。
        courseA_harvester_seq5_c: |-
          将这个模块扔进垃圾箱！
          <xml><block type="maze_moveNorth"/></xml>
      courseA_harvester_seq6:
        courseA_harvester_seq6_a: 如果被难住了，试着大声的说出这些步骤。这会帮你找到正确的路径。
      courseA_harvester_seq6_2019:
        courseA_harvester_seq6_a: 如果被难住了，试着大声的说出这些步骤。这会帮你找到正确的路径。
      courseA_harvester_seq7:
        courseA_harvester_seq7_a: 试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
        courseA_harvester_seq7_b: 有困难了？这是收割者应该走的路。
      courseA_harvester_seq7_2019:
        courseA_harvester_seq7_a: 试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
        courseA_harvester_seq7_b: 有困难了？这是收割者应该走的路。
      courseA_harvester_seq8:
        courseA_harvester_seq8_a: 你的最终代码应该有**4**移动块和**2**选择块。
      courseA_harvester_seq8_2019:
        courseA_harvester_seq8_a: 你的最终代码应该有**4**移动块和**2**选择块。
      courseA_harvester_seq9:
        courseA_harvester_seq9_a: 运行代码几次来看看发生了什么。收割者在哪里停下来了？
        courseA_harvester_seq9_b: 别忘了采摘所有的玉米！你需要**3**个采摘玉米模块。
        courseA_harvester_seq9_c: 你应该用这条路来捡起所有橡子。
      courseA_harvester_seq9_2019:
        courseA_harvester_seq9_a: 运行代码几次来看看发生了什么。收割者在哪里停下来了？
        courseA_harvester_seq9_b: 别忘了采摘所有的玉米！你需要**3**个采摘玉米模块。
        courseA_harvester_seq9_c: 你应该用这条路来捡起所有橡子。
      courseA_maze_ramp2_2018:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp2_2019:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3a_2018:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3a_2019:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3b_2018:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp3b_2019:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp4a_2018:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp4a_2019:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp5a_2018:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_ramp5a_2019:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseA_maze_seq1:
        courseA_maze_seq1_a: |-
          如果在让鸟移动时遇到问题, 请确保模块是被放置在<xml>
          <block type="when_run"/>
          </xml> 下面
        courseA_maze_seq1_b: '这只鸟需要向西移动3次才能到达猪。用这个模块: <xml> <block type="maze_moveWest"/>
          </xml>'
      courseA_maze_seq10:
        courseA_maze_seq10_a: 如果你有困难, 试着先写下一张纸上的步骤。
        courseA_maze_seq10_b: 您将需要移动3 个方向来通过此关卡。
      courseA_maze_seq10_2018:
        courseA_maze_seq10_a: 如果你有困难, 试着先写下一张纸上的步骤。
        courseA_maze_seq10_b: 您将需要移动3 个方向来通过此关卡。
      courseA_maze_seq10_2019:
        courseA_maze_seq10_a: 如果你有困难, 试着先写下一张纸上的步骤。
        courseA_maze_seq10_b: 您将需要移动3 个方向来通过此关卡。
      courseA_maze_seq13:
        courseA_maze_seq13_a: 如果对路径不明白，请使用手指来追踪鸟到猪的线路。
        courseA_maze_seq13_b: 不要害怕犯错误！尝试添加块并运行代码, 看看会发生什么。
        courseA_maze_seq13_c: |-
          这些 <xml><block type="maze_moveNorth"/></xml>
          <xml><block type="maze_moveEast"/></xml>块会帮你靠近猪。
      courseA_maze_seq13_2018:
        courseA_maze_seq13_a: 如果对路径不明白，请使用手指来追踪鸟到猪的线路。
        courseA_maze_seq13_b: 不要害怕犯错误！尝试添加块并运行代码, 看看会发生什么。
        courseA_maze_seq13_c: |-
          这些 <xml><block type="maze_moveNorth"/></xml>
          <xml><block type="maze_moveEast"/></xml>块会帮你靠近猪。
      courseA_maze_seq13_2019:
        courseA_maze_seq13_a: 如果对路径不明白，请使用手指来追踪鸟到猪的线路。
        courseA_maze_seq13_b: 不要害怕犯错误！尝试添加块并运行代码, 看看会发生什么。
        courseA_maze_seq13_c: |-
          这些 <xml><block type="maze_moveNorth"/></xml>
          <xml><block type="maze_moveEast"/></xml>块会帮你靠近猪。
      courseA_maze_seq1_2018:
        courseA_maze_seq1_a: |-
          如果在让鸟移动时遇到问题, 请确保模块是被放置在<xml>
          <block type="when_run"/>
          </xml> 下面
        courseA_maze_seq1_b: '这只鸟需要向西移动3次才能到达猪。用这个模块: <xml> <block type="maze_moveWest"/>
          </xml>'
      courseA_maze_seq1_2019:
        courseA_maze_seq1_a: |-
          如果在让鸟移动时遇到问题, 请确保模块是被放置在<xml>
          <block type="when_run"/>
          </xml> 下面
        courseA_maze_seq1_b: '这只鸟需要向西移动3次才能到达猪。用这个模块: <xml> <block type="maze_moveWest"/>
          </xml>'
      courseA_maze_seq2:
        courseA_maze_seq2_a: 该程序缺少1个模块，您是否可以找出是哪个？
        courseA_maze_seq2_b: 试着先运行代码, 看看鸟在哪里。你需要从那里去哪里？
      courseA_maze_seq3:
        courseA_maze_seq3_a: 其中一个模块把鸟移向了错误的方向。你能找出是哪块并用正确的模块来取代它吗？
        courseA_maze_seq3_b: 请尝试使用 "步进" 按钮查找程序出错的位置。这是第一步吗？第二步呢？
        courseA_maze_seq3_c: <xml><block type="maze_moveNorth"/></xml>模块似乎没有将鸟移动到正确的方向。你能用不同的模块替换它吗？
      courseA_maze_seq4:
        courseA_maze_seq4_a: 如果遇到问题, 请尝试找出正确的路径, 然后删除不适合的模块。
        courseA_maze_seq4_b: 请尝试用现有的运行代码。看有什么出错？您可以删除哪个模块？你怎么能修好它？
      courseA_maze_seq5:
        courseA_maze_seq5_a: 请试着在纸张上写下步骤来找到解决方法！
        courseA_maze_seq5_b: 您将需要指向两个方向的两个模块。
      courseA_maze_seq5_2018:
        '1': 请试着在纸张上写下步骤来找到解决方法！
        '2': |-
          你需要用这个模块：

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5_2019:
        '1': 请试着在纸张上写下步骤来找到解决方法！
        '2': |-
          你需要用这个模块：

          <xml><block type="maze_moveSouth"/></xml>
      courseA_maze_seq5a_2018:
        '1': 大声的说出这些步骤，来看看是否能帮你找到答案。
      courseA_maze_seq5a_2019:
        '1': 大声的说出这些步骤，来看看是否能帮你找到答案。
      courseA_maze_seq6:
        courseA_maze_seq6_a: 最终的代码应该有3个移动模块。
        courseA_maze_seq6_b: 如果你被难住了，试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
      courseA_maze_seq6_2018:
        courseA_maze_seq6_a: 最终的代码应该有3个移动模块。
        courseA_maze_seq6_b: 如果你被难住了，试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
      courseA_maze_seq6_2019:
        courseA_maze_seq6_a: 最终的代码应该有3个移动模块。
        courseA_maze_seq6_b: 如果你被难住了，试着分两部分来解决这个问题，一部分在拐角前，另一部分在拐角后。
      courseA_maze_seq7:
        courseA_maze_seq7_a: 你需要添加1个模块来把鸟移到猪那。
        courseA_maze_seq7_b: 如果无法想出要怎么做，请试着在纸张上画出关卡，并用手指来找出要移动的方向。
      courseA_maze_seq8:
        courseA_maze_seq8_a: 如果你被卡住了, 试着在纸上画出图像, 看看鸟儿应该如何移动。
      courseA_maze_seq8_2018:
        courseA_maze_seq8_a: 如果你被卡住了, 试着在纸上画出图像, 看看鸟儿应该如何移动。
      courseA_maze_seq8_2019:
        courseA_maze_seq8_a: 如果你被卡住了, 试着在纸上画出图像, 看看鸟儿应该如何移动。
      courseA_maze_seq9:
        courseA_maze_seq9_a: 卡住了？请试着用手指来描绘鸟的路径。
        courseA_maze_seq9_b: 如果您不确定要做什么, 请尝试按 "重新开始" 并运行代码来查看出错的地方。
        courseA_maze_seq9_c: 您将需要移动3个方向来解决这个关卡。
      courseA_maze_seq_challenge1:
        courseA_maze_seq_challenge1_a: 这个关卡有两个解决方法。
      courseA_maze_seq_challenge1_2018:
        courseA_maze_seq_challenge1_a: 这个关卡有两个解决方法。
      courseA_maze_seq_challenge1_2019:
        courseA_maze_seq_challenge1_a: 这个关卡有两个解决方法。
      courseA_maze_seq_challenge2:
        courseA_maze_seq_challenge2_a: 试着用手指数一下空格。记住不要数你开始的空间!
      courseA_maze_seq_challenge2_2018:
        courseA_maze_seq_challenge2_a: 试着用手指数一下空格。记住不要数你开始的空间!
      courseA_maze_seq_challenge2_2019:
        courseA_maze_seq_challenge2_a: 试着用手指数一下空格。记住不要数你开始的空间!
      courseA_playLab_events2:
        courseA_playLab_events2_a: 请找出可以让狗说些什么的模块。
        courseA_playLab_events2_b: |-
          这是你要解决这问题要用的代码：

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">1</title>
          <title name="VALUE">你好。</title>
          </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events2_2018:
        courseA_playLab_events2_a: 请找出可以让狗说些什么的模块。
        courseA_playLab_events2_b: |-
          这是你要解决这问题要用的代码：

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">1</title>
          <title name="VALUE">你好。</title>
          </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events2_2019:
        courseA_playLab_events2_a: 请找出可以让狗说些什么的模块。
        courseA_playLab_events2_b: |-
          这是你要解决这问题要用的代码：

          <xml>
          <block type="when_run" movable="false" deletable="false">
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">1</title>
          <title name="VALUE">你好。</title>
          </block>
          </next>
          </block>
          </xml>
      courseA_playLab_events3:
        courseA_playLab_events3_a: |-
          拖拽此模块<xml><block type="studio_move">

          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block></xml>并放在此模块的下面<xml><block type="studio_whenArrow">
          <title name="VALUE">左</title>
          </block></xml>
        courseA_playLab_events3_b: 请记住, 在您编写完程序后, 使用左箭头键将乔治移动到旗那里。当国旗变绿的时候就完成了.
      courseA_playLab_events3_2018:
        courseA_playLab_events3_a: |-
          拖拽此模块<xml><block type="studio_move">

          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block></xml>并放在此模块的下面<xml><block type="studio_whenArrow">
          <title name="VALUE">左</title>
          </block></xml>
        courseA_playLab_events3_b: 请记住, 在您编写完程序后, 使用左箭头键将乔治移动到旗那里。当国旗变绿的时候就完成了.
      courseA_playLab_events3_2019:
        courseA_playLab_events3_a: |-
          拖拽此模块<xml><block type="studio_move">

          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block></xml>并放在此模块的下面<xml><block type="studio_whenArrow">
          <title name="VALUE">左</title>
          </block></xml>
        courseA_playLab_events3_b: 请记住, 在您编写完程序后, 使用左箭头键将乔治移动到旗那里。当国旗变绿的时候就完成了.
      courseA_playLab_events4:
        courseA_playLab_events4_a: |-
          这是您将要让乔治右移的事件模块：

          <xml><block type="studio_move">

          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></xml>
        courseA_playLab_events4_b: |-
          这是您将要完成此关卡的代码：

          <xml><block type="studio_whenArrow">

          <title name="VALUE">right</title>
          <next>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></next></block></xml>
      courseA_playLab_events4_2018:
        courseA_playLab_events4_a: |-
          这是您将要让乔治右移的事件模块：

          <xml><block type="studio_move">

          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></xml>
        courseA_playLab_events4_b: |-
          这是您将要完成此关卡的代码：

          <xml><block type="studio_whenArrow">

          <title name="VALUE">right</title>
          <next>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></next></block></xml>
      courseA_playLab_events4_2019:
        courseA_playLab_events4_a: |-
          这是您将要让乔治右移的事件模块：

          <xml><block type="studio_move">

          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></xml>
        courseA_playLab_events4_b: |-
          这是您将要完成此关卡的代码：

          <xml><block type="studio_whenArrow">

          <title name="VALUE">right</title>
          <next>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">2</title>
          </block></next></block></xml>
      courseA_playLab_events5:
        courseA_playLab_events5_a: |-
          这是要用来让乔治上下移动的事件模块：

          <xml><block type="studio_whenArrow">
              <title name="VALUE">上</title>
            </block></xml>
          和
          <xml><block type="studio_whenArrow">
              <title name="VALUE">下</title>
            </block></xml>
        courseA_playLab_events5_b: "您是否知道可以通过单击块中的图片并选择新的键来更改事件的方向键？ \n\n![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)"
      courseA_playLab_events5_2018:
        courseA_playLab_events5_a: |-
          这是要用来让乔治上下移动的事件模块：

          <xml><block type="studio_whenArrow">
              <title name="VALUE">上</title>
            </block></xml>
          和
          <xml><block type="studio_whenArrow">
              <title name="VALUE">下</title>
            </block></xml>
        courseA_playLab_events5_b: "您是否知道可以通过单击块中的图片并选择新的键来更改事件的方向键？ \n\n![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)"
      courseA_playLab_events5_2019:
        courseA_playLab_events5_a: |-
          这是要用来让乔治上下移动的事件模块：

          <xml><block type="studio_whenArrow">
              <title name="VALUE">上</title>
            </block></xml>
          和
          <xml><block type="studio_whenArrow">
              <title name="VALUE">下</title>
            </block></xml>
        courseA_playLab_events5_b: "您是否知道可以通过单击块中的图片并选择新的键来更改事件的方向键？ \n\n![](https://images.code.org/b010b6a8131689af53b33148753c15b4-image-1492639642316.gif)"
      courseA_playLab_events6:
        courseA_playLab_events6_a: |-
          这是您要使用在点击时让乔治做些事情的事件模块：

          <xml><block type="studio_whenSpriteClicked">

          <title name="SPRITE">1</title>
          </block></xml>
        courseA_playLab_events6_b: |-
          这是您要使用来改变背景的模块：

          <xml><block type="studio_setBackground">

          <title name="VALUE">random</title>
          </block></xml>
        courseA_playLab_events6_c: |-
          这是您要使用来播放随机声音的模块：

          <xml><block type="studio_playSound">

          <title name="SOUND">随机</title>
          </block></xml>
      courseA_playLab_events6_2018:
        courseA_playLab_events6_a: |-
          这是您要使用在点击时让乔治做些事情的事件模块：

          <xml><block type="studio_whenSpriteClicked">

          <title name="SPRITE">1</title>
          </block></xml>
        courseA_playLab_events6_b: |-
          这是您要使用来改变背景的模块：

          <xml><block type="studio_setBackground">

          <title name="VALUE">random</title>
          </block></xml>
        courseA_playLab_events6_c: |-
          这是您要使用来播放随机声音的模块：

          <xml><block type="studio_playSound">

          <title name="SOUND">随机</title>
          </block></xml>
      courseA_playLab_events6_2019:
        courseA_playLab_events6_a: |-
          这是您要使用在点击时让乔治做些事情的事件模块：

          <xml><block type="studio_whenSpriteClicked">

          <title name="SPRITE">1</title>
          </block></xml>
        courseA_playLab_events6_b: |-
          这是您要使用来改变背景的模块：

          <xml><block type="studio_setBackground">

          <title name="VALUE">random</title>
          </block></xml>
        courseA_playLab_events6_c: |-
          这是您要使用来播放随机声音的模块：

          <xml><block type="studio_playSound">

          <title name="SOUND">随机</title>
          </block></xml>
      courseA_playLab_events7:
        courseA_playLab_events7_a: "使用此块来控制当演员碰撞时会发生什么。 \n\n<xml><block type=\"studio_whenSpriteCollided\">\n\n<title
          name=\"SPRITE1\">1</title>\n<title name=\"SPRITE2\">0</title>\n</block></xml>"
      courseA_playLab_events7_2018:
        courseA_playLab_events7_a: "使用此块来控制当演员碰撞时会发生什么。 \n\n<xml><block type=\"studio_whenSpriteCollided\">\n\n<title
          name=\"SPRITE1\">1</title>\n<title name=\"SPRITE2\">0</title>\n</block></xml>"
      courseA_playLab_events7_2019:
        courseA_playLab_events7_a: "使用此块来控制当演员碰撞时会发生什么。 \n\n<xml><block type=\"studio_whenSpriteCollided\">\n\n<title
          name=\"SPRITE1\">1</title>\n<title name=\"SPRITE2\">0</title>\n</block></xml>"
      courseA_playlab_events_challenge1:
        courseA_playlab_events_challenge1_a: "当点击罗宾时，让企鹅出现！\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_setSprite\">\n<title
          name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">3</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_b: "当点击企鹅时，让布出现！\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">3</title>\n<next>\n<block type=\"studio_setSprite\">\n<title
          name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">4</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_c: "当点击布时，让毛绒绒的怪物杰登出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">4</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">5</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_d: "当点击怪物的时候让机器人史毕福出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">5</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">6</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_e: "最后，当点击史毕福的时候让巫师温德尔出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">7</title>\n</block>\n</next>\n</block></xml>"
      courseA_playlab_events_challenge1_2018:
        courseA_playlab_events_challenge1_a: "当点击罗宾时，让企鹅出现！\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_setSprite\">\n<title
          name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">3</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_b: "当点击企鹅时，让布出现！\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">3</title>\n<next>\n<block type=\"studio_setSprite\">\n<title
          name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">4</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_c: "当点击布时，让毛绒绒的怪物杰登出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">4</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">5</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_d: "当点击怪物的时候让机器人史毕福出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">5</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">6</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_e: "最后，当点击史毕福的时候让巫师温德尔出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">7</title>\n</block>\n</next>\n</block></xml>"
      courseA_playlab_events_challenge1_2019:
        courseA_playlab_events_challenge1_a: "当点击罗宾时，让企鹅出现！\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_setSprite\">\n<title
          name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">3</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_b: "当点击企鹅时，让布出现！\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">3</title>\n<next>\n<block type=\"studio_setSprite\">\n<title
          name=\"VALUE\">\"visible\"</title>\n<title name=\"SPRITE\">4</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_c: "当点击布时，让毛绒绒的怪物杰登出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">4</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">5</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_d: "当点击怪物的时候让机器人史毕福出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">5</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">6</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge1_e: "最后，当点击史毕福的时候让巫师温德尔出现！\n\n<xml> \n<block
          type=\"studio_whenSpriteClicked\">\n<title name=\"SPRITE\">6</title>\n<next>\n<block
          type=\"studio_setSprite\">\n<title name=\"VALUE\">\"visible\"</title>\n<title
          name=\"SPRITE\">7</title>\n</block>\n</next>\n</block></xml>"
      courseA_playlab_events_challenge2:
        courseA_playlab_events_challenge2_a: "可以让小鸟唱歌。\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_saySprite\">\n<title
          name=\"SPRITE\">2</title>\n<title name=\"TEXT\">吱喳</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge2_b: |-
          可以让机器人发出咕噜声。

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">6</title>
          <next>

          <block type="studio_playSound">
          <title name="SOUND">咕噜</title>
          </block>
          </next>
          </block></xml>
        courseA_playlab_events_challenge2_c: |-
          你可以让生气的怪物咆哮。

          <xml> <block type="studio_whenSpriteClicked">

          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challenge2_2018:
        courseA_playlab_events_challenge2_a: "可以让小鸟唱歌。\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_saySprite\">\n<title
          name=\"SPRITE\">2</title>\n<title name=\"TEXT\">吱喳</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge2_b: |-
          可以让机器人发出咕噜声。

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">6</title>
          <next>

          <block type="studio_playSound">
          <title name="SOUND">咕噜</title>
          </block>
          </next>
          </block></xml>
        courseA_playlab_events_challenge2_c: |-
          你可以让生气的怪物咆哮。

          <xml> <block type="studio_whenSpriteClicked">

          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseA_playlab_events_challenge2_2019:
        courseA_playlab_events_challenge2_a: "可以让小鸟唱歌。\n\n<xml> \n<block type=\"studio_whenSpriteClicked\">\n<title
          name=\"SPRITE\">2</title>\n<next>\n<block type=\"studio_saySprite\">\n<title
          name=\"SPRITE\">2</title>\n<title name=\"TEXT\">吱喳</title>\n</block>\n</next>\n</block></xml>"
        courseA_playlab_events_challenge2_b: |-
          可以让机器人发出咕噜声。

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">6</title>
          <next>

          <block type="studio_playSound">
          <title name="SOUND">咕噜</title>
          </block>
          </next>
          </block></xml>
        courseA_playlab_events_challenge2_c: |-
          你可以让生气的怪物咆哮。

          <xml> <block type="studio_whenSpriteClicked">

          <title name="SPRITE">5</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">2</title>
          <next>
          <block type="studio_saySprite">
          <title name="SPRITE">5</title>
          <title name="TEXT">Roar!</title>
          <next>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">5</title>
          <title name="VALUE">0</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
      courseB_Scrat_ramp1_2018:
        '1': 如果斯奎特做的和你想的不一样，确保两个模块都完全链接到了一起，然后再点击"运行"。
        '2': 别害怕犯错误！试试一些办法，如果不起作用，就试试别的办法！
      courseB_Scrat_ramp1_2019:
        '1': 如果斯奎特做的和你想的不一样，确保两个模块都完全链接到了一起，然后再点击"运行"。
        '2': 别害怕犯错误！试试一些办法，如果不起作用，就试试别的办法！
      courseB_Scrat_ramp2_2018:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp2_2019:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3a_2018:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3a_2019:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3b_2018:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp3b_2019:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveSouth">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp4a_2018:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp4a_2019:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp5a_2018:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_Scrat_ramp5a_2019:
        '1': |-
          你的代码应该会像这样：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_artist_loops2:
        courseB_artist_loops2_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseB_artist_loops2_b: 尝试先运行代码, 看看艺术家最后会在那里。
      courseB_artist_loops2_2018:
        courseB_artist_loops2_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseB_artist_loops2_b: 尝试先运行代码, 看看艺术家最后会在那里。
      courseB_artist_loops2_2019:
        courseB_artist_loops2_a: 如果希望循环重复4次以上, 你可以更改该模块顶部的数字。
        courseB_artist_loops2_b: 尝试先运行代码, 看看艺术家最后会在那里。
      courseB_artist_loops3:
        courseB_artist_loops3_a: 记住使用一个`重复`循环来更好地编码！
        courseB_artist_loops3_b: 艺术家会想向南移动, 画出这条线。
      courseB_artist_loops3_2018:
        courseB_artist_loops3_a: 记住使用一个`重复`循环来更好地编码！
        courseB_artist_loops3_b: 艺术家会想向南移动, 画出这条线。
      courseB_artist_loops3_2019:
        courseB_artist_loops3_a: 记住使用一个`重复`循环来更好地编码！
        courseB_artist_loops3_b: 艺术家会想向南移动, 画出这条线。
      courseB_artist_loops4:
        courseB_artist_loops4_a: 跳转模块允许您在不绘制直线的情况下向前移动。
        courseB_artist_loops4_b: 您将需要添加一个模块到重复循环内，以解决这个关卡。
        courseB_artist_loops4_c: 不要忘记更改循环重复的次数。
      courseB_artist_loops4_2018:
        courseB_artist_loops4_a: 跳转模块允许您在不绘制直线的情况下向前移动。
        courseB_artist_loops4_b: 您将需要添加一个模块到重复循环内，以解决这个关卡。
        courseB_artist_loops4_c: 不要忘记更改循环重复的次数。
      courseB_artist_loops4_2019:
        courseB_artist_loops4_a: 跳转模块允许您在不绘制直线的情况下向前移动。
        courseB_artist_loops4_b: 您将需要添加一个模块到重复循环内，以解决这个关卡。
        courseB_artist_loops4_c: 不要忘记更改循环重复的次数。
      courseB_artist_loops5:
        courseB_artist_loops5_a: 拖出一个`重复`循环，然后把其他模块放在它里面。需要重复几次？
      courseB_artist_loops5_2018:
        courseB_artist_loops5_a: 拖出一个`重复`循环，然后把其他模块放在它里面。需要重复几次？
      courseB_artist_loops5_2019:
        courseB_artist_loops5_a: 拖出一个`重复`循环，然后把其他模块放在它里面。需要重复几次？
      courseB_artist_loops6:
        courseB_artist_loops6_b: 试着在一张纸上记下移动的路线, 并找出模式。
      courseB_artist_loops6_2018:
        courseB_artist_loops6_b: 试着在一张纸上记下移动的路线, 并找出模式。
      courseB_artist_loops6_2019:
        courseB_artist_loops6_b: 试着在一张纸上记下移动的路线, 并找出模式。
      courseB_artist_loops7:
        courseB_artist_loops7_a: 这个挑战使用了**4**个循环，一个接一个！
        courseB_artist_loops7_b: 请注意每个循环制作往不同方向上移动的楼梯模式。
        courseB_artist_loops7_c: |-
          循环应该这样做：

          -   循环1

          -   向右

          -   向下

          -   循环2

          -   向右
              \-向上

          -   循环3

          -   向左

          -   向上

          -   循环4

          -   向左

          -   向下
      courseB_artist_loops7_2018:
        courseB_artist_loops7_a: 这个挑战使用了**4**个循环，一个接一个！
        courseB_artist_loops7_b: 请注意每个循环制作往不同方向上移动的楼梯模式。
        courseB_artist_loops7_c: |-
          循环应该这样做：

          -   循环1

          -   向右

          -   向下

          -   循环2

          -   向右
              \-向上

          -   循环3

          -   向左

          -   向上

          -   循环4

          -   向左

          -   向下
      courseB_artist_loops7_2019:
        courseB_artist_loops7_a: 这个挑战使用了**4**个循环，一个接一个！
        courseB_artist_loops7_b: 请注意每个循环制作往不同方向上移动的楼梯模式。
        courseB_artist_loops7_c: |-
          循环应该这样做：

          -   循环1

          -   向右

          -   向下

          -   循环2

          -   向右
              \-向上

          -   循环3

          -   向左

          -   向上

          -   循环4

          -   向左

          -   向下
      courseB_artist_loops8:
        courseB_artist_loops8_a: 您需要重复模式多少次来制作楼梯？
        courseB_artist_loops8_b: 尝试运行给出的代码来查看它的执行。
      courseB_artist_loops8_2018:
        courseB_artist_loops8_a: 您需要重复模式多少次来制作楼梯？
        courseB_artist_loops8_b: 尝试运行给出的代码来查看它的执行。
      courseB_artist_loops8_2019:
        courseB_artist_loops8_a: 您需要重复模式多少次来制作楼梯？
        courseB_artist_loops8_b: 尝试运行给出的代码来查看它的执行。
      courseB_artist_loops9:
        courseB_artist_loops9_a: 请记住, 跳跃模块可以用来移动, 而无需绘制直线。
        courseB_artist_loops9_b: 您将使用 W 模块来解决这个关卡。
        courseB_artist_loops9_c: 想不出在哪里放此循环吗？请试着逐步写下代码并寻找规律模式。
      courseB_artist_loops9_2018:
        courseB_artist_loops9_a: 请记住, 跳跃模块可以用来移动, 而无需绘制直线。
        courseB_artist_loops9_b: 您将使用 W 模块来解决这个关卡。
        courseB_artist_loops9_c: 想不出在哪里放此循环吗？请试着逐步写下代码并寻找规律模式。
      courseB_artist_loops9_2019:
        courseB_artist_loops9_a: 请记住, 跳跃模块可以用来移动, 而无需绘制直线。
        courseB_artist_loops9_b: 您将使用 W 模块来解决这个关卡。
        courseB_artist_loops9_c: 想不出在哪里放此循环吗？请试着逐步写下代码并寻找规律模式。
      courseB_artist_loops_challenge1:
        courseB_artist_loops_challenge1_a: '像这样的模块:  <xml> <block type="simple_move_up_right"/></xml>
          将让您的艺术家在斜线上移动！'
        courseB_artist_loops_challenge1_b: 当你完成一个骰子, `跳`到下一个!
        courseB_artist_loops_challenge1_c: '您将需要`移动`或`跳过`一些相同的行两次。 '
      courseB_artist_loops_challenge1_2018:
        courseB_artist_loops_challenge1_a: '像这样的模块:  <xml> <block type="simple_move_up_right"/></xml>
          将让您的艺术家在斜线上移动！'
        courseB_artist_loops_challenge1_b: 当你完成一个骰子, `跳`到下一个!
        courseB_artist_loops_challenge1_c: '您将需要`移动`或`跳过`一些相同的行两次。 '
      courseB_artist_loops_challenge1_2019:
        courseB_artist_loops_challenge1_a: '像这样的模块:  <xml> <block type="simple_move_up_right"/></xml>
          将让您的艺术家在斜线上移动！'
        courseB_artist_loops_challenge1_b: 当你完成一个骰子, `跳`到下一个!
        courseB_artist_loops_challenge1_c: '您将需要`移动`或`跳过`一些相同的行两次。 '
      courseB_artist_loops_challenge2:
        courseB_artist_loops_challenge2_a: 绘制 X 的代码已经给你了。所有你需要做的是重复 X 和`跳转`到下一个点。
        courseB_artist_loops_challenge2_b: 您可以使用 "跳转" 模块移动到其他位置。
      courseB_artist_loops_challenge2_2018:
        courseB_artist_loops_challenge2_a: 绘制 X 的代码已经给你了。所有你需要做的是重复 X 和`跳转`到下一个点。
        courseB_artist_loops_challenge2_b: 您可以使用 "跳转" 模块移动到其他位置。
      courseB_artist_loops_challenge2_2019:
        courseB_artist_loops_challenge2_a: 绘制 X 的代码已经给你了。所有你需要做的是重复 X 和`跳转`到下一个点。
        courseB_artist_loops_challenge2_b: 您可以使用 "跳转" 模块移动到其他位置。
      courseB_collector_loops1:
        courseB_collector_loops1_a: 当您站在上面时, <xml><block type="collector_collect_simplified"/></xml>
          块可以用来拾取宝藏。
      courseB_collector_loops10:
        courseB_collector_loops10_a: 如果想不出在哪里放置`重复`循环，请逐步写下代码并寻找规律。
        courseB_collector_loops10_b: 试着在一张纸上写下移动的情况, 来寻找共同的模式。
      courseB_collector_loops10_2018:
        courseB_collector_loops10_a: 如果想不出在哪里放置`重复`循环，请逐步写下代码并寻找规律。
        courseB_collector_loops10_b: 试着在一张纸上写下移动的情况, 来寻找共同的模式。
      courseB_collector_loops10_2019:
        courseB_collector_loops10_a: 如果想不出在哪里放置`重复`循环，请逐步写下代码并寻找规律。
        courseB_collector_loops10_b: 试着在一张纸上写下移动的情况, 来寻找共同的模式。
      courseB_collector_loops1_2018:
        courseB_collector_loops1_a: 当您站在上面时, <xml><block type="collector_collect_simplified"/></xml>
          块可以用来拾取宝藏。
      courseB_collector_loops1_2019:
        courseB_collector_loops1_a: 当您站在上面时, <xml><block type="collector_collect_simplified"/></xml>
          块可以用来拾取宝藏。
      courseB_collector_loops2:
        courseB_collector_loops2_a: 在你收集财宝之前, 你必须先向前移动。
        courseB_collector_loops2_b: 当您到达有宝藏的地方时, 请使用 <xml><block type="collector_collect"/></xml>模块来拾取它。
      courseB_collector_loops2_2018:
        courseB_collector_loops2_a: 在你收集财宝之前, 你必须先向前移动。
        courseB_collector_loops2_b: 当您到达有宝藏的地方时, 请使用 <xml><block type="collector_collect"/></xml>模块来拾取它。
      courseB_collector_loops2_2019:
        courseB_collector_loops2_a: 在你收集财宝之前, 你必须先向前移动。
        courseB_collector_loops2_b: 当您到达有宝藏的地方时, 请使用 <xml><block type="collector_collect"/></xml>模块来拾取它。
      courseB_collector_loops3:
        courseB_collector_prog3_a: 请试着使用一个 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml>模块来收集宝藏。
        courseB_collector_prog3_b: 请记住, 您可以在重复循环中放置多个块。
      courseB_collector_loops3_2018:
        courseB_collector_prog3_a: 请试着使用一个 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml>模块来收集宝藏。
        courseB_collector_prog3_b: 请记住, 您可以在重复循环中放置多个块。
      courseB_collector_loops3_2019:
        courseB_collector_prog3_a: 请试着使用一个 <xml><block type="controls_repeat_simplified_dropdown"><title
          name="TIMES" config="3-10">5</title></block></xml>模块来收集宝藏。
        courseB_collector_prog3_b: 请记住, 您可以在重复循环中放置多个块。
      courseB_collector_loops4:
        courseB_collector_loops4_a: 请试着使用步进按钮来找出问题所在。
        courseB_collector_loops4_b: 要改变劳雷尔所走的距离, 请更改循环运行的次数。
        courseB_collector_loops4_c: 在完成了`重复`循环后，劳雷尔需要走下来, 并收集宝藏,!
      courseB_collector_loops4_2018:
        courseB_collector_loops4_a: 请试着使用步进按钮来找出问题所在。
        courseB_collector_loops4_b: 要改变劳雷尔所走的距离, 请更改循环运行的次数。
        courseB_collector_loops4_c: 在完成了`重复`循环后，劳雷尔需要走下来, 并收集宝藏,!
      courseB_collector_loops4_2019:
        courseB_collector_loops4_a: 请试着使用步进按钮来找出问题所在。
        courseB_collector_loops4_b: 要改变劳雷尔所走的距离, 请更改循环运行的次数。
        courseB_collector_loops4_c: 在完成了`重复`循环后，劳雷尔需要走下来, 并收集宝藏,!
      courseB_collector_loops5:
        courseB_collector_loops5_a: 请使用一个以上的循环来完成任务。
        courseB_collector_loops5_b: 尝试运行代码几次, 看看会发生什么。
      courseB_collector_loops5_2018:
        courseB_collector_loops5_a: 请使用一个以上的循环来完成任务。
        courseB_collector_loops5_b: 尝试运行代码几次, 看看会发生什么。
      courseB_collector_loops5_2019:
        courseB_collector_loops5_a: 请使用一个以上的循环来完成任务。
        courseB_collector_loops5_b: 尝试运行代码几次, 看看会发生什么。
      courseB_collector_loops6:
        courseB_collector_loops6_a: 无法找出哪里出错？请使用"步进"按钮来逐模块运行程序。
        courseB_collector_loops6_b: 通过单击 "3" 并选择其他数字, 可以更改重复循环运行的次数。
        courseB_collector_loops6_c: 您需使用 3次 ' 重复 ' 循环来解决这个关卡。
        courseB_collector_loops6_d: 如果你感到迷惑, 试着把这个关卡分成3块。
      courseB_collector_loops6_2018:
        courseB_collector_loops6_a: 无法找出哪里出错？请使用"步进"按钮来逐模块运行程序。
        courseB_collector_loops6_b: 通过单击 "3" 并选择其他数字, 可以更改重复循环运行的次数。
        courseB_collector_loops6_c: |-
          需使用 3 次 `重复` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> 循环来通过此关。
        courseB_collector_loops6_d: 如果你感到迷惑, 试着把这个关卡分成3块。
      courseB_collector_loops6_2019:
        courseB_collector_loops6_a: 无法找出哪里出错？请使用"步进"按钮来逐模块运行程序。
        courseB_collector_loops6_b: 通过单击 "3" 并选择其他数字, 可以更改重复循环运行的次数。
        courseB_collector_loops6_c: |-
          需使用 3 次 `重复` <xml><block type="controls_repeat_simplified">
              <title name="TIMES">???</title>
            </block></xml> 循环来通过此关。
        courseB_collector_loops6_d: 如果你感到迷惑, 试着把这个关卡分成3块。
      courseB_collector_loops7:
        courseB_collector_loops7_a: 如果此关卡太难，请试着在纸张上把它画出来，看看怎么解决。
        courseB_collector_loops7_b: 你将需要3个重复循环来解决这个关卡, 最后不要忘记额外的宝藏!
      courseB_collector_loops7_2018:
        courseB_collector_loops7_a: 如果此关卡太难，请试着在纸张上把它画出来，看看怎么解决。
        courseB_collector_loops7_b: 你将需要3个重复循环来解决这个关卡, 最后不要忘记额外的宝藏!
      courseB_collector_loops7_2019:
        courseB_collector_loops7_a: 如果此关卡太难，请试着在纸张上把它画出来，看看怎么解决。
        courseB_collector_loops7_b: 你将需要3个重复循环来解决这个关卡, 最后不要忘记额外的宝藏!
      courseB_collector_loops8:
        courseB_collector_loops8_challenge_a: 如果无法想出在哪里放置重复循环，请逐步写下代码并寻找规律。
      courseB_collector_loops8_2018:
        courseB_collector_loops8_challenge_a: 如果无法想出在哪里放置重复循环，请逐步写下代码并寻找规律。
      courseB_collector_loops8_2019:
        courseB_collector_loops8_challenge_a: 如果无法想出在哪里放置重复循环，请逐步写下代码并寻找规律。
      courseB_collector_loops9:
        courseB_collector_loops9_a: '这看起来太难了吗？请把它分解成3个小问题，这样会感觉容易些。  '
        courseB_collector_loops9_b: 您将需要3个重复循环, 一个接一个, 来解决这个关卡。
      courseB_collector_loops9_2018:
        courseB_collector_loops9_a: '这看起来太难了吗？请把它分解成3个小问题，这样会感觉容易些。  '
        courseB_collector_loops9_b: 您将需要3个重复循环, 一个接一个, 来解决这个关卡。
      courseB_collector_loops9_2019:
        courseB_collector_loops9_a: '这看起来太难了吗？请把它分解成3个小问题，这样会感觉容易些。  '
        courseB_collector_loops9_b: 您将需要3个重复循环, 一个接一个, 来解决这个关卡。
      courseB_collector_loops_challenge1:
        courseB_collector_loops_challenge1_b: |-
          从循环执行以下命令开始：

          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: |-
          在每条路径之间向东移动两次。

          <xml>
          <block type="maze_moveEast"><next>
          <block type="maze_moveEast"></block></next></block>
          </xml>

          只能使用14个模块来实现。单击查看更多解决方案来得到更多提示。
        courseB_collector_loops_challenge1_d: |-
          试试这个！

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge1_2018:
        courseB_collector_loops_challenge1_b: |-
          从循环执行以下命令开始：

          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: |-
          在每条路径之间向东移动两次。

          <xml>
          <block type="maze_moveEast"><next>
          <block type="maze_moveEast"></block></next></block>
          </xml>

          只能使用14个模块来实现。单击查看更多解决方案来得到更多提示。
        courseB_collector_loops_challenge1_d: |-
          试试这个！

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge1_2019:
        courseB_collector_loops_challenge1_b: |-
          从循环执行以下命令开始：

          <xml>
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"></block>
          </next>
          </block>
          </xml>
        courseB_collector_loops_challenge1_c: |-
          在每条路径之间向东移动两次。

          <xml>
          <block type="maze_moveEast"><next>
          <block type="maze_moveEast"></block></next></block>
          </xml>

          只能使用14个模块来实现。单击查看更多解决方案来得到更多提示。
        courseB_collector_loops_challenge1_d: |-
          试试这个！

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="maze_moveNorth"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="maze_moveEast">
          <next>
          <block type="controls_repeat_simplified">
          <title name="TIMES">5</title>
          <statement name="DO">
          <block type="maze_moveSouth">
          <next>
          <block type="collector_collect"/>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge2:
        courseB_collector_loops_challenge2_a: 如果出了差错, 不要害怕重新开始。不要放弃!
        courseB_collector_loops_challenge2_b: "如果你重复这个模式, 劳雷尔不会撞到洞穴底部的墙上! \n\n<xml><block
          type=\"maze_moveEast\">\n<next>\n<block type=\"collector_collect\">\n<next>\n<block
          type=\"maze_moveWest\">\n<next>\n<block type=\"maze_moveWest\">\n<next>\n<block
          type=\"maze_moveSouth\"/>\n</next>\n</block>\n</next>\n</block>\n</next>\n</block>\n</next>\n</block></xml>"
        courseB_collector_loops_challenge2_c: 尝试使用 "重复" 块收集最后一堆的宝藏!
        courseB_collector_loops_challenge2_d: |-
          尝试此解决方案：

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">4</title>
          <statement name="DO">
          <block type="maze_moveEast">
          <next>
          <block type="collector_collect">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveWest">
          <next>
          <block type="maze_moveSouth"/>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_simplified_dropdown">
          <title name="TIMES" config="3-10">6</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseB_collector_loops_challenge2a:
        courseB_collector_loops_challenge2a_a: 如果出了问题，请试着调试它。不要放弃！
        courseB_collector_loops_challenge2a_b: 请看看此选项以通过迷宫。您是否看到了您可以重复的模式？
        courseB_collector_loops_challenge2a_c: 要收集所有的宝藏，要么需要添加2 个<xml> <block type="collector_collect"/></xml>模块到您的循环内，或者把此模块放到它自己的`重复`模块中。
      courseB_collector_loops_challenge2a_2018:
        courseB_collector_loops_challenge2a_a: 如果出了问题，请试着调试它。不要放弃！
        courseB_collector_loops_challenge2a_b: 请看看此选项以通过迷宫。您是否看到了您可以重复的模式？
        courseB_collector_loops_challenge2a_c: 要收集所有的宝藏，要么需要添加2 个<xml> <block type="collector_collect"/></xml>模块到您的循环内，或者把此模块放到它自己的`重复`模块中。
      courseB_collector_loops_challenge2a_2019:
        courseB_collector_loops_challenge2a_a: 如果出了问题，请试着调试它。不要放弃！
        courseB_collector_loops_challenge2a_b: 请看看此选项以通过迷宫。您是否看到了您可以重复的模式？
        courseB_collector_loops_challenge2a_c: 要收集所有的宝藏，要么需要添加2 个<xml> <block type="collector_collect"/></xml>模块到您的循环内，或者把此模块放到它自己的`重复`模块中。
      courseB_iceage_loops1:
        courseB_iceage_loops1_a: 小心破冰！斯奎特会掉下去的！
        courseB_iceage_loops1_b: |-
          需要用这个模块：

          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops10:
        courseB_iceage_loops10_a: 小心破冰！斯奎特会掉到水里的！
        courseB_iceage_loops10_b: 试试大声说出步骤，或将它们写到纸上。找到什么规律了吗？
        courseB_iceage_loops10_c: 这是一个很长的迷宫！沿这条路走。
      courseB_iceage_loops10_2019:
        courseB_iceage_loops10_a: 小心破冰！斯奎特会掉到水里的！
        courseB_iceage_loops10_b: 试试大声说出步骤，或将它们写到纸上。找到什么规律了吗？
        courseB_iceage_loops10_c: 这是一个很长的迷宫！沿这条路走。
      courseB_iceage_loops1_2019:
        courseB_iceage_loops1_a: 小心破冰！斯奎特会掉下去的！
        courseB_iceage_loops1_b: |-
          需要用这个模块：

          <xml><block type="maze_moveEast"/></xml>
      courseB_iceage_loops2:
        courseB_iceage_loops2_a: 将这一关分成两部分，一个在角落前，另一个在角落后。
        courseB_iceage_loops2_b: 如果被难住了，试着大声说出步骤来。
        courseB_iceage_loops2_c: 修复这条路，来帮助斯奎特到达橡子。
      courseB_iceage_loops2_2019:
        courseB_iceage_loops2_a: 将这一关分成两部分，一个在角落前，另一个在角落后。
        courseB_iceage_loops2_b: 如果被难住了，试着大声说出步骤来。
        courseB_iceage_loops2_c: 修复这条路，来帮助斯奎特到达橡子。
      courseB_iceage_loops3:
        courseB_iceage_loops3_a: |-
          用这个新的模块！
          <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="3-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: 要重复代码, 拖出一个`重复`循环, 然后把它放在你想要的模块里面。
      courseB_iceage_loops3_2019:
        courseB_iceage_loops3_a: |-
          用这个新的模块！
          <xml><block type="controls_repeat_simplified_dropdown">

          <title name="TIMES" config="3-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: 要重复代码, 拖出一个`重复`循环, 然后把它放在你想要的模块里面。
      courseB_iceage_loops4:
        courseB_iceage_loops4_a: 写下斯奎特要到达橡子的步骤。找到规律了吗？
        courseB_iceage_loops4_b: 别害怕运行你的代码，看看会发生什么！
        courseB_iceage_loops4_c: 这是斯奎特应该走的路。
      courseB_iceage_loops4_2019:
        courseB_iceage_loops4_a: 写下斯奎特要到达橡子的步骤。找到规律了吗？
        courseB_iceage_loops4_b: 别害怕运行你的代码，看看会发生什么！
        courseB_iceage_loops4_c: 这是斯奎特应该走的路。
      courseB_iceage_loops6:
        courseB_iceage_loops6_a: 最终的代码会有**三个**移动模块。
        courseB_iceage_loops6_b: 你只需要再添加**一个**循环！
        courseB_iceage_loops6_c: 最终的路应该像这样。
      courseB_iceage_loops6_2019:
        courseB_iceage_loops6_a: 最终的代码会有**三个**移动模块。
        courseB_iceage_loops6_b: 你只需要再添加**一个**循环！
        courseB_iceage_loops6_c: 最终的路应该像这样。
      courseB_iceage_loops7:
        courseB_iceage_loops7_a: 如果被难住了，试着在纸上写下步骤。找到规律了吗？
        courseB_iceage_loops7_b: 斯奎特想要拿到橡子就得走这条路。
      courseB_iceage_loops7_2019:
        courseB_iceage_loops7_a: 如果被难住了，试着在纸上写下步骤。找到规律了吗？
        courseB_iceage_loops7_b: 斯奎特想要拿到橡子就得走这条路。
      courseB_iceage_loops8:
        courseB_iceage_loops8_a: 这些移动模块正确吗？你还能改什么？
        courseB_iceage_loops8_b: 第一个循环应当重复**3**次，第二个应当重复**5**次，第三个循环应当重复**4**次，最后一个循环应当重复**4**次。
        courseB_iceage_loops8_c: 使用循环帮助斯奎特沿着这条路走。
      courseB_iceage_loops8_2019:
        courseB_iceage_loops8_a: 这些移动模块正确吗？你还能改什么？
        courseB_iceage_loops8_b: 第一个循环应当重复**3**次，第二个应当重复**5**次，第三个循环应当重复**4**次，最后一个循环应当重复**4**次。
        courseB_iceage_loops8_c: 使用循环帮助斯奎特沿着这条路走。
      courseB_iceage_loops9:
        courseB_iceage_loops9_a: 有困难吗？试着将这一关分成更小的部分。别害怕运行你的代码！
        courseB_iceage_loops9_b: 最后的代码会有**4**个循环。
        courseB_iceage_loops9_c: 斯奎特应该沿着这条路去找橡子。
      courseB_iceage_loops9_2019:
        courseB_iceage_loops9_a: 有困难吗？试着将这一关分成更小的部分。别害怕运行你的代码！
        courseB_iceage_loops9_b: 最后的代码会有**4**个循环。
        courseB_iceage_loops9_c: 斯奎特应该沿着这条路去找橡子。
      courseB_maze_seq1:
        courseB_maze_seq1_a: 将模块连接到 <xml><block type="when_run"/></xml>模块以使鸟移动!
        courseB_maze_seq1_b: 拖动三个 <xml><block type="maze_moveSouth"/></xml>箭头并将它们连接到<xml><block
          type="when_run"/></xml>模块中, 以将您的鸟带到猪那里。
      courseB_maze_seq10:
        courseB_maze_seq10_a: 请试着先在一张纸上写下步骤。
        courseB_maze_seq10_b: 你需要在两个不同方向移动来够到猪。
      courseB_maze_seq11:
        courseB_maze_seq11_a: 请试着先在一张纸上写下步骤。
        courseB_maze_seq11_b: '解开关卡的两个部分: 一个在拐角前, 一个在拐角后。'
      courseB_maze_seq1_2018:
        courseB_maze_seq1_a: 将模块连接到 <xml><block type="when_run"/></xml>模块以使鸟移动!
        courseB_maze_seq1_b: 拖动三个 <xml><block type="maze_moveSouth"/></xml>箭头并将它们连接到<xml><block
          type="when_run"/></xml>模块中, 以将您的鸟带到猪那里。
      courseB_maze_seq1_2019:
        courseB_maze_seq1_a: 将模块连接到 <xml><block type="when_run"/></xml>模块以使鸟移动!
        courseB_maze_seq1_b: 拖动三个 <xml><block type="maze_moveSouth"/></xml>箭头并将它们连接到<xml><block
          type="when_run"/></xml>模块中, 以将您的鸟带到猪那里。
      courseB_maze_seq2:
        courseB_maze_seq2_a: 该程序缺少1 个模块，您是否可以找出是哪个？
        courseB_maze_seq2_b: 尝试运行所给出的代码, 看看鸟下一步该做什么。
      courseB_maze_seq3:
        courseB_maze_seq3_a: 其中一个模块把鸟移向了错误的方向。你能找出是哪块并用正确的模块来取代它吗？
        courseB_maze_seq3_b: 请尝试使用 "步进" 按钮查找程序出错的位置。是第一步吗？还是第二步？
        courseB_maze_seq3_c: <xml><block type="maze_moveWest"/></xml>模块似乎没有将鸟移动到正确的方向。
      courseB_maze_seq4:
        courseB_maze_seq4_a: 试着一次加一条指令，直到到达猪那里。
        courseB_maze_seq4_b: 您需要使用 <xml><block type="maze_moveEast"/></xml>模块来解决此关卡。
      courseB_maze_seq4_2018:
        courseB_maze_seq4_a: 试着一次加一条指令，直到到达猪那里。
        courseB_maze_seq4_b: 您需要使用 <xml><block type="maze_moveEast"/></xml>模块来解决此关卡。
      courseB_maze_seq4_2019:
        courseB_maze_seq4_a: 试着一次加一条指令，直到到达猪那里。
        courseB_maze_seq4_b: 您需要使用 <xml><block type="maze_moveEast"/></xml>模块来解决此关卡。
      courseB_maze_seq5:
        courseB_maze_seq5_a: 如果你被卡住了, 试着在纸上画出路径。
        courseB_maze_seq5_b: 有两种方法来解决这个难题！
        courseB_maze_seq5_c: 不知道怎么去找猪？ 尝试此路径。
      courseB_maze_seq5_2018:
        courseB_maze_seq5_a: 如果你被卡住了, 试着在纸上画出路径。
        courseB_maze_seq5_b: 有两种方法来解决这个难题！
        courseB_maze_seq5_c: 不知道怎么去找猪？ 尝试此路径。
      courseB_maze_seq5_2019:
        courseB_maze_seq5_a: 如果你被卡住了, 试着在纸上画出路径。
        courseB_maze_seq5_b: 有两种方法来解决这个难题！
        courseB_maze_seq5_c: 不知道怎么去找猪？ 尝试此路径。
      courseB_maze_seq6:
        courseB_maze_seq6_a: 最终的代码应该有3个移动模块。
        courseB_maze_seq6_b: 如果你被卡住了, 试着分成两个部分来解决关卡, 一个是侧面的路, 一条是从上到下的。
        courseB_maze_seq5_c: 有两种方法来解决这个难题！
        courseB_maze_seq5_d: 不知道怎么去找猪？尝试这条路!
      courseB_maze_seq6_2018:
        courseB_maze_seq6_a: 最终的代码应该有3个移动模块。
        courseB_maze_seq6_b: 如果你被卡住了, 试着分成两个部分来解决关卡, 一个是侧面的路, 一条是从上到下的。
        courseB_maze_seq5_c: 有两种方法来解决这个难题！
        courseB_maze_seq5_d: 不知道怎么去找猪？尝试这条路!
      courseB_maze_seq6_2019:
        courseB_maze_seq6_a: 最终的代码应该有3个移动模块。
        courseB_maze_seq6_b: 如果你被卡住了, 试着分成两个部分来解决关卡, 一个是侧面的路, 一条是从上到下的。
        courseB_maze_seq5_c: 有两种方法来解决这个难题！
        courseB_maze_seq5_d: 不知道怎么去找猪？尝试这条路!
      courseB_maze_seq7:
        courseB_maze_seq7_a: 添加一个模块, 让鸟到猪那！
        courseB_maze_seq7_b: 尝试运行给你的代码, 看看你是什么结果。
        courseB_maze_seq7_c: 够不到猪吗？ 尝试这条路!
      courseB_maze_seq7_2018:
        courseB_maze_seq7_a: 添加一个模块, 让鸟到猪那！
        courseB_maze_seq7_b: 尝试运行给你的代码, 看看你是什么结果。
        courseB_maze_seq7_c: 够不到猪吗？ 尝试这条路!
      courseB_maze_seq7_2019:
        courseB_maze_seq7_a: 添加一个模块, 让鸟到猪那！
        courseB_maze_seq7_b: 尝试运行给你的代码, 看看你是什么结果。
        courseB_maze_seq7_c: 够不到猪吗？ 尝试这条路!
      courseB_maze_seq8:
        courseB_maze_seq8_a: 试着一次添加一个模块, 直到你解开这个关卡。
        courseB_maze_seq8_b: 有两种方法来解决这个难题 ！
        courseB_maze_seq8_c: 不知道该走哪条路？尝试这条路!
      courseB_maze_seq8_2018:
        courseB_maze_seq8_a: 试着一次添加一个模块, 直到你解开这个关卡。
        courseB_maze_seq8_b: 有两种方法来解决这个难题 ！
        courseB_maze_seq8_c: 不知道该走哪条路？尝试这条路!
      courseB_maze_seq8_2019:
        courseB_maze_seq8_a: 试着一次添加一个模块, 直到你解开这个关卡。
        courseB_maze_seq8_b: 有两种方法来解决这个难题 ！
        courseB_maze_seq8_c: 不知道该走哪条路？尝试这条路!
      courseB_maze_seq9:
        courseB_maze_seq9_a: 请试着先在一张纸上写下所有的步骤。
        courseB_maze_seq9_b: 每次生成一个模块，并在生成时进行测试。
        courseB_maze_seq9_c: 有两种方法来解决这个难题！
        courseB_maze_seq9_d: 卡住了? 尝试这条路!
      courseB_maze_seq9_2018:
        courseB_maze_seq9_a: 请试着先在一张纸上写下所有的步骤。
        courseB_maze_seq9_b: 每次生成一个模块，并在生成时进行测试。
        courseB_maze_seq9_c: 有两种方法来解决这个难题！
        courseB_maze_seq9_d: 卡住了? 尝试这条路!
      courseB_maze_seq9_2019:
        courseB_maze_seq9_a: 请试着先在一张纸上写下所有的步骤。
        courseB_maze_seq9_b: 每次生成一个模块，并在生成时进行测试。
        courseB_maze_seq9_c: 有两种方法来解决这个难题！
        courseB_maze_seq9_d: 卡住了? 尝试这条路!
      courseB_maze_seq_challenge1:
        courseB_maze_seq_challenge1_a: 这一次最短路径可能无法解决问题。
        courseB_maze_seq_challenge1_b: 请尝试使用 <xml><block type="maze_moveWest"/></xml>
          模块来开始。
      courseB_maze_seq_challenge1_2018:
        courseB_maze_seq_challenge1_a: 这一次最短路径可能无法解决问题。
        courseB_maze_seq_challenge1_b: 请尝试使用 <xml><block type="maze_moveWest"/></xml>
          模块来开始。
      courseB_maze_seq_challenge1_2019:
        courseB_maze_seq_challenge1_a: 这一次最短路径可能无法解决问题。
        courseB_maze_seq_challenge1_b: 请尝试使用 <xml><block type="maze_moveWest"/></xml>
          模块来开始。
      courseB_maze_seq_challenge2:
        courseB_maze_seq_challenge2_a: 您不需要添加或删除块来解决此关卡。
        courseB_maze_seq_challenge2_b: 重新排列模块, 并采取楼梯模式的路径。
      courseB_maze_seq_challenge2_2018:
        courseB_maze_seq_challenge2_a: 您不需要添加或删除块来解决此关卡。
        courseB_maze_seq_challenge2_b: 重新排列模块, 并采取楼梯模式的路径。
      courseB_maze_seq_challenge2_2019:
        courseB_maze_seq_challenge2_a: 您不需要添加或删除块来解决此关卡。
        courseB_maze_seq_challenge2_b: 重新排列模块, 并采取楼梯模式的路径。
      courseB_playlab_events2:
        courseB_playlab_events2_a: |-
          这个模块能让黛西说些什么

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseB_playlab_events2_2018:
        courseB_playlab_events2_a: |-
          这个模块能让黛西说些什么

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseB_playlab_events2_2019:
        courseB_playlab_events2_a: |-
          这个模块能让黛西说些什么

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseB_playlab_events3:
        courseB_playlab_events3_a: |-
          这是用来添加事件的模块：

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          这是用来改变黛西心情的模块。

          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events3_2018:
        courseB_playlab_events3_a: |-
          这是用来添加事件的模块：

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          这是用来改变黛西心情的模块。

          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events3_2019:
        courseB_playlab_events3_a: |-
          这是用来添加事件的模块：

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">0</title>
          </block>
          </xml>
        courseB_playlab_events3_b: |-
          这是用来改变黛西心情的模块。

          <xml>
          <block type="studio_setSpriteEmotion">
          <title name="SPRITE">0</title>
          <title name="VALUE">random</title>
          </block>
          </xml>
      courseB_playlab_events4:
        courseB_playlab_events4_a: |-
          这是控制左方向键的事件：

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          这就是让骑士向左移动的模块。

          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events4_2018:
        courseB_playlab_events4_a: |-
          这是控制左方向键的事件：

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          这就是让骑士向左移动的模块。

          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events4_2019:
        courseB_playlab_events4_a: |-
          这是控制左方向键的事件：

          <xml>
          <block type="studio_whenArrow">
          <title name="VALUE">left</title>
          </block>
          </xml>
        courseB_playlab_events4_b: |-
          这就是让骑士向左移动的模块。

          <xml>
          <block type="studio_move">
          <title name="SPRITE">1</title>
          <title name="DIR">8</title>
          </block>
          </xml>
      courseB_playlab_events5:
        courseB_playlab_events5_a: |-
          这是控制右方向键的事件：

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">right</title>
            </block>
            </xml>
        courseB_playlab_events5_b: |-
          这是让骑士逃跑的模块：

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block>
          </xml>
      courseB_playlab_events5_2018:
        courseB_playlab_events5_a: |-
          这是控制右方向键的事件：

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">right</title>
            </block>
            </xml>
        courseB_playlab_events5_b: |-
          这是让骑士逃跑的模块：

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block>
          </xml>
      courseB_playlab_events5_2019:
        courseB_playlab_events5_a: |-
          这是控制右方向键的事件：

          <xml>
            <block type="studio_whenArrow">
              <title name="VALUE">right</title>
            </block>
            </xml>
        courseB_playlab_events5_b: |-
          这是让骑士逃跑的模块：

          <xml>
          <block type="studio_move">
              <title name="SPRITE">1</title>
              <title name="DIR">2</title>
            </block>
          </xml>
      courseB_playlab_events6:
        courseB_playlab_events6_a: |-
          你需要这些事件模块：

          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          用绿色的"当 \_\_\_ 箭头按下" 块的下拉箭头来选择不同的方向。

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: 得到所有的旗帜来通过!
      courseB_playlab_events6_2018:
        courseB_playlab_events6_a: |-
          你需要这些事件模块：

          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          用绿色的"当 \_\_\_ 箭头按下" 块的下拉箭头来选择不同的方向。

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: 得到所有的旗帜来通过!
      courseB_playlab_events6_2019:
        courseB_playlab_events6_a: |-
          你需要这些事件模块：

          <xml>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">up</title>
          </block>
          <block type="studio_whenArrow" id="callMe">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events6_b: |-
          用绿色的"当 \_\_\_ 箭头按下" 块的下拉箭头来选择不同的方向。

          ![](https://images.code.org/b4c76f19fc2d2694c1f731e5f6e786b8-image-1501003990996.gif)
        courseB_playlab_events6_c: 得到所有的旗帜来通过!
      courseB_playlab_events7:
        courseB_playlab_events7_a: |-
          这是你要用到的事件模块：

          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          这是用来播放一个声音的模块。

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          这是让骑士消失的模块。

          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_events7_2018:
        courseB_playlab_events7_a: |-
          这是你要用到的事件模块：

          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          这是用来播放一个声音的模块。

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          这是让骑士消失的模块。

          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_events7_2019:
        courseB_playlab_events7_a: |-
          这是你要用到的事件模块：

          <xml>
          <block type="studio_whenSpriteCollided">
          <title name="SPRITE1">0</title>
          <title name="SPRITE2">1</title>
          </block>
          </xml>
        courseB_playlab_events7_b: |-
          这是用来播放一个声音的模块。

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">slap</title>
          </block>
          </xml>
        courseB_playlab_events7_c: |-
          这是让骑士消失的模块。

          <xml>
          <block type="studio_vanish">
          <title name="SPRITE">1</title>
          </block>
          </xml>
      courseB_playlab_events_challenge1:
        courseB_playlab_events_challenge1_a: |-
          当按下`▼`时, 让其他动物向下移动。

          <xml>
          <block type="studio_whenArrow" movable="false">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events_challenge1_b: |-
          用这个模块改变动物的速度：

          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          比赛结束后, 大家会怎么说？让他们交谈这次的活动：

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">啊哈！</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge1_2018:
        courseB_playlab_events_challenge1_a: |-
          当按下`▼`时, 让其他动物向下移动。

          <xml>
          <block type="studio_whenArrow" movable="false">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events_challenge1_b: |-
          用这个模块改变动物的速度：

          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          比赛结束后, 大家会怎么说？让他们交谈这次的活动：

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">啊哈！</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge1_2019:
        courseB_playlab_events_challenge1_a: |-
          当按下`▼`时, 让其他动物向下移动。

          <xml>
          <block type="studio_whenArrow" movable="false">
          <title name="VALUE">down</title>
          </block>
          </xml>
        courseB_playlab_events_challenge1_b: |-
          用这个模块改变动物的速度：

          <xml>
          <block type="studio_setSpriteSpeed">
          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.NORMAL</title>
          </block></xml>
        courseB_playlab_events_challenge1_c: |-
          比赛结束后, 大家会怎么说？让他们交谈这次的活动：

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">2</title>
          <next>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">2</title>
          <title name="VALUE">啊哈！</title>
          </block>
          </next>
          </block>
          </xml>
      courseB_playlab_events_challenge2:
        courseB_playlab_events_challenge2_a: 游戏中的每种动物都应该在被敲击时消失。它也应该在一两秒钟后回来！
        courseB_playlab_events_challenge2_b: |-
          使用其他事件模块使其他动物消失！

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          当点击动物时，使用额外的命令来播放声音或得分！

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">鼓掌</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          混合起来！

          使一些动物比其他给出更多的分数。使用不同的声音。改变动物的情绪!
      courseB_playlab_events_challenge2_2018:
        courseB_playlab_events_challenge2_a: 游戏中的每种动物都应该在被敲击时消失。它也应该在一两秒钟后回来！
        courseB_playlab_events_challenge2_b: |-
          使用其他事件模块使其他动物消失！

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          当点击动物时，使用额外的命令来播放声音或得分！

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">鼓掌</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          混合起来！

          使一些动物比其他给出更多的分数。使用不同的声音。改变动物的情绪!
      courseB_playlab_events_challenge2_2019:
        courseB_playlab_events_challenge2_a: 游戏中的每种动物都应该在被敲击时消失。它也应该在一两秒钟后回来！
        courseB_playlab_events_challenge2_b: |-
          使用其他事件模块使其他动物消失！

          <xml>
          <block type="studio_whenSpriteClicked">
          <title name="SPRITE">1</title>
          </block>
          </xml>
        courseB_playlab_events_challenge2_c: |-
          当点击动物时，使用额外的命令来播放声音或得分！

          <xml>
          <block type="studio_playSound">
          <title name="SOUND">鼓掌</title>
          </block>
          <block type="studio_changeScore"/></xml>
        courseB_playlab_events_challenge2_d: |-
          混合起来！

          使一些动物比其他给出更多的分数。使用不同的声音。改变动物的情绪!
      courseB_starWars_prog1:
        courseB_starWars_prog1_a: 尝试一次添加一个块, 然后单击 "运行" 以查看发生了什么。
        courseB_starWars_prog1_b: |-
          向东移动来通过本关。要移动多远？

          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog1_2018:
        courseB_starWars_prog1_a: 尝试一次添加一个块, 然后单击 "运行" 以查看发生了什么。
        courseB_starWars_prog1_b: |-
          向东移动来通过本关。要移动多远？

          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog1_2019:
        courseB_starWars_prog1_a: 尝试一次添加一个块, 然后单击 "运行" 以查看发生了什么。
        courseB_starWars_prog1_b: |-
          向东移动来通过本关。要移动多远？

          <xml><block type="studio_moveEast"/></xml>
      courseB_starWars_prog2:
        courseB_starWars_prog2_a: 把这个问题分成两部分。得到一堆废铁, 然后弄清楚如何得到另一堆。
      courseB_starWars_prog2_2018:
        courseB_starWars_prog2_a: 把这个问题分成两部分。得到一堆废铁, 然后弄清楚如何得到另一堆。
      courseB_starWars_prog2_2019:
        courseB_starWars_prog2_a: 把这个问题分成两部分。得到一堆废铁, 然后弄清楚如何得到另一堆。
      courseB_starWars_prog3:
        courseB_starWars_prog3_a: 您将需要移动3条路来解决这个关卡。
        courseB_starWars_prog3_b: 一次生成一段代码。运行它, 找出下步去哪里。
      courseB_starWars_prog3_2018:
        courseB_starWars_prog3_a: 您将需要移动3条路来解决这个关卡。
        courseB_starWars_prog3_b: 一次生成一段代码。运行它, 找出下步去哪里。
      courseB_starWars_prog3_2019:
        courseB_starWars_prog3_a: 您将需要移动3条路来解决这个关卡。
        courseB_starWars_prog3_b: 一次生成一段代码。运行它, 找出下步去哪里。
      courseB_starWars_prog4:
        courseB_starWars_prog4_a: 一次生成一段代码。运行它, 找出下步去哪里。
        courseB_starWars_prog4_b: |-
          试试使用`重复`模块来缩短代码。

          <xml> <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog4_2018:
        courseB_starWars_prog4_a: 一次生成一段代码。运行它, 找出下步去哪里。
        courseB_starWars_prog4_b: |-
          试试使用`重复`模块来缩短代码。

          <xml> <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog4_2019:
        courseB_starWars_prog4_a: 一次生成一段代码。运行它, 找出下步去哪里。
        courseB_starWars_prog4_b: |-
          试试使用`重复`模块来缩短代码。

          <xml> <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog5:
        courseB_starWars_prog5_a: 这种模式是不是有点像最后一个关卡？
        courseB_starWars_prog5_b: BB-8 会在他翻滚的时候抓住废铁。
        courseB_starWars_prog5_c: 用你的手指追踪这个图案。在你移动的时候数一下金属碎片。
        courseB_starWars_prog5_da: |-
          看看如果你使用解决阶梯步进关卡一样的解决方案会如何:

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2018:
        courseB_starWars_prog5_a: 这种模式是不是有点像最后一个关卡？
        courseB_starWars_prog5_b: BB-8 会在他翻滚的时候抓住废铁。
        courseB_starWars_prog5_c: 用你的手指追踪这个图案。在你移动的时候数一下金属碎片。
        courseB_starWars_prog5_da: |-
          看看如果你使用解决阶梯步进关卡一样的解决方案会如何:

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog5_2019:
        courseB_starWars_prog5_a: 这种模式是不是有点像最后一个关卡？
        courseB_starWars_prog5_b: BB-8 会在他翻滚的时候抓住废铁。
        courseB_starWars_prog5_c: 用你的手指追踪这个图案。在你移动的时候数一下金属碎片。
        courseB_starWars_prog5_da: |-
          看看如果你使用解决阶梯步进关卡一样的解决方案会如何:

          ![](https://images.code.org/866b4121069423bf03d92dcb8f2276af-image-1503709785988.09.24.png)
      courseB_starWars_prog6:
        courseB_starWars_prog6_a: 这个图案只是一个台阶, 每方向移动两步!
        courseB_starWars_prog6_b: |-
          试试使用`重复`模块来缩短代码。

          <xml> <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog6_2018:
        courseB_starWars_prog6_a: 这个图案只是一个台阶, 每方向移动两步!
        courseB_starWars_prog6_b: |-
          试试使用`重复`模块来缩短代码。

          <xml> <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog6_2019:
        courseB_starWars_prog6_a: 这个图案只是一个台阶, 每方向移动两步!
        courseB_starWars_prog6_b: |-
          试试使用`重复`模块来缩短代码。

          <xml> <block type="controls_repeat_simplified">

          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog7:
        courseB_starWars_prog7_a: 这种模式是不是有点像最后一个关卡？
        courseB_starWars_prog7_b: BB-8 会在他翻滚的时候抓住废铁。
        courseB_starWars_prog7_c: 试着画出这个关卡的大台阶图案。它能覆盖所有的废旧金属吗？
      courseB_starWars_prog7_2018:
        courseB_starWars_prog7_a: 这种模式是不是有点像最后一个关卡？
        courseB_starWars_prog7_b: BB-8 会在他翻滚的时候抓住废铁。
        courseB_starWars_prog7_c: 试着画出这个关卡的大台阶图案。它能覆盖所有的废旧金属吗？
      courseB_starWars_prog7_2019:
        courseB_starWars_prog7_a: 这种模式是不是有点像最后一个关卡？
        courseB_starWars_prog7_b: BB-8 会在他翻滚的时候抓住废铁。
        courseB_starWars_prog7_c: 试着画出这个关卡的大台阶图案。它能覆盖所有的废旧金属吗？
      courseB_starWars_prog8:
        courseB_starWars_prog8_a: 回到你已经旅行过的一组空间里是可以的。
        courseB_starWars_prog8_b: |-
          请尝试使用 "重复" 块来查看在内部放置的代码会发生什么变化。

          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog8_2018:
        courseB_starWars_prog8_a: 回到你已经旅行过的一组空间里是可以的。
        courseB_starWars_prog8_b: |-
          请尝试使用 "重复" 块来查看在内部放置的代码会发生什么变化。

          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog8_2019:
        courseB_starWars_prog8_a: 回到你已经旅行过的一组空间里是可以的。
        courseB_starWars_prog8_b: |-
          请尝试使用 "重复" 块来查看在内部放置的代码会发生什么变化。

          <xml>
          <block type="controls_repeat_simplified">
          <title name="TIMES">3</title>
          </block>
          </xml>
      courseB_starWars_prog9:
        courseB_starWars_prog9_a: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        courseB_starWars_prog9_b: 解决这个难题有很多方法。
        courseB_starWars_prog9_c: 使用`重复`循环有帮助吗？
      courseB_starWars_prog9_2018:
        courseB_starWars_prog9_a: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        courseB_starWars_prog9_b: 解决这个难题有很多方法。
        courseB_starWars_prog9_c: 使用`重复`循环有帮助吗？
      courseB_starWars_prog9_2019:
        courseB_starWars_prog9_a: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        courseB_starWars_prog9_b: 解决这个难题有很多方法。
        courseB_starWars_prog9_c: 使用`重复`循环有帮助吗？
      courseC19_playLab_EOC1:
        courseE_playLab_scaffold1_a: "`设置演员1为？？？图像`块可用于将演员添加到舞台。"
        courseE_playLab_scaffold1_b: 将`设置演员`模块置于`当运行时`下, 使您的演员出现在程序的开头。
        courseE_playLab_scaffold1_c: 使用`设置？？？背景`为您的场景选择背景。
      courseC19_playLab_EOC2:
        courseE_playLab_scaffold1_a: 打开`当按____方向键时` 事件的下拉菜单来更改模块控制的方向。
        courseE_playLab_scaffold1_b: 您应该有四个`当按下方向键`事件模块，它们在每个之下朝着一个方向向前移动。
        courseE_playLab_scaffold1_c: 当你完成后，你应该能够用方向键来移动你的英雄!
      courseC19_playLab_EOC4:
        courseE_playLab_scaffold4_a: 使用`得分`添加一分, 并用`扣分`减去一分。
      courseC_PlayLab_events1:
        courseC_PlayLab_events1_a: |-
          将此块附加到 "当运行时" 模块：

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseC_PlayLab_events1_2018:
        courseC_PlayLab_events1_a: |-
          将此块附加到 "当运行时" 模块：

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseC_PlayLab_events1_2019:
        courseC_PlayLab_events1_a: |-
          将此块附加到 "当运行时" 模块：

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseC_PlayLab_events2:
        courseC_PlayLab_events2_a: |-
          将其中的两个块附加到`当运行时`块：

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: 使用下拉菜单上的第二个`演员 __ 说`模块改变由哪个演员说话。
      courseC_PlayLab_events2_2018:
        courseC_PlayLab_events2_a: |-
          将其中的两个块附加到`当运行时`块：

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: 使用下拉菜单上的第二个`演员 __ 说`模块改变由哪个演员说话。
      courseC_PlayLab_events2_2019:
        courseC_PlayLab_events2_a: |-
          将其中的两个块附加到`当运行时`块：

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
        courseC_PlayLab_events2_b: 使用下拉菜单上的第二个`演员 __ 说`模块改变由哪个演员说话。
      courseC_PlayLab_events3:
        courseC_PlayLab_events3_a: 您只需将乔治向右移动大约25像素即可通过这个关卡。
        courseC_PlayLab_events3_b: 工具箱中是否有一个模块看起来像是可以移动一个演员？
        courseC_PlayLab_events3_c: |-
          将此模块附加到`当运行时`模块:

          <xml>
          <block type="studio_moveDistance">
          <title name="SPRITE">0</title>
          <title name="DIR">2</title>
          <title name="DISTANCE">25</title>
          </block>
          </xml>
      courseC_PlayLab_events3_2018:
        courseC_PlayLab_events3_a: 您只需将乔治向右移动大约25像素即可通过这个关卡。
        courseC_PlayLab_events3_b: 工具箱中是否有一个模块看起来像是可以移动一个演员？
        courseC_PlayLab_events3_c: |-
          将此块附加到 "当运行时" 模块：

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseC_PlayLab_events3_2019:
        courseC_PlayLab_events3_a: 您只需将乔治向右移动大约25像素即可通过这个关卡。
        courseC_PlayLab_events3_b: 工具箱中是否有一个模块看起来像是可以移动一个演员？
        courseC_PlayLab_events3_c: |-
          将此块附加到 "当运行时" 模块：

          <xml>
          <block type="studio_saySpriteChoices">
          <title name="SPRITE">0</title>
          <title name="VALUE">你好。</title>
          </block>
          </xml>
      courseC_PlayLab_events4:
        courseC_PlayLab_events4_b: 当点击"运行"按钮时，乔治需要向右移动\*\* 100 \*\*像素来够到奥丽芙猫。
        courseC_PlayLab_events4_a: 你需要附加一个`演员 __ 说`模块到`当演员接触`事件来通过这个关卡。
      courseC_PlayLab_events4_2018:
        courseC_PlayLab_events4_b: 当点击"运行"按钮时，乔治需要向右移动\*\* 100 \*\*像素来够到奥丽芙猫。
        courseC_PlayLab_events4_a: 你需要附加一个`演员 __ 说`模块到`当演员接触`事件来通过这个关卡。
      courseC_PlayLab_events4_2019:
        courseC_PlayLab_events4_b: 当点击"运行"按钮时，乔治需要向右移动\*\* 100 \*\*像素来够到奥丽芙猫。
        courseC_PlayLab_events4_a: 你需要附加一个`演员 __ 说`模块到`当演员接触`事件来通过这个关卡。
      courseC_PlayLab_events5:
        courseC_PlayLab_events5_a: 你需要点击 `演员说` 模块中的下拉菜单来查找文本 "什么是新的？"
        courseC_PlayLab_events5_b: 当您运行程序时, 点击 "奥克塔维亚" 检查它是否有效!
      courseC_PlayLab_events5_2018:
        courseC_PlayLab_events5_a: 你需要点击 `演员说` 模块中的下拉菜单来查找文本 "什么是新的？"
        courseC_PlayLab_events5_b: 当您运行程序时, 点击 "奥克塔维亚" 检查它是否有效!
      courseC_PlayLab_events5_2019:
        courseC_PlayLab_events5_a: 你需要点击 `演员说` 模块中的下拉菜单来查找文本 "什么是新的？"
        courseC_PlayLab_events5_b: 当您运行程序时, 点击 "奥克塔维亚" 检查它是否有效!
      courseC_PlayLab_events6:
        courseC_PlayLab_events6_a: 每个绿色`当方向键按下`模块应该在它下面赋予一个行动。
        courseC_PlayLab_events6_b: 使用`移动演员1`模块中的下拉菜单来更改企鹅移动的方向。
        courseC_PlayLab_events6_c: 完成后, 您应该可以使用计算机上的方向键来移动企鹅!
      courseC_PlayLab_events6_2018:
        courseC_PlayLab_events6_a: 每个绿色`当方向键按下`模块应该在它下面赋予一个行动。
        courseC_PlayLab_events6_b: 使用`移动演员1`模块中的下拉菜单来更改企鹅移动的方向。
        courseC_PlayLab_events6_c: 完成后, 您应该可以使用计算机上的方向键来移动企鹅!
      courseC_PlayLab_events6_2019:
        courseC_PlayLab_events6_a: 每个绿色`当方向键按下`模块应该在它下面赋予一个行动。
        courseC_PlayLab_events6_b: 使用`移动演员1`模块中的下拉菜单来更改企鹅移动的方向。
        courseC_PlayLab_events6_c: 完成后, 您应该可以使用计算机上的方向键来移动企鹅!
      courseC_PlayLab_events7:
        courseC_PlayLab_events7_a: '在`一直重复`循环内使用`将演员2向上移动400像素`模块和`将演员2向下移动400像素`模块来通过这个关卡。 '
        courseC_PlayLab_events7_b: "`一直重复`循环不需要连接到任何其他事件（情景）模块; 它会自己运行。"
      courseC_PlayLab_events7_2018:
        courseC_PlayLab_events7_a: '在`一直重复`循环内使用`将演员2向上移动400像素`模块和`将演员2向下移动400像素`模块来通过这个关卡。 '
        courseC_PlayLab_events7_b: "`一直重复`循环不需要连接到任何其他事件（情景）模块; 它会自己运行。"
      courseC_PlayLab_events7_2019:
        courseC_PlayLab_events7_a: '在`一直重复`循环内使用`将演员2向上移动400像素`模块和`将演员2向下移动400像素`模块来通过这个关卡。 '
        courseC_PlayLab_events7_b: "`一直重复`循环不需要连接到任何其他事件（情景）模块; 它会自己运行。"
      courseC_PlayLab_events8:
        courseC_PlayLab_events8_a: 您需要将模块连接到`当演员碰到时`模块来使其发生。
        courseC_PlayLab_events8_b: 工具箱中的`演员说`和`播放声音`模块应该可以帮上忙！
      courseC_PlayLab_events8_2018:
        courseC_PlayLab_events8_a: 您需要将模块连接到`当演员碰到时`模块来使其发生。
        courseC_PlayLab_events8_b: 工具箱中的`演员说`和`播放声音`模块应该可以帮上忙！
      courseC_PlayLab_events8_2019:
        courseC_PlayLab_events8_a: 您需要将模块连接到`当演员碰到时`模块来使其发生。
        courseC_PlayLab_events8_b: 工具箱中的`演员说`和`播放声音`模块应该可以帮上忙！
      courseC_PlayLab_events9:
        courseC_PlayLab_events9_a: "`得分`模块将帮助你通过这个关卡。"
        courseC_PlayLab_events9_b: 确保你的新`当演员触摸`写着 演员 \*\*\* 1 \*\* 和演员 \*\* 3 \*\*。
        courseC_PlayLab_events9_c: 您可以在工作区中同时拥有多个`当演员碰到`事件, 所以您不必删除第一个!
      courseC_PlayLab_events9_2018:
        courseC_PlayLab_events9_a: "`得分`模块将帮助你通过这个关卡。"
        courseC_PlayLab_events9_b: 确保你的新`当演员触摸`写着 演员 \*\*\* 1 \*\* 和演员 \*\* 3 \*\*。
        courseC_PlayLab_events9_c: 您可以在工作区中同时拥有多个`当演员碰到`事件, 所以您不必删除第一个!
      courseC_PlayLab_events9_2019:
        courseC_PlayLab_events9_a: "`得分`模块将帮助你通过这个关卡。"
        courseC_PlayLab_events9_b: 确保你的新`当演员触摸`写着 演员 \*\*\* 1 \*\* 和演员 \*\* 3 \*\*。
        courseC_PlayLab_events9_c: 您可以在工作区中同时拥有多个`当演员碰到`事件, 所以您不必删除第一个!
      courseC_PlayLab_eventsA:
        courseC_PlayLab_eventsA_a: 使用`设置背景`模块和`设置演员为____ 速`模块来通过这个关卡。
        courseC_PlayLab_eventsA_b: 您需要将`当运行时`事件模块具体拖到工作区中以解决此关卡。
      courseC_PlayLab_eventsA_2018:
        courseC_PlayLab_eventsA_a: 使用`设置背景`模块和`设置演员为____ 速`模块来通过这个关卡。
        courseC_PlayLab_eventsA_b: 您需要将`当运行时`事件模块具体拖到工作区中以解决此关卡。
      courseC_PlayLab_eventsA_2019:
        courseC_PlayLab_eventsA_a: 使用`设置背景`模块和`设置演员为____ 速`模块来通过这个关卡。
        courseC_PlayLab_eventsA_b: 您需要将`当运行时`事件模块具体拖到工作区中以解决此关卡。
      courseC_PlayLab_eventsA_embed_2019:
        courseC_PlayLab_eventsA_a: 用方向键移动企鹅。不需要写代码来完成这关。
      courseC_PlayLab_eventsFP:
        idea1: |-
          -   需要一个主意？\*

          \*\* 谁在哪里？ \*\* 使演员的随机图像出现, 因此没有人知道下一个显示的是谁。

          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: "-   需要一个主意？\\* \n\n\\*\\* 去冒险 \\*\\*- 改变背景, 然后让人物谈论他们现在在哪里。 \n\n![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)"
        idea3: |-
          _需要一个想法？_

          **弹球游戏**- 使用箭头键让一个人物移动（使用`当上方向键按下时`，`当下方向键按下时`模块），然后当与屏幕上的其他人物相撞的时候播放随机声音。
      courseC_PlayLab_eventsFP_2018:
        idea1: |-
          -   需要一个主意？\*

          \*\* 谁在哪里？ \*\* 使演员的随机图像出现, 因此没有人知道下一个显示的是谁。

          ![](https://images.code.org/a56e03479801995d93ad5a4e4384a79e-image-1475340154498.gif)
        idea2: "-   需要一个主意？\\* \n\n\\*\\* 去冒险 \\*\\*- 改变背景, 然后让人物谈论他们现在在哪里。 \n\n![](https://images.code.org/010c4d919f841d6049caf9211ab65ccc-image-1475340583052.gif)"
        idea3: |-
          _需要一个想法？_

          **弹球游戏**- 使用箭头键让一个人物移动（使用`当上方向键按下时`，`当下方向键按下时`模块），然后当与屏幕上的其他人物相撞的时候播放随机声音。
      courseC_PlayLab_eventsFP_2019:
        idea1: |-
          _需要一点提示?_

          **谁在那里?** 让随机的人物显示在图片中， 这样没人知道下一次会显示谁？

          <img src= "https://images.code.org/dbd6ece9d0fb213039ea5dccb91fc425-image-1563577859889.gif" style="width: 200px">
        idea2: |-
          _需要一点提示?_

          **一起去探险** - 修改背景，然后让所有的演员谈谈他们的冒险之地。

          <img src= "https://images.code.org/a7f740d73074deb128cdc2826abda9e6-image-1563576781779.gif" style="width: 200px">
        idea3: |-
          _需要一个想法？_

          **弹球游戏**- 使用箭头键让一个人物移动（使用`当上方向键按下时`，`当下方向键按下时`模块），然后当与屏幕上的其他人物相撞的时候播放随机声音。
      courseC_PlayLab_events_challenge1:
        courseC_PlayLab_events_challenge_a: |-
          可以使用此模块将演员移动到游戏空间中的不同位置。

          <xml> <block type="studio_setSpritePosition">

          <title name="SPRITE">0</title>
          <title name="VALUE">12</title>
          </block></xml>
        courseC_PlayLab_events_challenge_b: 当触及其他演员时，尝试使用`将演员1设置为左中间位置`。这将重置游戏, 让玩家可以继续尝试!
        courseC_PlayLab_events_challenge_c: |-
          还可以尝试改变不同的演员的速度，使游戏更容易或更具挑战性!

          <xml> <block type="studio_setSpriteSpeed">

          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.FAST</title>
          </block></xml>
      courseC_PlayLab_events_challenge1_2018:
        courseC_PlayLab_events_challenge_a: |-
          可以使用此模块将演员移动到游戏空间中的不同位置。

          <xml> <block type="studio_setSpritePosition">

          <title name="SPRITE">0</title>
          <title name="VALUE">12</title>
          </block></xml>
        courseC_PlayLab_events_challenge_b: 当触及其他演员时，尝试使用`将演员1设置为左中间位置`。这将重置游戏, 让玩家可以继续尝试!
        courseC_PlayLab_events_challenge_c: |-
          还可以尝试改变不同的演员的速度，使游戏更容易或更具挑战性!

          <xml> <block type="studio_setSpriteSpeed">

          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.FAST</title>
          </block></xml>
      courseC_PlayLab_events_challenge1_2019:
        courseC_PlayLab_events_challenge_a: |-
          可以使用此模块将演员移动到游戏空间中的不同位置。

          <xml> <block type="studio_setSpritePosition">

          <title name="SPRITE">0</title>
          <title name="VALUE">12</title>
          </block></xml>
        courseC_PlayLab_events_challenge_b: 当触及其他演员时，尝试使用`将演员1设置为左中间位置`。这将重置游戏, 让玩家可以继续尝试!
        courseC_PlayLab_events_challenge_c: |-
          还可以尝试改变不同的演员的速度，使游戏更容易或更具挑战性!

          <xml> <block type="studio_setSpriteSpeed">

          <title name="SPRITE">0</title>
          <title name="VALUE">Studio.SpriteSpeed.FAST</title>
          </block></xml>
      courseC_artist_loop1:
        courseC_artist_loop1_a: 您不需要对循环进行任何更改, 只需在上面放置一个模块。
        courseC_artist_loop1_b: "这是您需要设置图案的模块: \n\n<xml>\n<block type=\"draw_line_style_pattern\">\n<title
          name=\"VALUE\">DEFAULT</title>\n</block>\n</xml>\n\n 选择您喜欢的任何图案!"
      courseC_artist_loop1_2018:
        courseC_artist_loop1_a: 您不需要对循环进行任何更改, 只需在上面放置一个模块。
        courseC_artist_loop1_b: "这是您需要设置图案的模块: \n\n<xml>\n<block type=\"draw_line_style_pattern\">\n<title
          name=\"VALUE\">DEFAULT</title>\n</block>\n</xml>\n\n 选择您喜欢的任何图案!"
      courseC_artist_loop1_2019:
        courseC_artist_loop1_a: 您不需要对循环进行任何更改, 只需在上面放置一个模块。
        courseC_artist_loop1_b: "这是您需要设置图案的模块: \n\n<xml>\n<block type=\"draw_line_style_pattern\">\n<title
          name=\"VALUE\">DEFAULT</title>\n</block>\n</xml>\n\n 选择您喜欢的任何图案!"
      courseC_artist_loops1a:
        courseC_artist_loops1a_a: |-
          这是您将需要的第一个模块：

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          使用此模块来绘制贴纸！

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1a_2018:
        courseC_artist_loops1a_a: |-
          这是您将需要的第一个模块：

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          使用此模块来绘制贴纸！

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1a_2019:
        courseC_artist_loops1a_a: |-
          这是您将需要的第一个模块：

          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block>
          </xml>
        courseC_artist_loops1a_b: |-
          使用此模块来绘制贴纸！

          <xml>
          <block type="sticker">
          <title name="VALUE">Bird</title>
          </block>
          </xml>
      courseC_artist_loops1b_2019:
        courseC_artist_loops1b_a: |-
          这是你将需要的第一段代码：

          <xml>
          <block type="draw_turn_by_constant_dropdown">
          <title name="DIR">???</title>
          <title name="VALUE" config="45,60,90,120,180">???</title>
          </block>
          </xml>

          您可以选择左或右和任意度数。
      courseC_artist_loops2a:
        courseC_artist_loops2a_a: 在你的循环中, 你需要跳到200以上，再向下200像素, 然后画鸟的贴纸, 然后转30度。
        courseC_artist_loops2a_b: 单击`重复`循环顶部的数字来更改重复次数。
      courseC_artist_loops2a_2018:
        courseC_artist_loops2a_a: 在你的循环中, 你需要跳到200以上，再向下200像素, 然后画鸟的贴纸, 然后转30度。
        courseC_artist_loops2a_b: 单击`重复`循环顶部的数字来更改重复次数。
      courseC_artist_loops2a_2019:
        courseC_artist_loops2a_a: 在你的循环中, 你需要跳到200以上，再向下200像素, 然后画鸟的贴纸, 然后转30度。
        courseC_artist_loops2a_b: 单击`重复`循环顶部的数字来更改重复次数。
      courseC_artist_loops3a:
        courseC_artist_loops3a_a: 你要在循环中的鸟贴纸之后只添加一个模块 。
        courseC_artist_loops3a_b: 使用`画贴纸`模块上的下拉菜单来查找蝙蝠贴纸。
      courseC_artist_loops3a_2018:
        courseC_artist_loops3a_a: 你要在循环中的鸟贴纸之后只添加一个模块 。
        courseC_artist_loops3a_b: 使用`画贴纸`模块上的下拉菜单来查找蝙蝠贴纸。
      courseC_artist_loops3a_2019:
        courseC_artist_loops3a_a: 你要在循环中的鸟贴纸之后只添加一个模块 。
        courseC_artist_loops3a_b: 使用`画贴纸`模块上的下拉菜单来查找蝙蝠贴纸。
      courseC_artist_loops4a:
        courseC_artist_loops4a_a: |-
          使用此模块向前跳转：

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          不要忘记更改跳多远！
      courseC_artist_loops4a_2018:
        courseC_artist_loops4a_a: |-
          使用此模块向前跳转：

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          不要忘记更改跳多远！
      courseC_artist_loops4a_2019:
        courseC_artist_loops4a_a: |-
          使用此模块向前跳转：

          <xml>
          <block type="jump_by_constant">
          <title name="DIR">jumpForward</title>
          <title name="VALUE">100</title>
          </block>
          </xml>

          不要忘记更改跳多远！
        courseC_artist_loops4a_b: |-
          你的程序应该类似于这个！

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">???</title>
          <statement name="DO">
          <block type="jump_to">
          <title name="VALUE">13</title>
          <next>
          <block type="draw_turn_by_constant_dropdown">
          <title name="DIR">???</title>
          <title name="VALUE" config="1,2,5,10,12,20,30,45,60,90,120,180">???</title>
          <next>
          <block type="sticker">
          <title name="VALUE">猫</title>
          <next>
          <block type="jump_by_constant">
          <title name="DIR">向前跳</title>
          <title name="VALUE">???</title>
          <next>
          <block type="sticker">
          <title name="VALUE">狗</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      courseC_artist_loops5a:
        courseC_artist_loops5a_a: 使用`画贴纸`块上的下拉菜单来更改它们的图像。
      courseC_artist_loops5a_2018:
        courseC_artist_loops5a_a: 使用`画贴纸`块上的下拉菜单来更改它们的图像。
      courseC_artist_loops5a_2019:
        courseC_artist_loops5a_a: 使用`画贴纸`块上的下拉菜单来更改它们的图像。
      courseC_artist_loops5b:
        courseC_artist_loops5b_a: |-
          使用此模块设置线条的图案：

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: 要制作和上面类似设计, 向后移动与向前移动必须是相同的数量。
      courseC_artist_loops5b_2018:
        courseC_artist_loops5b_a: |-
          使用此模块设置线条的图案：

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: 要制作和上面类似设计, 向后移动与向前移动必须是相同的数量。
      courseC_artist_loops5b_2019:
        courseC_artist_loops5b_a: |-
          使用此模块设置线条的图案：

          <xml>
          <block type="draw_line_style_pattern">
          <title name="VALUE">DEFAULT</title>
          </block>
          </xml>
        courseC_artist_loops5b_b: 要制作和上面类似设计, 向后移动与向前移动必须是相同的数量。
        courseC_artist_loops5b_c: |-
          你的程序应该类似于这个！

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_line_style_pattern">
          <title name="VALUE">彩虹条</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="jump_to">
          <title name="VALUE">13</title>
          <next>
          <block type="draw_move_by_constant">
          <title name="DIR">向前移动</title>
          <title name="VALUE">???</title>
          <next>
          <block type="draw_move_by_constant">
          <title name="DIR">向后移动</title>
          <title name="VALUE">???</title>
          <next>
          <block type="draw_turn_by_constant_dropdown">
          <title name="DIR">???</title>
          <title name="VALUE" config="1,2,5,10,12,20,30,45,60,90,120,180">???</title>
          <next>
          <block type="sticker">
          <title name="VALUE">猫</title>
          <next>
          <block type="jump_by_constant">
          <title name="DIR">向前跳</title>
          <title name="VALUE">???</title>
          <next>
          <block type="sticker">
          <title name="VALUE">狗</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseC_artist_loops6a:
        courseC_artist_loops6a_a: 要制作和上面类似的设计, 在每个贴纸之间向前跳转少于75像素。
      courseC_artist_loops6a_2018:
        courseC_artist_loops6a_a: 要制作和上面类似的设计, 在每个贴纸之间向前跳转少于75像素。
      courseC_artist_loops6a_2019:
        courseC_artist_loops6a_a: 要制作和上面类似的设计, 在每个贴纸之间向前跳转少于75像素。
      courseC_artist_loops7a:
        courseC_artist_loops7a_a: 一个圆有360度。把你的转弯角度乘以你重复次数。它等于360吗？检查建议的转角看这是否可行！
      courseC_artist_loops7a_2018:
        courseC_artist_loops7a_a: 一个圆有360度。把你的转弯角度乘以你重复次数。它等于360吗？检查建议的转角看这是否可行！
      courseC_artist_loops7a_2019:
        courseC_artist_loops7a_a: 一个圆有360度。把你的转弯角度乘以你重复次数。它等于360吗？检查建议的转角看这是否可行！
      courseC_artist_loopsPre1a:
        courseC_artist_loopsPre1a_a: 记住把`转向`模块放到循环内。
        courseC_artist_loopsPre1a_b: 你的`重复`循环应该有3个模块在里面:`跳到200超过200下`，`向前移动50像素`和`向右转60度`。
      courseC_artist_loopsPre1a_2018:
        courseC_artist_loopsPre1a_a: 记住把`转向`模块放到循环内。
        courseC_artist_loopsPre1a_b: 你的`重复`循环应该有3个模块在里面:`跳到200超过200下`，`向前移动50像素`和`向右转60度`。
      courseC_artist_loopsPre1a_2019:
        courseC_artist_loopsPre1a_a: 记住把`转向`模块放到循环内。
        courseC_artist_loopsPre1a_b: 你的`重复`循环应该有3个模块在里面:`跳到200超过200下`，`向前移动50像素`和`向右转60度`。
      courseC_artist_loopsPrePre1a:
        courseC_artist_loopsPrePre1a_a: |-
          你需要的第一个模块是：

          ![](<https://images.code.org/60e3354a2e7dd37b64833eac1e8694be-image-1499710228373.08.14 AM.png>)
        courseC_artist_loopsPrePre1a_b: |-
          要向前移动50像素, 请使用以下模块：

          ![](<https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png>)
      courseC_artist_loopsPrePre1a_2018:
        courseC_artist_loopsPrePre1a_a: |-
          需要的第一个模块是：

          <xml> <block type="jump_to_xy" id="callMe">

          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block></xml>
        courseC_artist_loopsPrePre1a_b: |-
          要向前移动50像素, 请使用以下模块：

          ![](<https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png>)
      courseC_artist_loopsPrePre1a_2019:
        courseC_artist_loopsPrePre1a_a: |-
          需要的第一个模块是：

          <xml> <block type="jump_to_xy" id="callMe">

          <title name="XPOS">200</title>
          <title name="YPOS">200</title>
          </block></xml>
        courseC_artist_loopsPrePre1a_b: |-
          要向前移动50像素, 请使用以下模块：

          ![](<https://images.code.org/411fca4606a09641e6eedf5069ac4efa-image-1499710237929.08.27 AM.png>)
      courseC_artist_prog2:
        courseC_artist_prog2_a: 如果使用模块让我 '前进 100 像素'，我会自动画一条线。
        courseC_artist_prog2_b: 怎么才能转弯呢？使用 '向右转 90 度' 模块。
      courseC_artist_prog2_2018:
        courseC_artist_prog2_a: 如果使用模块让我 '前进 100 像素'，我会自动画一条线。
        courseC_artist_prog2_b: 怎么才能转弯呢？使用 '向右转 90 度' 模块。
      courseC_artist_prog2_2019:
        courseC_artist_prog2_a: 如果使用模块让我 '前进 100 像素'，我会自动画一条线。
        courseC_artist_prog2_b: 怎么才能转弯呢？使用 '向右转 90 度' 模块。
      courseC_artist_prog3:
        courseC_artist_prog3_a: |-
          要创建这个窗户，只需绘制一个100 像素边长的正方形。

          -   向前移动
          -   转弯
          -   向前移动
          -   转弯
          -   向前移动
          -   转弯
          -   向前移动
        courseC_artist_prog3_b: 要写出更短的代码？尝试在这个关卡中使用一个循环。
      courseC_artist_prog3_2018:
        courseC_artist_prog3_a: |-
          要创建这个窗户，只需绘制一个100 像素边长的正方形。

          -   向前移动
          -   转弯
          -   向前移动
          -   转弯
          -   向前移动
          -   转弯
          -   向前移动
        courseC_artist_prog3_b: 要写出更短的代码？尝试在这个关卡中使用一个循环。
      courseC_artist_prog3_2019:
        courseC_artist_prog3_a: |-
          要创建这个窗户，只需绘制一个100 像素边长的正方形。

          -   向前移动
          -   转弯
          -   向前移动
          -   转弯
          -   向前移动
          -   转弯
          -   向前移动
        courseC_artist_prog3_b: 要写出更短的代码？尝试在这个关卡中使用一个循环。
      courseC_artist_prog4:
        courseC_artist_prog4_a: 要完成这个火箭，只需要在最上面画个三角形！
        courseC_artist_prog4_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseC_artist_prog4_c: |-
          要绘制三角形，你需要：

          -   向前移动
          -   向左120度
          -   向前移动
          -   左转120度
          -   向前移动
      courseC_artist_prog4_2018:
        courseC_artist_prog4_a: 要完成这个火箭，只需要在最上面画个三角形！
        courseC_artist_prog4_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseC_artist_prog4_c: |-
          要绘制三角形，你需要：

          -   向前移动
          -   向左120度
          -   向前移动
          -   左转120度
          -   向前移动
      courseC_artist_prog4_2019:
        courseC_artist_prog4_a: 要完成这个火箭，只需要在最上面画个三角形！
        courseC_artist_prog4_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseC_artist_prog4_c: |-
          要绘制三角形，你需要：

          -   向前移动
          -   向左120度
          -   向前移动
          -   左转120度
          -   向前移动
      courseC_artist_prog5:
        courseC_artist_prog5_a: 放慢滑块速度直到你能逐行运行代码，来查看哪里出错了。
        courseC_artist_prog5_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseC_artist_prog5_c: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseC_artist_prog5_d: 每个转弯应该是向右转90度。
      courseC_artist_prog5_2018:
        courseC_artist_prog5_a: 放慢滑块速度直到你能逐行运行代码，来查看哪里出错了。
        courseC_artist_prog5_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseC_artist_prog5_c: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseC_artist_prog5_d: 每个转弯应该是向右转90度。
      courseC_artist_prog5_2019:
        courseC_artist_prog5_a: 放慢滑块速度直到你能逐行运行代码，来查看哪里出错了。
        courseC_artist_prog5_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseC_artist_prog5_c: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseC_artist_prog5_d: 每个转弯应该是向右转90度。
      courseC_artist_prog6:
        courseC_artist_prog6_a: 艺术家已经面朝着正确的方向来画第一条线。
        courseC_artist_prog6_b: 这颗钻石真的只是一个立起来的正方形。
        courseC_artist_prog6_c: 因为这个钻石也是一个正方形, 请确保在拐角处旋转90度。
      courseC_artist_prog6_2018:
        courseC_artist_prog6_a: 艺术家已经面朝着正确的方向来画第一条线。
        courseC_artist_prog6_b: 这颗钻石真的只是一个立起来的正方形。
        courseC_artist_prog6_c: 因为这个钻石也是一个正方形, 请确保在拐角处旋转90度。
      courseC_artist_prog6_2019:
        courseC_artist_prog6_a: 艺术家已经面朝着正确的方向来画第一条线。
        courseC_artist_prog6_b: 这颗钻石真的只是一个立起来的正方形。
        courseC_artist_prog6_c: 因为这个钻石也是一个正方形, 请确保在拐角处旋转90度。
      courseC_artist_prog7:
        courseC_artist_prog7_a: 每个角度都是45度或90度。
        courseC_artist_prog7_b: "它的第一步工作吗？ \n那第二步呢？\n哪里出问题了？"
        courseC_artist_prog7_c: 您可以使用转向模块的下拉菜单来查看所需的角度！
        courseC_artist_prog7_d: |-
          你需要：

          -   向前移动
          -   向右转45度
          -   向前移动
          -   向右转90度
          -   前进
          -   向右转45度

          重复此模式两次!
        courseC_artist_prog7_e: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_artist_prog7_2018:
        courseC_artist_prog7_a: 每个角度都是45度或90度。
        courseC_artist_prog7_b: "它的第一步工作吗？ \n那第二步呢？\n哪里出问题了？"
        courseC_artist_prog7_c: 您可以使用转向模块的下拉菜单来查看所需的角度！
        courseC_artist_prog7_d: |-
          你需要：

          -   向前移动
          -   向右转45度
          -   向前移动
          -   向右转90度
          -   前进
          -   向右转45度

          重复此模式两次!
        courseC_artist_prog7_e: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_artist_prog7_2019:
        courseC_artist_prog7_a: 每个角度都是45度或90度。
        courseC_artist_prog7_b: "它的第一步工作吗？ \n那第二步呢？\n哪里出问题了？"
        courseC_artist_prog7_c: 您可以使用转向模块的下拉菜单来查看所需的角度！
        courseC_artist_prog7_d: |-
          你需要：

          -   向前移动
          -   向右转45度
          -   向前移动
          -   向右转90度
          -   前进
          -   向右转45度

          重复此模式两次!
        courseC_artist_prog7_e: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_artist_prog_challenge1:
        courseC_artist_prog_challenge1_a: 你可以把它画成一个长方形, 其中一边在中间或在两个不同的正方形上!
      courseC_artist_prog_challenge1_2018:
        courseC_artist_prog_challenge1_a: 你可以把它画成一个长方形, 其中一边在中间或在两个不同的正方形上!
      courseC_artist_prog_challenge1_2019:
        courseC_artist_prog_challenge1_a: 你可以把它画成一个长方形, 其中一边在中间或在两个不同的正方形上!
      courseC_artist_prog_challenge2a:
        courseC_artist_prog_challenge2_a: 绘制第一行后，在绘制第二行前向左转。
        courseC_artist_prog_challenge2_b: 绘制第二行后, 在绘制第三行之前向右转。
      courseC_artist_prog_challenge2a_2018:
        courseC_artist_prog_challenge2_a: 绘制第一行后，在绘制第二行前向左转。
        courseC_artist_prog_challenge2_b: 绘制第二行后, 在绘制第三行之前向右转。
      courseC_artist_prog_challenge2a_2019:
        courseC_artist_prog_challenge2_a: 绘制第一行后，在绘制第二行前向左转。
        courseC_artist_prog_challenge2_b: 绘制第二行后, 在绘制第三行之前向右转。
      courseC_collector_loops_challenge2:
        courseC_maze_loops_challenge2_b: 使用循环，这样就不会用光`收集`模块！
      courseC_collector_loops_challenge2_2018:
        courseC_maze_loops_challenge2_b: 使用循环，这样就不会用光`收集`模块！
      courseC_collector_loops_challenge2_2019:
        courseC_maze_loops_challenge2_b: 使用循环，这样就不会用光`收集`模块！
      courseC_collector_prog1:
        courseC_collector_prog1_a: 当您站在具有宝藏的地方时, 请使用 <xml><block type="collector_collect"/></xml>模块来拾取它。
        courseC_collector_prog1_b: 最简单的解决方法是向前移动一次, 然后收集宝藏。
      courseC_collector_prog1_2018:
        courseC_collector_prog1_a: 当您站在具有宝藏的地方时, 请使用 <xml><block type="collector_collect"/></xml>模块来拾取它。
        courseC_collector_prog1_b: 最简单的解决方法是向前移动一次, 然后收集宝藏。
      courseC_collector_prog1_2019:
        courseC_collector_prog1_a: 当您站在具有宝藏的地方时, 请使用 <xml><block type="collector_collect"/></xml>模块来拾取它。
        courseC_collector_prog1_b: 最简单的解决方法是向前移动一次, 然后收集宝藏。
      courseC_collector_prog2:
        courseC_collector_prog2_a: 你可以使用4 个<xml><block type="maze_move"><title name="DIR">向前移动</title></block></xml>
          模块或者使用 <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>模块来缩短程序。
        courseC_collector_prog2_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_collector_prog2_2018:
        courseC_collector_prog2_a: 你可以使用4 个<xml><block type="maze_move"><title name="DIR">向前移动</title></block></xml>
          模块或者使用 <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>模块来缩短程序。
        courseC_collector_prog2_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_collector_prog2_2019:
        courseC_collector_prog2_a: 你可以使用4 个<xml><block type="maze_move"><title name="DIR">向前移动</title></block></xml>
          模块或者使用 <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>模块来缩短程序。
        courseC_collector_prog2_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_collector_prog3:
        courseC_collector_prog3_a: 该程序将只运行连接到 <xml><block type="when_run"/></xml>的模块。
        courseC_collector_prog3_b: 尝试使用 "步进" 按钮逐行运行您的代码。你知道代码哪里出错了吗？
        courseC_collector_prog3_c: 如果你很难弄清楚这个关卡, 试着在一张纸上写下这些动作。
      courseC_collector_prog3_2018:
        courseC_collector_prog3_a: 该程序将只运行连接到 <xml><block type="when_run"/></xml>的模块。
        courseC_collector_prog3_b: 尝试使用 "步进" 按钮逐行运行您的代码。你知道代码哪里出错了吗？
        courseC_collector_prog3_c: 如果你很难弄清楚这个关卡, 试着在一张纸上写下这些动作。
      courseC_collector_prog3_2019:
        courseC_collector_prog3_a: 该程序将只运行连接到 <xml><block type="when_run"/></xml>的模块。
        courseC_collector_prog3_b: 尝试使用 "步进" 按钮逐行运行您的代码。你知道代码哪里出错了吗？
        courseC_collector_prog3_c: 如果你很难弄清楚这个关卡, 试着在一张纸上写下这些动作。
      courseC_collector_prog4:
        courseC_collector_prog4_a: 如果你被难住了, 试着在一张纸上写下步骤。
        courseC_collector_prog4_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseC_collector_prog4_c: 请为路径尝试此选项。
      courseC_collector_prog4_2018:
        courseC_collector_prog4_a: 如果你被难住了, 试着在一张纸上写下步骤。
        courseC_collector_prog4_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseC_collector_prog4_c: 请为路径尝试此选项。
      courseC_collector_prog4_2019:
        courseC_collector_prog4_a: 如果你被难住了, 试着在一张纸上写下步骤。
        courseC_collector_prog4_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
        courseC_collector_prog4_c: 请为路径尝试此选项。
      courseC_collector_prog5:
        courseC_collector_prog5_a: "\"它在第一步工作吗？\n它在第二步工作吗？ \n哪里出错了？”"
        courseC_collector_prog5_b: 如果修复了一个缺陷但程序仍然无法正常工作，请使用上面的步骤查找更多的缺陷。
        courseC_collector_prog5_c: 如果你被难住了, 试着在一张纸上写下步骤。
        courseC_collector_prog5_d: 沿着小路收集宝藏。
      courseC_collector_prog5_2018:
        courseC_collector_prog5_a: "\"它在第一步工作吗？\n它在第二步工作吗？ \n哪里出错了？”"
        courseC_collector_prog5_b: 如果修复了一个缺陷但程序仍然无法正常工作，请使用上面的步骤查找更多的缺陷。
        courseC_collector_prog5_c: 如果你被难住了, 试着在一张纸上写下步骤。
        courseC_collector_prog5_d: 沿着小路收集宝藏。
      courseC_collector_prog5_2019:
        courseC_collector_prog5_a: "\"它在第一步工作吗？\n它在第二步工作吗？ \n哪里出错了？”"
        courseC_collector_prog5_b: 如果修复了一个缺陷但程序仍然无法正常工作，请使用上面的步骤查找更多的缺陷。
        courseC_collector_prog5_c: 如果你被难住了, 试着在一张纸上写下步骤。
        courseC_collector_prog5_d: 沿着小路收集宝藏。
      courseC_collector_prog6:
        courseC_collector_prog6_a: 能找出哪里出错吗？请尝试使用 "步进" 按钮逐行运行代码来查找错误。
        courseC_collector_prog6_b: 被难住了? 尝试这条路径来收集宝藏。
      courseC_collector_prog6_2018:
        courseC_collector_prog6_a: 能找出哪里出错吗？请尝试使用 "步进" 按钮逐行运行代码来查找错误。
        courseC_collector_prog6_b: 被难住了? 尝试这条路径来收集宝藏。
      courseC_collector_prog6_2019:
        courseC_collector_prog6_a: 能找出哪里出错吗？请尝试使用 "步进" 按钮逐行运行代码来查找错误。
        courseC_collector_prog6_b: 被难住了? 尝试这条路径来收集宝藏。
      courseC_collector_prog7:
        courseC_collector_prog7_a: '工作区中已经有很多很好的代码。你不需要删除任何代码来通过这个关卡。  '
        courseC_collector_prog7_b: 没看出让冒险家朝着正确的方向移动的模块吗？请从工具箱里拉出一个。
        courseC_collector_prog7_c: 没看到收集所有宝藏的路线吗？尝试这条路！
      courseC_collector_prog7_2018:
        courseC_collector_prog7_a: '工作区中已经有很多很好的代码。你不需要删除任何代码来通过这个关卡。  '
        courseC_collector_prog7_b: 没看出让冒险家朝着正确的方向移动的模块吗？请从工具箱里拉出一个。
        courseC_collector_prog7_c: 没看到收集所有宝藏的路线吗？尝试这条路！
      courseC_collector_prog7_2019:
        courseC_collector_prog7_a: '工作区中已经有很多很好的代码。你不需要删除任何代码来通过这个关卡。  '
        courseC_collector_prog7_b: 没看出让冒险家朝着正确的方向移动的模块吗？请从工具箱里拉出一个。
        courseC_collector_prog7_c: 没看到收集所有宝藏的路线吗？尝试这条路！
      courseC_collector_prog_challenge1:
        courseC_collector_prog_challenge1_a: 你可以更经常使用`收集`命令来收集额外的宝藏。
      courseC_collector_prog_challenge1_2018:
        courseC_collector_prog_challenge1_a: 你可以更经常使用`收集`命令来收集额外的宝藏。
      courseC_collector_prog_challenge1_2019:
        courseC_collector_prog_challenge1_a: 你可以更经常使用`收集`命令来收集额外的宝藏。
      courseC_collector_prog_challenge2:
        courseC_collector_prog_challenge1_a: 你可以使用多个`收集`命令来收集额外的宝藏。
        courseC_collector_prog_challenge1_b: 迷路了？ 请尝试此路径来通过这个关卡!
      courseC_collector_prog_challenge2_2018:
        courseC_collector_prog_challenge1_a: 你可以使用多个`收集`命令来收集额外的宝藏。
        courseC_collector_prog_challenge1_b: 迷路了？ 请尝试此路径来通过这个关卡!
      courseC_collector_prog_challenge2_2019:
        courseC_collector_prog_challenge1_a: 你可以使用多个`收集`命令来收集额外的宝藏。
        courseC_collector_prog_challenge1_b: 迷路了？ 请尝试此路径来通过这个关卡!
      courseC_flappy_events1:
        courseC_flappy_events1_a: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      courseC_flappy_events1_2018:
        courseC_flappy_events1_a: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      courseC_flappy_events1_2019:
        courseC_flappy_events1_a: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      courseC_flappy_events2:
        courseC_flappy_events2_a: '您需要添加的模块称为`设置速度`。 '
        courseC_flappy_events2_b: 将`设置速度`模块连接到`当运行时`模块来解决此关卡。
      courseC_flappy_events2_2018:
        courseC_flappy_events2_a: '您需要添加的模块称为`设置速度`。 '
        courseC_flappy_events2_b: 将`设置速度`模块连接到`当运行时`模块来解决此关卡。
      courseC_flappy_events2_2019:
        courseC_flappy_events2_a: '您需要添加的模块称为`设置速度`。 '
        courseC_flappy_events2_b: 将`设置速度`模块连接到`当运行时`模块来解决此关卡。
      courseC_flappy_events3:
        courseC_flappy_events3_a: 如果运行出问题, 请确保您的块已连接到工作区中的正确事件上。
      courseC_flappy_events3_2018:
        courseC_flappy_events3_a: 如果运行出问题, 请确保您的块已连接到工作区中的正确事件上。
      courseC_flappy_events3_2019:
        courseC_flappy_events3_a: 如果运行出问题, 请确保您的块已连接到工作区中的正确事件上。
      courseC_flappy_events4:
        courseC_flappy_events4_a: 将`结束游戏`模块连接到`当遇到障碍`来解决这个关卡。
      courseC_flappy_events4_2018:
        courseC_flappy_events4_a: 将`结束游戏`模块连接到`当遇到障碍`来解决这个关卡。
      courseC_flappy_events4_2019:
        courseC_flappy_events4_a: 将`结束游戏`模块连接到`当遇到障碍`来解决这个关卡。
      courseC_flappy_events5:
        courseC_flappy_events5_a: 您将需要使用`得一分`模块来通过这个关卡。
      courseC_flappy_events5_2018:
        courseC_flappy_events5_a: 您将需要使用`得一分`模块来通过这个关卡。
      courseC_flappy_events5_2019:
        courseC_flappy_events5_a: 您将需要使用`得一分`模块来通过这个关卡。
      courseC_flappy_events6:
        courseC_flappy_events6_a: 请尝试将`拍打____次时`模块连接到`当点击时`事件。
      courseC_flappy_events6_2018:
        courseC_flappy_events6_a: 请尝试将`拍打____次时`模块连接到`当点击时`事件。
      courseC_flappy_events6_2019:
        courseC_flappy_events6_a: 请尝试将`拍打____次时`模块连接到`当点击时`事件。
      courseC_flappy_events7:
        courseC_flappy_events7_a: '您可以使用`设置场景`模块来更改背景。 '
      courseC_flappy_events7_2018:
        courseC_flappy_events7_a: '您可以使用`设置场景`模块来更改背景。 '
      courseC_flappy_events7_2019:
        courseC_flappy_events7_a: '您可以使用`设置场景`模块来更改背景。 '
      courseC_flappy_events8:
        courseC_flappy_events8_a: 尝把第二个`设置场景`模块连接到`当通过障碍`事件来通过这个关卡。
      courseC_flappy_events8_2018:
        courseC_flappy_events8_a: 尝把第二个`设置场景`模块连接到`当通过障碍`事件来通过这个关卡。
      courseC_flappy_events8_2019:
        courseC_flappy_events8_a: 尝把第二个`设置场景`模块连接到`当通过障碍`事件来通过这个关卡。
      courseC_flappy_events9:
        courseC_flappy_events9_a: 将`设置分数为0`模块连接到`当遇到障碍`事件通过此关卡。
      courseC_flappy_events9_2018:
        courseC_flappy_events9_a: 将`设置分数为0`模块连接到`当遇到障碍`事件通过此关卡。
      courseC_flappy_events9_2019:
        courseC_flappy_events9_a: 将`设置分数为0`模块连接到`当遇到障碍`事件通过此关卡。
      courseC_harvester_loops1:
        courseC_harvester_loops1_a: 一旦你移到一个南瓜, 请使用 <xml><block type="harvester_pumpkin"/></xml>来收集它。
        courseC_harvester_loops1_b: 您可以使用 <xml><block type="harvester_pumpkin"/></xml>模块循环从广场中选取多个南瓜。
      courseC_harvester_loops1_2018:
        courseC_harvester_loops1_a: 一旦你移到一个南瓜, 请使用 <xml><block type="harvester_pumpkin"/></xml>来收集它。
        courseC_harvester_loops1_b: 您可以使用 <xml><block type="harvester_pumpkin"/></xml>模块循环从广场中选取多个南瓜。
      courseC_harvester_loops1_2019:
        courseC_harvester_loops1_a: 一旦你移到一个南瓜, 请使用 <xml><block type="harvester_pumpkin"/></xml>来收集它。
        courseC_harvester_loops1_b: 您可以使用 <xml><block type="harvester_pumpkin"/></xml>模块循环从广场中选取多个南瓜。
      courseC_harvester_loops2:
        courseC_harvester_loops2_a: 如果你被难住了，试着在纸上写下步骤, 寻找重复的规律。
        courseC_harvester_loops2_b: 你需要一个`重复`循环连着另一个。
        courseC_harvester_loops2_c: 一个循环将重复`向前移动`命令, 另一个将重复`捡起南瓜`命令。
      courseC_harvester_loops2_2018:
        courseC_harvester_loops2_a: 如果你被难住了，试着在纸上写下步骤, 寻找重复的规律。
        courseC_harvester_loops2_b: 你需要一个`重复`循环连着另一个。
        courseC_harvester_loops2_c: 一个循环将重复`向前移动`命令, 另一个将重复`捡起南瓜`命令。
      courseC_harvester_loops2_2019:
        courseC_harvester_loops2_a: 如果你被难住了，试着在纸上写下步骤, 寻找重复的规律。
        courseC_harvester_loops2_b: 你需要一个`重复`循环连着另一个。
        courseC_harvester_loops2_c: 一个循环将重复`向前移动`命令, 另一个将重复`捡起南瓜`命令。
      courseC_harvester_loops3:
        courseC_harvester_loops3_a: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseC_harvester_loops3_b: 对于第一个南瓜, 你可以使用和上个关卡非常类似的代码。在这之后，你需要转到哪条路上？
        courseC_harvester_loops3_c: 如果你想简化代码，实际上可以把一个循环放到另一个里面! 这称为 **嵌套循环**。
      courseC_harvester_loops3_2018:
        courseC_harvester_loops3_a: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseC_harvester_loops3_b: 对于第一个南瓜, 你可以使用和上个关卡非常类似的代码。在这之后，你需要转到哪条路上？
        courseC_harvester_loops3_c: 如果你想简化代码，实际上可以把一个循环放到另一个里面! 这称为 **嵌套循环**。
      courseC_harvester_loops3_2019:
        courseC_harvester_loops3_a: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseC_harvester_loops3_b: 对于第一个南瓜, 你可以使用和上个关卡非常类似的代码。在这之后，你需要转到哪条路上？
        courseC_harvester_loops3_c: 如果你想简化代码，实际上可以把一个循环放到另一个里面! 这称为 **嵌套循环**。
      courseC_harvester_loops4:
        courseC_harvester_loops4_a: 使用这个新的`采摘玉米`模块来收集玉米。
        courseC_harvester_loops4_b: 你可以在代码中使用多个重复循环, 一些捡玉米和一些采摘南瓜。
        courseC_harvester_loops4_c: 如果你想简化代码，实际上可以把一个循环放到另一个里面! 这称为 **嵌套循环**。
      courseC_harvester_loops4_2018:
        courseC_harvester_loops4_a: 使用这个新的`采摘玉米`模块来收集玉米。
        courseC_harvester_loops4_b: 你可以在代码中使用多个重复循环, 一些捡玉米和一些采摘南瓜。
        courseC_harvester_loops4_c: 如果你想简化代码，实际上可以把一个循环放到另一个里面! 这称为 **嵌套循环**。
      courseC_harvester_loops4_2019:
        courseC_harvester_loops4_a: 使用这个新的`采摘玉米`模块来收集玉米。
        courseC_harvester_loops4_b: 你可以在代码中使用多个重复循环, 一些捡玉米和一些采摘南瓜。
        courseC_harvester_loops4_c: 如果你想简化代码，实际上可以把一个循环放到另一个里面! 这称为 **嵌套循环**。
      courseC_harvester_loops5:
        courseC_harvester_loops5_a: 如果被难住了，请尝试画出整个程序，然后查找重复规律。
        courseC_harvester_loops5_b: 这个台阶是不是看起来和其他的关卡类似？移动是相似的，只是记得一路上要收集庄稼。
      courseC_harvester_loops5_2018:
        courseC_harvester_loops5_a: 如果被难住了，请尝试画出整个程序，然后查找重复规律。
        courseC_harvester_loops5_b: 这个台阶是不是看起来和其他的关卡类似？移动是相似的，只是记得一路上要收集庄稼。
      courseC_harvester_loops5_2019:
        courseC_harvester_loops5_a: 如果被难住了，请尝试画出整个程序，然后查找重复规律。
        courseC_harvester_loops5_b: 这个台阶是不是看起来和其他的关卡类似？移动是相似的，只是记得一路上要收集庄稼。
      courseC_harvester_loops6:
        courseC_harvester_loops6_a: 请记住，您可以在一个重复循环中放置多个模块。
        courseC_harvester_loops6_b: 别忘了在玉米排的尽头转弯。
      courseC_harvester_loops6_2018:
        courseC_harvester_loops6_a: 请记住，您可以在一个重复循环中放置多个模块。
        courseC_harvester_loops6_b: 别忘了在玉米排的尽头转弯。
      courseC_harvester_loops6_2019:
        courseC_harvester_loops6_a: 请记住，您可以在一个重复循环中放置多个模块。
        courseC_harvester_loops6_b: 别忘了在玉米排的尽头转弯。
      courseC_harvester_loops7:
        courseC_harvester_loops7_a: 你可以用两种方法解决这个关卡, 要么先取玉米要么南瓜。
        courseC_harvester_loops7_b: 您将需要多个`重复`循环来解决这个关卡。
      courseC_harvester_loops7_2018:
        courseC_harvester_loops7_a: 你可以用两种方法解决这个关卡, 要么先取玉米要么南瓜。
        courseC_harvester_loops7_b: 您将需要多个`重复`循环来解决这个关卡。
      courseC_harvester_loops7_2019:
        courseC_harvester_loops7_a: 你可以用两种方法解决这个关卡, 要么先取玉米要么南瓜。
        courseC_harvester_loops7_b: 您将需要多个`重复`循环来解决这个关卡。
      courseC_harvester_loops8:
        courseC_harvester_loops8_a: 这个台阶是不是看起来和以前的关卡类似？移动是相似的，只是记得一路上要收集庄稼。
        courseC_harvester_loops8_b: 如果你想简化你的代码，你实际上可以把一个重复循环放到另一个里！这称为 **嵌套循环**。
      courseC_harvester_loops8_2018:
        courseC_harvester_loops8_a: 这个台阶是不是看起来和以前的关卡类似？移动是相似的，只是记得一路上要收集庄稼。
        courseC_harvester_loops8_b: 如果你想简化你的代码，你实际上可以把一个重复循环放到另一个里！这称为 **嵌套循环**。
      courseC_harvester_loops8_2019:
        courseC_harvester_loops8_a: 这个台阶是不是看起来和以前的关卡类似？移动是相似的，只是记得一路上要收集庄稼。
        courseC_harvester_loops8_b: 如果你想简化你的代码，你实际上可以把一个重复循环放到另一个里！这称为 **嵌套循环**。
      courseC_harvester_loops_challenge1a:
        courseC_harvester_loops_challenge1_a: 如果不使用循环这太难了。
        courseC_harvester_loops_challenge1_b: 你可以多次重复`前进`和`采摘玉米`，然后在每个角落右转。
        courseC_harvester_loops_challenge1_c: |-
          收集前四个玉米的最佳方法是在一个`重复`模块内再使用一个`重复`模块。你也可以在其余的关卡使用这个模式！

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></next></block></xml>
      courseC_harvester_loops_challenge1a_2018:
        courseC_harvester_loops_challenge1_a: 如果不使用循环这太难了。
        courseC_harvester_loops_challenge1_b: 你可以多次重复`前进`和`采摘玉米`，然后在每个角落右转。
        courseC_harvester_loops_challenge1_c: |-
          首先采集两次玉米后，可以用嵌套循环来采集接下来的 8 个。

          <xml><block type="controls_repeat">
                  <title name="TIMES">2</title>
                  <statement name="DO">
                    <block type="controls_repeat">
                      <title name="TIMES">4</title>
                      <statement name="DO">
                        <block type="maze_move">
                          <title name="DIR">moveForward</title>
                          <next>
                            <block type="harvester_corn"/>
                          </next>
                        </block>
                      </statement>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                        </block>
                      </next>
                    </block>
                  </statement>
                  </block></xml>
      courseC_harvester_loops_challenge1a_2019:
        courseC_harvester_loops_challenge1_a: 如果不使用循环这太难了。
        courseC_harvester_loops_challenge1_b: 你可以多次重复`前进`和`采摘玉米`，然后在每个角落右转。
        courseC_harvester_loops_challenge1_c: |-
          收集前四个玉米的最佳方法是在一个`重复`模块内再使用一个`重复`模块。你也可以在其余的关卡使用这个模式！

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="harvester_corn"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block></next></block></xml>
      courseC_harvester_loops_challenge2:
        courseC_harvester_loops_challenge2_a: 解决这个问题的一种方法看起来像是一个锯齿形。另一种方式看起来像一个螺旋！有很多不同的解决这个关卡的方案。请坚持下去!
        courseC_harvester_loops_challenge2_b: 你可以多次重复`前进`和`采摘莴苣`，然后在每个角落右转。
        courseC_harvester_loops_challenge2_c: |-
          重复运用这个曲折的模式两次就可以只用20个模块来完成这个关卡！

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          这种螺旋模式只要18个模块的编码!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_harvester_loops_challenge2_2018:
        courseC_harvester_loops_challenge2_a: 解决这个问题的一种方法看起来像是一个锯齿形。另一种方式看起来像一个螺旋！有很多不同的解决这个关卡的方案。请坚持下去!
        courseC_harvester_loops_challenge2_b: 你可以多次重复`前进`和`采摘莴苣`，然后在每个角落右转。
        courseC_harvester_loops_challenge2_c: |-
          重复运用这个曲折的模式两次就可以只用20个模块来完成这个关卡！

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          这种螺旋模式只要18个模块的编码!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_harvester_loops_challenge2_2019:
        courseC_harvester_loops_challenge2_a: 解决这个问题的一种方法看起来像是一个锯齿形。另一种方式看起来像一个螺旋！有很多不同的解决这个关卡的方案。请坚持下去!
        courseC_harvester_loops_challenge2_b: 你可以多次重复`前进`和`采摘莴苣`，然后在每个角落右转。
        courseC_harvester_loops_challenge2_c: |-
          重复运用这个曲折的模式两次就可以只用20个模块来完成这个关卡！

          ![](<https://images.code.org/26cfaf6fe4a275e266b51e9ef3711171-image-1493502306380.18.52 PM copy.png>)
        courseC_harvester_loops_challenge2_d: |-
          这种螺旋模式只要18个模块的编码!

          ![](<https://images.code.org/0bfc0a0ed6783fae908368a6e6d12c02-image-1493501358990.18.52 PM.png>)
      courseC_maze_debugging1:
        courseC_maze_debugging1_a: |-
          -   在第一步之后一切运行正常吗？
          -   在第二步之后它还工作吗？
          -   哪里出错了？
        courseC_maze_debugging1_b: 只需要添加1个模块来完成这个关卡。
      courseC_maze_debugging1_2018:
        courseC_maze_debugging1_a: |-
          -   在第一步之后一切运行正常吗？
          -   在第二步之后它还工作吗？
          -   哪里出错了？
        courseC_maze_debugging1_b: 只需要添加1个模块来完成这个关卡。
      courseC_maze_debugging1_2019:
        courseC_maze_debugging1_a: |-
          -   在第一步之后一切运行正常吗？
          -   在第二步之后它还工作吗？
          -   哪里出错了？
        courseC_maze_debugging1_b: 只需要添加1个模块来完成这个关卡。
      courseC_maze_debugging2:
        courseC_maze_debugging2_a: 工作区内有许多有价值的代码。请不要把它们全部删除来重新开始!
        courseC_maze_debugging2_b: |-
          -   在第一步之后一切运行正常吗？
          -   在第二步之后它还工作吗？
          -   哪里出错了？
        courseC_maze_debugging2_c: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
      courseC_maze_debugging2_2018:
        courseC_maze_debugging2_a: 工作区内有许多有价值的代码。请不要把它们全部删除来重新开始!
        courseC_maze_debugging2_b: |-
          -   在第一步之后一切运行正常吗？
          -   在第二步之后它还工作吗？
          -   哪里出错了？
        courseC_maze_debugging2_c: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
      courseC_maze_debugging2_2019:
        courseC_maze_debugging2_a: 工作区内有许多有价值的代码。请不要把它们全部删除来重新开始!
        courseC_maze_debugging2_b: |-
          -   在第一步之后一切运行正常吗？
          -   在第二步之后它还工作吗？
          -   哪里出错了？
        courseC_maze_debugging2_c: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
      courseC_maze_debugging3:
        courseC_maze_debugging3_a: |-
          如果要从你的代码中删除一个模块，请把所有的模块拖到工作区的其他地方。

          把想要删除的模块拖回到工具箱中。

          最后，把其他模块归位。

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
      courseC_maze_debugging3_2018:
        courseC_maze_debugging3_a: |-
          如果要从你的代码中删除一个模块，请把所有的模块拖到工作区的其他地方。

          把想要删除的模块拖回到工具箱中。

          最后，把其他模块归位。

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
      courseC_maze_debugging3_2019:
        courseC_maze_debugging3_a: |-
          如果要从你的代码中删除一个模块，请把所有的模块拖到工作区的其他地方。

          把想要删除的模块拖回到工具箱中。

          最后，把其他模块归位。

          ![](https://images.code.org/bbafa5a100505b2b99a3f43ad3195471-image-1479933232821.gif)
        courseC_maze_debugging3_b: 搞不清楚那里有错？尝试运行代码多次，看看会发生什么。
      courseC_maze_debugging4:
        courseC_maze_debugging4_a: 使用 "步进" 按钮一次运行一个指令。这能帮你找到出错的行了吗？
        courseC_maze_debugging4_b: 其中一个转折让斯奎特走错了方向。你能找出是哪一个吗？
      courseC_maze_debugging4_2018:
        courseC_maze_debugging4_a: 使用 "步进" 按钮一次运行一个指令。这能帮你找到出错的行了吗？
        courseC_maze_debugging4_b: 其中一个转折让斯奎特走错了方向。你能找出是哪一个吗？
      courseC_maze_debugging4_2019:
        courseC_maze_debugging4_a: 使用 "步进" 按钮一次运行一个指令。这能帮你找到出错的行了吗？
        courseC_maze_debugging4_b: 其中一个转折让斯奎特走错了方向。你能找出是哪一个吗？
      courseC_maze_debugging5:
        courseC_maze_debugging5_a: "工作区中已经有很多有用的模块。请不要全部删除!  \n\n使用 \"步进\" 按钮来仔细查看并找出代码出错的地方。"
        courseC_maze_debugging5_b: 试着大声说出斯奎特应该做什么。它是否和工作区的代码一样？哪里出错了？
      courseC_maze_debugging5_2018:
        courseC_maze_debugging5_a: "工作区中已经有很多有用的模块。请不要全部删除!  \n\n使用 \"步进\" 按钮来仔细查看并找出代码出错的地方。"
        courseC_maze_debugging5_c: 您可以在转向模块的下拉菜单中更改其方向。
        courseC_maze_debugging5_b: 试着大声说出斯奎特应该做什么。它是否和工作区的代码一样？哪里出错了？
      courseC_maze_debugging5_2019:
        courseC_maze_debugging5_a: "工作区中已经有很多有用的模块。请不要全部删除!  \n\n使用 \"步进\" 按钮来仔细查看并找出代码出错的地方。"
        courseC_maze_debugging5_c: 您可以在转向模块的下拉菜单中更改其方向。
        courseC_maze_debugging5_b: 试着大声说出斯奎特应该做什么。它是否和工作区的代码一样？哪里出错了？
      courseC_maze_debugging6:
        courseC_maze_debugging6_a: |-
          -   斯奎特应该做什么？
          -   斯奎特做了什么？
          -   那告诉了你什么？
        courseC_maze_debugging6_b: 等你发现并修复了第一个错误, 请再次进行调试过程来找到另一个错误。 重复这个过程, 直到程序可以正常工作!
      courseC_maze_debugging6_2018:
        courseC_maze_debugging6_a: |-
          -   斯奎特应该做什么？
          -   斯奎特做了什么？
          -   那告诉了你什么？
        courseC_maze_debugging6_b: 等你发现并修复了第一个错误, 请再次进行调试过程来找到另一个错误。 重复这个过程, 直到程序可以正常工作!
      courseC_maze_debugging6_2019:
        courseC_maze_debugging6_a: |-
          -   斯奎特应该做什么？
          -   斯奎特做了什么？
          -   那告诉了你什么？
        courseC_maze_debugging6_b: 等你发现并修复了第一个错误, 请再次进行调试过程来找到另一个错误。 重复这个过程, 直到程序可以正常工作!
      courseC_maze_debugging7:
        courseC_maze_debugging7_a: |-
          -   在第一步的时候运行正常吗？
          -   第二步呢？
          -   哪里出错了？
        courseC_maze_debugging7_b: 请不要忘了使用“步进”按钮来逐行运行程序！
        courseC_maze_debugging7_c: |-
          在发现并修复第一个缺陷后，请确保再次使用调试流程直到找到下一个。

          重复这个调试过程，直到程序正常工作！
      courseC_maze_debugging7_2018:
        courseC_maze_debugging7_a: |-
          -   在第一步的时候运行正常吗？
          -   第二步呢？
          -   哪里出错了？
        courseC_maze_debugging7_b: 请不要忘了使用“步进”按钮来逐行运行程序！
        courseC_maze_debugging7_c: |-
          在发现并修复第一个缺陷后，请确保再次使用调试流程直到找到下一个。

          重复这个调试过程，直到程序正常工作！
      courseC_maze_debugging7_2019:
        courseC_maze_debugging7_a: |-
          -   在第一步的时候运行正常吗？
          -   第二步呢？
          -   哪里出错了？
        courseC_maze_debugging7_b: 请不要忘了使用“步进”按钮来逐行运行程序！
        courseC_maze_debugging7_c: |-
          在发现并修复第一个缺陷后，请确保再次使用调试流程直到找到下一个。

          重复这个调试过程，直到程序正常工作！
      courseC_maze_debugging_challenge1:
        courseC_maze_debugging_challenge1_a: 向左还是向右？由你决定!
        courseC_maze_debugging_challenge1_b: 斯奎特的路径是一个矩形！他每次都要以同样的方式转动！
        courseC_maze_debugging_challenge1_c: 如果被难住了, 可以随时重新开始, 或删除所有的代码, 找到自己的方法!
      courseC_maze_debugging_challenge1_2018:
        courseC_maze_debugging_challenge1_a: 向左还是向右？由你决定!
        courseC_maze_debugging_challenge1_b: 斯奎特的路径是一个矩形！他每次都要以同样的方式转动！
        courseC_maze_debugging_challenge1_c: 如果被难住了, 可以随时重新开始, 或删除所有的代码, 找到自己的方法!
      courseC_maze_debugging_challenge1_2019:
        courseC_maze_debugging_challenge1_a: 向左还是向右？由你决定!
        courseC_maze_debugging_challenge1_b: 斯奎特的路径是一个矩形！他每次都要以同样的方式转动！
        courseC_maze_debugging_challenge1_c: 如果被难住了, 可以随时重新开始, 或删除所有的代码, 找到自己的方法!
      courseC_maze_debugging_challenge2:
        courseC_maze_debugging_challenge2_b: 如果被难住了，试着调试代码。看看哪里错了？
        courseC_maze_debugging_challenge2_c: |-
          有两种不同的路径，有一种方法是只前进，并转向四次。如果你找到一个使用循环的方法, 可能会有更多方法！

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_debugging_challenge2_2018:
        courseC_maze_debugging_challenge2_b: 如果被难住了，试着调试代码。看看哪里错了？
        courseC_maze_debugging_challenge2_c: |-
          有两种不同的路径，有一种方法是只前进，并转向四次。如果你找到一个使用循环的方法, 可能会有更多方法！

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_debugging_challenge2_2019:
        courseC_maze_debugging_challenge2_b: 如果被难住了，试着调试代码。看看哪里错了？
        courseC_maze_debugging_challenge2_c: |-
          有两种不同的路径，有一种方法是只前进，并转向四次。如果你找到一个使用循环的方法, 可能会有更多方法！

          ![](<https://images.code.org/8a4665671cda35fea1f629a5bcc39e26-image-1493502743154.48.05 PM.png>)
      courseC_maze_loops_challenge1a:
        courseC_maze_loops_challenge1_a: 把这条路看成是两个不同的部分。每一个都有一个可以重复的模式。
        courseC_maze_loops_challenge1_b: 你还记得如何使用循环来重复楼梯图案吗？
      courseC_maze_loops_challenge1a_2018:
        courseC_maze_loops_challenge1_a: 把这条路看成是两个不同的部分。每一个都有一个可以重复的模式。
        courseC_maze_loops_challenge1_b: 你还记得如何使用循环来重复楼梯图案吗？
      courseC_maze_loops_challenge1a_2019:
        courseC_maze_loops_challenge1_a: 把这条路看成是两个不同的部分。每一个都有一个可以重复的模式。
        courseC_maze_loops_challenge1_b: 你还记得如何使用循环来重复楼梯图案吗？
      courseC_maze_programming1:
        courseC_maze_programming1_0: 确保所有模块都完全粘到了一起，然后再次点击"运行"。
      courseC_maze_programming1_2018:
        courseC_maze_programming1_0: 确保所有模块都完全粘到了一起，然后再次点击"运行"。
      courseC_maze_programming1_2019:
        courseC_maze_programming1_0: 确保所有模块都完全粘到了一起，然后再次点击"运行"。
      courseC_maze_programming2:
        courseC_maze_programming2_a: 若要使用<xml><block type="maze_moveForward"/></xml>模块，将它从工具箱中拖出，并粘贴到<xml><block
          type="when_run"/></xml>模块下。
        courseC_maze_programming2_b: 确保所有模块都完全粘到了一起，然后再次点击"运行"。
      courseC_maze_programming2_2018:
        courseC_maze_programming2_a: 若要使用<xml><block type="maze_moveForward"/></xml>模块，将它从工具箱中拖出，并粘贴到<xml><block
          type="when_run"/></xml>模块下。
        courseC_maze_programming2_b: 确保所有模块都完全粘到了一起，然后再次点击"运行"。
      courseC_maze_programming2_2019:
        courseC_maze_programming2_a: 若要使用<xml><block type="maze_moveForward"/></xml>模块，将它从工具箱中拖出，并粘贴到<xml><block
          type="when_run"/></xml>模块下。
        courseC_maze_programming2_b: 确保所有模块都完全粘到了一起，然后再次点击"运行"。
      courseC_maze_programming3:
        courseC_maze_programming3_a: 试着先运行一次代码, 看看哪里出问题了。
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          若要从代码中间删除模块, 请将所有模块拖到工作区的其他部分。

          将要删除的块拖回工具箱。

          最后, 把其他模块放回属于他们的地方。
      courseC_maze_programming3_2018:
        courseC_maze_programming3_a: 试着先运行一次代码, 看看哪里出问题了。
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          若要从代码中间删除模块, 请将所有模块拖到工作区的其他部分。

          将要删除的块拖回工具箱。

          最后, 把其他模块放回属于他们的地方。
      courseC_maze_programming3_2019:
        courseC_maze_programming3_a: 试着先运行一次代码, 看看哪里出问题了。
        courseC_maze_programming3_b: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          若要从代码中间删除模块, 请将所有模块拖到工作区的其他部分。

          将要删除的块拖回工具箱。

          最后, 把其他模块放回属于他们的地方。
      courseC_maze_programming4:
        courseC_maze_programming4_a: 记住，当你转向时，你是从_小鸟_的视角来进行的转向。如果你向右转，小鸟会朝向下方。
        courseC_maze_programming4_b: |-
          遵循如下路径：

          -   向前移动
          -   转向一条路
          -   向前移动
          -   向后转向另一条路
          -   向前移动
      courseC_maze_programming4_2018:
        courseC_maze_programming4_a: 记住，当你转向时，你是从_小鸟_的视角来进行的转向。如果你向右转，小鸟会朝向下方。
        courseC_maze_programming4_b: |-
          遵循如下路径：

          -   向前移动
          -   转向一条路
          -   向前移动
          -   向后转向另一条路
          -   向前移动
      courseC_maze_programming4_2019:
        courseC_maze_programming4_a: 记住，当你转向时，你是从_小鸟_的视角来进行的转向。如果你向右转，小鸟会朝向下方。
        courseC_maze_programming4_b: |-
          遵循如下路径：

          -   向前移动
          -   转向一条路
          -   向前移动
          -   向后转向另一条路
          -   向前移动
      courseC_maze_programming5:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 这只鸟将转一个转弯来完成这个关卡。你能想出哪条路吗？
        courseC_maze_programming5_c: 该解决方案将有两个`向前移动`模块，一个转向，并再加两个`向前移动`模块。
      courseC_maze_programming5_2018:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 这只鸟将转一个转弯来完成这个关卡。你能想出哪条路吗？
        courseC_maze_programming5_c: 该解决方案将有两个`向前移动`模块，一个转向，并再加两个`向前移动`模块。
      courseC_maze_programming5_2019:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 这只鸟将转一个转弯来完成这个关卡。你能想出哪条路吗？
        courseC_maze_programming5_c: 该解决方案将有两个`向前移动`模块，一个转向，并再加两个`向前移动`模块。
      courseC_maze_programming6:
        courseC_maze_programming6_a: 有两种方法来解决这个难题 ！
        courseC_maze_programming6_b: 跟着你的手指从鸟到猪, 你采取了哪些步骤？
        courseC_maze_programming6_c: 记住, 你必须先转弯, 因为鸟儿开始时面对一堵墙。
        courseC_maze_programming6_d: 感觉被难住了？ 看看这条路!
      courseC_maze_programming6_2018:
        courseC_maze_programming6_a: 有两种方法来解决这个难题 ！
        courseC_maze_programming6_b: 跟着你的手指从鸟到猪, 你采取了哪些步骤？
        courseC_maze_programming6_c: 记住, 你必须先转弯, 因为鸟儿开始时面对一堵墙。
        courseC_maze_programming6_d: 感觉被难住了？ 看看这条路!
      courseC_maze_programming6_2019:
        courseC_maze_programming6_a: 有两种方法来解决这个难题 ！
        courseC_maze_programming6_b: 跟着你的手指从鸟到猪, 你采取了哪些步骤？
        courseC_maze_programming6_c: 记住, 你必须先转弯, 因为鸟儿开始时面对一堵墙。
        courseC_maze_programming6_d: 感觉被难住了？ 看看这条路!
      courseC_maze_programming7:
        courseC_maze_programming7_a: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseC_maze_programming7_b: 如果你很难弄清楚这个关卡, 试着在一张纸上写下这些动作。
      courseC_maze_programming7_2018:
        courseC_maze_programming7_a: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseC_maze_programming7_b: 如果你很难弄清楚这个关卡, 试着在一张纸上写下这些动作。
      courseC_maze_programming7_2019:
        courseC_maze_programming7_a: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseC_maze_programming7_b: 如果你很难弄清楚这个关卡, 试着在一张纸上写下这些动作。
      courseC_maze_programming8:
        courseC_maze_programming8_a: 请记住, 如果你被难住了, 你可以使用 "步进" 按钮来查看你的代码。
        courseC_maze_programming8_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_maze_programming8_2018:
        courseC_maze_programming8_a: 请记住, 如果你被难住了, 你可以使用 "步进" 按钮来查看你的代码。
        courseC_maze_programming8_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_maze_programming8_2019:
        courseC_maze_programming8_a: 请记住, 如果你被难住了, 你可以使用 "步进" 按钮来查看你的代码。
        courseC_maze_programming8_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseC_maze_programming_challenge1:
        courseC_maze_programming_challenge1_a: 有很多方法可以找到猪。用你的手指找到一个路径, 然后写下程序！
      courseC_maze_programming_challenge1_2018:
        courseC_maze_programming_challenge1_a: 有很多方法可以找到猪。用你的手指找到一个路径, 然后写下程序！
      courseC_maze_programming_challenge1_2019:
        courseC_maze_programming_challenge1_a: 有很多方法可以找到猪。用你的手指找到一个路径, 然后写下程序！
      courseC_maze_programming_challenge2:
        courseC_maze_programming_challenge2_a: "\"如果你让我后退，要格外小心我朝向了正确的路！\\*"
        courseC_maze_programming_challenge2_b: |-
          最短的解决方案仅使用5个模块, 但它使用了这个模块：

          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_maze_programming_challenge2_2018:
        courseC_maze_programming_challenge2_a: "\"如果你让我后退，要格外小心我朝向了正确的路！\\*"
        courseC_maze_programming_challenge2_b: |-
          最短的解决方案仅使用5个模块, 但它使用了这个模块：

          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_maze_programming_challenge2_2019:
        courseC_maze_programming_challenge2_a: "\"如果你让我后退，要格外小心我朝向了正确的路！\\*"
        courseC_maze_programming_challenge2_b: |-
          最短的解决方案仅使用5个模块, 但它使用了这个模块：

          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="3-10">???</title></block></xml>
      courseC_starWars_loops1:
        courseC_starWars_loops1_a: 当 BB-8 在废金属上翻滚时, 他会自动把它捡起来。
        courseC_starWars_loops1_b: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        courseC_starWars_loops1_c: 你要`向前移动`五次来解决这个关卡。
      courseC_starWars_loops10:
        courseC_starWars_loops10_a: 这个图案看起来像一大套台阶吗？看看你是否可以用你从以前的关卡中学到的东西来到达所有的转弯。
        courseC_starWars_loops10_b: 如果你想使用更少的代码, 你可以把`重复循环`放在另一个里面！这称为 \*\* 嵌套循环 \*\*。
        courseC_starWars_loops10_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      courseC_starWars_loops10_2018:
        courseC_starWars_loops10_a: 这个图案看起来像一大套台阶吗？看看你是否可以用你从以前的关卡中学到的东西来到达所有的转弯。
        courseC_starWars_loops10_b: 如果你想使用更少的代码, 你可以把`重复循环`放在另一个里面！这称为 \*\* 嵌套循环 \*\*。
        courseC_starWars_loops10_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      courseC_starWars_loops10_2019:
        courseC_starWars_loops10_a: 这个图案看起来像一大套台阶吗？看看你是否可以用你从以前的关卡中学到的东西来到达所有的转弯。
        courseC_starWars_loops10_b: 如果你想使用更少的代码, 你可以把`重复循环`放在另一个里面！这称为 \*\* 嵌套循环 \*\*。
        courseC_starWars_loops10_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      courseC_starWars_loops1_2018:
        courseC_starWars_loops1_a: 当 BB-8 在废金属上翻滚时, 他会自动把它捡起来。
        courseC_starWars_loops1_b: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        courseC_starWars_loops1_c: 你要`向前移动`五次来解决这个关卡。
      courseC_starWars_loops1_2019:
        courseC_starWars_loops1_a: 当 BB-8 在废金属上翻滚时, 他会自动把它捡起来。
        courseC_starWars_loops1_b: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
        courseC_starWars_loops1_c: 你要`向前移动`五次来解决这个关卡。
      courseC_starWars_loops2:
        courseC_starWars_loops2_a: 要重复代码, 拖出一个`重复`循环, 然后把它放在你想要的模块里面。
      courseC_starWars_loops2_2018:
        courseC_starWars_loops2_a: 要重复代码, 拖出一个`重复`循环, 然后把它放在你想要的模块里面。
      courseC_starWars_loops2_2019:
        courseC_starWars_loops2_a: 要重复代码, 拖出一个`重复`循环, 然后把它放在你想要的模块里面。
      courseC_starWars_loops4:
        courseC_starWars_loops4_c: 点击 "左" 在转向模块旁边的小箭头可以让你把它改成 "右"。
        courseC_starWars_loops4_a: 使用两个`重复`模块。
        courseC_starWars_loops4_b: '每个`重复`循环将只有一个命令在它里面: `向前移动`。'
      courseC_starWars_loops4_2018:
        courseC_starWars_loops4_c: 点击 "左" 在转向模块旁边的小箭头可以让你把它改成 "右"。
        courseC_starWars_loops4_a: 使用两个`重复`模块。
        courseC_starWars_loops4_b: '每个`重复`循环将只有一个命令在它里面: `向前移动`。'
      courseC_starWars_loops4_2019:
        courseC_starWars_loops4_c: 点击 "左" 在转向模块旁边的小箭头可以让你把它改成 "右"。
        courseC_starWars_loops4_a: 使用两个`重复`模块。
        courseC_starWars_loops4_b: '每个`重复`循环将只有一个命令在它里面: `向前移动`。'
      courseC_starWars_loops5:
        courseC_starWars_loops5_b: 要往下走, 你必须转向, 然后向前移动。
        courseC_starWars_loops5_a: 最好的解决方案是使用一个转向, 然后一个单一的`向前移动` ，另一个转向，然后一个循环。
      courseC_starWars_loops5_2018:
        courseC_starWars_loops5_a: 最好的方案是用一个 `向前移动`，然后转向，然后是循环。
      courseC_starWars_loops5_2019:
        courseC_starWars_loops5_a: 最好的方案是用一个 `向前移动`，然后转向，然后是循环。
      courseC_starWars_loops6:
        courseC_starWars_loops6_a: 试着在一张纸上写下移动的情况, 来寻找模式。
        courseC_starWars_loops6_b: 如果你想使用更少的代码, 你可以把`重复循环`放在另一个里面！这称为 \*\* 嵌套循环 \*\*。
      courseC_starWars_loops6_2018:
        courseC_starWars_loops6_a: 试着在一张纸上写下移动的情况, 来寻找模式。
        courseC_starWars_loops6_b: 如果你想使用更少的代码, 你可以把`重复循环`放在另一个里面！这称为 \*\* 嵌套循环 \*\*。
      courseC_starWars_loops6_2019:
        courseC_starWars_loops6_a: 试着在一张纸上写下移动的情况, 来寻找模式。
        courseC_starWars_loops6_b: 如果你想使用更少的代码, 你可以把`重复循环`放在另一个里面！这称为 \*\* 嵌套循环 \*\*。
      courseC_starWars_loops7:
        courseC_starWars_loops7_a: 这个图案看起来比实际更难! 从一个简单的楼梯步进开始。这是否涵盖了所有的废旧金属？
        courseC_starWars_loops7_b: 如果在这关遇到困难，请尝试在一张纸上写下所有的动作并寻找规律。
        courseC_starWars_loops7_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      courseC_starWars_loops7_2018:
        courseC_starWars_loops7_a: 这个图案看起来比实际更难! 从一个简单的楼梯步进开始。这是否涵盖了所有的废旧金属？
        courseC_starWars_loops7_b: 如果在这关遇到困难，请尝试在一张纸上写下所有的动作并寻找规律。
        courseC_starWars_loops7_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      courseC_starWars_loops7_2019:
        courseC_starWars_loops7_a: 这个图案看起来比实际更难! 从一个简单的楼梯步进开始。这是否涵盖了所有的废旧金属？
        courseC_starWars_loops7_b: 如果在这关遇到困难，请尝试在一张纸上写下所有的动作并寻找规律。
        courseC_starWars_loops7_c: 不要害怕犯错误! 即使你还没有解决这个关卡，运行代码, 看看会发生什么。
      courseC_starWars_loops8:
        course_starWars_loops8_a: 试着将问题分成更小的部分来思考。别着急。你不需要第一次就全做对！
        course_starWars_loops8_b: 把这个问题的前半部分看成是台阶步进问题。你以前是怎么解决的？
        course_starWars_loops8_c: |-
          看看这条路。

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2018:
        course_starWars_loops8_a: 试着将问题分成更小的部分来思考。别着急。你不需要第一次就全做对！
        course_starWars_loops8_b: 把这个问题的前半部分看成是台阶步进问题。你以前是怎么解决的？
        course_starWars_loops8_c: |-
          看看这条路。

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops8_2019:
        course_starWars_loops8_a: 试着将问题分成更小的部分来思考。别着急。你不需要第一次就全做对！
        course_starWars_loops8_b: 把这个问题的前半部分看成是台阶步进问题。你以前是怎么解决的？
        course_starWars_loops8_c: |-
          看看这条路。

          ![](https://images.code.org/7d696dd3b1e6984a1d6041f366d5c96b-image-1510198804955.37.04.png)
      courseC_starWars_loops9:
        course_starWars_loops9_b: 您可以在`重复`循环中放置多个模块。
        course_starWars_loops9_c: |-
          你不需要向左转来解决这个关卡。你所有的转向都可以向右。

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2018:
        course_starWars_loops9_b: 您可以在`重复`循环中放置多个模块。
        course_starWars_loops9_c: |-
          你不需要向左转来解决这个关卡。你所有的转向都可以向右。

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseC_starWars_loops9_2019:
        course_starWars_loops9_b: 您可以在`重复`循环中放置多个模块。
        course_starWars_loops9_c: |-
          你不需要向左转来解决这个关卡。你所有的转向都可以向右。

          ![](https://images.code.org/3dd00d424aa4112934053548b48bbb69-image-1510198997590.40.57.png)
      courseD_artist_1_2018:
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project1_b: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
      courseD_artist_1_2018_2019:
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project1_b: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
      courseD_artist_2_2018:
        courseD_artist_project1_b: 请记住, 向前移动会画一条线，而`向前跳`则不会。
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
      courseD_artist_2_2018_2019:
        courseD_artist_project1_b: 请记住, 向前移动会画一条线，而`向前跳`则不会。
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
      courseD_artist_5_2018:
        '1': 如果切换了形状，别忘了还需要改变角度！
      courseD_artist_5_2018_2019:
        '1': 如果切换了形状，别忘了还需要改变角度！
      courseD_artist_binary1:
        courseD_artist_binary1_a: 将文本块中的 "？？" 替换为0 和1 所需的二进制图像。
        courseD_artist_binary1_b: 艺术家将每个1，画成一个白色的空间, 每个0画成一个黑色的空间。
        courseD_artist_binary1_c: |-
          这就是您可以这样输入二进制代码的方法：

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2018:
        courseD_artist_binary1_a: 将文本块中的 "？？" 替换为0 和1 所需的二进制图像。
        courseD_artist_binary1_b: 艺术家将每个1，画成一个白色的空间, 每个0画成一个黑色的空间。
        courseD_artist_binary1_c: |-
          这就是您可以这样输入二进制代码的方法：

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary1_2019:
        courseD_artist_binary1_a: 将文本块中的 "？？" 替换为0 和1 所需的二进制图像。
        courseD_artist_binary1_b: 艺术家将每个1，画成一个白色的空间, 每个0画成一个黑色的空间。
        courseD_artist_binary1_c: |-
          这就是您可以这样输入二进制代码的方法：

          ![](https://images.code.org/ec0f974e32c4323fc61cb49b48b8f1c0-image-1500334311345.2_hint.gif)
      courseD_artist_binary2:
        courseD_artist_binary2_a: 点击`运行`来看程序如何运行
      courseD_artist_binary2_2018:
        courseD_artist_binary2_a: 点击`运行`来看程序如何运行
      courseD_artist_binary2_2019:
        courseD_artist_binary2_a: 点击`运行`来看程序如何运行
      courseD_artist_binary3:
        courseD_artist_binary3_a: 工具箱中的四个二进制模式之一将解决这个关卡!
        courseD_artist_binary3_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary3_2018:
        courseD_artist_binary3_a: 工具箱中的四个二进制模式之一将解决这个关卡!
        courseD_artist_binary3_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary3_2019:
        courseD_artist_binary3_a: 工具箱中的四个二进制模式之一将解决这个关卡!
        courseD_artist_binary3_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary4:
        courseD_artist_binary4_a: 看看最上面一行的前三个正方形。你能重复这三个来画出整个图案吗？
        courseD_artist_binary4_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary4_2018:
        courseD_artist_binary4_a: 看看最上面一行的前三个正方形。你能重复这三个来画出整个图案吗？
        courseD_artist_binary4_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary4_2019:
        courseD_artist_binary4_a: 看看最上面一行的前三个正方形。你能重复这三个来画出整个图案吗？
        courseD_artist_binary4_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary5:
        courseD_artist_binary5_a: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary5_b: 您只需交换两行, 就可以制作一个微笑。
        courseD_artist_binary5_c: 如果您在解决此关卡时遇到困难, 请尝试在一张纸上写下二进制线并查找相同模式。
      courseD_artist_binary5_2018:
        courseD_artist_binary5_a: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary5_b: 您只需交换两行, 就可以制作一个微笑。
        courseD_artist_binary5_c: 如果您在解决此关卡时遇到困难, 请尝试在一张纸上写下二进制线并查找相同模式。
      courseD_artist_binary5_2019:
        courseD_artist_binary5_a: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary5_b: 您只需交换两行, 就可以制作一个微笑。
        courseD_artist_binary5_c: 如果您在解决此关卡时遇到困难, 请尝试在一张纸上写下二进制线并查找相同模式。
      courseD_artist_binary6:
        courseD_artist_binary6_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary6_b: 您可以一次生成二进制字符串, 并继续测试!
      courseD_artist_binary6_2018:
        courseD_artist_binary6_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary6_b: 您可以一次生成二进制字符串, 并继续测试!
      courseD_artist_binary6_2019:
        courseD_artist_binary6_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary6_b: 您可以一次生成二进制字符串, 并继续测试!
      courseD_artist_binary7:
        courseD_artist_binary7_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary7_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary7_2018:
        courseD_artist_binary7_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary7_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary7_2019:
        courseD_artist_binary7_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary7_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary8:
        courseD_artist_binary8_a: 螺旋有时会令人困惑。在创建此设计时, 请将您心目中的每条水平线分开。
        courseD_artist_binary8_b: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary8_c: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary8_2018:
        courseD_artist_binary8_a: 螺旋有时会令人困惑。在创建此设计时, 请将您心目中的每条水平线分开。
        courseD_artist_binary8_b: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary8_c: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary8_2019:
        courseD_artist_binary8_a: 螺旋有时会令人困惑。在创建此设计时, 请将您心目中的每条水平线分开。
        courseD_artist_binary8_b: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary8_c: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_artist_binary_challenge2_2018:
        courseD_artist_binary_challenge2_a: 原来的程序中只有几行错误。
      courseD_artist_binary_challenge2_2019:
        courseD_artist_binary_challenge2_a: 原来的程序中只有几行错误。
      courseD_artist_nestedLoops1:
        courseD_artist_nestedLoops1_a: 最简单的绘制方法是向前移动并向右转。
        courseD_artist_nestedLoops1_b: 你可以再两个模块里用一个`重复`循环来画这个三角形。你需要哪个模块？
        courseD_artist_nestedLoops1_c: 尝试在纸面上编写步骤, 并查找可以用循环简化的模式。
      courseD_artist_nestedLoops1_2018:
        courseD_artist_nestedLoops1_a: 最简单的绘制方法是向前移动并向右转。
        courseD_artist_nestedLoops1_b: 你可以再两个模块里用一个`重复`循环来画这个三角形。你需要哪个模块？
        courseD_artist_nestedLoops1_c: 尝试在纸面上编写步骤, 并查找可以用循环简化的模式。
      courseD_artist_nestedLoops1_2019:
        courseD_artist_nestedLoops1_a: 最简单的绘制方法是向前移动并向右转。
        courseD_artist_nestedLoops1_b: 你可以再两个模块里用一个`重复`循环来画这个三角形。你需要哪个模块？
        courseD_artist_nestedLoops1_c: 尝试在纸面上编写步骤, 并查找可以用循环简化的模式。
      courseD_artist_nestedLoops1a:
        courseD_artist_nestedLoops1a_a: "您将需要绘制总共6个三角形。完成每个三角形后, 旋转60度并接着开始下一个三角形。
          \n\n![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)"
        courseD_artist_nestedLoops1a_b: 如果你用一个循环来创建你的三角形, 艺术家应该朝着同样的方向开始。这将使60度转向容易得多。
        courseD_artist_nestedLoops1a_c: 如果需要颜色, 请使用代码中的`设置颜色`模块。您不必用模板图像中一样的颜色。
      courseD_artist_nestedLoops1a_2018:
        courseD_artist_nestedLoops1a_a: "您将需要绘制总共6个三角形。完成每个三角形后, 旋转60度并接着开始下一个三角形。
          \n\n![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)"
        courseD_artist_nestedLoops1a_b: 如果你用一个循环来创建你的三角形, 艺术家应该朝着同样的方向开始。这将使60度转向容易得多。
        courseD_artist_nestedLoops1a_c: 如果需要颜色, 请使用代码中的`设置颜色`模块。您不必用模板图像中一样的颜色。
      courseD_artist_nestedLoops1a_2019:
        courseD_artist_nestedLoops1a_a: "您将需要绘制总共6个三角形。完成每个三角形后, 旋转60度并接着开始下一个三角形。
          \n\n![](https://images.code.org/ad6c6d98298df9f4e3cea5bbe5ec776e-image-1497476332024.2_solution2.gif)"
        courseD_artist_nestedLoops1a_b: 如果你用一个循环来创建你的三角形, 艺术家应该朝着同样的方向开始。这将使60度转向容易得多。
        courseD_artist_nestedLoops1a_c: 如果需要颜色, 请使用代码中的`设置颜色`模块。您不必用模板图像中一样的颜色。
      courseD_artist_nestedLoops2:
        courseD_artist_nestedLoops2_a: 将三角形代码放到另一个`重复`循环里来进行嵌套循环。
        courseD_artist_nestedLoops2_b: 记住把`转向`模块放在循环内, 让艺术家在每个三角形后转向。
      courseD_artist_nestedLoops2_2018:
        courseD_artist_nestedLoops2_a: 将三角形代码放到另一个`重复`循环里来进行嵌套循环。
        courseD_artist_nestedLoops2_b: 记住把`转向`模块放在循环内, 让艺术家在每个三角形后转向。
      courseD_artist_nestedLoops2_2019:
        courseD_artist_nestedLoops2_a: 将三角形代码放到另一个`重复`循环里来进行嵌套循环。
        courseD_artist_nestedLoops2_b: 记住把`转向`模块放在循环内, 让艺术家在每个三角形后转向。
      courseD_artist_nestedLoops3:
        courseD_artist_nestedLoops3_a: |-
          试着用“向前跳”模块来从一个正方形的顶部到下一个正方形开始的地方。

          如果你的正方形有20像素高，且它们相隔20像素，你需要跳多远？
        courseD_artist_nestedLoops3_b: '请不要忘记使用嵌套循环快速通过这个关卡。 '
        courseD_artist_nestedLoops3_c: '开始使用`重复`循环来制作一个正方形。 接下来, 重复该方块8次, 在两个之间跳跃40像素。 '
      courseD_artist_nestedLoops3_2018:
        courseD_artist_nestedLoops3_a: |-
          试着用“向前跳”模块来从一个正方形的顶部到下一个正方形开始的地方。

          如果你的正方形有20像素高，且它们相隔20像素，你需要跳多远？
        courseD_artist_nestedLoops3_b: '请不要忘记使用嵌套循环快速通过这个关卡。 '
        courseD_artist_nestedLoops3_c: '开始使用`重复`循环来制作一个正方形。 接下来, 重复该方块8次, 在两个之间跳跃40像素。 '
      courseD_artist_nestedLoops3_2019:
        courseD_artist_nestedLoops3_a: |-
          试着用“向前跳”模块来从一个正方形的顶部到下一个正方形开始的地方。

          如果你的正方形有20像素高，且它们相隔20像素，你需要跳多远？
        courseD_artist_nestedLoops3_b: '请不要忘记使用嵌套循环快速通过这个关卡。 '
        courseD_artist_nestedLoops3_c: '开始使用`重复`循环来制作一个正方形。 接下来, 重复该方块8次, 在两个之间跳跃40像素。 '
      courseD_artist_nestedLoops4:
        courseD_artist_nestedLoops4_d: 为了正确地解决这一问题, 你需要在转弯 **之前**移动, 否则你的圆圈将会偏差极小的量！
        courseD_artist_nestedLoops4_a: |-
          制作圆圈:

          -   重复360次
          -   向前移动1像素
          -   向左转1度
        courseD_artist_nestedLoops4_b: 请不要忘了在圆圈间往前跳跃50 像素。
        courseD_artist_nestedLoops4_c: 使用嵌套循环来画4 次圆圈。
      courseD_artist_nestedLoops4_2018:
        courseD_artist_nestedLoops4_d: 为了正确地解决这一问题, 你需要在转弯 **之前**移动, 否则你的圆圈将会偏差极小的量！
        courseD_artist_nestedLoops4_a: |-
          制作圆圈:

          -   重复360次
          -   向前移动1像素
          -   向左转1度
        courseD_artist_nestedLoops4_b: 请不要忘了在圆圈间往前跳跃50 像素。
        courseD_artist_nestedLoops4_c: 使用嵌套循环来画4 次圆圈。
      courseD_artist_nestedLoops4_2019:
        courseD_artist_nestedLoops4_d: 为了正确地解决这一问题, 你需要在转弯 **之前**移动, 否则你的圆圈将会偏差极小的量！
        courseD_artist_nestedLoops4_a: |-
          制作圆圈:

          -   重复360次
          -   向前移动1像素
          -   向左转1度
        courseD_artist_nestedLoops4_b: 请不要忘了在圆圈间往前跳跃50 像素。
        courseD_artist_nestedLoops4_c: 使用嵌套循环来画4 次圆圈。
      courseD_artist_nestedLoops5:
        courseD_artist_nestedLoops5_a: |-
          试试这样做很容易：

          -   重复4 次
          -   绘制一个圆圈
          -   往前跳跃50 像素
          -   右转90 度
        courseD_artist_nestedLoops5_b: 要做一个圆圈, 你需要设置一个重复循环重复360次。在循环中, 向前移动1像素, 然后转1度。
      courseD_artist_nestedLoops5_2018:
        courseD_artist_nestedLoops5_a: |-
          试试这样做很容易：

          -   重复4 次
          -   绘制一个圆圈
          -   往前跳跃50 像素
          -   右转90 度
        courseD_artist_nestedLoops5_b: 要做一个圆圈, 你需要设置一个重复循环重复360次。在循环中, 向前移动1像素, 然后转1度。
      courseD_artist_nestedLoops5_2019:
        courseD_artist_nestedLoops5_a: |-
          试试这样做很容易：

          -   重复4 次
          -   绘制一个圆圈
          -   往前跳跃50 像素
          -   右转90 度
        courseD_artist_nestedLoops5_b: 要做一个圆圈, 你需要设置一个重复循环重复360次。在循环中, 向前移动1像素, 然后转1度。
      courseD_artist_nestedLoops7:
        courseD_artist_nestedLoops7_a: 你需要在这里使用嵌套循环。首先，使用循环来画一个正方形。如果内循环画一个正方形那么外循环将做什么？
        courseD_artist_nestedLoops7_b: |-
          使用嵌套循环, 让它的内部循环是正方形的代码。

          -   重复6次
          -   画正方形
          -   向前跳**50像素**
          -   转**60度**
      courseD_artist_nestedLoops7_2018:
        courseD_artist_nestedLoops7_a: 你需要在这里使用嵌套循环。首先，使用循环来画一个正方形。如果内循环画一个正方形那么外循环将做什么？
        courseD_artist_nestedLoops7_b: |-
          使用嵌套循环, 让它的内部循环是正方形的代码。

          -   重复6次
          -   画正方形
          -   向前跳**50像素**
          -   转**60度**
      courseD_artist_nestedLoops7_2019:
        courseD_artist_nestedLoops7_a: 你需要在这里使用嵌套循环。首先，使用循环来画一个正方形。如果内循环画一个正方形那么外循环将做什么？
        courseD_artist_nestedLoops7_b: |-
          使用嵌套循环, 让它的内部循环是正方形的代码。

          -   重复6次
          -   画正方形
          -   向前跳**50像素**
          -   转**60度**
      courseD_artist_nestedLoops8:
        courseD_artist_nestedLoops8_a: 要画出8个六边形，你需要在每个图形之间转 **45 度**。为什么？因为360度（一整圈）除以
          8（六边形的数量）是45度。
        courseD_artist_nestedLoops8_b: 如果你被难住了，先看上一个关卡, 然后改变那些不一样的东西。
        courseD_artist_nestedLoops8_c: |-
          使用嵌套循环：

          -   重复8次
          -   绘制六边形
          -   向前跳跃50像素
          -   向右转45度
      courseD_artist_nestedLoops8_2018:
        courseD_artist_nestedLoops8_a: 要画出8个六边形，你需要在每个图形之间转 **45 度**。为什么？因为360度（一整圈）除以
          8（六边形的数量）是45度。
        courseD_artist_nestedLoops8_b: 如果你被难住了，先看上一个关卡, 然后改变那些不一样的东西。
        courseD_artist_nestedLoops8_c: |-
          使用嵌套循环：

          -   重复8次
          -   绘制六边形
          -   向前跳跃50像素
          -   向右转45度
      courseD_artist_nestedLoops8_2019:
        courseD_artist_nestedLoops8_a: 要画出8个六边形，你需要在每个图形之间转 **45 度**。为什么？因为360度（一整圈）除以
          8（六边形的数量）是45度。
        courseD_artist_nestedLoops8_b: 如果你被难住了，先看上一个关卡, 然后改变那些不一样的东西。
        courseD_artist_nestedLoops8_c: |-
          使用嵌套循环：

          -   重复8次
          -   绘制六边形
          -   向前跳跃50像素
          -   向右转45度
      courseD_artist_nestedLoops9:
        courseD_artist_nestedLoops9_a: 从之前用过嵌套循环来开始，但这次用正方形。
        courseD_artist_nestedLoops9_b: 将第二组嵌套循环添加到第一组的末尾, 但这一次使用三角形。
        courseD_artist_nestedLoops9_c: |-
          使用两个嵌套循环：

          -   重复8次
          -   绘制正方形
          -   向前跳50像素
          -   向右转45度
          -   重复8次
          -   绘制三角形
          -   向前跳50像素
          -   向右转45度
      courseD_artist_nestedLoops9_2018:
        courseD_artist_nestedLoops9_a: 从之前用过嵌套循环来开始，但这次用正方形。
        courseD_artist_nestedLoops9_b: 将第二组嵌套循环添加到第一组的末尾, 但这一次使用三角形。
        courseD_artist_nestedLoops9_c: |-
          使用两个嵌套循环：

          -   重复8次
          -   绘制正方形
          -   向前跳50像素
          -   向右转45度
          -   重复8次
          -   绘制三角形
          -   向前跳50像素
          -   向右转45度
      courseD_artist_nestedLoops9_2019:
        courseD_artist_nestedLoops9_a: 从之前用过嵌套循环来开始，但这次用正方形。
        courseD_artist_nestedLoops9_b: 将第二组嵌套循环添加到第一组的末尾, 但这一次使用三角形。
        courseD_artist_nestedLoops9_c: |-
          使用两个嵌套循环：

          -   重复8次
          -   绘制正方形
          -   向前跳50像素
          -   向右转45度
          -   重复8次
          -   绘制三角形
          -   向前跳50像素
          -   向右转45度
      courseD_artist_nestedLoopsFP:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          此图片是一个嵌套循环，它重复画了六边形（边长50像素）15次，每次转向48度。
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          此图片是使用和您之前在其他关卡已经完成的类似的代码，但是是用圆圈（重复360 次：往前移动1， 转1 度）。
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          此图片是使用单个嵌套循环制成，它使用48度转向来重复（50像素边长的）六边形15 次。
      courseD_artist_nestedLoopsFP_2018:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          此图片是一个嵌套循环，它重复画了六边形（边长50像素）15次，每次转向48度。
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          此图片是使用和您之前在其他关卡已经完成的类似的代码，但是是用圆圈（重复360 次：往前移动1， 转1 度）。
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          此图片是使用单个嵌套循环制成，它使用48度转向来重复（50像素边长的）六边形15 次。
      courseD_artist_nestedLoopsFP_2019:
        courseD_artist_nestedLoopsFP_a: |-
          <img src="https://images.code.org/9257cbf61f238f5a749a949059731934-image-1478732674615.02.25.png" width="200px"/>

          此图片是一个嵌套循环，它重复画了六边形（边长50像素）15次，每次转向48度。
        courseD_artist_nestedLoopsFP_b: |-
          <img src="https://images.code.org/31a85d4e5be5209240195d34b17a177b-image-1478732674613.32.53.png" width="200px"/>

          此图片是使用和您之前在其他关卡已经完成的类似的代码，但是是用圆圈（重复360 次：往前移动1， 转1 度）。
        courseD_artist_nestedLoopsFP_c: |-
          <img src="https://images.code.org/f654f1512860c6c8cf6795c961a8959c-image-1478732674616.02.58.png" width="200px"/>

          此图片是使用单个嵌套循环制成，它使用48度转向来重复（50像素边长的）六边形15 次。
      courseD_artist_nestedLoops_challenge1:
        courseD_artist_nestedLoops_challenge1_a: 首先，将颜色改为蓝色，然后创建一个50像素边长的八边形，并向左转45度。
        courseD_artist_nestedLoops_challenge1_b: 添加代码来将颜色改为绿色，并创建一个50像素边唱的三角形，向左转120度。
        courseD_artist_nestedLoops_challenge1_c: 画完这两个形状后，你需要向前跳50像素，然后向右转90度。
        courseD_artist_nestedLoops_challenge1_d: 将所有代码放在`重复4次`循环中以完成它。
      courseD_artist_nestedLoops_challenge1_2018:
        courseD_artist_nestedLoops_challenge1_a: 首先，将颜色改为蓝色，然后创建一个50像素边长的八边形，并向左转45度。
        courseD_artist_nestedLoops_challenge1_b: 添加代码来将颜色改为绿色，并创建一个50像素边唱的三角形，向左转120度。
        courseD_artist_nestedLoops_challenge1_c: 画完这两个形状后，你需要向前跳50像素，然后向右转90度。
        courseD_artist_nestedLoops_challenge1_d: 将所有代码放在`重复4次`循环中以完成它。
      courseD_artist_nestedLoops_challenge1_2019:
        courseD_artist_nestedLoops_challenge1_a: 首先，将颜色改为蓝色，然后创建一个50像素边长的八边形，并向左转45度。
        courseD_artist_nestedLoops_challenge1_b: 添加代码来将颜色改为绿色，并创建一个50像素边唱的三角形，向左转120度。
        courseD_artist_nestedLoops_challenge1_c: 画完这两个形状后，你需要向前跳50像素，然后向右转90度。
        courseD_artist_nestedLoops_challenge1_d: 将所有代码放在`重复4次`循环中以完成它。
      courseD_artist_nestedLoops_challenge2:
        courseD_artist_nestedLoops_challenge2_a: 要画一个正八边形, 艺术家需要转45度8次。
        courseD_artist_nestedLoops_challenge2_b: 要画正方形, 艺术家需要转动90度4次。
      courseD_artist_nestedLoops_challenge2_2018:
        courseD_artist_nestedLoops_challenge2_a: 要画一个正八边形, 艺术家需要转45度8次。
        courseD_artist_nestedLoops_challenge2_b: 要画正方形, 艺术家需要转动90度4次。
      courseD_artist_nestedLoops_challenge2_2019:
        courseD_artist_nestedLoops_challenge2_a: 要画一个正八边形, 艺术家需要转45度8次。
        courseD_artist_nestedLoops_challenge2_b: 要画正方形, 艺术家需要转动90度4次。
      courseD_artist_project1:
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project1_b: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
      courseD_artist_project1_2018:
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project1_b: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
      courseD_artist_project1_2019:
        courseD_artist_project1_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project1_b: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
      courseD_artist_project1a:
        courseD_artist_project1a_a: "这台阶使用76度转弯并且重复4次。 \n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"
          width=\"200px\" />"
        courseD_artist_project1a_b: 这些模式很像从其他关卡里的楼梯台阶, 但使用不同的角度。
      courseD_artist_project1a_2018:
        courseD_artist_project1a_a: "这台阶使用76度转弯并且重复4次。 \n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"
          width=\"200px\" />"
        courseD_artist_project1a_b: 这些模式很像从其他关卡里的楼梯台阶, 但使用不同的角度。
      courseD_artist_project1a_2019:
        courseD_artist_project1a_a: "这台阶使用76度转弯并且重复4次。 \n\n<img src=\"https://images.code.org/73b1310fca6cf884ec8fb8b026210212-image-1495839168718.16.10.png\"
          width=\"200px\" />"
        courseD_artist_project1a_b: 这些模式很像从其他关卡里的楼梯台阶, 但使用不同的角度。
      courseD_artist_project2:
        courseD_artist_project2_a: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
        courseD_artist_project2_b: 在第一次绘制和移动后, 可以通过在外部添加一个循环来重复代码。
      courseD_artist_project2_2018:
        courseD_artist_project2_a: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
        courseD_artist_project2_b: 在第一次绘制和移动后, 可以通过在外部添加一个循环来重复代码。
      courseD_artist_project2_2019:
        courseD_artist_project2_a: 请记住, `向前移动`会画一条线, 而`向前跳`则不会。
        courseD_artist_project2_b: 在第一次绘制和移动后, 可以通过在外部添加一个循环来重复代码。
      courseD_artist_project2a:
        courseD_artist_project2a_a: "这幅画是通过在`重复两次` 块内嵌套一个4个楼梯和一个`右转180度`模块来制作的。 \n\n<img
          src=\"https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png\"
          width=\"200px\" />"
      courseD_artist_project2a_2018:
        courseD_artist_project2a_a: "这幅画是通过在`重复两次` 块内嵌套一个4个楼梯和一个`右转180度`模块来制作的。 \n\n<img
          src=\"https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png\"
          width=\"200px\" />"
      courseD_artist_project2a_2019:
        courseD_artist_project2a_a: "这幅画是通过在`重复两次` 块内嵌套一个4个楼梯和一个`右转180度`模块来制作的。 \n\n<img
          src=\"https://images.code.org/bb24f9acee8afed2e119c1e920cb43f6-image-1495834479042.16.27.png\"
          width=\"200px\" />"
      courseD_artist_project3:
        courseD_artist_project3_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project3_b: |-
          尝试嵌套循环！

          使用您创建的代码绘制一行形状并将其嵌套在另一个循环中。在底部, 在外部循环结束之前, 添加一个让埃尔莎转过来的块。

          -   如果重复外循环5次，尝试72度
          -   如果重复外循环6次，尝试60度
      courseD_artist_project3_2018:
        courseD_artist_project3_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project3_b: |-
          尝试嵌套循环！

          使用您创建的代码绘制一行形状并将其嵌套在另一个循环中。在底部, 在外部循环结束之前, 添加一个让埃尔莎转过来的块。

          -   如果重复外循环5次，尝试72度
          -   如果重复外循环6次，尝试60度
      courseD_artist_project3_2019:
        courseD_artist_project3_a: 使用`转向`块上的下拉菜单选择您需要的角度!
        courseD_artist_project3_b: |-
          尝试嵌套循环！

          使用您创建的代码绘制一行形状并将其嵌套在另一个循环中。在底部, 在外部循环结束之前, 添加一个让埃尔莎转过来的块。

          -   如果重复外循环5次，尝试72度
          -   如果重复外循环6次，尝试60度
      courseD_artist_project3a:
        courseD_artist_project3a_a: 你可以选择不同的数量来旋转你的形状！转向18次，每次20度如何？
      courseD_artist_project3a_2018:
        courseD_artist_project3a_a: 你可以选择不同的数量来旋转你的形状！转向18次，每次20度如何？
      courseD_artist_project3a_2019:
        courseD_artist_project3a_a: 你可以选择不同的数量来旋转你的形状！转向18次，每次20度如何？
      courseD_artist_project4:
        courseD_artist_project4_a: |-
          这里是五角的雪花, 在三角形的雪花前旋转36度：

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          这里是一组带有正方形的六边形：

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: 若要尝试此项, 请绘制第一个雪花, 然后转向, 然后绘制第二个雪花。
      courseD_artist_project4_2018:
        courseD_artist_project4_a: |-
          这里是五角的雪花, 在三角形的雪花前旋转36度：

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          这里是一组带有正方形的六边形：

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: 若要尝试此项, 请绘制第一个雪花, 然后转向, 然后绘制第二个雪花。
      courseD_artist_project4_2019:
        courseD_artist_project4_a: |-
          这里是五角的雪花, 在三角形的雪花前旋转36度：

          <img src="https://images.code.org/2ba023db9404f948fab655bfa7923160-image-1495822526223.14.13.png" width="200px" />

          这里是一组带有正方形的六边形：

          <img src="https://images.code.org/4d77462f3d07df6f1f5f2dc25e5d2b70-image-1495822526224.15.08.png" width="200px" />
        courseD_artist_project4_b: 若要尝试此项, 请绘制第一个雪花, 然后转向, 然后绘制第二个雪花。
      courseD_artist_project4a:
        courseD_artist_project4a_a: |-
          这里有两个不同长度的雪花, 在一个后接着画另一个。（在两者之间转30度）

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2018:
        courseD_artist_project4a_a: |-
          这里有两个不同长度的雪花, 在一个后接着画另一个。（在两者之间转30度）

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project4a_2019:
        courseD_artist_project4a_a: |-
          这里有两个不同长度的雪花, 在一个后接着画另一个。（在两者之间转30度）

          <img src="https://images.code.org/45dedb51d89d3e5d0a88fe65ecbd7d7b-image-1495833855890.22.39.png" width="200px" />
      courseD_artist_project5:
        courseD_artist_project4_a: |-
          将两个六边形4个三角形画成线：

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2018:
        courseD_artist_project4_a: |-
          将两个六边形4个三角形画成线：

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_project5_2019:
        courseD_artist_project4_a: |-
          将两个六边形4个三角形画成线：

          <img src="https://images.code.org/37ca9779bafd2ccc5cc801f82358008e-image-1495823683964.34.09.png" width="200px" />
      courseD_artist_ramp11:
        courseD_artist_ramp11a: 若要绘制一条边，使用`向前移动100像素`模块，并将100更改为200。
        courseD_artist_ramp11b: |-
          若要绘制4条边，将`向前移动100像素`模块放在重复循环里面, 并确保该循环设置为绘制4次。

           然后别忘了画完后转向！
        courseD_artist_ramp11_c: 记住把`转向`块放到你的循环内！
      courseD_artist_ramp12:
        courseD_artist_ramp12_a: 你可以先画方块, 然后三角形, 或者反过来!
        courseD_artist_ramp12_b: 尝试将问题分解为两个部分, 并使用两个循环。
        courseD_artist_ramp12_c: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
      courseD_autorun_binary2_2019:
        courseD_artist_binary2_a: 点击`运行`来看程序如何运行
      courseD_autorun_binary3_2019:
        courseD_artist_binary3_a: 工具箱中的四个二进制模式之一将解决这个关卡!
        courseD_artist_binary3_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_autorun_binary4_2019:
        courseD_artist_binary4_a: 看看最上面一行的前三个正方形。你能重复这三个来画出整个图案吗？
        courseD_artist_binary4_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_autorun_binary5_2019:
        courseD_artist_binary5_a: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary5_b: 您只需交换两行, 就可以制作一个微笑。
        courseD_artist_binary5_c: 如果您在解决此关卡时遇到困难, 请尝试在一张纸上写下二进制线并查找相同模式。
      courseD_autorun_binary6_2019:
        courseD_artist_binary6_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary6_b: 您可以一次生成二进制字符串, 并继续测试!
      courseD_autorun_binary7_2019:
        courseD_artist_binary7_a: 从左上方开始。在模式开始重复之前, 您必须阅读多少？
        courseD_artist_binary7_b: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_autorun_binary8_2019:
        courseD_artist_binary8_a: 螺旋有时会令人困惑。在创建此设计时, 请将您心目中的每条水平线分开。
        courseD_artist_binary8_b: 请先尝试运行代码, 看看您需要处理的内容。
        courseD_artist_binary8_c: 不要害怕犯错误! 即使你还没有解开这个关卡，尝试编写二进制文件并运行代码, 看看会发生什么。
      courseD_bee_conditionals1_predict1:
        courseD_bee_conditionals1_a: 在您试着得到花蜜前，您将需要使用一个`如果`模块来查看是否有花在云下面。
      courseD_bee_conditionals1_predict1_2018:
        courseD_bee_conditionals1_a: 在您试着得到花蜜前，您将需要使用一个`如果`模块来查看是否有花在云下面。
      courseD_bee_conditionals1_predict1_2019:
        courseD_bee_conditionals1_a: 在您试着得到花蜜前，您将需要使用一个`如果`模块来查看是否有花在云下面。
      courseD_bee_conditionals2:
        courseD_bee_conditionals2_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals2_a: 有时那里有花，有时不会。如果您希望在两种情况下都能运行代码，请确保使用`如果`语句。
        courseD_bee_conditionals2_b: 您可以使用`重复`循环或`当前面有路时`来通过这个迷宫。
        courseD_bee_conditionals2_c: 你不必查看蜂窝，在云层下只会有花朵或空白的空间。
        courseD_bee_conditionals2_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals2_2018:
        courseD_bee_conditionals2_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals2_a: 有时那里有花，有时不会。如果您希望在两种情况下都能运行代码，请确保使用`如果`语句。
        courseD_bee_conditionals2_b: 您可以使用`重复`循环或`当前面有路时`来通过这个迷宫。
        courseD_bee_conditionals2_c: 你不必查看蜂窝，在云层下只会有花朵或空白的空间。
        courseD_bee_conditionals2_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals2_2019:
        courseD_bee_conditionals2_a: 有时那里有花，有时不会。如果您希望在两种情况下都能运行代码，请确保使用`如果`语句。
        courseD_bee_conditionals2_c: 你不必查看蜂窝，在云层下只会有花朵或空白的空间。
      courseD_bee_conditionals3:
        courseD_bee_conditionals3_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals3_a: 一定要使用`如果`语句来检查每个空间，看看是否有花。
        courseD_bee_conditionals3_b: 您可以使用`重复`循环或`当`循环来保持蜜蜂向前移动。用你喜欢的任何一个!
        courseD_bee_conditionals3_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseD_bee_conditionals3_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals3_2018:
        courseD_bee_conditionals3_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals3_a: 一定要使用`如果`语句来检查每个空间，看看是否有花。
        courseD_bee_conditionals3_b: 您可以使用`重复`循环或`当`循环来保持蜜蜂向前移动。用你喜欢的任何一个!
        courseD_bee_conditionals3_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseD_bee_conditionals3_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals3_2019:
        courseD_bee_conditionals3_a: 一定要使用`如果`语句来检查每个空间，看看是否有花。
        courseD_bee_conditionals3_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseD_bee_conditionals4:
        courseD_bee_conditionals4_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals4_a: 哪怕可以看到整条路径，仍然可以当作每个空间上面有朵云来处理。
        courseD_bee_conditionals4_b: '在循环中使用`如果`语句检查每个空间是否有花蜜。 '
        courseD_bee_conditionals4_c: 使用 <xml><block type="maze_untilBlocked"/></xml>模块，您应该向前移动并找一朵花。如果有一朵花,
          蜜蜂该怎么办？
        courseD_bee_conditionals4_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals4_2018:
        courseD_bee_conditionals4_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals4_a: 哪怕可以看到整条路径，仍然可以当作每个空间上面有朵云来处理。
        courseD_bee_conditionals4_b: '在循环中使用`如果`语句检查每个空间是否有花蜜。 '
        courseD_bee_conditionals4_c: 使用 <xml><block type="maze_untilBlocked"/></xml>模块，您应该向前移动并找一朵花。如果有一朵花,
          蜜蜂该怎么办？
        courseD_bee_conditionals4_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals4_2019:
        courseD_bee_conditionals4_a: 哪怕可以看到整条路径，仍然可以当作每个空间上面有朵云来处理。
        courseD_bee_conditionals4_b: '在循环中使用`如果`语句检查每个空间是否有花蜜。 '
      courseD_bee_conditionals5:
        courseD_bee_conditionals5_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals5_a: 把矩形路径的每一条边都看成是一个路径。在外部设置一个`重复`模块的嵌套循环, 并在`当前面有路时`的内部循环。如果蜜蜂需要在每朵花旁边嗡嗡叫，它要飞过多少条路径？
        courseD_bee_conditionals5_c: 花是长方形的3条边，因此代码需要`重复3次`。在每一个重复时，`当前面有路时`，蜜蜂将需要继续沿着路径。要继续沿着这条路走下去,
          蜜蜂将需要`向前移动`。在小路上, 蜜蜂需要寻找朵花。`如果有一朵花`, 蜜蜂应该`采花蜜`。
        courseD_bee_conditionals5_b: 在`当前面有路时`模块的里面, 你需要往前走开寻找朵花。你如何检查哪里是否有一朵花？如果有一朵花,
          你会怎么做？
        courseD_bee_conditionals5_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals5_2018:
        courseD_bee_conditionals5_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals5_a: 把矩形路径的每一条边都看成是一个路径。在外部设置一个`重复`模块的嵌套循环, 并在`当前面有路时`的内部循环。如果蜜蜂需要在每朵花旁边嗡嗡叫，它要飞过多少条路径？
        courseD_bee_conditionals5_c: 花是长方形的3条边，因此代码需要`重复3次`。在每一个重复时，`当前面有路时`，蜜蜂将需要继续沿着路径。要继续沿着这条路走下去,
          蜜蜂将需要`向前移动`。在小路上, 蜜蜂需要寻找朵花。`如果有一朵花`, 蜜蜂应该`采花蜜`。
        courseD_bee_conditionals5_b: 在`当前面有路时`模块的里面, 你需要往前走开寻找朵花。你如何检查哪里是否有一朵花？如果有一朵花,
          你会怎么做？
        courseD_bee_conditionals5_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals5_2019:
        courseD_bee_conditionals5_a: 如果使用了 `如果在花上` 模块，可以用嵌套循环来解决。写程序到左下的路，然后重复两次！
        courseD_bee_conditionals5_c: 要继续走下这条路，蜜蜂需要 `向前移动`。移动的时候，蜜蜂需要检查花，`如果有花`，蜜蜂应该
          `采花蜜`。
      courseD_bee_conditionals6:
        courseD_bee_conditionals6_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals6_a: 请确保使用`如果`语句检查每个云下是否有蜂窝。
        courseD_bee_conditionals6_b: 在这种情况下, 你不需要查看云下的花蜜。
        courseD_bee_conditionals6_c: 是否有一个循环可以用来使代码更简单？
        courseD_bee_conditionals6_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals6_2018:
        courseD_bee_conditionals6_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals6_a: 请确保使用`如果`语句检查每个云下是否有蜂窝。
        courseD_bee_conditionals6_b: 在这种情况下, 你不需要查看云下的花蜜。
        courseD_bee_conditionals6_c: 是否有一个循环可以用来使代码更简单？
        courseD_bee_conditionals6_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals6_2019:
        courseD_bee_conditionals6_a: 请确保使用`如果`语句检查每个云下是否有蜂窝。
        courseD_bee_conditionals6_b: 在这种情况下, 你不需要查看云下的花蜜。
        courseD_bee_conditionals6_c: 是否有一个循环可以用来使代码更简单？
      courseD_bee_conditionals7:
        courseD_bee_conditionals7_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals7_a: |-
          \*\* 请记住: \*\* 这个关卡每次运行时都会改变。

          您需要使用条件模块 (`如果/否则`) 来通过此挑战。
        courseD_bee_conditionals7_b: 如果云下没有一朵花, 那一定有一个蜂窝, 所以你不需要考虑存在一个空的空间的情况。
        courseD_bee_conditionals7_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals7_2018:
        courseD_bee_conditionals7_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals7_a: |-
          \*\* 请记住: \*\* 这个关卡每次运行时都会改变。

          您需要使用条件模块 (`如果/否则`) 来通过此挑战。
        courseD_bee_conditionals7_b: 如果云下没有一朵花, 那一定有一个蜂窝, 所以你不需要考虑存在一个空的空间的情况。
        courseD_bee_conditionals7_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals7_2019:
        courseD_bee_conditionals7_a: |-
          \*\* 请记住: \*\* 这个关卡每次运行时都会改变。

          您需要使用条件模块 (`如果/否则`) 来通过此挑战。
        courseD_bee_conditionals7_b: 如果云下没有一朵花, 那一定有一个蜂窝, 所以你不需要考虑存在一个空的空间的情况。
      courseD_bee_conditionals7_predict2:
        courseD_bee_conditionals7_a: |-
          \*\* 请记住: \*\* 这个关卡每次运行时都会改变。

          您需要使用条件模块 (`如果/否则`) 来通过此挑战。
      courseD_bee_conditionals7_predict2_2018:
        courseD_bee_conditionals7_a: |-
          \*\* 请记住: \*\* 这个关卡每次运行时都会改变。

          您需要使用条件模块 (`如果/否则`) 来通过此挑战。
      courseD_bee_conditionals7_predict2_2019:
        courseD_bee_conditionals7_a: |-
          \*\* 请记住: \*\* 这个关卡每次运行时都会改变。

          您需要使用条件模块 (`如果/否则`) 来通过此挑战。
      courseD_bee_conditionals8:
        courseD_bee_conditionals8_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals8_a: |-
          **记住：**这一关在每次运行的时候都会变化。

          你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。
        courseD_bee_conditionals8_b: |-
          此关卡很棘手, 因为不能只使用一个条件来检查空白方块, 花蜜, _和_ 蜂蜜。

          仅在路径的最后查找花蜜和蜂蜜。
        courseD_bee_conditionals8_c: 无论路途有多长, 你怎么能确保每条路都走到尽头？
        courseD_bee_conditionals8_d: |-
          即使你面前有一朵云彩, 你也不必先去看它。尝试从正方形右下角的云开始。

          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals8_2018:
        courseD_bee_conditionals8_hintVid1: 需要入门帮助吗？ 看视频!
        courseD_bee_conditionals8_a: |-
          **记住：**这一关在每次运行的时候都会变化。

          你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。
        courseD_bee_conditionals8_b: |-
          此关卡很棘手, 因为不能只使用一个条件来检查空白方块, 花蜜, _和_ 蜂蜜。

          仅在路径的最后查找花蜜和蜂蜜。
        courseD_bee_conditionals8_c: 无论路途有多长, 你怎么能确保每条路都走到尽头？
        courseD_bee_conditionals8_d: |-
          即使你面前有一朵云彩, 你也不必先去看它。尝试从正方形右下角的云开始。

          ![](https://images.code.org/166e71553edf23bf13ecd290a8e7e721-image-1501013509361.09.09.png)
        courseD_bee_conditionals8_hintVid2: 观看此视频帮助解决这个难题。
      courseD_bee_conditionals8_2019:
        courseD_bee_conditionals8_a: |-
          **记住：**这一关在每次运行的时候都会变化。

          你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。
        courseD_bee_conditionals8_b: |-
          此关卡很棘手, 因为不能只使用一个条件来检查空白方块, 花蜜, _和_ 蜂蜜。

          仅在路径的最后查找花蜜和蜂蜜。
      courseD_bee_conditionals_challenge1:
        courseD_bee_conditionals_challenge1_a: 你能找到一条通向每一朵花和蜂窝的小路而不撞到任何树木吗？最好的路径是螺旋。
        courseD_bee_conditionals_challenge1_b: 在这个关卡中, 每个空间都可以有一朵花, 一只蜂蜜梳子, 或者什么都没有。
          这意味着你在每个正方形可以重复你的`如果/否则`条件。
      courseD_bee_conditionals_challenge1_2018:
        courseD_bee_conditionals_challenge1_a: 你能找到一条通向每一朵花和蜂窝的小路而不撞到任何树木吗？最好的路径是螺旋。
        courseD_bee_conditionals_challenge1_b: 在这个关卡中, 每个空间都可以有一朵花, 一只蜂蜜梳子, 或者什么都没有。
          这意味着你在每个正方形可以重复你的`如果/否则`条件。
      courseD_bee_conditionals_challenge1_2019:
        courseD_bee_conditionals_challenge1_a: 你能找到一条通向每一朵花和蜂窝的小路而不撞到任何树木吗？最好的路径是螺旋。
        courseD_bee_conditionals_challenge1_b: 在这个关卡中, 每个空间都可以有一朵花, 一只蜂蜜梳子, 或者什么都没有。
          这意味着你在每个正方形可以重复你的`如果/否则`条件。
      courseD_bee_conditionals_challenge2:
        courseD_bee_conditionals_challenge1_b: |-
          就像`如果有花`模块, 里面的代码`当花蜜数量 > 0`，只在蜜蜂在花那里的时候运行。不同的是, 里面的代码会反复运行, 直到没有花蜜。 尝试此模式：

          <xml> <block type="bee_whileNectarAmount">

          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title> <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_conditionals_challenge2_2018:
        courseD_bee_conditionals_challenge1_b: |-
          就像`如果有花`模块, 里面的代码`当花蜜数量 > 0`，只在蜜蜂在花那里的时候运行。不同的是, 里面的代码会反复运行, 直到没有花蜜。 尝试此模式：

          <xml> <block type="bee_whileNectarAmount">

          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title> <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_conditionals_challenge2_2019:
        courseD_bee_conditionals_challenge1_b: |-
          就像`如果有花`模块, 里面的代码`当花蜜数量 > 0`，只在蜜蜂在花那里的时候运行。不同的是, 里面的代码会反复运行, 直到没有花蜜。 尝试此模式：

          <xml> <block type="bee_whileNectarAmount">

          <title name="ARG1">nectarRemaining</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title> <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          </block></xml>
      courseD_bee_debugging_challenge1:
        courseD_bee_debugging_challenge1_a: 为什么这个程序的前半部分工作？考虑一下为什么蜜蜂需要向后移动。蜜蜂每次在花上移动时采集多少花蜜？
        courseD_bee_debugging_challenge1_b: 在回来的路上, 让蜜蜂遵循同样的模式。蜜蜂每次在蜂窝上移动需要制作多少蜂蜜？
        courseD_bee_debugging_challenge1_c: |-
          当蜜蜂移到最下面一行，让它重复这些命令：

          -   重复2次:
          -   向前移动
          -   酿3个蜂蜜
          -   向后移动
      courseD_bee_debugging_challenge1a:
        courseD_bee_debugging_challenge1_a: 为什么这个程序的前半部分工作？考虑一下为什么蜜蜂需要向后移动。蜜蜂每次在花上移动时采集多少花蜜？
        courseD_bee_debugging_challenge1_b: 为了通过这个关卡, 让蜜蜂遵循收集花蜜相同的模式来制作蜂蜜。
        courseD_bee_debugging_challenge1_c: |-
          在蜜蜂到了最下面一行后，请让它重复这些指令：

          <xml><block type="controls_repeat">

          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_honey"/>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block></xml>
      courseD_bee_nestedLoops1:
        courseD_bee_nestedLoops1_a: 不工作？ 请尝试使用 ""步进"" 按钮来逐行查证。
        courseD_bee_nestedLoops1_b: 请先尝试为正方形的一条边编写代码。你能循环来得到所有的花蜜吗？
        courseD_bee_nestedLoops1_c: 一旦你在一个有花朵的正方形的时候记得使用`采花蜜`模块。
      courseD_bee_nestedLoops1_2018:
        courseD_bee_nestedLoops1_a: 不工作？ 请尝试使用 ""步进"" 按钮来逐行查证。
        courseD_bee_nestedLoops1_b: 请先尝试为正方形的一条边编写代码。你能循环来得到所有的花蜜吗？
        courseD_bee_nestedLoops1_c: 一旦你在一个有花朵的正方形的时候记得使用`采花蜜`模块。
      courseD_bee_nestedLoops1_2019:
        courseD_bee_nestedLoops1_a: 不工作？ 请尝试使用 ""步进"" 按钮来逐行查证。
        courseD_bee_nestedLoops1_b: 请先尝试为正方形的一条边编写代码。你能循环来得到所有的花蜜吗？
        courseD_bee_nestedLoops1_c: 一旦你在一个有花朵的正方形的时候记得使用`采花蜜`模块。
      courseD_bee_nestedLoops1a:
        courseD_bee_nestedLoops1_a: 不工作？ 请尝试使用 ""步进"" 按钮来逐行查证。
        courseD_bee_nestedLoops1_c: 一旦你在一个有花朵的正方形的时候记得使用`采花蜜`模块。
      courseD_bee_nestedLoops1a_2018:
        courseD_bee_nestedLoops1_a: 不工作？ 请尝试使用 ""步进"" 按钮来逐行查证。
        courseD_bee_nestedLoops1_c: 一旦你在一个有花朵的正方形的时候记得使用`采花蜜`模块。
      courseD_bee_nestedLoops1a_2019:
        courseD_bee_nestedLoops1_a: 不工作？ 请尝试使用 ""步进"" 按钮来逐行查证。
        courseD_bee_nestedLoops1_c: 一旦你在一个有花朵的正方形的时候记得使用`采花蜜`模块。
      courseD_bee_nestedLoops2:
        courseD_bee_nestedLoops2_a: 要通过此关卡，需要在另一个里面嵌套一个`重复`循环。
        courseD_bee_nestedLoops2_b: 如果您无法确定将循环放在何处, 请尝试逐步编写代码并查找规律。
        courseD_bee_nestedLoops2_c: 请记住, 您可以在一个循环中放置多个模块。
      courseD_bee_nestedLoops2_2018:
        courseD_bee_nestedLoops2_a: 要通过此关卡，需要在另一个里面嵌套一个`重复`循环。
        courseD_bee_nestedLoops2_b: 如果您无法确定将循环放在何处, 请尝试逐步编写代码并查找规律。
        courseD_bee_nestedLoops2_c: 请记住, 您可以在一个循环中放置多个模块。
      courseD_bee_nestedLoops2_2019:
        courseD_bee_nestedLoops2_a: 要通过此关卡，需要在另一个里面嵌套一个`重复`循环。
        courseD_bee_nestedLoops2_b: 如果您无法确定将循环放在何处, 请尝试逐步编写代码并查找规律。
        courseD_bee_nestedLoops2_c: 请记住, 您可以在一个循环中放置多个模块。
      courseD_bee_nestedLoops7:
        courseD_bee_nestedLoops7_a: 需要在另一个里面有着‘`向前移动`模块的`重复`循环的里面重复`采花蜜`。
        courseD_bee_nestedLoops7_b: 需要使用所有的三个`重复`模块来通过这个关卡。
        courseD_bee_nestedLoops7_c: |-
          将模块嵌套三层深，像这样：

          -   重复4次
          -   重复3次
          -   重复12次
          -   采花蜜
          -   向前移动
          -   向右转
      courseD_bee_nestedLoops7_2018:
        courseD_bee_nestedLoops7_a: 需要在另一个里面有着‘`向前移动`模块的`重复`循环的里面重复`采花蜜`。
        courseD_bee_nestedLoops7_b: 需要使用所有的三个`重复`模块来通过这个关卡。
        courseD_bee_nestedLoops7_c: |-
          将模块嵌套三层深，像这样：

          -   重复4次
          -   重复3次
          -   重复12次
          -   采花蜜
          -   向前移动
          -   向右转
      courseD_bee_nestedLoops7_2019:
        courseD_bee_nestedLoops7_a: 需要在另一个里面有着‘`向前移动`模块的`重复`循环的里面重复`采花蜜`。
        courseD_bee_nestedLoops7_b: 需要使用所有的三个`重复`模块来通过这个关卡。
        courseD_bee_nestedLoops7_c: |-
          将模块嵌套三层深，像这样：

          -   重复4次
          -   重复3次
          -   重复12次
          -   采花蜜
          -   向前移动
          -   向右转
      courseD_bounce_events10s_2018:
        courseD_bounce_events10s_a: |-
          应该在代码中同时使用这些事件：

          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next></block></xml>
      courseD_bounce_events10s_2019:
        courseD_bounce_events10s_a: |-
          应该在代码中同时使用这些事件：

          <xml><block type="bounce_whenBallInGoal" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">swish</title><next><block type="bounce_incrementPlayerScore"></block></next></block></next></block><block type="bounce_whenBallMissesPaddle" deletable="false"><next><block type="bounce_playSound"><title name="SOUND">whistle</title><next><block type="bounce_incrementOpponentScore"></block></next></block></next>\</block</xml>
      courseD_bounce_events11s_2018:
        courseD_bounce_events11s_a: 当游戏开始时, 当你击中篮筐时, 当手错过球时, 你将要掷球。
      courseD_bounce_events11s_2019:
        courseD_bounce_events11s_a: 当游戏开始时, 当你击中篮筐时, 当手错过球时, 你将要掷球。
      courseD_bounce_events12s_2018:
        courseD_bounce_events12s_a: 你可以通过将这些方块附加到`当运行时`事件来加快篮球或手的速度。
        courseD_bounce_events12s_b: 尝试使每一个投球得2分, 并把球队的标志改为你家乡的。
      courseD_bounce_events12s_2019:
        courseD_bounce_events12s_a: 你可以通过将这些方块附加到`当运行时`事件来加快篮球或手的速度。
        courseD_bounce_events12s_b: 尝试使每一个投球得2分, 并把球队的标志改为你家乡的。
      courseD_bounce_events1s_2018:
        courseD_bounce_events1s_a: |-
          您需要将`向左移动`模块添加到`当按左方向键时`事件使此游戏工作：

          <xml> <block type="bounce_whenLeft" deletable="false" x="20" y="20">
          <next>
          <block type="bounce_moveLeft"/>
          </next>
          </block>

          </xml>
        courseD_bounce_events1s_b: 不要忘记按 "运行", 并让手够到篮筐来解决这个关卡。
      courseD_bounce_events1s_2019:
        courseD_bounce_events1s_a: |-
          您需要将`向左移动`模块添加到`当按左方向键时`事件使此游戏工作：

          <xml> <block type="bounce_whenLeft" deletable="false" x="20" y="20">
          <next>
          <block type="bounce_moveLeft"/>
          </next>
          </block>

          </xml>
        courseD_bounce_events1s_b: 不要忘记按 "运行", 并让手够到篮筐来解决这个关卡。
      courseD_bounce_events2s_2018:
        courseD_bounce_events2s_a: |-
          您需要用两组 `向前移动`事件来让它运作：

          <xml>
          <block type="bounce_whenLeft" deletable="false" x="20" y="20">
          <next>
          <block type="bounce_moveLeft"/>
          </next>
          </block>
          <block type="bounce_whenRight" deletable="false" x="180" y="20">
          <next>
          <block type="bounce_moveRight"/>
          </next>
          </block>
          </xml>
      courseD_bounce_events2s_2019:
        courseD_bounce_events2s_a: |-
          您需要用两组 `向前移动`事件来让它运作：

          <xml>
          <block type="bounce_whenLeft" deletable="false" x="20" y="20">
          <next>
          <block type="bounce_moveLeft"/>
          </next>
          </block>
          <block type="bounce_whenRight" deletable="false" x="180" y="20">
          <next>
          <block type="bounce_moveRight"/>
          </next>
          </block>
          </xml>
      courseD_bounce_events5s_2018:
        courseD_bounce_events5s_a: 你不需要移动手来解决这个关卡。
        courseD_bounce_events5s_b: |-
          确保已将此代码添加到工作区：

          <xml>  <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events5s_2019:
        courseD_bounce_events5s_a: 你不需要移动手来解决这个关卡。
        courseD_bounce_events5s_b: |-
          确保已将此代码添加到工作区：

          <xml> <block type="bounce_whenPaddleCollided" deletable="false"> <next> <block type="bounce_bounceBall"/></next></block></xml>
      courseD_bounce_events6s_2018:
        courseD_bounce_events6s_a: |-
          用过类似这样的事件吗？

          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: 如果你写的代码正确, 你不必移动手来获胜。
      courseD_bounce_events6s_2019:
        courseD_bounce_events6s_a: |-
          用过类似这样的事件吗？

          <xml><block type="bounce_whenWallCollided" deletable="false"><next><block type="bounce_bounceBall"></block></next></block></block></xml>
        courseD_bounce_events6s_b: 如果你写的代码正确, 你不必移动手来获胜。
      courseD_bounce_events7s_2018:
        courseD_bounce_events7s_a: 如果你喜欢，你可以在更多的地方添加声音!
      courseD_bounce_events7s_2019:
        courseD_bounce_events7s_a: 如果你喜欢，你可以在更多的地方添加声音!
      courseD_collector_debugging1:
        courseD_collector_debugging1_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。

          那第二步呢？

          哪里出问题了？
        courseD_collector_debugging1_b: 是否看到了可以使用`重复`循环来简化事情的规律？
        courseD_collector_debugging1_c: '记住，一旦你到了那里，就用`收集`模块去捡宝藏。  '
      courseD_collector_debugging10_predict1:
        courseD_collector_debugging9_a: 有几种方法可以解决这个问题...但它们都需要转弯！
        courseD_collector_debugging9_b: 弄清楚将如何通过这个关卡，然后逐步移动，尝试使代码与你头脑所想相匹配。
      courseD_collector_debugging1a_2018:
        courseD_collector_debugging1_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。

          那第二步呢？

          哪里出问题了？
        courseD_collector_debugging1_c: '记住，一旦你到了那里，就用`收集`模块去捡宝藏。  '
      courseD_collector_debugging1a_2019:
        courseD_collector_debugging1_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。

          那第二步呢？

          哪里出问题了？
        courseD_collector_debugging1_c: '记住，一旦你到了那里，就用`收集`模块去捡宝藏。  '
      courseD_collector_debugging2:
        courseD_collector_debugging2_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。

          那第二步呢？

          哪里出问题了？
        courseD_collector_debugging2_b: 是否看到了可以使用`重复`循环来简化事情的规律？
        courseD_collector_debugging2_c: 尝试为这一模式的一面收集宝藏。你能重复这个在两边都收集宝藏吗？
      courseD_collector_debugging2a_2018:
        courseD_collector_debugging2a_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。

          那第二步呢？

          哪里出问题了？
        courseD_collector_debugging2a_c: 会发生什么？ 应该发生什么？ 那告诉你什么？
      courseD_collector_debugging2a_2019:
        courseD_collector_debugging2a_a: |-
          使用"步进"按钮来查看在第一步是否一切都正确。

          那第二步呢？

          哪里出问题了？
        courseD_collector_debugging2a_c: 会发生什么？ 应该发生什么？ 那告诉你什么？
      courseD_collector_debugging3:
        courseD_collector_debugging3_a: 劳雷尔有在那个地方做了什么不对的事吗？当您更改这些块时会发生什么情况？
        courseD_collector_debugging3_b: 尝试使用嵌套循环简化代码。
      courseD_collector_debugging3a_2018:
        courseD_collector_debugging3_a: 劳雷尔有在那个地方做了什么不对的事吗？当您更改这些块时会发生什么情况？
      courseD_collector_debugging3a_2019:
        courseD_collector_debugging3_a: 劳雷尔有在那个地方做了什么不对的事吗？当您更改这些块时会发生什么情况？
      courseD_collector_debugging4:
        courseD_collector_debugging4_a: |-
          尝试在一行中多次使用调试过程。

          是什么导致了第一个问题？

          一旦问题解决了，是什么地方错了？
        courseD_collector_debugging4_b: |-
          如果很难弄清楚如何制作楼梯的步进模式，请尝试用手指跟踪它并大声说出指令。

          别忘了指出转弯的方向!
        courseD_collector_debugging4_c: 此循环只缺少一个模块。你能找出是哪一个吗？
      courseD_collector_debugging4a_2018:
        courseD_collector_debugging4_a: |-
          尝试在一行中多次使用调试过程。

          是什么导致了第一个问题？

          一旦问题解决了，是什么地方错了？
        courseD_collector_debugging4_b: |-
          如果很难弄清楚如何制作楼梯的步进模式，请尝试用手指跟踪它并大声说出指令。

          别忘了指出转弯的方向!
      courseD_collector_debugging4a_2019:
        courseD_collector_debugging4_a: |-
          尝试在一行中多次使用调试过程。

          是什么导致了第一个问题？

          一旦问题解决了，是什么地方错了？
        courseD_collector_debugging4_b: |-
          如果很难弄清楚如何制作楼梯的步进模式，请尝试用手指跟踪它并大声说出指令。

          别忘了指出转弯的方向!
      courseD_collector_debugging5:
        courseD_collector_debugging5_a: |-
          开始只看第一个循环。

          它是做什么的？

          它应该做什么？

          那告诉您什么？
        courseD_collector_debugging5_b: 当第一个循环按照所希望的方式进行时，代码中还剩下什么？
      courseD_collector_debugging5a_2018:
        courseD_collector_debugging5a_a: 它是做什么用的？ 它应该怎么做？ 那告诉你什么？
        courseD_collector_debugging5a_b: 一旦你收集了第一行宝藏, 你的代码还剩下什么？
      courseD_collector_debugging5a_2019:
        courseD_collector_debugging5a_a: 它是做什么用的？ 它应该怎么做？ 那告诉你什么？
        courseD_collector_debugging5a_b: 一旦你收集了第一行宝藏, 你的代码还剩下什么？
      courseD_collector_debugging6:
        courseD_collector_debugging6_a: "尝试使用\"步进\"按钮运行代码。是否一切在第一步的时候都是好？ \n\n那么第二步呢？
          \n\n哪里错了？"
        courseD_collector_debugging6_b: 看起来所有正确的步骤都在这里，你只是需要更多。 你如何多次重复`收集`？
      courseD_collector_debugging6a_2018:
        courseD_collector_debugging6_a: "尝试使用\"步进\"按钮运行代码。是否一切在第一步的时候都是好？ \n\n那么第二步呢？
          \n\n哪里错了？"
        courseD_collector_debugging6_b: 看起来您需要的所有模块都在工作区中。如果事情变得太困惑, 试着点击 "重新开始"。
      courseD_collector_debugging6a_2019:
        courseD_collector_debugging6_a: "尝试使用\"步进\"按钮运行代码。是否一切在第一步的时候都是好？ \n\n那么第二步呢？
          \n\n哪里错了？"
        courseD_collector_debugging6_b: 看起来您需要的所有模块都在工作区中。如果事情变得太困惑, 试着点击 "重新开始"。
      courseD_collector_debugging8:
        courseD_collector_debugging8_a: 您是否看到可以使用循环来简化的规律？
        courseD_collector_debugging8_b: 尝试使用嵌套循环使得代码更短。
      courseD_collector_debugging9:
        courseD_collector_debugging9_a: 有几种方法可以解决这个问题...但它们都需要转弯！
        courseD_collector_debugging9_b: 弄清楚将如何通过这个关卡，然后逐步移动，尝试使代码与你头脑所想相匹配。
      courseD_collector_debugging_challenge2:
        courseD_collector_debugging_challenge2_a: |-
          只从前**两堆**里收集头**两个**宝石开始。

          ![](<https://images.code.org/8493c16a5b913b91e28b36eb2b280b8c-image-1494775939149.25.04 AM copy.png>)
          用这些模块。

          <xml>
          <block type="collector_collect"></block>
          <block type="controls_repeat" limit="2">
          <title name="TIMES">2</title>
          </block>
          <block type="maze_move" x="175px" y="17px">
          <title name="DIR">moveForward</title>
          </block>

          <block type="controls_repeat" limit="2" x="175px" y="56px">
          <title name="TIMES">2</title>
          </block>

          </xml>
        courseD_collector_debugging_challenge2_b: "接下来, 在此行中收集剩余的宝石。 \n\n![](<https://images.code.org/22fff9fb20a50beaf4800aa022a5deb0-image-1494775944657.25.04
          AM.png>)\nAdd these blocks to your program.\n\n<xml><block type=\"maze_move\">\n\n<title
          name=\"DIR\">moveBackward</title>\n</block>\n<block type=\"controls_repeat\">\n<title
          name=\"TIMES\">4</title>\n<statement name=\"DO\">\n\n</statement>\n</block>\n</xml>"
        courseD_collector_debugging_challenge2_c: |-
          最后, 收集剩余的宝藏。将这些块添加到程序中。

          <xml>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">

          </statement>
          </block>
          </xml>
        courseD_collector_debugging_challenge2_d: |-
          这里是这个关卡的完整解决方案。

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="controls_repeat">
          <title name="TIMES">2</title>
          <statement name="DO">
          <block type="collector_collect"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_move">
          <title name="DIR">moveBackward</title>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnRight</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2:
        courseD_bee_nested_loops_challenge2_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_bee_nested_loops_challenge2_b: 要获得所有4个宝石, 首先使用一个循环离开中心。向左或向右转, 然后使用嵌套循环从第一堆宝藏移动到第二个。如果重复嵌套循环足够多次,
          收集器将在 \* 整个 \* 洞周围移动!
        courseD_bee_nested_loops_challenge2_c: 到达所有宝藏的最短程序只使用一个`收集`块和两个转弯。
        courseD_bee_nested_loops_challenge2_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2018:
        courseD_bee_nested_loops_challenge2_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_bee_nested_loops_challenge2_b: 要获得所有4个宝石, 首先使用一个循环离开中心。向左或向右转, 然后使用嵌套循环从第一堆宝藏移动到第二个。如果重复嵌套循环足够多次,
          收集器将在 \* 整个 \* 洞周围移动!
        courseD_bee_nested_loops_challenge2_c: 到达所有宝藏的最短程序只使用一个`收集`块和两个转弯。
        courseD_bee_nested_loops_challenge2_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2_2019:
        courseD_bee_nested_loops_challenge2_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_bee_nested_loops_challenge2_b: 要获得所有4个宝石, 首先使用一个循环离开中心。向左或向右转, 然后使用嵌套循环从第一堆宝藏移动到第二个。如果重复嵌套循环足够多次,
          收集器将在 \* 整个 \* 洞周围移动!
        courseD_bee_nested_loops_challenge2_c: 到达所有宝藏的最短程序只使用一个`收集`块和两个转弯。
        courseD_bee_nested_loops_challenge2_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseD_collector_nested_loops_challenge2a:
        courseD_collector_nested_loops_challenge2a_a: 不要忘记, 你可以`重复`一个单一的命令或较长的模式。你甚至可以`重复`一个`重复`模块!
        courseD_collector_nested_loops_challenge2a_b: 你能想出如何使用不多于得到两个宝石所需要的模块，来得到所有的四个宝石吗？
      courseD_collector_ramp10:
        courseD_artist_ramp10_a: |-
          不要在每条边使用四个`向前移动`向前移动块，试试把一个`向前移动`模块放到`重复`循环里，就像这样：

          <xml><block type="controls_repeat">

          <title name="TIMES">4</title>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          </block></xml>
        courseD_artist_ramp10_b: 别忘了收集一块财宝, 然后转身在广场的新一边开始!
        courseD_artist_ramp10_c: 如果你想简化你的代码, 你可以把一个循环套到另一个里面! 这称为 \*\* 嵌套循环 \*\*。
      courseD_collector_ramp8:
        courseD_collector_ramp8_a: 当你到达一个有宝藏的正方形时, 用`收集`来拾起它。对于这个关卡, 你需要不止一次收集宝藏!
        courseD_collector_ramp8_b: 如果你想简化你的代码，你实际上可以把一个重复循环放到另一个里！这称为 **嵌套循环**。
      courseD_collector_ramp9:
        courseD_collector_ramp9_a: 先把劳雷尔移到第一个宝藏, 然后再收集。你能重复这个序列来得到第二堆吗？
        courseD_collector_ramp9_b: 如果你想简化你的代码, 你可以把一个重复循环套在另一个里面! 这称为 \*\* 嵌套循环 \*\*。
      courseD_farmer_condLoops1:
        courseD_farmer_condLoops1_a: 你需要使用一个重复循环来寻找玉米5次。
        courseD_farmer_condLoops1_b: 请确保使用`如果在玉米上`模块，否则可能是在尝试捡起不存在的东西！
      courseD_farmer_condLoops1_2018:
        courseD_farmer_condLoops1_a: 你需要使用一个重复循环来寻找玉米5次。
        courseD_farmer_condLoops1_b: 请确保使用`如果在玉米上`模块，否则可能是在尝试捡起不存在的东西！
      courseD_farmer_condLoops1_2019:
        courseD_farmer_condLoops1_a: 你需要使用一个重复循环来寻找玉米5次。
        courseD_farmer_condLoops1_b: 请确保使用`如果在玉米上`模块，否则可能是在尝试捡起不存在的东西！
      courseD_farmer_condLoops2:
        courseD_farmer_condLoops2_a: '最好的方法是将`如果`语句嵌套在另一个里面。  '
        courseD_farmer_condLoops2_b: 这一关卡里，应该有一个`如果/否则`语句和一个普通的`如果`语句。
        courseD_farmer_condLoops2_c: |-
          `如果`语句可能看起来很像这样:

          -   如果在玉米上
          -   采摘玉米
          -   如果在生菜上
              \\t- 采摘莴苣。

          如果那里什么都没有，那就不会捡起来任何东西！
      courseD_farmer_condLoops2_2018:
        courseD_farmer_condLoops2_a: '最好的方法是将`如果`语句嵌套在另一个里面。  '
        courseD_farmer_condLoops2_b: 这一关卡里，应该有一个`如果/否则`语句和一个普通的`如果`语句。
        courseD_farmer_condLoops2_c: |-
          `如果`语句可能看起来很像这样:

          -   如果在玉米上
          -   采摘玉米
          -   如果在生菜上
              \\t- 采摘莴苣。

          如果那里什么都没有，那就不会捡起来任何东西！
      courseD_farmer_condLoops2_2019:
        courseD_farmer_condLoops2_a: '最好的方法是将`如果`语句嵌套在另一个里面。  '
        courseD_farmer_condLoops2_b: 这一关卡里，应该有一个`如果/否则`语句和一个普通的`如果`语句。
        courseD_farmer_condLoops2_c: |-
          `如果`语句可能看起来很像这样:

          -   如果在玉米上
          -   采摘玉米
          -   如果在生菜上
              \\t- 采摘莴苣。

          如果那里什么都没有，那就不会捡起来任何东西！
      courseD_farmer_condLoops3:
        courseD_farmer_condLoops3_a: |-
          若要获取所有项目，试试将`如果`嵌套三层。

          这意味着你应该将一个`如果`语句放在另一个里面，然后在第二个里放上第三个`如果`语句。
        courseD_farmer_condLoops3_b: 这一关卡里，应该有两个`如果/否则`语句和一个普通的`如果`语句。
      courseD_farmer_condLoops3_2018:
        courseD_farmer_condLoops3_a: |-
          若要获取所有项目，试试将`如果`嵌套三层。

          这意味着你应该将一个`如果`语句放在另一个里面，然后在第二个里放上第三个`如果`语句。
        courseD_farmer_condLoops3_b: 这一关卡里，应该有两个`如果/否则`语句和一个普通的`如果`语句。
      courseD_farmer_condLoops3_2019:
        courseD_farmer_condLoops3_a: |-
          若要获取所有项目，试试将`如果`嵌套三层。

          这意味着你应该将一个`如果`语句放在另一个里面，然后在第二个里放上第三个`如果`语句。
        courseD_farmer_condLoops3_b: 这一关卡里，应该有两个`如果/否则`语句和一个普通的`如果`语句。
      courseD_farmer_condLoops4:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          没有人知道每根芽中有多少莴苣头会长出来。

          请使用`当有莴苣时`循环继续采摘, 直到每一片都被收集起来。
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: "`当`循环也将处理空白空间! 由于没有生菜, 它不会做选择,
          让代码继续前进。"
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: 您可以使用`当前面有路`循环或`重复`循环来遍历所有的作物。
      courseD_farmer_condLoops4_2018:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          没有人知道每根芽中有多少莴苣头会长出来。

          请使用`当有莴苣时`循环继续采摘, 直到每一片都被收集起来。
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: "`当`循环也将处理空白空间! 由于没有生菜, 它不会做选择,
          让代码继续前进。"
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: 您可以使用`当前面有路`循环或`重复`循环来遍历所有的作物。
      courseD_farmer_condLoops4_2019:
        grade3_RunningFarm_4courseD_farmer_condLoops4: |-
          没有人知道每根芽中有多少莴苣头会长出来。

          请使用`当有莴苣时`循环继续采摘, 直到每一片都被收集起来。
        grade3_RunningFarm_4courseD_farmer_condLoops4_b: "`当`循环也将处理空白空间! 由于没有生菜, 它不会做选择,
          让代码继续前进。"
        grade3_RunningFarm_4courseD_farmer_condLoops4_c: 您可以使用`当前面有路`循环或`重复`循环来遍历所有的作物。
      courseD_farmer_condLoops5:
        courseD_farmer_condLoops5_a: '有一个新的循环: '' 重复直到在南瓜上 ''。你能看到它如何在这个关卡使用？'
        courseD_farmer_condLoops5_b: 每个地方可能有不止一个玉米或生菜厂。使用`当`循环来收集所有这些!
      courseD_farmer_condLoops5_2018:
        courseD_farmer_condLoops5_a: '有一个新的循环: '' 重复直到在南瓜上 ''。你能看到它如何在这个关卡使用？'
        courseD_farmer_condLoops5_b: 每个地方可能有不止一个玉米或生菜厂。使用`当`循环来收集所有这些!
      courseD_farmer_condLoops5_2019:
        courseD_farmer_condLoops5_a: '有一个新的循环: '' 重复直到在南瓜上 ''。你能看到它如何在这个关卡使用？'
        courseD_farmer_condLoops5_b: 每个地方可能有不止一个玉米或生菜厂。使用`当`循环来收集所有这些!
      courseD_farmer_condLoops6:
        courseD_farmer_condLoops6_a: 使用`当有玉米时`循环让农民能够采摘沿路所有的玉米。如果这个模块没有玉米，则不会做任何事情。
        courseD_farmer_condLoops6_b: 在进行下一步前，确保检查了`如果`前面有路！
      courseD_farmer_condLoops6_2018:
        courseD_farmer_condLoops6_a: 使用`当前面有路时`循环让农民沿着每片螺旋向下移动。
        courseD_farmer_condLoops6_b: 您只需要在大多收成时查找玉米。在程序的最后只采摘一个南瓜。
      courseD_farmer_condLoops6_2019:
        courseD_farmer_condLoops6_a: 使用`当前面有路时`循环让农民沿着每片螺旋向下移动。
        courseD_farmer_condLoops6_b: 您只需要在大多收成时查找玉米。在程序的最后只采摘一个南瓜。
      courseD_farmer_condLoops7:
        courseD_farmer_condLoops7_a: |-
          请注意, 获取所有农作物的最简单途径仍然是螺旋形。

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: 尝试使用`当前面有路时`使收割者移动正确的步数。
      courseD_farmer_condLoops7_2018:
        courseD_farmer_condLoops7_a: |-
          请注意, 获取所有农作物的最简单途径仍然是螺旋形。

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: 尝试使用`当前面有路时`使收割者移动正确的步数。
      courseD_farmer_condLoops7_2019:
        courseD_farmer_condLoops7_a: |-
          请注意, 获取所有农作物的最简单途径仍然是螺旋形。

          ![](https://images.code.org/ba8b8c624f21ade9ac823b045085c435-image-1479364378437.png)
        courseD_farmer_condLoops7_b: 试试用 `当前面有路` 使收获者移动正确的步数。
      courseD_farmer_condLoops_challenge1:
        courseD_farmer_condLoops_challenge1_a: 在这个挑战中, "步进" 按钮可能非常有用。
        courseD_farmer_condLoops_challenge1_b: 通常情况下, 如果你是在南瓜那里, 你只会`摘南瓜`。如果你在南瓜那里,
          你还需要做什么？
      courseD_farmer_condLoops_challenge1_2018:
        courseD_farmer_condLoops_challenge1_a: 在这个挑战中, "步进" 按钮可能非常有用。
        courseD_farmer_condLoops_challenge1_b: 通常情况下, 如果你是在南瓜那里, 你只会`摘南瓜`。如果你在南瓜那里,
          你还需要做什么？
      courseD_farmer_condLoops_challenge1_2019:
        courseD_farmer_condLoops_challenge1_a: 在这个挑战中, "步进" 按钮可能非常有用。
        courseD_farmer_condLoops_challenge1_b: 通常情况下, 如果你是在南瓜那里, 你只会`摘南瓜`。如果你在南瓜那里,
          你还需要做什么？
      courseD_farmer_condLoops_challenge2:
        courseD_farmer_condLoops_challenge2_a: 每种蔬菜在每个空间的数量各不相同。请使用 `当`循环。
      courseD_farmer_condLoops_challenge2_2018:
        courseD_farmer_condLoops_challenge2_a: 每种蔬菜在每个空间的数量各不相同。请使用 `当`循环。
      courseD_farmer_condLoops_challenge2_2019:
        courseD_farmer_condLoops_challenge2_a: 每种蔬菜在每个空间的数量各不相同。请使用 `当`循环。
      courseD_farmer_while1:
        courseD_farmer_while1_a: 你需要向前移动四次才能到达那堆。你能用 "重复" 循环吗？
        courseD_farmer_while1_b: 当你站在一堆土那里时，使用 "移走一堆" 块来移走它。
      courseD_farmer_while1_2018:
        courseD_farmer_while1_a: 你需要向前移动四次才能到达那堆。你能用 "重复" 循环吗？
        courseD_farmer_while1_b: 当你站在一堆土那里时，使用 "移走一堆" 块来移走它。
      courseD_farmer_while1_2019:
        courseD_farmer_while1_a: 你需要向前移动四次才能到达那堆。你能用 "重复" 循环吗？
        courseD_farmer_while1_b: 当你站在一堆土那里时，使用 "移走一堆" 块来移走它。
      courseD_farmer_while2:
        courseD_farmer_while2_a: 你只需要移动一次就能到达这个洞。
        courseD_farmer_while2_b: 您将需要 "填充 1" 个模块六次。你能用一个循环来让这个更简单吗？
      courseD_farmer_while2_2018:
        courseD_farmer_while2_a: 你只需要移动一次就能到达这个洞。
        courseD_farmer_while2_b: 您将需要 "填充 1" 个模块六次。你能用一个循环来让这个更简单吗？
      courseD_farmer_while2_2019:
        courseD_farmer_while2_a: 你只需要移动一次就能到达这个洞。
        courseD_farmer_while2_b: 您将需要 "填充 1" 个模块六次。你能用一个循环来让这个更简单吗？
      courseD_farmer_while3:
        courseD_farmer_while3_a: 循环可以帮助您在此处简化代码。
        courseD_farmer_while3_b: 你不需要任何`转向`模块到达土堆。
      courseD_farmer_while3_2018:
        courseD_farmer_while3_a: 循环可以帮助您在此处简化代码。
        courseD_farmer_while3_b: 你不需要任何`转向`模块到达土堆。
      courseD_farmer_while3_2019:
        courseD_farmer_while3_a: 循环可以帮助您在此处简化代码。
        courseD_farmer_while3_b: 你不需要任何`转向`模块到达土堆。
      courseD_farmer_while4:
        courseD_farmer_conditionals4_a: 与其使用`重复`循环, 不如使用`当`循环继续挖掘直到土堆消失。
        courseD_farmer_conditionals4_b: 这看起来非常类似于一个之前的关卡, 唯一的区别是你所要使用的循环。
      courseD_farmer_while4_2018:
        courseD_farmer_conditionals4_a: 与其使用`重复`循环, 不如使用`当`循环继续挖掘直到土堆消失。
        courseD_farmer_conditionals4_b: 这看起来非常类似于一个之前的关卡, 唯一的区别是你所要使用的循环。
      courseD_farmer_while4_2019:
        courseD_farmer_conditionals4_a: 与其使用`重复`循环, 不如使用`当`循环继续挖掘直到土堆消失。
        courseD_farmer_conditionals4_b: 这看起来非常类似于一个之前的关卡, 唯一的区别是你所要使用的循环。
      courseD_farmer_while5:
        courseD_farmer_conditionals5a_a: 尝试在`重复`循环内嵌套一个`当`循环。
        courseD_farmer_conditionals5a_b: 农夫需要向前移动五次才能到达终点。农夫还需要做什么？
        courseD_farmer_conditionals5a_c: 向前移动5次。每次你向前移动时, 用`当有土堆时`模块来除去堆积的污垢。
      courseD_farmer_while5_2018:
        courseD_farmer_conditionals5a_a: 尝试在`重复`循环内嵌套一个`当`循环。
        courseD_farmer_conditionals5a_b: 农夫需要向前移动五次才能到达终点。农夫还需要做什么？
        courseD_farmer_conditionals5a_c: 向前移动5次。每次你向前移动时, 用`当有土堆时`模块来除去堆积的污垢。
      courseD_farmer_while5_2019:
        courseD_farmer_conditionals5a_a: 尝试在`重复`循环内嵌套一个`当`循环。
        courseD_farmer_conditionals5a_b: 农夫需要向前移动五次才能到达终点。农夫还需要做什么？
        courseD_farmer_conditionals5a_c: 向前移动5次。每次你向前移动时, 用`当有土堆时`模块来除去堆积的污垢。
      courseD_farmer_while6:
        courseD_farmer_conditionals6_a: 请确保您使用的是`当`循环来计算每个孔的填充次数。
        courseD_farmer_conditionals6_b: 请注意, 农民需要在台阶式的图案下多次向前和向下移动。
        courseD_farmer_conditionals6_c: |-
          这个阶梯图案使用以下模块

          -   向前移动
          -   填充洞
          -   向右转
          -   向前移动
          -   填充洞
          -   向左转

          你需要使用这个阶梯图案多少次？

           确保你使用`当有洞时`来填补这个洞。
      courseD_farmer_while6_2018:
        courseD_farmer_conditionals6_a: 请确保您使用的是`当`循环来计算每个孔的填充次数。
        courseD_farmer_conditionals6_b: 请注意, 农民需要在台阶式的图案下多次向前和向下移动。
        courseD_farmer_conditionals6_c: |-
          这个阶梯图案使用以下模块

          -   向前移动
          -   填充洞
          -   向右转
          -   向前移动
          -   填充洞
          -   向左转

          你需要使用这个阶梯图案多少次？

           确保你使用`当有洞时`来填补这个洞。
      courseD_farmer_while6_2019:
        courseD_farmer_conditionals6_a: 请确保您使用的是`当`循环来计算每个孔的填充次数。
        courseD_farmer_conditionals6_b: 请注意, 农民需要在台阶式的图案下多次向前和向下移动。
        courseD_farmer_conditionals6_c: |-
          这个阶梯图案使用以下模块

          -   向前移动
          -   填充洞
          -   向右转
          -   向前移动
          -   填充洞
          -   向左转

          你需要使用这个阶梯图案多少次？

           确保你使用`当有洞时`来填补这个洞。
      courseD_farmer_while7:
        courseD_farmer_conditionals8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
        courseD_farmer_conditionals8_b: 在重复循环内放置`当前面有路时`循环可以帮助您通过此关卡。
        courseD_farmer_conditionals8_c: 在每条路径的末尾你需要做什么？
      courseD_farmer_while7_2018:
        courseD_farmer_conditionals8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
        courseD_farmer_conditionals8_b: 在重复循环内放置`当前面有路时`循环可以帮助您通过此关卡。
        courseD_farmer_conditionals8_c: 在每条路径的末尾你需要做什么？
      courseD_farmer_while7_2019:
        courseD_farmer_conditionals8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
        courseD_farmer_conditionals8_b: 在重复循环内放置`当前面有路时`循环可以帮助您通过此关卡。
        courseD_farmer_conditionals8_c: 在每条路径的末尾你需要做什么？
      courseD_farmer_while8:
        courseD_farmer_conditionals8_a: 需要使用多个`当`循环。
        courseD_farmer_conditionals8_b: 每个洞都在路径的末尾, 所以在使用`当前面有路时`之前要用`当前面有路时`。
        courseD_farmer_conditionals8_c: 请注意，你需要重复`当前面有路时`，`当有洞时`代码六次。
      courseD_farmer_while8_2018:
        courseD_farmer_conditionals8_a: 需要使用多个`当`循环。
        courseD_farmer_conditionals8_b: 每个洞都在路径的末尾, 所以在使用`当前面有路时`之前要用`当前面有路时`。
        courseD_farmer_conditionals8_c: 请注意，你需要重复`当前面有路时`，`当有洞时`代码六次。
      courseD_farmer_while8_2019:
        courseD_farmer_conditionals8_a: 需要使用多个`当`循环。
        courseD_farmer_conditionals8_b: 每个洞都在路径的末尾, 所以在使用`当前面有路时`之前要用`当前面有路时`。
        courseD_farmer_conditionals8_c: 请注意，你需要重复`当前面有路时`，`当有洞时`代码六次。
      courseD_farmer_while_challenge1:
        courseD_farmer_while_challenge1_a: 每个孔或桩位于路径末尾的\*\* 向后移动 \*\*一格 。
        courseD_farmer_while_challenge1_b: 如果你使用`当` 循环，你可以让农民即使不存在，也试着移除土堆或填满一个洞,
          。这意味着你可以编程让她无论在哪里都清除任何土或填补任何洞。
        courseD_farmer_conditionals8_c: 可以不使用任何`重复`循环来解决此问题。为此, 您需要使用四个`当`循环。
      courseD_farmer_while_challenge1_2018:
        courseD_farmer_while_challenge1_a: 每个孔或桩位于路径末尾的\*\* 向后移动 \*\*一格 。
        courseD_farmer_while_challenge1_b: 如果你使用`当` 循环，你可以让农民即使不存在，也试着移除土堆或填满一个洞,
          。这意味着你可以编程让她无论在哪里都清除任何土或填补任何洞。
        courseD_farmer_conditionals8_c: 可以不使用任何`重复`循环来解决此问题。为此, 您需要使用四个`当`循环。
      courseD_farmer_while_challenge1_2019:
        courseD_farmer_while_challenge1_a: 每个孔或桩位于路径末尾的\*\* 向后移动 \*\*一格 。
        courseD_farmer_while_challenge1_b: 如果你使用`当` 循环，你可以让农民即使不存在，也试着移除土堆或填满一个洞,
          。这意味着你可以编程让她无论在哪里都清除任何土或填补任何洞。
        courseD_farmer_conditionals8_c: 可以不使用任何`重复`循环来解决此问题。为此, 您需要使用四个`当`循环。
      courseD_farmer_while_challenge2:
        courseD_farmer_while_challenge1_a: 每个孔或桩位于路径末尾的\*\* 向后移动 \*\*一格 。
        courseD_farmer_while_challenge1_b: 如果你使用 "当" 循环，你可以告诉农民移走一堆土或填补一个洞 ，甚至都没有也行。这意味着你可以编程让她在同一个位置移走任何数量的土，并且填补任何数量的洞。
        courseD_farmer_conditionals8_c: 可以不使用任何`重复`循环来解决此问题。为此, 您需要使用四个`当`循环。
      courseD_harvester_nested_loops_challenge1:
        courseD_harvester_nested_loops_challenge1_a: '试着跟随路径来到达所有玉米。 '
        courseD_harvester_nested_loops_challenge1_b: 要收集超过一个玉米, 您需要多次使用`采摘玉米`。
        courseD_harvester_nested_loops_challenge1_c: 你需要添加一个小循环到主循环内来通过这个关卡。
      courseD_harvester_nested_loops_challenge1_2018:
        courseD_harvester_nested_loops_challenge1_a: '试着跟随路径来到达所有玉米。 '
        courseD_harvester_nested_loops_challenge1_b: 要收集超过一个玉米, 您需要多次使用`采摘玉米`。
        courseD_harvester_nested_loops_challenge1_c: 你需要添加一个小循环到主循环内来通过这个关卡。
      courseD_harvester_nested_loops_challenge1_2019:
        courseD_harvester_nested_loops_challenge1_a: '试着跟随路径来到达所有玉米。 '
        courseD_harvester_nested_loops_challenge1_b: 要收集超过一个玉米, 您需要多次使用`采摘玉米`。
        courseD_harvester_nested_loops_challenge1_c: 你需要添加一个小循环到主循环内来通过这个关卡。
      courseD_iceage_loops1:
        courseD_iceage_loops1_a: 小心破冰！斯奎特会掉下去的！
        courseD_iceage_loops1_b: |-
          需要用这个模块：

          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops10:
        courseB_iceage_loops10_a: 小心破冰！斯奎特会掉到水里的！
        courseB_iceage_loops10_b: 试试大声说出步骤，或将它们写到纸上。找到什么规律了吗？
        courseB_iceage_loops10_c: 这是一个很长的迷宫！沿这条路走。
      courseD_iceage_loops10_2019:
        courseB_iceage_loops10_a: 小心破冰！斯奎特会掉到水里的！
        courseB_iceage_loops10_b: 试试大声说出步骤，或将它们写到纸上。找到什么规律了吗？
        courseB_iceage_loops10_c: 这是一个很长的迷宫！沿这条路走。
      courseD_iceage_loops1_2019:
        courseD_iceage_loops1_a: 小心破冰！斯奎特会掉下去的！
        courseD_iceage_loops1_b: |-
          需要用这个模块：

          <xml><block type="maze_moveForward"/></xml>
      courseD_iceage_loops2:
        courseD_iceage_loops2_a: 将这一关分成两部分，一个在角落前，另一个在角落后。
        courseD_iceage_loops2_b: 如果被难住了，试着大声说出步骤来。
        courseD_iceage_loops2_c: 修复这条路，来帮助斯奎特到达橡子。
      courseD_iceage_loops2_2019:
        courseD_iceage_loops2_a: 将这一关分成两部分，一个在角落前，另一个在角落后。
        courseD_iceage_loops2_b: 如果被难住了，试着大声说出步骤来。
        courseD_iceage_loops2_c: 修复这条路，来帮助斯奎特到达橡子。
      courseD_iceage_loops3:
        courseB_iceage_loops3_a: |-
          用这个新的模块！
          <xml><block type="controls_repeat_dropdown"><title name="TIMES" config="2-10">5</title>
          </block></xml>
        courseB_iceage_loops3_b: 要重复代码, 拖出一个`重复`循环, 然后把想要重复的模块放到它里面。
      courseD_iceage_loops3_2019:
        courseB_iceage_loops3_a: |-
          用这个新的模块！

           <xml><block type="controls_repeat_dropdown">
              <title name="TIMES" config="2-10">5</title>
            </block></xml>
        courseB_iceage_loops3_b: 要重复代码, 拖出一个`重复`循环, 然后把想要重复的模块放到它里面。
      courseD_iceage_loops4:
        courseD_iceage_loops4_a: 别害怕运行你的代码，看看会发生什么！
        courseD_iceage_loops4_b: 写下斯奎特要到达橡子的步骤。找到规律了吗？
        courseD_iceage_loops4_c: 这是斯奎特应该走的路。
      courseD_iceage_loops4_2019:
        courseD_iceage_loops4_a: 别害怕运行你的代码，看看会发生什么！
        courseD_iceage_loops4_b: 写下斯奎特要到达橡子的步骤。找到规律了吗？
        courseD_iceage_loops4_c: 这是斯奎特应该走的路。
      courseD_iceage_loops6:
        courseD_iceage_loops6_a: 最终的代码会有**三个**`向前移动`模块。
        courseD_iceage_loops6_b: 你只需要再添加**一个**循环！
        courseD_iceage_loops6_c: 最终的路应该像这样。
      courseD_iceage_loops6_2019:
        courseD_iceage_loops6_a: 最终的代码会有**三个**`向前移动`模块。
        courseD_iceage_loops6_b: 你只需要再添加**一个**循环！
        courseD_iceage_loops6_c: 最终的路应该像这样。
      courseD_iceage_loops7:
        courseB_iceage_loops7_a: 如果被难住了，试着在纸上写下步骤。找到规律了吗？
        courseB_iceage_loops7_b: 斯奎特想要拿到橡子就得走这条路。
      courseD_iceage_loops7_2019:
        courseB_iceage_loops7_a: 如果被难住了，试着在纸上写下步骤。找到规律了吗？
        courseB_iceage_loops7_b: 斯奎特想要拿到橡子就得走这条路。
      courseD_iceage_loops8:
        courseD_iceage_loops8_a: 这些`转向`模块正确吗？你还能改什么？
        courseD_iceage_loops8_b: 第一个循环应当重复**3**次，第二个应当重复**5**次，第三个循环应当重复**4**次，最后一个循环应当重复**4**次。
        courseD_iceage_loops8_c: 使用循环帮助斯奎特沿着这条路走。
      courseD_iceage_loops8_2019:
        courseD_iceage_loops8_a: 这些`转向`模块正确吗？你还能改什么？
        courseD_iceage_loops8_b: 第一个循环应当重复**3**次，第二个应当重复**5**次，第三个循环应当重复**4**次，最后一个循环应当重复**4**次。
        courseD_iceage_loops8_c: 使用循环帮助斯奎特沿着这条路走。
      courseD_iceage_loops9:
        courseD_iceage_loops9_a: 有困难吗？试着将这一关分成更小的部分。别害怕运行你的代码！
        courseD_iceage_loops9_b: 最后的代码会有**4**个循环。
        courseD_iceage_loops9_c: 斯奎特应该沿着这条路去找橡子。
      courseD_iceage_loops9_2019:
        courseD_iceage_loops9_a: 有困难吗？试着将这一关分成更小的部分。别害怕运行你的代码！
        courseD_iceage_loops9_b: 最后的代码会有**4**个循环。
        courseD_iceage_loops9_c: 斯奎特应该沿着这条路去找橡子。
      courseD_maze_intro4_2019:
        courseC_maze_programming4_a: 要从红鸟的视角向右或向左转。如果面对右边，向右转会朝下。
        courseC_maze_programming4_b: 要沿着这条路前进, 向前移动，然后转向一条路, 然后再移动, 转向相反的方向。再往前走一次就能到达橡子。
      courseD_maze_intro5a_2019:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转弯是从红鸟的角度看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_nestedLoops3:
        courseD_maze_nestedLoops3_a: 为了通过这一关，需要在另一个`重复`循环中"嵌套"一个`重复`循环。
        courseD_maze_nestedLoops3_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseD_maze_nestedLoops3_c: 尝试为一条直路和一个转弯编写代码。你能再重复一遍得到太阳花吗？
      courseD_maze_nestedLoops3_2018:
        courseD_maze_nestedLoops3_a: 为了通过这一关，需要在另一个`重复`循环中"嵌套"一个`重复`循环。
        courseD_maze_nestedLoops3_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseD_maze_nestedLoops3_c: 尝试为一条直路和一个转弯编写代码。你能再重复一遍得到太阳花吗？
      courseD_maze_nestedLoops3_2019:
        courseD_maze_nestedLoops3_a: 为了通过这一关，需要在另一个`重复`循环中"嵌套"一个`重复`循环。
        courseD_maze_nestedLoops3_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseD_maze_nestedLoops3_c: 尝试为一条直路和一个转弯编写代码。你能再重复一遍得到太阳花吗？
      courseD_maze_nestedLoops4:
        courseD_maze_nestedLoops4_a: "尝试在迷宫中使用此路径。 \n\n![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)"
        courseD_maze_nestedLoops4_b: 如果循环规律很难看出来，请尝试把它全部编码出来。然后看看哪段代码在放入循环之前是一直重复的。
        courseD_maze_nestedLoops4_c: 尝试将一个`重复`循环放到另一个循环里，来减少需要的代码。
      courseD_maze_nestedLoops4_2018:
        courseD_maze_nestedLoops4_a: "尝试在迷宫中使用此路径。 \n\n![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)"
        courseD_maze_nestedLoops4_b: 如果循环规律很难看出来，请尝试把它全部编码出来。然后看看哪段代码在放入循环之前是一直重复的。
        courseD_maze_nestedLoops4_c: 尝试将一个`重复`循环放到另一个循环里，来减少需要的代码。
      courseD_maze_nestedLoops4_2019:
        courseD_maze_nestedLoops4_a: "尝试在迷宫中使用此路径。 \n\n![](https://images.code.org/565dbbcaf5862da0f60e54195820e814-image-1505961491245.36.09.png)"
        courseD_maze_nestedLoops4_b: 如果循环规律很难看出来，请尝试把它全部编码出来。然后看看哪段代码在放入循环之前是一直重复的。
        courseD_maze_nestedLoops4_c: 尝试将一个`重复`循环放到另一个循环里，来减少需要的代码。
      courseD_maze_nestedLoops5:
        courseD_maze_nestedLoops5_a: 在迷宫里寻找楼梯-步进规律来找到可以用嵌套循环的地方。
        courseD_maze_nestedLoops5_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
      courseD_maze_nestedLoops5_2018:
        courseD_maze_nestedLoops5_a: 在迷宫里寻找楼梯-步进规律来找到可以用嵌套循环的地方。
        courseD_maze_nestedLoops5_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
      courseD_maze_nestedLoops5_2019:
        courseD_maze_nestedLoops5_a: 在迷宫里寻找楼梯-步进规律来找到可以用嵌套循环的地方。
        courseD_maze_nestedLoops5_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
      courseD_maze_nestedLoops6:
        courseD_maze_nestedLoops6_a: 如果被难住了，请试着在纸上先不用循环写下代码并寻找规律。
        courseD_maze_nestedLoops6_b: 嵌套的`重复`循环可以帮助减少使用的模块数量。
        courseD_maze_nestedLoops6_c: 需要两组嵌套的`重复`循环来通过这个关卡。
      courseD_maze_nestedLoops6_2018:
        courseD_maze_nestedLoops6_a: 如果被难住了，请试着在纸上先不用循环写下代码并寻找规律。
        courseD_maze_nestedLoops6_b: 嵌套的`重复`循环可以帮助减少使用的模块数量。
        courseD_maze_nestedLoops6_c: 需要两组嵌套的`重复`循环来通过这个关卡。
      courseD_maze_nestedLoops6_2019:
        courseD_maze_nestedLoops6_a: 如果被难住了，请试着在纸上先不用循环写下代码并寻找规律。
        courseD_maze_nestedLoops6_b: 嵌套的`重复`循环可以帮助减少使用的模块数量。
        courseD_maze_nestedLoops6_c: 需要两组嵌套的`重复`循环来通过这个关卡。
      courseD_maze_ramp1:
        courseC_maze_programming1_a: 如果小鸟没有到达猪那里。 确保所有三个模块已完全连在一起，然后再次单击 "运行" 。
        courseC_maze_programming1_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp1_2018:
        courseC_maze_programming1_a: 如果小鸟没有到达猪那里。 确保所有三个模块已完全连在一起，然后再次单击 "运行" 。
        courseC_maze_programming1_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp1_2019:
        courseC_maze_programming1_a: 如果小鸟没有到达猪那里。 确保所有三个模块已完全连在一起，然后再次单击 "运行" 。
        courseC_maze_programming1_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp2:
        courseC_maze_programming2_a: 要使用`向前移动`模块，请将其从工具箱拖到工作区中，并将其连接到`当运行时`模块下面。
        courseC_maze_programming2_b: 确保所有3个模块都被点击了，并连接到`运行时`块。
      courseD_maze_ramp2_2018:
        courseC_maze_programming2_a: 要使用`向前移动`模块，请将其从工具箱拖到工作区中，并将其连接到`当运行时`模块下面。
        courseC_maze_programming2_b: 确保所有3个模块都被点击了，并连接到`运行时`块。
      courseD_maze_ramp2_2019:
        courseC_maze_programming2_a: 要使用`向前移动`模块，请将其从工具箱拖到工作区中，并将其连接到`当运行时`模块下面。
        courseC_maze_programming2_b: 确保所有3个模块都被点击了，并连接到`运行时`块。
      courseD_maze_ramp3:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。

          点击要删除的块，并将它拖回工具箱。

          最后，把其它模块放回它们应该在的地方。
      courseD_maze_ramp3_2018:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。

          点击要删除的块，并将它拖回工具箱。

          最后，把其它模块放回它们应该在的地方。
      courseD_maze_ramp3_2019:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。

          点击要删除的块，并将它拖回工具箱。

          最后，把其它模块放回它们应该在的地方。
      courseD_maze_ramp4:
        courseC_maze_programming4_a: 你可以从鸟的视角向右或向左转。如果你面向右，向右转将让你朝下。
        courseC_maze_programming4_b: 要沿着这条路，向前移动并转弯，然后再移动并转向对面的路。再往前走一步到达猪。
      courseD_maze_ramp4_2018:
        courseC_maze_programming4_a: 你可以从鸟的视角向右或向左转。如果你面向右，向右转将让你朝下。
        courseC_maze_programming4_b: 要沿着这条路，向前移动并转弯，然后再移动并转向对面的路。再往前走一步到达猪。
      courseD_maze_ramp4_2019:
        courseC_maze_programming4_a: 您可以从斯奎特的角度向右或向左转。如果你面向右，向右拐会使你朝下。
        courseC_maze_programming4_b: 要沿着这条路前进, 向前移动，然后转向一条路, 然后再移动, 转向相反的方向。再往前走一次就能到达橡子。
      courseD_maze_ramp5:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5_2018:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5_2019:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5a:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5a_2018:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5a_2019:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5b:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5b_2018:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp5b_2019:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 记住，转向是从鸟的角度来看的。
        courseC_maze_programming5_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_maze_ramp6:
        courseC_maze_programming6_a: 有两种方法来解决这个难题 ！
        courseC_maze_programming6_b: 小鸟开始面对一堵墙, 所以请记住在移动前要转向。
        courseC_maze_programming6_c: 记住, 你可以一次写一段代码, 然后运行它, 找出你接下来需要从往哪里走。
      courseD_maze_ramp7:
        courseD_maze_ramp7_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseD_maze_ramp7_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
        courseD_maze_ramp7_c: 如果你想简化你的代码, 你可以把一个重复循环套在另一个里面! 这称为 \*\* 嵌套循环 \*\*。
      courseD_maze_until1:
        courseD_maze_until1_a: 是否有任何序列可以循环使代码更短？
        courseD_maze_until1_b: 尝试使用嵌套循环来解决此难题。
      courseD_maze_until1_2018:
        courseD_maze_until1_a: 是否有任何序列可以循环使代码更短？
        courseD_maze_until1_b: 尝试使用嵌套循环来解决此难题。
      courseD_maze_until1_2019:
        courseD_maze_until1_a: 是否有任何序列可以循环使代码更短？
        courseD_maze_until1_b: 尝试使用嵌套循环来解决此难题。
      courseD_maze_until3:
        courseD_maze_until3_a: |-
          -   你的代码是做什么的？
          -   它应该做什么？
          -   那告诉你什么？
        courseD_maze_until3_b: 如果你被难住了, 试着在纸上逐步写下步骤, 并寻找他们重复的地方。
        courseD_maze_until3_c: 是否有一个阶梯步进步进可以来解决这个关卡？
        courseD_maze_until3_d: 不要忘记使用`重复直到`模块来让代码更短。
      courseD_maze_until3_2018:
        courseD_maze_until3_a: |-
          -   你的代码是做什么的？
          -   它应该做什么？
          -   那告诉你什么？
        courseD_maze_until3_b: 如果你被难住了, 试着在纸上逐步写下步骤, 并寻找他们重复的地方。
        courseD_maze_until3_c: 是否有一个阶梯步进步进可以来解决这个关卡？
        courseD_maze_until3_d: 不要忘记使用`重复直到`模块来让代码更短。
      courseD_maze_until3_2019:
        courseD_maze_until3_a: |-
          -   你的代码是做什么的？
          -   它应该做什么？
          -   那告诉你什么？
        courseD_maze_until3_b: 如果你被难住了, 试着在纸上逐步写下步骤, 并寻找他们重复的地方。
        courseD_maze_until3_c: 是否有一个阶梯步进步进可以来解决这个关卡？
        courseD_maze_until3_d: 不要忘记使用`重复直到`模块来让代码更短。
      courseD_maze_until4:
        courseD_maze_until4_a: |-
          使用"步进"按钮能帮你一行一行运行代码。

          -   在第一步时一切都正常吗？
          -   在第二步时一切都正常吗？
          -   哪里出错了？
        courseD_maze_until4_b: 是否有一个阶梯步进步进可以来解决这个关卡？
        courseD_maze_until4_c: 不要忘记使用`重复直到`模块来让代码更短。
      courseD_maze_until4_2018:
        courseD_maze_until4_a: |-
          使用"步进"按钮能帮你一行一行运行代码。

          -   在第一步时一切都正常吗？
          -   在第二步时一切都正常吗？
          -   哪里出错了？
        courseD_maze_until4_b: 是否有一个阶梯步进步进可以来解决这个关卡？
        courseD_maze_until4_c: 不要忘记使用`重复直到`模块来让代码更短。
      courseD_maze_until4_2019:
        courseD_maze_until4_a: |-
          使用"步进"按钮能帮你一行一行运行代码。

          -   在第一步时一切都正常吗？
          -   在第二步时一切都正常吗？
          -   哪里出错了？
        courseD_maze_until4_b: 是否有一个阶梯步进步进可以来解决这个关卡？
        courseD_maze_until4_c: 不要忘记使用`重复直到`模块来让代码更短。
      courseD_maze_until5:
        courseD_maze_until5_a: 别忘了使用`如果左边有路`来让僵尸检查是否有转弯的地方。
        courseD_maze_until5_b: 只使用一个`向前移动`, 把它放在`重复直到向日葵`模块里面。
        courseD_maze_until5_c: 每个步骤后, 僵尸应该检查是否有一条路向左。如果他找到一条，该怎么办？
      courseD_maze_until5_2018:
        courseD_maze_until5_b: 只使用一个`向前移动`, 把它放在`重复直到向日葵`模块里面。
      courseD_maze_until5_2019:
        courseD_maze_until5_b: 只使用一个`向前移动`, 把它放在`重复直到向日葵`模块里面。
      courseD_maze_until6:
        courseD_maze_until6_a: 这一次，试试`如果右边有路`来让僵尸保持前进。
        courseD_maze_until6_b: 只使用一个`向前移动`, 把它放在`重复直到向日葵`模块里面。
        courseD_maze_until6_c: 虽然这里比上个关卡有更多的转向，因为有`重复直到`模块，你的代码可以是几乎相同的!
      courseD_maze_until6_2018:
        courseD_maze_until6_b: 只使用一个`向前移动`, 把它放在`重复直到向日葵`模块里面。
      courseD_maze_until6_2019:
        courseD_maze_until6_b: 只使用一个`向前移动`, 把它放在`重复直到向日葵`模块里面。
      courseD_maze_until7:
        courseD_maze_until7_a: 不要仅仅因为迷宫让代码比上次更长!
        courseD_maze_until7_b: 虽然这里比上个关卡有更多的转向，因为有`重复直到`模块，你的代码可以是几乎相同的!
        courseD_maze_until7_c: 记住要检查左边是否有路，因为向右转会使你走错路!
      courseD_maze_until7_2018:
        courseD_maze_until7_a: 不要仅仅因为迷宫让代码比上次更长!
        courseD_maze_until7_b: 虽然这里比上个关卡有更多的转向，因为有`重复直到`模块，你的代码可以是几乎相同的!
      courseD_maze_until7_2019:
        courseD_maze_until7_a: 不要仅仅因为迷宫让代码比上次更长!
        courseD_maze_until7_b: 虽然这里比上个关卡有更多的转向，因为有`重复直到`模块，你的代码可以是几乎相同的!
      courseD_maze_until8:
        courseD_maze_until8_a: 请确保使用`如果/否则`模块来保持僵尸去往正确的方向。
        courseD_maze_until8_b: 用你的`如果/否则`模块：如果前面有一条路，你应该怎么做？
        courseD_maze_until8_c: 用你的`如果/否则`模块：如果前面没有一条路, 你应该转向哪条路？
      courseD_maze_until9:
        courseD_maze_until8_a: 使用`如果前面有路`将使你在可能情况下，就能继续前行，帮你躲过有食人花的路。
        courseD_maze_until8_b: 如果没有前进的道路，你应该转向哪个方向？
        courseD_maze_until8_c: 记得使用`重复直到`模块, 让你到达向日葵!
      courseD_maze_until9_2018:
        courseD_maze_until8_c: 记得使用`重复直到`模块, 让你到达向日葵!
      courseD_maze_until9_2019:
        courseD_maze_until8_c: 记得使用`重复直到`模块, 让你到达向日葵!
      courseD_playLab_cond1:
        courseD_playLab_cond1_a: 要通过这一挑战, 请将`向上移动演员 1`模块附加到`当上方向键按下时`事件, 然后对其他方向执行相同的操作。
        courseD_playLab_cond1_b: 使用`当按下方向键`和`移动演员`模块的下拉菜单来改变他们前进的方向。
        courseD_playLab_cond1_c: 请记住, 一旦您单击 "运行", 将海盗向前移动到两个标志上!
      courseD_playLab_cond1_2018:
        courseD_playLab_cond1_a: 要通过这一挑战, 请将`向上移动演员 1`模块附加到`当上方向键按下时`事件, 然后对其他方向执行相同的操作。
        courseD_playLab_cond1_b: 使用`当按下方向键`和`移动演员`模块的下拉菜单来改变他们前进的方向。
        courseD_playLab_cond1_c: 请记住, 一旦您单击 "运行", 将海盗向前移动到两个标志上!
      courseD_playLab_cond2:
        courseD_playLab_cond2_a: 要成功使用这个关卡, 使用`得分`模块下面的`当演员1触及演员 2`事件。
      courseD_playLab_cond2_2018:
        courseD_playLab_cond2_a: 要成功使用这个关卡, 使用`得分`模块下面的`当演员1触及演员 2`事件。
      courseD_playLab_cond3:
        courseD_playLab_cond3_a: 需要添加两个模块到`一直重复`循环中。一个将为龙（演员2）选择一个随机的情绪，另一个将等待1秒之后再次通过循环。
      courseD_playLab_cond3_2018:
        courseD_playLab_cond3_a: 需要添加两个模块到`一直重复`循环中。一个将为龙（演员2）选择一个随机的情绪，另一个将等待1秒之后再次通过循环。
      courseD_playLab_cond3a:
        courseD_playLab_cond3_c: |-
          -   `如果`龙是快乐的

          -   `得分`

          -   `得分`

          -   `否则` `得分`
      courseD_playLab_cond3a_2018:
        courseD_playLab_cond3_c: |-
          -   `如果`龙是快乐的

          -   `得分`

          -   `得分`

          -   `否则` `得分`
      courseD_playLab_cond4:
        courseD_playLab_cond4_a: 需要使用`当运行时`事件让忍者追逐海盗。
        courseD_playLab_cond4_b: 有一个特殊的模块叫`设置每个蒙面忍者追逐演员`，它将让忍者持续追踪海盗的踪迹!
        courseD_playLab_cond4_c: 把`以失败结束游戏`模块放在`当演员1触及演员 3`的事件下面。
      courseD_playLab_cond4_2018:
        courseD_playLab_cond4_a: 需要使用`当运行时`事件让忍者追逐海盗。
        courseD_playLab_cond4_b: 有一个特殊的模块叫`设置每个蒙面忍者追逐演员`，它将让忍者持续追踪海盗的踪迹!
        courseD_playLab_cond4_c: 把`以失败结束游戏`模块放在`当演员1触及演员 3`的事件下面。
      courseD_playLab_cond5:
        courseD_playLab_cond5_a: 使用一个`如果`语句来比较`分数`是否`>` 5来通过这个挑战。
        courseD_playLab_cond5_b: 您可以在工作区中有一个以上的`一直重复`循环。
      courseD_playLab_cond5_2018:
        courseD_playLab_cond5_a: 使用一个`如果`语句来比较`分数`是否`>` 5来通过这个挑战。
        courseD_playLab_cond5_b: 您可以在工作区中有一个以上的`一直重复`循环。
      courseD_playLab_cond6:
        courseD_playLab_cond6_a: 将 ’设置蒙面忍者速度‘模块添加到程序的开始来帮助降低忍者的速度。
        courseD_playLab_cond6_b: 您需要在`一直重复`模块内使用一个`如果演员 1的y方向 > 255`模块来总是检查海盗是否在章鱼下。
      courseD_playLab_cond6_2018:
        courseD_playLab_cond6_a: 将 ’设置蒙面忍者速度‘模块添加到程序的开始来帮助降低忍者的速度。
        courseD_playLab_cond6_b: 您需要在`一直重复`模块内使用一个`如果演员 1的y方向 > 255`模块来总是检查海盗是否在章鱼下。
      courseD_playLab_cond6a:
        courseD_playLab_cond6_c: 将`等待1秒`模块添加到`一直重复`循环的顶部, 它检查海盗位置 (但不在`如果`语句内) 防止分数被减得太快。
      courseD_playLab_cond6a_2018:
        courseD_playLab_cond6_c: 将`等待1秒`模块添加到`一直重复`循环的顶部, 它检查海盗位置 (但不在`如果`语句内) 防止分数被减得太快。
      courseD_scrat_ramp1:
        courseC_maze_programming1_a: 如果斯奎特没有得到橡子, 确保所有三个模块已完全连在一起, 然后再次单击"运行"。
        courseC_maze_programming1_b: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_scrat_ramp2:
        courseC_maze_programming2_a: 要使用`向前移动`模块，请将其从工具箱拖到工作区中，并将其连接到`当运行时`模块下面。
        courseC_maze_programming2_b: 确保所有三个`向前移动`模块都附加到`当运行时`模块上。
      courseD_scrat_ramp3:
        courseC_maze_programming3_a: |-
          ![](https://images.code.org/afddde0e99d5d270c658de0c03dd6e2c-image-1481174000309.gif)

          若要从代码中间删除模块, 请将所有模块拖到工作区的右边，并先暂时放在那里。

          点击要删除的块，并将它拖回工具箱。

          最后，把其它模块放回它们应该在的地方。
        courseC_maze_programming3_b: 请记住，向右和向左转是从小鸟的视角来看的。
      courseD_scrat_ramp4:
        courseC_maze_programming4_a: 您可以从斯奎特的角度向右或向左转。如果你面向右，向右拐会使你朝下。
        courseC_maze_programming4_b: 要沿着这条路前进, 向前移动，然后转向一条路, 然后再移动, 转向相反的方向。再往前走一次就能到达橡子。
        courseC_maze_programming4_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_scrat_ramp5:
        courseC_maze_programming5_a: 尝试使用"步进"按钮来一行一行运行你的代码。你能想出下一步需要做什么吗？
        courseC_maze_programming5_b: 你要走多远才能到拐角处？
        courseC_maze_programming5_c: 你需要在拐角处向左拐才能找到猪。
      courseD_scrat_ramp6:
        courseC_maze_programming6a_a: 使用 `重复` 循环来让斯奎特移动！
      courseD_scrat_ramp7:
        courseD_scrat_programming6_a: 有两种方法来解决这个难题 ！
        courseD_scrat_programming6_b: 记住在移动前先转向, 因为斯奎特朝着错误的方向。
        courseD_scrat_programming6_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseD_scrat_ramp8:
        courseD_maze_ramp7_b: 别忘了用"步进"按钮来一个模块一个模块的寻找错误。
        courseD_maze_ramp7_a: 使用重复模块可以一次又一次地运行单个模块或一堆代码。
        courseD_maze_ramp7_c: 不要害怕犯错误! 即使你不认为你已经解决了这个关卡，尝试添加模块并运行代码, 看看会发生什么,。
      courseE_artist_concept1:
        courseE_artist_concept1_a: 六边形有50像素长的边，并向右转60度。
        courseE_artist_concept1_b: 试着在这里使用一个函数, 这样就不必一次又一次地写画六边形的代码了。
        courseE_artist_concept1_c: 在每个函数调用前使用`设置宽度`模块来更改钢笔宽度。
      courseE_artist_concept1_2018:
        courseE_artist_concept1_a: 六边形有50像素长的边，并向右转60度。
        courseE_artist_concept1_b: 试着在这里使用一个函数, 这样就不必一次又一次地写画六边形的代码了。
        courseE_artist_concept1_c: 在每个函数调用前使用`设置宽度`模块来更改钢笔宽度。
      courseE_artist_concept4:
        courseE_artist_concept4_a: 有几种方法可以通过这个关卡。你能制定一个计划吗？
        courseE_artist_concept4_b: 尝试创建一个正方形。然后做一排正方形。下一步是什么？
        courseE_artist_concept4_c: 在绘制了一排正方形之后，你可以转过身去绘制另一条向左的方块, 或者你可以跳回到图的左边, 画出向右的线。你喜欢哪种方法？
      courseE_artist_concept4_2018:
        courseE_artist_concept4_a: 有几种方法可以通过这个关卡。你能制定一个计划吗？
        courseE_artist_concept4_b: 尝试创建一个正方形。然后做一排正方形。下一步是什么？
        courseE_artist_concept4_c: 在绘制了一排正方形之后，你可以转过身去绘制另一条向左的方块, 或者你可以跳回到图的左边, 画出向右的线。你喜欢哪种方法？
      courseE_artist_concept_challenge1:
        courseE_artist_concept_challenge1_a: '这半个六边形有一条**30像素长**的边，并且需要向右转**60度**。  '
        courseE_artist_concept_challenge1_b: '这2/3个三角形有一条**80像素长**的边，并且需要向右转**120度**。 '
        courseE_artist_concept_challenge1_c: |-
          这是您要让形状完整所要重复的设计：

          ![](<https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png>)
      courseE_artist_concept_challenge1_2018:
        courseE_artist_concept_challenge1_a: '这半个六边形有一条**30像素长**的边，并且需要向右转**60度**。  '
        courseE_artist_concept_challenge1_b: '这2/3个三角形有一条**80像素长**的边，并且需要向右转**120度**。 '
        courseE_artist_concept_challenge1_c: |-
          这是您要让形状完整所要重复的设计：

          ![](<https://images.code.org/d6b2afd39119da33d085dcce6077ada8-image-1501705780826.28.43 PM.png>)
      courseE_artist_concept_challenge2:
        courseE_artist_concept_challenge2_a: 一旦你定义了一个函数, 你可以一次又一次地调用它 - 任何想用的地方或时机！
        courseE_artist_concept_challenge2_b: |-
          可以使用以下命令跳转到画布上的不同位置：

          <xml> <block type="jump_to">

          <title name="VALUE">???</title>
          </block></xml>
      courseE_artist_concept_challenge2_2018:
        courseE_artist_concept_challenge2_a: 一旦你定义了一个函数, 你可以一次又一次地调用它 - 任何想用的地方或时机！
        courseE_artist_concept_challenge2_b: |-
          可以使用以下命令跳转到画布上的不同位置：

          <xml> <block type="jump_to">

          <title name="VALUE">???</title>
          </block></xml>
      courseE_artist_functions1:
        courseE_artist_functions1_a: 这些方块的每个边都有100个像素，这意味着你将不得不在绘制你的第二个正方形前向前移动175个像素。
        courseE_artist_functions1_b: 制作你的眼镜时绘制重叠的线条是可以的。
        courseE_artist_functions1_c: 对于较短的代码, 请尝试使用`重复`循环来绘制眼镜的方形框架。
      courseE_artist_functions10:
        courseD_artist_functions10_b: 这幅画和上一个很像，但是`画线`函数现在画的是一个不同的形状。
        courseD_artist_functions10_a: 为了避免使用多个`向前移动`模块，创建一个`画六边形`的函数，并且多次调用它。
        courseD_artist_functions10_c: |-
          你看到这幅画可以用一个叫做`画六边形线`的函数吗？

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2018:
        courseD_artist_functions10_b: 这幅画和上一个很像，但是`画线`函数现在画的是一个不同的形状。
        courseD_artist_functions10_a: 为了避免使用多个`向前移动`模块，创建一个`画六边形`的函数，并且多次调用它。
        courseD_artist_functions10_c: |-
          你看到这幅画可以用一个叫做`画六边形线`的函数吗？

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions10_2019:
        courseD_artist_functions10_b: 这幅画和上一个很像，但是`画线`函数现在画的是一个不同的形状。
        courseD_artist_functions10_a: 为了避免使用多个`向前移动`模块，创建一个`画六边形`的函数，并且多次调用它。
        courseD_artist_functions10_c: |-
          你看到这幅画可以用一个叫做`画六边形线`的函数吗？

          ![](https://images.code.org/904e0f38232fd9c15a3d2d172e7dde0b-image-1493140714580.gif)
      courseE_artist_functions2:
        courseD_artist_functions2_b: 您编写的函数不应包含整个程序, 只需绘制一个具有100像素边的正方形的部分。
        courseD_artist_functions2_c: |-
          使用绿色`draw a square`（画一个正方形）模块，在`当运行时`模块下"调用"函数。否则，函数中的代码将不会运行。

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          你的程序应该：

          -   使用函数
          -   向前移动 100+75像素
          -   使用函数
      courseE_artist_functions2_2018:
        courseD_artist_functions2_b: 您编写的函数不应包含整个程序, 只需绘制一个具有100像素边的正方形的部分。
        courseD_artist_functions2_c: |-
          确保使用了绿色`draw a square`（画一个正方形）模块"调用"了函数。否则，函数中的代码将不会运行。

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          你的程序应该：

          -   使用函数
          -   向前移动 100+75像素
          -   使用函数
      courseE_artist_functions2_2019:
        courseD_artist_functions2_b: 您编写的函数不应包含整个程序, 只需绘制一个具有100像素边的正方形的部分。
        courseD_artist_functions2_c: |-
          确保使用了绿色`draw a square`（画一个正方形）模块"调用"了函数。否则，函数中的代码将不会运行。

          <xml><block type="procedures_callnoreturn" limit="2"><mutation name="draw a square"/></block></xml>
        courseD_artist_functions2_a: |-
          你的程序应该：

          -   使用函数
          -   向前移动 100+75像素
          -   使用函数
      courseE_artist_functions3:
        courseD_artist_functions3_a: |-
          为了通过这关，你只需要添加一个循环来重复初始的代码8次。

          如果你不记得初始代码是什么样了，点击工作区右上角"重新开始"。
        courseD_artist_functions3_b: 您的循环里面应该有所有3个初始的代码块。
      courseE_artist_functions4:
        courseD_artist_functions4_a: 尝试使用函数！
        courseD_artist_functions4_b: 将`画一个星星`从工具箱中拖出以开始构造函数。因为你画的是同一个星形图案, 所以它应该和以前的拼图有相同的代码。
        courseD_artist_functions4_c: 使用绿色`画一个星星`模块在您的主程序来调用这个功能。别忘了在每颗星星之间跳跃前进!
      courseE_artist_functions5:
        courseD_artist_functions5_a: 别放弃！记住你已经学会的东西。
        courseD_artist_functions5_b: 函数使它可以很容易地在任何时候调用保存的代码, 而不仅仅是从循环里！
        courseD_artist_functions5_c: 首先, 将星星形状的代码拖动到`画一个星星`函数中, 然后使用此函数绘制三颗星星！
      courseE_artist_functions5_2018:
        courseD_artist_functions5_a: 别放弃！记住你已经学会的东西。
        courseD_artist_functions5_b: 函数使它可以很容易地在任何时候调用保存的代码, 而不仅仅是从循环里！
        courseD_artist_functions5_c: 首先, 将星星形状的代码拖动到`画一个星星`函数中, 然后使用此函数绘制三颗星星！
      courseE_artist_functions5_2019:
        courseD_artist_functions5_a: 别放弃！记住你已经学会的东西。
        courseD_artist_functions5_b: 函数使它可以很容易地在任何时候调用保存的代码, 而不仅仅是从循环里！
        courseD_artist_functions5_c: 首先, 将星星形状的代码拖动到`画一个星星`函数中, 然后使用此函数绘制三颗星星！
      courseE_artist_functions6:
        grade4_artist_functions_windows0_a: 现在只专注于制作一个窗口。我们将在下一个关卡中为它创建一个函数。
        grade4_artist_functions_windows0_b: 尝试使用嵌套循环。内循环将制作正方形，外循环将让正方形旋转四次。
        grade4_artist_functions_windows0_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseE_artist_functions7:
        courseD_artist_functions7_a: 请尝试首先创建函数, 然后一次添加一个窗口。
        courseD_artist_functions7_b: 不需要添加任何额外的重复循环。只需让艺术家在每个窗口顶部向前跳跃100像素，然后向下跳150像素到达底部窗口。
      courseE_artist_functions7_2018:
        courseD_artist_functions7_a: 请尝试首先创建函数, 然后一次添加一个窗口。
        courseD_artist_functions7_b: 不需要添加任何额外的重复循环。只需让艺术家在每个窗口顶部向前跳跃100像素，然后向下跳150像素到达底部窗口。
      courseE_artist_functions7_2019:
        courseD_artist_functions7_a: 请尝试首先创建函数, 然后一次添加一个窗口。
        courseD_artist_functions7_b: 不需要添加任何额外的重复循环。只需让艺术家在每个窗口顶部向前跳跃100像素，然后向下跳150像素到达底部窗口。
      courseE_artist_functions8:
        courseD_artist_functions8_f: 你只需要一个 ' 前进 ' 块, 但你将需要相当多的 ' 跳跃前进 ' 和/或 ' 跳转向后
          ' 块!
        courseD_artist_functions8_a: |-
          从制作一个正方形的函数开始，然后尝试为一行正方形做一个函数。

          如何使用`draw a line of squares`（用正方形画一条线）函数来制作此图像？
        courseD_artist_functions8_d: |-
          用正方形画一条线，

          -   重复3次
          -   用边长**50像素**画一个正方形
          -   向前跳**100像素**
        courseD_artist_functions8_b: |-
          把此图片中的每一行视为3个正方形的线。它们有多少条正方形线，您要从哪里开始画它们？

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: 在每行正方形的末尾，在绘制下一行之前艺术家得向下及向后跳跃。
        courseD_artist_functions8_g: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      courseE_artist_functions8_2018:
        courseD_artist_functions8_f: 你只需要一个 ' 前进 ' 块, 但你将需要相当多的 ' 跳跃前进 ' 和/或 ' 跳转向后
          ' 块!
        courseD_artist_functions8_a: |-
          从制作一个正方形的函数开始，然后尝试为一行正方形做一个函数。

          如何使用`draw a line of squares`（用正方形画一条线）函数来制作此图像？
        courseD_artist_functions8_d: |-
          用正方形画一条线，

          -   重复3次
          -   用边长**50像素**画一个正方形
          -   向前跳**100像素**
        courseD_artist_functions8_b: |-
          把此图片中的每一行视为3个正方形的线。它们有多少条正方形线，您要从哪里开始画它们？

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: 在每行正方形的末尾，在绘制下一行之前艺术家得向下及向后跳跃。
        courseD_artist_functions8_g: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      courseE_artist_functions8_2019:
        courseD_artist_functions8_f: 你只需要一个 ' 前进 ' 块, 但你将需要相当多的 ' 跳跃前进 ' 和/或 ' 跳转向后
          ' 块!
        courseD_artist_functions8_a: |-
          从制作一个正方形的函数开始，然后尝试为一行正方形做一个函数。

          如何使用`draw a line of squares`（用正方形画一条线）函数来制作此图像？
        courseD_artist_functions8_d: |-
          用正方形画一条线，

          -   重复3次
          -   用边长**50像素**画一个正方形
          -   向前跳**100像素**
        courseD_artist_functions8_b: |-
          把此图片中的每一行视为3个正方形的线。它们有多少条正方形线，您要从哪里开始画它们？

          ![](<https://images.code.org/22a6f5cc5551371057244eee01955f8e-image-1493135135468.4.10 Hint Drawing.png>)
        courseD_artist_functions8_c: 在每行正方形的末尾，在绘制下一行之前艺术家得向下及向后跳跃。
        courseD_artist_functions8_g: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      courseE_artist_functions8b_2018:
        courseD_artist_functions8_f: 如果做对了，只需要一个`向前移动`模块！
        courseD_artist_functions8_a: 从为正方形创建一个函数，然后试着为一行正方形创建一个函数。
        courseD_artist_functions8_d: |-
          要画一行正方形：

          -   重复3次
          -   画一个正方形
          -   向前跳 **100 像素**
      courseE_artist_functions8b_2019:
        courseD_artist_functions8_f: 如果做对了，只需要一个`向前移动`模块！
        courseD_artist_functions8_a: 从为正方形创建一个函数，然后试着为一行正方形创建一个函数。
        courseD_artist_functions8_d: |-
          要画一行正方形：

          -   重复3次
          -   画一个正方形
          -   向前跳 **100 像素**
      courseE_artist_functions8c_2018:
        courseD_artist_functions8_f: 这比看起来容易！这里不需要用任何`向前移动`或`跳跃`模块！
        courseD_artist_functions8_a: 第二行正方形与第一行相比，只有180度转弯不同！
        courseD_artist_functions8_c: 在每行正方形的最后，艺术家只需要在画下一行正方形前转180度。将所有内容放到一个循环里来开始下一个练习！
      courseE_artist_functions8c_2019:
        courseD_artist_functions8_f: 这比看起来容易！这里不需要用任何`向前移动`或`跳跃`模块！
        courseD_artist_functions8_a: 第二行正方形与第一行相比，只有180度转弯不同！
        courseD_artist_functions8_c: 在每行正方形的最后，艺术家只需要在画下一行正方形前转180度。将所有内容放到一个循环里来开始下一个练习！
      courseE_artist_functions9:
        courseD_artist_functions9_e: |-
          你能在这幅画中找到四个可以使用`画一条三角形的线`的地方吗？

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          这个关卡可以分成三部分：

          \-制作`画一个三角形`函数
          \-制作`画一行三角形`函数
          \-使用`画一行三角形`函数四次来完成图画
        courseD_artist_functions9_b: 这幅画是通过绘制一行三角形4次, 并在绘制下一个三角形线之前旋转60或120度。
        courseD_artist_functions9_c: |-
          绘制三角形的线:
          \-重复4次
          \-绘制三角形
          \-向前跳50像素
        courseD_artist_functions9_d: |-
          绘制菱形:
          \-重复两次
          \-绘制一条三角形的线
          \-转60度
          \-绘制一条三角形
          \-转120 度
      courseE_artist_functions9_2018:
        courseD_artist_functions9_e: |-
          你能在这幅画中找到四个可以使用`画一条三角形的线`的地方吗？

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          这个关卡可以分成三部分：

          \-制作`画一个三角形`函数
          \-制作`画一行三角形`函数
          \-使用`画一行三角形`函数四次来完成图画
        courseD_artist_functions9_b: 这幅画是通过绘制一行三角形4次, 并在绘制下一个三角形线之前旋转60或120度。
        courseD_artist_functions9_c: |-
          绘制三角形的线:
          \-重复4次
          \-绘制三角形
          \-向前跳50像素
        courseD_artist_functions9_d: |-
          绘制菱形:
          \-重复两次
          \-绘制一条三角形的线
          \-转60度
          \-绘制一条三角形
          \-转120 度
      courseE_artist_functions9_2019:
        courseD_artist_functions9_e: |-
          你能在这幅画中找到四个可以使用`画一条三角形的线`的地方吗？

          ![](https://images.code.org/130e1040ecca7186dea87f42666f5620-image-1493140373966.gif)
        courseD_artist_functions9_a: |-
          这个关卡可以分成三部分：

          \-制作`画一个三角形`函数
          \-制作`画一行三角形`函数
          \-使用`画一行三角形`函数四次来完成图画
        courseD_artist_functions9_b: 这幅画是通过绘制一行三角形4次, 并在绘制下一个三角形线之前旋转60或120度。
        courseD_artist_functions9_c: |-
          绘制三角形的线:
          \-重复4次
          \-绘制三角形
          \-向前跳50像素
        courseD_artist_functions9_d: |-
          绘制菱形:
          \-重复两次
          \-绘制一条三角形的线
          \-转60度
          \-绘制一条三角形
          \-转120 度
      courseE_artist_functions_challenge1:
        courseE_artist_functions_challenge1_a: 如果再次调用该函数, 则可以在最后一个角创建相同的设计。
        courseE_artist_functions_challenge1_b: 你也可以随自己所想`跳到`其他位置或改变整个设计!
      courseE_artist_functions_challenge1_2018:
        courseE_artist_functions_challenge1_a: 如果再次调用该函数, 则可以在最后一个角创建相同的设计。
        courseE_artist_functions_challenge1_b: 你也可以随自己所想`跳到`其他位置或改变整个设计!
      courseE_artist_functions_challenge1_2019:
        courseE_artist_functions_challenge1_a: 如果再次调用该函数, 则可以在最后一个角创建相同的设计。
        courseE_artist_functions_challenge1_b: 你也可以随自己所想`跳到`其他位置或改变整个设计!
      courseE_artist_functions_challenge2:
        courseE_artist_functions_challenge1_a: |-
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">350</title>
          <title name="YPOS">200</title>
          </block>
          </xml>

          此`跳到`块能随时将僵尸艺术家移动到网格上的任何像素。它的工作原理是向右下角移动一定的像素。这总是从左上角开始计算的，这意味着在命令运行_之前_，僵尸艺术家的位置无关紧要。

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      courseE_artist_functions_challenge2_2018:
        courseE_artist_functions_challenge1_a: |-
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">350</title>
          <title name="YPOS">200</title>
          </block>
          </xml>

          此`跳到`块能随时将僵尸艺术家移动到网格上的任何像素。它的工作原理是向右下角移动一定的像素。这总是从左上角开始计算的，这意味着在命令运行_之前_，僵尸艺术家的位置无关紧要。

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      courseE_artist_functions_challenge2_2019:
        courseE_artist_functions_challenge1_a: |-
          <xml>
          <block type="jump_to_xy">
          <title name="XPOS">350</title>
          <title name="YPOS">200</title>
          </block>
          </xml>

          此`跳到`块能随时将僵尸艺术家移动到网格上的任何像素。它的工作原理是向右下角移动一定的像素。这总是从左上角开始计算的，这意味着在命令运行_之前_，僵尸艺术家的位置无关紧要。

          ![](https://images.code.org/b90fdddc778a27e199221271ce91307a-image-1496450976440.png)
      courseE_artist_ramp8:
        courseE_artist_ramp8_a: 若要绘制一条边，使用`向前移动100像素`模块，并将100更改为200。
        courseE_artist_ramp8_b: 若要绘制4条边，请将`向前移动100像素`模块放在重复循环里面，并确保该循环设置为4次。然后别忘了转向！
        courseE_artist_ramp8_c: 你的循环应该有两个模块在里面：`向前移动`和`向右转90度`。
      courseE_artist_ramp8_2:
        courseE_artist_ramp8_a: 若要绘制一条边，使用`向前移动100像素`模块，并将100更改为200。
        courseE_artist_ramp8_b: 若要绘制4条边，请将`向前移动100像素`模块放在重复循环里面，并确保该循环设置为4次。然后别忘了转向！
        courseE_artist_ramp8_c: 你的循环应该有两个模块在里面：`向前移动`和`向右转90度`。
      courseE_artist_ramp9:
        courseD_artist_ramp12_a: 这和正方形有什么相似之处？ 又有什么不同？
        courseD_artist_ramp12_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseD_artist_ramp12_c: 若要绘制每条边，需要向前移动100像素，然后向右转120度。你需要几条边？
      courseE_artist_ramp9_2:
        courseD_artist_ramp12_a: 这和正方形有什么相似之处？ 又有什么不同？
        courseD_artist_ramp12_b: 您可以使用`转向`模块的下拉菜单来查看所需的角度!
        courseD_artist_ramp12_c: 若要绘制每条边，需要向前移动100像素，然后向右转120度。你需要几条边？
      courseE_bee_concept1:
        courseE_bee_concept1_b: 这里有没有_重复_的规律？
        courseE_bee_concept1_a: 如果不了解如何在此处使用嵌套循环, 请尝试在一张纸上逐步写出说明。圈出所看到的规律。
      courseE_bee_concept1_2018:
        courseE_bee_concept1_b: 这里有没有_重复_的规律？
        courseE_bee_concept1_a: 如果不了解如何在此处使用嵌套循环, 请尝试在一张纸上逐步写出说明。圈出所看到的规律。
      courseE_bee_concept2:
        courseE_bee_concept2_a: "`当`循环能帮上忙吗？"
        courseE_bee_concept2_d: 你甚至可以检查空白的位置，看看是否蜂蜜大于0个。
        courseE_bee_concept2_b: 您可以使用`当`循环移动到每条路径的末尾, 并收集每个位置中的所有蜂蜜。
        courseE_bee_concept2_c: 蜜蜂在每条小路后应该往哪个方向转？
      courseE_bee_concept2_2018:
        courseE_bee_concept2_a: "`当`循环能帮上忙吗？"
        courseE_bee_concept2_d: 你甚至可以检查空白的位置，看看是否蜂蜜大于0个。
        courseE_bee_concept2_b: 您可以使用`当`循环移动到每条路径的末尾, 并收集每个位置中的所有蜂蜜。
        courseE_bee_concept2_c: 蜜蜂在每条小路后应该往哪个方向转？
      courseE_bee_concept3:
        courseE_bee_concept3a_a: 尝试使用`重复`循环来通过此关卡。
        courseE_bee_concept3a_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
        courseE_bee_concept3a_c: 有三组花, 所以外面的 `重复`循环应该重复三次。
      courseE_bee_concept3_2018:
        courseE_bee_concept3a_a: 尝试使用 `重复` 或 `当` 循环来通过此关。
        courseE_bee_concept3a_b: 不知道在哪里放循环？尝试逐步把代码写下, 并寻找规律。
      courseE_bee_concept4:
        courseE_bee_concept4_a: 一个`如果/否则`的语句真的可以在这里帮到您。
        courseE_bee_concept4_b: 台阶模式可以帮助你穿过所有的花和蜂窝。
        courseE_bee_concept4_c: 如果你是在花那里, 你必须获得花蜜多少次？所有的花都是同样的数字吗？
      courseE_bee_concept4_2018:
        courseE_bee_concept4_a: 一个`如果/否则`的语句真的可以在这里帮到您。
        courseE_bee_concept4_b: 台阶模式可以帮助你穿过所有的花和蜂窝。
        courseE_bee_concept4_c: 如果你是在花那里, 你必须获得花蜜多少次？所有的花都是同样的数字吗？
      courseE_bee_concept5:
        courseE_bee_concept5_a: 花朵沿着方形的小路。你可以使用`当前面有路时`来跟随这条路，甚至是每条边不一样长的正方形也行。
        courseE_bee_concept5_c: |-
          这是一张蜜蜂可以走的长方形小路的图片。

          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: 哪怕已经知道那里没有花了，仍然可以使用`如果`模块在每个正方形那里找花。
      courseE_bee_concept5_2018:
        courseE_bee_concept5_a: 花朵沿着方形的小路。你可以使用`当前面有路时`来跟随这条路，甚至是每条边不一样长的正方形也行。
        courseE_bee_concept5_c: |-
          这是一张蜜蜂可以走的长方形小路的图片。

          ![](https://images.code.org/39554a528b5ed168737e846c161f00ee-image-1510202150660.33.23.png)
        courseE_bee_concept5_b: 哪怕已经知道那里没有花了，仍然可以使用`如果`模块在每个正方形那里找花。
      courseE_bee_functions1:
        courseE_bee_functions1_a: 请记住，向左和向右转都是相对于蜜蜂的视角。
        courseE_bee_functions1_b: 收集花蜜时使用`重复`循环让代码更短。
        courseE_bee_functions1_c: 请记住, 向左，向右转向都是从蜜蜂的角度来看的。
      courseE_bee_functions10:
        courseE_bee_functions10_a: 你需要一个`当`循环来收集所有的蜂蜜, 因为不同蜂窝的数量不一样。
        courseE_bee_functions10_b: 在函数中包括转向和移动, 这样当蜜蜂在主路径上时就可以调用它。
        courseE_bee_functions10_c: 记住在主程序中调用您的函数！
      courseE_bee_functions2:
        courseE_bee_functions2_a: 函数已经写好了，但你需要在每朵花那里调用它。
        courseE_bee_functions2_b: 这个<xml><block type="procedures_callnoreturn"><mutation
          name="get 2 nectar"/></block></xml>模块能调用给你的函数。
        courseE_bee_functions2_c: 你得向前移动, 得到两个花蜜两次来通过这个关卡。
      courseE_bee_functions3:
        courseE_bee_functions3_a: '在这个关卡的函数只需要收集花蜜，但不应该有任何`向前移动`或`转向`模块。 '
        courseE_bee_functions3_b: 在`当运行时`模块下调用`获得5个`函数。
        courseE_bee_functions3_c: 你的主程序将控制所有的运动, 此函数只是当蜜蜂到达一朵花时会发生什么 。
        courseE_bee_functions3_d: 请尝试使用此路径通过。
      courseE_bee_functions4:
        courseE_bee_functions4_a: 函数应该已经能沿着小路走，然后让蜜蜂返回到主干道。你不需要将该部分添加到主程序中。
        courseE_bee_functions4_b: 使用绿色的`向前移动并采花蜜`模块来调用这个函数。
        courseE_bee_functions4_c: 您不需要更改函数, 只需在程序中使用它。
      courseE_bee_functions5:
        courseE_bee_functions5_a: 编辑函数，这样可以在不更改主程序的情况下通过此关卡。
        courseE_bee_functions5_c: "`向前移动`块可以更改为`向后移动`块。使用它, 而不是在路径的末尾调头!"
        courseE_bee_functions5_b: |-
          函数应该可以让蜜蜂：

          -   转弯
          -   前进
          -   收集所有的花蜜
          -   转回到蜜蜂出发的方向
      courseE_bee_functions6:
        courseE_bee_functions6_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！\n\n
          ![](https://images.code.org/3875224b35889000a0998ca25cfa4ecf-image-1467996493914.gif)"
        courseE_bee_functions6_b: 这可能有助于在函数内移动的情况, 但不是所有的`向前移动`块都需要在那里。
      courseE_bee_functions7:
        courseE_bee_functions7_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions7_b: |-
          别忘了把你的代码创建在绿色的函数模块中。

           ![](https://images.code.org/8fe1fae5caf4ede3a9c9bd9f26940cde-image-1467996837459.gif)
        courseE_bee_functions7_c: 该函数应该让蜜蜂转到路上，收集花蜜，制作蜂蜜，然后转回头并回到原位。
      courseE_bee_functions8:
        courseE_bee_functions8_a: 函数将只收集花蜜。使用当循环而非重复循环。
        courseE_bee_functions8_b: 使用`while nectar > 0`来确保得到所有的花蜜。
        courseE_bee_functions8_c: 您的主程序将需要一个台阶移动模式。请记住, 主程序是在`当运行时`模块下的代码。
      courseE_bee_functions9:
        courseE_bee_functions9_a: 你可以使用和上一个关卡中一样的函数。不同的是，要创建一个函数，当到了每朵花那里可以收集所有的花蜜。
        courseE_bee_functions9_b: 即使你知道一些花有多少花蜜, 一个`当`循环可以使一个函数涵盖所有的花蜜。
      courseE_bee_functions_challenge1:
        courseE_bee_functions_challenge1_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions_challenge1_b: 请记住在绿色函数模块内部构建代码。
      courseE_bee_functions_challenge2:
        courseE_bee_functions_challenge1_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseE_bee_functions_challenge1_b: 请记住在绿色函数模块内部构建代码。
      courseE_farmer_concept1:
        courseE_farmer_concept1_a: 一个`当有洞时`模块将帮助填补任何洞，直到填平它。
        courseE_farmer_concept1_b: 你可以用阶梯模式到达洞。
      courseE_farmer_concept1_2018:
        courseE_farmer_concept1_a: 一个`当有洞时`模块将帮助填补任何洞，直到填平它。
        courseE_farmer_concept1_b: 你可以用阶梯模式到达洞。
      courseE_farmer_concept2:
        courseE_farmer_concept2_a: 路径都是相同的长度，但它们是分开的不同的正方形。这里不适合使用循环。试试函数。
        courseE_farmer_concept2_b: 如果有一个函数，能够转弯，沿着路径走下去，收集南瓜，然后返回到水平的主路上，它会很有帮助。
        courseE_farmer_concept2_c: 您的主程序可以调用这个函数与绿色`做一些事情`模块。
      courseE_farmer_concept2_2018:
        courseE_farmer_concept2_a: 路径都是相同的长度，但它们是分开的不同的正方形。这里不适合使用循环。试试函数。
        courseE_farmer_concept2_b: 如果有一个函数，能够转弯，沿着路径走下去，收集南瓜，然后返回到水平的主路上，它会很有帮助。
        courseE_farmer_concept2_c: 您的主程序可以调用这个函数与绿色`做一些事情`模块。
      courseE_farmer_concept3:
        grade3_robotFarmer_ConditionalsIntro_8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
        grade3_robotFarmer_ConditionalsIntro_8_b: 一旦到达路径的末尾, 你应该做什么？
        grade3_robotFarmer_ConditionalsIntro_8_c: 使用`重复`循环运行多次代码来得到每条直线路径。
      courseE_farmer_concept3_2018:
        grade3_robotFarmer_ConditionalsIntro_8_a: 即使您不知道一条路径中有多少方块，`当前面有路时`模块会让你继续前进。
        grade3_robotFarmer_ConditionalsIntro_8_b: 一旦到达路径的末尾, 你应该做什么？
        grade3_robotFarmer_ConditionalsIntro_8_c: 使用`重复`循环运行多次代码来得到每条直线路径。
      courseE_farmer_functions1:
        courseE_farmer_functions1_a: 这个工具箱这次排放有点不同！点击不同的类别，看看有哪些模块。
        courseE_farmer_functions1_b: 你只需要捡起一个南瓜, 但你是否可以用一个循环来得到它？
      courseE_farmer_functions10b:
        courseE_farmer_functions10b_a: 您得要先重新创建您的函数。
        courseE_farmer_functions10b_b: 在第一个南瓜之后, 你需要转哪边？
        courseE_farmer_functions10b_c: 回顾最后一个关卡, 来帮你制作这个函数。
      courseE_farmer_functions1_2018:
        courseE_farmer_functions1_a: 这个工具箱这次排放有点不同！点击不同的类别，看看有哪些模块。
        courseE_farmer_functions1_b: 你只需要捡起一个南瓜, 但你是否可以用一个循环来得到它？
      courseE_farmer_functions1_2019:
        courseE_farmer_functions1_a: 这个工具箱这次排放有点不同！点击不同的类别，看看有哪些模块。
        courseE_farmer_functions1_b: 你只需要捡起一个南瓜, 但你是否可以用一个循环来得到它？
      courseE_farmer_functions1a:
        courseE_farmer_functions1a_a: 一步步想清楚`如果/否则`语句。如果正站在玉米株边，应该做什么？
        courseE_farmer_functions1a_b: 使用`重复直到`模块来获得南瓜!
      courseE_farmer_functions1a_2018:
        courseE_farmer_functions1a_a: 一步步想清楚`如果/否则`语句。如果正站在玉米株边，应该做什么？
        courseE_farmer_functions1a_b: 使用`重复直到`模块来获得南瓜!
      courseE_farmer_functions1a_2019:
        courseE_farmer_functions1a_a: 一步步想清楚`如果/否则`语句。如果正站在玉米株边，应该做什么？
        courseE_farmer_functions1a_b: 使用`重复直到`模块来获得南瓜!
      courseE_farmer_functions2b:
        courseE_farmer_functions2b_a: 您可以使用`重复直到南瓜`来到达两条路径的结束。
        courseE_farmer_functions2b_b: 连接路径上没有玉米, 所以你可以只沿着它走并转向。
        courseE_farmer_functions2b_c: 你将需要两个单独的`重复直到`模块, 来获得所有的作物。
      courseE_farmer_functions2b_2018:
        courseE_farmer_functions2b_a: 您可以使用`重复直到南瓜`来到达两条路径的结束。
        courseE_farmer_functions2b_b: 连接路径上没有玉米, 所以你可以只沿着它走并转向。
        courseE_farmer_functions2b_c: 你将需要两个单独的`重复直到`模块, 来获得所有的作物。
      courseE_farmer_functions2b_2019:
        courseE_farmer_functions2b_a: 您可以使用`重复直到南瓜`来到达两条路径的结束。
        courseE_farmer_functions2b_b: 连接路径上没有玉米, 所以你可以只沿着它走并转向。
        courseE_farmer_functions2b_c: 你将需要两个单独的`重复直到`模块, 来获得所有的作物。
      courseE_farmer_functions2ba:
        courseE_farmer_functions2ba_a: 使用绿色的`玉米和南瓜`模块调用这个函数。
        courseE_farmer_functions2ba_b: 在`当运行时`下, 将工具箱中的所有模块拖到一起看此函数是如何工作的。
      courseE_farmer_functions2ba_2018:
        courseE_farmer_functions2ba_a: 使用绿色的`玉米和南瓜`模块调用这个函数。
      courseE_farmer_functions2ba_2019:
        courseE_farmer_functions2ba_a: 使用绿色的`玉米和南瓜`模块调用这个函数。
      courseE_farmer_functions3c:
        courseE_farmer_functions3c_a: 这个程序经常重复什么顺序？可以将这些模块拖到函数中吗？
        courseE_farmer_functions3c_b: 不要忘记在你删除模块的时候，在主程序中调用您的函数。
      courseE_farmer_functions3c1_2018:
        coursee_farmer_functions3c1_2018_a: 您需要使用 "沿路采摘" 函数三次来解决这个难题。
        coursee_farmer_functions3c1_2018_b: 添加什么代码才能走过拐角？
      courseE_farmer_functions3c1_2019:
        coursee_farmer_functions3c1_2018_a: 您需要使用 "沿路采摘" 函数三次来解决这个难题。
        coursee_farmer_functions3c1_2018_b: 添加什么代码才能走过拐角？
      courseE_farmer_functions4b:
        courseE_farmer_functions4b_a: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
        courseE_farmer_functions4b_b: 记住在每条路径后都要转弯。
        courseE_farmer_functions4b_c: 绿色的`玉米和南瓜`模块在工具箱的函数选项卡中。
      courseE_farmer_functions5c:
        courseE_farmer_functions5c_a: 在这个关卡里，有没有其他的模式可以循环?
        courseE_farmer_functions5c_b: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseE_farmer_functions6c:
        courseE_farmer_functions6c_a: 编辑你的函数，也能查找生菜。
        courseE_farmer_functions6c_b: "`如果/否则`模块能否帮助查找格子里是否有莴苣？"
        courseE_farmer_functions6c_c: 别忘了继续查找玉米!
      courseE_farmer_functions7a1_2018:
        courseE_farmer_functions7a1_2018_a: 在工具箱的 `函数` 章节下创建函数。
        courseE_farmer_functions7a1_2018_b: 当你完成你的函数的时候，不要忘记使用它!
      courseE_farmer_functions7a1_2019:
        courseE_farmer_functions7a1_2018_a: 在工具箱的 `函数` 章节下创建函数。
        courseE_farmer_functions7a1_2018_b: 当你完成你的函数的时候，不要忘记使用它!
      courseE_farmer_functions7b:
        courseE_farmer_functions7b_a: 你不需要一个函数，但如果有帮助，你可以做一个！
        courseE_farmer_functions7b_b: 使用`如果/否则`语句来查找农作物, 然后根据所找到的作物转向。
        courseE_farmer_functions7b_c: 一个`重复直到南瓜`循环可以帮助你通过迷宫。
      courseE_farmer_functions8a1_2018:
        courseE_farmer_functions8a1_2018a: 通过编写与上一个难题相同的函数来开始这个难题。
        courseE_farmer_functions8a1_2018b: 函数第一次运行后，您需要再转一下才能再次运行它。
      courseE_farmer_functions8a1_2019:
        courseE_farmer_functions8a1_2018a: 通过编写与上一个难题相同的函数来开始这个难题。
        courseE_farmer_functions8a1_2018b: 函数第一次运行后，您需要再转一下才能再次运行它。
      courseE_farmer_functions8b:
        courseE_farmer_functions8b_a: 尝试运行给定的代码以查看它的功能。这之后你需要什么？
        courseE_farmer_functions8b_b: 将所有起始块拖到一个函数中, 以便您可以多次使用它们。
        courseE_farmer_functions8b_c: 您需要调用多少次函数？
      courseE_farmer_functions9a1_2018:
        courseE_farmer_functions9a1_2018a: 使用你在最后几个谜题中所做的同一个函数。
        courseE_farmer_functions9a1_2018b: 使用与上一个谜题相同的步骤来解决这个谜题的前半部分。
        courseE_farmer_functions9a1_2018c: 在再次调用函数之前，您需要“转向”几次，然后“前进”到最后一茬莴苣。
      courseE_farmer_functions9a1_2019:
        courseE_farmer_functions9a1_2018a: 使用你在最后几个谜题中所做的同一个函数。
        courseE_farmer_functions9a1_2018b: 使用与上一个谜题相同的步骤来解决这个谜题的前半部分。
        courseE_farmer_functions9a1_2018c: 在再次调用函数之前，您需要“转向”几次，然后“前进”到最后一茬莴苣。
      courseE_farmer_functions9b:
        courseE_farmer_functions9b_a: 是否可以使用嵌套的`如果`和`如果/否则`语句来沿路径移动？
        courseE_farmer_functions9b_b: 使用`重复直到南瓜`来沿着所有的路径移动。
        courseE_farmer_functions9b_c: 您需要在路径中移动，这些路径就好像是在每次循环后都会变大的正方形。
      courseE_farmer_ramp11a:
        courseE_farmer_ramp12_a: '不需要`重复`循环告诉农民铲多少次土, 现在你可以使用`当有土堆时`模块。  '
        courseE_farmer_ramp12_b: 你只需要向前移动一次就能找到土。
      courseE_farmer_ramp11a_2018:
        courseE_farmer_ramp12_a: '不需要`重复`循环告诉农民铲多少次土, 现在你可以使用`当有土堆时`模块。  '
        courseE_farmer_ramp12_b: 你只需要向前移动一次就能找到土。
      courseE_farmer_ramp11a_2019:
        courseE_farmer_ramp12_a: '不需要`重复`循环告诉农民铲多少次土, 现在你可以使用`当有土堆时`模块。  '
        courseE_farmer_ramp12_b: 你只需要向前移动一次就能找到土。
      courseE_farmer_ramp11b:
        courseE_farmer_ramp11b_a: 您可以在`重复`循环内嵌套`当`循环, 来使代码更短。
      courseE_farmer_ramp11b_2018:
        courseE_farmer_ramp11b_a: 您可以在`重复`循环内嵌套`当`循环, 来使代码更短。
      courseE_farmer_ramp11b_2019:
        courseE_farmer_ramp11b_a: 您可以在`重复`循环内嵌套`当`循环, 来使代码更短。
      courseE_farmer_ramp12_forswap:
        courseE_farmer_ramp12_b: 你仍然需要在它的外面使用一个 `重复`循环告诉农夫要向前走多少次得到莴苣。
      courseE_farmer_ramp12_forswap_2018:
        courseE_farmer_ramp12_b: 你仍然需要在它的外面使用一个 `重复`循环告诉农夫要向前走多少次得到莴苣。
      courseE_farmer_ramp12_forswap_2019:
        courseE_farmer_ramp12_b: 你仍然需要在它的外面使用一个 `重复`循环告诉农夫要向前走多少次得到莴苣。
      courseE_farmer_ramp12c:
        courseE_farmer_ramp12b_b: 你仍需要先使用一个`直到` 循环，当你到了莴苣那里，然后使用一个`当`循环。
      courseE_farmer_ramp12c_2018:
        courseE_farmer_ramp12b_b: 你仍需要先使用一个`直到` 循环，当你到了莴苣那里，然后使用一个`当`循环。
      courseE_farmer_ramp12c_2019:
        courseE_farmer_ramp12b_b: 你仍需要先使用一个`直到` 循环，当你到了莴苣那里，然后使用一个`当`循环。
      courseE_farmer_ramp12d:
        courseE_farmer_ramp12d_b: 你仍然需要把你的`直到`和`当`循环放到`重复`循环中来通过这个关卡!
      courseE_farmer_ramp12d_2018:
        courseE_farmer_ramp12d_b: 你仍然需要把你的`直到`和`当`循环放到`重复`循环中来通过这个关卡!
      courseE_farmer_ramp12d_2019:
        courseE_farmer_ramp12d_b: 你仍然需要把你的`直到`和`当`循环放到`重复`循环中来通过这个关卡!
      courseE_farmer_ramp12e:
        courseE_farmer_ramp12e_b: 这个关卡的解决方案看起来很像最后一个关卡的解决方案, 除了转向了另一个方向。
      courseE_farmer_ramp12e_2018:
        courseE_farmer_ramp12e_b: 这个关卡的解决方案看起来很像最后一个关卡的解决方案, 除了转向了另一个方向。
      courseE_farmer_ramp12e_2019:
        courseE_farmer_ramp12e_b: 这个关卡的解决方案看起来很像最后一个关卡的解决方案, 除了转向了另一个方向。
      courseE_farmer_ramp12f:
        courseE_farmer_ramp12f_b: 使用`如果/否则`模块，帮助农民决定，她是要向右还是向左转。
      courseE_farmer_ramp12f_2018:
        courseE_farmer_ramp12f_b: 使用`如果/否则`模块，帮助农民决定，她是要向右还是向左转。
      courseE_farmer_ramp12f_2019:
        courseE_farmer_ramp12f_b: 使用`如果/否则`模块，帮助农民决定，她是要向右还是向左转。
      courseE_farmer_ramp12g:
        courseE_farmer_ramp12G_b: 使用`如果/否则`模块，帮助农民决定，她是要向右还是向左转。
      courseE_farmer_ramp12g_2018:
        courseE_farmer_ramp12G_b: 使用`如果/否则`模块，帮助农民决定，她是要向右还是向左转。
      courseE_farmer_ramp12g_2019:
        courseE_farmer_ramp12G_b: 使用`如果/否则`模块，帮助农民决定，她是要向右还是向左转。
      courseE_playLab_challenge1:
        courseE_playLab_challenge1_a: |-
          当玩家赢得比赛时, 你可以做一些事情：

          -   让恐龙消失。
          -   阻止松鼠
          -   让松鼠和骑士开心
          -   设置新的背景。
          -   让骑士感谢玩家的帮助。
          -   让所有的演员消失, 并显示一个 "你赢了！"的信息
        courseE_playLab_challenge1_b: |-
          当玩家输掉游戏时, 你可以做一些事情：

          -   让骑士消失。
          -   让松鼠伤心
          -   让恐龙说点什么
          -   设置新的背景。\*
              让所有的演员消失, 并显示一个"游戏结束"的消息。
      courseE_playLab_scaffold1:
        courseE_playLab_scaffold1_a: "`设置演员1为？？？图像`块可用于将演员添加到舞台。"
        courseE_playLab_scaffold1_b: 将`设置演员`模块置于`当运行时`下, 使您的演员出现在程序的开头。
        courseE_playLab_scaffold1_c: 使用`设置？？？背景`为您的场景选择背景。
      courseE_playLab_scaffold2:
        courseE_playLab_scaffold1_a: 打开`当按____方向键时` 事件的下拉菜单来更改模块控制的方向。
        courseE_playLab_scaffold1_b: 您应该有四个`当按下方向键`事件模块，它们在每个之下朝着一个方向向前移动。
        courseE_playLab_scaffold1_c: 当你完成后，你应该能够用方向键来移动你的英雄!
      courseE_playLab_scaffold4:
        courseE_playLab_scaffold4_a: 使用`得分`添加一分, 并用`扣分`减去一分。
      courseE_playLab_scaffold5:
        courseE_playLab_scaffold5_a: 要完成这个关卡, 你需要赢或输。使用`胜利结束游戏`或`失败结束游戏`模块完成。
      courseF_artist_for1:
        courseF_artist_for1_a: |-
          你能画出这样的东西吗？

          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for10:
        courseF_artist_for10_a: 这里的图片是通过一个`set alpha`（设置透明度）和`counter`/10的counter（计数器）来作为画笔尺寸来制作的。
        courseF_artist_for10_b: 绘图中的图片使用61度转弯。
        courseF_artist_for10_c: |-
          想知道示例图片是如何做出来的？

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for10_2018:
        courseF_artist_for10_a: 这里的图片是通过一个`set alpha`（设置透明度）和`counter`/10的counter（计数器）来作为画笔尺寸来制作的。
        courseF_artist_for10_b: 绘图中的图片使用61度转弯。
        courseF_artist_for10_c: |-
          想知道示例图片是如何做出来的？

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for10_2019:
        courseF_artist_for10_a: 这里的图片是通过一个`set alpha`（设置透明度）和`counter`/10的counter（计数器）来作为画笔尺寸来制作的。
        courseF_artist_for10_b: 绘图中的图片使用61度转弯。
        courseF_artist_for10_c: |-
          想知道示例图片是如何做出来的？

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#ff0000</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">15</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">175</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">61</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for1_2018:
        courseF_artist_for1_a: |-
          你能画出这样的东西吗？

          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for1_2019:
        courseF_artist_for1_a: |-
          你能画出这样的东西吗？

          ![](https://images.code.org/80ae9ab3e449db1ed4e13c86239f7617-image-1475906794954.06.12.png)
      courseF_artist_for2:
        courseF_artist_for2_a: |-
          在`重复`循环中为三角形的长度使用`counter`变量。

          <xml><block type="draw_move" inline="true">

          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for2_b: 记得在你的计数循环以10记数。
        courseF_artist_for2_c: |-
          这是艺术家将遵循的模式:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for2_2018:
        courseF_artist_for2_a: |-
          在`重复`循环中为三角形的长度使用`counter`变量。

          <xml><block type="draw_move" inline="true">

          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for2_b: 记得在你的计数循环以10记数。
        courseF_artist_for2_c: |-
          这是艺术家将遵循的模式:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for2_2019:
        courseF_artist_for2_a: |-
          在`重复`循环中为三角形的长度使用`counter`变量。

          <xml><block type="draw_move" inline="true">

          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for2_b: 记得在你的计数循环以10记数。
        courseF_artist_for2_c: |-
          这是艺术家将遵循的模式:

          ![](<https://images.code.org/a2569b7732cf02a12263607c9e355d19-image-1503676269436.3_hint 2.gif>)
      courseF_artist_for3:
        courseF_artist_for3_a: |-
          要让`计数循环`来引导移动，请确保在`向前移动`模块中使用`counter` 来作为距离。

          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_artist_for3_2018:
        courseF_artist_for3_a: |-
          要让`计数循环`来引导移动，请确保在`向前移动`模块中使用`counter` 来作为距离。

          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_artist_for3_2019:
        courseF_artist_for3_a: |-
          要让`计数循环`来引导移动，请确保在`向前移动`模块中使用`counter` 来作为距离。

          <xml>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </xml>
        courseF_artist_for3_b: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_artist_for4:
        courseF_artist_for4_a: "**你需要的数字最小是多少？ \n最大是多少？ \n那每次增加多少？**\n\n这些都是你在使用计数循环之前需要思考的问题。"
        courseF_artist_for4_b: 您的代码将非常类似于您在上一个关卡中所写的内容, 但请记住这次要画一个正方形!
        courseF_artist_for4_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_artist_for4_2018:
        courseF_artist_for4_a: "**你需要的数字最小是多少？ \n最大是多少？ \n那每次增加多少？**\n\n这些都是你在使用计数循环之前需要思考的问题。"
        courseF_artist_for4_b: 您的代码将非常类似于您在上一个关卡中所写的内容, 但请记住这次要画一个正方形!
        courseF_artist_for4_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_artist_for4_2019:
        courseF_artist_for4_a: "**你需要的数字最小是多少？ \n最大是多少？ \n那每次增加多少？**\n\n这些都是你在使用计数循环之前需要思考的问题。"
        courseF_artist_for4_b: 您的代码将非常类似于您在上一个关卡中所写的内容, 但请记住这次要画一个正方形!
        courseF_artist_for4_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_artist_for5:
        courseF_artist_for5_a: 在制作此螺旋的时候，不需要在里面使用`重复`循环。
        courseF_artist_for5_b: '"计数循环" 循环、移动和转向模块可以保持完全相同。'
      courseF_artist_for5_2018:
        courseF_artist_for5_a: 在制作此螺旋的时候，不需要在里面使用`重复`循环。
        courseF_artist_for5_b: '"计数循环" 循环、移动和转向模块可以保持完全相同。'
      courseF_artist_for5_2019:
        courseF_artist_for5_a: 在制作此螺旋的时候，不需要在里面使用`重复`循环。
        courseF_artist_for5_b: '"计数循环" 循环、移动和转向模块可以保持完全相同。'
      courseF_artist_for6:
        courseF_artist_for6_a: 计数循环将从15数到 300，每次增加15。
        courseF_artist_for6_b: 在这个计数循环中放一个 "前进" 和 "转向" 模块。
        courseF_artist_for6_c: 你所要改变的就是 "转弯" 块中的度数。
      courseF_artist_for6_2018:
        courseF_artist_for6_a: 计数循环将从15数到 300，每次增加15。
        courseF_artist_for6_b: 在这个计数循环中放一个 "前进" 和 "转向" 模块。
        courseF_artist_for6_c: 你所要改变的就是 "转弯" 块中的度数。
      courseF_artist_for6_2019:
        courseF_artist_for6_a: 计数循环将从15数到 300，每次增加15。
        courseF_artist_for6_b: 在这个计数循环中放一个 "前进" 和 "转向" 模块。
        courseF_artist_for6_c: 你所要改变的就是 "转弯" 块中的度数。
      courseF_artist_for7:
        courseF_artist_for7_a: 这个关卡里的钢笔更细。在开始之前，需要将其设置为`1`。
        courseF_artist_for7_b: 请注意这个螺旋是向右转而非向左！
        courseF_artist_for7_c: 这个关卡中的计数循环是从15到300，每次增加2。
        courseF_artist_for7_d: 这张图片是只转89度形成的。
      courseF_artist_for7_2018:
        courseF_artist_for7_a: 这个关卡里的钢笔更细。在开始之前，需要将其设置为`1`。
        courseF_artist_for7_b: 请注意这个螺旋是向右转而非向左！
        courseF_artist_for7_c: 这个关卡中的计数循环是从15到300，每次增加2。
        courseF_artist_for7_d: 这张图片是只转89度形成的。
      courseF_artist_for7_2019:
        courseF_artist_for7_a: 这个关卡里的钢笔更细。在开始之前，需要将其设置为`1`。
        courseF_artist_for7_b: 请注意这个螺旋是向右转而非向左！
        courseF_artist_for7_c: 这个关卡中的计数循环是从15到300，每次增加2。
        courseF_artist_for7_d: 这张图片是只转89度形成的。
      courseF_artist_for8:
        courseF_artist_for8_a: 在代码中保留其他所有内容, 只有转角需要改变。
        courseF_artist_for8_b: 如果你想, 你可以为您的螺旋选择一个不同的颜色!
      courseF_artist_for8_2018:
        courseF_artist_for8_a: 在代码中保留其他所有内容, 只有转角需要改变。
        courseF_artist_for8_b: 如果你想, 你可以为您的螺旋选择一个不同的颜色!
      courseF_artist_for8_2019:
        courseF_artist_for8_a: 在代码中保留其他所有内容, 只有转角需要改变。
        courseF_artist_for8_b: 如果你想, 你可以为您的螺旋选择一个不同的颜色!
      courseF_artist_for9:
        courseF_artist_for9_a: 如果将`set alpha`（设置透明度）模块放在计数循环中, 并使用 "计数器" 变量来更改它, 你就可以创建像这样的设计。
        courseF_artist_for9_b: "`set alpha`（设置透明度）模块更改颜色的透明度。数值越小，颜色越透明。"
      courseF_artist_for9_2018:
        courseF_artist_for9_a: 如果将`set alpha`（设置透明度）模块放在计数循环中, 并使用 "计数器" 变量来更改它, 你就可以创建像这样的设计。
        courseF_artist_for9_b: "`set alpha`（设置透明度）模块更改颜色的透明度。数值越小，颜色越透明。"
      courseF_artist_for9_2019:
        courseF_artist_for9_a: 如果将`set alpha`（设置透明度）模块放在计数循环中, 并使用 "计数器" 变量来更改它, 你就可以创建像这样的设计。
        courseF_artist_for9_b: "`set alpha`（设置透明度）模块更改颜色的透明度。数值越小，颜色越透明。"
      courseF_artist_for_challenge1:
        courseF_artist_for_challenge1_a: "·笔宽度·是1。第一个正方形有50像素边, 每个正方形比前一个宽50像素。"
        courseF_artist_for_challenge1_b: 画笔上的不透明度始终是 `counter`/2 （计数器/2）。
        courseF_artist_for_challenge1_c: 在你画了每个正方形后, 别忘了向后跳, 转身, 再跳, 然后回头!
        courseF_artist_for_challenge1_d: |-
          \*\* 解决方案: \*\*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_picker">
          <title name="COLOUR">#0000cd</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">350</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">50</title>
          </block>
          </value>
          <statement name="DO">
          <block type="alpha" inline="true" id="alpha">
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">DIVIDE</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="jump" inline="true">
          <title name="DIR">jumpBackward</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">25</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnLeft</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge1_2018:
        courseF_artist_for_challenge1_a: "·笔宽度·是1。第一个正方形有50像素边, 每个正方形比前一个宽50像素。"
        courseF_artist_for_challenge1_b: 画笔上的不透明度始终是 `counter`/2 （计数器/2）。
        courseF_artist_for_challenge1_c: 在你画了每个正方形后, 别忘了向后跳, 转身, 再跳, 然后回头!
        courseF_artist_for_challenge1_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge1_2019:
        courseF_artist_for_challenge1_a: "·笔宽度·是1。第一个正方形有50像素边, 每个正方形比前一个宽50像素。"
        courseF_artist_for_challenge1_b: 画笔上的不透明度始终是 `counter`/2 （计数器/2）。
        courseF_artist_for_challenge1_c: 在你画了每个正方形后, 别忘了向后跳, 转身, 再跳, 然后回头!
        courseF_artist_for_challenge1_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge2:
        courseF_artist_for_challenge2_c: "`计数循环` 从5增加到250，每次增加2。 "
        courseF_artist_for_challenge2_a: 使用`用红色，绿色和蓝色设置颜色`的模块。红色设为常量255，绿色一直是`counter`（计数器）的值，蓝色一直是`255-counter`。
        courseF_artist_for_challenge2_b: 这个代码比你想象的要简单。 只需在计数循环中设置颜色, 向前移动, 然后转向。
        courseF_artist_for_challenge2_d: |-
          **解决方案:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">减去</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge2_2018:
        courseF_artist_for_challenge2_c: "`计数循环` 从5增加到250，每次增加2。 "
        courseF_artist_for_challenge2_a: 使用`用红色，绿色和蓝色设置颜色`的模块。红色设为常量255，绿色一直是`counter`（计数器）的值，蓝色一直是`255-counter`。
        courseF_artist_for_challenge2_b: 这个代码比你想象的要简单。 只需在计数循环中设置颜色, 向前移动, 然后转向。
        courseF_artist_for_challenge2_d: |-
          \*\* 解决方案: \*\*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">MINUS</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">moveForward</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">turnRight</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_for_challenge2_2019:
        courseF_artist_for_challenge2_c: "`计数循环` 从5增加到250，每次增加2。 "
        courseF_artist_for_challenge2_a: 使用`用红色，绿色和蓝色设置颜色`的模块。红色设为常量255，绿色一直是`counter`（计数器）的值，蓝色一直是`255-counter`。
        courseF_artist_for_challenge2_b: 这个代码比你想象的要简单。 只需在计数循环中设置颜色, 向前移动, 然后转向。
        courseF_artist_for_challenge2_d: |-
          **解决方案:**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="draw_width" inline="false">
          <value name="WIDTH">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <next>
          <block type="controls_for_counter" inline="true">
          <mutation counter="counter"></mutation>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">250</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_colour" inline="true" id="draw-color">
          <value name="COLOUR">
          <block type="colour_rgb" inline="false">
          <value name="RED">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="GREEN">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <value name="BLUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">减去</title>
          <value name="A">
          <block type="math_number">
          <title name="NUM">255</title>
          </block>
          </value>
          <value name="B">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">80</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_fwp1:
        courseF_artist_fwp1_c: 将所有画正方形的代码放在函数编辑器内。
        courseF_artist_fwp1_a: 请记住，你需要转90度才能画一个正方形。
        courseF_artist_fwp1_b: 你只需要重复和正方形的边数一样多的次数。
      courseF_artist_fwp2:
        courseF_artist_fwp2_a: 你需要单击"编辑"按钮才能进入该函数。一旦进去了, 添加一个叫`长度`的参数, 并在`向前移动`模块内使用它!
        courseF_artist_fwp2_b: 调用函数时, 请使用`计数循环`来实现最佳代码！
      courseF_artist_fwp3:
        courseF_artist_fwp3_a: 如果你把它都放在一个`计数循环`循环内会变得更容易些。
        courseF_artist_fwp3_b: |-
          一定要在每个正方形之间转90 度！

          ![](https://images.code.org/97bd8eded03c5aa39740876c8e9f7ff8-image-1469224745277.gif)
      courseF_artist_fwp4:
        courseF_artist_fwp4_b: 记住**添加** 一个参数。不要删除已经在那里的那个！
        courseF_artist_fwp4_c: 您将需要调用您的函数三次来绘制这形状。
      courseF_artist_fwp5:
        courseF_artist_fwp5_d: 一个计数循环将在这里真正帮助到你!
        courseF_artist_fwp5_c: 您将需要稍稍编辑这个函数, 因为你以前的函数是让艺术家在每条边后向右转，而这张图片需要向左转。
        courseF_artist_fwp5_a: 每个形状的边长是它边数的7倍。
        courseF_artist_fwp5_b: 不要忘记在图形之间跳跃100个像素。
      courseF_artist_fwp6:
        courseF_artist_fwp6_a: 可以运行该程序几次以找出使用不同的参数函数如何工作。
        courseF_artist_fwp6_b: 不需要添加任何`向前移动`或`转向`模块来完成此代码。
      courseF_artist_fwp7:
        courseF_artist_fwp7_a: 尝试几个想法后感到没有头绪？尝试单击右上角的 "重新开始" 按钮。
        courseF_artist_fwp7_b: 新的`min`（最小值）变量应该在函数内的`计数循环`的第一个位置上。
      courseF_artist_fwp8:
        courseF_artist_fwp8_a: 如果函数是正确的, 则不需要为这个关卡去更改它。
        courseF_artist_fwp8_b: 在函数调用之间, 唯一需要做的是更改线条的颜色。
      courseF_artist_fwp9:
        courseF_artist_fwp9_a: |-
          尝试这些绘图之一。

          ![](<https://images.code.org/eae6d52956c2bc06b90db3693037df36-image-1493739069435.9.13 hints.png>)
      courseF_artist_fwp_challenge1:
        courseF_artist_fwp_challenge1_b: 这是一系列的八角形, 边长是计数器个像素。
        courseF_artist_fwp_challenge1_c: 每个多边形是从内部的一个计数循环调用的, 从3到6，每次增加1。他会画出什么形状？
      courseF_artist_fwp_challenge2:
        courseF_artist_fwp_challenge1_a: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
        courseF_artist_fwp_challenge1_b: '这是一系列的八角形, 两侧是`counter`（计数器）像素长。 '
        courseF_artist_fwp_challenge1_c: '每个八角形是从里面的一个`计数循环`, 从200到2，每次递减 2。 '
        courseF_artist_fwp_challenge1_d: '在每次迭代结束时, 不要忘记转22.5 度的角度。 '
        courseF_artist_fwp_challenge1_e: 每个八角形的颜色和钢笔的宽度都由 "计数器" 变量控制。
        courseF_artist_fwp_challenge1_f: |-
          **解答:**

          ![Solution Blocks](https://images.code.org/a82cfea836b95ce6625b08afcc3b7b37-image-1469727289590.png)
      courseF_artist_variables10:
        courseF_artist_variables10_a: 祝你在这个关卡玩得开心! 查看对代码可以做什么小更改。
        courseF_artist_variables10_b: 您可以多次尝试, 并多次运行您的代码。
      courseF_artist_variables10_2018:
        courseF_artist_variables10_a: 祝你在这个关卡玩得开心! 查看对代码可以做什么小更改。
        courseF_artist_variables10_b: 您可以多次尝试, 并多次运行您的代码。
      courseF_artist_variables10_2019:
        courseF_artist_variables10_a: 祝你在这个关卡玩得开心! 查看对代码可以做什么小更改。
        courseF_artist_variables10_b: 您可以多次尝试, 并多次运行您的代码。
      courseF_artist_variables2:
        courseF_artist_variables2_a: 记住在绘制每个三角形后向前移动。
        courseF_artist_variables2_b: 新的循环将包含三角形的循环, 然后是 "向前移动" 命令。
      courseF_artist_variables2_2018:
        courseF_artist_variables2_a: 记住在绘制每个三角形后向前移动。
        courseF_artist_variables2_b: 新的循环将包含三角形的循环, 然后是 "向前移动" 命令。
      courseF_artist_variables2_2019:
        courseF_artist_variables2_a: 记住在绘制每个三角形后向前移动。
        courseF_artist_variables2_b: 新的循环将包含三角形的循环, 然后是 "向前移动" 命令。
      courseF_artist_variables3:
        courseF_artist_variables3_a: '变量 "长度" 将在代码中的两个位置使用: 在三角形的边长中, 以及在三角形之间向前移动的量。'
        courseF_artist_variables3_b: '值为50的数字块只应位于一个位置: 在 "设置可变长度" 块之后。'
      courseF_artist_variables3_2018:
        courseF_artist_variables3_a: '变量 "长度" 将在代码中的两个位置使用: 在三角形的边长中, 以及在三角形之间向前移动的量。'
        courseF_artist_variables3_b: '值为50的数字块只应位于一个位置: 在 "设置可变长度" 块之后。'
      courseF_artist_variables3_2019:
        courseF_artist_variables3_a: '变量 "长度" 将在代码中的两个位置使用: 在三角形的边长中, 以及在三角形之间向前移动的量。'
        courseF_artist_variables3_b: '值为50的数字块只应位于一个位置: 在 "设置可变长度" 块之后。'
      courseF_artist_variables4:
        courseF_artist_variables4_a: 你的代码不会和上一关有太大的不同，除了你需要让艺术家转弯往下跳，然后把他转回来准备再次往前跳。
        courseF_artist_variables4_c: |-
          这是你的艺术家将遵循的模式:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: "![](https://images.code.org/52f474adbbc3bdd87aaae407c9ebf588-image-1515690462464.png)"
      courseF_artist_variables4_2018:
        courseF_artist_variables4_a: 你的代码不会和上一关有太大的不同，除了你需要让艺术家转弯往下跳，然后把他转回来准备再次往前跳。
        courseF_artist_variables4_c: |-
          这是你的艺术家将遵循的模式:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: |-
          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">50</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="controls_repeat_ext">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="draw_move">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">120</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="jump">
                              <title name="DIR">jumpForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">90</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="jump">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables4_2019:
        courseF_artist_variables4_a: 你的代码不会和上一关有太大的不同，除了你需要让艺术家转弯往下跳，然后把他转回来准备再次往前跳。
        courseF_artist_variables4_c: |-
          这是你的艺术家将遵循的模式:

          ![](https://images.code.org/41ae98c1633755cf4553f90a80e125cf-image-1500325529204.6_hint.gif)
        courseF_artist_variables4_b: |-
          <xml>
            <block type="when_run" deletable="false" movable="false">
              <next>
                <block type="variables_set">
                  <title name="VAR">length</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">50</title>
                    </block>
                  </value>
                  <next>
                    <block type="controls_repeat_ext">
                      <value name="TIMES">
                        <block type="math_number">
                          <title name="NUM">3</title>
                        </block>
                      </value>
                      <statement name="DO">
                        <block type="controls_repeat_ext">
                          <value name="TIMES">
                            <block type="math_number">
                              <title name="NUM">3</title>
                            </block>
                          </value>
                          <statement name="DO">
                            <block type="draw_move">
                              <title name="DIR">moveForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnLeft</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">120</title>
                                    </block>
                                  </value>
                                </block>
                              </next>
                            </block>
                          </statement>
                          <next>
                            <block type="jump">
                              <title name="DIR">jumpForward</title>
                              <value name="VALUE">
                                <block type="variables_get">
                                  <title name="VAR">length</title>
                                </block>
                              </value>
                              <next>
                                <block type="draw_turn">
                                  <title name="DIR">turnRight</title>
                                  <value name="VALUE">
                                    <block type="math_number">
                                      <title name="NUM">90</title>
                                    </block>
                                  </value>
                                  <next>
                                    <block type="jump">
                                      <title name="DIR">jumpForward</title>
                                      <value name="VALUE">
                                        <block type="variables_get">
                                          <title name="VAR">length</title>
                                        </block>
                                      </value>
                                      <next>
                                        <block type="draw_turn">
                                          <title name="DIR">turnLeft</title>
                                          <value name="VALUE">
                                            <block type="math_number">
                                              <title name="NUM">90</title>
                                            </block>
                                          </value>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </statement>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </xml>
      courseF_artist_variables5:
        courseF_artist_variables5_a: 你的代码的后半部分应该看起来和上半部差不多, 除了你会向_左_转，跳跃, 然后向_右_转。
        courseF_artist_variables5_b: 代码的前半部分将绘制三个三角形, 而第二部分将绘制其他的三个三角形。
        courseF_artist_variables5_c: 首先复制程序的前半部分代码, 然后修改它以使设计能够正确显示。
        courseF_artist_variables5_d: |-
          这是你的艺术家将遵循的模式:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2018:
        courseF_artist_variables5_a: 你的代码的后半部分应该看起来和上半部差不多, 除了你会向_左_转，跳跃, 然后向_右_转。
        courseF_artist_variables5_b: 代码的前半部分将绘制三个三角形, 而第二部分将绘制其他的三个三角形。
        courseF_artist_variables5_c: 首先复制程序的前半部分代码, 然后修改它以使设计能够正确显示。
        courseF_artist_variables5_d: |-
          这是你的艺术家将遵循的模式:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables5_2019:
        courseF_artist_variables5_a: 你的代码的后半部分应该看起来和上半部差不多, 除了你会向_左_转，跳跃, 然后向_右_转。
        courseF_artist_variables5_b: 代码的前半部分将绘制三个三角形, 而第二部分将绘制其他的三个三角形。
        courseF_artist_variables5_c: 首先复制程序的前半部分代码, 然后修改它以使设计能够正确显示。
        courseF_artist_variables5_d: |-
          这是你的艺术家将遵循的模式:

          ![](https://images.code.org/e4ac66f8e9a4503e49c4fad1e4fafc1d-image-1500326800109.7_hint.gif)
      courseF_artist_variables6:
        courseF_artist_variables6_a: 由于使用了变量，只需在顶部更改一个数字即可让它工作。
        courseF_artist_variables6_b: 您需要编辑值为50的数字模块, 但代码中的其他任何东西都不需要修改。
      courseF_artist_variables6_2018:
        courseF_artist_variables6_a: 由于使用了变量，只需在顶部更改一个数字即可让它工作。
        courseF_artist_variables6_b: 您需要编辑值为50的数字模块, 但代码中的其他任何东西都不需要修改。
      courseF_artist_variables6_2019:
        courseF_artist_variables6_a: 由于使用了变量，只需在顶部更改一个数字即可让它工作。
        courseF_artist_variables6_b: 您需要编辑值为50的数字模块, 但代码中的其他任何东西都不需要修改。
      courseF_artist_variables6a:
        courseF_artist_variables6a_a: 记住使用变量`length`（长度）而不是实际数字来解决这个关卡。
        courseF_artist_variables6a_b: 此代码将非常类似于您的三角形代码, 只是形状不同!
        courseF_artist_variables6a_c: 先写一个正方形的代码, 然后添加代码在正方形之间移动。最后, 添加一个循环包含所有内容!
        courseF_artist_variables6a_d: "这就是你要遵循的模式! \n\n![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)"
      courseF_artist_variables6a_2018:
        courseF_artist_variables6a_a: 记住使用变量`length`（长度）而不是实际数字来解决这个关卡。
        courseF_artist_variables6a_b: 此代码将非常类似于您的三角形代码, 只是形状不同!
        courseF_artist_variables6a_c: 先写一个正方形的代码, 然后添加代码在正方形之间移动。最后, 添加一个循环包含所有内容!
        courseF_artist_variables6a_d: "这就是你要遵循的模式! \n\n![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)"
      courseF_artist_variables6a_2019:
        courseF_artist_variables6a_a: 记住使用变量`length`（长度）而不是实际数字来解决这个关卡。
        courseF_artist_variables6a_b: 此代码将非常类似于您的三角形代码, 只是形状不同!
        courseF_artist_variables6a_c: 先写一个正方形的代码, 然后添加代码在正方形之间移动。最后, 添加一个循环包含所有内容!
        courseF_artist_variables6a_d: "这就是你要遵循的模式! \n\n![](https://images.code.org/7fd21023b1498742d1a83ad4132d276e-image-1500328404912.9_hint.gif)"
      courseF_artist_variables7:
        courseF_artist_variables7_a: 使用 "设置长度" 块启动代码。将长度变量设置为150。
        courseF_artist_variables7_b: 您可以使用 "重复" 循环使您画三角形的代码更简单。
        courseF_artist_variables7_c: 你要左转120度来做三角形的角。
      courseF_artist_variables7_2018:
        courseF_artist_variables7_a: 使用 "设置长度" 块启动代码。将长度变量设置为150。
        courseF_artist_variables7_b: 您可以使用 "重复" 循环使您画三角形的代码更简单。
        courseF_artist_variables7_c: 你要左转120度来做三角形的角。
      courseF_artist_variables7_2019:
        courseF_artist_variables7_a: 使用 "设置长度" 块启动代码。将长度变量设置为150。
        courseF_artist_variables7_b: 您可以使用 "重复" 循环使您画三角形的代码更简单。
        courseF_artist_variables7_c: 你要左转120度来做三角形的角。
      courseF_artist_variables8:
        courseF_artist_variables8_b: 请记住，开始用`set length`（设置长度）模块来创在三角形，并以150像素开始。
        courseF_artist_variables8_c: 请确保使用 "重复" 循环来绘制三角形。
        courseF_artist_variables8_a: |-
          尝试将一组

          <xml>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </xml>

          模块放到循环的最后。
      courseF_artist_variables8_2018:
        courseF_artist_variables8_b: 请记住，开始用`set length`（设置长度）模块来创在三角形，并以150像素开始。
        courseF_artist_variables8_c: 请确保使用 "重复" 循环来绘制三角形。
        courseF_artist_variables8_a: |-
          尝试将一组

          <xml>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </xml>

          模块放到循环的最后。
      courseF_artist_variables8_2019:
        courseF_artist_variables8_b: 请记住，开始用`set length`（设置长度）模块来创在三角形，并以150像素开始。
        courseF_artist_variables8_c: 请确保使用 "重复" 循环来绘制三角形。
        courseF_artist_variables8_a: |-
          尝试将一组

          <xml>
          <block type="variables_set" inline="false">
          <title name="VAR">length</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">ADD</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          </block>
          </xml>

          模块放到循环的最后。
      courseF_artist_variables9:
        courseF_artist_variables9_a: 对于这个关卡, 你所需要做的就是改变循环重复的次数。
        courseF_artist_variables9_b: 确保在您的循环中增加"长度", 以便线路变长。
      courseF_artist_variables9_2018:
        courseF_artist_variables9_a: 对于这个关卡, 你所需要做的就是改变循环重复的次数。
        courseF_artist_variables9_b: 确保在您的循环中增加"长度", 以便线路变长。
      courseF_artist_variables9_2019:
        courseF_artist_variables9_a: 对于这个关卡, 你所需要做的就是改变循环重复的次数。
        courseF_artist_variables9_b: 确保在您的循环中增加"长度", 以便线路变长。
      courseF_artist_variablesFP:
        courseF_artist_variablesFP_a: |-
          尝试这三幅画之一。
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variablesFP_2018:
        courseF_artist_variablesFP_a: |-
          尝试这三幅画之一。
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variablesFP_2019:
        courseF_artist_variablesFP_a: |-
          尝试这三幅画之一。
          ![](<https://images.code.org/f0bac32182162bd26a8031f5aa4364ef-image-1493738360437.3.15 hints.png>)
      courseF_artist_variables_challenge1:
        courseF_artist_variables_challenge1_a: 每条竖线的长度都是 "10"。每条水平线的长度应为 "长度"。
        courseF_artist_variables_challenge1_b: 您将希望把 "长度" 的值在循环中增加10 **两次**。
        courseF_artist_variables_challenge1_c: 要完成该模式, 您将需要向左两次, 右转两次, 并向前移动共四次。
        courseF_artist_variables_challenge1_d: |-
          这个谜题只用一个循环。没有变量的话，类似的路径可能只是一个锯齿形。

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          如果您遇到麻烦, 请从创建此映像开始, 然后尝试查看可以使用变量更改水平线的长度。
        courseF_artist_variables_challenge1_e: |-
          这里是解决方案。

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge1_2018:
        courseF_artist_variables_challenge1_a: 每条竖线的长度都是 "10"。每条水平线的长度应为 "长度"。
        courseF_artist_variables_challenge1_b: 您将希望把 "长度" 的值在循环中增加10 **两次**。
        courseF_artist_variables_challenge1_c: 要完成该模式, 您将需要向左两次, 右转两次, 并向前移动共四次。
        courseF_artist_variables_challenge1_d: |-
          这个谜题只用一个循环。没有变量的话，类似的路径可能只是一个锯齿形。

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          如果您遇到麻烦, 请从创建此映像开始, 然后尝试查看可以使用变量更改水平线的长度。
        courseF_artist_variables_challenge1_e: |-
          这里是解决方案。

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge1_2019:
        courseF_artist_variables_challenge1_a: 每条竖线的长度都是 "10"。每条水平线的长度应为 "长度"。
        courseF_artist_variables_challenge1_b: 您将希望把 "长度" 的值在循环中增加10 **两次**。
        courseF_artist_variables_challenge1_c: 要完成该模式, 您将需要向左两次, 右转两次, 并向前移动共四次。
        courseF_artist_variables_challenge1_d: |-
          这个谜题只用一个循环。没有变量的话，类似的路径可能只是一个锯齿形。

          ![](<https://images.code.org/664fdd219502d004fb07886f834fa3d5-image-1496868743379.51.36 PM.png>)

          如果您遇到麻烦, 请从创建此映像开始, 然后尝试查看可以使用变量更改水平线的长度。
        courseF_artist_variables_challenge1_e: |-
          这里是解决方案。

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">18</title>
          </block>
          </value>
          <statement name="DO">
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向左转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          <next>
          <block type="draw_move" inline="true">
          <title name="DIR">向前移动</title>
          <value name="VALUE">
          <block type="variables_get">
          <title name="VAR">length</title>
          </block>
          </value>
          <next>
          <block type="variables_set" inline="false">
          <title name="VAR">长度</title>
          <value name="VALUE">
          <block type="math_arithmetic" inline="true">
          <title name="OP">增加</title>
          <value name="A">
          <block type="variables_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="B">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          </block>
          </value>
          <next>
          <block type="draw_turn" inline="true">
          <title name="DIR">向右转</title>
          <value name="VALUE">
          <block type="math_number">
          <title name="NUM">90</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_artist_variables_challenge2:
        courseF_artist_variables_challenge2_a: '变量是有帮助的, 因为您可以通过循环每次增加它们。 '
        courseF_artist_variables_challenge2_c: 使用`sides`和`length`的变量使代码更干净, 因为您可以多次循环相同的代码,
          而不是为每组数字创建一个新的副本。
        courseF_artist_variables_challenge2_d: |-
          \*\* 解决方案: \*\*

          ![\[Solution\]](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_artist_variables_challenge2_2018:
        courseF_artist_variables_challenge2_a: '变量是有帮助的, 因为您可以通过循环每次增加它们。 '
        courseF_artist_variables_challenge2_c: 使用`sides`和`length`的变量使代码更干净, 因为您可以多次循环相同的代码,
          而不是为每组数字创建一个新的副本。
        courseF_artist_variables_challenge2_d: |-
          \*\* 解决方案: \*\*

          ![\[Solution\]](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_artist_variables_challenge2_2019:
        courseF_artist_variables_challenge2_a: '变量是有帮助的, 因为您可以通过循环每次增加它们。 '
        courseF_artist_variables_challenge2_c: 使用`sides`和`length`的变量使代码更干净, 因为您可以多次循环相同的代码,
          而不是为每组数字创建一个新的副本。
        courseF_artist_variables_challenge2_d: |-
          \*\* 解决方案: \*\*

          ![\[Solution\]](https://images.code.org/311b4a946cb8f3b4144b5075be6460a3-image-1469641878222.png)
      courseF_bee_conditionals10:
        courseF_bee_conditionals10_a: 想象每一个地方都有云。这是否有助于简化您的代码？
        courseF_bee_conditionals10_b: 使用 "如果/否则" 模块查找每个空间的花蜜或蜂蜜。
        courseF_bee_conditionals10_c: "`当`循环是否可以帮助到达此路径的末尾？"
      courseF_bee_conditionals2:
        courseF_bee_conditionals2_a: 有时那里有花，有时不会。如果您希望在两种情况下都能运行代码，请确保使用`如果`语句。
        courseF_bee_conditionals2_b: 尝试编写序列以获取所有空格, 然后添加 "如果" 声明。
      courseF_bee_conditionals3:
        courseF_bee_conditionals3_a: 一定要使用`如果`语句来检查每个空间，看看是否有花。
        courseF_bee_conditionals3_b: 一个 ' 重复 ' 循环将是有用的, 所以你只需要使用一个 ' 如果 ' 块。
        courseF_bee_conditionals3_c: 尝试编写代码来检查第一个云。你能用循环来查看所有的云吗？
      courseF_bee_conditionals4:
        courseD_bee_conditionals4_a: 哪怕可以看到整条路径，仍然可以当作每个空间上面有朵云来处理。
        courseF_bee_conditionals4_b: '在循环中使用`如果`语句检查每个空间是否有花蜜。 '
        courseF_bee_conditionals4_c: 使用`当前面有路时`模块，你应该 ' 前进 ', 并查找一朵花。' 如果有一朵花 ' 蜜蜂应该做什么？
      courseF_bee_conditionals5:
        courseF_bee_conditionals5_a: 把矩形路径的每一边都看成是一个路径。在外部设置一个 "重复" 块的嵌套循环, 并在`当前面有路时`的内部循环。如果蜜蜂需要在每朵花旁边嗡嗡叫，它要飞过多少条路径？
        courseF_bee_conditionals5_b: 在`当前面有路时`模块的里面, 你需要往前走，并寻找朵花。你如何检查哪里是否有一朵花？如果有一朵花,
          你会怎么做？
        courseF_bee_conditionals5_c: '长方形的3条边上有花，因此代码需要 '' 重复3次 ''。在每一个重复, 蜜蜂将需要继续沿着路径,
          `当前面有路时`。 '
        courseF_bee_conditionals5_d: 要继续沿着这条路走下去, 蜜蜂将需要 "前进"。在小路上, 蜜蜂需要查找一朵花。如果有一朵花,
          蜜蜂该怎么办？
      courseF_bee_conditionals8:
        courseF_bee_conditionals8_a: |-
          **记住：**这一关在每次运行的时候都会变化。

          你需要用一个条件模块（“如果”或“如果/否则”）来完成这个挑战。
        courseF_bee_conditionals8_b: |-
          此关卡很棘手, 因为不能只使用一个条件来检查空白方块, 花蜜, _和_ 蜂蜜。

          仅在路径的最后查找花蜜和蜂蜜。
        courseF_bee_conditionals8_c: 如果您使用`当前面有路`模块并获得第一朵花时, 会发生什么情况？
      courseF_bee_for1:
        courseF_bee_for1_a: 将紫色数字块拖到`重复`循环的空白处, 告诉它要重复多少次。
        courseF_bee_for1_b: 你将需要两个模块在你的 ' 重复 ' 循环里来收集所有的花蜜。
      courseF_bee_for10:
        courseF_bee_for10_a: 你能在需要走的步数和采花蜜的数量之间找到一个规律吗？
        courseF_bee_for10_b: 第一组花总共有 \*\* 14 朵花 **。为了到达第一组, 蜜蜂必须嗡嗡作响往下移** 7 个正方形 \*\*
          （或14除以2个正方形。）下一组有多少朵花, 蜜蜂到那里需要走多少个正方形？
        courseF_bee_for10_c: |-
          在关卡中, 第一组中有 \*\* 14 \*\* 朵花，第二组有 \*\* 10 \*\* 朵花, 第三组有 \*\* 6 \*\* 朵花, 第四组有 \*\* 2 \*\* 朵花。

          在这张图中, 请注意有 \*\* 7 \*\* 个红色正方形, \*\* 5 \*\* 个橙色正方形, \*\* 3 \*\* 个绿色正方形和 \*\* 1 \*\* 个蓝色块。

          ![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png>)

          数字有什么关联吗？
        courseF_bee_for10_d: 你需要有2个重复循环，其中一个将使用数学模块。
      courseF_bee_for10_2018:
        courseF_bee_for10_a: 你能在需要走的步数和采花蜜的数量之间找到一个规律吗？
        courseF_bee_for10_b: 第一组花总共有 \*\* 14 朵花 **。为了到达第一组, 蜜蜂必须嗡嗡作响往下移** 7 个正方形 \*\*
          （或14除以2个正方形。）下一组有多少朵花, 蜜蜂到那里需要走多少个正方形？
        courseF_bee_for10_c: |-
          在关卡中, 第一组中有 \*\* 14 \*\* 朵花，第二组有 \*\* 10 \*\* 朵花, 第三组有 \*\* 6 \*\* 朵花, 第四组有 \*\* 2 \*\* 朵花。

          在这张图中, 请注意有 \*\* 7 \*\* 个红色正方形, \*\* 5 \*\* 个橙色正方形, \*\* 3 \*\* 个绿色正方形和 \*\* 1 \*\* 个蓝色块。

          ![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png>)

          数字有什么关联吗？
        courseF_bee_for10_d: 你需要有2个重复循环，其中一个将使用数学模块。
      courseF_bee_for10_2019:
        courseF_bee_for10_a: 你能在需要走的步数和采花蜜的数量之间找到一个规律吗？
        courseF_bee_for10_b: 第一组花总共有 \*\* 14 朵花 **。为了到达第一组, 蜜蜂必须嗡嗡作响往下移** 7 个正方形 \*\*
          （或14除以2个正方形。）下一组有多少朵花, 蜜蜂到那里需要走多少个正方形？
        courseF_bee_for10_c: |-
          在关卡中, 第一组中有 \*\* 14 \*\* 朵花，第二组有 \*\* 10 \*\* 朵花, 第三组有 \*\* 6 \*\* 朵花, 第四组有 \*\* 2 \*\* 朵花。

          在这张图中, 请注意有 \*\* 7 \*\* 个红色正方形, \*\* 5 \*\* 个橙色正方形, \*\* 3 \*\* 个绿色正方形和 \*\* 1 \*\* 个蓝色块。

          ![](<https://images.code.org/602ce14659299af6a59a79ebd0bdb9d4-image-1493221855089.6.11 Hint Drawing.png>)

          数字有什么关联吗？
        courseF_bee_for10_d: 你需要有2个重复循环，其中一个将使用数学模块。
      courseF_bee_for11:
        courseF_bee_for11_a: "12比15少多少？ \n9比12少多少？\n\n你看到规律了吗？"
      courseF_bee_for11_2018:
        courseF_bee_for11_a: "12比15少多少？ \n9比12少多少？\n\n你看到规律了吗？"
      courseF_bee_for11_2019:
        courseF_bee_for11_a: "12比15少多少？ \n9比12少多少？\n\n你看到规律了吗？"
      courseF_bee_for1_2018:
        courseF_bee_for1_a: 将紫色数字块拖到`重复`循环的空白处, 告诉它要重复多少次。
        courseF_bee_for1_b: 你将需要两个模块在你的 ' 重复 ' 循环里来收集所有的花蜜。
      courseF_bee_for1_2019:
        courseF_bee_for1_a: 将紫色数字块拖到`重复`循环的空白处, 告诉它要重复多少次。
        courseF_bee_for1_b: 你将需要两个模块在你的 ' 重复 ' 循环里来收集所有的花蜜。
      courseF_bee_for2:
        courseF_bee_for2_a: 当你困惑时，一次只采一朵花，并经常测试。
        courseF_bee_for2_b: 记住在每个循环之间向前移动, 这样你就能到达每一朵花。
      courseF_bee_for2_2018:
        courseF_bee_for2_a: 当你困惑时，一次只采一朵花，并经常测试。
        courseF_bee_for2_b: 记住在每个循环之间向前移动, 这样你就能到达每一朵花。
      courseF_bee_for2_2019:
        courseF_bee_for2_a: 当你困惑时，一次只采一朵花，并经常测试。
        courseF_bee_for2_b: 记住在每个循环之间向前移动, 这样你就能到达每一朵花。
      courseF_bee_for4:
        courseF_bee_for4_a: 使用`计数循环`从1到 7，增量为 1，来通过这个关卡。
        courseF_bee_for4_b: 在`计数循环`循环中，你需要一个`向前移动` 指令，和一个循环来收集花蜜。
        courseF_bee_for4_c: 确保在嵌套的`重复`循环中使用`counter`（计数器）变量来获得足够的花蜜!
      courseF_bee_for4_2018:
        courseF_bee_for4_a: 使用`计数循环`从1到 7，增量为 1，来通过这个关卡。
        courseF_bee_for4_b: 在`计数循环`循环中，你需要一个`向前移动` 指令，和一个循环来收集花蜜。
        courseF_bee_for4_c: 确保在嵌套的`重复`循环中使用`counter`（计数器）变量来获得足够的花蜜!
      courseF_bee_for4_2019:
        courseF_bee_for4_a: 使用`计数循环`从1到 7，增量为 1，来通过这个关卡。
        courseF_bee_for4_b: 在`计数循环`循环中，你需要一个`向前移动` 指令，和一个循环来收集花蜜。
        courseF_bee_for4_c: 确保在嵌套的`重复`循环中使用`counter`（计数器）变量来获得足够的花蜜!
      courseF_bee_for5:
        courseF_bee_for5_a: 这一次，`向前移动`模块和`采花蜜`模块需要在分开的`重复`循环里，二者都在同一个`计数循环`中。
        courseF_bee_for5_b: 在每个循环中使用 "计数器" 变量, 以便蜜蜂在每朵花之间移动不同的距离。
        courseF_bee_for5_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_bee_for5_2018:
        courseF_bee_for5_a: 这一次，`向前移动`模块和`采花蜜`模块需要在分开的`重复`循环里，二者都在同一个`计数循环`中。
        courseF_bee_for5_b: 在每个循环中使用 "计数器" 变量, 以便蜜蜂在每朵花之间移动不同的距离。
        courseF_bee_for5_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_bee_for5_2019:
        courseF_bee_for5_a: 这一次，`向前移动`模块和`采花蜜`模块需要在分开的`重复`循环里，二者都在同一个`计数循环`中。
        courseF_bee_for5_b: 在每个循环中使用 "计数器" 变量, 以便蜜蜂在每朵花之间移动不同的距离。
        courseF_bee_for5_c: 不要害怕犯错误！即使你还没有解决这个关卡，尝试添加模块并运行代码, 看看会发生什么。
      courseF_bee_for6:
        courseF_bee_for6_a: 不要忘记在`重复`循环中使用`counter`（计数器）变量。
        courseF_bee_for6_b: 在`计数循环`循环中，你需要一个`向前移动` 指令，和一个循环来收集花蜜。
        courseF_bee_for6_c: 你的循环应该数 \*\* 从5到1 \*\*。
      courseF_bee_for6_2018:
        courseF_bee_for6_a: 不要忘记在`重复`循环中使用`counter`（计数器）变量。
        courseF_bee_for6_b: 在`计数循环`循环中，你需要一个`向前移动` 指令，和一个循环来收集花蜜。
        courseF_bee_for6_c: 你的循环应该数 \*\* 从5到1 \*\*。
      courseF_bee_for6_2019:
        courseF_bee_for6_a: 不要忘记在`重复`循环中使用`counter`（计数器）变量。
        courseF_bee_for6_b: 在`计数循环`循环中，你需要一个`向前移动` 指令，和一个循环来收集花蜜。
        courseF_bee_for6_c: 你的循环应该数 \*\* 从5到1 \*\*。
      courseF_bee_for7:
        courseF_bee_for7_a: "`计数循环`循环需要从1到7，增量为2。"
        courseF_bee_for7_b: 在`计数循环`循环中，你需要一个`向前移动` 指令，和一个循环来收集花蜜。
        courseF_bee_for7_c: 请记住在 "重复" 循环中使用 "计数器" 变量。
      courseF_bee_for7_2018:
        courseF_bee_for7_a: "`计数循环`循环需要从1到7，增量为2。"
        courseF_bee_for7_b: 在`计数循环`循环中，你需要一个`向前移动` 指令，和一个循环来收集花蜜。
        courseF_bee_for7_c: 请记住在 "重复" 循环中使用 "计数器" 变量。
      courseF_bee_for7_2019:
        courseF_bee_for7_a: "`计数循环`循环需要从1到7，增量为2。"
        courseF_bee_for7_b: 在`计数循环`循环中，你需要一个`向前移动` 指令，和一个循环来收集花蜜。
        courseF_bee_for7_c: 请记住在 "重复" 循环中使用 "计数器" 变量。
      courseF_bee_for8:
        courseF_bee_for8_a: "如果循环往上计数，那么每次运行运行时都会将增量加到计数器变量中。 \n\n你需要将什么加到每个数字，来得到下一个花蜜的数量？"
        courseF_bee_for8_b: 在这个关卡中, 你需要在台阶上移动以获得花朵。
        courseF_bee_for8_c: 您的循环将通过一些增量来计数 \* 从3到 15 \* 。这是什么呢？
      courseF_bee_for8_2018:
        courseF_bee_for8_a: "如果循环往上计数，那么每次运行运行时都会将增量加到计数器变量中。 \n\n你需要将什么加到每个数字，来得到下一个花蜜的数量？"
        courseF_bee_for8_b: 在这个关卡中, 你需要在台阶上移动以获得花朵。
        courseF_bee_for8_c: 您的循环将通过一些增量来计数 \* 从3到 15 \* 。这是什么呢？
      courseF_bee_for8_2019:
        courseF_bee_for8_a: "如果循环往上计数，那么每次运行运行时都会将增量加到计数器变量中。 \n\n你需要将什么加到每个数字，来得到下一个花蜜的数量？"
        courseF_bee_for8_b: 在这个关卡中, 你需要在台阶上移动以获得花朵。
        courseF_bee_for8_c: 您的循环将通过一些增量来计数 \* 从3到 15 \* 。这是什么呢？
      courseF_bee_for9:
        courseF_bee_for9_a: |-
          试着用计数器变量来做些数学。

          要得到和你需要收集的花蜜一样的数量，你需要对每朵花的计数器做什么？
        courseF_bee_for9_c: 如果想要通过此关卡，看起来需要在每次循环迭代的开始让蜜蜂转弯。
        courseF_bee_for9_b: "**请记住：** 如果你的循环在往上计数，每次循环，增量会加到`counter`（计数器）上。"
      courseF_bee_for9_2018:
        courseF_bee_for9_a: |-
          试着用计数器变量来做些数学。

          要得到和你需要收集的花蜜一样的数量，你需要对每朵花的计数器做什么？
        courseF_bee_for9_c: 如果想要通过此关卡，看起来需要在每次循环迭代的开始让蜜蜂转弯。
        courseF_bee_for9_b: "**请记住：** 如果你的循环在往上计数，每次循环，增量会加到`counter`（计数器）上。"
      courseF_bee_for9_2019:
        courseF_bee_for9_a: |-
          试着用计数器变量来做些数学。

          要得到和你需要收集的花蜜一样的数量，你需要对每朵花的计数器做什么？
        courseF_bee_for9_c: 如果想要通过此关卡，看起来需要在每次循环迭代的开始让蜜蜂转弯。
        courseF_bee_for9_b: "**请记住：** 如果你的循环在往上计数，每次循环，增量会加到`counter`（计数器）上。"
      courseF_bee_for_challenge2:
        courseF_bee_for_challenge2_a: |-
          看看这个移动选项:

          \!\[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        courseF_bee_for_challenge2_b: '试着用两个 "计数" 循环: 一个用于攀爬和抓取花蜜, 另一种用于攀爬和制作蜂蜜。'
        courseF_bee_for_challenge2_c: |-
          注意，一个`计数循环`里需要几个普通的循环来重复`counter`（计数器）次数来增加楼梯图案。

          另一个`计数循环`循环只需要一个普通的循环来酿造`counter`（计数器）个蜂蜜。
        courseF_bee_for_challenge2_d: |-
          **解决方案：**

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward"/>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">counter</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">10</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="maze_moveForward">
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">counter</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_for_challenge2_2018:
        courseF_bee_for_challenge2_a: |-
          看看这个移动选项:

          \!\[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        courseF_bee_for_challenge2_b: '试着用两个 "计数" 循环: 一个用于攀爬和抓取花蜜, 另一种用于攀爬和制作蜂蜜。'
        courseF_bee_for_challenge2_c: |-
          注意，一个`计数循环`里需要几个普通的循环来重复`counter`（计数器）次数来增加楼梯图案。

          另一个`计数循环`循环只需要一个普通的循环来酿造`counter`（计数器）个蜂蜜。
        courseF_bee_for_challenge2_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_for_challenge2_2019:
        courseF_bee_for_challenge2_a: |-
          看看这个移动选项:

          \!\[] (<https://images.code.org/07fa7bdbbaaae3ecf2663a360b3e87d7-image-1469726373660.png>)
        courseF_bee_for_challenge2_b: '试着用两个 "计数" 循环: 一个用于攀爬和抓取花蜜, 另一种用于攀爬和制作蜂蜜。'
        courseF_bee_for_challenge2_c: |-
          注意，一个`计数循环`里需要几个普通的循环来重复`counter`（计数器）次数来增加楼梯图案。

          另一个`计数循环`循环只需要一个普通的循环来酿造`counter`（计数器）个蜂蜜。
        courseF_bee_for_challenge2_d: |-
          \*\* 解决方案: \*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="collector_collect">
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">turnLeft</title>
          <next>
          <block type="controls_repeat_dropdown">
          <title name="TIMES" config="3-10">3</title>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </xml>
      courseF_bee_functions2:
        courseF_bee_functions2_a: 函数已经写好了，但你需要在每朵花那里调用它。
        courseF_bee_functions2_b: 点击蓝色编辑按钮上的 "只得到花蜜" 功能, 看看它做什么。
      courseF_bee_functions3:
        courseF_bee_functions3_a: '在这个关卡的函数只需要做蜂蜜, 在它里面不应该有任何 "前进" 或 "转向" 模块。 '
        courseF_bee_functions3_b: 请记住, 你的函数只在_如果_有一个蜂窝时，才酿蜂蜜 。
        courseF_bee_functions3_c: 使用绿色`只酿蜂蜜`模块调用您的函数。
        courseF_bee_functions3_d: 查看这条路
      courseF_bee_functions3a:
        courseF_bee_functions3a_a: '这个关卡的函数只需要得到花蜜或蜂蜜, 在它里面不应该有任何 '' 前进 '' 或 '' 转向
          ''模块。 '
        courseF_bee_functions3a_b: 使用爬楼梯的模式检查前四朵云。
      courseF_bee_functions4:
        courseF_bee_functions4_a: 你的函数应该沿着小路走, 然后让蜜蜂返回到主干道。 您不需要将该部分添加到主程序中。
        courseF_bee_functions4_b: 尝试生成该程序并使用函数块, 就像预期函数的行为一样, 然后创建函数。
      courseF_bee_functions5a:
        courseF_bee_functions5a_a: "您的函数应该检查是否有一条通向右边的路径, 如果有, 沿着小路侧面走, 并把蜜蜂返回到主干道。
          \ \n\n您不需要将该部分添加到主程序中。"
        courseF_bee_functions5a_b: 因为路的长度不同，使用 "当" 循环来遍历所有主路径,。
        courseF_bee_functions5a_c: 在 "当循环" 中, 确保向前移动, 然后使用函数检查路径。
      courseF_bee_functions6:
        courseF_bee_functions6_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快就能成功了！\n\n<xml>\n<block
          type=\"procedures_defnoreturn\" editable=\"false\">\n<mutation/>\n<title
          name=\"NAME\">采花蜜酿蜂蜜</title>\n<statement name=\"STACK\">\n</statement>\n</block>\n</xml>"
        courseF_bee_functions6_b: 你的函数应该检查是否有花或蜂窝, 得到花蜜或蜂蜜, 然后转向。
        courseF_bee_functions6_c: 因为你在你的函数里转弯, 你只需要一个 ' 当' 循环来通过这个迷宫。
      courseF_bee_functions7:
        courseF_bee_functions7_a: 你可以回头看看最后这个关卡, 看看你使用的功能。
        courseF_bee_functions7_b: 试着用你的手指在迷宫中画一条小路。蜜蜂将在哪里做出决定？
      courseF_bee_functions8a:
        courseF_bee_functions8a_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseF_bee_functions8a_b: 请记住在函数编辑器内生成代码。
      courseF_bee_functionsPre7:
        courseF_bee_functions7_a: "如果这个关卡看上去很有挑战性，尝试一点一点创建你的函数。 \n\n添加一些模块试试看。继续添加，然后再尝试。很快，你就能成功了！"
        courseF_bee_functions7_b: |-
          请记住在绿色函数块内部生成代码。

          <xml>
          <block type="procedures_defnoreturn" editable="false">
          <mutation/>
          <title name="NAME">采花蜜酿蜂蜜</title>
          <statement name="STACK">

          </statement>
          </block>
          </xml>
        courseF_bee_functions7_c: 如果有蜂窝, 你应该往哪个方向转？如何有花呢？或如果什么都没有呢？
      courseF_bee_functions_challenge1:
        courseF_bee_functions_challenge1_a: 您可以使用工具框中的函数来帮助您。您可以调用另一个函数的定义内的函数!
      courseF_bee_functions_challenge2:
        courseF_bee_functions_challenge2_a: "如果右侧有路径, 则应执行以下操作:\n\n-   得到花蜜或酿蜂蜜。\n-
          \  向右拐, 往侧面走。\n-   移动到侧边路径的末尾。\n-   向右拐。 \n\n如果重复上述操作两次, 您将准备好往下回到主路。 \n\n\\*\\*
          只有当你想看到完整的解决方案时才点击另一个提示!"
        courseF_bee_functions_challenge2_b: |-
          \*\* 解决方案: \*\*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="maze_if">
          <title name="DIR">是否右边有路</title>
          <statement name="DO">
          <block type="procedures_callnoreturn" id="function">
          <mutation name="move and check"></mutation>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          <block type="procedures_defnoreturn" editable="false">
          <mutation></mutation>
          <title name="NAME">移动并检查</title>
          <statement name="STACK">
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="math_number">
          <title name="NUM">2</title>
          </block>
          </value>
          <statement name="DO">
          <block type="procedures_callnoreturn">
          <mutation name="check nectar or honey"></mutation>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          <next>
          <block type="maze_untilBlocked">
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </statement>
          </block>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation></mutation>
          <title name="NAME">检查蜂蜜或花蜜</title>
          <statement name="STACK">
          <block type="bee_whileNectarAmount">
          <title name="ARG1">有花蜜</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_nectar"/>
          </statement>
          <next>
          <block type="bee_whileNectarAmount">
          <title name="ARG1">有蜂蜜</title>
          <title name="OP">&gt;</title>
          <title name="ARG2">0</title>
          <statement name="DO">
          <block type="maze_honey"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
      courseF_bee_fwp1:
        courseF_bee_fwp1_a: 使用`如果`语句确保你只从一朵花得到花蜜。
        courseF_bee_fwp1_b: 沿着路径继续使用 "重复" 块。确保您使用的是 "向前移动" 块, 并使用 "如果" 声明检查是否有花。
      courseF_bee_fwp2:
        courseF_bee_fwp2_a: "若要将其变成函数，只需将代码拖到现有的函数块中即可。    \n\n![](https://images.code.org/4d918c677ecb9f1618c1556566805b32-image-1477621874625.gif)"
        courseF_bee_fwp2_b: 不要忘记将`rowOfNectar`（花蜜的行）模块连接到 `当运行时`来调用刚生成的函数。
      courseF_bee_fwp3:
        courseF_bee_fwp3_a: 无论你面对的是哪个方向，函数都会运行。
        courseF_bee_fwp3_b: 有3排花蜜, 你需要在每行之间做什么样的转弯和运动？
        courseF_bee_fwp3_c: 为了解决这个难题, 你需要调用你的函数3次。在每次调用之间, 您需要 "向右转", "向前移动" 2 次,
          然后再 "向右转"。或者, 你需要 "向左拐", "向前移动" 2 次, 然后再 "向左拐"。
      courseF_bee_fwp4:
        courseF_bee_fwp4_a: 你需要添加一个参数，并在循环中使用变量的值。
        courseF_bee_fwp4_b: 为函数创建的参数将用于重复循环, 以确定蜜蜂将向前移动多少次并检查花蜜。
      courseF_bee_fwp5:
        courseF_bee_fwp5_a: 计算每个拉伸中需要的空格数, 并将这些数字用作函数调用的参数。
        courseF_bee_fwp5_a_b: 记住在每个函数调用之间进行转向。
      courseF_bee_fwp6:
        courseF_bee_fwp6_a: 哪个模块自动递增一个变量，并可以把它作为参数？
        courseF_bee_fwp6_b: 试着使用`计数循环`来通过这个关卡。
      courseF_bee_fwp7:
        courseF_bee_fwp7_a: 这个函数不需要第二个参数，只需要第二个`如果`语句。
        courseF_bee_fwp7_b: 在函数中添加 "如果" 声明, 以便蜜蜂检查蜂窝和花。
      courseF_bee_fwp8:
        courseF_bee_fwp8_a: '"计数循环" 如何帮助这个关卡？'
        courseF_bee_fwp8_b: 随着你走进去，螺旋变小, 所以你的 ' 计数循环 ' 应该倒计数。
      courseF_bee_fwp_challenge1:
        courseF_bee_fwp_challenge1_a: |-
          主程序应该类似于以下内容:

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">3</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">5</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="maze_move">
          <title name="DIR">moveForward</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="math_number">
          <title name="NUM">4</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block></xml>
        courseF_bee_fwp_challenge1_b: '看看在每个空间里有多少玉米可以收割。你看到计数器的图案了吗？ '
        courseF_bee_fwp_challenge1_b1: "\"长度\" 参数应用于设置 \"计数循环\" 中的最大值。 \n\n收割后别忘了让农夫回到主路!"
        courseF_bee_fwp_challenge1_c: |-
          将 "计数循环" 放在函数中, 并将其设置为从 "1" 到 "长度" ，每次增加1。
          在这个循环中, 你应该前进, 捡起所有的玉米。

          <xml>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          </statement>
          </block></xml>
        courseF_bee_fwp_challenge1_d: 在' 计数循环 '里, 你会想加上' 前进 ', 然后 ' 采摘玉米 ' \*\* 计数器
          \*\*次。
        courseF_bee_fwp_challenge1_d2: 在 ' 计数循环 ' 之后, 你可能 ' 向后移动 ' \*\* 长度次数 \*\*。
        courseF_bee_fwp_challenge1_e: |-
          **解决方案：**

          <xml>
          <block type="procedures_defnoreturn" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>
          <title name="NAME">捡起一行</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block></xml>
      courseF_bee_fwp_challenge2:
        courseF_bee_fwp_challenge2_a: |-
          首先确保你明白这个函数是如何工作的。当农夫沿着每条小路向下移动时, 她只会尝试收集玉米。相反, 你怎么能让她查找3种蔬菜, 并只捡起她发现的那一种？

           将条件声明添加到函数中, 来查找玉米、南瓜和生菜。
        courseF_bee_fwp_challenge2_b: 你的`向前移动`模块是否没了？尝试在主程序中使用_第二个_`计数循环`。
        courseF_bee_fwp_challenge2_c: |-
          \*\* 您的函数应该是这个样的: \*\*

          <xml><block type="procedures_defnoreturn" deletable="false" movable="false" editable="false" usercreated="true">
          <mutation>
          <arg name="length"/>
          </mutation>

          <title name="NAME">捡起一行</title>
          <statement name="STACK">
          <block type="maze_turn">
          <title name="DIR">向左转</title>
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="variables_get">
          <title name="VAR">计数器</title>
          </block>
          </value>
          <statement name="DO">
          <block type="harvester_ifHasCrop">
          <title name="LOC">玉米</title>
          <statement name="DO">
          <block type="harvester_corn"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">南瓜</title>
          <statement name="DO">
          <block type="harvester_pumpkin"/>
          </statement>
          <next>
          <block type="harvester_ifHasCrop">
          <title name="LOC">莴苣</title>
          <statement name="DO">
          <block type="harvester_lettuce"/>
          </statement>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block>
          </statement>
          <next>
          <block type="controls_repeat_ext" inline="true">
          <value name="TIMES">
          <block type="parameters_get">
          <title name="VAR">长度</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向后移动</title>
          </block>
          </statement>
          <next>
          <block type="maze_turn">
          <title name="DIR">向右转</title>
          </block>
          </next>
          </block>
          </next>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </xml>
        courseF_bee_fwp_challenge2_d: |-
          \*\* 您的主要程序应该是这个样的: \*\*

          <xml>
          <block type="when_run" deletable="false" movable="false">
          <next>
          <block type="controls_for" inline="true">
          <title name="VAR">计数器2</title>
          <value name="FROM">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TO">
          <block type="math_number">
          <title name="NUM">6</title>
          </block>
          </value>
          <value name="BY">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          <statement name="DO">
          <block type="maze_move">
          <title name="DIR">向前移动</title>
          <next>
          <block type="procedures_callnoreturn" inline="false">
          <mutation name="pick row">
          <arg name="length"/>
          </mutation>
          <value name="ARG0">
          <block type="variables_get">
          <title name="VAR">计数器2</title>
          </block>
          </value>
          </block>
          </next>
          </block>
          </statement>
          </block>
          </next>
          </block></xml>
      courseF_bee_variables_3_2018:
        courseF_beevariables_3a: |-
          让变量减 1，可以在程序中使用这段代码:
          <xml><block type="variables_set" inline="false">
                              <title name="VAR">gather</title>
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">gather</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block></xml>
      courseF_bee_variables_3_2019:
        courseF_bee_variables_3_2019_1: |-
          让变量减 1，可以在程序中使用这段代码:
          <xml><block type="variables_set" inline="false">
                              <title name="VAR">gather</title>
                              <value name="VALUE">
                                <block type="math_arithmetic" inline="true">
                                  <title name="OP">MINUS</title>
                                  <value name="A">
                                    <block type="variables_get">
                                      <title name="VAR">gather</title>
                                    </block>
                                  </value>
                                  <value name="B">
                                    <block type="math_number">
                                      <title name="NUM">1</title>
                                    </block>
                                  </value>
                                </block>
                              </value>
                            </block></xml>
      courseF_bee_variables_4_2019:
        courseF_bee_variables_4_2019_1: 不要从`gather` 中减去 1，而是每次增加1。变量的初始值应该是什么？
      courseF_playlab_variables1a:
        courseF_playlab_variables1a_a: 你将要用"目标！"来取代绿色模块中的"我应该喊叫什么？"的文字。
      courseF_playlab_variables2b:
        courseF_playlab_variables2b_a: 你认为当你点击"运行“的时候，奇奇会说什么？
      courseF_playlab_variables3b_josh:
        courseF_playlab_variables3b_a: '有两个模块有空的空间: '' 演员说 '' 块, 和'' 连接''模块。在那里添加变量模块!'
      courseF_playlab_variables4b:
        courseF_playlab_variables4b_a: 你不需要工具箱里的更多模块。
        courseF_playlab_variables4b_b: 把两个 ' 年龄 ' 变量和一个 ' 名字 ' 变量放到谈话中最合理的地方。
      courseF_playlab_variables5c:
        courseF_playlab_variables5c_a: 在工具箱的”变量“中找到 "回答"变量模块.
        courseF_playlab_variables5c_b: 测试您的代码! 尝试输入 "红色" 和其他颜色, 看看会发生什么。
      courseF_playlab_variables6c:
        courseF_playlab_variables6c_a: 在 "输入"章节, 使用 "询问"模块获取用户回馈。
      courseF_playlab_variables7b:
        courseF_playlab_variables7b_a: 有一只猫和一只狗在谈论他们最喜欢的食物。使用询问模块找出最喜欢的食物, 然后将文本显示到屏幕！
        courseF_playlab_variables7b_b: 让你最喜欢的角色问你是否想听笑话。如果答案是肯定的, 在屏幕上显示一个笑话。
      courseF_playlab_variables7c:
        courseF_playlab_variables7c_a: 将新的 "询问" 块放在 "如果/否则" 语句之前, 这样您就可以在其他阶段使用它。
      courseF_playlab_variables8c:
        courseF_playlab_variables8c_a: 将"加入"模块加到一个 ' 演员说 '模块中，能让你在一个大的句子里使用变量。
      courseF_playlab_variables_challenge1:
        courseF_playlab_variables_challenge1_a: |-
          要用到工具箱里别的模块，来让演员说话。

          <xml><block type="studio_saySpriteParamsTime" inline="true">
          <value name="SPRITE">
          <block type="math_number">

          <title name="NUM">1</title>
          </block>
          </value>
          <value name="TEXT">
          <block type="text">
          <title name="TEXT">敲、敲</title>
          </block>
          </value>
          <value name="TIME">
          <block type="math_number">
          <title name="NUM">1</title>
          </block>
          </value>
          </block></xml>
      courseF_playlab_variables_challenge2:
        courseF_playlab_variables_challenge2_a: 当精灵图碰撞时, 将`分数`变量增加或减少。
        courseF_playlab_variables_challenge2_b: 你可以用这个参数来改变每次按下方向键时，精灵图移动得距离。
        courseF_playlab_variables_challenge2_c: "\\*\\* 解决方案: \\*\\* \n\n<xml>\n<block
          type=\"studio_whenArrow\">\n<title name=\"VALUE\">上</title>\n<next>\n<block
          type=\"studio_moveDistanceParams\" inline=\"true\">\n<title name=\"SPRITE\">0</title>\n<title
          name=\"DIR\">1</title>\n<value name=\"DISTANCE\">\n<block type=\"math_number\">\n<title
          name=\"NUM\">25</title>\n</block>\n</value>\n</block>\n</next>\n</block>\n<block
          type=\"studio_whenArrow\">\n<title name=\"VALUE\">下</title>\n<next>\n<block
          type=\"studio_moveDistanceParams\" inline=\"true\">\n<title name=\"SPRITE\">0</title>\n<title
          name=\"DIR\">4</title>\n<value name=\"DISTANCE\">\n<block type=\"math_number\">\n<title
          name=\"NUM\">25</title>\n</block>\n</value>\n</block>\n</next>\n</block>\n<block
          type=\"studio_whenArrow\">\n<title name=\"VALUE\">左</title>\n<next>\n<block
          type=\"studio_moveDistanceParams\" inline=\"true\">\n<title name=\"SPRITE\">0</title>\n<title
          name=\"DIR\">8</title>\n<value name=\"DISTANCE\">\n<block type=\"math_number\">\n<title
          name=\"NUM\">25</title>\n</block>\n</value>\n</block>\n</next>\n</block>\n<block
          type=\"studio_whenArrow\">\n<title name=\"VALUE\">右</title>\n<next>\n<block
          type=\"studio_moveDistanceParams\" inline=\"true\">\n<title name=\"SPRITE\">0</title>\n<title
          name=\"DIR\">2</title>\n<value name=\"DISTANCE\">\n<block type=\"math_number\">\n<title
          name=\"NUM\">25</title>\n</block>\n</value>\n</block>\n</next>\n</block>\n<block
          type=\"studio_whenSpriteCollided\">\n<title name=\"SPRITE1\">0</title>\n<title
          name=\"SPRITE2\">1</title>\n<next>\n<block type=\"studio_setScore\" inline=\"false\">\n<value
          name=\"VALUE\">\n<block type=\"math_arithmetic\" inline=\"true\">\n<title
          name=\"OP\">加</title>\n<value name=\"A\">\n<block type=\"studio_getScore\"/>\n</value>\n<value
          name=\"B\">\n<block type=\"math_number\">\n<title name=\"NUM\">3</title>\n</block>\n</value>\n</block>\n</value>\n</block>\n</next>\n</block>\n<block
          type=\"studio_whenSpriteCollided\">\n<title name=\"SPRITE1\">0</title>\n<title
          name=\"SPRITE2\">2</title>\n<next>\n<block type=\"studio_setScore\" inline=\"false\">\n<value
          name=\"VALUE\">\n<block type=\"math_arithmetic\" inline=\"true\">\n<title
          name=\"OP\">加</title>\n<value name=\"A\">\n<block type=\"studio_getScore\"/>\n</value>\n<value
          name=\"B\">\n<block type=\"math_number\">\n<title name=\"NUM\">3</title>\n</block>\n</value>\n</block>\n</value>\n</block>\n</next>\n</block>\n<block
          type=\"studio_whenSpriteCollided\">\n<title name=\"SPRITE1\">1</title>\n<title
          name=\"SPRITE2\">2</title>\n<next>\n<block type=\"studio_setScore\" inline=\"false\">\n<value
          name=\"VALUE\">\n<block type=\"math_arithmetic\" inline=\"true\">\n<title
          name=\"OP\">减</title>\n<value name=\"A\">\n<block type=\"studio_getScore\"/>\n</value>\n<value
          name=\"B\">\n<block type=\"math_number\">\n<title name=\"NUM\">1</title>\n</block>\n</value>\n</block>\n</value>\n</block>\n</next>\n</block>\n</xml>"
      coursea_maze_ramp1_2018:
        courseC_maze_programming1_a: 如果小鸟不能到达猪，确保所有两个模块都完全连在了一起，然后再点击"运行"。
        courseC_maze_programming1_b: 别害怕犯错误！试试一些办法，如果不起作用，就试试别的办法！
      coursea_maze_ramp1_2019:
        courseC_maze_programming1_a: 如果小鸟不能到达猪，确保所有两个模块都完全连在了一起，然后再点击"运行"。
        courseC_maze_programming1_b: 别害怕犯错误！试试一些办法，如果不起作用，就试试别的办法！
      grade5_artist_variables_triangles1:
        grade5_artist_variables_triangles1_a: 要使这个三角形的内部角度为60度, 请记住将艺术家转120度。
        grade5_artist_variables_triangles1_b: 使用 "重复" 循环使代码更短。
        grade5_artist_variables_triangles1_c: 在循环中, 您需要向前移动50像素, 然后向左转120度。
      grade5_artist_variables_triangles1_2018:
        grade5_artist_variables_triangles1_a: 要使这个三角形的内部角度为60度, 请记住将艺术家转120度。
        grade5_artist_variables_triangles1_b: 使用 "重复" 循环使代码更短。
        grade5_artist_variables_triangles1_c: 在循环中, 您需要向前移动50像素, 然后向左转120度。
      grade5_artist_variables_triangles1_2019:
        grade5_artist_variables_triangles1_a: 要使这个三角形的内部角度为60度, 请记住将艺术家转120度。
        grade5_artist_variables_triangles1_b: 使用 "重复" 循环使代码更短。
        grade5_artist_variables_triangles1_c: 在循环中, 您需要向前移动50像素, 然后向左转120度。
      iceage_click_hello:
        iceage_click_hello_a: 添加一个或多个 ' 演员1说 ' 块到 ' 当点击时 ' 事件来完成这个关卡。
      iceage_free_play:
        iceage_free_play_a: '你能让希德和曼尼来个冰水晶战斗吗？  '
        iceage_free_play_b: 让格瑞尼去追迪亚哥 如果她抓住他, 就让比赛取胜结束。
        iceage_free_play_c: 你可以让喜得向迪亚哥扔雪花，而且让迪亚哥每次被击中后变大吗？如果迭戈被击中5次, 比赛就胜利结束。
      iceage_hello1:
        iceage_hello1_a: 你只需要添加一个模块来解决这个关卡。 将 "说" 块从工具栏中拖出, 并将其连接到工作区中已经存在的 "当运行时"
          事件块。接下来, 在里面输入 "你好"!
      iceage_hello2:
        iceage_hello2_a: '要解决这个关卡, 你需要使用 '' 演员1说 '' 块让 喜得 说一些话。 你还需要用'' 演员2说 '' 块也让曼尼说一些话
          。 '
      iceage_move_events:
        iceage_move_events_a: '每个 '' 当 \_\_\_ 方向 '' 事件将需要连接一个不同的 '' 移动演员 1 '' 命令，来解决这个关卡
          。 '
      iceage_move_to_actor:
        iceage_move_to_actor_a: 对于这个关卡, 你可以把迪亚哥向下移动200像素, 或将曼尼向上移动200像素。
        iceage_move_to_actor_b: 将 "播放 \_\_\_ 声音" 块连接到 "当演员1触及演员 2" 事件来完成这一挑战。
      iceage_move_to_flag:
        iceage_hello3_a: 使用 "向右移动演员1，距离200像素" 块来解决这个关卡。
      iceage_repeat:
        iceage_repeat_a: 同时使用 "向左移动演员1" 和 "向右移动演员1" 方块来解决这个关卡。
      iceage_sound_and_points:
        iceage_sound_and_points_a: 您将需要添加两个模块在 ' 当演员1触及演员 2 ' 事件下面。
        iceage_sound_and_points_b: 你将需要用 ' 得一分 ' 块和 ' 播放\_\_\_\_声音 ' 模块来通过这个关卡。
      iceage_throw_hearts:
        iceage_throw_hearts_a: 你想什么时候把心扔给格瑞尼？ 当按下箭头时？当你点击 喜得？ 当你点击格瑞尼？ 选择权在你!
        iceage_throw_hearts_b: 当她收到一颗心时，要让格瑞尼高兴。你需要将`设置演员2情绪为快乐`块放到`当演员2触及弹丸时`的事件下。
      iceage_warn_ice_age:
        iceage_warn_ice_age_a: '您只需要在需要的地方添加两个模块来过关。 '
        iceage_warn_ice_age_b: 在 "当运行时" 事件下添加两个新模块, 使其在程序启动后立即运行。
