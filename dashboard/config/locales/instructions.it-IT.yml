"it":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Ciao, io sono un artista. Puoi scrivere del codice
        per farmi disegnare quasi qualunque cosa. Usa i blocchi per farmi disegnare
        lungo le linee grigie dell'immagine. (Ciascuna riga è lunga 100 pixel)
      2-3 Artist 11_instruction: 'Disegna il bordo del segnale di stop creando un
        ottagono di 8 lati, ciascun lungo 100 pixel. Di quanti gradi devi girare adesso
        per completare il bordo del segnale di stop? (Suggerimento: quanto fa 360
        diviso 8?) '
      2-3 Artist 12_instruction: Imposta il blocco "RIPETI ??? volte" in modo che
        crei un "cerchio" per finire il bulbo oculare. SE ogni movimento gira a destra
        di un grado, quante volte è necessario RIPETERE per completare il cerchio?
        180? 360? 500?
      2-3 Artist 2 new_instruction: 'Questa casa ha una parete lasciata a metà. Ogni
        parete è lunga 100 pixel, ma della parete a destra ne è stata disegnata solo
        una metà. Completala. '
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. \n"
      2-3 Artist 3.4_instruction: Il BLOCCO salta muove l'ARTISTA senza che disegni.
        Disegna la linea tratteggiata utilizzando sia il BLOCCO salta sia il BLOCCO
        disegna.
      2-3 Artist 3_instruction: Questo cappello è alto 100 pixel. Disegna un cappello
        che sia più piccolo di 70 pixel.
      2-3 Artist 3new_instruction: Il cappello rosso è alto 100 pixel. Finisci disegnando
        un cappello nero che sia più corto di 70 pixel. La larghezza del cappello
        nero è di 50 pixel.
      2-3 Artist 4_instruction: Aiutami a completare la casa per questo gatto.
      2-3 Artist 5_instruction: Sostituisci questo codice con un blocco "ripeti ...
        volte" per disegnare la stessa casa utilizzando solo 3 blocchi.
      2-3 Artist 6_instruction: 'Questa casa ha bisogno di un tetto! Disegna un triangolo.
        Suggerimento: tutti e tre i lati hanno la stessa lunghezza.'
      2-3 Artist 7_instruction: 'Finisci di disegnare la metà a destra dell''ultima
        finestra. Ciascun riquadro della finestra è grande 25 pixel. '
      2-3 Artist 8_instruction: Completa le camere per ciascun animale suddividendo
        il rettangolo in 2 quadrati di uguale dimensione. Il rettangolo è largo 200
        pixel e alto 100 pixel.
      2-3 Artist 9_instruction: Finisci di disegnare questo aquilone
      2-3 Artist Assessment 1_instruction: 'Compito: finisci di disegnare l''ultimo
        dente, largo 25 pixel e alto 25 pixel.'
      2-3 Artist Debugging 1_instruction: Riesci a disegnare questo cappello facendo
        in modo che la sua parte superiore sia lunga 100 pixel?
      2-3 Artist Debugging 10_instruction: 'L''area di controllo della direzione sul
        mio controller di gioco è troppo stretta. Suggerimento: allargala di 10 pixel'
      2-3 Artist Debugging 11_instruction: |
        Aiutami a completare il mio bellissimo fiocco di neve.
        Quante volte devo eseguire il blocco "ripeti" per completarlo?
      2-3 Artist Debugging 12_instruction: Dovrei aggiungere un'onda dell'oceano a
        questa scena.  Puoi aiutarmi?
      2-3 Artist Debugging 2_instruction: 'Il codice per i tre baffi che vedi è sbagliato.
        Suggerimento: ciascun baffo è lungo 75 pixel. Correggi il codice per disegnare
        i baffi.'
      2-3 Artist Debugging 3_instruction: 'La mia barca ha un buco! Riesci a ripararla
        modificando l''angolazione di una linea? Suggerimento: nell''ultimo angolo
        c''è un errore di 15 gradi.'
      2-3 Artist Debugging 4_instruction: Qual è l'immagine che stiamo cercando di
        disegnare? Finisci di unire i punti utilizzando le giuste linee ed angoli.
      2-3 Artist Debugging 5_instruction: 'Il codice che disegna la gamba e il piede
        è sbagliato. Suggerimento: Il piede è troppo lungo, potrebbe essere necessario
        eliminare un blocco.'
      2-3 Artist Debugging 6_instruction: Sembra che mi sia seduto su una sedia a
        cui manca una gamba. Modifica i blocchi per disegnare la gamba mancante.
      2-3 Artist Debugging 7_instruction: Questo codice disegna la C al contrario
        nella parola "CODE". Riesci a farla disegnare correttamente?
      2-3 Artist Debugging 8_instruction: La mia girandola non è finita. Quante volte
        devo eseguire il blocco "ripeti" per completarla?
      2-3 Artist Debugging 9_instruction: 'Il codice per disegnare questo gambo non
        è corretto. Suggerimento: nel primo angolo c''è un errore di 60 gradi.'
      2-3 Artist Debugging Assessment 1_instruction: 'Questa figura è troppo piccola.
        Riesci a farla più grande? Suggerimento: ogni lato dovrebbe essere 75 pixel
        più lungo della lunghezza attuale.'
      2-3 Artist Free Play_instruction: 'Tempo di giocare: disegna qualunque cosa
        ti piaccia.'
      2-3 Artist Functions 1_instruction: 'Ciao. Io artista zombie. Mi piace disegnare!
        Aiutami a disegnare questi occhiali quadrati. Suggerimento: l''asta tra le
        lenti è di 25 pixel più corta della lunghezza di ciascuna lente.'
      2-3 Artist Functions 10_instruction: Qui ci sono due funzioni, una per disegnare
        un ingranaggio grande e una per disegnare un ingranaggio piccolo. Usale per
        disegnare l'interno di un macchinario!
      2-3 Artist Functions 11.5_instruction: Qui abbiamo sempre la funzione "disegna
        un esagono". Cosa succede se nel ripetere l'esecuzione della funzione come
        nell'esercizio precedente adesso giri ogni volta solo di 60 gradi?
      2-3 Artist Functions 11_instruction: Abbiamo rinominato la funzione "disegna
        un quadrato" in "disegna un esagono", ma realizza ancora quadrati! Puoi modificare
        la funzione "disegna un esagono" in modo che produca un esagono con i lati
        lunghi 50 pixel, e riprodurre poi tutta la figura usando la nuova funzione?
      2-3 Artist Functions 12_instruction: 'Le funzioni sono davvero utili per disegnare
        più volte oggetti complessi. Puoi usare la funzione "disegna un fiore" per
        riempire il resto della fioriera? (Suggerimento: le piante sono tutte distanti
        100 pixel l''una dall''altra)  '
      2-3 Artist Functions 13_instruction: Ti abbiamo dato quattro funzioni. Usale
        come preferisci all'interno di uno o più cicli per realizzare immagini da
        condividere con i tuoi amici. Premi "run" per vedere un esempio.
      2-3 Artist Functions 2_instruction: Le funzioni ti permettono di definire nuovi
        blocchi! Abbiamo spostato i blocchi per disegnare un quadrato all'interno
        di una funzione chiamata "disegna un quadrato". Puoi usare la funzione "disegna
        un quadrato" per creare gli occhiali?  I quadrati sono distanti 75 pixel.
      2-3 Artist Functions 3_instruction: Modifica la funzione in modo da disegnare
        adesso un quadrato con i lati lunghi 115 pixel e creare occhiali più grandi.
        I quadrati sono ora distanti 45 pixel.
      2-3 Artist Functions 4_instruction: Usa il blocco "ripeti ... volte" per disegnare
        questi tre quadrati.
      2-3 Artist Functions 7_instruction: 'Usa la funzione "disegna una casa" per
        disegnare due case, utilizzando diversi parametri. (Suggerimento: la prima
        casa è di 100 pixel).'
      2-3 Artist Functions 9_instruction: Qui trovi la funzione "disegna un fiocco
        di neve". Sperimentala per creare una scena invernale! Questo è un esercizio
        libero, quindi non c'è alcun problema da risolvere. Buon divertimento!
      2-3 Artist Loops 1_instruction: Puoi creare un esagono con i lati lunghi 100
        pixel per completare la cella? Ricordati, questo significa che avrai bisogno
        di girare di soli 60 gradi!
      2-3 Artist Loops 10_instruction: Cosa succede al disegno se facciamo il nostro
        ultimo passo in avanti lungo metà?
      2-3 Artist Loops 11_instruction: Ora mettiamo un "altro" ciclo intorno all'intera
        creazione! Non dimenticare di aggiungere un angolo alla fine del ciclo esterno.
      2-3 Artist Loops 2_instruction: Ora utilizza un blocco "ripeti" per rendere
        la cella una conchiglia.
      2-3 Artist Loops 4_instruction: Vuoi vedere cosa succede quando ripetiamo quella
        forma molte volte utilizzando un ciclo?
      2-3 Artist Loops 5_instruction: Ora facciamo una piccola modifica al ciclo e
        vediamo come cambia la nostra figura.
      2-3 Artist Loops 6_instruction: Aggiungi un'altra mossa e un altro giro all'interno
        del ciclo e vedi come cambia il tuo disegno.
      2-3 Artist Loops 7_instruction: Possiamo utilizzare i cicli per creare tutti
        i tipi di poligono. Puoi creare un rombo all'interno dell'esagono?
      2-3 Artist Loops 8_instruction: Mettiamo entrambi gli elementi all'interno di
        un ciclo.
      2-3 Artist Loops 9_instruction: Stiamo per inserire in un ciclo gli stessi elementi,
        ma ora aggiungeremo un po' di distanza tra loro.\r Usa lo stesso codice di
        prima, ma aggiungi un passo avanti alla fine del ciclo esterno.
      2-3 Artist Loops New 1_instruction: Disegniamo la testa di questo robot! Riesci
        a disegnare un quadrato i cui lati siano tutti lunghi 100 pixel?
      2-3 Artist Loops New 10_instruction: 'Adesso cerca di collegare una serie di
        V: per disegnarle crea un ciclo usando il blocco "ripeti ... volte".'
      2-3 Artist Loops New 11_instruction: Questa volta dobbiamo disegnare la V per
        24 volte. Aggiungi a questo codice un blocco "gira a sinistra di 30 gradi"
        e metti il tutto in un blocco "ripeti ... volte".
      2-3 Artist Loops New 12_instruction: |
        Disegna un rombo i cui lati siano lunghi 100 pixel.
      2-3 Artist Loops New 13_instruction: Disegna il rombo per 3 volte usando un
        ciclo.
      2-3 Artist Loops New 14_instruction: Ora disegna il rombo per 10 volte ma, tra
        un rombo e l'altro, effettua una rotazione di 90 gradi.
      2-3 Artist Loops New 15_instruction: Disegna qualcosa di divertente.
      2-3 Artist Loops New 2_instruction: Ecco una parte del codice che hai usato
        per disegnare il quadrato. Cosa succede se usi il blocco "ripeti 4 volte"
        per eseguire questo codice 4 volte?
      2-3 Artist Loops New 9_instruction: Per completare la freccia disegna semplicemente
        una V i cui lati siano entrambi di 50 pixel.
      2-3 Artist Match Hex Pic_instruction: 'Sfida: Aiuta a finire l''esagono.'
      2-3 Artist Match Rho Pic_instruction: 'Sfida: Completa il codice mancante.'
      2-3 Artist Match Sq Pic_instruction: 'Sfida: Completa il codice mancante'
      2-3 Artist Match Tri pic_instruction: Esercizio di Verifica (Associazioni)
      2-3 Artist Nested Loops 1_instruction: Hai già utilizzato i cicli per disegnare,
        ma sapevi che puoi inserire un ciclo all'interno di un altro ciclo?<br> Crea
        un ciclo che ripete per 3 volte tutti i blocchi di codice in grigio, allo
        scopo di disegnare la figura indicata.
      2-3 Artist Nested Loops 10_instruction: Ripeti 12 volte questo codice per completare
        la figura.
      2-3 Artist Nested Loops 11_instruction: Ripeti 4 volte questo codice per completare
        la figura, girando di 90 gradi alla fine di ciascun cerchio.
      2-3 Artist Nested Loops 12_instruction: Ripeti 12 volte questo codice per completare
        la figura.
      2-3 Artist Nested Loops 2_instruction: Ora disegna il triangolo 6 volte. Dopo
        ogni triangolo, devi girarti di 60 gradi prima di disegnare il successivo.
      2-3 Artist Nested Loops 3_instruction: Per disegnare questa figura devi ripetere
        il triangolo 12 volte. Per sapere di quanti gradi girare dopo ciascun triangolo,
        dividi il numero di gradi in un cerchio (360) per il numero di triangoli che
        stai disegnando (12).
      2-3 Artist Nested Loops 4_instruction: 'Per disegnare un fiore devi ripetere
        il rombo 12 volte. Suggerimento: i 12 rombi sono come i 12 triangoli che hai
        già disegnato - di quanti gradi devi girare dopo aver disegnato ciascun rombo?'
      2-3 Artist Nested Loops 5_instruction: Riempi le finestre di questo edificio
        usando un ciclo annidato. Le finestre sono grandi 20 pixel e distanti 20 pixel
        l'una dall'altra.
      2-3 Artist Nested Loops 6_instruction: Lungo la coda del dinosauro ci sono 8
        punte; ogni punta è lunga 30 pixel. Disegna il triangolo 8 volte, ma assicurati
        di spostarti in avanti dopo aver disegnato ciascun triangolo.
      2-3 Artist Nested Loops 7_instruction: Per disegnare un sole ripeti 10 volte
        questo triangolo. Dopo ogni triangolo devi spostarti e anche girarti. Puoi
        capire di quanto devi girarti dividendo il numero di gradi in un cerchio per
        il numero di figure che compongono il disegno.
      2-3 Artist Nested Loops 8_instruction: Ora aggiungi un po' di erba all'immagine.
        I ciuffi d'erba distano tra loro 50 pixel.
      2-3 Artist Nested Loops 9_instruction: Completa quest'immagine aggiungendo un
        fiore. Per disegnare il tuo fiore devi ripetere il rombo 12 volte.
      2-3 Artist Nested Loops Free Play_instruction: 'Tempo di giocare: disegna qualcosa
        di carino usando i cicli annidati.'
      2-3 Bee Conditionals 1_instruction: Ciao, sono un'ape. Aiutami a raccogliere
        il nettare dai fiori.
      2-3 Bee Conditionals 10_instruction: I fiori viola possono avere 0 oppure 1
        dose di nettare. Fai attenzione a non raccogliere il nettare da un fiore viola
        SE non ne ha.
      2-3 Bee Conditionals 11_instruction: Raccogli il nettare dai fiori che ne hanno.
      2-3 Bee Conditionals 12_instruction: Usa un ciclo per controllare la presenza
        del nettare e raccoglierlo da tutti questi fiori.
      2-3 Bee Conditionals 13_instruction: 'Raccogli il nettare e fai il miele. Domanda:
        cosa succede se usi un blocco condizionale "se nettare" su un fiore rosso?
        Puoi risolvere questo esercizio usando il blocco "ripeti ... volte" (ciclo)?'
      2-3 Bee Conditionals 14_instruction: Raccogli il nettare e fai il miele. Fai
        attenzione a non raccogliere nettare dai fiori viola, se non ne hanno.
      2-3 Bee Conditionals 15_instruction: Raccogli il nettare da tutti e quattro
        i fiori.
      2-3 Bee Conditionals 2_instruction: Ciao, sono un'ape! Aiutami a raccogliere
        tutto il nettare dai fiori. Usa il blocco "ripeti ... volte" (ciclo).
      2-3 Bee Conditionals 3_instruction: Aiutami a raccogliere tutto il nettare dai
        fiori e a produrre tutto il miele. Usa il blocco "ripeti ... volte" (ciclo).
      2-3 Bee Conditionals 4_instruction: Aiutami a raccogliere tutto il nettare dai
        fiori e a produrre tutto il miele.
      2-3 Bee Conditionals 5_instruction: I fiori viola possono avere una quantità
        di nettare pari a 0 oppure 1, ma tu non lo sai! Fai attenzione a non raccogliere
        nettare da un fiore viola se ne ha una quantità pari a 0. Usa il blocco "se"
        per controllare se la quantità è 0 oppure 1.
      2-3 Bee Conditionals 6_instruction: Controlla questo fiore con un blocco "se"
        per verificare se ha del nettare.
      2-3 Bee Conditionals 7_instruction: Raccogli il nettare da ogni fiore, se ne
        ha.
      2-3 Bee Conditionals 8_instruction: Su questo campo ci sono fiori rossi e viola.
        I fiori rossi possiedono una quantità nota di nettare, ma la quantità dei
        fiori viola è ignota. Raccogli tutto il nettare.
      2-3 Bee Conditionals 9_instruction: Raccogli tutto il nettare da ogni fiore.
      2-3 Bee Conditionals Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Raccogli tutto il nettare. Fai attenzione a non raccogliere il nettare
        dai fiori viola se non ne hanno.
      2-3 Bee Debugging 1_instruction: Questi blocchi sbagliati mi fanno perdere tempo.
        Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo"
        per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 10_instruction: Questi blocchi sbagliati mi fanno perdere
        tempo. Correggi gli errori per raccogliere tutto il nettare e trasformarlo
        in miele. Clicca su "Fai un passo" per eseguire il programma un blocco alla
        volta.
      2-3 Bee Debugging 2_instruction: Questi blocchi sbagliati mi fanno perdere tempo.
        Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo"
        per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 3_instruction: Questi blocchi mi fanno perdere la pazienza.
        Correggi l'errore(i) per raccogliere tutto il nettare.
      2-3 Bee Debugging 4_instruction: Questi blocchi sbagliati mi fanno perdere tempo.
        Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo"
        per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 5_instruction: Questi blocchi sbagliati mi fanno perdere tempo.
        Correggi gli errori per raccogliere tutto il nettare. Da ora in avanti puoi
        usare, oltre al comando "Fai un passo", anche il comando "Esegui" per eseguire
        tutti i blocchi.
      2-3 Bee Debugging 6_instruction: Questi blocchi sbagliati mi fanno perdere tempo.
        Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo"
        per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 7_instruction: Questi blocchi sbagliati mi fanno perdere tempo.
        Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo"
        per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 8_instruction: Questi blocchi sbagliati mi fanno perdere tempo.
        Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo"
        per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 9_instruction: Questi blocchi sbagliati mi fanno perdere tempo.
        Correggi gli errori per raccogliere tutto il nettare. Clicca su "Fai un passo"
        per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per
        raccogliere tutto il nettare.
      2-3 Bee Functions 1_instruction: Una funzione è una sequenza di blocchi di codice
        che esegue un compito. Usa la funzione "prendi 2 dosi di nettare" (get 2 nectar)
        per raccogliere il nettare da ogni fiore.
      2-3 Bee Functions 10_instruction: I fiori viola possono avere una quantità di
        nettare pari a 0 oppure 1. Definisci una funzione che raccoglie il nettare
        da un fiore viola solo se ne ha.
      2-3 Bee Functions 2_instruction: Una funzione è una sequenza di blocchi di codice
        che esegue un compito. Usa la funzione "prendi 5 dosi" (get 5) per raccogliere
        ogni volta 5 dosi di nettare. Assicurati anche di usare un ciclo per contare
        nel modo migliore.
      2-3 Bee Functions 3_instruction: Raccogli tutto il nettare da ogni fiore.
      2-3 Bee Functions 4_instruction: La funzione "vai a prendere il nettare" (move
        and get nectar) sposta l'ape sul fiore, raccoglie il nettare e fa tornare
        l'ape dove si trovava. Usa questa funzione per raccogliere tutto il nettare.
      2-3 Bee Functions 5_instruction: Ora c'è più nettare nei fiori. Modifica la
        funzione che trovi già pronta "vai a prendere 4 dosi di nettare" (move and
        get 4) in modo che raccolga 4 dosi di nettare ed usala per raccogliere tutto
        il miele dai fiori.
      2-3 Bee Functions 6_instruction: Adesso usa la stessa funzione per raccogliere
        il nettare dai tre fiori.
      2-3 Bee Functions 7_instruction: I fiori adesso sono nuovamente fuori. Modifica
        la funzione e utilizzala per raccogliere tutto il polline e trasformarlo in
        miele.
      2-3 Bee Functions 8_instruction: Definisci la tua funzione per prendere 7 dosi
        di nettare, spostarsi in avanti e produrre 7 dosi di miele. Usa questa funzione
        per raccogliere il nettare da ogni fiore e produrre il miele in ogni favo.
      2-3 Bee Functions 9_instruction: Definisci la tua funzione che si avvia lungo
        un cammino per prendere il nettare e fare il miele, per poi tornare all'inizio
        del cammino.
      2-3 Bee Functions Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa la funzione data per raccogliere il nettare da ogni fiore.
      2-3 Bee Functions Assessment 2_instruction: Questo è un esercizio di riepilogo
        -- Definisci una funzione per fare 3 dosi di miele alla volta.
      2-3 Bee Loops 1_instruction: 'Ogni fiore contiene un''unità di nettare. Raccogli
        il nettare da ciascun fiore. '
      2-3 Bee Loops 10_instruction: Riesci ad usare un ciclo "mentre" all'interno
        di altri due cicli per raccogliere tutto il nettare?
      2-3 Bee Loops 11_instruction: Usa un ciclo mentre "while" per raccogliere il
        polline dai fiori in questo campo.
      2-3 Bee Loops 12_instruction: Usa un ciclo mentre "while" per raccogliere il
        polline dai fiori in questo campo.
      2-3 Bee Loops 13_instruction: Questo è un esercizio di riepilogo -- Usa il blocco
        "ripeti" per raccogliere tutto il nettare.
      2-3 Bee Loops 1A_instruction: 'Ciao, sono un''ape. Riesci ad aiutarmi a raccogliere
        il nettare da questi fiori? '
      2-3 Bee Loops 2_instruction: Usa un ciclo per raccogliere il nettare e trasformarlo
        in miele.
      2-3 Bee Loops 2A_instruction: Riesci a raccogliere il nettare con meno blocchi,
        usando un ciclo?
      2-3 Bee Loops 3_instruction: Raccogli il nettare da ogni fiore e produci il
        miele in ogni favo.
      2-3 Bee Loops 3A_instruction: Riesci ad usare un ciclo per raccogliere tutto
        il nettare?
      2-3 Bee Loops 3B_instruction: Adesso usa il blocco "ripeti" sia per raccogliere
        tutto il nettare che per produrre tutto il miele.
      2-3 Bee Loops 4_instruction: Usa un ciclo simile a quello del precedente esercizio,
        ma usa l'istruzione "gira".
      2-3 Bee Loops 4A_instruction: Cosa succede se ripeti questa sequenza per 3 volte?
        Non dimenticarti di produrre il miele alla fine!
      2-3 Bee Loops 5_instruction: Usa un ciclo per scendere la scala e raccogliere
        tutto il nettare.
      2-3 Bee Loops 6_instruction: Usa un ciclo per raccogliere il nettare da ciascun
        fiore e produrre miele in ogni favo.
      2-3 Bee Loops 7_instruction: Metti questi blocchi all'interno di un ciclo in
        modo tale da raccogliere il nettare da ciascun fiore.
      2-3 Bee Loops 8_instruction: I fiori viola possiedono una quantità imprecisata
        di nettare. Usa il ciclo "mentre" per raccoglierlo tutto. Il blocco "mentre"
        farà qualunque cosa si trova all'interno di esso PER TUTTO IL TEMPO IN CUI
        la condizione scritta accanto a "mentre" è VERA, in questo caso per tutto
        il tempo in cui "nettare > 0".
      2-3 Bee Loops 9_instruction: Il ciclo while può essere usato come un'istruzione
        if all'interno di un ciclo. Aggiungi un ciclo while in questo programma per
        completare lo stesso compito.
      2-3 Bee Loops Assessment 1_instruction: Questo è un esercizio di riepilogo --
        Usa un ciclo annidato per raccogliere tutto il nettare da questi fiori.
      2-3 Maze 1_instruction: 'Puoi aiutarmi a catturare il maialino cattivo? Accosta
        due blocchi "vai avanti" uno sopra l''altro e poi premi "Esegui" per aiutarmi
        a raggiungerlo. '
      2-3 Maze 10_instruction: Guidami verso quel cattivone verde! Fai attenzione
        alla dinamite (TNT)
      2-3 Maze 11_instruction: Ho fame, fammi arrivare al fiore! Quante volte devi
        ripetere il mattoncino?
      2-3 Maze 12 (copy 1)_instruction: 'Riesci a sostituire la risposta precedente
        con solo due blocchi? (Aiuto: Crea un ciclo usando un blocco "ripeti".)'
      2-3 Maze 12 (copy 2)_instruction: 'Riesci a sostituire la risposta precedente
        con solo due blocchi? (Aiuto: Crea un ciclo usando un blocco "ripeti".)'
      2-3 Maze 12 (old)_instruction: Portami al maiale, ora con il comando Ripeti
        il blocco "n" volte!
      2-3 Maze 12_instruction: |
        Riesci a sostituire questi cinque blocchi con due soli blocchi?
        (Suggerimento: Crea un ciclo usando il blocco "ripeti 5 volte".)
      2-3 Maze 13 (old)_instruction: Portami al maiale, ora con il blocco "Ripeti
        fino a"!
      2-3 Maze 13_instruction: Fammi arrivare al maialino, usando solo 2 blocchi.
      2-3 Maze 14 (old)_instruction: Fammi arrivare al maialino con il blocco "ripeti
        ... fino a che"!
      2-3 Maze 14_instruction: Portami al girasole! (Dov'è quel blocco "Ripeti n volte"
        quando ne ho bisogno?)
      2-3 Maze 15 (old)_instruction: Fammi arrivare al maialino con il blocco "ripeti
        ... fino a che"!
      2-3 Maze 15_instruction: Usa due cicli per arrivare al maialino usando meno
        blocchi possibile.
      2-3 Maze 16 (old)_instruction: Fammi arrivare al maialino con il blocco "ripeti
        ... fino a che"!
      2-3 Maze 16 before_instruction: Fammi arrivare al maialino.
      2-3 Maze 16_instruction: Fammi arrivare al girasole. Ripeti la sequenza!
      2-3 Maze 2_instruction: Questo maialino mi fa arricciare le penne. Aiutami a
        prenderlo!
      2-3 Maze 3_instruction: Fammi fare il percorso per arrivare a quello sciocco
        maiale. Evita la dinamite (TNT) o le mie piume salteranno in aria!
      2-3 Maze 4_instruction: Guidami verso quel cattivone verde! Fai attenzione alla
        dinamite (TNT)
      2-3 Maze 5_instruction: Guidami verso quel cattivone verde! Fai attenzione alla
        dinamite (TNT)
      2-3 Maze 6_instruction: Mantieni la calma e aiutami a trovare quel cattivone
        di un maiale. Altrimenti potrei arrabbiarmi!
      2-3 Maze 7_instruction: Guidami verso quel cattivone verde! Fai attenzione alla
        dinamite (TNT)
      2-3 Maze 8_instruction: Fammi arrivare al maialino!
      2-3 Maze 9_instruction: Guidami verso quel cattivone verde! Fai attenzione alla
        dinamite (TNT)
      2-3 Maze Loops 1_instruction: Riesci a farmi arrivare al maialino usando 5 blocchi?
      2-3 Maze Loops 17_instruction: Fammi arrivare al girasole!
      2-3 Maze Loops 18_instruction: Fammi arrivare al girasole!
      2-3 Maze Loops 19_instruction: Fammi arrivare al girasole!
      2-3 Maze Loops 20_instruction: Fammi arrivare al girasole!
      2-3 Maze Loops 21_instruction: Fammi arrivare al girasole!
      2-3 Maze Loops Assessment 1_instruction: 'Questo è un esercizio di riepilogo
        -- Fammi arrivare al girasole, usando solo 5 blocchi! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Fammi arrivare al maiale! Quale blocco viene ripetuto?
      2-3 Maze sq10v2_instruction: Fammi arrivare al maiale! Quale blocco viene ripetuto?
      2-3 maze sq11_instruction: Fammi arrivare al maialino! Quale blocco viene ripetuto?
      2-3 maze sq12_instruction: Puoi sostituire la precedente risposta con un ciclo
        usando un blocco "ripeti n volte"?
      2-3 maze sq13_instruction: |
        Caro umano, me zombie. Devo... arrivare... girasole.
        Crea un ciclo col blocco "ripeti fino a che".
      2-3 maze sq14_instruction: Puoi arrivare al girasole usando solo quattro blocchi?
      2-3 maze sq15_instruction: Puoi arrivare al girasole usando solo cinque blocchi?
      2-3 maze sq16_instruction: Questo esercizio è simile al precedente, ma leggermente
        diverso. Puoi risolverlo usando solo cinque blocchi?
      2-3 Maze sq2_instruction: Fammi fare il percorso per arrivare a quello sciocco
        maiale. Evita la dinamite (TNT) o le mie piume salteranno in aria!
      2-3 Maze sq3_instruction: Guidami verso quel cattivone verde! Fai attenzione
        alla dinamite (TNT)
      2-3 Maze sq4_instruction: Mantieni la calma e aiutami a trovare quel cattivone
        di un maiale. Altrimenti potrei arrabbiarmi!
      2-3 Maze sq5_instruction: Portami dal maiale! Quante volte devi ripetere un
        blocco?
      2-3 Maze sq6_instruction: 'Puoi sostituire la precedente risposta con solo due
        blocchi? (Suggerimento: Crea un ciclo usando il blocco "ripeti n volte".)'
      2-3 Maze sq7_instruction: Fammi arrivare all'intruso verde utilizzando solo
        tre blocchi.
      2-3 Maze sq8_instruction: Portami dal maiale! (Dov'è quel blocco "Ripeti n volte"
        quando ne ho bisogno?)
      2-3 Maze sq9_instruction: Crea dei cicli per raggiungere il maiale usando meno
        blocchi.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Aiuta l'uccellino a catturare il maialino cattivo muovendosi
        in avanti
      4-5 Artist 1_instruction: Aiutami a disegnare il quadrato. (Ogni linea è lunga
        300 pixel)
      4-5 Artist 10_instruction: Premi "Esegui" per provare il codice. Poi, ripetilo
        abbastanza volte per completare il disegno. I colori saranno diversi ogni
        volta.
      4-5 Artist 11_instruction: Completa le linee verdi. Le linee sono lunghe 300
        pixel e distanziate di 15 pixel.
      4-5 Artist 2_instruction: Riesci a ripetere questo codice per completare il
        quadrato?
      4-5 Artist 3.5_instruction: Cerca di immaginare cosa succede se si eseguono
        questi blocchi di codice già pronti (o premi "Esegui" per verificarlo). Poi,
        ripetili una quantità di volte sufficiente a completare il disegno. I colori
        saranno diversi ogni volta.
      4-5 Artist 3_instruction: Questa aiuola rettangolare ha un perimetro di 600
        pixel. Il lato lungo ha una lunghezza di 200. Disegna il rettangolo.
      4-5 Artist 4_instruction: Quanti gradi ci sono in un cerchio?  Inserisci questo
        valore nel blocco "ripeti ... volte" in modo da creare un cerchio tutto colorato.
      4-5 Artist 5_instruction: Che angolo devi usare in questo esercizio?
      4-5 Artist 6_instruction: 'Questo triangolo è equilatero: tutti gli angoli sono
        quindi di 60 gradi. Ogni lato è lungo 200 pixel. Completa il disegno.'
      4-5 Artist 7_instruction: Questo triangolo rettangolo ha gli angoli di 30, 60
        e 90 gradi. Il lato obliquo è lungo il doppio del lato verticale, che è alto
        100 pixel. Completa il disegno.
      4-5 Artist 8_instruction: La linea di centrocampo in un campo di calcio è perpendicolare
        alle linee laterali. Questo campo ha un perimetro di 800 pixel ed è lungo
        240 pixel. Quanto è lunga la linea di centrocampo? Disegnare i bordi del campo
        e la linea di centrocampo.
      4-5 Artist 9_instruction: Disegna l'altra metà in modo che il disegno sia simmetrico.
        I triangoli sono equilateri e con il lato di 50 pixel.
      4-5 Artist Assessment 1_instruction: Questo è un esercizio di riepilogo -- Usa
        un ciclo per disegnare il triangolo equilatero. Ogni lato è lungo 300 pixel.
      4-5 Artist For Loops 1_instruction: Metti i numeri da 1 a 10 nei blocchi larghi
        ed esegui il codice.
      4-5 Artist For Loops 11_instruction: Completa il blocco "for" in modo che conti
        0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: 'Cosa succede se inverti i numeri di "from"
        con quelli di "to"? Completa il blocco "for" così che conti 200, 180, 160,
        140, 120... 0. '
      4-5 Artist For Loops 13_instruction: 'Questo disegno è iniziato senza un ciclo
        "for" ed impiega troppi blocchi! Usa un blocco "for" per completare la spirale.
        Suggerimento: la lunghezza dell''ultima linea è di 250 pixel.'
      4-5 Artist For Loops 14_instruction: 'Qualcuno ha iniziato il codice, ma poi
        si è accorto che ci deve essere un modo più veloce! Usa un blocco "per" per
        sostituire i blocchi e completare la spirale triangolare. (Aiuto: la lunghezza
        dell''ultima linea è di 300 pixel'
      4-5 Artist For Loops 15_instruction: 'Qualcuno ha lanciato il codice, ma poi
        ha realizzato che ci deve essere un modo più veloce! Usa il blocco "for" per
        sostituire i blocchi e completa la spirale esagonale. (Suggerimento: la lunghezza
        dell''ultima linea è 200 pixel.)'
      4-5 Artist For Loops 2_instruction: |
        This is a "for" block. Instead of typing
        1,2,3... 10, the "for" block can repeat the blocks inside it and count the
        numbers for you. Place the number 10 into the "to" section of the "for"
        block.
      4-5 Artist For Loops 3_instruction: Come possiamo contare da 1 a 50? Modifica
        il blocco "for".
      4-5 Artist For Loops 4_instruction: Completa il blocco "for" così che conti
        da 1 a 10 a passi di 1.
      4-5 Artist For Loops 6_instruction: Disegna dei quadrati con lato di 50, 60,
        70, 80, e 90 pixel. Devi usare la funzione "disegna un quadrato" 5 volte.
      4-5 Artist For Loops 7_instruction: 'Disegna lo stesso quadrato ma usa il blocco
        "conta con" per cambiare le dimensioni. Posiziona il blocco "contatore" nella
        funzione "disegna un quadrato". Suggerimento: E'' nella categoria Variabili.'
      4-5 Artist For Loops 8_instruction: Puoi completare il programma ponendo i blocchi
        all'interno di un blocco "for" che conta da 10 a 200 a passi di 10? Puoi trovare
        il blocco "for" nella categoria Loop.
      4-5 Artist For Loops 9_instruction: Questi cerchi hanno dimensione di 5, 10,
        15, 20, 25, 30 e 35. Disegna i cerchi utilizzando un blocco "for".
      4-5 Artist Free Draw 1_instruction: Disegna liberamente!  Disegna qualunque
        cosa ti venga l'ispirazione di creare.
      4-5 Artist Functions 1_instruction: Usa un ciclo ripetuto per disegnare questo
        triangolo.
      4-5 Artist Functions 10a_instruction: Posiziona questo codice nella funzione
        "disegna un fiocco di neve" e sostituisci il 50 con il parametro 'dimensione'.
        La funzione è già richiamata per creare un fiocco di neve di 100 pixel.
      4-5 Artist Functions 10b_instruction: 'Usa la funzione ''disegna un fiocco di
        neve'' per creare fiocchi di varie misure. Suggerimento: il primo fiocco è
        lungo 25 e ogni fiocco è grande il doppio del precedente.'
      4-5 Artist Functions 11_instruction: 'Questa funzione "disegna un esagono" usa
        la funzione " disegna un triangolo". Completa la funzione esagono. (Suggerimento:
        Un esagono ha 6 facce uguali di 100 pixel)'
      4-5 Artist Functions 12_instruction: 'Completa la funzione ''disegna le onde''.
        Ogni onda è composta da un''onda Alta e da un''onda Bassa. Suggerimento: Disegna
        5 onde blu.'
      4-5 Artist Functions 13 Free play_instruction: |
        Qui ci sono alcune funzioni per
        disegnare pianeti, stelle, razzi, e robot. Usali nel modo che preferisci per creare
        immagini che puoi condividere con i tuoi amici.
      4-5 Artist Functions 14 Free play_instruction: Qui, ti abbiamo fornito di diverse
        funzioni. usale nel modo che preferisci in uno o più cicli per creare immagini
        che puoi condividere con i tuoi amici. Clicca "Esegui" per vedere un esempio.
      4-5 Artist Functions 15 Assessment_instruction: Questo è un esercizio di riepilogo
        -- Usa la funzione "disegna un quadrato" per creare i quadrati. I quadrati
        hanno i lati di 50, 100 e 150 pixel.
      4-5 Artist Functions 2a_instruction: Ora inserisci questi blocchi in una nuova
        funzione chiamata "disegna un triangolo piccolo" e richiamala.
      4-5 Artist Functions 2b_instruction: Ora crea una funzione chiamata "disegna
        un triangolo piccolo" usando i blocchi assegnati.
      4-5 Artist Functions 3_instruction: Ora crea le funzioni "disegna un triangolo
        medio" e "disegna un triangolo grande". La funzione "disegna un triangolo
        piccolo" è già stata creata per voi. I triangoli hanno i lati lunghi 50 (piccoli),
        100 (medi) e 150 (grandi).
      4-5 Artist Functions 4_instruction: Questa nuova funzione "disegna un triangolo"
        ha un parametro e può essere utilizzata per le tre funzioni precedenti. Disegna
        gli stessi triangoli usando questa nuova funzione.
      4-5 Artist Functions 5_instruction: Riesci a modificare la funzione "disegna
        un triangolo" nella funzione "disegna un quadrato" per cambiare il disegno?
      4-5 Artist Functions 6_instruction: 'Usa le funzioni "disegna un triangolo"
        e "disegna un quadrato" per disegnare una casa. (Suggerimento: I lati del
        quadrato sono di 200 pixel)'
      4-5 Artist Functions 6b_instruction: Usa le funzioni disegna un quadrato e un
        triangolo insieme con gli altri blocchi per creare una casa aggiungendo la
        funzione "disegna una casa" e lanciandola.
      4-5 Artist Functions 7_instruction: Usa la funzione "disegna una casa" per costruire
        due case di 100 e 50 pixel. Le due case sono separate da 50 pixel.
      4-5 Artist Functions 8_instruction: La funzione "disegna un fiore" ha un parametro
        che determina la lunghezza dello stelo. Impostalo a 200 e guarda cosa succede.
      4-5 Artist Functions 9_instruction: Disegna questi 3 fiori. L'altezza del primo
        è 100 e il successivo sempre 50 pixel più alto del precedente. I fiori sono
        distanti 100 pixel tra di loro.
      4-5 Artist Patterns 1_instruction: Riesci a disegnare questo quadrato usando
        un ciclo? Ogni lato è lungo 20 pixel.
      4-5 Artist Patterns 10_instruction: 'Questo codice disegna due righe di esagoni.
        Per disegnare tutto il favo devi eseguire l''intero codice 4 volte. Suggerimento:
        per essere sicuro che l''artista non disegni fuori dallo schermo, assicurati
        di tornare indietro di 120 pixel nel ciclo più esterno.'
      4-5 Artist Patterns 11_instruction: 'Quante volte devi eseguire questo codice
        per disegnare un semicerchio? Suggerimento: se in un cerchio ci sono 360 gradi
        e ogni ciclo avanza di 3 gradi, quante volte dovresti ripetere il ciclo per
        disegnare un cerchio intero?'
      4-5 Artist Patterns 12_instruction: Che cosa succede se copi il ciclo che ti
        è stato dato, ma fai girare l'artista a sinistra invece che a destra? Usando
        un ciclo annidato riesci a disegnare quest'onda?
      4-5 Artist Patterns 13_instruction: 'Per creare questa cornice devi ripetere
        4 volte tutto il codice che trovi già pronto. Attento agli spigoli, non basta
        girare di 90 gradi! Suggerimento: se, avanzando di 3 gradi per ciclo, hai
        bisogno di 60 ripetizioni per disegnare mezzo cerchio, quale di questi blocchi
        di codice ti permette di disegnare un quarto di cerchio per gli spigoli?'
      4-5 Artist Patterns 2_instruction: Se posizioni il ciclo per disegnare il quadrato
        all'interno di un altro ciclo, ottieni un ciclo annidato. Cosa devi aggiungere
        al ciclo più esterno per essere sicuro che tutti i 15 quadrati siano allineati
        l'uno all'altro?
      4-5 Artist Patterns 3_instruction: Andiamo ancora più a fondo! Abbiamo annidato
        il ciclo che disegna una cella della griglia all'interno di un altro ciclo,
        per disegnare così tutta la riga di celle. Per completare la griglia, devi
        far tornare l'artista indietro in modo tale da disegnare le righe successive.
        Quale sequenza di blocchi devi posizionare alla fine del ciclo più esterno
        per raggiungere questo obiettivo?
      4-5 Artist Patterns 4_instruction: 'Questo rombo ha tutti i lati di 50 pixel,
        e due tipi di angoli: da 120 e da 60 gradi. Usa un ciclo per disegnarlo.'
      4-5 Artist Patterns 5.5_instruction: Quante volte devi ripetere questo blocco
        per disegnare un intero reticolo di diamanti?
      4-5 Artist Patterns 5_instruction: Ripetiamo il disegno 6 volte per ottenere
        una fila di rombi. Fai attenzione! Il codice per disegnare il rombo viene
        ora ripetuto 3 volte invece di 2 - secondo te qual'è il motivo?
      4-5 Artist Patterns 6_instruction: Quante volte devi ripetere questo codice
        per disegnare l'intera griglia di rombi?
      4-5 Artist Patterns 7_instruction: Modifichiamo il codice dell'esercizio precedente
        per disegnare una figura più complessa. Osserva il modo in cui si sovrappongono
        i rombi in questa figura e prova a dimezzare il primo "salta all'indietro"
        impostando 50 al posto di 100.  Di quanto deve essere modificato il secondo
        "salta all'indietro" per completare la figura?
      4-5 Artist Patterns 8_instruction: Disegna un esagono con lati di 40 pixel e
        angoli di 60 gradi usando un ciclo.
      4-5 Artist Patterns 9.5_instruction: Per disegnare due righe di esagoni devi
        inserire questo codice all'interno di un altro ciclo.  Osserva il modo in
        cui la seconda riga viene spostata verso destra.
      4-5 Artist Patterns 9_instruction: 'Ripetiamo il disegno 3 volte per ottenere
        una fila di esagoni. Suggerimento: gli estremi, sinistro e destro, di ciascun
        esagono distano 80 pixel.'
      4-5 Artist Patterns Free Play_instruction: 'Tempo di giocare: prova a fare un
        disegno tutto tuo!'
      4-5 Bee Conditionals - FC Test_instruction: Adesso l'ape vuole solo del nettare.
        Ricordati che non tutti gli oggetti nascosti sono fiori, quindi controlla
        sotto ogni nuvoletta in modo da raccogliere il nettare solo quando ci sono
        fiori.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: L'ape non può sapere se dietro la nuvola
        c'è un fiore oppure un favo. Può raccogliere il nettare solo da un fiore,
        quindi controlla prima se c'è un fiore oppure un favo!
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: Adesso l'ape vuole solo del nettare. Ricordati
        che non tutti gli oggetti nascosti sono fiori, quindi controlla sotto ogni
        nuvoletta in modo da raccogliere il nettare solo quando ci sono fiori.
      4-5 Bee Conditionals 3_instruction: Ora l'ape vuole solo fare il miele. Quindi
        controlla, in modo che l'ape faccia il miele solo quando ci sono favi.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: L'oggetto nascosto può essere un fiore oppure
        un favo. Usa il blocco "se-altrimenti" per raccogliere il nettare "se" si
        tratta di un fiore, "altrimenti" per produrre il miele (dato che, in questo
        caso, si tratta sicuramente di un favo).
      4-5 Bee Conditionals 5_instruction: Potrebbe esserci un fiore oppure un favo
        dietro quelle nuvole. Usa un blocco "se-altrimenti" per raccogliere il nettare
        "se" si tratta di un fiore, "altrimenti" per produrre il miele (dato che,
        in questo caso, si tratta sicuramente di un favo).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: |
        Un fiore viola può avere 1, 2 o 3 dosi di nettare, ma tu non sai quante ne ha!

        In questo esercizio un blocco "se-altrimenti" viene combinato con un altro blocco "se-altrimenti" per creare un blocco con tre ramificazioni: "se", "altrimenti-se" , "altrimenti". Prova a completare il programma in modo tale da raccogliere tutto il nettare.
      4-5 Bee Conditionals 7_instruction: Ricordati che un fiore viola può avere 1,
        2, 3 dosi di nettare. Completa la funzione "controlla fiore viola" ed usala
        per raccogliere tutto il nettare dai fiori.
      4-5 Bee Conditionals 8_instruction: Scrivi una funzione "controlla fiore - fai
        miele". La tua funzione deve controllare quanto nettare c'è nel fiore viola
        e raccoglierlo TUTTO, poi andare avanti e produrre UNA SOLA dose di miele.
      4-5 Bee Conditionals Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- La funzione "prendi il nettare o fai il miele" (get nectar or make honey)
        è sbagliata e incompleta. Correggila e completala per raccogliere tutto il
        nettare e produrre il miele. Ricorda che i fiori viola possono avere 1, 2
        o 3 dosi di nettare.
      4-5 Bee Debugging 1_instruction: Questi blocchi sbagliati mi fanno perdere tempo.
        Riesci a correggerli?
      4-5 Bee Debugging 10_instruction: Trova gli errori e correggili.
      4-5 Bee Debugging 11_instruction: Stai effettuando ogni ripetizione il numero
        di volte corretto?
      4-5 Bee Debugging 2_instruction: Aiuta l'ape a raccogliere tutto il nettare
        dai fiori e a produrre tutto il miele.
      4-5 Bee Debugging 3_instruction: Trova gli errori e correggili.
      4-5 Bee Debugging 4_instruction: Questa sequenza di blocchi è sbagliata. Qual
        è lo schema di percorso corretto da ripetere?
      4-5 Bee Debugging 5_instruction: C'è qualcosa che non va...
      4-5 Bee Debugging 6_instruction: Il fiore viola ha una quantità imprecisata
        di nettare. Correggi la sequenza di blocchi in modo da raccogliere tutto il
        nettare dal fiore.
      4-5 Bee Debugging 7_instruction: Al codice della funzione che trovi già pronto
        manca qualcosa...
      4-5 Bee Debugging 8_instruction: Il codice della funzione che trovi già pronto
        è corretto, ma la funzione non viene usata.
      4-5 Bee Debugging 9_instruction: Perché l'ape non riesce a produrre tutto il
        miele?
      4-5 Bee Debugging Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Correggi il codice.
      4-5 Bee Nested Loops 1_instruction: Usa un ciclo per raccogliere tutto il nettare.
      4-5 Bee Nested Loops 2_instruction: Raccogli tutto il nettare da ogni fiore.
        Usa un ciclo annidato.
      4-5 Bee Nested Loops 3_instruction: Raccogli tutto il nettare inserendo il codice
        che trovi già pronto (che contiene un ciclo) all'interno di un ciclo (ciclo
        annidato).
      4-5 Bee Nested Loops 4_instruction: Raccogli tutto il nettare da ogni fiore
        e produci il miele in ogni favo. Usa un ciclo annidato.
      4-5 Bee Nested Loops 5_instruction: Usa un ciclo annidato per raccogliere tutto
        il nettare.
      4-5 Bee Nested Loops 6_instruction: Raccogli tutto il nettare.
      4-5 Bee Nested Loops 7_instruction: Inserisci all'interno di un altro ciclo
        il codice che trovi già pronto, così da creare un ciclo annidato e raccogliere
        tutto il nettare dai fiori.
      4-5 Bee Nested Loops 8_instruction: 'Raccogli tutto il nettare da questi fiori
        utilizzando un ciclo WHILE nidificato. Sostituisci il blocco "Ripeti n Volte"
        interno con un blocco WHILE. '
      4-5 Bee Nested Loops 9_instruction: Raccogli tutto il nettare da questi fiori
        inserendo un ciclo "mentre" all'interno di un ciclo "ripeti".
      4-5 Bee Nested Loops Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa i cicli per raccogliere tutto il nettare e trasformarlo in miele.
      4-5 Bee Nested Loops Rows_instruction: Raccogli tutto il nettare da queste file
        di fiori! Usa i cicli annidati.
      4-5 Maze 1 (copy 1)_instruction: Caro umano, me zombie. Devo... arrivare...
        girasole.
      4-5 Maze 1_instruction: |
        Caro umano, me zombie. Devo... arrivare... girasole.

        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta, oppure sul comando "Esegui" per eseguire tutti i blocchi.
      4-5 Maze 10_instruction: Puoi arrivare al girasole usando solo quattro blocchi?
      4-5 Maze 11_instruction: Puoi arrivare al girasole usando solo sei blocchi?
      4-5 Maze 12_instruction: Questo esercizio è leggermente diverso. Puoi arrivare
        al girasole usando solo sei blocchi in tutto?
      4-5 Maze 13_instruction: Fammi arrivare al maialino!
      4-5 Maze 14_instruction: Fammi arrivare al maialino! Usa il blocco "ripeti fino
        a che".
      4-5 Maze 2 (copy 1)_instruction: Fai arrivare lo zombie fino al girasole, ma
        evita la tagliola!
      4-5 Maze 2_instruction: Fai arrivare lo zombie fino al girasole, ma evita la
        tagliola!
      4-5 Maze 3 (copy 1)_instruction: Devo... arrivare... girasole.
      4-5 Maze 3_instruction: Devo... arrivare... girasole.
      4-5 Maze 4 (copy 1)_instruction: |
        Prova ad usare il blocco "ripeti 5 volte " per risolvere l'esercizio con meno blocchi...

        Il blocco "ripeti ... volte" (detto anche "ciclo") mi farà "ripetere" le azioni che si trovano all'interno del blocco per un numero di volte pari a quello che hai impostato.
      4-5 Maze 4_instruction: |
        Prova ad usare il blocco "ripeti 5 volte " per risolvere l'esercizio con meno blocchi...

        Il blocco "ripeti ... volte" (detto anche "ciclo") mi farà "ripetere" le azioni che si trovano all'interno del blocco per un numero di volte pari a quello che hai impostato.
      4-5 Maze 5 (copy 1)_instruction: Prova a risolvere questo esercizio usando meno
        blocchi possibile.
      4-5 Maze 5_instruction: Prova a risolvere questo esercizio usando meno blocchi
        possibile.
      4-5 Maze 6 (copy 1)_instruction: Prova a risolvere questo esercizio usando meno
        blocchi possibile.
      4-5 Maze 6_instruction: Prova a risolvere questo esercizio usando meno blocchi
        possibile.
      4-5 Maze 7_instruction: |
        Caro umano, me zombie. Devo... arrivare... girasole.

        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta, oppure sul comando "Esegui" per eseguire tutti i blocchi.
      4-5 Maze 8_instruction: Usa il blocco "ripeti" per far arrivare lo zombie fino
        al girasole. (Evita le tagliole!)
      4-5 Maze 9_instruction: |
        Crea un ciclo usando il nuovo blocco "ripeti fino a che".

        Esso mi farà "ripetere" le azioni "fino a che" raggiungo il girasole.
      4-5 Maze Assessment 1_instruction: Questo è un esercizio di riepilogo -- Fammi
        arrivare al girasole.
      4-5 Maze Conditionals 1_instruction: Usa il blocco "ripeti fino a che" per far
        arrivare lo zombie fino al girasole.
      4-5 Maze Conditionals 10_instruction: Riesci ad aggiungere solo 3 blocchi per
        farmi uscire da un labirinto più complesso? Se lo fai correttamente, riuscirò
        a camminare lungo un percorso tortuoso di qualsiasi lunghezza.
      4-5 Maze Conditionals 2_instruction: Usa il blocco "ripeti fino a che" per far
        arrivare lo zombie fino al girasole.
      4-5 Maze Conditionals 3_instruction: 'Usa il blocco "se c''è strada" per decidere
        quando farmi svoltare. Attenzione: in questo caso devi aggiungere solo un
        blocco! Osserva, però, il modo in cui abbiamo impostato questo programma in
        modo tale che, la prossima volta, tu riesca a farlo tutto da solo.'
      4-5 Maze Conditionals 4_instruction: Ok, questo è quasi come l'esercizio precedente,
        ma devi ricordarti come hai usato insieme i blocchi "se c'è strada" e "ripeti
        fino a che".
      4-5 Maze Conditionals 5_instruction: |
        Me ... volere ... girasole!

        Usa un blocco "se c'è strada" per farmi arrivare là utilizzando il minor numero possibile di blocchi.
      4-5 Maze Conditionals 6_instruction: |
        Me ... volere ... girasole!

        Usa un blocco "se c'è strada" per farmi arrivare là utilizzando il minor numero possibile di blocchi.
      4-5 Maze Conditionals 7_instruction: 'Ok, esercitiamoci di nuovo per far pratica:
        questo esercizio non è molto diverso, ma stai attento alle piante carnivore!'
      4-5 Maze Conditionals 8_instruction: 'Il blocco "se-altrimenti" controlla una
        condizione: SE è vera fa una cosa ALTRIMENTI ne fa un''altra. Prova ad usare
        questo nuovo blocco per farmi arrivare al girasole.'
      4-5 Maze Conditionals 9_instruction: 'Ancora un esercizio con il blocco "se-altrimenti":
        riesci a risolverlo correttamente al primo tentativo?'
      4-5 Maze Conditionals Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa i blocchi "ripeti fino a che" e "se-altrimenti" per arrivare al girasole
        utilizzando il minor numero possibile di blocchi.
      4-5 Nested Loops 1_instruction: 'Completa il codice per disegnare questi triangoli.
        Le istruzioni per disegnare il primo sono già pronte. Suggerimento: il disegno
        dei 3 triangoli richiede in totale una rotazione complessiva di 360 gradi.'
      4-5 Nested Loops 10_instruction: Disegna l'ultima fila di stelle su questa bandiera
        inserendo i blocchi forniti in un ciclo. Le stelle sono distanti 50 pixels,
        ma ricorda che le stelle sono larghe 30 pixels.
      4-5 Nested Loops 11_instruction: Riesci a disegnare i 10 quadrati di questo
        marciapiede utilizzando un ciclo annidato? Ogni quadrato è largo 30 pixel.
      4-5 Nested Loops 12_instruction: Riesci a disegnare questi 36 triangoli utilizzando
        un ciclo annidato?
      4-5 Nested Loops 2_instruction: 'Ora inserisci le istruzioni già presenti (che
        contengono un ciclo) all''interno di un altro ciclo, in modo da disegnare
        10 triangoli. Un ciclo inserito all''interno di un altro ciclo viene detto
        "ciclo annidato". Suggerimento: il disegno dei 10 triangoli richiede in totale
        una rotazione complessiva di 360 gradi.'
      4-5 Nested Loops 3_instruction: Disegna un sole inserendo in un ciclo il codice
        (che è un ciclo) che trovi già pronto. Un ciclo inserito in un altro ciclo
        si chiama "ciclo annidato".
      4-5 Nested Loops 5_instruction: Inserisci in un ciclo il codice che trovi già
        pronto, così da disegnare un mulino a vento.
      4-5 Nested Loops 6_instruction: Riesci a disegnare un esagono inserendo in un
        ciclo le istruzioni per disegnare un triangolo?
      4-5 Nested Loops 7_instruction: 'Ripeti 10 volte la figura disegnata dal codice
        che trovi già pronto. Di quanti gradi devi ruotare ad ogni ripetizione? (Suggerimento:
        quanto fa 360 diviso 10?)'
      4-5 Nested Loops 8_instruction: 'Ripeti 6 volte la figura disegnata dal codice
        che trovi già pronto. Di quanti gradi devi ruotare ad ogni ripetizione? (Suggerimento:
        quanto fa 360 diviso 6?)'
      4-5 Nested Loops 9_instruction: Finisci di disegnare i denti del coccodrillo!
      4-5 Nested Loops Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa un ciclo annidato per completare il disegno.
      4-5 While Loops 1_instruction: Spostami verso la buca e riempila con 2 palate
        di terra, usando il blocco "riempi 1".
      4-5 While Loops 2_instruction: Spostami verso il mucchio di terra e rimuovilo
        con 5 palate di terra, usando il blocco "rimuovi 1".
      4-5 While Loops 3_instruction: 'Spostami verso il mucchio di terra e rimuovilo
        del tutto, poi spostami verso la buca e riempila completamente. Suggerimento:
        Usa il minor numero possibile di blocchi.'
      4-5 While Loops 4_instruction: 'Wow, ho trovato una buca davvero profonda! Non
        so quante palate di terra saranno necessarie per riempirla completamente.
        Riesci a scrivere un programma che la riempie fino a quando il terreno è livellato?
        Suggerimento: usa le opzioni nel menu a discesa del blocco "mentre".'
      4-5 While Loops 5_instruction: Wow, ora ci sono due buche davvero profonde!
        Riesci a scrivere un programma che le riempie entrambe fino a quando il terreno
        è livellato?
      4-5 While Loops 6_instruction: Wow, c'è un grande mucchio di terra! Riesci a
        scrivere un programma che lo rimuove completamente fino a quando il terreno
        è livellato?
      4-5 While Loops 7_instruction: Wow, ora ci sono 3 grandi mucchi di terra! Riesci
        a scrivere un programma che li rimuove completamente fino a quando il terreno
        è livellato?
      4-5 While Loops 8_instruction: 'Ci sono una buca davvero profonda e un grande
        mucchio di terra. Quante palate di terra sono necessarie per livellare il
        terreno? Suggerimento: Usa il blocco "mentre" per entrambi.'
      4-5 While Loops Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Ci sono molte buche e mucchi di terra. Aiutami a riempire le buche e a
        rimuovere i mucchi di terra per rendere livellato il terreno.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). \n"
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: test
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: |
        Create a sun by nesting the starter code
        in another loop. This is called a nested loop.\r
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa un ciclo annidato per completare il disegno.
      Auto Open Function Editor_instruction: 'Puoi chiamare funzioni dall''interno
        di altre funzioni! Usando la tua funzione "forma" come base, crea 3 forme
        di una casa, ognuna più larga di 20 pixel rispetto alla precedente, iniziando
        da una lunghezza di 50 pixel. Può essere utile utilizzare un ciclo contatore. '
      Bee Recommended Blocks test_instruction: I fiori viola possono avere una quantità
        di nettare pari a 0 oppure 1, ma tu non lo sai! Fai attenzione a non raccogliere
        nettare da un fiore viola se ne è sprovvisto. Usa il blocco "se" per controllare
        se la quantità di nettare è 0 oppure 1.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Questa ape ha un sacco di lavoro da fare! Non trovi
        nessun modello che sia possibile utilizzare per semplificare il codice?
      Busy Bee_instruction: Questa ape ha un sacco di lavoro da fare! Non trovi nessun
        modello che sia possibile utilizzare per semplificare il codice?
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: Questo è un esercizio di verifica -- Usa
        il blocco "ripeti" per raccogliere tutto il nettare.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Riesci a farmi arrivare al maialino usando
        5 blocchi?
      Course 4 2_instruction: Adesso l'ape vuole solo del nettare. Ricordati che non
        tutti gli oggetti nascosti sono fiori, quindi controlla in modo da raccogliere
        il nettare solo quando ci sono fiori.
      Course 4 Artist 1_instruction: Aiutami a disegnare un quadrato. (Ogni lato è
        lungo 200 pixel)
      Course 4 Artist 10_instruction: |
        Ecco il codice per una figura interessante. Che cosa succede se la ripeti? Nota che il codice per disegnare questa figura fa ruotare l'artista di 420 gradi in totale. Ciò significa che, una volta completata la figura, l'artista sarà rivolto in una direzione differente rispetto a quando ha iniziato. Questa nuova direzione sarà esattamente 60 gradi a destra rispetto alla direzione iniziale.<br><br>
        Se ripeti per 6 volte questo codice così com'è, ottieni una rotazione totale pari a 6x60, ossia un ciclo completo di 360 gradi.<br><br>
        Se vuoi chiudere il cerchio con solo 4 ripetizioni, è necessario che l'artista ruoti di 360 gradi/4 = 90 gradi ogni volta. Puoi farlo aggiungendo un blocco "gira a destra di 30 gradi" al ciclo più esterno (dato che 60+30 = 90).<br><br>
        Se invece vuoi ripetere la figura 12 volte, è necessario che l'artista effettui una rotazione di 360 gradi/12 = 30 gradi ad ogni iterazione. Ciò significa che, prima che la figura venga ripetuta, dovrai far tornare un po' indietro l'artista aggiungendo un blocco "gira a sinistra di 30 gradi" (infatti 60-30 = 30).
      Course 4 Artist 11_instruction: |
        E ora una piccola sfida! Per ottenere la figura che vedi devi usare solo blocchi che ti sono già stati mostrati. Riesci a capire come ricrearla? Sentiti libero di fare più tentativi e di commettere errori. Nessuno si aspetta che tu ci riesca perfettamente al primo tentativo. <br><br>
        Suggerimento: La figura che viene ripetuta è quasi identica a quella del precedente esercizio, l'unica differenza consiste nel fatto che il primo ciclo disegna tratti un po' più corti.
      Course 4 Artist 12_instruction: |
        <a href="https://studio.code.org/c/105671120">Clicca qui</a> e poi su "Esegui". Ora hai imparato tutto quello che devi sapere per realizzare un disegno come quello mostrato al precedente link! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.<br><br>
        Vuoi realizzare la figura che ti abbiamo mostrato? Ecco alcuni suggerimenti:<br><br>
        1. Ogni figura che viene ripetuta è formata dalla combinazione di mezzo esagono con due terzi di un triangolo.<br><br>
        2. Ogni singola figura è quasi uguale a quella dell'ultimo puzzle, tranne per il fatto che il mezzo esagono è un po' più grande.<br><br>
        3. Le prime tre linee sono lunghe 60 pixel e devi ruotare di 60 gradi. Le ultime due linee sono lunghe 80 pixel e devi ruotare di 120 gradi.<br><br>
        Vuoi sapere come è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/105671120">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist 13_instruction: Hai ancora voglia di giocare? Ecco una tela
        bianca su cui puoi disegnare qualunque cosa tu voglia!
      Course 4 Artist 2_instruction: Riesci ad inserire questo codice in un ciclo
        per disegnare il quadrato in grigio?
      Course 4 Artist 20_instruction: Hai ancora voglia di giocare? Ecco una tela
        bianca su cui puoi disegnare qualunque cosa tu voglia!
      Course 4 Artist 3_instruction: Cerca di immaginare cosa succede se si eseguono
        questi blocchi di codice già pronti (o premi "Esegui" per verificarlo). Poi,
        ripetili una quantità di volte sufficiente a completare il disegno.
      Course 4 Artist 4_instruction: Quanti gradi ci sono in un cerchio?  Inserisci
        questo valore nel blocco "ripeti ... volte" in modo da disegnare un cerchio
        tutto colorato.
      Course 4 Artist 5_instruction: |
        Disegna l'altra metà in modo che il disegno sia simmetrico. I triangoli sono equilateri e con il lato di 50 pixel.<br>
        Suggerimento: può essere necessario eseguire il codice più volte per capire quali blocchi devi aggiungere.
      Course 4 Artist 6_instruction: |
        Completa il codice per disegnare questi triangoli.<br>
        Suggerimento: ci sono 3 triangoli in una rotazione complessiva di 360 gradi... quante volte ci sta il 3 in 360?
      Course 4 Artist 7_instruction: 'Ora inserisci le istruzioni già presenti (che
        contengono un ciclo) all''interno di un altro ciclo, in modo da disegnare
        10 triangoli. Un ciclo inserito all''interno di un altro ciclo viene detto
        "ciclo annidato". Suggerimento: il disegno dei 10 triangoli richiede una rotazione
        complessiva di 360 gradi.  '
      Course 4 Artist 8_instruction: Per disegnare questo sole devi ripetere più volte
        tutte le istruzioni che trovi già pronte.
      Course 4 Artist 8a_instruction: |
        Ricordi questa figura? Ora prova a disegnarla senza avere nessun aiuto!<br>
        Suggerimento: ci sono 3 triangoli in una rotazione complessiva di 360 gradi... quante volte ci sta il 3 in 360?
      Course 4 Artist 9_instruction: 'Ripeti 10 volte la figura disegnata dal codice
        che trovi già pronto e assicurati di ruotare un po'' tra una figura e l''altra.
        Di quanti gradi devi ruotare ad ogni ripetizione? (Suggerimento: quanto fa
        360 diviso 10?)'
      Course 4 Artist Binary 1_instruction: |
        La funzione "disegna in binario" (draw binary) prende in ingresso una stringa binaria, cioè fatta di caratteri "1" e "0", e dà istruzioni all'artista di accendere o spegnere i quadrati in base ai caratteri della stringa, mentre va da sinistra verso destra e dall'alto verso il basso. L'artista quindi colora di bianco i quadrati quando incontra un "1" mentre non li colora quando incontra uno "0".<br><br>
        Clicca su "Esegui" per vedere come l'artista usa la stringa binaria per disegnare questa figura.
      Course 4 Artist Binary 1a_instruction: |
        La funzione "disegna in binario" (draw binary) prende in ingresso una stringa binaria, cioè fatta di caratteri "1" e "0", e dà istruzioni all'artista di accendere o spegnere i quadrati in base ai caratteri della stringa, mentre va da sinistra verso destra e dall'alto verso il basso. L'artista quindi colora di bianco i quadrati quando incontra un "1" mentre non li colora quando incontra uno "0".<br><br>
        Clicca su "Esegui" per vedere come l'artista usa la stringa binaria per disegnare questa figura.
      Course 4 Artist Binary 2_instruction: Quale di queste stringhe binarie devi
        ripetere 8 volte per disegnare questa figura?
      Course 4 Artist Binary 3_instruction: Riesci a disegnare questa figura inserendo
        in un ciclo una stringa binaria di 3 cifre?
      Course 4 Artist Binary 4_instruction: Ogni stringa binaria rappresenta una riga
        di questa figura. Le stringhe binarie che trovi già pronte disegnano una faccina
        triste. Riesci, sistemando diversamente i blocchi, a disegnare una faccina
        allegra invece che triste?
      Course 4 Artist Binary 5_instruction: Quale stringa binaria di 6 cifre, ripetuta
        11 volte, ti farà disegnare questa figura?
      Course 4 Artist Binary 6_instruction: Quale è la più piccola stringa binaria
        che puoi inserire in un ciclo per disegnare questa figura?
      Course 4 Artist Binary 7_instruction: Completa questo disegno.
      Course 4 Artist Binary Free Play 2_instruction: 'Tempo di giocare: hai a tua
        disposizione una griglia 16 x 16 di quadrati su cui disegnare!'
      Course 4 Artist Binary Free Play 2a_instruction: |
        Ecco una griglia 16 x 16 di quadrati per disegnare con una risoluzione superiore!<br><br>
        Clicca su "Esegui" e guarda cosa succede quando cominciamo a essere creativi con i bit.
      Course 4 Artist Binary Free Play 2b_instruction: Clicca qui per i suggerimenti.
      Course 4 Artist Binary Free Play_instruction: 'Tempo di giocare: disegna qualunque
        cosa ti piaccia usando le stringhe binarie!'
      Course 4 Artist Binary pre1_instruction: |
        La codifica binaria è una modalità di rappresentazione delle informazioni usando solo due valori.  In questa lezione usiamo i valori "spento" (rappresentato dal numero 0) e "acceso" (rappresentato dal numero 1).<br><br>
        Hai a disposizione una griglia di quadrati con cui puoi giocare e creare dei disegni semplicemente accendendo e spegnendo i vari quadrati. Riesci a far produrre all'artista nella prima riga il disegno la cui codifica binaria è "01010101"?
      Course 4 Artist Binary ryan_instruction: |
        La codifica binaria è una modalità di rappresentazione delle informazioni usando solo due valori.  In questa lezione usiamo i valori "spento" (rappresentato dal numero 0) e "acceso" (rappresentato dal numero 1).<br><br>
        Hai a disposizione una griglia di quadrati con cui puoi giocare e creare dei disegni semplicemente accendendo e spegnendo i vari quadrati. Riesci a far produrre all'artista nella prima riga il disegno la cui codifica binaria è "01010101"?
      Course 4 Artist For  Functions 10_instruction: Facciamo un passo avanti, Riesci
        a disegnare una Stella usando la funzione "Draw a Square Line". Buona Fortuna!
      Course 4 Artist For  Functions 11_instruction: Facciamo un passo avanti, Riesci
        a disegnare una Stella usando la funzione "Draw a Square Line". Buona Fortuna!
      Course 4 Artist For Loops 1_instruction: 'Disegna un triangolo equilatero con
        i lati di 50 pixel. Suggerimento: usa il blocco "ripeti ... volte".'
      Course 4 Artist For Loops 10_instruction: Spazio Libero! Divertiti disegnando
        quello che vuoi con i blocchi che hai imparato ad usare
      Course 4 Artist For Loops 11_instruction: 'Ricordi che nella lezione 6 (esercizio
        10 e seguenti) abbiamo usato la variabile "lati" (sides) per rappresentare
        il numero dei lati di un poligono? Ora devi fare la stessa cosa con la variabile
        "contatore". La figura di questo esercizio inizia con un triangolo ed aggiunge
        un lato per volta fino ad arrivare a disegnare un decagono (poligono con 10
        lati). Ogni lato è lungo 100 pixel. Suggerimento: 360 diviso il numero di
        lati di una figura ti restituisce il numero di gradi di cui devi girare.'
      Course 4 Artist For Loops 11a_instruction: |
        Cerchiamo di mettere tutto insieme!  Usando le conoscenze che hai acquisito sui "cicli con contatore" e sulla variabile "contatore" (counter), prova a creare questo disegno in cui ogni figura ha due lati in più della precedente. Accertati che ogni lato sia 10 volte più lungo del numero di lati del poligono.<br><br>
        Trovi già pronta solo una piccola parte del codice che ti serve.<br><br>
        <b>Ricorda</b>: 360 diviso il numero dei lati di una figura fornisce il numero di gradi di cui girare ogni volta.
      Course 4 Artist For Loops 12_instruction: Andava piuttosto bene, ma adesso vorrei
        disegnare ogni forma vicino alla precedente. Questa volta ogni lato è di 20
        pixel. Usa un blocco "salta" per saltare avanti di 40 pixel dopo ogni forma.
      Course 4 Artist For Loops 13_instruction: Hmmm, queste forme stanno diventando
        sempre più grandi! Non avevamo già risolto questo problema usando le variabili?
        Come possiamo usare la variabile "contatore" per rendere i lati più piccoli
        man mano che ce ne sono sempre di più? Invece di spostarti in avanti di una
        quantità sempre fissa, prova a spostarti di una quantità di pixel pari a  (100
        / contatore).
      Course 4 Artist For Loops 14_instruction: Se ruoti un po' di più, o un po' di
        meno, di quanto fai di solito, puoi ottenere un effetto diverso. Per creare
        questa spirale quadrata avvitata, prova ad usare il codice del precedente
        esercizio ruotando di 89 gradi, invece di 90 gradi.
      Course 4 Artist For Loops 15_instruction: |
        Tempo di giocare: scatena la tua fantasia e prova a disegnare qualunque cosa tu voglia usando i "cicli con contatore". Abbiamo aggiunto anche alcune variabili generiche che puoi utilizzare.<b>Nota</b>: se vuoi, puoi cambiare nome alle variabili esistenti o introdurne di nuove. Clicca sul triangolino con la punta verso il basso accanto al nome della variabile.<br><br>
        Nota che ora ci sono così tanti blocchi nella cassetta degli attrezzi che li abbiamo organizzati in diverse categorie. Prenditi un po' di tempo per esplorare tutto ciò che è a tua disposizione.
      Course 4 Artist For Loops 2_instruction: |
        In questo esercizio il codice per disegnare un triangolo è stato inserito in un ciclo con contatore che conta da 50 a 100 con "passo" di 10.<br>
        Attenzione: assicurati di aver guardato bene il codice prima di cliccare su "Esegui".
      Course 4 Artist For Loops 3_instruction: |
        Per disegnare questa figura usa come riferimento il codice del precedente esercizio. Il triangolo più piccolo ha i lati di 20 pixel, il triangolo più grande ha i lati di 200 pixel ed ogni triangolo è di 20 pixel più grande del precedente.
      Course 4 Artist For Loops 4_instruction: 'Come puoi modificare quello che hai
        imparato sui triangoli per disegnare questi quadrati? Il quadrato più piccolo
        ha i lati di 15 pixel, il quadrato più grande ha i lati di 300 pixel ed ogni
        quadrato è di 15 pixel più grande del precedente. '
      Course 4 Artist For Loops 5_instruction: 'Ottimo lavoro sull''ultimo puzzle!,
        Usiamo di nuovo il blocco con la variabile COUNTER per disegnare questa immagine. '
      Course 4 Artist For Loops 6_instruction: Spazio Libero! Prova ad usare un ciclo
        FOR per disegnare un modello di forma crescente a piacere.
      Course 4 Artist For Loops 6a_instruction: Per ottenere questo disegno bastano
        solo tre piccole modifiche al codice del precedente esercizio!
      Course 4 Artist For Loops 7_instruction: Cosa succede se rimouvi il blocco RIPETI
        3 da questo algoritmo, mantenendo i blocchi MUOVI e RUOTA nel ciclo RIPETI?
        In questo triangolo a spirale ogni lato è 20 pixels più lungo del precedente.
      Course 4 Artist For Loops 8_instruction: |
        Per disegnare questa figura devi fare solo un piccolo cambiamento al codice del precedente esercizio. Riesci a capire di quale cambiamento si tratta?<br>
        Suggerimento: devi eliminare qualcosa!
      Course 4 Artist For Loops 8a_instruction: Per disegnare questa figura devi fare
        solo un piccolo cambiamento al codice del precedente esercizio. Riesci a capire
        di quale cambiamento si tratta?
      Course 4 Artist For Loops 9_instruction: Riesci a disegnare una spirale? Sposa
        in avanti da 1 a 75 pixels incrementando di 1 pixel ogni volta.
      Course 4 Artist For Loops Challenge_instruction: |
        Riesci a capire come utilizzare tutte le cose che hai imparato finora per disegnare questa immagine composta di poligoni, tutti con lato di 40 pixel?<br><br>
        Se vuoi dei suggerimenti leggi più sotto.<br><br>
        1. Il poligono più grande ha 19 lati.<br><br>
        2. Tutti i poligoni sono incompleti, ossia ogni poligono ha un lato di meno rispetto a quelli che dovrebbe avere ("contatore - 1").<br><br>
      Course 4 Artist For Loops inspire_instruction: |
        <a href="https://studio.code.org/c/109045588">Clicca qui</a> e poi su "Esegui". Ora hai imparato tutto quello che devi sapere per realizzare un disegno come quello mostrato al precedente link! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.<br><br>
        Vuoi realizzare la figura che ti abbiamo mostrato? Ecco alcuni suggerimenti:<br><br>
        1. La soluzione di questo esercizio è quasi uguale a quella dell'esercizio precedente... con un paio di cambiamenti.<br><br>
        2. Prova ad usare un ciclo con contatore che va da 3 a 10 con passo di 1.<br><br>
        3. All'interno del ciclo con contatore ci sono due cicli uguali, ma il secondo ciclo gira nella direzione opposta del primo.<br><br>
        Vuoi sapere come è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/109045588">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist Functions 1_instruction: Riesci a disegnare un quadrato con
        lato di 100 pixels, usando un CICLO?
      Course 4 Artist Functions 10_instruction: Quale blocco è necessario aggiungere
        per far si che il triangolo sia posizionato sopra il quadrato?
      Course 4 Artist Functions 11_instruction: Controlla questo codice e disegna
        un cubo - Riesci ad inserirla nella funzione chiamata "Disegna un Cubo" (Draw
        a Cube)
      Course 4 Artist Functions 12.1_instruction: Creiamo una funzione denominata
        "disegna un ottagono 20" che disegna un ottagono dove ogni lato è lungo 20
        pixel.
      Course 4 Artist Functions 12_instruction: Ripeti la funzione Quadrato per disegnare
        una linea
      Course 4 Artist Functions 13.1_instruction: 'Ora, creiamo una funzione denominata
        "salto in alto a destra" che sposta l''artista in alto a destra dell''ottagono
        che hai appena disegnato così possiamo finire questo modello. \r \r Suggerimento:
        per raggiungere l''angolo superiore destro, prova ad utilizzare un modello
        che fa solo i 3/8 dell''ottagono.'
      Course 4 Artist Functions 13_instruction: Come puoi vedere, abbiamo una nuova
        funzione chiamata "Disegna una serie di quadrati".  Cerca di comprendere come
        è costruita. Clicca su ESEGUI per vederla in azione.
      Course 4 Artist Functions 14.1_instruction: Ora, realizziamo una funzione chiamata
        "Salta al superiore destra" che sposta l'artista in alto a destra dell'ottagono
        che hai appena disegnato così possiamo finire questo modello.
      Course 4 Artist Functions 14_instruction: Grandissimo! Usa la tua nuova funzione
        "Disegna una serie di quadrati" per disegnare una forma quadrata. Ricorda
        che ogni quadrato ha il lato di 40 pixel.
      Course 4 Artist Functions 15_instruction: 'Ora accelleriamo un po'', riesci
        a disegnare una stella usando la funzione "disegna una serie di quadrati"?
        Buona fortuna! Suggerimento: potrebbe essere necessario ruotare di 144 gradi'
      Course 4 Artist Functions 2_instruction: 'Sapresti disegnare tre quadrati a
        distanza di 20 pixel l''uno dall''altro? Suggerimento: ogni quadrato è largo
        100 pixel'
      Course 4 Artist Functions 3_instruction: 'Riesci a disegnare questa immagine
        usando la funzione "Disegna un Quadrato"? Suggerimento: ogni quadrato è spostato
        di 120 pixels.\r'
      Course 4 Artist Functions 4_instruction: 'Sei pronto per creare la tua FUNZIONE?
        Clicca sul blocco FUNZIONI nella casetta degli attrezzi, dalle il nome "Disegna
        un Triangolo", quindi disegna un triangolo come hai fatto precedentemente
        con i blocchi RIPETI. Quindi clicca sul pulsante "Salva e Chiudi" posto nell''angolo
        in alto a destra. Suggerimento: crea un triangolo con lato di 100 pixels.
        Buona fortuna!'
      Course 4 Artist Functions 5 OLD_instruction: Cerchiamo di usare le nostre due
        funzioni per disegnare una casa - Cosa deve essere modificato nel codice per
        disegnare correttamente la casa?
      Course 4 Artist Functions 5_instruction: 'Riesci a disegnare questa immagine
        usando la funzione "Disegna un Quadrato"? Suggerimento: ogni quadrato è spostato
        di 120 pixels.\r'
      Course 4 Artist Functions 6_instruction: Quale blocco è necessario aggiungere
        per far si che il triangolo sia posizionato sopra il quadrato?
      Course 4 Artist Functions 7_instruction: Riesci a disegnare una serie di quadrati
        usando una funzione "quadrato"? Ogni quadrato ha il lato di 40 pixel.
      Course 4 Artist Functions 8_instruction: 'Stai imparando ad usare i blocchi
        funzione? Prova a modificare la funzione "disegna un quadrato" (draw a square)
        in modo che disegni un quadrato con i lati di 200 pixel. Suggerimento: clicca
        su "modifica" per cambiare il codice della funzione. Se vuoi, puoi cambiare
        anche il nome della funzione. Alla fine, clicca su "Chiudi" per salvare le
        modifiche.'
      Course 4 Artist Functions 9_instruction: Vi abbiamo fornito la maggior parte
        del codice ncessario per creare una funzione. Tuttavia ci sembra ci sia qualcosa
        che manca. Riouscite a fare in modo che questa funzione sia completa?
      Course 4 Artist Functions challenge_instruction: |
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come i seguenti: clicca su <a href="https://studio.code.org/c/159080658">figura 1</a> oppure su <a href="https://studio.code.org/c/158991930">figura 2</a> o poi clicca su "Esegui". Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.<br><br>
        Vuoi realizzare una delle figure che ti abbiamo mostrato? Ecco alcuni suggerimenti:<br><br>
        1. Un parte importante nel realizzare le funzioni è capire quali blocchi ti servono e quali no.<br><br>
        2. Per la figura 1, usa un "ciclo con contatore" all'esterno e al suo interno un ciclo "ripeti" che riutilizza la variabile "contatore" (counter).<br><br>
        3. Ad ogni ripetizione, disegna un quadratino e fai un salto in avanti.<br><br>
        4. Devi girare di 90 gradi dopo ogni ciclo "ripeti", ma sempre all'interno del "ciclo con contatore".<br><br>
        5. Per la figura 2 usa il codice del precedente esercizio ed aggiungi un blocco "gira a ..." di 1 grado e mezzo all'interno del ciclo interno.<br><br>
        Se vuoi sapere come sono state realizzate le figure che ti abbiamo mostrato, <a href="https://studio.code.org/c/159080658">figura 1</a> oppure su <a href="https://studio.code.org/c/158991930">figura 2</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist Functions Inspiration_instruction: |
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come i seguenti: clicca su <a href="https://studio.code.org/c/159080658">figura 1</a> oppure su <a href="https://studio.code.org/c/158991930">figura 2</a> o poi clicca su "Esegui". Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.<br><br>
        Vuoi realizzare una delle figure che ti abbiamo mostrato? Ecco alcuni suggerimenti:<br><br>
        1. Un parte importante nel realizzare le funzioni è capire quali blocchi ti servono e quali no.<br><br>
        2. Per la figura 1, usa un "ciclo con contatore" all'esterno e al suo interno un ciclo "ripeti" che riutilizza la variabile "contatore" (counter).<br><br>
        3. Ad ogni ripetizione, disegna un quadratino e fai un salto in avanti.<br><br>
        4. Devi girare di 90 gradi dopo ogni ciclo "ripeti", ma sempre all'interno del "ciclo con contatore".<br><br>
        5. Per la figura 2 usa il codice del precedente esercizio ed aggiungi un blocco "gira a ..." di 1 grado e mezzo all'interno del ciclo interno.<br><br>
        Se vuoi sapere come sono state realizzate le figure che ti abbiamo mostrato, <a href="https://studio.code.org/c/159080658">figura 1</a> oppure su <a href="https://studio.code.org/c/158991930">figura 2</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist Functions inspire_instruction: "Tempo di giocare: guarda la
        figura che trovi al link https://studio.code.org/c/110671172. Ora hai imparato
        tutto quello che devi sapere per realizzare un disegno come questo! Se questa
        immagine ti ispira, prova a realizzare qualcosa di simile. In caso contrario,
        crea qualcosa di tuo. \\r\n\nVuoi realizzare la figura che ti abbiamo suggerito?
        Ecco alcuni aiuti:\n\nSuggerimento 1: usa un ciclo con contatore, quindi usa
        la sua variabile contatore all'interno di un ciclo annidato.\n\nSuggerimento
        2: ad ogni iterazione, dovresti disegnare un quadrato e fare un salto in avanti.
        \n\nSuggerimento 3: dovresti girare a sinistra di 90 gradi all'esterno del
        ciclo annidato, ma ancora all'interno del ciclo con contatore.\n\n\\r\nVuoi
        sapere come è stato realizzata la figura che ti abbiamo suggerito? Visita
        il link https://studio.code.org/c/110671172/edit per scoprirlo.\n\nCosa succede
        se disegni i quadrati un po' più piccoli o un po' più grandi? E cosa succede
        se invece di girare a sinistra giri a destra?"
      Course 4 Artist Inspire_instruction: |
        <a href="https://studio.code.org/c/105765376">Clicca qui</a> e poi su "Esegui". Ora hai imparato tutto quello che devi sapere per realizzare un disegno come quello mostrato al precedente link! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.<br><br>
        Vuoi realizzare la figura che ti abbiamo mostrato? Ecco alcuni suggerimenti:<br><br>
        1. Dopo aver completato un quadrato, prova a saltare in avanti di metà della sua lunghezza, prima di girarti e cominciarne un altro.<br><br>
        2. Per disegnare una singola girandola, devi ripetere per 4 volte (con una svolta a sinistra nel mezzo) ogni quadrato e ogni salto in avanti.<br><br>
        3. Per completare la figura, ogni girandola viene ripetuta per 4 volte, con una svolta a destra di 360/"lati" (sides) gradi tra l'una e l'altra.<br><br>
        Vuoi sapere come è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/105765376">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      Course 4 Artist Params 1_instruction: Modifichiamo ora una funzione che disegna
        un quadrato con lati di 50 pixel
      Course 4 Artist Params 10_instruction: 'Puoi chiamare funzioni dall''interno
        di altre funzioni! Usando la tua funzione "forma" come base, crea 3 forme
        di una casa, ognuna più larga di 20 pixel rispetto alla precedente, iniziando
        da una lunghezza di 50 pixel. Può essere utile utilizzare un ciclo contatore. '
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Usa la tua funzione "pinwheel" per disegnare
        ognuna delle forme. La lunghezza del lato per ogni immagine è 50.
      Course 4 Artist Params 13_instruction: 'Freeplay: Qui ci sono le funzioni che
        hai scritto e alcune altre con cui puoi giocare. Disegna qualcosa di spettacolare!'
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Magnifico, puoi disegnare ognuno di questi
        triangoli con questa nuova funzione? Il primo è lungo 25 pixel, il secondo
        50 e il terzo 75. '
      Course 4 Artist Params 4_instruction: Potete aggiungere una nuova funzione denominata
        quadrato? La funzione dovrebbe anche prendere un parametro di lunghezza, proprio
        come per il triangolo. Questa volta disegnate 3 quadrati con lunghezza di
        25, 50 e 75 pixel e che distano 100 pixel uno dall'altro.
      Course 4 Artist Params 5_instruction: |
        Usa ambedue le nuove funzioni per disegnare questa immagine. Per semplificare questa operazione usate un ciclo con un parametro "contatore".
      Course 4 Artist Params 6_instruction: "Modifichiamo questa funzione: \"disegna
        una forma\".\nQuesta ha già un parametro \"lunghezza\". Ora modifichiamo la
        funzione per aggiungere anche un parametro \"lati\". Ricorda che l'angolo
        per una data forma è 360 diviso i lati che ha. Suggerimento: le lunghezze
        per ogni forma sono: per il trianogolo 100 pixel, per l'esagono 25 pixel e
        per il quadrato 50 pixel. \n"
      Course 4 Artist Params 7_instruction: 'Riesci a disegnare queste forme completando
        i "???". Il quadrato e il triangolo sono 100 pixel di dimensioni mentre l''esagono
        è di 75 pixel. '
      Course 4 Artist Params 8_instruction: |
        Riesci a capire come disegnare questa
         forma? Ecco un suggerimento per creare una nuova forma con 6 lati chiamati un esagono.
      Course 4 Artist Params 9_instruction: Ti ricordi quando abbiamo usato il ciclo
        contatore ma abbiamo rimosso un ciclo dal suo interno? Divertiamoci ora e
        usiamo la funzione per disegnare una figura con i parametri "lati" e "lunghezza".
        Sei in grado di creare questa figura? Il contatore del quadrato deve essere  5/100/5,
        quello del triangolo 10/100/10 e quello dell'esagono 2/100/2.
      Course 4 Artist Var 9_instruction: 'Ecco l''algoritmo per disegnare un triangolo.
        Modificalo in modo da usare la vriabile "lati". Sostituite il numero 3 con
        la variabile "lati". Suggerimento: ricordatevi di usare il blocco "imposta
        i lati a".'
      Course 4 Artist Vars 1_instruction: Puoi aiutarmi a disegnare un triangolo equilatero?
        Ogni lato deve essere lungo esattamente 100 pixel.
      Course 4 Artist Vars 10_instruction: Questo è un algoritmo che disegna un triangolo
        all'esterno di triangoli più piccoli. Modificatelo in modo che venga utilizzata
        la variabile "lati" disegnare ogni triangolo. Studiate il codice e ogni volta
        che vedete il numero 3, sostituitelo con la variabile "lati". Ricordatevi
        di utilizzare il blocco che imposta i lati.
      Course 4 Artist Vars 11_instruction: Quello che vedi è un codice che utilizza,
        in maniera più complessa, gli stessi concetti del precedente esercizio - quale
        valore devi assegnare alla variabile "lati" (sides) per disegnare questa immagine
        composta da quadrati?
      Course 4 Artist Vars 12_instruction: Per disegnare la figura che vedi la variabile
        "lati" (sides) va impostata a 5. Se usi valori più grandi disegni poligoni
        con più lati ed ottieni una figura più grande! Nota che, oltre alla variabile
        "lati", c'è un'altra variabile chiamata "lunghezza" (length). Puoi utilizzare
        questa variabile ogni volta che devi "spostarti in avanti". Per disegnare
        questa figura la variabile "lunghezza" va impostata a 75.
      Course 4 Artist Vars 13_instruction: |
        Quando una figura ha molti lati, ogni lato deve essere più corto se desideri che l'intero modello si adatti allo schermo.<br>
        Ricrea l'algoritmo per questo bellissimo modello, ma anziché impostare manualmente la variabile "lunghezza" (length), usa un blocco matematico con all'interno la variabile "lati" (sides) per assicurarti che ogni forma si adatti correttamente. Il perimetro di ciascun poligono è 300 pixel.<br><br>
        Se vuoi dei suggerimenti leggi più sotto.<br><br>
        1. Hai bisogno di due cicli (uno dentro l'altro), entrambi che ripetono "lati" volte.<br><br>
        2. Il ciclo interno disegna un ottagono (girando verso sinistra). Poi, nel ciclo esterno, devi muoverti in avanti e girare a destra.<br><br>
        3. Per aggiustare la figura in modo che rimanga della stessa dimensione al variare del numero di lati, usa un blocco matematico per dividere la lunghezza del perimetro per il numero dei lati.
      Course 4 Artist Vars 14_instruction: |
        Tempo di giocare: Guarda! Ora l'algoritmo precedente è annidato all'interno di un altro ciclo. Fai degli esperimenti modificando i valori delle due variabili per disegnare delle figure fantastiche.<br><br>
        Per disegni ancora più belli, prova a giocare con i colori! Assegna dei colori a caso all'interno di ogni ciclo e osserva come cambia la figura che ottieni.
      Course 4 Artist Vars 2_instruction: Adesso nel blocco "vai avanti ...", invece
        di usare un valore esplicito di pixel, si fa riferimento ad una variabile
        di nome "lunghezza" (length). Puoi impostare la variabile "lunghezza" a 150
        per disegnare questo nuovo triangolo?
      Course 4 Artist Vars 3_instruction: 'Il ciclo proposto disegna un quadrato,
        ma manca qualcosa. Correggi in modo che utilizzi la variabile "lunghezza"
        per capire quanto lungo deve essere ogni lato? '
      Course 4 Artist Vars 4_instruction: Vorrei disegnare un rettangolo che sia alto
        il doppio di quanto è largo. C'è una variabile denominata "larghezza" (width)
        che deve essere impostata a 100. Riesci ad utilizzare il blocco matematico
        con le operazioni per risolvere questo esercizio?
      Course 4 Artist Vars 5_instruction: Utilizzare la variabile "lati" per controllare
        quante volte questo ciclo debba essere eseguito.
      Course 4 Artist Vars 6_instruction: |-
        Ecco del codice che ti consente di disegnare un qualsiasi poligono regolare. C'è una nuova variabile denominata "lati" che è impostata a 4. Riesci ad usare la variabile "lati" (insieme ad un blocco matematico) per girare del giusto numero di gradi a prescindere da quanti lati ci sono nel poligono? \r
        \r
        Suggerimento: 360 diviso il numero di lati ti darà il numero di gradi da ruotare ogni volta che devi disegnare un poligono regolare.
      Course 4 Artist Vars 7_instruction: |
        Utilizza ciò che hai imparato nel precedente esercizio per disegnare questo esagono usando la variabile "lati" (sides).<br><br>
        Hai notato che è possibile modificare un solo valore per disegnare un triangolo, un quadrato, un pentagono o un ottagono?
      Course 4 Artist Vars 8_instruction: |
        Tempo di giocare: facciamo un esperimento con il numero di "lati" (sides) delle figure. Riesci a modificare l'algoritmo affinché la dimensione complessiva della figura disegnata rimanga la stessa, indipendentemente dal numero dei suoi lati?<br><br>
        Suggerimento: se dividi il valore di base della lunghezza del lato per il numero dei lati, la lunghezza del lato del poligono disegnato si accorcia man mano che il numero dei lati cresce.
      Course 4 Artist Vars 9_instruction: Modificare questo algoritmo in modo che
        utilizzi la variabile "lati" invece di un numero fisso per disegnare un triangolo.
        Sostituisci il numero 3 con la variabile "lati" e utilizzare il blocco "imposta
        i lati".
      Course 4 Bee 1_instruction: L'ape non può sapere cosa si nasconde dietro la
        nuvola!  Per prima cosa usa un blocco "se" per verificare se si tratta di
        un fiore oppure di un favo. Poi, se dietro la nuvola si nasconde un fiore,
        raccogli il nettare.
      Course 4 Bee 2_instruction: Usa il blocco "se-altrimenti" per controllare ogni
        oggetto e verificare se si tratta di un fiore oppure di un favo. Se è un fiore,
        raccogli il nettare ... altrimenti, produci il miele!
      Course 4 Bee 3_instruction: L'oggetto nascosto può essere un fiore oppure un
        favo. Usa il blocco "se-altrimenti" per raccogliere il nettare "se" si tratta
        di un fiore, "altrimenti" per produrre il miele (dato che, in questo caso,
        si tratta sicuramente di un favo).
      Course 4 Bee 4_instruction: |
        Un fiore viola può avere 1, 2 o 3 dosi di nettare, ma tu non sai quante ne ha!

        In questo esercizio un blocco "se-altrimenti" viene combinato con un altro blocco "se-altrimenti" per creare un blocco con tre ramificazioni: "se", "altrimenti-se" , "altrimenti". Prova a completare il programma in modo tale da raccogliere tutto il nettare.
      Course 4 Bee 5_instruction: "Questo fiore viola può avere 3, 2 o 1 nettare.
        \nAggiungi un blocco if-else per creare un'istruzione if, else-if, else. \nCompleta
        la soluzione per raccogliere la quantità sconosciuta di nettare.\n"
      Course 4 Bee 6_instruction: "Questo fiore viola può avere 3, 2 o 1 nettare.
        \nCrea un'istruzione if, else-if, else per raccogliere la quantità sconosciuta
        di nettare.\n"
      Course 4 Bee 7_instruction: Utilizzate tutto quanto avete imparato finora per
        raccogliere tutto il nettare. Il fiore viola può avere 3, 2 o 1 di nettare.
      Course 4 Bee For Loops 1_instruction: Usa un blocco "ripeti ... volte" (detto
        anche ciclo) per raccogliere il nettare da ogni fiore.
      Course 4 Bee For Loops 10_instruction: Se il ciclo con contatore conta alla
        rovescia, il valore del "passo" viene sottratto dal contatore ad ogni ripetizione.
        Quale dovrebbe essere il valore del "passo" per raccogliere prima 9, poi 6
        e poi 3 dosi di nettare?
      Course 4 Bee For Loops 11_instruction: Che cosa è sbagliato con questo ciclo
        (loop)? Vedi se puoi risolvere il problema e fare in modo che l'ape raccolga
        tutto il nettare.
      Course 4 Bee For Loops 2_instruction: Ecco un nuovo tipo di ciclo, chiamato
        il ciclo "for". Questo particolare ciclo conta da 1 a 5 di 1 ed esegue il
        contenuto del ciclo ogni volta che viene eseguito. Aiutate l'ape a ottenere
        il nettare.
      Course 4 Bee For Loops 3_instruction: Potete risolvere questo puzzle utilizzando
        un ciclo "for" per contare da 1 a 3 di 1. Andiamo ora a prendere del nettare!
      Course 4 Bee For Loops 4_instruction: Raccogliamo tutto il nettare da questi
        fiori. Mi chiedo se ci sia un modo più semplice per farlo...
      Course 4 Bee For Loops 5_instruction: 'L''uso dei cicli (loop) rende il tutto
        molto più facile! Utilizza la variabile "contatore" del ciclo per ripetere
        il blocco per prendere il nettare lo stesso numero di volte del ciclo. Ci
        sono un sacco di cicli. Tutto il codice necessario è disponibile, dai un''occhiata
        a come è stato messo insieme, quindi fai clic su Esegui per vedere come funziona. '
      Course 4 Bee For Loops 6_instruction: Puoi usare un ciclo con contatore anche
        per contare alla rovescia. In questo esercizio, prova a raccogliere il nettare
        contando alla rovescia da 5 ad 1 a passi di 1.
      Course 4 Bee For Loops 7_instruction: Usa la variabile "contatore" del ciclo
        per controllare lo spostamento in senso orizzontale.
      Course 4 Bee For Loops 8_instruction: "È possibile utilizzare la variabile del
        ciclo per controllare il movimento e la raccolta di nettare?"
      Course 4 Bee For Loops 9_instruction: Il valore più a destra nel ciclo con contatore
        viene chiamato "passo". Ogni volta che il ciclo viene eseguito, la variabile
        "contatore" (counter) cambia del valore indicato dal "passo". Prova a raccogliere
        il nettare da questi fiori usando un passo di 2.
      Course 4 Bee Loops 5 NEW_instruction: Ci sono tre fiori. Riesci a trovare la
        sequenza di spostamenti da ripetere 3 volte, in modo raccogliere tutto il
        nettare con il minor numero possibile di blocchi?
      Course 4 Bee Loops 5a NEW_instruction: Ora, usa un blocco "ripeti ... volte"
        (ciclo) per aiutare l'ape a raccogliere tutto il nettare che trova nel suo
        percorso verso il favo usando il minor numero possibile di blocchi. Quando
        arrivi al favo, non dimenticarti di produrre il miele!
      Course 4 Bee Params 1_instruction: Esamina la funzione "prendi 3 dosi di nettare"
        (get 3 nectar) che fa ruotare e spostare l'ape per raccogliere il nettare
        e riportarla alla posizione di partenza. Poi usala in una sequenza di blocchi
        per raccogliere tutto il nettare.
      Course 4 Bee Params 2_instruction: Modifica la funzione "prendi 3 dosi di nettare"
        (get 3 nectar) per girare a destra, invece che a sinistra, così l'ape può
        arrivare ai fiori.
      Course 4 Bee Params 3 (copy 1)_instruction: Ora ci sono fiori su entrambi i
        lati! E' possibile utilizzare un parametro in modo che la stessa funzione
        operi per i fiori su entrambi i lati. E' stata aggiunto un parametro denominato
        "direzione" alla funzione. Se il parametro "direzione" è uguale a 0 si gira
        a sinistra, se è 1 si gira a destra.
      Course 4 Bee Params 3_instruction: Ora ci sono fiori su entrambi i lati! Abbiamo
        aggiunto un parametro denominato "direzione" (direction) alla funzione "prendi
        3 dosi di nettare" (get 3 nectar). Modifica il codice della funzione in modo
        che l'ape giri nella direzione indicata dal parametro passato alla funzione.
        Utilizza le variabili "sinistra" (left) e "destra" (right) per chiamare ogni
        volta la funzione con la direzione giusta.
      Course 4 Bee Params 4 (copy 1)_instruction: Provare a utilizzare la nuova funzione
        per raccogliere tutti i fiori. Ricordate, 0 = sinistra e 1 = destra.
      Course 4 Bee Params 4 - Two WhenRun_instruction: |
        Prova ad utilizzare la tua nuova funzione
        per raccogliere tutti i fiori. Ricordati di usare le variabili di sinstra e di destra.
      Course 4 Bee Params 4 backup_instruction: In questo esercizio i fiori hanno
        diversi quantitativi di nettare. Non sarebbe bello se potessimo raccogliere
        tutto il nettare con una sola funzione? Prova ad aggiungere, alla tua funzione,
        un nuovo parametro, chiamato "dosi di nettare", che ti consenta di controllare
        la quantità di nettare da raccogliere. Probabilmente vorrai anche rinominare
        la tua funzione!
      Course 4 Bee Params 4_instruction: Usa la nuova versione della funzione "prendi
        3 dosi di nettare" (get 3 nectar) per raccogliere il nettare da tutti i fiori.
        Ricordati di usare le variabili "sinistra" (left) e "destra" (right).
      Course 4 Bee Params 5_instruction: Partiamo da zero! Riesci a creare una nuova
        funzione chiamata "prendi 5 dosi di nettare" che usa un parametro di direzione?
        Puoi assegnare il nome che vuoi alla funzione e al suo parametro.
      Course 4 Bee Params 6 (copy 1)_instruction: Prova a utilizzare la nuova funzione
        per raccogliere tutto questo nettare.
      Course 4 Bee Params 6_instruction: |
        In questo esercizio sui fiori si trovano quantità differenti di nettare e il codice che trovi già pronto non risolve l'esercizio. Non sarebbe bello se potessimo raccogliere tutto il nettare con una sola funzione? <br><br>
        Modifica la funzione "prendi 5 dosi di nettare" (get 5 nectar) aggiungendo un nuovo parametro, chiamato "dosi di nettare", che specifica la quantità di nettare da raccogliere. Probabilmente sarà meglio cambiare anche nome alla funzione!<br><br>
        Nota: se vuoi, puoi cambiare il nome anche alle variabili.
      Course 4 Bee Params 7 (copy 1)_instruction: Prova a utilizzare la nuova funzione
        per raccogliere tutto questo nettare.
      Course 4 Bee Params 7_instruction: Usa la nuova funzione "prendi molte dosi
        di nettare" (get many nectar) per raccogliere tutto il nettare.
      Course 4 Bee Params 8 Clone 2_instruction: Oooh, ora c'è miele di cui occuparsi!
        Come si potrebbe aggiornare la funzione per ottenere il nettare o fare il
        miele.
      Course 4 Bee Params 8 clone 3_instruction: Oooh, ora c'è miele di cui occuparsi!
        Come si potrebbe aggiornare la funzione per ottenere il nettare o fare il
        miele.
      Course 4 Bee Params 8 Clone_instruction: Oooh, ora c'è miele di cui occuparsi!
        Come si potrebbe aggiornare la funzione per ottenere il nettare o fare il
        miele.
      Course 4 Bee Params 8 new_instruction: Oooh, ora c'è miele di cui occuparsi!
        Come si potrebbe aggiornare la funzione per ottenere il nettare o fare il
        miele.
      Course 4 Bee Params 8_instruction: 'Una piccola sfida: ora c''è anche il miele
        di cui occuparsi! Modifica la funzione in modo che usi, oltre ai parametri
        "direzione" (direction) e "dosi di nettare" (nectar_units), anche il nuovo
        parametro "dosi di miele" (honey_units). Come dovresti usare questi parametri
        per decidere cosa fare?'
      Course 4 Bee Params Ex_instruction: Usa la nuova funzione "prendi molte dosi
        di nettare" (get many nectar) per raccogliere tutto il nettare.
      Course 4 Binary 1_instruction: Ecco una funzione che accetta una stringa binaria
        di 1 e di 0 e istruisce l'agricoltore per attivare il movimento da sinistra
        a destra, dall'alto verso il basso, accendendo i quadrati in cui il numero
        ha uno zero. Esegui il codice fornito per vedere come l'agricoltore usa i
        numeri binari per disegnare un'immagine.
      Course 4 Binary 2_instruction: 'Quale stringa binaria potresi ripetere 8 volte
        per disegnare questa immagine? Suggerimento: il numero "1" consente di riempire
        un buco.'
      Course 4 Binary 3_instruction: Potete disegnare questo modello ripetendo una
        singola stringa binaria?
      Course 4 Binary 5 (copy 1)_instruction: Quale stringa binaria, ripetuta 10 volte,
        disegnerà questa immagine?
      Course 4 Binary 5_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà
        questa immagine?
      Course 4 Binary 6 (copy 1)_instruction: Quale stringa binaria, ripetuta 10 volte,
        disegnerà questa immagine?
      Course 4 Binary 6_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà
        questa immagine?
      Course 4 Binary 7_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà
        questa immagine?
      Course 4 Binary 8_instruction: Puoi completare la maggior parte di questa immagine
        impostando un ciclo con un numero binario a 5 bit - poi avrai bisogno di un
        altro numero a 4 bit per ottenere l'angolo in basso a destra.
      Course 4 EC 1a_instruction: Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!
      Course 4 EC 1b_instruction: Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!
      Course 4 EC 2a_instruction: Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!
      Course 4 EC 2b_instruction: Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!
      Course 4 EC 2c_instruction: Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!
      Course 4 EC 3_instruction: 'Usa quello che hai imparato nell''esercizio precedente
        per disegnare un''immagine come questa. NB: Il codice diventa più semplice
        se si incorporano i parametri. '
      Course 4 EC 3a_instruction: Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!
      Course 4 Maze 1_instruction: Fai arrivare l'uccellino arrabbiato (Angry Bird)
        fino al maialino!
      Course 4 Maze 2_instruction: Evita la dinamite (TNT)!
      Course 4 Maze 3_instruction: Scrivi il codice per far arrivare l'uccellino arrabbiato
        (Angry Bird) fino al maialino!
      Course 4 Maze 4_instruction: |
        Prova ad usare il blocco "ripeti 5 volte " per risolvere l'esercizio con meno blocchi...<br><br>

        Ricorda che il blocco "ripeti ... volte" (detto anche "ciclo") fa "ripetere" le azioni che si trovano all'interno del blocco per un numero di volte pari a quello che hai impostato.
      Course 4 Maze 5_instruction: Prova a risolvere questo esercizio usando meno
        blocchi possibile.
      Course 4 Maze 6_instruction: Prova a risolvere questo esercizio usando meno
        blocchi possibile.
      Course 4 Play Lab For Loops 2_instruction: Questa volta prova a far dire al
        cane i numeri dispari da 1 a 100.
      Course 4 Play Lab Params 1_instruction: In questo esercizio c'è una funzione
        chiamata "salta" (jump) che consente al cane di saltare in alto di 100 pixel.
        Utilizza questa nuova funzione per raccogliere tutte le bandierine.
      Course 4 Play Lab Params 10_instruction: |
        Abbiamo aggiunto al gioco ancora un'altra funzione che puoi usare.<br><br>
        Programma il tuo gioco in modo tale da chiamare la funzione "sali di un livello" (level_up) se la variabile "punteggio" (player_score) diventa maggiore di 6 (player_score > 6).<br><br>
        Clicca su "Esegui" per giocare e supera il livello 4 per passare al prossimo esercizio.
      Course 4 Play Lab Params 2_instruction: 'Ora le bandierine sono troppo in alto
        per poterle raggiungere con la funzione "salta" (jump)! Dovresti associare
        alle frecce "verso l''alto" e "verso il basso" una funzione che consenta di
        avere salti di diverse altezze.<br><br>Per far questo devi modificare la funzione
        "salta" aggiungendogli un parametro "altezza": scrivi il nome che vuoi dargli
        e clicca su "Aggiungi un parametro".<br><br>La freccia verso l''alto dovrebbe
        permettere al cane di fare un salto in alto di 200 pixel e la freccia verso
        il basso un salto in alto di soli 100 pixel.'
      Course 4 Play Lab Params 3_instruction: 'Devi aggiungere un altro parametro
        alla funzione "salta" (jump) in modo da poterla usare con diversi personaggi.
        Ogni personaggio è rappresentato da un numero, a partire da uno. Modifica
        il codice della funzione "salta" in modo che usi il parametro "personaggio"
        (actor), oltre al parametro "altezza" (height). '
      Course 4 Play Lab Params 4_instruction: In questo esercizio c'è una funzione
        chiamata "pattuglia" (patrol) in cui devi inserire il codice che serve per
        far muovere il gatto prima in su e poi in giù di 400 pixel.
      Course 4 Play Lab Params 5_instruction: Modifica la funzione "pattuglia" (patrol)
        aggiungendo un parametro "personaggio" (actor), in modo tale da poterla eseguire
        per i diversi personaggi. Ricorda che sono identificati dai numeri 1, 2 e
        3.
      Course 4 Play Lab Params 6_instruction: |
        Aggiungi un altro parametro chiamato "velocità" (speed)
        alla funzione "pattuglia" (patrol). Prova a utilizzare il blocco "imposta il personaggio ... velocità ..." con il nuovo parametro "velocità" per aiutare il pinguino a prendere entrambe le bandierine prima che gli altri ne prendano una.
      Course 4 Play Lab Params 7_instruction: |
        Esamina il codice che trovi già pronto per vedere se riesci a capire cosa fa ogni blocco.<br><br>
        Quando hai finito, utilizza i tasti freccia per far muovere il cane e raccogliere tutte le bandierine.
      Course 4 Play Lab Params 8_instruction: Utilizza il blocco "quando il personaggio
        ... tocca ..." per collocare il cane in alto a sinistra SOLO quando tocca
        uno qualunque degli altri personaggi.
      Course 4 Play Lab Params 9_instruction: "Ecco un gioco usato in una precedente
        lezione, ma con la maggior parte del codice nascosta. C'è una nuova funzione
        \"segna il punteggio\" (score_points).<br><br>\nModifica questa funzione in
        modo che aggiunga alla variabile  \"punteggio\" (player_score) il valore di
        un nuovo parametro \"punti\" (points).<br><br>\nLa variabile \"punteggio\"
        deve essere incrementata ogni volta il che il cane colpisce il gatto con i
        cuori viola e decrementata ogni volta che il gatto colpisce il cane con i
        cuori gialli.<br><br>\nUna volta concluso clicca su \"Esegui\" per giocare.
        Quando il punteggio arriva a 6 si passa all'esercizio successivo. \n"
      Course 4 Play Lab Vars 1_instruction: In questo esercizio non devi scrivere
        alcun codice. Devi solo premere "Esegui" per giocare! Qui sei il cane che
        sta cercando di raccogliere più bandierine del gatto. Utilizza la freccia
        verso il basso per controllare il cane. Premi "Termina" quando hai finito
        di giocare.
      Course 4 Play Lab Vars 2_instruction: Quella del precedente esercizio non è
        stata un bella gara! Modifica la variabile denominata "velocità del cane"
        (dog_speed) per essere sicuro di poter raccogliere più bandierine del gatto.
        Il primo che raccoglie 10 bandierine vince!
      Course 4 Play Lab Vars 3_instruction: Ecco un nuovo tipo di gioco! Utilizza
        le frecce verso sinistra e verso destra per muoverti, e la freccia verso l'alto
        per saltare. Riesci a raccogliere tutte le bandierine?
      Course 4 Play Lab Vars 4_instruction: Ora c'è una nuova variabile chiamata "altezza"
        (height) che serve a controllare quanto in alto il cane può arrivare con un
        salto. Modifica il valore a cui viene impostata "altezza", in modo che il
        cane possa saltare abbastanza in alto da arrivare a raggiungere tutte le bandierine.
      Course 4 Play Lab Vars 5_instruction: Costruiamo un gioco! In primo luogo abbiamo
        bisogno di un punteggio. Imposta il valore iniziale della variabile "punteggio"
        (points) a 10.
      Course 4 Play Lab Vars 6 (copy 1)_instruction: Forte! Abbiamo ora una nostra
        variabile per il punteggio. Ma come possiamo rederla utile?  Che ne dite di
        aggiungere dei punti alla variabile ogni volta che colpite il nemico con una
        palla di fuoco ? Usate l'evento «quando l'attore 2 tocca qualsiasi cosa »
        per aggiornare la variabile quando la palla di fuoco colpisce il gatto. Potete
        incrementare il punteggio impostando score = score + 1. Fate in modo che il
        vostro punteggio arrivi a 10, incrementandolo di 1 alla volta, per risolvere
        l'esercizio.
      Course 4 Play Lab Vars 6_instruction: |
        Utilizza la freccia verso destra per far lanciare cuori al cane.<br><br>
        Come vengono assegnati i punti? <br>
        Bisogna aggiungere 1 al "punteggio" (points) ogni volta che il cane (personaggio 1) colpisce il gatto (personaggio 2) con un cuore.<br>
        Per ottenere questo risultato, usa l'evento "quando il personaggio 2 tocca una cosa qualunque" così da attivare un aggiornamento del tuo punteggio ogni volta che l'evento accade. Per incrementare "punteggio" impostalo a "punteggio + 1".<br>
        Fai salire il tuo punteggio fino a 10 (un punto alla volta!) per risolvere l'esercizio.
      Course 4 Play Lab Vars 7_instruction: |
        Bello! Ora facciamo in modo che il gioco non sia troppo facile.
        Ogni volta che il cane (personaggio 1) viene colpito da un cuore giallo lanciato dal gatto (personaggio 2), dovresti perdere un punto. Inizia con 10 punti così non è troppo difficile. Lascia che il tuo punteggio scenda da 10 fino a 0 per risolvere l'esercizio.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: Bene. Un'ultima cosa per questo
        gioco. Predisponiamolo in modo che il giocatore possa vincere (o perdere).
        Usiamo un blocco "ripeti per sempre" per controllare il valore del punteggio.
        Quando il punteggio diventa maggiore di 20, fai scomparire il nemico. Quando
        il punteggio diventa 0, fai scomparire il giocatore. Clicca su "Termina" quando
        il gioco funziona come volevi tu.
      Course 4 Play Lab Vars 8_instruction: Predisponiamo ora il gioco in modo che
        il cane possa vincere (o perdere). Usiamo un blocco "ripeti per sempre" per
        controllare il valore del punteggio. Quando il punteggio diventa maggiore
        di 20, fai scomparire il nemico (il gatto). Quando il punteggio diventa 0,
        fai scomparire il giocatore (il cane). Clicca su "Termina" quando il gioco
        funziona come volevi tu.
      Course 4 Play Lab Vars 9_instruction: |
        Tempo di giocare: qui ci sono tutte le variabili con cui abbiamo giocato finora, e anche qualcuna in più in caso ti serva.<br><br><b>Attenzione</b>:<br> se vuoi, puoi cambiare nome alle variabili esistenti o introdurne di nuove. Clicca sul triangolino con la punta verso il basso accanto al nome della variabile.<br><br>
        Nota che ora ci sono così tanti blocchi nella cassetta degli attrezzi che li abbiamo organizzati in diverse categorie. Prenditi un po' di tempo per esaminare tutto ciò che è a tua disposizione. Scorri verso il basso per vedere tutti i comandi nell'area di lavoro.<br>Quando hai finito la tua esplorazione, prova a creare un gioco oppure una storia usando i cicli, le variabili e gli eventi.
      Course 4 Play Lab Vars_instruction: Bene. Un'ultima cosa per questo gioco. Predisponiamolo
        in modo che il giocatore possa vincere (o perdere). Usiamo un blocco "ripeti
        per sempre" per controllare il valore del punteggio. Quando il punteggio diventa
        maggiore di 20, fai scomparire il nemico. Quando il punteggio diventa 0, fai
        scomparire il giocatore.
      Course 4 Play Labs For Loops 1_instruction: Fai in modo che il cane dica tutti
        i numeri da 1 a 100. Utilizza un "ciclo con contatore" e un blocco "contatore"
        (counter) per far dire al cane il valore della variabile contatore ogni volta
        che il ciclo viene ripetuto.
      Course 4 Play Labs For Loops 2_instruction: Questa volta prova a far dire al
        cane i numeri dispari da 1 a 100.
      Course 4 Play Labs For Loops 3_instruction: Se contiamo con un passo più grande,
        nella stessa quantità di tempo possiamo contare fino ad un numero più grande.
        Prova a far contare il cane da 10 a 1000, a passi di 10.
      Course 4 Play Labs For Loops 4_instruction: Cambiare il passo può essere utile,
        ma stiamo ancora contando in modo lineare (la distanza tra due valori successivi
        è sempre la stessa). Come potremmo fare se volessimo contare in modo esponenziale?
        Senza cambiare le impostazioni del ciclo con contatore, riesci a contare 1,
        4, 9, 16, 25... (il contatore al quadrato)?
      Course 4 Play Labs For Loops 4a_instruction: Ora, uniamo le variabili da Stage
        7 insieme con la variabile "counter" per far accadere qualche magia.   \r
        \r In questo puzzle, Cane varierà da 0 a 1000, "incrementandosi".  Impostare
        la variabile di "incremento" a 10 all'inizio del codice per vedere cosa succede.
      Course 4 Play Labs For Loops 5_instruction: Nell'ultima fase abbiamo contato
        il quadrato di ogni numero. Prova a cambiare "contatore ^ 2" in "contatore
        ^ 3" per contare il cubo di ogni numero (1, 8, 27, 64, 125, 216, 343….)
      Course 4 Play Labs For Loops 5a_instruction: |-
        In this puzzle, Dog will be your
        time keeper.\r
        \r
        Dog will count from 0 to 30 by "increment".  The "increment"
        variable will begin with a value of 1.\r
        \r
        Can you make it so that each
        time you click Dog, the increment increases by 2?  Click the forward arrow
        to run the for loop.\r
        \r
        Run the loop a couple of times, clicking Dog before
        each one.
      Course 4 Play Labs For Loops 6_instruction: Ricorda che un numero è primo solo
        se è divisbile per 1 e per se stesso. Utilizzare la funzione "is_prime" per
        ottenre solo i numeri primi da 1 a 100.
      Course 4 Play Labs For Loops 6a_instruction: Cane continuerà a contare nel nostro
        "ciclo for" mediante un "incremento", ma questa volta, aggiungeremo la magia
        nel mix.  È possibile modificare il codice affinché "incremento" aumenta di
        due ogni volta che viene selezionato Il Mago? \r \r Attenzione!  Il Mago si
        muove velocemente!
      Course 4 Play Labs For Loops 7_instruction: Potresti usare un ciclo "per" per
        aiutarmi a dire la sequenza 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: Ora stiamo ottenendo qualcosa!  Cosa
        succede se iniziamo a contare quante volte possiamo cliccare il Mago prima
        che Cane arrivi a 30?  \r \r Concludete aggiungendo blocchi alla procedura
        guidata in modo che ogni volta che viene fatto clic sulla variabile "cliccato"
        aumenta di uno. È possibile ignorare "incremento" per ora. \r \r Cane inizia
        il conteggio quando si fa clic su "Esegui".
      Course 4 Play Labs For Loops 8_instruction: Quale ciclo con contatore mi farebbe
        pronunciare la sequenza 19, 27, 35, 43, 51?
      Course 4 Play Labs For Loops 8a_instruction: Per finire la nostra partita, abbiamo
        bisogno di portare indietro la variabile di "incremento"!    Colleghiamola
        al livello di gioco. \r \r 1) Tenere traccia del numero di volte che Il Mago
        è cliccato. \r 2) Se Il Mago viene selezionato almeno 10 volte prima che Cane
        raggiunga 30, aumentare "incremento" di 1 e incominciare da capo. \r 3) Se
        Il Mago non viene cliccato almeno 10 volte, il gioco è finito.
      Course 4 SCF 1_instruction: |
        Usa le funzioni suggerite per disegnare quattro file di tre esagoni l'una ("draw a line of heagons" = "disegna una fila di esagoni"). Osserva che le file di numero pari vengono disegnate spostate a destra.<br><br>
        Nota: "shift down/forward" = "scivola in basso e avanti"; "shift down/backward" = "scivola in basso e indietro".<br><br>
        Vuoi realizzare la figura che ti abbiamo mostrato? Ecco alcuni suggerimenti:<br><br>
        1. Ogni esagono ha il lato di 40 pixel.<br><br>
        2. C'è un salto di 120 pixel tra un esagono e il successivo della stessa fila.<br><br>
        3. Prima di disegnare la seconda fila di esagoni, devi girare a destra di 60 gradi e saltare avanti di 40 pixel. Poi devi girare indietro l'artista e saltare indietro di 320 pixel.<br><br>
        4. Prima di disegnare la terza fila di esagoni, devi girare a destra di 60 gradi e saltare avanti di 40 pixel. Poi devi girare indietro l'artista e saltare indietro di 440 pixel (120 pixel in più della seconda).<br><br>
        <a href="https://studio.code.org/c/159884109">Clicca qui</a> e poi su "Come funziona" per vedere la soluzione.
      Course 4 SCF 1a_instruction: |
        Riesci a capire come raccogliere tutto questo nettare con il minor numero possibile di blocchi?<br><br>
        Ecco alcuni suggerimenti:<br><br>
        1. Riprendi la funzione definita nella <a href="https://studio. code. org/s/course4/stage/16/puzzle/6">lezione 16</a> per raccogliere un quantità specificata di nettare in una direzione specificata.<br><br>
        2. Osserva che il percorso base dell'ape è uno zig-zag che scende in basso a destra.<br><br>
        3. Rifletti su come usare un "ciclo con contatore" per chiamare la funzione con il valore corretto del parametro.
      Course 4 SCF 1b_instruction: |
        Riesci a capire come produrre tutto questo miele con il minor numero possibile di blocchi?<br><br>
        Ecco alcuni suggerimenti:<br><br>
        1. Osserva che le dosi di miele da produrre sono sempre le stesse: puoi usare una funzione.<br><br>
        2. Osserva questa regolarità del percorso dell'ape per avvicinarsi ai favi: 2 passi verso sinistra e 2 verso l'alto, poi 3 verso sinistra e 3 verso l'alto.<br><br>
        3. Puoi usare un "ciclo con contatore" per far fare all'ape il percorso opportuno.
      Course 4 SCF 2_instruction: |
        Usa quello che hai imparato nell'esercizio precedente per disegnare un'immagine come quella mostrata in questo esercizio.<br><br>Nota: Il codice diventa più semplice se usi le funzioni con parametri.<br><br>
        Ecco alcuni suggerimenti:<br><br>
        1. Ogni ottagono ha i lati lunghi 40 pixel.<br><br>
        2. C'è un salto di 136 pixel tra un ottagono e il successivo della stessa fila orizzontale.<br><br>
        3. Prima di disegnare le file pari di ottagoni, devi girare l'artista a destra di 45 gradi e farlo saltare in avanti di 96 pixel. Poi lo devi girare indietro e farlo saltare indietro di 408 pixel.<br><br>
        4. Osserva che, siccome ci sono più ottagoni nelle file pari, non devi far saltare indietro l'artista di una quantità supplementare prima di iniziare a disegnare le successive file dispari. Puoi quindi usare la stessa funzione per riposizionare l'artista prima di disegnare ogni fila successiva.<br><br>
        <a href="https://studio.code.org/c/159876895">Clicca qui</a> e poi su "Come funziona" per vedere la soluzione.
      Course 4 SCF 3 Fail 1_instruction: Riesci a capire come...
      Course 4 SCF 3 Fail 2_instruction: Riesci a capire come...
      Course 4 SCF 3_instruction: |
        Usa quello che hai imparato nell'esercizio precedente per disegnare un'immagine come quella mostrata in questo esercizio.<br><br>Nota: Il codice diventa più semplice se usi le funzioni con parametri.<br><br>
        Ecco alcuni suggerimenti:<br><br>
        1. Il disegno è formato da una serie di ottagoni ognuno con i lati lunghi "contatore" (counter) pixel.<br><br>
        2. La funzione che disegna l'ottagono è chiamata dall'interno di un "ciclo con contatore" che conta all'indietro da 200 a 2 con passo 2.<br><br>
        3. Ad ogni ripetizione del "ciclo con contatore" devi girare di 22.5 gradi.<br><br>
        4. Il valore del "contatore" controlla sia il colore (diminuisce il "rosso" e aumenta sia il "verde" che il "blu") che la larghezza del pennello.<br><br>
        <a href="https://studio.code.org/c/159877686">Clicca qui</a> e poi su "Come funziona" per vedere la soluzione.
      Course 4 SCFL 1_instruction: Risolvi questo esercizio usando il minor numero
        di blocchi possibile.
      Course 4 SCFL 1a_instruction: Puoi far arrivare Scrat alla sua ghianda usando
        il minor numero possibile di blocchi?
      Course 4 SCFL 1b_instruction: Puoi far arrivare Scrat alla sua ghianda usando
        il minor numero possibile di blocchi?
      Course 4 SCFL 2_instruction: Risolvi questo esercizio usando il minor numero
        di blocchi possibile.
      Course 4 SCFL 3_instruction: Riesci a ricreare questo disegno?
      Course 4 SCFL 4_instruction: Riesci a ricreare questo disegno?
      Course 4 SCFL 5_instruction: Riesci a ricreare questo disegno?
      Course 4 SCFL 6_instruction: Riesci a ricreare questo disegno usando solo un
        ciclo?
      Course 4 SCFL 7_instruction: L'artista vuole disegnare qualche onda! Riesci
        ad aiutarlo ricreando questo disegno?
      Course 4 SCFP 1_instruction: Crea una funzione con parametri che permetta all'artista
        di saltare all'indietro e in avanti di x pixel e anche su e giù di y pixel
        (con numeri positivi e negativi).
      Course 4 SCV 1_instruction: Ora hai imparato tutto quello che devi sapere per
        realizzare un disegno come questo! Questo esercizio è fatto apposta per essere
        difficile da risolvere! Riesci a lavorarci su fino a capire come si fa?
      Course 4 SCV 2_instruction: Ora hai imparato tutto quello che devi sapere per
        realizzare un disegno come questo! Questo esercizio è fatto apposta per essere
        difficile da risolvere! Riesci a lavorarci su fino a capire come si fa?
      Course 4 SCV 3_instruction: Ecco un gioco di scontri!  Muovendo il cane, tocca
        il gatto per ottenere 2 punti e il pinguino per ottenere 3 punti.  Arriva
        a 10 punti per vincere!<br><br>Ma fai attenzione, quando il gatto e il pinguino
        si toccano, perdi 1 punto.<br><br>Aggiungi i blocchi necessari per far funzionare
        il gioco nel modo in cui è stato spiegato.  Come puoi muovere il cane in tutte
        le direzioni utilizzando i tasti freccia?  Come puoi aggiungere punti quando
        il cane tocca il gatto o il pinguino?  Come puoi togliere un punto quando
        il gatto ed il pinguino si toccano?
      Course 4 SCV 4_instruction: Risolvi questo esercizio usando il minor numero
        possibile di blocchi.
      Course 4 SCV 5_instruction: Risolvi questo esercizio usando il minor numero
        possibile di blocchi.
      Course 4 SCV 6_instruction: Ora hai imparato tutto quello che devi sapere per
        realizzare un disegno come questo! Questo esercizio è fatto apposta per essere
        difficile da risolvere! Riesci a lavorarci su fino a capire come si fa?
      Course 4 SCVP 1_instruction: Crea una funzione con parametri che permetta all'artista
        di saltare all'indietro e in avanti di x pixel e anche su e giù di y pixel
        (con numeri positivi e negativi).
      Course 4 Variables Assessment_instruction: "È possibile creare questa immagine
        utilizzando una variabile per i lati? Ogni latio dovrebbe essere lungo 50
        pixel."
      Course1BeePuzzle12_instruction: Prendi tre dosi di nettare e poi fai due dosi
        di miele
      Course1MazeAssessment1_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig
      Course1MazeAssessment2_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig.
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) \n"
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: 'La funzione "ridimensiona" restituisce l''immagine
        in ingresso ingrandita o rimpicciolita di un certo fattore. Prova a ridimensionare
        questo cerchio di un fattore 10: l''immagine che ne risulta quanto è diversa
        dall''immagine che avresti ottenuto disegnando subito un cerchio di quelle
        dimensioni?'
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Tempo di giocare: crea qualcosa di artistico col
        codice!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: Ora disegniamo 20 cerchi sovrapposti,
        girando di 18 gradi tra un cerchio e l'altro. Di quanto devi saltare in avanti?
      frozen circle function with parameter_instruction: In questo esercizio il blocco
        "disegna un cerchio" può creare cerchi di diverse dimensioni. Usalo per disegnare
        un cerchio piccolo di dimensione 5 e un cerchio più grande di dimensione 10.
      frozen circle function_instruction: Usa il nuovo blocco "disegna un cerchio"
        per disegnare 10 cerchi sovrapposti. Devi capire di quanto saltare in avanti
        tra un cerchio e l'altro.
      frozen circle_instruction: Il cerchio è una forma speciale. Riesci a capire
        che numero sostituire al posto dei punti interrogativi per disegnare un cerchio?
      frozen cross rotate dense_instruction: 'Adesso ripetiamolo 90 volte! Quante
        volte 90 sta in 360? Suggerimento: È un numero molto piccolo.'
      frozen cross rotate_instruction: Adesso prova a ripetere il disegno avanti e
        indietro per 10 volte. Di quanti gradi devi girare tra ogni linea?
      frozen cross_instruction: Aggiungi un blocco "Ripeti" intorno a questi comandi
        per creare un segno più. Hai notato che Elsa può andare avanti e indietro?
      frozen diamond mini snowflake_instruction: Lo sapevi che ogni fiocco di neve
        ha una forma diversa? Disegniamo un altro fiocco di neve usando un altro blocco
        "ripeti" per ripetere il parallelogramma 4 volte, girando ogni volta a destra
        di 90 gradi tra ogni parallelogramma.
      frozen diamond snowflake_instruction: Adesso, disegniamo un altro fiocco di
        neve usando il blocco "ripeti" per ripetere il rombo 10 volte, girando a destra
        di 36 gradi dopo ognuno di essi.
      frozen diamond_instruction: Utilizza una ripetizione intorno a questi blocchi
        per creare un parallelogramma. È proprio come un rettangolo ma ha angoli diversi.
        Questo ha angoli di 60 e 120 gradi invece che tutti gli angoli di 90 gradi.
      frozen freeplay_instruction: Sei ufficialmente diventato un maestro artista!
        Crea un meraviglioso paesaggio invernale.
      frozen line_instruction: Ciao! Sono Elsa di Arendelle. Aiutami a disegnare una
        linea.
      frozen perpendicular_instruction: Adesso vediamo se possiamo disegnare due linee
        con un angolo di 90 gradi tra loro. Devi usare il blocco "gira a ..." e anche
        il blocco "vai ...".
      frozen snowflake branch_instruction: Usa il blocco "disegna un ramo di un fiocco
        di neve" per disegnare tre rami, così da ottenere l'inizio di un vero fiocco
        di neve.
      frozen snowflake full_instruction: Adesso ripetiamo il disegno di un ramo per
        8 volte per ottenere un magnifico fiocco di neve!
      frozen snowflower_instruction: Fiocchi di neve di aspetto complesso possono
        essere ottenuti usando forme molto semplici. Riesci a disegnare questo, ripetendo
        5 cerchi di dimensione 5 e 5 cerchi di dimensione 10?
      frozen square iterative_instruction: I blocchi che trovi già pronti sono l'inizio
        del disegno di un quadrato. Continua per completarlo (servono 4 linee per
        disegnarlo tutto).
      frozen square loop 3x_instruction: Disegniamo tre quadrati, girando dopo ognuno
        di essi. Assicurati di girare di 120 gradi ogni volta.
      frozen square loop_instruction: Ciao, sono Anna di Arendelle! Disegniamo un
        quadrato usando il blocco "ripeti ... volte", così da utilizzare il minor
        numero possibile di blocchi. Quante volte il blocco "ripeti ... volte" deve
        ripetere i blocchi al suo interno per ottenere il quadrato?
      frozen square snowflake_instruction: Riesci a creare un fiocco di neve usando
        il blocco "ripeti ... volte" per disegnare 10 volte un quadrato, e il blocco
        "gira a ..." per girare di 36 gradi tra un quadrato e l'altro?
      Infinity_catch_instruction: Riesci a fare in modo che Elsa (il "personaggio
        2") raggiunga Anna usando i tasti freccia?
      Infinity_finale_instruction: Crea il tuo gioco con i personaggi di Disney Infinity
        e condividilo!
      Infinity_move_collide_instruction: Hiro è il "personaggio 1". Spostalo verso
        Baymax e riproduci un suono quando si toccano.
      Infinity_move_directions_instruction: Baymax è il "personaggio 2". Puoi far
        muovere Baymax  aggiungendo i blocchi "sposta il personaggio 2 in alto" e
        "sposta il personaggio 2 in basso". Clicca sul pulsante "Esegui" e fai toccare
        a Baymax gli altri due personaggi usando i tasti freccia.
      Infinity_move_right_instruction: Hiro è il "personaggio 1". Usa il blocco "sposta
        il personaggio 1" per far spostare Hiro verso destra fino a toccare Baymax.
      Infinity_repeat_instruction: Usa un blocco "ripeti per sempre" per far spostare
        Anna in continuazione in su e in giù di 400 pixel.
      Infinity_say_instruction: Fai dire "Ciao" ad Anna usando un blocco "il personaggio
        dice ...".
      Infinity_shoot_instruction: Baymax è il "personaggio 2". Fai lanciare a Baymax
        un razzo contro Hiro.
      Infinity_shoot_directions_instruction: Hiro è il "personaggio 3". Fai in modo
        che Hiro scagli qualcosa contro ognuno degli altri quattro personaggi. Tra
        un lancio e il successivo, aspetta un secondo.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Tocca ancora più fiocchi di neve!
      Infinity_touch_four_instruction: Muovi Anna su, giù, a sinistra e a destra per
        toccare ognuno dei quattro fiocchi di neve.
      Infinity_touch_score_instruction: Fai in modo che Anna segni un punto quando
        tocca un fiocco di neve. Poi clicca su "Esegui" e guidala in modo tale da
        farle toccare ogni fiocco di neve almeno una volta.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Disegna una linea breve verso l'alto
        e una lunga verso destra!
      K-1 artist 1 level 10_instruction: Questo è un esercizio di riepilogo -- Disegna
        la linea tratteggiata usando sia i blocchi "salta" che quelli per disegnare.
      K-1 artist 1 level 9_instruction: Questo è un esercizio di riepilogo -- Disegna
        la figura usando tre linee.
      K-1 Artist Loops 1_instruction: Disegna questa linea spostando 4 volte l'artista
        verso Est.
      K-1 Artist Loops 2_instruction: Riesci a disegnare la stessa linea usando un
        blocco "ripeti" (detto anche "ciclo")?
      K-1 Artist Loops 3_instruction: Riesci a ripetere i blocchi già pronti per disegnare
        le 6 linee in grigio?
      K-1 Artist Loops 4_instruction: Un blocco "ripeti", o "ciclo", può aiutarti
        a disegnare la parte superiore di questo castello?
      K-1 Artist Loops 5_instruction: Che cosa puoi ripetere per 4 volte per disegnare
        gli scalini di questo esercizio?
      K-1 Artist Loops 6_instruction: 'Per completare questo disegno hai bisogno di
        due blocchi "ripeti", o "cicli": uno per salire le scale e l''altro per scenderle.'
      K-1 Artist Loops 7_instruction: Puoi completare questa figura usando due cicli?
      K-1 Artist Loops 8_instruction: La scala di questo esercizio ha i gradini più
        larghi.
      K-1 Artist Loops 9_instruction: Qual è il modo migliore per disegnare questi
        scalini?
      K-1 Artist Loops Free Play_instruction: 'Tempo di giocare: disegna qualcosa
        di divertente!'
      K-1 Artist1 1_instruction: Disegna il piede della persona con una linea.
      K-1 Artist1 10_instruction: Disegna e Salta per costruire la linea tratteggiata
        fino al tesoro.
      K-1 Artist1 2_instruction: Disegna il baffo del gatto con due linee!
      K-1 Artist1 3_instruction: Disegna due linee verso est e due linee verso nord
        per completare la casa!
      K-1 Artist1 4_instruction: Disegna linee in su, in orizzontale, e in basso per
        completare il castello!
      K-1 Artist1 5.5_instruction: Completa la terza torre del castello usando linee
        brevi
      K-1 Artist1 5_instruction: Disegna il gambo di questo fiore con due linee!
      K-1 Artist1 6_instruction: Il blocco "salta" ti consente di muoverti senza disegnare.
        Completa il disegno usando il blocco "salta"!
      K-1 Artist1 7_instruction: Usa il blocco "salta" per muoverti senza disegnare.
        Salta su e disegna una linea.
      K-1 Artist1 8_instruction: Disegna la linea tratteggiata usando sia i blocchi
        "salta" che quelli per disegnare
      K-1 Artist1 9_instruction: Disegna e Salta per costruire la linea tratteggiata.
      K-1 Artist1 Assessment 1_instruction: Disegna le linee corte e quelle lunghe!
      K-1 Artist1 Assessment 2_instruction: Disegna le linee corte tratteggiate!
      K-1 Artist2 1_instruction: Disegna un quadrato sotto il triangolo.
      K-1 Artist2 2_instruction: Salta e disegna un quadrato accanto alla casa.
      K-1 Artist2 3_instruction: Disegna un quadrato sopra l'altro quadrato.
      K-1 Artist2 4_instruction: Disegna un rettangolo per completare il ponte.
      K-1 Artist2 5_instruction: Disegna un rettangolo per completare i pilastri del
        ponte.
      K-1 Artist2 6_instruction: Disegna due quadrati per costruire un rettangolo!
      K-1 Artist2 Assessment1_instruction: Questo è un esercizio di riepilogo -- Salta
        e disegna un quadrato vicino all'altro quadrato.
      K-1 Artist2 Free Draw_instruction: Disegna qualunque cosa tu voglia disegnare!
      K-1 Artist2_7_instruction: Disegna un rettangolo per dare alla cassettiera il
        cassetto superiore!
      K-1 Bee 1_instruction: Spostami sul fiore, raccogli il nettare, poi fammi arrivare
        al favo e produci il miele.
      K-1 Bee 10_instruction: Prendi quattro dosi di nettare e poi fai due dosi di
        miele!
      K-1 Bee 11.5_instruction: Prendi quattro dosi di nettare per fare quattro dosi
        di miele!
      K-1 Bee 11_instruction: Prendi tre dosi di nettare e poi fai una dose di miele!
      K-1 Bee 12_instruction: Prendi tre dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 13_instruction: Prendi tre dosi di nettare e poi fai una dose di miele!
      K-1 Bee 14_instruction: Questo è un esercizio di riepilogo -- Spostami sul fiore,
        prendi il nettare, poi fammi arrivare al favo e fai il miele.
      K-1 Bee 15_instruction: Questo è un esercizio di riepilogo -- Prendi due dosi
        di nettare e fai due dosi di miele!
      K-1 Bee 2_instruction: Spostami sul fiore, raccogli il nettare, poi fammi arrivare
        al favo e produci il miele.
      K-1 Bee 3_instruction: Spostami sul fiore, raccogli il nettare, poi fammi arrivare
        al favo e produci il miele.
      K-1 Bee 4_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 5_instruction: Prendi tre dosi di nettare e poi fai tre dosi di miele!
      K-1 Bee 6_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 7_instruction: Prendi tre dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 8_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 9_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee Assessment 1_instruction: Prendi il nettare per fare il miele!
      K-1 Bee Assessment 2_instruction: Prendi il nettare per fare il miele!
      K-1 Bee Loops 1_instruction: Prendi il nettare per fare il miele!
      K-1 Bee Loops 10_instruction: Usa i blocchi "ripeti" (detti anche "cicli") per
        prendere il nettare, fare il miele e spostarti!
      K-1 Bee Loops 11_instruction: Questo è un esercizio di riepilogo -- Usa i blocchi
        "ripeti", o "cicli", per prendere il nettare e fare il miele!
      K-1 Bee Loops 12_instruction: Questo è un esercizio di riepilogo -- Usa i blocchi
        "ripeti", o "cicli", per prendere il nettare, fare il miele e spostarti!
      K-1 Bee Loops 2_instruction: Usa un blocco "ripeti" (detto anche "ciclo") per
        muoverti, quindi raccogli il nettare e produci il miele!
      K-1 Bee Loops 3_instruction: Usa i blocchi "ripeti" (detti anche "cicli") per
        prendere il nettare e fare il miele!
      K-1 Bee Loops 4_instruction: Usa i blocchi "ripeti" (detti anche "cicli") per
        prendere il nettare, fare il miele e spostarti!
      K-1 Bee Loops 5_instruction: Usa i blocchi "ripeti" (detti anche "cicli") per
        prendere il nettare e fare il miele!
      K-1 Bee Loops 6_instruction: Usa i blocchi "ripeti" (detti anche "cicli") per
        prendere il nettare, fare il miele e spostarti!
      K-1 Bee Loops 7_instruction: Usa i blocchi "ripeti" (detti anche "cicli") per
        prendere il nettare e fare il miele!
      K-1 Bee Loops 8_instruction: Usa i blocchi "ripeti" (detti anche "cicli") per
        prendere il nettare e fare il miele!
      K-1 Bee Loops 9_instruction: Usa i blocchi "ripeti" (detti anche "cicli") per
        prendere il nettare, fare il miele e spostarti!
      K-1 Bee Loops Assessment 1_instruction: Prendi il nettare per fare il miele
        e usa i cicli per spostarti!
      K-1 Bee Loops Assessment 2_instruction: Prendi il nettare per fare il miele
        usando i cicli!
      K-1 Bee Puzzle 12_instruction: Prendi tre dosi di nettare e poi fai due dosi
        di miele
      K-1 Building a Foundation Assessment_instruction: Costruisci una piramide a
        tre livelli, non ci sono altre indicazioni. Gioca un po' con i blocchi finché
        non riesci a costruirla!
      k-1 maze 1_instruction: Riesci a spostarmi verso Ovest per prendere il maialino?
      K-1 Maze 10_instruction: Gira intorno alla dinamite (TNT) per farmi prendere
        il maialino!
      K-1 Maze 11_instruction: 'Fammi fare il percorso per arrivare a quello sciocco
        maiale. Evita la dinamite (TNT) o le mie piume salteranno in aria! Suggerimento:
        è a Sud rispetto a me.'
      K-1 Maze 2_instruction: Spostami verso Est per farmi prendere il maialino!
      K-1 Maze 3_instruction: Spostami verso Sud per farmi prendere il maialino!
      K-1 Maze 4_instruction: Spostami verso Nord per farmi prendere il maialino!
      K-1 Maze 5_instruction: Spostami verso Est per farmi prendere il maialino!
      K-1 Maze 6_instruction: Spostami in una direzione e poi in un'altra per farmi
        prendere il maialino!
      K-1 Maze 7_instruction: Spostami in una direzione e poi in un'altra per farmi
        prendere il maialino!
      K-1 Maze 8_instruction: Spostami in una direzione e poi in un'altra per farmi
        prendere il maialino!
      K-1 Maze 9_instruction: Spostami in una direzione e poi in un'altra per farmi
        prendere il maialino!
      K-1 Maze Assessment 1_instruction: Questo è un esercizio di riepilogo -- Fammi
        arrivare al maialino!
      K-1 Maze Assessment 12_instruction: Esercizio di verifica
      K-1 Maze Assessment 13_instruction: Esercizio di verifica
      K-1 Maze Assessment 2_instruction: Questo è un esercizio di riepilogo -- Fammi
        arrivare al maialino!
      K-1 maze debug 1_instruction: Modifica il codice per farmi arrivare al maialino!
      K-1 maze debug 10_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 11_instruction: Questo è un esercizio di riepilogo --\r Correggi
        questo programma riordinando, aggiungendo o cancellando blocchi, per farmi
        arrivare al maialino!
      K-1 maze debug 2_instruction: Cerca di capire che cosa manca, quindi aggiungi
        i blocchi necessari per farmi arrivare al maialino!
      K-1 maze debug 3_instruction: Cerca di capire che cosa va eliminato, quindi
        rimuovi i blocchi che non mi hanno arrivare al maialino!
      K-1 maze debug 4_instruction: Esegui questi blocchi di codice e poi correggili!
        Credo che ci sia un errore nel percorso.
      K-1 maze debug 5_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 6_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 7_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 8_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 9_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 Maze debug Assessment 1_instruction: Questo è un esercizio di riepilogo
        --\r Correggi questo programma riordinando, aggiungendo o cancellando blocchi,
        per farmi arrivare al maialino!
      K-1 Maze Loops 1_instruction: Fammi arrivare al maialino!
      K-1 Maze Loops 10_instruction: Fammi arrivare al maialino! Usa il blocco "ripeti".
      K-1 Maze Loops 11_instruction: Fammi arrivare al maialino! Usa il blocco "ripeti".
      K-1 Maze Loops 12_instruction: Fammi arrivare al maialino! Usa il blocco "ripeti".
      K-1 Maze Loops 2_instruction: Prova ad usare il nuovo blocco "ripeti" (detto
        anche "ciclo") per farmi arrivare al maialino! Esso mi farà "ripetere", per
        il numero di volte che hai impostato, tutte le azioni all'interno del blocco.
      K-1 Maze Loops 3_instruction: Fammi arrivare al maialino! Usa il blocco "ripeti".
      K-1 Maze Loops 4_instruction: Fammi arrivare al maialino!
      K-1 Maze Loops 5_instruction: Fammi arrivare al maialino! Usa il blocco "ripeti".
      K-1 Maze Loops 6_instruction: Fammi arrivare al maialino! Usa il blocco "ripeti".
      K-1 Maze Loops 7_instruction: Fammi arrivare al maialino! Usa il blocco "ripeti".
      K-1 Maze Loops 8_instruction: Fammi arrivare al maialino! Usa il blocco "ripeti".
      K-1 Maze Loops 9_instruction: Fammi arrivare al maialino!
      K-1 Maze Loops Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa i blocchi "ripeti", o "cicli", per farmi arrivare al maialino!
      K-1 Maze Loops Assessment 2_instruction: Questo è un esercizio di riepilogo
        -- Usa i blocchi "ripeti", o "cicli", per farmi arrivare al maialino!
      K-1 Maze Multi 14_instruction: Esercizio di verifica
      K-1 Maze Multi 15_instruction: Esercizio di verifica
      K-1 Maze Sequence Assessment 1_instruction: Questo è un esercizio di riepilogo
        --\r Spostami in una direzione e poi in un'altra per farmi prendere il maialino.
      K-1 Maze Sequence Assessment 2_instruction: Questo è un esercizio di riepilogo
        --\r Spostami in una direzione e poi in un'altra per farmi prendere il maialino!
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Disegnate qualunque cosa vi piaccia! Il vostro
        codice viene salvato come progetto su cui è possibile tornare a lavorare in
        qualunque momento.
      NEW Course 4 Artist Functions 1_instruction: Riesci a disegnare un quadrato
        con i lati di 100 pixel, usando un ciclo?
      NEW Course 4 Artist Functions 10.1_instruction: "Utilizzate le funzioni i puzzle
        precedente \nper disegnare questo modello.\n"
      NEW Course 4 Artist Functions 10_instruction: Clicca su "modifica" per inserire
        i blocchi nella definizione della funzione per disegnare un quadrato di 40
        pixel.
      NEW Course 4 Artist Functions 11_instruction: |
        Ora vogliamo creare una nuova funzione chiamata "disegna una fila di quadrati" (<i>draw a line of squares</i>) che disegna 6 quadrati uno di seguito all'altro. Riesci a costruire questa funzione usando la funzione "disegna un quadrato di lato 20" (draw a square 20) che trovi già pronta?<br><br>
        <b>Nota</b>: Nota che adesso la penna disegna con un tratto più sottile. Clicca su "modifica" nella funzione "disegna un quadrato di lato 20" per capire come si fa!
      NEW Course 4 Artist Functions 12_instruction: Utilizza la funzione "disegna
        una fila di quadrati" (<i>draw a line of squares</i>) del precedente esercizio
        per disegnare questa figura.
      NEW Course 4 Artist Functions 13_instruction: |
        Riesci a disegnare una stella usando la funzione "disegna una fila di quadrati" (<i>draw a line of squares</i>)?<br><br>
        Se vuoi aiuto, ecco un paio di suggerimenti:<br><br>
        1. Modifica la funzione "disegna una fila di quadrati" in modo da non doverla richiamare due volte.<br><br>
        2. Ad ogni ripetizione, dovresti spostarti avanti di 60 pixel e ruotare di 144 gradi.<br><br>
        Una sfida: come dovresti modificare il codice per disegnare una stella con linee normali?
      NEW Course 4 Artist Functions 14_instruction: 'Tempo di giocare: disegna qualunque
        cosa ti piaccia. '
      NEW Course 4 Artist Functions 2_instruction: 'Sapresti disegnare tre quadrati
        a distanza di 20 pixel l''uno dall''altro? Suggerimento: ogni quadrato è largo
        100 pixel'
      NEW Course 4 Artist Functions 3_instruction: Quello in verde è un nuovo tipo
        di blocco. Si chiama "funzione". Fai clic su "modifica" per inserire in questo
        blocco "funzione" il codice per disegnare un quadrato con i lati di 100 pixel.
        Se vuoi, cambia anche il nome (draw a square = disegna un quadrato) e scrivi
        una descrizione di cosa fa. Quando hai finito di modificare la funzione clicca
        su "Chiudi" per tornare al programma. Adesso puoi usare la "funzione" come
        un qualunque altro blocco.
      NEW Course 4 Artist Functions 4_instruction: |
        Utilizza la funzione "disegna un quadrato" (draw a square) per disegnare questa figura.<br><br>
        Suggerimento: devi utilizzare un blocco "gira a destra di 120 gradi" dopo ogni quadrato.
      NEW Course 4 Artist Functions 5_instruction: Come sapeva il blocco "disegna
        un quadrato" quali comandi per eseguire? Clicca su "modifica" del blocco della
        funzione "disegna un quadrato". I diversi blocchi della funzione definiscono
        come "disegnare un quadrato". Quando hai finito, fai clic su "Salva e Chiudi"
        e poi su "Esegui".
      NEW Course 4 Artist Functions 6_instruction: |
        Utilizzando il blocco funzione "disegna un quadrato", potete disegnare questa immagine? Suggerimento: ogni quadrato è separato di 20 pixel.\r
      NEW Course 4 Artist Functions 7_instruction: |
        Stai imparando ad usare i blocchi funzione? Prova a modificare la funzione "disegna un quadrato" (draw a square) in modo che disegni un quadrato con i lati di 200 pixel.<br><br>
        Suggerimento: clicca su "modifica" per cambiare il codice della funzione. Se vuoi, puoi cambiare anche il nome della funzione. Alla fine, clicca su "Chiudi" per salvare le modifiche.
      NEW Course 4 Artist Functions 8_instruction: 'Abbiamo inserito una nuova funzione
        chiamata "disegna un triangolo" (draw a triangle) ma non c''è ancora il codice.
        Riesci a modificare la definizione della funzione per disegnare un triangolo
        con i lati di 100 pixel?<br><br>Suggerimento: clicca su "modifica" ed inserisci
        il codice necessario all''interno del blocco "disegna un triangolo" (draw
        a triangle). Se vuoi, puoi cambiare anche il nome della funzione. Clicca su
        "Chiudi" per salvare le modifiche.'
      NEW Course 4 Artist Functions 9_instruction: Riesci a risolvere questo esercizio
        aggiungendo un solo blocco?
      NEW Course 4 Artist Functions inspire_instruction: "Tempo di giocare: guarda
        la figura che trovi al link https://studio.code.org/c/110671172. Ora hai imparato
        tutto quello che devi sapere per realizzare un disegno come questo! Se questa
        immagine ti ispira, prova a realizzare qualcosa di simile. In caso contrario,
        crea qualcosa di tuo. \\r\n\nVuoi realizzare la figura che ti abbiamo suggerito?
        Ecco alcuni aiuti:\n\nSuggerimento 1: usa un ciclo con contatore, quindi usa
        la sua variabile contatore all'interno di un ciclo annidato.\n\nSuggerimento
        2: ad ogni iterazione, dovresti disegnare un quadrato e fare un salto in avanti.
        \n\nSuggerimento 3: dovresti girare a sinistra di 90 gradi all'esterno del
        ciclo annidato, ma ancora all'interno del ciclo con contatore.\n\n\\r\nVuoi
        sapere come è stato realizzata la figura che ti abbiamo suggerito? Visita
        il link https://studio.code.org/c/110671172/edit per scoprirlo.\n\nCosa succede
        se disegni i quadrati un po' più piccoli o un po' più grandi? E cosa succede
        se invece di girare a sinistra giri a destra?"
      New Course 4 Artist Functions Level 4_instruction: Utilizzate la funzione "disegna
        un quadrato" per disegnare questo modello.
      NEW Course 4 Artist Params 1_instruction: |
        Riesci a definire il codice per la funzione "disegna un quadrato" (draw a square) in modo che disegni un quadrato con i lati di 50 pixel?<br>
        Fai clic su "modifica" per iniziare. Se vuoi, puoi cambiare anche il nome della funzione.
      NEW Course 4 Artist Params 10_instruction: 'Crea un blocco funzione "disegna
        un esagono" con un parametro per la lunghezza dei lati. Suggerimento: questo
        esagono ha i lati di 100 pixel. '
      NEW Course 4 Artist Params 11_instruction: 'Riesci a capire come disegnare questa
        figura? Modifica la funzione per utilizzare il parametro "lati".<br><br>Suggerimento:
        clicca su "Esegui" per vedere cosa fa la funzione. Nota che la funzione è
        stata definita con due parametri, ma il suo codice ne usa uno solo.'
      NEW Course 4 Artist Params 12_instruction: Riesci a completare questo disegno?
        I lati di tutte le figure sono lunghi 100 pixel.
      NEW Course 4 Artist Params 12a_instruction: Questo disegno è simile a quello
        del precedente esercizio. Riesci ad utilizzare un "ciclo con contatore" insieme
        alla funzione "disegna un poligono" (draw a polygon) in modo da riprodurlo?
      NEW Course 4 Artist Params 13_instruction: In questo esercizio devi modificare
        la funzione "disegna un poligono" (draw a polygon). Ha già un parametro "lati"
        (sides) per disegnare un poligono con un numero di lati ogni volta diverso.
        Adesso aggiungi un parametro "lunghezza" (length) in modo da farle disegnare
        un poligono con la stessa lunghezza del perimetro indipendentemente dal numero
        di lati. Nota che il perimetro di ogni poligono è lungo 200 pixel. Ti ricordi
        quale equazione ti consente di ottenere figure di uguale perimetro in base
        al numero di lati?
      NEW Course 4 Artist Params 14_instruction: Modifica la funzione "disegna una
        spirale" (draw a spiral edge) per aggiungere i parametri di cui hai bisogno
        per ricreare queste figure.
      NEW Course 4 Artist Params 15_instruction: 'Tempo di giocare: qui ci sono tutte
        le funzioni che hai scritto, e anche qualcuna in più con cui puoi giocare
        ("pinwheel" disegna una girandola", "shape" un poligono). Disegna qualcosa
        di incredibile! Prova a cambiare lo spessore della penna per vedere come cambiano
        i tuoi disegni!'
      NEW Course 4 Artist Params 2_instruction: |
        Crea dall'inizio la funzione "disegna un triangolo", per disegnare un triangolo con i lati di 50 pixel.<br>
        Suggerimento: guarda nella categoria "Funzioni" (<i>Functions</i>) nella cassetta degli attrezzi.
      NEW Course 4 Artist Params 3_instruction: |
        Ora usa la funzione che hai creato nel precedente esercizio per disegnare 5 triangoli di seguito.<br><br>
        Suggerimento: ogni triangolo dista 30 pixel dal precedente.
      NEW Course 4 Artist Params 4_instruction: |
        Cosa c'è di diverso in questi blocchi funzione? Fai clic su "Esegui" per vedere cosa succede.<br><br>
        Nota: "draw a triangle with length" = "disegna un triangolo con lunghezza".
      NEW Course 4 Artist Params 5_instruction: "Inserisci, al posto di \"???\" nel
        blocco accanto a \"length\", il valore che vuoi assegnare al parametro \"lunghezza\".<br><br>\nSuggerimento:
        questo pentagono ha i lati di 100 pixel. \n"
      NEW Course 4 Artist Params 6_instruction: Assegna i valori che il parametro
        "lunghezza" (length) deve assumere per disegnare (draw) queste figure, sostituendo
        ai diversi "???" i numeri corretti. Il quadrato (square) e il triangolo (triangle)
        hanno i lati di 100 pixel, mentre l'esagono (hexagon) ha i lati di 75 pixel.
      NEW Course 4 Artist Params 7_instruction: |
        Riesci a completare questo disegno?<br><br>
        Suggerimento: ogni triangolo ha i lati di 25 pixel più lunghi rispetto al precedente. Il primo triangolo ha i lati di 25 pixel.
      NEW Course 4 Artist Params 8_instruction: "In questo esercizio il codice della
        funzione \"disegna un triangolo con lunghezza\" (draw a triangle with length)
        non è corretto. \nRiesci a modificarlo per risolvere il problema e quindi
        disegnare dei triangoli con i lati di lunghezza pari a 25, 50 e 75 pixel?<br><br>\nNota:
        dovrai usare più volte la stessa funzione con valori diversi. Riesci a farlo
        mettendo il relativo blocco una sola volta nell'area di lavoro?\n"
      NEW Course 4 Artist Params 9_instruction: |
        Clicca su "modifica" per completare la definizione della funzione "disegna un quadrato" (draw a square) ed aggiungere un parametro. Come per il triangolo, il parametro da aggiungere rappresenta la lunghezza dei lati: puoi dargli il nome che preferisci (devi cliccare sul triangolino con la punta verso il basso) e puoi cambiare anche il nome della funzione. Poi usa la funzione così definita per disegnare 3 quadrati con i lati di 25, 50 e 75 pixel, ciascuno a distanza di 100 pixel dal precedente.<br><br>
        Nota: dovrai usare più volte la stessa funzione con valori diversi. Riesci a farlo mettendo il relativo blocco una sola volta nell'area di lavoro?
      NEW Course 4 Artist Params inspire_instruction: |
        <a href="https://studio.code.org/c/106387530">Clicca qui</a> e poi su "Esegui". Ora hai imparato tutto quello che devi sapere per realizzare un disegno come quello mostrato al precedente link! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.<br><br>
        Vuoi realizzare la figura che ti abbiamo mostrato? Ecco alcuni suggerimenti:<br><br>
        1. Prova ad inserire un "ciclo con contatore" all'interno di un altro ciclo.<br><br>
        2. In ogni petalo, il poligono più grande ha 17 lati.<br><br>
        3. Quando hai finito un petalo, assicurati di spostarti in avanti di 20 pixel prima di ruotare per iniziare il petalo successivo.<br><br>
        Vuoi sapere come è stata realizzata la figura che ti abbiamo mostrato? <a href="https://studio.code.org/c/106387530">Clicca qui</a> e poi su "Come funziona" per scoprirlo.
      NEW Course 4 Artist Vars 1.5_instruction: 'Date un''occhiata al codice. Potete
        vedere come il blocco "imposta lunghezza" e il blocco "lunghezza" lavorano
        insieme? Clicca su "Esegui" per vederlo in azione. '
      NEW Course 4 Artist Vars 12_instruction: Riutilizza adesso l'algoritmo dell'esercizio
        precedente e scrivi il codice per generare un pentagono avente i lati lunghi
        150 pixel.
      NEW Course 4 Artist Vars 2.5_instruction: 'Date un''occhiata al codice. Potete
        vedere come il blocco "imposta lunghezza" e il blocco "lunghezza" lavorano
        insieme? Clicca su "Esegui" per vederlo in azione. '
      NEW Course 4 Artist Vars 2_instruction: 'Nel blocco numerico "???" puoi scrivere
        numeri al posto dei punti interrogativi. Inseriscilo nei blocchi "imposta
        lunghezza" (length) e "ripeti ... volte" ed scrivi i valori necessari per
        disegnare questo insieme di triangoli equilateri aventi i lati lunghi 50 pixel. '
      NEW Course 4 Artist Vars 4 5_instruction: Lavoro impressionante sull'ultimo
        puzzle, proviamo di nuovo facendo stavolta questo fenomenale disegno utilizzando
        esagoni di 60 pixel.
      NEW Course 4 Artist Vars 4_instruction: 'Proviamo di nuovo. Puoi impostare il
        valore della variabile "lunghezza" (length) in modo tale da realizzare questa
        accattivante figura con degli esagoni? Suggerimento: è un multiplo di 10.'
      NEW Course 4 Artist Vars 6_instruction: |
        Riesci a disegnare questa figura mettendo la variabile "lunghezza" (length) nei posti corretti ed impostandone il giusto valore? (Suggerimento: è un multiplo di 10).<br><br>
        Hai notato che è sufficiente impostare il valore della lunghezza una sola volta e il codice utilizza il valore giusto dappertutto?
      NEW Course 4 Bee For Loops 1_instruction: Usa un blocco "ripeti ... volte" (detto
        anche ciclo) per raccogliere il nettare da ogni fiore.
      NEW Course 4 Bee For Loops 10_instruction: Usa la variabile "contatore" del
        ciclo per controllare lo spostamento in senso orizzontale.
      NEW Course 4 Bee For Loops 10a_instruction: 'Pronto per una sfida? Dovrai usare
        tutto quello che hai imparato sui cicli per risolvere questo problema. Ricordati:
        molto probabilmente avrai bisogno di più tentativi prima di riuscire a capire
        tutti i passaggi necessari.'
      NEW Course 4 Bee For Loops 11_instruction: "È possibile utilizzare la variabile
        del ciclo per controllare il movimento e la raccolta di nettare?"
      NEW Course 4 Bee For Loops 2_instruction: Aggiungi il codice necessario per
        esser sicuro che l'ape raccolga tutto il nettare. Osserva di quanto codice
        hai bisogno per risolvere questo esercizio! (Vedremo una soluzione più semplice
        nel prossimo esercizio.)
      NEW Course 4 Bee For Loops 3_instruction: 'Ecco, il blocco "ripeti con contatore"
        (counter=contatore), detto anche "ciclo con contatore", rende tutto molto
        più semplice! Questo è tutto il codice di cui hai bisogno: osserva bene come
        sono combinati i blocchi e poi clicca su "Esegui" per vedere come funziona.
        Puoi anche cliccare su "Fai un passo" per osservare l''esecuzione del codice
        un passo per volta.'
      NEW Course 4 Bee For Loops 4 4_instruction: Ora dobbiamo spostarci in avanti
        di "contatore" (counter) volte, e poi raccogliere il nettare "contatore" volte.
        Riesci a svolgere questo compito usando due cicli?
      NEW Course 4 Bee For Loops 4_instruction: 'Nel blocco "ripeti con contatore"
        (counter=contatore), detto anche "ciclo con contatore", scrivi al posto di
        "???" la massima quantità di nettare che l''ape deve raccogliere. '
      NEW Course 4 Bee For Loops 5 5_instruction: Stai cominciando a capire come si
        usa il ciclo ripeti (for loop) con contatore? Aiuta l'ape a prendere tutto
        il nettare.
      NEW Course 4 Bee For Loops 5_instruction: Puoi usare un "ciclo con contatore"
        anche per contare alla rovescia. In questo esercizio, prova a raccogliere
        il nettare contando alla rovescia da 5 ad 1 a passi di 1.
      NEW Course 4 Bee For Loops 6_instruction: Il valore più a destra nel ciclo con
        contatore viene chiamato "passo". Ogni volta che il ciclo viene eseguito,
        la variabile "contatore" (counter) cambia del valore indicato dal "passo".
        Prova a raccogliere il nettare da questi fiori usando un passo di 2.
      NEW Course 4 Bee For Loops 7_instruction: |
        Ora cerchiamo di combinare la variabile "contatore" (counter) e un blocco matematico! Anche in questo caso devi raccogliere 3, 6, 9, 12, 15 dosi di nettare. Ricorda che ad ogni ripetizione del ciclo il valore definito dal "passo" modifica la variabile "contatore".
        <br><br>In che modo puoi usare la variabile "contatore" e un blocco matematico per spostarti ogni volta della distanza giusta?
      NEW Course 4 Bee For Loops 8_instruction: |
        Questo codice è da completare! Quale dovrebbe essere il "passo" (ossia la variazione) della variabile "contatore" (counter) nel ciclo con contatore per raccogliere 3, 6, 9, 12, 15 dosi di nettare?<br>
        Suggerimento: Quanto devi aggiungere ad ogni valore per ottenere il valore successivo in questa sequenza?
      NEW Course 4 Bee For Loops 9_instruction: Se il ciclo con contatore conta alla
        rovescia, il valore del "passo" viene sottratto dal contatore ad ogni ripetizione.
        Quale dovrebbe essere il valore del "passo" per raccogliere prima 15, poi
        12, poi 9, 6 e 3 dosi di nettare?
      NEW Course 4 Bee For Loops 95_instruction: Date un'occhiata a ogni parre del
        ciclo for che hai appena creato.  Puoi capire quali numeri si devono raddoppiare
        per risolvere questo puzzle? Perché funziona?
      NEW Course 4 Play Lab Params 11_instruction: 'Tempo di giocare: divertiti a
        creare il gioco che preferisci. Puoi usare tutti i blocchi che trovi nella
        cassetta degli attrezzi.'
      NEW Course 4 Play Lab Params 5 5_instruction: Proviamo di nuovo, ma con meno
        aiuti. Cosa devi modificare questa volta per far fare la ricognizione ai personaggi?
      NEW Course 4 Play Lab Vars 4 5_instruction: Cosa pensi che faccia questo codice?
        Premi "Esegui" per vedere cosa succede.
      NEW Course 4 Play Labs For Loops 7a_instruction: Utilizzando quello che hai
        imparato finora, si può fare in modo che il dinosauro faccia un passo in avanti
        ogni volta che il pinguino conta?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "È tempo di giocare.
        Divertiti con tutti i blocchi della cassetta degli attrezzi. "
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Sfida. Come useresti il ciclo
        for per fare in kodo che ogni ogni attore vada in giro e dica il che gli corrisponde
        per poi sparire dallo schermo? '
      New Play Lab Project_instruction: Create la vostra storia o il vostro gioco!
        Il codice viene salvato come un progetto ed è possibile tornarci in qualsiasi
        momento.
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: Dai al fantasma degli occhi, usando la funzione
        "disegna un cerchio".
      October15 JoL 1_instruction: Programma l'artista per disegnare la faccia della
        tua zucca per Halloween!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: Usa i cicli e il blocco "intero scelto a caso
        ..." per riempire la notte di stelle di varie forme e dimensioni.
      Overworld Avoid Monsters_instruction: Incontrare un Creeper non è una buona
        idea. Muoviti con attenzione tra i Creeper e mettiti al sicuro a casa tua.
      Overworld Chop Tree_instruction: 'Il legno è una risorsa molto importante: serve
        per costruire molte cose. Raggiungi l''albero e usa l''istruzione "distruggi"
        per abbatterlo.'
      Overworld Chop Trees_instruction: 'Devi costruire una casa prima che il sole
        tramonti: ti serve molta legna. Abbatti tutti e tre gli alberi.'
      Overworld Free Play 20x20_instruction: Complimenti! Hai completato tutti gli
        esercizi! Ora estrai e costruisci quello che vuoi, creando qualcosa di unico.
        Usa tutto ciò che imparato finora.
      Overworld Free Play_instruction: Questo è lo scenario in cui puoi giocare. Scegli
        cosa costruire.
      Overworld House Frame - A_instruction: Questo posto sembra buono per costruire
        la tua casa. Realizza le fondamenta sui blocchi di terra.
      Overworld House Frame - C_instruction: Questo posto sembra buono per costruire
        la tua casa. Realizza le fondamenta sui blocchi di terra.
      Overworld House Frame B_instruction: Un muro è finito, costruiamo il resto della
        casa partendo dal pian terreno! Devi ripetere le stesse azioni un bel po'
        di volte.
      Overworld House Frame B2_instruction: Un muro è finito, costruiamo il resto
        della casa partendo dal pian terreno! Devi ripetere le stesse azioni un bel
        po' di volte.
      Overworld House Frame C_instruction: Un muro è finito, costruiamo il resto della
        casa partendo dal pian terreno! Devi ripetere le stesse azioni un bel po'
        di volte.
      Overworld House Frame Chosen_instruction: Costruisci il resto della casa con
        qualunque materiale ti piace. Devi usare più volte il blocco "ripeti ... volte".
      Overworld House Frame_instruction: Questo posto sembra buono per costruire la
        tua casa. Realizza le fondamenta sui blocchi di terra.
      Overworld Minecart Track_instruction: Sei tornato in superficie con un bel po'
        di risorse del sottosuolo. Ora, costruisci un percorso lungo il sentiero sterrato
        che parte da casa tua. Il primo passo è quello di sgomberare il cammino. Poi,
        segui il percorso ed elimina gli alberi.
      Overworld Move to Sheep_instruction: Aggiungi una seconda istruzione “vai avanti”
        per raggiungere la pecora.
      Overworld Place Wall_instruction: Per costruire una casa devi iniziare con le
        mura. Costruisci la prima parte della tua casa mettendo le istruzioni "metti
        assi di ..." e "vai avanti" all'interno di un ciclo “ripeti … volte”.
      Overworld Plant Crops_instruction: "È bene pensare al futuro. Semina del grano
        su entrambi i lati dell'acqua così avrai di che sfamarti."
      Overworld Powered Minecart_instruction: 'Ottimo lavoro! Hai raccolto un sacco
        di risorse e hai costruito la tua casetta. Ora posa i binari dal bordo della
        mappa fino alla porta di casa tua. (Se ti va prova anche la versione più difficile:
        riesci a farcela usando solo 6 blocchi?)'
      Overworld Shear Sheep_instruction: E' il momento di tosare le pecore! Usa l'istruzione
        "tosa" per raccogliere la lana da entrambe le pecore.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Le funzioni ti permettono di definire nuovi blocchi!
        Abbiamo spostato i blocchi per disegnare un quadrato all'interno di una funzione
        chiamata "disegna un quadrato". Puoi usare la funzione "disegna un quadrato"
        per creare gli occhiali?  I quadrati sono distanti 75 pixel.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Quantum Bee - Ryan_instruction: |
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: I fiori viola possono avere una quantità di nettare
        pari a 0 oppure 1, ma tu non lo sai! Fai attenzione a non raccogliere nettare
        da un fiore viola se non ne ha. Usa il blocco "se" (if) per controllare se
        la quantità è 0 oppure 1.
      Ryan - 4-5 Bee Conditionals 2_instruction: Adesso l'ape vuole solo del nettare.
        Ricordati che non tutti gli oggetti nascosti sono fiori, quindi controlla
        sotto ogni nuvoletta in modo da raccogliere il nettare solo quando ci sono
        fiori.
      Ryan - Bee Conditionals_instruction: |
        L'ape ora desidera solo il nettare.
        Non tutti gli oggetti sono fiori, controlla sotto OGNI NUVOLA per vedere se si nasconde dietro a un fiore. Se si nasconde puoi raccogliere il nettare.
      Ryan Test Locked Blocks_instruction: In questo esercizio c'è una funzione chiamata
        "pattuglia" (patrol) in cui devi inserire il codice che serve per far muovere
        il gatto prima in su e poi in giù di 400 pixel.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: Ghianda! Ghianda! Ghianda! Usa un blocco "se" per condurmi
        là utilizzando il minor numero possibile di blocchi.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: 'Ok, facciamolo ancora una volta per far pratica: non
        è molto diverso dal precedente esercizio, ma fai attenzione a girare nella
        direzione giusta!'
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: 'Il blocco "se-altrimenti" controlla una condizione: SE
        è vera fa una cosa ALTRIMENTI ne fa un''altra. Prova ad usare questo nuovo
        blocco per farmi arrivare alla ghianda.'
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: 'Ancora un esercizio con il blocco "se-altrimenti": riesci
        a risolverlo correttamente al primo tentativo?'
      scrat 20_instruction: Riesci ad aggiungere solo 3 blocchi per farmi uscire da
        un labirinto più complesso? Se lo fai correttamente, riuscirò a camminare
        lungo un percorso tortuoso di qualsiasi lunghezza. Fai in fretta! Il ghiaccio
        si sta sciogliendo!
      SpecialFrozenLevel_instruction: Sei ufficialmente diventato un maestro artista!
        Crea un meraviglioso paesaggio invernale.
      Standalone_Artist_1_instruction: Benvenuto all'Artista! Prima di tutto, cerchiamo
        di disegnare un semplice quadrato utilizzando il blocco "gira a destra" e
        il blocco "vai avanti". Ogni lato è lungo 100 pixel.
      Standalone_Artist_2_instruction: Disegna questo rombo che ha gli angoli da 120
        e 60 gradi e i lati lunghi 150 pixel.
      Standalone_Artist_3_instruction: Come fai a disegnare questo esagono che ha
        i lati lunghi 100 pixel e gli angoli da 60 gradi?
      Standalone_Artist_4_instruction: Adesso c'è il nuovo blocco "ripeti 6 volte".
        Questo blocco di ripetizione, detto anche "ciclo", ripete 6 volte quello che
        si trova al suo interno. Cosa succede se si ripete 6 volte il codice in grigio
        che trovi già pronto?
      Standalone_Artist_5.5_instruction: 'Osserva come abbiamo semplificato il codice
        utilizzando il blocco "ripeti ... volte" (ciclo). Per disegnare un fiore devi
        adesso ripetere per 12 volte tutta la sequenza di blocchi in grigio. Attenzione:
        ruota di 30 gradi dopo ogni ciclo del rombo altrimenti disegni sempre la stessa
        figura.'
      Standalone_Artist_5_instruction: Quante volte è necessario ripetere il codice
        che trovi già pronto per disegnare il fiore?
      Standalone_Artist_6_instruction: 'Ripeti 6 volte il codice che trovi già pronto
        (che disegna un esagono) per realizzare l''intera figura. Di quanti gradi
        devi girare ogni volta? Suggerimento: dividi il numero di gradi di un cerchio
        per il numero di ripetizioni.'
      Standalone_Artist_7_instruction: 'Una funzione è un altro strumento di programmazione
        che aiuta ad evitare inutili ripetizioni. Questa funzione disegna un fiore,
        e puoi usarla ogni volta che vuoi disegnare un fiore. Usala insieme al nuovo
        blocco "salta" per disegnare questi fiori. Suggerimento: i fiori sono distanti
        tra loro 150 pixel.'
      Standalone_Artist_8_instruction: Qui trovi la funzione "disegna una forma" che
        è stata costruita in modo che disegni degli esagoni. Clicca su "Esegui" per
        vedere cosa fa il codice che trovi già pronto e poi fai degli esperimenti
        per vedere cosa succede. Puoi variare la funzione in modo che disegni una
        composizione di quadrati, triangoli o ottagoni? Cosa succede se vari anche
        altri valori?
      Standalone_Artist_9_instruction: Ora continua e realizza qualsiasi figura desideri!
        Hai anche una funzione vuota che puoi riempire a tuo piacere!
      Standalone_Artist_v2_instruction: Benvenuto all'Artista! Prima di tutto, cerchiamo
        di disegnare un semplice quadrato utilizzando il blocco "gira a destra" e
        il blocco "vai avanti". Ogni lato è lungo 100 pixel.
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: Istruzioni
      U2 frequency random sub_instruction: Istruzioni
      U2 vigenere cipher_instruction: Istruzioni
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: Sotto alcuni di questi blocchi c'è la
        lava, che devi coprire per poter andare avanti. L'istruzione “se” ti è utile
        in questi casi. Aggiungi un istruzione “vai avanti” nel posto giusto per estrarre
        tutte le risorse disponibili.
      Underground If Statements_instruction: Ora la situazione si fa un po' più difficile.
        Estrai tre blocchi di pietrarossa, ma non cadere nella lava. Usa un'istruzione
        “se” per posizionare delle lastre di pietra se scopri la lava.
      Underground Iron_instruction: Camminare sulla lava non è una buona idea. Posiziona
        delle lastre di pietra per creare un ponte, poi estrai almeno due blocchi
        di ferro.
      Underground Mine in a Circle_instruction: |
        Trova un modo per prendere 5 blocchi di diamanti e 7 di pietrarossa! Prova ad usare l'istruzione "ripeti ... volte" per camminare in un quadrato.\r
      Underground Mining Coal_instruction: Nel sottosuolo trovi le risorse più preziose,
        ma è buio. Posiziona almeno due torce ed estrai almeno due blocchi di carbone.
      Underground Test Level_instruction: Raccogli tutti i minerali!
      Vigenere_instruction: Test
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
