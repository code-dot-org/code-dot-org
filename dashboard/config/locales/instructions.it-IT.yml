"it":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Ciao, io sono un artista. Puoi scrivere del codice
        per farmi disegnare quasi qualunque cosa. Usa i blocchi per farmi disegnare
        lungo le linee grigie dell'immagine. (Ciascuna riga è lunga 100 pixel)
      2-3 Artist 11_instruction: |-
        Disegna il bordo del segnale di stop creando un ottagono con lati lunghi 100 pixel. <br><br>
        Di quanti gradi devi girare ogni volta per completare il bordo del segnale di stop?
      2-3 Artist 12_instruction: |-
        Disegna il "cerchio" che rappresenta il bulbo oculare.<br><br>
        Se ad ogni movimento giri a destra di un grado, quante volte devi ripetere il movimento, usando il blocco `ripeti ... volte`, per completare esattamente il cerchio? 180? 360? 500?
      2-3 Artist 2 new_instruction: 'Questa casa ha una parete lasciata a metà. Ogni
        parete è lunga 100 pixel, ma della parete a destra ne è stata disegnata solo
        una metà. Completala. '
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side is\n100,
        but the half-finished wall is only 50. Complete the wall. "
      2-3 Artist 3.4_instruction: Il blocco "salta" consente di muovere l'artista
        senza disegnare. Disegna la linea tratteggiata usando sia i blocchi "salta"
        che quelli per disegnare. Ogni linea è lunga 50 pixel.
      2-3 Artist 3_instruction: Questo cappello è alto 100 pixel. Disegna un cappello
        che sia più piccolo di 70 pixel.
      2-3 Artist 3new_instruction: Il cappello rosso ha un'altezza pari a 100 pixel.
        Completa il disegno con un cappello nero che sia più basso di quello rosso
        di 70 pixel. Ogni cappello è largo 50 pixel.
      2-3 Artist 4_instruction: Aiutami a completare la casa per questo gatto.
      2-3 Artist 5_instruction: Sostituisci questo codice con un blocco "ripeti ...
        volte" per disegnare la stessa casa utilizzando solo 3 blocchi.
      2-3 Artist 6_instruction: |-
        Questa casa ha bisogno di un tetto! Disegna un triangolo.<br><br>
        <b>Suggerimento</b>: tutti e tre i lati hanno la stessa lunghezza.
      2-3 Artist 7_instruction: Finisci di disegnare le ultime due finestre a destra.
        Ciascuna finestra è un quadratino di lato 25 pixel.
      2-3 Artist 8_instruction: |-
        Completa gli spazi per ciascun animale suddividendo il rettangolo in 2 quadrati delle stesse dimensioni. Il rettangolo è largo 200 pixel e alto 100 pixel.<br><br>
        Ci sono molti modi diversi di risolvere quest'esercizio: divertiti!
      2-3 Artist 9 NEW_instruction: Finisci di disegnare questo aquilone
      2-3 Artist 9 REPLACEMENT_instruction: Finisci di disegnare queste scale!
      2-3 Artist 9_instruction: Finisci di disegnare questo aquilone
      2-3 Artist Assessment 1_instruction: Questo è un esercizio di riepilogo -- Finisci
        di disegnare l'ultimo dente, è largo 25 pixel e alto 25 pixel.
      2-3 Artist Debugging 1_instruction: |-
        Riesci a disegnare questo cappello facendo in modo che la sua parte superiore sia lunga solo 50 pixel?<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-11#VIDEO" target="_blank">Video doppiato in italiano</a>
      2-3 Artist Debugging 10_instruction: Il tastierino direzionale del controller
        del mio gioco è troppo stretto. Riesci ad allargarlo di 10 pixel?
      2-3 Artist Debugging 11_instruction: |-
        Aiutami a completare il mio bellissimo fiocco di neve.<br><br>
        Quante volte devo eseguire il blocco "ripeti" per completarlo?
      2-3 Artist Debugging 12_instruction: Dovrei aggiungere un'onda dell'oceano a
        questa scena.  Puoi aiutarmi?
      2-3 Artist Debugging 2_instruction: |-
        Il codice che disegna i tre baffi a destra è sbagliato, correggilo.<br><br>
        <b>Suggerimento</b>: tutti i baffi hanno la stessa lunghezza.
      2-3 Artist Debugging 3_instruction: La mia barca ha un buco! Riesci a ripararla
        modificando l'angolazione di una linea?
      2-3 Artist Debugging 4_instruction: Qual è l'immagine che stiamo cercando di
        disegnare? Finisci di unire i punti utilizzando le giuste linee ed angoli.
      2-3 Artist Debugging 5_instruction: |-
        Il codice che disegna la gamba e il piede è sbagliato. Riesci ad aiutarmi?<br><br>
        <b>Suggerimento</b>: Il piede è troppo lungo, potrebbe essere necessario eliminare un blocco.
      2-3 Artist Debugging 6_instruction: |-
        Mi sembra di star seduto su una sedia senza una gamba.<br>
        Modifica i blocchi per disegnare la gamba mancante.
      2-3 Artist Debugging 7_instruction: |-
        Questo codice disegna la C al contrario nella parola "CODE".<br>
        Riesci a farla disegnare correttamente?
      2-3 Artist Debugging 8_instruction: La mia girandola non è finita. Riesci ad
        aiutarmi?
      2-3 Artist Debugging 9_instruction: Il codice per disegnare questo gambo non
        è corretto! Riesci a capire come aiutare l'artista?
      2-3 Artist Debugging Assessment 1_instruction: |-
        Questo è un esercizio di riepilogo -- Questa figura è troppo piccola. Riesci a farla più grande?<br><br>
        <b>Suggerimento</b>: ogni lato dovrebbe essere 75 pixel più lungo della dimensione attuale.
      2-3 Artist Free Play_instruction: 'Tempo di giocare: disegna qualcosa che ti
        piace.'
      2-3 Artist Functions 1 a_instruction: |-
        Ciao. Io artista zombie. Mi piace disegnare!<br>
        Aiutami a disegnare questi occhiali quadrati.<br>
        <b>Suggerimento</b>: l'asta tra le lenti è di 25 pixel più corta della lunghezza di ciascuna lente.
      2-3 Artist Functions 1_instruction: |-
        Ciao. Io artista zombie. Mi piace disegnare!<br>
        Aiutami a disegnare questi occhiali quadrati.<br>
        <b>Suggerimento</b>: l'asta tra le lenti è di 25 pixel più corta della lunghezza di ciascuna lente.
      2-3 Artist Functions 10_instruction: Qui ci sono due funzioni, una per disegnare
        un ingranaggio grande e una per disegnare un ingranaggio piccolo. Usale per
        disegnare l'interno di un macchinario!
      2-3 Artist Functions 11 a_instruction: |-
        We've renamed the `draw a square`
        function to `draw a hexagon`, but it's still giving us squares! Can you modify
        the `draw a hexagon` function to draw a hexagon with 50 pixel sides? \r
        \r
        Draw
        the image using the new function!
      2-3 Artist Functions 11.5 a_instruction: |-
        Qui abbiamo sempre la funzione `draw a hexagon`  (<i>disegna un esagono</i>).<br>
        <br>
        Cosa succede se nel ripetere l'esecuzione della funzione come nell'esercizio precedente adesso giri ogni volta solo di 60 gradi?
      2-3 Artist Functions 11.5_instruction: |-
        Qui abbiamo sempre la funzione `draw a hexagon`  (<i>disegna un esagono</i>).<br>
        <br>
        Cosa succede se nel ripetere l'esecuzione della funzione come nell'esercizio precedente adesso giri ogni volta solo di 60 gradi?
      2-3 Artist Functions 11_instruction: Abbiamo rinominato la funzione `draw a
        square`  (<i>disegna un quadrato</i>) in `draw a hexagon` (<i>disegna un esagono</i>),
        ma realizza ancora quadrati! Puoi modificare la funzione `draw a hexagon`
        in modo che produca un esagono con i lati lunghi 50 pixel, e riprodurre poi
        tutta la figura usando la nuova funzione?
      2-3 Artist Functions 12 Mike_instruction: |-
        Le funzioni sono davvero utili per disegnare più volte oggetti complessi.<br>
        <br>
        Puoi usare la funzione `draw a flower` (<i>disegna un fiore</i>) per riempire il resto della fioriera?<br>
        <br>
        <b>Suggerimento</b>: le piante sono tutte distanti 100 pixel l'una dall'altra.
      2-3 Artist Functions 12 a_instruction: |-
        Le funzioni sono davvero utili per disegnare più volte oggetti complessi.<br>
        <br>
        Puoi usare la funzione `draw a flower` (<i>disegna un fiore</i>) per riempire il resto della fioriera?<br>
        <br>
        <b>Suggerimento</b>: le piante sono tutte distanti 100 pixel l'una dall'altra.
      2-3 Artist Functions 12_instruction: |-
        Le funzioni sono davvero utili per disegnare più volte oggetti complessi.<br>
        <br>
        Puoi usare la funzione `draw a flower` (<i>disegna un fiore</i>) per riempire il resto della fioriera?<br>
        <br>
        <b>Suggerimento</b>: le piante sono tutte distanti 100 pixel l'una dall'altra.
      2-3 Artist Functions 13_instruction: Ti abbiamo dato quattro funzioni. Usale
        come preferisci all'interno di uno o più cicli per realizzare immagini da
        condividere con i tuoi amici. Premi "run" per vedere un esempio.
      2-3 Artist Functions 2 a_instruction: "Use the small green `draw a square`\nblock
        to call this new function and create the glasses. "
      2-3 Artist Functions 2_instruction: |-
        Le funzioni ti permettono di definire nuovi blocchi!<br>
        <br>
        Abbiamo spostato i blocchi per disegnare un quadrato all'interno di una funzione chiamata `draw a square` (<i>disegna un quadrato</i>). Puoi usare la funzione `draw a square` per creare gli occhiali?<br>
        <br>
        I quadrati sono distanti 75 pixel.
      2-3 Artist Functions 3 a_instruction: |-
        Edit the "draw a square" function
        to draw glasses with frames that are 115px on each side. \r
        \r
        The squares
        are now 45 pixels apart.
      2-3 Artist Functions 3_instruction: |-
        Modifica la funzione in modo da disegnare un quadrato con i lati lunghi 115 pixel e creare occhiali più grandi.<br><br>
        I quadrati sono ora distanti 45 pixel.
      2-3 Artist Functions 4 a_instruction: |-
        Now, put the function inside of a loop
        and add an extra turn to draw these three squares.
      2-3 Artist Functions 4_instruction: Usa il blocco `ripeti ... volte` per disegnare
        questi tre quadrati.
      2-3 Artist Functions 7_instruction: 'Usa la funzione "disegna una casa" per
        disegnare due case, utilizzando diversi parametri. (Suggerimento: la prima
        casa è di 100 pixel).'
      2-3 Artist Functions 9_instruction: Qui trovi la funzione `draw a snowflake`
        (<i>disegna un fiocco di neve</i>). Sperimentala per creare una scena invernale!
        Questo è un esercizio libero, quindi non c'è alcun problema da risolvere.
        Buon divertimento!
      2-3 Artist Loops 1_instruction: Puoi creare un esagono con i lati lunghi 100
        pixel per completare la cella? Ricordati, questo significa che avrai bisogno
        di girare di soli 60 gradi!
      2-3 Artist Loops 10_instruction: Cosa succede al disegno se facciamo il nostro
        ultimo passo in avanti lungo metà?
      2-3 Artist Loops 11_instruction: Ora mettiamo un "altro" ciclo intorno all'intera
        creazione! Non dimenticare di aggiungere un angolo alla fine del ciclo esterno.
      2-3 Artist Loops 2_instruction: Ora utilizza un blocco "ripeti" per rendere
        la cella una conchiglia.
      2-3 Artist Loops 4_instruction: Vuoi vedere cosa succede quando ripetiamo quella
        forma molte volte utilizzando un ciclo?
      2-3 Artist Loops 5_instruction: Ora facciamo una piccola modifica al ciclo e
        vediamo come cambia la nostra figura.
      2-3 Artist Loops 6_instruction: Aggiungi un'altra mossa e un altro giro all'interno
        del ciclo e vedi come cambia il tuo disegno.
      2-3 Artist Loops 7_instruction: Possiamo utilizzare i cicli per creare tutti
        i tipi di poligono. Puoi creare un rombo all'interno dell'esagono?
      2-3 Artist Loops 8_instruction: Mettiamo entrambi gli elementi all'interno di
        un ciclo.
      2-3 Artist Loops 9_instruction: Stiamo per inserire in un ciclo gli stessi elementi,
        ma ora aggiungeremo un po' di distanza tra loro.\r Usa lo stesso codice di
        prima, ma aggiungi un passo avanti alla fine del ciclo esterno.
      2-3 Artist Loops New 1_instruction: Completiamo la testa di questo robot! Riesci
        a disegnare un quadrato i cui lati siano tutti lunghi 100 pixel?
      2-3 Artist Loops New 10_instruction: Cerca adesso di disegnare una serie di
        V collegate, usando un ciclo.
      2-3 Artist Loops New 11_instruction: Riscrivi il codice del precedente esercizio,
        ma questa volta aggiungi il blocco `gira a sinistra di 30 gradi` all'interno
        del blocco `ripeti ... volte`. Poi, ripeti il ciclo 24 volte invece che 8.
      2-3 Artist Loops New 12_instruction: 'Disegna un rombo i cui lati siano lunghi
        100 pixel.

'
      2-3 Artist Loops New 13_instruction: |-
        Il codice che trovi già pronto (in grigio) disegna un rombo.<br><br>
        Ripetilo 3 volte usando un ciclo per creare la figura che vedi.
      2-3 Artist Loops New 14_instruction: Il codice che trovi già pronto è sempre
        quello per disegnare un rombo. Prova a variarlo per disegnare altre figure.
        Prova a cambiare il numero di gradi di cui giri o il numero di ripetizioni
        che fai.
      2-3 Artist Loops New 15_instruction: Disegna qualcosa che ti piace.
      2-3 Artist Loops New 2_instruction: |-
        Ecco lo stesso esercizio che hai appena risolto, ma questa volta puoi usare solo 1 blocco `vai avanti` ed 1 blocco `gira a ...` per disegnare il quadrato.<br>
        Puoi usare un blocco `ripeti ... volte` per risolvere questo esercizio?<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-7#VIDEO" target="_blank">Video doppiato in italiano</a>
      2-3 Artist Loops New 9_instruction: Per completare la freccia disegna semplicemente
        una V i cui lati siano entrambi di 50 pixel.
      2-3 Artist Match Hex Pic_instruction: 'Sfida: Aiuta a finire l''esagono.'
      2-3 Artist Match Rho Pic_instruction: 'Sfida: Completa il codice mancante.'
      2-3 Artist Match Sq Pic_instruction: 'Sfida: Completa il codice mancante'
      2-3 Artist Match Tri pic_instruction: Esercizio di Verifica (Associazioni)
      2-3 Artist Nested Loops 1_instruction: Per disegnare la figura, aggiungi un
        blocco `ripeti ... volte` intorno a questo insieme di blocchi grigi.
      2-3 Artist Nested Loops 10_instruction: Ripeti 12 volte questo codice per completare
        la figura.
      2-3 Artist Nested Loops 11_instruction: Ripeti 4 volte questo codice per completare
        la figura, girando di 90 gradi alla fine di ciascun cerchio.
      2-3 Artist Nested Loops 12_instruction: Ripeti 12 volte questo codice per completare
        la figura.
      2-3 Artist Nested Loops 2_instruction: |-
        Ora disegna il triangolo 6 volte.<br><br>
        Dopo ogni triangolo, devi girarti di 60 gradi prima di disegnare il successivo.
      2-3 Artist Nested Loops 3_instruction: |-
        Per disegnare questa figura devi ripetere il triangolo 12 volte.<br><br>
        Per sapere di quanti gradi girare dopo ciascun triangolo, dividi il numero di gradi in un cerchio (360) per il numero di triangoli che stai disegnando (12).
      2-3 Artist Nested Loops 4_instruction: |-
        Per disegnare un fiore devi ripetere il rombo 12 volte.<br><br>
        <b>Suggerimento</b>: i 12 rombi sono come i 12 triangoli che hai già disegnato - di quanti gradi devi girare dopo aver disegnato ciascun rombo?
      2-3 Artist Nested Loops 5_instruction: |-
        Riempi le finestre di questo edificio usando un ciclo annidato.<br><br>
        Le finestre sono grandi 20 pixel e distanti 20 pixel l'una dall'altra.
      2-3 Artist Nested Loops 6_instruction: |-
        Lungo la coda del dinosauro ci sono 8 punte; ogni punta è lunga 30 pixel.<br><br>
        Disegna il triangolo 8 volte, ma assicurati di spostarti in avanti dopo aver disegnato ciascun triangolo.
      2-3 Artist Nested Loops 7_instruction: |-
        Per disegnare un sole ripeti 10 volte questo triangolo.<br><br>
        Dopo ogni triangolo devi spostarti e anche girarti.<br><br>
        Puoi capire di quanto devi girarti dividendo il numero di gradi in un cerchio per il numero di figure che compongono il disegno.
      2-3 Artist Nested Loops 8_instruction: Ora aggiungi un po' di erba all'immagine.
        I ciuffi d'erba distano tra loro 50 pixel.
      2-3 Artist Nested Loops 9_instruction: |-
        Completa quest'immagine aggiungendo un fiore.<br>
        Per disegnare il tuo fiore devi ripetere il rombo 12 volte girando un po' alla fine di ogni rombo.
      2-3 Artist Nested Loops Free Play_instruction: 'Tempo di giocare: disegna qualcosa
        di carino usando i cicli annidati.'
      2-3 Bee Conditionals 1_instruction: Ciao, sono un'ape. Aiutami a raccogliere
        il nettare dai fiori.
      2-3 Bee Conditionals 10_instruction: I fiori viola possono avere 0 oppure 1
        dose di nettare. Fai attenzione a non raccogliere il nettare da un fiore viola
        SE non ne ha.
      2-3 Bee Conditionals 11_instruction: Fammi volare nel giardino per raccogliere
        il nettare solo dai fiori che ne hanno.
      2-3 Bee Conditionals 12_instruction: Usa un ciclo per controllare la presenza
        del nettare e raccoglierlo da tutti questi fiori, usando il minor numero possibile
        di blocchi!
      2-3 Bee Conditionals 13_instruction: |-
        Qui ci sono diverse cose da fare!<br>
        Usa ciò che hai imparato per raccogliere tutto il nettare e poi fare il miele.<br><br>
        <b>Suggerimenti</b><br>
        - Cosa succede se usi un blocco condizionale `se nettare` su un fiore rosso?<br>
        - Puoi risolvere questo esercizio usando il <i>ciclo</i> `ripeti ... volte`?
      2-3 Bee Conditionals 14_instruction: |-
        Metti insieme tutto ciò che hai imparato!<br>
        Raccogli il nettare solo dai fiori che ne hanno, usando il minor numero possibile di blocchi. Non dimenticarti di fare il miele alla fine.
      2-3 Bee Conditionals 15_instruction: |-
        Questo percorso a gradini ormai dovrebbe essere familiare.<br><br>
        Raccogli il nettare solo dai fiori che ne hanno, usando il minor numero possibile di blocchi.
      2-3 Bee Conditionals 2_instruction: |-
        Ciao, sono un'ape!<br>
        Aiutami a raccogliere tutto il nettare dai fiori, usando il minor numero possibile di blocchi.<br><br>
        <b>Suggerimento</b>: Usa il blocco `ripeti ... volte` (<i>ciclo</i>).
      2-3 Bee Conditionals 3_instruction: |-
        Aiutami a raccogliere tutto il nettare dai fiori e a produrre tutto il miele, usando il minor numero possibile di blocchi.<br><br>
        <b>Suggerimento</b>: usa il blocco `ripeti ... volte` (<i>ciclo</i>).
      2-3 Bee Conditionals 4_instruction: Aiutami a raccogliere tutto il nettare dai
        fiori e a produrre tutto il miele.
      2-3 Bee Conditionals 5_instruction: |-
        Fai attenzione a non raccogliere nettare da un fiore viola se ne ha una quantità pari a 0. Usa il blocco `se` per controllare se la quantità è 0 oppure 1.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-13#VIDEO" target="_blank">Video doppiato in italiano</a>
      2-3 Bee Conditionals 6_instruction: Controlla questo fiore con un blocco `se`
        per verificare se ha del nettare.
      2-3 Bee Conditionals 7_instruction: Raccogli il nettare da ogni fiore, se ne
        ha.
      2-3 Bee Conditionals 8_instruction: Su questo campo ci sono fiori rossi e viola.
        I fiori rossi possiedono una quantità nota di nettare, ma la quantità dei
        fiori viola è ignota. Raccogli tutto il nettare.
      2-3 Bee Conditionals 9_instruction: Raccogli tutto il nettare da ogni fiore.
      2-3 Bee Conditionals Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Raccogli tutto il nettare. Fai attenzione a non raccogliere il nettare
        dai fiori viola se non ne hanno.
      2-3 Bee Debugging 1_instruction: |-
        Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare.<br>
        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-10#VIDEO" target="_blank">Video doppiato in italiano</a>
      2-3 Bee Debugging 10_instruction: |-
        Questo esercizio mi fa girare la testa!<br>
        Correggi gli errori per raccogliere tutto il nettare e trasformarlo in miele.<br>
        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 2_instruction: |-
        Riesci a capire qual è il problema in questo esercizio?<br><br>
        Correggi gli errori per raccogliere tutto il nettare.<br><br>
        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 3_instruction: |-
        Questi blocchi sbagliati mi fanno perdere tempo.<br>
        Correggi gli errori per raccogliere tutto il nettare.<br>
        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 4_instruction: |-
        Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare.<br><br>
        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 5_instruction: |-
        Questo fiore sembra saporito!<br>
        Correggi gli errori per raccogliere tutto il nettare.<br>
        Da ora in avanti puoi usare, oltre al comando "Fai un passo", anche il comando "Esegui" per eseguire tutti i blocchi.
      2-3 Bee Debugging 6_instruction: |-
        Che dolce sfida!<br>
        Correggi gli errori per raccogliere tutto il nettare.<br>
        Ricorda che cliccando su "Fai un passo" puoi eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 7_instruction: |-
        Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare e produrre tutto il miele.<br><br>
        Ricorda che cliccando su "Fai un passo" puoi eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 8_instruction: |-
        Quanti bei fiori!<br><br>
        Correggi gli errori per raccogliere tutto il nettare.<br><br>
        Ricorda che cliccando su "Fai un passo" puoi eseguire il programma un blocco alla volta.
      2-3 Bee Debugging 9_instruction: |-
        Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare e produrre tutto il miele.<br><br>
        Ricorda che cliccando su "Fai un passo" puoi eseguire il programma un blocco alla volta.
      2-3 Bee Debugging Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Correggi gli errori per raccogliere tutto il nettare.
      2-3 Bee Functions 1_instruction: |-
        Una funzione è una sequenza di blocchi di codice che esegue un compito. Usa la funzione `get 2 nectar` (<i>prendi 2 dosi di nettare</i>) per raccogliere il nettare da ogni fiore.
        <br><a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-6#VIDEO" target="_blank">Video doppiato in italiano</a> (solo la seconda parte)
      2-3 Bee Functions 10_instruction: |-
        Ogni volta che esegui l'esercizio i fiori viola possono avere una quantità di nettare pari a 0 oppure 1. <br><br>
        Definisci una funzione che raccoglie il nettare da un fiore viola solo se ne ha.
      2-3 Bee Functions 2_instruction: |-
        Una <i>funzione</i> è una sequenza di blocchi di codice che esegue un compito.<br>
        <br>
        Usa la funzione `get 5` (<i>prendi 5 dosi</i>) che raccoglie ogni volta 5 dosi di nettare.
      2-3 Bee Functions 3_instruction: Raccogli tutto il nettare da ogni fiore.
      2-3 Bee Functions 4_instruction: |-
        La funzione `move and get nectar` (<i>vai a prendere il nettare</i>) sposta l'ape sul fiore, raccoglie il nettare e fa tornare l'ape dove si trovava.<br>
        <br>
        Usa questa funzione per raccogliere tutto il nettare.
      2-3 Bee Functions 5_instruction: Ora c'è più nettare nei fiori. Modifica la
        funzione che trovi già pronta `move and get 4` (<i>vai a prendere 4 dosi di
        nettare</i>) in modo che raccolga 4 dosi di nettare ed usala per raccogliere
        tutto il miele dai fiori.
      2-3 Bee Functions 6_instruction: Adesso usa la stessa funzione per raccogliere
        il nettare dai tre fiori.
      2-3 Bee Functions 7_instruction: I fiori adesso sono nuovamente fuori. Modifica
        la funzione e utilizzala per raccogliere tutto il polline e trasformarlo in
        miele.
      2-3 Bee Functions 8_instruction: Definisci la tua funzione per prendere 7 dosi
        di nettare, spostarsi in avanti e produrre 7 dosi di miele. Usa questa funzione
        per raccogliere il nettare da ogni fiore e produrre il miele in ogni favo.
      2-3 Bee Functions 9_instruction: Definisci la tua funzione che si avvia lungo
        un cammino per prendere il nettare e fare il miele, per poi tornare all'inizio
        del cammino.
      2-3 Bee Functions Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa la funzione data per raccogliere il nettare da ogni fiore.
      2-3 Bee Functions Assessment 2_instruction: Questo è un esercizio di riepilogo
        -- Definisci la funzione `move and get 3` (<i>spostati e fanne 3</i>) per
        spostarsi, fare 3 dosi di miele, e tornare indietro.
      2-3 Bee Loops 1_instruction: Raccogli il nettare da ogni fiore, usando il minor
        numero possibile di blocchi.
      2-3 Bee Loops 10_instruction: Riesci ad usare un ciclo `mentre` all'interno
        di altri due cicli per raccogliere tutto il nettare?
      2-3 Bee Loops 11_instruction: Usa un ciclo mentre "while" per raccogliere il
        polline dai fiori in questo campo.
      2-3 Bee Loops 12_instruction: Usa un ciclo mentre "while" per raccogliere il
        polline dai fiori in questo campo.
      2-3 Bee Loops 13_instruction: Questo è un esercizio di riepilogo -- Usa il blocco
        `ripeti ... volte` per raccogliere tutto il nettare.
      2-3 Bee Loops 1A_instruction: 'Ciao, sono un''ape. Riesci ad aiutarmi a raccogliere
        il nettare da questi fiori? '
      2-3 Bee Loops 2_instruction: Raccogli tutto il nettare e produci tutto il miele,
        usando il minor numero possibile di blocchi.
      2-3 Bee Loops 2A_instruction: |-
        Riesci a raccogliere il nettare con meno blocchi, usando un ciclo?<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-8#VIDEO" target="_blank">Video doppiato in italiano</a>
      2-3 Bee Loops 3_instruction: Raccogli il nettare da ogni fiore e produci il
        miele in ogni favo.
      2-3 Bee Loops 3A_instruction: Riesci ad usare un <i>ciclo</i> `ripeti ... volte`
        per raccogliere tutto il nettare?
      2-3 Bee Loops 3B_instruction: Adesso usa il blocco `ripeti ... volte` sia per
        raccogliere tutto il nettare che per produrre tutto il miele.
      2-3 Bee Loops 4_instruction: |-
        Quest'ape ha molto da fare!<br>
        Aiutala a raccogliere tutto il nettare e produrre tutto il miele, usando il minor numero possibile di blocchi.<br><br>
        <b>Suggerimento</b>: usa un ciclo simile a quello del precedente esercizio, aggiungendo l'istruzione `gira a ...`.
      2-3 Bee Loops 4A_instruction: |-
        Usa i cicli per risolvere quest'esercizio col minor numero possibile di blocchi.<br><br>
        Non dimenticarti di produrre il miele alla fine!
      2-3 Bee Loops 5_instruction: Usa un ciclo per scendere la scala e raccogliere
        tutto il nettare.
      2-3 Bee Loops 6_instruction: Usa un ciclo per raccogliere il nettare da ciascun
        fiore e produrre miele in ogni favo.
      2-3 Bee Loops 7_instruction: |-
        Quanti fiori! Aiuta l'ape a visitarli tutti.<br><br>
        Riesci a farlo con <b>meno</b> di 7 blocchi?
      2-3 Bee Loops 8_instruction: |-
        Ogni volta che esegui l'esercizio i fiori viola possono avere una quantità diversa di nettare.<br>
        <br>
        Usa il ciclo `mentre` per raccoglierlo tutto. Il blocco `mentre` farà qualunque cosa si trova all'interno di esso PER TUTTO IL TEMPO IN CUI la condizione scritta accanto a `mentre` è VERA, in questo caso per tutto il tempo in cui "nettare > 0".
      2-3 Bee Loops 9_instruction: Il ciclo while può essere usato come un'istruzione
        if all'interno di un ciclo. Aggiungi un ciclo while in questo programma per
        completare lo stesso compito.
      2-3 Bee Loops Assessment 1_instruction: Questo è un esercizio di riepilogo --
        Usa un ciclo `mentre` per raccogliere tutto il nettare da questi fiori.
      2-3 Maze 1_instruction: |-
        Puoi aiutarmi a catturare il maialino cattivo? Metti due blocchi `vai avanti`, uno sotto l'altro, sotto il blocco `quando si clicca su "Esegui"`. Poi clicca a sinistra sul pulsante "Esegui", sotto al labirinto. <br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-3#VIDEO" target="_blank">Video doppiato in italiano</a>
      2-3 Maze 10_instruction: Guidami verso quel cattivone verde! Fai attenzione
        alla dinamite (TNT)
      2-3 Maze 11_instruction: Ho fame, fammi arrivare al fiore! Quante volte devi
        ripetere il mattoncino?
      2-3 Maze 12 (copy 1)_instruction: 'Riesci a sostituire la risposta precedente
        con solo due blocchi? (Aiuto: Crea un ciclo usando un blocco "ripeti".)'
      2-3 Maze 12 (copy 2)_instruction: 'Riesci a sostituire la risposta precedente
        con solo due blocchi? (Aiuto: Crea un ciclo usando un blocco "ripeti".)'
      2-3 Maze 12 (old)_instruction: Portami al maiale, ora con il comando Ripeti
        il blocco "n" volte!
      2-3 Maze 12 - One Move Block_instruction: Raggiungi il maiale! Ma questa volta,
        è possibile utilizzare solo un blocco 'muovi avanti'. Riesci a vedere quali
        altri blocchi potrebbero aiutarti?
      2-3 Maze 12_instruction: |-
        Riesci a farmi arrivare al maialino usando solo un blocco `vai avanti`?<br><br>
        <b>Suggerimento</b>: mettilo all'interno di un blocco `ripeti ... volte` (detto anche <i>ciclo</i>).
      2-3 Maze 13 (old)_instruction: Portami al maiale, ora con il blocco "Ripeti
        fino a"!
      2-3 Maze 13_instruction: 'Fammi arrivare al maialino: questa volta puoi usare
        un solo blocco `vai avanti`.'
      2-3 Maze 14 (old)_instruction: Fammi arrivare al maialino con il blocco "ripeti
        ... fino a che"!
      2-3 Maze 14_instruction: Portami al girasole! (Dov'è quel blocco "Ripeti n volte"
        quando ne ho bisogno?)
      2-3 Maze 15 (old)_instruction: Fammi arrivare al maialino con il blocco "ripeti
        ... fino a che"!
      2-3 Maze 15_instruction: Usa due blocchi `ripeti ... volte` (detti anche <i>cicli</i>)
        per arrivare al maialino usando meno blocchi possibile.
      2-3 Maze 16 (old)_instruction: Fammi arrivare al maialino con il blocco "ripeti
        ... fino a che"!
      2-3 Maze 16 before_instruction: Fammi arrivare al maialino.
      2-3 Maze 16_instruction: Lo sai che puoi mettere anche più di un blocco all'interno
        di un ciclo? Ripeti la sequenza di blocchi che trovi già pronti per aiutare
        lo zombie ad arrivare al girasole.
      2-3 Maze 2_instruction: Questo maialino mi fa arricciare le penne. Aiutami a
        prenderlo!
      2-3 Maze 3_instruction: Fammi fare il percorso per arrivare a quello sciocco
        maiale. Evita la dinamite (TNT) o le mie piume salteranno in aria!
      2-3 Maze 4_instruction: Guidami verso quel cattivone verde! Fai attenzione alla
        dinamite (TNT)
      2-3 Maze 5_instruction: Guidami verso quel cattivone verde! Fai attenzione alla
        dinamite (TNT)
      2-3 Maze 6_instruction: Mantieni la calma e aiutami a trovare quel cattivone
        di un maiale. Altrimenti potrei arrabbiarmi!
      2-3 Maze 7_instruction: Guidami verso quel cattivone verde! Fai attenzione alla
        dinamite (TNT)
      2-3 Maze 8_instruction: Fammi arrivare al maialino!
      2-3 Maze 9_instruction: Guidami verso quel cattivone verde! Fai attenzione alla
        dinamite (TNT)
      2-3 Maze Loops 1_instruction: Riesci a farmi arrivare al maialino usando 5 blocchi?
      2-3 Maze Loops 17_instruction: Fammi arrivare al girasole, usando quello che
        hai imparato!
      2-3 Maze Loops 18_instruction: |-
        Fammi arrivare al girasole usando il minor numero possibile di blocchi!<br><br>
        Prova ad usare un blocco `ripeti ... volte` (<i>ciclo</i>) all'interno di un altro ciclo, per diminuire il numero di blocchi che usi.
      2-3 Maze Loops 19_instruction: Usa i cicli per farmi arrivare al girasole col
        minor numero possibile di blocchi!
      2-3 Maze Loops 20_instruction: Fammi arrivare al girasole, usando il minor numero
        possibile di blocchi!
      2-3 Maze Loops 21_instruction: Fammi arrivare al girasole, usando il minor numero
        possibile di blocchi!
      2-3 Maze Loops Assessment 1_instruction: 'Questo è un esercizio di riepilogo
        -- Fammi arrivare al girasole, usando solo 5 blocchi! '
      2-3 Maze sq1_instruction: |-
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Fammi arrivare al maiale! Quale blocco viene ripetuto?
      2-3 Maze sq10v2_instruction: Fammi arrivare al maiale! Quale blocco viene ripetuto?
      2-3 Maze sq2_instruction: Fammi fare il percorso per arrivare a quello sciocco
        maiale. Evita la dinamite (TNT) o le mie piume salteranno in aria!
      2-3 Maze sq3_instruction: Guidami verso quel cattivone verde! Fai attenzione
        alla dinamite (TNT)
      2-3 Maze sq4_instruction: Mantieni la calma e aiutami a trovare quel cattivone
        di un maiale. Altrimenti potrei arrabbiarmi!
      2-3 Maze sq5_instruction: Portami dal maiale! Quante volte devi ripetere un
        blocco?
      2-3 Maze sq6_instruction: 'Puoi sostituire la precedente risposta con solo due
        blocchi? (Suggerimento: Crea un ciclo usando il blocco "ripeti n volte".)'
      2-3 Maze sq7_instruction: Fammi arrivare all'intruso verde utilizzando solo
        tre blocchi.
      2-3 Maze sq8_instruction: Portami dal maiale! (Dov'è quel blocco "Ripeti n volte"
        quando ne ho bisogno?)
      2-3 Maze sq9_instruction: Crea dei cicli per raggiungere il maiale usando meno
        blocchi.
      2-3 maze sq11_instruction: Fammi arrivare al maialino! Quale blocco viene ripetuto?
      2-3 maze sq12_instruction: Puoi sostituire la precedente risposta con un ciclo
        usando un blocco "ripeti n volte"?
      2-3 maze sq13_instruction: |-
        Caro umano, me zombie. Devo... arrivare... girasole.
        Crea un ciclo col blocco "ripeti fino a che".
      2-3 maze sq14_instruction: Puoi arrivare al girasole usando solo quattro blocchi?
      2-3 maze sq15_instruction: Puoi arrivare al girasole usando solo cinque blocchi?
      2-3 maze sq16_instruction: Questo esercizio è simile al precedente, ma leggermente
        diverso. Puoi risolverlo usando solo cinque blocchi?
      2-3_instruction: |-
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Aiuta l'uccellino a catturare il maialino cattivo muovendosi
        in avanti
      20hr_farmer_stage9_1_instruction: |-
        Hi, I'm a farmer. I need your help to flatten
        the field on my farm so it's ready for planting. Move me to the pile of dirt
        and use the "remove" block to remove it.
      20hr_farmer_stage9_10_instruction: |-
        I'm working late, so it's dark out, and
        I can't tell how large the piles are. Now I don't have all the options I
        used to have on the while block. Move me along the field, and if there is
        a pile, remove it
      20hr_farmer_stage9_11_instruction: |-
        It's still dark outside. Move me along
        the field. If there is a pile, remove it, and if there is a hole, fill it
        in. Hint: use the dropdown menu of options on the "if" block.
      20hr_farmer_stage9_2_instruction: |-
        Next, move me to the hole and fill it with
        TWO shovelfuls of dirt, using the "fill" block.
      20hr_farmer_stage9_3_instruction: |-
        Move me to the pile of dirt and tell me
        how many shovelfuls to remove using as few blocks as possible.
      20hr_farmer_stage9_4_instruction: |-
        Can you help me remove all four piles of
        dirt? Hint: use a repeat block if you can.
      20hr_farmer_stage9_5_instruction: |-
        Help me fill in all these holes with 5 shovelfuls
        of dirt. Hint: you can put a "repeat" block inside the "while" block.
      20hr_farmer_stage9_6_instruction: |-
        Remove all the piles of dirt, using as few
        blocks as possible. The new options in the dropdown menu on the "while"
        block tell me if I'm standing on a pile or a hole.
      20hr_farmer_stage9_7_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs. Can you write a program that fills
        it until the ground is even?
      20hr_farmer_stage9_8_instruction: |-
        Help me fill in the hole at the end of the
        field, using as few blocks as possible.
      20hr_farmer_stage9_9_instruction: |-
        Make me remove all these piles of dirt.
        Try to use as few blocks as possible. Hint: try using a "while" block.
      20hr_maze_stage2_1_instruction: |-
        Can you help me to catch the naughty pig?
        Stack a couple of "move forward" blocks together and press "Run" to help
        me get there.
      20hr_maze_stage2_10_instruction: |-
        Ok, try the new "repeat until" block -
        it will repeat until I reach the annoying pig.
      20hr_maze_stage2_11_instruction: |-
        Ok, one last time for practice - can you
        solve this one using only 4 blocks?
      20hr_maze_stage2_12_instruction: |-
        Dear person. Me zombie. Me hungry. Must...
        get... to sunflower... Can you get me there with only 5 blocks?
      20hr_maze_stage2_13_instruction: |-
        Ok, this is similar, but slightly different.
        Can you do it in only 5 blocks?
      20hr_maze_stage2_14_instruction: |-
        Use the new "if" block to let me decide
        when to turn. Hint: you only need one more block, but learn how we set it
        up so you can do it on your own next time.
      20hr_maze_stage2_15_instruction: |-
        Ok, this is just like the last puzzle, but
        you need to remember how you used the "if" block and the "repeat" block
        together.
      20hr_maze_stage2_16_instruction: |-
        Me want sunflower! Use an "if" block to
        get me there with the fewest number of blocks.
      20hr_maze_stage2_17_instruction: |-
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the chompers!
      20hr_maze_stage2_18_instruction: |-
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the sunflower try to use
        this new block.
      20hr_maze_stage2_19_instruction: |-
        One more practice of the "if-else" block,
        can you get it right on your first try?
      20hr_maze_stage2_2_instruction: |-
        This pig is ruffling my feathers. Help me
        to find him!
      20hr_maze_stage2_20_instruction: |-
        Can you add just 3 blocks to help me solve
        a more complex maze? If you do it right, I can walk any curvy path no matter
        the length.
      20hr_maze_stage2_3_instruction: |-
        Trace the path and lead me to the silly pig.
        Avoid TNT or the feathers will fly!
      20hr_maze_stage2_4_instruction: |-
        Guide me to the green evilness! (Watch out
        for TNT)
      20hr_maze_stage2_5_instruction: |-
        Keep calm and help me to find the bad pig.
        Otherwise I might get angry!
      20hr_maze_stage2_6_instruction: |-
        There's a way I can get to the silly pig
        using only 2 blocks. Can you figure it out?
      20hr_maze_stage2_7_instruction: |-
        Try to get me to the green intruder using
        only three blocks.
      20hr_maze_stage2_8_instruction: |-
        Help me banish this bad piggy using the fewest
        number of blocks. Try using more than one "repeat times" block.
      20hr_maze_stage2_9_instruction: |-
        When a block is grey, that means you can't
        delete it. Solve this puzzle using the "repeat" block that repeats 3 times.
        Try putting these 3 blocks inside the grey "repeat" block: move, move, turn.
      4-5 Artist 1_instruction: Aiutami a disegnare il quadrato. (Ogni linea è lunga
        300 pixel)
      4-5 Artist 10_instruction: Premi "Esegui" per provare il codice. Poi, ripetilo
        abbastanza volte per completare il disegno. I colori saranno diversi ogni
        volta.
      4-5 Artist 11_instruction: Completa le linee verdi. Le linee sono lunghe 300
        pixel e distanziate di 15 pixel.
      4-5 Artist 2_instruction: Riesci a ripetere questo codice per completare il
        quadrato?
      4-5 Artist 3.5_instruction: Cerca di immaginare cosa succede se si eseguono
        questi blocchi di codice già pronti (o clicca su`Esegui` per verificarlo).
        Poi, ripetili una quantità di volte sufficiente a completare il disegno. I
        colori saranno diversi ogni volta.
      4-5 Artist 3_instruction: Questa aiuola rettangolare ha un perimetro di 600
        pixel. Il lato lungo ha una lunghezza di 200. Disegna il rettangolo usando
        il minor numero possibile di blocchi.
      4-5 Artist 4_instruction: Quanti gradi ci sono in un cerchio?  Inserisci questo
        valore nel blocco `ripeti ... volte` in modo da creare un cerchio tutto colorato.
      4-5 Artist 5_instruction: Che angolo devi usare in questo esercizio, per essere
        sicuro di disegnare tutte e 3 le linee con i blocchi all'interno del ciclo?
      4-5 Artist 6_instruction: 'Questo triangolo è equilatero: tutti gli angoli sono
        quindi di 60 gradi. Ogni lato è lungo 200 pixel. Completa il disegno.'
      4-5 Artist 7_instruction: Questo triangolo rettangolo ha gli angoli di 30, 60
        e 90 gradi. Il lato obliquo è lungo il doppio del lato verticale, che è alto
        100 pixel. Completa il disegno.
      4-5 Artist 8_instruction: |-
        La linea di centrocampo in un campo di calcio è perpendicolare alle linee laterali. Questo campo ha un perimetro di 800 pixel ed è lungo 240 pixel. Quanto è lunga la linea di centrocampo?<br><br>
        Disegna i bordi del campo e la linea di centrocampo.
      4-5 Artist 9_instruction: Disegna l'altra metà in modo che il disegno sia simmetrico.
        I triangoli sono equilateri e con il lato di 50 pixel.
      4-5 Artist Assessment 1_instruction: Questo è un esercizio di riepilogo -- Usa
        un ciclo per disegnare il triangolo equilatero. Ogni lato è lungo 300 pixel.
      4-5 Artist For Loops 1_instruction: Metti i numeri da 1 a 10 nei blocchi larghi
        ed esegui il codice.
      4-5 Artist For Loops 11_instruction: Completa il blocco "for" in modo che conti
        0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: 'Cosa succede se inverti i numeri di "from"
        con quelli di "to"? Completa il blocco "for" così che conti 200, 180, 160,
        140, 120... 0. '
      4-5 Artist For Loops 13_instruction: 'Questo disegno è iniziato senza un ciclo
        "for" ed impiega troppi blocchi! Usa un blocco "for" per completare la spirale.
        Suggerimento: la lunghezza dell''ultima linea è di 250 pixel.'
      4-5 Artist For Loops 14_instruction: 'Qualcuno ha iniziato il codice, ma poi
        si è accorto che ci deve essere un modo più veloce! Usa un blocco "per" per
        sostituire i blocchi e completare la spirale triangolare. (Aiuto: la lunghezza
        dell''ultima linea è di 300 pixel'
      4-5 Artist For Loops 15_instruction: 'Qualcuno ha lanciato il codice, ma poi
        ha realizzato che ci deve essere un modo più veloce! Usa il blocco "for" per
        sostituire i blocchi e completa la spirale esagonale. (Suggerimento: la lunghezza
        dell''ultima linea è 200 pixel.)'
      4-5 Artist For Loops 2_instruction: Questo è un blocco "for". Invece di scrivere
        1,2,3,... 10, il blocco "for" può ripetere i blocchi all'interno e contare
        i numeri per te. Posiziona il numero 10 nella sezione "to" del blocco "for".
      4-5 Artist For Loops 3_instruction: Come possiamo contare da 1 a 50? Modifica
        il blocco "for".
      4-5 Artist For Loops 4_instruction: Completa il blocco "for" così che conti
        da 1 a 10 a passi di 1.
      4-5 Artist For Loops 6_instruction: Disegna dei quadrati con lato di 50, 60,
        70, 80, e 90 pixel. Devi usare la funzione "disegna un quadrato" 5 volte.
      4-5 Artist For Loops 7_instruction: 'Disegna lo stesso quadrato ma usa il blocco
        "conta con" per cambiare le dimensioni. Posiziona il blocco "contatore" nella
        funzione "disegna un quadrato". Suggerimento: E'' nella categoria Variabili.'
      4-5 Artist For Loops 8_instruction: Puoi completare il programma ponendo i blocchi
        all'interno di un blocco "for" che conta da 10 a 200 a passi di 10? Puoi trovare
        il blocco "for" nella categoria Loop.
      4-5 Artist For Loops 9_instruction: Questi cerchi hanno dimensione di 5, 10,
        15, 20, 25, 30 e 35. Disegna i cerchi utilizzando un blocco "for".
      4-5 Artist Free Draw 1_instruction: Disegna liberamente!  Disegna qualunque
        cosa ti venga l'ispirazione di creare.
      4-5 Artist Functions 1_instruction: Usa un ciclo ripetuto per disegnare questo
        triangolo.
      4-5 Artist Functions 10a_instruction: Posiziona questo codice nella funzione
        "disegna un fiocco di neve" e sostituisci il 50 con il parametro 'dimensione'.
        La funzione è già richiamata per creare un fiocco di neve di 100 pixel.
      4-5 Artist Functions 10b_instruction: 'Usa la funzione ''disegna un fiocco di
        neve'' per creare fiocchi di varie misure. Suggerimento: il primo fiocco è
        lungo 25 e ogni fiocco è grande il doppio del precedente.'
      4-5 Artist Functions 11_instruction: 'Questa funzione "disegna un esagono" usa
        la funzione " disegna un triangolo". Completa la funzione esagono. (Suggerimento:
        Un esagono ha 6 facce uguali di 100 pixel)'
      4-5 Artist Functions 12_instruction: 'Completa la funzione ''disegna le onde''.
        Ogni onda è composta da un''onda Alta e da un''onda Bassa. Suggerimento: Disegna
        5 onde blu.'
      4-5 Artist Functions 13 Free play_instruction: |-
        Qui ci sono alcune funzioni per
        disegnare pianeti, stelle, razzi, e robot. Usali nel modo che preferisci per creare
        immagini che puoi condividere con i tuoi amici.
      4-5 Artist Functions 14 Free play_instruction: Qui, ti abbiamo fornito di diverse
        funzioni. usale nel modo che preferisci in uno o più cicli per creare immagini
        che puoi condividere con i tuoi amici. Clicca "Esegui" per vedere un esempio.
      4-5 Artist Functions 15 Assessment_instruction: Questo è un esercizio di riepilogo
        -- Usa la funzione "disegna un quadrato" per creare i quadrati. I quadrati
        hanno i lati di 50, 100 e 150 pixel.
      4-5 Artist Functions 2a_instruction: Ora inserisci questi blocchi in una nuova
        funzione chiamata "disegna un triangolo piccolo" e richiamala.
      4-5 Artist Functions 2b_instruction: Ora crea una funzione chiamata "disegna
        un triangolo piccolo" usando i blocchi assegnati.
      4-5 Artist Functions 3_instruction: Ora crea le funzioni "disegna un triangolo
        medio" e "disegna un triangolo grande". La funzione "disegna un triangolo
        piccolo" è già stata creata per voi. I triangoli hanno i lati lunghi 50 (piccoli),
        100 (medi) e 150 (grandi).
      4-5 Artist Functions 4_instruction: Questa nuova funzione "disegna un triangolo"
        ha un parametro e può essere utilizzata per le tre funzioni precedenti. Disegna
        gli stessi triangoli usando questa nuova funzione.
      4-5 Artist Functions 5_instruction: Riesci a modificare la funzione "disegna
        un triangolo" nella funzione "disegna un quadrato" per cambiare il disegno?
      4-5 Artist Functions 6_instruction: 'Usa le funzioni "disegna un triangolo"
        e "disegna un quadrato" per disegnare una casa. (Suggerimento: I lati del
        quadrato sono di 200 pixel)'
      4-5 Artist Functions 6b_instruction: Usa le funzioni disegna un quadrato e un
        triangolo insieme con gli altri blocchi per creare una casa aggiungendo la
        funzione "disegna una casa" e lanciandola.
      4-5 Artist Functions 7_instruction: Usa la funzione "disegna una casa" per costruire
        due case di 100 e 50 pixel. Le due case sono separate da 50 pixel.
      4-5 Artist Functions 8_instruction: La funzione "disegna un fiore" ha un parametro
        che determina la lunghezza dello stelo. Impostalo a 200 e guarda cosa succede.
      4-5 Artist Functions 9_instruction: Disegna questi 3 fiori. L'altezza del primo
        è 100 e il successivo sempre 50 pixel più alto del precedente. I fiori sono
        distanti 100 pixel tra di loro.
      4-5 Artist Patterns 1_instruction: Riesci a disegnare questo quadrato usando
        un ciclo? Ogni lato è lungo 20 pixel.
      4-5 Artist Patterns 10_instruction: |-
        Questo codice disegna due righe di esagoni. Per disegnare tutto il favo devi eseguire l'intero codice 4 volte.<br>
        Suggerimento: per essere sicuro che l'artista non disegni fuori dallo schermo, assicurati di saltare indietro di 120 pixel nel ciclo più esterno.
      4-5 Artist Patterns 11_instruction: Quante volte devi eseguire questo codice
        per disegnare un semicerchio?
      4-5 Artist Patterns 12_instruction: |-
        Che cosa succede se aggiungi un ciclo uguale a quello che trovi già pronto, ma fai girare l'artista a sinistra invece che a destra?<br>
        Riesci a disegnare quest'onda ripetendo il tutto?
      4-5 Artist Patterns 13_instruction: |-
        Per creare questa cornice devi ripetere 4 volte tutto il codice che trovi già pronto. Attento agli spigoli, non basta girare di 90 gradi! <br>
        <br>
        Se, girando di 3 gradi per ciclo, hai bisogno di 60 ripetizioni per disegnare mezzo cerchio, quale di questi blocchi di codice ti permette di disegnare un quarto di cerchio per gli spigoli?
      4-5 Artist Patterns 2_instruction: Se posizioni il ciclo per disegnare il quadrato
        all'interno di un altro ciclo, ottieni un ciclo annidato. Cosa devi aggiungere
        al ciclo più esterno per essere sicuro che tutti i 15 quadrati siano allineati
        l'uno all'altro?
      4-5 Artist Patterns 3_instruction: Andiamo ancora più a fondo! Abbiamo annidato
        il ciclo che disegna una cella della griglia all'interno di un altro ciclo,
        per disegnare così tutta la riga di celle. Per completare la griglia, devi
        far tornare l'artista indietro in modo tale da disegnare le righe successive.
        Quale sequenza di blocchi devi posizionare alla fine del ciclo più esterno
        per raggiungere questo obiettivo?
      4-5 Artist Patterns 4_instruction: 'Questo rombo ha tutti i lati di 50 pixel,
        e due tipi di angoli: da 120 e da 60 gradi. Usa un ciclo per disegnarlo.'
      4-5 Artist Patterns 5.5_instruction: Quante volte devi ripetere questo blocco
        per disegnare un intero reticolo di diamanti?
      4-5 Artist Patterns 5_instruction: Ripetiamo il disegno 6 volte per ottenere
        una fila di rombi. Fai attenzione! Il codice per disegnare il rombo viene
        ora ripetuto 3 volte invece di 2 - secondo te qual è il motivo?
      4-5 Artist Patterns 6_instruction: Quante volte devi ripetere questo codice
        per disegnare l'intera griglia di rombi?
      4-5 Artist Patterns 7_instruction: Modifichiamo il codice dell'esercizio precedente
        per disegnare una figura più complessa. Osserva il modo in cui si sovrappongono
        i rombi in questa figura e prova a dimezzare il primo `salta all'indietro`
        impostando 50 al posto di 100.  Di quanto deve essere modificato il secondo
        `salta all'indietro` per completare la figura?
      4-5 Artist Patterns 8_instruction: Disegna un esagono con lati di 40 pixel e
        angoli di 60 gradi.
      4-5 Artist Patterns 9.5_instruction: Per disegnare due righe di esagoni devi
        inserire questo codice all'interno di un altro ciclo.  Osserva il modo in
        cui la seconda riga viene spostata verso destra.
      4-5 Artist Patterns 9_instruction: |-
        Ripetiamo il disegno 3 volte per ottenere una fila di esagoni. <br>
        Suggerimento: gli estremi, sinistro e destro, di ciascun esagono distano 80 pixel.
      4-5 Artist Patterns Free Play_instruction: 'Tempo di giocare: prova a fare un
        disegno tutto tuo!'
      4-5 Bee Conditionals - FC Test_instruction: Adesso l'ape vuole solo del nettare.
        Ricordati che non tutti gli oggetti nascosti sono fiori, quindi controlla
        sotto ogni nuvoletta in modo da raccogliere il nettare solo quando ci sono
        fiori.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |-
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: |-
        La nuvola impedisce all'ape di sapere se dietro c'è un fiore oppure no. Verifica se c'è un fiore e solo in questo caso raccogli il nettare. Attenzione, ciò che trovi dietro la nuvola può cambiare di volta in volta!<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-7#VIDEO" target="_blank">Video doppiato in italiano</a>
      4-5 Bee Conditionals 2 (copy 1)_instruction: |-
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: |-
        Adesso ci sono più nuvole!<br><br>
        Controlla ognuna di esse e verifica se c'è un fiore. Solo in tal caso raccogli il nettare.<br><br>
        Ricordati che le diverse nuvole possono nascondere oggetti diversi!
      4-5 Bee Conditionals 3_instruction: Ora l'ape vuole solo fare il miele. Alcune
        di queste nuvole possono nascondere dei favi. Quindi controlla ognuna di esse,
        in modo che l'ape faccia il miele solo quando ci sono favi.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |-
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: L'oggetto nascosto può essere un fiore oppure
        un favo. Usa il blocco `se-altrimenti` per raccogliere il nettare <i>se</i>
        si tratta di un fiore, <i>altrimenti</i> per produrre il miele (dato che,
        in questo caso, si tratta sicuramente di un favo).
      4-5 Bee Conditionals 5_instruction: Potrebbe esserci un fiore oppure un favo
        dietro quelle nuvole. Usa un blocco `se-altrimenti` per raccogliere il nettare
        <i>se</i> si tratta di un fiore, <i>altrimenti</i> per produrre il miele (dato
        che, in questo caso, si tratta sicuramente di un favo).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |-
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: |-
        Un fiore viola può avere 1, 2 o 3 dosi di nettare, ma tu non sai quante ne ha! <br>
        <br>
        Come puoi usare i blocchi `se` o `se-altrimenti` per raccogliere esattamente la quantità di nettare che ha il fiore?<br>
        <br>
        Ricordati che ad ogni esecuzione la quantità di nettare del fiore viola può essere diversa.
      4-5 Bee Conditionals 7_instruction: |-
        Ricordati che un fiore viola può avere 1, 2, 3 dosi di nettare.<br>
        <br>
        Completa la funzione `check purple flower` (<i>controlla fiore viola</i>) ed usala per raccogliere tutto il nettare dai fiori.
      4-5 Bee Conditionals 8_instruction: |-
        Scrivi la funzione `check flower - make honey` (<i>controlla fiore - fai miele</i>).<br>
        <br>
        La funzione deve controllare quanto nettare c'è in ogni fiore viola e raccoglierlo tutto, poi andare avanti e produrre una sola dose di miele.
      4-5 Bee Conditionals Assessment 1_instruction: |-
        Questo è un esercizio di riepilogo -- Questa nuvola nasconde un fiore con una dose di nettare oppure un favo che richiede una dose di miele.<br>
        <br>
        Scrivi la funzione `get nectar or make honey` (<i>prendi il nettare o fai il miele</i>), poi usala per raccogliere il nettare o produrre il miele.
      4-5 Bee Debugging 1_instruction: |-
        Questi blocchi sbagliati mi fanno perdere tempo. Riesci a correggerli?<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-14#VIDEO" target="_blank">Video doppiato in italiano</a>
      4-5 Bee Debugging 10_instruction: Trova gli errori e correggili.
      4-5 Bee Debugging 11_instruction: Stai effettuando ogni ripetizione il numero
        di volte corretto?
      4-5 Bee Debugging 2_instruction: Aiuta l'ape a raccogliere tutto il nettare
        dai fiori e a produrre tutto il miele.
      4-5 Bee Debugging 3_instruction: Trova gli errori e correggili.
      4-5 Bee Debugging 4_instruction: Questa sequenza di blocchi è sbagliata. Qual
        è lo schema di percorso corretto da ripetere?
      4-5 Bee Debugging 5_instruction: C'è qualcosa che non va...
      4-5 Bee Debugging 6_instruction: |-
        Ogni volta che esegui l'esercizio il fiore viola può avere una quantità diversa di nettare.<br><br>
        Correggi la sequenza di blocchi in modo da raccogliere tutto il nettare dal fiore.
      4-5 Bee Debugging 7_instruction: Al codice della funzione che trovi già pronto
        manca qualcosa...
      4-5 Bee Debugging 8_instruction: Il codice della funzione che trovi già pronto
        è corretto, ma la funzione non viene usata.
      4-5 Bee Debugging 9_instruction: Perché l'ape non riesce a produrre tutto il
        miele?
      4-5 Bee Debugging Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Correggi il codice.
      4-5 Bee Nested Loops 1_instruction: Usa un ciclo per raccogliere tutto il nettare.
      4-5 Bee Nested Loops 2_instruction: |-
        Raccogli tutto il nettare da ogni fiore. Usa un ciclo annidato.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-13#VIDEO" target="_blank">Video doppiato in italiano</a>
      4-5 Bee Nested Loops 3_instruction: 'Raccogli tutto il nettare inserendo il
        codice che trovi già pronto (che contiene un ciclo) all''interno di un ciclo:
        ottieni così un "ciclo annidato".'
      4-5 Bee Nested Loops 4_instruction: Raccogli tutto il nettare da ogni fiore
        e produci il miele in ogni favo. Usa un ciclo annidato.
      4-5 Bee Nested Loops 5_instruction: Usa un ciclo annidato per raccogliere tutto
        il nettare.
      4-5 Bee Nested Loops 6_instruction: Raccogli tutto il nettare.
      4-5 Bee Nested Loops 7_instruction: Inserisci all'interno di un altro ciclo
        il codice che trovi già pronto, così da creare un ciclo annidato e raccogliere
        tutto il nettare dai fiori.
      4-5 Bee Nested Loops 8_instruction: 'Raccogli tutto il nettare da questi fiori
        utilizzando un ciclo WHILE nidificato. Sostituisci il blocco "Ripeti n Volte"
        interno con un blocco WHILE. '
      4-5 Bee Nested Loops 9_instruction: Raccogli tutto il nettare da questi fiori
        inserendo un ciclo `mentre` all'interno di un ciclo `ripeti`.
      4-5 Bee Nested Loops Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa i cicli per raccogliere tutto il nettare e trasformarlo in miele.
      4-5 Bee Nested Loops Rows_instruction: Raccogli tutto il nettare da queste file
        di fiori! Usa i cicli annidati.
      4-5 Maze 1 (copy 1)_instruction: Caro umano, me zombie. Devo... arrivare...
        girasole.
      4-5 Maze 1_instruction: |-
        Caro umano, me zombie. Devo... arrivare... girasole.

        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta, oppure sul comando "Esegui" per eseguire tutti i blocchi.
      4-5 Maze 10_instruction: Puoi arrivare al girasole usando solo quattro blocchi?
      4-5 Maze 11_instruction: Puoi arrivare al girasole usando solo sei blocchi?
      4-5 Maze 12_instruction: Questo esercizio è leggermente diverso. Puoi arrivare
        al girasole usando solo sei blocchi in tutto?
      4-5 Maze 13_instruction: Fammi arrivare al maialino!
      4-5 Maze 14_instruction: Fammi arrivare al maialino! Usa il blocco "ripeti fino
        a che".
      4-5 Maze 2 (copy 1)_instruction: Fai arrivare lo zombie fino al girasole, ma
        evita la pianta carnivora!
      4-5 Maze 2_instruction: Fai arrivare lo zombie fino al girasole, ma evita la
        pianta carnivora!
      4-5 Maze 3 (copy 1)_instruction: Devo... arrivare... girasole.
      4-5 Maze 3_instruction: Devo... arrivare... girasole.
      4-5 Maze 4 (copy 1)_instruction: |-
        Prova ad usare il blocco "ripeti 5 volte" per risolvere l'esercizio con meno blocchi...<br>
        Il blocco "ripeti ... volte" (detto anche "ciclo") mi farà "ripetere" le azioni che si trovano all'interno del blocco per un numero di volte pari a quello che hai impostato.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-2#VIDEO" target="_blank">Video doppiato in italiano</a>
      4-5 Maze 4_instruction: |-
        Prova ad usare il blocco `ripeti 5 volte` per risolvere l'esercizio con meno blocchi...<br>
        Il blocco `ripeti ... volte` (detto anche <i>ciclo</i>) mi farà "ripetere" le azioni che si trovano all'interno del blocco per un numero di volte pari a quello che hai impostato.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-2#VIDEO" target="_blank">Video doppiato in italiano</a>
      4-5 Maze 5 (copy 1)_instruction: Prova a risolvere questo esercizio usando meno
        blocchi possibile.
      4-5 Maze 5_instruction: Prova a risolvere questo esercizio usando meno blocchi
        possibile.
      4-5 Maze 6 (copy 1)_instruction: Prova a risolvere questo esercizio usando meno
        blocchi possibile.
      4-5 Maze 6_instruction: Prova a risolvere questo esercizio usando meno blocchi
        possibile.
      4-5 Maze 7_instruction: |-
        Caro umano, me zombie. Devo... arrivare... girasole.<br>
        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta, oppure sul comando "Esegui" per eseguire tutti i blocchi.
      4-5 Maze 8_instruction: Usa il blocco `ripeti ... volte` per far arrivare lo
        zombie fino al girasole evitando le piante carnivore!
      4-5 Maze 9_instruction: |-
        Crea un ciclo usando il nuovo blocco `ripeti fino a che`.<br>
        Esso mi farà <i>ripetere</i> le azioni <i>fino a che</i> raggiungo il girasole.
      4-5 Maze Assessment 1_instruction: Questo è un esercizio di riepilogo -- Fammi
        arrivare al girasole.
      4-5 Maze Conditionals 1_instruction: Usa il blocco `ripeti fino a che` per far
        arrivare lo zombie fino al girasole.
      4-5 Maze Conditionals 10_instruction: |-
        Puoi aggiungere solo 3 blocchi per aiutare lo zombie ad uscire da un labirinto più complesso?<br>
        <br>
        Se lo fai correttamente, riuscirà a camminare lungo un percorso tortuoso di qualsiasi lunghezza!
      4-5 Maze Conditionals 2_instruction: Usa il blocco `ripeti fino a che` per far
        arrivare lo zombie fino al girasole.
      4-5 Maze Conditionals 3_instruction: |-
        Usa il blocco `se c'è strada` per decidere quando farmi svoltare. <br>
        <br>
        Attenzione: in questo caso devi aggiungere solo un blocco! Osserva, però, il modo in cui abbiamo impostato questo programma, in modo tale che, la prossima volta, tu riesca a farlo tutto da solo.
      4-5 Maze Conditionals 4_instruction: Ok, questo è quasi come l'esercizio precedente,
        ma devi ricordarti come hai usato insieme i blocchi `se c'è strada` e `ripeti
        fino a che`.
      4-5 Maze Conditionals 5_instruction: |-
        Me ... volere ... girasole!<br>
        <br>
        Usa un blocco `se c'è strada` per farmi arrivare là utilizzando il minor numero possibile di blocchi.
      4-5 Maze Conditionals 6_instruction: |-
        Me ... volere ... girasole!

        Usa un blocco `se c'è strada` per farmi arrivare là utilizzando il minor numero possibile di blocchi.
      4-5 Maze Conditionals 7_instruction: 'Ok, esercitiamoci di nuovo per far pratica:
        questo esercizio non è molto diverso, ma stai attento alle piante carnivore!'
      4-5 Maze Conditionals 8_instruction: |-
        Il blocco `se-altrimenti` controlla una condizione: SE è vera fa una cosa ALTRIMENTI ne fa un'altra.<br>
        <br>
        Prova ad usare questo nuovo blocco per farmi arrivare al girasole.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-7#VIDEO" target="_blank">Video doppiato in italiano</a>
      4-5 Maze Conditionals 9_instruction: 'Ancora un esercizio con il blocco `se-altrimenti`:
        riesci a risolverlo correttamente al primo tentativo?'
      4-5 Maze Conditionals Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa i blocchi `ripeti fino a che` e `se-altrimenti` per arrivare al girasole
        utilizzando il minor numero possibile di blocchi.
      4-5 Nested Loops 1_instruction: 'Completa il codice per disegnare questi triangoli.
        Le istruzioni per disegnare il primo sono già pronte. Suggerimento: il disegno
        dei 3 triangoli richiede in totale una rotazione complessiva di 360 gradi.'
      4-5 Nested Loops 10_instruction: Disegna l'ultima fila di stelle su questa bandiera
        inserendo i blocchi forniti in un ciclo. Le stelle sono distanti 50 pixels,
        ma ricorda che le stelle sono larghe 30 pixels.
      4-5 Nested Loops 11_instruction: Riesci a disegnare i 10 quadrati di questo
        marciapiede utilizzando un ciclo annidato? Ogni quadrato ha il lato di 30
        pixel.
      4-5 Nested Loops 12_instruction: Riesci a disegnare questi 36 triangoli utilizzando
        un ciclo annidato?
      4-5 Nested Loops 2_instruction: |-
        Ora inserisci le istruzioni già presenti (che contengono un ciclo) all'interno di un altro ciclo, in modo da disegnare 10 triangoli. Un ciclo inserito all'interno di un altro ciclo viene detto "ciclo annidato".<br>
        <b>Suggerimento</b>: il disegno dei 10 triangoli richiede in totale una rotazione complessiva di 360 gradi.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-11#VIDEO" target="_blank">Video doppiato in italiano</a>
      4-5 Nested Loops 3_instruction: |
        Disegna un sole inserendo in un ciclo il codice (che è un ciclo) che trovi già pronto. <br><br>
        Un ciclo inserito in un altro ciclo si chiama "ciclo annidato".<br><br>
        <b>Suggerimento</b>: al termine del disegno di ogni triangolo ti devi spostare PRIMA di girare.
      4-5 Nested Loops 5_instruction: Inserisci in un ciclo il codice che trovi già
        pronto, così da disegnare un mulino a vento.
      4-5 Nested Loops 6_instruction: Riesci a disegnare un esagono inserendo in un
        ciclo le istruzioni per disegnare un triangolo?
      4-5 Nested Loops 7_instruction: Ripeti 10 volte la figura disegnata dal codice
        che trovi già pronto. Di quanti gradi devi ruotare ad ogni ripetizione?
      4-5 Nested Loops 8_instruction: 'Ripeti 6 volte la figura disegnata dal codice
        che trovi già pronto. Di quanti gradi devi ruotare ad ogni ripetizione?

'
      4-5 Nested Loops 9_instruction: Finisci di disegnare i denti del coccodrillo!
      4-5 Nested Loops Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa un ciclo annidato per completare il disegno.
      4-5 While Loops 1_instruction: Spostami verso la buca e riempila con 2 palate
        di terra, usando il blocco `riempi 1`.
      4-5 While Loops 2_instruction: Spostami verso il mucchio di terra e rimuovilo
        con 5 palate di terra, usando il blocco `rimuovi 1`.
      4-5 While Loops 3_instruction: |-
        Usa il minor numero possibile di blocchi per risolvere quest'esercizio!<br><br>
        Spostami verso il mucchio di terra e rimuovilo del tutto, poi spostami verso la buca e riempila completamente.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-12#VIDEO" target="_blank">Video doppiato in italiano</a>
      4-5 While Loops 4_instruction: |-
        Wow, ho trovato una buca davvero profonda! Non so quante palate di terra saranno necessarie per riempirla completamente. Riesci a scrivere un programma che la riempie fino a quando il terreno è livellato?<br>
        <br>
        <b>Suggerimento</b>: usa le opzioni nel menu a discesa del blocco `mentre`.
      4-5 While Loops 5_instruction: Wow, ora ci sono due buche davvero profonde!
        Riesci a scrivere un programma che le riempie entrambe fino a quando il terreno
        è livellato?
      4-5 While Loops 6_instruction: Wow, c'è un grande mucchio di terra! Riesci a
        scrivere un programma che lo rimuove completamente fino a quando il terreno
        è livellato?
      4-5 While Loops 7_instruction: Wow, ora ci sono 3 grandi mucchi di terra! Riesci
        a scrivere un programma che li rimuove completamente fino a quando il terreno
        è livellato?
      4-5 While Loops 8_instruction: Ci sono una buca davvero profonda e un grande
        mucchio di terra. Quante palate di terra sono necessarie per livellare il
        terreno?
      4-5 While Loops Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Ci sono molte buche e mucchi di terra. Aiutami a riempire le buche e a
        rimuovere i mucchi di terra per rendere livellato il terreno.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      Alien Defender_instruction: 'Idea di progetto: costruisci un gioco di difesa
        nel Laboratorio!'
      Alien Defender_2018_instruction: |-
        Project Idea: Make a defender game in Play
        Lab!
      AllTheThings Applab - Turtle move with button_instruction: |-
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      'AllTheThings: Pixelation - Lesson 14 - Make the Letter A_instruction': |-
        Make
        a 3x5 letter 'A'. The widget is setup with the incorrect dimensions. Your
        first task is to set the second byte to the 8-bit binary code for 5: 0000
        0101. Then start entering pixel data.
      'AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4_instruction': |-
        We
        start you out with the 4x4 image Maddie created in the video. Your task is
        to fill a 4x4 grid with colors using 12-bits per pixel. Here are the requirements:
        Row 1 - fill with shades of red. Row 2 - shades of green. Row 3 - shades of
        blue. Row 4 - shades of gray.
      'AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color_instruction': |-
        We
        start you with the 4x2 image Maddie was creating, but we've left out the
        last two squares. Finish off the image by figuring out which two colors are
        missing and encode them.
      App Lab test_instruction: test
      AppLab_test02_instruction: |-
        One sentence summary of the activity. Click to
        view full instructions.
      Applab AllTheThings ResourcesTab AllResources_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab AllTheThings ResourcesTab MapReference_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab AllTheThings ResourcesTab ReferenceLinks_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab allthethings onRecordEvent_instruction: |-
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      Artist - Nested Loops 1_instruction: |-
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |-
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |-
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |-
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  "
      Artist - Nested Loops 3_instruction: |
        Create a sun by nesting the starter code
        in another loop. This is called a nested loop.\r
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |-
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |-
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |-
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa un ciclo annidato per completare il disegno.
      Artist Inspiration_instruction: |-
        <a href="https://studio.code.org/c/" target="_blank">Clicca qui</a> (LINK DA AGGIORNARE) e poi su "Esegui". Ora hai imparato tutto quello che devi sapere per realizzare un disegno come quello mostrato al precedente link! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.<br><br>
        Vuoi realizzare la figura che ti abbiamo mostrato? Ecco alcuni suggerimenti:<br><br>
      Auto Open Function Editor_instruction: 'Puoi chiamare funzioni dall''interno
        di altre funzioni! Usando la tua funzione "forma" come base, crea 3 forme
        di una casa, ognuna più larga di 20 pixel rispetto alla precedente, iniziando
        da una lunghezza di 50 pixel. Può essere utile utilizzare un ciclo contatore. '
      Bee Recommended Blocks test_instruction: I fiori viola possono avere una quantità
        di nettare pari a 0 oppure 1, ma tu non lo sai! Fai attenzione a non raccogliere
        nettare da un fiore viola se ne ha una quantità pari a 0. Usa il blocco "se"
        per controllare se la quantità è 0 oppure 1.
      Bergeron Robot Maze1_instruction: |
        Can you help me catch the naughty pig? Stack
        a couple of `move forward` blocks below the `when run` block and press "Run".
      Big Game Animation 1 (copy 1)_instruction: |-
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |-
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |-
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |-
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |-
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |-
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |-
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |-
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |-
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |-
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |-
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |-
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |-
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |-
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |-
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |-
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |-
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |-
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |-
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |-
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |-
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |-
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |-
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |-
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |-
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |-
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |-
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |-
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |-
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |-
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |-
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: Questa ape ha un sacco di lavoro da fare! Non trovi
        nessun modello che sia possibile utilizzare per semplificare il codice?
      Busy Bee_instruction: Questa ape ha un sacco di lavoro da fare! Non trovi nessun
        modello che sia possibile utilizzare per semplificare il codice?
      C3-Farmer While Loops 1_instruction: |-
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |-
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |-
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |-
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |-
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |-
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2-
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |-
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      CSD Hackathon Pt 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Pt 2_instruction: "(Click to see full instructions)"
      CSD Hackathon Week 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Week 2_instruction: "(Click to see full instructions)"
      CSD U3 Background Discuss_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Boolean Modify_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Boolean Modify_2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Boolean Predict_instruction: |-
        What do you think this code will do when
        it is run? Predict what each console.log() command will print, then run the
        program to check your predictions.
      CSD U3 Boolean Predict_2018_instruction: |-
        What do you think this code will
        do when it is run? Predict what each console.log() command will print, then
        run the program to check your predictions.
      CSD U3 Draw Loop Discuss_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Experiment_instruction: |-
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Expressions calculator_instruction: |-
        Add the numbers 1 through 10. Multiply
        the numbers 1 through 10. Check your answers with a neighbor.
      CSD U3 Frame Rate_instruction: Slow down Gamelab Gary's animation with frameRate()
      CSD U3 Keypress Boolean-2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Keypress Boolean_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Boolean_2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Keypress Watchers_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Watchers_2018_instruction: |-
        Modify the code so that all of
        the console.log commands print true
      CSD U3 L5 Freeplay_instruction: |-
        Change the value of petalSize multiple times.
        How does it change your drawing?
      CSD U3 L5 Freeplay_2018_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Mouse Input Bee 2_instruction: Do this
      CSD U3 Mouse Input Bee 2_2018_instruction: Do this
      CSD U3 Random Animation_instruction: |-
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |-
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |-
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |-
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |-
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |-
        Pick a shape block and use calls to
        randomNumber() in place of one or more of the parameters. Maker sure you run
        it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |-
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |-
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |-
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: DO This
      CSD U3 Sprites intro sprites_instruction: Do This
      CSD U3 Sprites intro sprites_2018_instruction: Do This
      CSD U3 Variable Arithmetic pt2_instruction: |-
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |-
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |-
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |-
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables Initialize_instruction: |-
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: |
        Create your own variable, give it a value,
        and display that value in the console.
      CSD U3 Variables Random_instruction: |-
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |-
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |-
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |-
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables Square_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables TEMPLATE square_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables change circle size_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables change circle size_2018_instruction: |-
        Change the value of
        petalSize multiple times. How does it change your drawing?
      CSD U3 Variables create and assign_instruction: |-
        Create and assign size in
        a single line of code.
      CSD U3 Variables draw loop newVars_instruction: |-
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |-
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |-
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables eyeBrows_instruction: |-
        Predict what will happen when you move
        the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables make a big square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables make a square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables multiple assignments_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2-2018_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2_2018_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Variables random assignment_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random draw loop_instruction: |-
        Predict what will happen when
        you move the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables random drawing exemplar_instruction: |-
        Check out this example
        randomized drawing.
      CSD U3 Variables random with assignment_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random with assignment_2018_instruction: |-
        Change the value
        of petalSize multiple times. How does it change your drawing?
      CSD U3 Variables use value rect_instruction: |-
        Predict: What will get displayed
        in the console?
      CSD U3 Variables write_instruction: |-
        Use the write block to display the value
        of size
      CSD U3 Variables2 expressions in commands_instruction: |-
        Use expressions inside
        a drawing command
      CSD U3 Variables2 expressions in variables_instruction: |-
        Assign the value of
        each expression to a variable and console.log that variable.
      CSD U3 Variables2 expressions_instruction: |-
        Use console.log to display the
        results of each expression. Then create your own.
      CSD U4 - Events Template_instruction: |-
        Add a large red button to your screen
        using Design Mode. (Click for full instructions.)
      CSD U5 black white images pixelation 2_instruction: |-
        Draw a smiley face (click
        here to see image)
      CSD U5 black white images pixelation 3_instruction: |-
        Change the width and height
        sliders to find the image (click here to see more)
      CSD U5 black white images pixelation 4_instruction: |-
        Add eyebrows to the smiley
        face (click here to see the image)
      CSD U5 black white images pixelation 5_instruction: Draw anything you like
      CSD U5 black white images pixelation_instruction: |-
        Complete the X shape by
        typing 0s and 1s
      CSD U6 params modify clouds_instruction: |-
        # Clouds\r
        \r
        This program makes
        the clouds move when you blow on the sound sensor, but it's not finished.\r
        \r
        #
        Do This\r
        * Create a new function `moveCloud(name)` that will move any cloud.\r
          *
        (Hint: you will use almost all the same code as the `moveCloud0` function)\r
        *
        Call your new `moveCloud(name)` function inside the event block, once for
        each cloud name.\r
         * (Hint: this is similar to how the `loopCloud(name)`
        function is called many times.
      CSD U6 params modify clouds_2018_instruction: |-
        # Clouds\r
        \r
        This program
        makes the clouds move when you blow on the sound sensor, but it's not finished.\r
        \r
        #
        Do This\r
        * Create a new function `moveCloud(name)` that will move any cloud.\r
          *
        (Hint: you will use almost all the same code as the `moveCloud0` function)\r
        *
        Call your new `moveCloud(name)` function inside the event block, once for
        each cloud name.\r
         * (Hint: this is similar to how the `loopCloud(name)`
        function is called many times.
      CSD U6 params modify planes_instruction: |-
        # Multi-plane Controller\r
        \r
        This
        program moves the three planes using the board accelerometer and the on-screen
        check boxes.  Right now, only the red plane works.\r
        \r
        # Do This\r
        * Create
        a new `movePlane(name)` function that can move any plane.\r
        * Call the `movePlane(name)`
        function inside the event block, such that it only moves when its checkbox
        is checked.\r
        \r
        _Challenge: Right now the planes move way too fast.  Can
        you figure out how to change the code so they move more slowly?_
      CSD U6 params modify planes_2018_instruction: |-
        # Multi-plane Controller\r
        \r
        This
        program moves the three planes using the board accelerometer and the on-screen
        check boxes.  Right now, only the red plane works.\r
        \r
        # Do This\r
        * Create
        a new `movePlane(name)` function that can move any plane.\r
        * Call the `movePlane(name)`
        function inside the event block, such that it only moves when its checkbox
        is checked.\r
        \r
        _Challenge: Right now the planes move way too fast.  Can
        you figure out how to change the code so they move more slowly?_
      CSDU4 - AppLab - 1_instruction: |-
        Read the documentation for penColor() and
        penWidth() before using them to draw the blue square.
      CSDU4 - AppLab - 2_instruction: |-
        Write a program that acts as a simple calculator.
        (click to see full instructions)
      CSDU4 - AppLab - 3_instruction: |-
        Use console to check the ending value of num.
        (Click to see full instructions)
      CSDU4 - AppLab - 4_instruction: |2-
         Use the Debug Commands to make a list of
        all the values rolled before a 6. (Click to see full instructions)
      CSDU4 - Design Mode - 1_instruction: |-
        Add a button that moves the turtle when
        clicked.  (Click to see full instructions)
      CSDU4 - Design Mode - 10_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSDU4 - Design Mode - 11_instruction: |-
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSDU4 - Design Mode - 12_instruction: |-
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSDU4 - Design Mode - 16_instruction: |-
        Add an event handler for the button
        using the "Insert and show" link in the Design Mode Events tab. (Click to
        see full instructions).
      CSDU4 - Design Mode - 17_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSDU4 - Design Mode - 18_instruction: |-
        Fix the layout of the bullseye game.
        (Click to see full instructions)
      CSDU4 - Design Mode - 2_instruction: |-
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      CSDU4 - Design Mode - 24_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      CSDU4 - Design Mode - 25_instruction: |-
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      CSDU4 - Design Mode - 26_instruction: |-
        Save the age and name of the user in
        variables (Click to see full instructions)
      CSDU4 - Design Mode - 27_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSDU4 - Design Mode - 28_instruction: |-
        Write a greeting to the user when they
        hit 'enter' in the text input, using the 'change' event. (Click to see
        full instructions)
      CSDU4 - Design Mode - 29_instruction: |-
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      CSDU4 - Design Mode - 30_instruction: |-
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSDU4 - Design Mode - 31_instruction: |-
        Set up an event handler to respond to
        keypress events, and display event.key in the console. Hit keys on the keyboard
        to see what happens. (Click to see full instructions)
      CSDU4 - Design Mode - 32_instruction: |-
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      CSDU4 - Design Mode - 33_instruction: |-
        Change the code so the sound will only
        play when the up arrow is pressed. (Click to see full instructions)
      CSDU4 - Design Mode - 4_instruction: |-
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      CSDU4 - Design Mode - 5_instruction: |-
        Debug the program by verifying your IDs
        are being referenced properly. (Click to see full instructions)
      CSDU4 - Design Mode - 6_instruction: |-
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSDU4 - Design Mode - 7_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSDU4 - Design Mode - 8_instruction: |-
        Move the button to the middle of the
        screen. (Click to see full instructions)
      CSDU4 nameAgeTemplate_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      CSDU6 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 - Arrays - indexPractice_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      CSDU6 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the
        last item in the array to the console. (Click to see full instructions)
      CSDU6 - for loop - color buttons with for_instruction: |-
        Write the contents
        of the array to the screen in numerical order. (Click to see full instructions)
      CSDU6 - for loop - color buttons_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 - for loop - why for_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays rainbow_instruction: |-
        Write the contents of the array to the screen
        in numerical order. (Click to see full instructions)
      CSDU6 arrays random_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select icons_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select rainbow_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays select rainbow_2018_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays select random_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select random_2018_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select variable_instruction: |-
        Write a program that displays a
        randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select variable_2018_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays variable_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |-
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) "
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions) "
      CSP student contact info_instruction: Please enter your email address.
      CSPU5 Add Screens to Chaser Game_instruction: |-
        Recreate the game from the "Chaser
        Game" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)
      CSPU5 Add a 2nd Screen_instruction: |-
        Make a 2 screen app with a black screen
        and a white screen. (Click to see detailed instructions)
      CSPU5 Add full screen image to bg of chaser game_instruction: |-
        Recreate the
        game from the "Chaser Game" with a Welcome Screen and Game Over Screen.
        (Click to see full instructions.)
      CSPU5 Add game over screen_instruction: |-
        Recreate the game from the "Chaser
        Game" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)
      CSPU5 Add onEvent from Design Mode_instruction: |-
        Add an event handler for the
        button using the "Insert and show" link in the Design Mode Events tab. (Click
        to see full instructions).
      CSPU5 Add welcome screen to chaser game_instruction: |-
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      CSPU5 Adding Screens Template_instruction: |-
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      CSPU5 Debugging Overlapping Objects and Screen Events_instruction: |-
        Recreate
        the "Chaser Game" from the last lesson using Design Mode. (Click to see
        full instructions.)
      CSPU5 First Time Console.log_instruction: |-
        Add a 3 console.log messages and
        test them out. (Click to see full instructions.)
      CSPU5 Layering and Deleting in Design Mode_instruction: |-
        Fix the layout of
        the bullseye game. (Click to see full instructions)
      CSPU5 Project - Multi Screen App_instruction: |-
        Create your multi-screen app.
        (Click to see full instructions.)
      CSPU5 Use Console.log to update IDs_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSPU5 Use setScreen for first time_instruction: |-
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      CSPU5_AddImageToChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_AddImage_andMakeChaserGame_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_AddLabelToChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_Debugging predict unexpected behavior - two onEvents to one ID_instruction: |-
        Predict
        what will happen. Once you've made a prediction, run the code to see what
        happens. (Click to see full instructions)
      CSPU5_FinalizeChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_Project - Multi Screen App_instruction: |-
        Create your multi-screen app.
        (Click to see full instructions.)
      CSPU5_U3 - Arrays - Demo App_instruction: |-
        Use the "My Favorite Things" app.
        How might this app be making use of an array? (Click to see full instructions)
      CSPU5_U3 - Arrays - appendItem_instruction: |-
        Create an array of odd numbers
        1-11 by using appendItem. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment_instruction: |-
        Use indexes to change the values
        in this array from 1 to 0. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment2_instruction: |-
        Calculate the sum of three values
        stored in an array. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment3_instruction: |-
        Increase the value of each value
        in the randomly generated array by 1. (Click to see full instructions)
      CSPU5_U3 - Arrays - createFirstArray_instruction: |-
        Create an array of the even
        numbers from 0 to 10 and display its contents with console.log. (Click to
        see full instructions)
      CSPU5_U3 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that
        displays a randomly chosen color from the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings Counting Variable_instruction: |-
        Create a global
        variable for the current index and use it to display the first item in the
        array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings Next_instruction: |-
        Write code that allows the
        user to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings Prev_instruction: |-
        Write code that allows the
        user to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings addItem_instruction: |-
        Write code that allows
        a user to add their own favorite things to the list. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings bounds_instruction: |-
        Add if statements to your
        event handlers that prevent the global index from going out of bounds. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings createArray_instruction: |-
        Create an array of
        words describing your favorite things. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings firstOutput_instruction: |-
        Use setText to display
        the first item in the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings giveIDs_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings keepPlaying_instruction: |-
        Make any other improvements
        you want! (Click to see full instructions)
      CSPU5_U3 - Arrays - indexPractice_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSPU5_U3 - Arrays - insertingItems_instruction: |-
        Insert items into an array
        to form a complete sentence. (Click to see full instructions)
      CSPU5_U3 - Arrays - insertionErrors_instruction: |-
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      CSPU5_U3 - Arrays - introIndex_instruction: |-
        Display the first and last element
        in the array. Display the number 5 from the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      CSPU5_U3 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the
        last item in the array to the console. (Click to see full instructions)
      CSPU5_U3 - Arrays - remove_instruction: |-
        Remove items from an array to form
        a complete sentence. (Click to see full instructions)
      CSPU5_U3 - Arrays - stringsInArrays_instruction: |-
        Write a sentence word by
        word by adding strings to an array. (Click to see full instructions)
      CSPU5_U3 - Canvas - 200dots_instruction: |-
        Add a loop to your program that draws
        200 dots on your canvas. (Click to see full instructions)
      CSPU5_U3 - Canvas - One Dot sprayPaint_instruction: |-
        Write code that redraws
        your image using a dot whose x and y locations use offsetX and offsetY with
        a small random value added. (Click to see full instructions)
      CSPU5_U3 - Canvas - appendToArray_instruction: |-
        Create an array to store each
        event parameter. Append each event parameter to this array within your event
        handler. (Click to see full instructions)
      CSPU5_U3 - Canvas - changeToMouseMove_instruction: |-
        Change your program so
        that dots are drawn at the location of the mouse as the user moves the mouse
        on the canvas. (Click to see full instructions)
      CSPU5_U3 - Canvas - clickToAdd_instruction: |-
        Change your program so that dots
        are added to the canvas when the user clicks on it. (Click to see full instructions)
      CSPU5_U3 - Canvas - delete_instruction: |-
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - draw at click point_instruction: |-
        Change your program so
        that dots are drawn at the location of the mouse click. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - freePlay_instruction: |-
        Extend the functionality of one
        of the effects, or create an entirely new one of your own. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - introCanvas_instruction: |-
        Add a canvas to your app and
        set it to be the active canvas. Then add a large dot to your canvas. (Click
        to see full instructions)
      CSPU5_U3 - Canvas - movementFunction fix Orig_instruction: |-
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      CSPU5_U3 - Canvas - movementFunction_instruction: |-
        Write a function that takes
        the movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      CSPU5_U3 - Canvas - redrawOriginal_instruction: |-
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      CSPU5_U3 - Canvas - redrawRandom_instruction: |-
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      CSPU5_U3 - Canvas - redrawRandom2_instruction: |-
        Write a function that processes
        your array, redrawing every dot with a random size. (Click to see full instructions)
      CSPU5_U3 - Canvas - shiftKey_instruction: |-
        Add an if statement to your event
        handler so dots are only drawn when the shift key is pressed. (Click to see
        full instructions)
      CSPU5_U3 - Canvas - sketch_instruction: |-
        Write code that redraws your image
        using a sketch effect. (Click to see full instructions)
      CSPU5_U3 - Canvas - sprayPaint_instruction: |-
        Update the spray paint code so
        that it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      CSPU5_U3 - Canvas - transparentDots_instruction: |-
        Change the colors of your
        dots so they have a fully transparent stroke and partially transparent fill.
        (Click to see full instructions)
      CSPU5_U3 - Canvas - usingOffsetXY_instruction: |-
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      CSPU5_U3 - Conditional Basics - 6_instruction: |-
        Add a setText after the if
        statement to "Nope. Guess again." (Click to see full instructions)
      CSPU5_U3 - Conditionals - Combine AND OR Simple_instruction: |-
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      CSPU5_U3 - Conditionals - Combine AND OR and NOT_instruction: |-
        Write an if
        statement that uses AND and OR to display "Time to go to school!" if it's
        not the weekend and the user is under 18. (Click to see full instructions.)
      CSPU5_U3 - Conditionals - Simple AND_instruction: |-
        Write an if statement that
        uses AND to display "You are a teenager." if the user enters an age between
        13 and 19. (Click to see full instructions)
      CSPU5_U3 - Conditionals - Simple OR_instruction: |-
        Write an if statement that
        uses OR to display "It's the weekend!" if the user enters a weekend day
        at the prompt. (Click to see full instructions)
      CSPU5_U3 - Design Mode - Console Log_instruction: |-
        Update the ID names and
        `console.log` messages to match the correct button. (Click to see full instructions.)
      CSPU5_U3 - Design Mode - Layers and Delete_instruction: |-
        Fix the layout of
        the bullseye game. (Click to see full instructions)
      CSPU5_U3 - Design Mode - Multi Screens 2_instruction: |-
        Make a 2 screen app
        which can switch back and forth between a black screen and a white screen
        using buttons. (Click to see detailed instructions.)
      CSPU5_U3 - Design Mode - Multi Screens_instruction: |-
        Make a 2 screen app with
        a black screen and a white screen. (Click to see detailed instructions)
      CSPU5_U3 - Design Mode - WTF Console Log_instruction: |-
        Add a 3 console.log
        messages and test them out. (Click to see full instructions.)
      CSPU5_U3 - Design Mode -Recreate Beyond Buttons_instruction: |-
        Recreate the
        game from the "Chaser Game" with a Welcome Screen and Game Over Screen.
        (Click to see full instructions.)
      CSPU5_U3 - Design Mode 1_instruction: |-
        Add a large red button to your screen
        using Design Mode. (Click for full instructions.)
      CSPU5_U3 - Dice - Dropdown and Score_instruction: |-
        Add guess and score to the
        Dice Game (Click to see full instructions)
      CSPU5_U3 - Dice - Dropdown with Strings_instruction: |-
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      CSPU5_U3 - Dice - If_instruction: |-
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSPU5_U3 - Dice - Nested_instruction: |-
        Use nested if statements to make the
        scoring different for the different game levels. (Click to see full instructions)
      CSPU5_U3 - High Low - Debug_instruction: |-
        Debug the order of the conditionals
        so that it will actually tell the user when their guess is close. (Click to
        see full instructions)
      CSPU5_U3 - High Low - Dropdown_instruction: |-
        Add a dropdown for their guess
        instead of promptNum (Click to see full instructions)
      CSPU5_U3 - High Low - Else if_instruction: |-
        Add an else-if statement in order
        to tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      CSPU5_U3 - High Low - Else_instruction: |
        Add an else statement so that the
        program will tell the user when they are right and when they are wrong. (Click
        to see full instructions)\r
      CSPU5_U3 - High Low - If_instruction: |-
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      CSPU5_U3 - Keys - Add Image URLs_instruction: |-
        Add image URLs to your array.
        Replace the text area with an image and setText with setImageURL. Then test
        your app! (Click to see full instructions)
      CSPU5_U3 - Keys - Buttons and Keys_instruction: |-
        Have the program respond the
        same way for both clicking images on the screen and hitting the up and down
        keys on the keyboard. (Click to see full instructions)
      CSPU5_U3 - Keys - Demo App_instruction: |-
        Play with the image scroller. Press
        the left and right arrows to progress through the images.
      CSPU5_U3 - Keys - Final Image Scroller_instruction: |-
        Update the image scroller
        to respond to buttons and key presses. (Click to see full instructions)
      CSPU5_U3 - Keys - Functions_instruction: |-
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      CSPU5_U3 - Keys - Key Up and Down_instruction: |-
        Try out the keyup and keydown
        events to see how they are different from keypress. (Click to see full instructions)
      CSPU5_U3 - Keys - Multiple Keys_instruction: |-
        Play a different sound when the
        down arrow is pressed. (Click to see full instructions)
      CSPU5_U3 - Loops -  Complex Condition_instruction: |-
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      CSPU5_U3 - Loops - 1_instruction: |-
        Change the condition for the while loop
        to check if the variable num is less than 90. (Click to see full instructions)
      CSPU5_U3 - Loops - 10_instruction: |-
        Write a program that simulates the rolling
        of two dice. Roll the dice repeatedly until the sum of the dice is either
        7 or 11.
      CSPU5_U3 - Loops - 11_instruction: |-
        Fix the condition so that it keeps rolling
        the die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      CSPU5_U3 - Loops - 12_instruction: |-
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      CSPU5_U3 - Loops - 14_instruction: |-
        Change the loop condition to prevent the
        infinite loop and stop counting once the count is past 30. (Click to see full
        instructions)
      CSPU5_U3 - Loops - 15_instruction: |-
        Count the number of times the sum of the
        dice is 12. (Click to see full instructions)
      CSPU5_U3 - Loops - 2_instruction: |-
        Try creating an infinite loop using !=,
        > and <. (Click to see full instructions)
      CSPU5_U3 - Loops - 3_instruction: |-
        Change the if statement to a while loop
        so the program will run until it rolls a 6. (Click to see full instructions)
      CSPU5_U3 - Loops - 4_instruction: |-
        Use the Debug Commands to make a list of
        all the values rolled before a 6. (Click to see full instructions)
      CSPU5_U3 - Loops - 5_instruction: |-
        Add code inside the while loop which will
        update the variable num so that the condition will eventually become false.
        (Click to see full instructions)
      CSPU5_U3 - Loops - 6_instruction: |-
        Fix the problem so the loop will run at
        least once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      CSPU5_U3 - Loops - 7_instruction: |-
        Without adding any lines of code, reorder
        the code so that it prints all the values of num. (Click to see full instructions)
      CSPU5_U3 - Loops - 8_instruction: |-
        Debug which number is not getting printed
        and add a write statement to display that value. (Click to see full instructions)
      CSPU5_U3 - Loops - 9_instruction: |2-
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      CSPU5_U3 - Loops - Minus Minus_instruction: |-
        Change the code to count down
        from 10 to 1. (Click to see full instructions)
      CSPU5_U3 - Loops - Plus Plus_instruction: |-
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      CSPU5_U3 - Loops - Typing in Console_instruction: |-
        Use console to check the
        ending value of num. (Click to see full instructions)
      CSPU5_U3 - Loops - minus = operator_instruction: |-
        Update the code to use the
        -= operator to count from 30 down to 0 by 3's. (Click to see full instructions)
      CSPU5_U3 - Loops - plus and minus = operator_instruction: |-
        Update the code
        to use the += operator. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Add 5_instruction: |-
        Add 5 to all the values in
        an array (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Counting Times_instruction: |-
        Count the number
        of times 5 appears in an array. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Divid by 2_instruction: |-
        Divide every value in
        the array by 2. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Find Min_instruction: |-
        Complete the findMinVal
        function to find and display the smallest value in an array  (Click to see
        full instructions)
      CSPU5_U3 - Loops And Arrays - General Search Param_instruction: |-
        Add a second
        parameter to the search function for the value to search for.  (Click to see
        full instructions)
      CSPU5_U3 - Loops And Arrays - Intro For Loop_instruction: |-
        Add a for loop with
        a console.log inside and test out the 3 pieces of the for loop. (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Linear Search_instruction: |-
        Visit every element
        in the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Loop Array If_instruction: |-
        Use an if statement
        to only display the values in the array that are greater than 5. (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |-
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Make it a Function_instruction: |-
        Move the code
        that searches the list for a 5 into a function called "search". (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Print Array_instruction: |-
        Use a for loop to print
        out all the values in an array. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Printing Single True_instruction: |-
        Process the
        array and display a single "true" if the array contains a 5 or a single
        "false" if it does not.  (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Search with Boolean Var_instruction: |-
        Make a
        boolean variable to use as a flag to keep track of whether there is a 5 in
        the array. (Click to see full instructions)
      CSPU5_U3 - Movie Bot - Multiple If Sequences_instruction: |-
        Add another set
        of if, else if, and else statements inside the question if statement to check
        for keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      CSPU5_U3 - Movie Bot - Nested Motivation_instruction: |-
        Add a separate set of
        if statements to check for a "?" in the input. (Click to see full instructions)
      CSPU5_U3 - Movie Bot - When Multiple If Statements_instruction: |-
        Add an if
        and else-if statement that checks for please and thank you. (Click to see
        full instructions)
      CSPU5_U3 - Movie Bot - toLowerCase_instruction: |-
        Use the toLowerCase command
        to change all user input into lowercase letters after they enter it. (Click
        to see full instructions)
      CSPU5_U3 - Practice Create Performance Task_instruction: |-
        Design and implement
        your practice Create Performance Task. (Click to see full instructions)
      CSPU5_U3 - Return Values - constrainTurtle_instruction: |-
        Use constrain in this
        simple app to keep the turtle from driving off the screen.  (Click to see
        full instructions)
      CSPU5_U3 - Return Values - debuggingConstrain_instruction: |-
        Correct the error
        in constrain so that it returns the appropriate value.  (Click to see full
        instructions)
      CSPU5_U3 - Return Values - debuggingMaxVal_instruction: |-
        Correct the error
        in maxVal so that it correctly reports the maximum value.  (Click to see full
        instructions)
      CSPU5_U3 - Return Values - useMinVal_instruction: |-
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      CSPU5_U3 - Return Values - wrapTurtle_instruction: |-
        Write wrap in this simple
        app to let the turtle "wrap" to the other side of the screen when it goes
        off.  (Click to see full instructions)
      CSPU5_U3 - Return Values - writeMaxVal_instruction: |-
        Write the function maxVal
        and then use it within the console.log statement to calculate the maximum
        of two values.  (Click to see full instructions)
      CSPU5_U3 - Simulation - 1_instruction: |-
        Use a while loop to "flip a coin 10
        times" and write the values to the screen. (Click to see full instructions)
      CSPU5_U3 - Simulation - 2.1_instruction: |-
        Change your looping condition so
        the simulation runs until there are 5 heads flipped. (Click to see full instructions)
      CSPU5_U3 - Simulation - 2.5_instruction: |-
        Run your simulation to get the full
        10,000 heads! How long did it take? (Click to see full instructions)
      CSPU5_U3 - Simulation - 2_instruction: |-
        Keep track of how many heads (1's)
        your program generates and print the results to the screen. (Click to see
        full instructions)
      CSPU5_U3 - Simulation - 3_instruction: |
        Add functionality that counts how many
        heads in a row are flipped. (Click to see full instructions)\r
      CSPU5_U3 - Simulation - 4_instruction: |-
        Update your while loop's condition
        so the the coin flips until there are three heads in a row. (Click to see
        full instructions)
      CSPU5_U3 - Simulation - 5_instruction: |-
        Change your while loop to run until
        you get a streak of 12 heads. How many flips did it take? (Click to see full
        instructions)
      CSPU5_U3 - Simulation - 6_instruction: |-
        Keep adding to your simulation. What
        do you want to explore next? (Click to see full instructions)
      CSPU5_U3 - User Input - Save getText To Variable_instruction: |-
        Save the age
        and name of the user in variables (Click to see full instructions)
      CSPU5_U3 - Variables - Set to Expression with Other Variables_instruction: |-
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      CSPU5_U3 - Variables - Set to Expression_instruction: |-
        Test out the new expressions.
        (Click to see full instructions)
      CSPU5_U3 Digital Assistant Design_instruction: |-
        Pick a topic for your Digital
        Assistant and create the basic layout with a text input and text area. (Click
        to show full instructions)
      CSPU5_U3 Digital Assistant Set Text_instruction: |-
        Have your digital assistant
        repeat back what the user types and include a canned response. (Click to see
        full instructions)
      CSPU5_U3 Digital Assistant Target_instruction: |-
        Try out a demo of the Digital
        Assistant!
      CSPU5_U3 full clicker demo_instruction: Clicker game - Try it out!
      CSPU5_U3- Variables - Create And Assign_instruction: |-
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      CSPU5_U3- Variables - Text Mode_instruction: |-
        1. Switch to text mode and type
        instructions; 2. drag blocks out into text mode; 3. experiment with code completion
      CSPU5_U3-Design Mode-ID and Event Handler_instruction: |-
        Add an event handler
        for the button using the "Insert and show" link in the Design Mode Events
        tab. (Click to see full instructions).
      CSPU5_U3-Design Mode-Image_instruction: |-
        Recreate the "Chaser Game" from
        the last lesson using Design Mode. (Click to see full instructions.)
      CSPU5_U313 Two Buttons with Ids_instruction: |-
        Predict what will happen. Once
        you've made a prediction, run the code to see what happens. (Click to see
        full instructions)
      CSPU5_U313 drag Two Buttons_instruction: |-
        Run a program with two buttons that
        have the same id to see the warning message in the console. Change the ids
        to make the program run without getting a warning message.
      CSPU5_U3L13 - Debug Id Problem_instruction: |-
        Improve the button by choosing
        a descriptive and meaningful ID. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 1_instruction: |-
        Debug the program by verifying your
        IDs are being referenced properly. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 2_instruction: |-
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 3_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSPU5_U3L13 - Debugging IDs case sensitive_instruction: |-
        Debug the program
        by verifying your IDs are being referenced properly. (Click to see full instructions)
      CSPU5_U3L13 - Project_instruction: |-
        Create your multi-screen app. (Click to
        see full instructions.)
      CSPU5_U3L13 - Turtle Driver Project_instruction: |-
        Create a "turtle driver"
        that includes buttons to move the turtle forward and turn it left and right.
        (Click to see full instructions)
      CSPU5_U3L13 - Turtle move with button_instruction: |-
        Add a button that moves
        the turtle when clicked.  (Click to see full instructions)
      CSPU5_U3L13 eventsDetails_instruction: |-
        Add an event handler to the button
        to move the turtle forward. (Click to see full instructions)
      CSPU5_U3L14 - Assigning Random Value_instruction: |-
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      CSPU5_U3L14 - Mini Calculator embed_instruction: |-
        You will be prompted for
        two numbers, one right after the other.  See what happens.  Enter different
        numbers until you get the idea.
      CSPU5_U3L14 - User Input Division calculator_instruction: |-
        Write a program
        that acts as a simple calculator. (click to see full instructions)
      CSPU5_U3L14 - Variable ReAssignment pt2_instruction: |-
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      CSPU5_U3L14 - concatenate simple_instruction: |-
        Modify the write statement on
        line 3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      CSPU5_U3L14 - moving memory challenge1_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge2_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge3_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge4_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge5_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge6_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L15 - Add reset button to UpDown app_instruction: |-
        Add code so that
        clicking the start over button will reset the game and send you back to the
        main screen. (Click to see full instructions)
      CSPU5_U3L15 - DEMO up down count practice app_instruction: |-
        Try out the demo
        app (Click to see full instructions)
      CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_instruction: |-
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      CSPU5_U3L15 - Debug if never triggers in UpDown app_instruction: |-
        Run the app
        and use the up and down arrows to try to hit the gameOverScreen. You can't!
        Find and fix the issue in the code. (Click to see full instructions)
      CSPU5_U3L15 - Debugging Simple If-statements =v==_instruction: |-
        Run the app,
        and click the up button. Then restart and run it again, and click the down
        button. Find and fix the issue in the code. (Click to see full instructions)
      CSPU5_U3L15 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      CSPU5_U3L15 - add code to make count down work_instruction: |-
        Write code to
        make the down arrow work as expected. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug forget to set text_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug logic error wrong update_instruction: |-
        Find
        the bug in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug var not created globally_instruction: |-
        Find
        the bug in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - global var example count up_instruction: |-
        Look at the code for
        this app and see how the code works to update the count variable when the
        up arrow is clicked. (Click to see full instructions).
      CSPU5_U3L15 - mini clicker update score_instruction: |-
        Add code to update the
        score when the apple is clicked. (Click to see full instructions)
      CSPU5_U3L15 - practice with setText_instruction: |-
        Use setText to complete the
        click event handler for the down arrow. (Click to see full instructions)
      CSPU5_U3L15 - variable scoping problem debugging_instruction: |-
        See if you can
        figure out why the code is no longer working. (Click to see full instructions)
      CSPU5_U3L15 click add lives_instruction: |-
        Add lives to the clicker game that
        decrement by 1 when the background image is clicked (Click to see full instructions)
      CSPU5_U3L15 full clicker app_instruction: |-
        Complete your clicker game! (Click
        to see full instructions)
      CSPU5_U3L16 - challenge say hi app_instruction: |-
        Write a greeting to the user
        when they hit 'enter' in the text input, using the 'change' event. (Click
        to see full instructions)
      CSPU5_U3L16 - chaserApp_instruction: |-
        Create your own "Chaser Game." (Click
        to see full instructions)
      CSPU5_U3L16 - chooseImages_instruction: |-
        Replace the image in your application
        with one of your own. (Click to see full instructions)
      CSPU5_U3L16 - doubleQuotes_instruction: |-
        Save a string inside a variable and
        log it to the console. (Click to see full instructions)
      CSPU5_U3L16 - intro getText_instruction: |-
        Add an event handler to the Submit
        button so that when the button is clicked it will display the name entered
        in the text box to the console.  Use getText to get the value out of the text
        box. (Click to see full instructions)
      CSPU5_U3L16 - introSetPosition_instruction: |-
        Move the buttons to the bottom
        of the screen. (Click to see full instructions)
      CSPU5_U3L16 - introStrings_instruction: |-
        Save a string inside a variable and
        log it to the console. (Click to see full instructions)
      CSPU5_U3L16 - newEventTypes_instruction: |-
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSPU5_U3L16 - outputWithTextArea_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSPU5_U3L16 - setPosition to fixed location_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_U3L16 - setPosition to move button_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_U3L16 - singleSetPosition_instruction: |-
        Move the button to the middle
        of the screen. (Click to see full instructions)
      CSPU5_U3L16 - text labels_instruction: |-
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSPU5_U3L16 - textInput getText write_instruction: |-
        Add an Text Input box for
        the name and age. (Click to see full instructions)
      CSPU5_U3L16 - toUpper_instruction: |-
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      CSPU5_U3L16 - use images_instruction: |-
        Use the image command to replace the
        text label in your program with an image. (Click to see full instructions)
      CSPU5_U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text\nwhen
        the Play Again button is clicked (Click to see full instructions) "
      CSPU5_U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      CSPU5_U3L16 Mad Lib Student Setup_instruction: |-
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      CSPU5_U3L16 Mad Lib getText_instruction: "Before setting the text area with\nyour
        Mad Libs outline, get the user's text and incorporate their responses.\n(Click
        to see full instructions) "
      CSPU5_U3L16 Mad Lib setText_instruction: "When the Next button is clicked,\nset
        the text area to have the main outline of your How-to Mad Libs (without\nthe
        user's input). (Click to see full instructions) "
      CSPU5_U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase\nstring
        functions to the user's text. (Click to see full instructions) "
      CSPU5_U3L18 comparison operators_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_U3L19 - fix the var name syntax error v2_instruction: |-
        Fix the error
        and get it to print the value of both variables (Click to see full instructions)
      CSPU5_U3L19 - test reassignment of two vars_instruction: |-
        Predict the value
        of a and b. Add console.log statements to find out the actual value of a and
        b. (Click for full instructions)
      CSPU5_U3L19 - three basic ops of variables_instruction: |-
        Add another variable
        called "lives" and set the value to 3. Print the value of the variable to
        the console. (Click to see full instructions)
      CSPU5_U3L19 - variable reassignment challenge pt2_instruction: |-
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      CSPU5_U3L19 - write var and string with same name v2_instruction: |-
        Fix the
        code so that the values of both variables print to the console. (Click to
        see full instructions)
      CSPU5_U3L23 Chatbot Conditionals 1_instruction: |-
        Add if, else if, and else
        statements to detect the movie genres Comedy, Romance, Action, and Horror.
        (Click to see full instructions)
      CSPU5_U3L24 Chatbot Basic Conditionals_instruction: |-
        Check out the project
        description for instructions. (Click to see full instructions.)
      CSPU5_U3L24 Nested Conditionals 1_instruction: |-
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      CSPU5_U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. "
      CSPU5_U3L24 introIncludes_instruction: |-
        Practice using the includes command.
        (Click to see full instructions)
      CSPU5_U3L25 - drag out key event_instruction: |-
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      CSPU5_U3L25 - play sound when up key_instruction: |-
        Change the code so the sound
        will only play when the up arrow is pressed. (Click to see full instructions)
      CSPU5_U3L26 AND operator_instruction: |-
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      CSPU5_U3L26 OR operator_instruction: |-
        Update the if statement to use an OR
        to check for a "?" as well as who, what, where, when, why, how in the user
        input. (Click to see full instructions)
      CSPU5_addDescriptiveIDsToTurtleDriver_instruction: |-
        Improve the button by choosing
        a descriptive and meaningful ID. (Click to see full instructions)
      CSPU5_basic if - DIY secret number_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_basic if - check driving age_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_basic if - voting examle_instruction: |-
        Use console.log to print out the
        different boolean expressions below to see what information they return. (Click
        to see full instructions)
      CSPU5_basic if-else - driving age_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_clickerGame_v1_template_instruction: |-
        Create your own "Chaser App".
        (Click to see full instructions)
      CSPU5_moveTurtleOnButtonClick_instruction: |-
        Add an event handler to the button
        to move the turtle forward. (Click to see full instructions)
      CSPU5_playWithEventTypes_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSPU5_setPosition to fixed location_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      CSPU5_turtleDriver_add2ndButton_instruction: |-
        Debug the program by verifying
        your IDs are being referenced properly. (Click to see full instructions)
      Calc Circles of Eval .1_instruction: |-
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |-
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |-
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |-
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |-
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |-
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |-
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |-
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |-
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |-
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |-
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |-
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |-
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |-
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |-
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |-
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |-
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |-
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |-
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        \r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.\r
        \r
        Test your function by
        calculating the cost of 42 cookies
      Calc Design Recipe 3_instruction: |-
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).\r
        \r
        Test your function
        by calculating the sales for 135 cookies
      Calc Design Recipe 4_instruction: |-
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.\r
        \r
        Test your function by calculating the total
        profit for 15 cookies.
      Calc Free Play_instruction: |-
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |-
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |-
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |-
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |-
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |-
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |-
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |-
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |-
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |-
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |-
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Choose Your Own Adventure_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of choose your own adventure story in play lab.
      Choose Your Own Adventure_2018_instruction: |-
        You can do whatever you want in
        play lab! Here's an example of choose your own adventure story in play lab.
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. "
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. "
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |-
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |-
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |-
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |-
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |-
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |-
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |-
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. "
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. "
      Code Studio Puzzle Challenge 2 - Artist_instruction: |-
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |-
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |-
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |-
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |-
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |-
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |-
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |-
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |-
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. "
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. "
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. "
      Code Studio Puzzle Challenge Bee Screencast_instruction: |-
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |-
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |-
        Draw a line by using
        a variable "length" set to 180.
      Collector Demo_instruction: |-
        Look at all this loot! Help me get as many coins
        as I can so I can improve my farm. I can only use 9 blocks though!
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? "
      Course 2 Bee Loops 13_instruction: Questo è un esercizio di verifica -- Usa
        il blocco "ripeti" per raccogliere tutto il nettare.
      Course 2 Bee Loops 2_instruction: |-
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |-
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |-
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |-
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Riesci a farmi arrivare al maialino usando
        5 blocchi?
      Course 4 2_instruction: Adesso l'ape vuole solo del nettare. Ricordati che non
        tutti gli oggetti nascosti sono fiori, quindi controlla in modo da raccogliere
        il nettare solo quando ci sono fiori.
      Course 4 Artist 1_instruction: Aiutami a disegnare un quadrato. (Ogni lato è
        lungo 200 pixel)
      Course 4 Artist 10_instruction: |-
        <img src="https://images.code.org/c876143212d195192013582f57c6df04-image-1445625392518.36.18.png"
        width="150px;" style="mix-blend-mode: multiply;" /><br>
        Ecco il codice per una figura interessante.<br>
        <br>
        Che cosa succede se la ripeti più volte? Nota che il codice per disegnarla fa ruotare l'artista di <i>420 gradi</i> in totale. Ciò significa che, una volta completata la figura, l'artista sarà rivolto in una direzione differente rispetto a quando ha iniziato. Questa nuova direzione sarà esattamente <i>60 gradi a destra</i> rispetto alla direzione iniziale.<br>
        <br>
        Se ripeti per 6 volte questo codice così com'è, ottieni una rotazione totale pari a 6x60, ossia un giro completo di 360 gradi.<br>
        <img
        src="https://images.code.org/b79f96b87097ce3afe8a6a5608d04e36-image-1440132287456.44.27.png"  width="500px;"  style="mix-blend-mode:
        multiply;" /><br>
        <a href="https://studio.code.org/c/105644852" target="_blank">Vedi la soluzione</a>.<br>
        <br>
        Se vuoi fare un giro completo con solo 4 ripetizioni, l'artista deve ruotare di 360 gradi/4 = 90 gradi ogni volta. Puoi farlo aggiungendo un blocco `gira a destra di 30 gradi` prima di ripetere la figura (dato che 60+30 = 90).<br>
        <img src="https://programmailfuturo.it/images/codeorg/4-3-11-a.png"
        width="500px;" style="mix-blend-mode: multiply;" /><br>
        <a href="https://studio.code.org/c/120106816" target="_blank">Vedi la soluzione</a>.<br>
        <br>
        Se vuoi invece ripetere la figura 12 volte, l'artista deve effettuare una rotazione di 360 gradi/12 = 30 gradi ad ogni ripetizione. Ciò significa che, prima di ripetere la figura, l'artista deve tornare un po' indietro con un blocco `gira a sinistra di 30 gradi` (infatti 60-30 = 30).<br>
        <img src="https://programmailfuturo.it/images/codeorg/4-3-11-b.png"
        width="500px;" style="mix-blend-mode: multiply;" />
        <br>
        <a href="https://studio.code.org/c/120106805" target="_blank">Vedi la soluzione</a>.
      Course 4 Artist 11_instruction: |-
        <img src="https://images.code.org/6cac10470af71bbb5d75bf5e2669046f-image-1439939145211.png"
        width="200px"/><br>
        <br>
        E ora una piccola sfida!<br>
        <br>
        Per ottenere la figura che vedi devi usare solo blocchi che ti sono già stati mostrati. Riesci a capire come ricrearla? Sentiti libero di fare più tentativi e di commettere errori. Nessuno si aspetta che tu ci riesca perfettamente al primo tentativo. <br>
        <br>
        <b>Suggerimento</b>: La figura che viene ripetuta è quasi identica a quella del <a href="https://studio.code.org/s/course4/stage/3/puzzle/11" target="_blank">precedente esercizio</a>, l'unica differenza consiste nel fatto che il primo ciclo disegna tratti di lunghezza leggermente diversa.
      Course 4 Artist 12_instruction: |-
        <img src="https://images.code.org/70795d84048767ae7fb65883f476b27c-image-1440050836837.01.09.png"
        width="250px"/><br>
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.
      Course 4 Artist 13_instruction: Hai ancora voglia di giocare? Ecco una tela
        bianca su cui puoi disegnare qualunque cosa tu voglia!
      Course 4 Artist 2_instruction: Riesci ad inserire questo codice in un ciclo
        per disegnare il quadrato in grigio? Ogni lato è lungo 300 pixel.
      Course 4 Artist 20_instruction: Hai ancora voglia di giocare? Ecco una tela
        bianca su cui puoi disegnare qualunque cosa tu voglia!
      Course 4 Artist 3_instruction: Cerca di immaginare cosa succede se si eseguono
        questi blocchi di codice già pronti (o premi "Esegui" per verificarlo). Poi,
        ripetili una quantità di volte sufficiente a completare il disegno.
      Course 4 Artist 4_instruction: Quanti gradi ci sono in un cerchio?  Inserisci
        questo valore nel blocco `ripeti ... volte` in modo da disegnare un cerchio
        tutto colorato.
      Course 4 Artist 5_instruction: |-
        Disegna l'altra metà in modo che il disegno sia simmetrico. I triangoli sono equilateri e con il lato di 50 pixel.<br>
        Suggerimento: può essere necessario eseguire il codice più volte per capire quali blocchi devi aggiungere.
      Course 4 Artist 6_instruction: |-
        Completa il codice per disegnare questi 3 triangoli equilateri.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-11#VIDEO" target="_blank">Video doppiato in italiano</a>
      Course 4 Artist 7_instruction: 'Ora inserisci le istruzioni già presenti (che
        contengono un ciclo) all''interno di un altro ciclo, in modo da disegnare
        10 triangoli. Un ciclo inserito all''interno di un altro ciclo viene detto
        "ciclo annidato". Suggerimento: il disegno dei 10 triangoli richiede una rotazione
        complessiva di 360 gradi.  '
      Course 4 Artist 8_instruction: Per disegnare questo sole devi ripetere più volte
        tutte le istruzioni che trovi già pronte.
      Course 4 Artist 8a_instruction: Ricordi questa figura? Ora prova a disegnarla
        senza avere nessun aiuto!
      Course 4 Artist 9_instruction: Ripeti 10 volte la figura disegnata dal codice
        che trovi già pronto e assicurati di ruotare un po' tra una figura e l'altra.
        Di quanti gradi devi ruotare ad ogni ripetizione?
      Course 4 Artist Binary 1_instruction: La funzione `draw binary` (<i>disegna
        in binario</i>) prende in ingresso una stringa binaria, cioè fatta di caratteri
        "1" e "0", e fa sì che l'artista – mentre va da sinistra verso destra e dall'alto
        verso il basso – accenda o spenga i quadrati in base ai caratteri della stringa.
        L'artista quindi colora di bianco i quadrati quando incontra un "1" mentre
        non li colora quando incontra uno "0". Clicca su "Esegui" per vedere come
        l'artista usa le stringhe binarie per disegnare questa figura.
      Course 4 Artist Binary 1a_instruction: La funzione `draw binary` (<i>disegna
        in binario</i>) prende in ingresso una stringa binaria, cioè fatta di caratteri
        "1" e "0", e fa sì che l'artista – mentre va da sinistra verso destra e dall'alto
        verso il basso – accenda o spenga i quadrati in base ai caratteri della stringa.
        L'artista quindi colora di bianco i quadrati quando incontra un "1" mentre
        non li colora quando incontra uno "0". Clicca su "Esegui" per vedere come
        l'artista usa le stringhe binarie per disegnare questa figura.
      Course 4 Artist Binary 2_instruction: Qual è di queste stringhe binarie quella
        che devi ripetere 8 volte per disegnare questa figura?
      Course 4 Artist Binary 3_instruction: Riesci a disegnare questa figura inserendo
        in un ciclo una stringa binaria di 3 cifre?
      Course 4 Artist Binary 4_instruction: Ogni stringa binaria rappresenta una riga
        di questa figura. Le stringhe binarie che trovi già pronte disegnano una faccina
        triste. Riesci, sistemando diversamente i blocchi, a disegnare una faccina
        allegra invece che triste?
      Course 4 Artist Binary 5_instruction: Quale stringa binaria di 6 cifre, ripetuta
        11 volte, ti farà disegnare questa figura?
      Course 4 Artist Binary 6_instruction: Quale è la più piccola stringa binaria
        che puoi inserire in un ciclo per disegnare questa figura?
      Course 4 Artist Binary 7_instruction: Completa questo disegno.
      Course 4 Artist Binary Free Play 2_instruction: 'Tempo di giocare: hai a tua
        disposizione una griglia 16 x 16 di quadrati su cui disegnare!'
      Course 4 Artist Binary Free Play 2a_instruction: |-
        Ecco una griglia 16 x 16 di quadrati per disegnare con una risoluzione superiore!<br><br>
        Clicca su "Esegui" e guarda cosa succede quando cominciamo a essere creativi con i bit.
      Course 4 Artist Binary Free Play 2b_instruction: |-
        <img src="https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png"
        width="250px"/><br>
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.
      Course 4 Artist Binary Free Play_instruction: 'Tempo di giocare: disegna qualunque
        cosa ti piaccia usando le stringhe binarie!'
      Course 4 Artist Binary pre1_instruction: |-
        La codifica binaria è una modalità di rappresentazione delle informazioni usando solo due valori. In questa lezione usiamo i valori "spento" (rappresentato dal numero 0 e visualizzato in nero) e "acceso" (rappresentato dal numero 1 e visualizzato in verde scuro).<br>
        Hai a disposizione una griglia di quadrati con cui puoi giocare e creare dei disegni semplicemente accendendo e spegnendo i vari quadrati. Ogni quadrato è quindi analogo ad un pixel dello schermo.<br>
        Riesci a far produrre all'artista il disegno mostrato nella prima riga, la cui codifica binaria è "01010101"?
      Course 4 Artist Binary ryan_instruction: |-
        La codifica binaria è una modalità di rappresentazione delle informazioni usando solo due valori.  In questa lezione usiamo i valori "spento" (rappresentato dal numero 0) e "acceso" (rappresentato dal numero 1).<br><br>
        Hai a disposizione una griglia di quadrati con cui puoi giocare e creare dei disegni semplicemente accendendo e spegnendo i vari quadrati. Ogni quadrato è quindi analogo ad un pixel dello schermo.<br><br>
        Riesci a far produrre all'artista nella prima riga il disegno la cui codifica binaria è "01010101"?
      Course 4 Artist For  Functions 10_instruction: Facciamo un passo avanti, Riesci
        a disegnare una Stella usando la funzione "Draw a Square Line". Buona Fortuna!
      Course 4 Artist For  Functions 11_instruction: Facciamo un passo avanti, Riesci
        a disegnare una Stella usando la funzione "Draw a Square Line". Buona Fortuna!
      Course 4 Artist For Loops 1_instruction: Usa il blocco `ripeti ... volte` per
        disegnare un triangolo equilatero con i lati di 50 pixel.
      Course 4 Artist For Loops 10_instruction: Spazio Libero! Divertiti disegnando
        quello che vuoi con i blocchi che hai imparato ad usare
      Course 4 Artist For Loops 11_instruction: Ricordi che nella lezione 6 (<a href="https://studio.code.org/s/course4/stage/6/puzzle/10"
        target="_blank">esercizio 10</a> e seguenti) abbiamo usato la variabile `sides`
        (<i>lati</i>) per rappresentare il numero dei lati di un poligono? Ora devi
        fare la stessa cosa con la variabile `counter` (<i>contatore</i>). La figura
        di questo esercizio inizia con un triangolo ed aggiunge un lato per volta
        fino ad arrivare a disegnare un decagono (poligono con 10 lati). Ogni lato
        è lungo 100 pixel. Come puoi usare la variabile `counter` (<i>contatore</i>)
        presente nel <i>ciclo con contatore</i> per disegnare questa figura?
      Course 4 Artist For Loops 11a_instruction: Cerchiamo di mettere tutto insieme!  Usando
        le conoscenze che hai acquisito sui <i>cicli con contatore</i> e sulla variabile
        `counter` (<i>contatore</i>), prova a creare questo disegno in cui ogni figura
        ha due lati in più della precedente. Accertati che ogni lato sia 10 volte
        più lungo del numero di lati del poligono.
      Course 4 Artist For Loops 12_instruction: Andava piuttosto bene, ma adesso vorrei
        disegnare ogni forma vicino alla precedente. Questa volta ogni lato è di 20
        pixel. Usa un blocco "salta" per saltare avanti di 40 pixel dopo ogni forma.
      Course 4 Artist For Loops 13_instruction: Hmmm, queste forme stanno diventando
        sempre più grandi! Non avevamo già risolto questo problema usando le variabili?
        Come possiamo usare la variabile "contatore" per rendere i lati più piccoli
        man mano che ce ne sono sempre di più? Invece di spostarti in avanti di una
        quantità sempre fissa, prova a spostarti di una quantità di pixel pari a  (100
        / contatore).
      Course 4 Artist For Loops 14_instruction: Se ruoti un po' di più, o un po' di
        meno, di quanto fai di solito, puoi ottenere un effetto diverso. Per creare
        questa spirale quadrata avvitata, prova ad usare il codice del precedente
        esercizio ruotando di 89 gradi, invece di 90 gradi.
      Course 4 Artist For Loops 15_instruction: |-
        Tempo di giocare: scatena la tua fantasia e prova a disegnare qualunque cosa tu voglia usando i <i>cicli con contatore</i>. Abbiamo aggiunto anche alcune variabili generiche che puoi utilizzare.<br>
        <b>Nota</b>: se vuoi, puoi cambiare nome alle variabili esistenti o introdurne di nuove. Clicca sul triangolino con la punta verso il basso accanto al nome della variabile.<br>
        Nota che nella cassetta degli attrezzi abbiamo aggiunto la categoria "Variables" (<i>Variabili</i>), e nella categoria "Brushes" (<i>Pennelli</i>) ci sono dei nuovi blocchi. Prenditi un po' di tempo per esplorare tutto ciò che è a tua disposizione!
      Course 4 Artist For Loops 2_instruction: |-
        In questo esercizio il codice per disegnare un triangolo è stato inserito in un ciclo con contatore che conta da 50 a 100 con <i>passo</i> di 10.<br>
        <b>Attenzione</b>: assicurati di aver guardato bene il codice prima di cliccare su "Esegui".<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-10#VIDEO" target="_blank">Video doppiato in italiano</a>
      Course 4 Artist For Loops 3_instruction: 'Per disegnare questa figura usa come
        riferimento il codice del precedente esercizio. Il triangolo più piccolo ha
        i lati di 20 pixel, il triangolo più grande ha i lati di 200 pixel ed ogni
        triangolo, rispetto al precedente, ha il lato di 20 pixel più grande.

'
      Course 4 Artist For Loops 4_instruction: Come puoi modificare quello che hai
        imparato sui triangoli per disegnare questi quadrati? Il quadrato più piccolo
        ha i lati di 15 pixel, il quadrato più grande ha i lati di 300 pixel ed ogni
        quadrato, rispetto al precedente, ha il lato di 15 pixel più grande.
      Course 4 Artist For Loops 5_instruction: 'Ottimo lavoro sull''ultimo puzzle!,
        Usiamo di nuovo il blocco con la variabile COUNTER per disegnare questa immagine. '
      Course 4 Artist For Loops 6_instruction: Spazio Libero! Prova ad usare un ciclo
        FOR per disegnare un modello di forma crescente a piacere.
      Course 4 Artist For Loops 6a_instruction: Per ottenere questo disegno bastano
        solo tre piccole modifiche al codice del precedente esercizio!
      Course 4 Artist For Loops 7_instruction: Cosa succede se rimouvi il blocco RIPETI
        3 da questo algoritmo, mantenendo i blocchi MUOVI e RUOTA nel ciclo RIPETI?
        In questo triangolo a spirale ogni lato è 20 pixels più lungo del precedente.
      Course 4 Artist For Loops 8_instruction: |-
        Per disegnare questa figura devi fare solo un piccolo cambiamento al codice del precedente esercizio. Riesci a capire di quale cambiamento si tratta?<br>
        <b>Suggerimento</b>: devi eliminare qualcosa!
      Course 4 Artist For Loops 8a_instruction: Per disegnare questa figura devi fare
        solo un piccolo cambiamento al codice del precedente esercizio. Riesci a capire
        di quale cambiamento si tratta?
      Course 4 Artist For Loops 9_instruction: Riesci a disegnare una spirale? Sposa
        in avanti da 1 a 75 pixels incrementando di 1 pixel ogni volta.
      Course 4 Artist For Loops Challenge_instruction: |
        <b>Sfida:</b> Riesci a capire come utilizzare tutte le cose che hai imparato finora per disegnare questa immagine composta di poligoni, tutti con lato di 40 pixel?<br>
        <br>
        Ricorda che per creare una spirale non devi chiudere il poligono. Questo significa che ogni forma deve avere un lato in meno del solito.
      Course 4 Artist For Loops Challenge_a_instruction: |-
        Can you figure out how
        to use all of the things you've learned to create this image?\r
        \r
        Need
        a hint? Click here.
      Course 4 Artist For Loops inspire_instruction: |-
        <img src="https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png"
        width="250px"/><br>
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.
      Course 4 Artist Functions 1_instruction: Riesci a disegnare un quadrato con
        lato di 100 pixels, usando un CICLO?
      Course 4 Artist Functions 10_instruction: Quale blocco è necessario aggiungere
        per far si che il triangolo sia posizionato sopra il quadrato?
      Course 4 Artist Functions 11_instruction: Controlla questo codice e disegna
        un cubo - Riesci ad inserirla nella funzione chiamata "Disegna un Cubo" (Draw
        a Cube)
      Course 4 Artist Functions 12.1_instruction: Creiamo una funzione denominata
        "disegna un ottagono 20" che disegna un ottagono dove ogni lato è lungo 20
        pixel.
      Course 4 Artist Functions 12_instruction: Ripeti la funzione Quadrato per disegnare
        una linea
      Course 4 Artist Functions 13.1_instruction: 'Ora, creiamo una funzione denominata
        "salto in alto a destra" che sposta l''artista in alto a destra dell''ottagono
        che hai appena disegnato così possiamo finire questo modello. \r \r Suggerimento:
        per raggiungere l''angolo superiore destro, prova ad utilizzare un modello
        che fa solo i 3/8 dell''ottagono.'
      Course 4 Artist Functions 13_instruction: Come puoi vedere, abbiamo una nuova
        funzione chiamata "Disegna una serie di quadrati".  Cerca di comprendere come
        è costruita. Clicca su ESEGUI per vederla in azione.
      Course 4 Artist Functions 14.1_instruction: Ora, realizziamo una funzione chiamata
        "Salta al superiore destra" che sposta l'artista in alto a destra dell'ottagono
        che hai appena disegnato così possiamo finire questo modello.
      Course 4 Artist Functions 14_instruction: Grandissimo! Usa la tua nuova funzione
        "Disegna una serie di quadrati" per disegnare una forma quadrata. Ricorda
        che ogni quadrato ha il lato di 40 pixel.
      Course 4 Artist Functions 15_instruction: 'Ora accelleriamo un po'', riesci
        a disegnare una stella usando la funzione "disegna una serie di quadrati"?
        Buona fortuna! Suggerimento: potrebbe essere necessario ruotare di 144 gradi'
      Course 4 Artist Functions 2_instruction: Sai disegnare tre quadrati a distanza
        di 20 pixel l'uno dall'altro? Ogni quadrato ha il lato di 100 pixel.
      Course 4 Artist Functions 3_instruction: 'Riesci a disegnare questa immagine
        usando la funzione "Disegna un Quadrato"? Suggerimento: ogni quadrato è spostato
        di 120 pixels.\r'
      Course 4 Artist Functions 4_instruction: 'Sei pronto per creare la tua FUNZIONE?
        Clicca sul blocco FUNZIONI nella casetta degli attrezzi, dalle il nome "Disegna
        un Triangolo", quindi disegna un triangolo come hai fatto precedentemente
        con i blocchi RIPETI. Quindi clicca sul pulsante "Salva e Chiudi" posto nell''angolo
        in alto a destra. Suggerimento: crea un triangolo con lato di 100 pixels.
        Buona fortuna!'
      Course 4 Artist Functions 5 OLD_instruction: Cerchiamo di usare le nostre due
        funzioni per disegnare una casa - Cosa deve essere modificato nel codice per
        disegnare correttamente la casa?
      Course 4 Artist Functions 5_instruction: 'Riesci a disegnare questa immagine
        usando la funzione "Disegna un Quadrato"? Suggerimento: ogni quadrato è spostato
        di 120 pixels.\r'
      Course 4 Artist Functions 6_instruction: Quale blocco è necessario aggiungere
        per far si che il triangolo sia posizionato sopra il quadrato?
      Course 4 Artist Functions 7_instruction: Riesci a disegnare una serie di quadrati
        usando una funzione "quadrato"? Ogni quadrato ha il lato di 40 pixel.
      Course 4 Artist Functions 8_instruction: 'Stai imparando ad usare i blocchi
        funzione? Prova a modificare la funzione "disegna un quadrato" (draw a square)
        in modo che disegni un quadrato con i lati di 200 pixel. Suggerimento: clicca
        su "modifica" per cambiare il codice della funzione. Se vuoi, puoi cambiare
        anche il nome della funzione. Alla fine, clicca su "Chiudi" per salvare le
        modifiche.'
      Course 4 Artist Functions 9_instruction: Vi abbiamo fornito la maggior parte
        del codice ncessario per creare una funzione. Tuttavia ci sembra ci sia qualcosa
        che manca. Riouscite a fare in modo che questa funzione sia completa?
      Course 4 Artist Functions Inspiration_instruction: |-
        <img src="https://images.code.org/cf373e03bede480ae54aec72ce823454-image-1442951867535.54.11.png"
        width="250px"/><br>
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.
      Course 4 Artist Functions challenge_instruction: |-
        <img src="https://images.code.org/69f1c2b415f907c86aaa6ed2534c3682-image-1442870371171.13.38.png"
        width="250px"/><br>
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo.
      Course 4 Artist Functions inspire_instruction: "Tempo di giocare: guarda la
        figura che trovi al link https://studio.code.org/c/110671172. Ora hai imparato
        tutto quello che devi sapere per realizzare un disegno come questo! Se questa
        immagine ti ispira, prova a realizzare qualcosa di simile. In caso contrario,
        crea qualcosa di tuo. \\r\n\nVuoi realizzare la figura che ti abbiamo suggerito?
        Ecco alcuni aiuti:\n\nSuggerimento 1: usa un ciclo con contatore, quindi usa
        la sua variabile contatore all'interno di un ciclo annidato.\n\nSuggerimento
        2: ad ogni iterazione, dovresti disegnare un quadrato e fare un salto in avanti.
        \n\nSuggerimento 3: dovresti girare a sinistra di 90 gradi all'esterno del
        ciclo annidato, ma ancora all'interno del ciclo con contatore.\n\n\\r\nVuoi
        sapere come è stato realizzata la figura che ti abbiamo suggerito? Visita
        il link https://studio.code.org/c/110671172/edit per scoprirlo.\n\nCosa succede
        se disegni i quadrati un po' più piccoli o un po' più grandi? E cosa succede
        se invece di girare a sinistra giri a destra?"
      Course 4 Artist Inspire_instruction: |-
        <img src="https://images.code.org/b5e28b084cb331ee030ea3853ed921bd-image-1440060815818.51.21.png"
        width="250px"/><br>
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.
      Course 4 Artist Params 1_instruction: Modifichiamo ora una funzione che disegna
        un quadrato con lati di 50 pixel
      Course 4 Artist Params 10_instruction: 'Puoi chiamare funzioni dall''interno
        di altre funzioni! Usando la tua funzione "forma" come base, crea 3 forme
        di una casa, ognuna più larga di 20 pixel rispetto alla precedente, iniziando
        da una lunghezza di 50 pixel. Può essere utile utilizzare un ciclo contatore. '
      Course 4 Artist Params 11_instruction: |-
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: Usa la tua funzione "pinwheel" per disegnare
        ognuna delle forme. La lunghezza del lato per ogni immagine è 50.
      Course 4 Artist Params 13_instruction: 'Freeplay: Qui ci sono le funzioni che
        hai scritto e alcune altre con cui puoi giocare. Disegna qualcosa di spettacolare!'
      Course 4 Artist Params 2_instruction: |-
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: 'Magnifico, puoi disegnare ognuno di questi
        triangoli con questa nuova funzione? Il primo è lungo 25 pixel, il secondo
        50 e il terzo 75. '
      Course 4 Artist Params 4_instruction: Potete aggiungere una nuova funzione denominata
        quadrato? La funzione dovrebbe anche prendere un parametro di lunghezza, proprio
        come per il triangolo. Questa volta disegnate 3 quadrati con lunghezza di
        25, 50 e 75 pixel e che distano 100 pixel uno dall'altro.
      Course 4 Artist Params 5_instruction: 'Usa ambedue le nuove funzioni per disegnare
        questa immagine. Per semplificare questa operazione usate un ciclo con un
        parametro "contatore".

'
      Course 4 Artist Params 6_instruction: "Modifichiamo questa funzione: \"disegna
        una forma\".\nQuesta ha già un parametro \"lunghezza\". Ora modifichiamo la
        funzione per aggiungere anche un parametro \"lati\". Ricorda che l'angolo
        per una data forma è 360 diviso i lati che ha. Suggerimento: le lunghezze
        per ogni forma sono: per il trianogolo 100 pixel, per l'esagono 25 pixel e
        per il quadrato 50 pixel. "
      Course 4 Artist Params 7_instruction: 'Riesci a disegnare queste forme completando
        i "???". Il quadrato e il triangolo sono 100 pixel di dimensioni mentre l''esagono
        è di 75 pixel. '
      Course 4 Artist Params 8_instruction: |
        Riesci a capire come disegnare questa
         forma? Ecco un suggerimento per creare una nuova forma con 6 lati chiamati un esagono.
      Course 4 Artist Params 9_instruction: Ti ricordi quando abbiamo usato il ciclo
        contatore ma abbiamo rimosso un ciclo dal suo interno? Divertiamoci ora e
        usiamo la funzione per disegnare una figura con i parametri "lati" e "lunghezza".
        Sei in grado di creare questa figura? Il contatore del quadrato deve essere  5/100/5,
        quello del triangolo 10/100/10 e quello dell'esagono 2/100/2.
      Course 4 Artist Var 9_instruction: 'Ecco l''algoritmo per disegnare un triangolo.
        Modificalo in modo da usare la vriabile "lati". Sostituite il numero 3 con
        la variabile "lati". Suggerimento: ricordatevi di usare il blocco "imposta
        i lati a".'
      Course 4 Artist Vars 1_instruction: Disegniamo un triangolo equilatero. <br><br>Ogni
        lato deve essere lungo esattamente 100 pixel.
      Course 4 Artist Vars 10_instruction: Questo è un algoritmo che disegna un triangolo
        all'esterno di triangoli più piccoli. Modificatelo in modo che venga utilizzata
        la variabile "lati" disegnare ogni triangolo. Studiate il codice e ogni volta
        che vedete il numero 3, sostituitelo con la variabile "lati". Ricordatevi
        di utilizzare il blocco che imposta i lati.
      Course 4 Artist Vars 11_instruction: Quello che vedi è un codice che utilizza,
        in maniera più complessa, gli stessi concetti del precedente esercizio. Quale
        valore devi assegnare alla variabile `sides` (<i>lati</i>) per disegnare questa
        immagine composta da quadrati?
      Course 4 Artist Vars 12_instruction: Per disegnare la figura che vedi, la variabile
        `sides` (<i>lati</i>) va impostata a 5. Se usi valori più grandi disegni poligoni
        con più lati ed ottieni una figura più grande! Nota che, oltre alla variabile
        `sides` (<i>lati</i>), c'è un'altra variabile chiamata `length` (<i>lunghezza</i>).
        Puoi utilizzare questa variabile ogni volta che devi `spostarti in avanti`.
        Per disegnare questa figura la variabile `length` (<i>lunghezza</i>) va impostata
        a 75.
      Course 4 Artist Vars 13_instruction: |-
        Quando una figura ha molti lati, ogni lato deve essere più corto se desideri che l'intero modello si adatti allo schermo.<br>
        Ricrea l'algoritmo per questo bellissimo modello, ma anziché impostare manualmente la variabile `length` (<i>lunghezza</i>), usa un blocco matematico con all'interno la variabile `sides` (<i>lati</i>) per assicurarti che ogni forma si adatti correttamente. Il perimetro di ciascun poligono è 300 pixel.
      Course 4 Artist Vars 14_instruction: |-
        Tempo di giocare: Guarda! Ora l'algoritmo precedente è annidato all'interno di un altro ciclo. Fai degli esperimenti modificando i valori delle due variabili per disegnare delle figure fantastiche.<br><br>
        Per disegni ancora più belli, prova a giocare con i colori! Assegna dei colori a caso all'interno di ogni ciclo e osserva come cambia la figura che ottieni.
      Course 4 Artist Vars 2_instruction: |-
        Adesso nel blocco `vai avanti ...`, invece di usare un valore esplicito di pixel, si fa riferimento ad una variabile di nome `length` (<i>lunghezza</i>). Puoi impostare la variabile `length` a 150 per disegnare questo nuovo triangolo?<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-6#VIDEO" target="_blank">Video doppiato in italiano</a>
      Course 4 Artist Vars 3_instruction: 'Il ciclo proposto disegna un quadrato,
        ma manca qualcosa. Correggi in modo che utilizzi la variabile "lunghezza"
        per capire quanto lungo deve essere ogni lato? '
      Course 4 Artist Vars 4_instruction: Vorrei disegnare un rettangolo che sia alto
        il doppio di quanto è largo. C'è una variabile denominata `width` (<i>larghezza</i>)
        che deve essere impostata a 100. Riesci ad utilizzare il blocco matematico
        con le operazioni per risolvere questo esercizio?
      Course 4 Artist Vars 5_instruction: Utilizzare la variabile "lati" per controllare
        quante volte questo ciclo debba essere eseguito.
      Course 4 Artist Vars 6_instruction: Ecco del codice che ti consente di disegnare
        un qualsiasi poligono regolare. C'è una nuova variabile denominata `sides`
        (<i>lati</i>) che è impostata a 4. Riesci ad usare la variabile `sides` (insieme
        al blocco matematico) per girare del giusto numero di gradi a prescindere
        da quanti lati ci sono nel poligono?
      Course 4 Artist Vars 7_instruction: |-
        Utilizza ciò che hai imparato nel precedente esercizio per disegnare questo esagono usando la variabile `sides` (<i>lati</i>).<br>
        <br>
        Hai notato che è possibile modificare un solo valore per disegnare un triangolo, un quadrato, un pentagono o un ottagono?
      Course 4 Artist Vars 8_instruction: 'Tempo di giocare: facciamo un esperimento
        con il numero di `sides`(<i>lati</i>) delle figure. Riesci a modificare l''algoritmo
        affinché la dimensione complessiva della figura disegnata rimanga la stessa,
        indipendentemente dal numero dei suoi lati?'
      Course 4 Artist Vars 9_instruction: Modificare questo algoritmo in modo che
        utilizzi la variabile "lati" invece di un numero fisso per disegnare un triangolo.
        Sostituisci il numero 3 con la variabile "lati" e utilizzare il blocco "imposta
        i lati".
      Course 4 Bee 1_instruction: |-
        L'ape non sa cosa si nasconde dietro la nuvola! <br>
        Usa un blocco `se` per verificare se si tratta di un fiore oppure di un favo. <br>
        Poi, se c'è un fiore, raccogli una dose di nettare.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-2#VIDEO" target="_blank">Video doppiato in italiano</a>
      Course 4 Bee 2_instruction: Usa il blocco `se-altrimenti` per controllare ogni
        oggetto e verificare se si tratta di un fiore oppure di un favo. <b>Se</b>
        è un fiore, raccogli una dose di nettare ... <b>altrimenti</b>, produci una
        dose di miele!
      Course 4 Bee 3_instruction: |-
        L'oggetto nascosto può essere un fiore oppure un favo. Usa il blocco `se-altrimenti` per raccogliere il nettare <b>se</b> si tratta di un fiore, <b>altrimenti</b> per produrre il miele (dato che, in questo caso, si tratta sicuramente di un favo).
        <br><a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-2#VIDEO" target="_blank">Video doppiato in italiano</a>
      Course 4 Bee 4_instruction: |-
        Un fiore viola può avere 1, 2 o 3 dosi di nettare, ma tu non sai quante ne ha!

        In questo esercizio un blocco "se-altrimenti" viene combinato con un altro blocco "se-altrimenti" per creare un blocco con tre ramificazioni: "se", "altrimenti-se" , "altrimenti". Prova a completare il programma in modo tale da raccogliere tutto il nettare.
      Course 4 Bee 5_instruction: "Questo fiore viola può avere 3, 2 o 1 nettare.
        \nAggiungi un blocco if-else per creare un'istruzione if, else-if, else. \nCompleta
        la soluzione per raccogliere la quantità sconosciuta di nettare."
      Course 4 Bee 6_instruction: "Questo fiore viola può avere 3, 2 o 1 nettare.
        \nCrea un'istruzione if, else-if, else per raccogliere la quantità sconosciuta
        di nettare."
      Course 4 Bee 7_instruction: Utilizzate tutto quanto avete imparato finora per
        raccogliere tutto il nettare. Il fiore viola può avere 3, 2 o 1 di nettare.
      Course 4 Bee For Loops 1_instruction: Usa un blocco `ripeti ... volte` (detto
        anche ciclo) per raccogliere il nettare da ogni fiore.
      Course 4 Bee For Loops 10_instruction: Se il ciclo con contatore conta all'indietro,
        il valore del "passo" viene sottratto dal contatore ad ogni ripetizione. Quale
        dovrebbe essere il valore del "passo" per raccogliere prima 9, poi 6 e poi
        3 dosi di nettare?
      Course 4 Bee For Loops 11_instruction: Che cosa è sbagliato con questo ciclo
        (loop)? Vedi se puoi risolvere il problema e fare in modo che l'ape raccolga
        tutto il nettare.
      Course 4 Bee For Loops 2_instruction: Ecco un nuovo tipo di ciclo, chiamato
        il ciclo "for". Questo particolare ciclo conta da 1 a 5 di 1 ed esegue il
        contenuto del ciclo ogni volta che viene eseguito. Aiutate l'ape a ottenere
        il nettare.
      Course 4 Bee For Loops 3_instruction: Potete risolvere questo puzzle utilizzando
        un ciclo "for" per contare da 1 a 3 di 1. Andiamo ora a prendere del nettare!
      Course 4 Bee For Loops 4_instruction: Raccogliamo tutto il nettare da questi
        fiori. Mi chiedo se ci sia un modo più semplice per farlo...
      Course 4 Bee For Loops 5_instruction: 'L''uso dei cicli (loop) rende il tutto
        molto più facile! Utilizza la variabile "contatore" del ciclo per ripetere
        il blocco per prendere il nettare lo stesso numero di volte del ciclo. Ci
        sono un sacco di cicli. Tutto il codice necessario è disponibile, dai un''occhiata
        a come è stato messo insieme, quindi fai clic su Esegui per vedere come funziona. '
      Course 4 Bee For Loops 6_instruction: Puoi usare un <i>ciclo con contatore</i>
        anche per contare all'indietro. In questo esercizio, prova a raccogliere il
        nettare contando all'indietro da 5 ad 1 a passi di 1.
      Course 4 Bee For Loops 7_instruction: Usa la variabile "contatore" del ciclo
        per controllare lo spostamento in senso orizzontale.
      Course 4 Bee For Loops 8_instruction: È possibile utilizzare la variabile del
        ciclo per controllare il movimento e la raccolta di nettare?
      Course 4 Bee For Loops 9_instruction: Il valore più a destra nel ciclo con contatore
        viene chiamato "passo". Ogni volta che il ciclo viene eseguito, la variabile
        "contatore" (counter) cambia del valore indicato dal "passo". Prova a raccogliere
        il nettare da questi fiori usando un passo di 2.
      Course 4 Bee Loops 5 NEW_instruction: Ci sono tre fiori. Riesci a trovare la
        sequenza di spostamenti da ripetere 3 volte, in modo da raccogliere tutto
        il nettare con il minor numero possibile di blocchi?
      Course 4 Bee Loops 5a NEW_instruction: Ora, usa un blocco `ripeti ... volte`
        (<i>ciclo</i>) per aiutare l'ape a raccogliere tutto il nettare che trova
        nel suo percorso verso il favo usando il minor numero possibile di blocchi.
        Quando arrivi al favo, non dimenticarti di produrre il miele!
      Course 4 Bee Params 1_instruction: Esamina la funzione `get 3 nectars` (<i>prendi
        3 dosi di nettare</i>) che fa ruotare e spostare l'ape per raccogliere il
        nettare e riportarla alla posizione di partenza. Poi usala in una sequenza
        di blocchi per raccogliere tutto il nettare.
      Course 4 Bee Params 2_instruction: Modifica la funzione `get 3 nectar` (<i>prendi
        3 dosi di nettare</i>) per girare a destra, invece che a sinistra, così l'ape
        può arrivare ai fiori.
      Course 4 Bee Params 3 (copy 1)_instruction: Ora ci sono fiori su entrambi i
        lati! E' possibile utilizzare un parametro in modo che la stessa funzione
        operi per i fiori su entrambi i lati. E' stata aggiunto un parametro denominato
        "direzione" alla funzione. Se il parametro "direzione" è uguale a 0 si gira
        a sinistra, se è 1 si gira a destra.
      Course 4 Bee Params 3_instruction: Ora ci sono fiori su entrambi i lati! Abbiamo
        aggiunto un parametro denominato `direction` (<i>direzione</i>) alla funzione
        `get 3 nectar` (<i>prendi 3 dosi di nettare</i>). Abbiamo anche aggiunto due
        variabili `left` (<i>sinistra</i>) e `right` (<i>destra</i>) per chiamare
        ogni volta la funzione con la direzione giusta. Modifica il codice della funzione
        in modo che l'ape giri nella direzione indicata dal parametro passato alla
        funzione.
      Course 4 Bee Params 4 (copy 1)_instruction: Provare a utilizzare la nuova funzione
        per raccogliere tutti i fiori. Ricordate, 0 = sinistra e 1 = destra.
      Course 4 Bee Params 4 - Two WhenRun_instruction: |-
        Prova ad utilizzare la tua nuova funzione
        per raccogliere tutti i fiori. Ricordati di usare le variabili di sinstra e di destra.
      Course 4 Bee Params 4 backup_instruction: In questo esercizio i fiori hanno
        diversi quantitativi di nettare. Non sarebbe bello se potessimo raccogliere
        tutto il nettare con una sola funzione? Prova ad aggiungere, alla tua funzione,
        un nuovo parametro, chiamato "dosi di nettare", che ti consenta di controllare
        la quantità di nettare da raccogliere. Probabilmente vorrai anche rinominare
        la tua funzione!
      Course 4 Bee Params 4_instruction: Usa la nuova versione della funzione `get
        3 nectar` (<i>prendi 3 dosi di nettare</i>) per raccogliere il nettare da
        tutti i fiori. Ricordati di usare le variabili `left` (<i>sinistra</i>) e
        `right` (<i>destra</i>).
      Course 4 Bee Params 5_instruction: Partiamo da zero! Riesci a creare una nuova
        funzione chiamata `get 5 nectar` (<i>prendi 5 dosi di nettare</i>) che usa
        un nuovo parametro chiamato `direction` (<i>direzione </i>)?
      Course 4 Bee Params 6 (copy 1)_instruction: Prova a utilizzare la nuova funzione
        per raccogliere tutto questo nettare.
      Course 4 Bee Params 6_instruction: In questo esercizio, sui fiori si trovano
        quantità differenti di nettare e il codice che trovi già pronto non risolve
        l'esercizio. Non sarebbe bello se potessimo raccogliere tutto il nettare con
        una sola funzione? Modifica la funzione `get 5 nectar` (<i>prendi 5 dosi di
        nettare</i>) aggiungendo un nuovo parametro, chiamato `nectar units` (<i>dosi
        di nettare</i>), che specifica la quantità di nettare da raccogliere. Probabilmente
        sarà meglio cambiare anche nome alla funzione e, se vuoi, puoi cambiare il
        nome anche ai parametri.
      Course 4 Bee Params 7 (copy 1)_instruction: Prova a utilizzare la nuova funzione
        per raccogliere tutto questo nettare.
      Course 4 Bee Params 7_instruction: Usa la nuova funzione `get many nectar` (<i>prendi
        molte dosi di nettare</i>) per raccogliere tutto il nettare.
      Course 4 Bee Params 8 Clone 2_instruction: Oooh, ora c'è miele di cui occuparsi!
        Come si potrebbe aggiornare la funzione per ottenere il nettare o fare il
        miele.
      Course 4 Bee Params 8 Clone_instruction: Oooh, ora c'è miele di cui occuparsi!
        Come si potrebbe aggiornare la funzione per ottenere il nettare o fare il
        miele.
      Course 4 Bee Params 8 clone 3_instruction: Oooh, ora c'è miele di cui occuparsi!
        Come si potrebbe aggiornare la funzione per ottenere il nettare o fare il
        miele.
      Course 4 Bee Params 8 new_instruction: Oooh, ora c'è miele di cui occuparsi!
        Come si potrebbe aggiornare la funzione per ottenere il nettare o fare il
        miele.
      Course 4 Bee Params 8_instruction: 'Una piccola sfida: ora c''è anche il miele
        di cui occuparsi! Adesso la funzione `get nectar make honey` (<i>raccogli
        nettare - produci miele</i>), oltre ai parametri `direction` (<i>direzione</i>)
        e `nectar_units` (<i>dosi di nettare</i>), ha anche il nuovo parametro `honey_units`
        (<i>dosi di miele</i>). Come devi modificare il codice della funzione in modo
        da usare i valori di questi parametri per decidere cosa fare?'
      Course 4 Bee Params Ex_instruction: Usa la nuova funzione `get many nectar`
        (<i>prendi molte dosi di nettare</i>) per raccogliere tutto il nettare.
      Course 4 Binary 1_instruction: Ecco una funzione che accetta una stringa binaria
        di 1 e di 0 e istruisce l'agricoltore per attivare il movimento da sinistra
        a destra, dall'alto verso il basso, accendendo i quadrati in cui il numero
        ha uno zero. Esegui il codice fornito per vedere come l'agricoltore usa i
        numeri binari per disegnare un'immagine.
      Course 4 Binary 2_instruction: 'Quale stringa binaria potresi ripetere 8 volte
        per disegnare questa immagine? Suggerimento: il numero "1" consente di riempire
        un buco.'
      Course 4 Binary 3_instruction: Potete disegnare questo modello ripetendo una
        singola stringa binaria?
      Course 4 Binary 5 (copy 1)_instruction: Quale stringa binaria, ripetuta 10 volte,
        disegnerà questa immagine?
      Course 4 Binary 5_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà
        questa immagine?
      Course 4 Binary 6 (copy 1)_instruction: Quale stringa binaria, ripetuta 10 volte,
        disegnerà questa immagine?
      Course 4 Binary 6_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà
        questa immagine?
      Course 4 Binary 7_instruction: Quale stringa binaria, ripetuta 10 volte, disegnerà
        questa immagine?
      Course 4 Binary 8_instruction: Puoi completare la maggior parte di questa immagine
        impostando un ciclo con un numero binario a 5 bit - poi avrai bisogno di un
        altro numero a 4 bit per ottenere l'angolo in basso a destra.
      Course 4 EC 1a_instruction: 'Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!

'
      Course 4 EC 1b_instruction: 'Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!

'
      Course 4 EC 2a_instruction: 'Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!

'
      Course 4 EC 2b_instruction: 'Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!

'
      Course 4 EC 2c_instruction: 'Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!

'
      Course 4 EC 2d_instruction: 'Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!

'
      Course 4 EC 3_instruction: 'Usa quello che hai imparato nell''esercizio precedente
        per disegnare un''immagine come questa. NB: Il codice diventa più semplice
        se si incorporano i parametri. '
      Course 4 EC 3a_instruction: Nessuna istruzione. Nessun suggerimento. Solo la
        sfida!
      Course 4 Maze 1_instruction: Fai arrivare l'uccellino arrabbiato (Angry Bird)
        fino al maialino!
      Course 4 Maze 2_instruction: Evita la dinamite (TNT)!
      Course 4 Maze 3_instruction: Scrivi il codice per far arrivare l'uccellino arrabbiato
        (Angry Bird) fino al maialino!
      Course 4 Maze 4_instruction: |-
        Prova ad usare il blocco `ripeti 5 volte` per risolvere l'esercizio con meno blocchi.<br>
        <br>
        Ricorda che il blocco `ripeti ... volte` (detto anche <i>ciclo</i>) fa <b>ripetere</b> le azioni che si trovano all'interno del blocco per un numero di volte pari a quello che hai impostato.
      Course 4 Maze 5_instruction: Prova a risolvere questo esercizio usando meno
        blocchi possibile.
      Course 4 Maze 6_instruction: Prova a risolvere questo esercizio usando meno
        blocchi possibile.
      Course 4 Play Lab For Loops 2_instruction: Questa volta prova a far dire al
        gatto i numeri dispari da 1 a 100.
      Course 4 Play Lab Params 1_instruction: |-
        In questo esercizio c'è una funzione chiamata `jump` (<i>salta</i>) che consente al cane di saltare in alto di 100 pixel.<br>
        <br>
        Clicca su "Esegui" ed utilizza questa nuova funzione per raccogliere tutte le bandierine muovendo il cane con i tasti freccia.
      Course 4 Play Lab Params 10_instruction: 'Abbiamo aggiunto al gioco ancora un''altra
        funzione che puoi usare. Programma il tuo gioco in modo tale da chiamare la
        funzione `level_up` (<i>sali di un livello</i>) se la variabile `player_score`
        (<i>punteggio</i>) diventa maggiore di un certo valore (per esempio: `player_score`
        > 6). Clicca su "Esegui" per giocare e arriva al livello 3 per passare al
        prossimo esercizio. Nota: nella funzione `level_up` viene usata la variabile
        `enemy_speed` che significa <i>velocità del nemico</i>.'
      Course 4 Play Lab Params 2_instruction: 'Ora le bandierine sono troppo in alto
        per poterle raggiungere con la funzione `jump` (<i>salta</i>)! Dovresti associare
        alle frecce `verso l''alto` e `verso il basso` una funzione che consenta di
        avere salti di diverse altezze. Per far questo devi modificare la funzione
        `jump` (<i>salta</i>): clicca su "modifica" e poi aggiungile un parametro
        `height` (<i>altezza</i>): scrivi il nome che vuoi dargli e clicca su "Aggiungi
        un parametro". La freccia verso l''alto dovrebbe permettere al cane di fare
        un salto in alto di 200 pixel e la freccia verso il basso un salto in alto
        di soli 100 pixel.'
      Course 4 Play Lab Params 3_instruction: 'Nella funzione `jump` (<i>salta</i>)
        è stato aggiunto un ulteriore parametro in modo da poterla usare con diversi
        personaggi. Ogni `actor` (</i>personaggio</i>) è rappresentato da un numero,
        a partire da uno. Modifica la funzione `jump` (<i>salta</i>) in modo che il
        suo codice usi il parametro `actor` (</i>personaggio</i>), oltre al parametro
        `height` (<i>altezza</i>). '
      Course 4 Play Lab Params 4_instruction: In questo esercizio c'è una funzione
        chiamata `patrol` (<i>pattuglia</i>) in cui devi inserire il codice che serve
        per far muovere il gatto prima in su e poi in giù di 400 pixel.
      Course 4 Play Lab Params 5_instruction: |-
        Modifica la funzione `patrol` (<i>pattuglia</i>) aggiungendo un parametro `actor` (<i>personaggio</i>), in modo tale da poterla eseguire per i diversi personaggi. Ricorda che sono identificati dai numeri 1, 2 e 3.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-14#VIDEO" target="_blank">Video doppiato in italiano</a>
      Course 4 Play Lab Params 6_instruction: |-
        Aggiungi un altro parametro chiamato `speed` (<i>velocità</i>)
        alla funzione `patrol` (<i>pattuglia</i>). Prova ad utilizzare il blocco `imposta il personaggio ... velocità ...` con il nuovo parametro `speed` (<i>velocità</i>) per aiutare il pinguino (personaggio 2) a prendere entrambe le bandierine prima che gli altri prendano la loro.
      Course 4 Play Lab Params 7_instruction: 'Esamina il codice che trovi già pronto
        per vedere se riesci a capire cosa fa ogni blocco. Quando hai finito, utilizza
        i tasti freccia per far muovere il cane e raccogliere tutte le bandierine.
        <b>Nota</b>: non è necessario modificare il codice.'
      Course 4 Play Lab Params 8_instruction: Utilizza il blocco `quando il personaggio
        ... tocca ...` per collocare il cane (personaggio 1) in alto a sinistra SOLO
        quando tocca uno qualunque degli altri personaggi.
      Course 4 Play Lab Params 9_instruction: 'Ecco un gioco usato in una precedente
        lezione, ma con la maggior parte del codice nascosta. C''è una nuova funzione
        `score_points` (<i>segna il punteggio</i>). Modifica questa funzione in modo
        che aggiunga alla variabile  `player_score` (<i>punteggio</i>) il valore di
        un nuovo parametro `points` (<i>punti</i>). La variabile `player_score` (<i>punteggio</i>)
        deve essere incrementata ogni volta che il cane colpisce il gatto con una
        fetta di torta e decrementata ogni volta che il gatto colpisce il cane con
        un sandwich. Una volta concluse queste modifiche clicca su "Esegui" per giocare.
        Quando il punteggio arriva a 6 si passa all''esercizio successivo. '
      Course 4 Play Lab Vars 1_instruction: In questo esercizio non devi scrivere
        alcun codice. Devi solo premere "Esegui" per giocare! <br> <br> Qui sei il
        cane che sta cercando di raccogliere più bandierine del gatto. Utilizza la
        freccia verso il basso per muovere il cane. Premi "Termina" quando hai finito
        di giocare.
      Course 4 Play Lab Vars 2_instruction: |-
        Quella del precedente esercizio non è stata un bella gara! Modifica la variabile denominata `dog_speed` (<i>velocità del cane</i>) per essere sicuro di poter raccogliere più bandierine del gatto. Il primo che raccoglie 10 bandierine, vince!
        <br><a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-7#VIDEO" target="_blank">Video doppiato in italiano</a>
      Course 4 Play Lab Vars 3_instruction: Ecco un nuovo tipo di gioco!<br>Non devi
        modificare niente in questo esercizio.<br>Utilizza le frecce verso sinistra
        e verso destra per muoverti, e la freccia verso l'alto per saltare. Riesci
        a raccogliere tutte le bandierine?
      Course 4 Play Lab Vars 4_instruction: Ora c'è una nuova variabile chiamata `height`
        (<i>altezza</i>) che serve a controllare quanto in alto il cane può arrivare
        con un salto. Modifica il valore a cui viene impostata `height`, in modo che
        il cane possa saltare abbastanza in alto da arrivare a raggiungere tutte le
        bandierine.
      Course 4 Play Lab Vars 5_instruction: Costruiamo un gioco! In primo luogo abbiamo
        bisogno di un punteggio. Imposta il valore iniziale della variabile `points`
        (<i>punteggio</i>) a 10.
      Course 4 Play Lab Vars 6 (copy 1)_instruction: Forte! Abbiamo ora una nostra
        variabile per il punteggio. Ma come possiamo rederla utile?  Che ne dite di
        aggiungere dei punti alla variabile ogni volta che colpite il nemico con una
        palla di fuoco ? Usate l'evento «quando l'attore 2 tocca qualsiasi cosa »
        per aggiornare la variabile quando la palla di fuoco colpisce il gatto. Potete
        incrementare il punteggio impostando score = score + 1. Fate in modo che il
        vostro punteggio arrivi a 10, incrementandolo di 1 alla volta, per risolvere
        l'esercizio.
      Course 4 Play Lab Vars 6_instruction: |-
        Utilizza la freccia verso destra per far lanciare al cane una fetta di torta.<br>
        Come vengono assegnati i punti? <br>
        Bisogna aggiungere 1 alla variabile `points` (<i>punteggio</i>) ogni volta che il cane (personaggio 1) colpisce il gatto (personaggio 2) con una fetta di torta.<br>
        Per ottenere questo risultato, usa l'evento `quando il personaggio 2 tocca una cosa qualunque` così da attivare un aggiornamento del tuo punteggio ogni volta che l'evento accade. Per incrementare il <i>punteggio</i>, `imposta points a points + 1`<br>
        Fai salire il tuo punteggio fino a 10 (un punto alla volta!) per risolvere l'esercizio.
      Course 4 Play Lab Vars 7_instruction: |-
        Bello! Ora facciamo in modo che il gioco non sia troppo facile.<br>
        Modifica il codice in modo da perdere un punto ogni volta che il cane (personaggio 1) viene colpito da un sandwich lanciato dal gatto (personaggio 2).<br>
        Iniziamo con 10 punti così non è troppo difficile. Lascia che il punteggio scenda da 10 fino a 0 per risolvere l'esercizio.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: Bene. Un'ultima cosa per questo
        gioco. Predisponiamolo in modo che il giocatore possa vincere (o perdere).
        Usiamo un blocco "ripeti per sempre" per controllare il valore del punteggio.
        Quando il punteggio diventa maggiore di 20, fai scomparire il nemico. Quando
        il punteggio diventa 0, fai scomparire il giocatore. Clicca su "Termina" quando
        il gioco funziona come volevi tu.
      Course 4 Play Lab Vars 8_instruction: Predisponiamo ora il gioco in modo che
        il cane possa vincere (o perdere). Usiamo un blocco "ripeti per sempre" per
        controllare il valore del punteggio. Quando il punteggio diventa maggiore
        di 20, fai scomparire il nemico (il gatto). Quando il punteggio diventa 0,
        fai scomparire il giocatore (il cane). Clicca su "Termina" quando il gioco
        funziona come volevi tu.
      Course 4 Play Lab Vars 9_instruction: "Tempo di giocare: qui ci sono tutte le
        variabili con cui abbiamo giocato finora, e anche qualcuna in più in caso
        ti serva.<br>\n<b>Attenzione</b>: se vuoi, puoi cambiare nome alle variabili
        esistenti o introdurne di nuove. Clicca sul triangolino con la punta verso
        il basso accanto al nome della variabile.<br>\nOra ci sono così tanti blocchi
        nella cassetta degli attrezzi che li abbiamo organizzati in diverse categorie.
        Prenditi un po' di tempo per esaminare tutto ciò che è a tua disposizione.
        Scorri verso il basso per vedere tutti i comandi nell'area di lavoro.<br>\n<i>Scorri
        verso il basso per vedere tutti i comandi presenti nell'area di lavoro.</i><br>\nQuando
        hai finito la tua esplorazione, prova a creare un gioco oppure una storia
        usando i cicli, le variabili e gli eventi. "
      Course 4 Play Lab Vars_instruction: Bene. Un'ultima cosa per questo gioco. Predisponiamolo
        in modo che il giocatore possa vincere (o perdere). Usiamo un blocco "ripeti
        per sempre" per controllare il valore del punteggio. Quando il punteggio diventa
        maggiore di 20, fai scomparire il nemico. Quando il punteggio diventa 0, fai
        scomparire il giocatore.
      Course 4 Play Labs For Loops 1_instruction: Fai in modo che il cane dica tutti
        i numeri da 1 a 100. Utilizza un <i>ciclo con contatore</i> e il blocco `counter`
        (<i>contatore</i>) per far dire al cane il valore della variabile contatore
        ogni volta che il ciclo viene ripetuto.
      Course 4 Play Labs For Loops 2_instruction: Adesso prova a far dire al gatto
        solo i numeri dispari da 1 a 101.
      Course 4 Play Labs For Loops 3_instruction: Se contiamo con un passo più grande,
        nella stessa quantità di tempo possiamo contare fino ad un numero più grande.
        Prova a far contare il pirata da 10 a 1000, a passi di 10.
      Course 4 Play Labs For Loops 4_instruction: Cambiare il passo può essere utile,
        ma stiamo ancora contando in modo lineare (la distanza tra due valori successivi
        è sempre la stessa). Come potremmo fare se volessimo contare in modo esponenziale?
        Senza cambiare le impostazioni del ciclo con contatore, riesci a contare 1,
        4, 9, 16, 25... (il contatore al quadrato)?
      Course 4 Play Labs For Loops 4a_instruction: Ora, uniamo le variabili da Stage
        7 insieme con la variabile "counter" per far accadere qualche magia.   \r
        \r In questo puzzle, Cane varierà da 0 a 1000, "incrementandosi".  Impostare
        la variabile di "incremento" a 10 all'inizio del codice per vedere cosa succede.
      Course 4 Play Labs For Loops 5_instruction: Nell'ultima fase abbiamo contato
        il quadrato di ogni numero. Prova a cambiare "contatore ^ 2" in "contatore
        ^ 3" per contare il cubo di ogni numero (1, 8, 27, 64, 125, 216, 343….)
      Course 4 Play Labs For Loops 5a_instruction: |-
        In this puzzle, Dog will be your
        time keeper.\r
        \r
        Dog will count from 0 to 30 by "increment".  The "increment"
        variable will begin with a value of 1.\r
        \r
        Can you make it so that each
        time you click Dog, the increment increases by 2?  Click the forward arrow
        to run the for loop.\r
        \r
        Run the loop a couple of times, clicking Dog before
        each one.
      Course 4 Play Labs For Loops 6_instruction: Ricorda che un numero è primo solo
        se è divisbile per 1 e per se stesso. Utilizzare la funzione "is_prime" per
        ottenre solo i numeri primi da 1 a 100.
      Course 4 Play Labs For Loops 6a_instruction: Cane continuerà a contare nel nostro
        "ciclo for" mediante un "incremento", ma questa volta, aggiungeremo la magia
        nel mix.  È possibile modificare il codice affinché "incremento" aumenta di
        due ogni volta che viene selezionato Il Mago? \r \r Attenzione!  Il Mago si
        muove velocemente!
      Course 4 Play Labs For Loops 7_instruction: Potresti usare un ciclo "per" per
        aiutarmi a dire la sequenza 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: Ora stiamo ottenendo qualcosa!  Cosa
        succede se iniziamo a contare quante volte possiamo cliccare il Mago prima
        che Cane arrivi a 30?  \r \r Concludete aggiungendo blocchi alla procedura
        guidata in modo che ogni volta che viene fatto clic sulla variabile "cliccato"
        aumenta di uno. È possibile ignorare "incremento" per ora. \r \r Cane inizia
        il conteggio quando si fa clic su "Esegui".
      Course 4 Play Labs For Loops 8_instruction: Quale ciclo con contatore mi farebbe
        pronunciare la sequenza 19, 27, 35, 43, 51?
      Course 4 Play Labs For Loops 8a_instruction: Per finire la nostra partita, abbiamo
        bisogno di portare indietro la variabile di "incremento"!    Colleghiamola
        al livello di gioco. \r \r 1) Tenere traccia del numero di volte che Il Mago
        è cliccato. \r 2) Se Il Mago viene selezionato almeno 10 volte prima che Cane
        raggiunga 30, aumentare "incremento" di 1 e incominciare da capo. \r 3) Se
        Il Mago non viene cliccato almeno 10 volte, il gioco è finito.
      Course 4 Playlab For Loop Freeplay_instruction: 'Tempo di giocare: usa tutto
        quello che hai imparato finora per creare un gioco che includa un <i>ciclo
        con contatore</i>!'
      Course 4 Playlab For Loops 4b_instruction: |-
        Ognuno di questi due personaggi si sposta ad ogni ripetizione di una distanza pari al valore della variabile  `counter` (<i>contatore</i>) nel proprio <i>ciclo con contatore</i> (`Actor_1_counter` = <i>contatore del personaggio 1</i>). Nei loro cicli i contatori cambiano con un passo differente.<br>
        Puoi modificare il passo di incremento di uno dei <i>cicli con contatore</i> in modo che entrambi i personaggi riescano ad arrivare alla propria bandierina?
      Course 4 Playlab For Loops 5b_instruction: Modifica il passo di questi due <i>cicli
        con contatore</i> in modo che i due personaggi si fermino nello stesso punto.
      Course 4 Playlab For Loops 6b_instruction: "In questo esercizio il <i>ciclo
        con contatore</i> viene usato per realizzare un gioco che diventa via via
        più difficile perché il personaggio rimane visibile per sempre meno tempo!<br>\nModifica
        i valori usati nel <i>ciclo con contatore</i> (e, se vuoi, anche il personaggio)
        per creare il gioco che preferisci! <br>\nPremi \"Esegui\" e clicca più volte
        possibile sul personaggio. Ce la fai a raggiungere il nostro record di 24? "
      Course 4 SCF 1_instruction: |-
        <b>Super Sfida sulle funzioni:</b> Usa le funzioni suggerite per disegnare quattro file di tre esagoni l'una (`draw a line of hexagons` = "disegna una fila di esagoni"). Osserva che le file di numero pari vengono disegnate spostate a destra.<br>
        <b>Nota</b>: `shift down/forward` = "scivola in basso e avanti"; `shift down/backward` = "scivola in basso e indietro".
      Course 4 SCF 1a_instruction: "<b>Super Sfida sulle funzioni:</b> Riesci a capire
        come raccogliere tutto questo nettare con il minor numero possibile di blocchi?"
      Course 4 SCF 1b_instruction: "<b>Super Sfida sulle funzioni:</b> Riesci a capire
        come produrre tutto questo miele?"
      Course 4 SCF 2_instruction: |-
        <b>Super Sfida sulle funzioni:</b> Usa quello che hai imparato nell'esercizio precedente per disegnare un'immagine come quella mostrata in questo esercizio.<br>
        <b>Nota</b>: Il codice diventa più semplice se usi le funzioni con parametri.
      Course 4 SCF 3 Fail 1_instruction: Riesci a capire come...
      Course 4 SCF 3 Fail 2_instruction: Riesci a capire come...
      Course 4 SCF 3_instruction: |-
        <b>Super Sfida sulle funzioni:</b> Usa quello che hai imparato nell'esercizio precedente per disegnare un'immagine come questa.<br>
        <br><i>Nota: Il codice diventa più semplice se usi le funzioni con parametri.</i><br>
        <img src="https://images.code.org/d3d6a51fafdcc0a09a5c6b0e0f3c2b92-image-1446239805818.08.59.png"
        width="300px"/>
      Course 4 SCFL 1_instruction: "<b>Super Sfida sui cicli con contatore:</b> Risolvi
        questo esercizio usando il minor numero possibile di blocchi."
      Course 4 SCFL 1a_instruction: "<b>Super Sfida sui cicli con contatore:</b> Puoi
        far arrivare Scrat alla sua ghianda usando il minor numero possibile di blocchi?"
      Course 4 SCFL 1b_instruction: Clicca qui per vedere i suggerimenti.
      Course 4 SCFL 2_instruction: "<b>Super Sfida sui cicli con contatore:</b> Risolvi
        questo esercizio usando il minor numero di blocchi possibile."
      Course 4 SCFL 3_instruction: |-
        <b>Super Sfida sui cicli con contatore:</b> Riesci a ricreare questo disegno?<br>
        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      Course 4 SCFL 4_instruction: |-
        <b>Super Sfida sui cicli con contatore:</b> Riesci a ricreare questo disegno?<br>
        <img src="https://images.code.org/407f502735beec686187451bdf67aada-image-1446002848700.59.34.png"
        width="350px"/>
      Course 4 SCFL 5_instruction: |-
        <b>Super Sfida sui cicli con contatore:</b> Riesci a ricreare questo disegno?<br>
        <img src="https://images.code.org/724b2efa8aefe863bd0d6491a3f1590f-image-1445563707400.26.50.png"
        width="350px"/>
      Course 4 SCFL 6_instruction: |-
        <b>Super Sfida sui cicli con contatore:</b> Riesci a ricreare questo disegno usando un solo ciclo?<br>
        <img src="https://images.code.org/b0d15d06465d645c5ca533e5da6387b3-image-1446075597132.36.04.png"
        width="350px"/>
      Course 4 SCFL 7_instruction: |-
        <b>Super Sfida sui cicli con contatore:</b> L'artista vuole disegnare qualche onda! Riesci ad aiutarlo ricreando questo disegno?<br>
        <img src="https://images.code.org/fba3423f2e9a405d4d3859de32cdb0f3-image-1446102880655.13.36.png"
        width="350px"/>
      Course 4 SCFP 1_instruction: Crea una funzione con parametri che permetta all'artista
        di saltare all'indietro e in avanti di x pixel e anche su e giù di y pixel
        (con numeri positivi e negativi).
      Course 4 SCV 1_instruction: |-
        <img src="https://images.code.org/7469d6b9aaaae532d864caecb65bd2cc-image-1444706295435.54.39.png"
        width="250px"/><br>
        <b>Super Sfida sulle variabili:</b> ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Questo esercizio è fatto apposta per essere difficile da risolvere! Riesci a lavorarci su fino a capire come si fa?
      Course 4 SCV 2_instruction: |-
        <img src="https://images.code.org/85f0b27009edd86eff78692004b9ed52-image-1444712655590.02.32.png"
        width="250px"/><br>
        <b>Super Sfida sulle variabili:</b> ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Questo esercizio è fatto apposta per essere difficile da risolvere! Riesci a lavorarci su fino a capire come si fa?
      Course 4 SCV 3_instruction: |-
        <b>Super Sfida sulle variabili:</b> ora hai imparato tutto quello che devi sapere per risolvere un esercizio difficile come questo! Il gioco che ti proponiamo di realizzare è complicato. Ce la fai a perseverare fino a trovare la soluzione?<br>
        <hr>
        Questo è un gioco di inseguimenti!  Muovendo il cane, tocca il gatto per ottenere 2 punti e il pinguino per ottenere 3 punti.  Arriva <u>esattamente</u> a 10 punti per vincere! Ma fai attenzione, quando il gatto e il pinguino si toccano, perdi 1 punto.<br>
        <b>
        Aggiungi i blocchi necessari per far funzionare il gioco nel modo in cui è stato spiegato.<br>
        - Come puoi muovere il cane (personaggio 1) in tutte le direzioni utilizzando i tasti freccia?<br>
        - Come puoi aggiungere punti quando il cane tocca il gatto (personaggio 2) o il pinguino (personaggio 3)?<br>
        - Come puoi togliere un punto quando il gatto ed il pinguino si toccano?</b>
      Course 4 SCV 4_instruction: "<b>Super Sfida sulle variabili:</b> risolvi questo
        esercizio con il minore numero possibile di blocchi!"
      Course 4 SCV 5_instruction: "<b>Super Sfida sulle variabili:</b> risolvi questo
        esercizio con il minore numero possibile di blocchi!"
      Course 4 SCV 6_instruction: |-
        <img src="https://images.code.org/499fc71a0a06bacb68a9789ad57f8148-image-1445574373673.16.44.png"
        width="250px"/><br>
        <b>Super Sfida sulle variabili:</b> ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Questo esercizio è fatto apposta per essere difficile da risolvere! Riesci a lavorarci su fino a capire come si fa?
      Course 4 SCVP 1_instruction: Crea una funzione con parametri che permetta all'artista
        di saltare all'indietro e in avanti di x pixel e anche su e giù di y pixel
        (con numeri positivi e negativi).
      Course 4 Variables Assessment_instruction: È possibile creare questa immagine
        utilizzando una variabile per i lati? Ogni latio dovrebbe essere lungo 50
        pixel.
      Course1BeePuzzle12_instruction: Prendi tre dosi di nettare e poi fai due dosi
        di miele
      Course1MazeAssessment1_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig
      Course1MazeAssessment2_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig.
      CourseF_PlayLab_vars1_instruction: "To play this game, you don't have to write\nany
        code, just hit \"Run\"! "
      CourseF_PlayLab_vars10_instruction: |-
        Free Play time! Here are all of the variables
        we've played with so far in this stage, as well as a few more in case you
        want them. \r
        \r
        Notice that there are now so many blocks in our toolbox
        that they need to be organized!  Here, we've put each piece into an appropriate
        category.  Take some time to explore everything that is available. When you're
        done browsing, make a game or story using repeats, variables, and events.  \r
        \r
        Hint:
        scroll down to see all the commands in the workspace.
      CourseF_PlayLab_vars2_instruction: |-
        The race in that last puzzle wasn't very
        fair! Change the `dog_speed` variable to make sure you can collect more flags
        than Cat. The first to collect 10 flags wins!
      CourseF_PlayLab_vars3_instruction: Ecco un nuovo tipo di gioco!<br>Non devi
        modificare niente in questo esercizio.<br>Utilizza le frecce verso sinistra
        e verso destra per muoverti, e la freccia verso l'alto per saltare. Riesci
        a raccogliere tutte le bandierine?
      CourseF_PlayLab_vars4_instruction: Ora c'è una nuova variabile chiamata `height`
        (<i>altezza</i>) che serve a controllare quanto in alto il cane può arrivare
        con un salto. Modifica il valore a cui viene impostata `height`, in modo che
        il cane possa saltare abbastanza in alto da arrivare a raggiungere tutte le
        bandierine.
      CourseF_PlayLab_vars5_instruction: Costruiamo un gioco! In primo luogo abbiamo
        bisogno di un punteggio. Imposta il valore iniziale della variabile `points`
        (<i>punteggio</i>) a 10.
      CourseF_PlayLab_vars6_instruction: |-
        Utilizza la freccia verso destra per far lanciare al cane una fetta di torta.<br>
        Come vengono assegnati i punti? <br>
        Bisogna aggiungere 1 alla variabile `points` (<i>punteggio</i>) ogni volta che il cane (personaggio 1) colpisce il gatto (personaggio 2) con una fetta di torta.<br>
        Per ottenere questo risultato, usa l'evento `quando il personaggio 2 tocca una cosa qualunque` così da attivare un aggiornamento del tuo punteggio ogni volta che l'evento accade. Per incrementare il <i>punteggio</i>, `imposta points a points + 1`<br>
        Fai salire il tuo punteggio fino a 10 (un punto alla volta!) per risolvere l'esercizio.
      CourseF_PlayLab_vars7_instruction: |-
        Utilizza la freccia verso destra per far lanciare al cane una fetta di torta.<br>
        Come vengono assegnati i punti? <br>
        Bisogna aggiungere 1 alla variabile `points` (<i>punteggio</i>) ogni volta che il cane (personaggio 1) colpisce il gatto (personaggio 2) con una fetta di torta.<br>
        Per ottenere questo risultato, usa l'evento `quando il personaggio 2 tocca una cosa qualunque` così da attivare un aggiornamento del tuo punteggio ogni volta che l'evento accade. Per incrementare il <i>punteggio</i>, `imposta points a points + 1`<br>
        Fai salire il tuo punteggio fino a 10 (un punto alla volta!) per risolvere l'esercizio.
      CourseF_PlayLab_vars8_instruction: |-
        Utilizza la freccia verso destra per far lanciare al cane una fetta di torta.<br>
        Come vengono assegnati i punti? <br>
        Bisogna aggiungere 1 alla variabile `points` (<i>punteggio</i>) ogni volta che il cane (personaggio 1) colpisce il gatto (personaggio 2) con una fetta di torta.<br>
        Per ottenere questo risultato, usa l'evento `quando il personaggio 2 tocca una cosa qualunque` così da attivare un aggiornamento del tuo punteggio ogni volta che l'evento accade. Per incrementare il <i>punteggio</i>, `imposta points a points + 1`<br>
        Fai salire il tuo punteggio fino a 10 (un punto alla volta!) per risolvere l'esercizio.
      CourseF_PlayLab_vars9_instruction: |-
        Nice, now let's make sure this game isn't
        too easy to play. Any time Dog (actor 1) gets hit by a sandwich from Cat (actor
        2), you should lose a point. Start with 10 points so it's not too hard. Let
        your score drop down from 10 to 0 to pass the level.
      Crack Random Substitution_instruction: Istruzioni
      Crack a Caesar Cipher_instruction: Istruzioni
      D_Frozen_nested3_instruction: Facciamo ruotare queste forme!
      D_Frozen_nested4_instruction: È tempo di disegnare queste forme!
      D_Frozen_nested5_instruction: Play with the snowflakes!
      D_Frozen_nested6_instruction: |-
        Draw a stair-step pattern that uses turns between
        75 and 105 degrees.
      D_Frozen_nested7_instruction: |-
        Now, turn around 180 degrees and draw the stair
        pattern again!
      D_Frozen_nested8_instruction: Spin that shape around 5 or 6 times in a circle.
      D_Frozen_nested9_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      ECSPD Binary Odometer_instruction: |-
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |-
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |-
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |-
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |-
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |-
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |-
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |-
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |-
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |-
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |-
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |-
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |-
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |-
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |-
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |-
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |-
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |-
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |-
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |-
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |-
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: 'La funzione "ridimensiona" restituisce l''immagine
        in ingresso ingrandita o rimpicciolita di un certo fattore. Prova a ridimensionare
        questo cerchio di un fattore 10: l''immagine che ne risulta quanto è diversa
        dall''immagine che avresti ottenuto disegnando subito un cerchio di quelle
        dimensioni?'
      Eval Contracts 4_instruction: |-
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |-
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |-
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |-
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |-
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. "
      Eval Define Funcs 1_instruction: |-
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |-
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |-
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |-
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |-
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |-
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |-
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |-
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |-
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |-
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |-
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |-
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |-
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |-
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |-
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |-
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |-
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Tempo di giocare: crea qualcosa di artistico col
        codice!'
      Eval Strings Images .1_instruction: |-
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |-
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |-
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |-
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |-
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |-
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |-
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |-
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |-
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |-
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |-
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |-
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Farmer for TTS testing_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      Finalize Your Chaser Game v.1_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      Find the Wizard_instruction: Crea ciò che vuoi. Questo è un esempio del gioco
        "Indovina che numero ho pensato!"
      Find the Wizard_2018_instruction: Costruisci quello che vuoi. Ecco un esempio
        del gioco "Indovina che numero ho pensato!"
      Food Fight!_instruction: |-
        Abbiamo aggiunto al gioco ancora un'altra funzione che puoi usare.<br><br>
        Programma il tuo gioco in modo tale da chiamare la funzione "sali di un livello" (<i>level_up</i>) se la variabile "punteggio" (<i>player_score</i>) diventa maggiore di un certo valore (per esempio: <i>player_score</i> > 6).<br><br>
        Clicca su "Esegui" per giocare e arriva al livello 3 per passare al prossimo esercizio.
      Food Fight_instruction: |-
        Abbiamo aggiunto al gioco ancora un'altra funzione che puoi usare.<br><br>
        Programma il tuo gioco in modo tale da chiamare la funzione "sali di un livello" (<i>level_up</i>) se la variabile "punteggio" (<i>player_score</i>) diventa maggiore di un certo valore (per esempio: <i>player_score</i> > 6).<br><br>
        Clicca su "Esegui" per giocare e arriva al livello 3 per passare al prossimo esercizio.
      FoodFight_instruction: This is an example of a game you can make in play lab.
      FoodFight_2018_instruction: |-
        This is an example of a game you can make in play
        lab.
      Frequency Analysis_instruction: Test
      Function intro Ryan_instruction: Usa due volte la funzione `build bridge` (*costruisci
        ponte*) per creare un sentiero fino alla torcia di pietrarossa.
      GLJ Drag and fall_instruction: |-
        This Corgi has been a good boy! Drag this carrot
        to him as a special treat.
      GLJ Dragity_instruction: |-
        This Corgi has been a good boy! Drag this carrot
        to him as a special treat.
      GLJ Flappy2_instruction: Click to flap - don't touch the ground!
      GLJr_Behavior_1_instruction: |-
        On your worksheet, write what you think the dog
        will do when you click "Run."
      GLJr_Behavior_2_instruction: |-
        Now you have some new blocks! Try them out and
        see how they work. On your worksheet, write down which ones you tried, and
        what they do.
      GLJr_Behavior_5_instruction: |-
        Now we have two sprites! Use behaviors to make
        the dog jittery and make the cat wander
      GLJr_Behavior_6_instruction: |-
        Let's try some more behaviors - make the dog
        run up and make the cat run right.
      GLJr_Forever_1_instruction: |-
        On your worksheet, write what you think the dog
        will do when you click "Run."
      GLJr_Forever_2_instruction: |-
        Now you have some new blocks! Try them out and
        see how they work. On your worksheet, write down which ones you tried, and
        what they do.
      GLJr_Forever_5_instruction: |-
        Now we have two sprites! Use a loop to make the
        dog jittery and make the cat wander
      'Game Lab Workshop: Random_instruction': |-
        Pick a shape block and use calls
        to randomNumber() in place of one or more of the parameters. Maker sure you
        run it a few times so you can see the effect of randomization.
      Geometric Pattern_instruction: 'Idea per un progetto: crea un modello utilizzando
        idee geometriche come forme. Realizzarlo richiede pianificazione e persistenza!'
      Geometric Sun_instruction: 'Idea per un progetto: crea un modello utilizzando
        idee geometriche come forme. Realizzarlo richiede pianificazione e persistenza!'
      Geometric Sun_2018_instruction: 'Idea per un progetto: crea un modello utilizzando
        idee geometriche come forme. Realizzarlo richiede pianificazione e persistenza!'
      Get To The Goal_instruction: Crea ciò che vuoi. Questo è un esempio del gioco
        "Indovina che numero ho pensato!"
      'Grade 4 Example PlayLab Project #1_instruction': |-
        Take a look at this project.  Do
        you see how it was made?
      'Grade 4 Example PlayLab Project #2_instruction': |-
        Take a look at this project.  Do
        you see how it was made?
      Guess The Number 2_instruction: Costruisci quello che vuoi. Ecco un esempio
        del gioco "Indovina che numero ho pensato!"
      Guess The Number_instruction: Costruisci quello che vuoi. Ecco un esempio del
        gioco "Indovina che numero ho pensato!"
      Guess The Number_2018_instruction: Costruisci quello che vuoi. Ecco un esempio
        del gioco "Indovina che numero ho pensato!"
      Harvester Test_instruction: |-
        It's harvest time! But I forgot what crop I planted
        at which tile. Please help me harvest all my crops, no matter how they were
        originally planted!
      Harvesting_instruction: |-
        Uh oh, I lost my map and can't remember what I planted.
        Every sprout could grow up to be corn, beans, or pumpkins. Can you write some
        code to pick all the crops, no matter what they are?
      Infinity_catch_instruction: Riesci a fare in modo che Elsa (il "personaggio
        2") raggiunga Anna usando i tasti freccia?
      Infinity_finale_instruction: Crea il tuo gioco con i personaggi di Disney Infinity
        e condividilo!
      Infinity_move_collide_instruction: Hiro è il "personaggio 1". Spostalo verso
        Baymax e riproduci un suono quando si toccano.
      Infinity_move_directions_instruction: Baymax è il "personaggio 2". Puoi far
        muovere Baymax  aggiungendo i blocchi "sposta il personaggio 2 in alto" e
        "sposta il personaggio 2 in basso". Clicca sul pulsante "Esegui" e fai toccare
        a Baymax gli altri due personaggi usando i tasti freccia.
      Infinity_move_right_instruction: Hiro è il "personaggio 1". Usa il blocco "sposta
        il personaggio 1" per far spostare Hiro verso destra fino a toccare Baymax.
      Infinity_repeat_instruction: Usa un blocco "ripeti per sempre" per far spostare
        Anna in continuazione in su e in giù di 400 pixel.
      Infinity_say_instruction: Fai dire "Ciao" ad Anna usando un blocco "il personaggio
        dice ...".
      Infinity_shoot_instruction: Baymax è il "personaggio 2". Fai lanciare a Baymax
        un razzo contro Hiro.
      Infinity_shoot_directions_instruction: Hiro è il "personaggio 3". Fai in modo
        che Hiro scagli qualcosa contro ognuno degli altri quattro personaggi. Tra
        un lancio e il successivo, aspetta un secondo.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Tocca ancora più fiocchi di neve!
      Infinity_touch_four_instruction: Muovi Anna su, giù, a sinistra e a destra per
        toccare ognuno dei quattro fiocchi di neve.
      Infinity_touch_score_instruction: Fai in modo che Anna segni un punto quando
        tocca un fiocco di neve. Poi clicca su "Esegui" e guidala in modo tale da
        farle toccare ogni fiocco di neve almeno una volta.
      Inspirational Artwork_instruction: |-
        <a href="https://studio.code.org/c/" target="_blank">Clicca qui</a> (LINK DA AGGIORNARE) e poi su "Esegui". Ora hai imparato tutto quello che devi sapere per realizzare un disegno come quello mostrato al precedente link! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.<br><br>
        Vuoi realizzare la figura che ti abbiamo mostrato? Ecco alcuni suggerimenti:<br><br>
      InspirationalArtwork_instruction: |-
        If this picture inspires you, try to make
        something similar. Otherwise, create something all your own.
      InspirationalArtwork_2018_instruction: |-
        If this picture inspires you, try to
        make something similar. Otherwise, create something all your own.
      'Internet Simulator: Broadcast Mode_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: Broadcast_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: Broadcast_2018_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: DNS Mode_instruction': |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_instruction': |-
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_2018_instruction': |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: Packets_instruction': |-
        Develop a Protocol for Reliably
        Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain only 8 characters\r
        -
        Packets may drop with small probability\r
        - Packets may not arrive in order
      'Internet Simulator: Packets_2018_instruction': |-
        Develop a Protocol for Reliably
        Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain only 8 characters\r
        -
        Packets may drop with small probability\r
        - Packets may not arrive in order
      'Internet Simulator: Routers_instruction': |-
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Routers_2018_instruction': |-
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Sending Binary Messages 1_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Binary Messages_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Binary Messages_2018_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Numbers_instruction': |-
        With your partner, develop
        a protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Numbers_2018_instruction': |-
        With your partner,
        develop a protocol or set of rules for communicating a drawing using only
        bits. See the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_instruction': |-
        Work with a partner or in
        a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_2018_instruction': |-
        Work with a partner or
        in a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: Disegna una linea breve verso l'alto
        e una lunga verso destra!
      K-1 Artist Loops 1_instruction: Disegna questa linea spostando 4 volte l'artista
        verso Est.
      K-1 Artist Loops 2_instruction: Riesci adesso a disegnare la linea usando un
        blocco `ripeti` (detto anche <i>ciclo</i>)?
      K-1 Artist Loops 3_instruction: Riesci a ripetere i blocchi già pronti per disegnare
        le 6 linee in grigio?
      K-1 Artist Loops 4_instruction: Un blocco `ripeti`, o <i>ciclo</i>, può aiutarti
        a disegnare la parte superiore di questo castello?
      K-1 Artist Loops 5_instruction: Che cosa puoi ripetere per 4 volte per disegnare
        gli scalini di questo esercizio?
      K-1 Artist Loops 6_instruction: 'Per completare questo disegno hai bisogno di
        due blocchi `ripeti`, o <i>cicli</i>: uno per salire le scale e l''altro per
        scenderle.'
      K-1 Artist Loops 7_instruction: Riesci a completare questa figura usando due
        cicli?
      K-1 Artist Loops 8_instruction: La scala di questo esercizio ha i gradini più
        larghi.
      K-1 Artist Loops 9_instruction: Qual è il modo migliore per disegnare questi
        scalini?
      K-1 Artist Loops Free Play_instruction: 'Tempo di giocare: disegna qualcosa
        di divertente!'
      K-1 Artist1 1_instruction: |-
        Completa il piede della persona disegnando una linea.
        <br><a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-8#VIDEO" target="_blank">Video doppiato in italiano</a>
      K-1 Artist1 10_instruction: Disegna e Salta per costruire la linea tratteggiata
        fino al tesoro.
      K-1 Artist1 2_instruction: Disegna il baffo del gatto con due linee!
      K-1 Artist1 3_instruction: Disegna due linee verso est e due linee verso nord
        per completare la casa!
      K-1 Artist1 4_instruction: Disegna linee in su, in orizzontale, e in basso per
        completare il castello!
      K-1 Artist1 5.5_instruction: Completa la terza torre del castello usando linee
        brevi
      K-1 Artist1 5_instruction: Disegna il gambo di questo fiore con due linee!
      K-1 Artist1 6_instruction: Il blocco `salta` ti consente di muoverti senza disegnare.
        Completa il disegno usando il blocco `salta`!
      K-1 Artist1 7_instruction: Usa il blocco "salta" per muoverti senza disegnare.
        Salta su e disegna una linea.
      K-1 Artist1 8_instruction: Disegna la linea tratteggiata usando sia i blocchi
        "salta" che quelli per disegnare
      K-1 Artist1 9_instruction: Disegna e Salta per costruire la linea tratteggiata.
      K-1 Artist1 Assessment 1_instruction: Disegna le linee corte e quelle lunghe!
      K-1 Artist1 Assessment 2_instruction: Disegna le linee corte tratteggiate!
      K-1 Artist2 1_instruction: Disegna un quadrato sotto il triangolo.
      K-1 Artist2 2_instruction: Salta e disegna un quadrato accanto alla casa.
      K-1 Artist2 3_instruction: Disegna un quadrato sopra l'altro quadrato.
      K-1 Artist2 4_instruction: Disegna un rettangolo per completare il ponte.
      K-1 Artist2 5_instruction: Disegna un rettangolo per completare i pilastri del
        ponte.
      K-1 Artist2 6_instruction: Disegna due quadrati per costruire un rettangolo!
      K-1 Artist2 Assessment1_instruction: Questo è un esercizio di riepilogo -- Salta
        e disegna un quadrato vicino all'altro quadrato.
      K-1 Artist2 Free Draw_instruction: Disegna qualunque cosa tu voglia disegnare!
      K-1 Artist2_7_instruction: Disegna un rettangolo per dare alla cassettiera il
        cassetto superiore!
      K-1 Bee 1_instruction: |-
        Spostami sul fiore, raccogli il nettare, poi fammi arrivare al favo e produci il miele.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-7#VIDEO" target="_blank">Video doppiato in italiano</a>
      K-1 Bee 10_instruction: Prendi quattro dosi di nettare e poi fai due dosi di
        miele!
      K-1 Bee 11.5_instruction: Prendi quattro dosi di nettare per fare quattro dosi
        di miele!
      K-1 Bee 11_instruction: Prendi tre dosi di nettare e poi fai una dose di miele!
      K-1 Bee 12_instruction: Prendi tre dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 13_instruction: Prendi tre dosi di nettare e poi fai una dose di miele!
      K-1 Bee 14_instruction: Questo è un esercizio di riepilogo -- Spostami sul fiore,
        prendi il nettare, poi fammi arrivare al favo e fai il miele.
      K-1 Bee 15_instruction: Questo è un esercizio di riepilogo -- Prendi due dosi
        di nettare e fai due dosi di miele!
      K-1 Bee 2_instruction: |-
        Spostami sul fiore, raccogli il nettare, poi fammi arrivare al favo e produci il miele.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-7#VIDEO" target="_blank">Video doppiato in italiano</a>
      K-1 Bee 3_instruction: |-
        Spostami sul fiore, raccogli il nettare, poi fammi arrivare al favo e produci il miele.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-7#VIDEO" target="_blank">Video doppiato in italiano</a>
      K-1 Bee 4_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 5_instruction: Prendi tre dosi di nettare e poi fai tre dosi di miele!
      K-1 Bee 6_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 7_instruction: Prendi tre dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 8_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee 9_instruction: Prendi due dosi di nettare e poi fai due dosi di miele!
      K-1 Bee Assessment 1_instruction: Prendi il nettare per fare il miele!
      K-1 Bee Assessment 2_instruction: Prendi il nettare per fare il miele!
      K-1 Bee Loops 1_instruction: Prendi il nettare per fare il miele!
      K-1 Bee Loops 10_instruction: Usa i blocchi `ripeti` (detti anche <i>cicli</i>)
        per prendere il nettare, fare il miele e spostarti!
      K-1 Bee Loops 11_instruction: Questo è un esercizio di riepilogo -- Usa i blocchi
        `ripeti`, o <i>cicli</i>, per prendere il nettare e fare il miele!
      K-1 Bee Loops 12_instruction: Questo è un esercizio di riepilogo -- Usa i blocchi
        `ripeti`, o <i>cicli</i>, per prendere il nettare, fare il miele e spostarti!
      K-1 Bee Loops 2_instruction: |-
        Usa un blocco `ripeti` (detto anche <i>ciclo</i>) per muoverti, quindi raccogli il nettare e produci il miele!<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-14#VIDEO" target="_blank">Video doppiato in italiano</a>
      K-1 Bee Loops 3_instruction: Usa i blocchi `ripeti` (detti anche <i>cicli</i>)
        per prendere il nettare e fare il miele!
      K-1 Bee Loops 4_instruction: Usa i blocchi `ripeti` (detti anche <i>cicli</i>)
        per prendere il nettare, fare il miele e spostarti!
      K-1 Bee Loops 5_instruction: Usa i blocchi `ripeti` (detti anche <i>cicli</i>)
        per prendere il nettare e fare il miele!
      K-1 Bee Loops 6_instruction: Usa i blocchi `ripeti` (detti anche <i>cicli</i>)
        per prendere il nettare, fare il miele e spostarti!
      K-1 Bee Loops 7_instruction: Usa i blocchi `ripeti` (detti anche <i>cicli</i>)
        per prendere il nettare e fare il miele!
      K-1 Bee Loops 8_instruction: Usa i blocchi `ripeti` (detti anche <i>cicli</i>)
        per prendere il nettare e fare il miele!
      K-1 Bee Loops 9_instruction: Usa i blocchi `ripeti` (detti anche <i>cicli</i>)
        per prendere il nettare, fare il miele e spostarti!
      K-1 Bee Loops Assessment 1_instruction: Prendi il nettare per fare il miele
        e usa i cicli per spostarti!
      K-1 Bee Loops Assessment 2_instruction: Prendi il nettare per fare il miele
        usando i cicli!
      K-1 Bee Puzzle 12_instruction: Prendi tre dosi di nettare e poi fai due dosi
        di miele
      K-1 Building a Foundation Assessment_instruction: Costruisci una piramide a
        tre livelli, non ci sono altre indicazioni. Gioca un po' con i blocchi finché
        non riesci a costruirla!
      K-1 Maze 10_instruction: Gira intorno alla dinamite (TNT) per farmi prendere
        il maialino!
      K-1 Maze 11_instruction: |-
        Fammi fare il percorso per arrivare a quello sciocco maiale. Evita la dinamite (TNT) o le mie piume salteranno in aria!<br><br>
        <b>Suggerimento</b>: si trova a Sud rispetto a me.
      K-1 Maze 2_instruction: Spostami verso Est per farmi prendere il maialino!
      K-1 Maze 3_instruction: Spostami verso Sud per farmi prendere il maialino!
      K-1 Maze 4_instruction: Spostami verso Nord per farmi prendere il maialino!
      K-1 Maze 5_instruction: Spostami verso Est per farmi prendere il maialino!
      K-1 Maze 6_instruction: Spostami in una direzione e poi in un'altra per farmi
        prendere il maialino!
      K-1 Maze 7_instruction: Spostami in una direzione e poi in un'altra per farmi
        prendere il maialino!
      K-1 Maze 8_instruction: Spostami in una direzione e poi in un'altra per farmi
        prendere il maialino!
      K-1 Maze 9_instruction: Spostami in una direzione e poi in un'altra per farmi
        prendere il maialino!
      K-1 Maze Assessment 1_instruction: Questo è un esercizio di riepilogo -- Fammi
        arrivare al maialino!
      K-1 Maze Assessment 12_instruction: Esercizio di verifica
      K-1 Maze Assessment 13_instruction: Esercizio di verifica
      K-1 Maze Assessment 2_instruction: Questo è un esercizio di riepilogo -- Fammi
        arrivare al maialino!
      K-1 Maze Loops 1_instruction: Fammi arrivare al maialino!
      K-1 Maze Loops 10_instruction: Fammi arrivare al maialino! È più facile, se
        usi il blocco `ripeti`.
      K-1 Maze Loops 11_instruction: Fammi arrivare al maialino! È più facile, se
        usi il blocco `ripeti`.
      K-1 Maze Loops 12_instruction: Fammi arrivare al maialino! È più facile, se
        usi il blocco `ripeti`.
      K-1 Maze Loops 2_instruction: Prova ad usare il nuovo blocco `ripeti` (detto
        anche <i>ciclo</i>) per farmi arrivare al maialino! Esso mi farà "ripetere",
        per il numero di volte che hai impostato, tutte le azioni all'interno del
        blocco.
      K-1 Maze Loops 3_instruction: Fammi arrivare al maialino! Devi usare il blocco
        `ripeti`.
      K-1 Maze Loops 4_instruction: Fammi arrivare al maialino!
      K-1 Maze Loops 5_instruction: Fammi arrivare al maialino! Devi usare il blocco
        `ripeti`.
      K-1 Maze Loops 6_instruction: Fammi arrivare al maialino! Devi usare il blocco
        `ripeti`.
      K-1 Maze Loops 7_instruction: Fammi arrivare al maialino! Devi usare il blocco
        `ripeti`.
      K-1 Maze Loops 8_instruction: Usa il blocco `ripeti` per farmi arrivare al maialino!
      K-1 Maze Loops 9_instruction: Fammi arrivare al maialino!
      K-1 Maze Loops Assessment 1_instruction: Questo è un esercizio di riepilogo
        -- Usa i blocchi `ripeti`, o <i>cicli</i>, per farmi arrivare al maialino!
      K-1 Maze Loops Assessment 2_instruction: Questo è un esercizio di riepilogo
        -- Usa i blocchi `ripeti`, o <i>cicli</i>, per farmi arrivare al maialino!
      K-1 Maze Multi 14_instruction: Esercizio di verifica
      K-1 Maze Multi 15_instruction: Esercizio di verifica
      K-1 Maze Sequence Assessment 1_instruction: Questo è un esercizio di verifica
        -- Spostami in una direzione e poi in un'altra per farmi prendere il maialino!
      K-1 Maze Sequence Assessment 2_instruction: Questo è un esercizio di riepilogo
        -- Spostami in una direzione e poi in un'altra per farmi prendere il maialino!
      K-1 Maze debug Assessment 1_instruction: Questo è un esercizio di riepilogo
        --\r Correggi questo programma riordinando, aggiungendo o cancellando blocchi,
        per farmi arrivare al maialino!
      K-1 artist 1 level 10_instruction: Questo è un esercizio di riepilogo -- Disegna
        la linea tratteggiata usando sia i blocchi `salta` che quelli per disegnare.
      K-1 artist 1 level 9_instruction: Questo è un esercizio di riepilogo -- Disegna
        la figura usando tre linee.
      K-1 maze debug 1_instruction: |-
        Modifica il codice per farmi arrivare al maialino!<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-5#VIDEO" target="_blank">Video doppiato in italiano</a>
      K-1 maze debug 10_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 11_instruction: Questo è un esercizio di riepilogo -- Correggi
        questo programma riordinando, aggiungendo o cancellando blocchi, per farmi
        arrivare al maialino!
      K-1 maze debug 2_instruction: Cerca di capire che cosa manca, quindi aggiungi
        i blocchi necessari per farmi arrivare al maialino!
      K-1 maze debug 3_instruction: Cerca di capire che cosa va eliminato, quindi
        rimuovi i blocchi che non mi fanno arrivare al maialino!
      K-1 maze debug 4_instruction: Esegui questi blocchi di codice e poi correggili!
        Credo che ci sia un errore nel percorso.
      K-1 maze debug 5_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 6_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 7_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 8_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K-1 maze debug 9_instruction: Correggi questo programma riordinando, aggiungendo
        o cancellando blocchi, per farmi arrivare al maialino!
      K2.0 sequence 1_instruction: Modifica il codice per farmi arrivare al maialino!
      K2.0 sequence 10_instruction: |-
        Challenge: Move me around the TNT to get to
        the pig.
      K2.0 sequence 12_instruction: 'Let''s get that pig! '
      K2.0 sequence 2_instruction: Modifica il codice per farmi arrivare al maialino!
      K2.0 sequence 3_instruction: |-
        Something is not quite right. REMOVE a block
        to get me to the pig!
      K2.0 sequence 4_instruction: |-
        Time for a shorter puzzle!  Move one way, then
        another to get me to the pig.
      K2.0 sequence 4a_instruction: Try this puzzle again from the start!
      K2.0 sequence 5_instruction: Spostami in una direzione e poi in un'altra per
        farmi prendere il maialino!
      K2.0 sequence 6_instruction: Cerca di capire che cosa manca, quindi aggiungi
        i blocchi necessari per farmi arrivare al maialino!
      K2.0 sequence 7_instruction: |
        Debug this level by changing a block to get me
        to the pig!
      K2.0 sequence 8_instruction: |-
        Debug this level by adding blocks to get me to
        the pig!
      K2.0 sequence 9_instruction: Gira intorno alla dinamite (TNT) per farmi prendere
        il maialino!
      K2.0 sequence FP_instruction: |-
        Now figure out how to get the pig any way you
        can!
      K2.0 sequence pre_instruction: Gioca con questi blocchi per vedere se riesci
        a farmi arrivare al maiale!
      KIKI GLJ Test Response_instruction: |
        Look carefully at the code below.  What
        do you think the plane will do when you click "Run"?\r
      KTest1_instruction: Can you make me move South once more to get to the pig?
      KTest2_instruction: |-
        Trace the path and lead me to the silly pig. Avoid TNT
        or the feathers will fly!
      Kiki_StarWars_Test_3_instruction: Testo
      Kiki_StarWars_Test_4_instruction: Testo
      Kiki_StarWars_Test_5_instruction: Testo
      Kiki_StarWars_Test_5_Example_instruction: Testo
      LaurelDebugging4Video1_instruction: |-
        Move Laurel around and get as much gold
        as you can!
      Limited Quantity of Blocks Test_instruction: |-
        Get me to the pig by adding only
        one block
      Luigi's Pizza 1_instruction: |-
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |-
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |-
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |-
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |-
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |-
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MC Agent Freeplay_instruction: "**Tempo di giocare:** ora tocca a te! Programma
        l'Agente per farti aiutare ad esplorare questo mondo."
      MC HOC 2016 Level 10_instruction: Ora puoi creare il tuo Minecraft! Inserisci
        le creature nello scenario del gioco e programma le loro azioni. Buon divertimento!
      MC HOC 2016 Level 2-2_instruction: Il pollo è immobile. Per farlo muovere, metti
        i blocchi `vai avanti` e `gira a ...` all'interno del gestore di evento`quando
        viene creato`.
      MC HOC 2016 Level 3_instruction: Perfetto, il pollo si è mosso! Ma si è fermato
        subito. Nei giochi, i polli si muovono senza sosta. Usa il blocco di ripetizione
        (detto anche "ciclo") `per sempre esegui` per far muovere i polli in continuazione.
      MC HOC 2016 Level 4_instruction: È un po' strano vedere i polli muoversi tutti
        allo stesso modo. I giochi utilizzano movimenti casuali per apparire realistici.
        Usa il blocco`gira a caso`per farli muovere in modo casuale.
      MC HOC 2016 Level 5_instruction: Queste mucche si sono smarrite! Conducile verso
        l’erba mettendo il blocco `fai un passo verso ...` all'interno del ciclo `per
        sempre esegui`. Dopo che hai cliccato su "Esegui" non dimenticarti di usare
        le frecce per muovere il tuo personaggio.
      MC HOC 2016 Level 6_instruction: Ora tocca a te creare gli zombie. Usa il blocco
        `crea` per creare tre zombi al calare della notte. Ordina loro di muoversi
        verso di te. Clicca su "Esegui" e sopravvivi fino al mattino.
      MC HOC 2016 Level 8_instruction: Il percorso che conduce alle pecore è ostruito
        da un muro. Per tua fortuna c’è un <i>Creeper</i>. I <i>Creeper</i> esplodono
        quando li tocchi. Fai esplodere il <i>Creeper</i> per abbattere il muro e
        raggiungere la pecora! Attenzione, devi far sì che il <i>Creeper</i> sia accanto
        al muro se vuoi che l'esplosione abbia effetto.
      MC HOC 2016 New Drop_instruction: In Minecraft, le pecore producono lana. Metti
        il blocco `produci` all'interno del blocco`quando utilizzato`, poi clicca
        su "Esegui" ed usa le frecce per avvicinarti alla pecora. Usa la barra spaziatrice
        per produrre un po' di lana.
      MC HOC 2016 New Spawn_instruction: Adesso puoi riempire il mondo di Minecraft
        con quello che vuoi! Nei giochi, "creare" significa inserire qualcosa nello
        scenario. Aggiungi un blocco `crea` sotto il blocco`quando si clicca su "Esegui"`
        per creare qualcosa all’avvio del gioco.
      MC HOC 2016 New Walk_instruction: Esploriamo il nostro mondo! Dopo aver cliccato
        su "Esegui" muoviti con le frecce. Premi la barra spaziatrice o tocca lo schermo
        per usare gli oggetti. Usa la porta per entrare in casa.
      MC HOC 2016 SCORE LEVEL_instruction: In alcuni giochi si segnano i punti. Gioca
        ad acchiapparella con i Golem di Ferro ed usa il blocco `aggiungi 1 al punteggio`
        per ottenere un punto quando li catturi. Arriva a cinque punti per vincere!
      MC HOC 2016 Village Test_instruction: Oh, no! Gli zombie ti hanno intrappolato!
        Programma il Golem di Ferro affinché insegua e attacchi gli zombie!
      MC_2017_Ryan_02_instruction: |-
        Help the player get out by using loops to get
        the Agent to the pressure plate.
      MC_HOC_2017 Agent Test_instruction: Clicca "Esegui" per muovere il giocatore
        verso il quadrato arancione dentro alla casa.
      MC_HOC_2017_01_instruction: Clicca "Esegui" per muovere il giocatore verso il
        quadrato arancione dentro alla casa.
      MC_HOC_2017_01_Cole_instruction: Devi raccogliere tutti gli attrezzi in questo
        viaggio. Muoviti usando le **frecce** e raggiungi la cassa presente sul sentiero
        per vincere.
      MC_HOC_2017_01_Kiki_instruction: Clicca "Esegui" per muovere il giocatore verso
        il quadrato arancione dentro alla casa.
      MC_HOC_2017_01_RETRY_instruction: Scrivi del codice per far arrivare l'Agente
        sulla pedana a pressione, poi premi "Esegui" e usa le frecce per far uscire
        il giocatore dalla casa e raccogliere la cassa.
      MC_HOC_2017_02_instruction: Porta l'Agente sulla pedana a pressione.
      MC_HOC_2017_02_Cole_instruction: Fai arrivare l'Agente sulla pedana a pressione
        in modo che {currentPlayerName} possa raggiungere la mappa.
      MC_HOC_2017_02_Kiki_instruction: Porta l'Agent sulla pedana a pressione, poi
        porta il giocatore sulla casella arancione.
      MC_HOC_2017_02_Will_instruction: Porta l'Agente sulla pedana a pressione.
      MC_HOC_2017_03_Cole_instruction: "{currentPlayerName} prosegue la sua avventura
        e ha bisogno della **bussola** [compass] per prepararsi per il viaggio. Programma
        l'Agente per far aprire il cancello."
      MC_HOC_2017_03_Kiki_instruction: Porta l'Agente sulla pedana a pressione.
      MC_HOC_2017_04_instruction: Modifica il ciclo dell'ultimo rompicapo per aiutare
        l'Agent a creare un sentiero sulla parte più larga di questo fiume.
      MC_HOC_2017_04POINT5_Cole_instruction: Porta l'Agente sulla pedana a pressione.
      MC_HOC_2017_04POINT5_RYAN_instruction: Sei riuscito a passare! Ora aiuta {currentPlayerName}
        a superare sano e salvo il labirinto e a raccogliere l'**ascia** [diamond_axe]
      MC_HOC_2017_04_Cole_instruction: 'L''Agente può muoversi sull''acqua! Usa un
        ciclo `ripeti ... volte` per risolvere questo esercizio e aiuta {currentPlayerName}
        a raggiungere il **secchio** [bucket_empty] oltre la porta. '
      MC_HOC_2017_04_Kiki_instruction: Porta l'Agente sulla pedana a pressione.
      MC_HOC_2017_05_instruction: Usa una funzione per aiutare l'Agent a raggiungere
        la pedana a pressione.
      MC_HOC_2017_05_Cole_instruction: Oh no, non c'è più il ponte! Programma l'Agente
        per ricostruire il ponte usando il blocco `metti assi di quercia` in modo
        che {currentPlayerName} possa raggiungere la **pala** [diamond_shovel].
      MC_HOC_2017_05_Josh_instruction: Oh no, non c'è più il ponte! Programma l'Agente
        per ricostruire il ponte usando il blocco `metti assi di quercia` in modo
        che {currentPlayerName} possa raggiungere la **pala** [diamond_shovel].
      MC_HOC_2017_05_Kiki_instruction: Porta il giocatore alla casella arancione.
      MC_HOC_2017_06_Cole_instruction: Un altro fiume, ma questo è molto più largo!
        Correggi questo codice per aiutare l'Agente a costruire un ponte in modo che
        {currentPlayerName} possa raggiungere la **piccozza** [diamond_pickaxe].
      MC_HOC_2017_06_Josh_instruction: Correggi il codice per aiutare l'Agent a costruire
        un ponte su questo fiume.
      MC_HOC_2017_06_Kiki_instruction: Correggi il codice per aiutare l'Agent a costruire
        un ponte su questo fiume.
      MC_HOC_2017_07_Cole_instruction: 'C''è del ghiaccio che blocca il percorso!
        La funzione `clear path` (*libera il passaggio*) può aiutarti a rimuovere
        il ghiaccio e far arrivare {currentPlayerName} fino al vagonetto [minecart_normal]! '
      MC_HOC_2017_07_Kiki_instruction: Usa una funzione per liberare il sentiero fino
        alla casella arancione.
      MC_HOC_2017_07a_Kiki_instruction: Libera il sentiero fino alla casella arancione.
      MC_HOC_2017_08_Cole_instruction: Modifica la funzione fornita in modo che funzioni
        per questo bioma.
      MC_HOC_2017_08_Kiki_instruction: Modifica la funzione in modo che funzioni per
        questo rompicapo.
      MC_HOC_2017_08_RY_instruction: Usa le funzioni per superare la lava.
      MC_HOC_2017_08_Will_instruction: Usa le funzioni per superare la lava.
      MC_HOC_2017_09_Cole_instruction: Programma l'Agent per fargli liberare il sentiero
        del giocatore.
      MC_HOC_2017_09_Kiki_instruction: Programma l'Agent per fargli liberare il sentiero
        del giocatore e raggiungere la pedana a pressione.
      MC_HOC_2017_10_Cole_instruction: Crea una funzione che ti aiuti a terminare
        questo vagonetto.
      MC_HOC_2017_10_Cole_old_instruction: Crea una funzione che ti aiuti a terminare
        questo vagonetto.
      MC_HOC_2017_10_Kiki_instruction: Crea una funzione che ti aiuti a terminare
        questo vagonetto.
      MC_HOC_2017_10_RETRY_instruction: Riesci a trovare la differenza tra le due
        funzioni nell'area di lavoro? `fix short path` = *prepara un percorso breve*
        `fix long path` = *prepara un percorso lungo* Usa queste funzioni insieme
        ad altri blocchi presi dalla cassetta degli attrezzi per liberare il passaggio
        per il vagonetto, poi raccogli **Pietra focaia e acciarino**  [flint_and_steel].
      MC_HOC_2017_10_RYAN_instruction: Crea una funzione che ti aiuti a terminare
        questo vagonetto.
      MC_HOC_2017_10_RYAN2_instruction: Crea una funzione che ti aiuti a terminare
        questo vagonetto.
      MC_HOC_2017_13_Cole_instruction: "**Tempo di giocare:** ora tocca a te! Programma
        l'Agente per farti aiutare ad esplorare questo mondo."
      MC_HOC_2017_4.5v2_instruction: Porta l'Agente sulla pedana a pressione.
      MC_HOC_2017_Ali_instruction: 'Guarda queste funzioni.  Come puoi usarle per
        evitare i Ghast e aiutare {currentPlayerName} a raggiungere sano e salvo il
        **Libro incantato** [book_enchanted]? `build short bridge` = *costruisci un
        ponte corto* `build long bridge` = *costruisci un ponte lungo* '
      MC_HOC_2017_FP10x10_instruction: "**Gioco:** sei pronto a sfidare te stesso
        e a raccogliere tutti i diamanti presenti in questo livello? "
      MC_HOC_2017_FP10x10_RE_instruction: "**Gioco:** sei pronto a sfidare te stesso
        e a raccogliere tutti i diamanti presenti in questo livello? "
      MC_HOC_2017_FP20x20_instruction: "**Tempo di giocare:** ora tocca a te! Programma
        l'Agente per farti aiutare ad esplorare questo mondo."
      MC_HOC_2017_Ryan_03_instruction: Ora usa i cicli per aiutare l'Agent a costruire
        un ponte sul fiume posizionando dei blocchi nell'acqua.
      MC_HOC_2017_Ryan_05_instruction: Distruggi questi cactus in modo che il giocatore
        possa raggiungere l'obiettivo.
      MC_HOC_Kiki_02_instruction: Porta l'Agent sulla pedana a pressione.
      MSM Big Game Empty_instruction: |-
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |-
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |-
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |-
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |-
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |-
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |-
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |-
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |-
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |-
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |-
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |-
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |-
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |-
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |-
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      Middle School Hackathon Pt 1_instruction: "(Click to see full instructions)"
      Middle School Hackathon Pt 2_instruction: "(Click to see full instructions)"
      Mike Pair Programming_instruction: Here are the instructions
      Mike Test Bee Conditionals 1_instruction: |-
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      Mike Test Bee Conditionals 2_instruction: |-
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      MikeAssessment1_instruction: Now do it right!
      MikeStar_instruction: Draw this.
      MikeStarHard_instruction: Draw this.
      MikeStarNested_instruction: Draw this.
      MikeTest1_instruction: Who knows what you should do?!?!
      MikeTest2_instruction: Draw something!
      MikeTest3_instruction: Build Something
      NEW Course 4 Artist Functions 1_instruction: Riesci a disegnare un quadrato
        con i lati di 100 pixel, usando un ciclo `ripeti ... volte`?
      NEW Course 4 Artist Functions 10.1_instruction: "Utilizzate le funzioni i puzzle
        precedente \nper disegnare questo modello."
      NEW Course 4 Artist Functions 10_instruction: Clicca su "modifica" per inserire
        i blocchi nella definizione della funzione per disegnare un quadrato di 40
        pixel.
      NEW Course 4 Artist Functions 11_instruction: |-
        Ora vogliamo creare una nuova funzione chiamata `draw a line of squares` (<i>disegna una fila di quadrati</i>) che disegna 6 quadrati uno di seguito all'altro. Riesci a costruire questa funzione usando la funzione `draw a square 20` (<i>disegna un quadrato di lato 20</i>) che trovi già pronta?<br>
        Nota che adesso la penna disegna con un tratto più sottile. Clicca su "modifica" nella funzione `draw a square 20`per capire come si fa!
      NEW Course 4 Artist Functions 12_instruction: Utilizza la funzione `draw a line
        of squares` (<i>disegna una fila di quadrati</i>) del precedente esercizio
        per disegnare questa figura.
      NEW Course 4 Artist Functions 13_instruction: |-
        Riesci a disegnare una stella usando la funzione `draw a line of squares` (<i>disegna una fila di quadrati</i>)?<br>
        Attenzione: ad ogni ripetizione, dovresti spostarti avanti di 60 pixel e ruotare di 144 gradi.
      NEW Course 4 Artist Functions 14_instruction: 'Tempo di giocare: disegna qualunque
        cosa ti piaccia. '
      NEW Course 4 Artist Functions 2_instruction: Sai disegnare tre quadrati a distanza
        di 20 pixel l'uno dall'altro? Ogni quadrato ha il lato di 100 pixel.
      NEW Course 4 Artist Functions 3_instruction: |-
        Quello in verde è un nuovo tipo di blocco. Si chiama <i>funzione</i>. Clicca su "modifica" per inserire in questo blocco <i>funzione</i> il codice per disegnare un quadrato con i lati di 100 pixel. Se vuoi, cambia anche il nome (`draw a square` significa <i>disegna un quadrato</i>) e scrivi una descrizione di cosa fa.<br>
        Quando hai finito di modificare la funzione clicca su "Chiudi" per tornare al programma. Adesso puoi usare la <i>funzione</i> come un qualunque altro blocco.
        <br><a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-12#VIDEO" target="_blank">Video doppiato in italiano</a> (solo la seconda parte)
      NEW Course 4 Artist Functions 4_instruction: Usa la funzione `draw a square`
        (<i>disegna un quadrato</i>) per disegnare questa figura.
      NEW Course 4 Artist Functions 5_instruction: Come sapeva il blocco "disegna
        un quadrato" quali comandi per eseguire? Clicca su "modifica" del blocco della
        funzione "disegna un quadrato". I diversi blocchi della funzione definiscono
        come "disegnare un quadrato". Quando hai finito, fai clic su "Salva e Chiudi"
        e poi su "Esegui".
      NEW Course 4 Artist Functions 6_instruction: 'Utilizzando il blocco funzione
        "disegna un quadrato", potete disegnare questa immagine? Suggerimento: ogni
        quadrato è separato di 20 pixel.\r

'
      NEW Course 4 Artist Functions 7_instruction: |-
        Stai imparando ad usare i blocchi funzione? Prova a modificare la funzione `draw a square` (<i>disegna un quadrato</i>) in modo che disegni un quadrato con i lati di 200 pixel.<br>
        <br>
        <b>Suggerimento</b>: clicca su "modifica" per cambiare il codice della funzione. Se vuoi, puoi cambiare anche il nome e la descrizione della funzione. Alla fine, clicca su "Chiudi" per salvare le modifiche.
      NEW Course 4 Artist Functions 8_instruction: |-
        Abbiamo inserito una nuova funzione chiamata `draw a triangle` (<i>disegna un triangolo</i>) ma non c'è ancora il codice. Riesci a modificare la definizione della funzione per disegnare un triangolo con i lati di 100 pixel?<br>
        <br><b>Suggerimento</b>: clicca su "modifica" ed inserisci il codice necessario all'interno del blocco `draw a triangle` (<i>disegna un triangolo</i>). Se vuoi, puoi cambiare anche il nome e la descrizione della funzione. Clicca su "Chiudi" per salvare le modifiche.
      NEW Course 4 Artist Functions 9_instruction: Riesci a risolvere questo esercizio
        aggiungendo un solo blocco?
      NEW Course 4 Artist Functions inspire_instruction: "Tempo di giocare: guarda
        la figura che trovi al link https://studio.code.org/c/110671172. Ora hai imparato
        tutto quello che devi sapere per realizzare un disegno come questo! Se questa
        immagine ti ispira, prova a realizzare qualcosa di simile. In caso contrario,
        crea qualcosa di tuo. \\r\n\nVuoi realizzare la figura che ti abbiamo suggerito?
        Ecco alcuni aiuti:\n\nSuggerimento 1: usa un ciclo con contatore, quindi usa
        la sua variabile contatore all'interno di un ciclo annidato.\n\nSuggerimento
        2: ad ogni iterazione, dovresti disegnare un quadrato e fare un salto in avanti.
        \n\nSuggerimento 3: dovresti girare a sinistra di 90 gradi all'esterno del
        ciclo annidato, ma ancora all'interno del ciclo con contatore.\n\n\\r\nVuoi
        sapere come è stato realizzata la figura che ti abbiamo suggerito? Visita
        il link https://studio.code.org/c/110671172/edit per scoprirlo.\n\nCosa succede
        se disegni i quadrati un po' più piccoli o un po' più grandi? E cosa succede
        se invece di girare a sinistra giri a destra?"
      NEW Course 4 Artist Params 1_instruction: |-
        Riesci a definire il codice per la funzione `draw a square` (<i>disegna un quadrato</i>) in modo che disegni un quadrato con i lati di 50 pixel?<br>
        <br>
        Fai clic su "modifica" per iniziare. Se vuoi, puoi cambiare anche il nome e la descrizione della funzione.
      NEW Course 4 Artist Params 10_instruction: Crea un blocco funzione `draw a hexagon`
        (<i>disegna un esagono</i>) con un parametro per la lunghezza dei lati e poi
        disegna un esagono con i lati di 100 pixel.
      NEW Course 4 Artist Params 11_instruction: Riesci a capire come disegnare questa
        figura? Modifica la funzione `draw a polygon` (<i>disegna un poligono</i>)
        per utilizzare il parametro `lenght` (<i>lati</i>).
      NEW Course 4 Artist Params 12_instruction: Riesci a completare questo disegno?
        I lati di tutte le figure sono lunghi 100 pixel.
      NEW Course 4 Artist Params 12a_instruction: Questo disegno è simile a quello
        del precedente esercizio. Riesci ad utilizzare un ciclo `ripeti con counter`
        insieme alla funzione `draw a polygon` (<i>disegna un poligono</i>) in modo
        da riprodurlo?
      NEW Course 4 Artist Params 13_instruction: In questo esercizio devi modificare
        la funzione `draw a polygon` (<i>disegna un poligono</i>). Ha già un parametro
        `sides` (<i>lati</i>) per disegnare un poligono con un numero di lati ogni
        volta diverso. Adesso aggiungi un parametro `length` (<i>lunghezza</i>) e
        modifica la funzione così da farle disegnare un poligono che abbia un perimetro
        sempre della stessa lunghezza indipendentemente dal numero di lati. Il perimetro
        di ogni poligono è lungo 200 pixel. Ti ricordi quale equazione ti consente
        di ottenere figure di uguale perimetro in base al numero di lati?
      NEW Course 4 Artist Params 14_instruction: |-
        Modifica la funzione `draw a spiral edge` (<i>disegna una spirale</i>) per aggiungere i parametri `length` (<i>lunghezza</i>) e `sides` (<i>lati</i>) di cui hai bisogno per ricreare queste figure. Tieni presente che:<br>
        <br>
        - il lato più corto della spirale quadrata è lungo 5 pixel,<br>
        - il lato più corto della spirale triangolare è lungo 10 pixel,<br>
        - il lato più corto della spirale esagonale è lungo 2 pixel,<br>
        - il lato più lungo per tutte le spirali è 100 pixel.
      NEW Course 4 Artist Params 15_instruction: "Tempo di giocare: qui ci sono tutte
        le funzioni che hai scritto e anche qualcuna in più con cui puoi giocare:
        `draw a pinwheel` (<i>disegna una girandola</i>), `draw a shape` (<i>disegna
        un poligono</i>). Disegna qualcosa di incredibile! \nProva a cambiare lo spessore
        della penna per vedere come cambiano i tuoi disegni!"
      NEW Course 4 Artist Params 2_instruction: |-
        Crea da zero la funzione `draw triangle` (<i>disegna un triangolo</i>) che disegna un triangolo con lati di 50 pixel.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-14#VIDEO" target="_blank">Video doppiato in italiano</a>
      NEW Course 4 Artist Params 3_instruction: |
        Ora usa la funzione che hai creato nel precedente esercizio (`draw a triangle`, <i>disegna un triangolo</i>) per disegnare 5 triangoli di seguito.<br>
        <br>
        Ogni triangolo dista 30 pixel dal precedente.
      NEW Course 4 Artist Params 4_instruction: |-
        Cosa c'è di diverso in questi blocchi funzione? Clicca su "Esegui" per vedere cosa succede.<br>
        <br>
        <b>Nota</b>: `draw a triangle with length` = <i>disegna un triangolo con lunghezza</i>.
      NEW Course 4 Artist Params 5_instruction: "La funzione `draw a pentagon` (<i>disegna
        un pentagono</i>) contiene il codice per disegnare un pentagono con i lati
        di lunghezza stabilita dal valore assegnato a `length` (<i>lunghezza</i>).<br>\n<br>\nInserisci,
        al posto di `???` nel blocco accanto a `length`, il valore da assegnare per
        disegnare un pentagono con i lati di 100 pixel. "
      NEW Course 4 Artist Params 6_instruction: Assegna i valori che il parametro
        `length` (<i>lunghezza</i>) deve assumere per disegnare (<i>draw</i>) queste
        figure, sostituendo ai diversi `???` i numeri corretti. Il quadrato (<i>square</i>)
        e il triangolo (<i>triangle</i>) hanno i lati di 100 pixel, mentre l'esagono
        (<i>hexagon</i>) ha i lati di 75 pixel.
      NEW Course 4 Artist Params 7_instruction: |-
        Riesci a completare questo disegno?<br><br>
        Ogni triangolo ha i lati di 25 pixel più lunghi rispetto al precedente. Il primo triangolo ha i lati di 25 pixel.
      NEW Course 4 Artist Params 8_instruction: |-
        In questo esercizio il codice della funzione `draw a triangle with length` (<i>disegna un triangolo con lunghezza</i>) non è corretto.<br>
        Riesci a modificarlo per risolvere il problema e quindi disegnare dei triangoli con i lati di lunghezza pari a 25, 50 e 75 pixel?<br>
        <b>Nota</b>: riesci a capire come modificare ulteriormente la funzione per risolvere l'esercizio con soli 16 blocchi in totale?
        <br><a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-14#VIDEO" target="_blank">Video doppiato in italiano</a>
      NEW Course 4 Artist Params 9_instruction: |-
        Clicca su "modifica" per completare la definizione della funzione `draw a square` (<i>disegna un quadrato</i>) ed aggiungere un parametro alla sua definizione. Come per il triangolo, il parametro da aggiungere rappresenta la lunghezza dei lati: puoi dargli il nome che preferisci (devi cliccare sul triangolino con la punta verso il basso) e puoi cambiare anche il nome della funzione.<br>
        <br>
        Poi usa la funzione così definita per disegnare 3 quadrati con i lati di 25, 50 e 75 pixel: in ognuno di essi l'angolo in basso a sinistra è a distanza di 100 pixel da quello del precedente.<br>
        <br>
        <b>Nota</b>: riesci a capire come modificare ulteriormente la funzione per risolvere l'esercizio con soli 15 blocchi in totale?
      NEW Course 4 Artist Params inspire_instruction: |-
        <img src="https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png"
        width="250px"/><br>
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.
      NEW Course 4 Artist Vars 1.5_instruction: 'Date un''occhiata al codice. Potete
        vedere come il blocco "imposta lunghezza" e il blocco "lunghezza" lavorano
        insieme? Clicca su "Esegui" per vederlo in azione. '
      NEW Course 4 Artist Vars 12_instruction: Riutilizza adesso l'algoritmo dell'esercizio
        precedente e scrivi il codice per disegnare un pentagono con i lati lunghi
        150 pixel.
      NEW Course 4 Artist Vars 2.5_instruction: 'Date un''occhiata al codice. Potete
        vedere come il blocco "imposta lunghezza" e il blocco "lunghezza" lavorano
        insieme? Clicca su "Esegui" per vederlo in azione. '
      NEW Course 4 Artist Vars 2_instruction: Inserisci il blocco numerico `???` nei
        blocchi `imposta length a` (<i>imposta lunghezza a</i>) e `ripeti ... volte`
        e scrivi al posto dei punti interrogativi i valori necessari per disegnare
        questo insieme di triangoli equilateri aventi i lati lunghi 50 pixel.
      NEW Course 4 Artist Vars 4 5_instruction: Lavoro impressionante sull'ultimo
        puzzle, proviamo di nuovo facendo stavolta questo fenomenale disegno utilizzando
        esagoni di 60 pixel.
      NEW Course 4 Artist Vars 4_instruction: |-
        Proviamo di nuovo. <br>
        <br>
        Puoi impostare il valore della variabile `length` (<i>lunghezza</i>) a 60, così da disegnare questa accattivante figura con esagoni?
      NEW Course 4 Artist Vars 6_instruction: |-
        Questa figura è formata da pentagoni con il lato da 100 pixel. Riesci a disegnarla mettendo la variabile `length` (<i>lunghezza</i>) nei posti corretti ed impostandone il giusto valore? <br>
        <br>
        Hai notato che è sufficiente impostare il valore di `length` (<i>lunghezza</i>) una sola volta e il codice utilizza il valore giusto dappertutto?
      NEW Course 4 Bee For Loops 1_instruction: Usa un blocco `ripeti ... volte` (detto
        anche ciclo) per raccogliere il nettare da ogni fiore.
      NEW Course 4 Bee For Loops 10_instruction: Usa la variabile "contatore" del
        ciclo per controllare lo spostamento in senso orizzontale.
      NEW Course 4 Bee For Loops 10a_instruction: 'Pronto per una sfida? Dovrai usare
        tutto quello che hai imparato sui cicli per risolvere questo problema. Ricordati:
        molto probabilmente avrai bisogno di più tentativi prima di riuscire a capire
        tutti i passaggi necessari.'
      NEW Course 4 Bee For Loops 11_instruction: È possibile utilizzare la variabile
        del ciclo per controllare il movimento e la raccolta di nettare?
      NEW Course 4 Bee For Loops 2_instruction: Aggiungi il codice necessario per
        esser sicuro che l'ape raccolga tutto il nettare. Osserva di quanto codice
        hai bisogno per risolvere questo esercizio! (Vedremo una soluzione più semplice
        nel prossimo esercizio.)
      NEW Course 4 Bee For Loops 3_instruction: |-
        Ecco, il blocco `ripeti con counter` (counter = <i>contatore</i>), detto anche <i>ciclo con contatore</i>, rende tutto molto più semplice! Questo è tutto il codice di cui hai bisogno: osserva bene come sono combinati i blocchi e poi clicca su "Esegui" per vedere come funziona. Puoi anche cliccare su "Fai un passo" per osservare l'esecuzione del codice un passo per volta.
        <br><a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-9#VIDEO" target="_blank">Video doppiato in italiano</a>
      NEW Course 4 Bee For Loops 4 4_instruction: Ora bisogna spostarsi in avanti
        di `counter` (<i>contatore</i>) volte, e poi raccogliere il nettare `counter`
        volte. Riesci a svolgere questo compito usando due cicli?
      NEW Course 4 Bee For Loops 4_instruction: 'Nel blocco `ripeti con counter` (counter=<i>contatore</i>),
        detto anche <i>ciclo con contatore</i>, scrivi al posto di `???` la massima
        quantità di nettare che l''ape deve raccogliere. '
      NEW Course 4 Bee For Loops 5 5_instruction: Stai cominciando a capire come si
        usa il ciclo ripeti (for loop) con contatore? Aiuta l'ape a prendere tutto
        il nettare.
      NEW Course 4 Bee For Loops 5_instruction: Puoi usare un <i>ciclo con contatore</i>
        anche per contare all'indietro. In questo esercizio, prova a raccogliere il
        nettare contando all'indietro da 5 ad 1 a passi di 1.
      NEW Course 4 Bee For Loops 6_instruction: Il valore più a destra nel ciclo con
        contatore viene chiamato <i>passo</i>. Ogni volta che il ciclo viene eseguito,
        la variabile `counter` (<i>contatore</i>) cambia del valore indicato dal <i>passo</i>.
        Prova a raccogliere il nettare da questi fiori usando un passo di 2.
      NEW Course 4 Bee For Loops 7_instruction: |-
        Cosa devi fare in questo esercizio per raccogliere 3, 6, 9, 12, 15 dosi di nettare mentre ti sposti nel giardino? Il segreto è nella variabile `counter` (<i>contatore</i>)! Combina la variabile `counter` e un blocco matematico per spostarti e contemporaneamente raccogliere la giusta quantità di nettare.<br>
        Ricordati che se il ciclo deve contare "a crescere" il valore del passo deve corrispondere ad un incremento (quindi un numero positivo).
      NEW Course 4 Bee For Loops 8_instruction: Questo codice è da completare! Quale
        deve essere il <i>passo</i> in questo ciclo con contatore per raccogliere
        3, 6, 9, 12, 15 dosi di nettare?
      NEW Course 4 Bee For Loops 9_instruction: Se il <i>ciclo con contatore</i> deve
        contare all'indietro, ad ogni ripetizione il valore del <i>passo</i> deve
        far diminuire il valore del contatore. Quale deve essere quindi il valore
        del <i>passo</i> per raccogliere prima 15, poi 12, poi 9, 6 e 3 dosi di nettare?
      NEW Course 4 Bee For Loops 95_instruction: Date un'occhiata a ogni parre del
        ciclo for che hai appena creato.  Puoi capire quali numeri si devono raddoppiare
        per risolvere questo puzzle? Perché funziona?
      NEW Course 4 Play Lab Params 11_instruction: 'Tempo di giocare: divertiti a
        creare il gioco che preferisci. Ecco <a href="http://programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-15"
        target="_blank">alcune idee</a>. Puoi usare tutti i blocchi che trovi nella
        cassetta degli attrezzi.'
      NEW Course 4 Play Lab Params 5 5_instruction: Proviamo di nuovo, ma con meno
        aiuti. Cosa devi modificare questa volta per far fare la ricognizione ai personaggi?
      NEW Course 4 Play Lab Vars 4 5_instruction: Cosa pensi che faccia questo codice?
        Premi "Esegui" per vedere cosa succede.
      NEW Course 4 Play Labs For Loops 7a_instruction: Utilizzando quello che hai
        imparato finora, si può fare in modo che il dinosauro faccia un passo in avanti
        ogni volta che il pinguino conta?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: 'È tempo di giocare.
        Divertiti con tutti i blocchi della cassetta degli attrezzi. '
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Sfida. Come useresti il ciclo
        for per fare in kodo che ogni ogni attore vada in giro e dica il che gli corrisponde
        per poi sparire dallo schermo? '
      NetSim Standalone Automatic DNS_instruction: |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |-
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |-
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |-
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |-
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? "
      NetSim_AddressingMessages_instruction: |-
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |-
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |-
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |-
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |-
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |-
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendNumbers_instruction: |-
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_SendingABTest_instruction: |-
        This is Sarah's test of making a netsim
        level
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |-
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |-
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |-
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: Disegna ciò che vuoi! Il tuo codice viene salvato
        come progetto su cui puoi tornare a lavorare in qualunque momento.
      New Basketball Project_instruction: Crea il tuo gioco di basket. Puoi modificare
        tutte le regole. Quando hai finito, clicca su `Termina` per consentire agli
        amici di provare il tuo gioco sui loro telefoni.
      New Bounce Project_instruction: |-
        Create your own Bounce game. You can change
        all the visuals and the rules. When you're done, click Finish to let friends
        try your game on their phones.
      New Course 4 Artist Functions Level 4_instruction: Utilizzate la funzione "disegna
        un quadrato" per disegnare questo modello.
      New Gumball Project_instruction: Crea il tuo gioco con i personaggi di Disney
        Infinity e condividilo!
      New Ice Age Project_instruction: Crea il tuo gioco con i personaggi di Disney
        Infinity e condividilo!
      New Infinity Project_instruction: Crea il tuo gioco con i personaggi di Disney
        Infinity e condividilo!
      New Minecraft Hero Project_instruction: |-
        **Freeplay:**  Time to explore on
        your own!
      New Sports Project_instruction: |-
        Create your own game! You're in charge here:
        you can change all the rules, mix and match sports, get creative! When you're
        done, click Finish to let friends try your game on their phones.
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |-
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |-
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 JoL 1_instruction: Programma l'artista per disegnare la faccia della
        tua zucca per Halloween!
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: Dai al fantasma degli occhi, usando la funzione
        "disegna un cerchio".
      October15 pumpkin 1_instruction: |-
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: Usa i cicli e il blocco "intero scelto a caso
        ..." per riempire la notte di stelle di varie forme e dimensioni.
      Overworld Avoid Monsters_instruction: Incontrare un Creeper non è una buona
        idea. Muoviti con attenzione tra i Creeper e mettiti al sicuro a casa tua.
      Overworld Avoid Monsters_2018_instruction: |-
        Running into a Creeper is a bad
        idea. Carefully move past the Creepers and reach the safety of your home.
      Overworld Chop Tree - allthethings_instruction: |-
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the “destroy block”
        command to chop it down.
      Overworld Chop Tree_instruction: 'Il legno è una risorsa molto importante: serve
        per costruire molte cose. Raggiungi l''albero e usa l''istruzione `distruggi`
        per abbatterlo.'
      Overworld Chop Tree_2018_instruction: |-
        Wood is a very important resource. Many
        things are made from it. Walk to the tree and use the “destroy block” command
        to chop it down.
      Overworld Chop Trees_instruction: 'Devi costruire una casa prima che il sole
        tramonti: ti serve molta legna. Abbatti tutti e tre gli alberi.'
      Overworld Chop Trees_2018_instruction: |-
        We need to build a house before the
        sun goes down. Houses require a lot of wood. Cut down all 3 trees.
      Overworld Free Play 20x20_instruction: Complimenti! Hai completato tutti gli
        esercizi! Ora estrai e costruisci quello che vuoi, creando qualcosa di unico.
        Usa tutto ciò che hai imparato finora.
      Overworld Free Play 20x20_2018_instruction: Complimenti! Hai completato tutti
        gli esercizi! Ora estrai e costruisci quello che vuoi, creando qualcosa di
        unico. Usa tutto ciò che hai imparato finora.
      Overworld House Frame Chosen_instruction: Costruisci il resto della casa con
        qualunque materiale ti piace. Devi usare più volte il blocco `ripeti ... volte`.
      Overworld House Frame Chosen_2018_instruction: |-
        Build the rest of your house
        from any material you'd like. The "repeat" command will come in handy.
      Overworld Move to Sheep_instruction: Aggiungi un secondo blocco `vai avanti`
        per raggiungere la pecora.
      Overworld Move to Sheep_2018_instruction: |-
        Add a second `move forward` block
        to reach the sheep.
      Overworld Place Wall_instruction: Per costruire una casa devi iniziare con le
        mura. Costruisci la prima parte della tua casa mettendo le istruzioni `metti
        assi di ...` e `vai avanti` all'interno di un ciclo `ripeti … volte`.
      Overworld Place Wall_2018_instruction: |-
        Every house starts with a wall. Build
        the first part of your house by putting the "place" and "move forward"
        commands inside the repeat loop.
      Overworld Plant Crops_instruction: È bene pensare al futuro. Semina del grano
        su entrambi i lati dell'acqua così avrai di che sfamarti.
      Overworld Plant Crops_2018_instruction: |-
        It’s good to plan ahead. Plant crops
        on both sides of the water so you don’t get hungry later on.
      Overworld Powered Minecart_instruction: 'Ottimo lavoro! Hai raccolto un sacco
        di risorse e hai costruito la tua casetta. Ora posa i binari dal bordo della
        mappa fino alla porta di casa tua. (Se ti va prova anche la versione più difficile:
        riesci a farcela usando solo 6 blocchi?)'
      Overworld Powered Minecart_2018_instruction: |-
        Great job! You’ve gathered lots
        of resources and built a modest home. Now lay rail from the edge of the map
        to the door of your house.
      Overworld Shear Sheep_instruction: E' il momento di tosare le pecore! Usa l'istruzione
        `tosa` per raccogliere la lana da entrambe le pecore.
      Overworld Shear Sheep_2018_instruction: |-
        Sheep-shearing time! Use the “shear”
        command to gather wool from both sheep.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |-
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |-
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 Rocket Height Puzzle_instruction: |-
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg 8-12 ex dr 1_instruction: |-
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |-
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg Big Game History_instruction: |-
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |-
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |-
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |-
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |-
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |-
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |-
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |-
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. "
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. "
      PDK5 Functions 1_instruction: |-
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Le funzioni ti permettono di definire nuovi blocchi!
        Abbiamo spostato i blocchi per disegnare un quadrato all'interno di una funzione
        chiamata "disegna un quadrato". Puoi usare la funzione "disegna un quadrato"
        per creare gli occhiali?  I quadrati sono distanti 75 pixel.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" "
      PDK5 Loops 3_instruction: |-
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      PS - test - pixelation_instruction: |-
        Complete the X shape by typing 0s and
        1s
      PS FR test 7-25_instruction: 'Here are your instructions for this free response.  '
      PS Log test - Define and use turnAround_instruction: |-
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      PS copy 2-3 Bee Conditionals 5_instruction: |-
        Be careful not to collect nectar
        from a purple flower if it doesn't have any. \r
        You must first check if
        the nectar is equal to 1 using the `if nectar` block.
      PS predictive Applab level test_instruction: 'Here are some instructions. '
      Pattern Bee 1_instruction: |-
        What a strange field of goodies! I wonder if there's
        a pattern here...
      Pixelation - AllTheThings 4_instruction: |-
        This pixelation level demonstrates
        the use of the `hide_encoding_controls` option.  Notice that the level displays
        the image data in hexadecimal and does not let you change it back to binary.
      Pixelation - AllTheThings 5_instruction: |-
        This pixelation level demonstrates
        the use of the "Hide sliders" option.  Notice that the width and height
        sliders are not available, and the width and height fields are not editable.
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |-
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |-
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |-
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |-
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |-
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |-
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |-
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |-
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |-
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |-
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |-
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |-
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |-
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |-
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Pizza on a Plate_instruction: 'Idea per un progetto: crea un''immagine di qualcosa
        del mondo reale che conosci bene. Realizzarlo richiede pianificazione e persistenza!'
      Planning Farmer_instruction: |-
        What a strange field of goodies! I wonder if
        there's a pattern here...
      Planter Test_instruction: Help me plant my fields!
      Play Lab Rocket 1_instruction: |-
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |-
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |-
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |-
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |-
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |-
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |-
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |-
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva copy U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      Poorva-test_instruction: |-
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Practice Create Performance Task_instruction: |-
        Design and implement your practice
        Create Performance Task. (Click to see full instructions)
      Project - Final Image Scroller_instruction: |-
        Update the image scroller to respond
        to buttons and key presses. (Click to see full instructions)
      Project - Finish your canvas app_instruction: |-
        Extend the functionality of
        one of the effects, or create an entirely new one of your own. (Click to see
        full instructions)
      Project - Make Your Own Clicker Game_instruction: |-
        Complete your clicker game!
        (Click to see full instructions)
      Project - Your Own Multi Screen App_instruction: |-
        Create your multi-screen
        app. (Click to see full instructions.)
      Prompt Test_instruction: |-
        Build whatever you want. This is an example of a
        number-guessing game!
      Quantum Bee - Ryan_instruction: |-
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: I fiori viola possono avere una quantità di nettare
        pari a 0 oppure 1, ma tu non lo sai! Fai attenzione a non raccogliere nettare
        da un fiore viola se ne ha una quantità pari a 0. Usa il blocco "se" per controllare
        se la quantità è 0 oppure 1.
      Robot Doodle_instruction: |-
        Project Idea: Create a picture of something familiar
        from the real world. This requires persistence and planning!
      Robot Doodle_2018_instruction: 'Idea per un progetto: crea un''immagine di qualcosa
        del mondo reale che conosci bene. Realizzarlo richiede pianificazione e persistenza!'
      Robot Drawing_instruction: |-
        Project Idea: Create a picture of something familiar
        from the real world. This requires persistence and planning!
      Robot_instruction: |-
        Project Idea: Create a picture of something familiar from
        the real world. This requires persistence and planning!
      Rocket Height Course A_instruction: |-
        Follow the Design Recipe to create a function
        rocket-height.
      Ryan - 4-5 Bee Conditionals 2_instruction: Adesso l'ape vuole solo del nettare.
        Ricordati che non tutti gli oggetti nascosti sono fiori, quindi controlla
        sotto ogni nuvoletta in modo da raccogliere il nettare solo quando ci sono
        fiori.
      Ryan - Bee Conditionals_instruction: |-
        L'ape ora desidera solo il nettare.
        Non tutti gli oggetti sono fiori, controlla sotto OGNI NUVOLA per vedere se si nasconde dietro a un fiore. Se si nasconde puoi raccogliere il nettare.
      Ryan Doily Step 1_instruction: |-
        Now we're going to draw a doily step by step.
        First, draw a square.
      Ryan Doily Step 2_instruction: |-
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Doily Step 3_instruction: |-
        Now you need to turn and repeat it 20 times!
        How many degrees do you turn to get 360 after 20 iterations?
      Ryan Test Locked Blocks_instruction: In questo esercizio c'è una funzione chiamata
        "pattuglia" (patrol) in cui devi inserire il codice che serve per far muovere
        il gatto prima in su e poi in giù di 400 pixel.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      RyanTest3_instruction: |-
        This level has shape-shifting turned on! Refresh to
        see different variants.
      SG Add Subgoals practice_instruction: |-
        Draw a 3x3 grid to the front and right
        of the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      SG U3L03 - draw step_instruction: |-
        Write the drawStep function. (Click to see
        full instructions)
      SG U3L03 Define and use turnAround_instruction: |-
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      SG U3L03 Draw a T using turnAround_instruction: |-
        Draw a plus sign using the
        provided version of turnAround().  (Click to see full instructions)
      SG U3L03 Three Steps_instruction: |-
        Define a function called drawSide() which
        draws three steps and moves the turtle to prepare for the next side (Click
        to see full instructions)
      SG U3L03 define turnRight and draw a rectangle_instruction: |-
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      SG U3L03 draw diamond_instruction: |-
        Create a function called drawDiamond()
        that makes use of your previous work to draw the complete diamond. (Click
        to see full instructions)
      SG U3L04 - 3 by 3 with functions_instruction: |-
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      SG U3L04 - snowflake_instruction: |-
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      SG U3L06 - moveForwardwithParams_instruction: |-
        Use a single command to move
        the turtle to the edge of the screen. (Click to see full instructions)
      SG U3L06 Challenge 1 triangle_instruction: |-
        Use the parameterized versions
        of the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      SG U3L06 Challenge 2 purple square_instruction: |-
        Read the documentation for
        penColor() and penWidth() before using them to draw the blue square.
      SG U3L06 Challenge 3 fill pink_instruction: |-
        Fill in the background of the
        screen with your favorite color. (Click to see full instructions)
      SG U3L06 Challenge 4 bullseye_instruction: |-
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      SG U3L06 Challenge 5 overlapping circles_instruction: |-
        This image is created
        just using dot() and penColor() but, how are we going to get those circles
        to be transparent?  If you haven't gotten the hint yet: check out the documentation!
      SG U3L06 Challenge 6 squiggles_instruction: |
        Read the documentation for the
        "arcLeft" and "arcRight" commands and then draw the squiggles as shown.
      SG U3L06 Challenge 7 smiley face_instruction: |-
        Use turnTo() and moveTo() to
        help draw a smiley face. (Click to see full instructions)
      SG U3L06 Challenge 8 make your own_instruction: |-
        Create a drawing of your own.
        (Click to see full instructions)
      SG U3L07 - Free Play Loops and Random_instruction: |-
        Free Play! Use what you
        learned from loops and random to make your own little scene. Have fun.
      SG U3L07 - allSeaGrass_instruction: |-
        Add 50 pieces of seagrass to the image
        by writing drawAllSeagrass with a loop. (Click to see full instructions)
      SG U3L07 - bubbles_instruction: |-
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      SG U3L07 - createTriangleParam_instruction: |-
        Define a function that accepts
        a parameter to match the function calls and complete the image. (Click to
        see full instructions)
      SG U3L07 - fish_instruction: |-
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      SG U3L07 - introSquare_instruction: |-
        Use a loop to draw a square. Then add
        another loop to draw many squares each one rotated some amount. (Click to
        see full instructions)
      SG U3L07 - loopsWithRandom_instruction: |-
        Increase the number of iterations
        to fill the screen with white. (Click to see full instructions)
      SG U3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      SG U3L07 - randomSquare_instruction: |-
        Draw the figure using a loop. (Click
        to see full instructions)
      SG U3L07 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      SG U3L07 - seaStar_instruction: |-
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      SG U3L07 - sunBeams_instruction: |-
        Add 100 sunbeams to the image by writing
        drawAllSunbeams with a loop. (Click to see full instructions)
      SG U3L07 - topDownDesign_instruction: |-
        Get comfortable with the structure of
        this program, then move on to the next exercise. (Click to see full instructions)
      SG U3L07 More Subgoals_instruction: |-
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      SG U3L08 - createTwoParamTriangle_instruction: |-
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      SG U3L08 - digitalScene_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      SG U3L08 - drawSquareWithParam_instruction: |-
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      SG U3L08 - fish_instruction: |-
        Add a parameter to drawFish that changes the
        size of the fish drawn. (Click to see full instructions)
      SG U3L08 - freePlay_instruction: |-
        Keep adding to your image by making more
        calls to your new functions with parameters. (Click to see full instructions)
      SG U3L08 - individualCode_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      SG U3L08 - introUnderTheSea - recovery_instruction: |-
        Add an extra fish, starfish,
        and piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      SG U3L08 - introUnderTheSea_instruction: |-
        Add an extra fish, starfish, and
        piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      SG U3L08 - multiParamFish_instruction: |-
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      SG U3L08 - paramsToStarfish_instruction: |-
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      SG U3L08 - randomInput_instruction: |-
        Use the randomNumber() blocks to test
        the functions you designed with random input. (Click to see full instructions)
      SG U3L08 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      SG U3L08 - squareTwoParams_instruction: |-
        Call drawSquare() to complete the
        drawing of two squares. (Click to see full instructions)
      SG U3L08 comments_instruction: |-
        Use the randomNumber() blocks to test the functions
        you designed with random input. (Click to see full instructions)
      SG U3L08 how to add comments_instruction: |-
        Use the randomNumber() blocks to
        test the functions you designed with random input. (Click to see full instructions)
      SG U3L2 Using Simple Commands part 1_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      SG U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and to
        the left of the turtle's starting position. Click to see full instructions.
      SG U3L2_Add-subgoals_instruction: |-
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L2_Turtle3by3Grid_instruction: |-
        Draw a 3x3 grid to the front and right
        of the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and to
        the right of the starting location. (Click to show full instructions)
      SGU3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      Sam the Butterfly 1 (copy 1)_instruction: |-
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |-
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |-
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |-
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |-
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |-
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |-
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |-
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |-
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      SpecialFrozenLevel_instruction: Sei ufficialmente diventato un maestro artista!
        Crea un meraviglioso paesaggio invernale.
      Standalone_Artist_1_instruction: Benvenuto all'Artista! Prima di tutto, cerchiamo
        di disegnare un semplice quadrato utilizzando il blocco "gira a destra" e
        il blocco "vai avanti". Ogni lato è lungo 100 pixel.
      Standalone_Artist_2_instruction: 'Disegna questo rombo che ha i lati lunghi
        150 pixel.<br><br><b>Attenzione</b>: un rombo ha gli angoli di 60 e 120 gradi,
        ma i gradi dell’istruzione “gira” sono misurati rispetto al percorso davanti
        all’Artista. Vedi anche le spiegazioni del video del <a href="https://studio.code.org/s/course2/stage/4/puzzle/1">primo
        esercizio dell''Artista nel Corso 2</a>.'
      Standalone_Artist_3_instruction: 'Come fai a disegnare questo esagono che ha
        i lati lunghi 100 pixel? <br><br><b>Attenzione</b>: un esagono ha gli angoli
        di 120 gradi, ma i gradi dell’istruzione “gira” sono misurati rispetto al
        percorso davanti all’Artista. Vedi anche le spiegazioni del video del <a href="https://studio.code.org/s/course2/stage/4/puzzle/1">primo
        esercizio dell''Artista nel Corso 2</a>.'
      Standalone_Artist_4_instruction: Adesso c'è il nuovo blocco "ripeti 6 volte".
        Questo blocco di ripetizione, detto anche "ciclo", ripete 6 volte quello che
        si trova al suo interno. Cosa succede se si ripete 6 volte il codice in grigio
        che trovi già pronto?
      Standalone_Artist_5.5_instruction: 'Osserva come abbiamo semplificato il codice
        utilizzando il blocco "ripeti ... volte" (ciclo). Per disegnare un fiore devi
        adesso ripetere per 12 volte tutta la sequenza di blocchi in grigio. Attenzione:
        ruota di 30 gradi dopo ogni ciclo del rombo altrimenti disegni sempre la stessa
        figura.'
      Standalone_Artist_5_instruction: Quante volte è necessario ripetere il codice
        che trovi già pronto per disegnare il fiore?
      Standalone_Artist_6_instruction: 'Ripeti 6 volte il codice che trovi già pronto
        (che disegna un esagono) per realizzare l''intera figura. Di quanti gradi
        devi girare ogni volta? Suggerimento: dividi il numero di gradi di un cerchio
        per il numero di ripetizioni.'
      Standalone_Artist_7_instruction: 'Una funzione è un altro strumento di programmazione
        che aiuta ad evitare inutili ripetizioni. Questa funzione disegna un fiore,
        e puoi usarla ogni volta che vuoi disegnare un fiore. Usala insieme al nuovo
        blocco "salta" per disegnare questi fiori. Suggerimento: i fiori sono distanti
        tra loro 150 pixel.'
      Standalone_Artist_8_instruction: Qui trovi la funzione "disegna una forma" che
        è stata costruita in modo che disegni degli esagoni. Clicca su "Esegui" per
        vedere cosa fa il codice che trovi già pronto e poi fai degli esperimenti
        per vedere cosa succede. Puoi variare la funzione in modo che disegni una
        composizione di quadrati, triangoli o ottagoni? Cosa succede se vari anche
        altri valori?
      Standalone_Artist_9_instruction: Ora continua e realizza qualsiasi figura desideri!
        Hai anche una funzione vuota che puoi riempire a tuo piacere!
      Standalone_Artist_v2_instruction: Benvenuto all'Artista! Prima di tutto, cerchiamo
        di disegnare un semplice quadrato utilizzando il blocco "gira a destra" e
        il blocco "vai avanti". Ogni lato è lungo 100 pixel.
      StepIntro_instruction: Here's how to use the "Step" button.
      Test Play Lab_instruction: This is a test play lab level.
      Test embedded Blockly in instructions_instruction: |-
        As a block element, we
        should be able to include XML representing a valid Blockly block or blocks.\r
        \r
        <xml>\r
          <block
        type="draw_move_by_constant">\r
            <title name="DIR">moveForward</title>\r
            <title
        name="VALUE">100</title>\r
          </block>\r
        </xml>\r
        \r
        We also support
        Blockly XML as an inline element like so: <xml><block type="draw_move_by_constant"><title
        name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>.
        The difference in input format being that this one is embedded within a paragraph,
        whereas the previous one is in a text block of its own. The difference in
        output is comparable.
      Test embedded K1 Blockly in instructions_instruction: |-
        Use three `move west`
        blocks and one `pick corn` block to solve this puzzle.
      Test of comment block_instruction: Drag out the subgoal label block you want.
      Testing Quantum Farmer_instruction: "Wow, look at that! \\r\n\\r\nI don't know\nhow
        many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat
        keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.\r
        \r
      The Vigenere Cipher Widget_instruction: Istruzioni
      The Vigenere Cipher_instruction: Istruzioni
      Total Artist Clone Me_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |-
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |-
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |-
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  "
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |-
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 Vigenere_instruction: Test
      U2 frequency caesar_instruction: Istruzioni
      U2 frequency random sub_instruction: Istruzioni
      U2 vigenere cipher_instruction: Istruzioni
      U2L04 - NetSim Routers with Addresses_instruction: |-
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |-
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |-
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |-
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |-
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - Demo App_instruction: |-
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - appendItem_instruction: |-
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |-
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |-
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |-
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |-
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |-
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings Next_instruction: |-
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |-
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |-
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |-
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings createArray_instruction: |-
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |-
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |-
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings template_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |-
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |-
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |-
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |-
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |-
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |-
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |-
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |-
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |-
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |-
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |-
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |-
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |-
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |-
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |-
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |-
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |-
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |-
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |-
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |-
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |-
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |-
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |-
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |-
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |-
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND OR Simple_instruction: |-
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |-
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND and OR_instruction: |-
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Simple AND_instruction: |-
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |-
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Conditionals - intoOr_instruction: |-
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |-
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |-
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |-
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |-
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |-
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |-
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |-
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |-
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |-
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |-
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |-
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |-
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |-
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |-
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |-
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |-
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |-
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |-
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |-
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |-
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |-
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |-
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |-
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |-
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |-
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |-
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |-
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |-
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |-
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |-
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |-
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |-
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |-
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |-
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |-
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |-
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |-
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2-
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |-
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |-
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |-
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |-
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2-
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2-
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |-
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |-
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |-
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |-
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |-
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |-
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |-
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |-
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |-
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |-
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |-
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |-
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |-
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |-
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |-
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |-
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |-
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |-
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |-
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |-
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |-
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |-
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |-
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |-
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |-
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |-
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |-
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |-
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |-
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |-
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |-
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Practice Create Performance Task_instruction: |-
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |-
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |-
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |-
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |-
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |-
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |-
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |-
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |-
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |-
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |-
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |-
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - Fill_instruction: Do This
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Oval_instruction: Do This
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle Width and Height_instruction: Do This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Simple Shape Drawing_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simulation - 1_instruction: |-
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |-
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |-
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |-
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |-
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |-
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |-
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |-
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |-
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - Sprites - Intro Sprites_instruction: Do This
      U3 - Sprites and Mod - Create  and Draw Sprite_instruction: Do This
      U3 - Sprites and Mod - Mouse Width and Height_instruction: Do this
      U3 - Sprites and Mod - Mouse X and Y_instruction: Do this
      U3 - Sprites and Mod - Rand Around Mouse_instruction: Do this
      U3 - Sprites and Mod - Rand Shape Color_instruction: Do This
      U3 - Sprites and Mod - Shape Color_instruction: Do This
      U3 - Sprites and Mod - Wrap Many Squares_instruction: Do This
      U3 - Sprites and Mod - X and Y Prop_instruction: Do This
      U3 - Sprites and Mod - two sprites_instruction: Do This
      U3 - User Input - Save getText To Variable_instruction: |-
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |-
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |-
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |-
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |-
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |-
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |-
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |-
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |-
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |-
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |-
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |-
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |-
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |-
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |-
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |-
        Test out the new expressions.
        (Click to see full instructions)
      U3 - images - bee free play_instruction: Do this
      U3 Digital Assistant Design_instruction: |-
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |-
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |-
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |-
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 Variables consolelog_instruction: |-
        Use the write block to display the value
        of size
      U3 Variables flower example_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables gray square_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables make a square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      U3 Variables misconceptions try it_instruction: |-
        Test out your predictions
        from the previous level.
      U3 Variables randomize your square_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      U3 Variables write_instruction: |-
        Use the write block to display the value of
        size
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |-
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |-
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |-
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |-
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |-
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |-
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |-
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 Two Buttons with Ids_instruction: |-
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U313 drag Two Buttons_instruction: |-
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |-
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |-
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 Creating Procedures 1_instruction: |-
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |-
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |-
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 Three Steps_instruction: |-
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |-
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 define turnRight and draw a rectangle_instruction: |-
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 draw diamond_instruction: |-
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |-
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |-
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |-
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |-
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |-
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |-
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |-
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |-
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |-
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |-
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |-
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |-
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. "
      U3L06 Challenge 7 smiley face_instruction: |-
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |-
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |-
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. "
      U3L07 - allSeaGrass_instruction: |-
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |-
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |-
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |-
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |-
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - introSquare_instruction: |-
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |-
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |-
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |-
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - sunBeams_instruction: |-
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |-
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |-
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, seagrass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - createTwoParamTriangle_instruction: |-
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |-
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |-
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |-
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |-
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - fish_instruction: |-
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |-
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea with comments_instruction: |-
        Add an extra fish, starfish,
        and piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |-
        Add an extra fish, starfish, and piece
        of seagrass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |-
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |-
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |-
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |-
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |-
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |-
        Add an extra fish, starfish, and piece of seagrass
        to the image. Look at, but don't change, the functions that create them.
        (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |-
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 how to add comments_instruction: |-
        Use the randomNumber() blocks to test
        the functions you designed with random input. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |-
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |-
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id Problem_instruction: |-
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debugging 1_instruction: |-
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |-
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |-
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |-
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |-
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |-
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |-
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |-
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - Mini Calculator embed_instruction: |-
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - Unfortunate Events Free Play_instruction: |-
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |-
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |-
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L14 - concatenate simple_instruction: |-
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - moving memory challenge1_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |-
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |-
        Try out the demo app
        (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |-
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |-
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |-
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - add code to make count down work_instruction: |-
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - clicker update score_instruction: |-
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |-
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - global var example count up_instruction: |-
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |-
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |-
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - variable scoping problem debugging_instruction: |-
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |-
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |-
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |-
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |-
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |-
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |-
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |-
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |-
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |-
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer. "
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. "
      U3L16 - intro getText_instruction: |-
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |-
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |-
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |-
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |-
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |-
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |-
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |-
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |-
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |-
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |-
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |-
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |-
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |-
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) "
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib Student Setup_instruction: |-
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) "
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) "
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) "
      U3L17 - getAndSetKeyValue_instruction: |-
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |-
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |-
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |-
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |-
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |-
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |-
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |-
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |-
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |-
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - DEMO up down count practice app_instruction: |-
        Try out the demo app
        (Click to see full instructions)
      U3L19 - Debugging with consoleLog_instruction: |-
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |-
        Investigate the new elements of the
        'chaser-game'
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |-
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |-
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |-
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |-
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - test reassignment of two vars_instruction: |-
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |-
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |-
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |-
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |-
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |-
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |-
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |-
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |-
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |-
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |-
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |-
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |-
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |-
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |-
        Add newline characters "\n" to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |-
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |-
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |-
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |-
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |-
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |-
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |-
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |-
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |-
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |-
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |-
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |-
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |-
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |-
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Nested Conditionals 1_instruction: |-
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. "
      U3L24 Nested Conditionals Bugs 2_instruction: |-
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |-
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |-
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L24 introIncludes_instruction: |-
        Practice using the includes command. (Click
        to see full instructions)
      U3L25 - drag out key event_instruction: |-
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |-
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |-
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |-
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |-
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |-
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |-
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |-
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |-
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |-
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |-
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |-
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |-
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" "
      U3L26 OR operator_instruction: |-
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |-
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |-
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - Add Row By Hand_instruction: |-
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - Export Data_instruction: |-
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |-
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |-
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |-
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |-
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |-
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |-
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |-
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |-
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |-
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |-
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - CreateRecord - 1_instruction: |-
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |-
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |-
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |-
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |-
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |-
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - Edit Data Table by Hand_instruction: |-
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |-
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |-
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |-
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |-
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |-
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |-
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |-
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |-
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |-
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |-
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |-
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |-
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |-
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |-
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |-
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |-
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |-
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |-
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |-
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |-
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |-
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |-
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |-
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |-
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |-
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |-
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |-
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4 - add createRecord to contacts App_instruction: |-
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - debug column names are case sensitive_instruction: |-
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |-
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |-
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |-
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |-
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - fix contacts by hand in data table_instruction: |-
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |-
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 Model App_instruction: |-
        Add a large red button to your screen using Design
        Mode. (Click for full instructions.)
      U4 Model Design 1_instruction: |-
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U4 vigenere cipher 2_instruction: Istruzioni
      U4L02 - Objects - Template1_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions) "
      U4L02 - Objects - eventParameter_instruction: |-
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |-
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |-
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. "
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. "
      U4L06 Data Storage 7_instruction: |-
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |-
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U5 if-else-if movie example_instruction: |-
        Add an else-if statement in order
        to tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U6 - Final Project - Project Level_instruction: |-
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |-
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |-
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |-
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |-
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |-
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |-
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: Sotto alcuni di questi blocchi c'è la
        lava, che devi coprire per poter andare avanti. L'istruzione `se` ti è utile
        in questi casi. Aggiungi un istruzione `vai avanti` nel posto giusto per estrarre
        tutte le risorse disponibili.
      Underground Avoiding Lava_2018_instruction: |-
        Lava is hiding beneath some of
        these blocks, which you'll need to cover up before moving forward. An "if"
        command will come in handy here. Add a "move forward" command in the correct
        place to mine these blocks.
      Underground If Statements_instruction: Ora la situazione si fa un po' più difficile.
        Estrai tre blocchi di pietrarossa, ma non cadere nella lava. Usa un'istruzione
        `se` per posizionare dei ciottoli se scopri la lava.
      Underground If Statements_2018_instruction: |-
        Now things are getting tricky.
        Mine 3 redstone, but don’t fall in the lava. Use an "If" command to place
        cobblestone over any lava you uncover.
      Underground Iron_instruction: Camminare sulla lava non è una buona idea. Posiziona
        dei ciottoli per creare un ponte, poi estrai almeno due blocchi di ferro.
      Underground Iron_2018_instruction: |-
        Walking into molten lava is a bad idea.
        Place cobblestone to create a bridge, then mine at least two of the iron blocks.
      Underground Mining Coal_instruction: Nel sottosuolo trovi le risorse più preziose,
        ma è buio. Posiziona almeno due torce ed estrai almeno due blocchi di carbone.
      Underground Mining Coal_2018_instruction: Nel sottosuolo trovi le risorse più
        preziose, ma è buio. Posiziona almeno due torce ed estrai almeno due blocchi
        di carbone.
      Unicorn Tag_instruction: Esamina questo progetto. Riesci a capire come è stato
        realizzato?
      Valentine_artist2_01_instruction: |-
        Program the artist to draw some grass for
        the Love Bug.
      Valentine_artist_01_instruction: 'Help the artist finish his llama heart. '
      Valentine_playlab_01_instruction: "Program Kiki (Actor 1) to move left and\nright
        when the left and right arrows are pressed. When Kiki is clicked, she\nshould
        throw hearts towards her friends. "
      Vigenere_instruction: Test
      WhileAdventure_instruction: |-
        Our adventurer wants to collect coins. Can you
        help her grab as many as she can using only one remove 1 block?
      'Widget: Black and White Pixelation_instruction': |-
        Now make your own image!
        We've started you off with a 10x10 canvas but you can make it whatever size
        you want. Happy pixeling!
      'Widget: Color Pixelation_instruction': |-
        Requirements: The icon must be 16x16
        pixels. You must use the Pixelation Widget to encode the bits of color information.
        The image must be encoded with at least 12 bits per pixel.
      'Widget: Text Compression_instruction': |-
        Look for patterns (repeated words
        or phrases) in the text. Enter the patterns you see into the dictionary on
        the right. As you type entries into the dictionary, the symbol for the entry
        is inserted into the text in place of the pattern.
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
      aE1_instruction: "You chose to make a square napkin! \\r\n\\r\nTo finish, draw\na
        square with 20 pixel sides. "
      aE2_instruction: |-
        If you place your square loop inside another loop, we call
        that a nested loop. What do you need to add as an outer loop to make sure
        all 14 napkins line up next to each other?
      aE3_instruction: |-
        We've got to have a tablecloth!  \r
        \r
        Take your row of
        14 napkins and sew 14 of those together with another **outer loop** to make
        a cover for our table.
      aE3alternate_instruction: Alternate
      aE3alternateB_instruction: Alternate
      aE4_instruction: Alternate
      aE5_instruction: Example of puzzle using highest difficulty level shape.
      aE6_instruction: "How many times do you need to loop this to draw half  of\na
        circle? "
      aE7_instruction: |-
        If you create another loop like this one, but turn left instead
        of right, what happens? \r
        \r
        Can you repeat all of that to draw this wave?
      aE8_instruction: |-
        Now let's loop that whole thing four times to create this
        picture frame. Watch out for the corners - you can't just turn 90 degrees!
        \r
        \r
        If looping a 3 degree turn 60 times makes a half circle, which of
        these blocks of code will make an additional quarter circle for the corners?
      aEfreeplay_instruction: Free Play!
      allHallows2017_instruction: |-
        Trap the Code.org employees in the crayon box
        by drawing a square with 320 pixel sides!
      allthethings data blocks test_instruction: |-
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |-
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings level dataTables_instruction: |-
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_instruction: |-
        Do
        This
      allthethings_moviebot_instruction: |-
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). "
      allthethings_template_backed2_instruction: |-
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      allthethings_ttscsp_instruction: |-
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      artistDebugVideo1_instruction: Use the `repeat` loop to add waves to the water.
      artistFunctionsVideo1_instruction: Segui le istruzioni per costruire la tua
        funzione.
      artistLoopsK1_instruction: Questo è un nuovo tipo di esercizio chiamato "Artista".
        Prova a disegnare qualcosa di divertente. Quando sei soddisfatto, premi "Termina"
        per passare all'esercizio successivo.
      artistLoopsK2_instruction: |-
        Now, use a `repeat` loop to draw this line five
        times!
      artistLoopsK2gradek_artist_loops3_instruction: |-
        Now, use a `repeat` loop to
        draw this line five times!
      artistLoopsK3_instruction: |-
        Draw a line eight steps long. This will become
        the land for our kingdom!
      artistLoopsK4_instruction: |-
        Now we need a castle with a draw bridge.  Fix the
        code so that the bridge lays straight instead of falling down.
      artistLoopsK5_instruction: |-
        Now we need to fix the top of the castle. Can you
        loop the code three times?
      artistLoopsK6_instruction: "Someone is stuck in the tower!  Fix the stairs\nto
        set them free. "
      artistLoopsK7_instruction: "This tower is lovely, what is downstairs? Build\nanother
        staircase to find out! "
      artistLoopsK8_instruction: |-
        Wow! There's a garden over there!  Help fix these
        stairs so I can get to it.
      artistLoopsK9_instruction: |-
        **Challenge:**  Lovely! Let's take a walk around
        the garden.
      artistLoopsKA_instruction: |-
        These stones are in the wrong place.  Help me move
        them so I don't fall in!
      artistLoopsKB_instruction: "Look!  It's a theater.  Help me set up the chairs\nso
        we can all see the stage. "
      artistLoopsKFP_instruction: |-
        Picture time!  Use what you have learned to draw
        a picture of what you think the Artist saw on stage.
      asteroids_instruction: |-
        This Corgi has been a good boy! Drag this carrot to
        him as a special treat.
      beeDebugVideo1_instruction: Riesci ad usare un <i>ciclo</i> `ripeti ... volte`
        per raccogliere tutto il nettare?
      behavior bash mary_instruction: Clone this level and make your own blocks!
      behaviors clone me 2_instruction: Clone this level and make your own blocks!
      behaviors clone me Ram_instruction: Clone this level and make your own blocks!
      behaviors clone me joshl_instruction: Clone this level and make your own blocks!
      behaviors clone me nk_instruction: Clone this level and make your own blocks!
      behaviors clone me tanya_instruction: Clone this level and make your own blocks!
      behaviors clone me_instruction: Clone this level and make your own blocks!
      behaviors pet test 123 copy_instruction: |-
        When Daisy gets a carrot, she gets
        excited. Use the **"when touches"** event and the "add behavior" block
        to make Daisy do something fun when she gets the carrot.
      behaviors pet test 123_instruction: |-
        When Daisy gets a carrot, she gets excited.
        Use the **"when touches"** event and the "add behavior" block to make
        Daisy do something fun when she gets the carrot.
      behaviors pet test 2_instruction: |-
        When Daisy gets a carrot, she gets excited.
        Use the **"when touches"** event and the "add behavior" block to make
        Daisy do something fun when she gets the carrot.
      behaviors pet test 3_instruction: "**It's time to make your own virtual pet!**\nYou
        can change whatever code you want to to make your own pet. Here are some\nideas:\\r\n*
        Can you make your pet start a new behavior when you click on it?\\r\n*\nCan
        you make your pet run away when you drag the vacuum to it?\\r\n* Can you\nadd
        other animal friends to your pet's area? "
      behaviors pet test_instruction: |-
        Last time, you practiced using "behaviors"
        to make a sprite do something forever. This time, we will use behaviors to
        make a virtual pet. \r
        \r
        This dog's name is Daisy. Daisy LOVES to snack
        on carrots. Add the "drag and drop" behavior to the carrot so you can move
        it to her.
      behaviors_caley_instruction: Clone this level and make your own blocks!
      ben's first level_instruction: Clone this level and make your own blocks!
      birdsDebugVideo1_instruction: |-
        Trace the path and lead me to the silly pig.
        Avoid TNT or feathers will fly!
      bounce_1_instruction: Attacca un blocco al blocco verde `quando si preme la
        freccia verso sinistra` e premi "Esegui". Poi sposta la racchetta usando la
        freccia verso sinistra per raggiungere la bandierina.
      bounce_10_instruction: Ora in alto c'è una porta da calcio. Per costruire il
        gioco attacca il blocco `aggiungi un punto` al blocco verde `quando la palla
        va in rete` e quello `aggiungi un punto all'avversario` al blocco verde `quando
        la palla manca la racchetta`. Vedi quanti punti riesci a raggiungere prima
        che il tuo avversario ne faccia due.
      bounce_10_2018_instruction: Ora in alto c'è una porta da calcio. Per costruire
        il gioco attacca il blocco `aggiungi un punto` al blocco verde `quando la
        palla va in rete` e quello `aggiungi un punto all'avversario` al blocco verde
        `quando la palla manca la racchetta`. Vedi quanti punti riesci a raggiungere
        prima che il tuo avversario ne faccia due.
      bounce_10_basketball_instruction: |-
        Ora in alto c'è il canestro! Per costruire il gioco, oltre ai blocchi usati negli esercizi precedenti, attacca il blocco `aggiungi un punto` al blocco verde `quando la palla va in rete` e quello `aggiungi un punto all'avversario` al blocco verde `quando la palla manca la mano`.<br>
        Osserva quanti punti riesci a raggiungere prima che il tuo avversario ne faccia due.
      bounce_10_sports_instruction: |-
        Ora in alto c'è la meta! Per costruire il gioco, oltre ai blocchi usati negli esercizi precedenti, attacca il blocco `aggiungi un punto` al blocco verde `quando la palla va in rete` e quello `aggiungi un punto all'avversario` al blocco verde `quando la palla manca il giocatore`.<br>
        Osserva quanti punti riesci a raggiungere prima che il tuo avversario ne faccia due!
      bounce_11_instruction: Adesso puoi predisporre il gioco come vuoi attaccando
        dei blocchi `imposta ...` al blocco `quando si clicca su "Esegui" `. Devi
        poi attaccare a quest'ultimo il blocco `lancia una nuova palla`, che devi
        attaccare anche ad altri blocchi verdi `quando ...`. Quanti punti riesci a
        raggiungere prima che il tuo avversario ne faccia due?
      bounce_11_2018_instruction: |-
        You can now attach blocks to the "when run"
        block. You have to attach the new "launch new ball" block in more than one
        place. Also, try changing the scene or the speed of the paddle and the ball
        and see how many points you can score before your opponent scores twice.
      bounce_11_basketball_instruction: |-
        Adesso puoi predisporre il gioco come vuoi, attaccando dei blocchi `imposta ...` al blocco iniziale `quando si clicca su "Esegui"`. Devi anche attaccare in diversi punti il blocco `lancia una nuova palla`.<br>
        Prova anche a cambiare la velocità della palla e della mano e vedi quanti punti riesci a fare prima che il tuo avversario ne faccia due!
      bounce_11_sports_instruction: |-
        Adesso puoi predisporre il gioco come vuoi, attaccando dei blocchi `imposta ...` al blocco iniziale `quando si clicca su "Esegui"`. Devi anche attaccare in diversi punti il blocco `lancia una nuova palla`.<br>
        Prova anche a cambiare la velocità della palla e della mano e vedi quanti punti riesci a fare prima che il tuo avversario ne faccia due!
      bounce_12_instruction: Crea la tua versione del Ping-Pong. È possibile modificare
        tutte le immagini e tutte le regole. Quando hai finito, clicca su Condividi
        per far provare agli amici il gioco sui loro smartphone.
      bounce_12_2018_instruction: |-
        Create your own Bounce game. You can change all
        the visuals and the rules. When you're done, click Finish to let friends
        try your game on their phones.
      bounce_12_basketball_instruction: Crea il tuo gioco di basket. Puoi modificare
        tutte le regole. Quando hai finito di giocare, clicca su "Termina" per ottenere
        un link da condividere con i tuoi amici o per giocare sul tuo telefono con
        la tua versione del gioco.
      bounce_12_sports_instruction: 'Ora comandi tu. Puoi modificare tutte le regole,
        combinando i diversi sport: sii creativo! Quando hai finito, clicca su `Termina`
        per consentire agli amici di provare il tuo gioco sui loro telefoni.'
      bounce_1_2018_instruction: |-
        Attach a block to the "when left arrow" block
        and press "Run". Move the paddle using the left arrow to reach the finish
        target.
      bounce_1_basketball_instruction: |-
        Attacca un blocco al blocco verde `quando si preme sulla freccia verso sinistra` e premi "Esegui". <br>
        Poi sposta la racchetta usando la freccia verso sinistra per raggiungere la bandierina.
      bounce_1_sports_instruction: |-
        Attacca un blocco al blocco verde `quando si preme sulla freccia verso sinistra` e premi "Esegui". <br>
        Poi sposta il giocatore usando la freccia verso sinistra per raggiungere la bandierina.
      bounce_2_instruction: Attacca un blocco ai blocchi verdi `quando si preme la
        freccia verso destra` e `quando si preme la freccia verso sinistra`. Poi sposta
        la racchetta per raggiungere entrambe le bandierine.
      bounce_2_2018_instruction: |-
        Attach a block to the "when right arrow" and
        "when left arrow" blocks. Move the paddle to reach both finish targets.
      bounce_2_basketball_instruction: |-
        Attacca un blocco ad ogni blocco verde `quando si preme sulla freccia verso sinistra` e `quando si preme sulla freccia verso destra` e premi "Esegui".<br>
        Poi sposta la racchetta usando entrambe le frecce orizzontali per raggiungere le due bandierine.
      bounce_2_sports_instruction: |-
        Ora ci sono due bandiere! Attacca un blocco ad ogni blocco verde `quando si preme sulla freccia verso sinistra` e `quando si preme sulla freccia verso destra` e premi "Esegui".<br>
        Poi sposta il giocatore usando entrambe le frecce orizzontali per raggiungere le due bandierine.
      bounce_3_instruction: Ora fai qualcosa di simile con il blocco `quando si preme
        la freccia verso l'alto`. Poi sposta la racchetta verso la bandierina in alto.
      bounce_3_2018_instruction: Ora fai qualcosa di simile con il blocco `quando
        si preme la freccia verso l'alto`. Poi sposta la racchetta verso la bandierina
        in alto.
      bounce_4_instruction: Questa volta devi aggiungere quattro blocchi. Sposta la
        racchetta verso tutti e quattro le bandierine per completare questo esercizio.
      bounce_4_2018_instruction: |-
        This time you need to add four blocks. Move the
        paddle to all four finish targets to complete this puzzle.
      bounce_5_instruction: Faremo volare una palla verso il basso incontro alla racchetta.
        Attacca un blocco al blocco verde `quando la palla colpisce la racchetta`
        per far sì che la palla raggiunga la bandierina.
      bounce_5_2018_instruction: |-
        We're going to send a ball flying down towards
        the paddle. Attach a block to the "when ball hits paddle" block to ensure
        the ball reaches the finish target.
      bounce_5_basketball_instruction: Stiamo per lanciarti una palla verso la mano.
        Attacca un blocco al blocco verde `quando la palla colpisce la mano` per permettere
        alla palla di raggiungere la bandierina.
      bounce_5_sports_instruction: Il disco da hockey sta per arrivare al giocatore!
        Attacca un blocco al blocco verde `quando la palla colpisce il giocatore`
        per permettere alla palla di raggiungere la bandierina.
      bounce_6_instruction: Ora la bandierina è in alto. Per risolvere questo esercizio
        è necessario attaccare dei blocchi ad entrambi i blocchi verdi `quando la
        palla colpisce`.
      bounce_6_2018_instruction: |-
        Now the finish target is on the top. You need to
        attach blocks to both of the "when ball hits" blocks to solve this puzzle.
      bounce_6_basketball_instruction: Ora la bandierina è in alto. Per risolvere
        questo esercizio devi attaccare dei blocchi ad entrambi i blocchi verdi `quando
        la palla colpisce il giocatore` e `quando la palla colpisce il muro`.
      bounce_6_sports_instruction: Ora la bandierina è in alto. Per risolvere questo
        esercizio devi attaccare dei blocchi ad entrambi i blocchi verdi `quando la
        palla colpisce il giocatore` e `quando la palla colpisce il muro`.
      bounce_7_instruction: Attacca dei blocchi a ciascuno dei blocchi verdi `quando
        ...`. Poi fai rimbalzare la palla fino a quando colpisce la bandierina.
      bounce_7_2018_instruction: Attacca dei blocchi a ciascuno dei blocchi verdi
        `quando ...`. Poi fai rimbalzare la palla fino a quando colpisce la bandierina.
      bounce_7_basketball_instruction: |-
        Attacca dei blocchi ad ognuno dei blocchi verdi `quando ...`.<br>
        Fai rimbalzare la palla fino a quando non colpisce la bandiera.
      bounce_7_sports_instruction: |-
        Attacca dei blocchi ad ognuno dei blocchi verdi `quando ...`.<br>
        Fai rimbalzare la palla fino a quando non colpisce la bandiera.
      brendan behaviors clone_instruction: Clone this level and make your own blocks!
      brendan hackathon level_instruction: |-
        these are the instructions for my level.  you
        should do this level and have a good time.
      clone me mary_instruction: Clone this level and make your own blocks!
      collector example_instruction: |-
        Put these blocks in order to collect all of
        the gold and solve the puzzle.
      collectorDebugVideo2_instruction: Ordina questi blocchi per raccogliere tutto
        l'oro e risolvere il puzzle.
      collectorSkinVideo1_instruction: Collect all four piles to pass this level.
      collectorSkinVideo2_instruction: Collect one pile of gold to pass this level.
      comment_intro_maze_2018_instruction: |-
        Use the new `comment` block to leave
        yourself quick reminders.
      conditionals_forvideo_harvester_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      conditionals_forvideo_playlab_instruction: Score as many points as you can!
      course1_artist_loops_challenge1_instruction: |-
        You can use a loop to draw many
        lines in a row.\r
        \r
        Can you draw a house? Make it look just the way you
        like it!  Try looking for patterns that repeat!
      course1_artist_loops_challenge2_instruction: |-
        Let's play a game! Draw as many
        X's as you can! Can you get 3 in a row?
      course1_artist_loops_challenge3_instruction: '"Puoi aiutarmi a costruire due
        casette per gli uccelli?"'
      course1_artist_loops_challenge4_instruction: |-
        "It's time to toss the dice!
        Can you help me draw these?"
      course1_collector_loops_challenge1_instruction: |-
        "Can you help me spot some
        bugs? I know which way I want to go, but I'm not sure how many steps to take."
      course1_collector_loops_challenge2_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      course1_collector_loops_challenge3_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      course1_collector_loops_challenge4_instruction: |-
        Let's get the treasure! Help
        me across each row then come back to start the next row. Can you find a pattern?
      course1_maze_debugging_challenge1_instruction: |-
        Debug this level. Remove the
        extra blocks and add the missing blocks. Get the bird to the pig!
      course1_maze_debugging_challenge2_instruction: |-
        Debug this level. These are
        the right blocks, but they're in the wrong order!
      course1_maze_seq_challenge1_instruction: |-
        "Trace the path and lead me to the
        silly pig. Avoid TNT or the feathers will fly!"
      course1_maze_seq_challenge2_instruction: |-
        You can only move up to four times
        in each direction. Can you find a path before you run out of blocks?
      course1_playlab_events_challenge1_instruction: |-
        "Where are my friends hiding?
        Can you write code to show the rest of my friends?"
      course1_playlab_events_challenge2_instruction: |-
        "Let's have a party! Give
        my friends something to do when you click or tap them."
      course2_artist_nestedLoops_challenge1_instruction: |-
        Can you figure out how
        to make a picture like this?
      course2_artist_nestedLoops_challenge2_instruction: |-
        Can you figure out how
        to make a picture like this?
      course2_artist_prog_challenge1_instruction: |-
        Draw rooms for each of the animals.
        There are many different ways to solve this puzzle, so have some fun. The
        shortest possible solution is 6 blocks, but use as many as you like!
      course2_artist_prog_challenge2_instruction: |-
        *Help me paint the yellow lines
        on this road!*
      course2_bee_conditionals_challenge1_instruction: Raccogli tutto il nettare o
        fai tutto il miele.
      course2_bee_conditionals_challenge2_instruction: Raccogli tutto il nettare o
        fai tutto il miele.
      course2_collector_loops_challenge2_instruction: |-
        Let's hunt for treasure -
        using loops! Help the collector by debugging this code. Get all of the treasure!
      course2_collector_prog_challenge1_instruction: |-
        Look carefully! Can you collect
        all *10* pieces of treasure?
      course2_collector_prog_challenge2_instruction: |-
        There are 20 pieces of treasure
        to be found. Collect at least half to finish this challenge!
      course2_harvester_loops_challenge1_instruction: Collect all of the corn.
      course2_harvester_loops_challenge2_instruction: |-
        Collect all of the lettuce.
        Avoid the trees and fields!
      course2_maze_loops_challenge1_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      course2_maze_programming_challenge1_instruction: |-
        *"The pig is hiding! Can
        you help me find a way around?"*
      course2_maze_programming_challenge2_instruction: |-
        Sometimes there is more than
        one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      course2_maze_seq_challenge1_instruction: |-
        Trace the path and lead me to the
        silly pig. Avoid TNT or the feathers will fly!
      course2_maze_seq_challenge2_instruction: |-
        You can only move up to four times
        in each direction. Can you find a path before you run out of blocks?
      course2_playlab_stage17_1_instruction: Puoi far dire "Ciao" a Jorge il Cane
        (sprite 1)?
      course2_playlab_stage17_10_instruction: Aggiungi dei blocchi per cambiare lo
        sfondo e la velocità di Waddles. Poi spostalo con i tasti freccia fino a che
        fai un punto.
      course2_playlab_stage17_11_instruction: Crea una storia come vuoi tu. Quando
        hai fatto, clicca su "Condividi" per far provare la storia ai tuoi amici sui
        loro smartphone.
      course2_playlab_stage17_2_instruction: Riesci a fare in modo che il cane dica
        qualcosa e poi il gatto gli risponda?
      course2_playlab_stage17_3_instruction: Riesci a scrivere un programma che fa
        arrivare questo cane fino al gatto?
      course2_playlab_stage17_4_instruction: Fai arrivare il cane fino al gatto e
        fai in modo che il gatto dica "Ciao" quando il cane lo raggiunge.
      course2_playlab_stage17_5_instruction: Riesci a scrivere un programma per far
        dire "ciao" al polpo quando viene cliccato?
      course2_playlab_stage17_6_instruction: Riesci a scrivere un programma che fa
        muovere Waddles quando si usano le frecce su / giù / destra / sinistra per
        colpire tutti i bersagli?
      course2_playlab_stage17_7_instruction: Il blocco "ripeti per sempre" permette
        di eseguire il codice senza fermarsi mai. Puoi attaccare ad esso dei blocchi
        per spostare il dinosauro in continuazione in su e in giù?
      course2_playlab_stage17_8_instruction: Riesci a far dire "Ahi!" a Waddles e
        a riprodurre il suono di "un colpo" se esso sbatte contro il dinosauro, e
        poi a spostarlo con i tasti freccia per far sì che questo accada?
      course2_playlab_stage17_9_instruction: Aggiungi un blocco che segna un punto
        quando Waddles sbatte contro il polpo. Poi spostalo con i tasti freccia fino
        a che fai un punto.
      course3_artist_concept_challenge1_instruction: |-
        Feel free to use trial and
        error. You are not expected to get the image perfect the first time.   Want
        to see more hints?  Click here!
      course3_artist_functions_challenge1_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      course3_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      course3_bee_debugging_challenge1_instruction: |-
        Watch how the bee gets the nectar.
        Can you use the same kind of pattern to help the bee make all of the honey?
      course3_bee_functions_challenge1_instruction: |-
        You are on your own for this
        challenge. This could "bee" harder than it looks!
      course3_bee_functions_challenge2_instruction: |-
        You are on your own for this
        challenge!
      course3_bee_functions_challenge3_instruction: |-
        Create a new function to collect
        all the nectar and honey while there is a path ahead. Use it to complete the
        puzzle!
      course3_bee_functions_challenge4_instruction: |-
        Use everything you have learned
        to complete this puzzle!
      course3_collector_debugging_challenge2_instruction: |-
        Are you an expert of nested
        loops? Use what you have learned so far to collect all of the treasure!
      course3_farmer_condLoops_challenge1_instruction: |-
        Turn right at the pumpkins.
        Collect everything to complete the level. Each hidden crop has only one corn
        or lettuce.
      course3_farmer_condLoops_challenge2_instruction: |-
        Collect everything to complete
        the level.
      course3_farmer_until_challenge2_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      course3_maze_debugging_challenge1_instruction: |-
        *"Am I just going around in
        circles?"*
      course3_maze_debugging_challenge2_instruction: |-
        *"If I turn too often, I might
        get dizzy! Help me reach the acorn with only four `turn` commands."*
      course3_maze_until_challenge1_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      course3_playLab_challenge1_instruction: |-
        Something should happen when you get
        enough points or when you run out of points. Add some code to the `win game`
        and `lose game` functions to make the game work the way it should. \r
        Click
        the hints for ideas!
      course3_playlab_challenge2_instruction: |-
        Can you figure out how this "Fortune
        Teller" app works? Click `MORE` to see your challenges.
      course3_playlab_stage16_1_instruction: |-
        Riesci a far dire a questo cane "Ciao a tutti"?<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-16#VIDEO" target="_blank">Video doppiato in italiano</a>
      course3_playlab_stage16_2_instruction: Riesci a far dire qualcosa al cane e
        dopo a far dire qualcosa al gatto?
      course3_playlab_stage16_3_instruction: Riesci a scrivere un programma che fa
        arrivare questo cane fino al gatto?
      course3_playlab_stage16_4_instruction: Fai arrivare il cane fino al gatto e
        fai in modo che il gatto dica "Ciao" quando il cane lo raggiunge.
      course3_playlab_stage16_5_instruction: Riesci ad aggiungere un blocco per far
        sì che il polpo sia felice?
      course3_playlab_stage16_6_instruction: Crea una storia come vuoi tu. Quando
        hai fatto, clicca su "Condividi" per far provare la storia ai tuoi amici sui
        loro smartphone.
      course3_playlab_stage17_1_instruction: |-
        Riesci a scrivere un programma per far dire "Ciao" al polpo quando viene cliccato?<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-17#VIDEO" target="_blank">Video doppiato in italiano</a>
      course3_playlab_stage17_2_instruction: Riesci a scrivere un programma che fa
        muovere Waddles quando si usano le frecce su / giù / destra / sinistra per
        colpire tutti i bersagli?
      course3_playlab_stage17_3_instruction: Il blocco `ripeti per sempre`, aggiunto
        in fondo all'area di lavoro, permette di eseguire il codice senza fermarsi
        mai. Puoi attaccare ad esso dei blocchi per spostare il dinosauro (personaggio
        2) in continuazione in su e in giù?
      course3_playlab_stage17_4_instruction: Riesci a far dire "Ahi!" al pinguino
        (personaggio 1) e a `riprodurre il suono di un colpo` se esso sbatte contro
        il dinosauro (personaggio 2), e poi a spostarlo con i tasti freccia per far
        sì che questo accada?
      course3_playlab_stage17_5_instruction: Aggiungi un blocco che segna un punto
        quando Waddles sbatte contro il polpo. Poi spostalo con i tasti freccia fino
        a che fai un punto.
      course3_playlab_stage17_6_instruction: Aggiungi dei blocchi per cambiare lo
        sfondo e la velocità del pinguino (personaggio 1). Poi spostalo con i tasti
        freccia fino a che fai un punto.
      course3_playlab_stage17_7_instruction: Crea una storia come vuoi tu. Quando
        hai fatto, clicca su "Condividi" per far provare la storia ai tuoi amici sui
        loro smartphone.
      course4_artist_binary_challenge1_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      course4_artist_binary_challenge2_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      course4_artist_concept_challenge2_instruction: |-
        Create five pinwheel designs
        using the code below.
      course4_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      course4_artist_fwp_challenge1_instruction: |-
        Try running this program, and make
        changes to see what happens. Can you figure out how it works? (Or delete it
        and replace it with something totally different)
      course4_artist_variables_challenge1_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      course4_artist_variables_challenge2_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      course4_bee_for_challenge1_instruction: |-
        Use this for loop to collect all of
        the nectar. There are a few actions that you will want to repeat 'counter'
        times.
      course4_bee_fwp_challenge1_instruction: |-
        Use one `for loop` in a function to
        collect all of the corn. The same `for loop` can count to different maximum
        values by using the `length` parameter.
      course4_bee_fwp_challenge2_instruction: |-
        Use one `for loop` in a function to
        collect all of the vegetables in the row. Make the `for loop` can count to
        different maximum values by using the `length` parameter. Make your program
        as short as possible by using a second `for loop` outside the function.
      course4_collector_nested_loops_challenge2_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      course4_harvester_nested_loops_challenge1_instruction: |-
        "I need some help
        on the farm! Help me harvest this corn using only the blocks in your toolbox."
      course4_playlab_variables_challenge1_instruction: |-
        Use these blocks to make
        the actors share a knock-knock joke. Change the setup and punchline to tell
        your own joke!
      course4_playlab_variables_challenge3_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseA_artist_loops1_instruction: Questo è un nuovo tipo di esercizio chiamato
        "Artista". Prova a disegnare qualcosa di divertente. Quando sei soddisfatto,
        premi "Termina" per passare all'esercizio successivo.
      courseA_artist_loops10_instruction: Aiutami a posare delle pietre per non cadere
        in acqua!
      courseA_artist_loops10_2018_instruction: |-
        Help me put down stones so I don't
        fall in!
      courseA_artist_loops11_instruction: Aiutami a costruire i gradini per vedere
        la barca che salpa.
      courseA_artist_loops11_2018_instruction: |-
        Help me build steps to watch the
        ship sail away.
      courseA_artist_loops12_instruction: L'Artista ha visto qualcosa di divertente
        al largo. Disegna ciò che pensi abbia visto. Quando sei soddisfatto, premi
        "Termina" per completare la lezione.
      courseA_artist_loops12_2018_instruction: |-
        The artist saw something funny in
        the distance.  Draw what you think he saw.
      courseA_artist_loops1_2018_instruction: |-
        This is a new type of puzzle called
        "Artist". Play with the level and draw something fun.
      courseA_artist_loops2_instruction: 'Aiuta l''artista a disegnare questa linea:
        due volte avanti.'
      courseA_artist_loops2_2018_instruction: |-
        Help the artist draw this line two
        times forward.
      courseA_artist_loops3_instruction: Disegna cinque volte una linea in avanti.
      courseA_artist_loops3_2018_instruction: Disegna cinque volte una linea in avanti.
      courseA_artist_loops4_instruction: Ora, usa un ciclo `ripeti` per disegnare
        questa linea cinque volte!
      courseA_artist_loops4_2018_instruction: |-
        Now, use a `repeat` loop to draw this
        line five times!
      courseA_artist_loops5_instruction: Disegna una linea composta da sette segmenti.
        Questo diventerà il nostro orizzonte.
      courseA_artist_loops5_2018_instruction: |-
        Draw a line seven steps long. This
        will become our horizon.
      courseA_artist_loops6_instruction: Mettiamo una bella collina sullo sfondo.
      courseA_artist_loops6_2018_instruction: Let's put a nice hill in the back.
      courseA_artist_loops7_instruction: Usa il ciclo `ripeti` per aggiungere le onde
        all'acqua.
      courseA_artist_loops7_2018_instruction: |-
        Use the `repeat` loop to add waves
        to the water.
      courseA_artist_loops7_forVideo_instruction: |-
        Use the `repeat` loop to add waves
        to the water.
      courseA_artist_loops8_instruction: Ci serve una scala per salire sulla barca.
      courseA_artist_loops8_2018_instruction: We need a ladder up to the boat.
      courseA_artist_loops9_instruction: 'Sfida: ripara la scaletta.'
      courseA_artist_loops9_2018_instruction: 'Sfida: ripara la scaletta.'
      courseA_artist_loops_challenge1_instruction: |-
        Can you draw a house? Make it
        look just the way you like it!
      courseA_artist_loops_challenge1_2018_instruction: |-
        Can you draw a house? Make
        it look just the way you like it!
      courseA_artist_loops_challenge2_instruction: '"Puoi aiutarmi a costruire due
        casette per gli uccelli?"'
      courseA_artist_loops_challenge2a_instruction: |-
        *"Help me get these three tents
        set up!"*
      courseA_artist_loops_challenge2a_2018_instruction: |-
        *"Help me get these three
        tents set up!"*
      courseA_artist_loops_challenge3_instruction: |-
        Let's play a game! Draw as many
        X's as you can! Can you get 3 in a row?
      courseA_bee_seq1_instruction: |-
        Play with these blocks to help the bee get *one*
        nectar.
      courseA_bee_seq10_instruction: Try it by yourself! Get all the nectar.
      courseA_bee_seq11_instruction: Get all the nectar.
      courseA_bee_seq12_instruction: |-
        Play with these blocks to help the bee get
        *one* nectar.
      courseA_bee_seq13_instruction: |-
        Use three `Move West` blocks and one `Get Nectar`
        block.
      courseA_bee_seq14_instruction: |-
        Use three `Move North` blocks and one `Get
        Nectar` block.
      courseA_bee_seq2_instruction: Help the bee get the nectar!
      courseA_bee_seq3_instruction: Find the bug and fix it!
      courseA_bee_seq4_instruction: Try it yourself!
      courseA_bee_seq5_instruction: Try it yourself!
      courseA_bee_seq6_instruction: Now the bee needs to get nectar from two flowers!
      courseA_bee_seq7_instruction: Add two blocks to finish this puzzle!
      courseA_bee_seq8_instruction: Make sure to get nectar from every flower!
      courseA_bee_seq9_instruction: Make sure to get nectar from every flower!
      courseA_collector_loops1_instruction: |-
        Muovi Laurel raccogliendo più tesori che puoi! <br>
        (Se non sei riuscito a raccogliere tutti i tesori, ma sei soddisfatto, premi il pulsante "Termina")
      courseA_collector_loops10_instruction: Aiuta Laurel a raccogliere tutti i tesori
        lungo questo percorso.
      courseA_collector_loops10_2018_instruction: Aiuta Laurel a raccogliere tutti
        i tesori lungo questo percorso.
      courseA_collector_loops11_instruction: Aiuta Laurel a raccogliere tutti i tesori
        da questa grotta.
      courseA_collector_loops11_2018_instruction: Aiuta Laurel a raccogliere tutti
        i tesori da questa grotta.
      courseA_collector_loops12_instruction: '*"Evviva! Raccogli più tesori che puoi!"*'
      courseA_collector_loops12_2018_instruction: |-
        *"Eureka!  Get as much treasure
        as you can!"*
      courseA_collector_loops1_2018_instruction: |-
        Move Laurel around and get as much
        treasure as you can!
      courseA_collector_loops2_instruction: Raccogli tutte e tre le gemme per completare
        l'esercizio.
      courseA_collector_loops2_2018_instruction: Raccogli tutte e tre le gemme per
        completare l'esercizio.
      courseA_collector_loops4_instruction: Correggi il percorso di Laurel per raccogliere
        tutti i tesori.
      courseA_collector_loops4_2018_instruction: |-
        Fix Laurel's path to get all of
        this treasure.
      courseA_collector_loops5_instruction: Usa quanto imparato sinora per raccogliere
        tutti i tesori.
      courseA_collector_loops5_2018_instruction: |-
        Use what you learned to get all
        of the treasure.
      courseA_collector_loops6_instruction: Aggiungi dei blocchi a questo programma
        per raccogliere tutti i tesori.
      courseA_collector_loops6_2018_instruction: |-
        Add blocks to this code to get
        all of the treasure.
      courseA_collector_loops7_instruction: Cosa devi aggiungere al codice per raccogliere
        tutti i tesori?
      courseA_collector_loops7_2018_instruction: |-
        What should you add to this code
        to get all of the treasure?
      courseA_collector_loops8_instruction: Scrivi del codice per raccogliere tutti
        i tesori.
      courseA_collector_loops8_2018_instruction: Scrivi del codice per raccogliere
        tutti i tesori.
      courseA_collector_loops9_instruction: "**Sfida:** Le gemme salgono le scale!
        Scrivi il codice per aiutare Laurel a raccoglierle tutte."
      courseA_collector_loops9_2018_instruction: |-
        **Challenge:** The treasure goes
        all the way up these stairs!  Write the code to help Laurel get it all.
      courseA_collector_loops_challenge1_instruction: '*"Mi aiuti a trovare alcuni
        errori? So da che parte voglio andare, ma non sono sicuro di quanti passi
        devo fare."*'
      courseA_collector_loops_challenge1_2018_instruction: |-
        *"Can you help me spot
        some bugs?"*
      courseA_collector_loops_challenge2_instruction: 'Raccogli tutto il tesoro! '
      courseA_collector_loops_challenge2kp_instruction: Raccogli almeno *3* pezzi
        del tesoro per completare questo esercizio.
      courseA_collector_loops_challenge2kp_2018_instruction: |-
        Collect at least **3**
        pieces of treasure to pass this level.
      courseA_collector_preLoops1_instruction: |-
        This is Laurel the Adventurer! \r
        \r
        Press
        "Run" to see her walk up to the treasure and grab it.
      courseA_collector_preLoops2_instruction: |-
        Great!  Now you get to add code yourself!  \r
        \r
        Snap
        a `get treasure` block to the bottom of the program and click "Run".
      courseA_collector_preLoops3_instruction: |-
        Snap two `E -->` blocks and one `get
        treasure` block to the bottom of the program, then click "Run".
      courseA_collector_preLoops4_instruction: |-
        Can you figure out how to solve this
        puzzle?
      courseA_collector_preLoops5_instruction: |-
        Get 1 of these 2 gems to solve this
        puzzle.
      courseA_collector_preLoops6_instruction: |-
        Get both pieces of treasure to solve
        this puzzle.
      courseA_collector_preLoops7_instruction: Raccogli tutte e tre le gemme per completare
        l'esercizio.
      courseA_forVideoTest_artist_instruction: |-
        Use the `repeat` loop to add waves
        to the water.
      courseA_harvester_forVideo_instruction: |-
        Can you pick all the corn using only
        **one** move block?
      courseA_harvester_loops1_instruction: Help the farmer pick all the corn!
      courseA_harvester_loops10_instruction: |-
        Help the harvester pick all five ears
        of corn!
      courseA_harvester_loops11_instruction: 'Try one more on your own! '
      courseA_harvester_loops2_instruction: Make sure to pick all the corn!
      courseA_harvester_loops3_instruction: |-
        Can you pick all the corn using only
        **one** move block?
      courseA_harvester_loops4_instruction: |-
        Can you help the harvester find the
        bug in her code?
      courseA_harvester_loops5_instruction: |-
        Try it yourself! Can you pick the corn
        at the end too?
      courseA_harvester_loops5a_instruction: |-
        Look at all this corn! Can you pick
        it all by yourself?
      courseA_harvester_loops5b_instruction: |-
        Can you change your code to make the
        harvester pick all the corn?
      courseA_harvester_loops6_instruction: |-
        You will need **one** `Move South` block
        and **one** `Move West` block.
      courseA_harvester_loops7_instruction: 'Try it on your own! '
      courseA_harvester_loops8_instruction: |-
        This is the same puzzle, but now you
        have to repeat **three** times!
      courseA_harvester_loops9_instruction: |-
        Can you figure out how to pick all the
        corn?
      courseA_harvester_seq1_instruction: |-
        Play with these blocks to help the harvester
        pick the piece of corn.
      courseA_harvester_seq10_instruction: Make sure to pick all the corn!
      courseA_harvester_seq11_instruction: Try it by yourself! Pick all the corn.
      courseA_harvester_seq12_instruction: |-
        Play with these blocks to help the bee
        get *one* nectar.
      courseA_harvester_seq13_instruction: |-
        Play with these blocks to help the harvester
        pick **one** corn.
      courseA_harvester_seq2_instruction: |-
        Use three `move west` blocks and one `pick
        corn` block to solve this puzzle.
      courseA_harvester_seq3_instruction: |-
        Use three `Move North` blocks and one
        `Pick Corn` block.
      courseA_harvester_seq4_instruction: |-
        Add one block to help the harvester pick
        the corn.
      courseA_harvester_seq5_instruction: Find the bug and fix it!
      courseA_harvester_seq6_instruction: Try it yourself!
      courseA_harvester_seq7_instruction: Try it yourself!
      courseA_harvester_seq8_instruction: |-
        Now the harvester needs to pick corn two
        times!
      courseA_harvester_seq9_instruction: Add two blocks to finish this puzzle!
      courseA_maze_ramp2_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseA_maze_ramp2a_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseA_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseA_maze_ramp3a_2018_instruction: |-
        Add a `North` block to the bottom of
        the other blocks to finish this code, then click "Run".
      courseA_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseA_maze_ramp4a_2018_instruction: |-
        Can you figure out which block you need
        to add to the bottom of the other blocks to finish this code?
      courseA_maze_ramp5_2018_instruction: Avoid the TNT.
      courseA_maze_ramp5a_2018_instruction: Get the bird to the pig!
      courseA_maze_seq1_instruction: Fai andare l'uccellino fino al maiale cattivo!
      courseA_maze_seq10_instruction: 'Sfida: aggira la dinamite (TNT) per portare
        l''uccellino fino al maialino! '
      courseA_maze_seq10_2018_instruction: "Challenge: Avoid the TNT to get the bird\nto
        the pig! "
      courseA_maze_seq11_instruction: Muovi in una direzione, poi in un'altra, per
        portare l'uccellino fino al maialino.
      courseA_maze_seq11_2018_instruction: |-
        Move one way, then another to get the
        bird to the pig.
      courseA_maze_seq12_instruction: 'Prendi quel maialino! '
      courseA_maze_seq12_2018_instruction: 'Prendi quel maialino! '
      courseA_maze_seq13_instruction: Prendi quel maialino in qualsiasi modo!
      courseA_maze_seq13_2018_instruction: Prendi quel maialino in qualsiasi modo!
      courseA_maze_seq1_2018_instruction: Fai andare l'uccellino fino al maiale cattivo!
      courseA_maze_seq2_instruction: Modifica il codice per farmi arrivare al maialino!
      courseA_maze_seq2_2018_instruction: Modifica il codice per farmi arrivare al
        maialino!
      courseA_maze_seq3_instruction: Modifica il codice per farmi arrivare al maialino!
      courseA_maze_seq3_2018_instruction: Modifica il codice per farmi arrivare al
        maialino!
      courseA_maze_seq4_instruction: ELIMINA un blocco per far arrivare l'uccellino
        fino al maialino!
      courseA_maze_seq4_2018_instruction: |-
        REMOVE a block to get the bird to the
        pig!
      courseA_maze_seq4a_instruction: |-
        Get the bird to the pig using the fewest possible
        blocks.
      courseA_maze_seq5_instruction: Prova questo da solo dall'inizio.
      courseA_maze_seq5_2018_instruction: Try this one yourself from the beginning.
      courseA_maze_seq5a_2018_instruction: |-
        What can you add to the end of this code
        to get the bird to the pig?
      courseA_maze_seq6_instruction: Muovi in una direzione, poi in un'altra per far
        arrivare l'uccellino fino al maialino!
      courseA_maze_seq6_2018_instruction: |-
        Move one way, then another to get the
        bird to the pig!
      courseA_maze_seq7_instruction: Cerca di capire cosa manca, quindi aggiungi i
        blocchi necessari per far arrivare l'uccellino fino al maialino!
      courseA_maze_seq7_2018_instruction: |-
        Figure out what is missing and then add
        blocks to get the bird to the pig!
      courseA_maze_seq8_instruction: Risolvi questo esercizio per portare l'uccellino
        fino al maialino!
      courseA_maze_seq8_2018_instruction: |-
        Solve this level and get the bird to the
        pig!
      courseA_maze_seq9_instruction: 'Sfida: Correggi gli errori in questo esercizio,
        aggiungendo i blocchi necessari per portare l''uccellino fino al maialino!'
      courseA_maze_seq9_2018_instruction: |-
        Debug this level by adding blocks to get
        the bird to the pig!
      courseA_maze_seq_challenge1_instruction: |-
        Something is wrong here. Help fix
        the code to get the bird to the pig!
      courseA_maze_seq_challenge1_2018_instruction: |-
        Something is wrong here. Help
        fix the code to get the bird to the pig!
      courseA_maze_seq_challenge2_instruction: |-
        Trace the path to lead the bird to
        the pig. Avoid TNT or feathers will fly!
      courseA_maze_seq_challenge2_2018_instruction: |-
        Trace the path to lead the bird
        to the pig. Avoid TNT or feathers will fly!
      courseA_playLab_events1_instruction: Questo è il Laboratorio. Metti dei blocchi
        nell'area di lavoro e prova a vedere cosa succede!
      courseA_playLab_events1_2018_instruction: |-
        This is a Play Lab level.  Move
        blocks to the workspace and see what happens!
      courseA_playLab_events2_instruction: Jorge, il cane, vuole dire "Ciao". Riesci
        ad aiutarlo?
      courseA_playLab_events2_2018_instruction: |-
        Jorge the Dog wants to say "Hi
        there."  Can you help him?
      courseA_playLab_events3_instruction: Aggancia il blocco `sposta il cane a sinistra`
        al blocco verde dell'evento `quando si preme la freccia sinistra` che si trova
        già nell'area di lavoro.
      courseA_playLab_events3_2018_instruction: |-
        Connect the `move left` block to
        the `when left` event block that is already in the workspace.
      courseA_playLab_events4_instruction: Ora fai muovere Jorge a destra quando si
        preme la freccia a destra.
      courseA_playLab_events4_2018_instruction: |-
        Now, get Jorge to move right when
        the `right` button is clicked.
      courseA_playLab_events5_instruction: Aggiungi gli eventi per far muovere Jorge
        su e giù quando si premono le frecce in su e in giù.
      courseA_playLab_events5_2018_instruction: |-
        Add events to have Jorge move up
        and down when the `up` and `down` buttons are pressed.
      courseA_playLab_events6_instruction: Rendi questa scena più interessante, cambiando
        lo sfondo e riproducendo un suono casuale quando si clicca su Jorge.
      courseA_playLab_events6_2018_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      courseA_playLab_events7_instruction: Aggiungi ciò che vuoi a questo gioco. Riesci
        a fare in modo che il dinosauro scompaia quando Jorge sbatte contro di lui?
        (Quando sei soddisfatto, premi "Termina" per completare il corso.)
      courseA_playLab_events7_2018_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      courseA_playlab_events_challenge1_instruction: |-
        Can you write code to show
        the rest of my friends? The hints will help you do this project step-by-step.
      courseA_playlab_events_challenge1_2018_instruction: |-
        Can you write code to
        show the rest of my friends? The hints will help you do this project step-by-step.
      courseA_playlab_events_challenge2_instruction: |-
        Give everyone something to
        do when you click on them.
      courseA_playlab_events_challenge2_2018_instruction: |-
        Give everyone something
        to do when you click on them.
      courseA_playlab_events_challengeClone_instruction: |-
        Where are my friends hiding?
        Can you write code to show the rest of my friends?
      courseA_toMakeLoopsVideo_Collector_instruction: |-
        Loops let you do whatever
        is inside over and over again!
      courseA_video_events_instruction: Need a better playlab/events combo
      courseA_video_events_2018_instruction: Need a better playlab/events combo
      courseB_Scrat_ramp1_2018_instruction: |-
        For this puzzle, snap the blocks together
        and click "Run"!
      courseB_Scrat_ramp2_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseB_Scrat_ramp3a_2018_instruction: |-
        Add a `North` block to the bottom of
        the other blocks to finish this code, then click "Run".
      courseB_Scrat_ramp4a_2018_instruction: |-
        Can you figure out which block you
        need to add to the bottom of the other blocks to finish this code?
      courseB_Scrat_ramp5a_2018_instruction: Get the bird to the pig!
      courseB_artist_loops1_instruction: Questo è un nuovo tipo di esercizio chiamato
        "Artista". Prova a disegnare qualcosa di divertente. Quando sei soddisfatto,
        premi "Termina" per passare all'esercizio successivo.
      courseB_artist_loops10_instruction: |-
        Use what you have learned to draw a picture
        of what you think the artist saw when he got home.
      courseB_artist_loops10_2018_instruction: |-
        Use what you have learned to draw
        a picture of what you think the artist saw when he got home.
      courseB_artist_loops1_2018_instruction: |-
        This is a new type of puzzle called
        "Artist". Play with the level and draw something fun.
      courseB_artist_loops2_instruction: |-
        The Artist is trying to draw a line **6**
        times, but can't get it right.  Can you help?
      courseB_artist_loops2_2018_instruction: |-
        The Artist is trying to draw a line
        **6** times, but can't get it right.  Can you help?
      courseB_artist_loops3_instruction: |-
        Help the artist draw a line 7 times to
        make a garden wall.
      courseB_artist_loops3_2018_instruction: |-
        Help the artist draw a line 7 times
        to make a garden wall.
      courseB_artist_loops4_instruction: "Now we need to get the soil ready to plant.\nFind
        the bugs in the code and help the artist prepare the ground. "
      courseB_artist_loops4_2018_instruction: |
        Now we need to get the soil ready
        to plant. Find the bugs in the code and help the artist prepare the ground.
      courseB_artist_loops5_instruction: |-
        Time to fix the stairs!  Repeat this pattern
        **5** times so the artist can reach the top of the bushes.
      courseB_artist_loops5_2018_instruction: |-
        Time to fix the stairs!  Repeat this
        pattern **5** times so the artist can reach the top of the bushes.
      courseB_artist_loops6_instruction: Climb the vine and see where it goes?
      courseB_artist_loops6_2018_instruction: Climb the vine and see where it goes?
      courseB_artist_loops7_instruction: |-
        **Challenge:**  It's a hidden garden!
        Let's walk around.
      courseB_artist_loops7_2018_instruction: |-
        **Challenge:**  It's a hidden garden!
        Let's walk around.
      courseB_artist_loops8_instruction: |-
        Time to head home. Can you fix this ladder
        using only one block to help the artist get down?
      courseB_artist_loops8_2018_instruction: |-
        Time to head home. Can you fix this
        ladder using only one block to help the artist get down?
      courseB_artist_loops9_instruction: |-
        Let's take the short way home, over the
        pond. Can you help the artist stay on the stones?
      courseB_artist_loops9_2018_instruction: |-
        Let's take the short way home, over
        the pond. Can you help the artist stay on the stones?
      courseB_artist_loops_challenge1_instruction: |-
        "It's time to toss the dice!
        Can you help me draw these?"
      courseB_artist_loops_challenge1_2018_instruction: |-
        "It's time to toss the
        dice! Can you help me draw these?"
      courseB_artist_loops_challenge2_instruction: |-
        Draw as many X's as you can.
        Can you get 3 in a row?
      courseB_artist_loops_challenge2_2018_instruction: |-
        Draw as many X's as you
        can. Can you get 3 in a row?
      courseB_collector_loops1_instruction: Lei è Laurel l'avventuriera! Puoi muoverla
        per farle raccogliere il tesoro?
      courseB_collector_loops10_instruction: Aiuta Laurel a raccogliere tutti i tesori
        da questa grotta.
      courseB_collector_loops10_2018_instruction: Aiuta Laurel a raccogliere tutti
        i tesori da questa grotta.
      courseB_collector_loops11_instruction: |-
        Evviva! Raccogli più tesori che puoi!
        (Se non sei riuscito a raccogliere tutti i tesori, ma sei soddisfatto, premi il pulsante "Termina")
      courseB_collector_loops11_2018_instruction: |-
        Eureka!  Get as much treasure
        as you can!
      courseB_collector_loops1_2018_instruction: Lei è Laurel l'avventuriera! Puoi
        muoverla per farle raccogliere il tesoro?
      courseB_collector_loops2_instruction: |-
        Collect all four piles to pass this
        level.
      courseB_collector_loops2_2018_instruction: |-
        Get all four piles to pass this
        level.
      courseB_collector_loops3_instruction: Come può Laurel raccogliere tutte e cinque
        le perle del tesoro utilizzando un solo blocco 'E-->'?
      courseB_collector_loops3_2018_instruction: |-
        How can Laurel get all five piles
        of treasure using only one `E -->` block?
      courseB_collector_loops3_predict1_instruction: |-
        How can Laurel collect all
        five piles of gold using only one `E -->` block?
      courseB_collector_loops4_instruction: |-
        Fix Laurel's path to get all of this
        treasure!
      courseB_collector_loops4_2018_instruction: |-
        Fix Laurel's path to get all of
        this treasure!
      courseB_collector_loops5_instruction: "Add to the code from the last puzzle\nto
        get all of the treasure. "
      courseB_collector_loops5_2018_instruction: "Add to the code from the last puzzle\nto
        get all of the treasure. "
      courseB_collector_loops6_instruction: |-
        Figure out the code to help Laurel get
        all of the treasure!
      courseB_collector_loops6_2018_instruction: |-
        Figure out the code to help Laurel
        get all of the treasure!
      courseB_collector_loops7_instruction: Write the code to get all of this gold.
      courseB_collector_loops7_2018_instruction: |-
        Write the code to get all of this
        treasure.
      courseB_collector_loops8_instruction: |-
        **Challenge: ** The treasure goes all
        the way down these stairs!  Write the code to help Laurel get it all.
      courseB_collector_loops8_2018_instruction: |-
        **Challenge: ** The treasure goes
        all the way down these stairs!  Write the code to help Laurel get it all.
      courseB_collector_loops9_instruction: |-
        *"Help me get the treasure from this
        deep valley."*
      courseB_collector_loops9_2018_instruction: |-
        *"Help me get the treasure from
        this deep valley."*
      courseB_collector_loops_challenge1_instruction: "This time you have limited\nblocks.
        Get all of the treasure! "
      courseB_collector_loops_challenge1_2018_instruction: "This time you have limited\nblocks.
        Get all of the treasure! "
      courseB_collector_loops_challenge2_instruction: |-
        Let's get the treasure! Help
        me across each row then come back to start the next row. Can you find a pattern?
      courseB_collector_loops_challenge2a_instruction: |-
        Help Laurel get at least
        **5** pieces of treasure to finish this puzzle.
      courseB_collector_loops_challenge2a_2018_instruction: |-
        Help Laurel get at least
        **5** pieces of treasure to finish this puzzle.
      courseB_collector_loops_challenge`_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      courseB_collector_prog1_instruction: |-
        This is Laurel the Adventurer!  Can you
        move her around and get gold?
      courseB_collector_prog2_instruction: Four piles of gold!  Collect all four.
      courseB_collector_prog3_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `E -->` block?
      courseB_iceage_loops1_instruction: |-
        Help Scrat across the ice to get to the
        acorn!
      courseB_iceage_loops10_instruction: |-
        Help Scrat get all the way over to the
        acorn!
      courseB_iceage_loops11_instruction: Help Scrat get to the acorn!
      courseB_iceage_loops12_instruction: Get to the acorn any way you can!
      courseB_iceage_loops2_instruction: |-
        Use two different move blocks to get to
        the acorn!
      courseB_iceage_loops3_instruction: |-
        Can you get to the acorn with just one
        `W` block?
      courseB_iceage_loops4_instruction: |-
        Add one more block to get Scrat all the
        way to the acorn!
      courseB_iceage_loops5_instruction: |-
        Can you add one more loop to get to the
        acorn?
      courseB_iceage_loops6_instruction: Can you add a loop to get to the acorn?
      courseB_iceage_loops7_instruction: 'Scrat really wants that acorn! '
      courseB_iceage_loops8_instruction: 'Can you fix this code? '
      courseB_iceage_loops9_instruction: |-
        The acorn is so far away! Can you use loops
        to help Scrat get there?
      courseB_maze_seq1_instruction: |-
        Gioca con questi blocchi per vedere cosa fanno fare all'uccellino!\r
        \r
        Porta l'uccellino fino al maialino per completare il livello.
      courseB_maze_seq10_instruction: Correggi gli errori per portare l'uccellino
        fino al maialino.
      courseB_maze_seq10_2018_instruction: Fix the bugs to get the bird to the pig.
      courseB_maze_seq11_instruction: Tocca a te! Porta l'uccellino fino al maialino.
      courseB_maze_seq11_2018_instruction: It's all you!  Get the bird to the pig.
      courseB_maze_seq12_instruction: Ora prendi quel maialino in qualsiasi modo!
      courseB_maze_seq12_2018_instruction: Ora prendi quel maialino in qualsiasi modo!
      courseB_maze_seq1_2018_instruction: |-
        Play with these blocks to see what they
        make Scrat do! \r
        \r
        Get Scrat to the acorn to complete the level.
      courseB_maze_seq2_instruction: '*"A bug! Fix the code to get me to the pig."*'
      courseB_maze_seq2_2018_instruction: |-
        A bug! Fix the code to get Scrat to the
        acorn!
      courseB_maze_seq4_instruction: Aggiungi due blocchi per portare l'uccellino
        fino al maialino.
      courseB_maze_seq4_2018_instruction: |-
        Use **2** movement blocks to get the Scrat
        to the acorn.
      courseB_maze_seq5_instruction: Ora prova a risolvere questo esercizio dall'inizio!
      courseB_maze_seq5_2018_instruction: Now try this puzzle from the start!
      courseB_maze_seq6_instruction: Muovi in una direzione, poi in un'altra per far
        arrivare l'uccellino fino al maialino!
      courseB_maze_seq6_2018_instruction: |-
        Move one way, then another to get Scrat
        to the acorn!
      courseB_maze_seq7_instruction: Cerca di capire cosa manca, quindi aggiungi i
        blocchi necessari per far arrivare l'uccellino fino al maialino!
      courseB_maze_seq7_2018_instruction: |-
        Figure out what is missing and then add
        blocks to get Scrat to the acorn!
      courseB_maze_seq8_instruction: È il tuo turno! Cosa ti serve per portare l'uccellino
        dal maialino?
      courseB_maze_seq8_2018_instruction: Ora tocca a te! Cosa ti serve per portare
        l'uccellino dal maialino?
      courseB_maze_seq9_instruction: 'Sfida: Evita la dinamite (TNT) per portare l''uccellino
        fino al maialino.'
      courseB_maze_seq9_2018_instruction: |-
        Challenge: Move around the broken ice
        to get Scrat to the acorn.
      courseB_maze_seq9_challenge1_instruction: "*Where's that pig hiding now?*"
      courseB_maze_seqCold_instruction: |-
        Challenge: Debug this level by adding blocks
        to get the bird to the pig!
      courseB_maze_seqOld_instruction: "Go around the TNT to get the bird to the\npig! "
      courseB_maze_seq_challenge1_instruction: |-
        Can you find a path before you run
        out of blocks?
      courseB_maze_seq_challenge1_2018_instruction: |-
        Can you find a path before you
        run out of blocks?
      courseB_maze_seq_challenge2_instruction: |-
        Debug this level. These are the right
        blocks, but they're in the wrong order!
      courseB_maze_seq_challenge2_2018_instruction: |-
        Debug this level. These are
        the right blocks, but they're in the wrong order!
      courseB_playLab_events1_instruction: |-
        See if you can figure out what each block
        does.
      courseB_playLab_events1_2018_instruction: |-
        See if you can figure out what each
        block does.
      courseB_playlab_events2_instruction: |-
        Have Daisy the Dragon say something when
        you click "Run".
      courseB_playlab_events2_2018_instruction: |-
        Have Daisy the Dragon say something
        when you click "Run".
      courseB_playlab_events3_instruction: |-
        Use an event to make Daisy the Dragon
        switch to a random mood when you click on her.
      courseB_playlab_events3_2018_instruction: |-
        Use an event to make Daisy the Dragon
        switch to a random mood when you click on her.
      courseB_playlab_events4_instruction: |-
        Knight time!  Add an event so that the
        knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events4_2018_instruction: |-
        Knight time!  Add an event so that
        the knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events5_instruction: |-
        Now add an event so that the knight runs
        away from the dragon when you press the right arrow.
      courseB_playlab_events5_2018_instruction: |-
        Now add an event so that the knight
        runs away from the dragon when you press the right arrow.
      courseB_playlab_events6_instruction: |-
        Help your knight get all of the flags!\r
        \r
        To
        do this, you'll need to add events to help the knight move up, down, left,
        and right.
      courseB_playlab_events6_2018_instruction: |-
        Help your knight get all of the
        flags!\r
        \r
        To do this, you'll need to add events to help the knight move
        up, down, left, and right.
      courseB_playlab_events7_instruction: |-
        Make this game fun by setting the knight
        to vanish when he runs into the dragon on his way to get the flags!  Play
        a sound when they collide to make it feel more real.
      courseB_playlab_events7_2018_instruction: |-
        Make this game fun by setting the
        knight to vanish when he runs into the dragon on his way to get the flags!  Play
        a sound when they collide to make it feel more real.
      courseB_playlab_events8_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      courseB_playlab_eventsFP_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      courseB_playlab_eventsFP_2018_instruction: |-
        Use your imagination. What can
        you do to make this game more fun?
      courseB_playlab_eventsToolbox_instruction: |-
        Finish by playing a sound and making
        the knight vanish when he runs into the dragon!
      courseB_playlab_events_challenge1_instruction: "Make the animals move down\nwhen
        you press ▼. "
      courseB_playlab_events_challenge1_2018_instruction: "Make the animals move\ndown
        when you press ▼. "
      courseB_playlab_events_challenge2_instruction: |-
        Make the animals disappear
        when you click on them.
      courseB_playlab_events_challenge2_2018_instruction: |-
        Make the animals disappear
        when you click on them.
      courseB_playlab_events_challenge2_embed_instruction: |-
        Here is your finished
        game!
      courseB_playlab_events_challenge2_template_instruction: |-
        Let's make the animals
        disappear when you click on them! You can also add sounds and score points
        to create a fun game of Animal Tag!
      courseB_playlab_events_challenge2_template_2018_instruction: |-
        Let's make the
        animals disappear when you click on them! You can also add sounds and score
        points to create a fun game of Animal Tag!
      courseB_scrat_forVideo_instruction: Get the acorn!
      courseB_starWars_prog1_instruction: Aiuta BB-8 a recuperare i rottami metallici!
      courseB_starWars_prog10_instruction: Aiuta BB-8 a recuperare i brillanti rottami
        metallici
      courseB_starWars_prog10_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseB_starWars_prog11_instruction: Aiuta BB-8 a recuperare i brillanti rottami
        metallici
      courseB_starWars_prog11_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseB_starWars_prog1_2018_instruction: Aiuta BB-8 a recuperare i rottami metallici!
      courseB_starWars_prog2_instruction: Aiuta BB-8 a recuperare <b>tutti</b> i brillanti
        rottami metallici
      courseB_starWars_prog2_2018_instruction: Aiuta BB-8 a recuperare <b>tutti</b>
        i brillanti rottami metallici
      courseB_starWars_prog3_instruction: Aiuta BB-8 a recuperare <b>tutti</b> i brillanti
        rottami metallici
      courseB_starWars_prog3_2018_instruction: Aiuta BB-8 a recuperare <b>tutti</b>
        i brillanti rottami metallici
      courseB_starWars_prog4_instruction: Aiuta BB-8 a recuperare <b>tutti</b> i brillanti
        rottami metallici
      courseB_starWars_prog4_2018_instruction: Aiuta BB-8 a recuperare <b>tutti</b>
        i brillanti rottami metallici
      courseB_starWars_prog5_instruction: Aiuta BB-8 a recuperare i brillanti rottami
        metallici
      courseB_starWars_prog5_2018_instruction: Aiuta BB-8 a recuperare i brillanti
        rottami metallici
      courseB_starWars_prog6_instruction: Aiuta BB-8 a recuperare <b>tutti</b> i brillanti
        rottami metallici
      courseB_starWars_prog6_2018_instruction: Aiuta BB-8 a recuperare <b>tutti</b>
        i brillanti rottami metallici
      courseB_starWars_prog7_instruction: Aiuta BB-8 a recuperare i brillanti rottami
        metallici
      courseB_starWars_prog7_2018_instruction: Aiuta BB-8 a recuperare i brillanti
        rottami metallici
      courseB_starWars_prog8_instruction: "<b>Sfida:</b> Aiuta BB-8 a recuperare i
        brillanti rottami metallici"
      courseB_starWars_prog8_2018_instruction: |-
        **Challenge:** Help BB-8 gather the
        glowing scrap metal
      courseB_starWars_prog9_instruction: Aiuta BB-8 a recuperare i brillanti rottami
        metallici
      courseB_starWars_prog9_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseC_PlayLab_events1_instruction: |-
        Make Jorge the Dog (actor 1) say "Hi
        there."
      courseC_PlayLab_events1_2018_instruction: |-
        Make Jorge the Dog (actor 1) say
        "Hi there."
      courseC_PlayLab_events2_instruction: |-
        Can you make Jorge the Dog (actor 1)
        say something, then have Olive the Cat (actor 2) say something afterward?
      courseC_PlayLab_events2_2018_instruction: |-
        Can you make Jorge the Dog (actor
        1) say something, then have Olive the Cat (actor 2) say something afterward?
      courseC_PlayLab_events3_instruction: Riesci a scrivere un programma che fa arrivare
        questo cane fino al gatto?
      courseC_PlayLab_events3_2018_instruction: |-
        Can you write a program to make
        Jorge (actor 1) move toward Olive the Cat?
      courseC_PlayLab_events4_instruction: |-
        Can you write a program that makes Jorge
        (actor 1) move to Olive the Cat, and have Olive say "Hi there." when Jorge
        reaches her?
      courseC_PlayLab_events4_2018_instruction: |-
        Can you write a program that makes
        Jorge (actor 1) move to Olive the Cat, and have Olive say "Hi there." when
        Jorge reaches her?
      courseC_PlayLab_events5_instruction: |-
        Can you write a program to make Octavia
        the Octopus say "What's new?" when she is clicked?
      courseC_PlayLab_events5_2018_instruction: |-
        Can you write a program to make
        Octavia the Octopus say "What's new?" when she is clicked?
      courseC_PlayLab_events6_instruction: |-
        Now, write a program to make Waddles
        the Penguin move around using the up / down / left / right keys to hit all
        of the targets!
      courseC_PlayLab_events6_2018_instruction: |-
        Now, write a program to make Waddles
        the Penguin move around using the up / down / left / right keys to hit all
        of the targets!
      courseC_PlayLab_events7_instruction: |-
        The `repeat forever` block allows you
        to run code over and over forever.  Use this block to move Chomp the Dino
        (actor 2) up and down by 400 pixels forever.
      courseC_PlayLab_events7_2018_instruction: |-
        The `repeat forever` block allows
        you to run code over and over forever.  Use this block to move Chomp the Dino
        (actor 2) up and down by 400 pixels forever.
      courseC_PlayLab_events8_instruction: |-
        Can you have Waddles (actor 1) play a
        "hit" sound and say "Ouch!" if he runs into Chomp? \r
        When you're done,
        play the game to make that happen.
      courseC_PlayLab_events8_2018_instruction: |-
        Can you have Waddles (actor 1) play
        a "hit" sound and say "Ouch!" if he runs into Chomp? \r
        When you're
        done, play the game to make that happen.
      courseC_PlayLab_events9_instruction: |-
        Can you add a block to score a point
        when Waddles the Penguin (actor1) runs into Octavia the Octopus (actor 3)?
        \r
        Play the game and move Waddles with the arrows until you score!
      courseC_PlayLab_events9_2018_instruction: |-
        Can you add a block to score a point
        when Waddles the Penguin (actor1) runs into Octavia the Octopus (actor 3)?
        \r
        Play the game and move Waddles with the arrows until you score!
      courseC_PlayLab_eventsA_instruction: |-
        Add blocks to the `when run` event to
        change the background scene and the speed of Waddles the Penguin.\r
        \r
        Play
        the game and move Waddles with the arrows until you score.
      courseC_PlayLab_eventsA_2018_instruction: |-
        Add blocks to the `when run` event
        to change the background scene and the speed of Waddles the Penguin.\r
        \r
        Play
        the game and move Waddles with the arrows until you score.
      courseC_PlayLab_eventsFP_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends. See story ideas in the hints.
      courseC_PlayLab_eventsFP_2018_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends. See story ideas in the hints.
      courseC_PlayLab_events_challenge1_instruction: |-
        Use a new block to make Waddles
        automatically move back to the start when he runs into the Dinosaur and when
        he scores a point. \r
        Play the game and move Waddles with the arrows until
        you score enough points.
      courseC_PlayLab_events_challenge1_2018_instruction: |-
        Use a new block to make
        Waddles automatically move back to the start when he runs into the Dinosaur
        and when he scores a point. \r
        Play the game and move Waddles with the arrows
        until you score enough points.
      courseC_PlayLab_events_challenge1_xy_blocks_instruction: |-
        Here is a new block
        that is somewhat complicated. Use it to move Waddles back to the start when
        he runs into the Dinosaur and when he scores a point. This will make your
        game more challenging and fun!\r
        \r
        Play the game and move Waddles with
        the arrows until you score enough points.
      courseC_artist_loop1_instruction: Let's add some pizazz!
      courseC_artist_loop1_2018_instruction: Let's add some pizazz!
      courseC_artist_loops1_instruction: "<b>\"Zombie. Disegnare!\"</b><br>\n<br>\nLo
        zombie vuole disegnare una linea da dove si trova fino al giardino di girasoli.
        Puoi aiutarlo?<br>\n<b>(Il giardino è distante 250 pixel)</b>  "
      courseC_artist_loops1a_instruction: "Get the artist to the center of the play\narea,
        then draw a bird using a sticker. "
      courseC_artist_loops1a_2018_instruction: "Get the artist to the center of the\nplay
        area, then draw a bird using a sticker. "
      courseC_artist_loops2_instruction: Ora che lo zombie conosce la strada, aiutalo
        a scavare buche <b>lunghe 25 pixel</b> lungo il percorso per piantare più
        fiori!
      courseC_artist_loops2a_instruction: |-
        Now, use a loop to spin your bird around
        12 times with a 30 degree turn.
      courseC_artist_loops2a_2018_instruction: |-
        Now, use a loop to spin your bird
        around 12 times with a 30 degree turn.
      courseC_artist_loops3_instruction: Ottimo! Ora che i fiori sono germogliati,
        aiuta lo zombie a piazzare un amico ogni 50 pixel per proteggerli finché non
        crescono.
      courseC_artist_loops3a_instruction: Now add a bat!
      courseC_artist_loops3a_2018_instruction: Now add a bat!
      courseC_artist_loops4_instruction: Lo zombie ha trovato una fattoria abbandonata!
        Puoi aiutarlo a riportarla in vita incollando adesivi di animali ogni 100
        pixel intorno al bordo?
      courseC_artist_loops4a_instruction: Try jumping forward by 75 pixels.
      courseC_artist_loops4a_2018_instruction: Try jumping forward by 75 pixels.
      courseC_artist_loops5_instruction: |-
        Grande! Ora è il momento di costruire una staccionata per tener fuori gli animali.<br>
        <br>
      courseC_artist_loops5a_instruction: Try new stickers!
      courseC_artist_loops5a_2018_instruction: Try new stickers!
      courseC_artist_loops5b_instruction: Try adding lines!
      courseC_artist_loops5b_2018_instruction: Try adding lines!
      courseC_artist_loops6_instruction: |-
        Cosa dovrebbe mettere lo zombie nel giardino? <br>
        <br>
        <br>
      courseC_artist_loops6a_instruction: Add another sticker!
      courseC_artist_loops6a_2018_instruction: Add another sticker!
      courseC_artist_loops7a_instruction: Play with the loops and angles.
      courseC_artist_loops7a_2018_instruction: Play with the loops and angles.
      courseC_artist_loops8a_instruction: Now try something on your own!
      courseC_artist_loops8a_2018_instruction: Now try something on your own!
      courseC_artist_loopsPre1a_instruction: Time to spin that line around!
      courseC_artist_loopsPre1a_2018_instruction: Time to spin that line around!
      courseC_artist_loopsPrePre1a_instruction: "Get the artist to the center of\nthe
        play area, then draw a line. "
      courseC_artist_loopsPrePre1a_2018_instruction: "Get the artist to the center\nof
        the play area, then draw a line. "
      courseC_artist_loopsTemplate_instruction: Ottimo! Ora che i fiori sono germogliati,
        aiuta lo zombie a piazzare un amico ogni 50 pixel per proteggerli finché non
        crescono.
      courseC_artist_loopsTemplateA_instruction: "Get the artist to the center of\nthe
        play area, then draw a bird using a sticker. "
      courseC_artist_loopsTemplateA_2018_instruction: "Get the artist to the center\nof
        the play area, then draw a bird using a sticker. "
      courseC_artist_prog1_instruction: |-
        Play with the blocks in the toolbox to see
        what they do!
      courseC_artist_prog1_2018_instruction: |-
        Play with the blocks in the toolbox
        to see what they do!
      courseC_artist_prog2_instruction: |-
        Drag blocks onto the screen to have the
        artist draw over the grey lines in the picture. (Each line is 100 pixels long)
      courseC_artist_prog2_2018_instruction: |-
        Drag blocks onto the screen to have
        the artist draw over the grey lines in the picture. (Each line is 100 pixels
        long)
      courseC_artist_prog3_instruction: |-
        Each side of the inner square is 100 pixels
        and all of the angles are 90 degrees.
      courseC_artist_prog3_2018_instruction: |-
        Each side of the inner square is 100
        pixels and all of the angles are 90 degrees.
      courseC_artist_prog4_instruction: |-
        Finish Starla's rocket so she can chase
        her pet.
      courseC_artist_prog4_2018_instruction: |-
        Finish Starla's rocket so she can
        chase her pet.
      courseC_artist_prog5_instruction: |-
        Questa casa ha bisogno di un tetto! Disegna un triangolo.<br><br>
        <b>Suggerimento</b>: tutti e tre i lati hanno la stessa lunghezza.
      courseC_artist_prog5_2018_instruction: |-
        Finish this tag by drawing a rectangle
        around the outside.\r
        (The long sides are 200 pixels each and the short sides
        are each 100 pixels)
      courseC_artist_prog6_instruction: Draw this diamond with 200 pixel sides.
      courseC_artist_prog6_2018_instruction: Draw this diamond with 200 pixel sides.
      courseC_artist_prog7_instruction: |-
        **Challenge:** This tag is a special one!  Can
        you figure out how to draw the outline?
      courseC_artist_prog7_2018_instruction: |-
        **Challenge:** This tag is a special
        one!  Can you figure out how to draw the outline?
      courseC_artist_prog8_instruction: |-
        One more tag.  This is a triangle for Pi.\r
        (Each
        side is 150 pixels)
      courseC_artist_prog8_2018_instruction: |-
        One more tag.  This is a triangle for
        Pi.\r
        (Each side is 150 pixels)
      courseC_artist_prog_challenge1-doghouse_instruction: |-
        Let's build a dog house
        for Jorge!
      courseC_artist_prog_challenge1_instruction: 'Draw rooms for each of the animals.

'
      courseC_artist_prog_challenge1_2018_instruction: "Draw rooms for each of the\nanimals. "
      courseC_artist_prog_challenge2_instruction: |-
        *Help me paint the yellow lines
        on this road!*
      courseC_artist_prog_challenge2a_instruction: |-
        *"Help me paint the yellow lines
        on this road!"*
      courseC_artist_prog_challenge2a_2018_instruction: |-
        *"Help me paint the yellow
        lines on this road!"*
      courseC_collector_loops_challenge2_instruction: |-
        Get at least **5** pieces
        of treasure!
      courseC_collector_loops_challenge2_2018_instruction: |-
        Get at least **5** pieces
        of treasure!
      courseC_collector_prog1_instruction: |-
        Play around with the blocks to see if
        you can help Laurel collect some treasure.
      courseC_collector_prog1_2018_instruction: |-
        Play around with the blocks to see
        if you can help Laurel collect some treasure.
      courseC_collector_prog2_instruction: |-
        Move Laurel to the treasure, then use
        `collect` to pick it up.
      courseC_collector_prog2_2018_instruction: |-
        Move Laurel to the treasure, then
        use `collect` to pick it up.
      courseC_collector_prog3_instruction: |-
        Order these blocks to collect the treasure
        and solve the puzzle.
      courseC_collector_prog3_2018_instruction: |-
        Order these blocks to collect the
        treasure and solve the puzzle.
      courseC_collector_prog4_instruction: |-
        Put these blocks in order to collect
        all of the treasure and solve the puzzle.
      courseC_collector_prog4_2018_instruction: |-
        Put these blocks in order to collect
        all of the treasure and solve the puzzle.
      courseC_collector_prog5_instruction: |-
        These blocks are in the wrong order.
        Can you fix them?
      courseC_collector_prog5_2018_instruction: |-
        These blocks are in the wrong order.
        Can you fix them?
      courseC_collector_prog6_instruction: |-
        Reorder the blocks to collect all of
        the treasure.
      courseC_collector_prog6_2018_instruction: |-
        Reorder the blocks to collect all
        of the treasure.
      courseC_collector_prog7_instruction: |-
        Use blocks from the toolbox to collect
        all of the treasure.
      courseC_collector_prog7_2018_instruction: |-
        Use blocks from the toolbox to collect
        all of the treasure.
      courseC_collector_prog8_instruction: |-
        *"Keep up the good work! Help me collect
        all of the treasure."*
      courseC_collector_prog8_2018_instruction: |-
        *"Keep up the good work! Help me
        collect all of the treasure."*
      courseC_collector_prog9_instruction: '*"Let''s get all of the coins!"*'
      courseC_collector_prog9_2018_instruction: '*"Let''s get all of the treasure!"*'
      courseC_collector_progA_instruction: Help Laurel collect all of the treasure.
      courseC_collector_progB_instruction: |-
        Collect as many coins as you can to finish
        the stage!
      courseC_collector_prog_challenge1_instruction: |-
        Look carefully! Can you collect
        all **10** pieces of treasure?
      courseC_collector_prog_challenge1_2018_instruction: |-
        Look carefully! Can you
        collect all **10** pieces of treasure?
      courseC_collector_prog_challenge2_instruction: |-
        Collect at least **10** pieces
        of treasure to finish this challenge!
      courseC_collector_prog_challenge2_2018_instruction: |-
        Collect at least **10**
        pieces of treasure to finish this challenge!
      courseC_flappy_embed_events_instruction: |-
        Here's an example of a game that
        you're about to create yourself! Play through it one or two times to get
        an idea of what you are about to make.
      courseC_flappy_events1_instruction: |-
        Attach the `flap normal amount` block
        to the `when click` event, then press "Run".    Click or tap on the play
        space to move Flappy to the target.
      courseC_flappy_events10_instruction: 'Create your own Flappy game! '
      courseC_flappy_events10_2018_instruction: 'Create your own Flappy game! '
      courseC_flappy_events1_2018_instruction: |-
        Attach the `flap normal amount` block
        to the `when click` event, then press "Run".    Click or tap on the play
        space to move Flappy to the target.
      courseC_flappy_events2_instruction: |-
        Try adding a block that sets the level
        speed when the "Run" button is pressed.  Play the game and flap to the target
        to continue.
      courseC_flappy_events2_2018_instruction: |-
        Try adding a block that sets the
        level speed when the "Run" button is pressed.  Play the game and flap to
        the target to continue.
      courseC_flappy_events3_instruction: |-
        Attach the `end game` block to the `when
        hit the ground` event.   Play the game and crash the bird into the ground
        to continue.
      courseC_flappy_events3_2018_instruction: |-
        Attach the `end game` block to the
        `when hit the ground` event.   Play the game and crash the bird into the ground
        to continue.
      courseC_flappy_events4_instruction: |-
        Attach a block to the `when hit an obstacle`
        event so that the game ends when Flappy crashes into the first set of pipes.
      courseC_flappy_events4_2018_instruction: |-
        Attach a block to the `when hit an
        obstacle` event so that the game ends when Flappy crashes into the first set
        of pipes.
      courseC_flappy_events5_instruction: |-
        Add a block to the `when pass an obstacle`
        event, then press "Run" to score a point by flying Flappy through the first
        set of pipes.
      courseC_flappy_events5_2018_instruction: |-
        Add a block to the `when pass an
        obstacle` event, then press "Run" to score a point by flying Flappy through
        the first set of pipes.
      courseC_flappy_events6_instruction: |-
        See if you can still score a point after
        making Flappy flap either a smaller or larger amount each time you click.
      courseC_flappy_events6_2018_instruction: |-
        See if you can still score a point
        after making Flappy flap either a smaller or larger amount each time you click.
      courseC_flappy_events7_instruction: |-
        Next, try changing the scene by attaching
        a block to the `when run` event.
      courseC_flappy_events7_2018_instruction: |-
        Next, try changing the scene by attaching
        a block to the `when run` event.
      courseC_flappy_events8_instruction: |-
        Try setting a **random** scene when other
        events happen...for example, when passing an obstacle.
      courseC_flappy_events8_2018_instruction: |-
        Try setting a **random** scene when
        other events happen...for example, when passing an obstacle.
      courseC_flappy_events9_instruction: |-
        To mix things up, instead of ending the
        game when Flappy hits an obstacle, try setting the score back to 0.
      courseC_flappy_events9_2018_instruction: |-
        To mix things up, instead of ending
        the game when Flappy hits an obstacle, try setting the score back to 0.
      courseC_harvester_loops1_instruction: Use loops to pick all of the pumpkins.
      courseC_harvester_loops10_instruction: |-
        Collect all of the corn and all of
        the pumpkins.
      courseC_harvester_loops10_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops11_instruction: |-
        Collect all of the corn and all of
        the pumpkins.
      courseC_harvester_loops11_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops1_2018_instruction: Use loops to pick all of the pumpkins.
      courseC_harvester_loops2_instruction: |-
        Can you combine two different loops
        to move toward the pumpkins, then collect them all?
      courseC_harvester_loops2_2018_instruction: |-
        Can you combine two different loops
        to move toward the pumpkins, then collect them all?
      courseC_harvester_loops3_instruction: Collect all of the pumpkins.
      courseC_harvester_loops3_2018_instruction: Collect all of the pumpkins.
      courseC_harvester_loops4_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops4_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops5_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops5_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops6_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops6_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops7_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops7_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops8_instruction: |-
        **Challenge:** Collect all of the corn
        and all of the pumpkins.
      courseC_harvester_loops8_2018_instruction: |-
        **Challenge:** Collect all of the
        corn and all of the pumpkins.
      courseC_harvester_loops9_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops9_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops_challenge1_instruction: Collect all of the corn.
      courseC_harvester_loops_challenge1a_instruction: Collect all of the corn.
      courseC_harvester_loops_challenge1a_2018_instruction: Collect all of the corn.
      courseC_harvester_loops_challenge2_instruction: |-
        Collect all of the lettuce.
        Avoid the trees and fields!
      courseC_harvester_loops_challenge2_2018_instruction: |-
        Collect all of the lettuce.
        Avoid the trees and fields!
      courseC_harvester_loops_forVid_instruction: |-
        Collect all of the corn, all of
        the lettuce, and all of the pumpkins.
      courseC_maze_debugging1_instruction: |-
        Fix the code to help get Scrat get to
        the acorn.
      courseC_maze_debugging10_instruction: |-
        Debug this level by rearranging and
        changing blocks to get me to the pig!
      courseC_maze_debugging1_2018_instruction: |-
        Fix the code to help get Scrat get
        to the acorn.
      courseC_maze_debugging2_instruction: |-
        Use your debugging skills to get Scrat
        to the acorn.
      courseC_maze_debugging2_2018_instruction: |-
        Use your debugging skills to get
        Scrat to the acorn.
      courseC_maze_debugging3_instruction: Remove blocks to get Skrat to the acorn!
      courseC_maze_debugging3_2018_instruction: |-
        Remove blocks to get Scrat to the
        acorn!
      courseC_maze_debugging4_instruction: |-
        Someone has their directions mixed up!
        Can you help?
      courseC_maze_debugging4_2018_instruction: |-
        Someone has their directions mixed
        up! Can you help?
      courseC_maze_debugging5_instruction: |-
        Debug this level by rearranging and changing
        blocks.
      courseC_maze_debugging5_2018_instruction: |-
        Debug this level by rearranging
        and changing blocks.
      courseC_maze_debugging6_instruction: |-
        Figure out what is wrong and get Scrat
        to the acorn.
      courseC_maze_debugging6_2018_instruction: |-
        Figure out what is wrong and get
        Scrat to the acorn.
      courseC_maze_debugging7_instruction: |-
        **Challenge:** Debug this level by rearranging,
        adding, and deleting blocks.
      courseC_maze_debugging7_2018_instruction: |-
        **Challenge:** Debug this level
        by rearranging, adding, and deleting blocks.
      courseC_maze_debugging8_instruction: |-
        Debug this level to get Scrat to the
        acorn.
      courseC_maze_debugging9_instruction: |-
        Debug this level to get Scrat to the
        acorn.
      courseC_maze_debugging9_2018_instruction: |-
        Debug this level to get Scrat to
        the acorn.
      courseC_maze_debugging_challenge1_instruction: |-
        Help Scrat decide which way
        to turn to get to the acorn.
      courseC_maze_debugging_challenge1_2018_instruction: |-
        Help Scrat decide which
        way to turn to get to the acorn.
      courseC_maze_debugging_challenge2_instruction: |-
        Help Scrat reach the acorn
        with only four `turn` commands.
      courseC_maze_debugging_challenge2_2018_instruction: |-
        Help Scrat reach the acorn
        with only four `turn` commands.
      courseC_maze_loops1_instruction: |-
        Can you get the bird to the pig using 5 of
        the same kind of blocks?
      courseC_maze_loops10_instruction: You are doing great! Keep it up!
      courseC_maze_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_maze_loops2_instruction: |-
        Can you get the bird to the pig by creating
        a loop that uses only one `move forward` block inside of a `repeat`?
      courseC_maze_loops3_instruction: Solve this puzzle by creating a loop!
      courseC_maze_loops4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get the bird to the pig with the fewest number of blocks!
      courseC_maze_loops5_instruction: '*"Get me to the pig as quickly as possible!"*'
      courseC_maze_loops6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence?
      courseC_maze_loops7_instruction: Use what you learned in other puzzles!
      courseC_maze_loops8_instruction: |-
        Challenge: Combine ideas from the last few
        puzzles to complete this level.
      courseC_maze_loops9_instruction: You are doing great! Keep it up!
      courseC_maze_loops_challenge1_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      courseC_maze_loops_challenge1a_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      courseC_maze_loops_challenge1a_2018_instruction: "Now Scrat wants to try using\nloops
        to find his acorn! "
      courseC_maze_loops_challenge2_instruction: |-
        Let's hunt for treasure - using
        loops! Help the collector by debugging this code. Get all of the treasure!
      courseC_maze_programming1_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      courseC_maze_programming1_2018_instruction: |-
        For this puzzle, drag all of the
        blocks together and click "Run" to watch it go!
      courseC_maze_programming2_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox to finish your code.
      courseC_maze_programming2_2018_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox to finish your code.
      courseC_maze_programming3_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseC_maze_programming3_2018_instruction: |-
        There is one extra block that
        is going to cause the bird to crash. Throw it away by dragging it back to
        the toolbox.
      courseC_maze_programming4_instruction: Avoid TNT or feathers will fly!
      courseC_maze_programming4_2018_instruction: Avoid TNT or feathers will fly!
      courseC_maze_programming5_instruction: Avoid the TNT.
      courseC_maze_programming5_2018_instruction: Avoid the TNT.
      courseC_maze_programming6_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseC_maze_programming6_2018_instruction: |-
        "Keep calm and help me find the
        bad pig. Otherwise I might get angry!"
      courseC_maze_programming7_instruction: |-
        **Challenge:** This code has a lot
        of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming7_2018_instruction: |-
        **Challenge:** This code has a
        lot of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming8_instruction: |-
        *"Keep calm and help me find the bad
        pig."*
      courseC_maze_programming8_2018_instruction: |-
        *"Keep calm and help me find
        the bad pig."*
      courseC_maze_programming8_predict1_instruction: |-
        *"Keep calm and help me find
        the bad pig."*
      courseC_maze_programming8_predict1_2018_instruction: |-
        *"Keep calm and help
        me find the bad pig."*
      courseC_maze_programming9_instruction: |-
        *"Now, help me sneak up on the pig
        any way you want to!"*
      courseC_maze_programming9_2018_instruction: |-
        *"Now, help me sneak up on the
        pig any way you want to!"*
      courseC_maze_programming_challenge1_instruction: "The pig is hiding, and the\ngoal
        is to find it. "
      courseC_maze_programming_challenge1_2018_instruction: "The pig is hiding, and\nthe
        goal is to find it. "
      courseC_maze_programming_challenge2_instruction: |-
        Sometimes there is more than
        one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      courseC_maze_programming_challenge2_2018_instruction: |-
        Sometimes there is more
        than one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      courseC_playLab_embedded_instruction: |-
        Here's a game for you to play! To win,
        use your arrow keys to get the penguin to run into the octopus.\r
        \r
        Once
        you are done, you will learn how to make this game!
      courseC_puppy_loops10_instruction: You are doing great! Keep it up!
      courseC_puppy_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_puppy_loops8_instruction: |-
        Challenge: Combine ideas from the last few
        puzzles to complete this level.
      courseC_puppy_loops8courseC_maze_loops8_instruction: |-
        Challenge: Combine ideas
        from the last few puzzles to complete this level.
      courseC_puppy_loops9_instruction: You are doing great! Keep it up!
      courseC_starWars_loops1_instruction: BB-8 recupererà tutti i rottami metallici
        lungo la strada percorsa. Usa 5 blocchi uguali per far sì che BB-8 a recuperi
        tutti i rottami nell'area di gioco.
      courseC_starWars_loops10_instruction: You are doing great! Keep it up!
      courseC_starWars_loops10_2018_instruction: You are doing great! Keep it up!
      courseC_starWars_loops10_predict2_instruction: Stai andando alla grande! Continua
        così!
      courseC_starWars_loops10_predict2_2018_instruction: |-
        You are doing great! Keep
        it up!
      courseC_starWars_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_starWars_loops11_2018_instruction: |-
        You are almost there! This time,
        choose any path you like!
      courseC_starWars_loops1_2018_instruction: |-
        BB-8 will pick up any metal scraps
        along the path where he moves. Use 5 of the same block to get BB-8 to pick
        up all of the scrap metal in the play area.
      courseC_starWars_loops1_predict1_instruction: BB-8 recupererà tutti i rottami
        metallici lungo la strada percorsa. Usa 5 blocchi uguali per far sì che BB-8
        a recuperi tutti i rottami nell'area di gioco.
      courseC_starWars_loops1_predict1_2018_instruction: BB-8 recupererà tutti i rottami
        metallici lungo la strada percorsa. Usa 5 blocchi uguali per far sì che BB-8
        a recuperi tutti i rottami nell'area di gioco.
      courseC_starWars_loops2_instruction: Riesci a far recuperare a BB-8 tutti i
        rottami metallici creando un ciclo con un solo blocco all'interno del blocco
        "ripeti ... volte"?
      courseC_starWars_loops2_2018_instruction: |-
        To get all the scrap metal, try
        creating a loop that uses only one block inside of a `repeat` block.
      courseC_starWars_loops4_instruction: In questo esercizio, BB-8 deve recuperare
        tutti i rottami metallici con il minor numero di blocchi possibile! Usa due
        blocchi "ripeti ... volte".
      courseC_starWars_loops4_2018_instruction: |-
        In this puzzle, two `repeat` loops
        will help you get BB-8 to all of the scrap metal with the fewest number of
        blocks!
      courseC_starWars_loops5_instruction: "*Fai raccogliere a BB-8 tutti i rottami
        metallici il più velocemente possibile!*"
      courseC_starWars_loops5_2018_instruction: |-
        Get BB-8 to pick up all the scrap
        metal as quickly as possible!
      courseC_starWars_loops6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence?
      courseC_starWars_loops6_2018_instruction: |-
        Loops even work with more than one
        block inside!  Can you loop this sequence?
      courseC_starWars_loops7_instruction: Riesci a recuperare tutti i rottami metallici
        usando un solo ciclo? Prova a programmare tutto con blocchi singoli, poi cerca
        il codice ripetuto da mettere nel ciclo.
      courseC_starWars_loops7_2018_instruction: |-
        Can you try to get all the scrap
        metal using just one loop? Try programming it all out then finding the repeating
        code to put in a loop.
      courseC_starWars_loops9_instruction: |-
        Use what you have learned to pick up
        all of the scrap metal!
      courseC_starWars_loops9_2018_instruction: |-
        Use what you have learned to pick
        up all of the scrap metal!
      courseD_Frozen_nested1_instruction: "Draw a small shape, between **20 and 50**\npixels
        wide.  It can be any shape that you like.  "
      courseD_Frozen_nested2_instruction: Ora parti dalla tua forma e disegnane due
        o tre di fila!
      courseD_Frozen_nested3_instruction: Facciamo ruotare queste forme!
      courseD_Frozen_nested4_instruction: È tempo di disegnare queste forme!
      courseD_Frozen_nested5_instruction: Play with the snowflakes!
      courseD_Frozen_nested6_instruction: |-
        Draw a stair-step pattern that uses turns
        between 75 and 105 degrees.
      courseD_Frozen_nested7_instruction: |-
        Now, turn around 180 degrees and draw
        the stair pattern again!
      courseD_Frozen_nested8_instruction: |-
        Spin that shape around 5 or 6 times in
        a circle.
      courseD_Frozen_nested9_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      courseD_artist_1_2018_instruction: |
        Draw a small square with **30** pixel long
        sides.  \r
      courseD_artist_2_2018_instruction: |
        Now, turn right by **60** degrees, then
        draw a straight line **150** pixels long and jump back to the center of the
        play area.\r
      courseD_artist_3_2018_instruction: "Nest all of the code inside of another\n`repeat`
        loop and run it a total of **6** times. "
      courseD_artist_4_2018_instruction: Add a tiny shape to the end of your line!
      courseD_artist_5_2018_instruction: Play with the snowflakes!
      courseD_artist_6_2018_instruction: |
        Try changing your long 150 pixel line into
        6 short lines of **25** pixels, with little turns at the end.\r
      courseD_artist_7_2018_instruction: |-
        Now, turn around 180 degrees and draw the
        stair pattern again!
      courseD_artist_8_2018_instruction: |-
        Spin that shape around 5 or 6 times in
        a circle.
      courseD_artist_9_2018_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      courseD_artist_binary1_instruction: |-
        Use the blocks below to have the artist
        draw "01010101" in binary in the first row.
      courseD_artist_binary1_2018_instruction: |-
        La codifica binaria è una modalità di rappresentazione delle informazioni usando solo due valori. In questa lezione usiamo i valori "spento" (rappresentato dal numero 0 e visualizzato in nero) e "acceso" (rappresentato dal numero 1 e visualizzato in verde scuro).<br>
        Hai a disposizione una griglia di quadrati con cui puoi giocare e creare dei disegni semplicemente accendendo e spegnendo i vari quadrati. Ogni quadrato è quindi analogo ad un pixel dello schermo.<br>
        Riesci a far produrre all'artista il disegno mostrato nella prima riga, la cui codifica binaria è "01010101"?
      courseD_artist_binary2_instruction: |-
        Run this code to see how the artist uses
        binary to draw this pattern.
      courseD_artist_binary2_2018_instruction: |-
        Run this code to see how the artist
        uses binary to draw this pattern.
      courseD_artist_binary3_instruction: |-
        Which of the binary strings below could
        you loop 8 times to draw this image?
      courseD_artist_binary3_2018_instruction: |-
        Which of the binary strings below
        could you loop 8 times to draw this image?
      courseD_artist_binary4_instruction: |-
        Can you draw this pattern by looping just
        three binary digits (0s and 1s)?
      courseD_artist_binary4_2018_instruction: Riesci a disegnare questa figura inserendo
        in un ciclo una stringa binaria di 3 cifre?
      courseD_artist_binary5_instruction: |-
        Each binary string below represents one
        row of this picture. \r
        \r
        Can you rearrange them so it draws a smiley face
        instead of a frown?
      courseD_artist_binary5_2018_instruction: |-
        Each binary string below represents
        one row of this picture. \r
        \r
        Can you rearrange them so it draws a smiley
        face instead of a frown?
      courseD_artist_binary6_instruction: Quale stringa binaria di 6 cifre, ripetuta
        11 volte, ti farà disegnare questa figura?
      courseD_artist_binary6_2018_instruction: Quale stringa binaria di 6 cifre, ripetuta
        11 volte, ti farà disegnare questa figura?
      courseD_artist_binary7_instruction: Quale è la più piccola stringa binaria che
        puoi inserire in un ciclo per disegnare questa figura?
      courseD_artist_binary7_2018_instruction: |-
        What is the shortest binary string
        that you can repeat to draw this image?
      courseD_artist_binary8_instruction: Finish the code to create this drawing.
      courseD_artist_binary8_2018_instruction: Finish the code to create this drawing.
      courseD_artist_binary8_predict1_instruction: |-
        Finish the code to create this
        drawing.
      courseD_artist_binary8_predict1_2018_instruction: |-
        Finish the code to create
        this drawing.
      courseD_artist_binaryFP_instruction: |-
        Here's a higher resolution canvas to
        draw on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start to
        get creative with the bits!
      courseD_artist_binaryFP8_instruction: "**Free Play:**  Draw whatever you want\nin
        binary! "
      courseD_artist_binaryFP_2018_instruction: |-
        Here's a higher resolution canvas
        to draw on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start
        to get creative with the bits!
      courseD_artist_binary_challenge0_instruction: |-
        Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge1_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge1_2018_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge2_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      courseD_artist_binary_challenge2_2018_instruction: |-
        Are you persistent enough
        to restore this logo back to normal?
      courseD_artist_binary_challenge3_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      courseD_artist_embed_frozen_instruction: Press Run to see a snowflake design!
      courseD_artist_embed_frozen2_instruction: Press Run to see a snowflake design.
      courseD_artist_functions10_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseD_artist_functions2_instruction: |
        This time, use the `draw a square`
        function to create the glasses. \r
      courseD_artist_functions3_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseD_artist_functions4_instruction: |-
        Now that you can draw a star, try drawing
        four stars!
      courseD_artist_functions5_instruction: |-
        Draw only those three stars to finish
        this puzzle.
      courseD_artist_functions6_instruction: |-
        Make this window by drawing a square,
        then turning 90 degrees before drawing another, and so on.
      courseD_artist_functions7_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseD_artist_functions8_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseD_artist_functions9_instruction: |-
        Create this image using only the blocks
        provided.
      courseD_artist_nestedLoops1_instruction: |-
        Draw a triangle to kickstart this
        stage.  \r
        (Each side is 100 pixels long and you'll need to turn 120 degrees
        for each exterior angle.)
      courseD_artist_nestedLoops10_instruction: |-
        Take the squares from before, but
        this time only make 7 of them, and lay them out in a row.
      courseD_artist_nestedLoops10_2018_instruction: |-
        Take the squares from before,
        but this time only make 7 of them, and lay them out in a row.
      courseD_artist_nestedLoops1_2018_instruction: |-
        Draw a triangle to kickstart
        this stage.  \r
        (Each side is 100 pixels long and you'll need to turn 120
        degrees for each exterior angle.)
      courseD_artist_nestedLoops1a_instruction: |-
        Now loop the triangle 6 times. \r
        After
        each triangle, you'll need to turn 60 degrees before drawing the next.
      courseD_artist_nestedLoops1a_2018_instruction: 'Now loop the triangle 6 times.

'
      courseD_artist_nestedLoops2_instruction: |-
        This time, complete the puzzle with
        the fewest number of blocks possible.
      courseD_artist_nestedLoops2_2018_instruction: |-
        This time, complete the puzzle
        with the fewest number of blocks possible.
      courseD_artist_nestedLoops3_instruction: |-
        Use your new skills to quickly draw
        the last row of windows for this building.\r
        \r
        The windows are 20 pixel
        squares, each 20 pixels apart.
      courseD_artist_nestedLoops3_2018_instruction: |-
        Use your new skills to quickly
        draw the last row of windows for this building.\r
        \r
        The windows are 20
        pixel squares, each 20 pixels apart.
      courseD_artist_nestedLoops4_instruction: |-
        Great!  Do the same thing with these
        circles.
      courseD_artist_nestedLoops4_2018_instruction: |-
        Great!  Do the same thing with
        these circles.
      courseD_artist_nestedLoops5_instruction: |-
        What happens if you also turn 90
        degrees between circles?
      courseD_artist_nestedLoops5_2018_instruction: |-
        What happens if you also turn
        90 degrees between circles?
      courseD_artist_nestedLoops6_instruction: |-
        Edit blocks within your existing
        code to make this image.
      courseD_artist_nestedLoops7_instruction: |-
        Use what you've learned to make
        this drawing.
      courseD_artist_nestedLoops7_2018_instruction: |-
        Use what you've learned to
        make this drawing.
      courseD_artist_nestedLoops8_instruction: |-
        Using what you have learned in the
        last couple of puzzles, build this image from the beginning.
      courseD_artist_nestedLoops8_2018_instruction: |-
        Using what you have learned
        in the last couple of puzzles, build this image from the beginning.
      courseD_artist_nestedLoops9_instruction: |-
        **Challenge:** Can you figure out
        how to make a picture like this?
      courseD_artist_nestedLoops9_2018_instruction: |-
        **Challenge:** Can you figure
        out how to make a picture like this?
      courseD_artist_nestedLoops9_predict1_instruction: |-
        **Challenge:** Can you figure
        out how to make a picture like this?
      courseD_artist_nestedLoops9_predict1_2018_instruction: |-
        **Challenge:** Can
        you figure out how to make a picture like this?
      courseD_artist_nestedLoopsFP_instruction: |-
        Now it's your turn.  Take the skills
        you have learned and make something that you love!
      courseD_artist_nestedLoopsFP_2018_instruction: |-
        Now it's your turn.  Take
        the skills you have learned and make something that you love!
      courseD_artist_nestedLoopsPre1_instruction: |-
        Create a triangle to kickstart
        this stage.
      courseD_artist_nestedLoops_challenge1_instruction: |-
        Can you figure out how
        to make a picture like this?
      courseD_artist_nestedLoops_challenge1_2018_instruction: |-
        Can you figure out
        how to make a picture like this?
      courseD_artist_nestedLoops_challenge2_instruction: |-
        Fix the code to make this
        picture!
      courseD_artist_nestedLoops_challenge2_2018_instruction: |-
        Fix the code to make
        this picture!
      courseD_artist_project1_instruction: Aiuta Elsa a disegnare una piccola figura
        a tua scelta.
      courseD_artist_project1_2018_instruction: "Draw a small shape, between **20\nand
        50** pixels wide.  It can be any shape that you like.  "
      courseD_artist_project1a_instruction: |-
        Draw a stair-step pattern that uses
        turns between 75 and 105 degrees.
      courseD_artist_project1a_2018_instruction: |-
        Draw a stair-step pattern that
        uses turns between 75 and 105 degrees.
      courseD_artist_project2_instruction: Ora parti dalla tua forma e disegnane due
        o tre di fila!
      courseD_artist_project2_2018_instruction: |-
        Now take your shape and draw two
        or three in a row!
      courseD_artist_project2a_instruction: |-
        Now, turn around 180 degrees and draw
        the stair pattern again!
      courseD_artist_project2a_2018_instruction: |-
        Now, turn around 180 degrees and
        draw the stair pattern again!
      courseD_artist_project3_instruction: Facciamo ruotare queste forme!
      courseD_artist_project3_2018_instruction: |-
        Let's spin that line of shapes
        around!
      courseD_artist_project3a_instruction: |-
        Spin that shape around 5 or 6 times
        in a circle.
      courseD_artist_project3a_2018_instruction: |-
        Spin that shape around 5 or 6 times
        in a circle.
      courseD_artist_project4_instruction: È tempo di disegnare queste forme!
      courseD_artist_project4_2018_instruction: È tempo di disegnare queste forme!
      courseD_artist_project4a_instruction: |-
        Try playing around with what you've
        created. Draw whatever you like!\r
        - What happens if you use two different
        angles in your stair step pattern?\r
        - What happens if you make your diamond
        pattern longer or shorter?\r
        - What does it look like to draw two snowflakes
        on top of one another?
      courseD_artist_project4a_2018_instruction: |-
        Try playing around with what you've
        created. Draw whatever you like!\r
        - What happens if you use two different
        angles in your stair step pattern?\r
        - What happens if you make your diamond
        pattern longer or shorter?\r
        - What does it look like to draw two snowflakes
        on top of one another?
      courseD_artist_project5_instruction: Play with the snowflakes!
      courseD_artist_project5_2018_instruction: Play with the snowflakes!
      courseD_artist_project_embedded_instruction: |-
        Here's what you will soon be
        making!
      courseD_artist_ramp11_instruction: Now make a square using Artist!
      courseD_artist_ramp12_instruction: |-
        Use what you've learned to draw this triangle
        inside of a square.
      courseD_bee_conditionals1_instruction: |-
        Check to see if there's a flower under
        the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals10_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      courseD_bee_conditionals10_2018_instruction: |-
        Collect all of the nectar and
        make all of the honey.
      courseD_bee_conditionals1_predict1_instruction: |-
        Check to see if there's a
        flower under the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals1_predict1_2018_instruction: |-
        Check to see if there's
        a flower under the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals2_instruction: "Check underneath every cloud to see\nif
        it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals2_2018_instruction: "Check underneath every cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals2_test_instruction: "Check underneath every cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals3_instruction: |-
        Help the bee collect all of the nectar.
        \r
        \r
        You can only collect nectar from flowers, but you can check any space
        to see if there is a flower.
      courseD_bee_conditionals3_2018_instruction: |-
        Help the bee collect all of the
        nectar. \r
        \r
        You can only collect nectar from flowers, but you can check
        any space to see if there is a flower.
      courseD_bee_conditionals4_instruction: |-
        Get all of the nectar using as few
        blocks as possible.
      courseD_bee_conditionals4_2018_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      courseD_bee_conditionals5_instruction: |-
        Collect all of the nectar using as
        few blocks as possible
      courseD_bee_conditionals5_2018_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      courseD_bee_conditionals6_instruction: |-
        Some of these clouds might have honeycombs
        under them.  Be sure to check if a honeycomb is hiding behind each cloud!
      courseD_bee_conditionals6_2018_instruction: |-
        Some of these clouds might have
        honeycombs under them.  Be sure to check if a honeycomb is hiding behind each
        cloud!
      courseD_bee_conditionals7_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_2018_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_predict2_instruction: |-
        Use the `if/else` block to
        collect nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_predict2_2018_instruction: |-
        Use the `if/else` block
        to collect nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals8_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseD_bee_conditionals8_2018_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseD_bee_conditionals9_instruction: |-
        Collect all of the nectar or make all
        the honey.
      courseD_bee_conditionals9_2018_instruction: |-
        Collect all of the nectar or make
        all the honey.
      courseD_bee_conditionals_challenge1_instruction: Raccogli tutto il nettare o
        fai tutto il miele.
      courseD_bee_conditionals_challenge1_2018_instruction: |-
        Collect all the nectar
        and make all the honey.
      courseD_bee_conditionals_challenge2_instruction: Raccogli tutto il nettare o
        fai tutto il miele.
      courseD_bee_conditionals_challenge2_2018_instruction: Raccogli tutto il nettare
        o fai tutto il miele.
      courseD_bee_conditionals_challenge3_instruction: Raccogli tutto il nettare o
        fai tutto il miele.
      courseD_bee_debugging1_instruction: |-
        Fix the error(s) to collect all of the
        nectar.
      courseD_bee_debugging2_instruction: |-
        Fix the error(s) to collect all of the
        nectar.
      courseD_bee_debugging3_instruction: |-
        Fix the error(s) to collect all of the
        nectar and make all of the honey.
      courseD_bee_debugging4_instruction: Fix the error(s) to make all of the honey.
      courseD_bee_debugging5_instruction: |-
        Challenge: All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_bee_debugging6_instruction: |-
        Challenge:  Fix the errors to collect
        all of the nectar and make all of the honey.
      courseD_bee_debugging9_instruction: |-
        Help the bee fix the code to get all the
        nectar.
      courseD_bee_debugging_challenge1_instruction: |-
        Watch how the bees gets the
        nectar. Can you use the same kind of pattern to help the bee make all of the
        honey?
      courseD_bee_debugging_challenge1_2018_instruction: |-
        Watch how the bees gets
        the nectar. Can you use the same kind of pattern to help the bee make all
        of the honey?
      courseD_bee_debugging_challenge1a_instruction: |-
        Watch how the bee gets the
        nectar. Use the same pattern to help the bee make all the honey.
      courseD_bee_debugging_challenge2_instruction: |-
        Watch how the bees gets the
        nectar. Can you use the same kind of pattern to help the bee make all of honey?
      courseD_bee_nestedLoops1_instruction: Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1_2018_instruction: |-
        Help the bee collect all of the
        nectar.
      courseD_bee_nestedLoops1a_instruction: Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1a_2018_instruction: |-
        Help the bee collect all of the
        nectar.
      courseD_bee_nestedLoops2_instruction: |-
        This time, help the bee collect all
        of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_2018_instruction: |-
        This time, help the bee collect
        all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_predict1_instruction: |-
        This time, help the bee collect
        all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_predict1_2018_instruction: |-
        This time, help the bee
        collect all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops3_instruction: |-
        Collect all of the nectar from each
        flower.
      courseD_bee_nestedLoops5_instruction: "Collect all of the nectar from each\nflower
        and make honey at the honeycomb. "
      courseD_bee_nestedLoops6_instruction: Make all of the nectar.
      courseD_bee_nestedLoops6_2018_instruction: |-
        Get the zombie to the sunflower
        using only the blocks available.
      courseD_bee_nestedLoops7_instruction: |-
        Challenge: Figure out how to get all
        of the nectar using only the blocks available.
      courseD_bee_nestedLoops7_2018_instruction: |-
        Challenge: Figure out how to get
        all of the nectar using only the blocks available.
      courseD_bee_nestedLoops8_instruction: "Collect all of the nectar from each\nflower
        and make honey at the honeycomb. "
      courseD_bee_nestedLoops8_2018_instruction: "Collect all of the nectar from\neach
        flower and make honey at the honeycomb. "
      courseD_bee_nestedLoops9_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_2018_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_predict2_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_predict2_2018_instruction: Make all of the honey.
      courseD_bee_nested_loops_challenge1_instruction: |-
        Let's hunt for treasure
        - using loops! Help the collector reach at least two piles of treasure using
        only the blocks in your toolbox.
      courseD_bee_nested_loops_challenge2_instruction: |-
        Let's hunt for treasure
        - using loops! Help the collector reach at least two piles of treasure using
        only the blocks in your toolbox.
      courseD_bounce_embed_endgame_instruction: |-
        Use the left and right arrows to
        move the paddle. See how many points you can get before your opponent scores
        twice!
      courseD_bounce_embedded_instruction: Write Instructions Here
      courseD_bounce_events1_instruction: |-
        Attach a block to the "when left arrow"
        block and press "Run" to move the player to the flag.
      courseD_bounce_events10_instruction: |-
        There is now a goal at the top. Attach
        the "score point" and "score opponent point" blocks to the "when ball
        in goal" and "when ball misses paddle" blocks to make a game. See how many
        points you can score before your opponent scores twice.
      courseD_bounce_events10s_instruction: "Attach the `score point` block to the\n`when
        ball in goal` event and the `score opponent point` block to the `when\nball
        misses hand` event to make a game. "
      courseD_bounce_events10s_2018_instruction: "Attach the `score point` block\nto
        the `when ball in goal` event and the `score opponent point` block to the\n`when
        ball misses hand` event to make a game. "
      courseD_bounce_events11_instruction: |-
        You can now attach blocks to the "when
        run" block. You have to attach the new "launch new ball" block in more
        than one place. Also, try changing the scene or the speed of the paddle and
        the ball and see how many points you can score before your opponent scores
        twice.
      courseD_bounce_events11s_instruction: "Attach the `throw new ball` block in\nall
        of the places where the game needs a new ball. "
      courseD_bounce_events11s_2018_instruction: "Attach the `throw new ball` block\nin
        all of the places where the game needs a new ball. "
      courseD_bounce_events12_instruction: |-
        Create your own Bounce game. You can
        change all the visuals and the rules. When you're done, click Finish to let
        friends try your game on their phones.
      courseD_bounce_events12s_instruction: |-
        Make this game your own. You can change
        all the visuals and the rules. When you're done, click "Finish" to let
        friends try your game on their phones.
      courseD_bounce_events12s_2018_instruction: |-
        Make this game your own. You can
        change all the visuals and the rules. When you're done, click "Finish"
        to let friends try your game on their phones.
      courseD_bounce_events1s_instruction: |-
        Attach a block to the "when left arrow"
        block and press "Run" to move the player to the net.
      courseD_bounce_events1s_2018_instruction: |-
        Attach a block to the "when left
        arrow" block and press "Run" to move the player to the net.
      courseD_bounce_events2_instruction: |-
        Attach a block to the "when right arrow"
        and "when left arrow" blocks. Move the paddle to reach both finish targets.
      courseD_bounce_events2s_instruction: |-
        Now, attach a block to the `when right
        event` so that the hand can get to both baskets.
      courseD_bounce_events2s_2018_instruction: |-
        Now, attach a block to the `when
        right event` so that the hand can get to both baskets.
      courseD_bounce_events3_instruction: |-
        Now try something similar with the "when
        up arrow" block. Move the paddle to the finish target at the top.
      courseD_bounce_events3s_instruction: |-
        Now try something similar with the "when
        up arrow" block. Move the paddle to the finish target at the top.
      courseD_bounce_events4_instruction: |-
        This time you need to add four blocks.
        Move the paddle to all four finish targets to complete this puzzle.
      courseD_bounce_events4s_instruction: |-
        This time you need to add four blocks.
        Move the paddle to all four finish targets to complete this puzzle.
      courseD_bounce_events5_instruction: |-
        We're going to send a ball flying down
        towards the paddle. Attach a block to the "when ball hits paddle" block
        to ensure the ball reaches the finish target.
      courseD_bounce_events5s_instruction: |-
        Attach a block to the `when ball hits
        hand` event to ensure the ball reaches the basket.
      courseD_bounce_events5s_2018_instruction: |-
        Attach a block to the `when ball
        hits hand` event to ensure the ball reaches the basket.
      courseD_bounce_events6_instruction: |-
        Now the finish target is on the top. You
        need to attach blocks to both of the "when ball hits" blocks to solve this
        puzzle.
      courseD_bounce_events6s_instruction: |-
        Attach code to make the ball bounce when
        it hits the wall so you can solve this puzzle.
      courseD_bounce_events6s_2018_instruction: |-
        Attach code to make the ball bounce
        when it hits the wall so you can solve this puzzle.
      courseD_bounce_events7_instruction: |-
        Attach blocks to each of the "when"
        blocks. Bounce the ball until it hits the finish target.
      courseD_bounce_events7s_instruction: |-
        Attach sound blocks to make the net swish
        when you hit the basket and have the whistle blow when the ball misses your
        hand. Bounce the ball until it hits the finish target.
      courseD_bounce_events7s_2018_instruction: |-
        Attach sound blocks to make the
        net swish when you hit the basket and have the whistle blow when the ball
        misses your hand. Bounce the ball until it hits the finish target.
      courseD_collector_debugging1_instruction: Correggi gli errori per raccogliere
        tutto il tesoro.
      courseD_collector_debugging1_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging1a_instruction: Correggi gli errori per raccogliere
        tutto il tesoro.
      courseD_collector_debugging1a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging2_instruction: Correggi gli errori per raccogliere
        tutto il tesoro.
      courseD_collector_debugging2_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging2a_instruction: Correggi gli errori per raccogliere
        tutto il tesoro.
      courseD_collector_debugging2a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging3_instruction: Correggi gli errori per raccogliere
        tutto il tesoro.
      courseD_collector_debugging3_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging3a_instruction: Correggi gli errori per raccogliere
        tutto il tesoro.
      courseD_collector_debugging3a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging4_instruction: Correggi gli errori per raccogliere
        tutto il tesoro.
      courseD_collector_debugging4_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging4a_instruction: Correggi gli errori per raccogliere
        tutto il tesoro.
      courseD_collector_debugging4a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging5_instruction: 'Sfida: tutti i blocchi che ti servono
        sono già qui... sfrutta tutte le tue abilità di debugging per capire come
        risolvere questo esercizio.'
      courseD_collector_debugging5_2018_instruction: |-
        All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_collector_debugging5a_instruction: 'Sfida: tutti i blocchi che ti servono
        sono già qui... sfrutta tutte le tue abilità di debugging per capire come
        risolvere questo esercizio.'
      courseD_collector_debugging5a_2018_instruction: |-
        All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_collector_debugging6_instruction: 'Sfida: tutti i blocchi che ti servono
        sono già qui... sfrutta tutte le tue abilità di debugging per capire come
        risolvere questo esercizio.'
      courseD_collector_debugging6_2018_instruction: |-
        Challenge: Use your debugging
        skills to fix the errors and collect all of the treasure.
      courseD_collector_debugging6a_instruction: |-
        Challenge: Use the code in the
        work area to get at least **6** pieces of treasure!
      courseD_collector_debugging6a_2018_instruction: |-
        Challenge: Use the code in
        the work area to get at least **6** pieces of treasure!
      courseD_collector_debugging7_instruction: 'Sfida: tutti i blocchi che ti servono
        sono già qui... sfrutta tutte le tue abilità di debugging per capire come
        risolvere questo esercizio.'
      courseD_collector_debugging_challenge2_instruction: |-
        Are you an expert at nested
        loops? Use what you have learned so far to collect all the treasure!
      courseD_collector_debugging_challenge2_2018_instruction: |-
        Are you an expert
        at nested loops? Use what you have learned so far to collect all the treasure!
      courseD_collector_nested_loops_challenge2_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      courseD_collector_nested_loops_challenge2_2018_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      courseD_collector_nested_loops_challenge2a_instruction: |-
        Help Laurel collect
        at least two piles of treasure.
      courseD_collector_ramp10_instruction: Help Laurel collect all of the treasure.
      courseD_collector_ramp8_instruction: Help Laurel collect all of the treasure.
      courseD_collector_ramp9_instruction: Help Laurel collect all of the treasure.
      courseD_collector_until_challenge1_instruction: |-
        Are you an expert of nested
        loops? Use what you have learned so far to collect all of the treasure!
      courseD_debugging_1_instruction: Fix the error(s) to collect all of the nectar.
      courseD_debugging_2_instruction: Fix the error(s) to collect all of the nectar.
      courseD_debugging_3_instruction: |-
        Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare e produrre tutto il miele.<br><br>
        Ricorda che cliccando su "Fai un passo" puoi eseguire il programma un blocco alla volta.
      courseD_debugging_4_instruction: Fix the error(s) to make all of the honey.
      courseD_debugging_5_instruction: |-
        Challenge: All of the commands that you need
        are already here...now use your debugging skills to figure out how to solve
        this puzzle.
      courseD_debugging_6_instruction: |-
        Challenge:  Fix the errors to collect all
        of the nectar and make all of the honey.
      courseD_farmer_condLoops1_instruction: |-
        Use conditionals to make sure that
        you pick corn only when it's there.
      courseD_farmer_condLoops1_2018_instruction: |-
        Use conditionals to make sure
        that you pick corn only when it's there.
      courseD_farmer_condLoops2_instruction: |-
        Help the harvester collect both corn
        and lettuce from the field.
      courseD_farmer_condLoops2_2018_instruction: |-
        Help the harvester collect both
        corn and lettuce from the field.
      courseD_farmer_condLoops3_instruction: |-
        *"Corn, lettuce, AND pumpkins! Help
        me harvest them all."*
      courseD_farmer_condLoops3_2018_instruction: |-
        *"Corn, lettuce, AND pumpkins!
        Help me harvest them all."*
      courseD_farmer_condLoops4_instruction: |-
        Help the harvester pick all of the
        lettuce in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops4_2018_instruction: |-
        Help the harvester pick all of
        the lettuce in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops4a_instruction: |-
        Help the farmer pick all of the lettuce
        in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops5_instruction: |-
        Collect all of the corn and lettuce,
        then grab the pumpkin at the end.
      courseD_farmer_condLoops5_2018_instruction: |-
        Collect all of the corn and lettuce,
        then grab the pumpkin at the end.
      courseD_farmer_condLoops6_instruction: |-
        Can you figure out how to pick the
        pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops6_2018_instruction: |-
        Can you figure out how to pick
        the pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops7_instruction: |-
        Challenge: Collect all of the corn
        and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops7_2018_instruction: |-
        Challenge: Collect all of the
        corn and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops8_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops8_2018_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_2018_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_predict1_instruction: |-
        Collect all of the corn and
        lettuce, then pick the pumpkin.
      courseD_farmer_condLoops9_predict1_2018_instruction: |-
        Collect all of the corn
        and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops_challenge1_instruction: |-
        Collect everything to complete
        the level. Each hidden crop has only one corn or lettuce.
      courseD_farmer_condLoops_challenge1_2018_instruction: |-
        Collect everything to
        complete the level. Each hidden crop has only one corn or lettuce.
      courseD_farmer_condLoops_challenge2_instruction: |-
        Collect everything to complete
        the level.
      courseD_farmer_condLoops_challenge2_2018_instruction: |-
        Collect everything to
        complete the level.
      courseD_farmer_condLoops_challenge2_clone_instruction: |-
        Collect everything
        to complete the level.
      courseD_farmer_conditionals1_instruction: |-
        Move to the pile of dirt and use
        the `remove` block to remove it.
      courseD_farmer_conditionals10_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_conditionals2_instruction: |-
        Move to the hole and fill it with
        six shovelfuls of dirt, using the `fill` block.
      courseD_farmer_conditionals3_instruction: |-
        Use as few blocks as possible to
        solve this puzzle.
      courseD_farmer_conditionals4_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_conditionals5_instruction: 'Help me remove all of this dirt.

'
      courseD_farmer_conditionals6_instruction: |-
        Use the `while` loop to easily fill
        all of the holes.
      courseD_farmer_conditionals7_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseD_farmer_conditionals8_instruction: "Challenge: Fill all of these holes\nusing
        as few blocks as possible. "
      courseD_farmer_conditionals9_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_until_challenge2_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      courseD_farmer_until_challenge2_2018_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      courseD_farmer_while1_instruction: |-
        Move to the pile of dirt and use the `remove`
        block to remove it.
      courseD_farmer_while10_instruction: "Flatten all of these piles using as few\nblocks
        as possible. "
      courseD_farmer_while10_2018_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_while10_predict2_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_while10_predict2_2018_instruction: "Flatten all of these piles\nusing
        as few blocks as possible. "
      courseD_farmer_while1_2018_instruction: |-
        Move to the pile of dirt and use the
        `remove` block to remove it.
      courseD_farmer_while2_instruction: |-
        Move to the hole and fill it with six shovelfuls
        of dirt, using the `fill` block.
      courseD_farmer_while2_2018_instruction: |-
        Move to the hole and fill it with
        six shovelfuls of dirt, using the `fill` block.
      courseD_farmer_while3_instruction: |-
        Use as few blocks as possible to solve
        this puzzle.
      courseD_farmer_while3_2018_instruction: |-
        Use as few blocks as possible to solve
        this puzzle.
      courseD_farmer_while4_instruction: |-
        Help the farmer remove this entire pile
        using a `while` loop.
      courseD_farmer_while4_2018_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_while4_predict1_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_while4_predict1_2018_instruction: |-
        Help the farmer remove this
        entire pile using a `while` loop.
      courseD_farmer_while5_instruction: 'Help me remove all of this dirt. '
      courseD_farmer_while5_2018_instruction: 'Help me remove all of this dirt. '
      courseD_farmer_while6_instruction: |-
        Use the `while` loop to easily fill all
        of the holes.
      courseD_farmer_while6_2018_instruction: |-
        Use the `while` loop to easily fill
        all of the holes.
      courseD_farmer_while7_instruction: |-
        Fill in the hole at the end of each of
        these paths.
      courseD_farmer_while7_2018_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseD_farmer_while8_instruction: "Challenge: Fill all of these holes using\nas
        few blocks as possible. "
      courseD_farmer_while8_2018_instruction: "Challenge: Fill all of these holes\nusing
        as few blocks as possible. "
      courseD_farmer_while9_instruction: "Flatten all of these piles using as few\nblocks
        as possible. "
      courseD_farmer_while9_2018_instruction: "Flatten all of these piles using as\nfew
        blocks as possible. "
      courseD_farmer_while_challenge1_instruction: Riempi tutte le buche e rimuovi
        tutti i mucchi.
      courseD_farmer_while_challenge1_2018_instruction: |-
        Fill all of the holes and
        remove all of the piles.
      courseD_farmer_while_challenge2_instruction: Riempi tutte le buche e rimuovi
        tutti i mucchi.
      courseD_farmer_while_challenge2_2018_instruction: |-
        Fill all of the holes and
        remove all of the piles.
      courseD_harvester_nested_loops_challenge1-broken_instruction: |-
        "I need some
        help on the farm! Help me harvest this corn using only the blocks in your
        toolbox."
      courseD_harvester_nested_loops_challenge1_instruction: |-
        "I need some help
        on the farm! Help me harvest this corn using only the blocks in your toolbox."
      courseD_harvester_nested_loops_challenge1_2018_instruction: |-
        "I need some
        help on the farm! Help me harvest this corn using only the blocks in your
        toolbox."
      courseD_iceage_loops1_instruction: |-
        Help Scrat across the ice to get to the
        acorn!
      courseD_iceage_loops10_instruction: |-
        Help Scrat get all the way over to the
        acorn!
      courseD_iceage_loops11_instruction: Help Scrat get to the acorn!
      courseD_iceage_loops12_instruction: Get to the acorn any way you can!
      courseD_iceage_loops2_instruction: Use a `turn left` block to get to the acorn!
      courseD_iceage_loops3_instruction: |-
        Can you get to the acorn with just one
        `move forward` block?
      courseD_iceage_loops4_instruction: |-
        Add one more block to get Scrat all the
        way to the acorn!
      courseD_iceage_loops6_instruction: Can you add a loop to get to the acorn?
      courseD_iceage_loops7_instruction: 'Scrat really wants that acorn! '
      courseD_iceage_loops8_instruction: 'Can you fix this code? '
      courseD_iceage_loops9_instruction: |-
        The acorn is so far away! Can you use loops
        to help Scrat get there?
      courseD_maze_loops_challenge1_instruction: |-
        Let's hunt for treasure - using
        loops! Help the collector reach at least two piles of treasure using only
        the blocks in your toolbox.
      courseD_maze_nestedLoops3_instruction: |-
        Get the zombie to the sunflower using
        the fewest number of blocks possible.
      courseD_maze_nestedLoops3_2018_instruction: |-
        Get the zombie to the sunflower
        using the fewest number of blocks possible.
      courseD_maze_nestedLoops4_instruction: "Get the zombie to the sunflower using\nthe
        fewest blocks possible!  "
      courseD_maze_nestedLoops4_2018_instruction: "Get the zombie to the sunflower\nusing
        the fewest blocks possible!  "
      courseD_maze_nestedLoops5_instruction: |-
        Get the zombie to the sunflower using
        the fewest number of blocks possible!
      courseD_maze_nestedLoops5_2018_instruction: |-
        Get the zombie to the sunflower
        using the fewest number of blocks possible!
      courseD_maze_nestedLoops6_instruction: |-
        Get the zombie to the sunflower using
        only the blocks available.
      courseD_maze_nestedLoops6_2018_instruction: |-
        Get the zombie to the sunflower
        using only the blocks available.
      courseD_maze_ramp1_instruction: |-
        For this puzzle, snap all of the blocks together
        and click "Run" to watch it go!
      courseD_maze_ramp1_2018_instruction: |-
        For this puzzle, snap all of the blocks
        together and click "Run" to watch it go!
      courseD_maze_ramp2_instruction: |-
        Drag an extra `move forward` block out of
        the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_maze_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_maze_ramp3_instruction: |-
        There is one extra block that is going to
        cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseD_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseD_maze_ramp4_instruction: Avoid TNT or feathers will fly!
      courseD_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseD_maze_ramp5_instruction: Avoid the TNT.
      courseD_maze_ramp5_2018_instruction: Avoid the TNT.
      courseD_maze_ramp5a_instruction: |-
        Pay attention to the sequence and see if
        you can figure out how to get to that pig!
      courseD_maze_ramp5a_2018_instruction: |-
        Pay attention to the sequence and see
        if you can figure out how to get to that pig!
      courseD_maze_ramp5b_instruction: |-
        Navigate this maze to help the bird find
        the pig!
      courseD_maze_ramp5b_2018_instruction: |-
        Navigate this maze to help the bird
        find the pig!
      courseD_maze_ramp5c_instruction: Help the bird get to the pig.
      courseD_maze_ramp5c_2018_instruction: Help the bird get to the pig.
      courseD_maze_ramp5d_instruction: Get the bird to the pig.
      courseD_maze_ramp5d_2018_instruction: Get the bird to the pig.
      courseD_maze_ramp6_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseD_maze_ramp6a_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseD_maze_ramp7_instruction: "**Challenge:**  Get the bird to the pig!"
      courseD_maze_until1_instruction: Get the angry bird to the pig.
      courseD_maze_until10_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_predict2_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_predict2_2018_instruction: |-
        Help the zombie get to the
        sunflower.
      courseD_maze_until1_2018_instruction: Get the angry bird to the pig.
      courseD_maze_until2_instruction: |-
        Now, use the `repeat until` loop to do the
        same thing without specifying how many times to move forward and turn.
      courseD_maze_until3_instruction: Get the bird to the pig.
      courseD_maze_until3_2018_instruction: Get the bird to the pig.
      courseD_maze_until4_instruction: |-
        Can you get the zombie to the sunflower using
        only the blocks that are available?
      courseD_maze_until4_2018_instruction: |-
        Can you get the zombie to the sunflower
        using only the blocks that are available?
      courseD_maze_until5_instruction: |-
        Use the `if` block to help the zombie decide
        when to turn, then get the zombie to the sunflower.
      courseD_maze_until5_2018_instruction: |-
        Use the `if` block to help the zombie
        decide when to turn, then get the zombie to the sunflower.
      courseD_maze_until6_instruction: Help the zombie get to the sunflower.
      courseD_maze_until6_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until7_instruction: Help the zombie get to the sunflower.
      courseD_maze_until7_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until8_instruction: Help the zombie get to the sunflower.
      courseD_maze_until8_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until9_instruction: |-
        **Challenge:** Avoid the chompers and help
        the zombie get to the sunflower.
      courseD_maze_until9_2018_instruction: |-
        **Challenge:** Avoid the chompers and
        help the zombie get to the sunflower.
      courseD_maze_until_challenge_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_maze_until_challenge1-delete-this-copy_instruction: |-
        No hints, just
        challenge. Get the zombie to the sunflower.
      courseD_maze_until_challenge1_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_maze_until_challenge1_2018_instruction: |-
        No hints, just challenge.
        Get the zombie to the sunflower.
      courseD_maze_until_challenge2_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      courseD_playLab_cond1_instruction: |-
        Get Pegleg to the dragon to solve this
        puzzle.
      courseD_playLab_cond1_2018_instruction: |-
        Get Pegleg to the flags to solve this
        puzzle.
      courseD_playLab_cond2_instruction: "Give Pegleg a point every time he makes\nit
        to the dragon. "
      courseD_playLab_cond2_2018_instruction: "Give Pegleg a point every time he\nmakes
        it to the dragon. "
      courseD_playLab_cond3_instruction: "Make the dragon change between random emotions\nevery
        second.  "
      courseD_playLab_cond3_2018_instruction: "Make the dragon change between random\nemotions
        every second.  "
      courseD_playLab_cond3a_instruction: |-
        Make it so when Pegleg gets to the dragon,
        he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond3a_2018_instruction: |-
        Make it so when Pegleg gets to the
        dragon, he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond3b_instruction: |-
        1) Make the dragon change between random
        emotions every second.  \r
        2) Make it so when Pegleg gets to the dragon,
        he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond4_instruction: |-
        Add some code so that the ninja (actor
        3) starts chasing Pegleg as soon as the game begins.  End the game as a loss
        if the ninja catches him.
      courseD_playLab_cond4_2018_instruction: |-
        Add some code so that the ninja (actor
        3) starts chasing Pegleg as soon as the game begins.  End the game as a loss
        if the ninja catches him.
      courseD_playLab_cond5_instruction: |-
        Add a `repeat forever` loop that continuously
        checks if the score is greater than 5, then ends the game as a win when it
        is.
      courseD_playLab_cond5_2018_instruction: |-
        Add a `repeat forever` loop that continuously
        checks if the score is greater than 5, then ends the game as a win when it
        is.
      courseD_playLab_cond6_instruction: "1)  Slow the ninja (actor 3) down before\nyou
        set him to chase the pirate.  \\r\n2)  If the pirate is greater than 225\npixels
        down, set the ninja to **flee** the pirate.  Otherwise, set the ninja\nto
        **chase** the pirate.  "
      courseD_playLab_cond6_2018_instruction: "1)  Slow the ninja (actor 3) down\nbefore
        you set him to chase the pirate.  \\r\n2)  If the pirate is greater\nthan
        225 pixels down, set the ninja to **flee** the pirate.  Otherwise, set\nthe
        ninja to **chase** the pirate.  "
      courseD_playLab_cond6a_instruction: |-
        If the pirate (actor 1) is in the safe
        zone, wait one second, then deduct a point as long as he stays beneath the
        octopus line.
      courseD_playLab_cond6a_2018_instruction: |-
        If the pirate (actor 1) is in the
        safe zone, wait one second, then deduct a point as long as he stays beneath
        the octopus line.
      courseD_playLab_cond6cloneForTest_instruction: Testing
      courseD_playLab_condFP_instruction: |-
        Now, build your own game to show off to
        your friends!
      courseD_playLab_condFP_2018_instruction: |-
        Now, build your own game to show
        off to your friends!
      courseD_playLab_embedded_instruction: |-
        Move Pegleg the Pirate with the arrow
        keys. Get to the dragon to score points, but avoid the ninja! Standing below
        the line of octopuses will make the ninja stop chasing you, but beware! The
        longer you stay there, the more points you lose. \r
        \r
        Get 5 points to win!
      courseD_scrat_ramp1_instruction: |-
        For this puzzle, snap all of the blocks together
        and click "Run" to watch it go!
      courseD_scrat_ramp1_2018_instruction: |-
        For this puzzle, snap all of the blocks
        together and click "Run" to watch it go!
      courseD_scrat_ramp2_instruction: |-
        Drag an extra `move forward` block out of
        the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_scrat_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_scrat_ramp3_instruction: |-
        There is one extra block that is going to
        cause Scrat to crash. Throw it away by dragging it back to the toolbox.
      courseD_scrat_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause Scrat to crash. Throw it away by dragging it back to the toolbox.
      courseD_scrat_ramp4_instruction: Avoid the cracked ice to keep Scrat safe!
      courseD_scrat_ramp4_2018_instruction: |-
        Avoid the cracked ice to keep Scrat
        safe!
      courseD_scrat_ramp5_instruction: Avoid the cracked ice.
      courseD_scrat_ramp5_2018_instruction: Avoid the cracked ice.
      courseD_scrat_ramp6_instruction: Help Scrat get to the acorn using a loop!
      courseD_scrat_ramp6_2018_instruction: |-
        Help Scrat get to the acorn using a
        loop!
      courseD_scrat_ramp7_instruction: Help Scrat get to the acorn!
      courseD_scrat_ramp7_2018_instruction: Help Scrat get to the acorn!
      courseD_scrat_ramp8_instruction: |-
        Use what you've learned to get Scrat to
        the acorn!
      courseD_scrat_ramp8_2018_instruction: |-
        Use what you've learned to get Scrat
        to the acorn!
      courseE_artist_concept1_instruction: 'Recreate this image. '
      courseE_artist_concept1_2018_instruction: 'Recreate this image. '
      courseE_artist_concept4_instruction: |-
        Recreate this drawing using 13 blocks
        or fewer.
      courseE_artist_concept4_2018_instruction: Recreate this drawing.
      courseE_artist_concept_challenge1_instruction: "Help the artist draw this unique\nshape. "
      courseE_artist_concept_challenge1_2018_instruction: "Help the artist draw this\nunique
        shape. "
      courseE_artist_concept_challenge2_instruction: |-
        Create five pinwheel designs
        using the code below.
      courseE_artist_concept_challenge2_2018_instruction: |-
        Create five pinwheel designs
        using the code below.
      courseE_artist_embed_functions8_instruction: |-
        Look at this level carefully.
        What kind of functions do you see a program needing in order to create a design
        like this. You'll soon make this on your own, so come back here if you need
        help.
      courseE_artist_functions1_instruction: |-
        Help the zombie draw glasses using
        squares with sides of 100 pixels.  \r
        The bridge between the glasses is 75
        pixels long.
      courseE_artist_functions10_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseE_artist_functions10_2018_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseE_artist_functions1_2018_instruction: |-
        Help the zombie draw glasses using
        squares with sides of 100 pixels.  \r
        The bridge between the glasses is 75
        pixels long.
      courseE_artist_functions2_instruction: "This time, use the `draw a square`\nfunction
        to create the glasses. "
      courseE_artist_functions2_2018_instruction: "This time, use the `draw a square`\nfunction
        to create the glasses. "
      courseE_artist_functions3_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseE_artist_functions3_2018_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseE_artist_functions4_instruction: |-
        Now that you can draw a star, try drawing
        four stars!
      courseE_artist_functions4_2018_instruction: |-
        Now that you can draw a star,
        try drawing four stars!
      courseE_artist_functions5_instruction: |-
        Draw only those three stars to finish
        this puzzle.
      courseE_artist_functions5_2018_instruction: |-
        Draw only those three stars to
        finish this puzzle.
      courseE_artist_functions6_instruction: |-
        Make this window by drawing a square,
        then turning 90 degrees before drawing another, and so on.
      courseE_artist_functions6_2018_instruction: |-
        Make this window by drawing a
        square, then turning 90 degrees before drawing another, and so on.
      courseE_artist_functions7_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseE_artist_functions7_2018_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseE_artist_functions8_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions8_2018_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions9_instruction: |-
        Create this image using only the blocks
        provided.
      courseE_artist_functions9_2018_instruction: |-
        Create this image using only the
        blocks provided.
      courseE_artist_functions_challenge_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge1_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge1_2018_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      courseE_artist_functions_challenge2_2018_instruction: |-
        Try this code to see
        how it works, then make the program your own!
      courseE_artist_ramp10_instruction: |-
        Now, drag the code for the last triangle
        into a new loop to spin it around and make a snowflake!
      courseE_artist_ramp11_instruction: Now make a square using Artist!
      courseE_artist_ramp12_instruction: |-
        Use what you've learned to draw this triangle
        inside of a square.
      courseE_artist_ramp8_instruction: Now make a square using Artist!
      courseE_artist_ramp8_2_instruction: Now make a square using Artist!
      courseE_artist_ramp8_2018_instruction: Now make a square using Artist!
      courseE_artist_ramp8_2_2018_instruction: Now make a square using Artist!
      courseE_artist_ramp9_instruction: Use what you've learned to draw this triangle.
      courseE_artist_ramp9_2_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseE_artist_ramp9_2018_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseE_artist_ramp9_2_2018_instruction: |-
        Use what you've learned to draw
        this triangle.
      courseE_bee_concept1_instruction: Raccogli tutto il nettare da ogni fiore. Usa
        un ciclo annidato.
      courseE_bee_concept1_2018_instruction: |-
        Collect all of the nectar from each
        flower.
      courseE_bee_concept2_instruction: |-
        Help the bee make all of the honey. You
        can only make honey at a honeycomb, but you can check any space to see if
        there is a honeycomb.
      courseE_bee_concept2_2018_instruction: 'Help the bee make all of the honey.

'
      courseE_bee_concept3_instruction: |-
        Collect all of the nectar using  as few
        blocks as possible.
      courseE_bee_concept3_2018_instruction: |-
        Collect all of the nectar using  as
        few blocks as possible.
      courseE_bee_concept4_instruction: |-
        Uh oh! The bee is not sure if he should
        collect nectar or make honey. Can you help him out?
      courseE_bee_concept4_2018_instruction: |-
        Uh oh! The bee is not sure if he should
        collect nectar or make honey. Can you help him out?
      courseE_bee_concept5_instruction: |-
        Help the bee collect the nectar from the
        flowers?
      courseE_bee_concept5_2018_instruction: |-
        Help the bee collect the nectar from
        the flowers?
      courseE_bee_functions1_instruction: Raccogli tutto il nettare da ogni fiore.
      courseE_bee_functions10_instruction: |-
        Solve this puzzle by creating a function
        that helps the bee go get all of the honey before returning back to the main
        path.
      courseE_bee_functions10_2018_instruction: |-
        Solve this puzzle by creating a
        function that helps the bee go get all of the honey before returning back
        to the main path.
      courseE_bee_functions1_2018_instruction: |-
        Collect all the nectar from each
        flower.
      courseE_bee_functions2_instruction: |-
        Use the `get 2 nectar` function to collect
        the nectar from each flower.
      courseE_bee_functions2_2018_instruction: |-
        Use the `get 2 nectar` function to
        collect the nectar from each flower.
      courseE_bee_functions3_instruction: |-
        Una "funzione" è una sequenza di blocchi di codice che esegue un compito.<br><br>
        Usa la funzione "prendi 5 dosi" (<i>get 5</i>) che raccoglie ogni volta 5 dosi di nettare.
      courseE_bee_functions3_2018_instruction: |-
        Build the `get 5` function to use
        in this puzzle.
      courseE_bee_functions4_instruction: |-
        La funzione "vai a prendere il nettare" (<i>move and get nectar</i>) sposta l'ape sul fiore, raccoglie il nettare e fa tornare l'ape dove si trovava.<br><br>
        Usa questa funzione per raccogliere tutto il nettare.
      courseE_bee_functions4_2018_instruction: |-
        La funzione "vai a prendere il nettare" (<i>move and get nectar</i>) sposta l'ape sul fiore, raccoglie il nettare e fa tornare l'ape dove si trovava.<br><br>
        Usa questa funzione per raccogliere tutto il nettare.
      courseE_bee_functions5_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      courseE_bee_functions5_2018_instruction: |-
        Now write the function to collect
        nectar from the flowers.
      courseE_bee_functions6_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions6_2018_instruction: |-
        Create a function and call it to
        collect nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions6test_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions7_instruction: |-
        Create your own function that goes down
        a path, gets nectar, makes honey, and then returns the bee to the top of the
        path. Collect all the nectar and make all the honey!
      courseE_bee_functions7_2018_instruction: |-
        Create your own function that goes
        down a path, gets nectar, makes honey, and then returns the bee to the top
        of the path. Collect all the nectar and make all the honey!
      courseE_bee_functions8_instruction: |-
        Create a function that collects all of
        the nectar from each flower.
      courseE_bee_functions8_2018_instruction: |-
        Create a function that collects all
        of the nectar from each flower.
      courseE_bee_functions9_instruction: |-
        Create a function to collect all of the
        nectar from each flower.
      courseE_bee_functions9_2018_instruction: |-
        Create a function to collect all
        of the nectar from each flower.
      courseE_bee_functions9b_instruction: Now try it in Bee!
      courseE_bee_functions_challenge1_instruction: |-
        You are on your own for this
        challenge. This could "bee" harder than it looks!
      courseE_bee_functions_challenge1_2018_instruction: |-
        You are on your own for
        this challenge. This could "bee" harder than it looks!
      courseE_bee_functions_challenge2_instruction: |-
        You are on your own for this
        challenge. Sweet!
      courseE_bee_functions_challenge2_2018_instruction: |-
        You are on your own for
        this challenge. Sweet!
      courseE_bee_ramp14_instruction: |-
        Help the bee follow the path to gather all
        of the honey and all of the nectar.
      courseE_bee_ramp14_2018_instruction: |-
        Help the bee follow the path to gather
        all of the honey and all of the nectar.
      courseE_bee_ramp17_instruction: Use what you have learned to solve this puzzle.
      courseE_collector_ramp10_instruction: Help Laurel collect all of the treasure.
      courseE_collector_ramp8_instruction: Help Laurel collect all of the treasure.
      courseE_collector_ramp9_instruction: Help Laurel collect all of the treasure.
      courseE_farmer_concept1_instruction: |-
        Can you write a program that fills these
        holes until the ground is even?
      courseE_farmer_concept1_2018_instruction: |-
        Can you write a program that fills
        these holes until the ground is even?
      courseE_farmer_concept2_instruction: Collect all of the pumpkins.
      courseE_farmer_concept2_2018_instruction: Collect all of the pumpkins.
      courseE_farmer_concept3_instruction: |-
        Fill in the hole at the end of each of
        these paths.
      courseE_farmer_concept3_2018_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseE_farmer_concept4_instruction: Andiamo ancora più a fondo! Abbiamo annidato
        il ciclo che disegna una cella della griglia all'interno di un altro ciclo,
        per disegnare così tutta la riga di celle. Per completare la griglia, devi
        far tornare l'artista indietro in modo tale da disegnare le righe successive.
        Quale sequenza di blocchi devi posizionare alla fine del ciclo più esterno
        per raggiungere questo obiettivo?
      courseE_farmer_functions1_instruction: |-
        Help the harvester get to the pumpkin
        and pick it.
      courseE_farmer_functions10_instruction: "No one knows what these sprouts will\nbecome.
        \ Use `if` statements to write the code to check and harvest each one.   "
      courseE_farmer_functions10b_instruction: |-
        Use your new function twice to solve
        this puzzle.
      courseE_farmer_functions10b_2018_instruction: |-
        Use your new function twice
        to solve this puzzle.
      courseE_farmer_functions1_2018_instruction: |-
        Help the harvester get to the
        pumpkin and pick it.
      courseE_farmer_functions1a_instruction: |-
        Now help the harvester pick the corn,
        lettuce, **and** pumpkin.
      courseE_farmer_functions1a_2018_instruction: |-
        Now help the harvester pick the
        corn, lettuce, **and** pumpkin.
      courseE_farmer_functions2_instruction: |-
        Now, there will be a different number
        of pumpkins each time you run the program.   \r
        \r
        Use the `while` block
        to pick only as many pumpkins as you need.
      courseE_farmer_functions2a_instruction: |-
        We're going to check lots of squares
        for crops in the next few puzzles.  Let's move everything into a function
        to make it easier.
      courseE_farmer_functions2aALT_instruction: |-
        We're going to check lots of squares
        for crops in the next few puzzles.  Let's move everything into a function
        to make it easier.
      courseE_farmer_functions2b_instruction: |-
        Help the harvester pick the corn and
        pumpkins.
      courseE_farmer_functions2b_2018_instruction: |-
        Help the harvester pick the corn
        and pumpkins.
      courseE_farmer_functions2ba_instruction: |-
        Help the farmer pick the corn and
        pumpkins using the `corn and pumpkin` function.
      courseE_farmer_functions2ba_2018_instruction: |-
        Help the farmer pick the corn
        and pumpkins using the `corn and pumpkin` function.
      courseE_farmer_functions3_instruction: |-
        What happens when the paths to the
        pumpkins are all different lengths?   \r
        \r
        Get them all with as few blocks
        as possible.
      courseE_farmer_functions3b_instruction: |-
        Now help the farmer pick the corn,
        lettuce, **and** pumpkin.
      courseE_farmer_functions3c_instruction: |-
        Now, fill-in the function yourself
        by pulling the blocks from the code and dropping them into the **function
        definition**.
      courseE_farmer_functions3c_2018_instruction: |-
        Now, fill-in the function yourself
        by pulling the blocks from the code and dropping them into the **function
        definition**.
      courseE_farmer_functions4_instruction: |-
        Great!  Now you have code that will
        work to get pumpkins from any size path.\r
        \r
        Let's drag that code into
        a function so we can use it in lots of ways...but first use it to solve this
        puzzle again.
      courseE_farmer_functions4b_instruction: |-
        Use your new function to solve this
        puzzle.
      courseE_farmer_functions4b_2018_instruction: |-
        Use your new function to solve
        this puzzle.
      courseE_farmer_functions5_instruction: |-
        How can you change your program to
        get this function to work for each of these paths?
      courseE_farmer_functions5a_instruction: |-
        How can you change your program to
        get this function to work for each of these paths?
      courseE_farmer_functions5b_instruction: |-
        The crops are now growing in clusters.  Add
        some new `while` loops to your function to make sure you get all of the produce.
      courseE_farmer_functions5c_instruction: Your function will come in handy here.
      courseE_farmer_functions5c_2018_instruction: |-
        Your function will come in handy
        here.
      courseE_farmer_functions6_instruction: |-
        *"Lettuce try something new!"*\r
        \r
        Here's
        some code to collect all of the lettuce.  Move it into a function so we can
        use it later.
      courseE_farmer_functions6b_instruction: Pick all of the produce.
      courseE_farmer_functions6c_instruction: |-
        What do you need to add this program
        to check whether a sprout is corn or lettuce?
      courseE_farmer_functions6c_2018_instruction: |-
        What do you need to add this
        program to check whether a sprout is corn or lettuce?
      courseE_farmer_functions7_instruction: Use your functions to solve this puzzle.
      courseE_farmer_functions7b_instruction: |-
        Help the harvester find her way down
        this confusing path and to the pumpkin by turning left at the corn and right
        at the lettuce.
      courseE_farmer_functions7b_2018_instruction: |-
        Help the harvester find her way
        down this confusing path and to the pumpkin by turning left at the corn and
        right at the lettuce.
      courseE_farmer_functions8_instruction: |-
        **Challenge:**  Solve this puzzle with
        as few blocks as possible.
      courseE_farmer_functions8b_instruction: "**Challenge:** Collect all of the\npumpkins
        using the method from the last puzzle. "
      courseE_farmer_functions8b_2018_instruction: "**Challenge:** Collect all of\nthe
        pumpkins using the method from the last puzzle. "
      courseE_farmer_functions9_instruction: Use conditionals to simplify your program.
      courseE_farmer_functions9b_instruction: |-
        Can you figure out the pattern that
        you need to solve this puzzle?
      courseE_farmer_functions9b_2018_instruction: |-
        Can you figure out the pattern
        that you need to solve this puzzle?
      courseE_farmer_functions9b_clone_instruction: |-
        Can you figure out the pattern
        that you need to solve this puzzle?
      courseE_farmer_predict1_instruction: |-
        Pick all of the lettuce (only while there
        is some to pick.)
      courseE_farmer_predict1_2018_instruction: |-
        Pick all of the lettuce (only while
        there is some to pick.)
      courseE_farmer_ramp11_instruction: |-
        This puzzle also uses nested loops.  Can
        you figure out how?
      courseE_farmer_ramp11a_instruction: "Pick lettuce only while there is still\nlettuce
        to pick. "
      courseE_farmer_ramp11a_2018_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp11b_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp11b_2018_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp12_instruction: |-
        Now use nested loops (`repeat` and `while`)
        to solve this puzzle.
      courseE_farmer_ramp12_2018_instruction: |-
        Now use nested loops to solve this
        puzzle.
      courseE_farmer_ramp12_forswap_instruction: |-
        Now use nested loops to solve this
        puzzle.
      courseE_farmer_ramp12_forswap_2018_instruction: |-
        Now use nested loops to solve
        this puzzle.
      courseE_farmer_ramp12a_instruction: |-
        Help the farmer correctly travel the path
        to gather all of the lettuce.
      courseE_farmer_ramp12a_2018_instruction: |-
        Help the farmer correctly travel
        the path to gather all of the lettuce.
      courseE_farmer_ramp12b_instruction: While there is lettuce, pick lettuce!
      courseE_farmer_ramp12b_2018_instruction: While there is lettuce, pick lettuce!
      courseE_farmer_ramp12c_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12c_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12d_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12d_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12e_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12e_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12f_instruction: |-
        Move forward until you reach the lettuce,
        then turn left **if** there is a path to the left.  Otherwise, turn right.
      courseE_farmer_ramp12f_2018_instruction: |-
        Move forward until you reach the
        lettuce, then turn left **if** there is a path to the left.  Otherwise, turn
        right.
      courseE_farmer_ramp12g_instruction: |-
        Move forward until you reach the lettuce,
        then turn left **if** there is a path to the left.  Otherwise, turn right.
      courseE_farmer_ramp12g_2018_instruction: |-
        Move forward until you reach the
        lettuce, then turn left **if** there is a path to the left.  Otherwise, turn
        right.
      courseE_farmer_ramp13_instruction: |-
        Pick corn if there is corn, and pick lettuce
        while there is lettuce.
      courseE_farmer_ramp13_2018_instruction: |-
        Pick corn if there is corn, and pick
        lettuce while there is lettuce.
      courseE_farmer_ramp15_instruction: |-
        Solve this puzzle using only the blocks
        available.
      courseE_farmer_ramp15_2018_instruction: |-
        Solve this puzzle using only the blocks
        available.
      courseE_farmer_ramp16_instruction: |-
        **Challenge:** Solve this puzzle with the
        fewest number of blocks.
      courseE_maze_predict1_instruction: |-
        This code includes a new block. What do
        you think would happen if you press the "Run" block?
      courseE_maze_predict1_2018_instruction: |-
        This code includes a new block. What
        do you think would happen if you press the "Run" block?
      courseE_maze_ramp1_instruction: |-
        For this puzzle, drag all of the blocks together
        and click "Run" to watch it go!
      courseE_maze_ramp13_instruction: Time for one last puzzle to pull it all together!
      courseE_maze_ramp1_2018_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      courseE_maze_ramp2_instruction: |-
        Drag an extra `move forward` block out of
        the toolbox, then attach all blocks to `when run` to finish your code.
      courseE_maze_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseE_maze_ramp3_instruction: |-
        There is one extra block that is going to
        cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseE_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseE_maze_ramp4_instruction: Avoid TNT or feathers will fly!
      courseE_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseE_maze_ramp5_instruction: Avoid the TNT.
      courseE_maze_ramp5_2018_instruction: Avoid the TNT.
      courseE_maze_ramp6_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseE_maze_ramp6_2018_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseE_maze_ramp7_instruction: |-
        Use what you've learned to get the bird to
        the pig!
      courseE_maze_ramp7_2018_instruction: |-
        Use what you've learned to get the bird
        to the pig!
      courseE_maze_ramp_predict1_instruction: |-
        This code includes a new block. What
        do you think would happen if you press the "Run" block?
      courseE_multi_maze_ramp5_instruction: Avoid the TNT.
      courseE_playLab_challenge1_instruction: |-
        Something should happen when you get
        enough points or when you run out of points. Add some code to the `win game`
        and `lose game` functions to make the game work the way it should. \r
        Click
        the hints for ideas!
      courseE_playLab_challenge1_2018_instruction: |-
        Something should happen when
        you get enough points or when you run out of points. Add some code to the
        `win game` and `lose game` functions to make the game work the way it should.
        \r
        Click the hints for ideas!
      courseE_playLab_embedded_instruction: |-
        This is an example game you can play
        around with. Move the dog with your arrow keys. When the dog touches one of
        the cats, he scores a point! Score 5 points to win!
      courseE_playLab_exampleProject2_instruction: |-
        Here's all of your code to choose
        a card - try adding some other fun features!
      courseE_playLab_scaffold1_instruction: |-
        Choose a background and map, and pick
        an actor to be your game's hero.
      courseE_playLab_scaffold1_2018_instruction: |-
        Choose a background and map, and
        pick an actor to be your game's hero.
      courseE_playLab_scaffold2_instruction: |-
        Use event handlers and actions to make
        your hero move.
      courseE_playLab_scaffold2_2018_instruction: |-
        Use event handlers and actions
        to make your hero move.
      courseE_playLab_scaffold3_instruction: |-
        Add two or more additional actors to
        your game and make them move.
      courseE_playLab_scaffold3_2018_instruction: |-
        Add two or more additional actors
        to your game and make them move.
      courseE_playLab_scaffold4_instruction: |-
        Find some interesting ways to change
        the score in your game. Get the score to show something other than 0 to continue.
      courseE_playLab_scaffold4_2018_instruction: |-
        Find some interesting ways to
        change the score in your game. Get the score to show something other than
        0 to continue.
      courseE_playLab_scaffold5_instruction: |-
        Now spend some time making sure the
        game works the way you want. Include a way to win or lose your game, then
        play until you meet one of those conditions.
      courseE_playLab_scaffold5_2018_instruction: |-
        Now spend some time making sure
        the game works the way you want. Include a way to win or lose your game, then
        play until you meet one of those conditions.
      courseE_playLab_scaffold6_instruction: |-
        You've finished! Now you can play
        your game or share it with your friends and classmates!
      courseE_playLab_scaffold6_2018_instruction: |-
        You've finished! Now you can
        play your game or share it with your friends and classmates!
      courseE_playlab_challenge2_instruction: |-
        Can you figure out how this "Fortune
        Teller" app works? Click `MORE` to see your challenges.
      courseE_playlab_variables_challenge2_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseE_video_createFunctions_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseE_video_createFunctions2_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseE_video_createFunctions2_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      courseE_video_createFunctions_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      courseF_IceAge_1_instruction: Aiuta Sid a dire "Ciao" trascinando il blocco
        `il personaggio 1 dice ...` nell'area di lavoro e collegandolo sotto all'evento
        `quando si clicca su "Esegui"`
      courseF_IceAge_10_instruction: Usa il comando `il personaggio ... lancia` per
        far in modo che Sid (il personaggio 1) lanci dei cuori alla Nonnina (il personaggio
        2) e imposta l'umore della Nonnina a felice quando viene colpita dai cuori.
      courseF_IceAge_11_instruction: È il momento di creare un gioco o una storia
        per conto tuo.
      courseF_IceAge_2_instruction: Aiuta Manny e Sid a salutarsi a vicenda usando
        due volte il blocco `il personaggio ... dice`.
      courseF_IceAge_3_instruction: Scrat è alla ricerca della sua ghianda! Puoi aiutarlo
        a percorrere gli ultimi 200 pixel?
      courseF_IceAge_4_instruction: Collega un blocco all'evento `quando il personaggio
        tocca` per emettere un suono quando Diego incontra Manny.
      courseF_IceAge_5_instruction: Aiuta la Nonnina a fare un po' di esercizio muovendosi
        in continuazione a destra e a sinistra.
      courseF_IceAge_6_instruction: Puoi aiutare Sid a chiamare i suoi amici quando
        si clicca su di lui?
      courseF_IceAge_7_instruction: Scrivi il codice per aiutare Scrat a raccogliere
        tutte le ghiande!
      courseF_IceAge_8_instruction: Puoi completare questo codice per fare in modo
        che si riproduca un suono e si guadagni un punto quando Sid e la Nonnina si
        scontrano?
      courseF_IceAge_9_instruction: Cambia lo sfondo impostandone uno con ghiaccio
        e imposta la velocità di Sid (personaggio 1) a veloce.
      courseF_IceAge_template_instruction: Scrivi il codice per aiutare Scrat a raccogliere
        tutte le ghiande!
      courseF_artist_embed_for7_instruction: |-
        Press Run to see a program in action!
        This one uses for loops.
      courseF_artist_embed_variables9_instruction: |-
        Press Run to see this program
        in action!
      courseF_artist_for1_instruction: |-
        Experiment with the `for` loop and play with
        the `counter` variable.
      courseF_artist_for10_instruction: |-
        Free Play: Try using the `counter` variable
        with other drawing elements to make magical images like this one.
      courseF_artist_for10_2018_instruction: |-
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      courseF_artist_for1_2018_instruction: |-
        Experiment with the `for` loop and play
        with the `counter` variable.
      courseF_artist_for2_instruction: |-
        Create this stack of triangles that goes
        from 50 pixel to 100 pixel sides.
      courseF_artist_for2_2018_instruction: |-
        Create this stack of triangles that
        goes from 50 pixel to 100 pixel sides.
      courseF_artist_for3_instruction: "These triangles go from 20 pixel sides to\n200
        pixel sides, and each triangle is 20 pixels larger than the last. "
      courseF_artist_for3_2018_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. "
      courseF_artist_for4_instruction: |
        These squares start at 15 pixels long. The
        largest is 300 pixels long, and each square is 15 pixels larger than the last.
      courseF_artist_for4_2018_instruction: "These squares start at 15 pixels long.\nThe
        largest is 300 pixels long, and each square is 15 pixels larger than the\nlast. "
      courseF_artist_for5_instruction: |-
        Just one little change to the code from the
        last image can create this drawing. Can you figure out what that change is?
      courseF_artist_for5_2018_instruction: |-
        Just one little change to the code from
        the last image can create this drawing. Can you figure out what that change
        is?
      courseF_artist_for6_instruction: |-
        Recreate your code from the last level, but
        turn 89 degrees to create this twisted square spiral.
      courseF_artist_for6_2018_instruction: |-
        Recreate your code from the last level,
        but turn 89 degrees to create this twisted square spiral.
      courseF_artist_for7_instruction: |-
        Make three small changes to the code from
        the last level to get this!
      courseF_artist_for7_2018_instruction: |-
        Make three small changes to the code
        from the last level to get this!
      courseF_artist_for8_instruction: |-
        Take the angle down to 72 degrees to get
        a spiraled pentagon.
      courseF_artist_for8_2018_instruction: |-
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      courseF_artist_for9_instruction: |-
        **Inspiration:**  Use the counter inside
        the `set alpha` block to get this faded center.
      courseF_artist_for9_2018_instruction: |-
        **Inspiration:**  Use the counter inside
        the `set alpha` block to get this faded center.
      courseF_artist_for_Template_instruction: |-
        Try using some of the code from the
        last level, but turning 89 degrees to create this twisted square spiral.
      courseF_artist_for_Template_2018_instruction: |-
        Try using some of the code from
        the last level, but turning 89 degrees to create this twisted square spiral.
      courseF_artist_for_challenge1_instruction: |-
        Can you figure out how to re-create
        this drawing?
      courseF_artist_for_challenge1_2018_instruction: |-
        Can you figure out how to
        re-create this drawing?
      courseF_artist_for_challenge2_instruction: |-
        Can you figure out how to re-create
        this drawing with a single loop?
      courseF_artist_for_challenge2_2018_instruction: |-
        Can you figure out how to
        re-create this drawing with a single loop?
      courseF_artist_fwp1_instruction: |-
        Edit the function 'draw a square' to find
        bugs.
      courseF_artist_fwp1_2018_instruction: |-
        Edit the function 'draw a square'
        to find bugs.
      courseF_artist_fwp2_instruction: |-
        Edit the function to accept a parameter called
        `length`.
      courseF_artist_fwp2_2018_instruction: |-
        Edit the function to accept a parameter
        called `length`.
      courseF_artist_fwp2_predict1_instruction: |-
        Edit the function to accept a parameter
        called `length`.
      courseF_artist_fwp2_predict1_2018_instruction: |-
        Edit the function to accept
        a parameter called `length`.
      courseF_artist_fwp3_instruction: |-
        Create a function called 'draw a square'
        and use it to outline these four boxes using parameters.
      courseF_artist_fwp3_2018_instruction: |-
        Create a function called 'draw a square'
        and use it to outline these four boxes using parameters.
      courseF_artist_fwp4_instruction: |-
        Edit this function to add a parameter for
        the number of sides in your polygon.
      courseF_artist_fwp4_2018_instruction: |-
        Edit this function to add a parameter
        for the number of sides in your polygon.
      courseF_artist_fwp5_instruction: "Use the function from the last puzzle to\ndraw
        this series of shapes.  "
      courseF_artist_fwp5_2018_instruction: "Use the function from the last puzzle\nto
        draw this series of shapes.  "
      courseF_artist_fwp6_instruction: |-
        Challenge: Edit `draw a spiral edge` to use
        `length` and `sides` parameters, then recreate these shapes.
      courseF_artist_fwp6_2018_instruction: |-
        Challenge: Edit `draw a spiral edge`
        to use `length` and `sides` parameters, then recreate these shapes.
      courseF_artist_fwp7_instruction: |-
        Finish off the `draw a spiral edge` function
        to also ask for a minimum length for the center of the spiral.
      courseF_artist_fwp7_2018_instruction: |-
        Finish off the `draw a spiral edge`
        function to also ask for a minimum length for the center of the spiral.
      courseF_artist_fwp8_instruction: |-
        Can you figure out how to make this drawing
        using the function that you just created?
      courseF_artist_fwp8_2018_instruction: |-
        Can you figure out how to make this
        drawing using the function that you just created?
      courseF_artist_fwp9_instruction: |-
        Freeplay: Draw something awesome! Play with
        the pen width to see how different your drawings look!
      courseF_artist_fwp9_2018_instruction: |-
        Freeplay: Draw something awesome! Play
        with the pen width to see how different your drawings look!
      courseF_artist_fwp_challenge1_instruction: |-
        Can you figure out how this program
        works?
      courseF_artist_fwp_challenge1_2018_instruction: |-
        Can you figure out how this
        program works?
      courseF_artist_fwp_challenge2_instruction: |-
        Use what you learned in the previous
        level to draw an image like this.
      courseF_artist_fwp_challenge2_2018_instruction: |-
        Use what you learned in the
        previous level to draw an image like this.
      courseF_artist_ramp10_instruction: |-
        Now, drag the code for the last triangle
        into a new loop to spin it around and make a snowflake!
      courseF_artist_ramp10_2018_instruction: |-
        Now, drag the code for the last triangle
        into a new loop to spin it around and make a snowflake!
      courseF_artist_ramp8_instruction: Now make a square using Artist!
      courseF_artist_ramp8_2018_instruction: Now make a square using Artist!
      courseF_artist_ramp9_instruction: Use what you've learned to draw this triangle.
      courseF_artist_ramp9_2018_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseF_artist_variables1_instruction: |-
        Let's draw an equilateral triangle
        that is exactly 50 pixels long on each side.
      courseF_artist_variables10_instruction: "Here's your code from the last puzzle.
        \ Try\nediting the variable in other ways.  "
      courseF_artist_variables10_2018_instruction: "Here's your code from the last\npuzzle.
        \ Try editing the variable in other ways.  "
      courseF_artist_variables2_instruction: "Now draw three of those triangles right\nnext
        to each other.   "
      courseF_artist_variables2_2018_instruction: "Now draw three of those triangles\nright
        next to each other.   "
      courseF_artist_variables3_instruction: |-
        Move the length of 50 into a variable
        so we can use it in the next few puzzles.
      courseF_artist_variables3_2018_instruction: |-
        Move the length of 50 into a variable
        so we can use it in the next few puzzles.
      courseF_artist_variables4_instruction: |-
        Now, use the `length` variable to have
        the artist jump forward and down by `length` pixels between triangles.
      courseF_artist_variables4_2018_instruction: |-
        Now, use the `length` variable
        to have the artist jump forward and down by `length` pixels between triangles.
      courseF_artist_variables5_instruction: |-
        Add another set of loops at the end
        of your code to add three more triangles. This time, move forward and up!
      courseF_artist_variables5_2018_instruction: |-
        Add another set of loops at the
        end of your code to add three more triangles. This time, move forward and
        up!
      courseF_artist_variables6_instruction: "Now make the triangles to be 60 pixels\nwide,
        with 60 pixel jumps.  "
      courseF_artist_variables6_2018_instruction: "Now make the triangles to be 60\npixels
        wide, with 60 pixel jumps.  "
      courseF_artist_variables6a_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables6a_2018_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables7_instruction: 'Draw a triangle with 150 pixels sides.

'
      courseF_artist_variables7_2018_instruction: "Draw a triangle with 150 pixels\nsides. "
      courseF_artist_variables8_instruction: |-
        Rebuild the triangle code from the
        last puzzle, but this time use the `set length to` block to reset the `length`
        variable to `length`+10 at the end of each loop iteration.
      courseF_artist_variables8_2018_instruction: |-
        Rebuild the triangle code from
        the last puzzle, but this time use the `set length to` block to reset the
        `length` variable to `length`+10 at the end of each loop iteration.
      courseF_artist_variables9_instruction: |-
        See what happens when you repeat the
        code from the last puzzle 30 times instead of only 3!  Feel free to make your
        lines any color or pattern for some extra zest.
      courseF_artist_variables9_2018_instruction: |-
        See what happens when you repeat
        the code from the last puzzle 30 times instead of only 3!  Feel free to make
        your lines any color or pattern for some extra zest.
      courseF_artist_variablesFP_instruction: "**Freeplay:** Take what you've learned\nand
        make your own drawing. "
      courseF_artist_variablesFP_2018_instruction: "**Freeplay:** Take what you've\nlearned
        and make your own drawing. "
      courseF_artist_variables_10_instruction: "Here's your code from the last puzzle.
        \ Try\nediting the variable in other ways.  "
      courseF_artist_variables_2_instruction: |
        Now use another loop to draw three
        of those triangles right next to each other.   \r
        You can nest the code from
        your last puzzle inside.\r
      courseF_artist_variables_5_instruction: |-
        Add another set of loops at the end
        of your code to add three more triangles. This time, move forward and up!
      courseF_artist_variables_6_instruction: |-
        OOPS! We actually need the triangles
        to be 60 pixels wide, with 60 pixel jumps.  \r
        Aren't you glad you're using
        a variable?
      courseF_artist_variables_6a_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables_9_instruction: |-
        See what happens when you repeat the
        code from the last puzzle 30 times instead of only 3!\r
        \r
        Feel free to
        make your lines any color or pattern for some extra zest.
      courseF_artist_variables_FP_instruction: |-
        **Freeplay:** Take what you've learned
        and make your own drawing. \r
        \r
        How can you use variables with squares,
        pentagons, or hexagons?
      courseF_artist_variables_challenge1_instruction: |-
        Can you create a `length`
        variable and use it to create this pattern?
      courseF_artist_variables_challenge1_2018_instruction: |-
        Can you create a `length`
        variable and use it to create this pattern?
      courseF_artist_variables_challenge1a_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      courseF_artist_variables_challenge2_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this!
      courseF_artist_variables_challenge2_2018_instruction: |-
        You've now learned
        everything you need to know to make a pattern like this!
      courseF_artistembed_variables9_instruction: |-
        See what happens when you repeat
        the code from the last puzzle 30 times instead of only 3!  Feel free to make
        your lines any color or pattern for some extra zest.
      courseF_bee_conditionals10_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      courseF_bee_conditionals10_2018_instruction: |-
        Collect all of the nectar and
        make all of the honey.
      courseF_bee_conditionals1_predict1_instruction: |-
        Check to see if there's a
        flower under the cloud. If there's a flower, get nectar.
      courseF_bee_conditionals1_predict1_2018_instruction: |-
        Check to see if there's
        a flower under the cloud. If there's a flower, get nectar.
      courseF_bee_conditionals2_instruction: "Check underneath each cloud to see\nif
        it is hiding a flower before you get nectar.  "
      courseF_bee_conditionals2_2018_instruction: "Check underneath each cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseF_bee_conditionals3_instruction: 'Help the bee collect all of the nectar.

'
      courseF_bee_conditionals3_2018_instruction: "Help the bee collect all of the\nnectar. "
      courseF_bee_conditionals4_instruction: |-
        Get all of the nectar using as few
        blocks as possible.
      courseF_bee_conditionals4_2018_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      courseF_bee_conditionals5_instruction: |-
        Collect all of the nectar using as
        few blocks as possible
      courseF_bee_conditionals5_2018_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      courseF_bee_conditionals7_predict2_instruction: |-
        Use the `if/else` block to
        collect nectar at flowers and make honey at honeycomb.
      courseF_bee_conditionals7_predict2_2018_instruction: |-
        Use the `if/else` block
        to collect nectar at flowers and make honey at honeycomb.
      courseF_bee_conditionals8_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseF_bee_conditionals8_2018_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseF_bee_for1_instruction: |-
        Collect the nectar from each flower using the
        fewest blocks possible.
      courseF_bee_for10_instruction: "**Challenge:** Take what you've learned about\n`for`
        loops and try to solve this problem. "
      courseF_bee_for10_2018_instruction: "**Challenge:** Take what you've learned\nabout
        `for` loops and try to solve this problem. "
      courseF_bee_for11_instruction: |-
        What should your increment be to collect 15,
        then 12, then 9, 6, 3 nectar?
      courseF_bee_for11_2018_instruction: |-
        What should your increment be to collect
        15, then 12, then 9, 6, 3 nectar?
      courseF_bee_for1_2018_instruction: |-
        Collect the nectar from each flower using
        the fewest blocks possible.
      courseF_bee_for2_instruction: |-
        Write the code to help the bee collect all of
        the nectar.
      courseF_bee_for2_2018_instruction: |-
        Write the code to help the bee collect
        all of the nectar.
      courseF_bee_for3_instruction: |-
        Try this puzzle using the `for` loop and the
        `counter` variable to see how much shorter your code becomes.
      courseF_bee_for4_instruction: Help the bee collect all of the nectar.
      courseF_bee_for4_2018_instruction: Help the bee collect all of the nectar.
      courseF_bee_for5_instruction: |-
        Use the `counter` variable twice to solve this
        puzzle.
      courseF_bee_for5_2018_instruction: |-
        Use the `counter` variable twice to solve
        this puzzle.
      courseF_bee_for6_instruction: |-
        Try gathering this nectar by counting down from
        5 to 1 by 1.
      courseF_bee_for6_2018_instruction: |-
        Try gathering this nectar by counting down
        from 5 to 1 by 1.
      courseF_bee_for7_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      courseF_bee_for7_2018_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      courseF_bee_for8_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for8_2018_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for9_instruction: |-
        Use the `counter` variable to navigate this
        garden with the fewest number of blocks possible.
      courseF_bee_for9_2018_instruction: |-
        Use the `counter` variable to navigate
        this garden with the fewest number of blocks possible.
      courseF_bee_for_challenge1_instruction: "Use this `for loop` to collect all\nof
        the nectar. "
      courseF_bee_for_challenge1_2018_instruction: "Use this `for loop` to collect\nall
        of the nectar. "
      courseF_bee_for_challenge2_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_for_challenge2_2018_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_for_challenge3_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_functions2_instruction: |-
        Use the `get only nectar` function to
        collect the nectar from each flower.
      courseF_bee_functions2_2018_instruction: |-
        Use the `get only nectar` function
        to collect the nectar from each flower.
      courseF_bee_functions3_instruction: |-
        Click "edit" to put code inside the
        `only make honey` function, then use it to solve this puzzle.
      courseF_bee_functions3_2018_instruction: |-
        Click "edit" to put code inside
        the `only make honey` function, then use it to solve this puzzle.
      courseF_bee_functions3a_instruction: |-
        Write a function that gets nectar if
        the bee is at a flower, otherwise it gets honey.  Use your function to solve
        the puzzle!
      courseF_bee_functions3a_2018_instruction: |-
        Write a function that gets nectar
        if the bee is at a flower, otherwise it gets honey.  Use your function to
        solve the puzzle!
      courseF_bee_functions4_instruction: |-
        La funzione "vai a prendere il nettare" (<i>move and get nectar</i>) sposta l'ape sul fiore, raccoglie il nettare e fa tornare l'ape dove si trovava.<br><br>
        Usa questa funzione per raccogliere tutto il nettare.
      courseF_bee_functions4_2018_instruction: |-
        La funzione "vai a prendere il nettare" (<i>move and get nectar</i>) sposta l'ape sul fiore, raccoglie il nettare e fa tornare l'ape dove si trovava.<br><br>
        Usa questa funzione per raccogliere tutto il nettare.
      courseF_bee_functions5_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      courseF_bee_functions5a_instruction: |-
        Use the `move and check` function to
        collect all of the nectar.
      courseF_bee_functions5a_2018_instruction: |-
        Use the `move and check` function
        to collect all of the nectar.
      courseF_bee_functions6_instruction: |-
        Help the bee through the maze by turning
        left at flowers and right at honeycomb.
      courseF_bee_functions6_2018_instruction: |-
        Help the bee through the maze by
        turning left at flowers and right at honeycomb.
      courseF_bee_functions7_instruction: |-
        Rebuild your function from the last puzzle
        to solve this maze.
      courseF_bee_functions7_2018_instruction: |-
        Rebuild your function from the last
        puzzle to solve this maze.
      courseF_bee_functions8a_instruction: |-
        Collect all the nectar or make all of
        the honey!
      courseF_bee_functions8a_2018_instruction: |-
        Collect all the nectar or make all
        of the honey!
      courseF_bee_functionsPre7_instruction: |-
        Now try building a function to solve
        this maze.  How is it different from last time?
      courseF_bee_functionsPre7_2018_instruction: |-
        Now try building a function to
        solve this maze.  How is it different from last time?
      courseF_bee_functions_challenge1_instruction: |-
        Create a new function to collect
        all the nectar and honey while there is a path ahead.
      courseF_bee_functions_challenge1_2018_instruction: |-
        Create a new function to
        collect all the nectar and honey while there is a path ahead.
      courseF_bee_functions_challenge2_instruction: |-
        Use everything you have learned
        to complete this puzzle!
      courseF_bee_functions_challenge2_2018_instruction: |-
        Use everything you have
        learned to complete this puzzle!
      courseF_bee_functions_challenge2_recursion_instruction: |-
        Collect all the nectar
        or make all of the honey!
      courseF_bee_fwp2_instruction: |-
        Pull this code into a function, then call the
        function to check this row for nectar.
      courseF_bee_fwp2_2018_instruction: |-
        Pull this code into a function, then call
        the function to check this row for nectar.
      courseF_bee_fwp3_instruction: |-
        Let's see if the function makes collecting
        these three rows of nectar any easier.
      courseF_bee_fwp3_2018_instruction: |-
        Let's see if the function makes collecting
        these three rows of nectar any easier.
      courseF_bee_fwp4_instruction: |-
        Add a `length` parameter to the function so
        that it will still work when the row is a different length.
      courseF_bee_fwp4_2018_instruction: |-
        Add a `length` parameter to the function
        so that it will still work when the row is a different length.
      courseF_bee_fwp5_instruction: Use this function to collect the nectar.
      courseF_bee_fwp5_2018_instruction: Use this function to collect the nectar.
      courseF_bee_fwp6_instruction: Build a short and sweet solution to this puzzle.
      courseF_bee_fwp6_2018_instruction: |-
        Build a short and sweet solution to this
        puzzle.
      courseF_bee_fwp7_instruction: |-
        **Challenge:** Modify your function to make
        honey as well.
      courseF_bee_fwp7_2018_instruction: |-
        **Challenge:** Modify your function to
        make honey as well.
      courseF_bee_fwp8_instruction: Use your new function to solve this spiral.
      courseF_bee_fwp8_2018_instruction: Use your new function to solve this spiral.
      courseF_bee_fwp9_instruction: Use your new function to solve this puzzle.
      courseF_bee_fwp9_predict1_instruction: |-
        Use your new function to solve this
        puzzle.
      courseF_bee_fwp9_predict1_2018_instruction: |-
        Use your new function to solve
        this puzzle.
      courseF_bee_fwp_challenge1_instruction: |-
        Use one `for loop` in a function with
        a `length` parameter to collect all of the corn.
      courseF_bee_fwp_challenge1_2018_instruction: |-
        Use one `for loop` in a function
        with a `length` parameter to collect all of the corn.
      courseF_bee_fwp_challenge2_instruction: "Use one `for loop` in a function with\na
        `length` parameter to collect all of the vegetables in each row. "
      courseF_bee_fwp_challenge2_2018_instruction: "Use one `for loop` in a function\nwith
        a `length` parameter to collect all of the vegetables in each row. "
      courseF_farmer_ramp11_instruction: |-
        This puzzle also uses nested loops.  Can
        you figure out how?
      courseF_farmer_ramp11_2018_instruction: |-
        This puzzle also uses nested loops.  Can
        you figure out how?
      courseF_maze_predict1_instruction: |-
        This code includes a new block. What do
        you think would happen if you press the "Run" block?
      courseF_maze_ramp13_instruction: |-
        Time for another Angry Birds puzzle to pull
        it all together!
      courseF_maze_ramp15_instruction: |-
        Use what you've learned to get the bird
        to the pig!
      courseF_maze_ramp4_instruction: Avoid TNT or feathers will fly!
      courseF_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseF_maze_ramp5_instruction: Avoid the TNT.
      courseF_maze_ramp5_2018_instruction: Avoid the TNT.
      courseF_maze_ramp6_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseF_maze_ramp6_2018_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseF_maze_ramp7_instruction: |-
        Use what you've learned to get the bird to
        the pig!
      courseF_playlab_embed_vars_instruction: |-
        Answer Pegleg the Pirate's questions.
        What happens if you enter the codename "password"? What about some other
        code name?
      courseF_playlab_variables0_instruction: |-
        This is Pirate Pegleg.  He's awfully
        hard to understand these days!
      courseF_playlab_variables1_instruction: |-
        This is Pirate Pegleg.  He's awfully
        hard to understand these days!
      courseF_playlab_variables1a_instruction: |-
        Variables can be used to store text
        that you want to use later.  Have Kiki, the soccer player,  scream "Goal!"
        by assigning that text to the `shout` variable.
      courseF_playlab_variables1a_2018_instruction: |-
        Variables can be used to store
        text that you want to use later.  Have Kiki, the soccer player,  scream "Goal!"
        by assigning that text to the `shout` variable.
      courseF_playlab_variables2_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      courseF_playlab_variables2a_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      courseF_playlab_variables2b RYAN CLONE_instruction: |-
        Insert the variable `color`
        into the middle of a sentence by putting it into the empty slot in the `join`
        block.
      courseF_playlab_variables2b_instruction: |-
        Insert the variable `color` into
        the middle of a sentence by putting it into the empty slot in the `join` block.
      courseF_playlab_variables2b_2018_instruction: |-
        Insert the variable `color`
        into the middle of a sentence by putting it into the empty slot in the `join`
        block.
      courseF_playlab_variables3_instruction: |-
        The `ask` block will automatically
        store whatever the user answers into the variable of your choice.
      courseF_playlab_variables3b_instruction: "Help Kiki have a conversation with\nBrian
        by using the variable `age` in all of the places where age `12` should\nbe
        used. "
      courseF_playlab_variables3bEdit_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `A1` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3b_josh_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `age` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3b_josh_2018_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `age` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables4_instruction: |-
        Can you find the correct variable
        in the toolbox to fill in the slot?
      courseF_playlab_variables4b_instruction: |-
        Put the variables in the correct
        places to create this conversation.
      courseF_playlab_variables4b_2018_instruction: |-
        Put the variables in the correct
        places to create this conversation.
      courseF_playlab_variables5_instruction: |-
        Can you find the correct variable
        in the toolbox to fill in the slot?
      courseF_playlab_variables5b_instruction: |-
        Put all of the variables in the correct
        place so that Pegleg's story makes sense.
      courseF_playlab_variables5c RYAN Copy_instruction: |-
        Let's combine the `ask`
        block with an `if/else` statement to make a game!
      courseF_playlab_variables5c_instruction: |-
        Let's combine the `ask` block with
        an `if/else` statement to have some fun!
      courseF_playlab_variables5c_2018_instruction: |-
        Let's combine the `ask` block
        with an `if/else` statement to have some fun!
      courseF_playlab_variables6b_instruction: |-
        Join the variables together to make
        a fun story that takes more than one speech bubble to tell.
      courseF_playlab_variables6c_instruction: |-
        In the rest of this stage, we're
        going to build a game that you control!
      courseF_playlab_variables6c_2018_instruction: |-
        In the rest of this stage, we're
        going to build a game that you control!
      courseF_playlab_variables7b_instruction: |-
        Create some questions and weave the
        answers together into your very own story.
      courseF_playlab_variables7b_2018_instruction: |-
        Create some questions and weave
        the answers together into your very own story.
      courseF_playlab_variables7c_instruction: |-
        Make the game do something by asking
        the user to guess a color.
      courseF_playlab_variables7c_2018_instruction: |-
        Make the game do something by
        asking the user to guess a color.
      courseF_playlab_variables8b_instruction: |-
        Use what you've learned to create
        an improv scene between the actors.
      courseF_playlab_variables8c_instruction: |-
        Use the variables to make the game
        more personal.
      courseF_playlab_variables8c_2018_instruction: |-
        Use the variables to make the
        game more personal.
      courseF_playlab_variables_challenge1_instruction: "Use these blocks to make\nthe
        actors share a knock-knock joke. "
      courseF_playlab_variables_challenge1_2018_instruction: "Use these blocks to\nmake
        the actors share a knock-knock joke. "
      courseF_playlab_variables_challenge2_instruction: |-
        This game will use variables
        to keep track of points.  Tag Cat to get 2 points. Tag Penguin to get 3 points.  When
        Cat and Penguin touch, take points away. Get exactly 10 points to win!
      courseF_playlab_variables_challenge2_2018_instruction: |-
        This game will use
        variables to keep track of points.  Tag Cat to get 2 points. Tag Penguin to
        get 3 points.  When Cat and Penguin touch, take points away. Get exactly 10
        points to win!
      courseF_playlab_variables_challenge3_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseF_video_createFunctions_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseF_video_createFunctions_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      course_playlab_variables1_instruction: |-
        This is Pirate Pegleg.  He's awfully
        hard to understand these days!
      course_playlab_variables2_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      course_playlab_variables3_instruction: |
        Now, decode Pirate Pegleg's speech
        by changing the value of the variables in just two places! \r
      coursea_maze_ramp1_2018_instruction: |-
        For this puzzle, snap the blocks together
        and click "Run"!
      coursef_explore_CYOA_Witch_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of choose your own adventure story in play lab.
      coursef_explore_playlab2_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of story in play lab.
      coursef_explore_playlab_cat_game_instruction: |-
        You can do whatever you want
        in play lab! Here's an example of game you can make.
      coursef_maze_ramp3_instruction: |-
        There is one extra block that is going to
        cause the bird to crash. Throw it away by dragging it back to the toolbox.
      coursef_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      drawings!_instruction: |-
        Draw the equilateral triangle - all the sides are the
        same!
      eventsIntro_instruction: Need a better playlab/events combo
      flappy_1_instruction: Attacca un blocco al blocco "quando si clicca" e premi
        "Esegui". Clicca o tocca lo schermo per spostare Flappy verso il bersaglio.
      flappy_11_instruction: Crea la tua versione del gioco Flappy. È possibile modificare
        tutte le immagini e tutte le regole, anche la gravità e lo spazio tra gli
        ostacoli. Quando hai finito, clicca su Condividi per far provare agli amici
        il gioco sui loro smartphone.
      flappy_11_2018_instruction: |-
        Create your own Flappy game. You can change all
        the visuals and all the rules, even the gravity. When you're done, click
        Finish to let friends try your game on their phones.
      flappy_1_2018_instruction: |-
        Attach a block to the "when click" block, then
        press "Run". Click or tap the screen to move Flappy to the target.
      flappy_2_instruction: Ora nello scenario c'è anche il terreno.  Attacca un blocco
        di azione al blocco di evento `quando precipita a terra`.  Inoltre, il tuo
        codice ha bisogno del blocco `fine del gioco` quando Flappy precipita a terra.
      flappy_2_2018_instruction: |-
        Now we've added some ground.  Attach a block to
        the "when hit the ground" block.  Your code needs to 'END GAME' when Flappy
        crashes.
      flappy_3_instruction: Il blocco `quando si clicca su "Esegui"` permette di eseguire
        delle specifiche istruzioni all'inizio del gioco.  Prova a cambiare la velocità
        con cui Flappy vola verso il bersaglio.
      flappy_3_2018_instruction: |-
        The "when run" block allows you to run code when
        your game starts.  Try setting the level speed and flapping to the target.
      flappy_4_instruction: Scrivi del codice per aiutare Flappy a volare attraverso
        i tubi che lo ostacolano. Il tuo programma deve eseguire il blocco `fine del
        gioco` quando Flappy si schianta contro i tubi.
      flappy_4_2018_instruction: |-
        Flappy will fly through obstacles unless you write
        code to make him crash. Attach a block to the "when hit an obstacle" block.
        Your code needs to 'END GAME' when Flappy crashes into the first set of
        pipes.
      flappy_5_instruction: Aggiungiamo un segna-punti per contare i punti quando
        Flappy supera gli ostacoli. Aggiungi al blocco `quando supera un ostacolo`
        il blocco per segnare un punto. Guadagna un punto facendo volare Flappy attraverso
        la prima serie di tubi.
      flappy_5_2018_instruction: |-
        Let's add a scoreboard, and count points when
        Flappy makes it past obstacles. Add to the "when pass an obstacle" block,
        and then score a point by flying Flappy through the first set of pipes.
      flappy_6_instruction: Vedi se, cambiando di quanto Flappy ogni volta sbatte
        le ali, riesci ancora a segnare un punto.
      flappy_6_2018_instruction: |-
        See if you can still score a point after making
        Flappy flap either a smaller or larger amount.
      flappy_7_instruction: Adesso, prova a cambiare la scena attaccando un altro
        blocco al blocco `quando si clicca su "Esegui"`.
      flappy_7_2018_instruction: |-
        Next, try changing the scene by attaching another
        block to the "when run" block.
      flappy_8_instruction: Puoi impostare le scene in qualsiasi momento, non solo
        quando il gioco inizia. Prova a impostare una scena scelta a caso quando accadono
        altri eventi, per esempio quando si supera un ostacolo o si colpisce qualcosa.
        Puoi anche impostare il tipo di giocatore.
      flappy_8_2018_instruction: |-
        You can set visuals anytime, not just when the
        game starts. Try setting a RANDOM scene when other events happen, for example,
        when passing an obstacle.
      flappy_9_instruction: Per rendere lo sviluppo più interessante, prova a riportare
        il punteggio a 0 quando si colpisce un ostacolo invece di finire il gioco.
      flappy_9_2018_instruction: Per rendere lo sviluppo più interessante, prova a
        riportare il punteggio a 0 quando si colpisce un ostacolo invece di finire
        il gioco.
      frozen circle function in circle_instruction: Ora disegniamo 20 cerchi sovrapposti,
        girando di 18 gradi tra un cerchio e l'altro. Di quanto devi saltare in avanti?
      frozen circle function with parameter_instruction: In questo esercizio il blocco
        "disegna un cerchio" può creare cerchi di diverse dimensioni. Usalo per disegnare
        un cerchio piccolo di dimensione 5 e un cerchio più grande di dimensione 10.
      frozen circle function_instruction: Usa il nuovo blocco "disegna un cerchio"
        per disegnare 10 cerchi sovrapposti. Devi capire di quanto saltare in avanti
        tra un cerchio e l'altro.
      frozen circle_instruction: Il cerchio è una forma speciale. Riesci a capire
        che numero sostituire al posto dei punti interrogativi per disegnare un cerchio?
      frozen cross rotate dense_instruction: 'Adesso ripetiamolo 90 volte! Quante
        volte 90 sta in 360? Suggerimento: È un numero molto piccolo.'
      frozen cross rotate_instruction: Adesso prova a ripetere il disegno avanti e
        indietro per 10 volte. Di quanti gradi devi girare tra ogni linea?
      frozen cross_instruction: Aggiungi un blocco "Ripeti" intorno a questi comandi
        per creare un segno più. Hai notato che Elsa può andare avanti e indietro?
      frozen diamond mini snowflake_instruction: Lo sapevi che ogni fiocco di neve
        ha una forma diversa? Disegniamo un altro fiocco di neve usando un altro blocco
        "ripeti" per ripetere il parallelogramma 4 volte, girando ogni volta a destra
        di 90 gradi tra ogni parallelogramma.
      frozen diamond snowflake_instruction: Adesso, disegniamo un altro fiocco di
        neve usando il blocco "ripeti" per ripetere il rombo 10 volte, girando a destra
        di 36 gradi dopo ognuno di essi.
      frozen diamond_instruction: Utilizza una ripetizione intorno a questi blocchi
        per creare un parallelogramma. È proprio come un rettangolo ma ha angoli diversi.
        Questo ha angoli di 60 e 120 gradi invece che tutti gli angoli di 90 gradi.
      frozen freeplay_instruction: Sei ufficialmente diventato un maestro artista!
        Crea un meraviglioso paesaggio invernale.
      frozen line_instruction: Ciao! Sono Elsa di Arendelle. Aiutami a disegnare una
        linea.
      frozen perpendicular_instruction: Adesso vediamo se possiamo disegnare due linee
        con un angolo di 90 gradi tra loro. Devi usare il blocco "gira a ..." e anche
        il blocco "vai ...".
      frozen snowflake branch_instruction: Usa il blocco "disegna un ramo di un fiocco
        di neve" per disegnare tre rami, così da ottenere l'inizio di un vero fiocco
        di neve.
      frozen snowflake full_instruction: Adesso ripetiamo il disegno di un ramo per
        8 volte per ottenere un magnifico fiocco di neve!
      frozen snowflower_instruction: Fiocchi di neve di aspetto complesso possono
        essere ottenuti usando forme molto semplici. Riesci a disegnare questo, ripetendo
        5 cerchi di dimensione 5 e 5 cerchi di dimensione 10?
      frozen square iterative_instruction: I blocchi che trovi già pronti sono l'inizio
        del disegno di un quadrato. Continua per completarlo (servono 4 linee per
        disegnarlo tutto).
      frozen square loop 3x_instruction: Disegniamo tre quadrati, girando dopo ognuno
        di essi. Assicurati di girare di 120 gradi ogni volta.
      frozen square loop_instruction: Ciao, sono Anna di Arendelle! Disegniamo un
        quadrato usando il blocco "ripeti ... volte", così da utilizzare il minor
        numero possibile di blocchi. Quante volte il blocco "ripeti ... volte" deve
        ripetere i blocchi al suo interno per ottenere il quadrato?
      frozen square snowflake_instruction: Riesci a creare un fiocco di neve usando
        il blocco "ripeti ... volte" per disegnare 10 volte un quadrato, e il blocco
        "gira a ..." per girare di 36 gradi tra un quadrato e l'altro?
      grade1_adventurer_loops1_instruction: Four piles of gold!  Collect all four.
      grade1_adventurer_loops10_instruction: |-
        Help me get all of the gold from this
        cave.
      grade1_adventurer_loops2_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `E -->` block?
      grade1_adventurer_loops3_instruction: |-
        Can you fix Laurel's path to get all
        of this gold?
      grade1_adventurer_loops4_instruction: "Add to the code from the last puzzle\nto
        get all of the gold. "
      grade1_adventurer_loops5_instruction: |-
        What should you add to this code to
        get all of the gold?
      grade1_adventurer_loops6_instruction: Write the code to get all of this gold.
      grade1_adventurer_loops7_challenge_instruction: |-
        **Challenge: ** The gold goes
        all the way down these stairs!  Write the code to help me get it all.
      grade1_adventurer_loops8_challenge_instruction: |-
        Challenge: Try this staircase
        now! It has an extra spike at the end you'll have to climb.
      grade1_adventurer_loops9_instruction: |-
        Help me get the gold from this deep
        valley.
      grade1_adventurer_loopsFP_instruction: |-
        Eureka!  Collect as much gold as you
        can!
      grade1_adventurer_loopsPre_instruction: |-
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      grade1_artist_loops1_instruction: |-
        The Artist is trying to draw a line six
        times, but can't get it right.  Can you help?
      grade1_artist_loops2_instruction: |-
        Help the artist draw a line 7 times to make
        a garden wall.
      grade1_artist_loops3_instruction: "Now we need to get the soil ready to plant.\nFind
        the bugs in the code and help the artist prepare the ground. "
      grade1_artist_loops4_instruction: |-
        Time to fix the stairs!  Repeat this pattern
        five times so the artist can reach the top of the bushes.
      grade1_artist_loops5_instruction: |-
        Behind the bushes there is a beautiful vine
        full of flowers.  Can you climb the vine and see where it goes?
      grade1_artist_loops6_instruction: |-
        **Challenge:**  It's a hidden garden! Let's
        walk around.
      grade1_artist_loops7_instruction: |-
        The flowers down here are so pretty.  Let's
        take a closer look.
      grade1_artist_loops7a_instruction: |-
        **Challenge:**  Lovely! Let's take a walk
        around the garden.
      grade1_artist_loops7b_instruction: |-
        Time to head home. Can you fix this ladder
        to help the artist get down?
      grade1_artist_loops8_instruction: |-
        Let's take the short way home, over the
        pond. Can you help the artist stay on the stones?
      grade1_artist_loops9_instruction: I still need a story for this puzzle
      grade1_artist_loopsFP_instruction: |-
        Use what you have learned to draw a picture
        of what you think the artist saw when he got home.
      grade1_maze_sequence1_instruction: Modifica il codice per farmi arrivare al
        maialino!
      grade1_maze_sequence10_instruction: Move me around the TNT to get to the pig.
      grade1_maze_sequence2_instruction: Modifica il codice per farmi arrivare al
        maialino!
      grade1_maze_sequence3_instruction: |
        Can you add 2 blocks to get the bird to
        the pig.
      grade1_maze_sequence4_instruction: Now try this puzzle from the start!
      grade1_maze_sequence5_instruction: |-
        Move one way, then another to get me to
        the pig!
      grade1_maze_sequence6_instruction: |-
        Figure out what is missing and then add
        blocks to get me to the pig!
      grade1_maze_sequence7_instruction: |-
        Your turn!  What do you need to do to get
        the bird to the pig?
      grade1_maze_sequence8_instruction: |-
        Debug this level by adding blocks to get
        me to the pig!
      grade1_maze_sequence9_instruction: 'Go around the TNT to get me to the pig!

'
      grade1_maze_sequenceA_instruction: |-
        Challenge: Move me around the TNT to get
        to the pig.
      grade1_maze_sequenceB_instruction: Fix the bugs to get the bird to the pig.
      grade1_maze_sequenceC_instruction: It's all you!  Get the bird to the pig.
      grade1_maze_sequenceD_instruction: 'It''s a pig party!  Get those pigs! '
      grade1_playlab_events1_instruction: |-
        This game is called "Play Lab".  See
        if you can figure out what each block does.
      grade1_playlab_events1a_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      grade1_playlab_events2_instruction: |-
        This program makes Robin fly.  Can you
        get her to vanish when you click her?
      grade1_playlab_events2a_instruction: |-
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      grade1_playlab_events3_instruction: |
        This program makes Robin fly.  Can you
        make the robot jump when you press the up button?\r
      grade1_playlab_events3a_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade1_playlab_events4_instruction: |-
        Add a block to make Robin vanish when
        she collides with the robot.
      grade1_playlab_events4a_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade1_playlab_events5_instruction: |-
        Add a block to the 'when run' event
        that starts the dragon flying.
      grade1_playlab_events5a_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      grade1_playlab_events6_instruction: |-
        Add a block to the 'when actor 1 clicked'
        event that makes the dragon return to the middle of the screen.
      grade1_playlab_events7_instruction: |-
        Add a block so that when you push the
        left arrow button, the knight surges toward the dragon.
      grade1_playlab_events8_instruction: |-
        Add a block so that when the knight collides
        with the dragon, it plays a sound.
      grade1_playlab_events9 RYAN COPY_instruction: |-
        Now, have Robin wait a second,
        then come back after she vanishes.
      grade1_playlab_events9_instruction: |-
        Now, add a block to keep score each time
        the knight hits the dragon.
      grade1_playlab_eventsFP_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      grade1_sequence_pre_instruction: |-
        Play with these blocks to see what they make
        the bird do!
      grade1_video_frustrationRainbow_instruction: |-
        This video describes the rainbow
        of frustration and introduces persistence.
      grade2_CaringForNewPet_0_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      grade2_CaringForNewPet_1_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox to finish your code.
      grade2_CaringForNewPet_10_instruction: Fammi arrivare al maialino!
      grade2_CaringForNewPet_11_instruction: |-
        "Keep calm and help me find the bad
        pig."
      grade2_CaringForNewPet_2_instruction: |-
        "This pig is ruffling my feathers."\r
        \r
        There
        is one extra block that is going to cause the bird to crash. Throw it away
        by dragging it back to the toolbox.
      grade2_CaringForNewPet_2courseC_maze_programming3_instruction: |-
        There is one
        extra block that is going to cause the bird to crash. Throw it away by dragging
        it back to the toolbox.
      grade2_CaringForNewPet_3_instruction: |-
        "Trace the path and lead me to the
        silly pig. Avoid TNT or feathers will fly!"
      grade2_CaringForNewPet_3D_instruction: |-
        "Follow this path to get me to the
        pig!"
      grade2_CaringForNewPet_4_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      grade2_CaringForNewPet_5_instruction: Fammi arrivare al maialino!
      grade2_CaringForNewPet_6_instruction: |-
        Challenge: Guide me to the green evilness!
        (Watch out for TNT)
      grade2_CaringForNewPet_7D_instruction: |-
        Challenge: This code has a lot of bugs.
        You'll need to remove blocks and add blocks.
      grade2_MakeDogTag_1_instruction: |-
        Drag blocks onto the screen to have the artist
        draw over the grey lines in the picture. (Each line is 100 pixels long)
      grade2_MakeDogTag_10_instruction: Disegna qualcosa che ti piace.
      grade2_MakeDogTag_2_instruction: |-
        This spaceship needs a window!\r
        \r
        Each
        side of the inner square is 100 pixels and all of the angles are 90 degrees.
      grade2_MakeDogTag_3_instruction: Aiutami a completare la casa per questo gatto.
      grade2_MakeDogTag_4_instruction: |-
        Questa casa ha bisogno di un tetto! Disegna un triangolo.<br><br>
        <b>Suggerimento</b>: tutti e tre i lati hanno la stessa lunghezza.
      grade2_MakeDogTag_5_instruction: |-
        "Now a tag for Belle!"\r
        \r
        Draw this
        diamond with 200 pixel sides.
      grade2_MakeDogTag_6_instruction: 'Tempo di giocare: disegna qualcosa che ti
        piace.'
      grade2_MakeDogTag_7_instruction: |-
        One more tag.  This is a triangle for Pi.\r
        (Each
        side is 150 pixels)
      grade2_MakeDogTag_8_instruction: Cerca adesso di disegnare una serie di V collegate,
        usando un ciclo.
      grade2_MakeDogTag_9_instruction: |-
        Rebuild the code from the last puzzle, but
        this time, add a left turn of 30 degrees inside the loop. Now, repeat it 24
        times instead of 8.
      grade2_MakeDogTag_BFP_instruction: |-
        "Hi, I'm an artist. You can write code
        to make me draw almost anything."\r
        \r
        Play with the blocks in the toolbox
        to see what they do!
      grade2_MakeDogTag_FP_instruction: |-
        Freeplay: What shape will you make the tag
        for your pet?
      grade2_PuppyLoops_1_instruction: |-
        Can you get me to the pig using 5 of the
        same kind of blocks?
      grade2_PuppyLoops_10_instruction: La mia girandola non è finita. Riesci ad aiutarmi?
      grade2_PuppyLoops_2_instruction: |-
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_PuppyLoops_3_instruction: |-
        Get me to the pig! Solve this puzzle by creating
        a loop!
      grade2_PuppyLoops_4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_PuppyLoops_5_instruction: Fammi arrivare al maialino.
      grade2_PuppyLoops_6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence to get me to the pig?
      grade2_PuppyLoops_7_instruction: Fammi arrivare al girasole, usando quello che
        hai imparato!
      grade2_PuppyLoops_8_instruction: |-
        Il codice che disegna i tre baffi a destra è sbagliato, correggilo.<br><br>
        <b>Suggerimento</b>: tutti i baffi hanno la stessa lunghezza.
      grade2_PuppyLoops_9_instruction: |-
        Questo codice disegna la C al contrario nella parola "CODE".<br>
        Riesci a farla disegnare correttamente?
      grade2_collector_10_instruction: |-
        You're almost done! Collect as many pieces
        of treasure as you can to finish the stage!
      grade2_collector_10_2018_instruction: |-
        You're almost done! Collect as many
        pieces of treasure as you can to finish the stage!
      grade2_collector_2_instruction: |-
        Move Laurel to the gold, then use `collect`
        to pick it up.
      grade2_collector_3_instruction: |-
        Put these blocks in order to collect all of
        the gold and solve the puzzle.
      grade2_collector_4_instruction: |-
        Sequence matters! The blocks you need are
        already in the workspace, but not connected.  Order these blocks to solve
        the puzzle.
      grade2_collector_5_instruction: |-
        These blocks are in the wrong order. Can you
        fix them?
      grade2_collector_6_instruction: |-
        "Help me collect each gold coin!"\r
        \r
        These
        blocks are in the wrong order.
      grade2_collector_7_instruction: |-
        Challenge puzzle! Use blocks from the toolbox
        to collect all of the treasure.
      grade2_collector_8_instruction: |-
        "Keep up the good work! Help me collect all
        of the coins."
      grade2_collector_9_instruction: Let's get the coins!
      grade2_collector_9a_instruction: "**Challenge:** Grab all of the coins."
      grade2_collector_A_instruction: Help Laurel collect all of the treasure.
      grade2_collector_A_2018_instruction: Help Laurel collect all of the treasure.
      grade2_collector_pre1_instruction: |-
        "Hi, I'm Laurel. Today I'm searching
        for treasure at the dog park!" \r
        \r
        Play around with the blocks to see
        if you can help Laurel collect some gold.
      grade2_maze_debuggingFP_instruction: |-
        "Now, help me sneak up on the pig any
        way you want to!"
      grade2_maze_debuggingPre_instruction: |-
        Play with these blocks to see what they
        make the bird do!
      grade2_maze_intro10_instruction: Solve this puzzle.
      grade2_maze_intro2_instruction: |-
        Welcome to Code Studio! Here you will learn
        to use blocks to build programs. Press `Run` to run a program now!
      grade2_maze_intro3_instruction: |-
        The `workspace` is where you will create all
        of your programs. Can you guess what this program does? Press the “Run” button
        to find out.
      grade2_maze_intro4_instruction: |-
        Drag a block from the toolbox into the workspace.
        Connect it to the other blocks.
      grade2_maze_intro6_instruction: "That’s it!  Now we’re ready to try to solve\na
        few puzzles. "
      grade2_maze_intro7_instruction: This time, try something a bit more challenging.
      grade2_maze_intro8_instruction: |-
        This is a challenge puzzle.  It is meant to
        be hard and will probably take you a couple of tries to solve.  If you don’t
        solve it after several tries, don’t worry!  It will be in the Play Zone at
        the end of the stage and you can try it again when you’ve had more practice.
      grade2_maze_intro9_instruction: Solve this puzzle.
      grade2_playlab_project_1_instruction: Riesci a scrivere un programma che fa
        muovere Waddles quando si usano le frecce su / giù / destra / sinistra per
        colpire tutti i bersagli?
      grade2_playlab_project_2_instruction: Il blocco "ripeti per sempre" permette
        di eseguire il codice senza fermarsi mai. Puoi attaccare ad esso dei blocchi
        per spostare il dinosauro in continuazione in su e in giù?
      grade2_playlab_project_3_instruction: |-
        Can you have Waddles (actor 1) say "Ouch!"
        and play a "hit" sound if he runs into Chomp? \r
        \r
        When you're done,
        play the game to make that happen.
      grade2_playlab_project_4_instruction: Aggiungi un blocco che segna un punto
        quando Waddles sbatte contro il polpo. Poi spostalo con i tasti freccia fino
        a che fai un punto.
      grade2_playlab_project_5_instruction: |-
        Add blocks to the `when run` event to
        change the background and the speed of Waddles.\r
        \r
        Play the game and move
        Waddles with the arrows until you score.
      grade2_playlab_project_6_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends.
      grade2_puppy_loops2_instruction: |-
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_puppy_loops3_instruction: |-
        "Get me to the pig!"\r
        \r
         Solve this
        puzzle by creating a loop!
      grade2_puppy_loops4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_puppy_loops5_instruction: Fammi arrivare al maialino.
      grade2_puppy_loops6_instruction: |-
        "This pig is ruffling my feathers!"\r
        \r
        Loops
        even work with more than one block inside!  Can you loop this sequence?
      grade2_puppy_loops7_instruction: |-
        "Get me to the pig!"\r
        \r
        Use what you
        learned in other puzzles!
      grade3_AboutMyRobot_1_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      grade3_AboutMyRobot_2_instruction: |-
        Edit the code so that when the second bird
        is clicked, your program plays a sound!
      grade3_AboutMyRobot_3_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade3_AboutMyRobot_4_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade3_AboutMyRobot_5_instruction: |-
        About My Robot Project! Write code so that
        clicking on each bird shows a new fact about your robot.
      grade3_AboutMyRobot_TeacherIDo_instruction: |-
        Run this puzzle and click on the
        robot to see what happens!
      grade3_ConditionalsElse_1_instruction: |-
        La nuvola impedisce all'ape di sapere se dietro c'è un fiore oppure no. Verifica se c'è un fiore e solo in questo caso raccogli il nettare. Attenzione, ciò che trovi dietro la nuvola può cambiare di volta in volta!<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-7#VIDEO" target="_blank">Video doppiato in italiano</a>
      grade3_ConditionalsElse_2_instruction: |-
        Adesso ci sono più nuvole!<br><br>
        Controlla ognuna di esse e verifica se c'è un fiore. Solo in tal caso raccogli il nettare.<br><br>
        Ricordati che le diverse nuvole possono nascondere oggetti diversi!
      grade3_ConditionalsElse_3_instruction: |-
        Now I just want to make honey. Some
        of these clouds might have honeycombs under them. Be sure to check each cloud!
      grade3_ConditionalsElse_4_instruction: L'oggetto nascosto può essere un fiore
        oppure un favo. Usa il blocco `se-altrimenti` per raccogliere il nettare <i>se</i>
        si tratta di un fiore, <i>altrimenti</i> per produrre il miele (dato che,
        in questo caso, si tratta sicuramente di un favo).
      grade3_ConditionalsElse_5_instruction: |-
        There will be either a flower or a
        honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block to collect
        nectar if there is a flower.\r
        Otherwise, make honey (because there is a
        honeycomb).
      grade3_ConditionalsElse_6_instruction: |-
        I am not sure how much nectar this
        flower has, but I know it has either 1, 2, or 3 nectar. \r
        \r
        Combine the
        conditional blocks (`if` and/or `if/else`) to only get as much nectar as the
        flower has. \r
        \r
        Remember, the amount of nectar can change each time you
        run the puzzle!
      grade3_ConditionalsElse_7_instruction: |-
        Ricordati che un fiore viola può avere 1, 2, 3 dosi di nettare.<br>
        <br>
        Completa la funzione `check purple flower` (<i>controlla fiore viola</i>) ed usala per raccogliere tutto il nettare dai fiori.
      grade3_ConditionalsElse_8_instruction: |-
        Write the function for `check flower
        make honey`. \r
        \r
        Your function should check if the purple flower has 3,
        2, or 1 nectar and get all of the nectar. \r
        Then, move forward and make
        honey.
      grade3_ConditionalsElse_9_instruction: |
        **Assessment:** This cloud is either
        hiding a flower with one nectar or a honeycomb that needs one honey.  \r
        \r
        Complete
        the `get nectar or make honey` function, then call it to collect the nectar
        or honey. \r
      grade3_ConditionalsElse_TeacherIDo_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade3_Conditionals_1 BAD_instruction: Usa un ciclo per raccogliere tutto il
        nettare.
      grade3_Conditionals_1_instruction: |-
        Ciao, sono un'ape!<br>
        Aiutami a raccogliere tutto il nettare dai fiori, usando il minor numero possibile di blocchi.<br><br>
        <b>Suggerimento</b>: Usa il blocco `ripeti ... volte` (<i>ciclo</i>).
      grade3_Conditionals_10 BAD_instruction: Raccogli tutto il nettare da queste
        file di fiori! Usa i cicli annidati.
      grade3_Conditionals_10_instruction: |-
        Qui ci sono diverse cose da fare!<br>
        Usa ciò che hai imparato per raccogliere tutto il nettare e poi fare il miele.<br><br>
        <b>Suggerimenti</b><br>
        - Cosa succede se usi un blocco condizionale `se nettare` su un fiore rosso?<br>
        - Puoi risolvere questo esercizio usando il <i>ciclo</i> `ripeti ... volte`?
      grade3_Conditionals_11 BAD_instruction: Questo è un esercizio di riepilogo --
        Usa un ciclo `mentre` per raccogliere tutto il nettare da questi fiori.
      grade3_Conditionals_11_instruction: |-
        Metti insieme tutto ciò che hai imparato!<br>
        Raccogli il nettare solo dai fiori che ne hanno, usando il minor numero possibile di blocchi. Non dimenticarti di fare il miele alla fine.
      grade3_Conditionals_12_instruction: |-
        Questo percorso a gradini ormai dovrebbe essere familiare.<br><br>
        Raccogli il nettare solo dai fiori che ne hanno, usando il minor numero possibile di blocchi.
      grade3_Conditionals_13_instruction: |-
        Assessment: Collect all of the nectar.
        Be careful not to try to collect nectar from a purple flower if it doesn't
        have any.
      grade3_Conditionals_2_instruction: |-
        Aiutami a raccogliere tutto il nettare dai fiori e a produrre tutto il miele, usando il minor numero possibile di blocchi.<br><br>
        <b>Suggerimento</b>: usa il blocco `ripeti ... volte` (<i>ciclo</i>).
      grade3_Conditionals_3_instruction: |-
        Be careful not to collect nectar from a
        purple flower if it doesn't have any. \r
        You must first check if the nectar
        is equal to 1 using the `if nectar` block.
      grade3_Conditionals_4_instruction: Controlla questo fiore con un blocco `se`
        per verificare se ha del nettare.
      grade3_Conditionals_5_instruction: Raccogli il nettare da ogni fiore, se ne
        ha.
      grade3_Conditionals_6_instruction: Su questo campo ci sono fiori rossi e viola.
        I fiori rossi possiedono una quantità nota di nettare, ma la quantità dei
        fiori viola è ignota. Raccogli tutto il nettare.
      grade3_Conditionals_7_instruction: Raccogli tutto il nettare da ogni fiore.
      grade3_Conditionals_8_instruction: Fammi volare nel giardino per raccogliere
        il nettare solo dai fiori che ne hanno.
      grade3_Conditionals_9_instruction: |-
        Help me find all of the nectar using as
        few blocks as possible!
      grade3_Conditionals_TeacherIDo_instruction: |-
        Check this flower with an "if"
        block to see if there is any nectar available.
      grade3_Debugging_1_instruction: |-
        Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare.<br>
        Clicca su "Fai un passo" per eseguire il programma un blocco alla volta.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-10#VIDEO" target="_blank">Video doppiato in italiano</a>
      grade3_Debugging_5_instruction: |-
        That flower looks tasty! \r
        \r
        Fix the error(s)
        to collect all of the nectar.  You can now use both run and step.
      grade3_Debugging_6_instruction: |-
        Che dolce sfida!<br>
        Correggi gli errori per raccogliere tutto il nettare.<br>
        Ricorda che cliccando su "Fai un passo" puoi eseguire il programma un blocco alla volta.
      grade3_Debugging_7_instruction: |-
        Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare e produrre tutto il miele.<br><br>
        Ricorda che cliccando su "Fai un passo" puoi eseguire il programma un blocco alla volta.
      grade3_Debugging_9_instruction: |-
        Questi blocchi sbagliati mi fanno perdere tempo. Correggi gli errori per raccogliere tutto il nettare e produrre tutto il miele.<br><br>
        Ricorda che cliccando su "Fai un passo" puoi eseguire il programma un blocco alla volta.
      grade3_Debugging_TeacherIDo_instruction: |-
        These blocks are really bugging me.
        Fix the error(s) to collect all of the nectar and make all of the honey.
      grade3_Loops_1_instruction: "Can you help me collect the nectar from these\nflowers? "
      grade3_Loops_10_instruction: |-
        Quest'ape ha molto da fare!<br>
        Aiutala a raccogliere tutto il nettare e produrre tutto il miele, usando il minor numero possibile di blocchi.<br><br>
        <b>Suggerimento</b>: usa un ciclo simile a quello del precedente esercizio, aggiungendo l'istruzione `gira a ...`.
      grade3_Loops_11_instruction: Usa un ciclo per scendere la scala e raccogliere
        tutto il nettare.
      grade3_Loops_12_instruction: Usa un ciclo per raccogliere il nettare da ciascun
        fiore e produrre miele in ogni favo.
      grade3_Loops_2_instruction: |-
        Riesci a raccogliere il nettare con meno blocchi, usando un ciclo?<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-2/lezione-8#VIDEO" target="_blank">Video doppiato in italiano</a>
      grade3_Loops_3_instruction: Riesci ad usare un <i>ciclo</i> `ripeti ... volte`
        per raccogliere tutto il nettare?
      grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all of the
        nectar and make all of the honey.
      grade3_Loops_5_instruction: |-
        Quanti fiori! Aiuta l'ape a visitarli tutti.<br><br>
        Riesci a farlo con <b>meno</b> di 7 blocchi?
      grade3_Loops_6_instruction: |-
        Usa i cicli per risolvere quest'esercizio col minor numero possibile di blocchi.<br><br>
        Non dimenticarti di produrre il miele alla fine!
      grade3_Loops_7_instruction: Raccogli il nettare da ogni fiore, usando il minor
        numero possibile di blocchi.
      grade3_Loops_8_instruction: Raccogli tutto il nettare e produci tutto il miele,
        usando il minor numero possibile di blocchi.
      grade3_Loops_9_instruction: Raccogli il nettare da ogni fiore e produci il miele
        in ogni favo.
      grade3_Loops_TeacherIDo_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      grade3_RunningFarm_1_instruction: |-
        Use conditionals to make sure that you pick
        all of the corn, but don't disturb the stalks where nothing is growing yet.
      grade3_RunningFarm_10_instruction: |-
        Collect all of the corn and lettuce, then
        pick the pumpkin.
      grade3_RunningFarm_11a_instruction: |-
        Collect all of the corn and lettuce, then
        pick the pumpkin.
      grade3_RunningFarm_2_instruction: |-
        Help the farmer collect both corn and lettuce
        from the field.
      grade3_RunningFarm_3_instruction: |-
        *"Corn, lettuce, AND pumpkins! Help me
        harvest them all."*
      grade3_RunningFarm_4_instruction: |-
        Help the farmer pick all of the lettuce
        in each cluster before moving on to the next bunch.
      grade3_RunningFarm_5_instruction: |-
        This field has clusters of corn, lettuce,
        and pumpkins all growing together.  Can you collect them all?
      grade3_RunningFarm_6_instruction: |-
        Can you figure out how to pick the pumpkin?  Make
        sure to collect all of the corn along the way!
      grade3_RunningFarm_7_instruction: |-
        **Challenge:** Collect all of the corn and
        lettuce, then pick the pumpkin.
      grade3_RunningFarm_8_instruction: |-
        Have wheat and potatoes planted randomly
        at various growth stages. Now we introduce multiple while loops (stacked)
        nested inside a loop. The two while loops in the solution represent different
        while loops (while there is potato and while there is wheat)
      grade3_RunningFarm_9_instruction: |-
        Add Weeds element. Weeds start out in random
        spots in the field and spread more and more rapidly as time goes on.. This
        puzzle is the culminating game-like puzzle. Students should have the event
        blocks (up, down, left, right, spacebar) available in the toolbox to use if
        they want. The entire field should be planted randomly with mostly wheat,
        potatoes, and a few weeds.
      grade3_RunningFarm_TeacherIDo_instruction: |-
        Teacher I Do: Show students how
        they can use loops and conditionals to plant and harvest 2 rows of crops.
      grade3_RunningFarm_TeacherIDo2_instruction: |-
        Teacher I Do: Show students how
        to use loops to harvest many crops.
      grade3_bee_Conditionals_new4_instruction: |-
        Now try checking all of these flowers
        with "if" blocks to see if there is any nectar available.
      grade3_bee_conditionals_new1a_instruction: |-
        Help the bee collect all of the
        nectar. \r
        \r
        You can only collect nectar from flowers, but you can check
        any space to see if there is a flower.
      grade3_bee_conditionals_new1b_instruction: |-
        Help the bee collect all of the
        nectar. You can only collect nectar from flowers, but you can check any space
        to see if there is a flower.
      grade3_bee_conditionals_new2_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      grade3_bee_conditionals_new2a_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      grade3_bee_conditionals_new2b_instruction: |-
        Collect all of the nectar. You
        can only collect nectar from flowers, but you can check any space to see if
        there is a flower.
      grade3_bee_conditionals_new3a_instruction: |-
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade3_bee_conditionals_new3b_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      grade3_bee_conditionals_new3c_instruction: |-
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade3_bee_conditionals_quantum1_instruction: |-
        Check to see if there's a flower
        under the cloud. If there's a flower, get nectar.
      grade3_bee_conditionals_quantum2_instruction: |-
        Adesso ci sono più nuvole!<br><br>
        Controlla ognuna di esse e verifica se c'è un fiore. Solo in tal caso raccogli il nettare.<br><br>
        Ricordati che le diverse nuvole possono nascondere oggetti diversi!
      grade3_bee_conditionals_quantum3_instruction: |-
        Some of these clouds might have
        honeycombs under them.  Be sure to check if a honeycomb is hiding behind each
        cloud!
      grade3_bee_conditionals_quantum4_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      grade3_bee_conditionals_quantum5_instruction: |-
        Use the `if/else` block to collect
        nectar if there is a flower.\r
        Otherwise, make honey (because there is a
        honeycomb).
      grade3_maze_Loop1_instruction: "Assessment:  Get me to the sunflower using\nonly
        5 blocks! "
      grade3_maze_loops1_instruction: Get the zombie to the sunflower.
      grade3_maze_loops2_instruction: |-
        Fammi arrivare al girasole usando il minor numero possibile di blocchi!<br><br>
        Prova ad usare un blocco "ripeti ... volte" (ciclo) all'interno di un altro ciclo, per diminuire il numero di blocchi che usi.
      grade3_maze_loops2a_instruction: |-
        Get the zombie to the sunflower using the
        fewest number of blocks possible.
      grade3_maze_loops3_instruction: Usa i cicli per farmi arrivare al girasole col
        minor numero possibile di blocchi!
      grade3_maze_loops4_instruction: Fammi arrivare al girasole, usando il minor
        numero possibile di blocchi!
      grade3_maze_loops5_instruction: Fammi arrivare al girasole, usando il minor
        numero possibile di blocchi!
      grade3_maze_nestedLoops1_instruction: |-
        Can you get me to the pig using 5 of
        the same kind of blocks?
      grade3_maze_nestedLoops2_instruction: |-
        Can you get to the pig by creating a
        loop that uses only one `move forward` block inside of a `repeat`?
      grade3_maze_nestedLoops3_instruction: |-
        Get me to the pig! You can only use
        one move forward block this time
      grade3_maze_nestedLoops4_instruction: |-
        In this puzzle, two `repeat` loops will
        help you get to the pig with the fewest number of blocks!
      grade3_playLab_buildGame_1_instruction: |-
        There is a new block in this lesson,
        the `random integer` block. It is used to choose a random number. Write a
        program where the robot says a random number between 1 and 100!
      grade3_playLab_buildGame_2_instruction: |-
        We have already created a random integer,
        "j", which is either 1 or 0. Now, we need to use it to decide whether our
        card is red or black. Add a second if statement to the code under `when run`
        to complete this code.
      grade3_playLab_buildGame_3_instruction: |-
        There are 13 different card values
        in a deck of cards, so we'll need to have 13 options. Under the empty `when
        run` block, add a line that sets the placeholder "i" to a random integer
        between 1 and 13.
      grade3_playLab_buildGame_4_instruction: |-
        In a deck of cards, a card with value
        1 isn't actually called a "1", there's a special name. Write an if statement
        that checks if the random number is a 1, then tell the computer that the value
        of that card is "Ace".
      grade3_playLab_buildGame_5_instruction: |-
        We can just call the cards from 2
        to 10 by their numbers, so add an if statement that checks whether the number
        generated is within those numbers, then sets the card value to the number
        generated.
      grade3_playLab_buildGame_6_instruction: |-
        There are three more cards with special
        names in the deck. Add to your code so that a card number 11 is called a "Jack",
        a 12 is a "Queen" and a 13 is a "King"
      grade3_playLab_buildGame_7_instruction: |-
        You already know what color your card
        is, but what suit is it? Add code to the conditional statement "if card is
        Red" to choose hearts or diamonds.
      grade3_playLab_buildGame_8_instruction: |-
        Add the second part of the code to
        choose a suit, copying what you made for a Red card.
      grade3_playLab_buildGame_final_instruction: |-
        Final stage for playlab conditionals
        level (could hide entire function so that students just work with point scoring)
      grade3_playLab_buildGame_final2_instruction: |-
        Here's all of your code to choose
        a card - try adding some other fun features!
      grade3_robotFarmer_ConditionalsIntro4_instruction: |-
        Help the farmer remove
        this entire pile using a `while` loop.
      grade3_robotFarmer_ConditionalsIntro_1_instruction: |-
        *"Hi, I'm a farmer.
        I need your help to flatten the field on my farm so it's ready for planting!"*  \r
        \r
        Move
        to the pile of dirt and use the `remove` block to remove it.
      grade3_robotFarmer_ConditionalsIntro_10_instruction: |-
        I'm working late, so
        it's dark out, and I can't tell how large the piles are. Now I don't have
        all the options I used to have on the while block. Move me along the field,
        and if there is a pile, remove it
      grade3_robotFarmer_ConditionalsIntro_10a_instruction: "Flatten all of these\npiles
        using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_11_instruction: |-
        It's still dark outside.
        Move me along the field. If there is a pile, remove it, and if there is a
        hole, fill it in. Hint: use the dropdown menu of options on the "if" block.
      grade3_robotFarmer_ConditionalsIntro_11a_instruction: "Flatten all of these\npiles
        using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_2_instruction: |-
        Next, move to the hole
        and fill it with six shovelfuls of dirt, using the `fill` block.
      grade3_robotFarmer_ConditionalsIntro_3_instruction: |-
        *"Move to the pile of
        dirt and tell me how many shovelfuls to remove using as few blocks as possible."*
      grade3_robotFarmer_ConditionalsIntro_4_instruction: |-
        *"I don't know how much
        dirt is in this pile!"*\r
        \r
        Help the farmer remove this entire pile using
        a `while` loop.
      grade3_robotFarmer_ConditionalsIntro_5_instruction: "Help me remove all of\nthis
        dirt. "
      grade3_robotFarmer_ConditionalsIntro_6_instruction: |-
        Remove all the piles of
        dirt, using as few blocks as possible. The new options in the dropdown menu
        on the "while" block tell me if I'm standing on a pile or a hole.
      grade3_robotFarmer_ConditionalsIntro_7_instruction: |-
        Look at all of those holes!  Each
        one needs a different amount of dirt.   \r
        \r
        You can use the `while` loop
        to easily fill them all!
      grade3_robotFarmer_ConditionalsIntro_8_instruction: |-
        Fill in the hole at the
        end of each of these paths.
      grade3_robotFarmer_ConditionalsIntro_9_instruction: "**Challenge:** Fill all\nof
        these holes using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo1_instruction: |-
        Help me fill
        in all these holes with 5 shovelfuls of dirt. Hint: you can put a "repeat"
        block inside the "while" block.
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo2_instruction: |-
        I'm working
        late, so it's dark out, and I can't tell how large the piles are. Now I
        don't have all the options I used to have on the while block. Move me along
        the field, and if there is a pile, remove it
      grade4_arist_functions_star0_instruction: |-
        Have you drawn something like this
        star before? Practice making it one more time by adding a turn and a repeat
        block.
      grade4_arist_nested_loop_circles1_instruction: |-
        Assessment: Use a nested loop
        to complete the design.
      grade4_arist_nested_loop_flags1_instruction: |-
        Loop the given code to create
        a windmill.
      grade4_arist_nested_loop_polygons1_instruction: |-
        Loop this design 10 times.
        \r
        \r
        How much do you have to turn each time you loop?
      grade4_arist_nested_loop_polygons2_instruction: "Loop this shape 6 times. \\r\n\\r\nHow\nmuch
        do you have to turn each time you loop? "
      grade4_arist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_arist_nested_loop_triangles2_instruction: "Now nest this loop inside\nanother
        loop to draw 10 triangles.  This is called a \"nested\" loop.  "
      grade4_arist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by
        looping the triangle code?
      grade4_arist_nested_loop_triangles4_instruction: |-
        Draw the teeth in the alligator's
        mouth!
      grade4_arist_nested_loop_triangles5_instruction: |-
        Create a sun by nesting the
        starter code in another loop.\r
        \r
        To get this cool design with a hollow
        center, you'll need to jump forward by the length of the triangle before
        turning.
      grade4_arist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_freeplay_instruction: |-
        You are on your own now! Try out any of
        the functions you used in this stage or try this new function that will automatically
        give your image a beautiful background color! This creation will be saved
        to your Projects dashboard so that you can easily edit it any time!
      grade4_artist_functions1_instruction: |-
        Ciao. Io artista zombie. Mi piace disegnare!<br><br>
        Aiutami a disegnare questi occhiali quadrati.<br><br>
        <b>Suggerimento</b>: l'asta tra le lenti è di 25 pixel più corta della lunghezza di ciascuna lente.
      grade4_artist_functions2_instruction: |-
        Functions let you define new blocks!
        \r
        \r
        We've moved the blocks needed for drawing a square into a function
        called `draw a square`. This time, use the `draw a square` function to create
        the glasses. \r
        \r
        The squares are 75 pixels apart.
      grade4_artist_functions2a_instruction: |-
        Create this image using only the blocks
        provided.
      grade4_artist_functions3a_instruction: |-
        Create this image using only the blocks
        provided.
      grade4_artist_functions3b_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      grade4_artist_functionsChallenge0_instruction: |-
        **Challenge:** Create as many
        functions as you think you need to make this drawing of 50 pixel squares.
      grade4_artist_functions_challenge_instruction: |-
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_challenge2_instruction: |-
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_freeplay_instruction: |-
        You are on your own now! Try
        out any of the functions you used in this stage or try this new function that
        will automatically give your image a beautiful background color! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade4_artist_functions_stars0_instruction: |-
        You can make this drawing by adding
        a repeat block.
      grade4_artist_functions_stars1_instruction: |-
        Now that you can draw a star,
        try drawing four stars!
      grade4_artist_functions_stars2_instruction: |-
        Draw only those three stars to
        finish this puzzle.
      grade4_artist_functions_stars3_instruction: |-
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade4_artist_functions_windows0_instruction: |-
        Make this window by drawing
        a square, then turning 90 degrees before drawing another, and so on.
      grade4_artist_functions_windows1_instruction: |-
        If you can draw one window,
        you can draw three! Try using your choice of a nested loop or a function here.
        Don't forget the jump block!
      grade4_artist_functions_windows2_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!\r
        \r
        -
        The top windows are 50 pixels away from each other.  \r
        - The bottom windows
        are 100 pixels below the top set.
      grade4_artist_nestedLoops_challenge_instruction: |-
        Click here to see the full
        instructions again!\r
        \r
        Here is the code for an interesting shape.  What
        happens when you repeat it multiple times, turning between each iteration?   Notice
        that the turns in this shape add up to 420 degrees, which means that when
        your artist is done drawing, it will be facing a different direction than
        when you started.  That new direction is exactly 60 degrees to the right of
        where you began.
      grade4_artist_nestedLoops_challenge2_instruction: |-
        Now for a challenge!  Feel
        free to use trial and error. You are not expected to get the image perfect
        the first time.   Want to see more hints?  Click here!
      grade4_artist_nested_loop_circles1_instruction: |-
        Assessment: Use a nested loop
        to complete the design.
      grade4_artist_nested_loop_flags1_instruction: |-
        Loop the given code to create
        a windmill.
      grade4_artist_nested_loop_polygons1_instruction: |-
        Loop this design 10 times.
        \r
        \r
        How much do you have to turn each time you loop?
      grade4_artist_nested_loop_polygons2_instruction: "Hi, I'm the Artist! Let's\ncreate
        some drawings together! For starters, try repeating this shape 6 times.\n\\r\n\\r\nHow
        much do you have to turn each time you loop? "
      grade4_artist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_artist_nested_loop_triangles1_instruction: |-
        Complete the code to draw
        these triangles.  The first one is done for you.  Hint:  3 triangles in a
        360 degree rotation.
      grade4_artist_nested_loop_triangles2_instruction: |-
        Let's make a quick adjustment
        to get completely different image!  \r
        Hint: ? × 10 = 360
      grade4_artist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by
        looping the triangle code?\r
        Hint: 6 × ? = 360
      grade4_artist_nested_loop_triangles4_instruction: |-
        Hi! I'm the Artist. Let's
        try some different types of drawings together. Can you help me draw the bottom
        teeth in the alligator's mouth?
      grade4_artist_nested_loop_triangles5_instruction: |-
        Create a sun by nesting
        the starter code in another loop.\r
        \r
        To get this cool design with a hollow
        center, you'll need to jump forward by the length of the triangle before
        turning.
      grade4_artist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade4_artist_parameters_triangles1_instruction: |-
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade4_artist_parameters_triangles2_instruction: |-
        Cosa c'è di diverso in questi blocchi funzione? Clicca su "Esegui" per vedere cosa succede.<br>
        <br>
        <b>Nota</b>: `draw a triangle with length` = <i>disegna un triangolo con lunghezza</i>.
      grade4_artist_parameters_triangles2b_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles3_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles4_instruction: |-
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade4_artist_parameters_trianglesx_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_bee_conditionals_nested_loops_instruction: |-
        Collect all of the nectar.
        You can only collect nectar from flowers, but you can check any space to see
        if there is a flower.
      grade4_bee_conditionals_new1_instruction: |-
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      grade4_bee_conditionals_new1a_instruction: |-
        Help the bee make all of the honey.
        You can only make honey at a honeycomb, but you can check any space to see
        if there is a honeycomb.
      grade4_bee_conditionals_new2_instruction: |-
        Can you help the bee collect the
        nectar from the flowers? You can only collect nectar from flowers, but you
        can check any space to see if there is a flower.
      grade4_bee_conditionals_new2a_instruction: |-
        Make all of the honey. It's actually
        more efficient to check each space for a honey comb, even when you know some
        are empty.
      grade4_bee_conditionals_new3a_instruction: |-
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade4_bee_conditionals_new3b_instruction: |-
        Uh oh! The bee is not sure if he
        should collect nectar or make honey. Can you help him out?
      grade4_bee_conditionals_new3c_instruction: |-
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade4_bee_conditionals_quantum1_instruction: |-
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      grade4_bee_conditionals_quantum2_instruction: |-
        Adesso ci sono più nuvole!<br><br>
        Controlla ognuna di esse e verifica se c'è un fiore. Solo in tal caso raccogli il nettare.<br><br>
        Ricordati che le diverse nuvole possono nascondere oggetti diversi!
      grade4_bee_conditionals_quantum3_instruction: |-
        Now I just want to make honey.
        Some of these clouds might have honeycombs under them. The way we've been
        going about things won't work here. Be sure to check if a honeycomb is hiding
        behind each cloud!
      grade4_bee_conditionals_quantum4_instruction: |-
        Sometimes this cloud covers
        a flower, and sometimes it covers a honeycomb! Use the if/else block to collect
        nectar if it is a flower, else to make honey (because it is a honeycomb).
      grade4_bee_conditionals_quantum5_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade4_bee_functions_instruction: |-
        Have we met before? I'm the farmer! Please
        help me remove this pile of dirt and fill this hole.
      grade4_bee_functions1_instruction: Raccogli tutto il nettare da ogni fiore.
      grade4_bee_functions10_instruction: |-
        Create a function to collect all of the
        nectar from each flower.
      grade4_bee_functions11_instruction: |-
        Solve this function by creating a function
        to turn, move forward and make all of the honey, then return the bee to where
        it started and turn back.
      grade4_bee_functions2_instruction: |-
        Una funzione è una sequenza di blocchi di codice che esegue un compito. Usa la funzione `get 2 nectar` (<i>prendi 2 dosi di nettare</i>) per raccogliere il nettare da ogni fiore.
        <br><a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-3/lezione-6#VIDEO" target="_blank">Video doppiato in italiano</a> (solo la seconda parte)
      grade4_bee_functions3_instruction: |-
        Una "funzione" è una sequenza di blocchi di codice che esegue un compito.<br><br>
        Usa la funzione "prendi 5 dosi" (<i>get 5</i>) che raccoglie ogni volta 5 dosi di nettare.
      grade4_bee_functions4_instruction: |-
        La funzione "vai a prendere il nettare" (<i>move and get nectar</i>) sposta l'ape sul fiore, raccoglie il nettare e fa tornare l'ape dove si trovava.<br><br>
        Usa questa funzione per raccogliere tutto il nettare.
      grade4_bee_functions5_instruction: This puzzle will be deleted!
      grade4_bee_functions6_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      grade4_bee_functions7_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      grade4_bee_functions8_instruction: |-
        Create your own function that goes down
        a path, gets nectar, makes honey, and then returns the bee to the top of the
        path. Then collect all the nectar and make all the honey!
      grade4_bee_functions9_instruction: |-
        Create a function that collects all of
        the nectar from each flower.
      grade4_bee_nestedLoops0_instruction: Usa un ciclo per raccogliere tutto il nettare.
      grade4_bee_nestedLoops1_instruction: Raccogli tutto il nettare da ogni fiore.
        Usa un ciclo annidato.
      grade4_bee_nestedLoops2_instruction: |-
        **Challenge:** Figure out how to get
        all of the nectar using only the blocks available.
      grade4_bee_nestedLoops2a_instruction: |-
        Collect all of the nectar using  as
        few blocks as possible.
      grade4_bee_nestedLoops3_instruction: Usa un ciclo annidato per raccogliere tutto
        il nettare.
      grade4_bee_nestedLoops4_instruction: Raccogli tutto il nettare da ogni fiore
        e produci il miele in ogni favo. Usa un ciclo annidato.
      grade4_bee_nestedLoops_assess_instruction: |-
        **Assessment:** Collect all of
        the nectar and make all of the honey using loops.\r
        \r
        Hint: There are several
        possible solutions!
      grade4_designProcess_vid_instruction: |-
        Prepare to build a project within some
        given parameters.
      grade4_farmer_functions1_instruction: |-
        *"Have we met before? I'm the farmer!"*\r
        \r
        Help
        the farmer get to the pumpkins and pick them.
      grade4_farmer_functions2_instruction: |-
        Take the code you just wrote it and
        use it to define a new function. Call the function twice to complete the puzzle.
      grade4_farmer_functions3_instruction: |-
        Try using a couple of repeat blocks
        within your function definition.
      grade4_farmer_functions4_instruction: |-
        Swap out your repeat loops for more
        versatile while loops.
      grade4_farmer_functions5_instruction: |-
        Things are going to start getting trickier,
        but don't give up! You can use the same while loops to check both spaces
        in each pass.
      grade4_farmer_functions6_instruction: |-
        The paths are a different length. You
        can use a different type of while loop to keep the pattern going as long as
        you need to.
      grade4_frozen_freeplay_instruction: Sei ufficialmente diventato un maestro artista!
        Crea un meraviglioso paesaggio invernale.
      grade4_frozen_functions0_instruction: |-
        Can you figure out what number to replace
        the question marks with to draw a circle?
      grade4_frozen_functions1_instruction: |-
        Use the new “draw a circle” function
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions1a_instruction: |-
        Use the new “Create a circle” block
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions2_instruction: |-
        Now let's create 20 overlapping circles,
        turning 18 degrees between each circle.
      grade4_frozen_functions3_instruction: |-
        Here's a ”Create circle” block that
        can make circles of different sizes. Can you use this to create a small circle
        of size 5 and a larger circle of size 10?
      grade4_frozen_functions4_instruction: |-
        Intricate snow patterns can be created
        with very simple shapes. Can you make a pattern by repeating 5 circles of
        size 5 and 5 circles of size 10?
      grade4_frozen_nested_loop_diamonds1_instruction: |-
        Let’s use a repeat block
        to create a rhombus. Like a square, all sides are equal length, but the angles
        are different. This one has 60 degree and 120 degree angles instead of all
        90 degree angles.
      grade4_frozen_nested_loop_diamonds2_instruction: |-
        Did you know every snowflake
        is a different shape? Let's create a new snowflake by using another “Repeat"
        block to repeat a parallelogram 4 times, turning right by 90 degrees between
        each parallelogram.
      grade4_frozen_nested_loop_diamonds3_instruction: |-
        Now, let's create a new
        snowflake by using the repeat block to repeat a parallelogram 10 times, turning
        right by 36 degrees between each one.
      grade4_frozen_nested_loop_rectangle1_instruction: |-
        Hi, I’m Anna of Arendelle!
        Let’s use a repeat block to create a rectangle. This one is  200 pixels long
        and 100 pixels tall. All of the corners are 90 degree angles.
      grade4_frozen_square_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make a
        square with the “Repeat” block, which uses fewer blocks. How many times (???)
        should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop1_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make
        a square with the “Repeat” block, which uses fewer blocks. How many times
        (???) should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop2_instruction: |-
        Let's create three squares, turning
        after each square. Be sure to turn by 120 degrees before each new square.
      grade4_frozen_square_loop3_instruction: Riesci a creare un fiocco di neve usando
        il blocco "ripeti ... volte" per disegnare 10 volte un quadrato, e il blocco
        "gira a ..." per girare di 36 gradi tra un quadrato e l'altro?
      grade4_playLab_proj_example1_instruction: instructions
      grade4_playLab_proj_example1a_instruction: |-
        Take a look at this project.  Do
        you see how it was made?
      grade4_playLab_proj_example2a_instruction: |-
        Take a look at this project.  Do
        you see how it was made?
      grade4_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. "
      grade4_playlab_test_instruction: |-
        Utilizza la freccia verso destra per far lanciare al cane una fetta di torta.<br>
        Come vengono assegnati i punti? <br>
        Bisogna aggiungere 1 alla variabile `points` (<i>punteggio</i>) ogni volta che il cane (personaggio 1) colpisce il gatto (personaggio 2) con una fetta di torta.<br>
        Per ottenere questo risultato, usa l'evento `quando il personaggio 2 tocca una cosa qualunque` così da attivare un aggiornamento del tuo punteggio ogni volta che l'evento accade. Per incrementare il <i>punteggio</i>, `imposta points a points + 1`<br>
        Fai salire il tuo punteggio fino a 10 (un punto alla volta!) per risolvere l'esercizio.
      grade4_playlab_test2_instruction: |-
        Here's a function called `jump` that causes
        your main character to jump up 100 pixels. Run the program and use the jump
        function to collect all of the flags by moving the dog with the arrow keys.
      grade4_prompt_test_instruction: This is a test play lab level.
      grade4_review_artist1_instruction: |-
        Hi, I'm an artist. You can write code
        to make me draw almost anything. Use a few blocks to make me draw over the
        grey lines in the picture. (Each line is 100 pixels long)
      grade4_review_artist2_instruction: |-
        Questa casa ha bisogno di un tetto! Disegna un triangolo.<br><br>
        <b>Suggerimento</b>: tutti e tre i lati hanno la stessa lunghezza.
      grade4_review_artist3_instruction: |-
        The jump block moves the artist without
        drawing. Draw the dashed line using both the `jump forward` and `move forward`
        blocks. Each line is 50 pixels long.
      grade4_review_bee1_instruction: |-
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      grade4_review_bee2_instruction: Raccogli il nettare da ogni fiore e produci
        il miele in ogni favo.
      grade4_review_bee3_instruction: |-
        Quest'ape ha molto da fare!<br>
        Aiutala a raccogliere tutto il nettare e produrre tutto il miele, usando il minor numero possibile di blocchi.<br><br>
        <b>Suggerimento</b>: usa un ciclo simile a quello del precedente esercizio, aggiungendo l'istruzione `gira a ...`.
      grade4_scaffolded_project1_instruction: |-
        It is amazing how much you have learned!
        Let's put them together to make a game, step by step.
      grade4_scaffolded_project2_instruction: |
        Now let's get things moving! Use
        event handlers and actions to make your hero move.\r
        \r
        We've added these
        blocks to your tool box to help you.\r
      grade4_scaffolded_project3_instruction: |-
        Now that your game has a hero, it's
        time to start adding other actors and assigning them behaviors. \r
        \r
        Add
        two or more additional actors to your game and make them move. Do you want
        to have an actor patrol back and forth? Try using a these new blocks to bring
        these other components of your game to life!
      grade4_scaffolded_project4_instruction: |-
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project4a_instruction: |-
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project5_instruction: |-
        Now spend some time making sure the
        game works the way you want. Try including a way to win or lose your game.
      grade4_scaffolded_project6_instruction: |-
        You've finished! Now you can play
        your game or share it with your friends and classmates!
      grade5_artist_binary1_instruction: |-
        La codifica binaria è una modalità di rappresentazione delle informazioni usando solo due valori.  In questa lezione usiamo i valori "spento" (rappresentato dal numero 0) e "acceso" (rappresentato dal numero 1).<br><br>
        Hai a disposizione una griglia di quadrati con cui puoi giocare e creare dei disegni semplicemente accendendo e spegnendo i vari quadrati. Ogni quadrato è quindi analogo ad un pixel dello schermo.<br><br>
        Riesci a far produrre all'artista nella prima riga il disegno la cui codifica binaria è "01010101"?
      grade5_artist_binary10_instruction: |-
        <img src="https://images.code.org/0a30f23ff6138828d053267719d34fa8-image-1444435986654.00.22.png"
        width="250px"/><br>
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.
      grade5_artist_binary11_instruction: |-
        Free Play: Here's a blank canvas for
        you to draw on.  Have fun!
      grade5_artist_binary2_instruction: La funzione `draw binary` (<i>disegna in
        binario</i>) prende in ingresso una stringa binaria, cioè fatta di caratteri
        "1" e "0", e fa sì che l'artista – mentre va da sinistra verso destra e dall'alto
        verso il basso – accenda o spenga i quadrati in base ai caratteri della stringa.
        L'artista quindi colora di bianco i quadrati quando incontra un "1" mentre
        non li colora quando incontra uno "0". Clicca su "Esegui" per vedere come
        l'artista usa le stringhe binarie per disegnare questa figura.
      grade5_artist_binary3_instruction: |-
        Which of these binary strings could you
        loop 8 times to draw this image?
      grade5_artist_binary4_instruction: |-
        Can you draw this pattern by looping just
        three binary digits (0s and 1s)?
      grade5_artist_binary5_instruction: |-
        Each binary string represents one row of
        this picture. Can you rearrange them so it draws a smiley face instead of
        a frowny face?
      grade5_artist_binary6_instruction: |-
        Which 6 digit binary string, repeated 11
        times, will draw this image?
      grade5_artist_binary7_instruction: Quale è la più piccola stringa binaria che
        puoi inserire in un ciclo per disegnare questa figura?
      grade5_artist_binary8_instruction: Completa questo disegno.
      grade5_artist_binary9_instruction: |-
        Here's a higher resolution canvas to draw
        on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start to get
        creative with the bits?
      grade5_artist_for_loops1_instruction: Usa il blocco "ripeti ... volte" per disegnare
        un triangolo equilatero con i lati di 50 pixel.
      grade5_artist_for_loops10_instruction: |-
        Can you figure out how to use all of
        the things you've learned to create this image?\r
        \r
        Need a hint? Click
        here.
      grade5_artist_for_loops1a_instruction: |-
        Try using a `for loop`to create this
        triangular design. Don't worry that the numbers are different than the last
        puzzle. As long as you turn by the right number of degrees, the artist will
        make the correct shape!
      grade5_artist_for_loops1b_instruction: |-
        Experiment with the `for` loop and
        play with the `counter` variable.
      grade5_artist_for_loops2_instruction: |-
        Use a `repeat` inside of a `for` loop
        to create this stack of triangles that goes from 50 pixels to 100 pixels.
      grade5_artist_for_loops3_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. "
      grade5_artist_for_loops4_instruction: "These squares start at 15 pixels long,\nthe
        largest is 300 pixels long, and each square is 15 pixels larger than the\nlast. "
      grade5_artist_for_loops5_instruction: |-
        Just one little change to the code from
        the last image can create this drawing. Can you figure out what that change
        is?\r
        \r
        Hint:  You need to remove something!
      grade5_artist_for_loops6_instruction: |-
        If you turn a little bit more or less
        than you normally would for a shape, it creates a neat effect. Try using some
        of the code from the last level, but turning 89 degrees to create this twisted
        square spiral.
      grade5_artist_for_loops7_instruction: |-
        Make three small changes to the code
        from the last level to get this!
      grade5_artist_for_loops7a_instruction: |-
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      grade5_artist_for_loops7b_instruction: |-
        Use the counter inside the `set alpha`
        block to get this faded center.\r
        (This hexagon pattern was made using a
        60 degree turn.)
      grade5_artist_for_loops8_instruction: "Remember back in a previous stage when\nwe
        used a variable to control the number of sides in a shape? We are going\nto
        do the same thing with the `counter` variable now. This pattern starts\nwith
        a triangle and adds one side at a time until it draws a decagon (10 sides).\nEach
        side should be 100 pixels long. "
      grade5_artist_for_loops9_instruction: |-
        Let's put it all together!  Using your
        knowledge of `for` loops and the `counter` variable, create this drawing where
        each shape has two more sides than the last.  Make sure that each side is
        10 times as long as the number of sides in the polygon.\r
        \r
        Very little
        of the code has been provided for you.
      grade5_artist_for_loopsfreeplay11_instruction: |-
        <img src="https://images.code.org/9b5897e059bb29bd2faf8504659a3cfc-image-1440719685627.49.33.png"
        width="250px"/><br>
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.
      grade5_artist_for_loopsfreeplay12_instruction: |-
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      grade5_artist_freeplay_instruction: |-
        Create your own project! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade5_artist_functionparameters10_instruction: |-
        <img src="https://images.code.org/1df195df9d808f0dd539bef0f5c2958b-image-1443049871563.02.54.png"
        width="250px"/><br>
        Ora hai imparato tutto quello che devi sapere per realizzare un disegno come questo! Se la figura ti ispira, prova a realizzare qualcosa di simile. In caso contrario, crea qualcosa di tuo.
      grade5_artist_functionparameters11_instruction: |-
        Tempo di giocare: qui ci sono tutte le funzioni che hai scritto, e anche qualcuna in più con cui puoi giocare ("</i>draw a pinwheel</i>" disegna una girandola, "<i>draw a shape</i>" un poligono).<br><br>
        Disegna qualcosa di incredibile!<br><br>
        Prova a cambiare lo spessore della penna per vedere come cambiano i tuoi disegni!
      grade5_artist_functionparameters7_instruction: |-
        This image is similar to the
        last. Can you use a `for` loop with your function to make this design?
      grade5_artist_functionparameters8_instruction: |-
        In questo esercizio devi modificare la funzione "disegna un poligono" (<i>draw a polygon</i>).<br><br>Ha già un parametro "lati" (<i>sides</i>) per disegnare un poligono con un numero di lati ogni volta diverso. Adesso aggiungi un parametro "lunghezza" (<i>length</i>) e modifica la funzione così da farle disegnare un poligono che ha un perimetro sempre della stessa lunghezza indipendentemente dal numero di lati.<br><br>
        Se vuoi aiuto, ecco alcuni suggerimenti:<br><br>
        <b>1: </b>: il perimetro di ogni poligono è lungo 200 pixel. Ti ricordi quale equazione ti consente di ottenere figure di uguale perimetro in base al numero di lati?<br><br>
        <b>2: </b>: nella funzione "disegna un poligono" devi dividere il valore del perimetro per il numero di lati del poligono per ottenere la lunghezza di ogni lato. In questo modo riesci a disegnare una figura il cui perimetro ha sempre la stessa lunghezza indipendentemente dal numero dei lati.
      grade5_artist_functionparameters9_instruction: |-
        Challenge: Edit `draw a spiral
        edge` to use `length` and `sides` parameters, then recreate these shapes.
      grade5_artist_functionparameters9a_instruction: |-
        Finish off the `draw a spiral
        edge` function to also ask for a minimum length for the center of the spiral.
      grade5_artist_functionparameters9b_instruction: |-
        Can you figure out how to
        make this drawing using the function that you just created?
      grade5_artist_functionparameters_6_instruction: Riesci a completare questo disegno?
        I lati di tutte le figure sono lunghi 100 pixel.
      grade5_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_squares1a_instruction: |-
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a square' to find the bug.
      grade5_artist_parameters_squares2_instruction: |-
        Create a function called 'draw
        a square' and use it to outline these four boxes. Make sure to add a parameter
        for 'length'! Starting from the upper right, the box widths are 50, 100,
        150, and 200.
      grade5_artist_parameters_squares2a_instruction: |-
        Edit the function to accept
        a parameter called `length`.
      grade5_artist_parameters_stars1_instruction: |-
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade5_artist_parameters_triangles1_instruction: |-
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a square' to find the bug.
      grade5_artist_parameters_triangles1a_instruction: |-
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade5_artist_parameters_triangles1aa_instruction: |-
        Click "edit" to fill
        in the function definition of "draw a triangle" and add a parameter. It
        should take a length parameter, just like the triangle. This time, draw 3
        triangles: 25, 50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_triangles2_instruction: |-
        This drawing can be easily
        created using a new type of function that includes a parameter. The sides
        of each triangle are 25 pixels larger than the last.  The first triangle has
        25 pixel sides. Replace the '???' with the correct values to draw the picture.
      grade5_artist_parameters_triangles2a_instruction: |-
        Cosa c'è di diverso in questi blocchi funzione? Clicca su "Esegui" per vedere cosa succede.<br>
        <br>
        <b>Nota</b>: `draw a triangle with length` = <i>disegna un triangolo con lunghezza</i>.
      grade5_artist_parameters_triangles3_instruction: |-
        The code for this triangle
        function is broken.\r
        \r
        Can you edit the function to fix it, and then make
        triangles of length 150, 75, 25?
      grade5_artist_parameters_triangles4_instruction: |-
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade5_artist_parameters_trianglesy_instruction: |-
        The code for this triangle
        function is broken.\r
        \r
        Can you edit the function to fix it, and then make
        triangles of length 150, 75, 25?
      grade5_artist_variables_freeplay10_instruction: |-
        Free Play: Experiment with
        the number of sides this shape has. Can you change the algorithm so that the
        overall size of the shape stays the same, no matter how many sides it has?
        Hint: If you divide your starting length by the number of sides, the length
        of each side will get shorter as the number of sides gets higher.
      grade5_artist_variables_freeplay14_instruction: |-
        Free Play: Check it out! Now
        your algorithm is nested within one more loop. Experiment with changing the
        values of your two variables to draw cool patterns.\r
        \r
        For even more effect,
        try playing with color!  Use random colors inside loops to see how it changes
        your design.
      grade5_artist_variables_freeplay15_instruction: |-
        Want a second peek at the
        inspiration design or the hints?  Click here!\r
        \r
        Otherwise, make a design
        all your own!
      grade5_artist_variables_freeplay16_instruction: |-
        Still playing?  Here is a
        blank canvas where you can create whatever you want!
      grade5_artist_variables_hexagons1_instruction: |-
        Let's try it again! \r
        \r
        Can
        you set the `length` variable to 60 to make this cool design with hexagons?
      grade5_artist_variables_letterT11_instruction: |-
        Here’s more complicated code
        using the same concepts from the last puzzle - what should you set the "sides"
        variable to in order to draw this picture made of squares?
      grade5_artist_variables_new1_instruction: |-
        Here is a program that will create
        an image. There are a few things that are wrong with it.
      grade5_artist_variables_octagons13_instruction: |-
        When a shape has lots of sides,
        each side needs to be shorter if you want the whole pattern to fit on the
        screen. \r
        Let's recreate the algorithm for this amazing pattern, but instead
        of manually setting the `length` variable, let's use a math block with the
        `sides` variable inside to make sure that each shape fits correctly. The perimeter
        of each polygon is 300 pixels.\r
        Need some hints?  Click here.
      grade5_artist_variables_pentagon8_instruction: |-
        Use what you learned in the
        last puzzle to create this hexagon using the "sides" variable.\r
        \r
        See
        how you could change just one value to draw a triangle,  square, pentagon,
        or octagon?
      grade5_artist_variables_pentagon9_instruction: |-
        Now, recreate the algorithm
        from the last level and create a pentagon with sides of length 150.
      grade5_artist_variables_pentagons1_instruction: |-
        Draw this pattern of pentagons
        with 100 pixel sides by setting the right value for `length` and dropping
        the `length` variable into all of the the correct places. \r
        \r
        See how
        you only have to set the value for `length` once, and the code uses the right
        value everywhere?
      grade5_artist_variables_pentagons12_instruction: |-
        Let's set the "sides"
        variable to 5. The more sides we add to this algorithm, the bigger this whole
        pattern gets! Notice that there is another variable called "length". We
        can now use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      grade5_artist_variables_rectangle6_instruction: |-
        Now I want to make a rectangle
        that is twice as tall as it is wide. We've got a variable called "width"
        that needs to be set to 100. Can you use the math blocks to complete the code?
      grade5_artist_variables_square7_instruction: |-
        Here’s some code that can draw
        any regular polygon. There’s a new variable called sides that is set to 4.
        Can you use the sides variable (along with the math block) to turn the right
        amount regardless of how many sides there are in the polygon?\r
        \r
        Click
        here to go back to the hint!
      grade5_artist_variables_triangles2_instruction: |-
        Instead of using "move forward
        by 150," the "move" block is now referencing a variable called "length."
        Can you set "length" to 150 to draw this new triangle?
      grade5_artist_variables_triangles3_instruction: "Drag a number block to both\nthe
        `set length` block and the `repeat _ times` block to draw a set of 50\npixel
        triangles. "
      grade5_bee_for_loops1_instruction: |-
        Use a loop to collect the nectar from each
        flower.
      grade5_bee_for_loops10_instruction: |-
        What should your increment be to collect
        15, then 12, then 9, 6, 3 nectar?
      grade5_bee_for_loops11_instruction: "**Challenge:** Take what you've learned\nabout
        `for` loops and try to solve this problem. "
      grade5_bee_for_loops2_instruction: |-
        Add the code necessary to make sure the
        bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      grade5_bee_for_loops3_instruction: |-
        Try this puzzle using the `for` loop with
        `counter` variable and see how much shorter your code becomes.
      grade5_bee_for_loops4_instruction: "Replace the ??? in the \"for loop\" with\nthe
        largest amount of nectar the bee has to collect. "
      grade5_bee_for_loops6_instruction: |-
        You can also use a "for loop" to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      grade5_bee_for_loops7_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      grade5_bee_for_loops8_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      grade5_bee_for_loops9_instruction: |-
        Use the `counter` variable to navigate
        this garden with the fewest number of blocks possible.
      grade5_bee_parameters_new8_instruction: |-
        That's a great function you've created!
        You are officially on your own now. Collect all the nectar. Make all the honey.
      grade5_bee_parameters_new9_instruction: |-
        Bonus Challenge! If you are feeling
        ambitious, try this puzzle. It is possible to collect all of the nectar and
        make all of the honey using only a For loop, a Repeat loop, a function call,
        and a turn. Try it all on your own, or view the hints to build it step-by-step.
        Great job with this stage!
      grade5_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      grade5_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. "
      grade5_playlab_parameters_points1_instruction: "Here's the same game but most\nof
        the code is hidden. We've added a new function called `score_points.`\\r\n\\r\nAdd\na
        new parameter called `points` to the `player_score` function. \\r\n\\r\nThe\n`score_points`
        function should be able to both add and remove points from\n`player_score`
        depending on which actor is hit.\\r\nChanging the score by 1\nwill add a point,
        while changing the score by -1 will subtract a point.\\r\n\\r\nWhen\nyou're
        done, click \"Run\" to play.  When Dog scores 6 points, you will move\non
        to the next puzzle. "
      grade5_playlab_variables1_instruction: |-
        This time you don't have to write
        any code, just hit "Run" to play the game! In this game, you're the dog
        who is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      grade5_playlab_variables10_instruction: |-
        Modifica la funzione `patrol` (<i>pattuglia</i>) aggiungendo un parametro `actor` (<i>personaggio</i>), in modo tale da poterla eseguire per i diversi personaggi. Ricorda che sono identificati dai numeri 1, 2 e 3.<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-14#VIDEO" target="_blank">Video doppiato in italiano</a>
      grade5_playlab_variables11_instruction: |-
        Aggiungi un altro parametro chiamato `speed` (<i>velocità</i>)
        alla funzione `patrol` (<i>pattuglia</i>). Prova ad utilizzare il blocco `imposta il personaggio ... velocità ...` con il nuovo parametro `speed` (<i>velocità</i>) per aiutare il pinguino (personaggio 2) a prendere entrambe le bandierine prima che gli altri prendano la loro.
      grade5_playlab_variables12_instruction: 'Esamina il codice che trovi già pronto
        per vedere se riesci a capire cosa fa ogni blocco. Quando hai finito, utilizza
        i tasti freccia per far muovere il cane e raccogliere tutte le bandierine.
        <b>Nota</b>: non è necessario modificare il codice.'
      grade5_playlab_variables13_instruction: Utilizza il blocco `quando il personaggio
        ... tocca ...` per collocare il cane (personaggio 1) in alto a sinistra SOLO
        quando tocca uno qualunque degli altri personaggi.
      grade5_playlab_variables14_instruction: "It's free play time! Have fun with\nall
        the blocks in your tool box. "
      grade5_playlab_variables1ask_instruction: |-
        This time, when you press 'run',
        you will see a 'prompt' asking you for a number. This number will be stored
        in a variable used to set the dog's speed.\r
        \r
        \r
        Pay attention to how
        this program is written!
      grade5_playlab_variables2_instruction: |-
        Quella del precedente esercizio non è stata un bella gara! Modifica la variabile denominata `dog_speed` (<i>velocità del cane</i>) per essere sicuro di poter raccogliere più bandierine del gatto. Il primo che raccoglie 10 bandierine, vince!
        <br><a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-4/lezione-7#VIDEO" target="_blank">Video doppiato in italiano</a>
      grade5_playlab_variables3_instruction: Ecco un nuovo tipo di gioco!<br>Non devi
        modificare niente in questo esercizio.<br>Utilizza le frecce verso sinistra
        e verso destra per muoverti, e la freccia verso l'alto per saltare. Riesci
        a raccogliere tutte le bandierine?
      grade5_playlab_variables4_instruction: |-
        Now we're using a variable called
        "height" to control how high the dog can jump. Update the "height" variable
        so that the dog can jump high enough to reach all the flags.
      grade5_playlab_variables5_instruction: |-
        You've seen now how a variable can
        be used to set the height of an actor's jump. How else could  you use a variable?\r
        \r
        Let's
        build a game! First we'll need a score. Try setting the 'points' variable
        to give yourself 10 free points!
      grade5_playlab_variables6_instruction: |-
        Utilizza la freccia verso destra per far lanciare al cane una fetta di torta.<br>
        Come vengono assegnati i punti? <br>
        Bisogna aggiungere 1 alla variabile `points` (<i>punteggio</i>) ogni volta che il cane (personaggio 1) colpisce il gatto (personaggio 2) con una fetta di torta.<br>
        Per ottenere questo risultato, usa l'evento `quando il personaggio 2 tocca una cosa qualunque` così da attivare un aggiornamento del tuo punteggio ogni volta che l'evento accade. Per incrementare il <i>punteggio</i>, `imposta points a points + 1`<br>
        Fai salire il tuo punteggio fino a 10 (un punto alla volta!) per risolvere l'esercizio.
      grade5_playlab_variables6ask_instruction: |-
        This time, you need 100 points to
        win!  Don't worry though, you can choose how many points you earn each time
        you score a hit!\r
        Try adding the `ask` block and changing the number 1 out
        for the variable `value`.
      grade5_playlab_variables7_instruction: |-
        Bello! Ora facciamo in modo che il gioco non sia troppo facile.<br>
        Modifica il codice in modo da perdere un punto ogni volta che il cane (personaggio 1) viene colpito da un sandwich lanciato dal gatto (personaggio 2).<br>
        Iniziamo con 10 punti così non è troppo difficile. Lascia che il punteggio scenda da 10 fino a 0 per risolvere l'esercizio.
      grade5_playlab_variables71_instruction: 'Ecco un gioco usato in una precedente
        lezione, ma con la maggior parte del codice nascosta. C''è una nuova funzione
        `score_points` (<i>segna il punteggio</i>). Modifica questa funzione in modo
        che aggiunga alla variabile  `player_score` (<i>punteggio</i>) il valore di
        un nuovo parametro `points` (<i>punti</i>). La variabile `player_score` (<i>punteggio</i>)
        deve essere incrementata ogni volta che il cane colpisce il gatto con una
        fetta di torta e decrementata ogni volta che il gatto colpisce il cane con
        un sandwich. Una volta concluse queste modifiche clicca su "Esegui" per giocare.
        Quando il punteggio arriva a 6 si passa all''esercizio successivo. '
      grade5_playlab_variables81_instruction: 'Abbiamo aggiunto al gioco ancora un''altra
        funzione che puoi usare. Programma il tuo gioco in modo tale da chiamare la
        funzione `level_up` (<i>sali di un livello</i>) se la variabile `player_score`
        (<i>punteggio</i>) diventa maggiore di un certo valore (per esempio: `player_score`
        > 6). Clicca su "Esegui" per giocare e arriva al livello 3 per passare al
        prossimo esercizio. Nota: nella funzione `level_up` viene usata la variabile
        `enemy_speed` che significa <i>velocità del nemico</i>.'
      grade5_playlab_variables9_instruction: In questo esercizio c'è una funzione
        chiamata `patrol` (<i>pattuglia</i>) in cui devi inserire il codice che serve
        per far muovere il gatto prima in su e poi in giù di 400 pixel.
      grade5_playlab_variables_freeplay_instruction: |-
        Free Play time! Here are all
        of the variables we've played with so far in this stage, as well as a few
        more in case you want them. \r
        \r
        Notice that there are now so many blocks
        in our toolbox that they need to be organized!  Here, we've put each piece
        into an appropriate category.  Take some time to explore everything that is
        available. When you're done browsing, make a game or story using repeats,
        variables, and events.  \r
        \r
        Hint: scroll down to see all the commands
        in the workspace.
      grade5_playlab_variables_jump1_instruction: |-
        This puzzle uses a hidden function
        that makes the dog jump when the 'up' arrow is pressed. The height of the
        jumps can be set at the start of the game using the 'jumpPower' variable.
        Try to touch all of the flags!
      grade5_prompt_test_instruction: |-
        Variables aren't always numbers. What if
        you wanted to store a word or text? Experiment with the new `ask` block.
      gradeK_sequence_4_instruction: Try this one yourself from the beginning.
      gradek_adventurer_loops1_instruction: |
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      gradek_adventurer_loops10_instruction: |-
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loops2_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `[E-->]` block?
      gradek_adventurer_loops3_instruction: |-
        Can you fix Laurel's path to get all
        of this gold?
      gradek_adventurer_loops4_instruction: |-
        Use what you learned to get all of the
        coins.
      gradek_adventurer_loops4a_instruction: |-
        Add to this code to collect all of
        the coins.
      gradek_adventurer_loops5_instruction: |-
        What should you add to this code to
        get all of the gold?
      gradek_adventurer_loops6_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_challenge_instruction: |-
        **Challenge:** The gold goes
        all the way up these stairs!  Write the code to help me get it all.
      gradek_adventurer_loops8_instruction: |-
        Help me get all of the gold from this
        deep valley.
      gradek_adventurer_loops9_instruction: |-
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loopsFP_instruction: |-
        Eureka!  Collect as much gold as you
        can!
      gradek_adventurer_loopsPre_instruction: |-
        This is Laurel the Adventurer.  Mover
        her around and get as much gold as you can!
      gradek_artist_loops1_instruction: 'Aiuta l''artista a disegnare questa linea:
        due volte avanti.'
      gradek_artist_loops2_instruction: |-
        Our artist is trying to draw a line five
        times, but can't get it right.  Can you help?
      gradek_artist_loops3_instruction: |-
        Now, use a `repeat` loop to draw this line
        five times!
      gradek_artist_loops4_instruction: |-
        Draw a line seven steps long. This will
        become our horizon.
      gradek_artist_loops5_instruction: Let's put a nice hill in the back.
      gradek_artist_loops6_instruction: |-
        Use the `repeat` loop to add waves to the
        water.
      gradek_artist_loops7_instruction: We need a ladder up to the boat.
      gradek_artist_loops8_instruction: |-
        Challenge: The stairs down to the dock are
        broken.  Help me fix them.
      gradek_artist_loops9_instruction: |-
        Time to head back to land. Help me put down
        stones so I don't fall in!
      gradek_artist_loopsA_instruction: |-
        Help me build steps to watch the ship sail
        away.
      gradek_artist_loopsFP_instruction: |-
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      gradek_artist_loopsPre_instruction: Questo è un nuovo tipo di esercizio chiamato
        "Artista". Prova a disegnare qualcosa di divertente. Quando sei soddisfatto,
        premi "Termina" per passare all'esercizio successivo.
      gradek_playlab_events1_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      gradek_playlab_events1a_instruction: |-
        Add a block so that when you click the
        "up" button, Olive the Cat walks up.
      gradek_playlab_events1c_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      gradek_playlab_events2_instruction: |-
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      gradek_playlab_events2a_instruction: |-
        Add a block so that when you click "down"
        Olive the Cat walks down.
      gradek_playlab_events2c_instruction: |-
        Help Jorge the Dog get moving by connecting
        the `move left` block to the `when left` event block that is already in the
        workspace.
      gradek_playlab_events3_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3a_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3b_instruction: |-
        Add a button so that Olive the Cat moves
        right when you click the "right" button.
      gradek_playlab_events3c_instruction: |-
        Now, get Jorge to move right when the
        `right` button is clicked.
      gradek_playlab_events4_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      gradek_playlab_events4a_instruction: |-
        Add a block so that Olive the Cat moves
        left when you click the "left" button.
      gradek_playlab_events4c_instruction: |-
        Add events to have Jorge move up and
        down when the `up` and `down` buttons are pressed.
      gradek_playlab_events5_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      gradek_playlab_events5a_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      gradek_playlab_events5c_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      gradek_playlab_eventsA_instruction: |-
        Now, have the cat change to a random size
        AND have it play a random sound when you click the center button.
      gradek_playlab_eventsFP_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      gradek_playlab_eventsPre_instruction: |-
        This is a Play Lab level.  Move blocks
        to the workspace and see what happens!
      group test_instruction: Make a game
      harvester_Kahoot_instruction: |-
        Now help the farmer pick the corn, lettuce,
        **and** pumpkin.
      harvey_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      harvey_snowflake_artist1_instruction: Get your snowflake ready for 3d printing!
      harvey_snowflake_artist2_instruction: Get your snowflake ready for 3d printing!
      harvey_tictactoe_instruction: |-
        Let's play a game! Draw as many X's as you
        can! Can you get 3 in a row?
      iceAgeLoopsforVideo_instruction: |-
        Can you get to the acorn with just one `move
        forward` block?
      iceage_click_hello_instruction: Puoi aiutare Sid a chiamare i suoi amici quando
        si clicca su di lui?
      iceage_click_hello_2018_instruction: "Can you help Sid call for his friends\nwhen
        you click on him? "
      iceage_free_play_instruction: È il momento di creare un gioco o una storia per
        conto tuo.
      iceage_free_play_2018_instruction: 'Time to create your own game or story!

'
      iceage_free_playcourseF_IceAge_11_instruction: È il momento di creare un gioco
        o una storia per conto tuo.
      iceage_hello1_instruction: Aiuta Sid a dire "Ciao" trascinando il blocco `il
        personaggio 1 dice ...` nell'area di lavoro e collegandolo sotto all'evento
        `quando si clicca su "Esegui"`
      iceage_hello1_2018_instruction: |-
        Help Sid say "Hello!" by dragging the `say`
        block out and connecting it to the bottom of the `when run` event.
      iceage_hello2_instruction: Aiuta Manny e Sid a salutarsi a vicenda usando due
        volte il blocco `il personaggio ... dice`.
      iceage_hello2_2018_instruction: Aiuta Manny e Sid a salutarsi a vicenda usando
        due volte il blocco `il personaggio ... dice`.
      iceage_move_events_instruction: Scrivi il codice per aiutare Scrat a raccogliere
        tutte le ghiande!
      iceage_move_events_2018_instruction: Scrivi il codice per aiutare Scrat a raccogliere
        tutte le ghiande!
      iceage_move_to_actor_instruction: Collega un blocco all'evento `quando il personaggio
        tocca` per emettere un suono quando Diego incontra Manny.
      iceage_move_to_actor_2018_instruction: |-
        Connect a block to the `when actor
        touches` event to play a sound when Diego finds Manny.
      iceage_move_to_flag_instruction: Scrat è alla ricerca della sua ghianda! Puoi
        aiutarlo a percorrere gli ultimi 200 pixel?
      iceage_move_to_flag_2018_instruction: Scrat è alla ricerca della sua ghianda!
        Puoi aiutarlo a percorrere gli ultimi 200 pixel?
      iceage_repeat_instruction: Aiuta la Nonnina a fare un po' di esercizio muovendosi
        in continuazione a destra e a sinistra.
      iceage_repeat_2018_instruction: Aiuta la Nonnina a fare un po' di esercizio
        muovendosi in continuazione a destra e a sinistra.
      iceage_sound_and_points_instruction: Puoi completare questo codice per fare
        in modo che si riproduca un suono e si guadagni un punto quando Sid e la Nonnina
        si scontrano?
      iceage_sound_and_points_2018_instruction: "Can you finish this program to make\nit
        so that you both **play a sound** and **score a point** when Sid and Granny\ncollide? "
      iceage_throw_hearts_instruction: Usa il comando `il personaggio ... lancia`
        per far in modo che Sid (il personaggio 1) lanci dei cuori alla Nonnina (il
        personaggio 2) e imposta l'umore della Nonnina a felice quando viene colpita
        dai cuori.
      iceage_throw_hearts_2018_instruction: |-
        Use the `actor __ throw` command to
        have Sid (actor 1) throw hearts at Granny (actor 2) and set Granny's mood
        to happy when she gets hit with them.
      iceage_warn_ice_age_instruction: Cambia lo sfondo impostandone uno con ghiaccio
        e imposta la velocità di Sid (personaggio 1) a veloce.
      iceage_warn_ice_age_2018_instruction: |-
        Change the scene to an icy background
        and set Sid’s (actor 1) speed to fast.
      jessie-test_instruction: Lots of instructions
      k-1 maze 1_instruction: |-
        Riesci a spostarmi verso Ovest per prendere il maialino?<br>
        <a href="https://www.programmailfuturo.it/come/lezioni-tecnologiche/corso-1/lezione-4#VIDEO" target="_blank">Video doppiato in italiano</a>
      k1stickerfreeplay_instruction: |-
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      kikiTesta_instruction: |-
        Our adventurer wants to collect coins.  But she can
        only use 4 blocks to get them.\r
        \r
        Can you help her grab as many as she
        can using just 4 blocks?
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      level 'grade3_Loops_10_instruction: |-
        Such a busy bee!\r
        \r
        Help bee collect
        all of the nectar and make all of the honey with the fewest blocks possible.
      level 'grade3_Loops_11_instruction: |-
        The shape of this path is different than
        the others. \r
        \r
        Can you collect all of the nectar using as few blocks
        as possible?
      level 'grade3_Loops_12_instruction: |-
        Can you find the quickest way for the
        bee to collect all of the nectar and make all of the honey?
      level 'grade3_Loops_2_instruction: |-
        This time, use a loop to gather all of
        the nectar.
      level 'grade3_Loops_3_instruction: |-
        Use a `repeat` loop to collect all of the
        nectar.
      level 'grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      level 'grade3_Loops_5_instruction: |-
        What a beautiful field of flowers!   Help
        the bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      level 'grade3_Loops_6_instruction: |-
        How many times can loops help you in this
        puzzle?  \r
        \r
        Loops are your friend! Use a few of them to complete this
        puzzle with the fewest blocks possible.
      level 'grade3_Loops_7_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      level 'grade3_Loops_8_instruction: |-
        Collect all the nectar and make all of
        the honey using the fewest blocks possible.
      level 'grade3_Loops_9_instruction: |-
        Collect nectar from each flower and make
        honey at each honeycomb using the fewest blocks possible.
      level grade3_Loops_2_instruction: |-
        This time, use a loop to gather all of the
        nectar.
      loop pet test_instruction: |-
        Last time, you practiced using the "repeat forever"
        loop to make a sprite do something forever. This time, we will use it to make
        a virtual pet. \r
        \r
        This dog's name is Daisy. Daisy LOVES to snack on
        carrots. Use the "drag and drop" block to move the carrot to Daisy.
      loops_forvideo_angrybirds_ab_instruction: |-
        Use loops to get the bird to the
        pig!
      loops_forvideo_angrybirds_cf_instruction: |-
        Use loops to get the bird to the
        pig!
      loops_forvideo_bee_cf_instruction: |-
        Use loops to help the bee get nectar from
        all the flowers!
      loops_forvideo_collector_ab_instruction: |-
        Use loops to help the collector get
        all the gems!
      loops_forvideo_collector_cf_instruction: |-
        Use loops to help Laurel collect
        gems!
      loops_forvideo_harvester_ab_instruction: |-
        Use loops to help the harvester pick
        the corn!
      loops_forvideo_harvester_cf_instruction: |-
        Use loops to help the harvester pick
        her crops!
      loops_forvideo_iceage_ab_instruction: Use loops to get Scrat to the acorn!
      loops_forvideo_iceage_cf_instruction: Use loops to get Scrat to the acorn!
      love_spring_1_instruction: |-
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |-
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      marina_gameLab_play_instruction: Clone this level and make your own blocks!
      mike3bit_instruction: |-
        We start you with the 4x2 image Maddie was creating,
        but we've left out the last few pixels. Finish off the image by figuring
        out which colors are missing and encoding them.
      mike3bitbird_instruction: |-
        Here's an example of an image made with 3-bit color.
        Try changing it to understand how it works. If you want to reset the image,
        press "Start Over".
      mike3bitfreeplay_instruction: |-
        Make something awesome and share it with your
        classmates! You can copy and paste the value of a pixel to use it repeatedly.
      mike3bitmario_instruction: |-
        A careless binary coder typed in ONE extra 0 or
        1 somewhere within this image's data. The extra bit that is causing Mario
        to glitch out! \r
        \r
        Delete the extra bit to restore Mario back to normal!
      pet game 1_instruction: |-
        Use the "make a new sprite" block to make yourself
        a pet!
      pet game 2_instruction: |-
        Your pet needs some exercise! Use the "add behavior"
        block to get them moving.
      pet game 3_instruction: |-
        Pets love toys! Use a second "make sprite" block
        to give your pet a toy, then use the "move towards" behavior to make your
        pet run to their new toy.
      pet game 4_instruction: |-
        When your pet gets to their toy, they get excited!
        Use the "when touches" block to detect when your pet gets to their toy.\r
        \r
        When
        that happens, use the "remove behavior" block to make them stop walking,
        and the "add behavior" block to make them have a dance party!
      pet game 5_instruction: |-
        You can add lots more things for your pet to interact
        with! Play around with the "set sprite" block and make more stuff anywhere
        you want it!
      pet game 6_instruction: |-
        It's important for pets to learn to follow commands.
        Use the "when clicked" block to teach your pet to only start wandering after
        you click on them.
      pet game 7_instruction: |-
        Pets need to learn to stop, too! Use the "when clicked"
        block to teach your pet to stop wandering after you click on them.
      pet game 8_instruction: |-
        Your pet now has two toys! Use the "when clicked"
        block to get them to move to the toy you click on
      pet game 9_instruction: |-
        Your pet has been so good, they deserve a treat. Use
        the "add behavior" block to make the bone draggable, then drag it to your
        pet.
      playEventsK1_instruction: |-
        This game is called "Play Lab".  See if you can
        figure out what each block does.
      playEventsK2_instruction: |-
        Jorge wants to say "Hi there."\r
        \r
        Can you
        help?
      playEventsK3_instruction: |-
        Jorge wants to be scratched behind the ears!  Can
        you make it so that when you click Jorge he is happy?
      playEventsK4_instruction: |-
        Can you make it so that Jorge the dog chases Robin
        the bird when you click the up arrow?
      playEventsK5_instruction: |-
        Now add code so that Robin flies away when you click
        the forward arrow.
      playEventsK6_instruction: |-
        Have Robin talk back to Jorge when you click on
        her.
      playEventsK7_instruction: What else can you do in this fun scene?
      playLabDebugVideo1_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      ramp_artist_loops1_instruction: |-
        Move forward by 60 pixels to complete this
        puzzle.
      ramp_artist_loops1_2018_instruction: |-
        Move forward by 60 pixels to complete
        this puzzle.
      ramp_artist_loops2_instruction: |-
        Move forward five times and make this colored
        line.
      ramp_artist_loops2_2018_instruction: |-
        Move forward five times and make this
        colored line.
      ramp_artist_loops3_instruction: Use a `repeat` loop to draw five colored dashes.
      ramp_artist_loops3_2018_instruction: |-
        Use a `repeat` loop to draw five colored
        dashes.
      ramp_artist_loops4_instruction: |-
        What happens when you add a 72 degree right
        turn after everything else inside your loop?
      ramp_artist_loops4_2018_instruction: |-
        What happens when you add a 72 degree
        right turn after everything else inside your loop?
      ramp_artist_loops5_instruction: Use loops to draw this staircase.
      ramp_artist_loops5_2018_instruction: Use loops to draw this staircase.
      ramp_artist_loops6_instruction: Edit your loop to draw this staircase.
      ramp_artist_loops6_2018_instruction: Edit your loop to draw this staircase.
      ramp_artist_loops7_instruction: |-
        Look for a pattern and make this code shorter
        using loops!
      ramp_artist_loops7_2018_instruction: |-
        Look for a pattern and make this code
        shorter using loops!
      ramp_artist_loops8_instruction: |-
        Look for a pattern and make this code shorter
        using loops.
      ramp_artist_loops8_2018_instruction: |-
        Look for a pattern and make this code
        shorter using loops.
      ramp_artist_loops8_clone_instruction: |-
        Look for a pattern and make this code
        shorter using loops.
      ramp_artist_loops9_instruction: Solve this puzzle by drawing a square.
      ramp_artist_loops9_2018_instruction: Solve this puzzle by drawing a square.
      sample1_instruction: |-
        Our adventurer wants to collect coins.  But she can only
        use 4 blocks to get them.\r
        \r
        Can you help her grab as many as she can
        using just 4 blocks?
      sample10_instruction: Now you can use loops to draw whatever you like!
      sample10a_instruction: |-
        You have helped the adventurer and her bee!  As a reward,
        please stay and play around in my magical village. \r
        \r
        You should have
        everything you need to create a game of your own.
      sample2_instruction: |-
        Use what you've learned to help bee gather all of this
        honey using only the blocks that you have here.
      sample2a_instruction: |-
        Use what you've learned to help bee gather all of this
        honey using only 4 blocks.
      sample3_instruction: |-
        Now you can help bee make all of the honey using just
        the blocks in the toolbox.
      sample3assessment_instruction: |-
        Can you figure out how to gather all of this
        nectar in just one try?
      sample4_instruction: |-
        Our adventurer has found a stash of coins in this cave.\r
        \r
        Can
        you help her grab as many as she can using just 7 blocks?
      sample5_instruction: Help bee make all of the honey.
      sample6_instruction: 'Challenge: Help bee make all of the honey.'
      sample7assessment_instruction: |-
        Can you help bee make all of the honey in just
        one try?
      sample8_instruction: |-
        Look at this trove of coins! How many can you get the
        adventurer to grab?
      sample9_instruction: 'Use loops to help the artist connect all of the dots.

'
      sample9a_instruction: |-
        The wizard has found his potions!  Use everything you
        have learned to help him collect them.
      scrat 16 (copy 1)_instruction: |-
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: Ghianda! Ghianda! Ghianda! Usa un blocco "se" per condurmi
        là utilizzando il minor numero possibile di blocchi.
      scrat 17 (copy 1)_instruction: |-
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: 'Ok, facciamolo ancora una volta per far pratica: non
        è molto diverso dal precedente esercizio, ma fai attenzione a girare nella
        direzione giusta!'
      scrat 18 (copy 1)_instruction: |-
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: 'Il blocco "se-altrimenti" controlla una condizione: SE
        è vera fa una cosa ALTRIMENTI ne fa un''altra. Prova ad usare questo nuovo
        blocco per farmi arrivare alla ghianda.'
      scrat 19 (copy 1)_instruction: |-
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: 'Ancora un esercizio con il blocco "se-altrimenti": riesci
        a risolverlo correttamente al primo tentativo?'
      scrat 20_instruction: Riesci ad aggiungere solo 3 blocchi per farmi uscire da
        un labirinto più complesso? Se lo fai correttamente, riuscirò a camminare
        lungo un percorso tortuoso di qualsiasi lunghezza. Fai in fretta! Il ghiaccio
        si sta sciogliendo!
      skratDebugVideo1_instruction: Get Skrat to the Acorn.
      subgoal U3 L4 introducing subgoal labels_instruction: |-
        Introduce orient turtle
        and move turtle
      subgoal U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and
        to the left of the turtle's starting position. Click to see full instructions.
      subgoalU3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and
        to the right of the starting location. (Click to show full instructions)
      template test_instruction: what up
      testArtistForTestK_instruction: |-
        The Artist is trying to draw a line five times,
        but can't get it right.  Can you help?
      test_sarah_instruction: hi
      u3-old-drawing-view_instruction: DO This
      valentine_artist_03_instruction: Now try something on your own!
      weird_playLab_instruction: |-
        About My Robot Project! Write code so that clicking
        on each bird shows a new fact about your robot.
