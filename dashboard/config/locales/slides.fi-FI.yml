"fi":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Tervetuloa ensimmäiselle kooditunnille! Sukelletaanpa heti ohjelmoinnin
          maailmaan.
      2:
        image: notes/hoc1_2.jpg
        text: Käytämme Blocklyä. Se on on visuaalinen ohjelmointikieli, jossa koodia
          kirjoitetaan vetämällä ja pudottamalla lohkoja.
      3:
        image: notes/hoc1_3.jpg
        text: Yleensä koodi kirjoitetaan, mutta Blockly on visuaalinen. Jokainen lohko
          vastaa riviä "oikeaa" koodia.
      4:
        image: notes/hoc1_4.jpg
        text: Opit kohta tietotekniikan perusteet. Näitä käsitteitä käytetään kaikkialla
          aina pienistä sovelluksista Mars-mönkijän ohjaamiseen saakka.
      5:
        image: notes/hoc1_5.jpg
        text: Ohjelma on joukko ohjeita, joita tietokoneesi noudattaa.
      6:
        image: notes/hoc1_6.jpg
        text: Ensimmäisen ohjelmasi tehtävä on ohjata Angry Bird -lintu sokkelon läpi
          ja osua vihreään possuun.
      7:
        image: notes/hoc1_7.jpg
        text: Vasemmalla on sokkelo, jossa ohjelmasi suoritetaan. Jokaisen tehtävän
          ohjeet löytyvät sokkelon alapuolelta.
      8:
        image: notes/hoc1_8.jpg
        text: Keskimmäinen työkalupakki sisältää komentoja Angry Bird -linnulle. Näitä
          käytetään koodisi rakentamiseen.
      9:
        image: notes/hoc1_9.jpg
        text: Oikealla on työtilasi, johon rakennat ohjelmasi raahamalla lohkoja työkalupakista.
          Jos haluat poistaa lohkon, vedä se nurkasta löytyvään roskakoriin.
      10:
        image: notes/hoc1_10.jpg
        text: Jokainen lohko on käsky. Jos vedät "liiku eteenpäin" -lohkon työtilaasi
          ja painat "suorita ohjelma" -nappia, lintu liikkuu yhden ruudun sokkelossa.
      11:
        image: notes/hoc1_11.jpg
        text: Tehdäksesi enemmän kuin yhden toiminnon, voit vetää monta lohkoa työtilaasi
          ja liittää ne yhteen. Lintu tekee käskyt ylhäältä alaspäin.
      12:
        image: notes/hoc1_12.jpg
        text: Jos suoritat ohjelman ja haluat korjata ja yrittää uudelleen, paina
          "alusta" -nappulaa.
      13:
        image: notes/hoc1_13.jpg
        text: Ja eikun vain possujen kimppuun!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hei, olen JR! Kaikki ralliautotiimit tarvitsevat tietojenkäsittelyasiantuntijan
          voittaakseen. He analysoivat auton tietoja saadakseen sen kulkemaan nopeammin.
      2:
        image: notes/stage5_2.jpg
        text: Näissä tehtävissä olet taiteilija, joka piirtää viivaa kulkiessaan.
      3:
        image: notes/stage5_3.jpg
        text: Tässä lohkossa lukee "liiku eteenpäin 100 kuvapistettä". Kuvapisteet
          ovat pieniä pisteitä näytölläsi.
      4:
        image: notes/stage5_4.jpg
        text: Tässä lohkossa lukee "käänny oikealle 90 astetta". Se kääntää taiteilijaasi
          saman verran kuin "käännä"-lohkot sokkelotehtävissä.
      5:
        image: notes/stage5_5.jpg
        text: Napsauttamalla lohkon päissä olevia nuolia, voit muuttaa sitä määrää,
          jonka taiteilija liikkuu eteenpäin tai kääntyy. Leiki nyt hetki näillä lohkoilla
          tutustuaksesi niihin paremmin.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hei, olen Paola! Näissä tehtävissä olet maanviljelijä, jonka täytyy
          saada peltonsa täysin tasaiseksi aloittaakseen istutukset.
      2:
        image: notes/stage9_2.jpg
        text: Sinun täytyy auttaa häntä poistamaan kaikki multakasat ja täyttämään
          kaikki kuopat.
      3:
        image: notes/stage9_3.jpg
        text: Uudet lohkot poistavat yhden lapiollisen multaa kasasta ja täyttävät
          yhden lapiollisen multaa kuoppaan.
      4:
        image: notes/stage9_4.jpg
        text: Kasat ja kuopat ovat erikokoisia, joten sinun täytyy kertoa maanviljelijälle
          kuinka monta lapiollista hänen tulisi käyttää.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hei olen Katie! Yksi mielenkiintoisimmista asioista tietotekniikassa
          on, että tietokoneohjelma voi olla vuorovaikutteinen.
      2:
        image: notes/flappy02.jpg
        text: Joka kerta kun joku napsauttaa tai kirjoittaa tietokoneella tai puhelimella,
          se luo "tapahtuman", ja jokin kirjoitettu koodi päättää mitä tehdään kun
          tuo tapahtuma tapahtuu.
      3:
        image: notes/flappy03.jpg
        text: 'Esimerkiksi, sinulla voi olla tapahtumakäsittelijä, joka sanoo "kun
          hiirtä napsautetaan, soita ääni" '
      4:
        image: notes/flappy04.jpg
        text: Oletko koskaan kuullut pelistä nimeltä FlappyBird? Käyttäen tapahtumakäsittelijöitä,
          opimme kuinka ohjelmoida oma räätälöity versio FlappyBirdistä!
      5:
        image: notes/flappy05.jpg
        text: Nyt tehtävä koodaus tulee tapahtumaan raahaamalla koodia esittäviä lohkoja.
          Jokainen lohko vastaa yhtä tietokoneelle annettavaa komentoa. Pinnan alla
          kukin näistä lohkoista vastaa oikea koodia.
      6:
        image: notes/flappy06.jpg
        text: Kun tarkastelet työtilaa, huomaat joitain vihreitä lohkoja valmiiksi
          täytettynä - nämä ovat "tapahtumakäsittelijöitä"
      7:
        image: notes/flappy07.jpg
        text: Jos haluat linnun tekevän RÄPYTTELE-toiminnon kun NAPSAUTAT hiirtä,
          voit tehdä niin liittämällä "RÄPYTTELE"-lohkon soveltuvaan tapahtumakäsittelijaan.
          Näin lintu räpyttelee siipiään aina hiiren napsautuksella.
      8:
        image: notes/flappy08.jpg
        text: Jokaisessa tämän jakson tehtävässä esittelemme työtilassa yhden tai
          useamman uuden vihreän tapahtumalohkon. Liittämällä toimintolohkoja tapahtumalohkoihin,
          voit päättää mitä tapahtumista seuraa.
      9:
        image: notes/flappy09.jpg
        text: Kun näet tälläisen nuolen alaspäin, se tarkoittaa että voit muuttaa
          asetuksia - kuten esimerkiksi, mikä ääni kuuluu, kun flappy osuu maahan.
      10:
        image: notes/flappy10.jpg
        text: Viimeisessä tehtävässä voit luoda oman pelin ja jakaa sen ystäviesi
          kanssa. Pidä hauskaa!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hei, olen Mark! Opetellaanpa silmukoita. Silmukalla voit ohjata tietokonetta
          toistamaan mitä vain toimintoa uudelleen ja uudelleen, tuhansia tai jopa
          miljardeja kertoja.
      2:
        image: notes/hoc2_2.jpg
        text: Tässä tehtävässä haluamme liikuttaa lintua 5 ruutua eteenpäin osuaksemme
          possuun.
      3:
        image: notes/hoc2_3.jpg
        text: Voimme käyttää uutta "toista"-lohkoa apunamme.
      4:
        image: notes/hoc2_4.jpg
        text: Sen sijaan että vetäisimme 5 "liiku eteenpäin" -lohkoa...
      5:
        image: notes/hoc2_5.jpg
        text: Voimme laittaa "liiku eteenpäin" -lohkon "toista"-lohkon sisään ja kirjoittaa
          luvun lohkoon kertoaksemme sille, kuinka monta kertaa pitää toistaa.
      6:
        image: notes/hoc2_6.jpg
        text: 'Ja tämä on tärkeää: voit laittaa enemmän kuin yhden komennon "toista"-lohkoon.'
      7:
        image: notes/hoc2_7.jpg
        text: Pidä hauskaa uuden "toista"-lohkon kanssa!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hei, olen Chris. Ennen kuin liityin Miami Heatiin, opiskelin tietojenkäsittelytiedettä
          Georgian teknillisessä oppilaitoksessa. Kokeillaanpa uutta "toista kunnes"
          -lohkoa.
      2:
        image: notes/hoc3_2.jpg
        text: Mitä jos emme tietäisi, kuinka pitkälle linnun pitäisi liikkua saavuttaakseen
          possun?
      3:
        image: notes/hoc3_3.jpg
        text: Jos laitamme "liiku eteenpäin" -lohkon "toista kunnes" -lohkon sisälle,
          lintu liikkuu eteenpäin KUNNES se saavuttaa possun (tai törmää seinään).
      4:
        image: notes/hoc3_4.jpg
        text: 'Ja tämä on tärkeää: aivan kuin ennenkin, voimme laittaa monta lohkoa
          yhteen "toista kunnes" -lohkoon, niin että ne kaikki toistuvat.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hei, olen Bill! Opetellaanpa uusi keskeinen käsite: "jos"-lause. Tämän
          avulla tietokoneet tekevät päätöksiä.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Käytät "Jos"-lausetta itse joka päivä. Esimerkiksi, ennen kuin lähdet
          ulos, sanot itsellesi: "jos ulkona sataa, tarvitsen sadetakkini."'
      3:
        image: notes/hoc4_3.jpg
        text: Voimme laittaa zombit tarkistamaan, JOS vasemmalle on reitti ja kun
          zombie tulee sellaiseen kohtaan, voimme laittaa sen kääntymään sinne.
      4:
        image: notes/hoc4_4.jpg
        text: Raahataan siis yksi "Jos"-lohko ja sen sisään "käänny vasemmalle" -lohko.
      5:
        image: notes/hoc4_5.jpg
        text: Jos nyt laitamme "liiku eteenpäin" -lohkon sen yläpuolelle ja "toista"-lohkon
          sen ympärille, niin zombie tarkistaa joka kerta kun se liikkuu, onko vasemmalle
          reittiä – ja jos on, se kääntyy. "Toista"-lohko on hyvin tärkeä, jotta tarkistus
          tehdään joka askeleella.
      6:
        image: notes/hoc4_6.jpg
        text: Jos-lauseet ovat hyvin tärkeitä tietojenkäsittelytieteessä. Yksi ensimmäisistä
          ohjelmista, jonka kirjoitin, oli peli nimeltä ristinolla. Siinä oli jos-lause,
          joka sanoi "JOS toinen henkilö on voittamassa, estä se siirto, jolla hän
          voittaisi."
      7:
        image: notes/hoc4_7.jpg
        text: Pidä hauskaa "Jos"-lohkolla!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hei, nimeni on Saloni. Käytän tietojenkäsittelytiedettä ratkomaan ongelmia
          terveyden ja lääketieteen alueella. Opiskellaanpa "jos muuten" -lohkosta.
          Se näyttää "jos"-lohkolta, mutta siinä on ylimääräinen pala lopussa, joka
          sanoo "muuten".
      2:
        image: notes/hoc5_2.jpg
        text: Jos laitan "liiku eteenpäin" -lohkon paikkaan jossa on "tee" ja "käänny
          vasemmalle" -lohkot kohtaan jossa lukee "muuten" se tarkoittaa että zombie
          valitsee kahden vaihtoehdon väliltä. JOS edessä on reitti, zombie menee
          eteenpäin; MUUTEN (jos edessä ei ole reittiä) zombie kääntyy vasemmalle.
      3:
        image: notes/hoc5_3.jpg
        text: Kuten "jos"-lohkon, voimme laittaa myös "jos muuten" -lohkon "toista"-lohkon
          sisään niin, että zombie jatkaa liikkumista ja "jos muuten" -lohko tarkistaaa
          jos jonnekin voi kääntyä.
      4:
        image: notes/hoc5_4.jpg
        text: No niin, laitetaanpa nuo zombiet sinne minne kuuluvat!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Jos-muuten -lauseke on päätös kahden asian välillä. Katsotaanpa kuinka
          käytämme jos-muuten -lauseketta kaverimme Scrat-oravan kanssa.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Tämä lohko näyttää "jos" lohkolta, mutta siinä on "muuten" lisäosa lopussa.
          Jos laitan "liiku eteenpäin" -lohkon kohtaan jossa on "tee" ja "käänny vasemmalle
          -lohkon kohtaan, jossa sanotaan "muuten", se tarkoittaa, että Scrat-orava
          liikkuu eteenpäin jos edessä on reitti. Jos edessä ei ole reittiä, Scrat
          kääntyy vasemmalle.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Se tekee päätöksen ja suorittaa yhden kahdesta toimenpiteesta päätökseen
          perustuen. Ja aivan kuten "jos"-lohkoissa, voit laittaa "jos-muuten"-lohkoja
          "toista"-lohkojen sisään.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Autetaanpa Scrat-oravaa saamaan tammenterho!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hei, olen Brina, insinööri Instagramilla. Funktio on joukko koodirivejä,
          joita haluat käyttää uudelleen ja uudelleen. Niinpä sen sijaan, että kirjoittaisit
          kaiken tuon koodin joka kerta, voit käyttää yhtä lohkoa.
      2:
        image: notes/stage13_2.jpg
        text: Nyt opettelemme, miten määritellään funktioita. Funktion määritelmän
          nurkassa on tähti. Funktion nimi kirjoitetaan ylimmälle riville.
      3:
        image: notes/stage13_3.jpg
        text: Määrittelyn sisällä olevat lohkot kertovat, mitä se tekee. Tämän funktion
          nimi on "täytä 5", ja se koostuu "toista"-lohkosta ja "täytä"-lohkosta.
      4:
        image: notes/stage13_4.jpg
        text: Määritelmät ovat työtilassa, mutta maanviljelijä ei suorita funktiota
          ennen kuin raahaamme "täytä 5" -funktiolohkon funktiot-valikosta.
      5:
        image: notes/stage13_5.jpg
        text: 'Laitetaanpa funktiot käytöön! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hei, olen Makinde! Opetellaanpa "niin kauan kuin" -lohkon toimintaa. '
      2:
        image: notes/stage9_6.jpg
        text: '"Niin kauan kuin" -lohko toistaa mitä tahansa asetat sen sisälle, niin
          kauan kuin ylhäällä oleva ehto pitää paikkansa eli on TOSI.'
      3:
        image: notes/stage9_7.jpg
        text: Esimerkiksi, jos maanviljelijä seisoo kasan päällä, hän jatkaa yhden
          lapiollisen poistamista "niin kauan kuin" hänen allaan on kasaa jäljellä.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hei, minä olen Trina ja työskentelen Pixarilla. Olen tehnyt töitä liutaan
          eri elokuvia, kuten esimerkiksi Shrekiin.
      2:
        image: notes/stage11_2.jpg
        text: Tämä on uusi "laskuri"-silmukkamme. Se suorittaa komentoja yhä uudelleen
          ja voit muuttaa silmukan toimintaa hieman jokaisella kerralla.
      3:
        image: notes/stage11_3.jpg
        text: Tässä esimerkissä "laskuri" -silmukkamme sanoo "laske laskurilla  50:stä
          90:een 10 välein" ja sen sisällä meillä on "piirrä neliö" -lohko. Raahaa
          "laskuri" -lohko "Muuttujat"-valikosta "pituus"-kohtaan.
      4:
        image: notes/stage11_4.jpg
        text: Tämä tarkoittaa, että taiteilijamme aikoo piirtää neliön, jonka sivujen
          pituus on 50 kuvapistettä, lisätä tähän 10 ja piirtää neliön, jonka sivujen
          pituus on 60 kuvapistettä. Sitten hän uudelleen ja uudelleen lisää 10 kuvapistettä
          ja piirtää neliön, kunnes neliön sivun pituus on 90. Lopulta meillä on neliöt,
          joiden koot ovat 50, 60, 70, 80 ja 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hei, olen Janete, ja olen insinööri Zyngalla.
      2:
        image: notes/stage15_2.jpg
        text: Mitä jos haluamme piirtää joukon kolmioita, jotka ovat kaikki eri pituisia?
      3:
        image: notes/stage15_3.jpg
        text: Voisimme kirjoittaa kaiken tuon koodin käsin, tai sitten voimme käyttää
          funktioita, joille annetaan parametreja.
      4:
        image: notes/stage15_4.jpg
        text: Tehdäksesi tämän, napsauta sinistä tähteä "piirrä kolmio" -funktion
          määrittelyssä. Sitten raahaa "syötä nimi" "syöte"-lohkoon.
      5:
        image: notes/stage15_5.jpg
        text: Jos sitten kirjoitat "pituus" kohtaan, jossa lukee "x" ja painat rivinvaihtonäppäintä
          ("Enter"), olet määrittänyt pituussyötteen funktiollesi.
      6:
        image: notes/stage15_6.jpg
        text: Napsauta sitten tähteä. Seuraavaksi avaa muuttujat-valikko ja raahaa
          "pituus"-lohko "siirry eteenpäin" -lohkoon funktiomäärityksessäsi. Raahaa
          myös pois vanha numero-lohko.
      7:
        image: notes/stage15_7.jpg
        text: Kun haluat käyttää parametrillista funktiota, avaa Funktiot-valikko
          ja raahaa sieltä "piirrä kolmio arvolla pituus" -funktio.
      8:
        image: notes/stage15_8.jpg
        text: Nyt voit käyttää "matematiikka"-lohkoa ja syöttää eri numeroita piirtääksesi
          eri kokoisia kolmioita.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Onneksi olkoon! Viime pulman ratkaisussa kirjoitit koodin, joka voi
          ohjata minkä tahansa robotin läpi haarautumattomasta labyrintistä tai kuinka
          tahansa pitkästä tunnelista, oli kulkijasi sitten zombi, lintu, Mars-mönkijä
          tai jopa itsestään ajava auto.
      2:
        image: notes/hoc6_2.jpg
        text: Käyttämäsi peruskäsitteet esiintyvät kaikissa ohjelmissa ja mobiilisovelluksissa
          joita koskaan tulet käyttämään. Opimme toistosilmukat, toista kunnes -lauseet,
          jos-lauseet ja jos-muuten-lauseet.
      3:
        image: notes/hoc6_3.jpg
        text: Jos pidit ensimmäisestä kooditunnistasi, vieraile code.org-sivustolla
          jatkaaksesi tietotekniikan opintojasi! Kun suoritat 20 tunnin kurssimme,
          opit ohjelmoinnin perusteet ja voit ryhtyä opettelemaan miten tehdään sovelluksia
          puhelimille, robottien ohjeita, pelejä tai mitä tahansa.
      4:
        image: notes/hoc6_4.jpg
        text: Teknologia muuttaa kaikkea mitä teemme. Sillä ole väliä, oletko nuori
          tai vanha; ohjelmointi on hauskaa, se on luovaa, ja kuka tahansa voi oppia!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Esityksen muistiinpanot tulossa pian!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hei, nimeni on Lyndsey. Olen malli, näyttelijä ja kirjoitan omia sovelluksiani.
          Käytetään koodia liittyäksemme Annan ja Elsan seuraan, kun he tutustuvat
          jään taikaan ja kauneuteen.
      2:
        image: notes/frozen1_2.jpg
        text: Luot lumihiutaleita ja kuvioita luistellessasi. Tee talven ihmemaa jaettavaksi
          ystävillesi.
      3:
        image: notes/frozen1_3.jpg
        text: Seuraavan tunnin aikana opit koodaamisen perusasiat. Perinteinen ohjelmointi
          tapahtuu yleensä tekstillä, mutta me käytämme Blocklyä, jossa ohjelmia luodaan
          kokoamalla niitä visuaalisista lohkoista. Jopa osa yliopistoista käyttää
          samaa tapaa. Konepellin alla luot kuitenkin ihan oikeaa koodia.
      4:
        image: notes/frozen1_4.jpg
        text: Ohjelma on joukko ohjeita, jotka kertovat tietokoneelle mitä tehdä.
          Rakennetaanpa koodia, eli ohjelma, joka auttaa Elsaa luomaan yksinkertaisen
          viivan. Käytämme tätä myöhemmin luodessamme monimutkaisempia kuvioita.
      5:
        image: notes/frozen1_5.jpg
        text: Näyttösi on jaettu kolmeen pääosaan. Vasemmalla on jään pinta, jossa
          ajat ohjelmasi. Ohjeet kullekin tasolle on kirjoitettu juuri jäänpinnan
          alle.
      6:
        image: notes/frozen1_6.jpg
        text: Keskimmäinen alue on työkaluvalikko, ja jokainen näistä lohkoista on
          toiminto jonka Elsa ja Anna voivat tehdä.
      7:
        image: notes/frozen1_7.jpg
        text: Valkoista aluetta oikealla kutsutaan työtilaksi ja siinä rakennamme
          ohjelmamme. Liikkuaksesi jääpinnalla, käytä "Liiku eteenpäin"-lohkoa.
      8:
        image: notes/frozen1_8.jpg
        text: Tässä "Liiku eteenpäin"-lohko sanoo "liiku eteenpäin 100 kuvapistettä".
          Kun painat "Suorita", mitä tapahtuu? Elsa siirtyy eteenpäin tietyn määrän
          ruudulla, itse asiassa 100 kuvapistettä! Kuvapisteet ovat hyvin pieniä neliöitä
          tietokoneesi ruudulla.
      9:
        image: notes/frozen1_9.jpg
        text: Toinen lohko joka meillä on tässä tehtävässä sanoo "käänny oikealle
          90 astetta". Ja kun käytämme tätä "Käänny oikealle"-lohkoa, saamme Elsan
          kääntymään tietyn määrän. Voit kokeille erilaisia arvoja nähdäksesi kuinka
          kauas haluat Elsan kääntyvän. Kulma mitataan reitiltä Elsan edessä. Joten,
          tämä on 90 asteen käännös. Ja tämä on 120 asteen käännös.
      10:
        image: notes/frozen1_10.jpg
        text: Muista, voit muuttaa kuvapisteiden tai asteiden määrää napsauttamalla
          nuolta niiden vieressä.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hei, olen Paola! Tietokoneet ovat tosi hyviä toistamaan toimenpiteitä.
          Sinä voit laskea 10, 20 tai 100:aan, mutta tietokone voi laskea miljardeihin
          tai vielä suurempiin lukuihin. Se ei kyllästy ja sillä kuluu siihen aikaa
          vain muutamia sekunteja. Mitä tahansa se tekee – laskee, piirtää tai jotain
          muuta – tietokone pystyy toistamaan asioita satoja tai vaikka miljardeja
          kertoja.
      2:
        image: notes/frozen2_2.jpg
        text: Ohjelmoinnissa tätä kutsutaan silmukaksi. Silmukalla toistat koodiasi
          kerta toisensa jälkeen. Seuraavassa tehtävässä sinun tulee auttaa Annaa
          luomaan neliö käyttäen "Toista"-lohkoa.
      3:
        image: notes/frozen2_3.jpg
        text: Mitkä tahansa koodilohkot jotka laitat "Toista"-lohkon sisälle, toistetaan
          sarjassa niin monta kertaa kuin haluat.
      4:
        image: notes/frozen2_4.jpg
        text: Piirtääksesi neliön, voit käyttää "Liiku eteenpäin" ja "Käänny oikealle"
          -lohkoja neljä kertaa. Mutta helpompaa on kertoa tietokoneelle "Liiku eteenpäin"
          ja "Käänny oikealle 90 astetta" kerran ja käskeä sitä toistamaan tämä toimintopari
          4 kertaa. Tehdäksesi tämän, sinun täytyy laittaa "Liiku eteenpäin" ja "Käänny
          oikealle" -lohkot "Toista"-lohkon sisään.
      5:
        image: notes/frozen2_5.jpg
        text: Muista, voit muuttaa "Toista"-lohkoissa olevaa numeroa miksi tahansa.
          Sen sisältö toistetaan numeron määräämä määrä kertoja.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hei, olen Chris Bosh. Olen koripalloammattilainen ja koodasin yliopistossa.
      2:
        image: notes/frozen3_2.jpg
        text: Yksi tietojenkäsittelytieteen tärkeimmistä käsitteistä on uusien komentojen
          luominen. Suurimmassa osassa ohjelmointikieliä on vain 100 käskysanaa tai
          komentoa. Ohjelmoinnin taika onkin omien uusien sanojen määrittely ja rakentaminen
          näistä rakennuspalikoista.
      3:
        image: notes/frozen3_3.jpg
        text: Kun olet kerran opettanut tietokoneen tekemään toiminnon käyttäen tätä
          toimintosarjaa, voit keksiä oman nimesi toiminnolle niin että sen toistamisen
          myöhemmin on helppoa. Voit myös määritellä oman käskysi ja antaa sille nimen,
          tätä kutsutaan funktioksi.
      4:
        image: notes/frozen3_4.jpg
        text: Hei, olen Jess. Ohjelmoidessasi lohkoilla, voit käyttää funktioita kun
          on joukko toimintoja, jotka haluaisit tehdä monta kertaa. Esimerkiksi, olet
          kirjoittanut koodia luodaksesi neliön.
      5:
        image: notes/frozen3_5.jpg
        text: 'Voit määritellä tämän funktiona, jonka nimi on "Luo neliö" '
      6:
        image: notes/frozen3_6.jpg
        text: Nyt sinulla on uusi lohko, jota voit käyttää kerta toisensa jälkeen
          luodaksesi määrättömästi uusia neliöitä.
      7:
        image: notes/frozen3_7.jpg
        text: Monia yksinkertaisia kuvioita voidaan käyttää monimutkaisten kuvioiden
          piirtämiseen. Seuraavassa tehtävässä juuri piirtämäsi ympyrän koodi on saatavilla
          uutena funktiona, joka tekee eri kokoisia ympyröitä. Osaatko käyttää sitä
          auttaaksesi Elsaa luomaan taidokkaita ja kauniita kuvioita jäähän?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Aiomme luoda pelejä käyttäen Play Lab:ia. Hyvissä peleissä on tarina
          ja jokaisessa tarinassa on hahmoja. Me opimme, kuinka voimme saada hahmojemme,
          kuten noidat tai avaruusoliot puhumaan, liikkumaan ja vaikuttamaan toisiinsa.
          Tämän opetusohjelman loppuun mennessä osaat rakentaa pelin tyhjästä ja voit
          jakaa sen ystäviesi kanssa.
      2:
        image: notes/playlab_intro_2.png
        text: Näyttösi on jaettu 3 osaan. Vasemmalla on pelin tila, jossa ohjelmasi
          suoritetaan. Ohjeet jokaiselle tasolle kirjoitetaan alla.
      3:
        image: notes/playlab_intro_3.png
        text: Keskialue on työkaluvalikko, ja jokainen näistä lohkoista on koodinpätkä.
          Valkoista aluetta oikealla kutsutaan työtilaksi ja siinä me rakennamme ohjelmaamme.
      4:
        image: notes/playlab_intro_4.png
        text: Aloittaaksesi sinun täytyy liittää lohkosi oranssiin "suoritettaessa"
          lohkoon. Voit liittää useita lohkoja yhteen vetämällä niitä, kunnes näet
          keltaisen viivan ja sitten ne kohdistuvat yhteen.
      5:
        image: notes/playlab_intro_5.png
        text: Ensimmäisessä palapelissä meidän hahmomme on pingviini ja me saamme
          sen sanomaan  "Hei!" vetämällä sanonta -lohko ulos ja liittämällä se suoritettaessa
          -lohkoon ja kirjoittamalla "Hei." Voimme myös saada pingviinin liikkumaan
          käyttämällä siirrä oikealle ja siirrä vasemmalle -lohkoja. Kun olet saanut
          lohkot on paikalleen, niin klikkaa suorita nappia ja näet mitä olet ohjelmoinut.
      6:
        image: notes/playlab_intro_6.png
        text: 'Aloita, niin loppuun päästyäsi osaat luoda oman pelin kaikenlaisille
          pelaajille, jotka voivat: olla vuorovaikutuksessa, vaihtua onnellisiksi
          tai surullisiksi,  kerätä pisteitä tai heittää tulipalloja tai jopa kadota
          yksi kerrallaan. Se on kaikki sinusta kiinni, mitä haluat pelisi tekevän.'
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Nyt aiomme oppia jotain, mitä kaikki pelisuunnittelijat käyttävät päivittäin.
          Niitä kutsutaan tapahtumiksi. Tapahtuma kertoo ohjelmallesi, että se kuuntelee
          kun jotakin tapahtuu. Kun se asia tapahtuu, tapahtuma suorittaa toiminnon.
      2:
        image: notes/playlab_events_2.png
        text: Joitakin tapahtumien esimerkkejä on hiiren napsautuksen kuuntelu,  nuoli-painikkeen
          käyttö tai näytön napautus.
      3:
        image: notes/playlab_events_3.png
        text: Tässä me aiomme tehdä avaruusbotin tervehtimään maanasukkeja, kun pelaaja
          klikkaa häntä. Me käytämme "kun napsautetaan" -lohkoa ja liitämme "sano"
          -lohko siihen. Kun pelaaja klikkaa avaruusbottia, niin kaikki "kun napsautetaan"
          -lohkoon  liitetty tapahtumalohko suoritetaan. Mitä sinun avaruusolio sanoo?
      4:
        image: notes/playlab_events_4.png
        text: On myös "kun nuoli" -lohkoja. Jos linkität "siirrä"-lohkot näihin, voit
          aloittaa siirtämään sinun näyttelijöitä ylös, alas, vasemmalle tai oikealle.
          Askel askeleelta pelistäsi tulee enemmän vuorovaikutteinen.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Tämä on "toista ikuisesti" -lohko. Kaikki tämän lohkon sisäiset tapahtumat
          jatkuvat pelissä ikuisesti.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Jos haluat näyttelijäsi tekevän jotain toistuvasti ilman että pelaaja  joutuu
          tekemään mitään, niin me laitamme ne lohkot "toista ikuisesti" -lohkon sisään.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Tässä seuraavassa tehtävässä tavoitteenamme on auttaa velhoa  partiomaan
          valtakunnan rajoja, vasemmalle ja oikealle jatkuvasti. Oppiessasi miten
          toista -komennot toimivat, tulet säästämään huomattavasti aikaasi  kun myöhemmin
          rakennat omaa peliäsi.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Nämä ovat piirtämispalikkasi. Käytä oikeaa palikkaa liikuttaaksesi taiteilijaa
          sinne, minne hänen täytyy mennä täyttääkseen harmaat viivat.
      2:
        image: notes/C1_artist_intro_2.png
        text: Nämä ovat hyppypalikoita. Kun käytät näitä, taiteilija liikkuu, mutta
          ei piirrä, joten käytä näitä hypätäksesi seuraavalle harmaalle viivalle.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Eivätkö mehiläiset olekin tosi siistejä? Tässä seuraavassa tehtäväryhmässä
          sinun tehtäväsi on auttaa mehiläistä pääsemään kukkiin, saamaan mettä kukista
          ja lentämään hunajakennon yli tehdäkseen hunajaa. Sinun täytyy käyttää "kerää"-
          ja "tee" -palikoita tätä tehtävää varten.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Jokaisessa kukassa on eri määrä mettä: 1, 2, 3, tai enemmän. Tiedämme,
          miten paljon mettä on punaisissa kukissa, nurkassa olevasta pienestä numerosta.
          Varmista siis, että saat kaikki medet kukasta ennen kuin liikut eteenpäin.
          Myös jokaiseen hunajakennoon mahtuu vain tietty määrä hunajaa: 1, 2, 3 tai
          enemmän. Joten, muista tehdä niin paljon hunajaa, kuin hunajakennoon mahtuu.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Jos pystyt saamaan kaikki medet ja tekemään kaiken hunajan, onnistut
          ja siirryt seuraavalle tasolle. Muussa tapauksessa sinun täytyy yrittää
          tätä tehtävää uudelleen. Leiki vähän aikaa ja koe, miltä tuntuu olla ohjelmoija!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Silmukka on toiminnan toistamista. Mennessäni mehiläispesälle tarkistamaan,
          katson kehikon ja sitten laitan sen takaisin, joten toistan samaa toimintoa
          useita kertoja. Se on liikkumista silmukassa, saman toiminnon tekemistä
          useita kertoja.
      2:
        image: notes/C1_bee_loops_2.png
        text: Tällä tasolla, haluamme mehiläisen keräävän kolme mettä kukasta. Sen
          sijaan, että käyttäisit kolmea "kerää" -palikkaa, käytät "toista" -palikkaa
          saadaksesi mettä kolme kertaa. Klikkaa "Suorita" ja katso, menikö sinulla
          oikein. Kivaa!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Tämä oppitunti on nimeltään iso tapahtuma. Siinä on kysymys siitä, miten
          voimme hallita ohjelmiamme ja todella muuttaa ohjelman toimintaa lennossa
          käyttäen tapahtumia, kuten napin painallusta tai hiiren klikkausta.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Tätä oppituntia varten, sinua ohjataan paperisella kaukosäätimellä.
          Se on aivan kuin todellisessa videopelissä.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Tapahtuma on toiminta, joka saa jotain tapahtumaan. Se on samanlaista
          kuin kun klikkaat hiiren painiketta ja verkkosivu latautuu. Se on tapahtuma.
          Kun kosketat tabletin näyttöä vierittääksesi, se on myös tapahtuma. Tapahtumat
          ovat hyvä tapa antaa käyttäjän ohjata ohjelmaa silloin, kun he sitä tarvitsevat
          tai haluavat.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Selllaisia asioita tapahtuu, joihin me kaikki vastaamme. Meillä on nälkä
          ja menemme jääkaapille. Kuulemme postinkantajan tulevan ja hän laittaa meidän
          postimme postilaatikkoon ja sitten me menemme hakemaan postimme. Ne ovat
          aivan kuin tapahtumat, kuten napin painaminen tai ohjaimen liikuttaminen.
          Ne ovat jotakin, joka tapahtuu, joka laukaisee meidät tekemään jotakin.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Videopeleissä on tapahtuma nimeltä "Update" ja se tapahtuu 30 tai 60
          kertaa sekunnissa. Videopelien ohjelmoijille se on melkein tärkeämpi tapahtumana
          kuin painikkeet tai ohjain.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: 'Päätapahtuma, jota seuraamme, on "Update" -hetken tapahtuminen. Sitten
          tarkistamme ohjaussauvan tuossa hetkessä. Niinpä sanomme: "Onko joku painanut
          painiketta tässä kehyksessä? Kyllä vai ei?" Ilman tapahtumia, pelaaja ei
          voisi liikkua, ei voisi hypätä, ei voisi kontrolloida, mitä tapahtuu. Videopeli
          ei voisi animoida mitään.'
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Hiekanveistossa sinun täytyy tietää että epäonnistuminen on osa ohjelmaa.
          Mutta jos jatkat, siitä ei tule mitään muuta kuin parempaa ja jännnittävämpää
          sinulle. Kärsivällisyys on pelin nimi. Pysy sen kanssa, tulet rakastamaan
          sitä.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Tätä oppituntia kutsutaan perustan rakentamiseksi. Tällä oppitunnilla
          työskentelemme tehtävän parissa, jonka tarkoitus on olla todella vaikea.
          Sinulle selviää, miten tehdä vähintään yhtä pitkä rakennelma kuin yksi näistä
          kupeista ja se tulee olemaan tarpeeksi vahva kannattelemaan kirjan painoa.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: There might be times that our creation doesn't work out. There might
          be times that we get frusrated and want to give up. There might be a lot
          of those moments. But if we keep on trying, give it our best shot over and
          over again, then we're sure to get it before long.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistence is all about hanging in there when you really want to give
          up. If you want to create something new and different, there's going to
          be a lot of failures along the way.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: The trick to persistence is choosing to keep on going and learn from
          your failures instead of quitting because you're frustrated. Frustration
          actually just means there's something wonderful around the corner. So don't
          quit before you get to it. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hei, nimeni on Miral Kotb ja olen Iluminaten luoja. Työssäni on jotain
          mitä käytämme sekä tansseissa ja valopukujen ohjelmoinnissa. Ne ovat silmukoita!
          Silmukat ovat tapa toistaa toiminto uudelleen ja uudelleen.
      2:
        image: notes/C1_getting_loopy_2.png
        text: When you repeat something multiple times, like my actions to keep the
          hula hoop spinning, I'm performing a loop of that action. This is a loop.
          This is a loop. And this is a loop.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Today we're going to have a dance party. We'll act out loops with a
          new dance. The Iteration. We're going to learn about loops using a dance.
          You will learn a couple of easy steps and repeat them over and over to complete
          the dance.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands
          behind your head. Put your hands on your waist. Lift your left hand up.
          Lift your right hand up. Pretty simple, right? You will discover that you
          can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: We actually do use loops in our dancing. The dancers are wearing computers,
          all in the same network. I might loop the lights through to the same dancers
          over and over again. In the loop I might have an iteration where I'll say
          you want to go loop through these six dancers over and over again and then
          within the loop you want to increase the speed of the light. And that's
          all created through loops. Loops are important in computer science because
          they make our work shorter and easier.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: This lesson is called Happy Maps. Today we're gonna help our furry little
          friend Flurb get to her fruit.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Make your Flurb go to your fruit. To do this you'll need to figure out
          which way the Flurb needs to go and direct her with arrows. In order for
          the Flurb to get to the apple, what direction does the Flurb have to go?
          Line to make it go up.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Create your algorithm by gluing arrows next to the map that you're trying
          to solve. The second one it's the same but it's going down.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Se on kuin ohjelmointia paperilla. Ja se on siinä!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Debugging is finding and fixing problems. There are lots of ways to
          debug problems. One of the easiest is to move step by step until where you
          find where something goes wrong. Here I'm trying to do a back handspring
          on the beam but I keep falling off.
      2:
        image: notes/C1_maze_debugging_2.png
        text: I walked through each part step by step and realized where my mistake
          was. I wasn't putting my hands on the beam correctly. So I tried another
          back handspring on the beam with my new hand position and I got it. I was
          really glad I debugged my back handspring.
      3:
        image: notes/C1_maze_debugging_3.png
        text: To learn about debugging, we start with a set of blocks already on the
          stage. You'll notice that these blocks won't get you to the goal. We need
          to debug the solution and fix it. What went wrong? You'll notice that you
          needed to keep going west one more block.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Let's fix this by adding another west block and hitting run to see if
          you got it right. Yay, you got it!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle
          and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: You need to drag the blocks over from the toolbox to the workspace.
          Make sure it's under the "when run" block and when you think you've got
          the right solution, then you can click "Run" and watch the bird go to the
          pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: To get the bird to the pig in this level... rather than drag three North
          blocks on to the workspace, you will use the "repeat" block. Drag the "repeat"
          block on to the workspace and enter the number 3. Then drag the "move North"
          block into the "repeat" block and hit "Run" to see if you got it right.
          Congratulations, you got it!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: This lesson is called move it, move it. Together we're going to write
          a program to get our friends from the starting with the compass rose to
          the smiley face goal.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Mutta hymynaama on surullinen ja vain yksi henkilö tietää miten sinne
          pääsee. Aloitetaan tämä ohjelma.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Ohjelma on algoritmi, joka on koodattu joksikin, joka voidaan suorittaa
          laitteella. Useimmat meistä ajattelee että ohjelmat kirjoitetaan tietokoneille.
          Ohjelmat ovat todella hyviä siihenkin, mutta ne ovat myös hyödyllisiä muissakin
          paikoissa. Voit tehdä oman pelin tai jopa robootin tekemään asioita sinulle.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Nimeni on Jeremia. Moikka! Olen seitsemän vuotta vanha. Rakastan pelata
          äiti tietokoneella, mutta joudun aina kysymään lupaa ensin. "Äiti, saanko
          pelata tietokoneella? Kyllä saat, rakas!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Rakastan äitini tietokonetta koska voin mennä nettiin. Netti on tavallaan
          niin kuin naapurustosi. Voit käydä katsomassa siistejä paikkoja, voit puhua
          perheelle ja kavereille ja voit oppia paljon uusia juttuja.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Eilen kävin eläintarhassa, joka on lähellä kotiini. Näin vauva seepran.
          Otin siitä kuvan ja vaihdoin sen raitojen värin, sitten lisäsin sille hatun
          ja tallensin sen minun kokoelmaan hauskoista eläimistä. Mahtavaa! Myöhemmin
          menin paikkaan kauas pois. Kävin Keniassa. Se on maa Afrikassa. Paljon seeproja
          asuu siellä.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Joskus netissä juttelen ihmisten kanssa jotka tunnen, esimerkiksi mummini
          joka asuu toisessa kaupungissa. Hei mummi! Hän tekee minulle keksejä jotka
          hän lähettää minulle syntymäpäivänäni. "Nam, haluaisin että netin välityksellä
          pystyisi lähettää tuoksuja!" Puhun eri ihmisille netissä, niin kuin serkulleni,
          mutta puhun vain ihmisille joita tunnen.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score!
          I also like to draw and create new things and share it with my friends.
          Cool! Sometimes I visit websites where I learn new things but I always stick
          to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The internet is a super fun place. But just like when you cross a street
          in your neighborhood, you also have to be careful when you go online. Here
          are three rules to remember. Rule number 1: Always ask your parents first.
          Rule number 2: Only talk to people you know. Rule number 3: Stick to places
          that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Vau, se oli hauskaa! Päivällisaika. Kirjaudun nyt ulos. En malta odottaa
          uudelleenkirjautumista, jotta pääseen näkemään minne pääsen seuraavaksi.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Today we're going to learn about Pair Programming. In pair programming
          you work as a team. Why should two people use one computer? Because two
          heads are better than one. In pair programming you and your partner are
          going to sit down together at one computer and you are both going to work
          on the same project.
      2:
        image: notes/C1_pair_programming_2.png
        text: In pair programming, one person is the driver and the other person is
          the navigator, just like driving a car. The driver sits at the computer
          and is the one using the keyboard and mouse or touchscreen and controlling
          the main actions of the computer. The other person is the navigator. The
          navigator helps the driver by answering the driver's questions and pointing
          out potential problems or mistakes.
      3:
        image: notes/C1_pair_programming_3.png
        text: Communication is key to successful pair programming. No insults, be
          respectful, don't be a bossy navigator, because nobody likes a backseat
          driver. You and your partner should always be talking. The driver can explain
          what she or he is doing. And the navigator can help suggest what to do next.
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver
          focuses on the details. Both roles are important. Pair programming is all
          about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: This lesson is called planting a seed and it's going to help us understand
          algorithms. Algorithms are specific instructions that explain the order
          in which to do something. Even everyday things like eating breakfast or
          brushing your teeth are algorithms that require small steps to get a job
          done.
      2:
        image: notes/C1_planting_seed_2.png
        text: Computers can be really smart but they can only understand you if you
          tell them exactly what you want step by step. The great thing about algorithms
          is that if you follow the instructions in order, you can do something that
          you didn't know how to do ahead of time. It's like following a recipe.
      3:
        image: notes/C1_planting_seed_3.png
        text: Today we're going to plant our own seeds using an algorithm. Create
          your own algorithm by cutting apart the pictures. Select the pictures that
          show steps in planting a seed and arrange those pictures in the correct
          order.
      4:
        image: notes/C1_planting_seed_4.png
        text: Now, it's time for you to see if your algorithm works. Follow the steps
          in the algorithm very carefully. Are they in the correct order? Did you
          succeed in planting a seed by following the algorithm? It's like programming
          with pictures!
      5:
        image: notes/C1_planting_seed_5.png
        text: When we want to make chocolate, there are many big steps to that process
          and each of those big steps has a set of smaller steps and there are different
          recipes or algorithms depending on how we want the chocolate to taste. Each
          step is important, even the small ones, so that without one step, the rest
          of them cannot be completed. Creating algorithms that others can understand
          is really important. That's why each step has to be written down so that
          no matter who does it, the result is the same.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your
          story will have actors and you will be able to make these actors talk and
          interact with each other. Start thinking of what kind of story you want
          to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: The cat's always been afraid of the dog and what if the cat figures
          out that the dog is trying to be nice? The "when run" block starts everything.
          The "move" block will move your character and the "say" block will make
          your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: This is the "when actors collide" block which you can link up to the
          other blocks.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: I was making the dog come over and say "Hi" but then the cat got scared
          so it ran away. "Ahh" If there was more time, it would have been a happy
          ending. The end!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee.
          As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: See if you can spell the word they give you in the box below the stage.
          But bee careful! Moving the wrong direction will add letters you don't want.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: In this example, your goal is going to be to move the bird to get the
          pig. Now, we're going to be able to use the repeat block in order to be
          able to do this very easily. You can either do this by giving the computer
          a move forward command five times in order to advance the bird one step
          each time to the pig or you can just tell the computer to move forward once,
          and then tell it to repeat that five times and it'll do the same thing.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: In order to do this, you drag your move forward command and then you
          put it inside the repeat block. And you can click on it and tell it how
          many times you  to repeat the block to tell it how many steps you want it
          to take forward.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: One more thing is you can put as many commands as you want inside the
          repeat block. So in this example, you're telling it to move forward and
          turn left, which it'll do five times. Have fun!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C2_artist_intro_2.png
        text: Näissä tehtävissä olet taiteilija, joka piirtää kynällään erilaisia
          muotoja. Minne tahansa taiteilijasi liikkuukin, hän jättää kulkiessaan peräänsä
          viivan.
      3:
        image: notes/C2_artist_intro_3.png
        text: Liikkuaksesi kankaalla sinun tulee käyttää liiku eteenpäin palikkaa.
          Tämä liiku eteenpäin palikka käskee liikkumaan eteenpäin 100 pikselin verran.
          Kun painamme suorita, mitä tapahtuu? Taiteilija liikkuu eteenpäin juuri
          sadan pikselin verran. Nämä pikselit ovat käytännössä laitteesi näytöllä
          olevia todella pieniä neliöitä.
      4:
        image: notes/C2_artist_intro_4.png
        text: Toinen tehtävässä tarjolla olevista palikoista käskee kääntymään oikealla
          90 astetta. Kun raahaamme sen mukaan, taiteilijamme kääntyy halutun verran.
          Voit kokeilla ja valita kuinka paljon pitäisi kääntyä. Tämä on 90 asteen
          käännös.
      5:
        image: notes/C2_artist_intro_5.png
        text: Ja tämä vuorostaan on 120 asteen käännös. Muista että voit milloin vain
          vaihtaa näitä lukuja, painamalla pikseleitä tai asteita osoittavaa lukua
          tai sen vieressä olevaa pikku kolmiota. Nauti piirtämisestä taiteilijasi
          kanssa!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials
          on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options.
          Sometimes people think of this as only 1s and 0s. But you can represent
          binary with combinations of on or off, up and down, in and out or really
          any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hi, I'm Orion and I program robots here at Play-im. All computer and
          robot brains at their most fundamental level are little electronic gates.
          When the gate is open, electricity can flow through and when it's closed,
          electricity can't.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: An example of binary on the robot is the robot's eyes. The robot's eyes
          are LEDs and those are lights that are either on or off. It's a binary system,
          one or the other. We can use the lights to represent binary numbers. If
          we have a set of robots, we can say that the first robot is the 1s place
          and the second robot is the 2s place, the third robot is the 4s place and
          so on. That's how you represent a binary number. The robots will do it with
          their binary eyes and count it out for you.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions
          based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: I want to walk to the park but first I have to decide whether I should
          bring an umbrella or not. So I look out the window. If it's cloudy, I'm
          going to take my umbrella. Else, I'll take some sunglasses. I think I'd
          better take the umbrella. What I see and hear determines what I take to
          the park.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Conditionals are used in games too. Today we're going to practice using
          conditionals with a card game. In this game, the card that I draw determines
          what my friends are going to do. If I draw a seven, everyone claps. Else,
          everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals.
          Give it a try! Conditionals are what make computers seem smart. A computer
          program that includes conditionals can react to the user and change its
          course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Think about your favorite video game. Do you earn more points for some
          actions than you do for others? This occurs because the computer is using
          conditionals. It's the way a computer makes a decision. How about, if you
          hit the target, you earn ten points. Else, you lose three. When you know
          how conditionals work, you can create all kinds of exciting games.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is
          something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Let's debug this code by slowing down the speed and watching it as it
          goes through each block step by step.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Ah, siinä se ongelma on! Kissan viikset ovat 75 kuvapistettä pitkät,
          ei 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: On your head you hold your hat and your smarts will tell you where you're
          at and to think about the zoo, and to nod hello to you and you! Use your
          head when you're online to keep what's yours inside your mind and to know
          how to be safe, how to give your life some private space! From your head
          down to your toes, pause, think about it. From your feet up to your nose,
          pause and think online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use your heart to grow and grow, and to give yourself a healthy glow,
          and to make a valentine, tell someone that you'll be mine! Use your heart
          when you're online, feel what's right and always kind, and show your friends
          respect, to be fair and nice on the internet. From your head down to your
          toes, pause, think about it. From your feet up to your nose, pause and think
          online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use your arms to hug your pet, to keep your clothes from getting wet,
          and to wear your favorite sleeves and to help you fly and make believe.
          Use your arms when you're online, to take break and balance time and leave
          your tech behind and to find yourself a tree to climb. From your head down
          to your toes, pause, think about it. From your feet up to your nose, pause
          and think online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use your gut to store your food, and to listen to its growling mood,
          to make a belly flop, and to feel the gas in soda pop. Use your gut when
          you're online, to know to watch for certain signs, and to let it guide the
          way and tell you when it's not ok. From your head down to your toes, pause,
          think about it. From your feet up to your nose, pause and think online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: So think with your head, and feel with your heart, balance with your
          arms, listen to your gut, online. Use your legs to run and kick, and to
          jump and bounce on a pogo stick, and to dance around the block, and to skip
          along in your smelly socks. Use your legs when you're online, to stand up
          to bullies who cross the line, and remember to stand tall, be nice to creatures
          great and small.
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet
          up to your nose, pause and think online! So think with your head, and feel
          with your heart, balance with your arms, listen to your gut, stand up with
          your legs. From your head down to your toes, pause, think about it. From
          your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched,
          copied, shared, broadcast and is permanent. What kind of digital footprint
          are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: This lesson is called "Graph Paper Programming" and it's all about algorithms.
          Today we're going to learn how to write programs that show each other how
          to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: An algorithm is a list of instructions for completing a task. We'll
          follow this set of instructions to make the bowl. Algorithms are really
          helpful when you need someone else to understand how to do something.
      3:
        image: notes/C2_graph_paper_3.png
        text: If you're writing an algorithm for a computer, you have to break it
          down to little tiny steps. So finish this row and go to the next, then the
          next one, and you'll be done.
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can
          recreate that same piece again, or I can teach someone else to do it. Put
          the glass in the kiln, fuse it together, follow the rest of the instructions
          to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when
          we are programming our artist. We already have some blocks out on our stage
          but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag
          out the repeat block and put the moveforward and turn right blocks inside
          the repeat block. When we hit run, the artist will repeat those steps four
          times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: A loop is a repetition of activity. Going into a hive to inspect, I
          look at a frame, and then I put it back. I repeat that same activity multiple
          times. It's looping around, doing the same activity multiple times.
      2:
        image: notes/C2_bee_loops_2.png
        text: This is the repeat block. Whatever you put inside the repeat block will
          repeat those actions the number of times that you tell it to. For example,
          in this level, rather than drag out move forward and get nectar three times,
          we're going to just drag them out once each and repeat the action three
          times. That made it easy!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly on jaettu kolmeen pääosaan. Vasemmalla on lintulabyrintti, jossa
          ohjelmasi suoritetaan. Ohjeet kullekin tasolle on kirjoitettu tämän alle.
          Keskimmäinen alue on työkalupakki, ja jokainen sen sisältämistä palikoista
          on komento jonka lintu ymmärtää. Valkea alue ruudun oikeassa laidassa on
          työtila, jonne tulemme rakentamaan ohjelmamme.
      3:
        image: notes/C2_maze_intro_3.png
        text: If I drag the move block to our work space and press "Run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C2_maze_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "Run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: Jos haluat joskus poistaa palikan, voit vain poistaa sen pinosta vetämällä
          sen roskakoriin. Kun painat Suorita, voit aina painaa Alusta-painiketta
          saadaksesi linnun takaisin alkuun. Nyt, annetaanpa sioille kyytiä!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things
          that people do everyday. Cookie recipes and directions for building a birdhouse
          are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Today we're gonna make, create, and test an algorithm for a paper airplane.
          But first, we need to break this big project into easy to follow small steps.
          For making a paper airplane, we need to decide what steps to take and in
          what order to take them.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: You'll create your algorithm by first cutting apart the pictures. Next,
          you'll select the 6 pictures that show the steps needed to make a paper
          airplane and arrange those pictures in the correct order. After you have
          everything in order, you will trade algorithms with another student team
          to test out the algorithm to see if the algorithm works. A well designed
          algorithm is super important to making the best paper airplane.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: When we want to make chocolate, there are many big steps to that process.
          And each of those big steps has its own set of smaller steps. And there
          are different recipes, or algorithms, depending on how we want the chocolate
          to taste. Each step is important, even the small ones. So without one step,
          the rest of them cannot be completed. Creating algorithms that others can
          understand is really important. That's why each step has to be written down,
          so no matter who does it, the result is the same.
    C2_playlab_createstory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Tähän mennessä olemme tehneet animaation tai tarinan, joka tekee samat
          asiat joka kerta suoritettaessa. Nyt voit tehdä oman vuorovaikutteisen pelin,
          jota voi oikeasti pelata.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Tarjolla on "kun nuoli" ja "liikuta hahmoa" -lohkot. Voit laittaa nämä
          lohkot yhteen ja liikuttaa hahmoja ympäriinsä nuolinäppäimillä.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Today we're going to do relay programming. It's all about programming
          under pressure and debugging the mistakes that sometimes happen when you
          work really quickly or in teams. We'll use graph paper programming to simulate
          coding, and use relay races to simulate having a deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: In relay programming, teams will be racing to finish a graph paper program.
          You have to check your teammate's work, or debug it, fix it if there's a
          mistake, add your arrow, and run back and tag your teammate.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms
          or code. There are lots of ways to debug problems. One of the easiest is
          to move step by step until you find where something goes wrong, then fix
          it.
      4:
        image: notes/C2_relay_programming_4.png
        text: Here, I'm trying to do a back handspring, but I keep falling off. I
          walk through each part, step by step, and realize where my mistake was.
          My coach showed me I wasn't putting my hands on the beam correctly. So I
          tried another back handspring on the beam with my new hand position, and
          I stuck it! I was really glad I debugged my back  handspring. We figured
          it out! Debugging is finding and fixing problems. Nice, good job!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: One thing that computers are really good at is repeating commands. As
          a person, you'd get really bored if you had to do the same thing lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times, and not get bored and be able to carry that out really well.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: So for example if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than a century to actually
          write out all of those emails to everyone. But with just a few lines of
          code, I can have a system send an email to everyone on Facebook wishing
          them a happy birthday. So that's what loops are, and why they're valuable,
          and something that computers can do very well.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: In this example your goal is going to be to move the bird to get the
          pig.  Now we're gonna be able to use the "repeat" block in order to be able
          to do this very easily. You can either do this by giving the computer a
          "move forward" command five times in order to advance the bird one step
          each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Or you can just tell the computer to "move forward" once, and then tell
          it to "repeat" that 5 times, and it will do the same thing. So in order
          to do this you drag your "move forward" command, and then you put it inside
          the "repeat" block.And you can click on it and tell it how many times you
          want to repeat the block to tell it how many steps you want it to take forward.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Now one more thing is you can put as many commands as you want inside
          the "repeat" block. So in this example you're telling it to move forward
          and turn left, which it will do five times. All right good job and have
          fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C3_artist_functions_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square, so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code. It will get done
          for us. We've added that concept to our programming language.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C3_artist_intro_2.png
        text: Näissä tehtävissä olet taiteilija, joka piirtää kynällään erilaisia
          muotoja. Minne tahansa taiteilijasi liikkuukin, hän jättää kulkiessaan peräänsä
          viivan.
      3:
        image: notes/C3_artist_intro_3.png
        text: Liikkuaksesi kankaalla sinun tulee käyttää liiku eteenpäin palikkaa.
          Tämä liiku eteenpäin palikka käskee liikkumaan eteenpäin 100 pikselin verran.
          Kun painamme suorita, mitä tapahtuu? Taiteilija liikkuu eteenpäin juuri
          sadan pikselin verran. Nämä pikselit ovat käytännössä laitteesi näytöllä
          olevia todella pieniä neliöitä.
      4:
        image: notes/C3_artist_intro_4.png
        text: Toinen tehtävässä tarjolla olevista palikoista käskee kääntymään oikealla
          90 astetta. Kun raahaamme sen mukaan, taiteilijamme kääntyy halutun verran.
          Voit kokeilla ja valita kuinka paljon pitäisi kääntyä. Tämä on 90 asteen
          käännös.
      5:
        image: notes/C3_artist_intro_5.png
        text: Ja tämä vuorostaan on 120 asteen käännös. Muista että voit milloin vain
          vaihtaa näitä lukuja, painamalla pikseleitä tai asteita osoittavaa lukua
          tai sen vieressä olevaa pikku kolmiota. Nauti piirtämisestä taiteilijasi
          kanssa!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: When you put a loop inside of another loop, we call that a nested loop.
          For example, here we're given the code already to draw one triangle with
          sides of length 100 pixels using the repeat times block set to three, once
          for each side of a triangle.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: But we want to draw six triangles. In order to do that, we're going
          to take that loop and place it inside of another repeat times block. Pretty
          cool!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C3_bee_debugging:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define
          new commands, how to add your own words to a computer language. Most computer
          languages have only about one hundred words or commands. The art and magic
          is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: We do this all the time in sports. For example, in basketball, you start
          by learning how to dribble, how to do a lay-up, how to rebound. Once you've
          learned these really basic moves, you learn new moves and put together these
          building blocks, like a pick and roll or give and go. You can then go from
          there to do more complex plays. Once you learn that play and give it a name,
          everybody on the team knows how to do it.
      3:
        image: notes/C3_bee_functions_3.png
        text: Similarly once you've taught a computer how to do an action once using
          these sequences of commands, you can make up your own name for that action
          so it's easy to repeat it later. When you define your own command and give
          it a name, that's called a function. Now we're going to use functions to
          help the bee.
      4:
        image: notes/C3_bee_functions_4.png
        text: In this example, our function is called get 2 nectar, this green block
          right here. We know what get 2 nectar does by looking at this grey box which
          is the function definition. If we look inside there, the get 2 nectar is
          going to get nectar and then get nectar again. Always look at what's inside
          the grey box so that you know what these green function blocks can do.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Now we're going to use nested loops with the bee. We're given some starter
          code which tells the bee to move forward and get nectar three times and
          then turn right. Let's take that whole piece of code and nest it inside
          another repeat block and set to repeat three times. Done!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: You're going to be creating your very own bounce game that you'll be
          able to share with your friends! How cool!
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow
          keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: We can do this by linking the when left arrow block to the move left
          block and the when right arrow block to the move right block. Give it a
          go and you'll be programming your own bounce game in no time!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Tämä oppitunti sisältää automatisointiajattelua. Joskus uuden pelin
          oppiminen voi olla haastavaa, vai mitä? Aluksi kaikki voi tuntua todella
          sekavalta ja joskus ei ole edes olemssa ketään joka kertoisi sinulle pelin
          säännöt, joten sinun täytyy selvittää ne itse.
      2:
        image: notes/C3_computational_thinking_2.png
        text: Hyvä uutinen on, että voit tulla paremmaksi hahmottamaan uusia asioita,
          kun osaat muutamia ajattelutemppuja. Nämä temput ovat ainutlaatuisia tapoja
          tarkastella ja ratkaista ongelmia. Tällä oppitunnilla opit noin neljä temppua
          ja harjoittelet niitä ystäviesi kanssa selvittääksesi erään pelin säännöt.
      3:
        image: notes/C3_computational_thinking_3.png
        text: Kun purat suuren ongelman pienemmiksi paloiksi, käytät aivojasi ongelman
          hajoittamiseen. Ja kun suuri ongelma on hajoitettu pienemmiksi ongelmiksi,
          voimme siirtyä seuraavaan temppuun, jota kutsutaan mallien havainnoinniksi.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Silloin etsimme yhtäläisyyksiä asioiden välillä. Kun löydämme asioita,
          jotka ovat samanlaisia, voimme selvittää, mitkä asiat ovat erilaisia. Näiden
          erojen poistamista kutsutaan abstrahoinniksi. (abstraktio)
      5:
        image: notes/C3_computational_thinking_5.png
        text: Kun olemme löytäneet askelet joilla ratkaista ongelma, voimme asettaa
          ne tiettyyn järjestykseen, tuottaen algoritmin. Nyt kuka tahansa voi käyttää
          ohjeitani tämän ongelman ratkaisemiseen. Aiomme käyttää näitä neljää vaihetta
          selvittääksemme kuinka pelata peliä jonka sääntöjä emme tunne. Pelin lopussa
          sinun tulisi pystyä pelaämaan jotain, joka näyttää tältä!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: This lesson is called crowdsourcing. In this lesson we'll use a deck
          of cards to learn about how much easier some things can be to do in groups
          instead of trying to do them all alone. So grab some friends and make something
          awesome. Crowdsourcing is getting help from a large group of people to finish
          something faster.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: When you see a movie, each second of the movie is 24 individual pictures,
          we call those frames. So every one of those pictures needs to be created
          and rendered and put all together. My team and I, we're all software developers.
          We all work together to create a piece of software that actually creates
          an image, creates the final image that you see on screen. That's a tool
          that artists and other developers can use as part of their teamwork and
          their process to be able to create the images that they want on screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: While loops are pretty similar to what you do in everyday life. Imagine
          you are washing your car, you'll keep scrubbing until it's clean. While
          it's not clean, continue to scrub. You're evaluating these things all the
          time.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: Unlike the Postal Service, the first thing that happens is that the
          internet breaks the message into smaller parts so it can be sent more easily.
          These small parts are called packets. Each packet of the message is delivered
          to the destination one at a time. These packets are all put together in
          the right order so that the receiver can read the message correctly. Of
          course, there are many more things to learn about how the internet works
          but this is a great start. You're on your way to becoming a savvy internet
          user! Be sure to tell your family and friends what you've learned!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: The if block helps the zombie make a decision. It checks something.
          For example, let's use the block that says if there's a path to the left,
          and put a turn left command inside it. We're telling the zombie to check
          its surroundings, see if there's a path on the left and if so, make that
          turn.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Then we use the move forward block inside this repeat to get it to keep
          moving forward as long as it just wants to go straight. Then when there's
          a turn, the if block will tell it to make that turn to the left. You can
          see that if we do that, if we take the turn to the left and otherwise moving
          forward, we'll achieve our goal.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: It's an example of using an if statement which is really a fundamental
          concept in computer programming. One of the first things I learned was how
          to write a program that played tic-tac-toe. I had if statements to say,
          ok, if the other person is about to win, go ahead and block that spot. Have
          fun learning how to use if statements, it's a key concept.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could
          use five move forward blocks or we could tell the computer to move forward
          and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move
          forward block inside the repeat block. Hit run and the zombie will move
          forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Tähän mennessä olemme tehneet animaation tai tarinan, joka tekee samat
          asiat joka kerta suoritettaessa. Nyt voit tehdä oman vuorovaikutteisen pelin,
          jota voi oikeasti pelata.
      2:
        image: notes/playlab_2.png
        text: Tarjolla on "kun nuoli" ja "liikuta hahmoa" -lohkot. Voit laittaa nämä
          lohkot yhteen ja liikuttaa hahmoja ympäriinsä nuolinäppäimillä.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program.
          The written notes and words tell the singer exactly what to do. Some parts
          of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program
          that are used over and over again are called functions. When you read song
          lyrics and it says the word chorus, do you sing the word chorus? No, you
          look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: In this lesson, you'll learn a silly little song called little bunny
          foo foo. The song has a chorus that you will sing several times over and
          over again. A function is a piece of code that you can call and use over
          and over again. It makes programming easier and more efficient so you don't
          have to write out the steps of your function over and over again. You can
          just write it once!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: This is the conditional block. It says if you're at the flower or the
          honeycomb, then do something. This is useful when we don't know how much
          honey or nectar to get as we see here with this question mark.
      2:
        image: notes/C4_bee_conditional_2.png
        text: In this example, we're going to say, if it's a flower, get all the nectar
          and then use another one to say, if it's a honeycomb, make honey. Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: We have a new block that's called the if/else block. It's a conditional
          statement just like the if block you've used in the puzzles before. But
          now there's a new part at the bottom that says else. The if/else block lets
          the bee make a decision between two sets of actions. If the bee is at a
          flower, the bee will do the set of actions you put in the first part where
          it says do. If the bee is not at a flower, the bee will do the set of actions
          you put in the slot where it says else.
      2:
        image: notes/C4_conditionals_2.png
        text: If statements are how computers are able to make decisions. Humans set
          up conditions for the computer that say if the computer is presented with
          a certain situation do this. Else, which just means otherwise, do that.
          The top of our if/else block says if at flower. But the top of our block
          could say other things, like if nectar equals 2 or if there's a path ahead,
          our block will behave in the same way. That if the statement at the top
          is true it will do the first set of actions. But if the statement at the
          top is false, it will do the second set of actions.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running. The benefit of using a real for loop
          instead of the repeat block is that you can actually see the counter variable
          and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Now that you've edited function blocks, it's time to create a new function
          block from scratch. It's really simple. You'll see the toolbox has a category
          called functions. If you click on this, you'll see an orange button called
          create a function. Clicking on this brings up the function editor that you've
          already used to edit existing function blocks.
      2:
        image: notes/C4_function_create_2.png
        text: Just like before, you started by naming your function, writing down
          a description for what the function is supposed to do. For instance, it's
          supposed to draw a square or draw a triangle and then drag blocks from the
          toolbox into the white work space below. Remember to drag these blocks inside
          the green wrapping block for the function.
      3:
        image: notes/C4_function_create_3.png
        text: Once you're done, click on save and exit. This will take you back to
          the main puzzle work space. The new function you created will show up as
          a green block in the function category in your toolbox. Drag and drop this
          into the main work space and use it like any other block to solve the puzzle.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C4_function_edit_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code and it will get
          done for us. We've added that concept to our programming language.
      3:
        image: notes/C4_function_edit_3.png
        text: In this puzzle, we have already created a draw a square function for
          you. You'll see it in the toolbox as a green block. What you'll need to
          do is write the same code you wrote before to draw a square and put it in
          this function. To do that, click on the edit option in the green draw a
          square block. This will open up the function editor. The function editor
          has three parts. A place where you name your function. This will appear
          on the green block before that function. Then write out a short description
          of what your function is supposed to do.
      4:
        image: notes/C4_function_edit_4.png
        text: In this case, it's supposed to draw a square. The white space below
          this is the work space and works just like the work space you've already
          been using. Drag and drop blocks from the toolbox into this work space.
          Remember to put the blocks that create a square inside the green wrapping
          block for the function. Once you're done, click on save and exit. This will
          take you back to the main puzzle work space. Now you can use the draw the
          square function block just like any other block to solve the puzzle.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Here's a function that draws a square with 50 pixel sides. That's great
          but what if I wanted to draw a square with sides 50 pixels and another square
          with sides of 100 pixels? We shouldn't have to make two separate functions
          that do almost the same thing. Instead, we can use one function with a parameter.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parameters allow us to pass values into a function that get used as
          variables inside the function. Let's try adding a parameter called like
          to this function so we can use it to create squares of different sizes.
          In the function editor, you can edit the name and description like before
          but now you can also add a parameter. Write the name of your parameter in
          the space and click Add Parameter. This will create a red block with the
          name of the parameter you just created. Now we can replace the move forward
          by 100 block with the parameter Length so it will move forward by Length.
      3:
        image: notes/C4_function_parameters_3.png
        text: Click save and close and drag out your new create a square block from
          the functions category in the toolbox. You'll notice there's an empty space
          next to length because the function wants to know what value the parameter
          Length should have. Drag a number block from the Math category and place
          it in this space. See how you can use the function again and again with
          different lengths to make squares of different sizes? Try it for yourself!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C4_intro_2.png
        text: Blockly on jaettu kolmeen pääosaan. Vasemmalla on lintulabyrintti, jossa
          ohjelmasi suoritetaan. Ohjeet kullekin tasolle on kirjoitettu tämän alle.
          Keskimmäinen alue on työkalupakki, ja jokainen sen sisältämistä palikoista
          on komento jonka lintu ymmärtää. Valkea alue ruudun oikeassa laidassa on
          työtila, jonne tulemme rakentamaan ohjelmamme.
      3:
        image: notes/C4_intro_3.png
        text: If I drag the move block to our work space and press "run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C4_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: Jos haluat joskus poistaa palikan, voit vain poistaa sen pinosta vetämällä
          sen roskakoriin. Kun painat Suorita, voit aina painaa Alusta-painiketta
          saadaksesi linnun takaisin alkuun. Nyt, annetaanpa sioille kyytiä!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: If I want to draw a rectangle 50 pixels tall and that is twice as wide
          as it is tall, how would I program the computer to do that? Well, I could
          tell the artist to go up fifty, turn right, and then go over 100 and move
          the whole thing twice. But then I'm doing the math for the computer.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers
          are really good at doing math so we should leave it to them whenever possible.
          If I just used a variable called height instead, then I could easily change
          height to fifty and then change my algorithm to tell the artist to go up
          by height, turn right and then go over by height times 2, which gives us
          a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Näyttösi on jaettu kolmeen pääosaan. Vasemmalla on pelialue, jossa ohjelmasi
          suoritetaan. Ohjeet kullekin tasolle on kirjoitettu tämän alle. Keskimmäinen
          alue on työkalupakki, ja jokainen sen sisältämistä palikoista on palanen
          ohjelmakoodia. Valkea alue ruudun oikeassa laidassa on työtila, jonne tulemme
          rakentamaan ohjelmamme.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: Voin muuttaa pikselien määrää, viivan pituutta, käyttäen tätä alasvetovalikkoa.
          Kuinka pitkä sen pitikään olla? Voit katsoa ohjeita uudelleen Suorita-nappulan
          alapuolelta. Tässä käytimme Siirry eteenpäin -palikkaa ja aion valita matkaksi
          100 pikseliä. Voin halutessani poistaa palikan vetämällä sen työkalupakkiin
          tai roskakoriin. Laitetaanpa se takaisin.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: Tämän automatisointiajattelun oppitunnin on tarkoitus opettaa sinulle,
          kuinka vaikea ongelma voidaan pilkkoa joukoksi useita yksinkertaisempia
          ongelmia. Oppitunnin tavoitteena on kirjoittaa joukko ohjeita, joita joku
          voi seurata ja piirtää jonkin oppitunnin kuvauksessa olevan hirviön.
      2:
        image: notes/unplug2_2.png
        text: 'Oppilaat jakautuvat ryhmiin kirjoittaakseen ohjeet ja vaihtavat ne
          sitten toisen ryhmän kanssa, jonka tehtävänä on piirtää hirviö. Ryhmät kirjoittavat
          ohjeet käyttäen automatisointiajattelun neljää vaihetta: osiin jakaminen,
          mallien havainnointi, abstraktio ja algoritmien luominen.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: 'Hei, olen Kathleen Kennedy ja olen elokuvan, Star Wars: Force Awakens,
          tuottaja. Tänään saat työskennellä yhden tähdistämme, BB-8:n parissa. BB-8
          on pallomainen droidi. Kaikkea sen toimintaa ja liikkumista ohjaa tietokoneohjelmisto.
          Tietojenkäsittelytiede vaikuttaa kaikkiin teollisuudenaloihin, markkinoinnista
          terveydenhuoltoon tai elokuva-alalle. Itse asiassa tämäkin elokuva, The
          Force Awakens, vaati satojen tietokoneinsinöörien työpanoksen toteutuakseen.'
      2:
        image: notes/starwars_intro_2.JPG
        text: Hei olen Rachel Rose, ja olen vanhempi tuotekehitysinsinööri ILM:llä
          (Industrial Light and Magic), jossa johdan animaatio- ja olentojenkehitystiimiä.
          Elokuvassa The Force Awakens vastualueeni on auttaa taiteilijoita kehittämään
          hahmoillemme liikkuvat rungot, joiden avulla luomamme hahmot saadaan liikkumaan
          ja näyttämään hyvin uskottavilta tuossa kaukaisessa galaksissa.
      3:
        image: notes/starwars_intro_3.JPG
        text: Seuraavan tunnin aikana rakennamme oman star Wars pelin. Opetamme sinulle
          ohjelmoinnin perusasiat. Yleensä ohjelmointi tapahtuu pitkälti tekstillä,
          mutta me käytämme ohjelmointiin valmiita koodipalikoita, joista ohjelmia
          voidaan koota raahaamalla ne osaksi ohjelmaa. Konepellin alla luot kuitenkin
          ihan oikeaa koodia. Kun olet oppinut perusteet palikoita käyttäen, voit
          vaihtaa Javascript:iin, joka on yksi webin suosituimmista ohjelmointikielistä.
      4:
        image: notes/starwars_intro_4.JPG
        text: Aluksi autamme Rey:tä ohjelmoimaan BB-8:n noutamaan tarvittavat romun
          palaset. Näyttösi on jaettu kolmeen pääosaan. Vasemmalla on Star Wars -pelialue,
          jossa ohjelmasi suoritetaan. Ohjeet kullekin tasolle on kirjoitettu tämän
          alle.
      5:
        image: notes/starwars_intro_5.JPG
        text: Keskimmäinen alue on työkalupakki, ja jokainen sen sisältämistä palikoista
          on palanen ohjelmakoodia - käsky jonka BB-8 ymmärtää.
      6:
        image: notes/starwars_intro_6.JPG
        text: Valkea alue ruudun oikeassa laidassa on työtila, jonne tulemme rakentamaan
          ohjelmamme.
      7:
        image: notes/starwars_intro_7.JPG
        text: Jos raahaan työtilaan "siirry vasemmalle" -palikan, mitä tapahtuu? BB-8
          siirtyy yhden ruudun verran vasemmalle ruudukossa.
      8:
        image: notes/starwars_intro_8.JPG
        text: Entä jos haluan BB-8:n tekevän jotain sen siirryttyä vasemmalle? Voin
          lisätä ohjelmaamme uuden palikan. Valitsen "siirry ylös"-palikan ja raahaan
          sen juuri "siirry vasemmalle"-palikan alle. Oikean paikan löytyessä ilmestyy
          pudotuskohtaan korostusväri. Päästäessäni nyt irti raahaamastani palikasta,
          palikat liittyvät yhteen.
      9:
        image: notes/starwars_intro_9.JPG
        text: Kun painan Suorita-nappia uudelleen, BB-8 tekee työtilaan kasaamani
          komennot järjestyksessä ylhäältä alas. Jos missään vaiheessa haluat poistaa
          yksittäisen koodipalikan, poista se komentojen pinkasta ja raahaa se takaisin
          työkalupakkiin.
      10:
        image: notes/starwars_intro_10.JPG
        text: ' Painettuasi "Suorita", voit aina painaa "Alusta"-nappia palauttaaksesi
          BB-8:n alkuun. Lähdetäänpä rullailemaan!'
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Palikoidemme sisällä olemme käyttäneet JavaScript-komentoja. JavaScript
          on tällä hetkellä maailman eniten käytetty ohjelmointikieli. Koodipalikat
          ovat mahtava tapa opetella ohjelmoimaan ja itse asiassa jopa huippuyliopistot
          kuten {harvardLink} ja {berkeleyLink} opettavat alkeita tällä tavoin. Kuitenkin
          kun alkeet ovat hallussa, insinöörit kirjoittavat koodinsa tekstimuodossa
          - se on lopulta aina nopeampaa.
      2:
        image: notes/starwars_typing_2.JPG
        text: Voimme kirjoittaa satoja komentoja etsimättä niitä työkalupakista tai
          raahaamalla niitä minnekään. Koska olet yhä oppimassa uutta, kirjoittaminen
          voi olla aluksi hitaampaa, mutta haluaisimme silti että kokeilet.
      3:
        image: notes/starwars_typing_3.JPG
        text: Klikkaamalla "näytä teksti" -nappia työtilan oikeassa yläkulmassa, voit
          siirtyä missä tahansa tehtävässä palikkatilasta, tilaan, jossa kirjoitat
          koodisi tekstinä.
      4:
        image: notes/starwars_typing_4.JPG
        text: Seuraavalla oppitunnilla aloitamme työt kirjoitustilassa. Täällä voit
          edelleen vetää lohkoja työkalupakista tai kirjoittaa komentojen nimiä käyttäen
          näppäimistöä. Kun alat kirjoittaa, näet mahdollisten komentojen nimet kirjoittamasi
          kohdan alapuolella. Sen sijaan että kirjoittaisit koko komennon nimen, voit
          valita jonkin niistä toimiaksesi nopeammin. Omassa työssäni käytän automaattista
          täydennystoimintoa aina kun kirjoitan koodia.
      5:
        image: notes/starwars_typing_5.JPG
        text: Kun kirjoitat koodia, sinun täytyy olla tarkka jotta tietokone osaa
          tulkita mitä tarkoitat. Jokaisen komennon nimi täytyy kirjoittaa täsmälleen
          oikein, kiinnittäen huomiota myös isoihin ja pieniin kirjaimiin. Sulkujen
          ja puolipisteiden tulee olla oikeilla paikoillaan. Pienikin kirjoitusvirhe,
          ja BB-8 lakkaa liikkumasta koska se ei enää ymmärrä koodiasi.
      6:
        image: notes/starwars_typing_6.JPG
        text: Jos teet virheen jollakin rivillä, virheesi korostetaan, jotta voit
          muuttaa tekstiäsi ja korjata ongelman.
      7:
        image: notes/starwars_typing_7.JPG
        text: Jos jäät jumiin, voit aina aloittaa alusta käyttäen Alusta -painiketta.
          Voit myös palata palikkanäkymään milloin tahansa, napsauttamalla nappia
          oikeassa yläkulmassa. No niin, kokeillaanpa vaihteeksi kirjoittaa koodia.
          Älä hermostu jos teet virheitä. Jokainen tarvitsee muutaman harjoituskerran
          saadakseen kaiken kohdalleen.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hei, nimeni on Charita Carter. Olen vanhempi luova tuottaja täällä Walt
          Disney Imagineering:illa. Vastuullani on johtaa tiimejä, jotka tuottavat
          vierailukohteet, jotka vieraamme pääsevät kokemaan. Etsimme jatkuvasti tapoja,
          joilla voimme kehittyä ja siten luoda asiakkaillemme yhä hienompia kokemuksia.
          Teknologia onkin keskeistä tämän tavoitteen kannalta.
      2:
        image: notes/starwars_events_2.JPG
        text: Onnittelut, sinä teit sen! Olet ohjelmoinut BB-8:n. Nyt olemme valmiita
          kokeilemaan jotain vaikeampaa, joten eiköhän jatketa. Nyt kun olet oppinut
          ohjelmoinnin perusteet, matkaamme ajassa taaksepäin rakentamaan oman pelin,
          jonka pääosassa seikkailevat R2-D2 ja C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: Tehdäksemme pelin, meidän tulee oppia jotakin, joka on peliohjelmoijille
          arkipäivää - eli mitä ovat tapahtumat. Tapahtumien avulla ohjelmasi voi
          kuunnella tai odottaa tiettyjen asioiden tapahtumista. Kun jotain tapahtuu
          suoritetaan sinun määräämäsi komennot.
      4:
        image: notes/starwars_events_4.JPG
        text: Esimerkkejä tapahtumista, joita voidaan kuunnella, ovat hiiren napsautukset,
          nuoli-näppäinten painamiset ja näytön napauttamiset.
      5:
        image: notes/starwars_events_5.JPG
        text: Nyt tarkoituksenamme on saada R2-D2 liikkumaan ylöspäin ja toimittamaan
          viesti yhdelle kapinallispilotille ja sitten jatkamaan alaspäin toisen pilotin
          luo. Käytämme tapahtumia saadaksemme sen liikkumaan, kun pelaaja käyttää
          ylös/alas nuolinäppäimiä tai vastaavia nappuloita ruudulla.
      6:
        image: notes/starwars_events_6.JPG
        text: Käytämme whenUp() -tapahtumapalikkaa ja liitämme siihen goUp() -palikan.
          Kun pelaaja painaa nuolinäppäintä ylös, koodi joka on liitetty whenUp()
          -palikkaan suoritetaan. Samalla tavoin saamme R2-D2:n liikkumaan myös alaspäin.
      7:
        image: notes/starwars_events_7.JPG
        text: Tätä varten käytämme komentoa nimeltä whenUp(). Kun vedät ulos komennon
          työkalupakista, huomaat että puolipisteen sijaan se alkaa ja loppuu kaarisulkeisiin.
          Tämä antaa meille tilaa laittaa muita komentoja kaarisulkeiden väliin. Jokainen
          käsky jonka asetamme näiden sulkeiden sisään suoritetaan kun pelaaja painaa
          ylänuolta.
      8:
        image: notes/starwars_events_8.JPG
        text: Haluamme R2-D2:n liikkuvan ylöspäin, joten laitamme komennon sisään
          goUp(); -palikan. Samalla tavoin saamme R2-D2:n liikkumaan myös alaspäin.
      9:
        image: notes/starwars_events_9.JPG
        text: Nyt, sen sijaan että kirjoittaisimme kaikki ohjeet droidillemme ennalta,
          voimme saada R2-D2:n reagoimaan näppäinten painalluksiin. Tällöin voimme
          liikuttaa droidia ympäri ruutua. Peli muuttuu näin askel askeleelta enemmän
          ja enemmän vuorovaikutteiseksi.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hei nimeni on Alice ja johdan tuote- ja suunnittelutiimejä täällä Code.org:issa.
          Olin mukana kehittämässä oppituntia, jota pelaat ja opiskelet juuri nyt.
      2:
        image: notes/starwars_congrats_2.JPG
        text: Olet juuri saavuttanut viimeisen tason. Onnittelut! Olet juuri oppinut
          kaiken mitä sinun tarvitsee tietää tehdäksesi oman Star Wars pelin. Tästä
          eteenpäin ei ole enempää lisäohjeita, eikä pulmia ratkottaviksi. Voit tehdä
          oman pelin ja valita itse, miten kaikki toimii. Vielä yksi asia - olet juuri
          saanut käyttöösi uusia ääniä ja uusia komentoja joilla voit tehdä vielä
          enemmän.
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[opiskelijat kertovat] Me teimme pelin jossa voi kerätä pisteitä jahtaamalla
          Paisusikoja. Jujuna on että aina kun pyydystät paisusian, yksi stormtrooper
          ilmestyy kentälle. Lopulta koko ruutu on pullollaan paisusikoja ja kun kosketat
          kymmentätuhatta sikaa voitat pelin."
      4:
        image: notes/starwars_congrats_4.JPG
        text: |-
          [opiskelijat kertovat]
          "Me tehtiin peli, jossa ei voi hävitä ja kaikki minkä saa tapettua antaa pisteitä."
          "Minun ohjelmassani vaihdoin näppäinten suunnat niin että kun painaa ylös, hahmo liikkuukin alas ja kun painaa oikealle hahmo meneekin vasemmalle. Se on tosi haastava!"
          "Pelin kehittäjänä saat joskus melkoisen edun kun tunnet pelisi. Sainko minä? Takuulla!"!
      5:
        image: notes/starwars_congrats_5.JPG
        text: Kun olet saanut pelisi valmiiksi, voit jakaa saamasi linkin kaveriesi
          kanssa tai vaikkapa kokeilla peliäsi kännykällä. Pidä hauskaa!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Hei, olen Kathleen Kennedy ja olen elokuvan, Star Wars: Force Awakens,
          tuottaja. Tänään saat työskennellä yhden tähdistämme, BB-8:n parissa. BB-8
          on pallomainen droidi. Kaikkea sen toimintaa ja liikkumista ohjaa tietokoneohjelmisto.
          Tietojenkäsittelytiede vaikuttaa kaikkiin teollisuudenaloihin, markkinoinnista
          terveydenhuoltoon tai elokuva-alalle. Itse asiassa tämäkin elokuva, The
          Force Awakens, vaati satojen tietokoneinsinöörien työpanoksen toteutuakseen.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hei olen Rachel Rose, ja olen vanhempi tuotekehitysinsinööri ILM:llä
          (Industrial Light and Magic), jossa johdan animaatio- ja olentojenkehitystiimiä.
          Elokuvassa The Force Awakens vastualueeni on auttaa taiteilijoita kehittämään
          hahmoillemme liikkuvat rungot, joiden avulla luomamme hahmot saadaan liikkumaan
          ja näyttämään hyvin uskottavilta tuossa kaukaisessa galaksissa.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: Seuraavan tunnin aikana tulemme rakentamaan oman Star Wars pelin ja
          oppimaan ohjelmoinnin perusasioita. Yleensä ohjelmointi tapahtuu pitkälti
          tekstillä, mutta me käytämme ohjelmointiin valmiita koodipalikoita, joista
          ohjelmia voidaan koota raahaamalla ne osaksi ohjelmaa. Aluksi autamme Rey:tä
          ohjelmoimaan BB-8:n, keräämään kaikki tarvittavat romuosaset.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Näyttösi on jaettu kolmeen pääosaan. Vasemmalla on Tähtien Sota -pelialue,
          jossa ohjelmasi suoritetaan. Ohjeet kullekin tasolle on kirjoitettu tämän
          alle.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: Keskimmäinen alue on työkalupakki, ja jokainen sen sisältämistä palikoista
          on palanen ohjelmakoodia - käsky jonka BB-8 ymmärtää.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: Valkea alue ruudun oikeassa laidassa on työtila, jonne tulemme rakentamaan
          ohjelmamme.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Jos raahaan työtilaan "siirry vasemmalle" -palikan, mitä tapahtuu? BB-8
          siirtyy yhden ruudun verran vasemmalle ruudukossa.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: Entä jos haluan BB-8:n tekevän jotain sen siirryttyä vasemmalle? Voin
          lisätä ohjelmaamme uuden palikan. Valitsen "siirry ylös"-palikan ja raahaan
          sen juuri "siirry vasemmalle"-palikan alle. Oikean paikan löytyessä ilmestyy
          pudotuskohtaan korostusväri. Päästäessäni nyt irti raahaamastani palikasta,
          palikat liittyvät yhteen. Kun painan "Suorita"-nappia, BB-8 suorittaa työtilaan
          kasaamamme komennot järjestyksessä ylhäältä alas.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Jos haluat joskus poistaa palikan, voit vain poistaa sen pinosta vetämällä
          sen työkalupakkiin.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Painettuasi "Suorita", voit aina painaa "Alusta"-nappia palauttaaksesi
          BB-8:n alkuun. Lähdetäänpä rullailemaan!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hei, nimeni on Charita Carter. Olen vanhempi luova tuottaja täällä Walt
          Disney Imagineering:illa. Vastuullani on johtaa tiimejä, jotka tuottavat
          vierailukohteet, jotka vieraamme pääsevät kokemaan. Etsimme jatkuvasti tapoja,
          joilla voimme kehittyä ja siten luoda asiakkaillemme yhä hienompia kokemuksia.
          Teknologia onkin keskeistä tämän tavoitteen kannalta.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Onnittelut, sinä teit sen! Olet ohjelmoinut BB-8:n. Nyt olemme valmiita
          kokeilemaan jotain vaikeampaa, joten eiköhän jatketa. Nyt kun olet oppinut
          ohjelmoinnin perusteet, matkaamme ajassa taaksepäin rakentamaan oman pelin,
          jonka pääosassa seikkailevat R2-D2 ja C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: Tehdäksemme pelin, meidän tulee oppia jotakin, joka on peliohjelmoijille
          arkipäivää - eli mitä ovat tapahtumat. Tapahtumien avulla ohjelmasi voi
          kuunnella tai odottaa tiettyjen asioiden tapahtumista. Kun jotain tapahtuu
          suoritetaan sinun määräämäsi komennot.
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Esimerkkejä tapahtumista, joita voidaan kuunnella, ovat hiiren napsautukset,
          nuoli-näppäinten painamiset ja näytön napauttamiset.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Nyt tarkoituksenamme on saada R2-D2 liikkumaan ylöspäin ja toimittamaan
          viesti yhdelle kapinallispilotille ja sitten jatkamaan alaspäin toisen pilotin
          luo. Käytämme tapahtumia saadaksemme sen liikkumaan, kun pelaaja käyttää
          ylös/alas nuolinäppäimiä tai vastaavia nappuloita ruudulla.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: Käytämme whenUp() -tapahtumapalikkaa ja liitämme siihen goUp() -palikan.
          Kun pelaaja painaa nuolinäppäintä ylös, koodi joka on liitetty whenUp()
          -palikkaan suoritetaan. Samalla tavoin saamme R2-D2:n liikkumaan myös alaspäin.
          Nyt R2-D2 reagoi näppäinten painalluksiin ja liikkuu niiden mukaan ruudulla,
          sen sijaan, että se vain seuraisi ennalta koodattuja ohjeita.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Pelisi tulee askel askeleelta yhä vuorovaikutteisemmaksi.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hei nimeni on Alice ja johdan tuote- ja suunnittelutiimejä täällä Code.org:issa.
          Olin mukana kehittämässä oppituntia, jota pelaat ja opiskelet juuri nyt.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: Olet juuri saavuttanut viimeisen tason. Onnittelut! Olet juuri oppinut
          kaiken mitä sinun tarvitsee tietää tehdäksesi oman Star Wars pelin. Tästä
          eteenpäin ei ole enempää lisäohjeita, eikä pulmia ratkottaviksi. Voit tehdä
          oman pelin ja valita itse, miten kaikki toimii. Vielä yksi asia - olet juuri
          saanut käyttöösi uusia ääniä ja uusia komentoja joilla voit tehdä vielä
          enemmän.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[opiskelijat kertovat] Me teimme pelin jossa voi kerätä pisteitä jahtaamalla
          Paisusikoja. Jujuna on että aina kun pyydystät paisusian, yksi stormtrooper
          ilmestyy kentälle. Lopulta koko ruutu on pullollaan paisusikoja ja kun kosketat
          kymmentätuhatta sikaa voitat pelin."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: |-
          [opiskelijat kertovat]
          "Me tehtiin peli, jossa ei voi hävitä ja kaikki minkä saa tapettua antaa pisteitä."
          "Minun ohjelmassani vaihdoin näppäinten suunnat niin että kun painaa ylös, hahmo liikkuukin alas ja kun painaa oikealle hahmo meneekin vasemmalle. Se on tosi haastava!"
          "Pelin kehittäjänä saat joskus melkoisen edun kun tunnet pelisi. Sainko minä? Takuulla!"!
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: Kun olet saanut pelisi valmiiksi, voit jakaa saamasi linkin kaveriesi
          kanssa tai vaikkapa kokeilla peliäsi kännykällä. Pidä hauskaa!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: Olen Jens Bergensten, eli Jeb. Toimin pääkehittäjänä Mojangilla Tukholmassa.
          Olin 11 tai 12 kun aloitin ohjelmoinnin, koska halusin tehdä pelejä. Sain
          kuulla, että pelejä tehtäessä pitää osata ohjelmoida. Siitä urani sai alkunsa.
          Tykkään suunnittelusta ja arkkitehtuurista. Sen vuoksi pidän paljon Minecraftista.
      2:
        image: notes/mc_intro_2.JPG
        text: Seuraavan tunnin aikana opettelemme ohjelmoinnin perusteita Alexin ja
          Steven avulla. Autamme heitä liikkumaan Minecraft-maailmassa.
      3:
        image: notes/mc_intro_3.JPG
        text: Tavallisesti ohjelmointi tehdään koodilla, mutta tänään käytämme Blocklya,
          jonka avulla voimme ohjelmoida palikoilla. Pinnan alla koodaatte JavaScriptillä.
      4:
        image: notes/mc_intro_4.JPG
        text: Opitte konsepteja, joita ohjelmoijat käyttävät päivittäin ja jotka toimivat
          ohjelmoinnin perustana. Mojangilla me käytämme samoja konsepteja Minecraftin
          ohjelmoinnissa.
      5:
        image: notes/mc_intro_5.JPG
        text: Valitaan ensin hahmo. Minä valitsen Alexin. Ohjelmoidaan koodi, joka
          auttaa häntä liikkumaan ruudulla.
      6:
        image: notes/mc_intro_6.JPG
        text: Ruutu on jaettu kolmeen osaan. Vasemmalla on Minecraft-pelimaailma,
          jossa ohjelma pyörii. Kunkin tason ohjeet ovat alla.
      7:
        image: notes/mc_intro_7.JPG
        text: Työkalut ovat keskellä. Nämä palikat ohjaavat Alexin toimintaa.
      8:
        image: notes/mc_intro_8.JPG
        text: Vasemmalla oleva alue on työtila. Työtilassa rakennamme ohjelmamme.
      9:
        image: notes/mc_intro_9.JPG
        text: Jos vedämme "liiku eteenpäin" -palikan työtilaan ja suoritamme, mitä
          tapahtuu? Alex liikkuu yhden ruudun eteenpäin.
      10:
        image: notes/mc_intro_10.JPG
        text: Entä jos haluamme Alexin tekevän jotain muuta liikkumisen jälkeen? Voimme
          lisätä toisen palikan ohjelmaan. Valitsen "käänny oikeaan" -palikan ja vedän
          sen "liiku eteenpäin" -palikan alle siten, että oranssi kehys ilmestyy.
          Palikat napsahtavat kiinni toisiinsa. Kun suoritan, Alex seuraa jonossa
          olevia käskyjä ylhäältä alas.
      11:
        image: notes/mc_intro_11.JPG
        text: Jos haluat poistaa komennon, vedä se jonosta takaisin työkaluihin.
      12:
        image: notes/mc_intro_12.JPG
        text: Peru tekemäsi muutokset ja palauta taso alkuasetelmaan Start Over [Aloita
          alusta] -painikkeella, joka on oikeassa yläkulmassa. Entäpä tuo pieni kolmio
          kääntymiskomennossa? "Kolmio tarkoittaa, että voit valita eri vaihtoehtoja."
          Aletaan koodata!
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: Olen Lydia Winters, Mojangin brändijohtaja. Me teimme pelin nimeltä
          Minecraft.
      2:
        image: notes/mc_repeat_2.JPG
        text: Tutkiminen on suosikkipuuhaani Minecraftissa. Rakastan luolissa seikkailemista.
          En itse ole ohjelmoija, joten minusta on jännittävää ottaa osaa harjoitukseen
          ja oppia koodaamista itsekin.
      3:
        image: notes/mc_repeat_3.JPG
        text: Viimeksi käytimme paljon "liiku eteenpäin" -palikkaa. Olisi hyvä, jos
          tietokone automatisoisi liikkeet. Onneksi tietokoneet ovat tosi hyviä toistamaan
          komentoja toistorakenteilla, eli luupeilla.
      4:
        image: notes/mc_repeat_4.JPG
        text: Kun rakennamme Minecraftia, käytämme luuppeja maailman luomisessa. Se
          tarkoittaa tuhansia ja taas tuhansia kuutioita. Käytämme luuppeja muuhunkin,
          kuten Alexin jalkojen liikuttamiseen. Luupit ovat tehokas osa ohjelmointia.
      5:
        image: notes/mc_repeat_5.JPG
        text: Yö lähestyy, joten rakennamme talon suojaksemme. Se on helppoa toistopalikan
          avulla.
      6:
        image: notes/mc_repeat_6.JPG
        text: Jos haluamme seinän taloon, voimme käskeä Alexin liikkua eteenpäin ja
          asettaa lankun neljä kertaa. Voimme myös tehdä komennon vain kerran ja käyttää
          sitä useita kertoja toistopalikan avulla. Napsautamme toistopalikkaa ja
          määrittelemme toistojen määrän. Rakennetaan talo, ennen kuin on yö. Pidä
          hauskaa!
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Nyt opimme jos-lauseista. Ne ovat yksi ohjelmoinnin perustekijöistä.
          Ne auttavat tietokoneita tekemään päätöksiä.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Kaikki tietokoneet käyttävät jos-lauseita. Puhelimenikin käyttää. Kun
          avaan sen, koodi määrää, että jos salasana on oikea, puhelimeni aukeaa,
          muutoin tulee virheilmoitus.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Jos-lauseilla voit koodata Steven ja Alicen reagoimaan pelimaailmaan.
          Esimerkiksi jos edessä on kivi, he voivat kääntyä vasemmalle tai puun kohdalla
          oikealle.
      4:
        image: notes/mc_if_statements_4.JPG
        text: Emme halua pudota laavaan. Laavaa on helppo väistellä, koska näemme
          sen. Mutta entä kiven alla oleva laava?
      5:
        image: notes/mc_if_statements_5.JPG
        text: Kun olemme louhineet kiven pois, meidän on tarkistettava, onko alla
          laavaa, ennen kuin jatkamme. Jos kiven alla on laavaa, hahmon eteen on syytä
          asettaa mukulakivi, jotta voimme edetä turvassa. Aloitetaan louhiminen!
          Muista varoa askeleitasi jos-lauseiden avulla.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: Onneksi olkoon! Nyt olet oppinut ohjelmoinnin perusteet.
      2:
        image: notes/mc_congrats_share_2.JPG
        text: Nyt voit käyttää palikoita omiin luomuksiisi. Enää ei ole ohjeita tai
          selvitettäviä tehtäviä. Voit rakentaa ihan mitä haluat. Saat itse valita.
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[oppilaat puhuvat] Nyt alkaa tapahtua. Keritse. - Tein L:n soihduista.
          - Tein A:n koivulankuista. Se toimii! - Me teimme talon villasta!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Voit jakaa valmiin luomuksesi ystävillesi jakolinkin avulla. - Pidä
          hauskaa!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: Onneksi olkoon! Nyt olet oppinut ohjelmoinnin perusteet.
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: Nyt voit käyttää palikoita omiin luomuksiisi. Enää ei ole ohjeita tai
          selvitettäviä tehtäviä. Voit rakentaa ihan mitä haluat. Saat itse valita.
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[oppilaat puhuvat] Nyt alkaa tapahtua. Keritse. - Tein L:n soihduista.
          - Tein A:n koivulankuista. Se toimii! - Me teimme talon villasta!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Voit rakentaa ihan mitä haluat. - Pidä hauskaa!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/gumball_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/gumball_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/gumball_intro_4.JPG
        text: Näyttösi on jaettu kolmeen pääosaan. Vasemmalla on pelialue, jossa ohjelmasi
          suoritetaan. Ohjeet kullekin tasolle on kirjoitettu tämän alle.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: Oikealla oleva alue on työtila. Työtilassa rakennamme ohjelmamme.
      7:
        image: notes/gumball_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/gumball_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/iceage_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/iceage_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/iceage_intro_4.JPG
        text: Näyttösi on jaettu kolmeen pääosaan. Vasemmalla on pelialue, jossa ohjelmasi
          suoritetaan. Ohjeet kullekin tasolle on kirjoitettu tämän alle.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: Vasemmalla oleva alue on työtila. Työtilassa rakennamme ohjelmamme.
      7:
        image: notes/iceage_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/iceage_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    mc_2016_intro:
      1:
        image: notes/mc_2016_intro_1.jpg
        text: Hi, my name is Jens and I'm the lead creative designer of Minecraft.
          In the next hour, you'll make your own Minecraft game. This looks like Minecraft
          but the world has stopped. The sheep aren't moving, the chickens aren't
          laying eggs, and zombies are just standing still. It's up to you to add
          the code to make the Minecraft world work.
      2:
        image: notes/mc_2016_intro_2.jpg
        text: 'My name is Melissa and I am a user researcher at Minecraft. What I''m
          really interested in is how people think and interact with technology and
          so this job is the perfect job for me to put together the computer engineering
          with the psychology: how people think and behave.'
      3:
        image: notes/mc_2016_intro_3.jpg
        text: You'll see your screen is split into three main parts. 1) On the left
          is the Minecraft game. Right now the world is frozen but we're going to
          fix that with code.
      4:
        image: notes/mc_2016_intro_4.jpg
        text: 2) This middle area is the toolbox. Each of these blocks is a command
          that chickens, sheep, and other Minecraft creatures can understand.
      5:
        image: notes/mc_2016_intro_5.jpg
        text: 3) The space on the right is called the workspace and this is where
          we'll build our program.
      6:
        image: notes/mc_2016_intro_6.jpg
        text: If you forget what to do, the instructions for each level are at the
          top.
      7:
        image: notes/mc_2016_intro_7.jpg
        text: To start off, we're going to program a chicken. Let's drag the "move
          forward" command to the workspace. When I hit "Run" the chicken moves forward
          one step. To go further, I'll drag another "move forward" block underneath
          the first "move forward" block until the highlight appears. Then I'll drop
          it and the two blocks snap together. If I hit "Run" again, the chicken walks
          two steps.
      8:
        image: notes/mc_2016_intro_8.jpg
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back to the toolbox.
      9:
        image: notes/mc_2016_intro_9.jpg
        text: After you've hit "Run" you can always hit the "Reset" button to reset
          the game and start over. Now, it's your turn to make your very own version
          of Minecraft. Have fun!
    mc_2016_loops:
      1:
        image: notes/mc_2016_loops_1.jpg
        text: Hi, I'm Lisa. I'm a software developer on Minecraft and I work on some
          of the animals and enemies in the game. One of the animals that I worked
          on is the ocelot. I worked on the part where you can feed an ocelot a fish
          to tame it into your own cat.
      2:
        image: notes/mc_2016_loops_2.jpg
        text: As humans, we get really bored if we have to do the same thing over
          and over and over again. But the cool thing about computers is that they
          can do the same thing millions or even billions of times in a row without
          getting bored. This repetition is called a loop and every creature in Minecraft
          uses loops.
      3:
        image: notes/mc_2016_loops_3.jpg
        text: Earlier, we got a chicken to move across the screen but then she stopped.
          In Minecraft, the chickens wander around forever and ever. Let's use a "forever
          do" loop from our toolbox to keep our chickens moving around forever too.
          The power of loops will save you tons of time and open up all kinds of neat
          options as you build your own version of Minecraft.
    mc_2016_events:
      1:
        image: notes/mc_2016_events_1.jpg
        text: On this next level, you can pick to be either Steve or Alex. Press the
          arrow buttons on your keyboard to move up, down, left, and right. Now you
          can move around a level wherever you want. To use a creature, just walk
          towards it, turn to face it, and press the spacebar.
      2:
        image: notes/mc_2016_events_2.jpg
        text: If you're using a touch screen, swipe up, down, left, and right to move
          around. Then tap the game to use the item in front of you.
      3:
        image: notes/mc_2016_events_3.jpg
        text: But what happens when you use it? In Minecraft, sheep drop wool when
          you shear them, cows run away when you hit them, and creepers explode when
          you get near them. These reactions happen thanks to something called events.
          Events tell your program to listen or wait for when something happens. And
          when it does, perform an action.
      4:
        image: notes/mc_2016_events_4.jpg
        text: So far, you've used one event. Code you put in the "when spawned" slot
          runs when your creature is created or when the game starts. Over the next
          few levels you'll have new slots for events such as "when touched" that
          runs when you touch the creature, or "when used" for when you use the creature.
          Or, if you want your zombie to disappear when the sun comes up, put that
          in the "when day" slot
    mc_2016_spawn:
      1:
        image: notes/mc_2016_spawn_1.jpg
        text: In games, spawn means the same thing as create. In this level, let's
          make zombies spawn when the sun goes down. To do this, we'll use the "when
          night" block.
      2:
        image: notes/mc_2016_spawn_2.jpg
        text: Since we want the zombies to spawn at night we'll add the "spawn zombie"
          block under the "when night" block. As soon as they're spawned, each zombie
          will run the code that you put in their "when spawned" event slot. Have
          fun spawning zombies!
    mc_2016_congrats:
      1:
        image: notes/mc_2016_congrats_1.jpg
        text: Congratulations! You've learned to use computer science commands to
          bring the Minecraft world to life. You are the developer now. You've unlocked
          all the commands and all the creatures. You choose what happens.
      2:
        image: notes/mc_2016_congrats_2.jpg
        text: When you're done making your game, choose share to get a link that you
          can share with your friends or to play your game on your phone. Have fun!
          I'm looking forward to playing your version of Minecraft.
    applab_intro_welcome:
      1:
        image: notes/applab_intro_welcome_1.png
        text: My name is Mei'lani. I'm an intern at code.org and I'm also a computer
          science student. I like computer science because it's really creative. I
          get to be the problem solver. I get to make everything function how I want
          it to. But I also get to be the designer. I get to be the artist and choose
          everything on the creative side of it.
      2:
        image: notes/applab_intro_welcome_2.png
        text: Making your own apps is easy with App Lab! Whether you're new to coding
          or have some experience. App Lab is a great tool for building new apps and
          sharing them with your friends.
      3:
        image: notes/applab_intro_welcome_3.png
        text: This is a App Lab. On the left side is your app. On the right side is
          the code that will make it run. You build your program by dragging in blocks
          from the toolbox. To start you'll just have one block called 'setProperty'.
      4:
        image: notes/applab_intro_welcome_4.png
        text: The set property block changes the look of the elements on your screen.
          Like the buttons, labels, or even the screen itself. First you need to decide
          which element you want to change. If you hover over an element in your app
          you can see the name or ID here. Then go select that ID from the first drop
          down.
      5:
        image: notes/applab_intro_welcome_5.png
        text: Elements have lots of properties you can change like their text color,
          background color or font size. You can see the full list and choose which
          property you want to change in the second drop down.
      6:
        image: notes/applab_intro_welcome_6.png
        text: The last drop down is where you'll write the value you want to use value
          you want to use. The block will make a suggestion for you. But you can always
          type in different colors or numbers yourself.
      7:
        image: notes/applab_intro_welcome_7.png
        text: Once you're done, the block reads a bit like a sentence:'Set button1's
          background color to green.' Hit run to see the changes you're building in
          code. If you reset you can drag in more blocks to change other things about
          your app. Like the text!
      8:
        image: notes/applab_intro_welcome_8.png
        text: For this tutorial we'll be working in block mode but App Lab also supports
          working in text.
      9:
        image: notes/applab_intro_welcome_9.png
        text: Either way you'll be programming in JavaScript, the language of the
          web. Each level has a goal, instructions and an image of what you're aiming
          to create.
      10:
        image: notes/applab_intro_welcome_10.png
        text: If you're ever stuck, click on this picture and it will show you exactly
          how to complete the level. But see if you can do it on your own first.
      11:
        image: notes/applab_intro_welcome_11.png
        text: Once you've completed the goal for this level click Finish to move on.
          That's all there is to it! Hit the orange "continue" button to go to the
          next level and start your adventure with an App Lab!
    applab_intro_events:
      1:
        image: notes/applab_intro_events_1.png
        text: Apps are really cool because it's kind of like starting your own business
          I mean, you get to design everything from the ground up, you get to manage
          everything, and you're the owner of this piece of work that you just created
          with code.
      2:
        image: notes/applab_intro_events_2.png
        text: Now that you can change the look of your app let's make it interactive
          by responding to events! Events are user actions like clicking a button,
          scrolling through a menu, or hovering over a picture. Interactive apps need
          ways to respond to events, like playing a sound when I click this button.
          To do this in App Lab you need to use a new block called 'onEvent'.
      3:
        image: notes/applab_intro_events_3.png
        text: This program sets the screen to blue. I want the screen to turn green
          when I click this button. First I'll need to drag in an onEvent block. By
          hovering I know the button's ID is "bigButton" so I'll select that in the
          first drop-down.
      4:
        image: notes/applab_intro_events_4.png
        text: Next I'll choose the type of event. There's lots of options you can
          pick from but right now I'll leave it as a regular old click.
      5:
        image: notes/applab_intro_events_5.png
        text: 'Finally I''ll add code inside the on event that will change the background
          color of the screen. You can read this block like a sentence: "On the event
          that the button is clicked run all this code."'
      6:
        image: notes/applab_intro_events_6.png
        text: Let's test it. Blocks outside an onEvent still run right away so the
          screen starts blue.
      7:
        image: notes/applab_intro_events_7.png
        text: And when I click the big button the code inside my onEvent runs and
          my screen turns green.
      8:
        image: notes/applab_intro_events_8.png
        text: If you want to change more things after the event, like the text on
          the screen just add more code to the onEvent
      9:
        image: notes/applab_intro_events_9.png
        text: To make your program respond to more events add more onEvent blocks.
          Just make sure not to put them inside of each other. Now it's time to try
          it out for yourself. Have fun!
    applab_intro_sounds:
      1:
        image: notes/applab_intro_sounds_1.png
        text: Next you'll learn about adding images and sounds to your app. Let's
          start by checking out the sound options.
      2:
        image: notes/applab_intro_sounds_2.png
        text: In the tool box you'll find a new block called "playSound". Drag it
          into the workspace. You can pick a sound to play by clicking the drop-down
          then clicking "Choose".
      3:
        image: notes/applab_intro_sounds_3.png
        text: From here you can either upload a sound file from your computer, or
          search for a sound from the sound library. The sound library has lots of
          different categories like instruments, background music or animals.
      4:
        image: notes/applab_intro_sounds_4.png
        text: Once you've got the sound you want, click "Choose". When this block
          runs, it will play the sound you chose.
      5:
        image: notes/applab_intro_sounds_5.png
        text: To add images to your elements you can just use the setProperty block.
          Select the image property in the second drop-down
      6:
        image: notes/applab_intro_sounds_6.png
        text: Then select "Choose" from the third drop down.
      7:
        image: notes/applab_intro_sounds_7.png
        text: From here you can upload an image from your computer or you can look
          through a huge library of icons in the icon library.
      8:
        image: notes/applab_intro_sounds_8.png
        text: Back in code mode you can use the "setProperty" block to change the
          icon color of your icon. Once you've picked what image your icon to use
          click "Run" to see how it looks.
      9:
        image: notes/applab_intro_sounds_9.png
        text: That's all there is to it! Now you can start adding images and sounds
          to make your apps even more fun and dynamic.
    applab_intro_designmode:
      1:
        image: notes/applab_intro_designmode_1.png
        text: To build your own apps you're going to need to start designing screens
          and elements from scratch. App Lab makes this easy to do with Design Mode.
      2:
        image: notes/applab_intro_designmode_2.png
        text: Use the switch on top of your app to go into Design Mode.
      3:
        image: notes/applab_intro_designmode_3.png
        text: You can add new elements by dragging them onto the screen. You can move
          them around to different locations and change their size by dragging the
          bottom right corner.
      4:
        image: notes/applab_intro_designmode_4.png
        text: To change an element's properties use the controls on the right. For
          example, it's really easy to change this button's text, color, and font
          size.
      5:
        image: notes/applab_intro_designmode_5.png
        text: When you add a new element to your screen it'll get a generic ID like
          button1. It's a good idea to change this button's ID to something more meaningful
          like "rightButton". So that you'll know which one it is when you go to the
          program.
      6:
        image: notes/applab_intro_designmode_6.png
        text: If you add an element to your app by mistake, just drag it out or hit
          the delete.
      7:
        image: notes/applab_intro_designmode_7.png
        text: You can add entirely new screens to your app by dragging in a screen
          element
      8:
        image: notes/applab_intro_designmode_8.png
        text: From the drop-down at the top you can quickly switch back and forth
          between the screens you create.
      9:
        image: notes/applab_intro_designmode_9.png
        text: Inside your app, you'll need a way to switch between all of these screens,
          so the setScreen block has been added to the toolbox. Use "setScreen" inside
          the "onEvent" block to change screens at the click of a button.
      10:
        image: notes/applab_intro_designmode_10.png
        text: In the next few levels you'll be working on a single project. First
          you'll add a button then you'll add a new screen and finally you'll write
          code so that the button switches to the new screen.
    applab_intro_share:
      1:
        image: notes/applab_intro_share_1.png
        text: Now that you've learned some of the basics of App Lab like adding buttons,
          sounds, images, text and new screens you can make all sorts of apps.
      2:
        image: notes/applab_intro_share_2.png
        text: In the next level you'll find the app you just finished building. With
          a little creativity, you can turn this into a personality quiz for your
          friends, a greeting card that you can share with your family or a choose-your-own-adventure
          game. All of these apps are just a combination of the skills you've already
          learned, and I bet you can come up with even more.
      3:
        image: notes/applab_intro_share_3.png
        text: Once you're done with your app you can easily send it to your phone
          to see how it looks. Just click "Share" and enter your phone number here.
      4:
        image: notes/applab_intro_share_4.png
        text: You'll receive a text message that'll let you open up your app instantly.
      5:
        image: notes/applab_intro_share_5.png
        text: You can also share a link to your app over social media or post it to
          the code.org public gallery for other people to play and share.
      6:
        image: notes/applab_intro_share_6.png
        text: You've just scratched the surface of what App Lab can do. Full App Lab
          features more advanced user interactions, new screen elements and even a
          built-in database so you can quickly build full featured apps. At "code.org/applab"
          you'll find the full tool and lots of ideas if you want to keep going.
      7:
        image: notes/applab_intro_share_7.png
        text: Thanks for coming along the ride. Now go build and share your first
          app, and keep on building apps with App Lab!
    mc_2017_agent_intro:
      1:
        image: notes/mc_2017_agent_intro_1.png
        text: 'Stacy: Stampy, Lizzy, Preston - thank you for coming with me. What
          I want to show you is just over this mesa plateau. I think you''re going
          to love it!'
      2:
        image: notes/mc_2017_agent_intro_2.png
        text: Wait a minute - there's a hole in the track! (screaming)
      3:
        image: notes/mc_2017_agent_intro_3.png
        text: 'Is everyone okay? Stampy: Ah, I see the problem. Look! There was a
          hole in the track. Stacy: Really, Stampy? Lizzy: Maybe we should gather
          blocks to fix it. Preston: Let''s make it a race. First one back to the
          top wins. Stacy: Ok, on your mark, get set, GO! Ok, I''m just gonna gather
          some of this terracotta. Wait. Guys, I can''t mine! Preston: Same. Lizzy:
          I can''t either. Stacy: Ok, that is really strange. Stampy, can you mine?
          Stampy: I can''t mine! Stacy: Ok, everyone stay calm. Stampy: Is the game
          broken? Stacy: If it is, how do we fix it? Lizzy: I don''t know. Stampy:
          Does anyone know how to write Minecraft code?'
      4:
        image: notes/mc_2017_agent_intro_4.png
        text: "(poof) Preston: What is that? Stampy: I've never seen one of these
          before. Lizzy: It's so adorable! Stacy: Is it...is it tameable? Preston:
          Okay, what is going on? Someone needs to go back to the real world and fix
          this.  All: Not it! Stacy: Not i- (Sigh.) Ok, I'll go."
      5:
        image: notes/mc_2017_agent_intro_5.png
        text: Oh, okay, hey, so I'm in the real world now. I'm going to go try to
          find the Minecraft offices.
      6:
        image: notes/mc_2017_agent_intro_6.png
        text: But, I'm going to need your help. Start doing the tutorial, start learning
          how to code, and I'll catch up with you guys after a few levels, okay? Wish
          me luck! I think it's this way. Ow! Cactus! I'm okay!
      7:
        image: notes/mc_2017_agent_intro_7.png
        text: To complete the Hour of Code challenge, you'll need to write code to
          program the agent. You'll work together with The Agent to clear any obstacles
          in your path, so you can pick up the items you'll need for your journey.
          Only the Agent can place and break blocks, and only you can collect items.
          Your screen is split into three main parts. On the left is Minecraft.
      8:
        image: notes/mc_2017_agent_intro_8.png
        text: The middle area is the toolbox with commands that the Agent can understand.
      9:
        image: notes/mc_2017_agent_intro_9.png
        text: And on the right, is the workspace. That's where you stack the commands
          to build your program to control the Agent.
      10:
        image: notes/mc_2017_agent_intro_10.png
        text: The Agent can walk, turn, and activate pressure plates. It can also
          destroy blocks and place blocks. When it places the block like these minecart
          rails, it places it underneath itself.
      11:
        image: notes/mc_2017_agent_intro_11.png
        text: If you forget what to do, the instructions for each level are at the
          top.
      12:
        image: notes/mc_2017_agent_intro_12.png
        text: If you want to try again, you can hit the blue reset button to reset
          everything to where it started. And if you need to delete a block of code,
          drag it from your workspace to the toolbox. Remember to hit run to get the
          Agent moving. Okay, go ahead and try out the first few levels. Good luck!
    mc_2017_repeat:
      1:
        image: notes/mc_2017_repeat_1.png
        text: 'Stampy: I wonder what Stacy is up to?'
      2:
        image: notes/mc_2017_repeat_2.png
        text: 'Stacy: Woah, I think I''m in the right place. This is amazing!'
      3:
        image: notes/mc_2017_repeat_3.png
        text: I feel like I'm back in Minecraft! Hello. How are you? Hello?
      4:
        image: notes/mc_2017_repeat_4.png
        text: 'Oh, there''s a creeper. You don''t do anything, do you? Katie: Stacy?
          Stacy:Hi, Katie? Katie: Yes, welcome to Minecraft!'
      5:
        image: notes/mc_2017_repeat_5.png
        text: 'Stacy: This is amazing. So you work here every day as a developer,
          right? Katie: Yeah, it''s pretty awesome. I''m a developer on the Minecraft
          marketplace team. Stacy: How many coding languages do you know? Katie: In
          my career I''ve probably worked with over a dozen. Stacy: A dozen? Katie:
          Yeah. Stacy: So now, you wouldn''t happen to know anything about this little
          golem guy that calls himself the Agent? Katie: We use the Agent to do things
          that Steve or Alex can''t, like go across lava. Stacy: Well, I want to learn
          how to code, and they want to learn how to code, so what is one of the first
          things that you need to know when you''re learning?'
      6:
        image: notes/mc_2017_repeat_6.png
        text: 'Katie: Well, you need to learn how to use loops. Loops are things that
          developers write to give commands to a computer that can be run over and
          over again. Stacy: Got it, so I think there''s actually some of that coming
          up in the levels ahead, so go ahead and give loops a try.'
      7:
        image: notes/mc_2017_repeat_7.png
        text: In the next level, you can use a loop to move the Agent along the path.
          Drag the repeat block into the workspace and place the move forward block
          inside the repeat block. This tells the computer to do the same thing many
          times in a row without having to drag a whole bunch of blocks into the workspace.
          You can choose how many times to repeat by putting a number in the repeat
          block.
      8:
        image: notes/mc_2017_repeat_8.png
        text: You can put turns and multiple commands in the repeat block too, but
          for now try using a repeat to move the Agent forward a few steps. Remember,
          if you get stuck on a puzzle you can always hit the blue reset button and
          try again.
      9:
        image: notes/mc_2017_repeat_9.png
        text: 'If you are thinking about having a cool job like Katie''s, go ahead
          and click the show code button when you finish every level. That''s going
          to actually show you the Javascript code that someone like Katie uses when
          she''s actually programming Minecraft. Katie: Yeah, good luck everyone!'
    mc_2017_functions:
      1:
        image: notes/mc_2017_functions_1.png
        text: 'Preston: I''m not trying to brag, but I''m pretty good at parkour.
          Lizzy: Let''s sleep so it''s day when Stacy comes back.'
      2:
        image: notes/mc_2017_functions_2.png
        text: 'Stacy: Ok guys, I am back from the Minecraft offices, and I think I
          know how to solve the problem I''m having in my game. I think I can use
          a function. Let me just open this.'
      3:
        image: notes/mc_2017_functions_3.png
        text: So a function is a specific set of instructions to accomplish a certain
          task, kind of like a recipe. In the next few levels, you'll have access
          to functions that you can use to solve the puzzles.
      4:
        image: notes/mc_2017_functions_4.png
        text: Look at the code in the function when it's in the workspace to see what
          it does.
      5:
        image: notes/mc_2017_functions_5.png
        text: Then, find the block with that name in the toolbox and drag it from
          the toolbox to the when run block.
      6:
        image: notes/mc_2017_functions_6.png
        text: Remember, you can use the same function every time you need to run the
          same set of instructions to do something, like build a bridge. Good luck,
          I know you can do it!
    mc_2017_congratulations:
      1:
        image: notes/mc_2017_congratulations_1.png
        text: 'Preston: Congratulations!'
      2:
        image: notes/mc_2017_congratulations_2.png
        text: 'Lizzy: Congratulations!'
      3:
        image: notes/mc_2017_congratulations_3.png
        text: 'Stampy: Congratulations, you did it!'
      4:
        image: notes/mc_2017_congratulations_4.png
        text: 'Stacy: Congratulations guys, you totally rocked that! And now that
          you''ve completed the Hour of Code, you can start coding in Minecraft. You''ve
          learned about loops, functions, and what a software Agent does.'
      5:
        image: notes/mc_2017_congratulations_5.png
        text: Now, it's time for the free play level, where you are the developer.
          Use any remaining time to write your own functions to explore, mine, and
          build.
      6:
        image: notes/mc_2017_congratulations_6.png
        text: 'You can take the code that you write in this level into your Minecraft
          world on Minecraft: Education Edition. Just click ''Finish'' and follow
          the instructions for getting the link to use in your world. to continue
          coding with the Agent. Have fun, and good job!'
      7:
        image: notes/mc_2017_congratulations_7.png
        text: 'Stacy: And I''m back! Okay, you guys, this is the Agent! Let me show
          you what it can do. Look, it''s doing it! I told it to build a staircase
          out of these terra cotta blocks, now we can just use this to get out of
          here. And you guys, it''s not just staircases. I can tell the Agent to do
          anything I want, and it will do it for me.'
      8:
        image: notes/mc_2017_congratulations_8.png
        text: 'Stampy: How did you do that? Stacy: It was easy, actually. I just used
          code!'
    csd_concept_how_computers_work:
      1:
        image: notes/csd_concept_how_computers_work_1.png
        text: 'Everywhere you look, computers are changing the world. Whether they''re
          on our desktops, in our homes, our pockets, or just about anywhere else.
          But while most of us use this revolutionary technology daily, we don''t
          often ask: "How do computers work?" In this series, you''re going to learn
          how computers really work, starting with what makes a computer a computer.
          Then, you''ll look at how information is represented inside the computer
          using tiny electrical signals going on and off at mind-boggling speeds.'
      2:
        image: notes/csd_concept_how_computers_work_2.png
        text: After that, you'll learn how computers use circuits to do everything
          from simple math to simulating entire virtual worlds. Next, you'll zoom
          out and look at the different parts of a computer that actually input, output,
          and store all that information. Finally, you'll take a look at what code
          actually is and how software controls hardware. So whether you're just curious
          about the devices you use every day or you want to design the innovations
          of the future, the first step is learning how computers work.
    csd_concept_computer:
      1:
        image: notes/csd_concept_computer_1.png
        text: My name is May-Li Khoe and I'm a designer and an inventor. So some of
          the things I've designed have been at Apple, and now I design products for
          kids to use so that they can have an easier time in school. My other jobs
          include DJ-ing and dancing.
      2:
        image: notes/csd_concept_computer_2.png
        text: Computers are everywhere! They're in people's pockets, they're in people's
          cars, people have them on their wrists. They might be in your backpack right
          now. But what makes a computer a computer? What does make a computer a computer
          anyway? And how does it even work?
      3:
        image: notes/csd_concept_computer_3.png
        text: Hi I'm Nat! I was one of the original designers of the Xbox. I've been
          working with computers since I was maybe seven years old and now I work
          on virtual reality. As humans, we've always built tools to help us solve
          problems. Tools like a wheelbarrow, a hammer, or a printing press, or a
          tractor-trailer.
      4:
        image: notes/csd_concept_computer_4.png
        text: All of these inventions helped us with manual work. Over time, people
          began to wonder if a machine could be designed and built to help us with
          the thinking work we do, like solving equations or tracking the stars in
          the sky. Rather than moving or manipulating physical things like dirt and
          stone, these machines would need to be designed to manipulate information.
          As the pioneers of computer science explored how to design a thinking machine,
          they realized that it had to perform four different tasks.
      5:
        image: notes/csd_concept_computer_5.png
        text: It would need to take input, store information process it and then output
          the results. Now this might sound simple, but these four things are common
          to all computers. That's what makes a computer a computer.
      6:
        image: notes/csd_concept_computer_6.png
        text: Computers started out as basic calculators, which was already really
          awesome at the time, and they were only manipulating numbers back then.
          But now we can use them to talk to each other, we can use them to play games,
          control robots, and do any crazy thing that you could probably imagine.
          Modern computers look nothing like those clunky old machines but they still
          do these same four things.
      7:
        image: notes/csd_concept_computer_7.png
        text: First, we're going to talk about input. You can tell computers what
          to do with the keyboard, you can tell them what to do with the mouse, the
          microphone, the camera. All these different inputs give a computer information,
          which is then stored in memory.
      8:
        image: notes/csd_concept_computer_8.png
        text: A computer's processor takes information from memory. It manipulates
          it or changes it using an algorithm, which is just a series of commands.
          And then it sends the processed information back to be stored in memory
          again. This continues until the processed information is ready to be output.
      9:
        image: notes/csd_concept_computer_9.png
        text: How a computer outputs information depends on what the computer is designed
          to do. A computer display can show text, photos, videos, or interactive
          games -- even virtual reality! The output of a computer may even include
          signals to control a robot.
      10:
        image: notes/csd_concept_computer_10.png
        text: And who knows what the computers of tomorrow will be like? My hope is
          that you get to help decide what you want the computers of tomorrow to look
          like. But across all computers, regardless of the different types of technology
          they use, they're always doing those same four things. They take in information,
          they store it as data, they process it, and then they output the results.
    csd_concept_binary_data:
      1:
        image: notes/csd_concept_binary_data_1.png
        text: Hi! My name is Limor Fried, and I'm an engineer here at Adafruit Industries.
          And this is where I do engineering and design, and I design circuits for
          fashion and music and technology.
      2:
        image: notes/csd_concept_binary_data_2.png
        text: My name is Federico Gomez Suarez, and I'm a software developer with
          Microsoft Hack for Good. And I look into using technology to help us solve
          some of the big social problems of our times.
      3:
        image: notes/csd_concept_binary_data_3.png
        text: You may have heard that computers work on ones and zeros. But almost
          nobody today actually deals directly with these ones and zeros. But ones
          and zeroes do play a big role in how computers work on the inside.
      4:
        image: notes/csd_concept_binary_data_4.png
        text: Inside a computer are electric wires and circuits that carry all the
          information in a computer. How do you store or represent information using
          electricity?
      5:
        image: notes/csd_concept_binary_data_5.png
        text: Well, if you have a single wire with electricity flowing through it,
          the signal could either be on or off. That's not a lot of choices, but it's
          a really important start. With one wire, we can represent a yes or no, true
          or false, a one or zero, or anything else with only two options. This on/off
          state of a single wire is called a bit, and it's the smallest piece of information
          a computer can store.
      6:
        image: notes/csd_concept_binary_data_6.png
        text: 'If you use more wires you get more bits: more ones and zeros. With
          more bits you can represent more complex information. But to understand
          that, we need to learn about something called the binary number system.'
      7:
        image: notes/csd_concept_binary_data_7.png
        text: 'In the decimal number system, we have ten digits from zero to nine,
          and that''s how we''ve all learned to count. In the binary number system,
          we only have two digits: zero and one. With these two digits, we can count
          up to any number.'
      8:
        image: notes/csd_concept_binary_data_8.png
        text: Here's how this works. In a decimal number system we're all used to,
          each position in a number has a different value. There's a 1 position, the
          10 position, the 100 position, and so on. For example, a 9 in the 100 position
          is a 900. In binary, each position also carries a value. But instead of
          multiplying by 10 each time, we multiply by 2. So there's the 1 position,
          the 2 position, the 4 position, the 8 position, and so on. For example,
          the number 9 in binary is 1001. To calculate the value, we add 1 times 8,
          plus 0 times 4, plus 0 times 2, plus 1 times 1. Almost nobody does this
          math because computers do it for us. What's important is that any number
          can be represented with only ones and zeros, or by a bunch of wires that
          are on or off. The more wires you use, the larger the numbers you can store.
          With 8 wires, you can store numbers between 0 and 255. That's 8 ones. With
          just 32 wires, you can store all the way from 0 to over 4 billion. Using
          the binary number system, you can represent any number you like.
      9:
        image: notes/csd_concept_binary_data_9.png
        text: But what about other types of information? Like text, images, or sound?
          It turns out that all these things can also be represented with numbers.
          Think of all the letters in the alphabet. You could assign a number to each
          letter. A could be 1, B could be 2, and so on. You can then represent any
          word or paragraph as a sequence of numbers. And as we saw, these numbers
          can be stored as on or off electrical signals. Every word you see on every
          webpage or your phone is represented using a system like this.
      10:
        image: notes/csd_concept_binary_data_10.png
        text: Now, let's consider photos, videos, and all the graphics you see on
          a screen.
      11:
        image: notes/csd_concept_binary_data_11.png
        text: All of these images are made out of teeny dots called pixels, and each
          pixel has a color. Each of the colors can be represented with numbers. When
          you consider the typical image has millions of these pixels, and the typical
          video shows 30 images per second now we're talking about a lot of data here.
      12:
        image: notes/csd_concept_binary_data_12.png
        text: Every sound is basically a series of vibrations in the air. Vibrations
          can be represented graphically as a waveform. Any point on this waveform
          can be represented by a number. And this way, any sound can be broken down
          into a series of numbers. If you want higher quality sound, you will pick
          32-bit audio or an 8-bit audio. More bits means a higher range of numbers.
      13:
        image: notes/csd_concept_binary_data_13.png
        text: When you use a computer to write code or make your own app, you're not
          dealing directly with these ones and zeros. But you will be dealing with
          images or sound or video. So if you want to understand how computers work
          on the inside, it all comes down these simple ones and zeros and the electrical
          signals in the circuits behind them.
    csd_concept_circuits_logic:
      1:
        image: notes/csd_concept_circuits_logic_1.png
        text: One of the coolest things I've discovered about circuits is circuitry
          can be an art form like if I have a creative idea, I can get that creative
          idea out using circuits. So if you have ideas, you can use technology to
          make those ideas come to life.
      2:
        image: notes/csd_concept_circuits_logic_2.png
        text: Every input or output of a computer is effectively a type of information,
          which can be represented by on or off electrical signals or ones and zeros.
      3:
        image: notes/csd_concept_circuits_logic_3.png
        text: In order to process the information that comes in as input, and to make
          the information that is output, a computer needs to modify and combine the
          input signals. To do this, a computer uses millions of teeny electronic
          components, which come together to form circuits.
      4:
        image: notes/csd_concept_circuits_logic_4.png
        text: Let's take a closer look at how circuits can modify and process information
          that's represented in ones and zeros. This is an incredibly simple circuit.
          It takes an electrical signal, on or off, and it flips it. So if the signal
          you give it is a 1, the circuit gives you a 0, and if you give the circuit
          a 0, it gives you a 1. The signal that goes in is not the same as the signal
          that comes out, and so we call this circuit NOT.
      5:
        image: notes/csd_concept_circuits_logic_5.png
        text: More complicated circuits can take multiple signals and combine them,
          and give you a different result. In this example, a circuit will take two
          electrical signals, now each one might be a 1 or a 0. If either of the signals
          coming in is a 0, then the result is also a 0. This circuit will only give
          you a 1, if the first signal and the second signal are both a 1, and so
          we call the circuit AND.
      6:
        image: notes/csd_concept_circuits_logic_6.png
        text: There are many small circuits like this that perform simple logical
          calculations. By connecting these circuits together, we can make more complex
          circuits that perform more complex calculations.
      7:
        image: notes/csd_concept_circuits_logic_7.png
        text: For example, you can make a circuit that adds 2 bits together called
          an adder. This circuit takes in 2 individual bits, each one a 1 or a 0,
          and adds them together to calculate the sum. The sum can be 0 plus 0 equals
          0, 0 plus 1 equals 1, or 1 plus 1 equals 2. You need two wires coming out
          because it can take up to two binary digits to represent the sum. Once you
          have a single adder for adding two bits of information, you can put together
          multiples of these adder circuits side-by-side to add together much larger
          numbers.
      8:
        image: notes/csd_concept_circuits_logic_8.png
        text: For example, here's how an 8-bit adder adds the numbers 25 and 50. Each
          number is represented using 8 bits, resulting in 16 different electrical
          signals that go into the circuit. The circuit for an 8-bit adder has lots
          of little adders inside of it, which together, calculate the sum.
      9:
        image: notes/csd_concept_circuits_logic_9.png
        text: Different electrical circuits can perform other simple calculations
          like subtraction or multiplication. In fact, all the information processing
          your computer does is just lots and lots of small simple operations put
          together. Each individual operation done by a computer is so, so simple
          it could be done by a human, but these circuits inside computers are way
          way faster.
      10:
        image: notes/csd_concept_circuits_logic_10.png
        text: Back in the day, these circuits were big and clunky, and an 8-bit adder
          could be as big as a fridge, and it would take minutes for them to perform
          a simple calculation. Today, computer circuits are microscopic in size,
          and way way faster. Why are smaller computers also faster? Well, because
          the smaller the circuit is, the less distance the electrical signal has
          to go. Electricity moves at just about the speed of light, which is why
          modern circuits can perform billions of calculations per second.
      11:
        image: notes/csd_concept_circuits_logic_11.png
        text: So whether you're playing a game, recording a video, or exploring the
          cosmos, everything you could possibly do with technology requires lots of
          information to be processed extremely quickly. Underneath all this complexity
          is just lots of teeny little circuits that turn binary signals into websites,
          videos, music, and games. These circuits can even help us decode DNA to
          diagnose and cure disease. So what would you like to do with all these circuits?
    csd_concept_memory_cpu_input_output:
      1:
        image: notes/csd_concept_memory_cpu_input_output_1.png
        text: Hi, my name is Madison Maxey. I have a company called Loomia, and we
          focus on making smart fabrics for smart clothing and smart soft good products.
          The sky's the limit when it comes to textiles.
      2:
        image: notes/csd_concept_memory_cpu_input_output_2.png
        text: My name is Danielle Applestone, and I'm CEO of Othermachine Company.
          We build a desktop milling machine. A milling machine takes a rotating cutting
          tool and moves it through material to create a 3D object.
      3:
        image: notes/csd_concept_memory_cpu_input_output_3.png
        text: Under the hood, all computers do the same four basic things. They input
          information, store and process the information, and then, output information.
          Each of these things is done by a different part of the computer.
      4:
        image: notes/csd_concept_memory_cpu_input_output_4.png
        text: There are input devices that take input from the outside world and convert
          it into binary information. There is memory to store this information. There's
          a central processing unit or CPU, where all the calculations are done. And,
          finally, there are output devices that take information and convert it into
          a physical output.
      5:
        image: notes/csd_concept_memory_cpu_input_output_5.png
        text: Let's talk about input first. Computers can take many different types
          of input, like the keyboard of a computer, the touchpad of a phone, a camera,
          a microphone, or a GPS. But even the sensors on a car, a thermostat, or
          a drone are also different input devices.
      6:
        image: notes/csd_concept_memory_cpu_input_output_6.png
        text: Now, let's look at a simple example of how input travels through a computer
          and becomes output. When you press a key on your keyboard - let's say the
          letter "B". The keyboard converts the letter to a number. That number is
          sent as binary, ones and zeros, into the computer.
      7:
        image: notes/csd_concept_memory_cpu_input_output_7.png
        text: Starting from this number, the CPU calculates how to display the letter
          "B" pixel by pixel. The CPU requests step-by-step instructions from memory,
          which tell it how to draw the letter "B". The CPU runs these instructions
          and stores the results as pixels in memory.
      8:
        image: notes/csd_concept_memory_cpu_input_output_8.png
        text: Finally, this pixel information is sent in binary to the screen. The
          screen is an output device, which converts the binary signals into the tiny
          lights and colors that make up what you see.
      9:
        image: notes/csd_concept_memory_cpu_input_output_9.png
        text: This all happens so quickly it feels instantaneous, but to display each
          letter a computer runs thousands of instructions, starting from the moment
          your finger presses the key point.
      10:
        image: notes/csd_concept_memory_cpu_input_output_10.png
        text: In that example, the output device was the screen, but there are many
          different types of output which take a binary signal from the computer and
          do something in the physical world. For example, a speaker will play sound,
          and a 3D printer will print an object. Output devices can also control physical
          motion like a robotic arm, the motor of a car, or the cutting tool of the
          milling machine that my company makes. New types of inputs and outputs let
          computers interact with the world in entirely new ways. This has been helped
          out by improvements to the speed and size of the memory and CPU.
      11:
        image: notes/csd_concept_memory_cpu_input_output_11.png
        text: The more complicated a task is and the more information that is input
          or output, the more processing power and memory a computer needs. Typing
          letters on a screen may be easy but to do complicated 3d graphics or record
          a high-definition movie, modern computers often have multiple CPUs to process
          all that information and many gigabytes of memory to store it.
      12:
        image: notes/csd_concept_memory_cpu_input_output_12.png
        text: 'No matter what it is you want to do with the computer, every single
          action is about: inputting information from the physical world, storing
          and processing that information, and getting some output back into the physical
          world.'
    csd_concept_hardware_software:
      1:
        image: notes/csd_concept_hardware_software_1.png
        text: Hi, my name is Erica Gomez and I'm an engineering manager at Amazon.com.
          One of the best things about working in tech, and at Amazon in particular,
          is that I get to bring my dog with me to work every day. My job is to help
          make sure software gets out the door and her job is to nap under my desk
          and snore very loudly.
      2:
        image: notes/csd_concept_hardware_software_2.png
        text: 'My name is Jerome Holman, and I''m a Program Manager on Team Xbox and
          I have a really fun job: Basically bringing the hardware and the software
          together to give you all the games that you love on your Xbox.'
      3:
        image: notes/csd_concept_hardware_software_3.png
        text: When you look inside a computing device you see a bunch of circuits,
          chips, wires, speakers, plugs, and all sorts of other stuff. This is the
          hardware.
      4:
        image: notes/csd_concept_hardware_software_4.png
        text: But what you don't see is the software. Software is all of the computer
          programs, or code, running on this machine. Software can be anything from
          apps and games to webpages and the data science software that me and my
          teams use at Amazon to understand how customers behave.
      5:
        image: notes/csd_concept_hardware_software_5.png
        text: But how do the hardware and the software interact with one another?
          Let's start at looking at a computer's central processing unit, or CPU.
      6:
        image: notes/csd_concept_hardware_software_6.png
        text: The CPU is the master chip that controls all the other parts of the
          computer. A CPU needs to do different things so inside it has smaller, simpler
          parts that handle specific tasks. It has circuits to do simple math and
          logic. It has other circuits to send and receive information to and from
          different parts of the computer.
      7:
        image: notes/csd_concept_hardware_software_7.png
        text: The real magic of the CPU is how it knows which circuits to use and
          when to use them. The CPU receives simple commands that tell it which circuit
          to use to do a specific job. For example, an "add" command tells the CPU
          to use its outer circuit to calculate a new number. And then the "store"
          command tells the CPU to use a different circuit to save that result into
          memory.
      8:
        image: notes/csd_concept_hardware_software_8.png
        text: Just like numbers, all of these simple commands can be represented in
          binary ones and zeros or on and off electrical signals. The binary commands
          are stored in memory and the CPU fetches and executes them in sequence one
          after the other. This sequence of commands is, in fact, a very simple computer
          program.
      9:
        image: notes/csd_concept_hardware_software_9.png
        text: Binary code is the most basic form of software and it controls all the
          hardware of a computer. These days, nobody writes software in binary. It
          would take forever!
      10:
        image: notes/csd_concept_hardware_software_10.png
        text: Today, the software we write looks more like this (Python), or this
          (Ruby), or even this (Blockly). Programming languages like these let you
          type in commands in something that looks a lot like English.
      11:
        image: notes/csd_concept_hardware_software_11.png
        text: To draw a rectangle on the screen, you just need a single command. This
          high-level command is converted into hundreds, or thousands, of simpler
          binary commands that the CPU understands. Software tells the CPU what to
          do, but when you're listening to music, and browsing the web, and chatting
          with a friend, your computer is running multiple pieces of software all
          at once.
      12:
        image: notes/csd_concept_hardware_software_12.png
        text: So, how do all of these programs get on the computer in the first place,
          and how can the CPU run them all at once? To find out we'll have to take
          a look at the operating system.
      13:
        image: notes/csd_concept_hardware_software_13.png
        text: The operating system of the computer is the master program that manages
          how software gets to use the hardware of the computer. For example, I helped
          create the Windows operating system that runs on most personal computers.
      14:
        image: notes/csd_concept_hardware_software_14.png
        text: The operating system is a program with special abilities that let it
          control the other software on the computer. It lets you install new programs
          by loading them into your computer's memory. It decides when a program is
          run by the central processing unit, and whether that program can access
          the computer's input and output devices. And when you think your computer
          is running many programs at once, in reality, it's the operating system
          that's quickly switching between programs sharing that CPU for fractions
          of a second.
      15:
        image: notes/csd_concept_hardware_software_15.png
        text: Inside every computer is an operating system managing software that
          controls the computer's hardware.
      16:
        image: notes/csd_concept_hardware_software_16.png
        text: The software is a series of commands made of simple binary code, and
          that binary code is just electrical signals flowing through billions of
          tiny circuits.
      17:
        image: notes/csd_concept_hardware_software_17.png
        text: Computers have the potential to do all kinds of amazing things. But
          the only thing that makes the computer smart, or useful, is you. When you
          learn to code you get to define the problem you want to solve, and write
          the software that turns those ideas into reality.
