"fi":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Tervetuloa ensimmäiselle kooditunnille! Sukelletaanpa heti ohjelmoinnin
          maailmaan.
      2:
        image: notes/hoc1_2.jpg
        text: Käytämme Blocklyä. Se on on visuaalinen ohjelmointikieli, jossa koodia
          kirjoitetaan vetämällä ja pudottamalla lohkoja.
      3:
        image: notes/hoc1_3.jpg
        text: Yleensä koodi kirjoitetaan, mutta Blockly on visuaalinen. Jokainen lohko
          vastaa riviä "oikeaa" koodia.
      4:
        image: notes/hoc1_4.jpg
        text: Opit kohta tietotekniikan perusteet. Näitä käsitteitä käytetään kaikkialla
          aina pienistä sovelluksista Mars-mönkijän ohjaamiseen saakka.
      5:
        image: notes/hoc1_5.jpg
        text: Ohjelma on joukko ohjeita, joita tietokoneesi noudattaa.
      6:
        image: notes/hoc1_6.jpg
        text: Ensimmäisen ohjelmasi tehtävä on ohjata Angry Bird -lintu sokkelon läpi
          ja osua vihreään possuun.
      7:
        image: notes/hoc1_7.jpg
        text: Vasemmalla on sokkelo, jossa ohjelmasi suoritetaan. Jokaisen tehtävän
          ohjeet löytyvät sokkelon alapuolelta.
      8:
        image: notes/hoc1_8.jpg
        text: Keskimmäinen työkalupakki sisältää komentoja Angry Bird -linnulle. Näitä
          käytetään koodisi rakentamiseen.
      9:
        image: notes/hoc1_9.jpg
        text: Oikealla on työtilasi, johon rakennat ohjelmasi raahamalla lohkoja työkalupakista.
          Jos haluat poistaa lohkon, vedä se nurkasta löytyvään roskakoriin.
      10:
        image: notes/hoc1_10.jpg
        text: Jokainen lohko on käsky. Jos vedät "liiku eteenpäin" -lohkon työtilaasi
          ja painat "suorita ohjelma" -nappia, lintu liikkuu yhden ruudun sokkelossa.
      11:
        image: notes/hoc1_11.jpg
        text: Tehdäksesi enemmän kuin yhden toiminnon, voit vetää monta lohkoa työtilaasi
          ja liittää ne yhteen. Lintu tekee käskyt ylhäältä alaspäin.
      12:
        image: notes/hoc1_12.jpg
        text: Jos suoritat ohjelman ja haluat korjata ja yrittää uudelleen, paina
          "alusta" -nappulaa.
      13:
        image: notes/hoc1_13.jpg
        text: Ja eikun vain possujen kimppuun!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hei, olen JR! Kaikki ralliautotiimit tarvitsevat tietojenkäsittelyasiantuntijan
          voittaakseen. He analysoivat auton tietoja saadakseen sen kulkemaan nopeammin.
      2:
        image: notes/stage5_2.jpg
        text: Näissä tehtävissä olet taiteilija, joka piirtää viivaa kulkiessaan.
      3:
        image: notes/stage5_3.jpg
        text: Tässä lohkossa lukee "liiku eteenpäin 100 kuvapistettä". Kuvapisteet
          ovat pieniä pisteitä näytölläsi.
      4:
        image: notes/stage5_4.jpg
        text: Tässä lohkossa lukee "käänny oikealle 90 astetta". Se kääntää taiteilijaasi
          saman verran kuin "käännä"-lohkot sokkelotehtävissä.
      5:
        image: notes/stage5_5.jpg
        text: Napsauttamalla lohkon päissä olevia nuolia, voit muuttaa sitä määrää,
          jonka taiteilija liikkuu eteenpäin tai kääntyy. Leiki nyt hetki näillä lohkoilla
          tutustuaksesi niihin paremmin.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hei, olen Paola! Näissä tehtävissä olet maanviljelijä, jonka täytyy
          saada peltonsa täysin tasaiseksi aloittaakseen istutukset.
      2:
        image: notes/stage9_2.jpg
        text: Sinun täytyy auttaa häntä poistamaan kaikki multakasat ja täyttämään
          kaikki kuopat.
      3:
        image: notes/stage9_3.jpg
        text: Uudet lohkot poistavat yhden lapiollisen multaa kasasta ja täyttävät
          yhden lapiollisen multaa kuoppaan.
      4:
        image: notes/stage9_4.jpg
        text: Kasat ja kuopat ovat erikokoisia, joten sinun täytyy kertoa maanviljelijälle
          kuinka monta lapiollista hänen tulisi käyttää.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hei olen Katie! Yksi mielenkiintoisimmista asioista tietotekniikassa
          on, että tietokoneohjelma voi olla vuorovaikutteinen.
      2:
        image: notes/flappy02.jpg
        text: Joka kerta kun joku napsauttaa tai kirjoittaa tietokoneella tai puhelimella,
          se luo "tapahtuman", ja jokin kirjoitettu koodi päättää mitä tehdään kun
          tuo tapahtuma tapahtuu.
      3:
        image: notes/flappy03.jpg
        text: 'Esimerkiksi, sinulla voi olla tapahtumakäsittelijä, joka sanoo "kun
          hiirtä napsautetaan, soita ääni" '
      4:
        image: notes/flappy04.jpg
        text: Oletko koskaan kuullut pelistä nimeltä FlappyBird? Käyttäen tapahtumakäsittelijöitä,
          opimme kuinka ohjelmoida oma räätälöity versio FlappyBirdistä!
      5:
        image: notes/flappy05.jpg
        text: Nyt tehtävä koodaus tulee tapahtumaan raahaamalla koodia esittäviä lohkoja.
          Jokainen lohko vastaa yhtä tietokoneelle annettavaa komentoa. Pinnan alla
          kukin näistä lohkoista vastaa oikea koodia.
      6:
        image: notes/flappy06.jpg
        text: Kun tarkastelet työtilaa, huomaat joitain vihreitä lohkoja valmiiksi
          täytettynä - nämä ovat "tapahtumakäsittelijöitä"
      7:
        image: notes/flappy07.jpg
        text: Jos haluat linnun tekevän RÄPYTTELE-toiminnon kun NAPSAUTAT hiirtä,
          voit tehdä niin liittämällä "RÄPYTTELE"-lohkon soveltuvaan tapahtumakäsittelijaan.
          Näin lintu räpyttelee siipiään aina hiiren napsautuksella.
      8:
        image: notes/flappy08.jpg
        text: Jokaisessa tämän jakson tehtävässä esittelemme työtilassa yhden tai
          useamman uuden vihreän tapahtumalohkon. Liittämällä toimintolohkoja tapahtumalohkoihin,
          voit päättää mitä tapahtumista seuraa.
      9:
        image: notes/flappy09.jpg
        text: Kun näet tälläisen nuolen alaspäin, se tarkoittaa että voit muuttaa
          asetuksia - kuten esimerkiksi, mikä ääni kuuluu, kun flappy osuu maahan.
      10:
        image: notes/flappy10.jpg
        text: Viimeisessä tehtävässä voit luoda oman pelin ja jakaa sen ystäviesi
          kanssa. Pidä hauskaa!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hei, olen Mark! Opetellaanpa silmukoita. Silmukalla voit ohjata tietokonetta
          toistamaan mitä vain toimintoa uudelleen ja uudelleen, tuhansia tai jopa
          miljardeja kertoja.
      2:
        image: notes/hoc2_2.jpg
        text: Tässä tehtävässä haluamme liikuttaa lintua 5 ruutua eteenpäin osuaksemme
          possuun.
      3:
        image: notes/hoc2_3.jpg
        text: Voimme käyttää uutta "toista"-lohkoa apunamme.
      4:
        image: notes/hoc2_4.jpg
        text: Sen sijaan että vetäisimme 5 "liiku eteenpäin" -lohkoa...
      5:
        image: notes/hoc2_5.jpg
        text: Voimme laittaa "liiku eteenpäin" -lohkon "toista"-lohkon sisään ja kirjoittaa
          luvun lohkoon kertoaksemme sille, kuinka monta kertaa pitää toistaa.
      6:
        image: notes/hoc2_6.jpg
        text: 'Ja tämä on tärkeää: voit laittaa enemmän kuin yhden komennon "toista"-lohkoon.'
      7:
        image: notes/hoc2_7.jpg
        text: Pidä hauskaa uuden "toista"-lohkon kanssa!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hei, olen Chris. Ennen kuin liityin Miami Heatiin, opiskelin tietojenkäsittelytiedettä
          Georgian teknillisessä oppilaitoksessa. Kokeillaanpa uutta "toista kunnes"
          -lohkoa.
      2:
        image: notes/hoc3_2.jpg
        text: Mitä jos emme tietäisi, kuinka pitkälle linnun pitäisi liikkua saavuttaakseen
          possun?
      3:
        image: notes/hoc3_3.jpg
        text: Jos laitamme "liiku eteenpäin" -lohkon "toista kunnes" -lohkon sisälle,
          lintu liikkuu eteenpäin KUNNES se saavuttaa possun (tai törmää seinään).
      4:
        image: notes/hoc3_4.jpg
        text: 'Ja tämä on tärkeää: aivan kuin ennenkin, voimme laittaa monta lohkoa
          yhteen "toista kunnes" -lohkoon, niin että ne kaikki toistuvat.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hei, olen Bill! Opetellaanpa uusi keskeinen käsite: "jos"-lause. Tämän
          avulla tietokoneet tekevät päätöksiä.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Käytät "Jos"-lausetta itse joka päivä. Esimerkiksi, ennen kuin lähdet
          ulos, sanot itsellesi: "jos ulkona sataa, tarvitsen sadetakkini."'
      3:
        image: notes/hoc4_3.jpg
        text: Voimme laittaa zombit tarkistamaan, JOS vasemmalle on reitti ja kun
          zombie tulee sellaiseen kohtaan, voimme laittaa sen kääntymään sinne.
      4:
        image: notes/hoc4_4.jpg
        text: Raahataan siis yksi "Jos"-lohko ja sen sisään "käänny vasemmalle" -lohko.
      5:
        image: notes/hoc4_5.jpg
        text: Jos nyt laitamme "liiku eteenpäin" -lohkon sen yläpuolelle ja "toista"-lohkon
          sen ympärille, niin zombie tarkistaa joka kerta kun se liikkuu, onko vasemmalle
          reittiä – ja jos on, se kääntyy. "Toista"-lohko on hyvin tärkeä, jotta tarkistus
          tehdään joka askeleella.
      6:
        image: notes/hoc4_6.jpg
        text: Jos-lauseet ovat hyvin tärkeitä tietojenkäsittelytieteessä. Yksi ensimmäisistä
          ohjelmista, jonka kirjoitin, oli peli nimeltä ristinolla. Siinä oli jos-lause,
          joka sanoi "JOS toinen henkilö on voittamassa, estä se siirto, jolla hän
          voittaisi."
      7:
        image: notes/hoc4_7.jpg
        text: Pidä hauskaa "Jos"-lohkolla!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hei, nimeni on Saloni. Käytän tietojenkäsittelytiedettä ratkomaan ongelmia
          terveyden ja lääketieteen alueella. Opiskellaanpa "jos muuten" -lohkosta.
          Se näyttää "jos"-lohkolta, mutta siinä on ylimääräinen pala lopussa, joka
          sanoo "muuten".
      2:
        image: notes/hoc5_2.jpg
        text: Jos laitan "liiku eteenpäin" -lohkon paikkaan jossa on "tee" ja "käänny
          vasemmalle" -lohkot kohtaan jossa lukee "muuten" se tarkoittaa että zombie
          valitsee kahden vaihtoehdon väliltä. JOS edessä on reitti, zombie menee
          eteenpäin; MUUTEN (jos edessä ei ole reittiä) zombie kääntyy vasemmalle.
      3:
        image: notes/hoc5_3.jpg
        text: Kuten "jos"-lohkon, voimme laittaa myös "jos muuten" -lohkon "toista"-lohkon
          sisään niin, että zombie jatkaa liikkumista ja "jos muuten" -lohko tarkistaaa
          jos jonnekin voi kääntyä.
      4:
        image: notes/hoc5_4.jpg
        text: No niin, laitetaanpa nuo zombiet sinne minne kuuluvat!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Jos-muuten -lauseke on päätös kahden asian välillä. Katsotaanpa kuinka
          käytämme jos-muuten -lauseketta kaverimme Scrat-oravan kanssa.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Tämä lohko näyttää "jos" lohkolta, mutta siinä on "muuten" lisäosa lopussa.
          Jos laitan "liiku eteenpäin" -lohkon kohtaan jossa on "tee" ja "käänny vasemmalle
          -lohkon kohtaan, jossa sanotaan "muuten", se tarkoittaa, että Scrat-orava
          liikkuu eteenpäin jos edessä on reitti. Jos edessä ei ole reittiä, Scrat
          kääntyy vasemmalle.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Se tekee päätöksen ja suorittaa yhden kahdesta toimenpiteesta päätökseen
          perustuen. Ja aivan kuten "jos"-lohkoissa, voit laittaa "jos-muuten"-lohkoja
          "toista"-lohkojen sisään.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Autetaanpa Scrat-oravaa saamaan tammenterho!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hei, olen Brina, insinööri Instagramilla. Funktio on joukko koodirivejä,
          joita haluat käyttää uudelleen ja uudelleen. Niinpä sen sijaan, että kirjoittaisit
          kaiken tuon koodin joka kerta, voit käyttää yhtä lohkoa.
      2:
        image: notes/stage13_2.jpg
        text: Nyt opettelemme, miten määritellään funktioita. Funktion määritelmän
          nurkassa on tähti. Funktion nimi kirjoitetaan ylimmälle riville.
      3:
        image: notes/stage13_3.jpg
        text: Määrittelyn sisällä olevat lohkot kertovat, mitä se tekee. Tämän funktion
          nimi on "täytä 5", ja se koostuu "toista"-lohkosta ja "täytä"-lohkosta.
      4:
        image: notes/stage13_4.jpg
        text: Määritelmät ovat työtilassa, mutta maanviljelijä ei suorita funktiota
          ennen kuin raahaamme "täytä 5" -funktiolohkon funktiot-valikosta.
      5:
        image: notes/stage13_5.jpg
        text: 'Laitetaanpa funktiot käytöön! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hei, olen Makinde! Opetellaanpa "niin kauan kuin" -lohkon toimintaa. '
      2:
        image: notes/stage9_6.jpg
        text: '"Niin kauan kuin" -lohko toistaa mitä tahansa asetat sen sisälle, niin
          kauan kuin ylhäällä oleva ehto pitää paikkansa eli on TOSI.'
      3:
        image: notes/stage9_7.jpg
        text: Esimerkiksi, jos maanviljelijä seisoo kasan päällä, hän jatkaa yhden
          lapiollisen poistamista "niin kauan kuin" hänen allaan on kasaa jäljellä.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hei, minä olen Trina ja työskentelen Pixarilla. Olen tehnyt töitä liutaan
          eri elokuvia, kuten esimerkiksi Shrekiin.
      2:
        image: notes/stage11_2.jpg
        text: Tämä on uusi "laskuri"-silmukkamme. Se suorittaa komentoja yhä uudelleen
          ja voit muuttaa silmukan toimintaa hieman jokaisella kerralla.
      3:
        image: notes/stage11_3.jpg
        text: Tässä esimerkissä "laskuri" -silmukkamme sanoo "laske laskurilla  50:stä
          90:een 10 välein" ja sen sisällä meillä on "piirrä neliö" -lohko. Raahaa
          "laskuri" -lohko "Muuttujat"-valikosta "pituus"-kohtaan.
      4:
        image: notes/stage11_4.jpg
        text: Tämä tarkoittaa, että taiteilijamme aikoo piirtää neliön, jonka sivujen
          pituus on 50 kuvapistettä, lisätä tähän 10 ja piirtää neliön, jonka sivujen
          pituus on 60 kuvapistettä. Sitten hän uudelleen ja uudelleen lisää 10 kuvapistettä
          ja piirtää neliön, kunnes neliön sivun pituus on 90. Lopulta meillä on neliöt,
          joiden koot ovat 50, 60, 70, 80 ja 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hei, olen Janete, ja olen insinööri Zyngalla.
      2:
        image: notes/stage15_2.jpg
        text: Mitä jos haluamme piirtää joukon kolmioita, jotka ovat kaikki eri pituisia?
      3:
        image: notes/stage15_3.jpg
        text: Voisimme kirjoittaa kaiken tuon koodin käsin, tai sitten voimme käyttää
          funktioita, joille annetaan parametreja.
      4:
        image: notes/stage15_4.jpg
        text: Tehdäksesi tämän, napsauta sinistä tähteä "piirrä kolmio" -funktion
          määrittelyssä. Sitten raahaa "syötä nimi" "syöte"-lohkoon.
      5:
        image: notes/stage15_5.jpg
        text: Jos sitten kirjoitat "pituus" kohtaan, jossa lukee "x" ja painat rivinvaihtonäppäintä
          ("Enter"), olet määrittänyt pituussyötteen funktiollesi.
      6:
        image: notes/stage15_6.jpg
        text: Napsauta sitten tähteä. Seuraavaksi avaa muuttujat-valikko ja raahaa
          "pituus"-lohko "siirry eteenpäin" -lohkoon funktiomäärityksessäsi. Raahaa
          myös pois vanha numero-lohko.
      7:
        image: notes/stage15_7.jpg
        text: Kun haluat käyttää parametrillista funktiota, avaa Funktiot-valikko
          ja raahaa sieltä "piirrä kolmio arvolla pituus" -funktio.
      8:
        image: notes/stage15_8.jpg
        text: Nyt voit käyttää "matematiikka"-lohkoa ja syöttää eri numeroita piirtääksesi
          eri kokoisia kolmioita.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Onneksi olkoon! Viime pulman ratkaisussa kirjoitit koodin, joka voi
          ohjata minkä tahansa robotin läpi haarautumattomasta labyrintistä tai kuinka
          tahansa pitkästä tunnelista, oli kulkijasi sitten zombi, lintu, Mars-mönkijä
          tai jopa itsestään ajava auto.
      2:
        image: notes/hoc6_2.jpg
        text: Käyttämäsi peruskäsitteet esiintyvät kaikissa ohjelmissa ja mobiilisovelluksissa
          joita koskaan tulet käyttämään. Opimme toistosilmukat, toista kunnes -lauseet,
          jos-lauseet ja jos-muuten-lauseet.
      3:
        image: notes/hoc6_3.jpg
        text: Jos pidit ensimmäisestä kooditunnistasi, vieraile code.org-sivustolla
          jatkaaksesi tietotekniikan opintojasi! Kun suoritat 20 tunnin kurssimme,
          opit ohjelmoinnin perusteet ja voit ryhtyä opettelemaan miten tehdään sovelluksia
          puhelimille, robottien ohjeita, pelejä tai mitä tahansa.
      4:
        image: notes/hoc6_4.jpg
        text: Teknologia muuttaa kaikkea mitä teemme. Sillä ole väliä, oletko nuori
          tai vanha; ohjelmointi on hauskaa, se on luovaa, ja kuka tahansa voi oppia!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Esityksen muistiinpanot tulossa pian!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hei, nimeni on Lyndsey. Olen malli, näyttelijä ja kirjoitan omia sovelluksiani.
          Käytetään koodia liittyäksemme Annan ja Elsan seuraan, kun he tutustuvat
          jään taikaan ja kauneuteen.
      2:
        image: notes/frozen1_2.jpg
        text: Luot lumihiutaleita ja kuvioita luistellessasi. Tee talven ihmemaa jaettavaksi
          ystävillesi.
      3:
        image: notes/frozen1_3.jpg
        text: Seuraavan tunnin aikana opit koodaamisen perusasiat. Perinteinen ohjelmointi
          tapahtuu yleensä tekstillä, mutta me käytämme Blocklyä, jossa ohjelmia luodaan
          kokoamalla niitä visuaalisista lohkoista. Jopa osa yliopistoista käyttää
          samaa tapaa. Konepellin alla luot kuitenkin ihan oikeaa koodia.
      4:
        image: notes/frozen1_4.jpg
        text: Ohjelma on joukko ohjeita, jotka kertovat tietokoneelle mitä tehdä.
          Rakennetaanpa koodia, eli ohjelma, joka auttaa Elsaa luomaan yksinkertaisen
          viivan. Käytämme tätä myöhemmin luodessamme monimutkaisempia kuvioita.
      5:
        image: notes/frozen1_5.jpg
        text: Näyttösi on jaettu kolmeen pääosaan. Vasemmalla on jään pinta, jossa
          ajat ohjelmasi. Ohjeet kullekin tasolle on kirjoitettu juuri jäänpinnan
          alle.
      6:
        image: notes/frozen1_6.jpg
        text: Keskimmäinen alue on työkaluvalikko, ja jokainen näistä lohkoista on
          toiminto jonka Elsa ja Anna voivat tehdä.
      7:
        image: notes/frozen1_7.jpg
        text: Valkoista aluetta oikealla kutsutaan työtilaksi ja siinä rakennamme
          ohjelmamme. Liikkuaksesi jääpinnalla, käytä "Liiku eteenpäin"-lohkoa.
      8:
        image: notes/frozen1_8.jpg
        text: Tässä "Liiku eteenpäin"-lohko sanoo "liiku eteenpäin 100 kuvapistettä".
          Kun painat "Suorita", mitä tapahtuu? Elsa siirtyy eteenpäin tietyn määrän
          ruudulla, itse asiassa 100 kuvapistettä! Kuvapisteet ovat hyvin pieniä neliöitä
          tietokoneesi ruudulla.
      9:
        image: notes/frozen1_9.jpg
        text: Toinen lohko joka meillä on tässä tehtävässä sanoo "käänny oikealle
          90 astetta". Ja kun käytämme tätä "Käänny oikealle"-lohkoa, saamme Elsan
          kääntymään tietyn määrän. Voit kokeille erilaisia arvoja nähdäksesi kuinka
          kauas haluat Elsan kääntyvän. Kulma mitataan reitiltä Elsan edessä. Joten,
          tämä on 90 asteen käännös. Ja tämä on 120 asteen käännös.
      10:
        image: notes/frozen1_10.jpg
        text: Muista, voit muuttaa kuvapisteiden tai asteiden määrää napsauttamalla
          nuolta niiden vieressä.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hei, olen Paola! Tietokoneet ovat tosi hyviä toistamaan toimenpiteitä.
          Sinä voit laskea 10, 20 tai 100:aan, mutta tietokone voi laskea miljardeihin
          tai vielä suurempiin lukuihin. Se ei kyllästy ja sillä kuluu siihen aikaa
          vain muutamia sekunteja. Mitä tahansa se tekee – laskee, piirtää tai jotain
          muuta – tietokone pystyy toistamaan asioita satoja tai vaikka miljardeja
          kertoja.
      2:
        image: notes/frozen2_2.jpg
        text: Ohjelmoinnissa tätä kutsutaan silmukaksi. Silmukalla toistat koodiasi
          kerta toisensa jälkeen. Seuraavassa tehtävässä sinun tulee auttaa Annaa
          luomaan neliö käyttäen "Toista"-lohkoa.
      3:
        image: notes/frozen2_3.jpg
        text: Mitkä tahansa koodilohkot jotka laitat "Toista"-lohkon sisälle, toistetaan
          sarjassa niin monta kertaa kuin haluat.
      4:
        image: notes/frozen2_4.jpg
        text: Piirtääksesi neliön, voit käyttää "Liiku eteenpäin" ja "Käänny oikealle"
          -lohkoja neljä kertaa. Mutta helpompaa on kertoa tietokoneelle "Liiku eteenpäin"
          ja "Käänny oikealle 90 astetta" kerran ja käskeä sitä toistamaan tämä toimintopari
          4 kertaa. Tehdäksesi tämän, sinun täytyy laittaa "Liiku eteenpäin" ja "Käänny
          oikealle" -lohkot "Toista"-lohkon sisään.
      5:
        image: notes/frozen2_5.jpg
        text: Muista, voit muuttaa "Toista"-lohkoissa olevaa numeroa miksi tahansa.
          Sen sisältö toistetaan numeron määräämä määrä kertoja.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hei, olen Chris Bosh. Olen koripalloammattilainen ja koodasin yliopistossa.
      2:
        image: notes/frozen3_2.jpg
        text: Yksi tietojenkäsittelytieteen tärkeimmistä käsitteistä on uusien komentojen
          luominen. Suurimmassa osassa ohjelmointikieliä on vain 100 käskysanaa tai
          komentoa. Ohjelmoinnin taika onkin omien uusien sanojen määrittely ja rakentaminen
          näistä rakennuspalikoista.
      3:
        image: notes/frozen3_3.jpg
        text: Kun olet kerran opettanut tietokoneen tekemään toiminnon käyttäen tätä
          toimintosarjaa, voit keksiä oman nimesi toiminnolle niin että sen toistamisen
          myöhemmin on helppoa. Voit myös määritellä oman käskysi ja antaa sille nimen,
          tätä kutsutaan funktioksi.
      4:
        image: notes/frozen3_4.jpg
        text: Hei, olen Jess. Ohjelmoidessasi lohkoilla, voit käyttää funktioita kun
          on joukko toimintoja, jotka haluaisit tehdä monta kertaa. Esimerkiksi, olet
          kirjoittanut koodia luodaksesi neliön.
      5:
        image: notes/frozen3_5.jpg
        text: 'Voit määritellä tämän funktiona, jonka nimi on "Luo neliö" '
      6:
        image: notes/frozen3_6.jpg
        text: Nyt sinulla on uusi lohko, jota voit käyttää kerta toisensa jälkeen
          luodaksesi määrättömästi uusia neliöitä.
      7:
        image: notes/frozen3_7.jpg
        text: Monia yksinkertaisia kuvioita voidaan käyttää monimutkaisten kuvioiden
          piirtämiseen. Seuraavassa tehtävässä juuri piirtämäsi ympyrän koodi on saatavilla
          uutena funktiona, joka tekee eri kokoisia ympyröitä. Osaatko käyttää sitä
          auttaaksesi Elsaa luomaan taidokkaita ja kauniita kuvioita jäähän?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Aiomme luoda pelejä käyttäen Play Lab:ia. Hyvissä peleissä on tarina
          ja jokaisessa tarinassa on hahmoja. Me opimme, kuinka voimme saada hahmojemme,
          kuten noidat tai avaruusoliot puhumaan, liikkumaan ja vaikuttamaan toisiinsa.
          Tämän opetusohjelman loppuun mennessä osaat rakentaa pelin tyhjästä ja voit
          jakaa sen ystäviesi kanssa.
      2:
        image: notes/playlab_intro_2.png
        text: Näyttösi on jaettu 3 osaan. Vasemmalla on pelin tila, jossa ohjelmasi
          suoritetaan. Ohjeet jokaiselle tasolle kirjoitetaan alla.
      3:
        image: notes/playlab_intro_3.png
        text: Keskialue on työkaluvalikko, ja jokainen näistä lohkoista on koodinpätkä.
          Valkoista aluetta oikealla kutsutaan työtilaksi ja siinä me rakennamme ohjelmaamme.
      4:
        image: notes/playlab_intro_4.png
        text: Aloittaaksesi sinun täytyy liittää lohkosi oranssiin "suoritettaessa"
          lohkoon. Voit liittää useita lohkoja yhteen vetämällä niitä, kunnes näet
          keltaisen viivan ja sitten ne kohdistuvat yhteen.
      5:
        image: notes/playlab_intro_5.png
        text: Ensimmäisessä palapelissä meidän hahmomme on pingviini ja me saamme
          sen sanomaan  "Hei!" vetämällä sanonta -lohko ulos ja liittämällä se suoritettaessa
          -lohkoon ja kirjoittamalla "Hei." Voimme myös saada pingviinin liikkumaan
          käyttämällä siirrä oikealle ja siirrä vasemmalle -lohkoja. Kun olet saanut
          lohkot on paikalleen, niin klikkaa suorita nappia ja näet mitä olet ohjelmoinut.
      6:
        image: notes/playlab_intro_6.png
        text: 'Aloita, niin loppuun päästyäsi osaat luoda oman pelin kaikenlaisille
          pelaajille, jotka voivat: olla vuorovaikutuksessa, vaihtua onnellisiksi
          tai surullisiksi,  kerätä pisteitä tai heittää tulipalloja tai jopa kadota
          yksi kerrallaan. Se on kaikki sinusta kiinni, mitä haluat pelisi tekevän.'
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Nyt aiomme oppia jotain, mitä kaikki pelisuunnittelijat käyttävät päivittäin.
          Niitä kutsutaan tapahtumiksi. Tapahtuma kertoo ohjelmallesi, että se kuuntelee
          kun jotakin tapahtuu. Kun se asia tapahtuu, tapahtuma suorittaa toiminnon.
      2:
        image: notes/playlab_events_2.png
        text: Joitakin tapahtumien esimerkkejä on hiiren napsautuksen kuuntelu,  nuoli-painikkeen
          käyttö tai näytön napautus.
      3:
        image: notes/playlab_events_3.png
        text: Tässä me aiomme tehdä avaruusbotin tervehtimään maanasukkeja, kun pelaaja
          klikkaa häntä. Me käytämme "kun napsautetaan" -lohkoa ja liitämme "sano"
          -lohko siihen. Kun pelaaja klikkaa avaruusbottia, niin kaikki "kun napsautetaan"
          -lohkoon  liitetty tapahtumalohko suoritetaan. Mitä sinun avaruusolio sanoo?
      4:
        image: notes/playlab_events_4.png
        text: On myös "kun nuoli" -lohkoja. Jos linkität "siirrä"-lohkot näihin, voit
          aloittaa siirtämään sinun näyttelijöitä ylös, alas, vasemmalle tai oikealle.
          Askel askeleelta pelistäsi tulee enemmän vuorovaikutteinen.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Tämä on "toista ikuisesti" -lohko. Kaikki tämän lohkon sisäiset tapahtumat
          jatkuvat pelissä ikuisesti.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Jos haluat näyttelijäsi tekevän jotain toistuvasti ilman että pelaaja  joutuu
          tekemään mitään, niin me laitamme ne lohkot "toista ikuisesti" -lohkon sisään.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: Tässä seuraavassa tehtävässä tavoitteenamme on auttaa velhoa  partiomaan
          valtakunnan rajoja, vasemmalle ja oikealle jatkuvasti. Oppiessasi miten
          toista -komennot toimivat, tulet säästämään huomattavasti aikaasi  kun myöhemmin
          rakennat omaa peliäsi.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: These are your draw blocks. Use the correct one to move the artist where
          he needs to go to fill in the grey lines.
      2:
        image: notes/C1_artist_intro_2.png
        text: These are jump blocks. When you use these, your artist moves but doesn't
          draw, so use these to jump to the next grey line.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Aren't bees super cool? In this next set of puzzles, your goal is to
          help the bee get to the flowers and get nectar from the flowers and fly
          over to the honeycomb to make honey. You'll need to use the "get nectar"
          and the "make honey" blocks for this exercise.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Every flower has a different number of nectars: 1, 2, 3, or more. We
          know how much nectar is in the red flowers, by the little number in the
          corner. So be sure to get all the nectar from the flower before you move
          forward. Also, every honeycomb can only hold so much honey: 1, 2, 3, or
          more. So be sure to make as much honey as the honeycomb can hold.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: If you're able to get all the nectar and make all the honey, you succeed
          and go to the next level. Otherwise, you need to try this puzzle again.
          Play around a while and see what it feels like to "bee" a programmer!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: A loop is a repetition of activity. So going into a hive to inspect,
          I look at a frame and then I put it back, so I repeat that same activity
          multiple times. It's looping around, doing the same activity multiple times.
      2:
        image: notes/C1_bee_loops_2.png
        text: In this level, we want the bee to collect three nectars from the flower.
          Instead of using three "get nectar" blocks, you're going to use the repeat
          block to get nectar three times. Hit "Run" and see if you got it right.
          Nice!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: This lesson is called the big event. It's all about how we can control
          our programs and actually change the way a program runs on the fly using
          events, like the push of a button or the click of a mouse.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: For this lesson, you'll be controlled with a paper remote control. It's
          just like a real-live video game.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: An event is an action  that causes something to happen. It's like when
          you click the button on a mouse and a webpage loads. That's an event. When
          you touch your screen on a tablet to scroll, that's an event also. Events
          are a great way of letting the user direct your program whenever they need
          or want to.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Things happen that we all respond to. We feel hungry and we go to the
          fridge. We hear the mailman come and he puts our mail in the mailbox  and
          then we go get our mail. Those are just like the events of pushing a button
          or moving a joystick. They are something that happens that triggers us to
          do something.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: In video games, there's an event called "Update" and it happens 30 or
          60 times a second. For videogame programmers that's almost more important
          as an event than the buttons or the joystick.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: The main event we're watching for is that "Update" tick happening. And
          then we check the joystick in the tick. So we say, "Oh, has somebody pushed
          the button this frame? Yes or no?" Without events, the player couldn't move,
          you couldn't jump, you wouldn't be able to control what's going on. The
          videogame wouldn't be able to animate anything.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: In sand sculpture you've got to know that failure is part of the program.
          But if you're persist, it's just going to get nothing but better and more
          exciting for you.Persistence is the name of the game. Stay with it, you'll
          love it.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: This lesson is called building a foundation. In this lesson, we'll work
          on a task that is meant to be really difficult. You will figure out how
          to make a structure at least as tall as one of these cups and it's got to
          be strong enough to hold the weight of a book.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: There might be times that our creation doesn't work out. There might
          be times that we get frusrated and want to give up. There might be a lot
          of those moments. But if we keep on trying, give it our best shot over and
          over again, then we're sure to get it before long.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistence is all about hanging in there when you really want to give
          up. If you want to create something new and different, there's going to
          be a lot of failures along the way.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: The trick to persistence is choosing to keep on going and learn from
          your failures instead of quitting because you're frustrated. Frustration
          actually just means there's something wonderful around the corner. So don't
          quit before you get to it. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hi, my name is Miral Kotb and I'm the creator of Iluminate. In my work,
          there is something we use in both dances and in programming lightsuits.
          And that is loops! Loops are repeating an action over and over.
      2:
        image: notes/C1_getting_loopy_2.png
        text: When you repeat something multiple times, like my actions to keep the
          hula hoop spinning, I'm performing a loop of that action. This is a loop.
          This is a loop. And this is a loop.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Today we're going to have a dance party. We'll act out loops with a
          new dance. The Iteration. We're going to learn about loops using a dance.
          You will learn a couple of easy steps and repeat them over and over to complete
          the dance.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Here are the steps you need to learn. Clap your hands. Put your hands
          behind your head. Put your hands on your waist. Lift your left hand up.
          Lift your right hand up. Pretty simple, right? You will discover that you
          can shorten the directions by putting some dance steps in loops.
      5:
        image: notes/C1_getting_loopy_5.png
        text: We actually do use loops in our dancing. The dancers are wearing computers,
          all in the same network. I might loop the lights through to the same dancers
          over and over again. In the loop I might have an iteration where I'll say
          you want to go loop through these six dancers over and over again and then
          within the loop you want to increase the speed of the light. And that's
          all created through loops. Loops are important in computer science because
          they make our work shorter and easier.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: This lesson is called Happy Maps. Today we're gonna help our furry little
          friend Flurb get to her fruit.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Make your Flurb go to your fruit. To do this you'll need to figure out
          which way the Flurb needs to go and direct her with arrows. In order for
          the Flurb to get to the apple, what direction does the Flurb have to go?
          Line to make it go up.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: To get it there you circle the direction that it has to go.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Create your algorithm by gluing arrows next to the map that you're trying
          to solve. The second one it's the same but it's going down.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: It's like programming with paper. And that's it!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Debugging is finding and fixing problems. There are lots of ways to
          debug problems. One of the easiest is to move step by step until where you
          find where something goes wrong. Here I'm trying to do a back handspring
          on the beam but I keep falling off.
      2:
        image: notes/C1_maze_debugging_2.png
        text: I walked through each part step by step and realized where my mistake
          was. I wasn't putting my hands on the beam correctly. So I tried another
          back handspring on the beam with my new hand position and I got it. I was
          really glad I debugged my back handspring.
      3:
        image: notes/C1_maze_debugging_3.png
        text: To learn about debugging, we start with a set of blocks already on the
          stage. You'll notice that these blocks won't get you to the goal. We need
          to debug the solution and fix it. What went wrong? You'll notice that you
          needed to keep going west one more block.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Let's fix this by adding another west block and hitting run to see if
          you got it right. Yay, you got it!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle
          and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: You need to drag the blocks over from the toolbox to the workspace.
          Make sure it's under the "when run" block and when you think you've got
          the right solution, then you can click "Run" and watch the bird go to the
          pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: To get the bird to the pig in this level... rather than drag three North
          blocks on to the workspace, you will use the "repeat" block. Drag the "repeat"
          block on to the workspace and enter the number 3. Then drag the "move North"
          block into the "repeat" block and hit "Run" to see if you got it right.
          Congratulations, you got it!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: This lesson is called move it, move it. Together we're going to write
          a program to get our friends from the starting with the compass rose to
          the smiley face goal.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: But the smiley is face down and only one person knows how to get there.
          Let's get this program started.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: A program is an algorithm that has been coded into something that can
          be run by a machine. Most of us think of a program as something that we
          write for a computer. Programs are really good for that but they're also
          helpful in other places. You can make your own game or even program a robot
          to do things for you.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: My name is Jeremiah. Hi! I am seven years old. I love playing on my
          mom's computer but I always get permission first. "Mom, can I go on the
          computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: I love my mom's computer because I can go on the internet. The internet
          is kind of like your neighborhood. You can visit cool places, you can talk
          to family and friends and you can learn lots of new things.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Yesterday, I visited a zoo that's near my house. I saw a baby zebra.
          I took her picture and changed the color of her stripes, then added a hat
          and added it to my collection of wacky animals. Awesome! Later, I went to
          a place far far away. I visited Kenya. That's a country in Africa. Lots
          of zebras live there.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Sometimes on the internet I talk to peeople I know, like my grandma
          who lives in another state. Hi grandma! She's making me cookies that she'll
          send me for my birthday. "Yummy, I wish the internet had smellorama!" I
          can talk to different people on the internet, like my cousin but I only
          talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score!
          I also like to draw and create new things and share it with my friends.
          Cool! Sometimes I visit websites where I learn new things but I always stick
          to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The internet is a super fun place. But just like when you cross a street
          in your neighborhood, you also have to be careful when you go online. Here
          are three rules to remember. Rule number 1: Always ask your parents first.
          Rule number 2: Only talk to people you know. Rule number 3: Stick to places
          that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to
          log on again to see where I can visit next.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Today we're going to learn about Pair Programming. In pair programming
          you work as a team. Why should two people use one computer? Because two
          heads are better than one. In pair programming you and your partner are
          going to sit down together at one computer and you are both going to work
          on the same project.
      2:
        image: notes/C1_pair_programming_2.png
        text: In pair programming, one person is the driver and the other person is
          the navigator, just like driving a car. The driver sits at the computer
          and is the one using the keyboard and mouse or touchscreen and controlling
          the main actions of the computer. The other person is the navigator. The
          navigator helps the driver by answering the driver's questions and pointing
          out potential problems or mistakes.
      3:
        image: notes/C1_pair_programming_3.png
        text: Communication is key to successful pair programming. No insults, be
          respectful, don't be a bossy navigator, because nobody likes a backseat
          driver. You and your partner should always be talking. The driver can explain
          what she or he is doing. And the navigator can help suggest what to do next.
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver
          focuses on the details. Both roles are important. Pair programming is all
          about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: This lesson is called planting a seed and it's going to help us understand
          algorithms. Algorithms are specific instructions that explain the order
          in which to do something. Even everyday things like eating breakfast or
          brushing your teeth are algorithms that require small steps to get a job
          done.
      2:
        image: notes/C1_planting_seed_2.png
        text: Computers can be really smart but they can only understand you if you
          tell them exactly what you want step by step. The great thing about algorithms
          is that if you follow the instructions in order, you can do something that
          you didn't know how to do ahead of time. It's like following a recipe.
      3:
        image: notes/C1_planting_seed_3.png
        text: Today we're going to plant our own seeds using an algorithm. Create
          your own algorithm by cutting apart the pictures. Select the pictures that
          show steps in planting a seed and arrange those pictures in the correct
          order.
      4:
        image: notes/C1_planting_seed_4.png
        text: Now, it's time for you to see if your algorithm works. Follow the steps
          in the algorithm very carefully. Are they in the correct order? Did you
          succeed in planting a seed by following the algorithm? It's like programming
          with pictures!
      5:
        image: notes/C1_planting_seed_5.png
        text: When we want to make chocolate, there are many big steps to that process
          and each of those big steps has a set of smaller steps and there are different
          recipes or algorithms depending on how we want the chocolate to taste. Each
          step is important, even the small ones, so that without one step, the rest
          of them cannot be completed. Creating algorithms that others can understand
          is really important. That's why each step has to be written down so that
          no matter who does it, the result is the same.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your
          story will have actors and you will be able to make these actors talk and
          interact with each other. Start thinking of what kind of story you want
          to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: The cat's always been afraid of the dog and what if the cat figures
          out that the dog is trying to be nice? The "when run" block starts everything.
          The "move" block will move your character and the "say" block will make
          your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: This is the "when actors collide" block which you can link up to the
          other blocks.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: I was making the dog come over and say "Hi" but then the cat got scared
          so it ran away. "Ahh" If there was more time, it would have been a happy
          ending. The end!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee.
          As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: See if you can spell the word they give you in the box below the stage.
          But bee careful! Moving the wrong direction will add letters you don't want.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: In this example, your goal is going to be to move the bird to get the
          pig. Now, we're going to be able to use the repeat block in order to be
          able to do this very easily. You can either do this by giving the computer
          a move forward command five times in order to advance the bird one step
          each time to the pig or you can just tell the computer to move forward once,
          and then tell it to repeat that five times and it'll do the same thing.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: In order to do this, you drag your move forward command and then you
          put it inside the repeat block. And you can click on it and tell it how
          many times you  to repeat the block to tell it how many steps you want it
          to take forward.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: One more thing is you can put as many commands as you want inside the
          repeat block. So in this example, you're telling it to move forward and
          turn left, which it'll do five times. Have fun!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C2_artist_intro_2.png
        text: In these puzzles, you'll be an artist that uses a pencil to draw different
          shapes. Wherever your artist goes, it will draw a line behind you.
      3:
        image: notes/C2_artist_intro_3.png
        text: To move around the canvas, you'll use the move forward block. Here the
          move forward block says move forward by 100 pixels. When we hit run, what
          happens? The artist moves forward a certain amount and that amount is 100
          pixels. Pixels are basically very tiny squares on your computer screen.
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees.
          And when we drag that out that makes our artist turn a certain amount. So
          you can play around with how far you want the artist to turn. This is a
          90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values
          by clicking the arrows next to the numbers for pixels and degrees. Enjoy
          drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials
          on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options.
          Sometimes people think of this as only 1s and 0s. But you can represent
          binary with combinations of on or off, up and down, in and out or really
          any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hi, I'm Orion and I program robots here at Play-im. All computer and
          robot brains at their most fundamental level are little electronic gates.
          When the gate is open, electricity can flow through and when it's closed,
          electricity can't.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: An example of binary on the robot is the robot's eyes. The robot's eyes
          are LEDs and those are lights that are either on or off. It's a binary system,
          one or the other. We can use the lights to represent binary numbers. If
          we have a set of robots, we can say that the first robot is the 1s place
          and the second robot is the 2s place, the third robot is the 4s place and
          so on. That's how you represent a binary number. The robots will do it with
          their binary eyes and count it out for you.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions
          based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: I want to walk to the park but first I have to decide whether I should
          bring an umbrella or not. So I look out the window. If it's cloudy, I'm
          going to take my umbrella. Else, I'll take some sunglasses. I think I'd
          better take the umbrella. What I see and hear determines what I take to
          the park.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Conditionals are used in games too. Today we're going to practice using
          conditionals with a card game. In this game, the card that I draw determines
          what my friends are going to do. If I draw a seven, everyone claps. Else,
          everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals.
          Give it a try! Conditionals are what make computers seem smart. A computer
          program that includes conditionals can react to the user and change its
          course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Think about your favorite video game. Do you earn more points for some
          actions than you do for others? This occurs because the computer is using
          conditionals. It's the way a computer makes a decision. How about, if you
          hit the target, you earn ten points. Else, you lose three. When you know
          how conditionals work, you can create all kinds of exciting games.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is
          something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Let's debug this code by slowing down the speed and watching it as it
          goes through each block step by step.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh, there's the problem! The cat's whiskers are 75 pixels long, not
          25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: On your head you hold your hat and your smarts will tell you where you're
          at and to think about the zoo, and to nod hello to you and you! Use your
          head when you're online to keep what's yours inside your mind and to know
          how to be safe, how to give your life some private space! From your head
          down to your toes, pause, think about it. From your feet up to your nose,
          pause and think online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use your heart to grow and grow, and to give yourself a healthy glow,
          and to make a valentine, tell someone that you'll be mine! Use your heart
          when you're online, feel what's right and always kind, and show your friends
          respect, to be fair and nice on the internet. From your head down to your
          toes, pause, think about it. From your feet up to your nose, pause and think
          online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use your arms to hug your pet, to keep your clothes from getting wet,
          and to wear your favorite sleeves and to help you fly and make believe.
          Use your arms when you're online, to take break and balance time and leave
          your tech behind and to find yourself a tree to climb. From your head down
          to your toes, pause, think about it. From your feet up to your nose, pause
          and think online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use your gut to store your food, and to listen to its growling mood,
          to make a belly flop, and to feel the gas in soda pop. Use your gut when
          you're online, to know to watch for certain signs, and to let it guide the
          way and tell you when it's not ok. From your head down to your toes, pause,
          think about it. From your feet up to your nose, pause and think online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: So think with your head, and feel with your heart, balance with your
          arms, listen to your gut, online. Use your legs to run and kick, and to
          jump and bounce on a pogo stick, and to dance around the block, and to skip
          along in your smelly socks. Use your legs when you're online, to stand up
          to bullies who cross the line, and remember to stand tall, be nice to creatures
          great and small.
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet
          up to your nose, pause and think online! So think with your head, and feel
          with your heart, balance with your arms, listen to your gut, stand up with
          your legs. From your head down to your toes, pause, think about it. From
          your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched,
          copied, shared, broadcast and is permanent. What kind of digital footprint
          are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: This lesson is called "Graph Paper Programming" and it's all about algorithms.
          Today we're going to learn how to write programs that show each other how
          to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: An algorithm is a list of instructions for completing a task. We'll
          follow this set of instructions to make the bowl. Algorithms are really
          helpful when you need someone else to understand how to do something.
      3:
        image: notes/C2_graph_paper_3.png
        text: If you're writing an algorithm for a computer, you have to break it
          down to little tiny steps. So finish this row and go to the next, then the
          next one, and you'll be done.
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can
          recreate that same piece again, or I can teach someone else to do it. Put
          the glass in the kiln, fuse it together, follow the rest of the instructions
          to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when
          we are programming our artist. We already have some blocks out on our stage
          but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag
          out the repeat block and put the moveforward and turn right blocks inside
          the repeat block. When we hit run, the artist will repeat those steps four
          times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: A loop is a repetition of activity. Going into a hive to inspect, I
          look at a frame, and then I put it back. I repeat that same activity multiple
          times. It's looping around, doing the same activity multiple times.
      2:
        image: notes/C2_bee_loops_2.png
        text: This is the repeat block. Whatever you put inside the repeat block will
          repeat those actions the number of times that you tell it to. For example,
          in this level, rather than drag out move forward and get nectar three times,
          we're going to just drag them out once each and repeat the action three
          times. That made it easy!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C2_maze_intro_3.png
        text: If I drag the move block to our work space and press "Run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C2_maze_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "Run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: If you ever want to delete a block, just remove it from the stack and
          drag it to the trash can. After you've hit run, you can always hit the reset
          button to get the bird back to the start. Now let's get those pigs!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things
          that people do everyday. Cookie recipes and directions for building a birdhouse
          are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Today we're gonna make, create, and test an algorithm for a paper airplane.
          But first, we need to break this big project into easy to follow small steps.
          For making a paper airplane, we need to decide what steps to take and in
          what order to take them.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: You'll create your algorithm by first cutting apart the pictures. Next,
          you'll select the 6 pictures that show the steps needed to make a paper
          airplane and arrange those pictures in the correct order. After you have
          everything in order, you will trade algorithms with another student team
          to test out the algorithm to see if the algorithm works. A well designed
          algorithm is super important to making the best paper airplane.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: When we want to make chocolate, there are many big steps to that process.
          And each of those big steps has its own set of smaller steps. And there
          are different recipes, or algorithms, depending on how we want the chocolate
          to taste. Each step is important, even the small ones. So without one step,
          the rest of them cannot be completed. Creating algorithms that others can
          understand is really important. That's why each step has to be written down,
          so no matter who does it, the result is the same.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Tähän mennessä olemme tehneet animaation tai tarinan, joka tekee samat
          asiat joka kerta suoritettaessa. Nyt voit tehdä oman vuorovaikutteisen pelin,
          jota voi oikeasti pelata.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Tarjolla on "kun nuoli" ja "liikuta hahmoa" -lohkot. Voit laittaa nämä
          lohkot yhteen ja liikuttaa hahmoja ympäriinsä nuolinäppäimillä.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Today we're going to do relay programming. It's all about programming
          under pressure and debugging the mistakes that sometimes happen when you
          work really quickly or in teams. We'll use graph paper programming to simulate
          coding, and use relay races to simulate having a deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: In relay programming, teams will be racing to finish a graph paper program.
          You have to check your teammate's work, or debug it, fix it if there's a
          mistake, add your arrow, and run back and tag your teammate.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms
          or code. There are lots of ways to debug problems. One of the easiest is
          to move step by step until you find where something goes wrong, then fix
          it.
      4:
        image: notes/C2_relay_programming_4.png
        text: Here, I'm trying to do a back handspring, but I keep falling off. I
          walk through each part, step by step, and realize where my mistake was.
          My coach showed me I wasn't putting my hands on the beam correctly. So I
          tried another back handspring on the beam with my new hand position, and
          I stuck it! I was really glad I debugged my back  handspring. We figured
          it out! Debugging is finding and fixing problems. Nice, good job!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: One thing that computers are really good at is repeating commands. As
          a person, you'd get really bored if you had to do the same thing lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times, and not get bored and be able to carry that out really well.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: So for example if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than a century to actually
          write out all of those emails to everyone. But with just a few lines of
          code, I can have a system send an email to everyone on Facebook wishing
          them a happy birthday. So that's what loops are, and why they're valuable,
          and something that computers can do very well.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: In this example your goal is going to be to move the bird to get the
          pig.  Now we're gonna be able to use the "repeat" block in order to be able
          to do this very easily. You can either do this by giving the computer a
          "move forward" command five times in order to advance the bird one step
          each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Or you can just tell the computer to "move forward" once, and then tell
          it to "repeat" that 5 times, and it will do the same thing. So in order
          to do this you drag your "move forward" command, and then you put it inside
          the "repeat" block.And you can click on it and tell it how many times you
          want to repeat the block to tell it how many steps you want it to take forward.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Now one more thing is you can put as many commands as you want inside
          the "repeat" block. So in this example you're telling it to move forward
          and turn left, which it will do five times. All right good job and have
          fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C3_artist_functions_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square, so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code. It will get done
          for us. We've added that concept to our programming language.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C3_artist_intro_2.png
        text: In these puzzles, you'll be an artist that uses a pencil to draw different
          shapes. Wherever your artist goes, it will draw a line behind you.
      3:
        image: notes/C3_artist_intro_3.png
        text: To move around the canvas, you'll use the move forward block. Here the
          move forward block says move forward by 100 pixels. When we hit run, what
          happens? The artist moves forward a certain amount and that amount is 100
          pixels. Pixels are basically very tiny squares on your computer screen.
      4:
        image: notes/C3_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees.
          And when we drag that out that makes our artist turn a certain amount. So
          you can play around with how far you want the artist to turn. This is a
          90 degree turn.
      5:
        image: notes/C3_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values
          by clicking the arrows next to the numbers for pixels and degrees. Enjoy
          drawing with your artist!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: When you put a loop inside of another loop, we call that a nested loop.
          For example, here we're given the code already to draw one triangle with
          sides of length 100 pixels using the repeat times block set to three, once
          for each side of a triangle.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: But we want to draw six triangles. In order to do that, we're going
          to take that loop and place it inside of another repeat times block. Pretty
          cool!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define
          new commands, how to add your own words to a computer language. Most computer
          languages have only about one hundred words or commands. The art and magic
          is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: We do this all the time in sports. For example, in basketball, you start
          by learning how to dribble, how to do a lay-up, how to rebound. Once you've
          learned these really basic moves, you learn new moves and put together these
          building blocks, like a pick and roll or give and go. You can then go from
          there to do more complex plays. Once you learn that play and give it a name,
          everybody on the team knows how to do it.
      3:
        image: notes/C3_bee_functions_3.png
        text: Similarly once you've taught a computer how to do an action once using
          these sequences of commands, you can make up your own name for that action
          so it's easy to repeat it later. When you define your own command and give
          it a name, that's called a function. Now we're going to use functions to
          help the bee.
      4:
        image: notes/C3_bee_functions_4.png
        text: In this example, our function is called get 2 nectar, this green block
          right here. We know what get 2 nectar does by looking at this grey box which
          is the function definition. If we look inside there, the get 2 nectar is
          going to get nectar and then get nectar again. Always look at what's inside
          the grey box so that you know what these green function blocks can do.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Now we're going to use nested loops with the bee. We're given some starter
          code which tells the bee to move forward and get nectar three times and
          then turn right. Let's take that whole piece of code and nest it inside
          another repeat block and set to repeat three times. Done!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: You're going to be creating your very own bounce game that you'll be
          able to share with your friends! How cool!
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow
          keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: We can do this by linking the when left arrow block to the move left
          block and the when right arrow block to the move right block. Give it a
          go and you'll be programming your own bounce game in no time!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: This lesson is computational thinking. Sometimes learning a new game
          can be tough, right? At first it might seem really confusing and sometimes,
          there's no one there to teach you the rules, so you have to figure it out
          on your own.
      2:
        image: notes/C3_computational_thinking_2.png
        text: The good news is that you can get better at figuring things out on your
          own when you know a few thinking tricks. These tricks are unique ways for
          looking at and solving problems. In this lesson, you'll learn about four
          tricks and practice them with your friends to figure out the rules to a
          game.
      3:
        image: notes/C3_computational_thinking_3.png
        text: When you break down a big problem into smaller pieces, you're using
          your brain to decompose the big problem. Once we've decomposed the big problem
          into several smaller problems, we can go on to our next trick, which is
          called pattern match.
      4:
        image: notes/C3_computational_thinking_4.png
        text: That's when we look for similarities between things. Once I find the
          things that are the same, I can figure out what things are different. When
          I remove those differences, that's called abstraction.
      5:
        image: notes/C3_computational_thinking_5.png
        text: After I have figured out the steps to solving a problem, I can put those
          steps in a specific order called an algorithm so that anyone can use my
          directions to solve that problem. We're going to use these four steps to
          figure out how to play the game with no rules. By the end of the game, you'll
          be able to play something that looks like this!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: This lesson is called crowdsourcing. In this lesson we'll use a deck
          of cards to learn about how much easier some things can be to do in groups
          instead of trying to do them all alone. So grab some friends and make something
          awesome. Crowdsourcing is getting help from a large group of people to finish
          something faster.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: When you see a movie, each second of the movie is 24 individual pictures,
          we call those frames. So every one of those pictures needs to be created
          and rendered and put all together. My team and I, we're all software developers.
          We all work together to create a piece of software that actually creates
          an image, creates the final image that you see on screen. That's a tool
          that artists and other developers can use as part of their teamwork and
          their process to be able to create the images that they want on screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: While loops are pretty similar to what you do in everyday life. Imagine
          you are washing your car, you'll keep scrubbing until it's clean. While
          it's not clean, continue to scrub. You're evaluating these things all the
          time.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: Unlike the Postal Service, the first thing that happens is that the
          internet breaks the message into smaller parts so it can be sent more easily.
          These small parts are called packets. Each packet of the message is delivered
          to the destination one at a time. These packets are all put together in
          the right order so that the receiver can read the message correctly. Of
          course, there are many more things to learn about how the internet works
          but this is a great start. You're on your way to becoming a savvy internet
          user! Be sure to tell your family and friends what you've learned!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: The if block helps the zombie make a decision. It checks something.
          For example, let's use the block that says if there's a path to the left,
          and put a turn left command inside it. We're telling the zombie to check
          its surroundings, see if there's a path on the left and if so, make that
          turn.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Then we use the move forward block inside this repeat to get it to keep
          moving forward as long as it just wants to go straight. Then when there's
          a turn, the if block will tell it to make that turn to the left. You can
          see that if we do that, if we take the turn to the left and otherwise moving
          forward, we'll achieve our goal.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: It's an example of using an if statement which is really a fundamental
          concept in computer programming. One of the first things I learned was how
          to write a program that played tic-tac-toe. I had if statements to say,
          ok, if the other person is about to win, go ahead and block that spot. Have
          fun learning how to use if statements, it's a key concept.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could
          use five move forward blocks or we could tell the computer to move forward
          and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move
          forward block inside the repeat block. Hit run and the zombie will move
          forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Tähän mennessä olemme tehneet animaation tai tarinan, joka tekee samat
          asiat joka kerta suoritettaessa. Nyt voit tehdä oman vuorovaikutteisen pelin,
          jota voi oikeasti pelata.
      2:
        image: notes/playlab_2.png
        text: Tarjolla on "kun nuoli" ja "liikuta hahmoa" -lohkot. Voit laittaa nämä
          lohkot yhteen ja liikuttaa hahmoja ympäriinsä nuolinäppäimillä.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program.
          The written notes and words tell the singer exactly what to do. Some parts
          of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program
          that are used over and over again are called functions. When you read song
          lyrics and it says the word chorus, do you sing the word chorus? No, you
          look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: In this lesson, you'll learn a silly little song called little bunny
          foo foo. The song has a chorus that you will sing several times over and
          over again. A function is a piece of code that you can call and use over
          and over again. It makes programming easier and more efficient so you don't
          have to write out the steps of your function over and over again. You can
          just write it once!
