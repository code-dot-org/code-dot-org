{
  "pl-PL": {
    "data": {
      "reference_guides": {
        "csd-2022/accelerometer-events": {
          "display_name": "Akcelerometr Zdarzeń"
        },
        "csd-2022/ai-lab": {
          "display_name": "AI Lab"
        },
        "csd-2022/animation-tab": {
          "display_name": "Karta Animacja"
        },
        "csd-2022/app-lab": {
          "display_name": "App Lab",
          "content": "App Lab to narzędzie zbudowane z [JavaScript][0], które może być używane do tworzenia aplikacji. Więcej informacji na temat poleceń w aplikacji App Lab znajduje się w [Dokumentacja App Lab][1]."
        },
        "csd-2022/applab-overview": {
          "display_name": "Streszczenie",
          "content": "App Lab to narzędzie zbudowane z [JavaScript][0], które może być używane do tworzenia aplikacji. Więcej informacji na temat poleceń w aplikacji App Lab znajduje się w [Dokumentacja App Lab][1]."
        },
        "csd-2022/arrays": {
          "display_name": "Tablice"
        },
        "csd-2022/board-events": {
          "display_name": "Zdarzenia na tablicy"
        },
        "csd-2022/checking-multiple-conditions-with-if-else-if": {
          "display_name": "Sprawdzanie wielu warunków za pomocą If-Else-If (jeśli ... w przeciwnym razie ... jeśli)"
        },
        "csd-2022/circuit-playground": {
          "display_name": "Omówienie placu zabaw"
        },
        "csd-2022/circuit-playground-parent": {
          "display_name": "Adafruit Circuit plac zabaw",
          "content": "Te zasoby odnoszą się konkretnie do funkcji [Circuit Playground][0]."
        },
        "csd-2022/classes": {
          "display_name": "Klasy"
        },
        "csd-2022/collision-detection": {
          "display_name": "Wykrywanie kolizji"
        },
        "csd-2022/css": {
          "display_name": "CSS"
        },
        "csd-2022/css-overview": {
          "display_name": "Streszczenie"
        },
        "csd-2022/data-and-change-events": {
          "display_name": "Zdarzenia danych i zmian"
        },
        "csd-2022/debugging-html": {
          "display_name": "Debugowanie w HTML",
          "content": "## Debugowanie w HTML\n\n\\*\\* Co to jest błąd? \\*\\*\n\nBłędy to pomyłki w kodzie, które powodują, że nie działa on zgodnie z planem.\n\n\\*\\* Co to jest debugowanie? \\*\\*\n\nDebugowanie to proces znajdowania i naprawiania błędów. Debugowanie jest procesem rozwiązywania problemów, więc użyj kroków rozwiązywania problemów podczas próby debugowania.\n\n\\*\\*Jakie są przykłady błędów? \\*\\* \n\nBłędem może być wszystko, co powoduje, że kod nie działa zgodnie z planem. Niektóre przykłady to błędna pisownia, umieszczenie kodu w niewłaściwym miejscu, użycie niewłaściwego tagu, lub zapominanie o zamknięciu tagu."
        },
        "csd-2022/debugging-variable-scope-functions": {
          "display_name": "Zakres debugowania zmiennej: Funkcje"
        },
        "csd-2022/design-mode": {
          "display_name": "Tryb projektowania"
        },
        "csd-2022/for-loops": {
          "display_name": "Pętle dla (for)"
        },
        "csd-2022/formatting-html": {
          "display_name": "Formatowanie HTML"
        },
        "csd-2022/functions": {
          "display_name": "Funkcje"
        },
        "csd-2022/game-lab": {
          "display_name": "Laboratorium Gier (Game Lab)"
        },
        "csd-2022/game-lab-overview": {
          "display_name": "Streszczenie"
        },
        "csd-2022/headings-and-paragraphs": {
          "display_name": "Nagłówki i akapity"
        },
        "csd-2022/html": {
          "display_name": "HTML",
          "content": "HTML (Hypertext Markup Language) to język używany do definiowania zawartości stron internetowych. Więcej informacji na temat tagów i atrybutów HTML można znaleźć na stronie [Dokumentacja Web Lab][0]."
        },
        "csd-2022/html-overview": {
          "display_name": "Streszczenie",
          "content": "HTML (Hypertext Markup Language) to język używany do definiowania zawartości stron internetowych. Więcej informacji na temat tagów i atrybutów HTML można znaleźć na stronie [Dokumentacja Web Lab][0]."
        },
        "csd-2022/html-tags": {
          "display_name": "Tagi HTML"
        },
        "csd-2022/hyperlinks": {
          "display_name": "Odnośniki"
        },
        "csd-2022/images-in-html": {
          "display_name": "Obrazy w HTML"
        },
        "csd-2022/introduction-to-ai-lab": {
          "display_name": "Wprowadzenie do AI Lab"
        },
        "csd-2022/javascript": {
          "display_name": "JavaScript"
        },
        "csd-2022/javascript-overview": {
          "display_name": "Streszczenie"
        },
        "csd-2022/lists": {
          "display_name": "Listy",
          "content": "W HTML-u są dwa rodzaje list, uporządkowane i nieuporządkowane.\n\n## Listy uporządkowane\n\nUporządkowana lista to zbiór numerowanych pozycji.\n\n<table border=\"1\" style=\"float:right; margin-left: 20px;\">\n<tr>\n<td>Przykład</td>\n<td>Wynik</td>\n</tr>\n<tr>\n<td>\n<pre>\n&lt;ol&gt;\n    &lt;li&gt;Krok 1 &lt;/li&gt;\n    &lt;li&gt;Krok 2 &lt;/li&gt;\n    &lt;li&gt;Krok 3 &lt;/li&gt;\n&lt;/ol&gt;\n</pre></td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04 PM.png\" style=\"width:150px\"></td>\n</tr>\n</table>\n\nLista uporządkowana ma znacznik '<ol>'. Jest to skrót od <strong>O</strong>rdered <strong>L</strong>ist. Każda pozycja na tej liście jest oznaczona elementem pozycji listy '<li>'. Jest to skrót od <strong>L</strong>ist <strong>I</strong>tem. Element listy jest elementem podrzędnym w stosunku do elementu nadrzędnego, uporządkowanej listy (`<ol>`).\n\nUtworzenie uporządkowanej listy składa się z dwóch kroków: utworzenia listy i dodawania elementów listy. Aby utworzyć uporządkowaną listę, wpisz tagi listy uporządkowanej `<ol> </ol>`, a następnie dodawaj elementy listy **wewnątrz** tagów listy uporządkowanej. Aby utworzyć element takiej listy, użyj tagów elementu listy `<li> </li>` i umieść element tej listy wewnątrz tych tagów.\n\nPrzydatne może być wcięcie znaczników '<li>', aby było jasne, że są one zawarte w znaczniku '<ol>'.\n\n## Listy nieuporządkowane\n\nLista nieuporządkowana to zbiór elementów punktowanych.\n\n<table border=\"1\" style=\"float: right; margin-left: 20px;\">\n<tr>\n<td>Przykład</td>\n<td>Wynik</td>\n</tr>\n<tr>\n<td>\n<pre>\n&lt;ul&gt;\n    &lt;li&gt;Czerwony &lt;/li&gt;\n    &lt;li&gt;Zielony &lt;/li&gt;\n    &lt;li&gt;Niebieski&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png\" style=\"width:150px\"></td>\n</tr>\n</table>\n\nLista nieuporządkowana ma znacznik `<ul>'. Jest to skrót od <strong>U</strong>nordered <strong>L</strong>ist. Każda pozycja na tej liście jest oznaczona elementem pozycji '<li>'. Jest to skrót od <strong>L</strong>ist <strong>I</strong>tem. Element listy jest elementem podrzędnymw stosunku do elementu nadrzędnego, nieuporządkowanej listy (`<ul>\\`).\n\nUtworzenie nieuporządkowanej listy składa się z dwóch kroków: utworzenia listy i dodawania elementów listy. Aby utworzyć listę nieuporządkowaną, wpisz tagi listy nieuporządkowane `<ul> </ul>`, a następnie dodawaj elementy listy **wewnątrz**  tagów listy nieuporządkowanej. Aby utworzyć element takiej listy, użyj tagów elementów listy `<li> </li>` i umieść element tej listy wewnątrz tych tagów.\n\nPomocne może być wcięcie znaczników `</li>`, aby było jasne, że są one zawarte w znaczniku `<ul>`.\n\n## Dodatkowe informacje o strukturze\n\n<img src=\"https://images.code.org/d9b5053f9b13286dad2714f6416c0a09-image-1664558778316.jpg\" style=\"width:500px\">\n\n## Lista zawartość pozycji\n\n<img src=\"https://images.code.org/a00a4377aa5b6688e8b0f554008e6210-image-1664558975676.jpg\" style=\"width:500px \">\n\n**W3 Linki szkolne**\n\n-   [\\<li>][0]\n-   [\\<ul>][1]\n-   [\\<ol>][2]"
        },
        "csd-2022/maker-toolkit": {
          "display_name": "Przybornik konstruktora"
        },
        "csd-2022/maker-toolkit-overview": {
          "display_name": "Streszczenie"
        },
        "csd-2022/microbit-circuits-buttons": {
          "display_name": "Przyciski zewnętrzne na micro:bicie",
          "content": "<img src=\"https://images.code.org/766895a5debf8fcb1e2552ff47f94c18-Micro_bit Circuits and LEDs.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\nNa dolnej krawędzi micro:bita znajduje się 5 złotych pasków zwanych pinami. Umożliwiają one tworzenie obwodów lub podłączanie zewnętrznych elementów, takich jak diody LED lub przyciski.\n\n-   **Pinami wejścia/wyjścia** micro:bita są „0”, „1” i „2”. Umożliwiają one podłączenie diod LED lub przycisków. \n-   **Pin „3V”** to 3-woltowy pin zasilania, którego można użyć do zasilania zewnętrznych diod LED i innej elektroniki.\n-   **Pin GND** jest pinem uziemienia. Służy do uzupełniania obwodów elektrycznych po podłączeniu do micro:bita słuchawek, diod LED lub zewnętrznych przełączników. \n\n<div style=\"clear: both;\" ></div>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png\" alt=\"Button Up and Down\" style=\"width:250px; float: right; margin: 0 20px;\">\n\nAby utworzyć przycisk lub przełącznik, potrzebujesz tylko obwodu, który można łatwo łączyć i rozłączać. Obwód przycisku można utworzyć, podłączając jeden przewód do styku danych, a drugi przewód do styku uziemienia.\n\nAby „zamknąć” obwód (co jest jak naciśnięcie przycisku), łączysz dwa przewody, dotykając ich ze sobą lub łącząc je z elementem sprzętowym (takim jak przycisk lub przełącznik), który może być używany do otwierania i zamykania obwód.\n\nPrzycisk „otwarty” jest równoważny zdarzeniu przycisk „w górę”, a obwód „zamknięty” jest jak zdarzenie przycisk „w dół”.\n\nAn \"open\" button is equivalent to the button \"up\" event, while a \"closed\" circuit is like the button \"down\" event.\n\n## Tworzenie obwodu przycisku\n\nAby utworzyć obwód przycisku, potrzebujesz pinu danych, dwóch przewodów i pinu uziemienia.\n\n1.  Podłącz jeden przewód do ponumerowanego pinu danych.\n2.  Podłącz drugi przewód do pinu uziemienia.\n3.  Użyj jednego z następujących bloków w swoim kodzie:\n    -   [`pinMode()`(#4dd0e1)][0] informuje micro:bit, że chcesz użyć jednego z zewnętrznych padów jako wejścia lub wyjścia. „Pin” to ogólne określenie padów na micro:bicie, i piny mogą wyglądać inaczej na innych urządzeniach.\n    -   [`digitalWrite()`(#4dd0e1)][1] informuje micro:bit, aby zaczął lub zaprzestał wysyłania prądu do urządzenia podłączonego do tego pinu. 1 oznacza „włączony”, a 0 oznacza „wyłączony”\n    -   blok [`createButton()`(#4dd0e1)][2] pozwala Ci przypisać zewnętrzny przycisk do zmiennej\n    -   blok [`onBoardEvent()`(#f78183)][3] używa tej samej nazwy zmiennej do reagowania na dane wejściowe"
        },
        "csd-2022/microbit-circuits-leds": {
          "display_name": "Zewnętrzne diody LED na micro:bicie",
          "content": "<img src=\"https://images.code.org/766895a5debf8fcb1e2552ff47f94c18-Micro_bit Circuits and LEDs.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\nNa dolnej krawędzi micro:bita znajduje się 5 złotych pasków zwanych pinami. Umożliwiają one tworzenie obwodów lub podłączanie zewnętrznych elementów, takich jak diody LED lub przyciski.\n\n-   **Pinami wejścia/wyjścia** micro:bita są „0”, „1” i „2”. Umożliwiają one podłączenie diod LED lub przycisków. \n-   **Pin „3V”** to 3-woltowy pin zasilania, którego można użyć do zasilania zewnętrznych diod LED i innej elektroniki.\n-   **Pin GND** jest pinem uziemienia. Służy do uzupełniania obwodów elektrycznych po podłączeniu do micro:bita słuchawek, diod LED lub zewnętrznych przełączników. \n\nUżywając ponumerowanych pinów micro:bita, możesz tworzyć własne obwody, które zawierają elementy zewnętrzne, takie jak diody LED i przyciski. To, jak obwód jest okablowany, zależy od konkretnego sprzętu, który starasz się dodać, ale wszystkie obwody będą używać kombinacji 3-woltowego pinu zasilania (który zapewnia zasilanie), pin uziemienia (który jest punktem końcowym obwodu) i ponumerowane piny danych (które mogą wysyłać sygnały wyjściowe lub odbierać sygnały wejściowe). \n\n<div style=\"clear:both;\"></div>\n\n<img src=\"https://images.code.org/be63617cd479aabe4351a8d07abe1d00-microbit-led.png\" style=\"width: 300px; float: right; margin: 10px\" />\n\n## Tworzenie obwodów LED\n\nJednym z najprostszych obwodów, które można wykonać za pomocą mikro:bita, jest dodanie diody LED. Do utworzenia takigo obwodu potrzebujesz ponumerowanego pinu, dwa przewody, diodę LED i pin uziemienia.\n\n1.  Upewnij się, że micro:bit jest odłączony od komputera. Pomaga to upewnić się, że nie ma przypadkowej elektryczności, która mogłaby uszkodzić płytkę.\n2.  Przymocuj przewód tak, aby jeden koniec był podłączony do pinu 0 na mikro:bicie, a drugi koniec jest podłączony do dodatniego końca diody LED\n3.  Podłącz przewód, aby jeden koniec był podłączony do pinu GND na micro:bicie, a drugi koniec jest podłączony do ujemnego końca diody LED\n\n<div style=\"clear:both;\"></div>\n\n## Debugowanie LED\n\nDiody LED są dość proste w użyciu, ale jest kilka sztuczek, o których należy pamiętać. Musisz zwrócić uwagę na to, w którym kierunku płynie prąd, ponieważ diody LED działają tylko w jednym kierunku. Zawsze podłącz dodatnią stronę diody LED do źródła zasilania, a ujemną stronę - do masy."
        },
        "csd-2022/microbit-display": {
          "display_name": "Wyświetlacz LED micro:bita",
          "content": "<img src=\"https://images.code.org/126cab46e3188fc496d4c618e8cfee03-image-1676328086265.png\" style=\"width: 300px; float: right; margin: 10px\" />\n\nDioda LED jest prawdopodobnie najprostszą formą wyjścia, a micro:bit ma wyświetlacz złożony z 25 czerwonych diod LED, które możesz programować. Diody te są umieszczone w kwadracie 5x5, umożliwiając wyświetlanie wzorów, obrazów, liter lub cyfr.\n\n<div style=\"clear:both;\"></div>\n\n`ledScreen` może ci pomóc...\n\n<table>\n  <tr>\n    <td><img src=\"https://images.code.org/77c51c63b972d81ad9defdbd5f2d1769-mb1.png\" style=\"width: 210px\" /></td>\n    <td>Wyraź, jak się czujesz!</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://images.code.org/f416ae03dbad5755997196ac09b2f8b1-mb2.gif\" style=\"width: 210px\" /></td>\n    <td>Utworzyć obrazy zwierząt!</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://images.code.org/f5b22c147aeefd7c49908fd352c3fd89-mb3.gif\" style=\"width: 210px\" /></td>\n    <td>Utworzyć plakietkę z imieniem!</td>\n  </tr>\n</table>\n\n## Przydatne polecenia odnoszce się do wyświetlacza LED\n\n-   [`ledScreen.on () `(#f78183)][0]\n-   [`ledScreen.off ()` (#f78183)][1]\n-   [`ledScreen.toggle () `(#f78183)][2]\n-   [`ledScreen.clear () `(#f78183)][3]\n-   [`ledScreen.display ()` (#f78183)][4]\n-   [`ledScreen.scrollString () `(#f78183)][5]\n-   [`ledScreen.scrollNumber ()` (#f78183)][6]"
        },
        "csd-2022/microbit-overview": {
          "display_name": "Przegląd micro:bita",
          "content": "BBC micro:bit to kieszonkowy komputer, który przybliży Ci, jak oprogramowanie i sprzęt współpracują ze sobą. Zanim jednak bliżej go poznasz, zacznijmy od podstaw. Dalej, micro:bit często nazywamy płytką (board). \n\n## Wyświetlacz diod emitujących światło (LED)\n\nGdy komputer ma przekazywać tylko proste informacje, często migające światło jest najszybszym i najłatwiejszym sposobem by to zrobić. Diody LED lub diody elektroluminescencyjne to małe, o małej mocy i łatwe w użyciu urządzenia do komunikacji za pomoc światła. Spójrz na obraz micro:bita po prawej stronie.\n\n<img src=\"https://images.code.org/211f377fb4e4c1addb2cc33d53bca6f6-Micro_bit Overview.png\" style=\"width: 400px; float: right;\" />\n\n1.  **Złącze USB** umożliwia podłączenie micro:bita. Podłączenie go pozwala komunikować się z tą płytką w App Lab, dostarcza również energię elektryczną do płytki, dzięki czemu może wykonywać takie czynności, jak włączanie wyświetlacza LED.\n2.  \\*\\* Pojedyncza żółta dioda LED\\*\\* nie może być kontrolowana za pomocą kodu, ale informuje, czy płytka jest podłączona. Jeśli ta dioda LED jest wyłączona, nie oczekuj, że Twoja płytka zadziała. Ta dioda LED miga podczas pobierania programu do micro:bita.\n3.  **Przycisk resetowanie** umożliwia ponowne uruchamianie programów na micro:bicie.\n4.  **Gniazdo baterii** umożliwia zasilanie micro:bita z pakietu baterii zamiast z komputera. Jest to bardzo przydatne, jeśli chcesz zabrać micro:bit na zewnątrz, nosić go lub grać z nim w gry. Płytka może działać przez długi czas przy użyciu zaledwie dwóch baterii AAA. \n\n## Podłącz\n\nPodłącz płytkę do komputera za pomocą kabla USB i zauważ, jak reaguje pojedyncza żółta dioda LED i jak reaguje wyświetlacz LED. W jaki sposób możesz używać wyświetlacza LED do przekazywania użytkownikowi przydatnych informacji?"
        },
        "csd-2022/microbit-parent": {
          "display_name": "BBC micro:bit",
          "content": "Te zasoby odnoszą się konkretnie do funkcji [BBC micro:bit][0]"
        },
        "csd-2022/microbit-physical-input": {
          "display_name": "Wejście fizyczne micro:bita ",
          "content": "<img src=\"https://images.code.org/3d9ce06038db75ad3ae8a7b03259a048-Micro_bit Physical Input.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\n## Identyfikacja wejść\n\n1.  Przyciski A (po lewej) i B (po prawej) są dostępne w kodzie odpowiednio jako `buttonA` i `buttonB`. Te przyciski są nie różnią się między sobą poza lokalizacją na planszy. \n2.  **Przycisku Resetowania** nie możesz użyć w swoim programie. Naciśnięcie tego przycisku powoduje zresetowanie micro:bita, unikaj więc naciskania go podczas działania programu. Jest on jednak przydatny, jeśli Twoja płytka nie działa tak, jak powinna.\n\n## Zdarzenia i typy zdarzeń\n\n| Typ zdarzenia                                             | Opis                                                           |\n| --------------------------------------------------------- | -------------------------------------------------------------- |\n| `down` Wyzwala się, gdy przycisk jest naciśnięty do dołu. |                                                                |\n| `up`                                                      | Wyzwala się, gdy przycisk wyskakuje z powrotem po naciśnięciu. |\n\n## Stany przycisków\n\nOba przyciski i przełącznik mają tylko dwa stany. Przyciski są zwykle wyłączone (false) i włączają się (true) po naciśnięciu. Możesz sprawdzić, czy przycisk jest naciskany za pomocą [`Buttonl.isPressed` (#f78183)][0]."
        },
        "csd-2022/microbit-sensors": {
          "display_name": "Czujniki micro:bita",
          "content": "Micro:bit ma dwa podstawowe czujniki, z których każdy pobiera dane i konwertuje je na wartość, która może być wykorzystana przez komputer.\n\n<img src=\"https://images.code.org/48dea3f6d0c5933eb639fbcb1292d51f-Micro_bit Sensors.png\" style=\"width: 500px; display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px\" />\n\n1.  [`LightSensor` (#f78183)][0] mierzy, jak jest jasno lub ciemno. Kiedy jest bardzo ciemno, [`LightSensor.value` (#f78183)][1] wynosi 0, a gdy jest bardzo jasno, wartość wynosi 255. \n2.  [`TempSensor` (#f78183)][2] mierzy temperaturę i pokazuje ją w stopniach Fahrenheita ([`TempSensor` (#f78183)][3]) lub stopniach Celsjusza ([`TempSensor.c` (#f78183)][4]). \n\n## Odczyt danych czujnika\n\nAby odczytać dane z czujników dźwięku i światła, możesz użyć właściwości „value” (jak [`LightSensor.value` (#f78183)][5]). Jeśli zakres 0-255 nie jest tym, czego potrzebujesz, możesz zmienić zakres za pomocą metody setScale(). Na przykład [`LightSensor.setScale (-50, 50) `(#f78183)][6] powoduje, że czujnik światła będzie pokazywał wartości między -50 a 50. Czujnik temperatury pokazuje temperaturę w łatwy do zrozumienia sposób.\n\n## Czułość czujnika\n\nCzujniki nie są idealne i mogą dawać nieco inne odczyty na różnych płytkach. Jeśli potrzebujesz, aby Twój program działał dobrze z różnymi płytkami, możesz napisać kod, który pozwala dostosować czujniki. Jeśli aplikacja uruchamia kod, gdy odczyt czujnika przekracza określoną wartość, ustaw tę wartość jako zmienną, którą użytkownik może zmienić. W ten sposób użytkownik może zmienić zmienną, aby aplikacja działała najlepiej z jego płytką."
        },
        "csd-2022/model-cards-in-ai-lab": {
          "display_name": "Karty modeli w AI Lab"
        },
        "csd-2022/multi-frame-animations": {
          "display_name": "Animacje wieloklatkowe"
        },
        "csd-2022/multi-screen-apps": {
          "display_name": "Aplikacje wieloekranowe"
        },
        "csd-2022/other": {
          "display_name": "Inni/inne"
        },
        "csd-2022/other-overview": {
          "display_name": "Streszczenie"
        },
        "csd-2022/patterns": {
          "display_name": "Wzorce"
        },
        "csd-2022/patterns-2": {
          "display_name": "Wzorce",
          "content": "Przydatne wzorce programowania"
        },
        "csd-2022/patterns-overview": {
          "display_name": "Streszczenie"
        },
        "csd-2022/playing-notes": {
          "display_name": "Granie z nut"
        },
        "csd-2022/problem-solving-process": {
          "display_name": "Proces rozwiązywania problemów"
        },
        "csd-2022/problem-solving-process-design": {
          "display_name": "Proces rozwiązywania problemów z projektowaniem"
        },
        "csd-2022/problem-solving-process-general": {
          "display_name": "Proces rozwiązywania problemów"
        },
        "csd-2022/problem-solving-process-programming": {
          "display_name": "Proces rozwiązywania problemów z programowaniem"
        },
        "csd-2022/random-list-access": {
          "display_name": "Losowy wzór dostępu do listy"
        },
        "csd-2022/random-numbers": {
          "display_name": "Losowe liczby"
        },
        "csd-2022/saving-and-uploading-csv-files": {
          "display_name": "Zapisywanie i przesyłanie plików CSV",
          "content": "## Video\n\n(Otwiera YouTube w nowej karcie)\n\n[undefined][0]"
        },
        "csd-2022/sprite-properties": {
          "display_name": "Właściwości duszka"
        },
        "csd-2022/sprites": {
          "display_name": "Duszki"
        },
        "csd-2022/update-screen-pattern": {
          "display_name": "Wzorzec updateScreen()"
        },
        "csd-2022/variable-with-string-concatenation-pattern": {
          "display_name": "Zmienna ze wzorem konkatenacji łańcuchów"
        },
        "csd-2022/variables": {
          "display_name": "Zmienne"
        },
        "csd-2022/velocity": {
          "display_name": "Prędkość"
        },
        "csd-2022/web-lab": {
          "display_name": "Web Lab",
          "content": "# Web Lab\n\nAby pomóc Ci odnieść sukces podczas korzystania z naszego narzędzia, znajdziesz kilka typowych pytań użytkowników z Web Lab.\n\n## Informacje ogólne\n\n### Organizacja plików\n\nZauważysz, że pliki są oznaczone kolorami według ich typu i mają nowe ikony. Mamy nadzieję, że ułatwia to szybkie rozróżnienie między plikiem CSS, plikiem HTML lub obrazem.\n\n<img src=\"https://images.code.org/64255c7e081f479a042e9e23e5bb1cf2-fileOrg.png\" style=\"width:100px\">\n\n### Code Selector\n\nDodając kolory w pliku CSS, zauważysz fioletową ikonę, która pojawia się po kliknięciu nazwy koloru. Ta ikona otwiera widżet wyboru kolorów, który ułatwia wybieranie nowych kolorów dla Twojej witryny. Zobacz to w akcji poniżej!\n\n<img src=\"https://images.code.org/c54abfd05f80fee79cfd9489bd1bcb59-filter.gif\" style=\"width:400px\">\n\n### Metadane obrazu i filtry\n\nPo przesłaniu obrazu można wyświetlić dodatkowe informacje o obrazie, takie jak jego wymiary, kod początkowy do użycia obrazu w projekcie oraz widoczne kolory, które pojawiają się na obrazie. Istnieje również fajna funkcja, aby zastosować filtry do obrazu bezpośrednio w Web Lab. Zobacz te w akcji poniżej!\n\n<img src=\"https://images.code.org/0aae6fadac85f866dbf88c7beca6f541-Image.gif\" style=\"width:400px\">\n\n### Project Size Limits\n\nWeb Lab ma teraz ograniczenie, jak duże mog być projekty - co najwyżej 20mb. Możesz śledzić, jak duże są Twoje projekty, korzystając z miernika postępu u góry każdego projektu. Większość projektów pozostanie poniżej tego ograniczenia, chyba że używasz wielu obrazów. Jeśli tak, możesz użyć zewnętrznego programu do hostowania obrazów.\n\n<img src=\"https://images.code.org/8e88dc0ed5bdab512f7a02a39c7ac7cf-projectSize.png\" style=\"width:200px\">\n\n## FAQ\n\n1.  \\*\\*Dlaczego HTML wydaje się działać, nawet gdy jest uszkodzony? \\*\\*\n    -   HTML jest odczytywany przez przeglądarkę internetową w celu generowania stron internetowych. Ponieważ ludzie często popełniają małe błędy podczas pisania swoich stron internetowych, przeglądarki są zaprogramowane tak, aby „najlepiej zgadywać”, co zamierzałeś zrobić. Czasami różne przeglądarki są nawet zaprogramowane do różnych domysłów! Jedynym sposobem, aby upewnić się, że Twój kod wygląda tak, jak zamierzasz, jest upewnienie się, że zawsze używasz tagów poprawnie.\n2.  \\*\\*Dlaczego kod czasami zmienia kolor na różowy? \\*\\*\n    -   Web Lab jest zaprogramowany do automatycznego wykrywania niektórych błędów w HTML. Kiedy zauważy błąd, zmienia ten kod na różowy. Błąd może być w kolorze różowym, lub może być gdzieś przed różowym kodem. Musisz dokładnie debugować, aby znaleźć swój błąd.\n3.  \\*\\*Jak przełączać się między plikami? \\*\\*\n    -   Kliknij nazwę pliku, który chcesz obejrzeć w menu po lewej stronie ekranu.\n4.  \\*\\*Jak zmienić nazwę pliku? \\*\\*\n    -   Aby zmienić nazwę pliku, możesz kliknąć nazwę pliku prawym przyciskiem myszy (lub kliknąć klawisz Control) i wybrać opcję „Zmień nazwę”. Umożliwi to wpisanie nowej nazwy pliku. Kliknięcie nazwy pliku po jego podświetleniu umożliwi również zmianę nazwy pliku."
        },
        "csd-2022/when-to-make-a-function": {
          "display_name": "Kiedy utworzyć funkcję?",
          "content": "Ważnym pytaniem dla nowych programistów jest „Kiedy powinienem zdecydować się na funkcję”. Ogólnie rzecz biorąc, im wcześniej zdasz sobie sprawę, że potrzebujesz funkcji, tym lepiej. To umiejętność, w której będziesz lepiej ćwiczyć. **Pod koniec tego kursu powinieneś dążyć do znalezienia się w rzędach W trakcie lub Przed.**\n\n| Kiedy tworzysz funkcje | Opis                                                                                                                                                                                   | Komentarze                                                                                                                                                                                                                                                                                           |\n| :--------------------: | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|          Nigdy         | Nigdy nie tworzysz funkcji w ogóle.                                                                                                                                                    | Twój kod będzie trudny do odczytania i debugowania i będzie miał dużo powtarzającego się kodu. Postaraj się przejść przynajmniej do kroku „Po”.                                                                                                                                                      |\n|           Po           | Piszesz cały program bez funkcji. Gdy skończysz, szukasz powtarzającego się fragmentu kodu i przenosisz go do funkcji.                                                                 | Twój kod jest teraz znacznie łatwiejszy do odczytania i debugowania. Coraz lepiej widzisz, jak zorganizowany jest Twój program. Gdy poczujesz się bardziej komfortowo, spróbuj przejść do „Podczas” lub „Przed”.                                                                                     |\n|         Podczas        | Pisząc kod zauważasz, że masz zamiar przepisać kod, który już napisałeś gdzieś indziej w swoim programie. Przed przejściem dalej, deklarujesz funkcję i wywołujesz tę funkcję zamiast. | Dobrze rozumiesz swój program i potrafisz go uporządkować w trakcie jego opracowywania. Sprawdź, czy czasami możesz przejść do „Przed”.                                                                                                                                                              |\n|          Przed         | Zanim napiszesz swój program, tworzysz plan i identyfikujesz miejsca, w których prawdopodobnie użyjesz powtarzającego się kodu. Tworzysz swoją funkcję na początku                     | Ten poziom odzwierciedla silne zrozumienie, w jaki sposób Twój program zostanie zaprojektowany. Możesz prawie „zobaczyć to w swojej głowie”, zanim zaczniesz pisać. To znaczy, jest OK, jeśli czasami zdasz sobie sprawę, że potrzebujesz funkcji podczas programowania i pracy na etapie „Podczas”. |"
        },
        "csd-2022/which-type-of-chart": {
          "display_name": "Jaki typ wykresu?",
          "content": "![](https://images.code.org/e5a08f29a9c4e306de5553dafca9fb5d-image-1467913845542.gif)"
        }
      }
    }
  }
}