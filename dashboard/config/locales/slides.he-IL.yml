---
he:
  slides:
    maze_intro:
      1:
        text: ברוכים הבאים אל שעת הקוד הראשונה שלכם! בואו נצלול אל תוך הטעימה הראשונה
          שלכם בתכנות.
      2:
        text: אנחנו נשתמש בבלוקלי, שפת תכנות חזותית בה קוד נכתב על ידי גרירה ושחרור
          של בלוקים.
      3:
        text: רוב תוכניות המחשב נכתבות, אבל בלוקלי הינה שפה חזותית. כל בלוק מקביל
          לשורת קוד "אמיתית" אחת.
      4:
        text: כאן תלמד את יסודות מדעי המחשב, מושגים אשר משמשים בכל מקום מיצירת אפליקציות
          ועד שליטה על רכב החלל במאדים.
      5:
        text: תוכנית היא אוסף של הוראות אשר על המחשב שלך לבצע.
      6:
        text: המטרה של התוכנית הראשונה שלך היא להעביר את הציפור הכועסת דרך מבוך ולהכות
          חזיר ירוק.
      7:
        text: הצד השמאלי הוא המבוך בו התוכנית שלך מופעלת. ההוראות עבור כל פאזל נמצאות
          מתחת למבוך.
      8:
        text: ההוראות עבור הציפור הכועסת נמצאות בארגז הכלים האמצעי. השתמש בהן כדי
          לבנות את הקוד שלך.
      9:
        text: מצד ימין נמצאת סביבת העבודה, אליה תגרור בלוקים מארגז הכלים כדי לבנות
          את התוכנית שלך. כדי למחוק בלוק, גרור אותו אל פח האשפה שבפינה.
      10:
        text: כל בלוק הוא הוראה אחת. אם תגרור בלוק "התקדם" אל סביבת העבודה שלך ותלחץ
          על "הפעל תוכנית", הציפור תנוע צעד אחד על המבוך.
      11:
        text: על מנת לבצע יותר מפעולה אחת, ניתן לגרור בלוקים רבים אל סביבת העבודה
          שלך, ולחבר אותם יחדיו. הציפור תבצע את הפקודות מלמעלה למטה.
      12:
        text: אם אתה מפעיל תוכנית ורוצה לתקן אותה ולנסות שוב, לחץ על לחצן "איפוס".
      13:
        text: בואו נתפוס את החזירים האלה!
    artist_intro:
      1:
        text: הי, אני ג'וניור! כל צוות מכוניות מירוץ צריך מדעני מחשב כדי לנצח. הם
          מנתחים נתונים מהמכונית כדי לגרום לה לנסוע מהר יותר.
      2:
        text: במהלך החידות הבאות תהיה אמן המשרטט קו מאחוריו בכל מקום אליו הוא הולך.
      3:
        text: בלוק זה אומר "התקדם כ- 100 פיקסלים". פיקסלים הם נקודות ממש זעירות על
          המסך.
      4:
        text: בלוק זה אומר "פנה ימינה ב- 90 מעלות". האמן שלך יפנה באותה צורה כמו בבלוקי
          ״פנה״ שבפאזלי המבוך.
      5:
        text: לחץ על החץ באחד מבלוקים אלו כדי לשנות את הכמות שבה האמן ינוע קדימה או
          יפנה. שחק מעט כדי להכיר את בלוקים חדשים אלו.
    farmer_intro:
      1:
        text: היי, אני פאולה! בחידות אלו אתה איכר הצריך לשטח את השדה שלו לחלוטין לשם
          שתילת יבולים.
      2:
        text: עליך לעזור לה להסיר את כל ערמות העפר ולמלא את כל החורים.
      3:
        text: הבלוקים החדשים משמשים להסרת דלי עפר מהערימה ולמילוי החור בדלי עפר.
      4:
        text: הערימות והחורים הם בגדלים שונים, כך שעליך לספר לאיכר בכמה דליים עליו
          להשתמש.
    flappy_intro:
      1:
        image: הערות/flappy01.jpg
        text: ". היי, אני קייטי! אחד הדברים הכי מרגשים על מדעי המחשב הוא כי תוכנת
          מחשב יכול להיות אינטראקטיביים."
      2:
        image: הערות/flappy02.jpg
        text: בכל פעם שמישהו לוחץ או מקיש או מקליד במחשב או טלפון, זה יוצר אירוע,
          ויש קוד שמחליט מה לעשות כאשר מתרחש אירוע.
      3:
        image: הערות/flappy03.jpg
        text: 'לדוגמה, יכולת מטפל באירועים שאומרת "בעת לחיצה על העכבר, להשמיע צליל" '
      4:
        image: הערות/flappy04.jpg
        text: אי פעם שמעת על המשחק FlappyBird ? על ידי שימוש באירועים, אנחנו הולכים
          ללמוד לתכנת משלנו גירסה מותאמת אישית של FlappyBird!
      5:
        image: הערות/flappy05.jpg
        text: הקוד שתכתוב מערב גרירה והוספה של בלוקים המייצגים פקודות למחשב. מתחת
          למכסה המנוע, כל אחת מן הלבנים הללו מייצגת קוד.
      6:
        image: הערות/flappy06.jpg
        text: 'אם אתה תסתכל על סביבת העבודה, ישנן כמה בלוקים ירוקים ימולאו עבורך -
          אלה "". באירועים- '
      7:
        image: הערות/flappy07.jpg
        text: אם אתה רוצה את הציפור על דש בעת לחיצה על העכבר, אתה יכול לעשות זאת על-ידי
          הצמדת את הבלוק "דש" למטפל האירוע המתאים, ולנפנף עכשיו במשחק שלך בכל פעם
          שתלחץ על העכבר, הציפור.
      8:
        image: הערות/flappy08.jpg
        text: בתוך כל הפאזל של פעילות זו אנו להציג סוגים חדשים של אירועים כמו רחובות
          ירוקים על סביבת העבודה, באפשרותך להחליט הבלוקים המתאימים כדי להוסיף בתגובה
          לאירועים האלה.
      9:
        image: הערות/flappy09.jpg
        text: כאשר אתה רואה טיפה למטה/חץ למעלה כזה, כלומר, שבאפשרותך לשנות את ההגדרות
          - כמו איזה צליל שיושמע flappy פוגע בקרקע.
      10:
        image: הערות/flappy10.jpg
        text: בפאזל הסופי תוכל ליצור משחק שלך ולשתף אותו עם חברים שלך. תהנה!
    loop_times:
      1:
        text: ". היי, אני מארק! בואו ללמוד על לולאות. באמצעות לולאות אתה יכול להגיד
          למחשב לחזור על כל סדרת פעולות שוב ושוב, אלפי או אפילו מיליארדי פעמים."
      2:
        text: בחידה הזו, אנחנו רוצים לגרום לציפור לזוז קדימה 5 מקומות כדי להגיע לחזיר.
      3:
        text: אנחנו יכולים להיעזר בבלוק "חזור" החדש.
      4:
        text: במקום לגרור 5 בלוקי ״התקדם" ...
      5:
        text: אנו יכולים למקם את הבלוק "התקדם" בתוך בלוק "חזור", ולכתוב בבלוק מספר
          שאומר לו כמה פעמים לחזור.
      6:
        text: 'וזה חשוב: אפשר לשים יותר מפקודה אחת בתוך בלוק "חזור".'
      7:
        text: תיהנה מבלוק "חזור" החדש שלך!
    loop_until:
      1:
        text: הי, אני כריס. לפני שהצטרפתי לקבוצת המיאמי היט, למדתי מדעי המחשב במכללת
          ג'ורג'יה טק. בואו ננסה בלוק חדש, בלוק "חזור עד".
      2:
        text: מה אם אנחנו לא יודעים כמה רחוק הציפור צריכה לעבור כדי להגיע לחזיר?
      3:
        text: אם נשים בלוק "התקדם" בתוך הבלוק "חזור עד", הציפור תזוז קדימה עד שתגיע
          אל החזיר (או שתתרסק לתוך קיר).
      4:
        text: 'וזה חשוב: בדיוק כמו מקודם, אנחנו יכולים לשים מספר בלוקים בתוך הבלוק
          "חזור עד", כך שכולם יתבצעו שוב ושוב.'
    if:
      1:
        text: 'הי, אני ביל! בואו ונלמד מושג יסוד חדש: הצהרות "אם". כך מחשבים מקבלים
          החלטות.'
      2:
        text: אתה משתמש במשפטי ״אם״ יום יום בעצמך. לפני שאתה יוצא החוצה בכל בוקר,
          אתה אומר - אם יורד גשם בחוץ, אני צריך ללבוש מעיל.
      3:
        text: אנחנו יכולים להגיד לזומבי לבדוק אם יש שביל שמאלה, ואם אכן הוא ימצא נתיב
          לשמאל, נוכל לגרום לו להסתובב לכיוון זה.
      4:
        text: כדי לכתוב את הקוד לזה, בואו נגרור בלוק "אם" ונשים בלוק "פנה שמאלה" בתוכו.
      5:
        text: עכשיו, אם נשים בלוק "התקדם" מעליו ובלוק "חזור" סביב הכל, בכל פעם שהזומבי
          זז, הוא יבדוק אם ישנו שביל שמאלה ויפנה אליו. הפקודה "חזור" היא קריטית, כדי
          לבדוק בכל צעד האם ניתן לפנות.
      6:
        text: הצהרות ״אם״ מאד חשובות במדעי המחשב. אחת התוכניות הראשונות שכתבתי היתה
          משחק איקס-עיגול, והיה בה משפט ״אם״ שאמר - אם השחקן האחר עומד לנצח, חסום
          את המקום שמאפשר לו לנצח.
      7:
        text: תהנה בשימוש בבלוק "אם"!
    if_else:
      1:
        text: שלום! שמי הוא סאלוני. אני נעזרת בתכנות על מנת לפתור בעיות בעולם הבריאות
          והרפואה. בואו נלמד מה עושה בלוק "If else". הוא נראה כמו בלוק "if", אך יש
          לו חלק נוסף הנקרא "else".
      2:
        text: אם אשים בלוק "התקדם" היכן שכתוב "עשה", ובלוק "פנה שמאלה" היכן שכתוב
          "אחרת", הזומבי יבחר בין שתי אפשרויות. אם קיימת דרך קדימה, הזומבי יתקדם הלאה,
          אחרת (אין דרך קדימה), הזומבי יפנה שמאלה.
      3:
        text: בדיוק כמו בבלוק "אם", נוכל לשים בלוקי ״אם-אחרת" בתוך בלוקי "חזור", כך
          שהזומבי יצעד ובלוק ה- "אם-אחרת" ימשיך לבדוק אם יש מקום בו ניתן לפנות.
      4:
        text: עכשיו, הצעידו את הזומבים למקום אליו הם שייכים!
    if_else_scrat:
      1:
        text: משפט אם-אחרת הוא החלטה בין שני דברים. בואו נראה כיצד נוכל להשתמש במשפט
          אם-אחרת עם החבר שלנו, סקראט הסנאי.
      2:
        text: בלוק זה נראה כמו הבלוק "אם", אבל הוא מכיל חלק נוסף בתחתיתו שבו כתוב
          "אחר". אם נציב בלוק "להתקדם" היכן שכתוב "עשה" ובלוק "פנה שמאלה" היכן שכתוב
          "אחרת", סקראט הסנאי יזוז קדימה אם יש שביל בהמשך. אם לא קיים מסלול בהמשך,
          סקראט יפנה שמאלה.
      3:
        text: זה קבלת החלטה ועשייה של אחד משתי פעולות, בהתבסס על ההחלטה. בדומה לבלוק
          "אם", אפשר לשים בלוק "אחרת אם" בתוך בלוקים של "חזור".
      4:
        text: עכשיו בואו נעזור לסקראט הסנאי להגיע לבלוט הזה!
    function:
      1:
        text: הי, שמי ברינה, מהנדסת באינסטגרם. פונקציה היא קבוצת שורות קוד שברצוננו
          להשתמש בהן שוב ושוב, כך שבמקום לכתוב את הקוד מחדש בכל פעם, נוכל להשתמש בבלוק
          אחד בלבד.
      2:
        text: כעת נלמד איך להגדיר פונקציות. להגדרות פונקציה יש כוכב בפינה. שמה של
          הפונקציה כתוב בשורה העליונה.
      3:
        text: הבלוקים ששמים בתוך ההגדרה אומרים לנו מה הבלוק עושה. בפונקציה הזאת, ההגדרה
          היא "מלא 5" והפונקציה מורכבת מבלוק "חזור שוב" ובלוק "מלא".
      4:
        text: ההגדרה יושבת בסביבת העבודה, אבל החקלאי שלנו לא יריץ את הפונקציה עד שאנחנו
          נוציא את הבלוק של הפונקציה "מלא 5" מתוך קטגורית הפונקציות.
      5:
        text: פונקציות הן כיף!
    loop_while:
      1:
        text: 'היי, אני מקינדה! בואו נלמד יחד על בלוק "כל עוד" '
      2:
        text: בלוק ה״כל עוד" יבצע את מה שהכנסתם לתוכו כל עוד ההצהרה הרשומה בראשו הינה
          אמת.
      3:
        text: לדוגמה, אם האיכר עומד על ערימה, הוא ימשיך להסיר דלי אחר דלי כל עוד עדיין
          נמצאת ערימה תחתיו.
    loop_for:
      1:
        text: הי, אני טרינה ואני עובדת עבור פיקסאר. עבדתי במספר סרטים וביניהם שרק.
      2:
        text: זוהי לולאת ה-"מונה" החדשה שלנו. היא תבצע פעולות שוב ושוב, כך שבאפשרותך
          לשנות אותן מעט בכל פעם.
      3:
        text: בדוגמה זו, לולאת ה-"מונה" שלנו אומרת ״מנה מ-50 עד 90 בצעדים של 10",
          ובתוכה ימצא בלוק "צייר ריבוע". גרור את בלוק ה-״מונה" מאיזור ה-"משתנים" אל
          מקום ה- "אורך".
      4:
        text: זה אומר שהאמן שלנו הולך לצייר ריבוע שכל צד באורך 50 פיקסלים, ואז הוא
          יוסיף 10 לזה ויצייר ריבוע שכל צד באורך 60 פיקסלים. אחר-כך הוא ימשיך להוסיף
          10 ולצייר ריבועים עד שהוא יגיע ל90. אז יהיו לנו ריבועים של 50, 60, 70, 80,
          ו90.
    parameters:
      1:
        text: ". היי, אני ג'אנט, אני מהנדסת ב-זינגה."
      2:
        text: מה אם אנחנו רוצים לצייר כמה משולשים עם אורכים בגדלים שונים?
      3:
        text: היינו יכולים לכתוב את כל הקוד בעצמנו או שנוכל להשתמש בפונקציה עם פרמטרים.
      4:
        text: כדי לעשות זאת לחץ על הכפתור הכחול של הגדרת הפונקציה "צייר משולש". אז
          גרור "שם קלט" לתוך בלוק ה"קלט".
      5:
        text: אז אם תכתוב "אורך" במקום שכתוב "x" ותלחץ על Enter, תיצור קלט אורך לפונקציה
          שלך.
      6:
        text: אז תלחץ על הכוכב. עכשיו, אתה רוצה ללחוץ על קטגוריית המשתנים ולגרור את
          הבלוק "אורך" לתוך הבלוק "זוז קדימה" של הפונקציה שלך. כמו כן, תגרור משם את
          הבלוק מספר הישן.
      7:
        text: כדי להשתמש בפונקציה שלך עם פרמטרים, לחץ על קטגוריית הפונקציות וגרור
          החוצה את הפונקציה "צייר משולש עם אורך".
      8:
        text: עכשיו אתה יכול להשתמש בבלוק מתמטיקה כדי להכניס מספרים שונים כדי לצייר
          משולשים בגדלים שונים.
    hoc_wrapup:
      1:
        text: מזל טוב! עם הפאזל האחרון שפתרת, כתבת קוד שיכול לומר לכל רובוט (בין אם
          זה זומבי, ציפור, מארס-רובר או אפילו מכונית שנוהגת מעצמה) איך למצוא את הדרך
          מבוך או מנהרה באורך כלשהו, .
      2:
        text: המושגים הבסיסיים בהם השתמשת הם בליבה של כל תוכנית או אפליקציה שאי פעם
          תנסה. למדנו על לולאות ״חזור״, הצהרות ״חזור-עד״,  הצהרות ״אם״ והצהרות ״אם-אחרת״.
      3:
        text: אם אהבת את שעת קוד הראשונה שלך, בקר ב- code.org כדי להמשיך בלימוד מדעי
          המחשב! לאחר השלמת הקורס בן 20 השעות שלנו, תשלוט ביסודות התכנות, ותוכל ללמוד
          כיצד לכתוב אפליקציות לטלפון, הוראות הפעלה לרובוט, משחקים ומה שתרצה.
      4:
        text: 'הטכנולוגיה משנה את כל מה שאנו עושים ולא משנה אם אתה צעיר או זקן: תכנות
          זה כיף, זה יצירתי וכל אחד יכול ללמוד!'
    20_wrapup:
      1:
        text: הצגת הערות תגיע בקרוב!
    frozen_intro:
      1:
        text: שלום, שמי לינדסי. אני מדגמנת, משחקת, וגם מפתחת אפליקציות משלי. בוא נשתמש
          בקוד להצטרף לאנה ואלסה לחקור את הקסם והיופי של קרח.
      2:
        text: ניצור פתיתי שלג ודפוסים כשנחליק ונעשה ארץ פלאות חורף שאתה יכול לחלוק
          עם חברים שלך.
      3:
        text: בשעות הקרובות, אתה הולך ללמוד את היסודות של כתיבת קוד. תכנות מסורתי
          בדרך כלל בטקסט, אבל נשתמש ב-Blockly, אשר משתמשת בפריטים חזותיים שניתן לגרור
          ולשחרר לכתוב תוכניות. זה איך שאפילו סטודנטים באוניברסיטה לומדים את היסודות.
          מתחת למכסה המנוע, אתה עדיין יוצר קוד.
      4:
        text: תוכנה היא אוסף הוראות שאומרות למחשב מה לעשות. בואו נבנה קוד או תוכנה
          שיעזרו לאלזה ליצור קו פשוט. נשתמש בו בהמשך כדי ליצור צורות מורכבות יותר.
      5:
        text: המסך שלך מחולק לשלושה חלקים עיקריים. משמאל, זהו משטח הקרח שבו תריץ את
          התוכנה שלך. ההוראות לכל שלב כתובות בדיוק מתחת למשטח.
      6:
        text: החלק האמצעי הזה הוא ארגז הכלים, וכל אחד מהבלוקים האלו הוא פעולה שאלזה
          ואנה יכולות לבצע.
      7:
        text: הרווח הלבן בצד הימין נקרא סביבת העבודה, וזה איפה שנבנה התוכנית שלנו.
          כדי לנוע על פני הקרח, תשתמש בבלוק "העבר קדימה".
      8:
        text: כאן, הבלוק "זוז קדימה" אומר, "זוז קדימה 100 פיקסלים". בעת שנלחץ על "הרץ",
          מה יקרה? אלזה זזה קדימה מספר צעדים על המסך, למעשה 100 פיקסלים! פיקסלים הם
          למעשה נקודות קטנות על מסך המחשב שלך.
      9: 
      10:
        text: זכור, אתה יכול לשנות את מספר הפיקסלים והמעלות על ידי לחיצה על החצים
          שלידם.
    frozen_loops:
      1:
        text: היי, אני פאולה! מחשבים ממש טובים בחלחזור על פעולות. אתם יכולים לספור
          עד 10, 20 או 100. אבל מחשב יכול לספור עד מיליארד או טריליון. זה לא נהיה
          משעמם, אלא לוקח מספר שניות בלבד. ציור, בין אם ספירה, או ציור או כל דבר -
          מחשבים מסוגלים לחזור על דברים מאות או אפילו מיליוני פעמים.
      2:
        text: בתכנות, אנו קוראים לזה לולאה. לולאה היא הדרך לחזור על הקוד שלך שוב ושוב.
          בפאזל הבא, המטרה שלך היא לעזור לאנה ליצור ריבוע עם בלוק ה"חזור".
      3:
        text: כל הבלוקים של הקוד ששמת בתוך בלוק ה"חזור" יחזרו ברצף, כמה פעמים שתרצה.
      4:
        text: "כדי לצייר ריבוע, אתם יכולים להשתמש ב\"זוז קדימה\" ו \"פנה ימינה\" ארבע
          פעמים. \nאבל דרך קלה יותר היא להגיד למחשב \"זוז קדימה\" ו\"פנה ימינה ב-90
          מעלות\" פעם אחת, ואז להגיד לו לחזור על זוג הפעולות האלה ארבע פעמים. \nנסו
          לשים את הבלוקים \"זוז קדימה\" ו \"פנה ימינה\" בתוך בלוק ה\"חזור\" ולראות
          מה קורה."
      5:
        text: זכור, אתה יכול לשנות את המספר בבלוק "חזור שוב" לכל מספר שתרצה, והפעולה
          תחזור על עצמה לפי אותו מספר.
    frozen_functions:
      1:
        text: היי, אני כריס בוש. אני שחקן כדורסל מקצועי, ואני הייתי מתכנת במכללה.
      2:
        text: אחד מהקונספטים הכי חשובים במדעי המחשב הוא להגדיר פקודות חדשות. לרוב
          שפות המחשב יש בערל 100 מילים או פקודות. ובאמת, האומנות והקסם היא להגדיר
          את המילים החדשות שלך מבלי הבלוקים האלה.
      3:
        text: ברגע שאתה לימדת מחשב איך לעשות פעולה אחת באמצעות רצף זה של פקודות, אתה
          יכול להכין שם משלך לפעולה הזאת כדי שיהיה כל יותר לחזור עליה מאוחר יותר.
          ברגע שהגדרת את הפקודה שלך ונתת לה שם, זה נקרא פונקציה.
      4: 
      5: 
      6: 
      7: 
    playlab_intro:
      1:
        text: אנחנו עומדים ליצור משחקים בעזרת מעבדת הצעצועים. למשחקים טובים יש סיפור,
          ובכל סיפור יש שחקנים. אנחנו נלמד לגרום לשחקנים שלנו כמו מכשפות, חייזרים
          וחיות לדבר, לזוז, ולתקשר אחד עם השני. עד סוף ההדרכה הזו, תוכל ליצור משחק
          מהתחלה ולשתף אותו עם החברים שלך.
      2: 
      3:
        text: האזור האמצעי הוא תיבת הכלים, וכל אחד מהבלוקים שבו זה קטע קוד. האזור
          הלבן שבצד נקרא סביבת העבודה וכאן זה המקום שבו נבנה את התוכנית שלנו.
      4: 
      5: 
      6: 
    C1_bee_level_intro:
      1:
        text: נכון שדבורים ממש מגניבות? בחידות הבאות, המטרה שלך היא לעזור לדבורה להגיע
          לפרחים, לאסוף מהם את הצוף ואז לעוף להם לחזרה לכוורת כדי לייצר דבש. עליך
          להשתמש בבלוקים "אסוף צוף" ו-"יצר דבש" כדי לפתור את החידה.
      2:
        text: 'לכל פרח יש מספר שונה של צופים: 1, 2, 3 או אפילו יותר. אנחנו יודעים
          כמה צוף יש בפרחים האדומים על-ידי צפייה במספר הקטן שבפינה שלהם. אז אל תשכחו
          לאסוף את כל הצופים מהפרח לפני שתמשיכו הלאה. בנוסף, לכל כוורת יש כמות מוגבלת
          של דבש שהיא יכולה להכיל: 1, 2, 3 או יותר. אז שימו לב שאתם מייצרים כמות דבש
          מתאימה לכמות שהכוורת יכולה להכיל.'
      3:
        text: אם ביכולתך לאסוף את כל הצוף ולייצר את כל הדבש, תצליח ותעבור לשלב הבא.
          אחרת, תצטרך לנסות לפתור את החידה שוב. נסה קצת ותראה איך זה מרגיש לתכנת "דבורה"!
    C1_bee_loops:
      1: 
      2:
        text: בשלב הזה, אנחנו רוצים שהדבורה תאסוף את כל שלושת הצופים מהפרח. במקום
          להשתמש בשלושה בלוקים של "אסוף צוף", אתה הולך להשתמש בבלוק חזרה כדי לאסוף
          את הצוף שלוש פעמים. לחץ "הרץ" וראה אם הבנת את זה נכון. יפה!
    C1_getting_loopy:
      1: 
      2:
        text: כאשר אתה חוזר על משהו מספר פעמים, כמות הפעולות שלי כדי להמשיך את הסיבוב
          של חישוק ההולה, אני מבצעת לולאה של פעולה זו. זוהי לולאה. זוהי לולאה. וזוהי
          גם לולאה.
      3: 
      4: 
      5: 
    C1_maze_intro_sequencing:
      1: 
      2:
        text: אתה צריך לגרור בלוקים מתיבת הכלים אל סביבת העבודה. ודא כי הם מתחת לבלוק
          'כשהריצה מתחילה' וכאשר אתה חושב שהצלחת להגיע לפתרון, לחץ על הכפתור "הרץ"
          וצפה בציפור הולכת אל החזיר.
    C1_maze_loops:
      1: 
      2:
        text: למשל, אם אני רוצה לאחל לכל החברים בפייסבוק יום הולדת שמח על-ידי שליחת
          דוא"ל אליהם, זה עלול לקחת לי יובל שנים כדי לרשום לכולם את ההודעות הללו.
          אבל, בעזרת רק מספר שורות של קוד, אני יכול לקבל מערכת ששולחת דוא"ל לכולם
          בפייסבוק שתאחל להם מזל טוב ליום הולדתם.
      3: 
    C1_zuck_repeat_loop:
      1: 
      2:
        text: למשל, אם אני רוצה לאחל לכל החברים בפייסבוק יום הולדת שמח על-ידי שליחת
          דוא"ל אליהם, זה עלול לקחת לי יובל שנים כדי לרשום לכולם את ההודעות הללו.
          אבל, בעזרת רק מספר שורות של קוד, אני יכול לקבל מערכת ששולחת דוא"ל לכולם
          בפייסבוק שתאחל להם מזל טוב ליום הולדתם.
      3:
        text: בדוגמה הזו, המטרה שלך היא להוביל את הציפור אל החזיר. כעת, נוכל להשתמש
          בבלוק של לולאת חזור כדי לעשות זאת בצורה מאוד פשוטה. תוכל לעשות זאת בדרך
          הקשה ולתת למחשב את ההוראה לזוז קדימה בעזרת 5 בלוקים שונים וכך להביא את הציפור
          אל החזיר, או שתוכל לגרור פנימה רק פעם אחת את הפקודה לזוז קדימה, ואז לומר
          למחשב לבצע את אותה פעולה 5 פעמים בעזרת לולאה ובסוף לגרום לאותה תוצאה בדיוק.
      4:
        text: כדי לעשות זאת, עליך לגרור את הפקודה "זוז קדימה" ואז להכניס אותה לתוך
          בלוק של לולאת חזור. כדי להשלים את הפעולה, יש ללחוץ על לולאת החזור כדי לבחור
          כמה פעמים על הלולאה להריץ את הפקודה "זוז קדימה".
      5:
        text: דבר נוסף הוא שניתן להכניס לתוך הבלוק של לולאת חזור כמה פקודות שרק תרצו.
          כך למשל בדוגמה הזו, אתה מכניס גם את הפקודה לזוז קדימה וגם להסתובב שמאלה
          אשר יעשו 5 פעמים. תהנו!
    C2_bee_conditionals:
      1: 
      2:
        text: זה שימושי כאשר אנחנו לא יודעים כמה צוף או דבש לאסוף, כמו שאנחנו רואים
          כאן עם סימן השאלה.
      3:
        text: בדוגמה הזו, אנחנו הולכים לומר שאם הפרח הסגול מכיל יותר מ-0 צופים, אז
          אסוף צוף. זה יאמר לדבורה להמשיך לאסוף צוף כל עוד היא שם. טה-דה!
    C2_artist_loops:
      1: 
      2:
        text: כדי לחזור על הבלוק 4 פעמים כדי לצייר את כל הריבוע, אנחנו פשוט גוררים
          בלוק חזור ושמים בלוקים של זוז קדימה ופנה ימינה בתוך לולאת חזור. כאשר נלחץ
          על הרץ, האמן יחזור על הפעולות הבאות 4 פעמים כדי להשלים את הריבוע.
    C2_bee_loops:
      1: 
      2:
        text: זהו בלוק חזרה. כל מה שתכניס לתוך הבלוק הזה יחזור על הפעולות מספר הפעמים
          אשר תאמר לו. למשל, בשלב הזה, במקום לגרור בלוק "זוז קדימה" ו-"אסוף צוף" 3
          פעמים, אנחנו עומדים לגרור כל אחד מהם רק פעם אחת ולחזור על הפעולות האלה 3
          פעמים. זה גורם לתהליך להיות הרבה יותר פשוט!
    C2_maze_intro:
      1:
        text: תכנות בדרך כלל נעשה בעזרת טקסט חופשי, אבל אנחנו נשתמש ב-Blockly אשר
          משתמש בבלוקים ויזואליים אשר גוררים ומשחררים כדי לכתוב תוכנות. מתחת לפני
          השטח, אתה עדיין כותב קוד. כדי להתחיל, אנחנו הולכים לבנות יחד קוד לתוכנה
          אשר תעזור לציפור העצבנית הזו לזוז דרך מבוך כדי להגיע אל החזירים המרושעים
          אשר גנבו להם את הביצים.
      2: 
      3: 
      4: 
      5:
        text: אם אי פעם תרצה למחוק בלוק, פשוט הסר אותו מערימת הבלוקים שלך וגרור אותו
          אל הפח. לאחר שתלחץ על "הרץ", תוכל תמיד ללחוץ על כפתור אפס כדי לגרום לציפור
          לחזור חזרה לנקודת ההתחלה. עכשיו בוא נשיג את החזירים הללו!
    C2_zuck_repeat_loop:
      1: 
      2:
        text: כך למשל, אם אני רוצה לאחל לכל החברים בפייסבוק יום הולדת שמח על-ידי שליחת
          דוא"ל אליהם, זה עלול לקחת לי יובל שנים כדי לרשום לכולם את ההודעות הללו.
          אבל, בעזרת רק מספר שורות של קוד, אני יכול לקבל מערכת ששולחת דוא"ל לכולם
          בפייסבוק שתאחל להם מזל טוב ליום הולדתם. אלה למעשה לולאות ולמה הם כל כך שימושיים
          ומחשב יודע לבצע אותם בצורה טובה.
      3:
        text: בדוגמה הזו, המטרה שלך היא להוביל את הציפור אל החזיר. כעת, נוכל להשתמש
          בבלוק של לולאת חזור כדי לעשות זאת בצורה מאוד פשוטה. תוכל עדיין לבחור בדרך
          הקשה ולתת למחשב את ההוראה לזוז קדימה בעזרת 5 בלוקים שונים וכך להביא את הציפור
          אל החזיר.
      4:
        text: או שפשוט תוכל לומר למחשב "לזוז קדימה" פעם אחת, ואז לומר לו "לחזור" על
          זה 5 פעמים, ולקבל את אותה התוצאה. כדי לעשות זאת, תצטרך לגרור את הפקודה "זוז
          קדימה", ואז להכניס אותה אל תוך בלוק של לולאת "חזור". לאחר מכן, לחץ על בלוק
          הלולאה כדי לומר לו כמה פעמים על הלולאה לחזור על הפעולות שבתוכה, כלומר במקרה
          הזה, כמה פעמים נרצה שהציפור תזוז קדימה.
      5:
        text: דבר נוסף הוא שניתן להכניס לתוך הבלוק של לולאת חזור כמה פקודות שרק תרצו.
          כך למשל בדוגמה הזו, אתה מכניס גם את הפקודה לזוז קדימה וגם להסתובב שמאלה
          אשר יעשו 5 פעמים. כל הכבוד, עבודה נהדרת!
    C3_artist_nested_loops:
      1:
        text: כאשר אתה מכניס לולאה בתוך לולאה נוספת, זה נקרא לולאה מקוננת. לדוגמה,
          כאן יש לנו קוד מוכן לציור של משולש אם אורך כל צד של 100 פיקסלים, בעזרת בלוק
          חזרה המוגדר לרוץ 3 פעמים, כל פעם לצד אחר של המשולש.
      2: 
    C3_bee_conditionals:
      1: 
      2:
        text: זה שימושי כאשר אנחנו לא יודעים כמה צוף או דבש לאסוף, כמו שאנחנו רואים
          כאן עם סימן השאלה.
      3:
        text: בדוגמה הזו, אנחנו הולכים לומר שאם הפרח הסגול מכיל יותר מ-0 צופים, אז
          אסוף צוף. זה יאמר לדבורה להמשיך לאסוף צוף כל עוד היא שם. טה-דה!
    C3_bee_functions:
      1: 
      2:
        text: אנחנו עושים את זה כל הזמן בספורט. לדוגמה, בכדורסל, אתה מתחיל על ידי
          למידה כיצד לכדרר, איך למסור, איך לתפוס ריבאונד. לאחר שלמדת את המהלכים המאוד
          בסיסיים, אתה לומד מהלכים חדשים, ומרכיב יחד את כל אבני הבניין, כמו פיק-אנד-רול.
          מכאן תוכל להמשיך למהלכים מורכבים יותר. ברגע שתלמד את המהלך אתה תיתן לו שם
          וכל החברים לקבוצה ידעו כיצד לבצע את המהלך.
      3: 
      4:
        text: בדוגמה הזו, הפונקציה שלנו נקראת "אסוף 2 צופים", זה הבלוק הירוק שכאן.
          אנחנו יודעים מה אסוף 2 צופים עושה על ידי צפייה בקופסה האפורה הזו אשר מייצגת
          את ההגדרה של הפונקציה. אם נסתכל בפנים, הפונקציה אסוף 2 צופים הולכת לאסוף
          צוף ואז שוב אוספת צוף. הקפד תמיד להסתכל לתוך הקופסה האפורה כך שתדע מה הבלוקים
          של הפונקציות הירוקות יכולות לעשות.
    C3_bee_nested_loops:
      1:
        text: כעת אנחנו הולכים להשתמש בלולאות מקוננות עם הדבורה. קיבלו קוד התחלתי
          אשר אומר לדבורה לזוז קדימה, לאסוף צוף 3 פעמים ואז לפנות ימינה.. בואו ניקח
          את כל חתיכת הקוד הזו ונכנס אותה לתוך לולאת חזור נוספת ונגדיר את מספר החזרות
          ל-3. זהו!
    C3_dice_race:
      1: 
      2: 
      3: 
      4: 
      5:
        text: אלגוריתם זה החשיבה מאחורי מה שצריך לקרות והתכנית זה אוסף ההוראות הניתנות
          למחשב כדי לגרום לזה לקרות. אלגוריתם צריך להיות מתורגם לתוך תכנית לפני שמחשב
          יוכל להריץ אותו. פיצול המשימה למשימות קטנות יכול להיות לעתים לא פשוט. אבל
          כמו כל יכולת חדשה, זה נעשה פשוט יותר ככל שמתרגלים.
    C3_farmer_while:
      1:
        text: לולאות "כל עוד" דומות מאוד למה שאתה עושה ביום יום. תאר לעצמך שאתה שוטף
          את הרכב שלך, אתה ממשיך לקרצף אותו עד אשר הוא נקי. כל עוד הוא לא נקי, אתה
          ממשיך לקרצף. אתה חושב בצורה זו כל הזמן.
      2:
        text: יש לנו לולאה חדשה אשר תעזור לחוואי שלך. זה נקרא בלוק "כל עוד". זה דיי
          פשוט למעשה. כל עוד ההשוואה שבשורה העליונה מתקיימת, עשה משהו. לדוגמה, כל
          עוד יש מערום התקדם צעד אחד. אתה מוזמן לנסות את זה עם החוואי שלך.
    C3_songwriting_with_parameters:
      1: 
      2: 
      3:
        text: בשיעור זה, אתה תלמד שיר קטן וטיפשי שנקרא הארנב הקטן פוּ פוּ. לשיר יש
          פזמון שאתה תשיר מספר פעמים שוב ושוב. פונקציה היא פיסת קוד שאתה יכול להפעיל
          ולהשתמש בה שוב ושוב. זה הופך את התכנות לקל ויעיל יותר, כך שאתה לא צריך לכתוב
          את השלבים של הפונקציה שוב ושוב. אתה יכול פשוט לכתוב אותה פעם אחת!
    C4_bee_conditional:
      1:
        text: זהו בלוק התניה. זה אומר שאם אתה בפרח או בכוורת, אז תעשה משהו. זה שימושי
          כאשר אנחנו לא יודעים כמה דבש או צוף לאסוף כמו שאנחנו רואים כאן עם סימן השאלה.
      2:
        text: בדוגמה הזו, אנחנו הולכים לבדוק, אם זה פרח, אז אסוף ממנו את כל הצוף ואז
          אנחנו נבדוק שוב, אם זו כוורת, ייצר דבש. טה-דה!
    C4_conditionals:
      1: 
      2:
        text: פקודות התניה (אם->אחרת) הם הדרך של המחשב לקבל החלטות. אנשים מייצרים
          תנאים למחשב שאומרים אם המחשב נתקל במקרה אחד אז תעשה "כך" אחרת, תעשה "כך".
          החלק העליון בבלוק אם/אחרת אומר "אם אתה בפרח", אבל הבלוק שלנו יכול לומר גם
          דברים אחרים, נניח "אם צוף שווה ל-2" או "אם יש דרך לפניך", הבלוק שלנו יתנהג
          באותה צורה. כלומר פקודת התניה בודקת אם התשובה היא אמת (נכונה) היא תעשה את
          סט הפקודות הראשונות אבל אם אם התשובה היא שקר (לא נכונה) היא תעשה את סט הפקודות
          השני.
    C4_for_loops:
      1:
        text: כאשר אתה משתמש בבלוק חזור כדי שיחזור על הקוד שלך, איך המחשב יודע מתי
          הוא חזר על הקוד מספיק פעמים? הבלוק חזור למעשה מחביא בתוכו פיסת קוד חכמה
          שנקראת לולאות "עבור" אשר סופרת ממספר התחלתי עד למספר סופי בקפיצות בגודל
          קבוע כפי שהגדרת.
      2:
        text: למשל, בלוק חזור שהוגדר לחזור 3 פעמים סופר מ-1 עד 3 בקפיצות של 1. בכל
          פעם שהוא סופר, הוא מריץ את הקוד שבתוך הלולאה. לולאת עבור יודעת כמה פעמים
          עליה להריץ בעזרת המשתנה הסופר אשר הוגדר במספר התחלתי בתחילת הלולאה ומוסיף
          את הערך בכל ריצה של הלולאה. ברגע שהמשתנה הסופר גדול מהערך הסופי, הלולאה
          מסיימת לרוץ.
      3:
        text: היתרון בשימוש בלולאת עבור אמתית במקום לולאת חזור היא שאתה ממש יכול לראות
          את המשתנה הסופר ולהשתמש בו בתוך הלולאה שלך. למשל, אם יש ברשותך סדרה של פרחים
          כאשר בפרח הראשון יש צוף אחד, בשני יש 2 צופים ובשלישי יש 3 צופים, תוכל להשתמש
          בלולאת עבור כדי לומר לדבורה לאסוף 'סופר' (counter) צופים בכל פעם, אשר עבור
          הפרח הראשון יהיה אחד, בפרח השני יהיה שניים ובפרח השלישי יהיה שלוש.
      4:
        text: בנוסף, בלולאת עבור תוכל להגדיל את המשתנה הסופר במספר השונה בכל פעם שתרצה.
          תוכל לספור בקפיצות של 2, 4 או אפילו במספר שמשתנה מזמן לזמן.
    C4_for_loops_bee:
      1:
        text: כאשר אתה משתמש בבלוק חזור כדי שיחזור על הקוד שלך, איך המחשב יודע מתי
          הוא חזר על הקוד מספיק פעמים? הבלוק חזור למעשה מחביא בתוכו פיסת קוד חכמה
          שנקראת לולאות "עבור" אשר סופרת ממספר התחלתי עד למספר סופי בקפיצות בגודל
          קבוע כפי שהגדרת.
      2:
        text: למשל, בלוק חזור שהוגדר לחזור 3 פעמים סופר מ-1 עד 3 בקפיצות של 1. בכל
          פעם שהוא סופר, הוא מריץ את הקוד שבתוך הלולאה. לולאת עבור יודעת כמה פעמים
          עליה להריץ בעזרת המשתנה הסופר אשר הוגדר במספר התחלתי בתחילת הלולאה ומוסיף
          את הערך בכל ריצה של הלולאה. ברגע שהמשתנה הסופר גדול מהערך הסופי, הלולאה
          מסיימת לרוץ.
      3:
        text: היתרון בשימוש בלולאת עבור אמתית במקום לולאת חזור היא שאתה ממש יכול לראות
          את המשתנה הסופר ולהשתמש בו בתוך הלולאה שלך. למשל, אם יש ברשותך סדרה של פרחים
          כאשר בפרח הראשון יש צוף אחד, בשני יש 2 צופים ובשלישי יש 3 צופים, תוכל להשתמש
          בלולאת עבור כדי לומר לדבורה לאסוף 'סופר' (counter) צופים בכל פעם, אשר עבור
          הפרח הראשון יהיה אחד, בפרח השני יהיה שניים ובפרח השלישי יהיה שלוש.
      4:
        text: בנוסף, בלולאת עבור תוכל להגדיל את המשתנה הסופר במספר השונה בכל פעם שתרצה.
          תוכל לספור בקפיצות של 2, 4 או אפילו במספר שמשתנה מזמן לזמן.
    C4_for_loops_no_bee:
      1:
        text: כאשר אתה משתמש בבלוק חזור כדי שיחזור על הקוד שלך, איך המחשב יודע מתי
          הוא חזר על הקוד מספיק פעמים? הבלוק חזור למעשה מחביא בתוכו פיסת קוד חכמה
          שנקראת לולאות "עבור" אשר סופרת ממספר התחלתי עד למספר סופי בקפיצות בגודל
          קבוע כפי שהגדרת.
      2:
        text: למשל, בלוק חזור שהוגדר לחזור 3 פעמים סופר מ-1 עד 3 בקפיצות של 1. בכל
          פעם שהוא סופר, הוא מריץ את הקוד שבתוך הלולאה. לולאת עבור יודעת כמה פעמים
          עליה להריץ בעזרת המשתנה הסופר אשר הוגדר במספר התחלתי בתחילת הלולאה ומוסיף
          את הערך בכל ריצה של הלולאה. ברגע שהמשתנה הסופר גדול מהערך הסופי, הלולאה
          מסיימת לרוץ. היתרון בשימוש בלולאת עבור אמתית במקום לולאת חזור היא שאתה ממש
          יכול לראות את המשתנה הסופר ולהשתמש בו בתוך הלולאה שלך.
    C4_intro:
      1:
        text: תכנות בדרך כלל נעשה בעזרת טקסט חופשי, אבל אנחנו נשתמש ב-Blockly אשר
          משתמש בבלוקים ויזואליים אשר גוררים ומשחררים כדי לכתוב תוכנות. מתחת לפני
          השטח, אתה עדיין כותב קוד. כדי להתחיל, אנחנו הולכים לבנות יחד קוד לתוכנה
          אשר תעזור לציפור העצבנית הזו לזוז דרך מבוך כדי להגיע אל החזירים המרושעים
          אשר גנבו להם את הביצים.
      2: 
      3: 
      4: 
      5:
        text: אם אי פעם תרצה למחוק בלוק, פשוט הסר אותו מערימת הבלוקים שלך וגרור אותו
          אל הפח. לאחר שתלחץ על "הרץ", תוכל תמיד ללחוץ על כפתור אפס כדי לגרום לציפור
          לחזור חזרה לנקודת ההתחלה. עכשיו בוא נשיג את החזירים הללו!
    C4_unplugged_algorithms:
      1: 
      2: 
      3:
        text: אני משתמש היום באלגוריתם כדי להשלים את הציור. רציתי לנסות לצבוע מספר
          זאבים, אבל אני לא צייר מזהיר. למזלי, יש לי ציור לפי מספרים. ישנם ארבעים
          צבעים אשר לצידם אותיות ומספרים קטנים שמורים לנו איזה צבע לצבוע כל חלק. צביעה
          לפי המספרים מסבירה לי כיצד בדיוק באיזה צבע להשתמש בחלק חלק.
      4: 
    C4_unplugged_forloops:
      1: 
      2:
        text: לולאות עבור שימושיות בהרבה מקומות ואם במקרה תהיה מתארולוג, היית משתמש
          בלולאות עבור כל הזמן. שלום, אני בקי. אני עובדת בחברה כמתארולוגית רוח. אני
          חוזה מהירויות הרוחות עבור נהר קולומביה היכן שהחברה שבה אני עובדת מנהלת חוות
          טורבינות רוח.
      3:
        text: אנחנו מנסים להבין כמה רוח הולכת להיות שם כדי שנדע כמה כוח הולך להיות
          בשימוש. אנחנו נותנים מידע שכזה בזמן אמת לספקי אנרגיה. הם קונים ומוכרים חשמל
          בהתבסס על כמות הכוח שהולכת להיות שם כדי להיות בטוחים שרשת החשמל מאוזנת,
          האורות שלכם נשארות דלוקות ושאנחנו ממקסמים את כמות החשמל שאנחנו מייצרים בחוות
          הטורבינות.
      4: 
      5: 
    tutorial_puzzle_challenge:
      1: 
      2: 
      3: 
      4: 
      5:
        text: לפעמים יתכן ובטעות תשליך לפח את הקוד ההתחלתי. מה עושים אז? תוכל ללחוץ
          על נקה חידה ולהתחיל הכל מחדש. אני הולך לגרור את בלוק המספר הזה למספר מקומות
          שמגדירים פיקסלים. בחר 100 לפיקסלים, 45 למעלות ו100 עבור פיקסלים שוב. מעולה!
          הנה דבורת הקוד סטודיו. אני זקוק להזיז את הדבורה לכל פרח כדי להשיג צוף.
      6:
        text: הפרח הראשון נמצא במרחק 3 בלוקים, אז אני זקוקה לזוז 3 פעמים קדימה. 1,
          2, 3. אז לקחת צוף ואז לקחת צוף שוב. אבל זה לא עבד! אני אמקם זוז קדימה נוסף
          בין שני קח צוף ואריץ את הכל מחדש. יש, זה עובד! כרגע למדת כיצד להשתמש בסטודיו
          קוד עבור חידות האמן והדבורה. בהצלחה בחידות והאתגרים הבאים של סטודיו קוד.
    starwars_intro:
      1:
        text: 'הי, שמי קתלין קנדי ואני המפיקה של הסרט "מלחמת הכוכבים: הכח מתעורר".
          היום תעבדו עם אחד הכוכבים שלנו, BB-8. BB-8 הוא דרואיד כדורי, כל תנועה שלו
          נשלטת על ידי תוכנת מחשב. מדעי המחשב משפיעים על כל התעשיות החל משיווק, דרך
          רפואה ועד לקולנוע. למעשה, מאות מהנדסי תוכנה עבדו ביחד ליצור את הסרט "הכח
          מתעורר".'
      2:
        text: היי שמי רייצ'ל רוז, אני מהנדסת בכירה ב-ILM ואני מובילה צוות פיתוח אנימציה
          והיצורים. ב"הכוח מתעורר", אני אחראית על סיוע לאמנים לפתח תשתיתיות שהן חלק
          מהדמויות שזזות וגורמות לדמויות להיראות אמינות מאוד בגלקסיה רחוק רחוק.
      3:
        text: בשעה הקרובה נבנה יחד משחק "מלחמת הכוכבים" משלנו. נלמד אתכם מושגי יסוד
          בתכנות. בדרך כלל תכנות נעשה על ידי כתיבה אבל אנחנו נשתמש בבלוקים ונגרור
          אותם על מנת לכתוב את התכניות. מאחורי הקלעים אתם עדיין יוצרים קוד. אחרי שתתנסו
          בדברים בסיסיים עם בלוקים, נעביר אותכם לשפת JavaScript, אחת משפות התכנות
          הנפוצות ביותר.
      4:
        text: בתחילה נעבוד עם ריי לתכנת את BB-8 ללכת ולאסוף את כל חלקי הגרוטאות. המסך
          שלכם מחולק לשלושה חלקים. החלק השמאלי הוא אזור המשחק בו ירוץ הקוד שכתבתם.
          ההוראות לכל רמה כתובות מתחת לאזור המשחק.
      5:
        text: החלק המרכזי מכיל את ארגז הכלים עם הפקודות ש BB-8 יכול להבין.
      6:
        text: לחלק הלבן מימין קוראים "סביבת העבודה" ושם נבנה את התוכנית.
      7:
        text: אם אני גורר את בלוק ;()moveLeft לסביבת העבודה שלנו ומריץ את התוכנית
          (run), מה קורה? BB-8 זז צעד אחד שמאלה על הרשת.
      8:
        text: ומה אם אני רוצה ש BB-8 יעשה משהו אחרי בלוק ;()moveLeft? אני יכול להוסיף
          בלוק נוסף בתוכנית שלנו. אני הולך לבחור את בלוק ;()moveUp ואני אגרור אותו
          אל מתחת ל ;()moveLeft שלי על להופעת ההדגשה של חיבור הבלוקים. כשאעזוב את
          הבלוק שלי הבלוקים יתחברו ותישמע נקישה.
      9:
        text: כאשר אני לוחץ שוב על "הרץ", BB-8 יבצע את הפקודות אשר בערימה שבסביבת
          העבודה שלך מלמעלה למטה. אם אי אפעם תרצה למחוק בלוק, פשוט הסר אותו מהערימה
          וגרור אותו בחזרה לתיבת הכלים.
      10: 
    starwars_typing:
      1:
        text: בתוך הבלוקים ראינו שיש פקודות JavaScript. JavaScript זוהי שפת התכנות
          הנפוצה ביותר לשימוש בפיתוח מקצועי כיום. בלוקים הם דרך נהדרת כדי להתחיל ללמוד
          לתכנת ולמעשה, גם אוניברסיטאות מובילות כמו הארווארד וברקלי מתחילים ללמד בדרך
          הזו. לאחר שילמדו את הבסיס, מהנדסים יכתבו קוד בגלל שזה מאפשר להם להתקדם מהר
          יותר.
      2: 
      3: 
      4: 
      5: 
      6: 
      7:
        text: אם אתה נתקע, תוכל תמיד להתחיל מהתחלה על ידי לחיצה על כפתור התחל מחדש,
          ואז תוכל לחזור בחזרה למצב בלוקים בכל זמן על-ידי לחיצה בכפתור בפינה העליונה.
          טוב, בוא ננסה לכתוב קוד! ואם תטעה, אל תתייאש. זה לוקח לכל אחד מספר ניסיונות
          כדי להצליח.
    starwars_blocks_intro:
      1: 
      2: 
      3: 
      4: 
      5:
        text: החלק המרכזי מכיל את ארגז הכלים עם הפקודות ש BB-8 יכול להבין.
      6: 
      7: 
      8: 
      9:
        text: אם אי פעם תרצה למחוק בלוק, פשוט הסר אותו מערימת הבלוקים וגרור אותו חזרה
          אל תיבת הכלים.
      10: 
    mc_intro:
      1: 
      2: 
      3: 
      4: 
      5: 
      6: 
      7: 
      8: 
      9: 
      10: 
      11:
        text: אם אי פעם תרצה למחוק בלוק, פשוט גרור אותו מערימת הבלוקים וגרור אותו
          חזרה אל תיבת הכלים.
      12: 
    mc_repeat:
      1: 
      2: 
      3:
        text: בשלב האחרון היינו צריכים הרבה בלוקים מסוג 'זוז קדימה'. זה היה יכול להיות
          הרבה יותר פשוט אם יכולנו להגיד למחשב 'זוז קדימה' ארבע או חמש פעמים. למזלנו,
          מחשבים יודעים לעשות זאת בצורה ממש טובה על-ידי חזרה על פקודות בעזרת לולאות
          חזור.
      4:
        text: כאשר בונים עולם מיינקרפט, אנחנו משתמשים בלולאות חזרה כדי למקם את כל
          הרכיבים ההתחלתיים בשביל העולם החדש. זו כמות של אלפי בלוקים. אנחנו גם משתמשים
          בלולאות עבור צרכים קטנים, למשל, כדי לגרום לרגליים של אלכס לזוז אחורה וקדימה
          בזמן שהיא הולכת. לולאות חזרה הם כלי מאוד חזק וחשוב בתכנות שלנו.
      5: 
      6: 
    mc_2016_intro:
      1: 
      2: 
      3: 
      4: 
      5: 
      6: 
      7: 
      8:
        text: אם אי פעם תרצה למחוק בלוק, פשוט הסר אותו מערימת הבלוקים וגרור אותו חזרה
          אל תיבת הכלים.
      9: 
    mc_2016_loops:
      1: 
      2: 
      3:
        text: מוקדם יותר, גרמנו לתרנגול לזוז לאורך המסך אבל אז היא הפסיקה. במיינקרפט,
          התרנגולות משוטטות להן לעולם ועד. בואו נשתמש בלולאה "עשה לעולם" אשר בתיבת
          הכלים שלנו כדי לגרום לתרנגולות לשוטט לנצח. השימוש בכוח של הלולאות יחסוך
          לנו המון זמן ומאפשר לך כל מיני אפשרויות מגניבות לבניית גרסת מיינקרפט משלך.
    mc_2017_repeat:
      1: 
      2: 
      3: 
      4: 
      5: 
      6: 
      7:
        text: בשלב הבא, תוכל להשתמש בלולאה כדי לגרום לסוכן לזוז לאורך הדרך. גרור בלוק
          של לולאת חזור אל תוך סביבת העבודה ומקם את הבלוק "זוז קדימה" בתוך לולאת החזור.
          זה מורה למחשב לעשות את אותה פעולה מלא פעמים ברצף ללא הצורך בגרירה של כמות
          גדולה של בלוקים אל תוך סביבת העבודה. תוכל לבחור בכמה פעמים תרצה שהלולאה
          תחזור על עצמה על-ידי הכנסת מספר בהגדרה של בלוק הלולאה.
      8: 
      9: 
    csd_concept_how_computers_work:
      1:
        text: 'לכל מקום שתתבונן, מחשבים משנים את העולם. לא משנה אם אתה במחשב, בבית
          שלך, בכיס שלך או פחות או יותר בכל מקום אחר. אבל כל עוד רובנו משתמשים בטכנולוגיה
          הזו ביום יום, אנחנו לא תמיד שואלים את עצמנו: איך מחשבים עובדים?". בסדרה
          זו, אתה הולך ללמוד כיצד מחשבים באמת עובדים, נתחיל עם מה שהופך מחשב למחשב.
          אח"כ תלמד כיצד מידע נשמר ומיוצג במחשב בעזרת אותות חשמליים אשר נדלקים ונכבים
          במהירות בלתי נתפסת.'
      2: 
