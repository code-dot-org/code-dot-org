'no':
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Velkommen til din første kodetime! La oss dykke rett inn i ditt første
          møte med programmering.
      2:
        image: notes/hoc1_2.jpg
        text: Vi skal bruke Blockly, et visuelt programmeringsspråk hvor du drar og
          slipper blokkene for å skrive kode.
      3:
        image: notes/hoc1_3.jpg
        text: De fleste programmeringsspråk bruker tekst, men Blockly er visuelt.
          Hver blokk tilsvarer en "ekte" kodelinje.
      4:
        image: notes/hoc1_4.jpg
        text: Du vil lære grunnleggende informatikk, med begreper som brukes overalt,
          helt fra å skrive apper til å lage programmer for å styre Mars-roveren.
      5:
        image: notes/hoc1_5.jpg
        text: Et program er et sett med instruksjoner som datamaskinen skal følge.
      6:
        image: notes/hoc1_6.jpg
        text: Målet med det første programmet er å få en "Angry Bird" gjennom en labyrint
          slik at den treffer en grønn gris.
      7:
        image: notes/hoc1_7.jpg
        text: Til venstre er labyrinten der programmet kjøres. Instruksjonene for
          hver oppgave er under labyrinten.
      8:
        image: notes/hoc1_8.jpg
        text: Den midtre verktøykassen har kommandoene for "Angry Bird". Du vil bruke
          disse for å bygge koden.
      9:
        image: notes/hoc1_9.jpg
        text: Til høyre er arbeidsområdet hvor du skal trekke blokker fra verktøykassen
          til å bygge programmet med. Hvis du vil slette en blokk, drar du den til
          papirkurven i hjørnet.
      10:
        image: notes/hoc1_10.jpg
        text: Hver blokk er en instruksjon. Hvis du drar en "fremover" blokk til arbeidsområdet
          og trykker "Kjør programmet", flyttes fuglen en plass på labyrinten.
      11:
        image: notes/hoc1_11.jpg
        text: For må gjøre mer enn én handling, kan du dra mange blokker til arbeidsområdet
          og sette dem sammen. Fuglen vil utføre kommandoene ovenfra og ned.
      12:
        image: notes/hoc1_12.jpg
        text: Hvis du kjører et program og ønsker å fikse det for å prøve på nytt,
          kan du trykke på "Reset"-knappen.
      13:
        image: notes/hoc1_13.jpg
        text: La oss gå og ta de grisene!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hei, jeg er JR! Alle racerbil-lag må ha programmerere for å vinne. De
          analyserer data fra bilen for å gjøre den raskere.
      2:
        image: notes/stage5_2.jpg
        text: I disse oppgavene vil du være en kunstner som tegner linjer bak deg
          når du flytter deg.
      3:
        image: notes/stage5_3.jpg
        text: Denne blokken sier "flytt frem 100 piksler." Piksler er bare veldig
          små prikker på skjermen.
      4:
        image: notes/stage5_4.jpg
        text: Denne blokken sier "sving 90 grader til høyre". Den vil dreie kunstneren
          like mye som "sving" blokken i labyrintoppgaven gjorde.
      5:
        image: notes/stage5_5.jpg
        text: Klikk på pilen i en av disse blokkene for å endre hvor mye kunstneren
          går fremover. Lek litt med dette for å bli kjent med de nye blokkene.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hei, jeg Paola! I disse oppgavene er du en bonde som trenger å gjøre
          jordet flatt for å kunne dyrke grønnsaker der.
      2:
        image: notes/stage9_2.jpg
        text: Du må hjelpe henne med å fjerne alle jordhaugene, og fyle alle hullene.
      3:
        image: notes/stage9_3.jpg
        text: De nye blokkene fjerner 1 spadetak med jord fra en haug, og fyller 1
          spadetak med jord i et hull.
      4:
        image: notes/stage9_4.jpg
        text: Hauger og hull har forskjellige størrelse eller dybde, så du må fortelle
          bonden hvor mange spadetak som det er behov for.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: Hei, mitt navn er Katie! Noe av det mest spennende innen informatikk
          er at et dataprogram kan være interaktivt.
      2:
        image: notes/flappy02.jpg
        text: Hver gang noen klikker, trykker eller skriver på en datamaskin eller
          telefon, som genererer en hendelse, og det er noe kode som bestemmer hva
          som skal utføres når hendelsen inntreffer.
      3:
        image: notes/flappy03.jpg
        text: 'Du kan for eksempel ha en HENDELSESHÅNDTERER som sier "når musen klikkes,
          spilles en lyd" '
      4:
        image: notes/flappy04.jpg
        text: Har du hørt om spillet FlappyBird? Ved å bruke hendelsesbehandling,
          skal vi lære å programmere vår egen tilpasset versjon av FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: Koden du vil skrive innebærer å dra og slippe blokker som representerer
          kommandoer på datamaskinen. Under panseret, er hver av disse blokkene representert
          av ekte kode.
      6:
        image: notes/flappy06.jpg
        text: 'Hvis du tar en titt på arbeidsområdet, er det noen grønne blokker som
          er fylt ut for deg - dette er "hendelsesbehandlinger" '
      7:
        image: notes/flappy07.jpg
        text: Hvis du vil at fuglen skal FLAKSE når du KLIKKER med musen, så fester
          du "FLAKS" blokken til den riktige hendelsesbehandleren og fuglen vil flakse
          hver gang du klikker med musen.
      8:
        image: notes/flappy08.jpg
        text: I hver oppgave i denne aktiviteten vil vi introdusere nye typer hendelser
          som grønne blokker i arbeidsområdet, og du kan bestemme de relevante blokkene
          å legge til i respons til de hendelsene.
      9:
        image: notes/flappy09.jpg
        text: Når du ser en nedtrekksboks som denne, så betyr det at du kan endre
          instillingene - for eksempe lyden som spilles av når flappy treffer bakken.
      10:
        image: notes/flappy10.jpg
        text: I siste puslespillet vil du kunne lage et spill og dele den med dine
          venner. ha det gøy!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hei, jeg heter Mark! La oss lære om løkker. Med løkker kan du skal be
          datamaskinen om å gjenta et sett av handlinger igjen og igjen, tusenvis
          eller milliarder ganger.
      2:
        image: notes/hoc2_2.jpg
        text: I denne oppgaven ønsker vi å flytte fuglen frem 5 plasser for å ta grisen.
      3:
        image: notes/hoc2_3.jpg
        text: Vi kan bruke den nye "gjenta" blokken for å hjelpe oss.
      4:
        image: notes/hoc2_4.jpg
        text: I stedet for å dra ut 5 "fremover" blokker...
      5:
        image: notes/hoc2_5.jpg
        text: Vi kan sette "fremover" blokken inne i "gjenta"-blokken og skrive et
          nummer i blokken å fortelle den hvor mange ganger det skal gjentas.
      6:
        image: notes/hoc2_6.jpg
        text: 'Og dette er viktig: Du kan sette mer enn én kommando i en "gjenta"-blokk.'
      7:
        image: notes/hoc2_7.jpg
        text: Kos deg med å bruke den nye "gjenta" blokken!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hei, er jeg Chris. Før jeg startet i Miami Heat, studerte jeg informatikk.
          La oss prøve våre ny blokk, "Gjenta til" blokken.
      2:
        image: notes/hoc3_2.jpg
        text: Hva hvis vi ikke visste hvor langt fuglen måtte bevege seg for å komme
          til grisen?
      3:
        image: notes/hoc3_3.jpg
        text: Hvis vi setter en "fremover" blokk inne i en "Gjenta til" blokk, vil
          fuglen bevege seg fremover til den når grisen (eller krasjer inn i en vegg).
      4:
        image: notes/hoc3_4.jpg
        text: 'Og dette er viktig: Akkurat som før kan vi sette flere blokker inni
          "Gjenta til" blokken, og de vil alle bli gjentatt.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Hei, er jeg Bill! La oss lære et nytt grunnleggende konsept: hvis-uttrykk.
          Dette er hvordan datamaskiner tar beslutninger.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Du bruker "hvis"-uttrykk selv hver dag. Før du går ut hver morgen sier
          du: "HVIS det regner ute må jeg ta på meg jakke".'
      3:
        image: notes/hoc4_3.jpg
        text: Vi kan be zombien om å sjekke om det er en sti til venstre. Hvis han
          finner en sti der, kan vi be han snu i den retningen.
      4:
        image: notes/hoc4_4.jpg
        text: For å skrive koden for dette, må vi dra ut "Hvis"-blokken og sette en
          "venstre"-blokk inni den.
      5:
        image: notes/hoc4_5.jpg
        text: Hvis vi hver gang zombien flytter på seg setter en "fremover" blokk
          over den, og en "gjenta" blokk rundt alt, vil han nå sjekke om det er en
          sti til venstre og i så fall snu dit. Kommandoen "gjenta" er viktig for
          å se etter sti etter hvert skritt.
      6:
        image: notes/hoc4_6.jpg
        text: Hvis-setninger er veldig viktige i programmering. En av de første programmene
          jeg skrev, var et tripp-trapp-tresko-spill. Der var det det en hvis-setning
          som sa hvis den andre personen holdt på å vinne, måtte programmet blokkere
          posisjonen som ville la han seire.
      7:
        image: notes/hoc4_7.jpg
        text: Ha det gøy med hvis-blokker!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hei, jeg heter Saloni. Jeg bruker programmering for å løse problemer
          innenfor helse og medisin. La oss lære om "hvis-ellers"-blokken. Den ser
          ut som en "hvis"-blokk, men har en ekstra del på slutten som sier "ellers".
      2:
        image: notes/hoc5_2.jpg
        text: Hvis jeg setter en "fremover"-blokk på plassen der det står "gjøre"
          og en "snu til venstre" blokk der det står "ellers", betyr det at zombien
          vil velge mellom to alternativer. Hvis det er en vei fremover, vil den gå
          dit og ellers (ikke vei fremover) vil den svinge til venstre.
      3:
        image: notes/hoc5_3.jpg
        text: Akkurat som med "hvis"-blokken, kan vi sette "hvis-ellers"-blokker inni
          en "gjenta"-blokk slik at zombien vil fortsette med å flytte og "hvis-ellers"blokken
          vil fortsette å sjekke om det er på tide å snu.
      4:
        image: notes/hoc5_4.jpg
        text: Nå får du vise zombiene hvor de hører hjemme!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: En "hvis-ellers"-setning er en beslutning mellom to ting. La oss se
          på hvordan vi kan bruke en "hvis-ellers"-setning med vår venn ekornet Scrat.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Denne blokken ligner på "hvis"-blokken, men det er en ekstra del nederst
          som sier "ellesrs". Hvis jeg setter en "fremover"-blokk der det står "gjøre"
          og en "snu venstre"-blokk der det står "ellers", så betyr ekornet Scrat
          vil gå fremover hvis det er sti foran. Hvis det ikke er sti foran, vil Scrat
          snu til venstre.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Det er ta en beslutning og gjøre én av to handlinger basert på denne
          avgjørelsen. Og akkurat som "hvis"-blokker, kan du sette "hvis-ellers"-blokker
          inni "gjenta"-blokker.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: Nå la oss hjelpe ekornet Scrat til å få seg en nøtt!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Hei, jeg Brina, ingeniør ved Instagram. En funksjon er noen kodelinjer
          som du vil bruke igjen og igjen, så i stedet for å skrive den samme koden
          hver gang, kan du bare bruke en blokk.
      2:
        image: notes/stage13_2.jpg
        text: Vi skal lære å definere funksjoner. Blokker der vi definerer funksjoner
          har en stjerne i hjørnet. Navnet på funksjonen skrives på øverste linje.
      3:
        image: notes/stage13_3.jpg
        text: Blokkene inne i funksjonen forteller oss hva den gjør. Så denne funksjonen
          er kalt "fyll 5", og består av en "gjenta" blokk og en "fylle" blokk.
      4:
        image: notes/stage13_4.jpg
        text: Funksjonen finnes på arbeidsområdet, men bonden vil ikke kjøre den før
          vi drar ut "Fyll 5 funksjon" blokka fra funksjoner-kategorien.
      5:
        image: notes/stage13_5.jpg
        text: La oss ha det gøy med funksjoner!
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Hei, jeg Makinde! La oss lære om "gjenta så lenge"-blokken '
      2:
        image: notes/stage9_6.jpg
        text: '"Gjenta så lenge" blokken vil fortsette å gjøre det som er inne i den
          så lenge utsagnet på toppen er sant.'
      3:
        image: notes/stage9_7.jpg
        text: For eksempel, hvis bonden står på en haug, vil hun fortsette å fjerne
          spadetak med jord så lenge det er fortsatt en haug under henne.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Hei, jeg er Trina, og jeg jobber for Pixar. Jeg har vært med å lage
          en rekke filmer, inkludert Shrek.
      2:
        image: notes/stage11_2.jpg
        text: Dette er nye "teller" løkka. Det vil utføre handlingene igjen og igjen,
          og du kan endre handlingene litt hver gang.
      3:
        image: notes/stage11_3.jpg
        text: Dette eksemplet på en "teller"-løkke sier "Tell med teller fra 50 til
          90 med 10" og inni den har vi en "tegn en firkant"-blokk. Dra "teller" blokken
          fra "Variabler"-seksjonen til "lengde"-stedet.
      4:
        image: notes/stage11_4.jpg
        text: Dette betyr at kunstneren vår skal tegne et kvadrat med sidelengde 50
          piksler. Så legger vi til 10, og tegner et kvadrat med sidelengde 60 piksler.
          Slik holder vi på til sidelengden blir 90 piksler. Dermed har vi sidelengdene
          50, 60, 70, 80 og 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hei, jeg er Janete, og jeg er en ingeniør ved Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Hva hvis vi ønsker å tegne en haug med trekanter av forskjellig størrelse?
      3:
        image: notes/stage15_3.jpg
        text: Vi kan skrive all koden for hånd, eller vi kan bruke en funksjon med
          parametere.
      4:
        image: notes/stage15_4.jpg
        text: For å gjøre dette, må du klikke på den blå stjernen i "tegn en trekant"
          funksjonen. Dra så "Navn på parameter:" inn i "parametre"-blokka til høyre.
          NB! Ikke skriv navnet først.
      5:
        image: notes/stage15_5.jpg
        text: Så hvis du skriver "lengde" der det står "x" og så trykker "Enter",
          vil du opprette et lengde-parameter til funksjonen.
      6:
        image: notes/stage15_6.jpg
        text: Klikk på stjernen. Så klikker du på "variabler"-kategorien og drar "lengde"
          inn i "fremover" blokka til funksjonen. Så drar du bort den gamle nummer-blokken.
      7:
        image: notes/stage15_7.jpg
        text: For å bruke funksjonen med parametere. kan du klikke på kategorien funksjoner
          og dra ut "tegn en trekant med lengde"-funksjonen.
      8:
        image: notes/stage15_8.jpg
        text: Nå kan du bruke matematikk-blokken for å hente nye tall, og på den måten
          kan du tegne trekanter av forskjellige størrelse.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Gratulerer! Med den siste oppgaven du løste, skrev du kode som kan fortelle
          roboter hvordan de finner vei gjennom enkle labyrinter eller tunneler uansett
          lengde. Dette gjelder uansett om det er en zombie, en fugl, en mars-rover
          eller om det er deg som kjører bil.
      2:
        image: notes/hoc6_2.jpg
        text: De grunnleggende konseptene som du brukte, danner utgangspunktet for
          alle programmene eller appene du ser. Vi har lært om gjentagende løkker,
          hvis-setninger, og hvis-ellers setninger.
      3:
        image: notes/hoc6_3.jpg
        text: Hvis du likte den første kodetimen, kan du gå til code.org for å fortsette
          å lære programmering! Når du har fullført 20-timers kurset vårt, behersker
          du grunnleggende programmering. Da kan du begynne å lære å skrive telefon-apper,
          robotinstruksjoner, spill - ja alt mulig!
      4:
        image: notes/hoc6_4.jpg
        text: 'Teknologien forandrer alt vi gjør, og det spiller ingen rolle om du
          er ung eller gammel: Programmering er morsomt og kreativt, og alle kan lære
          det!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Video-notater kommer snart!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hei, jeg heter Lyndsey. Jeg modell, skuespiller og skrive mine egene
          apper. La oss bruke kode til å utforske isens magi og skjønnhet sammen med
          Anna og Elsa.
      2:
        image: notes/frozen1_2.jpg
        text: Du vil skape snøfnugg og mønstre med kunstløpskøyter og lage et magisk
          vinterlandskap som du kan dele med vennene dine.
      3:
        image: notes/frozen1_3.jpg
        text: I den neste timen vil du lære grunnleggende programmering. Tradisjonell
          programmering er vanligvis i tekst, men vi skal bruke Blockly, som bruker
          visuelle blokker som du kan dra og slippe for å skrive programmer. Også
          studenter på universitetet lærer grunnleggende programmering på denne måten.
          Under overflaten  lager du fortsatt kode.
      4:
        image: notes/frozen1_4.jpg
        text: Et program er et sett med instruksjoner som forteller en datamaskin
          hva den skal  gjøre. La oss lage en kode eller et program, som få Elsa til
          å lage en rett linje. Vi vil senere bruke dette til å lage mer kompliserte
          mønstre.
      5:
        image: notes/frozen1_5.jpg
        text: Skjermen din er delt i tre hoveddeler. Til venstre er isflaten der du
          vil kjøre programmet. Instruksjoner for hvert nivå er skrevet rett under
          isflaten.
      6:
        image: notes/frozen1_6.jpg
        text: Det midterste området er verktøykassen, og hver av disse blokkene er
          en handling som Elsa og Anna kan gjøre.
      7:
        image: notes/frozen1_7.jpg
        text: Det hvite området til høyre kalles arbeidsområdet, og dette er hvor
          vi skal lage programmet vårt. For å flytte rundt på isflaten, kan du bruke
          "Flytt fremover"-blokken.
      8:
        image: notes/frozen1_8.jpg
        text: Her, sier "flytt fremover"-blokken sier, "flytte frem 100 piksler."
          Når vi trykker "Kjør", hva vil skje? Elsa flytter frem en bestemt lengde
          på skjermen, 100 piksler faktisk! Piksler er små firkantede punkter på dataskjermen.
      9:
        image: notes/frozen1_9.jpg
        text: Den andre blokken vi har i denne oppgaven sier "snu til høyre med 90
          grader". Og når vi bruker denne "snu til høyre"-blokken, får det Elsa snu
          en gitt mengde. Du kan prøve ut hvor mye du vil at Elsa skal snu. Vinkelen
          måles fra retningen foran Elsa. Så dette er en 90 graders sving. Og dette
          er en 120 graders sving.
      10:
        image: notes/frozen1_10.jpg
        text: Husk på at du kan endre antall piksler og grader ved å klikke på pilene
          ved siden av dem.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Hei, jeg Paola! Datamaskiner er flinke til å gjenta handlinger. Du kan
          telle til 10, 20 eller 100. Men en datamaskin kan telle til en milliard
          eller billion. Den vil ikke gå lei og det tar bare noen sekunder. Om det
          er telling, eller tegning, eller noe annet - datamaskiner kan gjenta ting
          hundrevis eller milliarder av ganger.
      2:
        image: notes/frozen2_2.jpg
        text: I programmering kaller vi dette en løkke. En løkke er den måten du bruker
          for å gjenta koden igjen og igjen. I den neste oppgave er målet ditt å hjelpe
          Anna til å lage et kvadrat med "Gjenta"-blokken.
      3:
        image: notes/frozen2_3.jpg
        text: Alle kodeblokkene du setter inne i "Gjenta"-blokken  vil bli gjentatt
          i rekkefølge, så mange ganger du ønsker.
      4:
        image: notes/frozen2_4.jpg
        text: Hvis du vil tegne et kvadrat, kan du bruke "Flytt frem" og "snu til
          høyre" blokkene 4 ganger. Men det er enklere å fortelle datamaskinen "Flytt
          frem" og "snu til høyre 90 grader" en gang og deretter fortelle det å gjenta
          disse to handlingene 4 ganger. For å gjøre det, må du sette "Flytt frem"
          og "snu til høyre" blokkene inne i en "Gjenta"-blokk.
      5:
        image: notes/frozen2_5.jpg
        text: Husk, du kan endre tallet i blokken "Gjenta" til hva som helst og det
          vil gjenta det som er inne i blokken så mange ganger.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hei, jeg er Chris Bosh. Jeg er en profesjonell basketballspiller og
          jeg programmerte på skolen.
      2:
        image: notes/frozen3_2.jpg
        text: En av de viktigste konseptene i datavitenskap er hvordan definere nye
          kommandoer. De fleste språk har bare 100 ord eller kommandoer. Og virkelig,
          kunsten og magien er p definere dine egne, nye ord ut av disse byggeklossene.
      3:
        image: notes/frozen3_3.jpg
        text: Når du har lært en datamaskin hvordan gjøre en handling en gang ved
          bruk av denne sekvensen av kommandoer så kan du navngi den handlingen selv,
          slik at det er lett å gjenta den senere. Når du definerer dine egne kommandoer
          og gir dem navn kalles det en funksjon.
      4:
        image: notes/frozen3_4.jpg
        text: Hei, jeg er Jess. Når du programmerer med blokker bruker du funksjoner
          hvis det er et sett med handlinger du vil gjøre mange ganger. For eksempel
          har du skrevet kode for å lage en firkant.
      5:
        image: notes/frozen3_5.jpg
        text: 'Du kan definere dette som en funksjon kalt "opprett en firkant" '
      6:
        image: notes/frozen3_6.jpg
        text: Nå har du en ny blokk som du kan bruke flere ganger for å opprette flere
          ruter.
      7:
        image: notes/frozen3_7.jpg
        text: Mange enkle figurer kan brukes til å lage mer komplekse mønstre. I den
          neste gåten vil koden du nylig skrev for å lage en sirkel være tilgjengelig
          som en ny funksjon som kan lage sirkler i forskjellige størrelser. Kan du
          bruke den for å hjelpe Elsa opprette komplekse og vakre mønstre i snøen?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Så langt har du lagd en animasjon eller en historie som gjør akkurat
          det samme hver gang du kjører den. Nå kan du lage et interaktivt spill som
          du faktisk kan spille.
      2:
        image: notes/playlab_2.png
        text: Her er "når pilen"-blokk og "Flytt aktør"-blokk. Du kan sette disse
          blokkene sammen for å flytte figurene rundt med piltastene.
      3:
        image: notes/playlab_3.png
        text: Og det finnes noen blokker som gjør ting når figurene kolliderer eller
          klikkes på. Prøv dem og ha det gøy!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Vi skal lage spill ved bruk av Spill Lab. Gode spill har en historie
          og hver historie har figurer. Vi skal lære hvordan vi får våre figurer,
          som hekser, romvesner og dyr, til å snakke, bevege seg og samhandle med
          hverandre. Ved slutten av denne oppgaven kan du bygge et spill fra bunnen
          av og dele det med dine venner.
      2:
        image: notes/playlab_intro_2.png
        text: Skjermen din er delt inn i 3 hoveddeler. Den til venstre er spillrommet
          der spille ditt skal kjøres. Instruksjonene for hvert nivå er skrevet nedenfor.
      3:
        image: notes/playlab_intro_3.png
        text: Det midterste området er verktøykassen, og hver av disse blokkene er
          et stykke kode. Det hvite mellomrommet til høyre kalles arbeidsområdet og
          dette er hvor vi skal bygge vårt program.
      4:
        image: notes/playlab_intro_4.png
        text: For å starte må du koble blokkene dine til den oransje-"når kjører"-blokken.
          Du kan knytte flere blokker sammen ved å dra dem til det vises en gul linje,
          og deretter vil de snappe sammen.
      5:
        image: notes/playlab_intro_5.png
        text: I denne første oppgaven er vår figur en pingvin og vi skal få den til
          å si "Hallo" ved å dra "si"-blokken ut, knytte den til å "når kjører"-blokken
          og skrive inn "Hallo." Vi kan også få pingvinen til å flytte på seg ved
          hjelp av bruke blokkene for å bevege til høyre og venstre. Når du har dine
          blokker på plass, trykk på Kjør-knappen for å se hva du har programmert.
      6:
        image: notes/playlab_intro_6.png
        text: Kom i gang og til slutt vil du kunne lage et spill med alle slags spillere
          som kan samhandle, bli glad eller trist, få poeng, kaste ildkuler eller
          til og med trylle hverandre bort. Det er opp til deg og spillet du ønsker
          å lage.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Nå skal vi lære om noe som alle spillprogrammerere bruker hver dag.
          De kalles hendelser. En hendelse forteller programmet å lytte til når noe
          skjer. Når det skjer, utføres en handling.
      2:
        image: notes/playlab_events_2.png
        text: Eksempler på hendelser er å lytte etter et museklikk, en piltast eller
          trykk på skjermen.
      3:
        image: notes/playlab_events_3.png
        text: Her skal vi gjøre romboten hilse på jordboerene når en spiller klikker
          på ham. Vi bruker "ved klikk"-blokken og fester "si"-blokken til den. Når
          spilleren klikker på romboten vil alt knyttet til denne "ved klikk"-hendelsesblokken
          utføres. Hva gjør ditt romvesen si?
      4:
        image: notes/playlab_events_4.png
        text: Det finnes også "når pilen"-blokker. Hvis du kobler "Flytt"-blokker
          til disse, kan du begynne å flytte aktører opp, ned, til venstre eller høyre.
          Trinnvis blir spillet ditt mer interaktiv.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Dette er "Gjenta alltid"-blokken. Alt i denne blokken skjer alltid i
          spillet.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Hvis vi ønsker en figur til å gjøre noe flere ganger uten at spilleren
          trenger å gjøre noe, vil vi sette disse blokkene inne blokken "Gjenta for
          alltid".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: I den neste oppgaven er vårt mål å hjelpe trollmannen patruljere grensene
          av riket, venstre og høyre kontinuerlig. Å lære hvordan du kan gjenta kommandoer
          vil spare deg massevis av tid senere når du bygger ditt eget spill.
