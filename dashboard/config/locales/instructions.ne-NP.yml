---
ne:
  data:
    instructions:
      2-3 Artist 1 new_instruction: |-
        Hi, I'm an artist. You can write code to make
        me draw almost anything. Use a few blocks to make me draw over the grey lines
        in the picture. (Each line is 100 pixels long)
      2-3 Artist 11_instruction: "Give the stop sign a border by making an octagon\nwith
        100 pixels sides. \r\n\r\n"
      2-3 Artist 12_instruction: "Create a circle to finish the eyeball!\r\n\r\nIf\nthe
        artist turns 1 degree with each loop, how many times do you need to repeat\nthe
        code to draw a circle? 180? 360? 500?"
      2-3 Artist 2 new_instruction: "This house has a half-finished wall. Each side\nis
        100, but the half-finished wall is only 50. Complete the wall. "
      2-3 Artist 2_instruction: "This house has a half-finished wall. Each side\nis
        100, but the half-finished wall is only 50. Complete the wall. "
      2-3 Artist 3.4_instruction: |-
        The jump block moves the artist without drawing.
        Draw the dashed line using both the `jump forward` and `move forward` blocks.
        Each line is 50 pixels long.
      2-3 Artist 3_instruction: |-
        This hat is 100 pixels high. Draw a hat that is
        70 pixels less.
      2-3 Artist 3new_instruction: "The red hat is 100 pixels tall. Finish drawing\na
        black hat that is 70 pixels shorter. \r\n(Note: The width of each hat is\n50
        pixels.)"
      2-3 Artist 4_instruction: Help me complete the house for this cat.
      2-3 Artist 5_instruction: |-
        Replace this code with a "repeat times" block
        to draw the same house using only 3 blocks.
      2-3 Artist 6_instruction: |-
        This house needs a roof! Draw the triangle.  Hint:
        all three sides are the same length.
      2-3 Artist 7_instruction: "Finish drawing the last set of windows on the school\nso
        that everyone in class can see outside. The sides of each square window\npane
        are 25 pixels long. "
      2-3 Artist 8_instruction: |-
        Complete the rooms for each of the animals by splitting
        the rectangle into 2 equal-sized squares. The rectangle is 200 pixels wide
        and 100 pixels tall. There are many different ways to solve this puzzle, so
        have some fun!
      2-3 Artist 9 NEW_instruction: Finish this kite
      2-3 Artist 9 REPLACEMENT_instruction: Finish drawing these stairs!
      2-3 Artist 9_instruction: Finish this kite
      2-3 Artist Assessment 1_instruction: |-
        Assessment: Finish drawing the last tooth.
        It is 25 pixels wide and 25 pixels tall.
      2-3 Artist Debugging 1_instruction: |-
        This hat should only be 50 pixels wide.  Can
        you fix it?
      2-3 Artist Debugging 10_instruction: "The direction pad on my game controller\nis
        too narrow. \r\n\r\nCan you make it wider by 10 pixels?\r\n\r\nTry running\nthe
        code first to see what's wrong."
      2-3 Artist Debugging 11_instruction: "My snowflake is falling apart!\r\n\r\nCan\nyou
        figure out what's going wrong?"
      2-3 Artist Debugging 12_instruction: |-
        I'm supposed to add an ocean wave to
        this scene.  Can you help me?
      2-3 Artist Debugging 2_instruction: "This code for the cat's whiskers is wrong.\n\r\n\r\nFix
        this code to draw whiskers that are all the same length."
      2-3 Artist Debugging 3_instruction: "My boat has a hole! \r\n\r\nWhat do you\nneed
        to fix to make the ends meet?"
      2-3 Artist Debugging 5_instruction: "The code that we have for the leg and\nfoot
        is wrong. \r\n\r\nCan you fix it?"
      2-3 Artist Debugging 6_instruction: "Looks like I'm sitting on a chair that’s\nmissing
        a leg!\r\n\r\nEdit the code to draw the last leg."
      2-3 Artist Debugging 7_instruction: "Looks like the C in code is drawn backwards!\r\n\r\nCan\nyou
        make it look like a C again?"
      2-3 Artist Debugging 8_instruction: "My teacher says that I should finish what\nI
        start!\r\n\r\nHelp me finish my pinwheel. Can you figure out what's wrong?"
      2-3 Artist Debugging 9_instruction: "Something is off!\r\n\r\nThe code for\nthis
        stem is wrong. Can you figure out how to get the artist to trace the\nstem
        the right way?"
      2-3 Artist Debugging Assessment 1_instruction: "Assessment: Why does this square\nend
        up being 75 pixels too small on each side?  \r\n\r\nWhere does the code\ngo
        wrong?"
      2-3 Artist Free Play_instruction: Free-play! Draw anything you'd like.
      2-3 Artist Functions 1 a_instruction: "\"Me zombie artist. Me love drawing!\"
        \ \r\n\r\nHelp\nthe zombie draw square glasses.  \r\n\r\nThe bridge between
        the glasses is\n25 pixels shorter than the width of the squares, which is
        100 pixels."
      2-3 Artist Functions 1_instruction: "\"Me zombie artist. Me love drawing!\"
        \ \r\n\r\nHelp\nthe zombie draw square glasses.  \r\n\r\nThe bridge between
        the glasses is\n25 pixels shorter than the width of the squares, which is
        100 pixels."
      2-3 Artist Functions 10_instruction: |-
        Freeplay: Here are two functions, one
        to draw a big gear and one to draw a small gear. Use them to draw the inside
        of a machine!
      2-3 Artist Functions 11 a_instruction: "We've renamed the `draw a square` function\nto
        `draw a hexagon`, but it's still giving us squares! Can you modify the\n`draw
        a hexagon` function to draw a hexagon with 50 pixel sides? \r\n\r\nDraw\nthe
        image using the new function!"
      2-3 Artist Functions 11.5 a_instruction: "Here's that same `draw a hexagon`\nfunction.
        \r\n\r\nWhat happens if you loop the main program 6 times, turning\n60 degrees
        each time you loop?"
      2-3 Artist Functions 11.5_instruction: "Here's that same `draw a hexagon`\nfunction.
        \r\n\r\nWhat happens if you loop the main program 6 times, turning\n60 degrees
        each time you loop?"
      2-3 Artist Functions 11_instruction: "We've renamed the `draw a square` function\nto
        `draw a hexagon`, but it's still giving us squares! Can you modify the\n`draw
        a hexagon` function to draw a hexagon with 50 pixel sides? \r\n\r\nDraw\nthe
        image using the new function!"
      2-3 Artist Functions 12 Mike_instruction: "Functions are really great for drawing\ncomplex
        things multiple times. \r\n\r\nCan you use the `draw a flower` function\nto
        fill the rest of the planter box?\r\nThe plants are all 100 pixels apart."
      2-3 Artist Functions 12 a_instruction: "Functions are really great for drawing\ncomplex
        things multiple times. \r\n\r\nCan you use the `draw a flower` function\nto
        fill the rest of the planter box?\r\nThe plants are all 100 pixels apart."
      2-3 Artist Functions 12_instruction: "Functions are really great for drawing\ncomplex
        things multiple times. \r\n\r\nCan you use the `draw a flower` function\nto
        fill the rest of the planter box?\r\nThe plants are all 100 pixels apart."
      2-3 Artist Functions 13_instruction: |-
        We've provided you with four functions.
        Use them any way you like inside of one or more loops to make pictures that
        you can share with your friends. Press run to see an example.
      2-3 Artist Functions 2_instruction: "Functions let you define new blocks! \r\n\r\nWe've\nmoved
        the blocks needed for drawing a square into a function called `draw\na square`.
        This time, use the `draw a square` function to create the glasses.\n\r\n\r\nThe
        squares are 75 pixels apart."
      2-3 Artist Functions 3_instruction: "Edit the function to draw a square with\na
        side length of 115 to draw the bigger glasses. \r\n\r\nThe squares are now\n45
        pixels apart."
      2-3 Artist Functions 4_instruction: |-
        Now, put the function inside of a loop
        to draw these three squares.
      2-3 Artist Functions 9_instruction: 'Freeplay: Here is a snowflake function.
        Experiment with it to create a winter scene! This is a free play level, so
        there is no puzzle to solve. रमाईलो गर्नुहोस्!'
      2-3 Artist Loops 11_instruction: |-
        Now let's put *another* loop around our
        whole creation!  Don't forget to add an angle at the end of the outer loop.
      2-3 Artist Loops 4_instruction: |-
        Want to see what happens when we repeat that
        shape over and over again using a loop?
      2-3 Artist Loops 8_instruction: Let's put both elements inside a loop.
      2-3 Artist Loops New 1_instruction: |-
        Let's draw this robot's head! Can you
        make a square with sides that are 100 pixels?
      2-3 Artist Loops New 10_instruction: |-
        Now let's connect a bunch of V's together
        in a loop.
      2-3 Artist Loops New 11_instruction: |-
        Rebuild the code from the last puzzle,
        but this time, add a left turn of 30 degrees inside the loop. Now, repeat
        it 24 times instead of 8.
      2-3 Artist Loops New 12_instruction: 'Draw a diamond with sides of 100 pixels.

'
      2-3 Artist Loops New 13_instruction: "We are going to start you with some code\n(in
        grey) to make one diamond. \r\n\r\nLoop the grey code to create a fun\npattern!"
      2-3 Artist Loops New 14_instruction: |-
        Play around with the code for the diamond
        and see what other patterns you can make. Try changing how many degrees you
        turn and how many times you loop.
      2-3 Artist Loops New 15_instruction: Now, draw anything you like!
      2-3 Artist Loops New 2_instruction: "Here is the same puzzle that we just solved,\nbut
        this time, we can only use one `move forward` block and one `turn` block\nthis
        time.\r\n\r\nCan you use a `repeat` to solve this puzzle?"
      2-3 Artist Loops New 9_instruction: |-
        Draw a simple V (where both sides are
        50 pixels) to complete the arrow.
      2-3 Artist Match Hex Pic_instruction: 'Match:  Help finish the Hexagon.'
      2-3 Artist Match Rho Pic_instruction: 'Match:  Finish the missing code.'
      2-3 Artist Match Sq Pic_instruction: 'Match: Complete the missing code'
      2-3 Artist Match Tri pic_instruction: 'Matching:  Fill in the missing code.'
      2-3 Artist Nested Loops 1_instruction: |-
        Put a `repeat` block around this whole
        stack of code to draw the pattern.
      2-3 Artist Nested Loops 10_instruction: |-
        Loop this code 12 times to complete
        the pattern.
      2-3 Artist Nested Loops 11_instruction: |-
        Loop this code 4 times to complete
        the pattern, turn 90 degrees after each circle.
      2-3 Artist Nested Loops 12_instruction: |-
        Loop this code 12 times to complete
        the curls.
      2-3 Artist Nested Loops 2_instruction: "Now loop the triangle 6 times. \r\n\r\nAfter\neach
        triangle, you'll need to turn 60 degrees before drawing the next."
      2-3 Artist Nested Loops 3_instruction: "You'll need to loop the triangle 12\ntimes
        to draw this pattern. \r\n\r\nDivide the number of degrees in a circle\n(360)
        by the number of shapes you're drawing (12) to figure out how far to\nturn
        after each shape."
      2-3 Artist Nested Loops 4_instruction: "Loop this diamond 12 times to draw\na
        flower!\r\n\r\nNote: We'll use the same angle to loop 12 diamonds as we\ndid
        for 12 triangles.  \r\nHow much do you need to turn after each shape?"
      2-3 Artist Nested Loops 5_instruction: "Fill in this building's windows using\na
        nested loop. \r\n\r\nThe windows are 20 pixels long and 20 pixels apart."
      2-3 Artist Nested Loops 6_instruction: "This dinosaur has 8 spikes running\nup
        its tail.\r\nEach spike is 30 pixels long. Loop the triangle 8 times, but\nmake
        sure to jump forward after each one!"
      2-3 Artist Nested Loops 7_instruction: "Loop this triangle 10 times to draw\nthe
        sun. \r\n\r\nYou'll need to move and turn after each triangle. \r\n\r\nYou\ncan
        figure out how much to turn by dividing the number of degrees in a circle\nby
        the number of triangles that make it up."
      2-3 Artist Nested Loops 8_instruction: "Now let's add some grass to our picture.\n\r\n\r\nEach
        tuft of grass is 50 pixels apart."
      2-3 Artist Nested Loops 9_instruction: "We'll finish this picture by adding\nour
        flower. \r\n\r\nLoop the diamond 12 times to draw the flower."
      2-3 Artist Nested Loops Free Play_instruction: |-
        Free play, draw something cool
        with nested loops.
      2-3 Bee Conditionals 1_instruction: |-
        Hi! I'm a bee. Help me get nectar from
        the flower.
      2-3 Bee Conditionals 11_instruction: "I wonder what's out there!\r\n\r\nHelp\nme
        fly around the yard and collect nectar only from the flowers that have\nsome. "
      2-3 Bee Conditionals 12_instruction: |-
        Help me find all of the nectar using
        as few blocks as possible!
      2-3 Bee Conditionals 13_instruction: "There's a lot happening here!\r\n\r\nUse\nwhat
        you've learned to collect all of the nectar and then make the honey."
      2-3 Bee Conditionals 14_instruction: "Let's put everything together!\r\n\r\nUse\nwhat
        you've learned to help me collect nectar only from flowers that have\nit,
        using as few blocks as possible.  Don't forget to make honey at the end."
      2-3 Bee Conditionals 15_instruction: "This stair step pattern should look familiar.
        \ \r\n\r\nCan\nyou collect nectar only from the flowers that have some, using
        as few blocks\nas possible?"
      2-3 Bee Conditionals 2_instruction: "I'm a hungry bee! \r\nHelp me collect\nall
        of the nectar from the flowers using the fewest number of blocks."
      2-3 Bee Conditionals 3_instruction: "Look at all of that nectar!\r\n\r\nHelp\nme
        collect the nectar and make the honey using as few blocks as you can.  "
      2-3 Bee Conditionals 4_instruction: |-
        Help me collect all of the nectar from
        the flowers and make all the honey.
      2-3 Bee Conditionals 5_instruction: "Be careful not to collect nectar from\na
        purple flower if it doesn't have any. \r\nYou must first check if the nectar\nis
        equal to 1 using the `if nectar` block."
      2-3 Bee Conditionals 6_instruction: |-
        Check this flower with an "if" block
        to see if there is any nectar available.
      2-3 Bee Conditionals 7_instruction: |-
        Collect nectar from each flower only if
        it has any.
      2-3 Bee Conditionals 8_instruction: |-
        This field has red and purple flowers.
        Red flowers have a known nectar amount, but purple flower nectar is unknown.
        Collect all the nectar.
      2-3 Bee Conditionals 9_instruction: Collect all the nectar from each flower.
      2-3 Bee Conditionals Assessment 1_instruction: |-
        Assessment: Collect all of
        the nectar. Be careful not to try to collect nectar from a purple flower if
        it doesn't have any.
      2-3 Bee Debugging 1_instruction: |-
        These blocks are really bugging me. Fix the
        error(s) to collect all of the nectar.
      2-3 Bee Debugging 10_instruction: "This puzzle is making me loopy! \r\nFix\nthe
        error(s) to collect all of the nectar and make all of the honey."
      2-3 Bee Debugging 2_instruction: "Can you find the problem here?\r\nFix the\nerror(s)
        to collect all of the nectar."
      2-3 Bee Debugging 3_instruction: "Ooh, this one stings!\r\n\r\nFix the error(s)\nto
        collect all of the nectar."
      2-3 Bee Debugging 4_instruction: |-
        These blocks are really bugging me. Fix the
        error(s) to collect all of the nectar and make all of the honey.
      2-3 Bee Debugging 5_instruction: "That flower looks tasty! \r\n\r\nFix the\nerror(s)
        to collect all of the nectar.  You can now use both run and step."
      2-3 Bee Debugging 6_instruction: "What a sweet challenge!\r\n\r\nFix the error(s)\nto
        collect all of the nectar."
      2-3 Bee Debugging 7_instruction: |-
        Fix the error(s) to collect all of the nectar
        and make all of the honey.
      2-3 Bee Debugging 8_instruction: "So many beautiful flowers!\r\n\r\nFix the\nerror(s)
        to collect all of the nectar."
      2-3 Bee Debugging 9_instruction: "\"Bee\" patient with this one!\r\n\r\nYou\nwill
        need to fix a couple of things in this program to collect all of the\nnectar
        and make all of the honey."
      2-3 Bee Debugging Assessment 1_instruction: "Assessment:  Now it's time to\nshow
        what you know!\r\n\r\nFix the error(s) to collect all of the nectar and\nmake
        all of the honey."
      2-3 Bee Functions 1_instruction: |-
        Functions are blocks of code that perform
        a task. Use the "get 2 nectar" function to collect the nectar from each
        flower.
      2-3 Bee Functions 10_instruction: "Purple flowers change between either 1 or\n0
        nectar each time you run the puzzle.   \r\n\r\nCreate a function that collects\nnectar
        only from purple flowers that have nectar."
      2-3 Bee Functions 2_instruction: "Functions are blocks of code that perform\na
        task.  \r\n\r\nUse the `get 5` function to get 5 nectars at a time."
      2-3 Bee Functions 3_instruction: Collect all the nectar from each flower.
      2-3 Bee Functions 4_instruction: "The `move and get nectar` function turns\nthe
        bee, collects nectar, and then returns the bee to where it started.  \r\n\r\nUse\nthe
        function to collect all of the nectar."
      2-3 Bee Functions 5_instruction: |-
        There is now more nectar at the flowers.
        Edit the given function so that it collects 4 nectars and use it to collect
        all of the nectar from the flowers.
      2-3 Bee Functions 6_instruction: |-
        Now use the same function to collect nectar
        from the three flowers.
      2-3 Bee Functions 7_instruction: |-
        The flowers are now further away. Edit the
        given function and use it to collect all of the nectar from the flowers.
      2-3 Bee Functions 8_instruction: |-
        Create your own function that gets 7 nectar,
        moves forward, and makes 7 honey. Use the function to collect nectar at each
        flower and make honey at each honeycomb.
      2-3 Bee Functions 9_instruction: |-
        Create your own function that goes down a
        path, gets nectar, makes honey, and then returns the bee to the top of the
        path.
      2-3 Bee Functions Assessment 1_instruction: |-
        Assessment: Use the given function
        to collect nectar from each flower.
      2-3 Bee Functions Assessment 2_instruction: |-
        Assessment: Create a function
        to turn, move forward and make 3 honey, then return the bee to where it started
        and turn back.
      2-3 Bee Loops 1_instruction: "Those flowers look tasty!\r\n\r\nCollect nectar\nfrom
        each of the flowers using the fewest blocks possible."
      2-3 Bee Loops 10_instruction: |-
        Can you use a while loop inside of two other
        loops to collect all of the nectar?
      2-3 Bee Loops 11_instruction: |-
        Use while loops to collect all of the nectar
        from the flowers in this field.
      2-3 Bee Loops 12_instruction: |-
        Use while loops to collect all of the nectar
        from the flowers in this field.
      2-3 Bee Loops 13_instruction: |-
        Assessment: Collect all of the nectar using
        the fewest blocks possible.
      2-3 Bee Loops 1A_instruction: "Hi, I'm a bee. Can you help me collect the\nnectar
        from these flowers? "
      2-3 Bee Loops 2_instruction: |-
        Collect all the nectar and make all of the honey
        using the fewest blocks possible.
      2-3 Bee Loops 2A_instruction: This time, use a loop to gather all of the nectar.
      2-3 Bee Loops 3_instruction: |-
        Collect nectar from each flower and make honey
        at each honeycomb using the fewest blocks possible.
      2-3 Bee Loops 3A_instruction: Use a `repeat` loop to collect all of the nectar.
      2-3 Bee Loops 3B_instruction: |-
        Now use the `repeat` block to collect all of
        the nectar and make all of the honey.
      2-3 Bee Loops 4_instruction: "Such a busy bee!\r\n\r\nHelp bee collect all\nof
        the nectar and make all of the honey with the fewest blocks possible."
      2-3 Bee Loops 4A_instruction: "How many times can loops help you in this puzzle?
        \ \r\n\r\nLoops\nare your friend! Use a few of them to complete this puzzle
        with the fewest\nblocks possible."
      2-3 Bee Loops 5_instruction: "The shape of this path is different than the\nothers.
        \r\n\r\nCan you collect all of the nectar using as few blocks as possible?"
      2-3 Bee Loops 6_instruction: |-
        Can you find the quickest way for the bee to
        collect all of the nectar and make all of the honey?
      2-3 Bee Loops 7_instruction: |-
        What a beautiful field of flowers!   Help the
        bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      2-3 Bee Loops 8_instruction: "These purple flowers have different amount of\nnectar
        each time you run the puzzle. \r\n\r\nUse the `while nectar` loop to\ncollect
        all of the nectar. \r\n\r\nThis loop will run as long as the condition\nis
        true, in this case `nectar > 0`."
      2-3 Bee Loops Assessment 1_instruction: |-
        Assessment: Use a `while` loop to
        collect all of the nectar from these flowers.
      2-3 Maze 1_instruction: "Can you help me catch the naughty pig? Stack a couple\nof
        `move forward` blocks below the `when run` block and press \"Run\". "
      2-3 Maze 10_instruction: Guide me to the green evilness! (Watch out for TNT)
      2-3 Maze 11_instruction: |-
        Get me to the flower I'm hungry! How many times
        do you have to repeat a block?
      2-3 Maze 12 (old)_instruction: |-
        Get me to the pig, now with the Repeat times
        block!
      2-3 Maze 12 - One Move Block_instruction: |-
        Get to the pig! But this time, you
        can only use one `move forward` block. Do you see any other blocks that could
        help you?
      2-3 Maze 12_instruction: |-
        Can you get to the pig by creating a loop that uses
        only one `move forward` block inside of a `repeat`?
      2-3 Maze 13 (old)_instruction: |-
        Get me to the pig, now with the Repeat until
        block!
      2-3 Maze 13_instruction: |-
        Get me to the pig! You can only use one move forward
        block this time
      2-3 Maze 14 (old)_instruction: Get me to the pig with the Repeat until block!
      2-3 Maze 14_instruction: |-
        Get me to the sunflower! (Where is that "repeat
        times" block when I need it?)
      2-3 Maze 15 (old)_instruction: Get me to the pig with the Repeat until block!
      2-3 Maze 15_instruction: |-
        In this puzzle, two `repeat` loops will help you
        get to the pig with the fewest number of blocks!
      2-3 Maze 16 (old)_instruction: Get me to the pig with the Repeat until block!
      2-3 Maze 16 before_instruction: |-
        Can you figure out the fastest way to get
        me to the pig?
      2-3 Maze 16_instruction: |-
        Loops even work with more than one block inside!  Can
        you loop this sequence to get the zombie to the sunflower?
      2-3 Maze 2_instruction: This pig is ruffling my feathers. Help me get to him!
      2-3 Maze 3_instruction: |-
        Trace the path and lead me to the silly pig. Avoid
        TNT or feathers will fly!
      2-3 Maze 4_instruction: Guide me to the green evilness! (Watch out for TNT)
      2-3 Maze 5_instruction: Guide me to the green evilness! (Watch out for TNT)
      2-3 Maze 6_instruction: |-
        Keep calm and help me find the bad pig. Otherwise
        I might get angry!
      2-3 Maze 7_instruction: Guide me to the green evilness! (Watch out for TNT)
      2-3 Maze 8_instruction: Get me to the pig!
      2-3 Maze 9_instruction: Guide me to the green evilness! (Watch out for TNT)
      2-3 Maze Loops 1_instruction: |-
        Can you get me to the pig using 5 of the same
        kind of blocks?
      2-3 Maze Loops 17_instruction: Use what you learned to get me to the sunflower!
      2-3 Maze Loops 18_instruction: "Get me to the sunflower using the fewest blocks\npossible!
        \ \r\n\r\nTry using one `repeat` loop inside of another to cut down\non the
        amount of code you need."
      2-3 Maze Loops 19_instruction: "Let's take this to another level! \r\nUse\nloops
        to get me to the sunflower with the fewest loops possible."
      2-3 Maze Loops 20_instruction: |-
        Get me to the sunflower using the fewest number of
        blocks possible!
      2-3 Maze Loops 21_instruction: |-
        Get me to the sunflower using the fewest blocks
        possible!
      2-3 Maze Loops Assessment 1_instruction: "Assessment:  Get me to the sunflower\nusing
        only 5 blocks! "
      2-3 Maze sq2_instruction: |-
        Trace the path and lead me to the silly pig.  Avoid
        the TNT or the feathers will fly!
      2-3 Maze sq3_instruction: Guide me to the green evilness! (Watch out for TNT)
      2-3 Maze sq4_instruction: |-
        Keep calm and help me find the bad pig. Otherwise
        I might get angry!
      2-3 Maze sq7_instruction: Get me to the green intruder using only three blocks.
      2-3 Maze sq8_instruction: |-
        Get me to the pig! (Where is that "repeat times"
        block when I need it?)
      2-3 maze sq13_instruction: |-
        Dear person. Me zombie. Must... get... to sunflower.
        Create loop with "repeat until" block.
      2-3 maze sq14_instruction: Can you get to the sunflower using only four blocks?
      2-3 maze sq15_instruction: Can you get to the sunflower using only five blocks?
      2-3 maze sq16_instruction: |-
        Ok, this is similar, but slightly different. Can
        you do it in only five blocks?
      2-3level1_instruction: Help the bird catch the naughty pig by moving it forward
      20hr_farmer_stage9_1_instruction: Hi, I'm a farmer. I need your help to flatten
        the field on my farm so it's ready for planting. Move me to the pile of dirt
        and use the "remove" block to remove it.
      20hr_farmer_stage9_11_instruction: 'It''s still dark outside. Move me along
        the field. If there is a pile, remove it, and if there is a hole, fill it
        in. Hint: use the dropdown menu of options on the "if" block.'
      20hr_farmer_stage9_2_instruction: Next, move me to the hole and fill it with
        TWO shovelfuls of dirt, using the "fill" block.
      20hr_farmer_stage9_3_instruction: Move me to the pile of dirt and tell me how
        many shovelfuls to remove using as few blocks as possible.
      20hr_farmer_stage9_4_instruction: 'Can you help me remove all four piles of
        dirt? Hint: use a repeat block if you can.'
      20hr_farmer_stage9_5_instruction: 'Help me fill in all these holes with 5 shovelfuls
        of dirt. Hint: you can put a "repeat" block inside the "while" block.'
      20hr_farmer_stage9_6_instruction: Remove all the piles of dirt, using as few
        blocks as possible. The new options in the dropdown menu on the "while" block
        tell me if I'm standing on a pile or a hole.
      20hr_farmer_stage9_7_instruction: Wow, I found a really deep hole! I don't know
        how many shovelfuls of dirt it needs. Can you write a program that fills it
        until the ground is even?
      20hr_farmer_stage9_8_instruction: Help me fill in the hole at the end of the
        field, using as few blocks as possible.
      20hr_farmer_stage9_9_instruction: 'Make me remove all these piles of dirt. Try
        to use as few blocks as possible. Hint: try using a "while" block.'
      20hr_maze_stage2_10_instruction: Ok, try the new "repeat until" block - it will
        repeat until I reach the annoying pig.
      20hr_maze_stage2_11_instruction: Ok, one last time for practice - can you solve
        this one using only 4 blocks?
      20hr_maze_stage2_13_instruction: Ok, this is similar, but slightly different.
        Can you do it in only 5 blocks?
      20hr_maze_stage2_14_instruction: 'Use the new "if" block to let me decide when
        to turn. Hint: you only need one more block, but learn how we set it up so
        you can do it on your own next time.'
      20hr_maze_stage2_15_instruction: Ok, this is just like the last puzzle, but
        you need to remember how you used the "if" block and the "repeat" block together.
      20hr_maze_stage2_16_instruction: Me want sunflower! Use an "if" block to get
        me there with the fewest number of blocks.
      20hr_maze_stage2_17_instruction: Ok, let's do that again for practice - this
        isn't very different, but watch out for the chompers!
      20hr_maze_stage2_18_instruction: The "If-else" blocks checks a condition, and
        then does one thing OR another. To get me to the sunflower try to use this
        new block.
      20hr_maze_stage2_19_instruction: |-
        One more practice of the "if-else" block, can you
        get it right on your first try?
      20hr_maze_stage2_2_instruction: This pig is ruffling my feathers. Help me to
        find him!
      20hr_maze_stage2_20_instruction: Can you add just 3 blocks to help me solve
        a more complex maze? If you do it right, I can walk any curvy path no matter
        the length.
      20hr_maze_stage2_3_instruction: Trace the path and lead me to the silly pig.
        Avoid TNT or the feathers will fly!
      20hr_maze_stage2_4_instruction: Guide me to the green evilness! (Watch out for
        TNT)
      20hr_maze_stage2_5_instruction: Keep calm and help me to find the bad pig. Otherwise
        I might get angry!
      20hr_maze_stage2_6_instruction: There's a way I can get to the silly pig using
        only 2 blocks. Can you figure it out?
      20hr_maze_stage2_7_instruction: Try to get me to the green intruder using only
        three blocks.
      20hr_maze_stage2_8_instruction: Help me banish this bad piggy using the fewest
        number of blocks. Try using more than one "repeat times" block.
      20hr_maze_stage2_9_instruction: 'When a block is grey, that means you can''t
        delete it. Solve this puzzle using the "repeat" block that repeats 3 times.
        Try putting these 3 blocks inside the grey "repeat" block: move, move, turn.'
      4-5 Artist 1_instruction: "Help me finish drawing my box. (Each line is 300\npixels
        long) "
      4-5 Artist 10_instruction: |-
        Press "Run" to try the code. Then, repeat it
        enough times to complete the drawing. The colors will be different every time.
      4-5 Artist 11_instruction: |-
        Complete the green lines. The lines are 300 pixels
        long and 15 pixels apart.
      4-5 Artist 2_instruction: |-
        Loop this code using the `repeat` block to complete
        the square.
      4-5 Artist 3.5_instruction: |-
        Try to figure out what happens if you run this
        code (or just press "Run" and try it). Next, repeat the code enough times
        to complete the drawing!
      4-5 Artist 3_instruction: |-
        This rectangular flower bed has a perimeter of 600.
        The long side has a length of 200. Draw the rectangle using as few blocks
        as possible.
      4-5 Artist 4_instruction: |-
        How many degrees are in a circle?  Loop the blocks
        to create a circle of colors.
      4-5 Artist 5_instruction: |-
        What can we replace "???" with to make sure that
        the zombie completes this drawing using the loop provided?
      4-5 Artist 6_instruction: |-
        This equilateral triangle has angles of 60, 60,
        and 60 degrees. Each side is 200 pixels. Complete the drawing.
      4-5 Artist 7_instruction: |-
        This right triangle has angles of 30, 60, and 90
        degrees. The slanted side's length (length of the hypotenuse) is 200 pixels.
        Complete the drawing.
      4-5 Artist 8_instruction: "The halfway line on a soccer field is perpendicular\nto
        the sidelines.   \r\nThis rectangle has a perimeter of 800 pixels total,\nand
        it is 240 pixels long. How tall is it?   \r\n\r\nDraw the bounds and the\nhalfway
        line."
      4-5 Artist 9_instruction: |-
        Draw the right half of this image so that the design
        is symmetrical. The triangles are equilateral and have sides that are 50 pixels
        long.
      4-5 Artist Assessment 1_instruction: |-
        Assessment: Use a loop to draw the equilateral
        triangle. Each side is 300 pixels.
      4-5 Artist For Loops 1_instruction: |-
        Put the numbers 1 through 10 into the
        width blocks and run the code.
      4-5 Artist For Loops 11_instruction: |-
        Complete the "for" block so that it
        counts 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: "What happens if you reverse the \"from\"\nand
        \"to\" numbers? Complete the \"for\" block so that it counts 200, 180,\n160,
        140, 120...0. "
      4-5 Artist For Loops 13_instruction: |-
        This design got started without a "for"
        loop and is taking too many blocks!  Use a "for" block to complete the spiral.  Hint:
        the last line length is 250 pixels.
      4-5 Artist For Loops 14_instruction: |-
        Someone started the code, but then realized
        there must be a quicker way! Use a "for" block to replace the blocks and
        complete the triangular spiral. (Hint: the last line length is 300 pixels.)
      4-5 Artist For Loops 15_instruction: |-
        Someone started the code, but then realized
        there must be a quicker way! Use a "for" block to replace the blocks and
        complete the hexagonal spiral. (Hint: the last line length is 200 pixels.)
      4-5 Artist For Loops 2_instruction: |-
        This is a "for" block. Instead of typing
        1,2,3... 10, the "for" block can repeat the blocks inside it and count the
        numbers for you. Place the number 10 into the "to" section of the "for"
        block.
      4-5 Artist For Loops 3_instruction: |-
        How can we count from 1 to 50? Edit the
        "for" block.
      4-5 Artist For Loops 4_instruction: |-
        Complete the "for" block so that it
        counts from 1 to 10 by 1.
      4-5 Artist For Loops 6_instruction: |-
        Draw squares with sides of 50, 60, 70,
        80, and 90 pixels. You'll need to use the "draw a square" function five
        times.
      4-5 Artist For Loops 8_instruction: |-
        Can you complete the program by placing
        the blocks inside a "for" block that counts from 10 to 200 by 10? You can
        find the "for" block in the Loops category.
      4-5 Artist Free Draw 1_instruction: |-
        Free Draw!  Draw whatever you are inspired
        to create.
      4-5 Artist Functions 1_instruction: Use a repeat loop to draw this triangle.
      4-5 Artist Functions 14 Free play_instruction: |-
        Here, we've provided you with
        several functions.  Use them any way you like inside of one or more loops
        to make pictures that you can share with your friends. Click 'Run' to see
        an example.
      4-5 Artist Functions 15 Assessment_instruction: |-
        Assessment:  Use the "draw
        a square" function to create the squares.  The squares are 50, 100, and 150
        pixels.
      4-5 Artist Functions 2a_instruction: |-
        Now put these blocks into a new function
        called "draw a small triangle" and call on it.
      4-5 Artist Functions 2b_instruction: |-
        Now create a function called "draw a
        small triangle" using the provided blocks.
      4-5 Artist Functions 5_instruction: |-
        Can you modify the "draw a triangle"
        function into a "draw a square" function to change the drawing?
      4-5 Artist Functions 8_instruction: |-
        The "draw a flower" function has a parameter
        that allows you to set the stem height.  Set it to 200 and see what happens.
      4-5 Artist Patterns 1_instruction: "Draw this square using a loop.\r\n\r\nEach\nside
        is 20 pixels long."
      4-5 Artist Patterns 10_instruction: "This code draws two rows of hexagons -\nloop
        the whole thing 4 times to draw the whole honeycomb. \r\n\r\nYou'll\nneed
        to jump back 120 pixels in your outermost loop to make sure the artist\ndoesn't
        draw off the screen.\r\n"
      4-5 Artist Patterns 11_instruction: "How many times do you need to loop this\nto
        draw a half circle? "
      4-5 Artist Patterns 12_instruction: "If you create another loop like this one,\nbut
        turn left instead of right, what happens? \r\n\r\nCan you repeat all of\nthat
        to draw this wave?"
      4-5 Artist Patterns 13_instruction: "Now let's loop that whole thing four\ntimes
        to create this picture frame. Watch out for the corners - you can't\njust
        turn 90 degrees! \r\n\r\nIf looping a 3 degree turn 60 times makes a\nhalf
        circle, which of these blocks of code will make an additional quarter\ncircle
        for the corners?"
      4-5 Artist Patterns 2_instruction: |-
        If you place your square loop inside another
        loop, we call that a nested loop. What do you need to add as an outer loop
        to make sure all 15 squares line up next to each other?
      4-5 Artist Patterns 3_instruction: |-
        Now let's go one level deeper! We've
        nested that whole block of code into another loop, but you need to get the
        artist back in place to draw the next line. Which of these code blocks can
        you place at the end of the outermost loop to draw the whole grid?
      4-5 Artist Patterns 4_instruction: |-
        This diamond has 50 pixel sides and angles
        of 120 and 60 degrees. Use a loop to draw it.
      4-5 Artist Patterns 5.5_instruction: |-
        How many times do you need to repeat this
        block to draw the full grid of diamonds?
      4-5 Artist Patterns 5_instruction: "Repeat this code to make a row of 6 diamonds.\n\r\n\r\nNotice
        that we changed our diamond code to repeat 3 times instead\nof 2 - why do
        you think that is?\r\n"
      4-5 Artist Patterns 6_instruction: |-
        How many times do you need to repeat this
        block to draw the full grid of diamonds?
      4-5 Artist Patterns 7_instruction: |-
        Let's modify the code from the last puzzle
        to make this more complex pattern. Notice how the diamonds overlap now, try
        changing the first "jump backwards" from 100 to 50 (half as far) - now how
        far should the artist go in the second "jump backwards"?
      4-5 Artist Patterns 8_instruction: |-
        Use a loop to draw this hexagon with 40
        pixel sides and 60 degree angles.
      4-5 Artist Patterns 9.5_instruction: |-
        Let's loop this code to draw two rows
        of hexagons. Notice how our second row is shifted to the right.
      4-5 Artist Patterns 9_instruction: "Now repeat this code 3 times and draw the\nwhole
        row. \r\n\r\nEach hexagon is 80 pixels wide from the furthest points\nleft
        to right."
      4-5 Artist Patterns Free Play_instruction: |-
        Free play - try your hand at making
        a pattern of your own!
      4-5 Bee Conditionals 1_instruction: |-
        This cloud is blocking my view! Check
        to see if there's a flower under the cloud, and only get nectar if there's
        a flower. Be careful, it can change!
      4-5 Bee Conditionals 2_instruction: "More clouds! \r\n\r\nCheck underneath\nevery
        cloud to see if it is hiding a flower before you get nectar.  \r\n\r\nRemember:\nNot
        all clouds hide the same thing!"
      4-5 Bee Conditionals 3_instruction: |-
        Now I just want to make honey. Some of
        these clouds might have honeycombs under them. Be sure to check each cloud!
      4-5 Bee Conditionals 4_instruction: |-
        Sometimes this cloud covers a flower,
        and sometimes it covers a honeycomb! Use the if/else block to collect nectar
        if it is a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 5_instruction: "There will be either a flower or a honeycomb\nunder
        each of those clouds!\r\n\r\nUse the `if/else` block to collect nectar\nif
        there is a flower.\r\nOtherwise, make honey (because there is a honeycomb)."
      4-5 Bee Conditionals 6_instruction: "I am not sure how much nectar this flower\nhas,
        but I know it has either 1, 2, or 3 nectar. \r\n\r\nCombine the conditional\nblocks
        (`if` and/or `if/else`) to only get as much nectar as the flower has.\n\r\n\r\nRemember,
        the amount of nectar can change each time you run the puzzle!"
      4-5 Bee Conditionals 7_instruction: "These flowers can have 3, 2, or 1 nectar.\n\r\n\r\nComplete
        the `check purple flower` function and use it to collect\nall of the nectar
        at the flowers."
      4-5 Bee Conditionals 8_instruction: "Write the function for `check flower make\nhoney`.
        \r\n\r\nYour function should check if the purple flower has 3, 2,\nor 1 nectar
        and get all of the nectar. \r\nThen, move forward and make honey."
      4-5 Bee Conditionals Assessment 1_instruction: "**Assessment:** This cloud\nis
        either hiding a flower with one nectar or a honeycomb that needs one honey.
        \ \r\n\r\nComplete\nthe `get nectar or make honey` function, then call it
        to collect the nectar\nor honey. \r\n"
      4-5 Bee Debugging 1_instruction: "These blocks are really bugging me. \r\n\r\nCan\nyou
        fix them?"
      4-5 Bee Debugging 10_instruction: Find the errors and fix them.
      4-5 Bee Debugging 11_instruction: Does this count correctly?
      4-5 Bee Debugging 2_instruction: Help the bee get the nectar and make honey.
      4-5 Bee Debugging 3_instruction: Find the errors and fix them.
      4-5 Bee Debugging 4_instruction: These blocks don't work. What's the pattern?
      4-5 Bee Debugging 5_instruction: Something isn't right here...
      4-5 Bee Debugging 6_instruction: "The purple flower has a different amount\nof
        nectar each time you run the puzzle. \r\n\r\nFix the blocks to get all\nof
        the nectar from the flower each time."
      4-5 Bee Debugging 7_instruction: The function is missing something...
      4-5 Bee Debugging 8_instruction: |-
        This function is fine, but it isn't used
        properly.
      4-5 Bee Debugging 9_instruction: Why isn't the bee making enough honey?
      4-5 Bee Debugging Assessment 1_instruction: 'Assessment: Fix the code.'
      4-5 Bee Nested Loops 1_instruction: Use a loop to collect all of the nectar.
      4-5 Bee Nested Loops 2_instruction: "Collect all of the nectar from each flower.\nUse
        a nested loop. "
      4-5 Bee Nested Loops 3_instruction: |-
        Collect all of the nectar by putting the
        starter code inside another loop.
      4-5 Bee Nested Loops 4_instruction: "Collect all of the nectar from each flower\nand
        make honey at the honeycomb. \r\n\r\nUse a nested loop. "
      4-5 Bee Nested Loops 5_instruction: |-
        Collect all of the nectar by creating
        a nested loop.
      4-5 Bee Nested Loops 6_instruction: Collect all the nectar.
      4-5 Bee Nested Loops 7_instruction: |-
        Put this loop inside another loop to create
        a nested loop and collect all of the nectar from the flowers.
      4-5 Bee Nested Loops 8_instruction: "Collect all of the nectar from these flowers\nby
        nesting a while loop. Replace the inner repeat times block with a while\nblock. "
      4-5 Bee Nested Loops 9_instruction: |-
        Collect all of the nectar from these flowers
        by nesting a while loop inside a repeat.
      4-5 Bee Nested Loops Assessment 1_instruction: |-
        **Assessment:** Collect all
        of the nectar and make all of the honey using loops.
      4-5 Bee Nested Loops Rows_instruction: |-
        Gather nectar from the rows of flowers!
        Use a nested loop.
      4-5 Maze 1 (copy 1)_instruction: |-
        Dear person. Me zombie. Must... get... to
        sunflower.
      4-5 Maze 1_instruction: |-
        Dear person. Me zombie. Must... get... to
        sunflower.
      4-5 Maze 10_instruction: Can you get to the sunflower using only four blocks?
      4-5 Maze 11_instruction: Can you get to the sunflower using only six blocks?
      4-5 Maze 12_instruction: |-
        Ok, this is slightly different. Can you do it in
        only six blocks?
      4-5 Maze 13_instruction: Get me to the pig!
      4-5 Maze 14_instruction: Get me to the pig! Use the Repeat until block.
      4-5 Maze 2 (copy 1)_instruction: |-
        Get the zombie to the sunflower, but avoid
        the chomper!
      4-5 Maze 2_instruction: |-
        Get the zombie to the sunflower, but avoid
        the chomper!
      4-5 Maze 3 (copy 1)_instruction: Must... get... to sunflower.
      4-5 Maze 3_instruction: Must... get... to sunflower.
      4-5 Maze 4 (copy 1)_instruction: Try the "repeat" block to use fewer blocks...
      4-5 Maze 5 (copy 1)_instruction: |-
        Can you solve this puzzle using the fewest number
        of blocks possible?
      4-5 Maze 5_instruction: |-
        Can you solve this puzzle using the fewest number
        of blocks possible?
      4-5 Maze 6 (copy 1)_instruction: |-
        Can you solve this puzzle using the fewest number
        of blocks possible?
      4-5 Maze 6_instruction: |-
        Get me to the sunflower using the fewest number of
        blocks possible!
      4-5 Maze 7_instruction: |-
        Get the zombie to the sunflower quickly!  Can you
        solve the puzzle in fewer than 11 blocks?
      4-5 Maze 8_instruction: "Get the zombie to the sunflower using as few blocks\nas
        you can.  \r\n(Avoid the chompers!)"
      4-5 Maze 9_instruction: "Now we have a new block called `repeat until`.  \r\nThis\nwill
        let us keep looping commands until the zombie gets the sunflower.  \r\n\r\nUse\nthe
        new `repeat until` block to solve this puzzle in as few commands as possible."
      4-5 Maze Assessment 1_instruction: |-
        Assessment: Get to the sunflower using
        as few blocks as possible.
      4-5 Maze Conditionals 1_instruction: |-
        Use the `repeat until` block to get the
        zombie to the sunflower.
      4-5 Maze Conditionals 10_instruction: "Can you add just 3 blocks to help the\nzombie
        solve a more complex maze? \r\n\r\nIf you do it right, he can walk\nany curvy
        path no matter the length!"
      4-5 Maze Conditionals 2_instruction: |-
        Use the `repeat until` block to get the
        zombie to the sunflower.
      4-5 Maze Conditionals 3_instruction: "Use the `if` block to help me decide\nwhen
        to turn. \r\n"
      4-5 Maze Conditionals 4_instruction: |-
        Ok, solve this one just like the last
        puzzle, but you need to remember how you used the `if` and `repeat until`
        blocks together.
      4-5 Maze Conditionals 5_instruction: "\"Me want sunflower!\"  \r\n\r\nUse an\n`if`
        statement to get the zombie to the sunflower with the fewest number of\nblocks."
      4-5 Maze Conditionals 6_instruction: "\"Eat sunflower!\"\r\n\r\nUse an `if`\nstatement
        to get the zombie to the sunflower with the fewest number of blocks."
      4-5 Maze Conditionals 7_instruction: |-
        The solution to this puzzle isn't very
        different, but watch out for the chompers!
      4-5 Maze Conditionals 8_instruction: "The `if/else` block checks a condition,\nand
        then does one thing OR another. \r\n\r\nUse this new block to get me to\nthe
        sunflower."
      4-5 Maze Conditionals 9_instruction: "One more practice puzzle with the `if/else`\nblock!\r\n\r\nTrace
        it with your finger to see if you can figure it out on\nyour first try."
      4-5 Maze Conditionals Assessment 1_instruction: |-
        **Assessment:** Use a `repeat
        until` and an `if/else` block to get me to the sunflower in as few blocks
        as possible.
      4-5 Nested Loops 11_instruction: |-
        Can you draw these 10 squares of this sidewalk
        using a nested loop? Each square is 30 pixels.
      4-5 Nested Loops 12_instruction: |-
        Can you draw these 36 triangles using a nested
        loop?
      4-5 Nested Loops 2_instruction: "Now nest this loop inside another loop to\ndraw
        10 triangles.  This is called a \"nested\" loop.  "
      4-5 Nested Loops 3_instruction: "Create a sun by nesting the starter code in\nanother
        loop.\r\n\r\nTo get this cool design with a hollow center, you'll\nneed to
        jump forward by the length of the triangle before turning."
      4-5 Nested Loops 6_instruction: |-
        Can you draw a hexagon by looping the triangle
        code?
      4-5 Nested Loops 7_instruction: "Loop this design 10 times. \r\n\r\nHow much\ndo
        you have to turn each time you loop?"
      4-5 Nested Loops 8_instruction: "Loop this shape 6 times. \r\n\r\nHow much\ndo
        you have to turn each time you loop? "
      4-5 Nested Loops Assessment 1_instruction: |-
        Assessment: Use a nested loop to
        complete the design.
      4-5 While Loops 1_instruction: |-
        Move me to the hole and fill it with two shovelfuls
        of dirt, using the `fill` block.
      4-5 While Loops 2_instruction: |-
        Move me to the pile of dirt and remove it with
        5 shovel scoops, using the `remove 1` block.
      4-5 While Loops 3_instruction: "Use as few blocks as possible to complete this\npuzzle!
        \ \r\n\r\nMove me to the pile and remove all the dirt, then move to\nthe hole
        and fill it completely."
      4-5 While Loops 4_instruction: "Wow, look at that! \r\n\r\nI don't know how\nmany
        shovelfuls of dirt this hole needs.  \r\nCan you write a program that\nkeeps
        using the `fill` block until the ground is even?  "
      4-5 While Loops 5_instruction: |-
        Wow, now there are two deep holes! Can you
        write a program that fills them both until the ground is even?
      4-5 While Loops 6_instruction: |-
        Wow, now there is a large pile of dirt! Can
        you write a program that removes all of it so the ground is even?
      4-5 While Loops 7_instruction: |-
        Wow, now there are three piles of dirt! Can
        you write a program that removes each of them until the ground is even?
      4-5 While Loops 8_instruction: |2-
         There is a really deep hole and a really large
        pile of dirt.  How many shovelfuls of dirt need to be moved around to make
        the ground flat?
      4-5 While Loops Assessment 1_instruction: |-
        There are a lot of holes and piles.  Help
        me to fill and remove them to make the ground flat.
      App Lab test_instruction: test
      Artist - Nested Loops 11_instruction: |-
        Can you draw these 10 squares of this sidewalk
        using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |-
        Can you draw these 36 triangles using a nested
        loop?
      Artist - Nested Loops 6_instruction: |-
        Can you draw a hexagon by looping the triangle
        code?
      Artist - Nested Loops Assessment 1_instruction: |-
        Use a nested loop to complete
        the design.
      Artist Inspiration_instruction: "Free Play Inspiration: You've\nnow learned
        everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n \r\nWant to know how our inspiration pattern was made? "
      Bergeron Robot Maze1_instruction: "Can you help me catch the naughty pig? Stack
        a couple\nof `move forward` blocks below the `when run` block and press \"Run\". "
      Brad Spooky House Copy_instruction: |-
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
        Play with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |-
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
        Play with the pen width to see how different your drawings look!
      Busy Bee 2_instruction: |-
        This bee has a lot of work to do! Do you notice any
        patterns that you can use to simplify your code?
      Busy Bee_instruction: |-
        This bee has a lot of work to do! Do you notice any
        patterns that you can use to simplify your code?
      C3-Farmer While Loops 5_instruction: |-
        Wow, now there are two deep holes! Can you
        write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |-
        Wow, now there is a large pile of dirt! Can
        you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |-
        Wow, now there are three piles of dirt! Can
        you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops Assessment 1_instruction: |-
        There are a lot of holes and piles.  Help
        me to fill and remove them to make the ground flat.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect the\nnectar
        from these flowers? "
      Course 2 Maze Loops 1_instruction: Can you get me to the pig using 5 blocks?
      Course 4 Artist 1_instruction: "Help me draw a box. (Each line is 200 pixels\nlong) "
      Course 4 Artist 10_instruction: "Click here to see the full instructions again!\r\n\r\nHere\nis
        the code for an interesting shape.  What happens when you repeat it multiple\ntimes,
        turning between each iteration?   Notice that the turns in this shape\nadd
        up to 420 degrees, which means that when your artist is done drawing,\nit
        will be facing a different direction than when you started.  That new direction\nis
        exactly 60 degrees to the right of where you began."
      Course 4 Artist 11_instruction: |-
        Now for a challenge!  Feel free to use trial
        and error. You are not expected to get the image perfect the first time.   Want
        to see more hints?  Click here!
      Course 4 Artist 12_instruction: "Want a second peek at the inspiration design\nor
        the hints?  Click here!\r\n\r\nOtherwise, make a design all your own!"
      Course 4 Artist 13_instruction: |-
        Still playing?  Here is a blank canvas where
        you can design anything you want!
      Course 4 Artist 2_instruction: |-
        Can you use a loop to draw the greyed out square?  (Each
        side is 300px long)
      Course 4 Artist 20_instruction: |-
        Still playing?  Here is a blank canvas where
        you can create whatever you want!
      Course 4 Artist 3_instruction: |-
        Try to figure out what happens if you run this
        code (or press "Run" to test it). Then, repeat it enough times to complete
        the drawing.
      Course 4 Artist 4_instruction: |-
        How many degrees are in a circle?  Fill in
        the repeat block with that number to create a circle of colors.
      Course 4 Artist 5_instruction: |-
        Draw the other half of this design so it's
        symmetrical. The triangles are equilateral and are 50 pixels long. Hint: You
        may have to run the code several times to figure out all of the blocks that
        need to be added.
      Course 4 Artist 6_instruction: |-
        Complete the code to draw these three, equilateral
        triangles.
      Course 4 Artist 7_instruction: "Now nest this loop inside another loop to draw\n10
        triangles. This is called a nested loop. Hint: All 10 triangles complete\na
        360 degree rotation.  "
      Course 4 Artist 8_instruction: |-
        Draw this sun by looping this whole block of
        code multiple times.
      Course 4 Artist 8a_instruction: |-
        Remember this shape?  Now we're going to
        let you build it without giving you any blocks to start!
      Course 4 Artist 9_instruction: "Loop this design 10 times and make sure to\nturn
        between each shape that's drawn. \r\n"
      Course 4 Artist Binary 1_instruction: "Here's a function that takes a binary\nstring
        of 1's and 0's and instructs the artist to follow them from left\nto right,
        top to bottom.  The artist will fill-in the squares when it sees\na 1 and
        ignore the square when it sees a 0. \r\n\r\nRun this code to see how\nthe
        artist uses binary to draw this pattern."
      Course 4 Artist Binary 1a_instruction: "Here's a function that takes a binary\nstring
        of 1's and 0's and instructs the artist to follow them from left\nto right,
        top to bottom.  The artist will fill-in the squares when it sees\na 1 and
        ignore the square when it sees a 0. \r\n\r\nRun this code to see how\nthe
        artist uses binary to draw this pattern."
      Course 4 Artist Binary 2_instruction: |-
        Which of these binary strings could
        you loop 8 times to draw this image?
      Course 4 Artist Binary 3_instruction: |-
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      Course 4 Artist Binary 4_instruction: |-
        Each binary string represents one row
        of this picture. Can you rearrange them so it draws a smiley face instead
        of a frowny face?
      Course 4 Artist Binary 5_instruction: |-
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      Course 4 Artist Binary 6_instruction: |-
        What is the shortest binary string that
        you can repeat to draw this image?
      Course 4 Artist Binary 7_instruction: Finish this drawing.
      Course 4 Artist Binary Free Play 2_instruction: 'Free Play: Here''s a blank
        canvas for you to draw on. रमाईलो गर्नुहोस्!'
      Course 4 Artist Binary Free Play 2a_instruction: "Here's a higher resolution\ncanvas
        to draw on - 16 pixels by 16 pixels!\r\n\r\nSee what happens when we\nstart
        to get creative with the bits?"
      Course 4 Artist Binary Free Play 2b_instruction: Click here to see hints.
      Course 4 Artist Binary Free Play_instruction: |-
        Free Play: Draw whatever you
        like with binary!
      Course 4 Artist Binary pre1_instruction: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \r\n\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      Course 4 Artist Binary ryan_instruction: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \r\n\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      Course 4 Artist For Loops 1_instruction: |-
        Use a repeat block to draw this triangle
        that is 50 pixels wide.
      Course 4 Artist For Loops 11_instruction: "Remember back in a previous stage\nwhen
        we used a variable to control the number of sides in a shape? We are\ngoing
        to do the same thing with the `counter` variable now. This pattern starts\nwith
        a triangle and adds one side at a time until it draws a decagon (10 sides).\nEach
        side should be 100 pixels long. "
      Course 4 Artist For Loops 11a_instruction: "Let's put it all together!  Using\nyour
        knowledge of `for` loops and the `counter` variable, create this drawing\nwhere
        each shape has two more sides than the last.  Make sure that each side\nis
        10 times as long as the number of sides in the polygon.\r\n\r\nVery little\nof
        the code has been provided for you."
      Course 4 Artist For Loops 14_instruction: |-
        If you turn a little bit more or
        less than you normally would for a shape, it creates a neat effect. Try using
        some of the code from the last level, but turning 89 degrees to create this
        twisted square spiral.
      Course 4 Artist For Loops 15_instruction: |-
        Free Play: Try making some drawings
        of your own using "for loops". We've added a few useful variables for you
        as well.
      Course 4 Artist For Loops 2_instruction: |-
        I've put the code for drawing a
        triangle inside a for loop that counts from 50 to 100 by 10.  NOTE: Make sure
        you look at the code before you hit "Run".
      Course 4 Artist For Loops 3_instruction: |
        Use the last puzzle as a reference
        to complete this one.  The smallest triangle has 20 pixel sides, the largest
        has 200 pixel sides, and each triangle is 20 pixels larger than the last.
      Course 4 Artist For Loops 4_instruction: "How would you modify what you've\nlearned
        to draw these squares? They start at 15 pixels long, the largest is\n300 pixels
        long, and each square is 15 pixels larger than the last. "
      Course 4 Artist For Loops 5_instruction: "Good job on the last puzzle! Let's\nuse
        that \"counter\" variable block again to draw this cool picture. "
      Course 4 Artist For Loops 6a_instruction: |-
        Make three small changes to the
        code from the last level to get this!
      Course 4 Artist For Loops 8_instruction: "Just one little change to the code\nfrom
        the last image can create this drawing. Can you figure out what that\nchange
        is?\r\n\r\nHint:  You need to remove something!"
      Course 4 Artist For Loops 8a_instruction: |-
        Just one little change to the code
        from the last image can create this image. Can you figure out what that change
        is?
      Course 4 Artist For Loops Challenge_instruction: |-
        **Challenge:** Can you figure
        out how to use all of the things you've learned to create this image of polygons,
        all with 40 pixel sides?
      Course 4 Artist For Loops Challenge_a_instruction: "Can you figure out how\nto
        use all of the things you've learned to create this image?\r\n\r\nNeed\na
        hint? Click here."
      Course 4 Artist For Loops inspire_instruction: "Free-Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n\r\nNeed a hint? Click here."
      Course 4 Artist Functions 1_instruction: |-
        Can you draw a square that is 100
        pixels in length, using a loop?
      Course 4 Artist Functions 11_instruction: |-
        Check out this code that draws a
        cube - can you move it into a function called "Draw a Cube"
      Course 4 Artist Functions 2_instruction: |-
        Can you draw 3 squares 20 pixels
        apart from one another? Hint: each square is 100 pixels in size
      Course 4 Artist Functions 8_instruction: "Are you getting the hang of how to\nuse
        function blocks? Let's modify this square so that it is 200 pixels in\nsize.
        Hint: click on \"edit\" to change the size of the \"draw a square\"\nfunction
        editor. Remember to click on \"save and close\" to get out of the\nfunction
        editor. "
      Course 4 Artist Functions Inspiration_instruction: |-
        Click here to see the hints
        again.
      Course 4 Artist Functions challenge_instruction: |-
        Click here to see the hints
        again.
      Course 4 Artist Inspire_instruction: "Want a second peek at the inspiration
        design\nor the hints?  Click here!\r\n\r\nOtherwise, make a design all your
        own!"
      Course 4 Artist Params 13_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome!
      Course 4 Artist Params 3_instruction: "Awesome, can you draw each of these\ntriangles
        with that new function? The first is 25 pixels long, the second\nis 50, and
        the third is 75. "
      Course 4 Artist Params 6_instruction: "Let's edit this \"draw a shape\" function.\nIt
        already has a \"length\" parameter. Now, let's edit the function to also\nadd
        a \"sides\" parameter. Remember the angle to turn for a given shape is\n360
        divided by the sides it has. Hint: lengths for each shape are the triangle\nis
        100 pixels, the hexagon is 25 pixels and the square is 50 pixels. "
      Course 4 Artist Params 8_instruction: |
        Can you figure out how to draw this
        shape? Here's a hint create a new function with 6 sides called a hexagon.
      Course 4 Artist Params 9_instruction: |-
        Do you remember when we used the counter
        loop but removed a loop within? Let's have some fun and use the "draw a
        shape" function with "sides" and "length" parameters. Can you re create
        these shapes? The square counter should be 5/100/5, the triangle counter should
        be 10/100/10 and the hexagon is 2/100/2.
      Course 4 Artist Vars 1_instruction: "Let's draw an equilateral triangle. \r\n\r\nIt\nhas
        to be exactly 100 pixels long on each side."
      Course 4 Artist Vars 11_instruction: |-
        Here’s more complicated code using the
        same concepts from the last puzzle - what should you set the "sides" variable
        to in order to draw this picture made of squares?
      Course 4 Artist Vars 12_instruction: |-
        Let's set the "sides" variable to
        5. The more sides we add to this algorithm, the bigger this whole pattern
        gets! Notice that there is another variable called "length". We can now
        use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      Course 4 Artist Vars 13_instruction: "When a shape has lots of sides, each\nside
        needs to be shorter if you want the whole pattern to fit on the screen.\n\r\nLet's
        recreate the algorithm for this amazing pattern, but instead of\nmanually
        setting the `length` variable, let's use a math block with the `sides`\nvariable
        inside to make sure that each shape fits correctly. The perimeter\nof each
        polygon is 300 pixels.\r\nNeed some hints?  Click here."
      Course 4 Artist Vars 14_instruction: "Free Play: Check it out! Now your algorithm\nis
        nested within one more loop. Experiment with changing the values of your\ntwo
        variables to draw cool patterns.\r\n\r\nFor even more effect, try playing\nwith
        color!  Use random colors inside loops to see how it changes your design."
      Course 4 Artist Vars 2_instruction: |-
        Instead of using "move forward by 150,"
        the "move" block is now referencing a variable called "length." Can you
        set "length" to 150 to draw this new triangle?
      Course 4 Artist Vars 4_instruction: |-
        Now I want to make a rectangle that is
        twice as tall as it is wide. We've got a variable called "width" that needs
        to be set to 100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 5_instruction: |-
        Use the variable "sides" to control
        how many times this loop gets run.
      Course 4 Artist Vars 6_instruction: "Here’s some code that can draw any regular\npolygon.
        There’s a new variable called sides that is set to 4. Can you use\nthe sides
        variable (along with the math block) to turn the right amount regardless\nof
        how many sides there are in the polygon?\r\n\r\nClick here to go back to\nthe
        hint!"
      Course 4 Artist Vars 7_instruction: "Use what you learned in the last puzzle\nto
        create this hexagon using the \"sides\" variable.\r\n\r\nSee how you could\nchange
        just one value to draw a triangle,  square, pentagon, or octagon?"
      Course 4 Artist Vars 8_instruction: |-
        Free Play: Experiment with the number
        of sides this shape has. Can you change the algorithm so that the overall
        size of the shape stays the same, no matter how many sides it has? Hint: If
        you divide your starting length by the number of sides, the length of each
        side will get shorter as the number of sides gets higher.
      Course 4 Bee 1_instruction: "The bee can't tell what's under the cloud! \r\n\r\nUse\nthe
        `if` block to check whether there is a flower under the cloud. \r\n\r\nGet\nnectar
        one time, ONLY if there is a flower."
      Course 4 Bee 2_instruction: |-
        Use the "if/else" block to check each object
        to see if it's a flower or a honeycomb . If it's a flower, collect one nectar...otherwise,
        make one honey!
      Course 4 Bee 3_instruction: |-
        The unknown object is either a flower or a honeycomb.
        This time, use the if/else block to collect one nectar if it is a flower,
        else make one honey (because then it would be a honeycomb).
      Course 4 Bee For Loops 1_instruction: |-
        Use a loop to collect the nectar
        from each flower.
      Course 4 Bee For Loops 10_instruction: |-
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 9, then 6, and then 3 nectar?
      Course 4 Bee For Loops 2_instruction: |-
        Here's a new kind of loop, called the
        "for" loop. This particular for loop will count from 1 to 5 by 1, and run
        the contents of the loop each time it counts. Help the Bee get the nectar.
      Course 4 Bee For Loops 6_instruction: |-
        You can also use a for loop to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      Course 4 Bee For Loops 8_instruction: |-
        Can you use the loop variable to
        control movement and nectar collection?
      Course 4 Bee For Loops 9_instruction: |-
        The last number in your for loop is
        called the "increment,"  and each time the loop is run the counter variable
        changes by the increment. Try collecting these flowers using an increment
        of 2.
      Course 4 Bee Loops 5 NEW_instruction: |-
        Here are three flowers. Can you find
        the pattern of instructions that you need to repeat 3 times to collect the
        nectar with the fewest number of blocks?
      Course 4 Bee Loops 5a NEW_instruction: |-
        Now, use loops to help the bee collect
        all the nectar on it's way to the honeycomb with as few blocks as possible.  When
        you get there, don't forget to make honey!
      Course 4 Bee Params 1_instruction: |-
        Write a sequence to collect all of the
        nectar using `get 3 nectar` which turns, moves to collect the nectar, and
        then returns to the original location.
      Course 4 Bee Params 2_instruction: |-
        Modify the "get 3 nectar" function so
        it makes me turn right instead of left to the flowers.
      Course 4 Bee Params 3 (copy 1)_instruction: |-
        Now there are flowers on both
        sides! Maybe you can use a parameter so that the same function works for flowers
        on either side. I've added a parameter called "direction" to the function.
        If the "direction" parameter equals 0 I should turn left, if it's 1 I should
        turn right.
      Course 4 Bee Params 3_instruction: "Now there are flowers on both sides! We've\nadded
        variables called \"left\" and \"right\" for you to use, and added a\nparameter
        called \"direction\" to \"get 3 nectar\". Edit \"get 3 nectar\"\nso that the
        bee turns the correct direction when the variables \"left\" or\n\"right\"
        are passed into the function.  "
      Course 4 Bee Params 4 (copy 1)_instruction: |-
        Try using your new function to
        collect all of the flowers. Remember, 0 = left and 1 = right.
      Course 4 Bee Params 4 - Two WhenRun_instruction: |-
        Try using your new function
        to collect all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 4 backup_instruction: |-
        Wouldn't it be nice if we could
        collect all of these nectars with the a single function? Try adding a new
        parameter to your function called "nectars" to control the amount of nectar
        to collect. You'll probably want to rename the function too!
      Course 4 Bee Params 4_instruction: |-
        Try using your new function to collect
        nectar from all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 5_instruction: |-
        Let's start from scratch - can you create
        a new function called "get 5 nectar" with a direction parameter?
      Course 4 Bee Params 6 (copy 1)_instruction: |-
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 6_instruction: |-
        Wouldn't it be nice if we could collect
        all of these nectars with a single function? Try adding a new parameter to
        your function called "nectar units" to control the amount of nectar to collect.
        You'll probably want to rename the function too!
      Course 4 Bee Params 7 (copy 1)_instruction: |-
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 7_instruction: |-
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 8_instruction: |-
        Challenge: Now there's honey to deal with
        too! Rewrite your function to use both the number of honey units and the number
        of nectar units.  How would you use those numbers to decide what you should
        do?
      Course 4 Bee Params Ex_instruction: |-
        Try using your new function to collect
        all of this nectar.
      Course 4 Binary 1_instruction: |-
        Here's a function that takes a binary string
        of 1's and 0's and instructs the farmer to turn on the go from left to right,
        top to bottom, turning on the squares where the number has a zero. Run the
        code provided to see how the farmers uses binary to draw an image.
      Course 4 Binary 3_instruction: |-
        Can you draw this pattern by looping a single
        binary string?
      Course 4 Binary 5 (copy 1)_instruction: |-
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 5_instruction: |-
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 6 (copy 1)_instruction: |-
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 6_instruction: |-
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 7_instruction: |-
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 EC 1a_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 1b_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 2a_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 2b_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 2c_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 2d_instruction: No rules. No clues. Just the challenge!
      Course 4 EC 3_instruction: "Use what you learned in the previous level to\ndraw
        an image like this. Note: The code becomes more simple if you incorporate\nparameters. "
      Course 4 EC 3a_instruction: |-
        Extreme Challenge: No rules. No clues. Just the
        challenge!
      Course 4 Maze 1_instruction: Get the angry bird to the pig!
      Course 4 Maze 2_instruction: Avoid the TNT!
      Course 4 Maze 3_instruction: 'Program the angry bird to get to the pig. '
      Course 4 Maze 4_instruction: |-
        Try the "repeat" block to use fewer blocks
        when solving this puzzle...
      Course 4 Maze 5_instruction: |-
        Can you solve this puzzle using the fewest number
        of blocks possible?
      Course 4 Maze 6_instruction: |-
        Can you solve this puzzle using the fewest number
        of blocks possible?
      Course 4 Play Lab For Loops 2_instruction: |-
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Lab Params 1_instruction: |-
        Here's a function called `jump` that
        causes your main character to jump up 100 pixels. Run the program and use
        the jump function to collect all of the flags by moving the dog with the arrow
        keys.
      Course 4 Play Lab Params 10_instruction: "We've added one last function for\nyou.
        \r\n\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\r\n\r\nFor\nexample:
        \"player_score\" > 6\r\n\r\nPlay the game, and make it to level 3\nto move
        to the next puzzle. "
      Course 4 Play Lab Params 2_instruction: "Now we've got flags that are too\nhigh
        for our current jump! Let's use both the \"up\" and \"down\" arrows\nso that
        we can have multiple jump heights.  \r\n\r\nWe need to add a parameter\nto
        our jump function called \"height\".  The up arrow should cause the dog\nto
        jump 200 pixels and the down arrow should make it jump only 100 pixels.\n"
      Course 4 Play Lab Params 3_instruction: "We have added another parameter to\nthe
        jump function so that we can use it with other actors. Each actor is represented\nby
        a number, starting from one. Edit the \"jump\" function so that it uses\nthe
        \"actor\" parameter to make the correct character jump. "
      Course 4 Play Lab Params 4_instruction: "Here's a function called `patrol`.\n\r\n\r\nEdit
        `patrol` to move Cat up 400 pixels and then down 400 pixels."
      Course 4 Play Lab Params 5_instruction: |-
        Edit the the "patrol" function to
        add an "actor" parameter, so that we can call it for each of the actors
        on the screen. Remember, the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6_instruction: |-
        Add another parameter called "speed"
        to the "patrol" function. Try using a "set speed" block with the new "speed"
        parameter to help Penguin get both flags before the other sprites even get
        one.
      Course 4 Play Lab Params 7_instruction: "Let's have some fun! Look at the\ncode
        provided to see if you can figure out what each block does.  \r\nWhen\nyou're
        done, use the arrow keys to control Dog and collect all of the flags.\r\nNOTE:\nYou
        don't need to make any changes to the program"
      Course 4 Play Lab Params 8_instruction: |-
        Use the `when actor touches` block
        to send Dog back to the top-left ONLY if Dog touches any of the other actors.
      Course 4 Play Lab Params 9_instruction: "Here's our game from an earlier stage,\nbut
        most of the code is hidden. There’s a new function `score_points.`\r\n\r\nEdit\nthe
        function so that a new parameter called `points` can be added to `player_score`.\n\r\n\r\nThe
        variable `player_score` should increase each time Dog tags Cat\nwith pie,
        and decrease each time that Cat tags Dog with a sandwich.\r\n\r\nNote:\nWhen
        you're done, click \"Run\" to play.  When Dog scores 6 points, you will\nmove
        on to the next puzzle. "
      Course 4 Play Lab Vars 1_instruction: |-
        This time you don't have to write any
        code, just hit "Run" to play the game! In this game, you're the dog who
        is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      Course 4 Play Lab Vars 2_instruction: |-
        The race in that last puzzle wasn't
        very fair! Change the `dog_speed` variable to make sure you can collect more
        flags than Cat. The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3_instruction: |-
        Use the left and right arrows to move,
        and the up arrow to jump. See if you can collect all of the flags.
      Course 4 Play Lab Vars 4_instruction: |-
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags.
      Course 4 Play Lab Vars 5_instruction: "Let's build a game! First we'll need\na
        score. Rebuild the code that you saw in the last level to set the score\nto
        10. "
      Course 4 Play Lab Vars 6_instruction: "Use the right arrow to throw pie.\r\n\r\nIn\nour
        game, how should we score points? Add 1 to your \"points\" variable each\ntime
        Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\"\nevent
        to trigger an update to your score. You can increment your variable\nby setting
        \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to
        pass the level."
      Course 4 Play Lab Vars 7_instruction: |-
        Nice, now let's make sure this game
        isn't too easy to play. Any time Dog (actor 1) gets hit by a sandwich from
        Cat (actor 2), you should lose a point. Start with 10 points so it's not
        too hard. Let your score drop down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 9_instruction: "Free Play time! Here are all of the\nvariables
        we've played with so far in this stage, as well as a few more in\ncase you
        want them. \r\n\r\nNotice that there are now so many blocks in our\ntoolbox
        that they need to be organized!  Here, we've put each piece into\nan appropriate
        category.  Take some time to explore everything that is available.\nWhen you're
        done browsing, make a game or story using repeats, variables,\nand events.
        \ \r\n\r\nHint: scroll down to see all the commands in the workspace."
      Course 4 Play Labs For Loops 1_instruction: |-
        Let's make the dog speak every
        number from 1 to 100. Use a `for` loop and the counter block to speak the
        counter variable each time the loop is run.
      Course 4 Play Labs For Loops 2_instruction: |-
        This time, help Olive the Cat
        count only the odd numbers from 1 to 101.
      Course 4 Play Labs For Loops 3_instruction: |-
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making Pirate Pegleg
        count from 10 up to 1000, adding 10 at a time.
      Course 4 Play Labs For Loops 7_instruction: |-
        Could you use a for loop to help
        me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Playlab For Loop Freeplay_instruction: |-
        Freeplay: Use everything you've
        learned so far to make a game that includes a `for` loop!
      Course 4 Playlab For Loops 4b_instruction: "Now, these two characters are going\nto
        race!  \r\n\r\nEach of them will move `counter` steps at a time, but their\ncounters
        will have different values because of the `for` loops.  \r\n\r\nCan\nyou change
        the increment in one of the loops so that the race is a tie?"
      Course 4 Playlab For Loops 5b_instruction: |-
        Adjust the interval on these `for`
        loops so that the two characters end in the exact same place.
      Course 4 Playlab For Loops 6b_instruction: "Edit this `for` loop to create\na
        game that's fun for you to play! \r\nPress \"Run\" and click Madame Unicorn\nas
        many times as you can.  Can you beat our score of 24? "
      Course 4 SCF 1_instruction: |-
        Use the suggested functions to draw four rows
        of hexagons. Notice how our even numbered rows are shifted to the right?
      Course 4 SCF 1a_instruction: |-
        Can you figure out how to collect all of this
        nectar with the fewest blocks possible?
      Course 4 SCF 1b_instruction: |-
        Can you figure out how to collect all of this
        honey with the fewest blocks possible?
      Course 4 SCF 2_instruction: "Use what you learned in the previous level to\ndraw
        an image like this. Note: The code becomes more simple if you incorporate\nparameters. "
      Course 4 SCF 3_instruction: "Use what you learned in the previous level to\ndraw
        an image like this. Note: The code becomes more simple if you incorporate\nparameters. "
      Course 4 SCFL 1_instruction: |-
        Solve this puzzle using the fewest number of
        blocks possible.
      Course 4 SCFL 1a_instruction: |-
        Can you get Skrat to his acorn using as few
        blocks as possible?
      Course 4 SCFL 1b_instruction: |-
        Can you get Skrat to his acorn using as few
        blocks as possible?
      Course 4 SCFL 2_instruction: |-
        Solve this puzzle using the fewest number of
        blocks possible.
      Course 4 SCFL 3_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 4_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 5_instruction: Can you figure out how to re-create this drawing?
      Course 4 SCFL 6_instruction: |-
        Can you figure out how to re-create this drawing
        with a single loop?
      Course 4 SCFL 7_instruction: |-
        The artist wants to catch some waves! Can you
        figure out how to re-create this drawing?
      Course 4 SCV 1_instruction: Click here to view the instructions again.
      Course 4 SCV 2_instruction: Click here to view the instructions again.
      Course 4 SCV 3_instruction: "Now for a game of tag!  Tag Cat to get 2 points.\nTag
        Penguin to get 3 points.  Get exactly 10 points to win!\r\nBut be careful,\nwhen
        Cat and Penguin tag each other, they take points away.\r\n\r\nAdd the\nblocks
        necessary to make this game work the way it's been explained.  How\nwill you
        get Dog to move in all directions using the arrow keys?  How will\nyou add
        points when Dog tags Cat or Penguin?  How will you subtract points\nwhen Cat
        and Penguin touch?"
      Course 4 SCV 4_instruction: |-
        Solve this puzzle with the fewest number of blocks
        possible.
      Course 4 SCV 5_instruction: |-
        Solve this puzzle with the fewest number of blocks
        possible.
      Course 4 SCV 6_instruction: Click here to view the instructions again.
      CourseF_PlayLab_vars10_instruction: "Free Play time! Here are all of the\nvariables
        we've played with so far in this stage, as well as a few more in\ncase you
        want them. \r\n\r\nNotice that there are now so many blocks in our\ntoolbox
        that they need to be organized!  Here, we've put each piece into\nan appropriate
        category.  Take some time to explore everything that is available.\nWhen you're
        done browsing, make a game or story using repeats, variables,\nand events.
        \ \r\n\r\nHint: scroll down to see all the commands in the workspace."
      CourseF_PlayLab_vars2_instruction: |-
        The race in that last puzzle wasn't
        very fair! Change the `dog_speed` variable to make sure you can collect more
        flags than Cat. The first to collect 10 flags wins!
      CourseF_PlayLab_vars3_instruction: |-
        Use the left and right arrows to move,
        and the up arrow to jump. See if you can collect all of the flags.
      CourseF_PlayLab_vars4_instruction: |-
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags.
      CourseF_PlayLab_vars5_instruction: "Let's build a game! First we'll need\na
        score. Rebuild the code that you saw in the last level to set the score\nto
        10. "
      CourseF_PlayLab_vars6_instruction: "Use the right arrow to throw pie.\r\n\r\nIn\nour
        game, how should we score points? Add 1 to your \"points\" variable each\ntime
        Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\"\nevent
        to trigger an update to your score. You can increment your variable\nby setting
        \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to
        pass the level."
      CourseF_PlayLab_vars7_instruction: "Use the right arrow to throw pie.\r\n\r\nIn\nour
        game, how should we score points? Add 1 to your \"points\" variable each\ntime
        Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\"\nevent
        to trigger an update to your score. You can increment your variable\nby setting
        \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to
        pass the level."
      CourseF_PlayLab_vars8_instruction: "Use the right arrow to throw pie.\r\n\r\nIn\nour
        game, how should we score points? Add 1 to your \"points\" variable each\ntime
        Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\"\nevent
        to trigger an update to your score. You can increment your variable\nby setting
        \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to
        pass the level."
      CourseF_PlayLab_vars9_instruction: |-
        Nice, now let's make sure this game
        isn't too easy to play. Any time Dog (actor 1) gets hit by a sandwich from
        Cat (actor 2), you should lose a point. Start with 10 points so it's not
        too hard. Let your score drop down from 10 to 0 to pass the level.
      Crack Random Substitution_instruction: Instructions
      Crack Random Substitution_2018_instruction: Instructions
      Crack a Caesar Cipher_instruction: Instructions
      Crack a Caesar Cipher_2018_instruction: Instructions
      Food Fight!_instruction: "We've added one last function for\nyou. \r\n\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\r\n\r\nFor\nexample:
        \"player_score\" > 6\r\n\r\nPlay the game, and make it to level 3\nto move
        to the next puzzle. "
      Infinity_catch_instruction: |-
        Can you make Elsa ("actor 2") catch up with
        Anna by using the arrow keys?
      Infinity_finale_instruction: Create anything you like and share it!
      Infinity_move_collide_instruction: |-
        Hiro is "actor 1".  Move him right to
        Baymax, and play a sound when they touch.
      Infinity_move_directions_instruction: |-
        Baymax is "actor 2".  Add Move blocks
        and then move Baymax using the arrows.  Make him touch the two other characters.
      Infinity_move_right_instruction: |-
        Hiro is "actor 1".  Use the Move block
        to move Hiro right to touch Baymax.
      Infinity_repeat_instruction: |-
        Use a "repeat forever" block to make Anna move
        up and down 400 pixels.
      Infinity_say_instruction: Make Anna say "Hi there." by using the Say block.
      Infinity_shoot_instruction: |-
        Baymax is "actor 2".  Make Baymax throw a rocket
        at Hiro.
      Infinity_shoot_directions_instruction: |-
        Hiro is "actor 3".  Make Hiro throw
        a projectile to each of the four characters.  Wait one second between each
        throw.
      Infinity_touch_faster_instruction: Touch even more snowflakes!
      Infinity_touch_four_instruction: |-
        Move Anna up, down left, and right to touch
        each of the four snowflakes.
      Infinity_touch_score_instruction: |-
        Make Anna score a point when she touches
        a snowflake.  Then click "Run" and steer her to touch each snowflake once.
      Inspirational Artwork_instruction: "Free Play Inspiration: You've\nnow learned
        everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n \r\nWant to know how our inspiration pattern was made? "
      K-1 Artist 1 Assessment 1_instruction: |-
        Draw a short line up and a long one
        to the right!
      K-1 Artist Loops 1_instruction: Draw this line by moving East 4 times.
      K-1 Artist Loops 2_instruction: Now, draw the same line using a loop.
      K-1 Artist Loops 3_instruction: Can you loop these blocks to draw 6 lines?
      K-1 Artist Loops 4_instruction: |-
        Could a loop help us draw the top of this
        castle?
      K-1 Artist Loops 5_instruction: What can you loop 4 times to draw these stairs?
      K-1 Artist Loops 6_instruction: |-
        This one needs two loops: one to go up the
        stairs and one to go down.
      K-1 Artist Loops 7_instruction: Loops can help you finish this pattern.
      K-1 Artist Loops 8_instruction: This staircase has longer steps.
      K-1 Artist Loops 9_instruction: What is the easiest way to draw these stairs?
      K-1 Artist Loops Free Play_instruction: Free play, draw something fun!
      K-1 Artist1 1_instruction: Draw the foot of the man with one line
      K-1 Artist1 10_instruction: |-
        Draw and Jump to make the dashed path to the treasure
        X
      K-1 Artist1 2_instruction: Draw the whisker on the cat with two lines!
      K-1 Artist1 3_instruction: |-
        Draw two lines east and two lines north to finish
        the house!
      K-1 Artist1 4_instruction: Draw lines up, over, and down to complete the castle!
      K-1 Artist1 5.5_instruction: |-
        Complete the third tower of the castle using
        short lines
      K-1 Artist1 5_instruction: Draw the stem of this flower with two lines!
      K-1 Artist1 6_instruction: Finish the picture by using a jump block!
      K-1 Artist1 7_instruction: |-
        Use the jump block to move without drawing. Jump
        up and draw a line.
      K-1 Artist1 8_instruction: |-
        Draw the dashed line by using both the
        jump and draw blocks
      K-1 Artist1 9_instruction: Draw and Jump to make the dashed line
      K-1 Artist1 Assessment 1_instruction: Draw the short and long lines!
      K-1 Artist1 Assessment 2_instruction: Draw the short dashed lines!
      K-1 Artist2 1_instruction: Draw a square below the triangle.
      K-1 Artist2 2_instruction: Jump and draw a square next to the house.
      K-1 Artist2 3_instruction: Draw a square above the other square
      K-1 Artist2 4_instruction: Draw a rectangle to complete the bridge.
      K-1 Artist2 5_instruction: Draw a rectangle to complete the bridge supports
      K-1 Artist2 6_instruction: Draw two squares to make a rectangle!
      K-1 Artist2 Assessment1_instruction: |-
        Assessment: Draw a square next to the
        other square.
      K-1 Artist2 Free Draw_instruction: Draw anything!
      K-1 Artist2_7_instruction: Draw a rectangle to give the dresser a top drawer!
      K-1 Bee 1_instruction: |-
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 10_instruction: Get four nectar and then make two honey!
      K-1 Bee 11.5_instruction: Get four nectar to make four honey!
      K-1 Bee 11_instruction: Get three nectar and then make one honey
      K-1 Bee 12_instruction: Get three nectar and then make two honey!
      K-1 Bee 13_instruction: Get three nectar and then make one honey!
      K-1 Bee 14_instruction: |-
        Get me to the nectar, pick it up, get me to the honey,
        and make honey!
      K-1 Bee 15_instruction: Get two nectar to make two honey!
      K-1 Bee 2_instruction: |-
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 3_instruction: |-
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 4_instruction: Get two nectar and then make two honey!
      K-1 Bee 5_instruction: Get three nectar and then make three honey!
      K-1 Bee 6_instruction: Get two nectar and then make two honey!
      K-1 Bee 7_instruction: Get three nectar and then make two honey!
      K-1 Bee 8_instruction: Get two nectar and then make two honey!
      K-1 Bee 9_instruction: Get two nectar and then make two honey!
      K-1 Bee Assessment 1_instruction: Get nectar to make honey!
      K-1 Bee Assessment 2_instruction: Get nectar to make honey!
      K-1 Bee Loops 1_instruction: Get the nectar to make honey!
      K-1 Bee Loops 10_instruction: Get all of the nectar and make all of the honey.
      K-1 Bee Loops 11_instruction: Get all of the nectar and honey!
      K-1 Bee Loops 12_instruction: Get all of the nectar and all of the honey.
      K-1 Bee Loops 2_instruction: |-
        Use a `repeat` loop to move and then get the
        nectar and make honey!
      K-1 Bee Loops 3_instruction: |-
        Use three `repeat` loops to get the nectar and
        make honey!
      K-1 Bee Loops 4_instruction: |-
        Use `repeat` loops to get the nectar, make honey,
        and to move!
      K-1 Bee Loops 5_instruction: Use `repeat` loops to get the nectar and honey!
      K-1 Bee Loops 6_instruction: |-
        Use a `repeat` loop to get the nectar, get honey,
        and to move!
      K-1 Bee Loops 7_instruction: Get the nectar and make honey!
      K-1 Bee Loops 8_instruction: Get the nectar and make honey!
      K-1 Bee Loops 9_instruction: Get the all the nectar and make all of the honey.
      K-1 Bee Loops Assessment 1_instruction: |-
        Get nectar to make honey and use loops
        to move!
      K-1 Bee Loops Assessment 2_instruction: Get nectar to make honey using loops!
      K-1 Maze 10_instruction: 'Go around the TNT to get me to the pig! '
      K-1 Maze 11_instruction: |-
        Trace the path and lead me to the silly pig. Avoid
        TNT or the feathers will fly! Hint: He's South of me.
      K-1 Maze 2_instruction: Move me East to get me to the pig!
      K-1 Maze 3_instruction: Move me South to get me to the pig!
      K-1 Maze 4_instruction: Move me North to get me to the pig!
      K-1 Maze 5_instruction: Move me East to get me to the pig!
      K-1 Maze 6_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 7_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 8_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 9_instruction: Move one way, then another to get me to the pig!
      K-1 Maze Assessment 1_instruction: Assessment -- Get me to the pig!
      K-1 Maze Assessment 12_instruction: Assessment Level
      K-1 Maze Assessment 13_instruction: Assessment Level
      K-1 Maze Assessment 2_instruction: Assessment -- Get me to the pig!
      K-1 Maze Loops 1_instruction: Get me to the pig!
      K-1 Maze Loops 10_instruction: |-
        Get me to the pig! Using the `repeat` loop
        will make it much easier.
      K-1 Maze Loops 11_instruction: "Get me to the pig!  \r\nThe `repeat` loop will\nmake
        this easier."
      K-1 Maze Loops 12_instruction: |-
        Get me to the pig! The `repeat` loop will make
        this easier.
      K-1 Maze Loops 2_instruction: Use the `repeat` block to get me to the pig!
      K-1 Maze Loops 3_instruction: Get me to the pig! Be sure to use `repeat` loops.
      K-1 Maze Loops 4_instruction: Get me to the pig!
      K-1 Maze Loops 5_instruction: Get me to the pig! Be sure to use `repeat` loops.
      K-1 Maze Loops 6_instruction: Get me to the pig! Be sure to use `repeat` loops.
      K-1 Maze Loops 7_instruction: Get me to the pig! Be sure to use `repeat` loops.
      K-1 Maze Loops 8_instruction: Use `repeat` loops to get me to the pig.
      K-1 Maze Loops 9_instruction: Get me to the pig!
      K-1 Maze Loops Assessment 1_instruction: |-
        Look at all we've learned! Use a
        `repeat` loop to get me to the pig!
      K-1 Maze Loops Assessment 2_instruction: |-
        Use `repeat` loops to get me to the
        pig!
      K-1 Maze Multi 14_instruction: Assessment Level
      K-1 Maze Multi 15_instruction: Assessment Level
      K-1 Maze Sequence Assessment 1_instruction: "Let's see what you've learned!\r\nMove\none
        way, then another to get me to the pig."
      K-1 Maze Sequence Assessment 2_instruction: |-
        Move one way, then another to
        get me to the pig.
      K-1 Maze debug Assessment 1_instruction: |-
        Assessment -- Debug this level by
        rearranging and adding blocks to get me to the pig!
      K-1 artist 1 level 10_instruction: |-
        Draw the dashed line by using both the
        jump and draw blocks
      K-1 artist 1 level 9_instruction: Draw this using three lines
      K-1 maze debug 1_instruction: Change the code to get me to the pig!
      K-1 maze debug 10_instruction: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      K-1 maze debug 11_instruction: "This is a test!\r\nDebug this level by rearranging\nand
        changing blocks to get me to the pig"
      K-1 maze debug 2_instruction: |-
        Figure out what is missing and then add blocks
        to get me to the pig!
      K-1 maze debug 3_instruction: |-
        Something is not quite right. REMOVE blocks
        to get me to the pig!
      K-1 maze debug 4_instruction: |-
        Run through these blocks and fix them! I think
        I might be going in the wrong direction.
      K-1 maze debug 5_instruction: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      K-1 maze debug 6_instruction: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      K-1 maze debug 7_instruction: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      K-1 maze debug 8_instruction: |-
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 9_instruction: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      K2.0 sequence 1_instruction: A bug! Fix the code to get me to the pig.
      K2.0 sequence 2_instruction: Fix the code to get me to the pig!
      K2.0 sequence 5_instruction: Move one way, then another to get me to the pig!
      K2.0 sequence 6_instruction: |-
        Figure out what is missing and then add blocks
        to get me to the pig!
      K2.0 sequence 9_instruction: "Challenge: Go around the TNT to get me to the\npig! "
      KTest2_instruction: Trace the path and lead me to the silly pig. Avoid TNT or
        the feathers will fly!
      Kiki_StarWars_Test_3_instruction: Text
      Kiki_StarWars_Test_4_instruction: Text
      Kiki_StarWars_Test_5_instruction: Text
      Kiki_StarWars_Test_5_Example_instruction: Text
      MC HOC 2016 Level 10_instruction: It's time to make your own Minecraft! Spawn
        creatures and then make them do whatever you want. रमाईलो गर्नुहोस्!
      MC HOC 2016 Level 2-2_instruction: |-
        The chicken is frozen. Place `move` and
        `turn` blocks in the `when spawned` slot to get it to move.
      MC HOC 2016 Level 3_instruction: "Great, the chicken moved! But then she stopped.\nIn
        games, chickens walk forever. Use a `forever do` loop to keep these chickens\nmoving.\r\n"
      MC HOC 2016 Level 4_instruction: |-
        Now the chickens look weird moving the same
        way. Games use random moves to make things look real. Make the chickens `turn
        random`.
      MC HOC 2016 Level 5_instruction: |-
        These cows are lost! Lead them to the grass
        with the `move a step toward` block in a `forever do` loop.
      MC HOC 2016 Level 6_instruction: |-
        Now you make the zombies. Use the `spawn`
        block to make 3 zombies when night falls. Get them to move towards you. Survive
        until morning.
      MC HOC 2016 Level 8_instruction: |-
        The path to your sheep is blocked by a stone
        wall. Luckily there is a Creeper here. Creepers explode after you touch them.
        Get the Creeper to explode the wall so you can reach your sheep!
      MC HOC 2016 New Drop_instruction: |-
        In Minecraft, sheep drop wool. Place the
        `drop` block in `when used`, then walk over and use the sheep to drop an item.
      MC HOC 2016 New Spawn_instruction: |-
        Now you can fill the world with what you
        want! Place`spawn` blocks under `when run` to spawn things when the game starts.
      MC HOC 2016 New Walk_instruction: |-
        Let's explore our world! Move with the
        arrows, and press the space bar or tap the game board to use items. Use the
        door to get inside the house.
      MC HOC 2016 SCORE LEVEL_instruction: |-
        Some games let you keep score. Play tag
        with these Iron Golems and use the `add 1 to score` block to give yourself
        a point when you tag them. Reach five points to win!
      MC HOC 2016 Village Test_instruction: हैन होला! Zombies have trapped you inside!
        Code the Iron Golem to chase and attack the zombies!
      Mike Test Bee Conditionals 1_instruction: |-
        This cloud is blocking my view! Check
        to see if there's a flower under the cloud, and only get nectar if there's
        a flower. Be careful, it can change!
      NEW Course 4 Artist Functions 1_instruction: |-
        Can you draw a square that is
        100 pixels in length, using a repeat loop?
      NEW Course 4 Artist Functions 11_instruction: |-
        Now we want to create a new
        function called `draw a line of squares` that draws six squares all in a row.  Can
        you build this function using this `draw a square 20` function that we created
        for you?
      NEW Course 4 Artist Functions 12_instruction: |-
        Use the `draw a line of squares`
        function from the last puzzle to draw this pattern.
      NEW Course 4 Artist Functions 13_instruction: "Can you draw a star shape using\nthe
        `draw a line of squares` function?  "
      NEW Course 4 Artist Functions 14_instruction: 'Free-play time! '
      NEW Course 4 Artist Functions 2_instruction: |-
        Can you draw 3 squares 20 pixels
        apart from one another? Each square is 100 pixels in size.
      NEW Course 4 Artist Functions 3_instruction: "Here is a new type of Block.\nIt
        is called a `function` block. Click \"edit\" then fill it with the code\nfor
        drawing a square with 100 pixel sides. \r\n\r\nWhen you're done editing\nthe
        function, click \"Close\" to go back to your program."
      NEW Course 4 Artist Functions 4_instruction: |-
        Use the `draw a square` function
        to draw this pattern.
      NEW Course 4 Artist Functions 7_instruction: "Are you getting the hang of how\nto
        use function blocks? Let's modify this square so that it is 200 pixels\nin
        size. Click on \"edit\" to enter the `draw a square` function editor. Remember\nto
        click on \"Close\" to get out of the function editor. "
      NEW Course 4 Artist Functions 8_instruction: |-
        We have created a new function
        for you called "draw a triangle".  Can you edit the function definition
        to draw a triangle with 100 pixel sides?
      NEW Course 4 Artist Functions 9_instruction: |-
        Can you solve this by adding
        only one block?
      NEW Course 4 Artist Params 1_instruction: |-
        Let's define this function to draw
        a square with 50 pixel sides. Click "edit" to get started.
      NEW Course 4 Artist Params 10_instruction: "Create a `draw a hexagon` function\nblock
        with a length parameter. This hexagon has sides that are 100 pixels\nin length. "
      NEW Course 4 Artist Params 11_instruction: |-
        Can you figure out how to draw
        this shape? Edit the function to use the "sides" parameter.
      NEW Course 4 Artist Params 12_instruction: |-
        Can you complete this drawing?
        The sides of all the shapes are 100 pixels long.
      NEW Course 4 Artist Params 12a_instruction: |-
        This image is similar to the last.
        Can you use a `for` loop with your function to make this design?
      NEW Course 4 Artist Params 13_instruction: "Let's edit this \"draw a polygon\"\nfunction.
        It already has a \"sides\" parameter. Now, let's add a \"length\"\nparameter.
        \r\nThe perimeter of each shape is 200 pixels long. Do you remember\nthe equation
        to make shapes the same size when they have a different number\nof sides?"
      NEW Course 4 Artist Params 14_instruction: |-
        Edit "draw a spiral edge" to
        use "length" and "sides" parameters, then recreate these shapes.
      NEW Course 4 Artist Params 15_instruction: |-
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
        Play with the pen width to see how different your drawings look!
      NEW Course 4 Artist Params 3_instruction: "Now let's use the function to draw\n5
        triangles in a row. Each triangle is 30 pixels apart.\r\n"
      NEW Course 4 Artist Params 4_instruction: |-
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_instruction: "Replace the `???` in the `length`\nparameter
        input block. The pentagon has 100 pixel sides. "
      NEW Course 4 Artist Params 6_instruction: |-
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle have 100 pixels sides while each side of the hexagon is
        75 pixels long.
      NEW Course 4 Artist Params 7_instruction: |-
        Can you complete this drawing? The
        sides of each triangle are 25 pixels larger than the last.  The first triangle
        has 25 pixel sides.
      NEW Course 4 Artist Params 8_instruction: |-
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      NEW Course 4 Artist Params 9_instruction: |-
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Params inspire_instruction: "Free Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n \r\nWant to know how our inspiration pattern was made? "
      NEW Course 4 Artist Vars 12_instruction: |-
        Now, recreate the algorithm from
        the last level and create a pentagon with sides of length 150.
      NEW Course 4 Artist Vars 2_instruction: |
        Drag a number block to both the `set
        length` block and the `repeat _ times` block to draw a set of 50 pixel triangles.
      NEW Course 4 Artist Vars 4_instruction: "Let's try it again! \r\n\r\nCan you\nset
        the `length` variable to 60 to make this cool design with hexagons?"
      NEW Course 4 Artist Vars 6_instruction: "Draw this pattern of pentagons with\n100
        pixel sides by setting the right value for `length` and dropping the `length`\nvariable
        into all of the the correct places. \r\n\r\nSee how you only have\nto set
        the value for `length` once, and the code uses the right value everywhere?"
      NEW Course 4 Bee For Loops 1_instruction: |-
        Use a loop to collect the nectar
        from each flower.
      NEW Course 4 Bee For Loops 10a_instruction: |-
        Ready for a challenge?  Take what
        you've learned about loops and try to solve this problem. Remember: You may
        have to run through solutions multiple times before you figure out all of
        the steps.
      NEW Course 4 Bee For Loops 11_instruction: |-
        Can you use the loop variable to
        control movement and nectar collection?
      NEW Course 4 Bee For Loops 2_instruction: |-
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_instruction: "Ah, the \"for loop\" makes this\nmuch
        easier! All the code you need is here, take a look at how it is put together\nthen
        click \"Run\" to see how it works. "
      NEW Course 4 Bee For Loops 4 4_instruction: |-
        Now we need to move forward "counter"
        times, then get nectar "counter" times.  Can you use two "repeat" loops
        to solve this challenge?
      NEW Course 4 Bee For Loops 4_instruction: "Replace the ??? in the \"for loop\"\nwith
        the largest amount of nectar the bee has to collect. "
      NEW Course 4 Bee For Loops 5 5_instruction: |-
        Are you getting the hang of using
        the "for loop"? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: |-
        You can also use a "for loop"
        to count down. Try gathering this nectar by counting down from 5 to 1 by 1.
      NEW Course 4 Bee For Loops 6_instruction: |-
        The last number in your for loop
        is called the "increment". Each time the loop is run, the counter variable
        changes by the value of the increment. Try collecting these flowers using
        an increment of 2.
      NEW Course 4 Bee For Loops 7_instruction: "Now, let's combine the \"counter\"\nvariable
        with a math block! How can you use the \"counter\" variable to navigate\nthis
        garden with the fewest number of blocks possible? What do you need to\ndo
        to collect 3, 6, 9, 12, 15 nectar this time? The secret is in the \"counter\"\nvariable!\r\n\r\nRemember:
        If your loop is counting up, the increment is added\nto your \"counter\" variable
        each time through."
      NEW Course 4 Bee For Loops 8_instruction: |-
        You've got this! What should your
        increment be to collect 3, 6, 9, 12, 15 nectar?
      NEW Course 4 Bee For Loops 9_instruction: |-
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 15, then 12, then 9, 6, 3 nectar?
      NEW Course 4 Play Lab Params 11_instruction: "It's free play time! Have fun\nwith
        all the blocks in your tool box. "
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "It's Free Play\ntime,
        have fun with all the blocks in your tool box. "
      New Artist Project_instruction: |-
        Draw something awesome! Your code is saved
        as a project that you can return to at any time.
      New Basketball Project_instruction: Create your own Basketball game. You can
        change all the rules. When you're done, click Finish to let friends try your
        game on their phones.
      New Bounce Project_instruction: Create your own Bounce game. You can change
        all the visuals and the rules. When you're done, click Finish to let friends
        try your game on their phones.
      New Course 4 Artist Functions Level 4_instruction: |-
        Use the "draw a square"
        function to draw this pattern.
      New Gumball Project_instruction: Create anything you like and share it!
      New Ice Age Project_instruction: Create anything you like and share it!
      New Infinity Project_instruction: Create anything you like and share it!
      New Sports Project_instruction: 'Create your own game! You''re in charge here:
        you can change all the rules, mix and match sports, get creative! When you''re
        done, click Finish to let friends try your game on their phones.'
      Overworld Avoid Monsters_instruction: |-
        Running into a Creeper is a bad idea.
        Carefully move past the Creepers and reach the safety of your home.
      Overworld Avoid Monsters_2018_instruction: |-
        Running into a Creeper is a bad idea.
        Carefully move past the Creepers and reach the safety of your home.
      Overworld Chop Tree - allthethings_instruction: |-
        Wood is a very important resource. Many things
        are made from it. Walk to the tree and use the “destroy block” command to
        chop it down.
      Overworld Chop Tree_instruction: |-
        Wood is a very important resource. Many things
        are made from it. Walk to the tree and use the “destroy block” command to
        chop it down.
      Overworld Chop Tree_2018_instruction: |-
        Wood is a very important resource. Many things
        are made from it. Walk to the tree and use the “destroy block” command to
        chop it down.
      Overworld Chop Trees_instruction: |-
        We need to build a house before the sun
        goes down. Houses require a lot of wood. Cut down all 3 trees.
      Overworld Chop Trees_2018_instruction: |-
        We need to build a house before the sun
        goes down. Houses require a lot of wood. Cut down all 3 trees.
      Overworld Free Play 20x20_instruction: |-
        Congratulations! You've completed
        all our puzzles! Now mine, build, and create something unique by using everything
        you've learned so far.
      Overworld Free Play 20x20_2018_instruction: |-
        Congratulations! You've completed
        all our puzzles! Now mine, build, and create something unique by using everything
        you've learned so far.
      Overworld House Frame Chosen_instruction: |-
        Build the rest of your house from
        any material you'd like. The "repeat" command will come in handy.
      Overworld House Frame Chosen_2018_instruction: |-
        Build the rest of your house from
        any material you'd like. The "repeat" command will come in handy.
      Overworld Move to Sheep_instruction: |-
        Add a second “move forward” command to
        reach the sheep.
      Overworld Move to Sheep_2018_instruction: |-
        Add a second “move forward” command to
        reach the sheep.
      Overworld Place Wall_instruction: |-
        Every house starts with a wall. Build the
        first part of your house by putting the "place" and "move forward" commands
        inside the repeat loop.
      Overworld Place Wall_2018_instruction: |-
        Every house starts with a wall. Build the
        first part of your house by putting the "place" and "move forward" commands
        inside the repeat loop.
      Overworld Plant Crops_instruction: |-
        It’s good to plan ahead. Plant crops on
        both sides of the water so you don’t get hungry later on.
      Overworld Plant Crops_2018_instruction: |-
        It’s good to plan ahead. Plant crops on
        both sides of the water so you don’t get hungry later on.
      Overworld Powered Minecart_instruction: |-
        Great job! You’ve gathered lots of
        resources and built a modest home. Now lay rail from the edge of the map to
        the door of your house.
      Overworld Powered Minecart_2018_instruction: |-
        Great job! You’ve gathered lots of
        resources and built a modest home. Now lay rail from the edge of the map to
        the door of your house.
      Overworld Shear Sheep_instruction: |-
        Sheep-shearing time! Use the “shear” command
        to gather wool from both sheep.
      Overworld Shear Sheep_2018_instruction: |-
        Sheep-shearing time! Use the “shear” command
        to gather wool from both sheep.
      PDK5 Functions 2_instruction: |-
        Functions let you define new blocks! We've
        moved the blocks to draw a square into a function called "draw a square".
        Can you use the "draw a square" function to create the glasses? The squares
        are 75 pixels apart.
      PS copy 2-3 Bee Conditionals 5_instruction: "Be careful not to collect nectar
        from\na purple flower if it doesn't have any. \r\nYou must first check if
        the nectar\nis equal to 1 using the `if nectar` block."
      Ryan Test Locked Blocks_instruction: |-
        Here's a function called "patrol."
        Edit it to move Cat up 400 pixels and then down 400 pixels.
      SpecialFrozenLevel_instruction: |-
        You've officially become a master artist!
        Create a winter wonderland.
      Standalone_Artist_1_instruction: |-
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Standalone_Artist_2_instruction: |-
        Draw this diamond with 120 and 60 degree
        angles and 150 pixel long sides.
      Standalone_Artist_3_instruction: |-
        Can you draw this hexagon with 100 pixel
        sides and 60 degree turns?
      Standalone_Artist_4_instruction: |-
        Now you've got a new block to play with,
        the loop. This will repeat a set of commands. What happens if you loop these
        commands 6 times?
      Standalone_Artist_5.5_instruction: |-
        Notice how we simplified the diamond code
        by turning it into a loop. You can loop that whole sequence 12 times to draw
        the flower. Hint: You'll need to turn 30 degrees after your diamond loop
        so you don't keep drawing over the same diamond.
      Standalone_Artist_5_instruction: |-
        How many times do you need to loop this diamond
        to draw the flower?
      Standalone_Artist_6_instruction: |-
        Loop this hexagon code 6 times to create
        the design. How many degrees will you need to turn each time? Hint: divide
        the number of degrees in a circle by the number of times you are looping.
      Standalone_Artist_7_instruction: |-
        A function is another programming tool to
        help you avoid repeating yourself. This function draws a flower, so you can
        use it any time you want to draw a flower. Use this and the new jump block
        to draw these flowers. Hint: The flowers are 150 pixels apart
      Standalone_Artist_8_instruction: |-
        Here's a function called "Draw a shape"
        that we've programmed to draw hexagons. Run the code to see what it does
        and then experiment with the function to see what happens. Can you make it
        draw a pattern of squares, triangles, or octagons?
      Standalone_Artist_9_instruction: |-
        Now go ahead and make whatever picture you'd
        like! You've even got an empty function that you can make do whatever you
        want!
      Standalone_Artist_v2_instruction: |-
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Testing Quantum Farmer_instruction: "Wow, look at that! \r\n\r\nI don't know
        how\nmany shovelfuls of dirt this hole needs.  \r\nCan you write a program
        that\nkeeps using the `fill` block until the ground is even?  "
      The Vigenere Cipher Widget_instruction: Instructions
      The Vigenere Cipher Widget_2018_instruction: Instructions
      The Vigenere Cipher_instruction: Instructions
      Total Artist Clone Me_instruction: |-
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
        Play with the pen width to see how different your drawings look!
      U2 frequency caesar_instruction: Instructions
      U2 frequency random sub_instruction: Instructions
      U2 vigenere cipher_instruction: Instructions
      U4 vigenere cipher 2_instruction: Instructions
      U4L02 - Objects - Template1_instruction: Template
      U4L02 - Objects - Template1_2018_instruction: Template
      Underground Avoiding Lava_instruction: |-
        Lava is hiding beneath some of these
        blocks, which you'll need to cover up before moving forward. An "if" command
        will come in handy here. Add a "move forward" command in the correct place
        to mine these blocks.
      Underground Avoiding Lava_2018_instruction: |-
        Lava is hiding beneath some of these
        blocks, which you'll need to cover up before moving forward. An "if" command
        will come in handy here. Add a "move forward" command in the correct place
        to mine these blocks.
      Underground If Statements_instruction: |-
        Now things are getting tricky. Mine
        3 redstone, but don’t fall in the lava. Use an "If" command to place cobblestone
        over any lava you uncover.
      Underground If Statements_2018_instruction: |-
        Now things are getting tricky. Mine
        3 redstone, but don’t fall in the lava. Use an "If" command to place cobblestone
        over any lava you uncover.
      Underground Iron_instruction: |-
        Walking into molten lava is a bad idea. Place
        cobblestone to create a bridge, then mine at least two of the iron blocks.
      Underground Iron_2018_instruction: |-
        Walking into molten lava is a bad idea. Place
        cobblestone to create a bridge, then mine at least two of the iron blocks.
      Underground Mining Coal_instruction: |-
        You’ll find the most valuable resources
        underground, but it can get dark. Place at least 2 torches and mine at least
        2 coal.
      Underground Mining Coal_2018_instruction: |-
        You’ll find the most valuable resources
        underground, but it can get dark. Place at least 2 torches and mine at least
        2 coal.
      aE7_instruction: "If you create another loop like this one,\nbut turn left instead
        of right, what happens? \r\n\r\nCan you repeat all of\nthat to draw this wave?"
      aE8_instruction: "Now let's loop that whole thing four\ntimes to create this
        picture frame. Watch out for the corners - you can't\njust turn 90 degrees!
        \r\n\r\nIf looping a 3 degree turn 60 times makes a\nhalf circle, which of
        these blocks of code will make an additional quarter\ncircle for the corners?"
      beeDebugVideo1_instruction: Use a `repeat` loop to collect all of the nectar.
      birdsDebugVideo1_instruction: |-
        Trace the path and lead me to the silly pig. Avoid
        TNT or feathers will fly!
      bounce_1_instruction: Attach a block to the "when left arrow" block and press
        "Run". Move the paddle using the left arrow to reach the finish target.
      bounce_10_instruction: There is now a goal at the top. Attach the "score point"
        and "score opponent point" blocks to the "when ball in goal" and "when ball
        misses paddle" blocks to make a game. See how many points you can score before
        your opponent scores twice.
      bounce_10_2018_instruction: There is now a goal at the top. Attach the "score
        point" and "score opponent point" blocks to the "when ball in goal" and "when
        ball misses paddle" blocks to make a game. See how many points you can score
        before your opponent scores twice.
      bounce_10_basketball_instruction: Now there is a goal at the top! Attach the
        "score point" and "score opponent point" blocks to the "when ball in goal"
        and "when ball misses hand" blocks to make a game. See how many points you
        can score before your opponent scores twice.
      bounce_10_sports_instruction: Now there is a goal at the top! Attach the "score
        point" and "score opponent point" blocks to the "when ball in goal" and "when
        ball misses hand" blocks to make a game. See how many points you can score
        before your opponent scores twice!
      bounce_11_instruction: You can now attach blocks to the "when run" block. You
        have to attach the new "launch new ball" block in more than one place. Also,
        try changing the scene or the speed of the paddle and the ball and see how
        many points you can score before your opponent scores twice.
      bounce_11_2018_instruction: You can now attach blocks to the "when run" block.
        You have to attach the new "launch new ball" block in more than one place.
        Also, try changing the scene or the speed of the paddle and the ball and see
        how many points you can score before your opponent scores twice.
      bounce_11_basketball_instruction: You can now attach blocks to the "when run"
        block. You have to attach the new "throw new ball" block in more than one
        place. Also, try changing the scene or the speed of the hand and the ball
        and see how many points you can score before your opponent scores twice!
      bounce_11_sports_instruction: You can now attach blocks to the "when run" block.
        You have to attach the new "throw new ball" block in more than one place.
        Also, try changing the scene or the speed of the hand and the ball and see
        how many points you can score before your opponent scores twice!
      bounce_12_instruction: Create your own Bounce game. You can change all the visuals
        and the rules. When you're done, click Finish to let friends try your game
        on their phones.
      bounce_12_2018_instruction: Create your own Bounce game. You can change all
        the visuals and the rules. When you're done, click Finish to let friends try
        your game on their phones.
      bounce_12_basketball_instruction: Create your own Basketball game. You can change
        all the rules. When you're done, click Finish to let friends try your game
        on their phones.
      bounce_12_sports_instruction: 'Create your own game! You''re in charge here:
        you can change all the rules, mix and match sports, get creative! When you''re
        done, click Finish to let friends try your game on their phones.'
      bounce_1_2018_instruction: Attach a block to the "when left arrow" block and
        press "Run". Move the paddle using the left arrow to reach the finish target.
      bounce_1_basketball_instruction: Attach a block to the "when left arrow" block
        and press "Run". Move the hand using the left arrow to reach the finish target.
      bounce_1_sports_instruction: झण्डा सम्म पुग्नुहोस्! Attach a block to the "when
        left arrow" block and press "Run" to move the player to the flag.
      bounce_2_instruction: Attach a block to the "when right arrow" and "when left
        arrow" blocks. Move the paddle to reach both finish targets.
      bounce_2_2018_instruction: Attach a block to the "when right arrow" and "when
        left arrow" blocks. Move the paddle to reach both finish targets.
      bounce_2_basketball_instruction: Attach a block to the "when right arrow" and
        "when left arrow" blocks. Move the hand to reach both finish targets.
      bounce_2_sports_instruction: अब दुईवटा झण्डा छन्! Attach a block to the "when
        left arrow" and "when right arrow" blocks to make your player move in two
        directions.
      bounce_3_instruction: Now try something similar with the "when up arrow" block.
        Move the paddle to the finish target at the top.
      bounce_3_2018_instruction: Now try something similar with the "when up arrow"
        block. Move the paddle to the finish target at the top.
      bounce_4_instruction: This time you need to add four blocks. Move the paddle
        to all four finish targets to complete this puzzle.
      bounce_4_2018_instruction: This time you need to add four blocks. Move the paddle
        to all four finish targets to complete this puzzle.
      bounce_5_instruction: We're going to send a ball flying down towards the paddle.
        Attach a block to the "when ball hits paddle" block to ensure the ball reaches
        the finish target.
      bounce_5_2018_instruction: We're going to send a ball flying down towards the
        paddle. Attach a block to the "when ball hits paddle" block to ensure the
        ball reaches the finish target.
      bounce_5_basketball_instruction: We're going to send a ball flying down towards
        the hand. Attach a block to the "when ball hits hand" block to ensure the
        ball reaches the flag.
      bounce_5_sports_instruction: The hockey puck is going to fly down toward the
        player! Attach a block to the "when ball hits player" block to hit the flag.
      bounce_6_instruction: Now the finish target is on the top. You need to attach
        blocks to both of the "when ball hits" blocks to solve this puzzle.
      bounce_6_2018_instruction: Now the finish target is on the top. You need to
        attach blocks to both of the "when ball hits" blocks to solve this puzzle.
      bounce_6_basketball_instruction: Now the flag is on the top. You need to attach
        blocks to both of the "when ball hits" blocks to solve this puzzle.
      bounce_6_sports_instruction: Now the flag is on the top. You need to attach
        blocks to both of the "when ball hits" blocks to solve this puzzle.
      bounce_7_instruction: Attach blocks to each of the "when" blocks. Bounce the
        ball until it hits the finish target.
      bounce_7_2018_instruction: Attach blocks to each of the "when" blocks. Bounce
        the ball until it hits the finish target.
      bounce_7_basketball_instruction: Attach blocks to each of the "when" blocks.
        Bounce the ball until it hits the flag.
      bounce_7_sports_instruction: Attach blocks to each of the "when" blocks. Bounce
        the ball until it hits the flag.
      course2_maze_seq_challenge1_instruction: Trace the path and lead me to the silly
        pig. Avoid TNT or the feathers will fly!
      course2_playlab_stage17_1_instruction: |-
        Can you make Jorge the Dog (actor 1)
        say "Hi"?
      course2_playlab_stage17_10_instruction: "Add blocks to the `when run` event\nto
        change the background and the speed of Waddles.\r\n\r\nPlay the game and\nmove
        Waddles with the arrows until you score."
      course2_playlab_stage17_11_instruction: |-
        Create your own story. When you're
        done, click Finish to let friends try your story on their phones.
      course2_playlab_stage17_2_instruction: |-
        Can you make Jorge (actor 1) say something,
        then have Olive the Cat (actor 2) say something?
      course2_playlab_stage17_3_instruction: |-
        Can you write a program to make Jorge
        (actor 1) move toward Olive the Cat?
      course2_playlab_stage17_4_instruction: |-
        Can you write a program that makes
        Jorge (actor 1) move to Olive the Cat, and have Olive say "Hello" when Jorge
        reaches her?
      course2_playlab_stage17_5_instruction: |-
        Can you write a program to make Octavia
        say "Hi" when she is clicked?
      course2_playlab_stage17_6_instruction: |-
        Now, write a program to make Waddles
        move around using the up / down / left /right keys to hit all of the targets!
      course2_playlab_stage17_8_instruction: "Can you have Waddles (actor 1) say\n\"Ouch!\"
        and play a \"hit\" sound if he runs into Chomp? \r\n\r\nWhen you're\ndone,
        play the game to make that happen."
      course2_playlab_stage17_9_instruction: "Can you add a block to score a point\nwhen
        Waddles runs into Octavia (actor 3)? \r\nPlay the game and move Waddles\nwith
        the arrows until you score!"
      course3_playlab_stage16_1_instruction: Can you make this dog say "hello world"?
      course3_playlab_stage16_2_instruction: |-
        Can you make the dog say something
        and then have the cat say something afterwards?
      course3_playlab_stage16_3_instruction: |-
        Can you write a program to make this
        dog move to the cat?
      course3_playlab_stage16_4_instruction: |-
        Can you write a program that makes
        the dog move to the cat, and have the cat say "hello" when the dog reaches
        him?
      course3_playlab_stage16_5_instruction: |-
        Can you add a block to make the octopus
        happy?
      course3_playlab_stage16_6_instruction: |-
        Create your own story. When you're
        done, click Finish to let friends try your story on their phones.
      course3_playlab_stage17_1_instruction: |-
        Can you write a program to make the
        octopus say "hello" when it is clicked?
      course3_playlab_stage17_2_instruction: |-
        Can you write a program to make Waddles
        move around using the up / down / left /right keys to hit all of the targets?
      course3_playlab_stage17_3_instruction: |-
        The "repeat forever" block allows
        you to run code continuously. Can you attach blocks to move this dinosaur
        up and down repeatedly?
      course3_playlab_stage17_4_instruction: |-
        Can you have Waddles say "Ouch!"
        and play a "hit" sound if he runs into the dinosaur, and then move him with
        the arrows to make that happen?
      course3_playlab_stage17_5_instruction: |-
        Can you add a block to score a point
        when Waddles runs into the octopus, and then move him with the arrows until
        you score?
      course3_playlab_stage17_6_instruction: |-
        Can you add blocks to change the background
        and the speed of Waddles, and then move him with the arrows until you score?
      course3_playlab_stage17_7_instruction: |-
        Create your own story. When you're
        done, click Finish to let friends try your story on their phones.
      course4_artist_fwp_challenge1_instruction: Try running this program, and make
        changes to see what happens. Can you figure out how it works? (Or delete it
        and replace it with something totally different)
      courseA_maze_seq2_instruction: A bug! Fix the code to get me to the pig.
      courseA_maze_seq2_2018_instruction: A bug! Fix the code to get me to the pig.
      courseC_PlayLab_events3_instruction: |-
        Can you write a program to make Jorge
        (actor 1) move toward Olive the Cat?
      courseC_PlayLab_events3_2018_instruction: |-
        Can you write a program to make Jorge
        (actor 1) move toward Olive the Cat?
      courseC_maze_debugging10_instruction: |-
        Debug this level by rearranging and changing
        blocks to get me to the pig!
      courseD_artist_binary1_instruction: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \r\n\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      courseD_artist_binary1_2018_instruction: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \r\n\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      courseD_artist_binary4_instruction: |-
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      courseD_artist_binary4_2018_instruction: |-
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      courseD_artist_binary6_instruction: |-
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      courseD_artist_binary6_2018_instruction: |-
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      courseD_artist_binary7_instruction: |-
        What is the shortest binary string that
        you can repeat to draw this image?
      courseD_artist_binary7_2018_instruction: |-
        What is the shortest binary string that
        you can repeat to draw this image?
      courseD_bee_debugging3_instruction: |-
        Fix the error(s) to collect all of the nectar
        and make all of the honey.
      courseD_bounce_events10_instruction: There is now a goal at the top. Attach
        the "score point" and "score opponent point" blocks to the "when ball in goal"
        and "when ball misses paddle" blocks to make a game. See how many points you
        can score before your opponent scores twice.
      courseD_bounce_events11_instruction: You can now attach blocks to the "when
        run" block. You have to attach the new "launch new ball" block in more than
        one place. Also, try changing the scene or the speed of the paddle and the
        ball and see how many points you can score before your opponent scores twice.
      courseD_bounce_events12_instruction: Create your own Bounce game. You can change
        all the visuals and the rules. When you're done, click Finish to let friends
        try your game on their phones.
      courseD_bounce_events2_instruction: Attach a block to the "when right arrow"
        and "when left arrow" blocks. Move the paddle to reach both finish targets.
      courseD_bounce_events3_instruction: Now try something similar with the "when
        up arrow" block. Move the paddle to the finish target at the top.
      courseD_bounce_events3s_instruction: Now try something similar with the "when
        up arrow" block. Move the paddle to the finish target at the top.
      courseD_bounce_events4_instruction: This time you need to add four blocks. Move
        the paddle to all four finish targets to complete this puzzle.
      courseD_bounce_events4s_instruction: This time you need to add four blocks.
        Move the paddle to all four finish targets to complete this puzzle.
      courseD_bounce_events5_instruction: We're going to send a ball flying down towards
        the paddle. Attach a block to the "when ball hits paddle" block to ensure
        the ball reaches the finish target.
      courseD_bounce_events6_instruction: Now the finish target is on the top. You
        need to attach blocks to both of the "when ball hits" blocks to solve this
        puzzle.
      courseD_bounce_events7_instruction: Attach blocks to each of the "when" blocks.
        Bounce the ball until it hits the finish target.
      courseD_debugging_3_instruction: |-
        Fix the error(s) to collect all of the nectar
        and make all of the honey.
      courseE_bee_functions1_instruction: Collect all the nectar from each flower.
      courseE_bee_functions1_2018_instruction: Collect all the nectar from each flower.
      courseE_farmer_concept4_instruction: |-
        Now let's go one level deeper! We've
        nested that whole block of code into another loop, but you need to get the
        artist back in place to draw the next line. Which of these code blocks can
        you place at the end of the outermost loop to draw the whole grid?
      courseF_artist_for7_instruction: |-
        Make three small changes to the
        code from the last level to get this!
      courseF_artist_for7_2018_instruction: |-
        Make three small changes to the
        code from the last level to get this!
      courseF_artist_for_challenge1_instruction: Can you figure out how to re-create
        this drawing?
      courseF_artist_for_challenge1_2018_instruction: Can you figure out how to re-create
        this drawing?
      courseF_artist_for_challenge2_instruction: |-
        Can you figure out how to re-create this drawing
        with a single loop?
      courseF_artist_for_challenge2_2018_instruction: |-
        Can you figure out how to re-create this drawing
        with a single loop?
      courseF_bee_for8_instruction: |-
        You've got this! What should your
        increment be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for8_2018_instruction: |-
        You've got this! What should your
        increment be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for_challenge2_instruction: |-
        Solve this puzzle using the fewest number of
        blocks possible.
      courseF_bee_for_challenge2_2018_instruction: |-
        Solve this puzzle using the fewest number of
        blocks possible.
      courseF_bee_for_challenge3_instruction: |-
        Solve this puzzle using the fewest number of
        blocks possible.
      flappy_1_instruction: Attach a block to the "when click" block, then press "Run".
        Click or tap the screen to move Flappy to the target.
      flappy_11_instruction: Create your own Flappy game. You can change all the visuals
        and all the rules, even the gravity. When you're done, click Finish to let
        friends try your game on their phones.
      flappy_11_2018_instruction: Create your own Flappy game. You can change all
        the visuals and all the rules, even the gravity. When you're done, click Finish
        to let friends try your game on their phones.
      flappy_1_2018_instruction: Attach a block to the "when click" block, then press
        "Run". Click or tap the screen to move Flappy to the target.
      flappy_2_instruction: Now we've added some ground.  Attach a block to the "when
        hit the ground" block.  Your code needs to 'END GAME' when Flappy crashes.
      flappy_2_2018_instruction: Now we've added some ground.  Attach a block to the
        "when hit the ground" block.  Your code needs to 'END GAME' when Flappy crashes.
      flappy_3_instruction: The "when run" block allows you to run code when your
        game starts.  Try setting the level speed and flapping to the target.
      flappy_3_2018_instruction: The "when run" block allows you to run code when
        your game starts.  Try setting the level speed and flapping to the target.
      flappy_4_instruction: Flappy will fly through obstacles unless you write code
        to make him crash. Attach a block to the "when hit an obstacle" block. Your
        code needs to 'END GAME' when Flappy crashes into the first set of pipes.
      flappy_4_2018_instruction: Flappy will fly through obstacles unless you write
        code to make him crash. Attach a block to the "when hit an obstacle" block.
        Your code needs to 'END GAME' when Flappy crashes into the first set of pipes.
      flappy_5_instruction: Let's add a scoreboard, and count points when Flappy makes
        it past obstacles. Add to the "when pass an obstacle" block, and then score
        a point by flying Flappy through the first set of pipes.
      flappy_5_2018_instruction: Let's add a scoreboard, and count points when Flappy
        makes it past obstacles. Add to the "when pass an obstacle" block, and then
        score a point by flying Flappy through the first set of pipes.
      flappy_6_instruction: See if you can still score a point after making Flappy
        flap either a smaller or larger amount.
      flappy_6_2018_instruction: See if you can still score a point after making Flappy
        flap either a smaller or larger amount.
      flappy_7_instruction: Next, try changing the scene by attaching another block
        to the "when run" block.
      flappy_7_2018_instruction: Next, try changing the scene by attaching another
        block to the "when run" block.
      flappy_8_instruction: You can set visuals anytime, not just when the game starts.
        Try setting a RANDOM scene when other events happen, for example, when passing
        an obstacle.
      flappy_8_2018_instruction: You can set visuals anytime, not just when the game
        starts. Try setting a RANDOM scene when other events happen, for example,
        when passing an obstacle.
      flappy_9_instruction: To mix things up, when hitting an obstacle, instead of
        ending the game try setting the score back to 0.
      flappy_9_2018_instruction: To mix things up, when hitting an obstacle, instead
        of ending the game try setting the score back to 0.
      frozen circle function in circle_instruction: |-
        Now let's create 20 overlapping
        circles, turning 18 degrees between each circle.
      frozen circle function with parameter_instruction: |-
        Here's a ”Create circle”
        block that can make circles of different sizes. Can you use this to create
        a small circle of size 5 and a larger circle of size 10?
      frozen circle function_instruction: |-
        Use the new “Create a circle” block to
        create 10 overlapping circles. Don't forget to jump forward between circles.
      frozen circle_instruction: |-
        A circle is a special shape. Can you figure out
        what number to replace the question marks with to draw a circle?
      frozen cross rotate dense_instruction: |-
        Let's repeat it 90 times! How many
        times does 90 go into 360? Hint: It's a really small number.
      frozen cross rotate_instruction: |-
        Now try repeating it 10 times. How many degrees
        do you need to turn between each line?
      frozen cross_instruction: |-
        Wrap a “Repeat” block around these commands to create
        a plus sign. Did you notice Elsa can move forward and backward?
      frozen diamond mini snowflake_instruction: |-
        Did you know every snowflake is
        a different shape? Let's create a new snowflake by using another “Repeat"
        block to repeat a parallelogram 4 times, turning right by 90 degrees between
        each parallelogram.
      frozen diamond snowflake_instruction: |-
        Now, let's create a new snowflake by
        using the repeat block to repeat a parallelogram 10 times, turning right by
        36 degrees between each one.
      frozen diamond_instruction: |-
        Use a repeat around these blocks to create a parallelogram.
        It's just like a rectangle but has different angles. This one has 60 degree
        and 120 degree angles instead of all 90 degree angles.
      frozen freeplay_instruction: |-
        You've officially become a master artist!
        Create a winter wonderland.
      frozen line_instruction: |-
        Hi! I'm Elsa of Arendelle. Help me create a single
        line.
      frozen perpendicular_instruction: |-
        Now let's see if we can create two lines
        that are at a 90 degree angle to each other. You will need to use the "Turn"
        block as well as the "Move" block.
      frozen snowflake branch_instruction: |-
        Try using the ”Create a snowflake branch”
        block to create three branches, which starts to look like a snowflake.
      frozen snowflake full_instruction: |-
        Now let's repeat it 8 times to make a
        beautiful snowflake!
      frozen snowflower_instruction: |-
        Intricate snow patterns can be created with
        very simple shapes. Can you make a pattern by repeating 5 circles of size
        5 and 5 circles of size 10?
      frozen square iterative_instruction: |-
        It seems like we're halfway to making
        a square. Let's put 4 lines together to create a square.
      frozen square loop 3x_instruction: |-
        Let's create three squares, turning after
        each square. Be sure to turn by 120 degrees before each new square.
      frozen square loop_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make a square
        with the “Repeat” block, which uses fewer blocks. How many times (???) should
        the “Repeat” block loop the blocks inside it to make a square?
      frozen square snowflake_instruction: |-
        Can you create a snowflake using the
        “Repeat” block to make a square 10 times, and the “Turn” block to turn 36
        degrees between each square?
      grade1_maze_sequence1_instruction: A bug! Fix the code to get me to the pig.
      grade1_maze_sequence2_instruction: Fix the code to get me to the pig!
      grade1_maze_sequence5_instruction: Move one way, then another to get me to the
        pig!
      grade1_maze_sequence6_instruction: |-
        Figure out what is missing and then add blocks
        to get me to the pig!
      grade1_maze_sequence9_instruction: 'Go around the TNT to get me to the pig! '
      grade2_CaringForNewPet_10_instruction: Get me to the pig!
      grade2_CaringForNewPet_5_instruction: Get me to the pig!
      grade2_MakeDogTag_10_instruction: Now, draw anything you like!
      grade2_MakeDogTag_8_instruction: |-
        Now let's connect a bunch of V's together
        in a loop.
      grade2_MakeDogTag_9_instruction: |-
        Rebuild the code from the last puzzle,
        but this time, add a left turn of 30 degrees inside the loop. Now, repeat
        it 24 times instead of 8.
      grade2_PuppyLoops_1_instruction: |-
        Can you get me to the pig using 5 of the same
        kind of blocks?
      grade2_PuppyLoops_10_instruction: "My teacher says that I should finish what\nI
        start!\r\n\r\nHelp me finish my pinwheel. Can you figure out what's wrong?"
      grade2_PuppyLoops_2_instruction: |-
        Can you get to the pig by creating a loop that uses
        only one `move forward` block inside of a `repeat`?
      grade2_PuppyLoops_4_instruction: |-
        In this puzzle, two `repeat` loops will help you
        get to the pig with the fewest number of blocks!
      grade2_PuppyLoops_5_instruction: |-
        Can you figure out the fastest way to get
        me to the pig?
      grade2_PuppyLoops_7_instruction: Use what you learned to get me to the sunflower!
      grade2_PuppyLoops_8_instruction: "This code for the cat's whiskers is wrong.\n\r\n\r\nFix
        this code to draw whiskers that are all the same length."
      grade2_PuppyLoops_9_instruction: "Looks like the C in code is drawn backwards!\r\n\r\nCan\nyou
        make it look like a C again?"
      grade2_playlab_project_1_instruction: |-
        Now, write a program to make Waddles
        move around using the up / down / left /right keys to hit all of the targets!
      grade2_playlab_project_3_instruction: "Can you have Waddles (actor 1) say\n\"Ouch!\"
        and play a \"hit\" sound if he runs into Chomp? \r\n\r\nWhen you're\ndone,
        play the game to make that happen."
      grade2_playlab_project_4_instruction: "Can you add a block to score a point\nwhen
        Waddles runs into Octavia (actor 3)? \r\nPlay the game and move Waddles\nwith
        the arrows until you score!"
      grade2_playlab_project_5_instruction: "Add blocks to the `when run` event\nto
        change the background and the speed of Waddles.\r\n\r\nPlay the game and\nmove
        Waddles with the arrows until you score."
      grade2_puppy_loops2_instruction: |-
        Can you get to the pig by creating a loop that uses
        only one `move forward` block inside of a `repeat`?
      grade2_puppy_loops4_instruction: |-
        In this puzzle, two `repeat` loops will help you
        get to the pig with the fewest number of blocks!
      grade3_ConditionalsElse_1_instruction: |-
        This cloud is blocking my view! Check
        to see if there's a flower under the cloud, and only get nectar if there's
        a flower. Be careful, it can change!
      grade3_ConditionalsElse_2_instruction: "More clouds! \r\n\r\nCheck underneath\nevery
        cloud to see if it is hiding a flower before you get nectar.  \r\n\r\nRemember:\nNot
        all clouds hide the same thing!"
      grade3_ConditionalsElse_3_instruction: |-
        Now I just want to make honey. Some of
        these clouds might have honeycombs under them. Be sure to check each cloud!
      grade3_ConditionalsElse_4_instruction: |-
        Sometimes this cloud covers a flower,
        and sometimes it covers a honeycomb! Use the if/else block to collect nectar
        if it is a flower, else to make honey (because it is a honeycomb).
      grade3_ConditionalsElse_5_instruction: "There will be either a flower or a honeycomb\nunder
        each of those clouds!\r\n\r\nUse the `if/else` block to collect nectar\nif
        there is a flower.\r\nOtherwise, make honey (because there is a honeycomb)."
      grade3_ConditionalsElse_6_instruction: "I am not sure how much nectar this flower\nhas,
        but I know it has either 1, 2, or 3 nectar. \r\n\r\nCombine the conditional\nblocks
        (`if` and/or `if/else`) to only get as much nectar as the flower has.\n\r\n\r\nRemember,
        the amount of nectar can change each time you run the puzzle!"
      grade3_ConditionalsElse_7_instruction: "These flowers can have 3, 2, or 1 nectar.\n\r\n\r\nComplete
        the `check purple flower` function and use it to collect\nall of the nectar
        at the flowers."
      grade3_ConditionalsElse_8_instruction: "Write the function for `check flower
        make\nhoney`. \r\n\r\nYour function should check if the purple flower has
        3, 2,\nor 1 nectar and get all of the nectar. \r\nThen, move forward and make
        honey."
      grade3_ConditionalsElse_9_instruction: "**Assessment:** This cloud\nis either
        hiding a flower with one nectar or a honeycomb that needs one honey.  \r\n\r\nComplete\nthe
        `get nectar or make honey` function, then call it to collect the nectar\nor
        honey. \r\n"
      grade3_ConditionalsElse_TeacherIDo_instruction: "There will be either a flower
        or a honeycomb\nunder each of those clouds!\r\n\r\nUse the `if/else` block
        to collect nectar\nif there is a flower.\r\nOtherwise, make honey (because
        there is a honeycomb)."
      grade3_Conditionals_1 BAD_instruction: Use a loop to collect all of the nectar.
      grade3_Conditionals_1_instruction: "I'm a hungry bee! \r\nHelp me collect\nall
        of the nectar from the flowers using the fewest number of blocks."
      grade3_Conditionals_10 BAD_instruction: |-
        Gather nectar from the rows of flowers!
        Use a nested loop.
      grade3_Conditionals_10_instruction: "There's a lot happening here!\r\n\r\nUse\nwhat
        you've learned to collect all of the nectar and then make the honey."
      grade3_Conditionals_11 BAD_instruction: |-
        Assessment: Use a `while` loop to
        collect all of the nectar from these flowers.
      grade3_Conditionals_11_instruction: "Let's put everything together!\r\n\r\nUse\nwhat
        you've learned to help me collect nectar only from flowers that have\nit,
        using as few blocks as possible.  Don't forget to make honey at the end."
      grade3_Conditionals_12_instruction: "This stair step pattern should look familiar.
        \ \r\n\r\nCan\nyou collect nectar only from the flowers that have some, using
        as few blocks\nas possible?"
      grade3_Conditionals_13_instruction: |-
        Assessment: Collect all of
        the nectar. Be careful not to try to collect nectar from a purple flower if
        it doesn't have any.
      grade3_Conditionals_2_instruction: "Look at all of that nectar!\r\n\r\nHelp\nme
        collect the nectar and make the honey using as few blocks as you can.  "
      grade3_Conditionals_3_instruction: "Be careful not to collect nectar from\na
        purple flower if it doesn't have any. \r\nYou must first check if the nectar\nis
        equal to 1 using the `if nectar` block."
      grade3_Conditionals_4_instruction: |-
        Check this flower with an "if" block
        to see if there is any nectar available.
      grade3_Conditionals_5_instruction: |-
        Collect nectar from each flower only if
        it has any.
      grade3_Conditionals_6_instruction: |-
        This field has red and purple flowers.
        Red flowers have a known nectar amount, but purple flower nectar is unknown.
        Collect all the nectar.
      grade3_Conditionals_7_instruction: Collect all the nectar from each flower.
      grade3_Conditionals_8_instruction: "I wonder what's out there!\r\n\r\nHelp\nme
        fly around the yard and collect nectar only from the flowers that have\nsome. "
      grade3_Conditionals_9_instruction: |-
        Help me find all of the nectar using
        as few blocks as possible!
      grade3_Conditionals_TeacherIDo_instruction: |-
        Check this flower with an "if" block
        to see if there is any nectar available.
      grade3_Debugging_1_instruction: |-
        These blocks are really bugging me. Fix the
        error(s) to collect all of the nectar.
      grade3_Debugging_5_instruction: "That flower looks tasty! \r\n\r\nFix the\nerror(s)
        to collect all of the nectar.  You can now use both run and step."
      grade3_Debugging_6_instruction: "What a sweet challenge!\r\n\r\nFix the error(s)\nto
        collect all of the nectar."
      grade3_Debugging_7_instruction: |-
        Fix the error(s) to collect all of the nectar
        and make all of the honey.
      grade3_Debugging_9_instruction: "\"Bee\" patient with this one!\r\n\r\nYou\nwill
        need to fix a couple of things in this program to collect all of the\nnectar
        and make all of the honey."
      grade3_Debugging_TeacherIDo_instruction: |-
        These blocks are really bugging me. Fix the
        error(s) to collect all of the nectar and make all of the honey.
      grade3_Loops_10_instruction: "Such a busy bee!\r\n\r\nHelp bee collect all\nof
        the nectar and make all of the honey with the fewest blocks possible."
      grade3_Loops_11_instruction: "The shape of this path is different than the\nothers.
        \r\n\r\nCan you collect all of the nectar using as few blocks as possible?"
      grade3_Loops_12_instruction: |-
        Can you find the quickest way for the bee to
        collect all of the nectar and make all of the honey?
      grade3_Loops_2_instruction: This time, use a loop to gather all of the nectar.
      grade3_Loops_3_instruction: Use a `repeat` loop to collect all of the nectar.
      grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all of
        the nectar and make all of the honey.
      grade3_Loops_5_instruction: |-
        What a beautiful field of flowers!   Help the
        bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      grade3_Loops_6_instruction: "How many times can loops help you in this puzzle?
        \ \r\n\r\nLoops\nare your friend! Use a few of them to complete this puzzle
        with the fewest\nblocks possible."
      grade3_Loops_7_instruction: "Those flowers look tasty!\r\n\r\nCollect nectar\nfrom
        each of the flowers using the fewest blocks possible."
      grade3_Loops_8_instruction: |-
        Collect all the nectar and make all of the honey
        using the fewest blocks possible.
      grade3_Loops_9_instruction: |-
        Collect nectar from each flower and make honey
        at each honeycomb using the fewest blocks possible.
      grade3_Loops_TeacherIDo_instruction: "Those flowers look tasty!\r\n\r\nCollect
        nectar\nfrom each of the flowers using the fewest blocks possible."
      grade3_maze_Loop1_instruction: "Assessment:  Get me to the sunflower\nusing
        only 5 blocks! "
      grade3_maze_loops5_instruction: |-
        Get me to the sunflower using the fewest blocks
        possible!
      grade3_maze_nestedLoops1_instruction: |-
        Can you get me to the pig using 5 of the same
        kind of blocks?
      grade3_maze_nestedLoops2_instruction: |-
        Can you get to the pig by creating a loop that uses
        only one `move forward` block inside of a `repeat`?
      grade3_maze_nestedLoops3_instruction: |-
        Get me to the pig! You can only use one move forward
        block this time
      grade3_maze_nestedLoops4_instruction: |-
        In this puzzle, two `repeat` loops will help you
        get to the pig with the fewest number of blocks!
      grade3_robotFarmer_ConditionalsIntro_11_instruction: 'It''s still dark outside.
        Move me along the field. If there is a pile, remove it, and if there is a
        hole, fill it in. Hint: use the dropdown menu of options on the "if" block.'
      grade3_robotFarmer_ConditionalsIntro_6_instruction: Remove all the piles of
        dirt, using as few blocks as possible. The new options in the dropdown menu
        on the "while" block tell me if I'm standing on a pile or a hole.
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo1_instruction: 'Help me fill
        in all these holes with 5 shovelfuls of dirt. Hint: you can put a "repeat"
        block inside the "while" block.'
      grade4_arist_nested_loop_circles1_instruction: |-
        Assessment: Use a nested loop to
        complete the design.
      grade4_arist_nested_loop_polygons1_instruction: "Loop this design 10 times.
        \r\n\r\nHow much\ndo you have to turn each time you loop?"
      grade4_arist_nested_loop_polygons2_instruction: "Loop this shape 6 times. \r\n\r\nHow
        much\ndo you have to turn each time you loop? "
      grade4_arist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares of this sidewalk
        using a nested loop? Each square is 30 pixels.
      grade4_arist_nested_loop_triangles2_instruction: "Now nest this loop inside
        another loop to\ndraw 10 triangles.  This is called a \"nested\" loop.  "
      grade4_arist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by looping the triangle
        code?
      grade4_arist_nested_loop_triangles5_instruction: "Create a sun by nesting the
        starter code in\nanother loop.\r\n\r\nTo get this cool design with a hollow
        center, you'll\nneed to jump forward by the length of the triangle before
        turning."
      grade4_arist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles using a nested
        loop?
      grade4_artist_functions2_instruction: "Functions let you define new blocks!
        \r\n\r\nWe've\nmoved the blocks needed for drawing a square into a function
        called `draw\na square`. This time, use the `draw a square` function to create
        the glasses.\n\r\n\r\nThe squares are 75 pixels apart."
      grade4_artist_functions_challenge_instruction: |-
        Use the suggested functions to draw four rows
        of hexagons. Notice how our even numbered rows are shifted to the right?
      grade4_artist_functions_challenge2_instruction: |-
        Use the suggested functions to draw four rows
        of hexagons. Notice how our even numbered rows are shifted to the right?
      grade4_artist_nestedLoops_challenge_instruction: "Click here to see the full
        instructions again!\r\n\r\nHere\nis the code for an interesting shape.  What
        happens when you repeat it multiple\ntimes, turning between each iteration?
        \  Notice that the turns in this shape\nadd up to 420 degrees, which means
        that when your artist is done drawing,\nit will be facing a different direction
        than when you started.  That new direction\nis exactly 60 degrees to the right
        of where you began."
      grade4_artist_nestedLoops_challenge2_instruction: |-
        Now for a challenge!  Feel free to use trial
        and error. You are not expected to get the image perfect the first time.   Want
        to see more hints?  Click here!
      grade4_artist_nested_loop_circles1_instruction: |-
        Assessment: Use a nested loop to
        complete the design.
      grade4_artist_nested_loop_polygons1_instruction: "Loop this design 10 times.
        \r\n\r\nHow much\ndo you have to turn each time you loop?"
      grade4_artist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares of this sidewalk
        using a nested loop? Each square is 30 pixels.
      grade4_artist_nested_loop_triangles5_instruction: "Create a sun by nesting the
        starter code in\nanother loop.\r\n\r\nTo get this cool design with a hollow
        center, you'll\nneed to jump forward by the length of the triangle before
        turning."
      grade4_artist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles using a nested
        loop?
      grade4_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      grade4_artist_parameters_triangles2_instruction: |-
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      grade4_artist_parameters_triangles2b_instruction: |-
        Can you complete this drawing? The
        sides of each triangle are 25 pixels larger than the last.  The first triangle
        has 25 pixel sides.
      grade4_artist_parameters_triangles3_instruction: |-
        Can you complete this drawing? The
        sides of each triangle are 25 pixels larger than the last.  The first triangle
        has 25 pixel sides.
      grade4_artist_parameters_triangles4_instruction: |-
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      grade4_artist_parameters_trianglesx_instruction: |-
        Can you complete this drawing? The
        sides of each triangle are 25 pixels larger than the last.  The first triangle
        has 25 pixel sides.
      grade4_bee_conditionals_quantum1_instruction: |-
        This cloud is blocking my view! Check
        to see if there's a flower under the cloud, and only get nectar if there's
        a flower. Be careful, it can change!
      grade4_bee_conditionals_quantum2_instruction: "More clouds! \r\n\r\nCheck underneath\nevery
        cloud to see if it is hiding a flower before you get nectar.  \r\n\r\nRemember:\nNot
        all clouds hide the same thing!"
      grade4_bee_conditionals_quantum4_instruction: |-
        Sometimes this cloud covers a flower,
        and sometimes it covers a honeycomb! Use the if/else block to collect nectar
        if it is a flower, else to make honey (because it is a honeycomb).
      grade4_bee_conditionals_quantum5_instruction: "There will be either a flower
        or a honeycomb\nunder each of those clouds!\r\n\r\nUse the `if/else` block
        to collect nectar\nif there is a flower.\r\nOtherwise, make honey (because
        there is a honeycomb)."
      grade4_bee_functions1_instruction: Collect all the nectar from each flower.
      grade4_bee_functions2_instruction: |-
        Functions are blocks of code that perform
        a task. Use the "get 2 nectar" function to collect the nectar from each
        flower.
      grade4_bee_nestedLoops0_instruction: Use a loop to collect all of the nectar.
      grade4_bee_nestedLoops3_instruction: |-
        Collect all of the nectar by creating
        a nested loop.
      grade4_frozen_freeplay_instruction: |-
        You've officially become a master artist!
        Create a winter wonderland.
      grade4_frozen_functions0_instruction: Can you figure out what number to replace
        the question marks with to draw a circle?
      grade4_frozen_functions1a_instruction: |-
        Use the new “Create a circle” block to
        create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions2_instruction: |-
        Now let's create 20 overlapping
        circles, turning 18 degrees between each circle.
      grade4_frozen_functions3_instruction: |-
        Here's a ”Create circle”
        block that can make circles of different sizes. Can you use this to create
        a small circle of size 5 and a larger circle of size 10?
      grade4_frozen_functions4_instruction: |-
        Intricate snow patterns can be created with
        very simple shapes. Can you make a pattern by repeating 5 circles of size
        5 and 5 circles of size 10?
      grade4_frozen_nested_loop_diamonds2_instruction: |-
        Did you know every snowflake is
        a different shape? Let's create a new snowflake by using another “Repeat"
        block to repeat a parallelogram 4 times, turning right by 90 degrees between
        each parallelogram.
      grade4_frozen_nested_loop_diamonds3_instruction: |-
        Now, let's create a new snowflake by
        using the repeat block to repeat a parallelogram 10 times, turning right by
        36 degrees between each one.
      grade4_frozen_square_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make a square
        with the “Repeat” block, which uses fewer blocks. How many times (???) should
        the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop1_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make a square
        with the “Repeat” block, which uses fewer blocks. How many times (???) should
        the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop2_instruction: |-
        Let's create three squares, turning after
        each square. Be sure to turn by 120 degrees before each new square.
      grade4_frozen_square_loop3_instruction: |-
        Can you create a snowflake using the
        “Repeat” block to make a square 10 times, and the “Turn” block to turn 36
        degrees between each square?
      grade4_playlab_freeplay_instruction: "It's free play time! Have fun\nwith all
        the blocks in your tool box. "
      grade4_playlab_test_instruction: "Use the right arrow to throw pie.\r\n\r\nIn\nour
        game, how should we score points? Add 1 to your \"points\" variable each\ntime
        Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\"\nevent
        to trigger an update to your score. You can increment your variable\nby setting
        \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to
        pass the level."
      grade4_playlab_test2_instruction: |-
        Here's a function called `jump` that
        causes your main character to jump up 100 pixels. Run the program and use
        the jump function to collect all of the flags by moving the dog with the arrow
        keys.
      grade4_review_artist1_instruction: |-
        Hi, I'm an artist. You can write code to make
        me draw almost anything. Use a few blocks to make me draw over the grey lines
        in the picture. (Each line is 100 pixels long)
      grade4_review_artist2_instruction: |-
        This house needs a roof! Draw the triangle.  Hint:
        all three sides are the same length.
      grade4_review_artist3_instruction: |-
        The jump block moves the artist without drawing.
        Draw the dashed line using both the `jump forward` and `move forward` blocks.
        Each line is 50 pixels long.
      grade4_review_bee1_instruction: |-
        Now use the `repeat` block to collect all of
        the nectar and make all of the honey.
      grade4_review_bee2_instruction: |-
        Collect nectar from each flower and make honey
        at each honeycomb using the fewest blocks possible.
      grade4_review_bee3_instruction: "Such a busy bee!\r\n\r\nHelp bee collect all\nof
        the nectar and make all of the honey with the fewest blocks possible."
      grade5_artist_binary1_instruction: "Binary is a way of representing information\nusing
        only two options.  Here, we're going to use the options \"off\" (represented\nby
        the number 0) and \"on\" (represented by the number 1).  \r\n\r\nWe've\nprovided
        you with a grid of \"pixels\" that you can walk through and make\ndesigns
        by turning on only certain squares.  Can you have the artist draw\n\"01010101\"
        in binary in the first row?"
      grade5_artist_binary10_instruction: Click here to see hints.
      grade5_artist_binary11_instruction: 'Free Play: Here''s a blank canvas for you
        to draw on. रमाईलो गर्नुहोस्!'
      grade5_artist_binary2_instruction: "Here's a function that takes a binary\nstring
        of 1's and 0's and instructs the artist to follow them from left\nto right,
        top to bottom.  The artist will fill-in the squares when it sees\na 1 and
        ignore the square when it sees a 0. \r\n\r\nRun this code to see how\nthe
        artist uses binary to draw this pattern."
      grade5_artist_binary3_instruction: |-
        Which of these binary strings could
        you loop 8 times to draw this image?
      grade5_artist_binary4_instruction: |-
        Can you draw this pattern by looping
        just three binary digits (0s and 1s)?
      grade5_artist_binary5_instruction: |-
        Each binary string represents one row
        of this picture. Can you rearrange them so it draws a smiley face instead
        of a frowny face?
      grade5_artist_binary6_instruction: |-
        Which 6 digit binary string, repeated
        11 times, will draw this image?
      grade5_artist_binary7_instruction: |-
        What is the shortest binary string that
        you can repeat to draw this image?
      grade5_artist_binary8_instruction: Finish this drawing.
      grade5_artist_binary9_instruction: "Here's a higher resolution\ncanvas to draw
        on - 16 pixels by 16 pixels!\r\n\r\nSee what happens when we\nstart to get
        creative with the bits?"
      grade5_artist_for_loops10_instruction: "Can you figure out how\nto use all of
        the things you've learned to create this image?\r\n\r\nNeed\na hint? Click
        here."
      grade5_artist_for_loops5_instruction: "Just one little change to the code\nfrom
        the last image can create this drawing. Can you figure out what that\nchange
        is?\r\n\r\nHint:  You need to remove something!"
      grade5_artist_for_loops6_instruction: |-
        If you turn a little bit more or
        less than you normally would for a shape, it creates a neat effect. Try using
        some of the code from the last level, but turning 89 degrees to create this
        twisted square spiral.
      grade5_artist_for_loops7_instruction: |-
        Make three small changes to the
        code from the last level to get this!
      grade5_artist_for_loops8_instruction: "Remember back in a previous stage\nwhen
        we used a variable to control the number of sides in a shape? We are\ngoing
        to do the same thing with the `counter` variable now. This pattern starts\nwith
        a triangle and adds one side at a time until it draws a decagon (10 sides).\nEach
        side should be 100 pixels long. "
      grade5_artist_for_loops9_instruction: "Let's put it all together!  Using\nyour
        knowledge of `for` loops and the `counter` variable, create this drawing\nwhere
        each shape has two more sides than the last.  Make sure that each side\nis
        10 times as long as the number of sides in the polygon.\r\n\r\nVery little\nof
        the code has been provided for you."
      grade5_artist_for_loopsfreeplay11_instruction: "Free-Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n\r\nNeed a hint? Click here."
      grade5_artist_functionparameters10_instruction: "Free Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n \r\nWant to know how our inspiration pattern was made? "
      grade5_artist_functionparameters7_instruction: |-
        This image is similar to the last.
        Can you use a `for` loop with your function to make this design?
      grade5_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      grade5_artist_parameters_triangles2a_instruction: |-
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      grade5_artist_parameters_triangles4_instruction: |-
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      grade5_artist_variables_freeplay10_instruction: |-
        Free Play: Experiment with the number
        of sides this shape has. Can you change the algorithm so that the overall
        size of the shape stays the same, no matter how many sides it has? Hint: If
        you divide your starting length by the number of sides, the length of each
        side will get shorter as the number of sides gets higher.
      grade5_artist_variables_freeplay14_instruction: "Free Play: Check it out! Now
        your algorithm\nis nested within one more loop. Experiment with changing the
        values of your\ntwo variables to draw cool patterns.\r\n\r\nFor even more
        effect, try playing\nwith color!  Use random colors inside loops to see how
        it changes your design."
      grade5_artist_variables_freeplay15_instruction: "Want a second peek at the inspiration\ndesign
        or the hints?  Click here!\r\n\r\nOtherwise, make a design all your\nown!"
      grade5_artist_variables_freeplay16_instruction: |-
        Still playing?  Here is a blank canvas where
        you can create whatever you want!
      grade5_artist_variables_hexagons1_instruction: "Let's try it again! \r\n\r\nCan
        you\nset the `length` variable to 60 to make this cool design with hexagons?"
      grade5_artist_variables_letterT11_instruction: |-
        Here’s more complicated code using the
        same concepts from the last puzzle - what should you set the "sides" variable
        to in order to draw this picture made of squares?
      grade5_artist_variables_octagons13_instruction: "When a shape has lots of sides,
        each\nside needs to be shorter if you want the whole pattern to fit on the
        screen.\n\r\nLet's recreate the algorithm for this amazing pattern, but instead
        of\nmanually setting the `length` variable, let's use a math block with the
        `sides`\nvariable inside to make sure that each shape fits correctly. The
        perimeter\nof each polygon is 300 pixels.\r\nNeed some hints?  Click here."
      grade5_artist_variables_pentagon8_instruction: "Use what you learned in the
        last puzzle\nto create this hexagon using the \"sides\" variable.\r\n\r\nSee
        how you could\nchange just one value to draw a triangle,  square, pentagon,
        or octagon?"
      grade5_artist_variables_pentagon9_instruction: |-
        Now, recreate the algorithm from
        the last level and create a pentagon with sides of length 150.
      grade5_artist_variables_pentagons1_instruction: "Draw this pattern of pentagons
        with\n100 pixel sides by setting the right value for `length` and dropping
        the `length`\nvariable into all of the the correct places. \r\n\r\nSee how
        you only have\nto set the value for `length` once, and the code uses the right
        value everywhere?"
      grade5_artist_variables_pentagons12_instruction: |-
        Let's set the "sides" variable to
        5. The more sides we add to this algorithm, the bigger this whole pattern
        gets! Notice that there is another variable called "length". We can now
        use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      grade5_artist_variables_rectangle6_instruction: |-
        Now I want to make a rectangle that is
        twice as tall as it is wide. We've got a variable called "width" that needs
        to be set to 100. Can you use the math blocks to complete the code?
      grade5_artist_variables_square7_instruction: "Here’s some code that can draw
        any regular\npolygon. There’s a new variable called sides that is set to 4.
        Can you use\nthe sides variable (along with the math block) to turn the right
        amount regardless\nof how many sides there are in the polygon?\r\n\r\nClick
        here to go back to\nthe hint!"
      grade5_artist_variables_triangles2_instruction: |-
        Instead of using "move forward by 150,"
        the "move" block is now referencing a variable called "length." Can you
        set "length" to 150 to draw this new triangle?
      grade5_artist_variables_triangles3_instruction: |
        Drag a number block to both the `set
        length` block and the `repeat _ times` block to draw a set of 50 pixel triangles.
      grade5_bee_for_loops1_instruction: |-
        Use a loop to collect the nectar from
        each flower.
      grade5_bee_for_loops2_instruction: |-
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      grade5_bee_for_loops6_instruction: |-
        You can also use a "for loop"
        to count down. Try gathering this nectar by counting down from 5 to 1 by 1.
      grade5_bee_for_loops8_instruction: |-
        You've got this! What should your
        increment be to collect 3, 6, 9, 12, 15 nectar?
      grade5_playlab_freeplay_instruction: "It's free play time! Have fun\nwith all
        the blocks in your tool box. "
      grade5_playlab_variables1_instruction: |-
        This time you don't have to write any
        code, just hit "Run" to play the game! In this game, you're the dog who
        is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      grade5_playlab_variables10_instruction: |-
        Edit the the "patrol" function to
        add an "actor" parameter, so that we can call it for each of the actors
        on the screen. Remember, the actors correspond to numbers 1, 2, and 3.
      grade5_playlab_variables11_instruction: |-
        Add another parameter called "speed"
        to the "patrol" function. Try using a "set speed" block with the new "speed"
        parameter to help Penguin get both flags before the other sprites even get
        one.
      grade5_playlab_variables12_instruction: "Let's have some fun! Look at the\ncode
        provided to see if you can figure out what each block does.  \r\nWhen\nyou're
        done, use the arrow keys to control Dog and collect all of the flags.\r\nNOTE:\nYou
        don't need to make any changes to the program"
      grade5_playlab_variables13_instruction: |-
        Use the `when actor touches` block
        to send Dog back to the top-left ONLY if Dog touches any of the other actors.
      grade5_playlab_variables14_instruction: "It's free play time! Have fun\nwith
        all the blocks in your tool box. "
      grade5_playlab_variables2_instruction: |-
        The race in that last puzzle wasn't
        very fair! Change the `dog_speed` variable to make sure you can collect more
        flags than Cat. The first to collect 10 flags wins!
      grade5_playlab_variables3_instruction: |-
        Use the left and right arrows to move,
        and the up arrow to jump. See if you can collect all of the flags.
      grade5_playlab_variables4_instruction: |-
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags.
      grade5_playlab_variables6_instruction: "Use the right arrow to throw pie.\r\n\r\nIn\nour
        game, how should we score points? Add 1 to your \"points\" variable each\ntime
        Dog hits Cat with a piece of pie. Use the \"when actor 2 touches anything\"\nevent
        to trigger an update to your score. You can increment your variable\nby setting
        \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to
        pass the level."
      grade5_playlab_variables7_instruction: |-
        Nice, now let's make sure this game
        isn't too easy to play. Any time Dog (actor 1) gets hit by a sandwich from
        Cat (actor 2), you should lose a point. Start with 10 points so it's not
        too hard. Let your score drop down from 10 to 0 to pass the level.
      grade5_playlab_variables71_instruction: "Here's our game from an earlier stage,\nbut
        most of the code is hidden. There’s a new function `score_points.`\r\n\r\nEdit\nthe
        function so that a new parameter called `points` can be added to `player_score`.\n\r\n\r\nThe
        variable `player_score` should increase each time Dog tags Cat\nwith pie,
        and decrease each time that Cat tags Dog with a sandwich.\r\n\r\nNote:\nWhen
        you're done, click \"Run\" to play.  When Dog scores 6 points, you will\nmove
        on to the next puzzle. "
      grade5_playlab_variables81_instruction: "We've added one last function for\nyou.
        \r\n\r\nUse an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\r\n\r\nFor\nexample:
        \"player_score\" > 6\r\n\r\nPlay the game, and make it to level 3\nto move
        to the next puzzle. "
      grade5_playlab_variables9_instruction: "Here's a function called `patrol`.\n\r\n\r\nEdit
        `patrol` to move Cat up 400 pixels and then down 400 pixels."
      grade5_playlab_variables_freeplay_instruction: "Free Play time! Here are all
        of the\nvariables we've played with so far in this stage, as well as a few
        more in\ncase you want them. \r\n\r\nNotice that there are now so many blocks
        in our\ntoolbox that they need to be organized!  Here, we've put each piece
        into\nan appropriate category.  Take some time to explore everything that
        is available.\nWhen you're done browsing, make a game or story using repeats,
        variables,\nand events.  \r\n\r\nHint: scroll down to see all the commands
        in the workspace."
      k-1 maze 1_instruction: Can you make me move West to get to the pig?
      level 'grade3_Loops_10_instruction: "Such a busy bee!\r\n\r\nHelp bee collect
        all\nof the nectar and make all of the honey with the fewest blocks possible."
      level 'grade3_Loops_11_instruction: "The shape of this path is different than
        the\nothers. \r\n\r\nCan you collect all of the nectar using as few blocks
        as possible?"
      level 'grade3_Loops_12_instruction: |-
        Can you find the quickest way for the bee to
        collect all of the nectar and make all of the honey?
      level 'grade3_Loops_2_instruction: This time, use a loop to gather all of the
        nectar.
      level 'grade3_Loops_3_instruction: Use a `repeat` loop to collect all of the
        nectar.
      level 'grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all of
        the nectar and make all of the honey.
      level 'grade3_Loops_5_instruction: |-
        What a beautiful field of flowers!   Help the
        bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      level 'grade3_Loops_6_instruction: "How many times can loops help you in this
        puzzle?  \r\n\r\nLoops\nare your friend! Use a few of them to complete this
        puzzle with the fewest\nblocks possible."
      level 'grade3_Loops_7_instruction: "Those flowers look tasty!\r\n\r\nCollect
        nectar\nfrom each of the flowers using the fewest blocks possible."
      level 'grade3_Loops_8_instruction: |-
        Collect all the nectar and make all of the honey
        using the fewest blocks possible.
      level 'grade3_Loops_9_instruction: |-
        Collect nectar from each flower and make honey
        at each honeycomb using the fewest blocks possible.
      level grade3_Loops_2_instruction: This time, use a loop to gather all of the
        nectar.
      scrat 16 (copy 1)_instruction: |-
        Acorn! Acorn! Acorn! Use an "if" block to get me there
        with the fewest number of blocks.
      scrat 16_instruction: |-
        Acorn! Acorn! Acorn! Use an "if" block to get me there
        with the fewest number of blocks.
      scrat 17_instruction: |-
        Ok, let's do that again for practice - this isn't
        very different, but watch out for the wall!
      scrat 18 (copy 1)_instruction: |-
        The "If-else" blocks checks a condition, and then
        does one thing OR another. To get me to the acorn try to use this new block.
      scrat 18_instruction: |-
        The "If-else" blocks checks a condition, and then
        does one thing OR another. To get me to the acorn try to use this new block.
      scrat 19 (copy 1)_instruction: |-
        One more practice of the "if-else" block, can you
        get it right on your first try?
      scrat 19_instruction: |-
        One more practice of the "if-else" block, can you
        get it right on your first try?
      scrat 20_instruction: |-
        Can you add just 3 blocks to help me solve a more complex
        maze? If you do it right, I can walk any curvy path no matter the length.
        Hurry! The ice is melting!
