{
  "es-MX": {
    "data": {
      "reference_guides": {
        "csd-2022/accelerometer-events": {
          "display_name": "Sucesos del acelerómetro",
          "content": "Al igual que los otros sensores, el acelerómetro tiene los eventos `datos` y `cambio`. Estos son particularmente útiles porque te permiten rastrear constantemente los valores actualizados del acelerómetro, como la orientación. \n\n| Evento   | Descripción                                                                                                                                                                                                                           |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `datos`  | Se activa cada 100 ms para comprobar los datos del acelerómetro.                                                                                                                                                                      |\n| `cambio` | Se activa cuando el acelerómetro detecta un cambio en el movimiento. Esto comprueba si los datos actuales del sensor son los mismos que hace 100ms. Si este es el caso, el evento no se activa. De lo contrario, el evento se activa. |\n| `agitar` | Se activa cada vez que se agita la placa.                                                                                                                                                                                             |\n\nA veces no nos importa la orientación de la placa, sólo nos importa que se mueva. Aquí es donde entran en juego eventos como `cambio` y `agitación`. "
        },
        "csd-2022/accuracy-in-ai-lab": {
          "display_name": "Precisión en AI Lab",
          "content": "## Precisión en el Laboratorio de Inteligencia Artificial\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/03-Evaluating-Accuracy---Categorical---a.png\"/>\n\n[][0]\n\n1.  La fila superior es la puntuación de precisión de tu modelo más reciente en el Laboratorio de Inteligencia Artificial. Consulta más abajo para obtener más información sobre cómo se calcula la precisión.\n2.  También puedes ver modelos anteriores que hayas entrenado en el Laboratorio de Inteligencia Artificial. Estos pueden ayudarte a identificar patrones y recordar qué características condujeron a los modelos más precisos. \n3.  Pulsa en el botón Detalles para ver más información sobre el rendimiento de tu modelo.\n\n[/][0]\n\n## ¿Cómo se Calcula la Precisión?\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/image_81IyXga.png\" width=\"50%\" />\n<p>\nUna vez seleccionadas las etiquetas y las características, los datos se dividen automáticamente en dos secciones: los <strong>Datos de Aprendizaje</strong> y los <strong>Datos de Prueba</strong>.\n</p>\n<p>\nLos <strong>Datos de Aprendizaje</strong> son los que el Bot de Inteligencia Artificial utiliza para buscar patrones que le ayuden a tomar decisiones. Como el Bot de Inteligencia Artificial necesita muchos datos para tomar decisiones, utiliza el 90% del conjunto de datos original para entrenarse. Los <strong>Datos de Prueba</strong> se mantienen ocultos para el Bot de Inteligencia Artificial hasta que haya terminado de entrenar. \n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:right; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/image_EygFTNF.png\" width=\"50%\" />\n<p>\nUna vez que el Bot de Inteligencia Artificial ha terminado de entrenarse, mira los <strong>Datos de Prueba</strong> para poder comparar sus predicciones con los datos originales. Esto es como estudiar para un examen mirando preguntas de práctica en las que conoces las respuestas: intentas hacer las preguntas tú mismo y luego compruebas tus respuestas para ver lo bien que lo has hecho.\n</p>\n<p>\nAsí es como obtenemos nuestra puntuación de precisión: es lo bien que lo hicieron las predicciones del Bot de Inteligencia Artificial cuando las comparamos con los datos del conjunto de datos original. Si el Bot de Inteligencia Artificial acierta la mayoría de las respuestas, podemos estar seguros de que ha encontrado los patrones que coinciden con nuestros datos originales.\n</p>\n</div>\n\n## ¿Qué Importancia tiene la Precisión?\n\nLa precisión puede hacer un buen trabajo a la hora de comprobar si tu modelo de aprendizaje automático ha conseguido encontrar patrones en tus datos, pero esto no siempre significa que tu modelo esté listo para empezar a resolver problemas en el mundo real. Una puntuación de precisión alta no significa que tu modelo vaya a hacer un buen trabajo en el mundo real con usuarios reales, sólo significa que ha hecho un buen trabajo. <em>con los datos que ya tenía</em>. Si hubo problemas con tus datos, seguirá habiendo problemas con tu modelo.\n\n## Vídeo\n\n(Abre YouTube en una pestaña nueva)\n\n[undefined][1]"
        },
        "csd-2022/ai-lab": {
          "display_name": "Laboratorio de Inteligencia Artificial"
        },
        "csd-2022/analog-sensors": {
          "display_name": "Circuit Playground - Sensores",
          "content": "Los botones y el interruptor de palanca se consideran entradas _binarias_, porque sólo pueden comunicar uno de dos estados (arriba/abajo para los botones, abierto/cerrado para el interruptor). Existe otra clase de entradas llamadas _entradas analógicas_. A diferencia de los botones y el interruptor, estas _entradas analógicas_ pueden comunicar un rango de valores.\n\n## Luz, Sonido y Temperatura\n\nEl Circuit Playground tiene tres sensores analógicos básicos, cada uno de los cuales recibe una entrada analógica y la convierte en un valor utilizable por el ordenador.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp_sensors.png\" alt=\"analog sensors\" class=\"center\" style=\"width: 500px;\">\n\n[][0]\n\n1.  El _Sensor de Luz_ (representado en código como [`lightSensor`(#f78183)][1]) se utiliza para medir la cantidad de luz ambiental. Cuando está completamente oscuro, [`lightSensor.value`(#f78183)][2] leerá como 0, y cuando está completamente iluminado leerá 1023.\n2.  El _Sensor de Temperatura_ (representado en código como [`tempSensor`(#f78183)][3]) mide la temperatura. En lugar de proporcionar un valor bruto (como hacen los otros dos sensores), este sensor aprovecha el hecho de que ya tenemos formas comúnmente entendidas de convertir la temperatura en un valor computable. El [`tempSensor.F`(#f78183)][4] y [`tempSensor.C`(#f78183)][5] proporcionan la lectura de la temperatura en grados Fahrenheit o Celsius, respectivamente.\n3.  El _Sensor de Sonido_ (representado en código como [`soundSensor`(#f78183)][6]) se utiliza para medir el ruido. Es importante tener en cuenta que _no_ es realmente un micrófono; no esperes grabar sonido con el sensor de sonido, sólo es capaz de medir el volumen del sonido que detecta. Al igual que el _Sensor de luz_, proporciona un valor que va de 0 a 1023.\n\n[/][0]\n\n## Lectura de Datos del Sensor\n\nLos sensores de sonido y luz tienen cada uno una propiedad llamada _valor_ que le permite leer el valor de entrada actual de un sensor (como con [`soundSensor.value`(#f78183)][7]). Si el rango de entrada completo de 0-1023 no satisface las necesidades de tu programa, puedes cambiar el rango de números devueltos usando el método _setScale()_. Por ejemplo, [`soundSensor.setScale(-50, 50)`(#f78183)][8] cambiará el rango del sensor de sonido para que el número más bajo sea -50 y el más alto 50. Esto no se aplica al sensor de temperatura, que tiene dos propiedades, _F_ y _C_ que informan de la temperatura en un formato que es tanto computable como legible.\n\n## Sensibilidad de los Sensores\n\nLos sensores de tus placas son instrumentos relativamente poco precisos. Aunque existen sensores más caros y consistentes para aplicaciones que requieren valores de alta fidelidad (como herramientas médicas o científicas), estos sensores sólo proporcionan una aproximación.\n\nPuedes encontrarte con que tus programas funcionan de forma diferente en las distintas placas, porque los sensores de cada placa dan lecturas diferentes. Una forma de tener esto en cuenta es escribir código que te permita _calibrar_ tus sensores para diferentes placas. Si tu aplicación tiene código que debe ejecutarse si la lectura del sensor supera un cierto valor, considera hacer de ese valor una variable que pueda cambiarse desde la interfaz de usuario. De esta manera el usuario puede modificar la variable para que funcione mejor con su placa."
        },
        "csd-2022/animation-tab": {
          "display_name": "Pestaña de Animación",
          "content": "En el Laboratorio de Juegos, las _Animaciones_ son dibujos u otras imágenes que puedes utilizar para cambiar el aspecto de tus sprites. Puedes usar el bloque `sprite.setAnimation()` para cambiar las animaciones de tu sprite a cualquiera de las animaciones que hayas añadido en la _Pestaña Animación_.\n\n## Usando la Pestaña Animación\n\nPulsando sobre el botón **Animación** encima del área de visualización accederás a la _Pestaña Animación_, donde puedes importar o dibujar animaciones para ser usadas por tus sprites.\n\n[][1]\n\n[][0]\n\n1.  Utiliza estos botones para cambiar entre la pestaña de animación y la pestaña de código.\n2.  Esta columna muestra todas las animaciones que has creado. Pulsa sobre una animación desde aquí para editarla.\n3.  Pulsa el signo + para añadir una nueva animación. Puedes seleccionar una animación de la biblioteca, importar una imagen de tu ordenador o dibujar una desde cero.\n4.  Las herramientas de dibujo de esta columna te permiten dibujar o modificar animaciones.\n5.  Dibuja o edita tu imagen en este lienzo.\n6.  Abre este cajón para cambiar el tamaño general de tu imagen o lienzo.\n\n[/][0]"
        },
        "csd-2022/app-lab": {
          "display_name": "Laboratorio de aplicaciones",
          "content": "Laboratorio de Aplicaciones es una herramienta creada con [JavaScript][0] que puede utilizarse para crear aplicaciones. Más información sobre los comandos de Laboratorio de Aplicaciones en la [Documentación de App Lab][1]."
        },
        "csd-2022/applab-overview": {
          "display_name": "Resumen",
          "content": "Laboratorio de Aplicaciones es una herramienta creada con [JavaScript][0] que puede utilizarse para crear aplicaciones. Más información sobre los comandos de Laboratorio de Aplicaciones en la [Documentación de App Lab][1]."
        },
        "csd-2022/arrays": {
          "display_name": "Arreglos",
          "content": "Un _array_ es un grupo de valores que se almacenan en un orden determinado. Por lo general, estos valores son todos del mismo tipo (como todos los números, todo el texto, o incluso todos los sprites), pero en JavaScript, los arrays también pueden contener diferentes tipos de elementos.  Puedes usar arrays para crear una lista de cosas que almacenas en una única variable.\n\n## Creación y uso de Arrays\n\nLos arrays parecen listas dentro de corchetes.  Cada valor del array debe separarse con comas.\n\n`[1,5,7,2]`\n\nCada vez que crees un array, necesitarás almacenarlo en una variable inmediatamente para poder acceder a los valores más tarde.  Como esto es tan importante, el bloque para crear un array almacena automáticamente el array en una variable.\n\n[][0]\n\nPuedes acceder a un valor dentro de tu array utilizando su número de índice.  Los números de índice empiezan en 0 y van contando hasta llegar al final del array.  Por ejemplo, en el array anterior, \"a\" está en el índice 0, \"b\" está en el índice 1 y \"c\" está en el índice 2."
        },
        "csd-2022/board-events": {
          "display_name": "Eventos del tablero",
          "content": "El bloque [`onEvent()`(#fff176)][1] se utiliza para configurar _manejadores de eventos_ que pueden estar atentos a ciertos _eventos_ que ocurren en tu aplicación, como pulsar un botón, seleccionar un elemento de un desplegable o mover el ratón. El Circuit Playground tiene un bloque similar llamado `onBoardEvent()` para vigilar los eventos que ocurren en la placa. De forma similar a [`onEvent()`(#fff176)][2], necesitas especificar qué debe vigilar el manejador, qué evento debe vigilar, y cómo responder a ese evento.\n\n### onBoardEvent\n\nEs importante entender en la programación orientada a eventos que:\n\n-   **Los usuarios disparan eventos** - Los eventos ocurren cuando los usuarios interactúan con las entradas en la placa, como los botones, el interruptor, y otros.\n-   **Los eventos disparan código** - Cuando un evento ocurre o se \"dispara\" puede ser usado para disparar una función particular.\n\nEl bloque `onBoardEvent()` del Maker Toolkit es un tipo de función de manejo de eventos llamada Receptor de Eventos. Envuelve toda la configuración que necesita para hacer el manejo de eventos en un comando que tiene varias partes. Aquí hay un ejemplo con todo etiquetado:\n\n[][3]{: class=\"center\", style=\"width: 700px; margin: 20px auto;\"}\n\n[][0]\n\n1.  Código a ejecutar al dispararse la función callback cuando el usuario pulsa el botón izquierdo, `buttonL`. En este caso, escribe la palabra \"click\" en la consola. Observa que estamos usando la _variable_ `buttonL` (sin comillas). Esto es diferente de [`onEvent`(#fff176)][4], que utiliza una _string_ para especificar el ID de un elemento de diseño.\n\n2.  Observa que esta función, a diferencia de la mayoría de las que hemos visto, no tiene nombre. También se denomina _función de devolución de llamada_, que es un término extraño. Una función callback sólo se diferencia de una función normal en que no la llamas directamente desde tu código. En su lugar, una función callback es **llamada por el sistema** en el momento en que ocurre el evento especificado. Las funciones callback son un patrón común en mucha programación dirigida a eventos.\n\n[/][0]"
        },
        "csd-2022/body-styling": {
          "display_name": "Estilos de cuerpo (body)",
          "content": "El elemento `<body>` es un elemento especial que envuelve todo el contenido visible de una página web. Como todo lo que ves está dentro de esta etiqueta, cualquier conjunto de reglas que crees para el elemento body se aplicará a todos los elementos de la página, a menos que el propio elemento tenga una regla que lo contradiga. Esto es útil para establecer un estilo base para todo en tu página.\n\n## Ejemplo\n\nEste conjunto de reglas haría que todo el texto de tu página web fuera azul y estuviera centrado.\n\n    body {\n        text-align: center;\n        color: blue;\n    }"
        },
        "csd-2022/booleans-and-comparison-operators": {
          "display_name": "Operadores booleanos y de comparación",
          "content": "## Sopa de Palabras: Condicionales, Booleanos, expresiones, sentencias\n\n<div style=\"width: 33%; float: right; border: solid 1px #00adbc; padding: 10px; margin: 10px;\">\n<Strong>Notas Históricas sobre Booleanos</Strong><br>\n<li> Lleva el nombre del matemático George Boole \n<li> Inventó un rincón de las matemáticas que ahora lleva su nombre llamado \"Álgebra de Boole\" \n<li> El álgebra de boole es la matemática que opera utilizando sólo valores verdadero/falso. \n<li> Se trata de un trabajo importante para la informática, ya que verdadero/falso se convierte fácilmente en binario.\n</div>\n\nComo has visto en el vídeo, hay un montón de términos que generalmente se refieren a lo mismo.\n\n**Booleano, valores booleanos, expresiones booleanas:**\n\n-   Un **valor booleano** es simplemente un término informático que significa **un valor verdadero/falso**.\n-   Una **expresión booleana** es una sentencia que _evalúa_ a un valor booleano (un único verdadero/falso).\n\n**Condición, Condicionales, Sentencias Condicionales**:\n\n-   \"Condicional\" es simplemente un término genérico para el código que altera el flujo del programa basado en valores verdadero/falso (como una sentencia [`if`(#64d5ff)][0]).\n-   Ejemplos: Condición, Condicionales, Sentencias condicionales, Ejecución condicional\n\n## Operadores de Comparación\n\n<img src=\"https://images.code.org/79f2ae7d27a3fa434138aeeb17146cab-image-1479413755076.png\" style=\"float: left; margin-left: 20px; margin-right: 20px\">\n\nUn tipo común de condición a comprobar es la comparación de dos valores.  Aquí hay 6 **operadores de comparación** comunes. Cada uno compara un valor a la izquierda con un valor a la derecha y devuelve un valor booleano -- **verdadero** o **falso**.  La mayoría de ellos hacen lo que cabría esperar. \n\n### Por qué estos símbolos: **==**, **!=**, **\\<=**, y **>=**?\n\n1.  Usamos `==` porque el signo igual simple <code>=</code> es el operador de asignación. Necesitamos algo diferente para indicar que queremos comparar dos valores en lugar de asignar uno a otro.\n\n    **Error común:** escribir algo como [`if(edad = 18)`(#64d5ff)][1] en lugar de [`if(edad == 18)`(#64d5ff)][2].  Nos aseguraremos de corregir esto más adelante.\n\n2.  Utilizamos `!=`, `<=` y `>=` porque sólo requieren símbolos ASCII. Históricamente, los símbolos matemáticos <code>≠</code>, <code>≤</code> y <code>≥</code> eran difíciles o imposibles de producir en algunos sistemas.  El `!` se lee universalmente como \"no\".\n\n<div style=\"clear: both\">&nbsp;</div>\n\n## Referencia: Ejemplos\n\nA continuación encontrarás varios ejemplos de comparaciones en código. Revísalos si quieres o continúa y vuelve si necesitas referencias.\n\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/ea8cf41d0e06e6ddee31086fbb9ea2b9-image-1479232029068.png\" style=\"float: left; margin-left: 50px; margin-right: 50px\">\n\nCompara dos valores - números, cadenas u otros booleanos - y devuelve _cierto_ si son iguales, en caso contrario _falso_.\n\n-   `\"Hola\" == \"hola\"` devuelve _falso_ -- porque las cadenas se escriben con mayúsculas diferentes.\n-   `\"3\" == 3` devuelve _cierto_ -- porque `==` intenta ser indulgente. Si puede \"coaccionar\" una cadena para convertirla en un número, lo hará para comparar. <sup>1</sup> \n-   `(2+1) == 3` devuelve _cierto_ -- porque la expresión aritmética evalúa a 3.\n-   `x == 7` devuelve _cierto_ -- cuando la variable x tiene el valor 7.\n\n<sup>1.</sup> Aunque es una característica útil que `==` convierta una cadena en un número, se considera **ENGAÑOSO** porque la cadena \"3\" no es lo mismo que el entero 3.  Hay veces en que se podría creer que no son iguales.   Existe un operador de igualdad \"estricto\" - el \"triple igual\" `===` que se asegura de que tanto el tipo de dato como el valor son iguales.  Así que `\"3\" === 3` es falso.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/67fc10f1dec4f129c64c62d583ebf7ee-image-1479232142029.png\" style=\"float: left; margin-left: 50px; margin-right: 50px\">\n\nCompara dos valores - números, cadenas u otros booleanos - y devuelve `cierto` si son **no iguales**, en caso contrario `falso`.\n\n-   `\"Hola\" != \"hola\"` devuelve _cierto_ -- porque las cadenas son ligeramente diferentes.\n-   `\"3\" != 3` devuelve _falso_ -- porque la cadena 3 se puede convertir en un número antes de compararla con 3. (véanse las notas anteriores sobre el indulgente ==).\n-   `(2+1) != 3` devuelve _falso_ -- porque la expresión aritmética evalúa a 3.\n-   `x != 7` devuelve _cierto_ -- cuando la variable x _es cualquier valor distinto de_ 7.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img style=\"float: left; margin-left: 50px; margin-right:50px; margin-bottom: 20px;\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/536aed5657843fca3b52a044f2f3bdc7-image-1479242736018.png\">\n\nCompara dos valores para ver si el número de la izquierda es <em>mayor que</em> el número de la derecha.\n\n-   `4 > 3` devuelve _cierto_\n-   `3 > 7` devuelve _falso_\n-   `edad > 17` devuelve _cierto_ -- cuando el valor de la variable \"edad\" es estrictamente mayor que 17, en caso contrario falso.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/3c7c9336270e093bad437d69d155a8c7-image-1479242773012.png\" style=\"float: left; margin-left: 50px; margin-right:50px; margin-bottom: 20px;\">\n\nCompara dos valores para ver si el número de la izquierda es <em>menor que</em> el número de la derecha.\n\n-   `4 < 3` devuelve _falso_\n-   `3 < 7` devuelve _cierto_\n-   `age < 17` devuelve _cierto_ -- cuando el valor de la variable \"edad\" es estrictamente menor que 17, en caso contrario falso.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/e899b0040a9f8ddc899b1df66773be74-image-1479242843374.png\" style=\"float: left; margin-left: 50px; margin-right: 50px; margin-bottom: 20px\">\n\nCompara dos valores para ver si el número de la izquierda es _menor o igual que_ el número de la derecha. \n\n-   `3 <= 4` devuelve _cierto_\n-   `4 <= 3` devuelve _falso_\n-   `edad <= 18` devuelve _cierto_ -- cuando el valor de la variable \"edad\" es 18 o menor.\n\n<div style=\"clear:both\"> </div>\n\n<hr>\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/2ca857bff29bca22a2a42433c6b3981f-image-1479242807960.png\" style=\"float: left; margin-left: 50px; margin-right: 50px; margin-bottom: 20px\">\n\nCompara dos valores para ver si el número de la izquierda es _mayor o igual que_ el número de la derecha.\n\n-   `3 >= 4` devuelve _falso_.\n-   `4 >= 3` devuelve _cierto_\n-   `edad >= 18` devuelve _cierto_ -- cuando el valor de la variable \"edad\" es 18 o mayor.\n\n<div style=\"clear:both\"> </div>\n\n<hr>"
        },
        "csd-2022/changing-screens": {
          "display_name": "Cambiar pantallas",
          "content": "## Uso del comando _setScreen_ para cambiar de pantalla con código\n\nEl comando [`setScreen`(#fff176)][1] cambia la pantalla para mostrar la que quieras.  Se especifica la pantalla por su ID.\n\n[][2]\n\n[][0]\n\n1.  Busca [`setScreen`(#fff176)][3] en la caja de herramientas de Elementos de IU y arrástralo al espacio de trabajo de código.\n2.  La mayoría de las veces cambias la pantalla en respuesta a algún evento del usuario. En este caso [`setScreen`(#fff176)][4] está siendo añadido a un manejador de evento \"click\" para la imagen con ID \"smileyFace\"\n3.  Selecciona el ID de la pantalla a la que desea cambiar. En este caso, cuando se hace clic en la cara sonriente en la pantalla que dice \"hola\" queremos cambiar a la pantalla que dice \"adiós\".\n4.  **Idea clave: Múltiples Pantallas - Un Espacio de Trabajo de Codificación.** Este es el código que maneja un evento \"click\" para una _imagen que está en una pantalla diferente_ - la \"goodbyeScreen\". No puedes ver esa imagen ahora, o esa pantalla, porque la pantalla no está seleccionada.  Sin embargo, el código para ello todavía sigue aquí.\n\n[/][0]"
        },
        "csd-2022/changing-sensor-scale": {
          "display_name": "Cambiar la escala del sensor",
          "content": "Por defecto, cada uno de los sensores analógicos del Circuit Playground convierte sus datos sensados en un número de 10 bits con un valor mínimo de 0 y un máximo de 1023. Aunque este rango proporciona las lecturas más detalladas (ya que hay 1024 valores posibles), no siempre es el rango de números más útil. Si quieres usar una entrada de sensor para controlar el color rgb, mostrar un porcentaje, o de otra manera quieres restringir los valores potenciales de las entradas de sensor necesitarás asignar el rango de 0-1023 a otro rango.\n\n## Configurar Escala\n\nEl método _setScale_ te permite anular el rango por defecto de un sensor analógico. Por ejemplo, llamando [`soundSensor.setScale(0, 100)`(#f78183)][0] cambiará la escala del [`soundSensor.value`(#f78183)][1] para que el valor más bajo (completamente silencioso) sea 0, y el más alto (completamente ruidoso) sea 100.  "
        },
        "csd-2022/checking-multiple-conditions-with-if-else-if": {
          "display_name": "Comprobación de múltiples condiciones con If-Else-If",
          "content": "| Nombre                                               | Código (Bloque) | Código (Texto) |\n| ---------------------------------------------------- | --------------- | -------------- |\n| Comprobación de Múltiples Condiciones con If-Else-If | [][0]           | [][1]          |\n\n## ¿Cómo funciona?\n\nEl comando `if-else-if` te permite comprobar múltiples condiciones booleanas. El ordenador comprobará las condiciones en el orden en que están escritas hasta que una de las expresiones booleanas se evalúe como `cierta`. Se ejecutará el código asociado a esa expresión booleana, pero se omitirán todas las demás. Si ninguna de las expresiones se evalúa como `cierta` entonces se ejecutará el código dentro del comando `else`.\n\n## Primero los casos más específicos\n\nCuando escribas una sentencia if-else-if querrás poner los casos más específicos primero. En el ejemplo de la temperatura de arriba quieres comprobar si hay temperaturas por encima de 100 grados primero. Después el código comprueba las temperaturas por encima de 90 grados, pero debido al orden en que el código está escrito sabes que ninguna de las temperaturas que encontrará allí están por encima de 100 grados. Al fin y al cabo, ya las habría detectado en la sentencia if anterior. Esto significa que puedes estar seguro de que cualquier temperatura que encuentres allí estará entre 90 y 100 grados. A medida que continúas con la sentencia if-else-if utilizas la misma lógica para comprobar los diferentes rangos de temperatura.\n\n## Un Ejemplo Roto: Los casos más específicos al final\n\nEste es un ejemplo roto que muestra lo que ocurre si empiezas a comprobar las temperaturas en orden inverso, los casos más específicos en último lugar.\n\n[][2]\n\nPiensa en lo que pasaría cuando este código se ejecuta para la temperatura 82 grados. Querrías que la salida dijera `\"Hace calor\"`. Sin embargo, si miras la primera expresión booleana, te darás cuenta de que 82 es mayor que 60 grados, haciendo que la expresión booleana se evalúe como `cierta`. Como resultado, el código mostrará \"Hace frío\". Esto se debe a que la primera expresión no es realmente la más específica."
        },
        "csd-2022/circuit-playground": {
          "display_name": "Circuit Playground - Vista Previa",
          "content": "El Circuit Playground es un sencillo ordenador monoplaca con muchas entradas y salidas integradas que podemos explorar. Sin embargo, antes de profundizar demasiado, empecemos por lo básico.\n\n### El Diodo Emisor de Luz (LED)\n\nCuando un ordenador sólo necesita comunicar información simple, a menudo una luz parpadeante es la forma más rápida y sencilla de hacerlo. Los LEDs, o Diodos Emisores de Luz, son dispositivos pequeños, de bajo consumo y fáciles de usar para comunicarse con la luz. Echa un vistazo a la imagen de la derecha.\n\n<img src=\"//curriculum.code.org/images/circuitplayground/cp_leds.png\" style=\"float: right; width: 400px; margin-left: 10px;\">\n\n[diagram_nums]\n\n1.  El puerto USB te permite conectar el Circuit Playground. Conectarlo te permite comunicarte con la placa en App Lab, pero también proporciona electricidad a la placa para que pueda hacer cosas como encender LEDs.\n2.  El LED verde **Power** no puede ser controlado a través de código, pero te permite saber si la placa está recibiendo electricidad. Si este LED está apagado, no esperes que nada en tu placa funcione.\n3.  El **LED** rojo puede ser controlado en Laboratorio de Aplicaciones usando los bloques [`led`(#f78183)][0]. También se puede utilizar para ayudar a depurar tu placa, cada vez que conectes la placa, deberías ver este LED parpadear durante unos segundos. Fíjate que al lado del LED rojo está impreso el número **13**, este es el Pin de la placa al que está conectado este LED, aprenderemos más sobre Pines más adelante.\n\n### Conéctala\n\nConecta la placa al ordenador mediante un cable USB y observa cómo responden estos dos LEDs. ¿De qué otra forma podrías utilizar una sola luz para comunicar información útil a un usuario?"
        },
        "csd-2022/circuit-playground-parent": {
          "display_name": "Adafruit Circuit Playground",
          "content": "Estos recursos hacen referencia a funciones específicas del [Circuit Playground][0]."
        },
        "csd-2022/circuits-and-buttons": {
          "display_name": "Botones externos en el Circuit Playground",
          "content": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png\" alt=\"Button Up and Down\" style=\"width:300px; float: right; margin: 0 20px;\">\n\nPara crear un botón o un interruptor, sólo necesitas un circuito que pueda conectarse y desconectarse fácilmente. Al igual que un circuito LED, un circuito de botón puede crearse conectando un cable a un pin de datos y otro cable a un pin de masa. Para \"cerrar\" el circuito (que es como pulsar un botón) se conectan los dos cables, ya sea tocándolos entre sí o conectándolos a una pieza de hardware (como un botón o un interruptor) que pueda utilizarse para abrir y cerrar el circuito. Un botón \"abierto\" equivale al evento \"arriba\" del botón, mientras que un circuito \"cerrado\" es como el evento \"abajo\" del botón.\n\nCon una placa Circuit Playground Express, puedes crear un circuito de botón en cualquiera de los pines **\"A6\"**, **\"A5\"**, **\"A4\"**, **\"A0\"**, o **\"A1\"**.\n\nCon una placa Circuit Playground Classic, puedes crear un circuito de botones en cualquiera de los pines **0**, **2**, **3**, **6** y **12**.\n\n[clearfix]\n\n[/clearfix]\n\n## Creación de Circuitos de Botones\n\nPara crear un circuito de botones necesitarás un pin de datos, dos cables y un pin de masa.\n\n-   Conecta un cable al pin de datos numerado.\n-   Conecta otro cable al pin de tierra.\n\n## Codificación de un Circuito de Botón (Circuit Playground Express)\n\n    \\\\ Crear un botón conectado al pin A5\n    var myButton = createButton(\"A5\");\n\n    \\\\ Añade un manejador de eventos al nuevo botón\n    onBoardEvent(myButton, \"down\", function() {\n    \tconsole.log(\"button pressed\");\n    });\n\n## Codificación de un Circuito de Botón (Circuit Playground Classic)\n\n    \\\\ Crear un botón conectado al pin 0\n    var myButton = createButton(0);\n\n    \\\\ Añade un manejador de eventos al nuevo botón\n    onBoardEvent(myButton, \"down\", function() {\n    \tconsole.log(\"button pressed\");\n    }); "
        },
        "csd-2022/circuits-and-leds": {
          "display_name": "LEDs externos en el Circuit Playground",
          "content": "<img alt=\"Circuit Playground Data Pins\" src=\"https://images.code.org/6821153181b10ce9d5fdc1459beb4445-image-1643339359352.png\" style=\"width:400px; float: right; margin: 0 20px\">\n\nUtilizando los terminales numerados del Circuit Playground, puedes crear tus propios circuitos que incluyan componentes externos, como LEDs y botones. Los detalles de cómo se cablea un circuito dependen del hardware específico que estés tratando de añadir, pero todos los circuitos utilizarán algunas combinaciones de pines de alimentación (que proporcionan energía), pines de tierra (que son el punto final de un circuito), y pines de datos numerados (que pueden enviar una señal de salida, o leer una entrada). Algunos de los pines de datos están reservados para funciones especiales de la placa, así que cuando crees tus propios circuitos, asegúrate de utilizar sólo los siguientes pines:\n\nCon una placa Circuit Playground Express, utiliza sólo los pines **\"A6\"**, **\"A5\"**, **\"A4\"**, **\"A0\"**, o **\"A1\"**.\n\nCon una placa Circuit Playground Classic, utiliza sólo los pines **0**, **2**, **3**, **6**, y **12**.\n\n## Creación de Circuitos LED\n\nUno de los circuitos más sencillos que puedes hacer con tu Circuit Playground es añadir un LED. Para crear este circuito necesitarás un pin de datos, dos cables y un pin de masa.\n\n-   Conecta un cable desde el pin de datos al lado positivo (**+**) del LED.\n-   Conecta otro cable desde el lado negativo (**-**) del LED a cualquier pin de tierra.\n-   Usando el código, ajusta el pin elegido a \"salida\" y enciéndelo:\n\n## Codificación de un circuito LED (Circuit Playground Express)\n\n    // Crea un LED conectado al pin A5\n    var myLed = createLed(\"A5\");\n\n    // Parpadea myLed\n    myLed.blink(200);\n\n## Codificando un Circuito LED (Circuit Playground Classic)\n\n    // Crea un LED conectado al pin 2\n    var myLed = createLed(2);\n\n    // Parpadea myLed\n    myLed.blink(200);\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/alligator.png\" style=\"float: left; width: 30%; margin: 10px 5% 10px 0;\">\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp-wire.png\" style=\"float: left; width: 30%; margin: 10px 5% 10px 0;\">\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp-foil.png\" style=\"float: left; width: 30%; margin: 10px 0;\">\n\nPara crear un circuito sencillo como éste no hace falta usar nada sofisticado: cualquier cosa que conduzca bien la electricidad servirá. Puedes recuperar cables de viejas luces navideñas o utilizar papel de aluminio para un arreglo rápido, pero también puedes comprar hilo conductor que te permitirá cablear tus circuitos o conseguir cinta de cobre para hacer circuitos plegables en papel.\n\n## Depuración LED\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/sequin.png\" style=\"width: 500px;\" class=\"center\">\n\nLos LED son bastante fáciles de usar, pero hay que tener en cuenta un par de trucos:\n\n-   Debes prestar atención a la dirección en la que fluye la electricidad, porque los LED sólo funcionan en una dirección. Conecta siempre el lado positivo del LED a la fuente de alimentación y el negativo a tierra.\n-   Los LED necesitan un componente llamado _resistencia_ para asegurarse de que reciben (y consumen) la cantidad correcta de electricidad. Las lentejuelas LED (como las de la imagen de arriba) tienen una resistencia incorporada, pero si quieres usar un LED normal tendrás que añadir una resistencia a cada lado para evitar dañar la placa o el LED."
        },
        "csd-2022/classes": {
          "display_name": "Clases",
          "content": "A veces sólo quieres dar estilo a algunos elementos específicos de un tipo en lugar de a todos los elementos de un tipo. \\*\\*Las clases permiten que un grupo de elementos tenga su propio estilo único. Esto se aplica a elementos en la misma página o en páginas separadas, siempre y cuando todas las páginas estén enlazadas a la misma hoja de estilo.\n\nPara aplicar estilo utilizando clases:\n\n1.  En primer lugar, hay que marcar en HTML los elementos que estarán en esa clase.\n2.  En segundo lugar, tienes que escribir un conjunto de reglas de estilo para esa clase. Para escribir una regla para una clase de elementos, el selector para el conjunto de reglas tiene un `.` antes del nombre de la clase. \n\nPor ejemplo, el siguiente código aplicaría estilo a la clase fancy que se ha establecido para un elemento párrafo:\n\n| Archivo HTML                                                      | Archivo CSS                                                                     | Resultado                                                                                                                |\n| ----------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| <pre> \\<p class=\"fancy\">Buen Día\\</p> <br> \\<p>Mal Día\\</p></pre> | <pre>.fancy {<br>  color: azuloscuro;<br>  familia-fuente: cursiva;<br>} </pre> | <img src=\"https://images.code.org/27181e31f4e697a85f1794f28070ba14-image-1481648310560.58.03 AM.png\" alt=\"result image\"> |\n\n<br>\n\n**W3 Schools Links**\n\n-   [CSS Syntax (Classes)][0]"
        },
        "csd-2022/collision-detection": {
          "display_name": "Detección de colisiones",
          "content": "Algunas veces, te gustaría saber si dos sprites se están tocando.  El Laboratorio de Juegos utiliza el método [`isTouching`(#f78183)][0] para comprobar si un sprite está tocando a otro sprite (el objetivo).\n\n<img src=\"http://curriculum.code.org/media/uploads/istouching.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`isTouching`(#f78183)][1] devuelve un booleano, por lo que se puede utilizar dentro de una condicional para hacer que algo suceda sólo cuando los dos sprites se tocan.  Por ejemplo, el siguiente código cambia la animación de la sandía cuando el sprite del cuchillo la toca.\n\n<pre>\n\nfunction draw() {\n  if (knife.isTouching(watermelon)) {\n    watermelon.setAnimation(\"slice\");\n  }\n  background(\"burlywood\");\n  drawSprites();\n}\n\n</pre>\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n### Colisionadores\n\nCuando el Laboratorio de Juegos comprueba si dos cosas se están tocando, no sabe qué partes de la imagen son visibles.  En su lugar, comprueba si los colisionadores se tocan entre sí.  El tamaño de los colisionadores está determinado por el tamaño de la animación que se está utilizando, incluso las partes de la misma que no se pueden ver.  Puedes ver los colisionadores poniendo la propiedad [`debug`(#f78183)][2] del sprite a `cierto`.\n\nEn los dos ejemplos de la derecha, [`debug`(#f78183)][3] se ha puesto a `cierto`, así que puedes ver el contorno verde de los colisionadores, y que la animación cambia cuando se tocan, incluso si las imágenes del cuchillo y la sandía no se tocan.\n\nEn el segundo ejemplo, los colisionadores son muy grandes, por lo que la sandía cambia mucho antes de que el cuchillo la toque.\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders2.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n<pre>\nwatermelon.debug = true;\nknife.debug = true;\n\nfunction draw() {\n  if (knife.isTouching(watermelon)) {\n    watermelon.setAnimation(\"slice\");\n  }\n  background(\"burlywood\");\n  drawSprites();\n}\n</pre>\n\nTambién puedes cambiar la forma de los colisionadores usando el método [`setCollider`(#f78183)][4].  Este método hace que el colisionador sea un círculo o un rectángulo.\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders3.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n<pre>\nwatermelon.debug = true;\nknife.debug = true;\nwatermelon.setCollider(\"circle\");\nknife.setCollider(\"circle\");\n\nfunction draw() {\n  if (knife.isTouching(watermelon)) {\n    watermelon.setAnimation(\"slice\");\n  }\n  background(\"burlywood\");\n  drawSprites();\n}\n</pre>"
        },
        "csd-2022/color-lights": {
          "display_name": "Luces de Colores",
          "content": "<img src=\"//curriculum.code.org/images/circuitplayground/cp_colorleds.png\" style=\"float: right; width: 400px; margin-left: 25px;\">\n\nAlrededor del borde de la placa, verás que hay diez LEDs adicionales. Estos LEDs son un poco diferentes a los que hemos visto antes; estos son LEDs multicolores.\n\n### LEDs RGB\n\nLos LED de color están formados por tres LED más pequeños: uno rojo, uno verde y uno azul. Por eso, a menudo los llamamos LEDs RGB.\n\nDebido a que hay muchos de estos LEDs, los hemos almacenado en una lista llamada [`colorLeds`(#f78183)][0]. El primer LED RGB de la lista (posición 0) se encuentra junto al LED verde de encendido, y el resto siguen en orden contrario a las agujas del reloj alrededor de la placa, terminando en el décimo LED RGB (posición 9) junto al LED rojo.\n\n[clearfix]\n\n[/clearfix]\n\n### Elección de un color\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/colorLeds_color.png\" style=\"float: right; margin-left: 10px;\">\n\nPor defecto todos los LEDs de color serán blancos cuando los enciendas. Puedes configurar el color de un LED RGB de muchas maneras, incluyendo el nombre de un color (como \"rojo\"), una cadena hexadecimal (como \"#FF0000\") o usando el comando `rgb()` (por ejemplo `rgb(255, 0, 0)`).\n\nSi un LED de color está apagado, `colorLeds[i].color()` configurará el color y lo encenderá."
        },
        "csd-2022/counter-patterns-with-event": {
          "display_name": "Patrones de Contador con Evento",
          "content": "## Revisión de Variables\n\nLas variables almacenan información. La variable se define en el lado izquierdo de la expresión, y el valor se establece en el lado derecho.\n\n[][0]\n\nLeeríamos esta expresión así\n\n\\*La variable `score` obtiene el valor 3\n\n## Patrón de Contador con Evento\n\n| Nombre                        | Código (Bloque) | Código (Texto)                                                                                                      |\n| ----------------------------- | --------------- | ------------------------------------------------------------------------------------------------------------------- |\n| Patrón de Contador con Evento | [][1]           | <div>`var myVar = 0;` <br><br> `onEvent(\"id\", \"click\", function() {` <br>     `myVar = myVar + 1;` <br> `});`</div> |\n\nEl modelo podría leerse así:\n\nLa variable `myVar` recibe el valor 0. Cuando el onEvent es activado por un click la variable se actualiza. La variable `myVar` obtiene el valor actual de `myVar` y le añade uno. El nuevo valor se almacena en `myVar`.\n\n### ¿Cómo funciona?\n\nCuando se activa el evento, la variable se actualiza. El valor actual de la variable aumenta o disminuye en una cantidad determinada. El nuevo valor se almacena en la variable.\n\n### Ejemplos\n\n[][2]\n<br>\nLa variable `score` obtiene el valor 0. Cuando se activa el evento onEvent al pulsar el botón, la variable se actualiza. La variable `score` obtiene ahora el valor actual de `score` y le añade uno. El nuevo valor se almacena en `score`. La puntuación se muestra en la pantalla.\n\n[][3]\n<br>\nLa variable `score` obtiene el valor 50. Cuando se activa el evento onEvent al pulsar el botón, la variable se actualiza. La variable `score` obtiene ahora el valor actual de `score` y le resta tres. El nuevo valor se almacena en `score`. La puntuación se muestra en la pantalla."
        },
        "csd-2022/creating-a-survey": {
          "display_name": "Creando una encuesta",
          "content": "Puedes utilizar un formulario en línea para recopilar datos que puedan importarse al Laboratorio de Inteligencia Artificial. Esto puede hacerse en el Laboratorio de Aplicaciones, Google Forms, Microsoft Forms, o cualquier otra aplicación de formularios que te permita exportar tus datos como un archivo CSV.\n\n## Uso de una plantilla de formulario de Google\n\nHemos creado una plantilla de formulario de Google que puedes utilizar para crear una encuesta - [haz clic aquí para hacer una copia de la plantilla][2]. Una vez que hayas creado una copia, puedes editar las preguntas de la plantilla para adaptarlas a tus necesidades:\n\n### Preguntas categóricas\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/Categorical-Questions.png\"/>\n\n[][0]\n\n1.  Para datos categóricos, asegúrate de que la pregunta está catalogada como pregunta de Opción Múltiple.\n2.  Escribe la pregunta. Opcionalmente puedes añadir una descripción con más información.\n3.  Introduce cada respuesta como su propia opción. No añadas una opción Otros, ya que esto permitirá a los usuarios escribir sus propias respuestas, lo que puede causar problemas en el Laboratorio de Inteligencia Artificial.\n4.  Asegúrate de que la pregunta es Obligatoria.\n\n[/][0]\n\n### Preguntas Numéricas\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/Numerical-Questions.png\"/>\n\n[][1]\n\n1.  Para los datos numéricos, asegúrate de que la pregunta está catalogada como pregunta de Respuesta Corta.\n2.  Escribe tu pregunta. Opcionalmente puedes añadir una descripción con más información.\n3.  Asegúrate de seleccionar Validación de Respuesta en el menú de tres puntos de la esquina inferior derecha. A continuación, selecciona \"Número\" y \"Es número\" entre las opciones de validación. Esto garantiza que el usuario sólo pueda introducir números en este campo.\n4.  Asegúrate de que la pregunta es Obligatoria.\n\n[/][1]\n\n## Video\n\n(Abre YouTube en una pestaña nueva)\n[undefined][3]"
        },
        "csd-2022/creative-commons-search": {
          "display_name": "Búsqueda de Creative Commons",
          "content": "Debido a que Creative Commons ofrece una forma tan sencilla de saber qué medios puedes utilizar y cuáles no, muchos motores de búsqueda han integrado el filtrado de Creative Commons para garantizar que sólo te ofrecen resultados que puedes utilizar. Cuando utilices un motor de búsqueda que admita el filtrado de Creative Commons, normalmente sólo tendrás que marcar unas cuantas casillas para asegurarte de que los medios que encuentres tienen licencia para su uso.\n\n## Configuración de la búsqueda\n\nCuando utilices un motor de búsqueda compatible con Creative Commons, deberás buscar una opción que controle la **licencia** de los resultados de la búsqueda. Por ejemplo, la búsqueda de imágenes de Google tiene un menú desplegable que te permite seleccionar entre un puñado de licencias Creative Commons diferentes.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-05-02-11.43.56.png\" alt=\"Google CC Image Search\" class=\"center\" style=\"max-width: 400px;\">\n\nEn general, debes buscar medios con licencia para uso **no comercial**. Si vas a realizar cambios en el material que encuentres (por ejemplo, añadir texto a una imagen), deberás asegurarte de que tienes derecho a **modificar, adaptar o desarrollar** los resultados de la búsqueda.\n\n## Dando Crédito\n\nCuando encuentres una imagen u otro archivo multimedia que te guste, asegúrate no sólo de obtener una copia del archivo, sino también de llevar un registro de la información que necesitarás para dar crédito a su creador. Sigue estos pasos para cada archivo que quieras utilizar:\n\n-   Descarga una copia en tu ordenador (para poder subirla a tu sitio web en el siguiente paso).\n-   Anota toda la información que encuentres sobre el autor, como por ejemplo\n    -   Nombre o apodo\n    -   URL del sitio web (no la URL de la imagen en sí)\n    -   Título de la imagen"
        },
        "csd-2022/css": {
          "display_name": "CSS",
          "content": "CSS (Cascading Style Sheets) es el lenguaje utilizado para definir el estilo y el diseño de las páginas web. Puedes encontrar más información sobre las reglas CSS en la página [Documentación del Laboratorio Web][0]."
        },
        "csd-2022/css-overview": {
          "display_name": "Resumen",
          "content": "CSS (Cascading Style Sheets) es el lenguaje utilizado para definir el estilo y el diseño de las páginas web. Puedes encontrar más información sobre las reglas CSS en la página [Documentación del Laboratorio Web][0]."
        },
        "csd-2022/data-and-change-events": {
          "display_name": "Eventos de Datos y Cambio",
          "content": "Cuando se utilizan sensores para la entrada de datos, es más común recoger datos continuamente y observar los cambios que comprobar sólo cuando el usuario pulsa un botón o interactúa de otra manera. Para permitir este tipo de comportamiento, los sensores tienen algunos eventos especiales que se ejecutan continuamente.\n\n## El Evento Datos\n\n[data event][0]\n\nEl evento \"datos\" se ejecuta cada vez que se reciben datos de la placa, lo que ocurre constantemente mientras su programa se está ejecutando. Cuando configures un manejador [`onBoardEvent()`(#f78183)][1] para vigilar el evento \"datos\", tu código se disparará cada 50 milisegundos.\n\nRecuerda que aunque un evento \"datos\" debe estar asociado a un sensor específico, puedes comprobar los valores actualizados de múltiples sensores (o hacer cualquier otra cosa que quieras que se repita constantemente) en el manejador de eventos.\n\n## El Evento Cambio\n\n[change event][2]\n\nSimilar a \"datos\", el evento \"cambio\" se disparará repetidamente, permitiéndote recibir continuamente información de los sensores. A diferencia del evento \"datos\", \"cambio\" sólo se disparará si el valor del sensor ha cambiado lo suficiente. Cada sensor tiene un _umbral_ por defecto que determina cuanto cambio es suficiente para disparar un evento \"cambio\" (por defecto el umbral para todos los sensores es 1).\n\nDebido a que el evento \"cambio\" responde directamente a los cambios en la entrada (en lugar de sondear continuamente) puede ser una forma útil de asegurarse de que su aplicación no está perdiendo el tiempo respondiendo a la misma entrada una y otra vez. Esto también significa que probablemente quieras un manejador de evento \"cambio\" separado para cada sensor que estés usando."
        },
        "csd-2022/debugging-html": {
          "display_name": "Depuración en HTML",
          "content": "## Depuración en HTML\n\n**¿Qué es un bug?**\n\nLos bugs son errores en el código que hacen que no funcione según lo previsto.\n\n\\*\\*¿Qué es la depuración?\n\nLa depuración es el proceso de encontrar y corregir errores. La depuración es un proceso de resolución de problemas, así que utiliza tus pasos de resolución de problemas mientras intentas depurar.\n\n\\*\\*¿Cuáles son algunos ejemplos de errores? \n\nLos errores pueden ser cualquier cosa que haga que el código no funcione según lo previsto. Algunos ejemplos son errores ortográficos, poner el código en el lugar equivocado, usar la etiqueta equivocada u olvidar cerrar una etiqueta."
        },
        "csd-2022/debugging-variable-scope-functions": {
          "display_name": "Depuración del Entorno de una Variable: Funciones",
          "content": "# Crea variables una vez, en la parte superior, fuera de las funciones o en onEvent()\n\nAl crear variables deberías:\n\n-   **Utilizar `var` sólo una vez.** No necesitas crear variables dos veces ya que esto puede causar errores.\n-   **Crear tus variables en la parte superior de tu programa.** Así mantienes tu código organizado y es más fácil de leer para ti y los demás.\n-   **Crear tus variables fuera de cualquier bloque `function` o [`onEvent`(#fff176)][0].** Sigue leyendo para entender por qué.\n\n# Variables Globales vs Locales\n\nHay dos tipos de variables, globales y locales, y hasta ahora sólo hemos usado variables globales. Aquí está la principal diferencia entre variables globales y locales.\n\n| Tipo de variable | Cómo funciona \n| Cómo se crea                                 | Imagen | \n\\| ---------------- \\| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- \\| --------------------------------------------- \\| ------- \\|\n\\| **Global**       | Permanente. Puede ser usado en cualquier parte de tu código | `var` usado fuera de un [`onEvent`(#fff176)][1] \\| [][2] \\| \n\\| **Local**        | Temporal. Puede ser usado sólo en la parte del código donde fue creado, como dentro de un [`onEvent`(#fff176)][3]. Se elimina una vez que el [`onEvent`(#fff176)][4] se ejecuta. | `var` usado dentro de un [`onEvent`(#fff176)][5] \\| [][6] \\|\n\n# Evitando las Variables Locales y Depuración\n\nLas variables locales serán útiles con el tiempo, pero por ahora lo más probable es que sólo sean confusas. El mayor problema que te encontrarás ahora mismo con las variables locales es usar accidentalmente `var` dentro de un [`onEvent`(#fff176)][7] o `function`. Este es el aspecto que suele tener el código:\n\n<img src=\"https://images.code.org/7dc2b13d85ea17e39639d15488d07f8f-image-1549944350460.png\" style=\"width: 400px\">\n\nEste código es bastante confuso. Aunque parece que sólo se utiliza una variable, en realidad tiene dos variables, una local y otra global, ¡y ambas se llaman `count`! Cambiar el valor de una no tendrá ningún impacto en la otra. Esto puede causar un comportamiento inesperado en tu código y puede ser complicado de depurar.\n\nLa mejor manera de evitar estos problemas es **asegurarte por ahora de que no estás usando `var` dentro de un [`onEvent`(#fff176)][8] o `function`.** Si te encuentras con un problema de depuración complicado, comprueba si estás creando accidentalmente una variable local."
        },
        "csd-2022/debugging-with-watchers": {
          "display_name": "Depurar con observadores",
          "content": "Cuando se trata de depurar un programa, es útil hacer un seguimiento del valor actual de una variable o propiedad del sprite a medida que el programa se ejecuta. A veces puedes usar `console.log()` para informar rápidamente del valor de una variable, pero eso no es tan útil cuando quieres hacer un seguimiento de múltiples variables, o variables que cambian a menudo durante tu programa.\n\nUn _watcher_ es una herramienta de depuración que, como su nombre indica, _watches_ sus variables mientras se ejecuta el programa, por lo que es más fácil ver lo que están haciendo.\n\n## Usando Watchers\n\nLos Watchers se encuentran en la sección Watch de la ventana de depuración, puede que necesites descomprimir esta ventana para verlos.\n\n[][1]\n\n[][0]\n\n1.  Aquí creamos una variable `watch_me` con un valor inicial de 0. También puedes usar watchers para seguir las propiedades de los sprites.\n2.  Cada vez que se ejecuta el bucle de dibujo estamos incrementando `watch_me` en 1. Esto hará que cambie _30 veces por segundo_.\n3.  Este es el panel del observador. En la parte superior están todos los observadores añadidos actualmente, y debajo hay un área para añadir nuevos observadores.\n4.  A medida que el programa se ejecuta, esta sección se actualiza continuamente para mostrar el valor actual de la variable vigilada `watch_me`.\n\n[/][0]\n\n## Añadiendo una Variable a Observar\n\n[][2]\n\nPuedes añadir observadores para cualquier variable o propiedad de objeto escribiendo el nombre de una variable en la casilla y pulsando el botón azul \"añadir\". Si tu programa no se está ejecutando o aún no se ha asignado un valor a la variable, el observador mostrará el valor \"indefinido\". Esto no es un error, sólo significa que a la variable todavía no se le ha asignado un valor."
        },
        "csd-2022/design-mode": {
          "display_name": "Modo de diseño",
          "content": "En Laboratorio de Aplicaciones, el \"Modo Diseño\" te permite arrastrar y soltar elementos de la interfaz de usuario en la aplicación. Del mismo modo que creaste prototipos en papel dibujando todos los elementos de la interfaz en papel, el Modo Diseño te permite crear prototipos digitales arrastrando y soltando diferentes elementos en la pantalla.\n\n## Recorrido por el Modo Diseño\n\n[][1]\n\n[][0]\n\n1.  Verás un nuevo conjunto de interruptores sobre el área de la aplicación que te permiten alternar entre el \"Modo Diseño\" y el \"Modo Código\".\n2.  Añadir un elemento es tan fácil como arrastrarlo y soltarlo en la aplicación donde quieras. Una vez en la pantalla de la aplicación, puedes cambiar su posición, su tamaño y muchas otras propiedades.\n3.  La pestaña **Propiedades** te muestra todo lo que puedes cambiar sobre el aspecto de un elemento de interfaz de usuario.\n4.  El **identificador del elemento** es importante porque es la forma de referirte al elemento en tu código. Hablaremos de los ID de los elementos más adelante.\n5.  Puedes hacer que el texto que el usuario ve en el botón sea lo que quieras.\n6.  Desplázate hacia abajo para ver si otras propiedades de un elemento UI pueden estar \"escondidas\" más abajo.\n\n[/][0]"
        },
        "csd-2022/design-mode-elements": {
          "display_name": "Elementos del modo de diseño",
          "content": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/elements.png\" style=\"float:right; margin-left: 20px; max-width: 200px\"/>\n\nEl Modo Diseño te permite colocar diferentes tipos de elementos de Interfaz de Usuario (o UI) en la pantalla. Muchos de estos elementos se pueden utilizar para recibir información del usuario.\n\n## Elegir Buenos Identificadores (IDs)\n\nCada elemento UI en tu aplicación necesita un ID al que puedas referirte más tarde. Los buenos IDs son **significativos, descriptivos y únicos**.\n\nPor ejemplo, si tienes muchos botones en tu programa, querrás dar a cada uno un ID que describa lo que hace el botón. \n\nAsí, en lugar de esto:\n\n-   \"botón1\" y \"botón2\"\n\nPodrías hacer IDs que te digan no sólo que es un botón, sino para qué pretendes que se use el botón, como:\n\n-   \"homeButton\" y \"saveButton\" o\n-   \"buttonHome\" y \"buttonSave\" o\n-   \"home\\_button\" y \"save\\_button\".\n\n## Reglas sobre los IDs\n\nAl hacer IDs descriptivos y significativos hay **algunas reglas sobre IDs** que necesitas saber.  Los IDs...\n\n-   distinguen entre mayúsculas y minúsculas.\n-   no pueden contener espacios.\n-   _deben_ empezar por una letra (A-Z o a-z) y pueden ir seguidos de cualquier número de dígitos y letras.\n-   pueden contener guiones (\"-\"), guiones bajos (\"\\_\"), dos puntos (\":\") o puntos (\".\").\n\n**¿Se distingue entre mayúsculas y minúsculas?**\n\nEsto significa que hay una diferencia entre \"HomeButton\" y \"homeButton\" (fíjate en la H mayúscula del primero).\n\nEstas diferencias parecen molestas al principio, pero uno se acostumbra y, de hecho, agradece que el ordenador exija tanta precisión.\n\nHay algunos estilos comunes para escribir en mayúsculas y deletrear IDs de varias palabras:\n\n-   **Capitalización (conocida como \"camelCase\")** -- \"aCamelcaseNameMightLookLikeThis\"\n-   Mayúsculas (conocidas como \"snake_case\")\\*\\* -- \"some_people_like_to_use_underscores_to\\\\to_separate\\_words\"\n-   Guiones (conocidos como \"kebab-case\")\\*\\* -- \"a otros les gusta usar guiones o guiones\".\n\nLo que elijas depende de ti. Es tu estilo. Sólo ayuda a ser coherente."
        },
        "csd-2022/designing-screens-with-code": {
          "display_name": "Diseñar pantallas a través del código",
          "content": "En la Unidad 4 has visto que puedes diseñar una aplicación en Laboratorio de Aplicaciones utilizando **elementos** en **Modo Diseño**. Este método de arrastrar y soltar es rápido y sencillo, pero sólo puedes crear una página como ésta antes de ejecutar el programa. A veces querrás que los elementos de tu aplicación cambien mientras se está ejecutando, y para ello necesitaremos usar código.\n\nCada elemento tiene varias **propiedades**,  como la posición `x` e `y`, el color y el texto. El bloque [`setProperty`(#fff176)][1] te permite establecer las propiedades de los elementos de la interfaz de usuario mientras el programa se está ejecutando. Cualquier propiedad que puedas establecer en Modo Diseño también puede establecerse en código utilizando [`setProperty`(#fff176)][2].\n\n## Establecer Propiedades\n\n<img src=\"https://images.code.org/b7736bdcbde48f7951ebdc87135dd46c-image-1480536740764.png\" style=\"margin: auto\">\n\n[][0]\n\n1.  En Modo Código puedes encontrar[`setProperty`(#fff176)][3] en la caja de herramientas de Controles de UI.\n2.  Elige el id del elemento UI del que quieres cambiar una propiedad\n3.  El menú desplegable muestra una lista de propiedades que puedes configurar para ese elemento. Coincide con la lista de propiedades que ves para un elemento en **Modo Diseño**.\n4.  El último parámetro es el valor que quieres establecer para esa propiedad. Estamos interesados en el color de fondo que tiene una serie de valores que le puedes dar.\n\n[/][0]"
        },
        "csd-2022/drawing-shapes": {
          "display_name": "Dibujar formas",
          "content": "Hay muchas opciones diferentes para dibujar en Laboratorio de Juegos.  Ya has visto tres bloques: [`rect`(#f78183)][0], `ellipse` y `fill`.  Te permitirán hacer círculos y cuadrados de diferentes colores.\n\n## Recta\n\nEl bloque [`rect`(#f78183)][1] trazará un cuadrado en las coordenadas `x` e `y` que se le indiquen.  Las coordenadas `x` e `y` le indican dónde va la esquina superior izquierda del cuadrado en el área de visualización.\n\n## Elipse\n\nEl bloque `elipse` trazará un círculo en las coordenadas `x` e `y` que se le indiquen.  Las coordenadas `x` e `y` le indican dónde se sitúa el centro del círculo en el área de visualización.\n\n## Coordenadas en Laboratorio de Juegos\n\nCon el fin de trazar las cosas en la pantalla en Laboratorio de Juegos, tendrás que utilizar las coordenadas `x` e `y`.  La coordenada `x` indica a qué distancia se encuentra algo del lado izquierdo del área de visualización.   La coordenada `y` indica la distancia desde la parte superior de la pantalla.\n\n## Relleno\n\nEl bloque `fill` cambia el color que Laboratorio de Juegos utiliza para colorear las formas que dibujas.  Una vez que utilices el bloque `fill`, todas las nuevas formas que dibujes se rellenarán con ese color, hasta que utilices el bloque `fill` para cambiar el color de nuevo.\n\n## Colores en Laboratorio de Juegos\n\nLaboratorio de Juegos entiende los nombres de colores más comunes, como \"rojo\", \"verde\" y \"marrón\".  También entiende todos los nombres de colores HTML listados en [HTML Color Names - W3Schools][2]."
        },
        "csd-2022/editing-images": {
          "display_name": "Editar imágenes",
          "content": "Además de cargar y dibujar imágenes, la pestaña Animación incluye varias herramientas que te ayudarán a editar las imágenes de tus animaciones.\n\n## Copiar, Voltear y Rotar\n\nTres herramientas útiles para crear múltiples animaciones para usar con el mismo sprite son _Copy_, _Flip_, y _Rotate_.\n\n[][1]\n\n[][0]\n\n1.  El botón **copiar** crea un duplicado de la animación actual. Esto es útil para crear múltiples versiones de una animación para un solo sprite, como apuntar en diferentes direcciones, o animaciones de saltar y caminar.\n2.  El botón **flip** voltea la imagen actual a través del eje vertical. Si mantienes pulsada la tecla _Alt_ (u _Opción_ en un Mac) mientras haces clic, puedes voltear a través del eje horizontal.\n3.  El botón **rotar** gira la imagen actual 90 grados en el sentido contrario a las agujas del reloj. Si mantienes pulsada la tecla _Alt_ (u _Opción_ en Mac) mientras haces clic, puedes rotar en el sentido de las agujas del reloj.\n\n[/][0]"
        },
        "csd-2022/for-loops": {
          "display_name": "Bucles Para",
          "content": "Es común querer repetir un conjunto de comandos un número determinado de veces.  El bucle [`for`(#f98bd0)][0] fue creado para envolver todos esos componentes relacionados con los bucles de conteo en una sola línea de código.\n\n<img src=\"https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png\" style=\"width: 450px;\">\n\nLos programadores suelen leer un bucle [`for(var i = 0; i < 10; i++)`(#f98bd0)][1] de esta manera: <br>\n\n**\"para la variable i empezando en 0, mientras i sea menor que 10, incrementa i en 1\"**\n\n## Tres partes del bucle For\n\n### Inicializar Variable\n\nSiempre que estés contando, necesitas una variable para llevar la cuenta. La primera parte del bucle `for` establece la variable, a menudo llamada `i`, que se utilizará para contar el número de veces que se ejecutará el bucle.  Esto también establece el valor inicial en el que empezar a contar. La variable se configura antes de que se ejecute el bucle y luego no se vuelve a ese código a lo largo de las subsiguientes ejecuciones a través del bucle for.\n\n### Condición\n\nLa condición determina la duración del bucle. Debe depender de la variable que inicializaste en la parte 1 del bucle. La condición se comprueba antes de entrar en el bucle `for` cada vez, incluida la primera. El bucle **se detiene** tan pronto como esta condición deja de ser cierta.\n\n### Incremento\n\nLa última parte del bucle `for` es el incremento. Es la parte de actualización del bucle. Para que el valor inicial de la variable cambie debemos actualizarlo cada vez que pasemos por el bucle. Para eso se utiliza el incremento. El incremento se ejecuta al final de cada pasada por el bucle for.  `i++` es la abreviatura de `i = i + 1`, que puedes reconocer como el patrón contador.\n\n## Ejemplo\n\nUn bucle `for` es similar a escribir un montón de sentencias `if` y contar a medida que se pasa por cada sentencia `if`. Veámoslo:\n\n### Bucle `For`\n\n    for(var i = 0; i < 3; i++){\n    \tconsole.log(\"Hi!\");\n    }\n\n### Sentencias `If`\n\nEste ejemplo hace lo mismo:\n\n    var i = 0;\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n\nLa 4ª sentencia `if` ni siquiera se ejecutará. De hecho podrías tener sentencias `if` eternas. Sólo se ejecutaría `console.log()` dentro de la sentencia `if` 3 veces. Cuando compruebe el cuarto `if` la condición fallará."
        },
        "csd-2022/formatting-html": {
          "display_name": "Formatear HTML",
          "content": "Cuando escribas tu página web, debes organizar el código de forma que sea más fácil de leer.  Esto se llama **formateo**.  Cuando formateas tu código, te será más fácil encontrar y corregir errores.\n\n## Espacios en blanco\n\nEl espacio en blanco se refiere a cualquier carácter que aparezca como un espacio en blanco en la pantalla, como un espacio, un tabulador o una nueva línea. Los espacios en blanco ayudan a separar las distintas partes del documento para facilitar su lectura. Por ejemplo, en el código HTML, los elementos nuevos suelen colocarse en una nueva línea, aunque no suponga ninguna diferencia en la forma en que se muestra la página.\n\nPor ejemplo, compara el código de los dos cuadros siguientes.\n\n<pre >\n&lt;body&gt;\n   &lt;h1&gt;Esta es mi lista&lt;/h1&gt;\n   &lt;ol&gt;\n      &lt;li&gt;Tema 1&lt;/li&gt;\n      &lt;li&gt;Tema 2&lt;/li&gt;\n   &lt;/ol&gt;\n&lt;/body&gt;\n</pre>\n\n<pre>\n&lt;body&gt;&lt;h1&gt;Esta es mi lista&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;Tema 1&lt;/li&gt;&lt;li&gt;Tema 2&lt;/li&gt;&lt;/ol&gt;&lt;/body&gt;\n</pre>\n\nAmbos mostrarán la misma página web, pero el código en el cuadro superior es mucho más fácil de leer.  Es mejor comenzar los nuevos elementos en una nueva línea.\n\n## Sangría\n\nUn tipo de formato muy común en HTML es la **sangría**.  La sangría es la colocación del texto más a la derecha, o a la izquierda, para separarlo del texto circundante. La sangría ayuda a transmitir la estructura del programa. En HTML, los elementos que están dentro de otros elementos suelen estar sangrados. \n\nHe aquí un ejemplo:\n\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;Este párrafo está dentro del elemento \"body\".&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n\nLa sangría puede ayudarte a recordar si has cerrado o no una etiqueta, y también deja claro qué etiquetas están dentro de otras.  \n\n## Comentarios\n\nA medida que tus páginas web se complican, querrás usar **comentarios**.  Los comentarios explican las diferentes partes del código y lo que debería crear.  Los comentarios pueden ayudarte a depurar, y también ayudarán a otras personas que estén intentando entender tu código.\n\n<pre>\n&lt;!-- esto es un comentario --&gt;\n</pre>"
        },
        "csd-2022/functions": {
          "display_name": "Funciones",
          "content": "Una función es un grupo de comandos (bloques) a los que das un nombre para poder utilizarlos una y otra vez.\n\n### **Creando (Nombrando) una Función**\n\nPara crear una función, necesitas poner todos los comandos dentro de un bloque de función y escribir el nombre de tu función en el espacio en la parte superior del bloque de función.  Este código está creando una nueva función llamada \"resetDrawing\" que contiene 4 comandos.\n\n[][0]\n\n### **Llamando (Usando) una Función**\n\nSiempre que quieras usar tu función necesitas llamarla por su nombre. Para hacer esto sólo tienes que escribir el nombre de tu función seguido de paréntesis. Esto ejecutará todos los comandos que pusiste dentro de la función cuando la creaste.\n\n[][1]\n\n### **¿Por qué usar funciones?**\n\n1.  **Manteniendo tu Código Organizado** Las funciones pueden ser creadas en cualquier parte de tu programa. Si tienes grandes bloques de código que no vas a utilizar a menudo, puedes crear una función en la parte inferior de tu código y simplemente llamarla en una sola línea más arriba.\n\n2.  **Manteniendo tu Código Legible** Al dar un nombre a un grupo de comandos estás ayudando a explicar cómo funciona tu código. Elegir buenos nombres te ayuda a ti y a otras personas que lean tu código a entender lo que está haciendo.\n\n3.  **Eliminando la Repetición** Una vez que has creado una función puedes llamarla tantas veces como quieras en tu programa. Si estás usando el mismo código en muchos lugares de tu programa puedes crear una función con ese código que puedes llamar en su lugar. Esto hace que sea fácil cambiar el código en varios lugares también."
        },
        "csd-2022/game-lab": {
          "display_name": "Laboratorio de juegos",
          "content": "El Laboratorio de Juegos es una herramienta construida con [JavaScript][0] que se puede utilizar para crear arte, juegos y animaciones. Más información sobre los comandos de Laboratorio de Juegos en la [documentación de Laboratorio de Juegos][1]."
        },
        "csd-2022/game-lab-overview": {
          "display_name": "Resumen",
          "content": "El Laboratorio de Juegos es una herramienta construida con [JavaScript][0] que se puede utilizar para crear arte, juegos y animaciones. Más información sobre los comandos de Laboratorio de Juegos en la [documentación de Laboratorio de Juegos][1]."
        },
        "csd-2022/headings-and-paragraphs": {
          "display_name": "Títulos y párrafos",
          "content": "Casi todas las páginas que crees tendrán cabeceras y párrafos.\n\n## Cabeceras\n\nLas cabeceras son los títulos de las secciones de diferente tamaño de una página web. Las cabeceras añaden estructura a tu página web dividiéndola para que sea más fácil de leer para el usuario.\n\n## Creación de cabeceras\n\nHay seis etiquetas de cabecera diferentes: `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>` y `<h6>`. El tipo de encabezamiento más común es `<h1>`.  Para utilizarlo, debes colocar el texto que deseas mostrar entre la etiqueta de apertura (`<h1>`) y la etiqueta de cierre (`</h1>`).\n\nEl código para una cabecera será como `<h1>Mi texto de cabecera</h1>`.\n\n## Tamaño de las cabeceras\n\nExisten cabeceras de diferentes tamaños que están marcadas por el número que aparece junto a la h en la etiqueta de cabecera. Van de `<h1>` a `<h6>`.\n\n<table markdown=1>\n<thead>\n<tr>\n<th>Ejemplo</th>\n<th>Resultado</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n\n    <h1>Hombros</h1>\n    <h2>Rodillas</h2>\n    <h3>Dedos </h3>\n\n</td>\n<td><img src=\"https://images.code.org/4f252e3dce84a14e1bfdab373d3edbad-image-1473432674187.50.43 AM.png\" style=\"width: 200px;\"></td>\n</tr>\n</tbody>\n</table>\n\n## Párrafos\n\nLos párrafos agrupan conjuntos de frases y dejan un espacio entre ese grupo de texto y el siguiente.\n\n## Creación de Párrafos\n\nLos párrafos están marcados por etiquetas de apertura(`<p>`) y cierre(`</p>`). Para crear más de un párrafo necesitarás múltiples conjuntos de etiquetas de apertura y cierre `<p>`. Por ejemplo\n\n    <p>\n    \tEsto es un párrafo.\n    </p>\n    <p>\n    \tEsto es otro párrafo.\n    </p>\n\n**W3 Schools Links**\n\n-   [\\<h1> - \\<h6>][0]\n-   [\\<p>][1]"
        },
        "csd-2022/html": {
          "display_name": "HTML",
          "content": "HTML (Hypertext Markup Language) es el lenguaje utilizado para definir el contenido de las páginas web. Puedes encontrar más información sobre las etiquetas y atributos de HTML en la página [documentación de Laboratorio Web][0]. "
        },
        "csd-2022/html-overview": {
          "display_name": "Resumen",
          "content": "HTML (Hypertext Markup Language) es el lenguaje utilizado para definir el contenido de las páginas web. Puedes encontrar más información sobre las etiquetas y atributos de HTML en la página [documentación de Laboratorio Web][0]. "
        },
        "csd-2022/html-tags": {
          "display_name": "Etiquetas HTML",
          "content": "## ¿Qué es HTML?\n\nPara mostrar una página web, un ordenador necesita saber no sólo qué palabras o imágenes deben aparecer en la pantalla. Necesita saber dónde colocar el contenido, qué tamaño darle, qué fuentes y colores utilizar, y mucha otra información que convierte un texto y unas imágenes normales en una página web completa.\n\nPara resolver este problema, los informáticos han creado lenguajes que comunican esta información adicional. **HTML**, abreviatura de **H**yper**t**ext **M**arkup **L**anguage, es un lenguaje que ayuda a resolver este problema. Mediante un sistema de etiquetas, HTML permite al programador indicar el propósito de las distintas partes de una página web. Esto permite al ordenador saber cómo debe mostrar estos diferentes elementos.\n\n## Etiquetas HTML\n\nHTML indica el propósito de las diferentes partes de una página web rodeándolas con pares de etiquetas de apertura y cierre, como en el ejemplo siguiente.\n\n<img alt=\"HTML element\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/html_element.png\" class=\"center\" style=\"max-width: 400px; margin: 20px auto;\">\n\n| Etiqueta HTML | Nombre de la Etiqueta           | Qué hace                                                                                                         |\n| ------------- | ------------------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| `<p>`         | Etiqueta de apertura de párrafo | Inicio de un párrafo. Los párrafos son bloques de texto en tu página web.                                        |\n| `</p>`        | Etiqueta de cierre de párrafo   | Marca el final de un párrafo. Una etiqueta de cierre es siempre la etiqueta de apertura con un `/` al principio. |\n\n<br>\n\n## Etiquetas por defecto\n\nTodas las páginas HTML incluyen un conjunto común de etiquetas. Son tan comunes, de hecho, que todos los proyectos de Laboratorio Web comenzarán ya con ellas añadidas.\n\n| Etiqueta HTML                                                                                             | Qué hace                                                                                                                   |\n| --------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| <img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-04-26-at-2.19.39-PM.png\"> | Este código de inicio se incluye en cada proyecto del Laboratorio web. A continuación se explican las distintas etiquetas. |\n| `<!DOCTYPE html>`                                                                                         | Indica al ordenador que se trata de un documento escrito en HTML.                                                          |\n| `<html>`                                                                                                  | Indica el comienzo de su código escrito en HTML.                                                                           |\n| `<head>`                                                                                                  | Contiene información (a veces llamada \"metadatos\") sobre su página web.                                                    |\n| `<body>`                                                                                                  | Contiene el contenido principal de su página web.                                                                          |\n\n## W3 Schools\n\nHay muchos recursos en Internet para aprender sobre las etiquetas HTML, pero uno de los más utilizados es [w3schools.com][0]. Este sitio web incluye mucha información útil sobre el funcionamiento de las etiquetas, así como enlaces a nuevas etiquetas sobre las que te puede interesar leer. En los niveles de mapas de esta unidad encontrarás siempre un enlace a las etiquetas en W3 Schools y deberías explorar otras etiquetas si te interesa aprender más.\n\n**W3 Schools Links**\n\n-   [\\<p>][1]\n-   [\\<!DOCTYPE>][2]\n-   [\\<html>][3]\n-   [\\<head>][4]\n-   [\\<body>][5]"
        },
        "csd-2022/hyperlinks": {
          "display_name": "Hipervínculos",
          "content": "Los hipervínculos pueden conectar con páginas web locales o externas. Para añadir navegación a tu sitio web necesitarás añadir hipervínculos que conecten tus páginas web individuales. Puedes **añadir hipervínculos a tu página web utilizando el elemento `<a>`**. El texto que quieres mostrar como hipervínculo va entre las etiquetas de apertura y cierre del hipervínculo. El elemento `<a>` tiene un atributo `href` que es la ubicación a la que se enlaza. La ubicación de una página local es simplemente la ruta del archivo de esa página. \n\n## Utilizando Hipervínculos\n\nSuponiendo que tienes un sitio web que incluye una segunda página con el nombre de archivo `casas.html`, podrías crear un enlace a esa página de la siguiente manera:\n\n<img alt=\"Link to houses html\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/a_tag.png\" class=\"center\" style=\"max-width: 600px; margin: 20px auto;\">\n\n[][0]\n\n1.  La etiqueta `<a>` envuelve el texto que desea convertir en un enlace clicable. _A_ es la abreviatura de _anchor_.\n2.  El atributo `href`, abreviatura de _hypertext reference_, determina a dónde debe ir tu enlace. En este caso, `casas.html`.\n3.  La etiqueta de cierre finaliza el enlace.\n\n[/][0]\n\n**W3 Schools Link**\n\n-   [\\<a>][1]"
        },
        "csd-2022/if-else-statements": {
          "display_name": "Sentencias si-si no",
          "content": "## Cómo funcionan las sentencias If-Else\n\n<img src=\"https://images.code.org/73eb353de3b62582617e66bfcf4208a7-image-1479490636331.png\" style=\"float: right\">\n\nCon una sentencia _if-else_ estás dando una orden **o lo uno o lo otro**: \n\n**O bien** las líneas de código dentro de _if_ se ejecutarán **o** las líneas dentro de _else_ se ejecutarán. Esas son las opciones.\n\nYa viste en el vídeo cómo añadir una cláusula _else_ a una sentencia if -- pulsa el pequeño símbolo `+` en la cola de la sentencia _if_.\n\nDentro de las llaves de la cláusula _else_ pones las líneas de código que quieres ejecutar si la condición booleana de la sentencia _if_ es _falso_.\n\nAlgunas notas importantes sobre la cláusula else:\n\n-   La cláusula `else` debe ir _inmediatamente_ después de la llave de cierre de una sentencia _if_.\n-   El `else` también tiene su propio conjunto de llaves de apertura y cierre para encapsular líneas de código.\n\n<br><br>\n\n<img src=\"https://images.code.org/b7711c7851e5cc9bd08fa53500d692ce-image-1479495721089.png\" style=\"float: right; width: 275px\">\n\nTeniendo en cuenta nuestro diagrama de flujo de antes, hasta ahora no hemos tenido una manera de hacer que el programa haga algo diferente si la condición era _falso_.  Con una sentencia `if-else` lo conseguimos. \n\nAhora podemos escribir un programa que se \"ramifique\" en un punto concreto, ejecutando una de las dos posibles secciones de código.\n\n<div style=\"clear: both\">&nbsp;</div>\n\n## Un Ejemplo Práctico\n\n<div style=\"clear: both\">&nbsp;</div>\n\n<img src=\"https://images.code.org/2e05fc16d828eda2cc4ef5db036d635a-image-1479496055965.png\" style=\"float: right;margin: 10px;\">\n\n[][0]\n\n1.  Las líneas de código se ejecutan secuencialmente como de costumbre. Solicitan al usuario que introduzca su edad.\n2.  La sentencia _if_ y la expresión booleana son las mismas que antes. La expresión se evalúa como `true` o `false`.\n3.  Con una sentencia _if-else_ está garantizando que exactamente una de estas dos secciones de código **se ejecutará**.  Si la condición es `true` (la edad es 18 o mayor) entonces se ejecutan las líneas de código dentro de las llaves de la sentencia if. Si la condición es `false` salta a la cláusula else y ejecuta cualquier línea de código que encuentre entre las llaves de la cláusula else.\n4.  Finalmente, el programa retoma la ejecución normal justo después del bloque _if-else_. En este punto del programa, sabemos que _o_ el código del bloque if _o_ el bloque else se ha ejecutado.\n\n[/][0]"
        },
        "csd-2022/if-statements": {
          "display_name": "Sentencias si",
          "content": "## Entendiendo el Flujo del Programa\n\nSe dice que los programas tienen un \"flujo de ejecución\". Se empieza ejecutando una línea de código, luego la siguiente, luego la siguiente, y así sucesivamente.\n\n<img src=\"https://images.code.org/9475539704f7fc8d13092a5706fb3bba-image-1479311514103.png\" style=\"float: right; margin: 10px;\">\n\nUn diagrama de flujo es una representación visual habitual para representar los distintos caminos de ejecución que puede seguir un programa.  Mucha gente los utiliza para planificar programas.  \n\n[][0]\n\n1.  Este diagrama de flujo representa un programa que ejecuta una línea tras otra hasta llegar a un punto en el que debe tomar una decisión.\n2.  Para determinar el camino a seguir se establece una **condición**. Debe ser una **expresión booleana**, algo que se evalúe como **verdadero** o **falso**.  Aquí tenemos una simple **comparación** de dos valores: la edad de la persona y el número 18.\n3.  El programa hace una cosa si la condición es verdadera, y otra cosa si la condición es falsa.\n4.  El programa también puede continuar un único proceso de ejecución después de la condición.\n\n[/][0]\n\n## Cómo funcionan las sentencias `If`\n\n<img src=\"https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png\" style=\"float: right; margin-left: 20px; margin-right: 20px;\">\n\nLas sentencias _if_ son las líneas de código que se utilizan para cambiar el flujo de un programa mientras se está ejecutando. Puedes escribir código que determine qué líneas de código deben ejecutarse a continuación.\n\nA la derecha hay un diagrama que muestra los elementos de una sentencia _if_ básica en JavaScript.\n\nHay dos partes básicas en una sentencia _if_.\n\n1.  Una condición a ser evaluada (Una expresión booleana que evalúa a **cierto** o **falso**)\n2.  Código que debería ejecutarse _si_ la expresión fuera cierta, encerrado entre llaves.\n\n<!-- Rehacer esto para Laboratorio de Juegos\n\n## Un ejemplo práctico\n\n<img src=\"https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png\" style=\"display: block; margin: auto; float: right\">\n\n[diagram_nums]\n\n1. El programa se ejecuta línea por línea como cabría esperar. Muestra un mensaje, luego pide al usuario que introduzca un número.  Lo que el usuario escriba se almacenará en la variable `edad<` y luego pasa a la siguiente línea...\n2. Cuando se encuentra la sentencia _if_ lo _primero_ que hace es evaluar la condición entre paréntesis. Comprueba si, en este punto del programa, el valor de la variable `edad` es mayor o igual que 18. Si es así, decimos que la expresión _if_ es mayor que 18.  Si lo es, entonces decimos que la expresión \"devuelve verdadero**\".  En caso contrario, devuelve falso.\n3. Estas sentencias `console.log` se ejecutarán _únicamente_ si la expresión es verdadera. Las llaves rodean todo el código que debe ejecutarse si, y sólo si, la expresión es verdadera.  En caso contrario, toda la sección de código encapsulada en la sentencia if será _saltada_.\n4. La ejecución comienza aquí, en la primera línea después de la llave de cierre de la sentencia if.  Esta línea se ejecutará _siempre_, pero observa que si el usuario introdujera una edad inferior a 18 años, se omitiría toda la sentencia if, y sólo diría \"Gracias por verificar\".\n\n[/diagram_nums]\n\n-->"
        },
        "csd-2022/if-statements-2": {
          "display_name": "Sentencias si",
          "content": "## Entendiendo el Flujo del Programa\n\nSe dice que los programas tienen un \"flujo de ejecución\". Se empieza ejecutando una línea de código y luego la siguiente y así sucesivamente.\n\n<img src=\"https://images.code.org/9475539704f7fc8d13092a5706fb3bba-image-1479311514103.png\" style=\"float: right\">\n\nUn diagrama de flujo es un elemento visual común que se utiliza para representar los distintos caminos de ejecución que puede seguir un programa.  Mucha gente los utiliza para planificar.  \n\n<span style=\"color: #00adbc; font-size: 150%\">1.</span>\nEste diagrama de flujo representa un programa que ejecuta una línea tras otra hasta llegar a un punto en el que debe tomar una decisión.\n\n<span style=\"color: #00adbc; font-size: 150%\">2.</span>\nPara determinar qué camino tomar, debes establecer una **condición**. Debe ser una **expresión booleana**, algo que se evalúa como **verdadero** o **falso**.  Aquí tenemos una simple **comparación** de dos valores: la edad de la persona y el número 18.\n\n<span style=\"color: #00adbc; font-size: 150%\">3.</span> El programa hace una cosa si la condición es verdadera, y otra si la condición es falsa.\n\n<span style=\"color: #00adbc; font-size: 150%\">4.</span> El pr\n\n## Cómo funcionan las sentencias If\n\n<img src=\"https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png\" style=\"float: right; margin-left: 20px; margin-right: 20px\">\n\nLas sentencias [`if`(#64d5ff)][0] son las líneas de código que necesitas para cambiar el flujo mientras tu programa se está ejecutando. Puedes escribir código que _tome una decisión que determine qué líneas de código deben ejecutarse a continuación._\n\nA la derecha hay un diagrama que muestra los elementos de una sentencia [`if`(#64d5ff)][1] básica en JavaScript.\n\nHay dos partes básicas en una sentencia if.\n\n1.  Una condición para ser evaluada (Una expresión booleana que se evalúa a **cierto** o **falso**)\n2.  Código que debe ejecutarse _si_ la expresión es verdadera, encerrado entre llaves\n\n## Un ejemplo práctico\n\n<img src=\"https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png\" style=\"display: block; margin: auto; float: right\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">1.</span>\nEl programa se ejecuta línea por línea como cabría esperar. Muestra un mensaje y luego pide al usuario que introduzca un número.  Lo que escriba el usuario se almacenará en la variable <code>edad</code> y luego pasa a la siguiente línea...\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">2.</span>\nCuando la sentencia <code>if</code> se encuentra <em>lo primero</em> que hace es evaluar la condición entre paréntesis. Comprueba si, en este punto del programa, el valor de una variable <code>edad</code> es mayor o igual que 18.  Si lo es, entonces decimos que la expresión \"<strong>devuelve cierto</strong>\".  En caso contrario, devuelve falso.\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">3.</span>\nEstas sentencias console.log <em>sólo</em> si la expresión es verdadera. Las llaves rodean todo el código que debe ejecutarse si, y sólo si, la expresión es verdadera.  De lo contrario, toda la sección de código encapsulada en la sentencia if es <em>saltado</em>.\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">4.</span>\nLa ejecución comienza aquí, en la primera línea después de la llave de cierre de la declaración if.  Esta línea será <em>siempre</em> ejecutada, pero ten en cuenta que si el usuario introdujera una edad inferior a 18 años, se omitiría toda la sentencia if, y sólo diría \"Gracias por verificar\".  (Arreglaremos esta torpeza pronto).\n\n</p>\n\n<div style=\"clear: both\">&nbsp;</div>El programa también puede continuar un único proceso de ejecución después de la condición."
        },
        "csd-2022/images-in-html": {
          "display_name": "Imágenes en HTML",
          "content": "La etiqueta _image_ te permite añadir imágenes a tu página. Tal vez notes que esta etiqueta tiene un aspecto un poco diferente a las que has visto antes. A diferencia de las etiquetas de párrafo, encabezado o lista, la etiqueta de imagen _no requiere una etiqueta de cierre_. Toda la información necesaria para mostrar la imagen se encuentra en la propia etiqueta.\n\n## Fuente de Imagen y Texto Alternativo\n\nPara indicar al navegador qué archivo debe utilizar, se añade información adicional, denominada atributo, a la etiqueta de la imagen entre corchetes. El atributo **src** representa la fuente e indica el nombre de la imagen, y el atributo **alt** describe la imagen.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/img_tag.png\" class=\"center\" style=\"max-width: 500px; margin-top: 20px; margin-bottom: 20px;\"/>\\[\n\n][0]\n\n1.  Crea una etiqueta de imagen con la abreviatura **img**. Se considera una etiqueta que se cierra automáticamente\\_, ya que no necesita ajustar el texto como lo hacen muchas otras etiquetas. \n2.  El atributo **src** es la abreviatura de **source**. Esto le indica a la etiqueta qué imagen debe cargar. En este caso, la página buscará una imagen con el nombre de archivo «dog.jpg» en el mismo directorio que la página. Los nombres de los archivos de imagen incluyen extensiones que indican al ordenador con qué tipo de imagen está trabajando. Las extensiones más comunes son `.jpg`, `.jpeg` y `.png`. Asegúrate de poner comillas alrededor del nombre del archivo de la imagen. \n3.  El atributo **alt** es la abreviatura de **texto alternativo**. Si bien no verás este texto en tu página web, ofrece una copia de seguridad en caso de que la imagen no se descargue correctamente o para usuarios con problemas de visión. En este ejemplo, si tu navegador no pudo cargar la imagen, verás  <img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/broken_image.png\" style=\"height: 50px;\">\n\n[/][0]\n\n**W3 Schools Links**\n\n-   [\\<img>][1]"
        },
        "csd-2022/importing-a-model-in-app-lab": {
          "display_name": "Importación de Modelo en App Lab",
          "content": "<img style=\"margin-right: 10px; margin-left: 10px; margin-bottom: 15px; border: 2px solid black; width: 200px; float: left\" src=\"https://images.code.org/e81c7cead7d106ee5b32f850791c7de8-image-1616919161803.png\"/>\n\nPara importar un modelo en Laboratorio de Aplicaciones, pulsa el icono de engranaje en la esquina superior izquierda de la Caja de Herramientas de Laboratorio de Aplicaciones y selecciona Gestionar Modelos de Inteligencia Artificial.\n\n<hr style=\"clear:both\">\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/Import-AI-Models_2l1FmrZ.png\"/>\n\n[][0]\n\n1.  Puedes seleccionar qué modelo importar utilizando el menú desplegable\n2.  Pulsa el botón Importar para importar tu modelo en Laboratorio de Aplicaciones\n3.  Pulsa el botón Eliminar para borrar el modelo de tu cuenta\n4.  La ficha de modelo de cada modelo aparecerá en la parte derecha. Puedes utilizarla para decidir si quieres o no utilizar este modelo en tu aplicación.\n\n[/][0]\n\n## Video\n\n(Abre YouTube en una pestaña nueva)\n\n[undefined][1]"
        },
        "csd-2022/importing-screens": {
          "display_name": "Importar pantallas",
          "content": "¡El Laboratorio de Aplicaciones te permite importar pantallas desde otra aplicación! En el menú desplegable de pantallas situado encima del área de aplicaciones, selecciona \"Importar pantalla\" y sigue las instrucciones (necesitarás el código de compartición de la aplicación de la que estás importando pantallas).\n\n[][0]\n\n# ¡Cuidado con los Conflictos!\n\nPara evitar errores de conflicto de ID (uso del mismo ID para varios elementos), el Laboratorio de Aplicaciones no te permitirá importar pantallas que utilicen ID de elementos que ya estén en tu aplicación. Algunas cosas que deberías comprobar al importar:\n\n-   La(s) pantalla(s) que está importando necesita(n) tener IDs únicos que no estén ya utilizados por pantallas en la aplicación.\n    -   Si intentas importar una pantalla con un ID que ya existe, tendrás la opción de sustituir la pantalla existente por la nueva.\n\n<img src=\"https://images.code.org/d5d197be3a75eeb624e3a1312ab786ce-image-1477346707529.49.02.png\" style=\"max-width: 300px;\">\n\n-   Los ID utilizados en la pantalla importada no se utilizan ya en tu aplicación.\n\n<img src=\"https://images.code.org/affd44c38c108ae5e3693d3187ea67e0-image-1477346796569.48.10.png\" style=\"max-width: 300px;\">"
        },
        "csd-2022/introduction-to-ai-lab": {
          "display_name": "Introducción al Laboratorio de Inteligencia Artificial",
          "content": "<h1 style=\"text-align: center\">\n¡Bienvenido al Laboratorio de Inteligencia Artificial!\n</h1>\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/f6438df7e9ddba9343861fe5635e7eec-image-1616511376606.png\" width=\"50%\" />\n<p>\nEl Laboratorio de Inteligencia Artificial es una herramienta que te permite crear <strong>Modelos de Aprendizaje Automático</strong> para resolver problemas, tomar decisiones o crear predicciones. Los Modelos de Aprendizaje Automático no son más que programas informáticos diseñados para tomar una decisión. A veces la decisión puede ser aleatoria, o puede basarse en un conjunto de reglas como cuando se juega a un juego de mesa.\n</p>\n<p>\nEn este widget, creamos modelos que utilizan patrones en los datos para tomar decisiones. Ayudarás a entrenar al Bot de Inteligencia Artificial para que tome decisiones basadas en datos y, a continuación, podrás guardar el modelo de toma de decisiones del Bot de Inteligencia Artificial para utilizarlo en un proyecto de Laboratorio de Aplicaciones.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img src=\"https://images.code.org/4c16f69d655ab1782124a6d46a07c2fc-image-1616511395871.png\" width=\"50%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<h2>\nPaso 1: Elige una Etiqueta\n</h2>\n<p>\nUna <strong>Etiqueta</strong> es con lo que estás tratando de ayudar al  Bot de Inteligencia Artificial a predecir o decidir. La etiqueta generalmente está relacionada con un problema que estás tratando de resolver, o puede ser algo que <em>se pregunta</em> o se tiene <em>curiosidad</em>. A veces, los datos se recopilan teniendo en cuenta la etiqueta, pero no siempre.\n</p>\n</p>\n<p>\nPuedes explorar tus datos en el panel izquierdo y tomar decisiones en el panel derecho.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/9c106a4d860168fe3564709f15aea329-image-1616511405390.png\" width=\"50%\" />\n<h2>\nPaso 2: Elegir Características\n</h2>\n<p>\nLas <strong>Características</strong> son las condiciones en las que el Bot de Inteligencia Artificial está basando su predicción. Puedes elegir tantas funciones como quieras, pero es posible que algunas no sean tan útiles para hacer predicciones como otras. El Laboratorio de Inteligencia Artificial tiene diferentes visualizaciones de datos que pueden ayudarte a decidir qué funciones son más útiles que otras.\n</p>\n<p>\nPuedes explorar tus datos en el panel izquierdo y tomar decisiones en el panel derecho.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img src=\"https://images.code.org/9de79f238a091e2c6482d89a39e84c25-image-1616511415607.png\" width=\"50%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<h2>\nPaso 3: Entrenar al Bot de Inteligencia Artificial\n</h2>\n<p>\nBasándose en tus decisiones, el Bot de Inteligencia Artificial buscará en los datos patrones que le ayuden a tomar decisiones.\n\n<br />\n\nEl Bot de Inteligencia Artificial retiene automáticamente algunos de los datos para ponerse a prueba y ver lo bien que lo está haciendo. Es como estudiar para un examen: puedes ver la mayoría de las preguntas de práctica para estudiar, pero guardas algunas para el final, para ponerte a prueba y ver lo bien que lo estás haciendo.\n\n</p>\n</div>\n\n<div style=\"height: 300px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/533b0a019b50e9410bca4ff73e118310-image-1616511430805.png\" width=\"50%\" />\n<h2>\nPaso 4: Evaluación y Prueba\n</h2>\n<p>\nEn esta pantalla, puedes ver algunas de las decisiones que el Bot de Inteligencia Artificial está tomando basándose en los datos. También puedes ver la precisión que obtuvo basándose en los datos de prueba que el Bot de Inteligencia Artificial se reservó.\n</p>\n<p>\nSi el Bot de Inteligencia Artificial no toma muy buenas decisiones, siempre puedes volver a una pantalla anterior y elegir características diferentes o una nueva etiqueta.\n</p>\n</div>\n\n<div style=\"height: 350px\">\n<img src=\"https://images.code.org/ab441a75cf50d92f1da344ff96d93d3a-image-1616511439816.png\" width=\"30%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<p>\nTambién puedes probar tú mismo el modelo del Bot de Inteligencia Artificial. Prueba diferentes valores y observa qué decisiones toma el robot. Probar el modelo es importante para asegurarnos de que evitamos el <strong>sesgo</strong>, que es cuando las decisiones favorecen algunas cosas y restan prioridad a otras. Si descubres un sesgo en tu modelo, siempre puedes regresar y elegir nuevas funciones o una nueva etiqueta.\n</p>\n</div>\n\n<div style=\"height: 300px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/cf56f4bbe4fad787e00019cb3c6bf11e-image-1616511449679.png\" width=\"50%\" />\n<h2>\nPaso 5: Guarda tu Modelo\n</h2>\n<p>\nEn esta pantalla, puedes guardar tu modelo para utilizarlo en un proyecto de Laboratorio de Aplicaciones. Guardar el modelo es como utilizar el cerebro del Bot de Inteligencia Artificial para tomar las mismas decisiones en diferentes lugares. El código de tu proyecto sólo pedirá a tu modelo que haga una predicción.\n</p>\n<p>\nAntes de poder guardar, tienes que responder algunas preguntas que se guardan con tu modelo. Esto es como documentar el código: en lugar de escribir comentarios para describir cómo funciona un programa, añadimos notas sobre cómo hemos entrenado a nuestro modelo para que tome sus decisiones.\n</p>\n</div>"
        },
        "csd-2022/javascript": {
          "display_name": "JavaScript",
          "content": "JavaScript es un lenguaje de programación que se utiliza sobre todo en Internet y como lenguaje de programación principal en muchas de las herramientas y planes de estudio de Code.org, como [App Lab][0], [Game Lab][1] y [Maker Toolkit][2]."
        },
        "csd-2022/javascript-overview": {
          "display_name": "Resumen",
          "content": "JavaScript es un lenguaje de programación que se utiliza sobre todo en Internet y como lenguaje de programación principal en muchas de las herramientas y planes de estudio de Code.org, como [App Lab][0], [Game Lab][1] y [Maker Toolkit][2]."
        },
        "csd-2022/layout-properties": {
          "display_name": "Propiedades de diseño",
          "content": "Hay muchas propiedades que ayudan a configurar los estilos de tus páginas web.\n\n| Propiedad                        | Descripción                                 | W3 Schools Link  |\n| -------------------------------- | ------------------------------------------- | ---------------- |\n| [`background-color`(#d3e965)][0] | Configura el color de fondo del elemento    | [W3 Schools][1]  |\n| [`border-color`(#d3e965)][2]     | Configura el color del borde                | [W3 Schools][3]  |\n| [`border-width`(#d3e965)][4]     | Cambia la anchura del borde de un elemento  | [W3 Schools][5]  |\n| [`border-style`(#d3e965)][6]     | Cambia el estilo del borde                  | [W3 Schools][7]  |\n| [`Width`(#d3e965)][8]            | Configura la anchura de un elemento         | [W3 Schools][9]  |\n| [`Height`(#d3e965)][10]          | Configura la altura de un elemento          | [W3 Schools][11] |\n| [`Float`(#d3e965)][12]           | Desplaza un elemento a un lado de la página | [W3 Schools][13] |\n| [`Margin`(#d3e965)][14]          | Genera espacio alrededor de un elemento     | [W3 Schools][15] |"
        },
        "csd-2022/list-filter-pattern": {
          "display_name": "Patrón de Filtro de Lista",
          "content": "## Filtrando una lista\n\nEste patrón permite al usuario filtrar una lista en una nueva lista limitando la información que se añade a la nueva lista. Por ejemplo, puede filtrar una lista de palabras para que sólo aparezcan en la nueva lista palabras de una longitud determinada o palabras que empiecen por una letra específica. \n\n| Nnombre                                  | Código |\n| ---------------------------------------- | ------ |\n| Filtro de lista - letra inicial (bloque) | [][0]  |\n\n* * *\n\n| Filtro de lista - letra inicial (texto) | [][1] \\|\n\n| Nombre                              | Código |\n| ----------------------------------- | ------ |\n| Filtro de Lista - longitud (bloque) | [][2]  |\n\n* * *\n\n| Filtro de lista - longitud (texto) | [][3] \\|\n\n### ¿Cómo funciona?\n\n-   Crea una variable y almacena en ella una lista\n-   Crea una lista en blanco para almacenar la lista filtrada\n-   En una función, utiliza un bucle `for` para acceder a cada elemento de la lista original\n-   Si ese elemento cumple una determinada condición, añádelo a la lista filtrada\n\n## Filtrando varias listas\n\n¿Qué pasa si tienes varias listas, pero quieres filtrar todas las listas basándote en la información de una sola lista? \n\n| Nombre                           | Código |\n| -------------------------------- | ------ |\n| Filtro de Varias Listas (bloque) | [][4]  |\n\n* * *\n\n| Filtro de Varias Listas (texto)  | [][5] \\| \n\n-   Todas las listas deben tener la misma longitud para este patrón, idealmente son columnas extraídas de una tabla\n\n### ¿Cómo funciona?\n\n-   Crea una variable para cada lista\n-   Crea listas en blanco para almacenar las listas filtradas \n-   En una función, primero reinicia todas las listas filtradas a listas en blanco. Cada vez que se llame a la función, las listas filtradas se restablecerán. \n-   Utiliza un bucle `for` para acceder a cada elemento de la lista que contenga el elemento por el que estás filtrando.\n-   Si se encuentra el elemento, añade a cada lista filtrada el elemento en el índice de las listas originales donde se encontró el elemento."
        },
        "csd-2022/list-reduce-pattern": {
          "display_name": "Patrón de Reducción de Lista",
          "content": "Este patrón se utiliza cuando se desea reducir la información de una lista a un solo número. Por ejemplo, es posible que quieras hallar la media de una lista de números o el número más pequeño. \n\n| Nombre                   | Código (bloque) | Código (texto) |\n| ------------------------ | --------------- | -------------- |\n| Reducir Lista - promedio | [][0]           | [][1]          |\n\n### Cómo funciona\n\n-   Crea una lista de números\n-   Crea una variable en blanco para almacenar la media\n-   En una función, crea una variable local para almacenar el valor total de todos los elementos de la lista\n-   Utiliza un bucle `for` para acceder a cada elemento de la lista y sumar su valor al total\n-   Después del bucle `for`, calcula la media dividiendo el total por la longitud de la lista\n\n| Nombre                         | Código (bloque) | Código (texto) |\n| ------------------------------ | --------------- | -------------- |\n| Reducir Lista - el más pequeño | [][2]           | [][3]          |\n\n### Cómo funciona\n\n-   Crea una lista de números\n-   Crea una variable en blanco para almacenar el número más pequeño\n-   En una función, crea una variable local para almacenar un valor temporal\n-   Utiliza un bucle `for` para acceder a cada elemento de la lista\n-   Si ese elemento es menor que el valor almacenado en temp, configura el valor de temp al elemento actual\n-   Después del bucle `for` configura el valor de `pequeño` al valor almacenado en temp"
        },
        "csd-2022/list-scrolling-pattern": {
          "display_name": "Patrón de Desplazamiento de Lista",
          "content": "| Nombre                            | Código (Bloque) | Código (Texto) |\n| --------------------------------- | --------------- | -------------- |\n| Patrón de Desplazamiento de Lista | [][0]           | [][1]          |\n\n## ¿Cómo funciona?\n\nMuchos proyectos de Laboratorio de Aplicaciones funcionan de la siguiente manera. \n\n1.  El usuario está interesado en ver los elementos de una lista, como una lista de comidas favoritas, o una lista de recordatorios.\n2.  La aplicación muestra al usuario un elemento de la lista cada vez.\n3.  Pulsando botones (o interactuando de otro modo con la aplicación), el usuario puede avanzar y retroceder por la lista, elemento a elemento, para ver todos los elementos.\n\nEste patrón permite al usuario \"desplazarse\" por todos los elementos de la lista. Para que funcione, crea una variable de índice y una lista. Luego usa el patrón \"Patrón de Contador con Límite\" para crear manejadores de eventos que cambien el valor del índice.\n\nEste patrón tiene sentido usarlo con el patrón `updateScreen` ya que necesitarás al menos dos botones para desplazarte a izquierda y derecha por la lista pero después usarás el mismo código para actualizar la pantalla."
        },
        "csd-2022/lists": {
          "display_name": "Listas",
          "content": "HTML tiene dos tipos de listas, ordenadas y desordenadas.\n\n## Listas Ordenadas\n\nUna lista ordenada es un conjunto de elementos numerados.\n\n<table border=\"1\" style=\"float:right; margin-left: 20px;\">\n<tr>\n<td>Ejemplo</td>\n<td>Resultado</td>\n</tr>\n<tr>\n<td>\n<pre>\n&lt;ol&gt;\n    &lt;li&gt;Paso 1 &lt;/li&gt;\n    &lt;li&gt;Paso 2 &lt;/li&gt;\n    &lt;li&gt;Paso 3 &lt;/li&gt;\n&lt;/ol&gt;\n</pre></td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04 PM.png\" style=\"width:150px\"></td>\n</tr>\n</table>\n\nUn elemento de lista ordenada tiene la etiqueta `<ol>` . Es la abreviatura de <strong>O</strong>rdered <strong>L</strong>ist. Cada elemento de la lista está marcado por un elemento de lista `<li>`. Es la abreviatura de <strong>L</strong>ist <strong>I</strong>tem.  El artículo del elemento de lista es un elemento hijo, lo que significa que va dentro de su elemento padre, la lista ordenada (`<ol>`).\n\nLa elaboración de una lista ordenada consta de dos pasos: hacer la lista y añadir los artículos de la lista.  Para hacer la lista ordenada, escribe las etiquetas de lista ordenada `<ol> </ol>`.  A continuación, añade los artículos de la lista **dentro** de las etiquetas de lista ordenada.  Para crear cada artículo de la lista, utiliza las etiquetas de artículo de lista y escribe el elemento de la lista dentro de las etiquetas `<li> </li>`.\n\nPuede ser útil sangrar las etiquetas `<li>` para que quede claro que están contenidas en la etiqueta `<ol>`.\n\n## Listas Desordenadas\n\nUna lista desordenada es un conjunto de artículos con viñetas.\n\n<table border=\"1\" style=\"float: right; margin-left: 20px;\">\n<tr>\n<td>Ejemplo</td>\n<td>Resultado</td>\n</tr>\n<tr>\n<td>\n<pre>\n&lt;ul&gt;\n    &lt;li&gt;Rojo &lt;/li&gt;\n    &lt;li&gt;Verde &lt;/li&gt;\n    &lt;li&gt;Azul&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png\" style=\"width:150px\"></td>\n</tr>\n</table>\n\nUn elemento de lista desordenada tiene la etiqueta `<ul>` . Es la abreviatura de <strong>U</strong>nordered <strong>L</strong>ist. Cada artículo de la lista está marcado por un elemento de lista `<li>`. Es la abreviatura de <strong>L</strong>ist <strong>I</strong>tem.  El artículo elemento de lista es un elemento hijo, lo que significa que va dentro de su elemento padre, la lista desordenada (`<ul>`).\n\nHacer una lista desordenada tiene dos pasos: hacer la lista y añadir los artículos de la lista.  Para crear una lista desordenada, escribe las etiquetas de lista desordenada `<ul> </ul>`.  A continuación, añade los artículos de la lista **dentro** de las etiquetas de lista desordenada.  Para crear cada artículo de la lista, utiliza las etiquetas de artículo de lista y escribe el artículo de la lista dentro de las etiquetas `<li> </li>`.\n\nPuede ser útil sangrar las etiquetas `</li>` para que quede claro que están contenidas en la etiqueta `<ul>`.\n\n## Información Adicional sobre la Estructura\n\n<img src=\"https://images.code.org/d9b5053f9b13286dad2714f6416c0a09-image-1664558778316.jpg\" style=\"width:500px\">\n\n## Contenido del Artículo de Lista\n\n<img src=\"https://images.code.org/a00a4377aa5b6688e8b0f554008e6210-image-1664558975676.jpg\" style=\"width:500px \">\n\n**W3 Schools Links**\n\n-   [\\<li>][0]\n-   [\\<ul>][1]\n-   [\\<ol>][2]"
        },
        "csd-2022/maker-toolkit": {
          "display_name": "Herramientas de Maker",
          "content": "El Maker Toolkit es una herramienta construida con [JavaScript][0] que te permite escribir programas que se comunican con el [Adafruit Circuit Playground][1]. Lee más sobre los comandos del Maker Toolkits en la [documentación del App Lab][2]."
        },
        "csd-2022/maker-toolkit-overview": {
          "display_name": "Resumen",
          "content": "El Maker Toolkit es una herramienta construida con [JavaScript][0] que te permite escribir programas que se comunican con el [Adafruit Circuit Playground][1]. Lee más sobre los comandos del Maker Toolkits en la [documentación del App Lab][2]."
        },
        "csd-2022/microbit-circuits-buttons": {
          "display_name": "Botones externos en un micro:bit",
          "content": "<img src=\"https://images.code.org/766895a5debf8fcb1e2552ff47f94c18-Micro_bit Circuits and LEDs.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\nEn el borde inferior del micro:bit hay 5 tiras doradas llamadas pines. Estos pines te permiten crear circuitos, o conectar cosas externas como LEDs o botones.\n\n-   Los **Pines de Entrada/Salida** en el micro:bit son \"0\", \"1\", y \"2\". Estos te permiten conectar LEDs o botones. \n-   El pin **\"3V\"** es el pin de alimentación de 3 voltios que puedes usar para alimentar LEDs externos y otros componentes electrónicos.\n-   La patilla **GND** es la patilla de tierra. Se utiliza para completar los circuitos eléctricos cuando conectas auriculares, LEDs o interruptores externos al micro:bit.\n\n<div style=\"clear: both;\" ></div>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png\" alt=\"Button Up and Down\" style=\"width:250px; float: right; margin: 0 20px;\">\n\nPara crear un botón o un interruptor, sólo necesitas un circuito que pueda conectarse y desconectarse fácilmente. Un circuito de botón puede crearse conectando un cable a una patilla de datos y otro cable a una patilla de masa. \n\nPara \"cerrar\" el circuito (que es como pulsar un botón) se conectan los dos cables, ya sea tocándolos entre sí o conectándolos a una pieza de hardware (como un botón o un interruptor) que pueda utilizarse para abrir y cerrar el circuito. \n\nUn botón \"abierto\" equivale al evento \"arriba\" del botón, mientras que un circuito \"cerrado\" es como el evento \"abajo\" del botón.\n\n## Creando Circuitos de Botones\n\nPara crear un circuito de botones necesitarás un pin de datos, dos cables y un pin de masa.\n\n1.  Conecta un cable a tu pin de datos numerado.\n2.  Conecta otro cable a la patilla de masa.\n3.  Utiliza uno de los siguientes bloques en tu código:\n    -   [`pinMode()`(#4dd0e1)][0] le dice a tu micro:bit que quieres usar uno de los terminales externos para entrada o salida. \"Pin\" es el término genérico para los terminales en el micro:bit, y los pines pueden tener un aspecto diferente en otros dispositivos.\n    -   [`digitalWrite()`(#4dd0e1)][1] le dice a tu micro:bit que comience o deje de enviar electricidad al dispositivo en ese pin. 1 significa \"encendido\", y 0 significa \"apagado\".\n    -   [`createButton()`(#4dd0e1)][2] este bloque permite asignar un botón externo a una variable\n    -   [`onBoardEvent()`(#f78183)][3] este bloque utiliza el mismo nombre de variable para responder a la entrada "
        },
        "csd-2022/microbit-circuits-leds": {
          "display_name": "LEDs externos en un micro:bit",
          "content": "<img src=\"https://images.code.org/766895a5debf8fcb1e2552ff47f94c18-Micro_bit Circuits and LEDs.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\nEn el borde inferior del micro:bit hay 5 tiras doradas llamadas pines. Estos pines te permiten crear circuitos, o conectar cosas externas como LEDs o botones.\n\n-   Los **Pines de Entrada/Salida** en el micro:bit son \"0\", \"1\", y \"2\". Estos te permiten conectar LEDs o botones. \n-   El pin **\"3V\"** es el pin de alimentación de 3 voltios que puedes usar para alimentar LEDs externos y otros componentes electrónicos.\n-   El pin **GND** es el pin de tierra. Se utiliza para cerrar los circuitos eléctricos cuando conectas auriculares, LEDs o interruptores externos al micro:bit.\n\nUsando los pines numerados del micro:bit, puedes crear tus propios circuitos que incluyan componentes externos, como LEDs y botones. Los detalles de cómo se cablea un circuito dependen del hardware específico que estás tratando de añadir, pero todos los circuitos utilizarán algunas combinaciones de un pin de alimentación de 3 voltios (que proporcionan energía), un pin de tierra (que es el punto final de un circuito), y pines de datos numerados (que pueden enviar una señal de salida, o leer una entrada). \n\n<div style=\"clear:both;\"></div>\n\n<img src=\"https://images.code.org/be63617cd479aabe4351a8d07abe1d00-microbit-led.png\" style=\"width: 300px; float: right; margin: 10px\" />\n\n## Creando Circuitos LED\n\nUno de los circuitos más sencillos que puedes hacer con tu micro:bit es añadir un LED. Para crear este circuito necesitarás un pin numerado, dos cables, un LED y un pin de masa.\n\n1.  Asegúrate de que tu micro:bit está desconectado del ordenador. Esto ayuda a asegurar que no haya electricidad accidental que pueda dañar tu placa.\n2.  Conecta un cable de modo que un extremo esté conectado al pin 0 del micro:bit, y el otro extremo esté conectado al positivo de un LED\n3.  Conecta un cable de modo que un extremo esté conectado al pin GND del micro:bit, y el otro extremo esté conectado al extremo negativo de un LED.\n\n<div style=\"clear:both;\"></div>\n\n## Depuración de LED\n\nLos LEDs son bastante sencillos de usar, pero hay que tener en cuenta un par de trucos. Debes prestar atención a la dirección en la que fluye la electricidad, porque los LED sólo funcionan en una dirección. Conecta siempre el lado positivo del LED a la fuente de alimentación y el negativo a tierra."
        },
        "csd-2022/microbit-display": {
          "display_name": "La Pantalla LED micro:bit",
          "content": "<img src=\"https://images.code.org/126cab46e3188fc496d4c618e8cfee03-image-1676328086265.png\" style=\"width: 300px; float: right; margin: 10px\" />\n\nEl LED es probablemente la forma más simple de salida disponible y el micro:bit tiene una pantalla de 25 LEDs rojos para que puedas programar. Los LEDs están dispuestos en una cuadrícula de 5x5 permitiendo mostrar patrones, imágenes, letras o números.\n\n<div style=\"clear:both;\"></div>\n\nLa `ledScreen` puede ayudarte...\n\n<table>\n  <tr>\n    <td><img src=\"https://images.code.org/77c51c63b972d81ad9defdbd5f2d1769-mb1.png\" style=\"width: 210px\" /></td>\n    <td>¡Expresa cómo te sientes!</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://images.code.org/f416ae03dbad5755997196ac09b2f8b1-mb2.gif\" style=\"width: 210px\" /></td>\n    <td>¡Haz animales!</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://images.code.org/f5b22c147aeefd7c49908fd352c3fd89-mb3.gif\" style=\"width: 210px\" /></td>\n    <td>¡Hazte una chapa con tu nombre!</td>\n  </tr>\n</table>\n\n## Comandos útiles con la pantalla LED\n\n-   [`ledScreen.on()`(#f78183)][0]\n-   [`ledScreen.off()`(#f78183)][1]\n-   [`ledScreen.toggle()`(#f78183)][2]\n-   [`ledScreen.clear()`(#f78183)][3]\n-   [`ledScreen.display()`(#f78183)][4]\n-   [`ledScreen.scrollString()`(#f78183)][5]\n-   [`ledScreen.scrollNumber()`(#f78183)][6]"
        },
        "csd-2022/microbit-overview": {
          "display_name": "Descripción general de micro:bit",
          "content": "El BBC micro:bit es un ordenador de bolsillo que te introduce en el funcionamiento conjunto del software y el hardware. Sin embargo, antes de profundizar demasiado, empecemos por lo básico.\n\n## La pantalla de diodos emisores de luz (LED)\n\nCuando un ordenador sólo necesita comunicar información simple, a menudo una luz parpadeante es la forma más rápida y sencilla de hacerlo. Los LED, o diodos emisores de luz, son dispositivos pequeños, de bajo consumo y fáciles de usar para comunicarse con la luz. Echa un vistazo a la imagen de micro:bit de la derecha.\n\n<img src=\"https://images.code.org/211f377fb4e4c1addb2cc33d53bca6f6-Micro_bit Overview.png\" style=\"width: 400px; float: right;\" />\n\n1.  El conector **USB** te permite conectar el micro:bit. Conectarlo te permite comunicarte con la placa en Laboratorio de Aplicaciones, pero también proporciona electricidad a la placa para que pueda hacer cosas como encender la pantalla LED.\n2.  El **único LED amarillo** no puede ser controlado a través de código, pero te permite saber si la placa está recibiendo electricidad. Si este LED está apagado, no esperes que funcione nada en tu placa. El LED parpadea cuando estás descargando un programa al micro:bit.\n3.  El **botón de reinicio** te permite reiniciar tus programas de micro:bit.\n4.  El **conector de batería** te permite alimentar tu micro:bit desde el pack de baterías en lugar de un ordenador. Esto es realmente útil si quieres llevar el micro:bit fuera, llevarlo puesto o jugar con él. Puede funcionar durante mucho tiempo utilizando sólo dos pilas AAA. \n\n## Conéctalo\n\nConecta la placa a tu ordenador mediante un cable USB y observa cómo responde el único LED amarillo y cómo responde la pantalla LED. ¿Cómo podrías utilizar la pantalla LED para comunicar información útil a un usuario?"
        },
        "csd-2022/microbit-parent": {
          "display_name": "La BBC micro:bit",
          "content": "Estos recursos hacen referencia a funciones específicas de la [BBC micro:bit][0]"
        },
        "csd-2022/microbit-physical-input": {
          "display_name": "micro:bit Entrada Física",
          "content": "<img src=\"https://images.code.org/3d9ce06038db75ad3ae8a7b03259a048-Micro_bit Physical Input.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\n## Identificación de las Entradas\n\n1.  Los botones A (izquierda) y B (derecha) están disponibles en código como `buttonA` y `buttonB` respectivamente. Estos botones son idénticos entre sí aparte de la ubicación en la placa. \n2.  El **Botón Reset** no está disponible para que lo uses en tu programa. Pulsar este botón hace que el micro:bit se reinicie, así que evita pulsarlo mientras ejecutas un programa. Es útil, sin embargo, si tu placa no está funcionando como esperabas.\n\n## Eventos y Tipos de Eventos\n\n| Tipo de Evento | Descripción                                                   |\n| -------------- | ------------------------------------------------------------- |\n| `abajo`        | Se activa cuando se pulsa el botón.                           |\n| `arriba`       | Se activa cuando el botón se recupera después de ser pulsado. |\n\n## Estados de los botones\n\nTanto los botones como el interruptor tienen sólo dos estados. Los botones normalmente están apagados (falso) y se encienden (cierto) cuando se pulsan. Puedes ver si un botón está siendo pulsado con [`buttonL.isPressed`(#f78183)][0]."
        },
        "csd-2022/microbit-sensors": {
          "display_name": "micro:bit Sensores ",
          "content": "El micro:bit tiene dos sensores básicos, cada uno de los cuales recibe una entrada y la convierte en un valor utilizable por el ordenador.\n\n<img src=\"https://images.code.org/48dea3f6d0c5933eb639fbcb1292d51f-Micro_bit Sensors.png\" style=\"width: 500px; display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px\" />\n\n1.  El [`lightSensor`(#f78183)][0] mide lo luminoso u oscuro que está. Cuando está muy oscuro, [`lightSensor.value`(#f78183)][1] es 0, y cuando está muy luminoso, el valor es 255. \n2.  El [`tempSensor`(#f78183)][2] comprueba la temperatura y la muestra en grados Fahrenheit ([`tempSensor`(#f78183)][3]) o Celsius ([`tempSensor.C`(#f78183)][4]). \n\n## Lectura de los datos del sensor\n\nPara leer los datos de los sensores de luz y sonido, puedes utilizar la propiedad \"valor\" (como [`lightSensor.value`(#f78183)][5]). Si el rango de 0-255 no es lo que necesitas, puedes cambiar el rango usando el método setScale(). Por ejemplo, [`lightSensor.setScale(-50, 50)`(#f78183)][6] hace que el sensor de luz muestre valores entre -50 y 50. El sensor de temperatura ya muestra la temperatura de una manera que es fácil de entender.\n\n## Sensibilidad de los sensores\n\nLos sensores de tus placas no son perfectos y pueden dar lecturas ligeramente diferentes en diferentes placas. Si necesitas que tu programa funcione bien con diferentes placas, puedes escribir código que te permita ajustar los sensores. Si tu aplicación ejecuta código cuando la lectura de un sensor supera un cierto valor, haz que ese valor sea una variable que pueda ser cambiada por el usuario. De esta manera, el usuario puede cambiar la variable para hacer que la aplicación funcione mejor con su placa."
        },
        "csd-2022/model-cards-in-ai-lab": {
          "display_name": "Tarjetas Modelo en Laboratorio de Inteligencia Artificial",
          "content": "## Vídeo\n\n(Abre YouTube en una nueva pestaña)\n\n[undefined][0]"
        },
        "csd-2022/modifying-arrays": {
          "display_name": "Modificar arreglos",
          "content": "Los arrays pueden modificarse de varias maneras. Cambiar los valores de lo que hay dentro del array es una forma de modificación, pero quitar elementos o añadir otros nuevos al array es otra forma de modificación.\n\nPuedes utilizar las flechas izquierda y derecha del bloque del array para añadir nuevos elementos o eliminar los existentes. Esto siempre creará o eliminará un elemento al final del array. \n\n[][0]\n\n## Creando un Array\n\nLos arrays tienen muchas características que los hacen diferentes de las variables, pero **la mayoría de lo que has aprendido sobre variables también se aplica a los arrays**. Por ejemplo, al igual que una variable:\n\n-   A los arrays se les debe dar un **nombre descriptivo y significativo**.\n-   Los arrays se crean usando `var`.\n-   Los arrays pueden ser inicializados/configurados usando `=`.\n\nLos comandos de array se pueden encontrar en la caja de herramientas `Variables`. \n\n<img src=\"https://images.code.org/b21cdf00a2c673437c786aef3476734b-image-1486668653247.29.06 PM.png\" style=\"width: 150px;\">\n\nEl comando array tiene este aspecto: \n\n[][1]\n\n## Ejemplo\n\n[][2]\n\nEste array contiene 3 valores: 100, 250, 500. Observa que los valores están separados por comas `,` y que todo el array está encerrado entre corchetes `[ ]` . Podemos utilizar `console.log` para mostrar el contenido de un array como si fuera una variable.\n\n[][3]\n\nEsto imprimirá [100, 250, 500] en el área de la consola."
        },
        "csd-2022/multi-frame-animations": {
          "display_name": "Animaciones Multi-Frame",
          "content": "Algunas animaciones incluyen fotogramas múltiples. Esto funciona de forma similar a un flip-book, donde cada \"fotograma\" de la imagen se dibuja rápidamente una y otra vez en un bucle para crear la ilusión de movimiento. La pestaña Animación incluye herramientas que te permiten editar animaciones de fotogramas múltiples.\n\n## Creación y Edición de Animaciones Multi-Frame\n\nEstas herramientas te ayudarán a crear y editar tus animaciones multi-frame\n\n[][1]\n\n[][0]\n\n1.  El botón **Añadir nuevo fotograma** añade un fotograma en blanco a tu animación, en el que puedes dibujar. Si quieres hacer una copia del fotograma actual para editarlo ligeramente, utiliza (3).\n2.  El icono **Papelera** borrará el fotograma actual\n3.  El icono **Copiar** creará una copia del fotograma actual, que luego podrás editar.\n4.  El icono **Mover** te permite reorganizar el orden de tus fotogramas\n5.  El icono **Cebolla** muestra una superposición transparente del fotograma anterior y el siguiente. Esto es útil si desea realizar pequeños cambios en un fotograma para crear una animación más suave, y asegurarse de que se alinea con los fotogramas circundantes.\n6.  El **Deslizador** cambia la velocidad de la animación. Si se mueve hacia la derecha, la animación se acelera; si se mueve hacia la izquierda, la animación se ralentiza. Puedes ver una vista previa de tu animación cuando pasas el ratón por encima en esta columna.\n\n[/][0]"
        },
        "csd-2022/multi-screen-apps": {
          "display_name": "Aplicaciones con varias pantallas",
          "content": "Puedes imaginar que una aplicación típica tiene una serie de \"pantallas\" o vistas por las que pasa un usuario al utilizarla.  A continuación se muestra un ejemplo típico con una pantalla de bienvenida, una pantalla que reproduce un juego y una pantalla de finalización del juego.\n\n[][2]\n\n## ¿Qué es una pantalla?\n\nUna pantalla es un elemento de interfaz de usuario como cualquier otro en Modo Diseño.  Pero tiene algunas propiedades especiales:\n\n-   Una pantalla es un elemento de IU que contiene otros elementos de IU.\n-   Sólo puede haber una pantalla visible a la vez.\n-   Sólo los elementos que \"pertenecen\" a una pantalla son visibles cuando esa pantalla está activa.\n-   Aunque tus _elementos de diseño_ puedan estar repartidos en múltiples pantallas, tu código está todo en un solo lugar.\n\n## Cómo crear una nueva pantalla\n\n<img src=\"https://images.code.org/ed8f45d70a65329597c1623ddd756249-image-1477165123570.png\" style=\"float: right;\">\n\nHay dos formas de añadir una pantalla a tu aplicación.  Primero, asegúrate de que estás en <em>Modo Diseño</em>.\n\n[][0]\n\n1.  Selecciona _Nueva pantalla..._ en el menú desplegable situado en la parte superior del área de visualización. **Nota:** también se utiliza este menú desplegable para pasar de una pantalla a otra en el modo diseño.\n2.  O arrastra y suelta un elemento de la interfaz de usuario de pantalla desde la caja de herramientas. **Atención:** En cuanto sueltes el elemento de pantalla, la aplicación te mostrará una **nueva pantalla en blanco.** Puedes volver a otras pantallas usando el menú desplegable de la parte superior.\n\n[/][0]\n\n## Configurar las Propiedades de una Pantalla\n\n[][1]\n\n1.  Utiliza este menú desplegable para seleccionar la pantalla en la que quieres trabajar. La lista contendrá los ID de todas las pantallas que hayas creado.\n2.  Pulsa sobre una zona en blanco del fondo para seleccionar la pantalla y configurar sus propiedades.\n3.  Las pantallas también tienen IDs.  Al igual que otros elementos de la interfaz de usuario, es una buena idea _dar a tus pantallas IDs descriptivos y significativos_. Hace que escribir código sea mucho más fácil.\n4.  Si tu pantalla está llena de elementos de interfaz de usuario y no hay un área en blanco para hacer clic y seleccionarlos, utiliza este menú desplegable. Enumera todos los elementos de IU que forman parte de esta pantalla, incluida la propia pantalla.\n5.  Pulsa este botón para hacer de esta pantalla la \"pantalla por defecto\", es decir, la pantalla que se mostrará en primer lugar cuando se ejecute la aplicación.\n6.  Las pantallas no tienen muchas propiedades, pero puedes establecer el fondo de la pantalla en un color o una imagen. Las imágenes se estiran o encogen para ajustarse a la pantalla.\n\n[/][1]\n\n[][3]"
        },
        "csd-2022/naming-variables": {
          "display_name": "Nombrar variables",
          "content": "Las etiquetas de las variables deben ser significativas, pero puedes elegir casi cualquier etiqueta. Sólo hay algunas reglas y directrices a tener en cuenta.\n\n## Reglas de Nomenclatura\n\nHay unas **pocas reglas** a la hora de elegir etiquetas:\n\n-   Las etiquetas **no pueden incluir espacios**. Por ejemplo, `ancho de rectángulo` generaría un error.\n-   Las etiquetas **no pueden empezar por un número**. 4 lados\" y \"2mañana\" generarán errores.\n-   Ten mucho cuidado con **la ortografía**.  Si las etiquetas no se escriben exactamente igual, el ordenador no se dará cuenta de que se refieren a la misma variable.\n-   Las etiquetas distinguen entre mayúsculas y minúsculas. `size` no es lo mismo que `Size` o `SIZE`.\n\n## Usando Etiquetas Significativas\n\nCuando veas una variable en tu programa, querrás saber exactamente qué contiene sin tener que buscarla.  Asegúrate de etiquetar tu variable con algo significativo.  `score` y `lives` son buenas etiquetas que te dicen exactamente para qué se usa esa variable.  [`number`(#bbb3ce)][0] y `a` no son tan útiles.\n\n## camelCase\n\nLas etiquetas con varias palabras pueden ser más fáciles de leer en **camelCase**. Una etiqueta camelCase se parece a `sizeOfRectangle` o `aReallyLongLabelName`.  La primera letra del nombre de la variable suele ser minúscula, cada nueva palabra empieza con mayúscula.  Esto te ayuda a ver el comienzo de las nuevas palabras sin usar espacios, que no están permitidos en los nombres de las variables.\n\n## usando\\_guiones bajos\n\nOtra forma común de poner múltiples palabras en la etiqueta de una variable es usar guiones bajos entre las palabras.  Cuando se usan guiones bajos, los programadores no suelen usar mayúsculas.  Este tipo de variables se parecen a `size_of_rectangle` o `my_frog_sprite`.\n\n## Coherencia\n\nLo más importante cuando elijas cómo etiquetar tus variables es usar un estilo coherente para que te sea fácil recordar la ortografía exacta y las mayúsculas de tus variables. "
        },
        "csd-2022/other": {
          "display_name": "Otro",
          "content": "Esta categoría incluye otros conceptos útiles que pueden no encajar en otras categorías."
        },
        "csd-2022/other-overview": {
          "display_name": "Resumen",
          "content": "Esta categoría incluye otros conceptos útiles que pueden no encajar en otras categorías."
        },
        "csd-2022/patterns": {
          "display_name": "Patrones",
          "content": "Esta página todavía está en desarrollo. Esta página es la página de inicio de Patrones de Programación en el Desarrollo de Aplicaciones y no tiene ningún contenido. Para ver los diferentes patrones de programación utiliza la navegación de la izquierda. Si tienes preguntas sobre esta página, escríbenos a support@code.org."
        },
        "csd-2022/patterns-2": {
          "display_name": "Patrones",
          "content": "Patrones de programación útiles"
        },
        "csd-2022/patterns-overview": {
          "display_name": "Resumen",
          "content": "Esta página todavía está en desarrollo. Esta página es la página de inicio de Patrones de Programación en el Desarrollo de Aplicaciones y no tiene ningún contenido. Para ver los diferentes patrones de programación utiliza la navegación de la izquierda. Si tienes preguntas sobre esta página, escríbenos a support@code.org."
        },
        "csd-2022/physical-input": {
          "display_name": "Circuit Playground - Entrada Física",
          "content": "El Circuit Playground puede usarse para algo más que para _emitir_ información (como has hecho con el LED), también puede usarse como dispositivo de _entrada_. Las formas más simples de entrada disponibles en la placa son los **botones** y el **interruptor**.\n\n## Identificación de las entradas\n\n<img alt=\"buttons\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp_buttonswitch.png\" style=\"float: right; margin-left: 10px; width: 400px;\">\n\n[][0]\n\n1.  El **Botón Reset** no está disponible para que lo utilices en tu programa. Pulsar este botón hace que la placa se reinicie, así que evita pulsarlo mientras ejecutas un programa. Es útil, sin embargo, si tu placa no está funcionando como esperabas.\n\n2.  Los botones izquierdo y derecho están disponibles en código como `buttonL` y `buttonR` respectivamente. Estos botones son idénticos entre sí aparte de la ubicación en el tablero. \n    Ten en cuenta que la izquierda y la derecha asumen que estás mirando la placa con el puerto USB en la parte superior. \n\n3.  El **Conmutador** está disponible en código como [`toggleSwitch`(#f78183)][1]. \n\n[/][0]\n\n## Eventos y tipos de eventos\n\n### Botones Izquierda y Derecha:\n\n| Tipo de Evento | Descripción                                            |\n| -------------- | ------------------------------------------------------ |\n| `abajo`        | Se activa cuando se pulsa el botón.                    |\n| `arriba`       | Se activa cuando el botón sube después de ser pulsado. |\n\n### Conmutador:\n\n| Tipo de Evento          | Descripción                                   |\n| ----------------------- | --------------------------------------------- |\n| [`abierto`(#fff176)][2] | Cuando el toggleSwitch se abre (o `cierto`)   |\n| `cerrado`               | Cuando el toggleSwitch se cierra (o `falso`)  |\n| `cambio`                | Cuando el toggleSwitch está activado del todo |\n\n## Estado\n\nLos botones y el interruptor son similares en el sentido de que ambos son entradas _binarias_ sólo pueden estar en uno de los dos **estados**. \n\nLos botones están normalmente apagados, o `falso`, y cambian a encendido, o `cierto`, cuando los pulsas. Puedes comprobar si un botón está siendo pulsado usando el booleano [`buttonL.isPressed`(#f78183)][3]. \n\nEl interruptor, sin embargo, permanece en la última posición en la que lo pusiste. Cuando el interruptor está a la izquierda está abierto, o `cierto`, y a la derecha está cerrado, o `falso`. \n\nEl interruptor tiene pequeños signos de más y menos impresos a ambos lados para ayudarte a recordarlo. Puedes comprobar en qué estado está el interruptor con el booleano [`toggleSwitch.isOpen`(#f78183)][4]."
        },
        "csd-2022/playing-notes": {
          "display_name": "Sonando notas",
          "content": "En la música Western, representamos las \"notas\" musicales con letras desde la A hasta la G. Esas notas corresponden a frecuencias de tono específicas, de hecho, las mismas frecuencias que hemos estado usando con el zumbador. Podrías recrear tus canciones favoritas usando sólo las frecuencias apropiadas, pero el Maker Toolkit incluye un comando [`buzzer.note()`(#f78183)][0] que busca los valores apropiados para ti.\n\n## Frecuencias para Notas\n\n<div style=\"float: right; margin: 20px;\" markdown=\"1\">\n\n| Frequencia | Nota Asignada |\n| ---------- | ------------- |\n| 261        | C4            |\n| 277        | C#4           |\n| 293        | D4            |\n| 311        | D#4           |\n| 329        | E4            |\n| 349        | F4            |\n| 369        | F#4           |\n| 392        | G4            |\n| 415        | G#4           |\n| 440        | A4            |\n| 466        | A#4           |\n| 493        | B4            |\n| 523        | C5            |\n\n</div>\n\nEl gráfico de la derecha muestra un conjunto de notas que empiezan por C4, también conocido como C \"medio\", y la frecuencia correspondiente a cada una de las notas.\n\n## Notas\n\n[`buzzer.note()`(#f78183)][1] simplifica esto. En lugar de pasarle una frecuencia para que la toque, como [`buzzer.frequency`(#f78183)][2], simplemente le das la nota que quieres que toque. Esto también puede incluir notas agudas, siempre y cuando incluyas el \"#\" después de la nota.\n\n## Octavas\n\nEl zumbador puede tocar cada nota en una de ocho octavas. Al pasar cualquier nota al método [`buzzer.note()`(#f78183)][3], también incluirás la octava en la que deseas que esté esa nota. \"C4\", por ejemplo, si deseas tocar la nota C media, \"C1\" si deseas la nota C más baja posible y \"C8\" si deseas la nota C más alta posible. Si no especificas esto, las notas se reproducirán automáticamente en la cuarta octava.\n\nPara obtener el mejor sonido posible, debes permanecer en la octava 4. Cualquier octava inferior a la 4 o superior a la 6 tiende a sonar distorsionada en el zumbador."
        },
        "csd-2022/problem-solving-process": {
          "display_name": "El proceso de resolución de problemas",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nTener una estrategia para abordar los problemas puede ayudarte a desarrollar nuevas ideas y a encontrar nuevas y mejores soluciones. Se trata de un proceso iterativo muy útil para resolver todo tipo de problemas.\n\n## Definir\n\n-   Determina el problema que intentas resolver.\n-   Identifica tus limitaciones\n-   Describe cómo será el éxito\n\n## Preparar\n\n-   Lluvia de ideas / investigación de posibles soluciones\n-   Compara pros y contras\n-   Elabora un plan\n\n## Probar\n\n-   Pon tu plan en marcha\n\n## Reflexionar\n\n-   Compara tus resultados con los objetivos que fijaste al definir el problema\n-   Decide qué puedes aprender de ello o qué puedes hacer mejor la próxima vez\n-   Identifica cualquier nuevo problema que hayas descubierto"
        },
        "csd-2022/problem-solving-process-design": {
          "display_name": "El Proceso de Resolución de Problemas con Diseño",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nEl **Proceso de Resolución de Problemas** es útil cuando se trata de diseñar un nuevo producto para alguien, como un nuevo sitio web o una aplicación o dispositivo. Este proceso te ayudará a aclarar y descomponer un problema en pasos manejables para que puedas crear algo que satisfaga las necesidades de tu usuario.\n\n## Definir\n\n-   Identifica a las personas o grupos de personas que podrían beneficiarse de tu producto.\n-   Identifica las necesidades y deseos de las personas que utilizarían tu producto\n-   Imagina que eres uno de tus usuarios. Escribe lo que un usuario podría ver, oír o sentir al experimentar su necesidad o deseo.\n-   Si es posible, entrevista a los usuarios potenciales para saber más sobre lo que quieren.\n-   Considera la posibilidad de crear frases como \"**\\*\\***\\_**\\*\\*** necesita una forma de **\\*\\***\\_**\\*\\*** para \\***\\*\\_\\*\\***. Debería **\\*\\*\\*\\***\\_\\_**\\*\\*\\*\\***\"\n\n## Preparar\n\n-   Deja a un lado tus propias creencias o suposiciones personales para poder empatizar con los usuarios.\n-   Haz una lluvia de ideas sobre posibles soluciones que satisfagan las necesidades y los deseos de los usuarios.\n-   Investiga lo que existe y cómo otros han abordado problemas similares para ver qué puedes aprender\n-   Elabora una lista de \"pros\" y \"contras\" de las posibles soluciones para decidir cuál crear.\n-   No podrás crear todo de una vez: decide el \"mínimo\" que necesitas crear para empezar a probar y aprender qué funciona y qué no.\n\n## Probar\n\n-   Esboza tu idea en papel o con una herramienta digital\n-   Crea un prototipo de tu producto, que es una versión rápida y poco arriesgada de tu idea que puedes probar.\n-   Identifica un aspecto específico de tu prototipo que quieras probar y sobre el que quieras recibir comentarios.\n-   Comparte tu prototipo con otras personas y obtén comentarios, luego agrúpalos en categorías\n\n## Reflexionar\n\n1.  ¿Qué categorías de comentarios has recibido sobre tu diseño? ¿Qué mejoras puedes hacer basándote en esos comentarios?\n2.  ¿Cuál fue la reacción a tu prototipo cuando lo compartiste con otras personas? ¿Cómo puedes aprovechar las reacciones positivas? ¿Cómo puedes hacer cambios para evitar reacciones negativas?\n3.  ¿De qué aspecto de tu prototipo estás más orgulloso? ¿Qué parte necesita mejoras?\n4.  Basándote en tus pruebas, si tuvieras que reiniciar el proceso de resolución de problemas en el paso Definir, ¿qué nuevos problemas tratarías de identificar? ¿Cómo podrías iterar sobre lo que tiene para hacerlo más útil a sus usuarios? "
        },
        "csd-2022/problem-solving-process-general": {
          "display_name": "El proceso de resolución de problemas",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nTener una estrategia para abordar los problemas puede ayudarte a desarrollar nuevas ideas y a encontrar nuevas y mejores soluciones. Se trata de un proceso iterativo muy útil para resolver todo tipo de problemas.\n\n## Definir\n\n-   Determina el problema que intentas resolver.\n-   Identifica tus limitaciones\n-   Describe cómo será el éxito\n\n## Preparar\n\n-   Lluvia de ideas / investigación de posibles soluciones\n-   Compara pros y contras\n-   Elabora un plan\n\n## Probar\n\n-   Pon tu plan en marcha\n\n## Reflexionar\n\n-   Compara tus resultados con los objetivos que fijaste al definir el problema\n-   Decide qué puedes aprender de ello o qué puedes hacer mejor la próxima vez\n-   Identifica cualquier nuevo problema que hayas descubierto"
        },
        "csd-2022/problem-solving-process-programming": {
          "display_name": "El Proceso de Resolución de Problemas con Programación",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nEl **Proceso de Resolución de Problemas** es útil a la hora de escribir código para un programa difícil. Este proceso te ayudará a clarificar y descomponer un problema en pasos manejables para que puedas identificar fácilmente el código que necesitas escribir para cada paso.\n\n## Definir\n\n-   Lee atentamente las instrucciones para asegurarse de que comprendes los objetivos y los resultados previstos del programa.\n-   Si hay un programa de ejemplo, ejecútalo para asegurarte de que entiendes lo que hace.\n-   Si hay código de inicio, léelo para entender lo que hace.\n-   Reformula el problema con tus propias palabras.\n-   Identifica las competencias que se te piden.\n-   Decide qué aspecto del problema quieres completar primero.\n\n## Preparar\n\n-   Haz una lluvia de ideas sobre las distintas formas en que podrías programar el problema para resolver todas sus partes.\n-   Escribe en lenguaje sencillo o en pseudocódigo tus ideas sobre cómo resolver el problema para que el programa haga lo que se supone que debe hacer.\n-   Enumera lo que ya sabes hacer y lo que todavía no.\n-   Describe tus ideas a un compañero\n-   Revisa programas similares que hayas escrito en el pasado.\n-   Esboza tu idea en papel si es necesario\n\n## Probar\n\n-   Elige una idea del paso anterior y documenta por qué elegiste esa idea. \n-   Implementa la idea elegida y escribe un pequeño fragmento de código cada vez.\n-   Prueba tu programa a menudo.\n-   Utiliza comentarios para documentar y hacer un seguimiento de lo que hace tu código.\n-   Vuelve al paso anterior para ver tus otras ideas para resolver el problema si te quedas atascado.\n-   Aplica estrategias de depuración adecuadas\n\n## Reflexionar\n\n1.  Compara tu programa con el problema definido... ¿Has conseguido resolver todos los aspectos del problema? ¿Cómo lo sabes?\n2.  Pide a un compañero de clase que pruebe tu programa... ¿Hay algún punto en el que tenga dificultades o muestre confusión?\n3.  Pregunta a un compañero que lea tu código... ¿Son tu código y tu documentación claros y precisos?\n4.  Prueba  a \"romper\" tu programa ... ¿Encontraste tipos de interacción o entrada que podrías manejar mejor?\n5.  ¿Hay algún cambio o mejora que puedas introducir en este programa o en otro similar en el futuro?"
        },
        "csd-2022/producing-output": {
          "display_name": "Circuit Playground - Zumbador",
          "content": "<img src=\"//curriculum.code.org/images/circuitplayground/cp_buzzer.png\" style=\"float: right; width: 300px; margin-left: 10px;\">\n\nEl LED es probablemente la forma más simple de salida disponible, y aunque hay muchas cosas útiles que una simple luz puede comunicar, a veces necesitamos una forma diferente de salida. Hemos utilizado la luz como salida, pero ¿qué pasa con el sonido? Tu placa tiene un objeto [`buzzer`(#f78183)][1] que puede reproducir sonidos simples.\n\n### El Zumbador\n\nNo esperes que el [`buzzer`(#f78183)][2] haga música bonita, ¡es una herramienta simple para una salida simple!\n\n[][0]\n\n1.  Este cubo contiene un zumbador simple (también conocido como _piezo_ o _piezoeléctrico_zumbador). Cuando se envía electricidad al zumbador, éste vibra y hace ruido.\n\n[/][0]\n\n<div style=\"clear: both;\"></div>\n\n### Haciendo Sonidos Diferentes\n\n<img src=\"//curriculum.code.org/images/circuitplayground/cp_buzzer_pwm.png\" style=\"float: left; width: 200px; margin-right: 10px;\">\n\nCuando utilizamos el LED, la elección de la salida es muy sencilla: encendida o apagada. El zumbador puede reproducir distintos sonidos. Podemos hacerlo enviando impulsos de electricidad al zumbador a diferentes velocidades. Es como encender y apagar una luz repetidamente: cuanto más rápido accionemos el interruptor, más agudo será el sonido que producirá.\n\n<div style=\"clear: both;\"></div>"
        },
        "csd-2022/random-list-access": {
          "display_name": "Patrón de Acceso a Listas Aleatorias",
          "content": "| Nombre                               | Código (Bloque) | Código (Texto) |\n| ------------------------------------ | --------------- | -------------- |\n| Patrón de Acceso a Listas Aleatorias | [][0]           | [][1]          |\n\n## ¿Cómo funciona?\n\nMuchos proyectos de Laboratorios de Aplicaciones funcionan de la siguiente manera. \n\n1.  El usuario está interesado en ver los elementos de una lista, como una lista de comidas favoritas, o una lista de recordatorios.\n2.  La aplicación muestra al usuario un artículo de la lista cada vez.\n3.  Al pulsar los botones (o interactuar de otro modo con la aplicación), se muestra al usuario un nuevo artículo aleatorio de la lista.\n\nEste patrón permite al usuario ver elementos aleatorios en una lista. Para que funcione, crea una variable índice y una lista. A continuación, genera un número aleatorio entre 0 y la longitud de la lista menos uno y establece el índice a ese valor. A continuación, actualiza la pantalla."
        },
        "csd-2022/random-numbers": {
          "display_name": "Números aleatorios",
          "content": "## Usando Números Aleatorios\n\nEl bloque `randomNumber()` puede utilizarse para generar números aleatorios en tus programas. Los parámetros establecen el valor mínimo y máximo que pueden generarse.  Puedes utilizar este bloque en cualquier lugar donde puedas escribir un número.\n\n[][0]\n\n_Este ejemplo es como un dado que podría generar aleatoriamente cualquier número del 1 al 6_.\n\n## Dibujo y Números Aleatorios\n\nPuedes usar `randomNumber()` como parámetro en comandos de dibujo para hacer dibujos aleatorios. Con el siguiente comando, tu programa podría generar dibujos diferentes cada vez que se ejecute.\n\n[][1]\n\n| Tirada 1                                                                                                                             | Tirada 2                                                                                                                             | Tirada 3                                                                                                                             |\n| ------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------ |\n| <img src=\"https://images.code.org/246e7ac850015aa830d469b7eeb5f00e-image-1491523022253.50.04 PM.png\" style=\"float:left;width:150px\"> | <img src=\"https://images.code.org/01b10dc034475fd5a90bd3c7bd0c51b8-image-1491523025607.50.17 PM.png\" style=\"float:left;width:150px\"> | <img src=\"https://images.code.org/0f0c3cc4d42923dc4321809daf189053-image-1491523028093.50.49 PM.png\" style=\"float:left;width:150px\"> |\n\n## Múltiples Números Aleatorios\n\nSi utilizas `randomNumber()` varias veces en tu programa, se generarán nuevos números aleatorios cada vez. Puedes pensar en cada `randomNumber()` como una nueva tirada de un dado.\n\n[][2]\n\n| Tirada 1                                                                                                                                  | Tirada 2                                                                                                                                  | Tirada 3                                                                                                                                  |\n| ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| <img src=\"https://images.code.org/3ff0345b3ffdf3373e34053e696f7068-image-1491708429815.22.05 PM.png\" style=\"float: left; height: 150px;\"> | <img src=\"https://images.code.org/5721e766b1b85fbe817cf65f635f3d27-image-1491862776557.17.17 PM.png\" style=\"float: left; height: 150px;\"> | <img src=\"https://images.code.org/1fe406c05feb8bc2c135dac45152f881-image-1491862780106.18.05 PM.png\" style=\"float: left; height: 150px;\"> |"
        },
        "csd-2022/responding-to-user-input": {
          "display_name": "Responder a las contribuciones de los usuarios",
          "content": "El Modo Diseño hace que sea muy fácil diseñar la interfaz de usuario de tu aplicación, pero tendremos que sumergirnos en el Modo Código para hacer que realmente responda a los usuarios.\n\nEn Laboratorio de Juegos el bucle Draw ejecuta código constantemente, utilizando condicionales para comprobar las interacciones del usuario. Laboratorio de Aplicaciones, por otro lado, espera para responder a ciertos **eventos** que ocurren en un programa. Es la forma que tiene Laboratorio de Aplicaciones de decir \"¡Hey! ¡Algo acaba de suceder!\". Esto significa que no es necesario que haya ningún código en ejecución cuando no se está interactuando directamente con una aplicación, y su código puede responder a cada uno de estos eventos a medida que ocurren.\n\nEn Laboratorio de Aplicaciones todo el manejo de eventos se inicia mediante la adición de un bloque especial de código llamado [`onEvent`(#fff176)][1].  He aquí cómo hacerlo:\n\n<img src=\"https://images.code.org/9b506faaaadf61338dc738a4eafb66b2-image-1476740205599.png\" />\n\n[][0]\n\n1.  Cambia a Modo Código\n2.  Arrastra un bloque [`onEvent`(#fff176)][2] de la caja de herramientas al área de trabajo.\n3.  Utiliza el menú desplegable para seleccionar el _ID_ del elemento de interfaz de usuario que desea configurar para responder a algún evento. Aquí aparecerán los ID de todos los elementos IU añadidos en modo diseño.\n4.  Utiliza el menú desplegable para seleccionar el _tipo_ de evento al que deseas responder. (Por ahora usa sólo \"clic\").\n5.  Añade código dentro de la función que quieres que se ejecute _cuando_ ocurra el evento.  La función se ejecutará una vez, cada vez que ocurra el evento.\n\n[/][0]"
        },
        "csd-2022/saving-and-uploading-csv-files": {
          "display_name": "Guardar y Subir Archivos CSV",
          "content": "## Vídeo\n\n(Abre YouTube en una pestaña nueva)\n\n[undefined][0]"
        },
        "csd-2022/selecting-a-label": {
          "display_name": "Seleccionando una Etiqueta",
          "content": "<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/01-Selecting-a-Label-Drawing.png\"/>\n\n[][0]\n\n1.  Pulsa sobre una columna para ver más información sobre ella\n2.  Se trata de una descripción de la columna seleccionada. Puede proporcionarte más información sobre los datos de esta columna. Si los datos proceden de una encuesta, normalmente contendrá la pregunta que se hizo en la encuesta\n3.  Un gráfico de **barras** muestra cuántas veces aparece un determinado valor en el gráfico. Para las etiquetas, es importante tener una representación equilibrada de los datos. Si ciertos valores están sobrerrepresentados o infrarrepresentados, esto puede conducir a un modelo de aprendizaje automático _sesgado_.\n4.  Pulsa el botón \"Añadir etiqueta\" para utilizar esta columna como salida de tu modelo de aprendizaje automático. Esto es lo que el Bot de Inteligencia Artificial intentará predecir.\n\n[/][0]\n\n## Vídeo\n\n(Abre YouTube en una pestaña nueva)\n\n[undefined][1]"
        },
        "csd-2022/selecting-features": {
          "display_name": "Selección de Características",
          "content": "<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/02-Selecting-Features-a.png\"/>\n\n[][0]\n\n1.  Pulsa sobre una columna para ver más información sobre ella\n2.  Se trata de una descripción de la columna seleccionada. Puede proporcionarte más información sobre los datos de esta columna. Si los datos proceden de una encuesta, normalmente contendrá la pregunta que se hizo en la encuesta\n3.  Diferentes gráficos y visualizaciones de datos pueden ayudarte a decidir si esta columna será una característica útil para que el Bot de Inteligencia Artificial busque patrones. Puedes aprender más sobre la selección de características en estos artículos: [Uso de Datos con Características Categóricas][1] o [Uso de Datos con Características Numéricas][2].\n4.  Pulsa el botón \"Añadir característica\" para utilizar esta columna como una de las entradas en tu modelo de aprendizaje automático\n5.  Si deseas eliminar una característica de tu modelo, pulsa la X situada sobre la característica en la parte superior de la pantalla.\n\n[/][0]\n\n## Vídeo\n\n(Abre YouTube en una nueva pestaña)\n\n[undefined][3]"
        },
        "csd-2022/shapes-and-parameters": {
          "display_name": "Formas y parámetros",
          "content": "Algunos bloques de Laboratorio de Juegos tienen entradas, o **parámetros**, que no se utilizan siempre.\n\n## Recta\n\nLa primera vez que usaste el bloque [`rect`(#f78183)][0], siempre creaba un cuadrado de 50 de lado.  Tenía dos entradas que podías utilizar para especificar sus coordenadas `x` e `y`.  El bloque [`rect`(#f78183)][1] también tiene otros dos **parámetros opcionales**.  Estos parámetros se utilizan para especificar su anchura y altura.  Puedes utilizar las flechas de la parte derecha del bloque para mostrar u ocultar estos parámetros opcionales.\n\n## Elipse\n\nLa elipse también tiene parámetros opcionales para su anchura y altura después de los parámetros `x` e `y`. Puede mostrar u ocultar estos parámetros opcionales.  Puedes mostrar u ocultar estos parámetros opcionales con la flecha de la derecha del bloque, igual que con el bloque [`rect`(#f78183)][2]."
        },
        "csd-2022/sprite-interactions": {
          "display_name": "Interacciones de sprites",
          "content": "En la mayoría de los juegos, los sprites chocan entre sí. Hay cuatro tipos de colisiones disponibles en el Laboratorio de Juegos: [`displace`(#f78183)][0], [`collide`(#f78183)][1], [`bounce`(#f78183)][2], y [`bounceOff`(#f78183)][3]. Estos bloques provocarán un determinado tipo de interacción entre el sprite y su objetivo y deben utilizarse dentro de la función [`draw`(#fff176)][4].\n\n### Desplazar\n\n<img src=\"http://curriculum.code.org/media/uploads/displace2.gif\" style=\"width: 200px; float:right; margin: 10px 50px;\">\n\n[`displace`(#f78183)][5] hace que un sprite empuje a otro sprite (el _objetivo_) mientras se toquen entre si.\n\n<pre>\nfunction draw() {\n\n  background(\"skyblue\");\n  bunny.displace(carrot);\n  drawSprites();\n\n}\n\n</pre>\n\n### Colisionar\n\n<img src=\"http://curriculum.code.org/media/uploads/collide.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`collide`(#f78183)][6] hace que un sprite se detenga cuando choca contra algo.  Puedes usarlo cuando quieras que tu sprite sea bloqueado por obstáculos.\n\n<pre>\nfunction draw() {\n\n  background(\"black\");\n  alien.collide(monster);\n  drawSprites();\n \n}\n\n</pre>\n\n### Rebotar\n\n<img src=\"http://curriculum.code.org/media/uploads/bounce.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`bounce`(#f78183)][7] hace que el sprite y el objetivo reboten cuando se tocan. Tanto el sprite como el objetivo cambian su forma de moverse.\n\n<pre>\nfunction draw() {\n\n  background(\"lightgreen\");\n  giraffe.bounce(hippo);\n  elephant.bounce(pig);\n  snake.bounce(monkey);\n  drawSprites();\n}\n\n</pre>\n\n### Rebotar\n\n<img src=\"http://curriculum.code.org/media/uploads/bounceoff.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`bounceOff`(#f78183)][8] hace que el sprite rebote en el objetivo cuando se tocan. El objetivo sigue moviéndose como antes.\n\n<pre>\nfunction draw() {\n\n  background(\"pink\");\n  note.bounceOff(guitar);\n  drawSprites();\n \n}\n\n</pre>"
        },
        "csd-2022/sprite-properties": {
          "display_name": "Propiedades de Sprite",
          "content": "Si piensas en un _sprite_ como una colección de valores que representa un objeto en el mundo real, entonces las _propiedades_ de un sprite son como variables que contienen todos esos valores. Algunas de las propiedades más comunes de un sprite son:\n\n[][0]\n\n[][1]\n\n[][2]\n\n[][3]\n\n[][4]\n\n## Notación de Punto\n\nObserva que todos los ejemplos anteriores siguen un patrón común de **etiqueta sprite . propiedad sprite**. Llamamos a este formato _notación de punto_. La primera parte será _siempre_ única para el sprite que quieras modificar, y la segunda parte será _siempre_ una de las propiedades comunes a todos los sprites.\n\n## Lectura y Escritura de Propiedades\n\nLas propiedades de los sprites, al igual que las variables, son valores que a veces sólo queremos leer, y a veces queremos escribir en ellos. Cuando arrastras una propiedad de un sprite, ésta tomará una forma diferente dependiendo de si estás _leyendo_ su valor, o _escribiéndolo_.\n\n[][5]\n\nEn la primera imagen de arriba el bloque [`sprite.x`(#f78183)][6] está siendo arrastrado a un lugar donde está siendo leído, por lo que mantiene su forma normal.\n\nEn la segunda imagen, el bloque [`sprite.y`(#f78183)][7] se arrastra a una nueva línea en la que se escribirá, por lo que cambia a la forma `sprite.y = ___`."
        },
        "csd-2022/sprites": {
          "display_name": "Sprites",
          "content": "Un _sprite_ es el nombre que damos a una colección de valores en el Laboratorio de Juegos que representa a un personaje en una historia, animación o juego. Un _sprite_ puede ser almacenado en una variable con una etiqueta, pero a diferencia de los valores que ha almacenado en las variables antes, como los números, un _sprite_ te permite almacenar muchos valores relacionados todos bajo la misma etiqueta\n\n# Creación de un Sprite\n\nPuedes crear un nuevo _sprite_ usando el bloque [`createSprite()`(#f78183)][1].\n\n[][2]\n\n[][0]\n\n1.  El _sprite_ dibujado en pantalla. En este caso, nuestro _sprite_ está situado en (200, 200), el centro de la pantalla, y se le ha asignado la animación \"conejito\"\n2.  El bloque [`createSprite()`(#f78183)][3], que crea un nuevo _sprite_ en (200, 200) y lo asigna a la etiqueta variable `my_bunny`. Ten en cuenta que el hecho de crear el _sprite_ **todavía no** lo dibuja en la pantalla. Eso ocurrirá más tarde.\n3.  El bloque `sprite.setAnimation()` asigna una animación (o imagen) al _sprite_. En este caso, estamos usando una animación llamada \"bunny\", que fue añadida en la pestaña de animación. Observa que en lugar del nombre de variable por defecto `sprite`, lo hemos actualizado a `my_bunny.setAnimation()` para que cambie la animación del _sprite_ `my_bunny`.\n4.  Como los _sprites_ son sólo valores almacenados como variables, no se dibujan automáticamente en la pantalla. El bloque [`drawSprites()`(#fff176)][4] le dice al Laboratorio de Juegos que dibuje todos los _sprites_ que han sido creados en la pantalla.\n\n[/][0]"
        },
        "csd-2022/style-sheets": {
          "display_name": "Hojas de estilo",
          "content": "Los desarrolladores web separan intencionadamente contenido y estilo para que su código sea más fácil de mantener. HTML es el lenguaje utilizado para estructurar el contenido de una página web, y CSS, que significa **Hojas de Estilo en Cascada**, es un lenguaje que añade estilo a una página web. \n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/CS-Discoveries---Semester-1.png\" style=\"float: right; height: 300px;\">\n\n## Separando contenido, estructura y estilo.\n\nCuando los programadores desarrollan páginas web, es importante que sepan distinguir entre el contenido, la estructura y el estilo de la página. Los programadores utilizan HTML para organizar los distintos tipos de contenido de la página, indicando cómo debe estructurarse.  Esto les permite comunicar qué papel desempeña cada pieza de contenido en la página, como cabecera, lista, tablas u otros tipos de contenido.   Si no utilizas CSS (Cascading Style Sheets) para dar estilo a ese contenido, el navegador web aplicará estilos por defecto basados en la forma en que el HTML lo ha estructurado.  A medida que aprendas las reglas de estilo CSS, tendrás más control sobre el estilo aplicado a los diferentes tipos de contenido de la página.\n\n## Añadiendo una hoja de estilo\n\n<img alt=\"Web Lab Stylesheet\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\" class=\"center\" style=\"max-width: 600px;\">\n\n[][0]\n\n1.  Para añadir reglas de estilo CSS a una página HTML, es necesario crear un documento de hoja de estilo.\n2.  Esta es la hoja de estilo.\n3.  Enlace a tu hoja de estilo.  El enlace va dentro de la etiqueta [`Head`(#fff176)][1] y tiene este aspecto:\n    `<link rel=\"stylesheet\" href=\"style.css\">`\n\n[/][0]\n\n## Conjuntos de reglas CSS\n\nLos conjuntos de reglas CSS constan de dos partes principales: el selector y las reglas. \n\n### Selectores\n\nLos selectores pueden ser cualquier parte de la página web a la que quieras aplicar estilo. Una forma de identificar partes de la página web es utilizando los nombres del tipo de elemento. Seleccionar un tipo de elemento hará que todos los elementos de ese tipo tengan el estilo dado. El nombre del selector para los tipos de elementos HTML es el nombre de la etiqueta sin los corchetes. En el siguiente ejemplo, el selector es h1 y aplicará a todos los elementos h1 las reglas que aparecen dentro de las llaves (`{ }`).\n\n### Reglas\n\nLas reglas describen cómo deben cambiar los elementos identificados por el selector. Cada regla consiste en un nombre de propiedad y un valor, separados por dos puntos (`:`).  El nombre de la propiedad describe de qué trata la regla, como el color o el tamaño, y el valor cómo debe cambiar la propiedad.  Por ejemplo, el siguiente conjunto de reglas hará que todos las cabeceras h1 de la página tengan texto azul subrayado.\n\n    h1{\n      color:blue;\n      text-decoration: underline;\n    }\n\nLa puntuación en el conjunto de reglas es muy importante, porque así es como el ordenador sabe dónde empieza y termina cada regla.\n\n**W3 Schools Links**\n\n-   [Sintaxis CSS][2]"
        },
        "csd-2022/tableDataStorage": {
          "display_name": "Almacenamiento de Datos de Tabla en App Lab",
          "content": "### Visión general\n\nEl almacenamiento de datos de tabla del Laboratorio de Aplicaciones permite el almacenamiento persistente de datos para una aplicación. Mientras que [setKeyValue()][0] y [getKeyValue()][1] pueden utilizarse para almacenar múltiples pares clave/valor independientes, el almacenamiento de datos en tablas permite almacenar datos similares juntos en un formato de tabla.\n\nComo ejemplo sencillo, supongamos que estás creando una aplicación que recopila información sobre el nombre, la edad y la comida favorita de una persona para poder averiguar si las preferencias alimentarias están correlacionadas con la edad.\n\nSi estuvieras almacenando estos datos en un trozo de papel, o con una aplicación de hoja de cálculo, podrías formatear los datos de la siguiente manera:\n\n| Nombre | Edad | Alimento |\n| ------ | ---- | -------- |\n| Abby   | 17   | Ravioli  |\n| Kamara | 15   | Sushi    |\n| Rachel | 16   | Ensalada |\n\nLa tabla tiene una fila de nombres de columnas, y luego cada fila que se añade a la tabla rellena una o más de las columnas. El almacenamiento de datos en tablas de Laboratorio de Aplicaciones te permite almacenar datos con un formato similar, y proporciona funciones sencillas para [leer][2], [crear][3], [eliminar][4] y [actualizar][5] registros (filas) en una tabla, directamente desde tu aplicación.\n\n### Definiciones\n\n_Tabla:_ Una colección de registros con nombres de columna compartidos\n_Registro:_ Una \"fila\" de la tabla\n_Almacenamiento de datos persistente:_ Datos que se almacenan \"en la nube\" independientemente del código que se ejecuta en tu aplicación. Se puede acceder a los datos a través de múltiples actualizaciones o usuarios de la aplicación.\n\n### Visualización de Datos\n\nPara ver los datos de las tablas de tu aplicación, haz clic en la pestaña \"Datos\" de Laboratorio de Aplicaciones y en el nombre de la tabla que quieras ver.\n\n### Lectura y creación de registros de tabla desde su aplicación\n\nPara crear, leer, actualizar y eliminar registros de tabla desde tu aplicación, utiliza las siguientes funciones de Datos de Laboratorio de Aplicaciones:\n\n-   Para crear una fila en una tabla: [createRecord][6]\n-   Para leer una o varias filas de una tabla: [readRecords][7]\n-   Para actualizar una fila existente en una tabla: [actualizarRegistro][8]\n-   Para eliminar una fila existente de una tabla: [borrarRegistro][9]\n\n### Importación masiva de datos de una tabla desde un archivo\n\nSi dispones de datos en una hoja de cálculo a los que desea que su aplicación pueda acceder, puede utilizar la función Importar para rellenar rápidamente una tabla con registros de la hoja de cálculo. Para importar datos:\n\n_Paso 1._ **Dar formato a la hoja de cálculo**\nEn un editor de hojas de cálculo de tu elección, asegúrate de que los datos están formateados con los nombres de las columnas en la primera fila y los datos de la tabla debajo. Los datos de la hoja de cálculo deben tener este formato, pero con los valores que elijas (como nuestro ejemplo de comida favorita):\n\n| columna 1        | columna 2        | ... columna N    |\n| ---------------- | ---------------- | ---------------- |\n| fila1 col1 datos | fila1 col2 datos | fila1 colN datos |\n| fila2 col1 datos | fila2 col2 datos | fila2 colN datos |\n| fila3 col1 datos | fila3 col2 datos | fila3 colN datos |\n\n_Paso 2._ **Guardar la hoja de cálculo como archivo csv**.\nUn archivo separado por comas, o archivo csv, es un formato de archivo sencillo que la mayoría de los editores de hojas de cálculo deberían permitir guardar como archivo. Guarda el archivo como csv y descárgalo en tu ordenador.\n\n_Paso 3._ **Importar el archivo a la tabla de almacenamiento de datos de Laboratorio de Aplicaciones**.\nPara importar el archivo a una tabla en Laboratorio de Aplicaciones:\n\n1.  Pulsa el botón \"Ver datos\" en App Lab mientras visualizas tu código en \"Modo código\".\n2.  Pulsa el nombre de una tabla existente o añade una nueva tabla a tu aplicación.\n3.  Pulsa el botón Importar y selecciona el archivo csv del paso 2.\n4.  Pulsa 'Sobrescribir e Importar' para que los datos de la hoja de cálculo sobrescriban los datos de la tabla actual.\n    **Nota:** Los datos existentes _se sobrescribirán_, así que asegúrate de que no tenías intención de conservar los datos actuales.\n\n_Paso 4._ **Revisar los datos importados**.\nSi los datos se han importado correctamente, revisa la tabla para asegurarte de que todo está correcto. Puedes hacer ajustes rápidos a las filas pulsando el botón \"Editar\" para esa fila y editando los valores en línea.\n\nSi los datos no se importan correctamente, asegúrate de que el archivo csv original tiene el formato adecuado, con nombres de columnas y filas válidas.\n\nAhora que tienes datos en tu tabla, puedes usar las funciones de App Lab Data enlazadas arriba para leer, actualizar, borrar o crear nuevas filas en tu tabla."
        },
        "csd-2022/taking-input-with-getproperty": {
          "display_name": "Obteniendo entradas con getProperty",
          "content": "El comando [`getProperty()`(#fff176)][0] permite obtener el valor actual de las propiedades de un elemento de diseño. Al igual que [`setProperty()`(#fff176)][1], su primera entrada es el id de un elemento de diseño y la segunda es una propiedad de ese elemento. A diferencia de [`setProperty()`(#fff176)][2], el comando [`getProperty()`(#fff176)][3] no tiene una tercera entrada.\n\nPuedes utilizar este comando en cualquier elemento de diseño, pero es particularmente útil cuando se utiliza con los elementos Entrada de Texto, Desplegable, Casilla de Verificación, Botón de Radio y Deslizador. Estos elementos permiten al usuario cambiar su valor, y usando [`getProperty()`(#fff176)][4] puedes escribir programas que aprovechen esa entrada del usuario.\n\n## Ejemplo de getProperty\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/getProperty_crop.png\" style=\"margin: 20px auto\" />\n\nEn este ejemplo, estamos usando [`getProperty()`(#fff176)][5] para tomar los valores de una Entrada de Texto, un Menú Desplegable y una Casilla de Verificación. Aunque este ejemplo registra estos valores en la consola, también puedes guardarlos en variables o utilizar [`setProperty()`(#fff176)][6] para cambiar otros elementos del diseño basándote en estos valores."
        },
        "csd-2022/text-properties": {
          "display_name": "Propiedades de Texto",
          "content": "Hay muchas propiedades CSS disponibles que te permiten aplicar estilo al texto de tu página. A continuación repasamos algunas de las más comunes\n\n| Propiedad           | Qué cambia              | Ejemplo                       |\n| ------------------- | ----------------------- | ----------------------------- |\n| **color**           | El color del texto      | `color: maroon;`              |\n| **text-align**      | La alineación del texto | `text-align: center;`         |\n| **text-decoration** | Estilo adicional        | `text-decoration: underline;` |\n| **font-family**     | Qué fuente utilizar     | `font-family: fantasy;`       |\n| **font-size**       | El tamaño del texto     | `font-size: 20px;`            |\n\n## Ejemplo de texto con estilo\n\nSi juntamos todo esto, podrías obtener un texto como este:\n\n    p {\n      color: maroon;\n      text-align: center;\n      text-decoration: underline;\n      font-family: fantasy;\n      font-size: 20px;\n    }\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-05-03-09.38.04.png\" style=\"max-width: 300px; margin: 10px auto;\" class=\"center\">\n\n## Especificación de Fuentes\n\nEs posible que al utilizar CSS como `font-family: fantasy;` notes que el texto tiene un aspecto diferente en distintos ordenadores. Esto se debe a que sólo le estamos diciendo al navegador qué _tipo_ de fuente utilizar, no qué fuente _específica_.\n\n**W3 Schools Links**\n\n-   [CSS Propiedades de Texto][0]"
        },
        "csd-2022/the-accelerometer": {
          "display_name": "El acelerómetro",
          "content": "<img src=\"https://curriculum.code.org/media/uploads/cp_accel.png\" style=\"float: right; margin: 20px; width: 300px;\">\n\nLa mayoría de las entradas proporcionadas por el Circuit Playground son dispositivos relativamente simples, que dan un único valor. El acelerómetro es un tipo de sensor más complejo, que mide varias cosas a la vez y, por tanto, proporciona información más compleja al usuario. Un acelerómetro se utiliza habitualmente para detectar el movimiento y la posición en dispositivos como ordenadores portátiles, teléfonos, controladores de realidad virtual y rastreadores de salud. Por ejemplo, los podómetros utilizan el movimiento de los acelerómetros para registrar cuántos pasos das. \n\n## Midiendo la Orientación\n\nThe accelerometer can determine the _orientation_ of the board to figure out how the board is positioned. \n\n| Orientación     | Tipo de Movimiento Rastreado | Rango de Valores |\n| --------------- | ---------------------------- | ---------------- |\n| **Pitch**       | Movimiento de Cabeceo        | -90 to 90        |\n| **Roll**        | Movimiento de Balanceo       | -90 to 90        |\n| **Inclination** | Movimiento de Rotacion       | -180 to 180      |\n\n<br>\n\nUsando el bloque [`accelerometer.getOrientation()`(#f78183)][0], escribimos programas que responden a cambios en cabeceo, balanceo e inclinación. Este bloque devuelve un número para cada una de estas orientaciones que indica hacia qué lado se está inclinando la tabla. Por ejemplo, el cabeceo es positivo cuando se inclina hacia atrás, y negativo cuando se inclina hacia adelante. "
        },
        "csd-2022/the-counter-pattern": {
          "display_name": "El patrón del contador",
          "content": "En el Laboratorio de Juegos nos basamos en el _patrón contador_ para actualizar continuamente las propiedades de los sprites y crear animaciones. Aunque los elementos de Laboratorio de Aplicaciones no tienen el mismo tipo de propiedades que los sprites, podemos aplicar el patron contador para crear algunas animaciones sencillas.\n\n[][0]\n\nAl igual que el bucle draw de Laboratorio de Juegos, los eventos \"data\" ejecutan un único bloque de código una y otra vez. Debido a que estos eventos ejecutan código repetidamente, puedes usar el patrón contador dentro de un evento \"data\" para darle algo de movimiento simple a tu programa. Has estado usando el evento \"data\" para rastrear el acelerómetro mismo, pero para hacer programas más complejos vas a tener que actualizar valores adicionales fuera del acelerómetro. \n\n## Moviendo Elementos de Diseño con el Patrón Contador\n\n<img src=\"https://curriculum.code.org/media/uploads/anchor.gif\" style=\"float: right; width: 300px; margin-left: 20px;\">\n<img src=\"https://curriculum.code.org/media/uploads/counter_pattern.png\" style=\"max-width: 500px;\">\n\nEl código anterior utiliza el patrón contador en un evento \"data\" para mover un elemento de diseño hacia abajo en la pantalla. Para hacer nuestro código más legible, hemos guardado la posición actual del valor \"y\" de \"anchor\" en una variable antes de usarla en el patrón contador, pero también podrías escribir el patrón como:\n\n`setProperty(\"anchor\", \"y\", getProperty(\"anchor\", \"y\") + 1);`"
        },
        "csd-2022/the-counter-pattern-2": {
          "display_name": "El patrón del contador",
          "content": "Aumentar o disminuir números es un patrón común e increíblemente útil en programación. Este \"Patrón Contador\" puede usarse para hacer que una imagen vuele por la pantalla, para la cuenta atrás de un temporizador, o para llevar la cuenta de los clics. Usado con una variable [`x`(#f78183)][1] para contar de uno en uno, el Patrón Contador puede verse así:\n\n[][2]\n\nCada vez que se ejecuta este código, tomará el valor actual de x, sumará 1, y lo guardará como el nuevo valor de x. Mientras que esta instancia particular del Patrón Contador usa la suma, también podrías usar la resta para contar hacia abajo.\n\n## Movimiento con el Patrón Contador\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_code.png\" style=\"float: left;\">\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_pattern.gif\" style=\"float: right;\">\n\n[][0]\n\nEl código anterior utiliza el patrón contador en el bucle de dibujo para mover tres sprites. Observa que cada uno de los tres sprites se mueve de forma diferente dependiendo de si actualizas [`x`(#f78183)][3] del sprite, [`y`(#f78183)][4], o ambos.\n\n[/][0]\n\n## Otros Usos del Patrón Contador\n\nCualquier bloque que tome un número como entrada puede ser animado usando el patrón contador en el bucle de dibujo. Echa un vistazo a los tres ejemplos siguientes, cada uno de los cuales utiliza el patrón contador para animar un aspecto diferente de la imagen. Debajo de cada imagen hay un ejemplo del código que se utilizó _dentro del bucle Draw_ para producir la animación.\n\n<div markdown=1 style=\"float: left; margin: 10px; width: 30%\">\n\n[][5]\n\n    sprite.rotation = sprite.rotation - 1;\n\n</div>\n\n<div markdown=1 style=\"float: left; margin: 10px; width: 30%\">\n\n[][6]\n\n    sprite.scale = sprite.scale + 0.1;\n\n</div>\n\n<div markdown=1 style=\"float: left; margin: 10px; width: 30%\">\n\n[][7]\n\n    width = width + 1;\n    height = height - 1;\n    ellipse(200, 200, width, height);\n\n</div>"
        },
        "csd-2022/the-draw-loop": {
          "display_name": "El bucle 'dibujar'",
          "content": "## Animaciones\n\n[][0]\n\nUna animación utiliza una serie de imágenes para crear la ilusión de movimiento suave. Cada imagen individual se denomina fotograma. Normalmente necesitarás ver al menos varios fotogramas por segundo para que el movimiento parezca suave. \n\n## El Bucle de Dibujo\n\n[][1]\n\nPara crear animaciones, necesitarás una forma de seguir dibujando fotograma tras fotograma. En el Laboratorio de Juegos, esto se hace usando la función [`draw`(#fff176)][2]. La forma en que se ejecutan los programas en el Laboratorio de Juegos es:\n\n1.  Ejecutar cada pieza de código fuera de [`draw`(#fff176)][3]\n2.  Sigue ejecutando el código dentro de [`draw`(#fff176)][4] una y otra vez, 30 veces por segundo.\n\nCada vez que el código dentro de [`draw`(#fff176)][5] se ejecuta es como una nueva página en un libro animado. Haciendo pequeños cambios en lo que se dibuja cada vez, puedes usar el Laboratorio de Juegos para crear animaciones. \n\n## Bucle de Dibujo con Figuras\n\n| Código | Animación                                                                                                                     |\n| ------ | ----------------------------------------------------------------------------------------------------------------------------- |\n| [][6]  | <img src=\"https://images.code.org/4fb785c73362acbcad5639fb74706b38-image-1492194379719.gif\" style=\"float:right;height:150px\"> |\n\nEste programa establece el color de relleno y desactiva el trazo fuera del bucle de dibujo, luego ejecuta el código dentro de [`draw`(#fff176)][7] una y otra vez.  El programa seguirá dibujando puntos en lugares aleatorios continuamente.\n\n## Bucle de Dibujo con Sprites\n\n| Código | Animación                                                                                                         |\n| ------ | ----------------------------------------------------------------------------------------------------------------- |\n| [][8]  | <img src=\"https://images.code.org/b2c4dc68aa90fc1b56421ec69a66fa77-image-1492196934112.gif\" style=\"height:150px\"> |\n\nEste programa crea un sprite y establece su animación fuera del bucle de dibujo. Luego le da repetidamente al sprite una nueva posición `x` y redibuja el fondo naranja y el sprite para hacer que se mueva."
        },
        "csd-2022/timed-for-loop": {
          "display_name": "Bucle For Temporizado",
          "content": "El bucle `for` es una construcción práctica con algunos atajos realmente útiles para hacer que contar con un bucle sea mucho más fácil. Específicamente la sintaxis de un bucle _for_ te permite fácilmente:\n\n1.  Crear una variable contador (a menudo llamada `i`)\n2.  Especificar la condición que determina si se debe continuar o no con el bucle\n3.  Indicar cómo debe incrementarse el contador\n\nCuando uses un _bucle temporizado_ en lugar de un _bucle for_ tendrás que encargarte de esas tres tareas por tu cuenta.\n\n### Usando un Bucle Temporizado como un Bucle For\n\nAquí tienes una comparación de cómo podrías replicar el comportamiento de un bucle _for_ con un bucle _timed loop_. Ambos ejemplos se repetirán cuatro veces, imprimiendo lo siguiente en la consola:\n\n    bucle #0\n    bucle #1\n    bucle #2\n    bucle #3\n\n[ Comparación Bucle For / Bucle Temporizado][1]\n\n[][0]\n\n1.  La variable contador. Ten en cuenta que cuando se utiliza un _bucle temporizado_ la variable debe crearse antes del bucle.\n2.  La condición de salida. Tan pronto como esta condición sea `falso` el bucle dejará de repetirse. Una diferencia clave aquí es que el bucle _for_ comprueba su condición de salida **antes** de cada repetición del bucle, mientras que el bucle _timed loop_ comprueba la condición **durante** cada repetición.\n3.  El patrón contador. Esto incrementa el contador en cada repetición. Otra diferencia aquí es que el bucle _for_ ejecuta su patrón de contador **después** de cada repetición, mientras que el bucle _temporizado_ ejecuta el patrón de contador **durante** cada repetición.\n4.  El código a repetir. En el ejemplo del _bucle temporizado_ lo hemos colocado en una sentencia _if/else_ para poder comprobar si se ejecuta o no el código de la misma forma que lo hace el bucle for.\n\n[/][0]\n\n### Otros enfoques\n\nEl ejemplo ofrecido anteriormente es el que más se aproxima a cómo funciona un _bucle for_, pero tienes libertad para estructurar tu _bucle temporizado_ como quieras. Cada uno de los tres ejemplos siguientes ejecutará las mismas cuatro repeticiones que el anterior, pero cada uno utiliza una **condición de salida diferente**.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_1.png\" style=\"width: 30%; padding: 10px; float: left;\">\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_2.png\" style=\"width: 30%; padding: 10px; float: left;\">\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_3.png\" style=\"width: 30%; padding: 10px; float: left;\">"
        },
        "csd-2022/timed-loop": {
          "display_name": "Bucle Temporizado",
          "content": "El bucle `for` es una estructura realmente útil para repetir algo muchas veces rápidamente, o iterar sobre una lista de cosas, pero no sirve de mucho si quieres repetir algo más lentamente. Para los casos en los que quieras controlar la rapidez de la repetición, necesitarás un **Bucle Temporizado**.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop.png\" alt=\"timedLoop\" class=\"center\" style=\"width: 600px; margin: 25px auto;\">\n\n### Estructura de un Bucle Temporizado\n\nUn _Bucle Temporizado_ se compone en realidad de dos bloques:\n\n-   El bloque [`timedLoop()`(#64B5F6)][1], que utiliza dos entradas:\n    -   La entrada _ms_ determina cuántos milisegundos hay que esperar antes de repetir el bucle. El valor por defecto es 1000 milisegundos, o 1 segundo.\n    -   La entrada _callback_ es la función que se ejecutará cada vez que se repita el bucle.\n\n-   El bloque [`stopTimedLoop()`(#64B5F6)][2] que detiene _todos_ los bucles temporizados que se estén ejecutando.\n\n### Cómo funciona\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedloop_diagram.png\" alt=\"timedLoop diagram\" class=\"center\">\n\n[][0]\n\n1.  Todo este bloque es el Bucle Temporizado\n2.  Número de milisegundos a esperar después de cada repetición del bucle. 1000 milisegundos = 1 segundo.\n3.  La sección verde es nuestra función _callback_ es decir, el código que ejecutamos cada vez que se repite el bucle.\n4.  El bloque [`stopTimedLoop()`(#64B5F6)][3] indica a todos los _Bucles Temporizados_ en ejecución que dejen de ejecutarse. Ten en cuenta que cuando se llama a [`stopTimedLoop()`(#64B5F6)][4], el bucle temporizado no necesariamente se detendrá de inmediato, simplemente no se repetirá la próxima vez.\n\n[/][0]"
        },
        "csd-2022/update-screen-pattern": {
          "display_name": "El Patrón updateScreen()",
          "content": "| Nombre                   | Código (Bloque) | Código (Texto) |\n| ------------------------ | --------------- | -------------- |\n| El Patrón updateScreen() | [][0]           | [][1]          |\n\n## ¿Cómo funciona?\n\nMuchos proyectos de Laboratorio de Aplicaciones funcionan de la siguiente manera. \n\n1.  El usuario interactúa con un elemento de la pantalla (como pulsar un botón o escribir en un cuadro de texto). Esto desencadena un controlador de eventos.\n2.  El manejador de eventos cambia los valores almacenados en las variables.\n3.  La información de la pantalla se actualiza para reflejar el cambio de la variable.\n\nTípicamente cada uno de tus manejadores de eventos ([`onEvent`(#fff176)][2] bloques) incluirá código idéntico para el paso 3, actualizar la pantalla. Para evitar este problema, crea una única función llamada `updateScreen` que incluya el código para cambiar cada elemento de tu pantalla una vez que las variables hayan sido actualizadas.\n\nNormalmente querrás llamar a `updateScreen` dentro de cada manejador de eventos y también querrás llamarlo una vez al principio de tu programa. Esto asegura que siempre se utiliza el mismo código para actualizar la información que aparece en la pantalla."
        },
        "csd-2022/using-data-with-categorical-features": {
          "display_name": "Uso de Datos con Características Categóricas",
          "content": "## Análisis de Datos Categóricos\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/CatFeature_1.png\" width=\"75%\" />\n<p>\nAl pulsar sobre una columna con datos categóricos, puedes ver más información en el panel de la derecha del Laboratorio de Inteligencia Artificial\n</p>\n\n[][0]\n\n1.  Es el nombre de la columna seleccionada.\n2.  Descripción de la columna seleccionada. Puede darte más información sobre los datos de esta columna. Si los datos proceden de una encuesta, normalmente contendrá la pregunta que se hizo en la encuesta\n3.  Un gráfico de **Tabulación Cruzada** muestra cómo esta columna está relacionada con la etiqueta que estás tratando de predecir.\n4.  Un gráfico de **Barras** muestra cuántas veces aparece un determinado valor en el gráfico\n5.  Pulsa el botón \"Añadir característica\" para utilizar esta columna como una de las entradas de tu modelo de aprendizaje automático.\n\n[/][0]\n\n## Lectura de los Gráficos de Tabulación Cruzada\n\nEn el gráfico de tabulación cruzada, fíjate si la característica que has elegido tiene una fuerte relación con tu etiqueta. Los colores y los porcentajes te ayudarán: cuanto más se agrupen los datos en torno a un valor concreto, más útiles serán para el Bot de Inteligencia Artificial a la hora de tomar una decisión.\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px;\" src=\"https://curriculum.code.org/media/uploads/image_xbg0lmF.png\" width=\"30%\" />\n<p>\nEste gráfico muestra una fuerte relación entre la característica y la etiqueta. El 90% de las personas que dijeron que no al aderezo italiano también dijeron que no les gustaba su ensalada, lo cual es un patrón que el Bot de Inteligencia Artificial puede notar. Del mismo modo, el 89% de las personas que dijeron que sí al aderezo italiano también dijeron que les gustaba su ensalada.</p>\n<p>\nEsto significa que si el Bot de Inteligencia Artificial te pregunta \"¿le has puesto aliño italiano a la ensalada?\", tiene muchas posibilidades de predecir si te ha gustado o no la ensalada basándose en tu respuesta.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:right; margin-right: 10px; margin-left: 10px;\" src=\"https://curriculum.code.org/media/uploads/image_6FVwl65.png\" width=\"30%\" />\n<p>\nEste gráfico <strong>no</strong> muestra una fuerte relación entre la característica y la etiqueta. Los datos muestran que cuando a la gente le ponían pollo en la ensalada, a alrededor del 50% no le gustaba la ensalada y al otro 50% sí. Esto es básicamente lo mismo que lanzar una moneda al aire. Este tipo de relación puede confundir al Bot de Inteligencia Artificial, ya que ninguna de las respuestas muestra una fuerte conexión entre sí.</p>\n<p>\nEsto significa que si el Bot de Inteligencia Artificial te pregunta \"¿Tenías pollo en la ensalada?\", las posibilidades de que también prediga si te gusta o no la ensalada son las mismas que lanzar una moneda al aire.\n</p>\n</div>\n\n## Vídeo\n\n(Abre YouTube en una pestaña nueva)\n\n[undefined][1]"
        },
        "csd-2022/using-data-with-numerical-features": {
          "display_name": "Uso de Datos con Características Numéricas",
          "content": "## Análisis de Datos Numéricos\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/NumFeature_1.png\" width=\"75%\" />\n<p>\nAl pulsar sobre una columna con datos numéricos, puedes ver más información en el panel de la derecha de Laboratorio de Inteligencia Artificial\n</p>\n\n[][0]\n\n1.  Es el nombre de la columna seleccionada.\n2.  Descripción de la columna seleccionada. Puede darte más información sobre los datos de esta columna. Si los datos proceden de una encuesta, normalmente contendrá la pregunta que se hizo en la encuesta\n3.  Un **Gráfico de Dispersión** muestra cómo se relaciona esta columna con la etiqueta que estás tratando de predecir.\n4.  Un **Gráfico de Rango** muestra los valores mínimo y máximo en esta columna, y el rango entre ellos. Esto puede ser útil para identificar si hay un error en tus datos, como un valor accidentalmente demasiado grande o demasiado pequeño.\n5.  Pulsa el botón \"Añadir función\" para utilizar esta columna como una de las entradas de tu modelo de aprendizaje automático.\n\n[/][0]\n\n## Lectura de Gráficos de Dispersión\n\nEn el Gráfico de Dispersión, fíjate si la característica que elegiste tiene una fuerte relación con tu etiqueta. Puedes ver si los puntos siguen un patrón que te permita hacer una afirmación del tipo \"Cuando la característica es... eso significa que la etiqueta es...\". Por ejemplo:\n\n-   Cuando la temperatura es _más baja_, el número de murciélagos en el cielo es _más alto_.\n-   Cuando el precio de las entradas es _más alto_, la asistencia a los partidos es _más baja_.\n\nEste tipo de patrones facilitan las predicciones del Bot de Inteligencia Artificial.\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: solid 2px black\" src=\"https://curriculum.code.org/media/uploads/image_PxfTjEs.png\" width=\"50%\" />\n<p>\nEste gráfico muestra una fuerte relación entre la característica de la parte inferior del gráfico y la etiqueta del lado del gráfico. \n-   Cuando hay un número bajo de antílopes, también hay un número bajo de leones.\n-   Cuando hay un número elevado de antílopes, también hay un número elevado de leones.\n<p>\nEsto significa que si el Bot de Inteligencia Artificial sabe cuántos antílopes hay en libertad, tiene muchas posibilidades de predecir cuántos leones hay también en libertad.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:right; margin-right: 10px; margin-left: 10px; border: solid 2px black\" src=\"https://curriculum.code.org/media/uploads/image_LtrzSMX.png\" width=\"50%\" />\n<p>\nEste gráfico <strong>no</strong> muestra una fuerte relación entre la característica y la etiqueta. Cuando se mira qué día del mes es, hay una amplia gama en el número de leones que se pueden ver en ese día en particular. Un gráfico mejor tendría todos los puntos agrupados más juntos para un día concreto del mes.\n<p>\nEsto significa que si el Bot de Inteligencia Artificial sabe qué día del mes es, eso no ayuda a determinar cuántos leones pueden haber estado en libertad ese día.\n</p>\n</div>\n\n## Vídeo\n\n(Abre YouTube en una pestaña nueva)\n\n[undefined][1]"
        },
        "csd-2022/variable-with-string-concatenation-pattern": {
          "display_name": "Variable con Patrón de Concatenación de Cadena",
          "content": "| Nombre                                 | Código (Bloque) | Código (Texto)                                                                                                         |\n| -------------------------------------- | --------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| Concatenación de Cadenas con Variables | [][0]           | `var myString = \"rock\";` <br> `var myOtherString = \"roll\";` <br><br> `var myStory = myString + \" y \" + myOtherString;` |\n\nEl modelo podría leerse así:\n\nLa variable \"miCadena\" obtiene el valor \"rock\". La variable `myOtherString` obtiene el valor `\"roll\"`. La variable `myStory` evalúa la expresión `myString + \" \" and \" + myOtherString` a `\"rock and roll\"`. Ahora \"rock and roll\" está almacenado en \"miHistoria\".\n\n## ¿Cómo funciona?\n\nLas cadenas son cualquier carácter, símbolo o número que esté entre comillas. \n\n`\"Mi mejor amigo\"`\n<br>\n`\"243\"`\n<br>\n`\"¡Wow!\"`\n\nLa concatenación se utiliza para combinar una cadena con otra cadena o número. Estas cadenas o números pueden incluso almacenarse en variables. \n\nPara concatenar utiliza el signo `+` entre valores.\n\n`\"Arriba\" + \" y \" + \"abajo\"`\n\nPara utilizar la **Variable con Patrón de  Concatenación de Cadenas** se define una variable que almacena el valor de una cadena combinada con otra cadena o número. \n\n## Ejemplos\n\n[][1]\n\nLa variable `myName` obtiene el valor `\"Santi\"`. La variable `miEdad` obtiene el valor `16`. La variable \"declaración\" evalúa la expresión \"miNombre + \" tiene \" + miEdad + \" años\" a \"Santi tiene 16 años\". Santi tiene 16 años\" se almacena en la variable \"declaración\" y se imprime en la consola.\n\n[][2]\n\nLa variable `puntuación` obtiene el valor `0`. La variable `vidas` obtiene el valor `3`. La variable `estadísticas` evalúa la expresión `\"Puntuación: \" + puntuación + \" Vidas: \" + vidas` a `\"Puntuación: 0 Vidas: 3\"`. El valor `\"Puntuación: 0 Vidas: 3\"` se almacena en la variable `estadísticas` que luego se imprime en la consola.\n\n[][3]\n\nLas variables se actualizan cada vez que se pulsan los botones utilizando el [Patrón Contador con Evento][4]. La variable `estadísticas` obtiene los valores de las variables `puntuación` y `vidas` y los concatena con `\"Puntuación:\"` y `\"Vidas: \"` antes de actualizar la visualización en pantalla."
        },
        "csd-2022/variables": {
          "display_name": "Variables",
          "content": "Una variable te permite almacenar un único valor en la memoria de tu ordenador con un nombre descriptivo. Usar variables te permite referirte fácilmente al mismo valor muchas veces en tu programa o guardar un número al que te gustaría referirte más tarde.\n\n## Creando Variables\n\n[][0]\n\nEl comando `var` creará una nueva variable con la etiqueta que le des. Esta variable tiene la etiqueta `size`.\n\n## Asignación de Valores\n\n[][1]\n\nEl operador de asignación `=` asignará un nuevo valor a tu variable. Este comando asigna 100 a la variable `tamaño`. La variable siempre debe estar en el lado izquierdo. Puedes leer este comando como \"tamaño obtiene 100\" ya que tamaño obtiene un nuevo valor de 100. Cualquier valor anterior que se le haya asignado se pierde para siempre. Cualquier valor anterior que se le haya asignado se pierde para siempre.\n\n## Usando un Valor\n\n[][2]\n\nPara utilizar el valor de una variable, coloca su etiqueta en el lugar de tu código en el que quieras utilizarla. Este comando utiliza el valor de `size` para establecer la anchura y la altura de la elipse.\n\n## Initializing\n\n[][3]\n\nNormalmente querrás dar a una variable su primer valor (o \"inicial\") de inmediato. Puedes inicializar una variable en un solo comando combinando los comandos `var` y `=`.\n\nDespués de inicializar una variable no necesitas usar el comando `var` para asignarle un nuevo valor. Sólo tienes que utilizar `=` normalmente.\n\n[][4]"
        },
        "csd-2022/velocity": {
          "display_name": "Velocidad",
          "content": "Los bloques de velocidad ([`velocityX`(#f78183)][1] y [`velocityY`(#f78183)][2]), indican a los sprites la velocidad a la que deben moverse en una dirección determinada, tal y como hacía antes el patrón contador.  Ocultando el código del patrón contador dentro de un bloque, puedes construir programas aún más complejos.\n\n# Movimiento con Velocidad\n\nEl código que usa el patrón contador está a la izquierda, y el código que usan los bloques de velocidad está a la derecha.\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_code.png\" style=\"float: left;\">\n<img src=\"https://curriculum.code.org/media/uploads/velocity.png\" style=\"width: 350px; float: right;\">\n\n[][0]\n\nCon [`velocityX`(#f78183)][3] y [`velocityY`(#f78183)][4], puedes establecer las velocidades de los sprites cuando los creas por primera vez, pero ambos programas harán que los sprites se muevan como en la imagen de abajo.\n\n[/][0]\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_pattern.gif\" style=\"float: left;\">"
        },
        "csd-2022/velocity-and-the-counter-pattern": {
          "display_name": "Velocidad y patrón del contador",
          "content": "Puedes usar las propiedades de velocidad de un sprite con el patrón contador para cambiar la velocidad de un sprite durante el programa. Esto hace que el sprite se acelere o se ralentice.\n\n## Acelerar\n\nPara acelerar un sprite que tiene una velocidad **positiva**, necesitas **añadir** a la velocidad dentro del patrón contador.  Para acelerar un sprite con una velocidad **negativa**, necesitas **restar** de la velocidad dentro del patrón contador.\n\n### Subiendo\n\n<img src=\"http://curriculum.code.org/media/uploads/accup.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nflybot.velocityY = -1;\n\nfunction draw() {\n  background(\"black\");\n  flybot.velocityY = flybot.velocityY - 1;\n  drawSprites(); \n}\n\n</pre>\n\n### Bajando\n\n<img src=\"http://curriculum.code.org/media/uploads/accdown.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nbone.velocityY = 1;\n\nfunction draw() {\n  background(\"black\");\n  bone.velocityY = bone.velocityY + 1;\n  drawSprites();\n}\n\n</pre>\n\n### Yendo a la izquierda\n\n<img src=\"http://curriculum.code.org/media/uploads/accleft.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\ncart.velocityX = -1;\n\nfunction draw() {\n  background(\"black\");\n  cart.velocityX = cart.velocityX - 1;\n  drawSprites();\n}\n\n</pre>\n\n### Yendo a la derecha\n\n<img src=\"http://curriculum.code.org/media/uploads/accright.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nrobot.velocityX = 1;\n\nfunction draw() {\n  background(\"black\");\n  robot.velocityX = robot.velocityX + 1;\n  drawSprites();\n}\n\n</pre>\n\n## Ralentizar\n\nPara ralentizar un sprite que tiene una velocidad **positiva**, necesitas **restar** de la velocidad dentro del patrón contador.  Para ralentizar un sprite con una velocidad **negativa**, tienes que **añadir** a la velocidad dentro del patrón contador.  Una vez que un sprite se ha ralentizado hasta detenerse, empezará a acelerar en la otra dirección.  Esto puede hacer que parezca que tu sprite está saltando o ha sido lanzado por los aires.\n\n### Subiendo\n\n<img src=\"http://curriculum.code.org/media/uploads/decup.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nbone.velocityY = -25;\n\nfunction draw() {\n  background(\"black\");\n  bone.velocityY = bone.velocityY + 1;\n  drawSprites();\n}\n\n</pre>\n\n### Yendo a la derecha\n\n<img src=\"http://curriculum.code.org/media/uploads/decright.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\ncart.velocityX = 25;\n\nfunction draw() {\n  background(\"black\");\n  cart.velocityX = cart.velocityX - 1;\n  drawSprites();\n}\n\n</pre>\n\n## Detener tu Sprite\n\nSi quieres que tu sprite se detenga, en lugar de empezar a moverse en la otra dirección, tendrás que utilizar una condicional para comprobar que el sprite se está moviendo en la dirección correcta antes de utilizar el patrón contador, y detener el sprite si no es así.\n\n<img src=\"http://curriculum.code.org/media/uploads/decdown.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nplane.velocityY = 25;\n\nfunction draw() {\n  background(\"black\");\n  if (plane.velocityY > 0) {\n    plane.velocityY = plane.velocityY - 1;\n  }\n  drawSprites();\n}\n\n</pre>"
        },
        "csd-2022/web-lab": {
          "display_name": "Web Lab",
          "content": "# Laboratorio Web\n\nPara ayudarte a tener éxito cuando utilices nuestra herramienta, encontrarás algunas preguntas comunes que los usuarios han tenido con el Laboratorio Web.\n\n## Información General\n\n### Organización de Archivos\n\nObservarás que los archivos están codificados por colores según su tipo y tienen nuevos iconos. Esperamos que esto facilite distinguir rápidamente entre un archivo CSS, un archivo HTML o una imagen.\n\n<img src=\"https://images.code.org/64255c7e081f479a042e9e23e5bb1cf2-fileOrg.png\" style=\"width:100px\">\n\n### Selector de Código\n\nAl añadir colores dentro de un archivo CSS, observarás un icono morado que aparece al hacer clic en el nombre de un color. Este icono abre un widget selector de color, que facilita la selección de nuevos colores para tu sitio web. Puedes verlo en acción a continuación.\n\n<img src=\"https://images.code.org/c54abfd05f80fee79cfd9489bd1bcb59-filter.gif\" style=\"width:400px\">\n\n### Metadatos y Filtros de Imagen\n\nDespués de subir una imagen, puedes ver información adicional sobre la imagen, como sus dimensiones, el código de inicio para utilizar la imagen en tu proyecto y los colores destacados que aparecen en la imagen. También existe una función muy interesante para aplicar filtros a la imagen directamente desde el Laboratorio Web. Puedes verlos en acción a continuación.\n\n<img src=\"https://images.code.org/0aae6fadac85f866dbf88c7beca6f541-Image.gif\" style=\"width:400px\">\n\n### Límites de Tamaño del Proyecto\n\nEl Laboratorio Web tiene ahora un límite para el tamaño de los proyectos: 20 mb como máximo. Puedes hacer un seguimiento del tamaño de tus proyectos utilizando el medidor de progreso en la parte superior de cada proyecto. La mayoría de los proyectos se mantendrán por debajo de este límite, a menos que utilices muchas imágenes. Si es así, es posible que quieras utilizar un programa de alojamiento de imágenes externo.\n\n<img src=\"https://images.code.org/8e88dc0ed5bdab512f7a02a39c7ac7cf-projectSize.png\" style=\"width:200px\">\n\n## PREGUNTAS FRECUENTES\n\n1.  \\*\\*¿Por qué el HTML parece funcionar incluso cuando está roto?\n    -   HTML es leído por tu navegador web para generar páginas web. Como la gente suele cometer pequeños errores al escribir sus páginas web, los navegadores están programados para hacer una \"mejor suposición\" de lo que pretendías hacer. A veces, los navegadores están programados para hacer diferentes suposiciones. La única manera de asegurarse de que su código se ve como usted pretende es asegurarse de que siempre está utilizando las etiquetas correctamente.\n2.  \\*\\*¿Por qué a veces el código se vuelve rosa?\n    -   El Laboratorio Web está programado para detectar automáticamente algunos errores en HTML. Cuando detecta un error, el código se vuelve rosa. El error puede estar en rosa, o puede estar en algún lugar antes del código rosa. Tendrás que depurar cuidadosamente para encontrar el error.\n3.  **¿Cómo cambio entre archivos?**\n    -   Pulsa en el nombre del archivo que quieres mirar en el menú de la parte izquierda de la pantalla.\n4.  **¿Cómo cambio el nombre de un fichero?**\n    -   Para cambiar el nombre de un archivo, puedes pulsar con el botón derecho del ratón (o pulsar Control y hacer clic) en el nombre del archivo y elegir la opción \"Cambiar nombre\". Esto te permitirá escribir un nuevo nombre de archivo. También puedes cambiar el nombre de un archivo pulsando sobre él cuando ya esté resaltado."
        },
        "csd-2022/when-to-make-a-function": {
          "display_name": "Cuándo hacer una función",
          "content": "Una pregunta importante para los nuevos programadores es \"¿Cuándo debo decidirme a hacer una función?\". En general, cuanto antes te des cuenta de que necesitas una función, mejor. Esta es una habilidad que mejorarás con la práctica. **Para el final de este curso deberias aspirar a estar en las filas Durante o Antes.**\n\n| Cuando creas funciones | Descripción                                                                                                                                                                                                               | Comentarios                                                                                                                                                                                                                                                                   |\n| :--------------------: | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|          Nunca         | Nunca creas funciones                                                                                                                                                                                                     | Tu código será difícil de leer y depurar y tendrá mucho código repetido. Intenta pasar al menos al paso \"Después\".                                                                                                                                                            |\n|         Después        | Escribes todo tu programa sin funciones. Una vez que hayas terminado, busca código repetido y muévelo a una función.                                                                                                      | Ahora tu código es mucho más fácil de leer y depurar. También estás mejorando a la hora de ver cómo está organizado tu programa. A medida que te familiarices, intenta pasar a \"Durante\" o \"Antes\".                                                                           |\n|         Durante        | A medida que escribes tu código te das cuenta cuando estás a punto de reescribir código que ya escribiste en otra parte de tu programa. Antes de seguir adelante declaras una función y llamas a esa función en su lugar. | Tienes una buena comprensión de tu programa y eres capaz de mantenerlo organizado a medida que lo desarrollas. A ver si a veces puedes pasar al \"Antes\".                                                                                                                      |\n|          Antes         | Antes de escribir tu programa haces un plan e identificas los lugares en los que es probable que utilices código repetido. Creas tu función al principio.                                                                 | Este nivel refleja una gran comprensión de cómo se va a diseñar el programa. Casi puedes \"verlo en tu cabeza\" antes de empezar a escribir. Dicho esto, no pasa nada si a veces te das cuenta de que necesitas una función mientras programas y trabajas en la fase \"Durante\". |"
        },
        "csd-2022/which-type-of-chart": {
          "display_name": "¿Qué tipo de gráfico?",
          "content": "[][0]"
        }
      }
    }
  }
}