"pt-BR":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Oi, eu sou um artista. Você pode escrever códigos
        para me fazer desenhar quase qualquer coisa. Use alguns blocos para me fazer
        desenhar sobre as linhas cinzas na imagem. (Cada linha tem o comprimento de
        100 pixels)
      2-3 Artist 11_instruction: |
        Faça uma borda na placa de pare criando um octógono
        com os lados medindo 100 pixels. \r
        \r
      2-3 Artist 12_instruction: |-
        Crie um círculo para terminar o globo ocular!\r
        \r
        Se
        o artista virar 1 grau com cada laço, quantas vezes você precisará repetir
        o código para desenhar um círculo? 180? 360? 500?
      2-3 Artist 2 new_instruction: "Esta casa tem uma parede inacabada. Cada lado\ntem
        100 pixels de comprimento, mas a parede inacabada tem apenas 50. Complete
        a parede. "
      2-3 Artist 2_instruction: "Esta casa tem uma parede inacabada. Cada lado tem\n100
        pixels de comprimento, mas a parede inacabada tem apenas 50. Complete a parede. "
      2-3 Artist 3.4_instruction: |-
        O bloco "pule" move o artista sem desenhar.
        Desenhe a linha tracejada usando os blocos "pule para a frente" e "avance".
        Cada linha tem 50 pixels de comprimento.
      2-3 Artist 3_instruction: Esse chapéu tem 100 pixels de altura. Desenhe um chapéu
        que tenha 70 pixels a menos.
      2-3 Artist 3new_instruction: |-
        O chapéu vermelho tem 100 pixels de altura. Termine o desenho
        de um chapéu preto que seja 70 pixels menor. \r
        (Observação: a largura de cada chapéu é
        de 50 pixels).
      2-3 Artist 4_instruction: Ajude-me a completar a casa para o gato.
      2-3 Artist 5_instruction: |-
        Substitua esse código por um bloco "repita vezes"
        para desenhar a mesma casa usando apenas 3 blocos.
      2-3 Artist 6_instruction: 'Essa casa precisa de um telhado! Desenhe o triângulo.
        Dica: todos os 3 lados têm o mesmo comprimento.'
      2-3 Artist 7_instruction: "Termine de desenhar o último conjunto de janelas
        da escola\npara que todos na sala de aula possam ver a parte de fora. Os lados
        de cada janela quadrada\nmedem 25 pixels de comprimento. "
      2-3 Artist 8_instruction: |-
        Complete os quartos para cada animal dividindo
        o retângulo em 2 quadrados de mesmo tamanho. O retângulo tem 200 pixels de largura
        e 100 pixels de altura. Há várias maneiras diferentes de resolver este desafio, então,
        divirta-se!
      2-3 Artist 9 NEW_instruction: Termine esta pipa
      2-3 Artist 9 REPLACEMENT_instruction: Conclua o desenho destas escadas!
      2-3 Artist 9_instruction: Termine esta pipa
      2-3 Artist Assessment 1_instruction: |-
        Avaliação: termine de desenhar o último dente.
        Ele tem 25 pixels de largura e 25 pixels de altura.
      2-3 Artist Debugging 1_instruction: |-
        Este chapéu precisa ter apenas 50 pixels de largura. Você
        consegue arrumá-lo?
      2-3 Artist Debugging 10_instruction: |-
        O controlador de direção do controle do meu jogo
        é muito estreito. \r
        \r
        Você consegur aumentar a largura dele em 10 pixels?\r
        \r
        Execute
        o código primeiro para ver o que está errado.
      2-3 Artist Debugging 11_instruction: |-
        Meu floco de neve está se desfazendo!\r
        \r
        Você
        consegue descobrir o que há de errado?
      2-3 Artist Debugging 12_instruction: Eu devo adicionar uma onda do mar nessa
        cena. Você pode me ajudar?
      2-3 Artist Debugging 2_instruction: |-
        O código dos bigodes do gato está errado.
        \r
        \r
        Corrija o código para desenhar os bigodes, todos com o mesmo tamanho.
      2-3 Artist Debugging 3_instruction: |-
        Meu barco tem um buraco! \r
        \r
        O que você
        precisa corrigir para unir as extremidades?
      2-3 Artist Debugging 4_instruction: |-
        Qual é a imagem que estamos tentando
        desenhar? Termine de conectar os pontos usando as linhas e ângulos apropriados.
      2-3 Artist Debugging 5_instruction: |-
        O código para a perna e
        para o pé está errado. \r
        \r
        Você consegue corrigi-lo?
      2-3 Artist Debugging 6_instruction: |-
        Parece que estou sentado em uma cadeira
        sem uma perna!\r
        \r
        Edite o código para desenhar a última perna.
      2-3 Artist Debugging 7_instruction: |-
        Parece que o C no código está desenhado ao contrário!\r
        \r
        Você
        consegue fazê-lo parecer com um C de novo?
      2-3 Artist Debugging 8_instruction: |-
        Meu professor diz que eu devo terminar o que
        comecei!\r
        \r
        Ajude-me a terminar meu cata-vento. Você consegue descobrir o que há de errado?
      2-3 Artist Debugging 9_instruction: |-
        Algo está estranho!\r
        \r
        O código deste
        caule está errado. Você consegue descobrir como fazer o artista traçar o
        caule da maneira certa?
      2-3 Artist Debugging Assessment 1_instruction: |-
        Avaliação: Por que este quadrado
        acaba ficando com 75 pixels a menos em cada lado?\r
        \r
        Onde está o erro
        do código?
      2-3 Artist Free Play_instruction: Atividade livre! Desenhe o que você quiser.
      2-3 Artist Functions 1 a_instruction: |-
        "Mim artista zumbi. Mim ama desenhar!" \r
        \r
        Ajude
        o zumbi a desenhar os óculos quadrados. \r
        \r
        A haste entre as lentes é
        25 pixels menor que a largura dos quadrados, que é igual a 100 pixels.
      2-3 Artist Functions 1_instruction: |-
        "Mim artista zumbi. Mim ama desenhar!" \r
        \r
        Ajude
        o zumbi a desenhar os óculos quadrados. \r
        \r
        A haste entre as lentes é
        25 pixels menor que a largura dos quadrados, que é igual a 100 pixels.
      2-3 Artist Functions 10_instruction: |-
        Atividade livre: Aqui temos duas funções, uma
        para desenhar uma engrenagem grande e outra para desenhar uma engrenagem pequena. Use-as para desenhar o interior
        de uma máquina!
      2-3 Artist Functions 11 a_instruction: |-
        We've renamed the `draw a square`
        function to `draw a hexagon`, but it's still giving us squares! Can you modify
        the `draw a hexagon` function to draw a hexagon with 50 pixel sides? \r
        \r
        Draw
        the image using the new function!
      2-3 Artist Functions 11.5 a_instruction: |-
        Aqui está a mesma função
        "Desenhe um hexágono". \r
        \r
        O que acontece se você repetir o programa principal 6 vezes, virando
        60 graus a cada repetição?
      2-3 Artist Functions 11.5_instruction: |-
        Aqui está a mesma função
        "Desenhe um hexágono". \r
        \r
        O que acontece se você repetir o programa principal 6 vezes, virando
        60 graus a cada repetição?
      2-3 Artist Functions 11_instruction: |-
        Renomeamos a função "desenhe um quadrado"
        como "desenhe um hexágono", mas ela ainda desenha apenas quadrados! Você consegue mudar a
        função "desenhe um hexágono" para desenhar um hexágono com lados de 50 pixels? \r
        \r
        Desenhe
        a imagem usando a nova função!
      2-3 Artist Functions 12 Mike_instruction: |-
        Funções são ótimas para desenhar
        coisas complexas várias vezes. \r
        \r
        Você consegue usar a função "desenhe uma flor"
        para preencher o resto do canteiro de plantas?\r
        As plantas estão todas separadas por uma distância de 100 pixels.
      2-3 Artist Functions 12 a_instruction: |-
        Funções são ótimas para desenhar
        coisas complexas várias vezes. \r
        \r
        Você consegue usar a função "desenhe uma flor"
        para preencher o resto do canteiro de plantas?\r
        As plantas estão todas separadas por uma distância de 100 pixels.
      2-3 Artist Functions 12_instruction: |-
        Funções são ótimas para desenhar
        coisas complexas várias vezes. \r
        \r
        Você consegue usar a função "desenhe uma flor"
        para preencher o resto do canteiro de plantas?\r
        As plantas estão todas separadas por uma distância de 100 pixels.
      2-3 Artist Functions 13_instruction: |-
        Fornecemos quatro funções para você.
        Use-as da forma que quiser dentro de um ou mais laços para criar imagens que
        você pode compartilhar com seus amigos. Pressione "Executar" para ver um exemplo.
      2-3 Artist Functions 2 a_instruction: "Use the small green `draw a square`\nblock
        to call this new function and create the glasses. "
      2-3 Artist Functions 2_instruction: |-
        As funções permitem que você defina novos blocos! \r
        \r
        Movemos
        os blocos necessários para desenhar um quadrado para dentro de uma função chamada "desenhe
        um quadrado". Desta vez, use a função "desenhe um quadrado" para criar os óculos.
        \r
        \r
        Os quadrados estão separados por uma distância de 75 pixels.
      2-3 Artist Functions 3 a_instruction: |-
        Edit the "draw a square" function
        to draw glasses with frames that are 115px on each side. \r
        \r
        The squares
        are now 45 pixels apart.
      2-3 Artist Functions 3_instruction: |-
        Edite a função para desenhar um quadrado com
        lados de 115 pixels, para desenhar os óculos maiores. \r
        \r
        Agora, os quadrados
        estão separados por 45 pixels.
      2-3 Artist Functions 4 a_instruction: |-
        Now, put the function inside of a loop
        and add an extra turn to draw these three squares.
      2-3 Artist Functions 4_instruction: |-
        Agora coloque a função dentro de um laço
        para desenhar esses três quadrados.
      2-3 Artist Functions 7_instruction: |-
        Use a função "desenhe uma casa" para desenhar
        duas casas usando dois parâmetros diferentes. (Dica: a primeira casa tem 100 pixels).
      2-3 Artist Functions 9_instruction: |-
        Atividade livre: Esta é uma função para flocos de neve.
        Experimente usá-la para criar uma cena de inverno! Essa é uma atividade livre, então
        não há desafios para resolver. Divirta-se!
      2-3 Artist Loops 1_instruction: |-
        Você consegue fazer um hexágono com lados de
        100 pixels de comprimento para terminar a célula? Lembre-se, isso significa que você só vai
        precisar virar 60 graus!
      2-3 Artist Loops 10_instruction: |-
        O que acontece com o design quando fazemos nossa
        etapa final com metade do comprimento?
      2-3 Artist Loops 11_instruction: |-
        Agora, vamos colocar *outro* laço em torno de toda
        a criação! Não se esqueça de adicionar um ângulo ao final do laço externo.
      2-3 Artist Loops 2_instruction: |-
        Agora, use um bloco "repita" para transformar a célula em uma
        concha.
      2-3 Artist Loops 4_instruction: |-
        Quer ver o que acontece quando repetimos essa
        forma várias vezes usando um laço?
      2-3 Artist Loops 5_instruction: |-
        Agora, vamos fazer uma pequena alteração no laço
        e ver como nossas imagens ficam diferentes.
      2-3 Artist Loops 6_instruction: |-
        Adicione mais um movimento e outra ação de virar dentro
        do laço e veja como seu design muda.
      2-3 Artist Loops 7_instruction: "Podemos usar laços para criar todos os tipos
        de polígonos. Você \nconsegue criar um losango dentro desse hexágono?"
      2-3 Artist Loops 8_instruction: Vamos colocar ambos os elementos dentro de um
        laço.
      2-3 Artist Loops 9_instruction: "Vamos repetir os mesmos elementos, mas \nagora
        vamos adicionar alguma distância entre eles.\\r\nUse o mesmo código usado
        \nanteriormente, mas adicione um passo à frente no final do laço externo."
      2-3 Artist Loops New 1_instruction: |-
        Vamos desenhar a cabeça do robô! Você pode
        fazer um quadrado com lados de 100 pixels?
      2-3 Artist Loops New 10_instruction: |-
        Agora vamos conectar um monte de "V"
        em um laço.
      2-3 Artist Loops New 11_instruction: |-
        Reconstrua o código do último desafio,
        mas, dessa vez, adicione uma ação de virar à esquerda em 30 graus dentro do laço. Agora repita
        a ação 24 vezes, em vez de 8.
      2-3 Artist Loops New 12_instruction: 'Desenhe um diamante com lados de 100 pixels.

'
      2-3 Artist Loops New 13_instruction: |-
        Você vai conhecer alguns códigos
        (em cinza) para fazer um diamante. \r
        \r
        Repita o código cinza para criar um padrão
        divertido!
      2-3 Artist Loops New 14_instruction: |-
        Brinque um pouco com o código do diamante
        e veja que outros padrões você consegue fazer. Tente mudar quantos graus você
        vira e o número de repetições.
      2-3 Artist Loops New 15_instruction: Agora desenhe o que você quiser!
      2-3 Artist Loops New 2_instruction: |-
        Aqui temos o mesmo desafio que acabamos de resolver,
        mas só podemos usar os blocos "avance" e "vire"
        desta vez.\r
        \r
        Você pode usar um bloco "repita" para resolver este desafio?
      2-3 Artist Loops New 9_instruction: |-
        Desenhe um V simples (com ambos os lados com
        50 pixels) para completar a seta.
      2-3 Artist Match Hex Pic_instruction: 'Correspondência: ajude a terminar o hexágono.'
      2-3 Artist Match Rho Pic_instruction: 'Correspondência: termine o código que
        falta.'
      2-3 Artist Match Sq Pic_instruction: 'Correspondência: complete o código que
        falta'
      2-3 Artist Match Tri pic_instruction: 'Correspondência: preencha o código que
        falta.'
      2-3 Artist Nested Loops 1_instruction: |-
        Coloque um bloco "repita" ao redor de toda
        esta pilha de código para desenhar o padrão.
      2-3 Artist Nested Loops 10_instruction: |-
        Repita este código 12 vezes para completar
        o padrão.
      2-3 Artist Nested Loops 11_instruction: |-
        Repita este código 4 vezes para completar
        o padrão, vire 90 graus após cada círculo.
      2-3 Artist Nested Loops 12_instruction: |-
        Repita este código 12 vezes para completar
        as espirais.
      2-3 Artist Nested Loops 2_instruction: |-
        Agora, repita o triângulo 6 vezes. \r
        \r
        Depois
        de cada triângulo, você precisa virar 60 graus antes de desenhar o próximo.
      2-3 Artist Nested Loops 3_instruction: |-
        Você vai precisar repetir o triângulo 12
        vezes para desenhar este padrão. \r
        \r
        Divida o número de graus em um círculo
        (360) pelo número de formas que você está desenhando (12) para descobrir quanto virar
        depois de cada forma.
      2-3 Artist Nested Loops 4_instruction: |-
        Repita este diamante 12 vezes para desenhar
        uma flor!\r
        \r
        Observação: vamos usar o mesmo ângulo para repetir 12 diamantes,
        como fizemos com os 12 triângulos.  \r
        Quanto você precisa virar depois de cada forma?
      2-3 Artist Nested Loops 5_instruction: |-
        Preencha as janelas deste edifício com
        um laço aninhado. \r
        \r
        As janelas têm 20 pixels de comprimento e são separadas por 20 pixels.
      2-3 Artist Nested Loops 6_instruction: |-
        Esse dinossauro tem 8 espinhos ao longo
        de sua cauda.\r
        Cada espinho tem 30 pixels de comprimento. Repita o triângulo 8 vezes, mas
        lembre-se de saltar para a frente depois de cada um!
      2-3 Artist Nested Loops 7_instruction: |-
        Repita esse triângulo 10 vezes para desenhar
        o Sol. \r
        \r
        Você vai precisar mover e virar depois de cada triângulo. \r
        \r
        Você
        pode descobrir quanto virar dividindo o número de graus em um círculo
        pelo número de triângulos que o compõem.
      2-3 Artist Nested Loops 8_instruction: |-
        Agora vamos adicionar um pouco de grama à imagem.
        \r
        \r
        Cada tufo de grama é separado por 50 pixels.
      2-3 Artist Nested Loops 9_instruction: |-
        Vamos terminar essa imagem adicionando
        uma flor. \r
        \r
        Repita o diamante 12 vezes para desenhar a flor.
      2-3 Artist Nested Loops Free Play_instruction: |-
        Atividade livre. Desenhe algo legal
        com laços aninhados.
      2-3 Bee Conditionals 1_instruction: |-
        Olá! Eu sou uma abelha. Ajude-me a coletar o néctar
        da flor.
      2-3 Bee Conditionals 10_instruction: |
        As flores roxas podem ter 1 ou 0 néctar.
        Tenha cuidado para não coletar néctar de uma flor roxa se ela não
        tiver néctar.\r
      2-3 Bee Conditionals 11_instruction: "O que será que tem por aí!\\r\n\\r\nAjude-me\na
        voar pelo jardim e coletar o néctar apenas das flores que têm\nnéctar para
        oferecer. "
      2-3 Bee Conditionals 12_instruction: |-
        Ajude-me a encontrar todo o néctar usando
        o menor número possível de blocos!
      2-3 Bee Conditionals 13_instruction: |-
        Há muita coisa acontecendo por aqui!\r
        \r
        Use
        o que você aprendeu para coletar todo o néctar e, então, produza o mel.
      2-3 Bee Conditionals 14_instruction: |-
        Vamos unir todas as informações!\r
        \r
        Use
        o que você aprendeu para me ajudar a coletar néctar apenas das flores que têm
        néctar para oferecer, usando o menor número possível de blocos. Não se esqueça de produzir o mel para terminar.
      2-3 Bee Conditionals 15_instruction: |-
        Este padrão de degrau deve ser familiar.  \r
        \r
        Você
        consegue coletar néctar apenas das flores que têm néctar para oferecer, usando o menor número de
        blocos possível?
      2-3 Bee Conditionals 2_instruction: |-
        Sou uma abelha faminta! \r
        Ajude-me a coletar
        todo o néctar das flores usando o menor número possível de blocos.
      2-3 Bee Conditionals 3_instruction: "Olhe só todo esse néctar!\\r\n\\r\nAjude-me\na
        coletar todo o néctar e produzir mel usando o menor número possível de blocos.
        \ "
      2-3 Bee Conditionals 4_instruction: |-
        Ajude-me a coletar todo o néctar das
        flores e a produzir todo o mel.
      2-3 Bee Conditionals 5_instruction: |-
        Tenha cuidado para não coletar néctar das
        flores roxas que não o têm. \r
        Primeiro, veja se o néctar
        é igual a 1 usando o bloco "se néctar".
      2-3 Bee Conditionals 6_instruction: |-
        Verifique essa flor com um bloco "se"
        para ver se há algum néctar disponível.
      2-3 Bee Conditionals 7_instruction: |-
        Colete o néctar de cada flor, apenas se
        ela tiver néctar disponível.
      2-3 Bee Conditionals 8_instruction: |-
        Este campo tem flores vermelhas e roxas.
        As flores vermelhas têm uma quantidade de néctar conhecida, mas o néctar das flores roxas é desconhecido.
        Colete todo o néctar.
      2-3 Bee Conditionals 9_instruction: Colete todo o néctar de cada flor.
      2-3 Bee Conditionals Assessment 1_instruction: |-
        Avaliação: Colete todo o
        néctar. Tenha cuidado para não coletar néctar das flores roxas que
        não o tiverem.
      2-3 Bee Debugging 1_instruction: |-
        Esses blocos estão me incomodando. Corrija o(s)
        erro(s) para coletar todo o néctar.
      2-3 Bee Debugging 10_instruction: |-
        Este desafio está me deixando lelé! \r
        Corrija
        o(s) erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 2_instruction: |-
        Você consegue encontrar o problema aqui?\r
        Corrija o(s)
        erro(s) para coletar todo o néctar.
      2-3 Bee Debugging 3_instruction: |-
        Nossa, que ferroada!\r
        \r
        Corrija o(s) erro(s)
        para coletar todo o néctar.
      2-3 Bee Debugging 4_instruction: |-
        Esses blocos estão me incomodando. Corrija o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 5_instruction: |-
        Essa flor parece deliciosa! \r
        \r
        Corrija o(s)
        erro(s) para coletar todo o néctar. Agora você pode usar os botões "Executar" e "Passo".
      2-3 Bee Debugging 6_instruction: |-
        Que doce desafio!\r
        \r
        Corrija o(s) erro(s)
        para coletar todo o néctar.
      2-3 Bee Debugging 7_instruction: |-
        Corrija o(s) erro(s) para coletar todo o néctar
        e produzir todo o mel.
      2-3 Bee Debugging 8_instruction: |-
        Quantas flores lindas!\r
        \r
        Corrija o(s)
        erro(s) para coletar todo o néctar.
      2-3 Bee Debugging 9_instruction: |-
        Uau, que ferroada!\r
        \r
        Você
        terá que corrigir algumas coisas neste programa para coletar todo o
        néctar e produzir todo o mel.
      2-3 Bee Debugging Assessment 1_instruction: |-
        Avaliação:  Agora é hora de
        mostrar o que você sabe!\r
        \r
        Corrija o(s) erro(s) para coletar todo o néctar e
        produzir todo o mel.
      2-3 Bee Functions 1_instruction: |-
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 2 néctares" para coletar o néctar de cada
        flor.
      2-3 Bee Functions 10_instruction: |-
        As flores roxas variam entre 1 ou
        0 néctar a cada vez que você executa o desafio.   \r
        \r
        Crie uma função que coleta
        néctar apenas das flores que o têm.
      2-3 Bee Functions 2_instruction: |-
        As funções são blocos de código que realizam
        uma tarefa. \r
        \r
        Use a função "obtenha 5" para obter 5 néctares por vez.
      2-3 Bee Functions 3_instruction: Colete todo o néctar de cada flor.
      2-3 Bee Functions 4_instruction: |-
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. \r
        \r
        Use
        a função para coletar todo o néctar.
      2-3 Bee Functions 5_instruction: |-
        Agora há mais néctar nas flores.
        Edite a função dada para que ela colete 4 néctares e use-a para coletar
        todo o néctar das flores.
      2-3 Bee Functions 6_instruction: |-
        Agora, use a mesma função para coletar néctar
        das três flores.
      2-3 Bee Functions 7_instruction: |-
        Agora as flores estão mais longe. Edite a
        função dada e use-a para coletar todo o néctar das flores.
      2-3 Bee Functions 8_instruction: |-
        Crie sua própria função que coleta 7 néctares,
        avança e produz 7 unidades de mel. Use a função para coletar néctar em todas as
        flores e produzir mel em todas as colmeias.
      2-3 Bee Functions 9_instruction: |-
        Crie sua própria função que vai por um
        caminho, obtém néctar, produz mel, e então retorna a abelha para o início do
        caminho.
      2-3 Bee Functions Assessment 1_instruction: |-
        Avaliação: Use a função dada
        para coletar o néctar de cada flor.
      2-3 Bee Functions Assessment 2_instruction: |-
        Avaliação: Crie uma função
        para virar, avançar e produzir 3 unidades de mel, então retorne a abelha para o local onde ela começou
        e vire-a de volta.
      2-3 Bee Loops 1_instruction: |-
        Essas flores parecem deliciosas!\r
        \r
        Colete o néctar
        de cada uma das flores usando o menor número possível de blocos.
      2-3 Bee Loops 10_instruction: |-
        Você pode usar um laço enquanto dentro de outros dois
        laços para coletar todo o néctar?
      2-3 Bee Loops 11_instruction: |-
        Use laços enquanto para coletar todo o néctar
        das flores desse campo.
      2-3 Bee Loops 12_instruction: |-
        Use laços enquanto para coletar todo o néctar
        das flores desse campo.
      2-3 Bee Loops 13_instruction: |-
        Avaliação: Colete todo o néctar usando
        o menor número possível de blocos.
      2-3 Bee Loops 1A_instruction: "Olá, eu sou uma abelha. Você pode me ajudar a
        coletar\no néctar dessas flores? "
      2-3 Bee Loops 2_instruction: |-
        Colete todo o néctar e produza todo o mel
        usando o menor número possível de blocos.
      2-3 Bee Loops 2A_instruction: Desta vez, use um laço para juntar todo o néctar.
      2-3 Bee Loops 3_instruction: |-
        Colete o néctar de cada flor e produza mel
        em cada colmeia usando o menor número possível de blocos.
      2-3 Bee Loops 3A_instruction: Use um laço "repita" para coletar todo o néctar.
      2-3 Bee Loops 3B_instruction: |-
        Agora, use o bloco "repita" para coletar todo o
        néctar e produzir todo o mel.
      2-3 Bee Loops 4_instruction: |-
        Que abelha trabalhadora!\r
        \r
        Ajude a abelha a coletar todo o
        néctar e produzir todo o mel com o menor número de blocos possível.
      2-3 Bee Loops 4A_instruction: |-
        Quantas vezes os laços ajudaram você neste desafio?  \r
        \r
        Os laços
        são seus amigos! Use alguns deles para completar este desafio com o menor número
        de blocos possível.
      2-3 Bee Loops 5_instruction: |-
        O formato deste caminho é diferente dos
        demais. \r
        \r
        Você consegue coletar todo o néctar usando o menor número possível de blocos?
      2-3 Bee Loops 6_instruction: |-
        Você consegue encontrar a maneira mais rápida para a abelha
        coletar todo o néctar e produzir todo o mel?
      2-3 Bee Loops 7_instruction: |-
        Que lindo campo florido!  Ajude a
        abelha a visitar cada flor. Você consegue achar uma maneira de fazer isso com menos de 7 blocos?
      2-3 Bee Loops 8_instruction: |-
        Essas flores roxas têm uma quantidade diferente de
        néctar a cada vez que você executa o desafio. \r
        \r
        Use o laço "enquanto houver néctar" para
        coletar todo o néctar. \r
        \r
        Esse laço será executado enquanto a condição
        for verdadeira, neste caso, enquanto "néctar > 0".
      2-3 Bee Loops 9_instruction: |-
        O laço enquanto pode realizar a mesma ação que
        um comando se em um laço. Adicione um laço enquanto a esse código para realizar a mesma
        tarefa.
      2-3 Bee Loops Assessment 1_instruction: |-
        Avaliação: Use um laço "enquanto" para
        coletar todo o néctar dessas flores.
      2-3 Maze 1_instruction: "Você pode me ajudar a pegar o porco malvado? Junte
        alguns\nblocos \"avance\" abaixo do bloco \"quando executar\" e clique em
        \"Executar\". "
      2-3 Maze 10_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 11_instruction: |-
        Estou com fome, leve-me até a flor! Quantas vezes
        você precisa repetir um bloco?
      2-3 Maze 12 (copy 1)_instruction: |-
        Você pode substituir a resposta anterior por
        apenas dois blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 12 (copy 2)_instruction: |-
        Você pode substituir a resposta anterior por
        apenas dois blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 12 (old)_instruction: |-
        Leve-me até o porco, agora com o bloco repita
        vezes!
      2-3 Maze 12 - One Move Block_instruction: |-
        Pegue o porco! Mas, desta vez, você
        só pode usar um bloco "avance". Você está vendo mais algum bloco que poderia
        ajudar?
      2-3 Maze 12_instruction: |-
        Você consegue pegar o porco criando um laço que usa
        apenas um bloco "avance" dentro de um bloco "repita"?
      2-3 Maze 13 (old)_instruction: |-
        Leve-me até o porco, agora com o bloco repita
        até!
      2-3 Maze 13_instruction: |-
        Leve-me até o porco! Você só pode usar um bloco
        "avance" desta vez
      2-3 Maze 14 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 14_instruction: |-
        Leve-me até o girassol! (Onde está o bloco "repita
        vezes" quando eu preciso dele?)
      2-3 Maze 15 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 15_instruction: |-
        Neste desafio, dois laços "repita" ajudarão você
        a pegar o porco com o menor número possível de blocos!
      2-3 Maze 16 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 16 before_instruction: |-
        Você consegue descobrir a maneira mais rápida de me
        levar até o porco?
      2-3 Maze 16_instruction: |-
        Os laços funcionam inclusive com mais de um bloco dentro! Você
        consegue repetir essa sequência para levar o zumbi até o girassol?
      2-3 Maze 2_instruction: Esse porco está me irritando. Ajude-me a chegar até
        ele!
      2-3 Maze 3_instruction: |-
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze 4_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 5_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 6_instruction: |-
        Fique calmo e ajude-me a chegar até o porco malvado. Senão
        eu vou ficar braco!
      2-3 Maze 7_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 8_instruction: Leve-me até o porco!
      2-3 Maze 9_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze Loops 1_instruction: Você pode me levar até o porco usando 5 blocos?
      2-3 Maze Loops 17_instruction: Use o que você aprendeu para me levar até o girassol!
      2-3 Maze Loops 18_instruction: |-
        Leve-me até o girassol usando o menor número de blocos
        possível! \r
        \r
        Use um laço "repita" dentro de outro para diminuir
        a quantidade de códigos que você precisa.
      2-3 Maze Loops 19_instruction: |-
        Vamos subir o nível! \r
        Use
        laços para me levar até o girassol com o menor número de laços possível.
      2-3 Maze Loops 20_instruction: |-
        Leve-me até o girassol usando o menor número
        possível de blocos!
      2-3 Maze Loops 21_instruction: |-
        Leve-me até o girassol usando o menor número possível
        de blocos!
      2-3 Maze Loops Assessment 1_instruction: "Avaliação: Leve-me até o girassol\nusando
        apenas 5 blocos! "
      2-3 Maze sq1_instruction: |-
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 Maze sq10v2_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 Maze sq2_instruction: |-
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze sq3_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze sq4_instruction: |-
        Fique calmo e ajude-me a chegar até o porco malvado. Senão
        eu vou ficar braco!
      2-3 Maze sq5_instruction: |-
        Leve-me até o porco! Quantas vezes você precisa
        repetir um bloco?
      2-3 Maze sq6_instruction: |-
        Você pode substituir a resposta anterior por apenas dois
        blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze sq7_instruction: Leve-me até o intruso verde usando apenas três blocos.
      2-3 Maze sq8_instruction: |-
        Leve-me até o porco! (Onde está o bloco "repita vezes"
        quando eu preciso dele?)
      2-3 Maze sq9_instruction: Crie laços para chegar até o porco usando menos blocos.
      2-3 maze sq11_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 maze sq12_instruction: |-
        Você pode substituir a resposta anterior por um laço
        usando um bloco "repita vezes"?
      2-3 maze sq13_instruction: |-
        Querida pessoa. Mim zumbi. Deve... chegar... girassol.
        Crie um laço com o bloco "repita até".
      2-3 maze sq14_instruction: Você pode chegar até o girassol usando apenas quatro
        blocos?
      2-3 maze sq15_instruction: Você pode chegar até o girassol usando apenas blocos?
      2-3 maze sq16_instruction: |-
        Ok, isso é parecido, mas um pouco diferente. Você pode
        fazer isso em apenas cinco blocos?
      2-3_instruction: |-
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Ajude o pássaro a pegar o porco safado movendo-o para
        frente
      20hr_farmer_stage9_1_instruction: |-
        Hi, I'm a farmer. I need your help to flatten
        the field on my farm so it's ready for planting. Move me to the pile of dirt
        and use the "remove" block to remove it.
      20hr_farmer_stage9_10_instruction: |-
        I'm working late, so it's dark out, and
        I can't tell how large the piles are. Now I don't have all the options I
        used to have on the while block. Move me along the field, and if there is
        a pile, remove it
      20hr_farmer_stage9_11_instruction: |-
        It's still dark outside. Move me along
        the field. If there is a pile, remove it, and if there is a hole, fill it
        in. Hint: use the dropdown menu of options on the "if" block.
      20hr_farmer_stage9_2_instruction: |-
        Next, move me to the hole and fill it with
        TWO shovelfuls of dirt, using the "fill" block.
      20hr_farmer_stage9_3_instruction: |-
        Move me to the pile of dirt and tell me
        how many shovelfuls to remove using as few blocks as possible.
      20hr_farmer_stage9_4_instruction: |-
        Can you help me remove all four piles of
        dirt? Hint: use a repeat block if you can.
      20hr_farmer_stage9_5_instruction: |-
        Help me fill in all these holes with 5 shovelfuls
        of dirt. Hint: you can put a "repeat" block inside the "while" block.
      20hr_farmer_stage9_6_instruction: |-
        Remove all the piles of dirt, using as few
        blocks as possible. The new options in the dropdown menu on the "while"
        block tell me if I'm standing on a pile or a hole.
      20hr_farmer_stage9_7_instruction: |-
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs. Can you write a program that fills
        it until the ground is even?
      20hr_farmer_stage9_8_instruction: |-
        Help me fill in the hole at the end of the
        field, using as few blocks as possible.
      20hr_farmer_stage9_9_instruction: |-
        Make me remove all these piles of dirt.
        Try to use as few blocks as possible. Hint: try using a "while" block.
      20hr_maze_stage2_1_instruction: |-
        Can you help me to catch the naughty pig?
        Stack a couple of "move forward" blocks together and press "Run" to help
        me get there.
      20hr_maze_stage2_10_instruction: |-
        Ok, try the new "repeat until" block -
        it will repeat until I reach the annoying pig.
      20hr_maze_stage2_11_instruction: |-
        Ok, one last time for practice - can you
        solve this one using only 4 blocks?
      20hr_maze_stage2_12_instruction: |-
        Dear person. Me zombie. Me hungry. Must...
        get... to sunflower... Can you get me there with only 5 blocks?
      20hr_maze_stage2_13_instruction: |-
        Ok, this is similar, but slightly different.
        Can you do it in only 5 blocks?
      20hr_maze_stage2_14_instruction: |-
        Use the new "if" block to let me decide
        when to turn. Hint: you only need one more block, but learn how we set it
        up so you can do it on your own next time.
      20hr_maze_stage2_15_instruction: |-
        Ok, this is just like the last puzzle, but
        you need to remember how you used the "if" block and the "repeat" block
        together.
      20hr_maze_stage2_16_instruction: |-
        Me want sunflower! Use an "if" block to
        get me there with the fewest number of blocks.
      20hr_maze_stage2_17_instruction: |-
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the chompers!
      20hr_maze_stage2_18_instruction: |-
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the sunflower try to use
        this new block.
      20hr_maze_stage2_19_instruction: |-
        One more practice of the "if-else" block,
        can you get it right on your first try?
      20hr_maze_stage2_2_instruction: |-
        This pig is ruffling my feathers. Help me
        to find him!
      20hr_maze_stage2_20_instruction: |-
        Can you add just 3 blocks to help me solve
        a more complex maze? If you do it right, I can walk any curvy path no matter
        the length.
      20hr_maze_stage2_3_instruction: |-
        Trace the path and lead me to the silly pig.
        Avoid TNT or the feathers will fly!
      20hr_maze_stage2_4_instruction: |-
        Guide me to the green evilness! (Watch out
        for TNT)
      20hr_maze_stage2_5_instruction: |-
        Keep calm and help me to find the bad pig.
        Otherwise I might get angry!
      20hr_maze_stage2_6_instruction: |-
        There's a way I can get to the silly pig
        using only 2 blocks. Can you figure it out?
      20hr_maze_stage2_7_instruction: |-
        Try to get me to the green intruder using
        only three blocks.
      20hr_maze_stage2_8_instruction: |-
        Help me banish this bad piggy using the fewest
        number of blocks. Try using more than one "repeat times" block.
      20hr_maze_stage2_9_instruction: |-
        When a block is grey, that means you can't
        delete it. Solve this puzzle using the "repeat" block that repeats 3 times.
        Try putting these 3 blocks inside the grey "repeat" block: move, move, turn.
      4-5 Artist 1_instruction: "Ajude-me a terminar de desenhar minha caixa. (Cada
        linha\ntem 300 pixels de comprimento) "
      4-5 Artist 10_instruction: |-
        Pressione "Executar" para testar o código. Em seguida, repita o código
        o número suficiente de vezes para completar o desenho. As cores serão diferentes toda vez.
      4-5 Artist 11_instruction: |-
        Complete as retas verdes. As retas têm 300 pixels
        de comprimento e são separadas por 15 pixels.
      4-5 Artist 2_instruction: |-
        Repita esse código usando o bloco "repita" para completar
        o quadrado.
      4-5 Artist 3.5_instruction: |-
        Tente descobrir o que acontece se você executar esse
        código (ou pressione "Executar" para testar o código). Em seguida, repita o código o número suficiente de vezes
        para completar o desenho!
      4-5 Artist 3_instruction: |-
        Esse canteiro de flores retangular tem um perímetro de 600.
        O lado comprido tem 200 de comprimento. Desenhe o retângulo usando o menor número possível
        de blocos.
      4-5 Artist 4_instruction: |-
        Quantos graus há em um círculo? Repita os blocos
        para criar um círculo de cores.
      4-5 Artist 5_instruction: |-
        O que podemos usar para substituir "???" para garantir que
        o zumbi complete este desenho usando o laço dado?
      4-5 Artist 6_instruction: |-
        Esse triângulo equilátero tem ângulos de 60, 60
        e 60 graus. Cada lado tem 200 pixels. Complete o desenho.
      4-5 Artist 7_instruction: |-
        Este triângulo retângulo tem ângulos de 30, 60 e 90
        graus. O comprimento do lado inclinado (comprimento da hipotenusa) é de 200 pixels.
        Complete o desenho.
      4-5 Artist 8_instruction: |-
        A linha do meio-campo em um campo de futebol é perpendicular
        às linhas laterais.  \r
        Este retângulo tem um perímetro de 800 pixels no total,
        e 240 pixels de comprimento. Qual é sua altura?  \r
        \r
        Desenhe as bordas e a
        linha do meio-campo.
      4-5 Artist 9_instruction: |-
        Desenhe a metade da direita desta imagem de forma que o desenho
        seja simétrico. Os triângulos são equiláteros e têm lados de 50 pixels
        de comprimento.
      4-5 Artist Assessment 1_instruction: |-
        Avaliação: Use um laço para desenhar o triângulo
        equilátero. Cada lado tem 300 pixels.
      4-5 Artist For Loops 1_instruction: |-
        Coloque os números de 1 a 10 nos
        blocos de largura e execute o código.
      4-5 Artist For Loops 11_instruction: |-
        Complete o bloco "para" para que ele
        conte 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: "O que acontece se você inverter os números
        que estão em \"de\"\ne \"até\"? Complete o bloco \"para\" de forma que ele
        conte 200, 180,\n160, 140, 120...0. "
      4-5 Artist For Loops 13_instruction: |-
        Esse design foi iniciado sem um laço "para"
        e está usando muitos blocos! Use um bloco "para" e complete a espiral. Dica:
        a última linha tem 250 pixels.
      4-5 Artist For Loops 14_instruction: |-
        Alguém começou o código, mas então percebeu que
        deve haver uma forma mais rápida! Use um bloco "para" para substituir os blocos e
        complete a espiral triangular. (Dica: a última linha tem 300 pixels).
      4-5 Artist For Loops 15_instruction: |-
        Alguém começou o código, mas então percebeu que
        deve haver uma forma mais rápida! Use um bloco "para" para substituir os blocos e
        complete a espiral hexagonal. (Dica: a última linha tem 200 pixels).
      4-5 Artist For Loops 2_instruction: |-
        Este é um bloco "para". Em vez de digitar
        1, 2, 3... 10, o bloco "para" pode repetir os blocos dentro dele e contar os
        números para você. Coloque o número 10 na seção "até" do bloco
        "para".
      4-5 Artist For Loops 3_instruction: |-
        Como podemos contar de 1 até 50? Edite o
        bloco "para".
      4-5 Artist For Loops 4_instruction: |-
        Complete o bloco "para" para que ele
        conte de 1 até 10, de 1 em 1.
      4-5 Artist For Loops 6_instruction: |-
        Desenhe quadrados com lados de 50, 60, 70,
        80 e 90 pixels. Você vai precisar usar a função "desenhe um quadrado" cinco
        vezes.
      4-5 Artist For Loops 7_instruction: |-
        Desenhe os mesmos quadrados, mas use um bloco "conte
        com" para alterar os tamanhos. Coloque o bloco "contador" na função "desenhe
        um quadrado". Dica: ele está na categoria Variáveis.
      4-5 Artist For Loops 8_instruction: |-
        Você pode completar o programa colocando
        os blocos dentro de um bloco "para" que conta de 10 até 200, de 10 em 10? Você pode
        encontrar o bloco "para" na categoria Laços.
      4-5 Artist For Loops 9_instruction: |-
        Esses círculos são de tamanhos 5, 10, 15, 20,
        25, 30 e 35. Desenhe os círculos usando um bloco "para".
      4-5 Artist Free Draw 1_instruction: |-
        Desenho livre! Desenhe o que você estiver inspirado
        a criar.
      4-5 Artist Functions 1_instruction: Use um laço repita para desenhar esse triângulo.
      4-5 Artist Functions 10a_instruction: |-
        Coloque esse código na função "desenhe um floco de neve"
        e substitua o 50 pelo parâmetro "tamanho". A função já é
        chamada para criar um floco de neve que tem 100 pixels.
      4-5 Artist Functions 10b_instruction: |-
        Use a função "desenhe um floco de neve"
        para criar flocos de tamanhos diferentes. Dica: o primeiro floco de neve tem 25 de comprimento
        e cada floco de neve tem duas vezes o tamanho do floco anterior.
      4-5 Artist Functions 11_instruction: |-
        Essa função "desenhe um hexágono" usa
        a função "desenhe um triângulo". Complete a função do hexágono. (Dica: um
        hexágono tem 6 lados, cada um com 100 pixels de comprimento)
      4-5 Artist Functions 12_instruction: |-
        Complete a função "desenhe ondas". Cada
        onda é feita de uma onda superior e uma onda inferior. Dica: desenhe 5 ondas
        azuis.
      4-5 Artist Functions 13 Free play_instruction: |-
        Temos aqui algumas funções para
        desenhar planetas, estrelas, foguetes e robôs. Use-as da forma que quiser para criar
        imagens que você pode compartilhar com seus amigos.
      4-5 Artist Functions 14 Free play_instruction: |-
        Aqui, fornecemos
        várias funções para você. Use-as da forma que quiser dentro de um ou mais laços
        para criar imagens que você pode compartilhar com seus amigos. Clique em "Executar" para ver
        um exemplo.
      4-5 Artist Functions 15 Assessment_instruction: |-
        Avaliação: use a função "desenhe
        um quadrado" para criar os quadrados. Os quadrados têm 50, 100 e 150
        pixels.
      4-5 Artist Functions 2a_instruction: |-
        Agora coloque esses blocos em uma nova função
        chamada "desenhe um triângulo pequeno" e chame-a.
      4-5 Artist Functions 2b_instruction: |-
        Agora crie uma função chamada "desenhe um
        triângulo pequeno" usando os blocos fornecidos.
      4-5 Artist Functions 3_instruction: "Agora crie as funções \"desenhe um triângulo\nmédio\"
        e \"desenhe um triângulo grande\". A função \"desenhe um triângulo pequeno\"\nestá
        pronta para você. Os triângulos têm comprimentos de 50 (pequeno), 100 (médio)\ne
        150 (grande). "
      4-5 Artist Functions 4_instruction: |-
        Essa nova função "desenhe um triângulo"
        tem um parâmetro e pode fazer o trabalho das três funções de antes. Desenhe os
        mesmos triângulos usando essa nova função.
      4-5 Artist Functions 5_instruction: |-
        Você pode transformar a função "desenhe um triângulo"
        em uma função "desenhe um quadrado" para alterar o desenho?
      4-5 Artist Functions 6_instruction: |-
        Use as funções "desenhe um quadrado" e "desenhe um
        triângulo" para desenhar uma casa. (Dica: os lados do quadrado têm 200 pixels)
      4-5 Artist Functions 6b_instruction: |-
        Use as funções desenhe um quadrado e desenhe um triângulo
        junto com outros blocos para criar uma casa, adicionando-as à função "desenhe uma casa"
        e chamando-a.
      4-5 Artist Functions 7_instruction: |-
        Use a função "desenhe uma casa" para desenhar
        casas de 100 pixels e 50 pixels. As duas casas são separadas por
        50 pixels.
      4-5 Artist Functions 8_instruction: |-
        A função "desenhe uma flor" tem um parâmetro
        que permite que você defina a altura do caule. Defina a altura como 200 e veja o que acontece.
      4-5 Artist Functions 9_instruction: |-
        Desenhe essas 3 flores. A altura da primeira
        é 100 e a próxima flor sempre tem 50 pixels de altura a mais que
        a anterior. As flores também são separadas por 100 pixels.
      4-5 Artist Patterns 1_instruction: |-
        Desenhe esse quadrado usando um laço.\r
        \r
        Cada
        lado tem 20 pixels de comprimento.
      4-5 Artist Patterns 10_instruction: |
        Este código desenha duas fileiras de hexágonos -
        repita todo o código 4 vezes para desenhar a colmeia inteira. \r
        \r
        Você vai
        precisar recuar 120 pixels no laço mais externo para garantir que o artista
        não desenhe fora da tela.\r
      4-5 Artist Patterns 11_instruction: "Quantas vezes você precisa repetir isso\npara
        desenhar um semicírculo? "
      4-5 Artist Patterns 12_instruction: |-
        Se você criar outro laço como este,
        mas virar para a esquerda ao invés da direita, o que acontece? \r
        \r
        Você pode repetir tudo
        isso para desenhar essa onda?
      4-5 Artist Patterns 13_instruction: |-
        Agora vamos repetir tudo quatro
        vezes para criar a moldura dessa imagem. Preste atenção nos cantos - você não pode
        simplesmente virar 90 graus! \r
        \r
        Se repetir uma ação de virar 3 graus 60 vezes faz um
        semicírculo, qual desses blocos de código vai fazer um outro quarto
        de círculo para os cantos?
      4-5 Artist Patterns 2_instruction: |-
        Se você colocar seu laço do quadrado dentro de outro
        laço, o chamamos de laço aninhado. O que você precisa adicionar como um laço externo
        para garantir que todos os 15 quadrados fiquem alinhados?
      4-5 Artist Patterns 3_instruction: |-
        Agora, vamos nos aprofundar mais um nível!
        Aninhamos todo o bloco de código dentro de outro laço, mas você precisa posicionar o
        artista no lugar para desenhar a próxima reta. Qual desses blocos de código você
        pode colocar no final do laço mais externo para desenhar toda a grade?
      4-5 Artist Patterns 4_instruction: |-
        Esse diamante tem lados de 50 pixels e ângulos
        de 120 e 60 graus. Use um laço para desenhá-lo.
      4-5 Artist Patterns 5.5_instruction: |-
        Quantas vezes você precisa repetir
        esse bloco para desenhar toda a grade de diamantes?
      4-5 Artist Patterns 5_instruction: |
        Repita este código para fazer uma fileira de 6 diamantes.
        \r
        \r
        Perceba que alteramos nosso código do diamante para repetir 3 vezes ao invés
        de 2 - por que você acha que fizemos isso?\r
      4-5 Artist Patterns 6_instruction: |-
        Quantas vezes você precisa repetir esse
        bloco para desenhar toda a grade de diamantes?
      4-5 Artist Patterns 7_instruction: |-
        Vamos modificar o código do último desafio
        para fazer esse padrão mais complexo. Perceba como os diamantes se sobrepõem agora. Tente
        alterar o primeiro "pule para trás" de 100 para 50 (metade da distância) - agora, quão
        longe o artista deve ir no segundo "pule para trás"?
      4-5 Artist Patterns 8_instruction: |-
        Use um laço para desenhar esse hexágono com
        lados de 40 pixels e ângulos de 60 graus.
      4-5 Artist Patterns 9.5_instruction: |-
        Vamos repetir esse código para desenhar duas fileiras
        de hexágonos. Perceba como nossa segunda fileira está deslocada para a direita.
      4-5 Artist Patterns 9_instruction: |-
        Agora, repita o código 3 vezes e desenhe a
        a fileira inteira. \r
        \r
        Cada hexágono tem 80 pixels de largura da extrema esquerda
        à extrema direita.
      4-5 Artist Patterns Free Play_instruction: |-
        Atividade livre - experimente criar
        seu próprio padrão!
      4-5 Bee Conditionals - FC Test_instruction: |-
        Agora, a abelha só quer néctar.
        Nem todos os objetos são flores, então olhe embaixo de TODAS AS NUVENS para ver se
        ela está escondendo uma flor. Se estiver, então você pode coletar o néctar.
      4-5 Bee Conditionals 1 (copy 1)_instruction: |-
        A abelha não sabe se isso é
        uma flor ou uma colmeia. Colete néctar apenas das flores, mas primeiro verifique
        se o objeto é uma flor ou uma colmeia.
      4-5 Bee Conditionals 1_instruction: |-
        Esta nuvem está tapando minha visão! Veja
        se há uma flor atrás da nuvem, e só colete néctar se houver
        uma flor. Cuidado, isso pode mudar!
      4-5 Bee Conditionals 2 (copy 1)_instruction: |-
        Agora a abelha só quer néctar.
        Lembre-se, nem todos os objetos são flores, então faça a verificação para coletar néctar apenas
        das flores.
      4-5 Bee Conditionals 2_instruction: |-
        Mais nuvens! \r
        \r
        Procure atrás
        de todas as nuvens para ver se elas escondem alguma flor antes de coletar o néctar.  \r
        \r
        Lembre-se:
        Nem todas as nuvens escondem alguma coisa!
      4-5 Bee Conditionals 3_instruction: |-
        Agora só quero produzir mel. Algumas
        dessas nuvens podem ter colmeias atrás delas. Não se esqueça de procurar em todas as nuvens!
      4-5 Bee Conditionals 4 (copy 1)_instruction: |-
        O objeto desconhecido pode ser
        uma flor ou uma colmeia. Use o bloco se/senão para coletar néctar se ele for
        uma flor, senão para produzir mel (porque ele é, então, uma colmeia).
      4-5 Bee Conditionals 4_instruction: |-
        Às vezes esta nuvem esconde uma flor
        e outras vezes uma colmeia! Use o bloco "se/senão" para coletar néctar
        se for uma flor, senão para produzir mel (porque é uma colmeia).
      4-5 Bee Conditionals 5_instruction: |-
        Deve haver uma flor ou uma colmeia
        atrás de cada uma dessas nuvens!\r
        \r
        Use o bloco "se/senão" para coletar néctar
        se houver uma flor.\r
        Caso contrário, produza mel (porque há uma colmeia).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |-
        Essa flor roxa pode ter
        1, 2 ou 3 néctares. Aqui um bloco se-senão está combinado com outro bloco
        se-senão para criar um bloco se, senão-se, senão. Complete a solução para coletar
        a quantidade desconhecida de néctar.
      4-5 Bee Conditionals 6_instruction: |-
        Não tenho certeza de quanto néctar esta flor
        tem, mas sei que ela tem 1, 2 ou 3 unidades de néctar. \r
        \r
        Combine os blocos
        condicionais ("se" e/ou "se/senão") para coletar apenas a quantidade de néctar que a flor tiver.
        \r
        \r
        Lembre-se de que a quantidade de néctar pode mudar a cada vez que você executar o desafio!
      4-5 Bee Conditionals 7_instruction: |-
        Essas flores podem ter 3, 2 ou 1 néctar.
        \r
        \r
        Complete a função "verifique a flor roxa" e use-a para coletar
        todo o néctar das flores.
      4-5 Bee Conditionals 8_instruction: |-
        Escreva a função "verifique flor e
        produza mel". \r
        \r
        Sua função deve verificar se a flor roxa tem 3, 2
        ou 1 néctar e coletar todo o néctar. \r
        Então, avance e produza mel.
      4-5 Bee Conditionals Assessment 1_instruction: |
        **Avaliação:** esta nuvem
        esconde uma flor com um néctar ou uma colmeia que precisa de um mel.  \r
        \r
        Complete
        a função "colete néctar ou produza mel" e então, chame-a para coletar o néctar
        ou o mel.  \r
      4-5 Bee Debugging 1_instruction: |-
        Esses blocos estão me incomodando. \r
        \r
        Você
        pode consertá-los?
      4-5 Bee Debugging 10_instruction: Encontre os erros e corrija-os.
      4-5 Bee Debugging 11_instruction: Isso conta corretamente?
      4-5 Bee Debugging 2_instruction: Ajude a abelha a coletar o néctar e fabricar
        o mel.
      4-5 Bee Debugging 3_instruction: Encontre os erros e corrija-os.
      4-5 Bee Debugging 4_instruction: Esses blocos não funcionam. Qual é o padrão?
      4-5 Bee Debugging 5_instruction: Algo não está certo aqui...
      4-5 Bee Debugging 6_instruction: |-
        A flor roxa tem uma quantidade diferente
        de néctar a cada vez que você executa o desafio. \r
        \r
        Corrija os blocos para coletar todo
        o néctar da flor em todas as vezes.
      4-5 Bee Debugging 7_instruction: Está faltando alguma coisa na função...
      4-5 Bee Debugging 8_instruction: |-
        Essa função está certa, mas não é usada
        corretamente.
      4-5 Bee Debugging 9_instruction: Por que a abelha não está produzindo mel suficiente?
      4-5 Bee Debugging Assessment 1_instruction: 'Avaliação: conserte o código.'
      4-5 Bee Nested Loops 1_instruction: Use um laço para coletar todo o néctar.
      4-5 Bee Nested Loops 2_instruction: "Colete todo o néctar de cada flor.\nUse
        um laço aninhado. "
      4-5 Bee Nested Loops 3_instruction: |-
        Colete todo o néctar colocando o
        código inicial dentro de outro laço.
      4-5 Bee Nested Loops 4_instruction: "Colete todo o néctar de cada flor\ne produza
        mel na colmeia. \\r\n\\r\nUse um laço aninhado. "
      4-5 Bee Nested Loops 5_instruction: |-
        Colete todo o néctar criando
        um laço aninhado.
      4-5 Bee Nested Loops 6_instruction: Colete todo o néctar.
      4-5 Bee Nested Loops 7_instruction: |-
        Coloque esse laço dentro de outro laço para criar
        um laço aninhado e coletar todo o néctar das flores.
      4-5 Bee Nested Loops 8_instruction: "Colete todo o néctar dessas flores\naninhando
        um laço enquanto. Substitua o bloco interno repita vezes por um bloco\nenquanto. "
      4-5 Bee Nested Loops 9_instruction: |-
        Colete todo o néctar dessas flores
        aninhando um laço enquanto dentro de um bloco repita.
      4-5 Bee Nested Loops Assessment 1_instruction: |-
        **Avaliação:** colete todo o
        néctar e produza todo o mel usando laços.
      4-5 Bee Nested Loops Rows_instruction: |-
        Colete o néctar das fileiras de flores!
        Use um laço aninhado.
      4-5 Maze 1 (copy 1)_instruction: |-
        Querida pessoa. Mim zumbi. Precisa... chegar...
        girassol.
      4-5 Maze 1_instruction: Querida pessoa. Mim zumbi. Deve... chegar... girassol.
      4-5 Maze 10_instruction: Você consegue chegar até o girassol usando apenas quatro
        blocos?
      4-5 Maze 11_instruction: Você pode chegar até o girassol usando apenas seis
        blocos?
      4-5 Maze 12_instruction: |-
        Ok, isso é um pouco diferente. Você pode fazer isso em
        apenas seis blocos?
      4-5 Maze 13_instruction: Leve-me até o porco!
      4-5 Maze 14_instruction: Leve-me até o porco! Use o bloco repita até.
      4-5 Maze 2 (copy 1)_instruction: |-
        Leve o zumbi até o girassol, mas desvie
        da carnívora!
      4-5 Maze 2_instruction: Leve o zumbi até o girassol, mas desvie da carnívora!
      4-5 Maze 3 (copy 1)_instruction: Precisa... chegar... girassol.
      4-5 Maze 3_instruction: Precisa... chegar... girassol.
      4-5 Maze 4 (copy 1)_instruction: Experimente o bloco "repita" para usar menos
        blocos...
      4-5 Maze 4_instruction: Experimente o bloco "repita" para usar menos blocos...
      4-5 Maze 5 (copy 1)_instruction: |-
        Você pode resolver esse desafio usando o menor
        número possível de blocos?
      4-5 Maze 5_instruction: |-
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      4-5 Maze 6 (copy 1)_instruction: |-
        Você pode resolver esse desafio usando o menor
        número possível de blocos?
      4-5 Maze 6_instruction: |-
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      4-5 Maze 7_instruction: |-
        Leve o zumbi até o girassol sem demora! Você consegue
        resolver o desafio com menos de 11 blocos?
      4-5 Maze 8_instruction: |-
        Leve o zumbi até o girassol usando o menor número possível
        de blocos.  \r
        (Desvie das carnívoras!)
      4-5 Maze 9_instruction: |-
        Agora temos um novo bloco chamado "repita até". \r
        Isso
        nos permitirá repetir comandos até o zumbi chegar no girassol. \r
        \r
        Use
        o novo bloco "repita até" para resolver este desafio com o menor número possível de comandos.
      4-5 Maze Assessment 1_instruction: |-
        Avaliação: chegue até o girassol usando
        o menor número possível de blocos.
      4-5 Maze Conditionals 1_instruction: |-
        Use o bloco "repita até" para levar o
        zumbi até o girassol.
      4-5 Maze Conditionals 10_instruction: |-
        Você pode adicionar apenas 3 blocos para ajudar
        o zumbi a resolver um labirinto mais complexo? \r
        \r
        Se fizer isso certo, ele poderá andar
        em qualquer caminho com curvas, não importa o tamanho!
      4-5 Maze Conditionals 2_instruction: |-
        Use o bloco "repita até" para levar o
        zumbi até o girassol.
      4-5 Maze Conditionals 3_instruction: |
        Use o bloco "se" para me ajudar a decidir
        quando virar. \r
      4-5 Maze Conditionals 4_instruction: |-
        Ok, resolva este desafio como resolveu
        o último, mas você precisa se lembrar de como usou os blocos "se" e "repita até"
        juntos.
      4-5 Maze Conditionals 5_instruction: |-
        "Mim querer girassol!"  \r
        \r
        Use um
        bloco "se" para levar o zumbi até o girassol com o menor número de blocos
        possível.
      4-5 Maze Conditionals 6_instruction: |-
        "Mim comer girassol!"\r
        \r
        Use um bloco
        "se" para levar o zumbi até o girassol com o menor número de blocos possível.
      4-5 Maze Conditionals 7_instruction: |-
        A solução deste desafio não é muito
        diferente, mas fique de olho nas carnívoras!
      4-5 Maze Conditionals 8_instruction: |-
        O bloco "se/senão" verifica uma condição
        e, em seguida, faz uma coisa OU outra. \r
        \r
        Use este novo bloco para me levar até
        o girassol.
      4-5 Maze Conditionals 9_instruction: |-
        Mais um desafio com o bloco
        "se/senão"\r
        \r
        Faça o caminho com seu dedo para ver se consegue descobrir a solução
        na sua primeira tentativa.
      4-5 Maze Conditionals Assessment 1_instruction: |-
        **Avaliação:** use um bloco
        "repita até" e um bloco "se/senão" para me levar até o girassol com o menor número de blocos
        possível.
      4-5 Nested Loops 1_instruction: |-
        Complete o código para desenhar esses triângulos. O
        primeiro está pronto para você. Dica: 3 triângulos em uma rotação de 360 graus.
      4-5 Nested Loops 10_instruction: |-
        Desenhe a última linha de estrelas nessa bandeira
        repetindo os blocos fornecidos. As estrelas estão separadas por 50 pixels, mas lembre-se
        que elas têm 30 pixels de largura.
      4-5 Nested Loops 11_instruction: |-
        Você pode desenhar esses 10 quadrados dessa
        calçada usando um laço aninhado? Cada quadrado tem 30 pixels.
      4-5 Nested Loops 12_instruction: |-
        Você pode desenhar esses 36 triângulos usando
        um laço aninhado?
      4-5 Nested Loops 2_instruction: "Agora, aninhe esse laço dentro de outro laço
        para\ndesenhar 10 triângulos. Isso se chama laço \"aninhado\".  "
      4-5 Nested Loops 3_instruction: |-
        Crie um sol aninhando o código inicial em
        outro laço.\r
        \r
        Para conseguir este desenho legal com um centro vazio, você terá que
        dar um pulo para a frente do tamanho do triângulo antes de virar.
      4-5 Nested Loops 5_instruction: Repita o código dado para criar um moinho de
        vento.
      4-5 Nested Loops 6_instruction: |-
        Você pode desenhar um hexágono repetindo o
        código do triângulo?
      4-5 Nested Loops 7_instruction: |-
        Repita esse desenho 10 vezes. \r
        \r
        Quanto
        você precisa virar a cada repetição?
      4-5 Nested Loops 8_instruction: "Repita essa forma 6 vezes. \\r\n\\r\nQuanto\nvocê
        precisa virar a cada repetição? "
      4-5 Nested Loops 9_instruction: Desenhe o dente na boca do crocodilo!
      4-5 Nested Loops Assessment 1_instruction: |-
        Avaliação: use um laço aninhado para
        completar o desenho.
      4-5 While Loops 1_instruction: |-
        Mova-me para o buraco e preencha-o com duas pás cheias
        de terra, usando o bloco "preencha".
      4-5 While Loops 2_instruction: |-
        Mova-me para o monte de terra e remova-o com
        5 pás, usando o bloco "remova 1".
      4-5 While Loops 3_instruction: |-
        Use o menor número possível de blocos para completar
        este desafio!  \r
        \r
        Mova-me para o monte e remova toda a terra, então mova-me para
        o buraco e preencha-o completamente.
      4-5 While Loops 4_instruction: "Uau, que demais! \\r\n\\r\nEu não sei de quantas\npás
        cheias de terra esse buraco precisa.  \\r\nVocê pode escrever um programa
        que\nfique usando o bloco \"preencha\" até que o solo fique nivelado?  "
      4-5 While Loops 5_instruction: |-
        Uau, agora há dois buracos profundos! Você
        pode escrever um programa que os preencha até o que o solo fique nivelado?
      4-5 While Loops 6_instruction: |-
        Uau, agora há um grande monte de terra!
        Você pode escrever um programa que remova a terra até que o solo fique nivelado?
      4-5 While Loops 7_instruction: |-
        Uau, agora há três grandes montes de terra!
        Você pode escrever um programa que remova cada um deles até que o solo fique nivelado?
      4-5 While Loops 8_instruction: |2-
         Há um buraco realmente fundo e um monte de terra
        realmente grande. Quantas pás cheias de terra são necessárias para
        tornar o solo plano?
      4-5 While Loops Assessment 1_instruction: |-
        Há um monte de buracos e
        montes. Ajude-me a preenchê-los e removê-los para tornar o solo plano.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      Alien Defender_instruction: 'Project Idea: Make a defender game in Play Lab!'
      Alien Defender_2018_instruction: |-
        Project Idea: Make a defender game in Play
        Lab!
      AllTheThings Applab - Turtle move with button_instruction: |-
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      'AllTheThings: Pixelation - Lesson 14 - Make the Letter A_instruction': |-
        Make
        a 3x5 letter 'A'. The widget is setup with the incorrect dimensions. Your
        first task is to set the second byte to the 8-bit binary code for 5: 0000
        0101. Then start entering pixel data.
      'AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4_instruction': |-
        We
        start you out with the 4x4 image Maddie created in the video. Your task is
        to fill a 4x4 grid with colors using 12-bits per pixel. Here are the requirements:
        Row 1 - fill with shades of red. Row 2 - shades of green. Row 3 - shades of
        blue. Row 4 - shades of gray.
      'AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color_instruction': |-
        We
        start you with the 4x2 image Maddie was creating, but we've left out the
        last two squares. Finish off the image by figuring out which two colors are
        missing and encode them.
      App Lab test_instruction: teste
      AppLab_test02_instruction: |-
        One sentence summary of the activity. Click to
        view full instructions.
      Applab AllTheThings ResourcesTab AllResources_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab AllTheThings ResourcesTab MapReference_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab AllTheThings ResourcesTab ReferenceLinks_instruction: |-
        Draw a 1x1 square
        above and to the left of the turtle's starting position. Click to see full
        instructions.
      Applab allthethings onRecordEvent_instruction: |-
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      Artist - Nested Loops 1_instruction: |-
        Complete o código para desenhar esses triângulos. O
        primeiro está pronto para você. Dica: 3 triângulos em uma rotação de 360 graus.
      Artist - Nested Loops 10_instruction: |-
        Desenhe a última linha de estrelas nessa bandeira
        repetindo os blocos fornecidos. As estrelas estão separadas por 50 pixels, mas lembre-se
        que elas têm 30 pixels de largura.
      Artist - Nested Loops 11_instruction: |-
        Você pode desenhar esses 10 quadrados dessa
        calçada usando um laço aninhado? Cada quadrado tem 30 pixels.
      Artist - Nested Loops 12_instruction: |-
        Você pode desenhar esses 36 triângulos usando
        um laço aninhado?
      Artist - Nested Loops 2_instruction: "Agora aninhe esse laço dentro de outro
        laço\npara desenhar 10 triângulos. Isso se chama laço aninhado. Dica: todos
        os 10 triângulos\ncompletam uma rotação de 360 graus.  "
      Artist - Nested Loops 3_instruction: |
        Crie um sol aninhando o código inicial
        dentro de outro laço. Chamamos isso de laço aninhado.\r
      Artist - Nested Loops 5_instruction: Repita o código dado para criar um moinho
        de vento.
      Artist - Nested Loops 6_instruction: |-
        Você pode desenhar um hexágono repetindo o
        código do triângulo?
      Artist - Nested Loops 7_instruction: |-
        Repita esse design 10 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 10?)
      Artist - Nested Loops 8_instruction: |-
        Repita esse design 6 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 6?)
      Artist - Nested Loops 9_instruction: Desenhe o dente na boca do crocodilo!
      Artist - Nested Loops Assessment 1_instruction: |-
        Use um laço aninhado para completar
        o design.
      Artist Inspiration_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\\r\n\n\\r\nWant
        to know how our inspiration pattern was made? "
      Auto Open Function Editor_instruction: "Você pode chamar funções de dentro\nde
        outras funções! Usando sua função \"forma\" como base, crie 3 formas\nde casa,
        cada uma 20 pixels maior que a anterior, começando com um comprimento de 50
        pixels. Usar\num laço com contador pode ser útil. "
      Bee Recommended Blocks test_instruction: |-
        Flores roxas podem ter 1
        ou 0 néctar, mas você não sabe quais delas têm! Tome cuidado para não coletar néctar
        de uma flor roxa quando ela não tem néctar algum. Verifique se o néctar é igual
        a 1 usando o bloco se.
      Bergeron Robot Maze1_instruction: |
        Can you help me catch the naughty pig? Stack
        a couple of `move forward` blocks below the `when run` block and press "Run".
      Big Game Animation 1 (copy 1)_instruction: |-
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |-
        Agora que você aprendeu a escrever funções lineares
        simples, vamos usá-las para adicionar um pouco de movimento ao nosso jogo.
        Clique em "Executar" para ver o que seu jogo pode fazer (não muito!), atualizar as variáveis que
        você quiser e depois clique em Concluir para seguir em frente.
      Big Game Animation 2 (copy 1)_instruction: |-
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |-
        A função "atualize-alvo" recebe o
        valor atual de x do alvo e retorna um valor atualizado. Complete a função "atualize-alvo"
        para que ela some ao valor de x toda vez que for chamada. Quanto mais você
        adicionar a x, mais rápido será o alvo.
      Big Game Animation 3_instruction: |-
        A função "atualize-inimigo" deve funcionar
        como a função "atualize-alvo", exceto pelo fato de o inimigo deve se mover do lado direito
        para o lado esquerdo. Complete a função "atualize-inimigo" para fazer
        o inimigo voar pela tela.
      Big Game Animation 4_instruction: |-
        Nesse ponto do seu jogo, seu inimigo deve
        percorrer a tela da direita para a esquerda e seu alvo deve percorrer a tela
        da esquerda para a direita. Eles nunca voltam para a tela uma vez que tenham saído,
        mas cuidaremos disso depois. Analise seu jogo para ver se ele está
        funcionando como você gostaria e então clique em "Concluir" para seguir em frente.
      Big Game Booleans 1_instruction: |-
        Da última vez que você trabalhou em seu jogo fizemos
        nossos alvo e inimigo voarem pela tela, mas eles nunca
        voltaram. Clique em "Executar" para ver como seu jogo está funcionando agora e depois clique
        em concluir. Vamos fazer os gráficos reaparecerem na tela depois que eles tiverem
        saído.
      Big Game Booleans 2_instruction: |-
        Vá até a seção "Funções" da caixa de ferramentas e complete a função esquerda-segura? para que ela retorne
        verdadeiro se a coordenada de x do inimigo for mais que -50. Se você for bem-sucedido,
        você deve ver o inimigo sair pelo lado esquerdo e retornar pelo lado direito.
      Big Game Booleans 3_instruction: |-
        Agora que você completou esquerda-segura?, vamos preencher
        a direita-segura? - ela deve receber a coordenada de x do alvo e retornar verdadeiro
        se essa coordenada for menor que 450. Uma vez que você tenha completado a direita-segura?,
        você deve ver o alvo sair pelo lado direito da tela e retornar pela
        esquerda.
      Big Game Booleans 4_instruction: |-
        Complete a função na-tela? para que ela verifique se esquerda-segura? e direita-segura?
        são verdadeiras.
      Big Game Booleans 5_instruction: |-
        Nesse ponto do seu jogo, seu inimigo deve percorrer
        a tela da direita para a esquerda, seu alvo deve percorrer a tela da esquerda para
        a direita e eles devem retornar para o lado oposto, repetidamente. Veja
        se seu jogo está funcionando como você gostaria e então clique em
        Concluir para seguir em frente.
      Big Game Collision 1 (copy 1)_instruction: |-
        Da última vez que você trabalhou em seu jogo
        fizemos nossos alvo e inimigo voarem pela tela, mas eles nunca
        voltaram. Clique em Executar para ver como seu jogo está funcionando agora e depois clique
        em concluir. Vamos fazer os gráficos reaparecerem na tela depois que eles tiverem
        saído.
      Big Game Collision 1_instruction: |-
        Até agora você programou um jogo
        com um alvo e um inimigo que se movem, sendo que ambos retornam à tela quando
        saem, e um jogador que responde à entrada do teclado. Clique em Executar para
        ver como seu jogo está funcionando e então vamos para o que
        está faltando - a detecção de colisão!
      Big Game Collision 2_instruction: "Para mover o jogador para cima e para baixo,
        vamos precisar\nusar um bloco condicional para descobrir qual tecla está pressionada
        e responder\nde acordo. Os computadores leem teclas pressionadas como códigos
        numéricos - a seta para\ncima é 38 e a seta para baixo é 40. Você pode consultar
        outros códigos de teclas em seu material.\nEdite a função \"atualizar-jogador\"
        para que ela mova o jogador para cima quando \na seta para cima está pressionada,
        ou para baixo quando a seta para baixo está pressionada."
      Big Game Collision 3_instruction: |-
        Use a fórmula da distância para que a função
        de distância retorne a distância entre as coordenadas centrais do jogador (px,
        py) e as coordenadas centrais de outro objeto (cx, cy).
      Big Game Collision 4_instruction: |-
        Complete a função colisão? para que ela retorne
        verdadeiro se a distância entre dois pontos for menor que 100 pixels.
      Big Game Complete_instruction: |-
        Uma demonstração do projeto Grande Jogo da Álgebra em CC
        completo
      Big Game Final_instruction: |-
        Você conseguiu! Agora seu jogo deve estar
        funcionando completamente. Aproveite seu novo jogo e faça alguns ajustes
        finais. Quando você estiver feliz com o produto final, clique em Concluir e
        você terá a oportunidade de compartilhar um link para o seu jogo. Bom trabalho!
      Big Game Player 1_instruction: |-
        Estamos quase terminando o jogo!
        Da última vez que você trabalhou no seu jogo, você usou booleanos para fazer seu alvo e
        seu inimigo retornarem à tela quando saírem. Clique em Executar para ver como seu
        jogo está agora e então vamos fazer seu jogador se mover para cima e para
        baixo.
      Big Game Player 2_instruction: |-
        Para mover o jogador para cima e para baixo, vamos precisar
        usar um bloco condicional para descobrir qual tecla está pressionada e responder de acordo.
        Os computadores leem teclas pressionadas como códigos numéricos - a seta para cima é 38
        e a seta para baixo é 40. Você pode consultar outros códigos de teclas em seu material. Edite
        a função "atualize-jogador" para que ela mova o jogador para cima quando  a seta para
        cima estiver pressionada e para baixo quando a seta para baixo estiver pressionada.
      Big Game Testing_instruction: |-
        Uma demonstração do projeto Grande Jogo da Álgebra em CC
        completo
      Big Game Vars 1 (copy 1)_instruction: |-
        Vamos começar o seu Grande Jogo!
        Aqui você vai ver um monte de trechos de código para reservar espaço que você eventualmente
        vai substituir pelo seu próprio código, mas por enquanto vamos nos preocupar somente
        em definir as variáveis. Clique em "Executar" para ver como é o jogo com os
        valores-padrão.
      Big Game Vars 1_instruction: |-
        Vamos começar o seu Grande Jogo! Aqui você vai
        ver um monte de trechos de código para reservar espaço que você eventualmente vai substituir
        pelo seu próprio código, mas por enquanto vamos nos preocupar somente em definir as variáveis.
        Clique em "Executar" para ver como é o jogo com os valores-padrão.
      Big Game Vars 2 (copy 1)_instruction: |-
        A primeira etapa para você colocar a sua marca
        nesse jogo é dar a ele um bom título. Clique em editar nas variáveis "título"
        e "subtítulo" e altere-as para algo novo.
      Big Game Vars 2_instruction: |-
        A primeira etapa para você colocar a sua marca
        nesse jogo é dar a ele um bom título. Clique em editar nas variáveis "título" e "subtítulo" e
        altere-as para algo novo.
      Big Game Vars 3 (copy 1)_instruction: |-
        Agora, vamos definir o pano de fundo para seu
        novo jogo. Edite a variável "bg" e selecione uma nova imagem de pano de fundo no
        menu.
      Big Game Vars 3_instruction: |-
        Agora, vamos definir o pano de fundo para seu novo jogo.
        Edite a variável "bg" e selecione uma nova imagem de pano de fundo no menu.
      Big Game Vars 4 (copy 1)_instruction: |-
        Incrível, agora você pode atualizar as variáveis
        para seu jogador, alvo e inimigo. Fique à vontade para brincar com as variáveis
        para deixar o seu jogo do jeito que você quiser. Clique em "Concluir"
        quando estiver pronto.
      Big Game Vars 4_instruction: |-
        Incrível! Agora você pode atualizar as variáveis para
        o jogador, o alvo e o inimigo. Fique à vontade para brincar com todas as variáveis
        e assim deixar seu jogo do jeito que você quer. Clique em "Concluir"
        quando você terminar.
      Brad Spooky House Copy_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |-
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |-
        Construa uma pirâmide de três níveis.
        Não há outras instruções, então simplesmente brinque com as peças até
        conseguir!
      Busy Bee 2_instruction: |-
        Essa abelha tem muito trabalho a fazer! Você notou algum
        padrão que possa usar para simplificar seu código?
      Busy Bee_instruction: |-
        Essa abelha tem muito trabalho a fazer! Você notou algum
        padrão que possa usar para simplificar seu código?
      C3-Farmer While Loops 1_instruction: |-
        Mova-me para o buraco e preencha-o com
        duas pás de terra, usando o bloco "preencha".
      C3-Farmer While Loops 2_instruction: |-
        Mova-me para o monte de terra e remova-o
        com 5 pás de terra, usando o bloco "remova".
      C3-Farmer While Loops 3_instruction: |-
        Mova-me para o monte e remova toda a
        terra, então mova-me para o buraco e preencha-o completamente. Dica: use o menor número de
        blocos possível.
      C3-Farmer While Loops 4_instruction: |-
        Uau, eu encontrei um buraco realmente fundo! Eu não
        sei quantas pás de terra são necessárias. Você pode escrever um programa que preencha-o
        até que o solo fique nivelado. Dica: dessa vez, tente usar o laço enquanto.
      C3-Farmer While Loops 5_instruction: |-
        Uau, agora há dois buracos profundos! Você
        pode escrever um programa que os preencha até o que o solo fique nivelado?
      C3-Farmer While Loops 6_instruction: |-
        Uau, agora há um grande monte de terra!
        Você pode escrever um programa que remova a terra até que o solo fique nivelado?
      C3-Farmer While Loops 7_instruction: |-
        Uau, agora há três grandes montes de terra!
        Você pode escrever um programa que remova cada um deles até que o solo fique nivelado?
      C3-Farmer While Loops 8_instruction: |2-
         Há um buraco realmente fundo e um monte de terra
        realmente grande. Quantas pás de terra são necessárias para
        tornar o solo plano? Dica: use o laço enquanto para ambos.
      C3-Farmer While Loops Assessment 1_instruction: |-
        Há um monte de buracos e
        montes. Ajude-me a preenchê-los e removê-los para tornar o solo plano.
      CSD Hackathon Pt 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Pt 2_instruction: "(Click to see full instructions)"
      CSD Hackathon Week 1_instruction: "(Click to see full instructions)"
      CSD Hackathon Week 2_instruction: "(Click to see full instructions)"
      CSD U3 Background Discuss_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Background Experiment_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Boolean Modify_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Boolean Modify_2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Boolean Predict_instruction: |-
        What do you think this code will do when
        it is run? Predict what each console.log() command will print, then run the
        program to check your predictions.
      CSD U3 Boolean Predict_2018_instruction: |-
        What do you think this code will
        do when it is run? Predict what each console.log() command will print, then
        run the program to check your predictions.
      CSD U3 Draw Loop Discuss_instruction: |-
        Here's a program that looks pretty
        similar to what you've been writing, but may behave quite differently. You'll
        want to stop and discuss with the class before moving on.
      CSD U3 Draw Loop Experiment_instruction: |-
        Try using some of the other shape
        functions you've learned in the draw loop. What happens when you use randomNumber()
        to generate some of the inputs?You'll want to stop and discuss with the class
        before moving on.
      CSD U3 Expressions calculator_instruction: |-
        Add the numbers 1 through 10. Multiply
        the numbers 1 through 10. Check your answers with a neighbor.
      CSD U3 Frame Rate_instruction: Slow down Gamelab Gary's animation with frameRate()
      CSD U3 Keypress Boolean-2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Keypress Boolean_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Boolean_2018_instruction: |-
        Modify the code so that all of the
        console.log commands print true
      CSD U3 Keypress Watchers_instruction: |-
        Modify the code so that all of the console.log
        commands print true
      CSD U3 Keypress Watchers_2018_instruction: |-
        Modify the code so that all of
        the console.log commands print true
      CSD U3 L5 Freeplay_instruction: |-
        Change the value of petalSize multiple times.
        How does it change your drawing?
      CSD U3 L5 Freeplay_2018_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Mouse Input Bee 2_instruction: Do this
      CSD U3 Mouse Input Bee 2_2018_instruction: Do this
      CSD U3 Random Animation_instruction: |-
        Use randomNumber() to animate Gary's
        mouth.
      CSD U3 Random Choice_instruction: |-
        Use the randomNumber() block to generate
        either 0 or 1
      CSD U3 Random Color_instruction: |-
        Could you use randomNumber() to pick random
        colors as well? Try setting one or more of the channels in the rgb block with
        a random number. What should the maximum value be?
      CSD U3 Random Intro_instruction: |-
        What do you think this code will do when
        it is run? Make a prediction, then run this code 5 - 10 times, recording the
        output each time. Share your results with your neighbor.
      CSD U3 Random Min Max_instruction: |-
        Using console.log() write a program that
        randomly returns a number in a range you define.
      CSD U3 Random Width Height_instruction: |-
        Pick a shape block and use calls to
        randomNumber() in place of one or more of the parameters. Maker sure you run
        it a few times so you can see the effect of randomization.
      CSD U3 Simple Drawing - Animation 2_instruction: |-
        Use randomNumber() on the
        x position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Animation_instruction: |-
        Use randomNumber() on the x
        position and width of your cloud ellipses to introduce a bit of animation.
      CSD U3 Simple Drawing - Background_instruction: |-
        Put all of your code into
        a draw() loop and then add set the background to blue with the background()
        block.
      CSD U3 Simple Drawing - Personal Animation_instruction: DO This
      CSD U3 Sprites intro sprites_instruction: Do This
      CSD U3 Sprites intro sprites_2018_instruction: Do This
      CSD U3 Variable Arithmetic pt2_instruction: |-
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variable Arithmetic_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variable Incrementation pt2_instruction: |-
        Predict: What two numbers
        will be displayed in the console?
      CSD U3 Variable Incrementation_instruction: |-
        Predict: What two numbers will
        be displayed in the console?
      CSD U3 Variables CHALLENGE gamelab gary_instruction: |-
        Use variables to animate
        Game Lab Gary
      CSD U3 Variables Initialize_instruction: |-
        Predict: What will get displayed
        in the console?
      CSD U3 Variables Intro_instruction: |
        Create your own variable, give it a value,
        and display that value in the console.
      CSD U3 Variables Random_instruction: |-
        Predict: What will get displayed in the
        console?
      CSD U3 Variables Reassign pt2_instruction: |-
        Create and assign a new variable
        in a single line.
      CSD U3 Variables Reassign_instruction: |-
        Predict: What will get displayed in
        the console?
      CSD U3 Variables Square Random Loop_instruction: |-
        Test your predictions from
        the last level.
      CSD U3 Variables Square Random_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables Square_instruction: |-
        Change the value "size" initialized
        to make a larger square.
      CSD U3 Variables TEMPLATE square_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables change circle size_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables change circle size_2018_instruction: |-
        Change the value of
        petalSize multiple times. How does it change your drawing?
      CSD U3 Variables create and assign_instruction: |-
        Create and assign size in
        a single line of code.
      CSD U3 Variables draw loop newVars_instruction: |-
        Extend this project to create
        your own random art visualization with variables.
      CSD U3 Variables draw loop rgb_instruction: |-
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables draw loop xy_instruction: |-
        Assign the variables x1 and y1
        random values inside the draw loop and use them to control where the square
        is drawn.
      CSD U3 Variables eyeBrows_instruction: |-
        Predict what will happen when you move
        the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables make a big square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables make a square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      CSD U3 Variables multiple assignments_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2-2018_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules v2_2018_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables naming rules_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      CSD U3 Variables random assignment_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random draw loop_instruction: |-
        Predict what will happen when
        you move the assignment of eyeSize inside the draw loop. Then try it out
      CSD U3 Variables random drawing exemplar_instruction: |-
        Check out this example
        randomized drawing.
      CSD U3 Variables random with assignment_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      CSD U3 Variables random with assignment_2018_instruction: |-
        Change the value
        of petalSize multiple times. How does it change your drawing?
      CSD U3 Variables use value rect_instruction: |-
        Predict: What will get displayed
        in the console?
      CSD U3 Variables write_instruction: |-
        Use the write block to display the value
        of size
      CSD U3 Variables2 expressions in commands_instruction: |-
        Use expressions inside
        a drawing command
      CSD U3 Variables2 expressions in variables_instruction: |-
        Assign the value of
        each expression to a variable and console.log that variable.
      CSD U3 Variables2 expressions_instruction: |-
        Use console.log to display the
        results of each expression. Then create your own.
      CSD U4 - Events Template_instruction: |-
        Add a large red button to your screen
        using Design Mode. (Click for full instructions.)
      CSD U5 black white images pixelation 2_instruction: |-
        Draw a smiley face (click
        here to see image)
      CSD U5 black white images pixelation 3_instruction: |-
        Change the width and height
        sliders to find the image (click here to see more)
      CSD U5 black white images pixelation 4_instruction: |-
        Add eyebrows to the smiley
        face (click here to see the image)
      CSD U5 black white images pixelation 5_instruction: Draw anything you like
      CSD U5 black white images pixelation_instruction: |-
        Complete the X shape by
        typing 0s and 1s
      CSD U6 params modify clouds_instruction: |-
        # Clouds\r
        \r
        This program makes
        the clouds move when you blow on the sound sensor, but it's not finished.\r
        \r
        #
        Do This\r
        * Create a new function `moveCloud(name)` that will move any cloud.\r
          *
        (Hint: you will use almost all the same code as the `moveCloud0` function)\r
        *
        Call your new `moveCloud(name)` function inside the event block, once for
        each cloud name.\r
         * (Hint: this is similar to how the `loopCloud(name)`
        function is called many times.
      CSD U6 params modify clouds_2018_instruction: |-
        # Clouds\r
        \r
        This program
        makes the clouds move when you blow on the sound sensor, but it's not finished.\r
        \r
        #
        Do This\r
        * Create a new function `moveCloud(name)` that will move any cloud.\r
          *
        (Hint: you will use almost all the same code as the `moveCloud0` function)\r
        *
        Call your new `moveCloud(name)` function inside the event block, once for
        each cloud name.\r
         * (Hint: this is similar to how the `loopCloud(name)`
        function is called many times.
      CSD U6 params modify planes_instruction: |-
        # Multi-plane Controller\r
        \r
        This
        program moves the three planes using the board accelerometer and the on-screen
        check boxes.  Right now, only the red plane works.\r
        \r
        # Do This\r
        * Create
        a new `movePlane(name)` function that can move any plane.\r
        * Call the `movePlane(name)`
        function inside the event block, such that it only moves when its checkbox
        is checked.\r
        \r
        _Challenge: Right now the planes move way too fast.  Can
        you figure out how to change the code so they move more slowly?_
      CSD U6 params modify planes_2018_instruction: |-
        # Multi-plane Controller\r
        \r
        This
        program moves the three planes using the board accelerometer and the on-screen
        check boxes.  Right now, only the red plane works.\r
        \r
        # Do This\r
        * Create
        a new `movePlane(name)` function that can move any plane.\r
        * Call the `movePlane(name)`
        function inside the event block, such that it only moves when its checkbox
        is checked.\r
        \r
        _Challenge: Right now the planes move way too fast.  Can
        you figure out how to change the code so they move more slowly?_
      CSDU4 - AppLab - 1_instruction: |-
        Read the documentation for penColor() and
        penWidth() before using them to draw the blue square.
      CSDU4 - AppLab - 2_instruction: |-
        Write a program that acts as a simple calculator.
        (click to see full instructions)
      CSDU4 - AppLab - 3_instruction: |-
        Use console to check the ending value of num.
        (Click to see full instructions)
      CSDU4 - AppLab - 4_instruction: |2-
         Use the Debug Commands to make a list of
        all the values rolled before a 6. (Click to see full instructions)
      CSDU4 - Design Mode - 1_instruction: |-
        Add a button that moves the turtle when
        clicked.  (Click to see full instructions)
      CSDU4 - Design Mode - 10_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSDU4 - Design Mode - 11_instruction: |-
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSDU4 - Design Mode - 12_instruction: |-
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSDU4 - Design Mode - 16_instruction: |-
        Add an event handler for the button
        using the "Insert and show" link in the Design Mode Events tab. (Click to
        see full instructions).
      CSDU4 - Design Mode - 17_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSDU4 - Design Mode - 18_instruction: |-
        Fix the layout of the bullseye game.
        (Click to see full instructions)
      CSDU4 - Design Mode - 2_instruction: |-
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      CSDU4 - Design Mode - 24_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      CSDU4 - Design Mode - 25_instruction: |-
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      CSDU4 - Design Mode - 26_instruction: |-
        Save the age and name of the user in
        variables (Click to see full instructions)
      CSDU4 - Design Mode - 27_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSDU4 - Design Mode - 28_instruction: |-
        Write a greeting to the user when they
        hit 'enter' in the text input, using the 'change' event. (Click to see
        full instructions)
      CSDU4 - Design Mode - 29_instruction: |-
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      CSDU4 - Design Mode - 30_instruction: |-
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSDU4 - Design Mode - 31_instruction: |-
        Set up an event handler to respond to
        keypress events, and display event.key in the console. Hit keys on the keyboard
        to see what happens. (Click to see full instructions)
      CSDU4 - Design Mode - 32_instruction: |-
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      CSDU4 - Design Mode - 33_instruction: |-
        Change the code so the sound will only
        play when the up arrow is pressed. (Click to see full instructions)
      CSDU4 - Design Mode - 4_instruction: |-
        Esse programa tem um problema! Você pode descobrir
        qual? Execute o programa e veja se você pode descobrir a partir das mensagens de erro
        no console qual é o problema. Não há muito código para ver, então você deve ser capaz
        de descobrir o problema simplesmente lendo o código com atenção. Faça uma alteração
        que permita que o programa funcione como esperado.
      CSDU4 - Design Mode - 5_instruction: |-
        Debug the program by verifying your IDs
        are being referenced properly. (Click to see full instructions)
      CSDU4 - Design Mode - 6_instruction: |-
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSDU4 - Design Mode - 7_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSDU4 - Design Mode - 8_instruction: |-
        Move the button to the middle of the
        screen. (Click to see full instructions)
      CSDU4 nameAgeTemplate_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      CSDU6 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 - Arrays - indexPractice_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      CSDU6 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the
        last item in the array to the console. (Click to see full instructions)
      CSDU6 - for loop - color buttons with for_instruction: |-
        Write the contents
        of the array to the screen in numerical order. (Click to see full instructions)
      CSDU6 - for loop - color buttons_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 - for loop - why for_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays rainbow_instruction: |-
        Write the contents of the array to the screen
        in numerical order. (Click to see full instructions)
      CSDU6 arrays random_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select icons_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select rainbow_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays select rainbow_2018_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSDU6 arrays select random_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select random_2018_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select variable_instruction: |-
        Write a program that displays a
        randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays select variable_2018_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      CSDU6 arrays variable_instruction: |-
        Write a program that displays a randomly
        chosen color from the array. (Click to see full instructions)
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |-
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) "
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions) "
      CSP student contact info_instruction: Please enter your email address.
      CSPU5 Add Screens to Chaser Game_instruction: |-
        Recreate the game from the "Chaser
        Game" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)
      CSPU5 Add a 2nd Screen_instruction: |-
        Make a 2 screen app with a black screen
        and a white screen. (Click to see detailed instructions)
      CSPU5 Add full screen image to bg of chaser game_instruction: |-
        Recreate the
        game from the "Chaser Game" with a Welcome Screen and Game Over Screen.
        (Click to see full instructions.)
      CSPU5 Add game over screen_instruction: |-
        Recreate the game from the "Chaser
        Game" with a Welcome Screen and Game Over Screen. (Click to see full instructions.)
      CSPU5 Add onEvent from Design Mode_instruction: |-
        Add an event handler for the
        button using the "Insert and show" link in the Design Mode Events tab. (Click
        to see full instructions).
      CSPU5 Add welcome screen to chaser game_instruction: |-
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      CSPU5 Adding Screens Template_instruction: |-
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      CSPU5 Debugging Overlapping Objects and Screen Events_instruction: |-
        Recreate
        the "Chaser Game" from the last lesson using Design Mode. (Click to see
        full instructions.)
      CSPU5 First Time Console.log_instruction: |-
        Add a 3 console.log messages and
        test them out. (Click to see full instructions.)
      CSPU5 Layering and Deleting in Design Mode_instruction: |-
        Fix the layout of
        the bullseye game. (Click to see full instructions)
      CSPU5 Project - Multi Screen App_instruction: |-
        Create your multi-screen app.
        (Click to see full instructions.)
      CSPU5 Use Console.log to update IDs_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      CSPU5 Use setScreen for first time_instruction: |-
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      CSPU5_AddImageToChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_AddImage_andMakeChaserGame_instruction: |-
        Introdução do comando setPosition!
        Substitua o moveTo no manipulador de eventos de clique do botão para usar setPosition
        para mover o botão para uma posição aleatória quando ele for clicado.
      CSPU5_AddLabelToChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_Debugging predict unexpected behavior - two onEvents to one ID_instruction: |-
        Predict
        what will happen. Once you've made a prediction, run the code to see what
        happens. (Click to see full instructions)
      CSPU5_FinalizeChaserGame_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      CSPU5_Project - Multi Screen App_instruction: |-
        Create your multi-screen app.
        (Click to see full instructions.)
      CSPU5_U3 - Arrays - Demo App_instruction: |-
        Use the "My Favorite Things" app.
        How might this app be making use of an array? (Click to see full instructions)
      CSPU5_U3 - Arrays - appendItem_instruction: |-
        Create an array of odd numbers
        1-11 by using appendItem. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment_instruction: |-
        Use indexes to change the values
        in this array from 1 to 0. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment2_instruction: |-
        Calculate the sum of three values
        stored in an array. (Click to see full instructions)
      CSPU5_U3 - Arrays - assignment3_instruction: |-
        Increase the value of each value
        in the randomly generated array by 1. (Click to see full instructions)
      CSPU5_U3 - Arrays - createFirstArray_instruction: |-
        Create an array of the even
        numbers from 0 to 10 and display its contents with console.log. (Click to
        see full instructions)
      CSPU5_U3 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that
        displays a randomly chosen color from the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings Counting Variable_instruction: |-
        Create a global
        variable for the current index and use it to display the first item in the
        array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings Next_instruction: |-
        Write code that allows the
        user to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings Prev_instruction: |-
        Write code that allows the
        user to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings addItem_instruction: |-
        Write code that allows
        a user to add their own favorite things to the list. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings bounds_instruction: |-
        Add if statements to your
        event handlers that prevent the global index from going out of bounds. (Click
        to see full instructions)
      CSPU5_U3 - Arrays - favThings createArray_instruction: |-
        Create an array of
        words describing your favorite things. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings firstOutput_instruction: |-
        Use setText to display
        the first item in the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings giveIDs_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      CSPU5_U3 - Arrays - favThings keepPlaying_instruction: |-
        Make any other improvements
        you want! (Click to see full instructions)
      CSPU5_U3 - Arrays - indexPractice_instruction: |-
        Write the contents of the array
        to the screen in numerical order. (Click to see full instructions)
      CSPU5_U3 - Arrays - insertingItems_instruction: |-
        Insert items into an array
        to form a complete sentence. (Click to see full instructions)
      CSPU5_U3 - Arrays - insertionErrors_instruction: |-
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      CSPU5_U3 - Arrays - introIndex_instruction: |-
        Display the first and last element
        in the array. Display the number 5 from the array. (Click to see full instructions)
      CSPU5_U3 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      CSPU5_U3 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the
        last item in the array to the console. (Click to see full instructions)
      CSPU5_U3 - Arrays - remove_instruction: |-
        Remove items from an array to form
        a complete sentence. (Click to see full instructions)
      CSPU5_U3 - Arrays - stringsInArrays_instruction: |-
        Write a sentence word by
        word by adding strings to an array. (Click to see full instructions)
      CSPU5_U3 - Canvas - 200dots_instruction: |-
        Add a loop to your program that draws
        200 dots on your canvas. (Click to see full instructions)
      CSPU5_U3 - Canvas - One Dot sprayPaint_instruction: |-
        Write code that redraws
        your image using a dot whose x and y locations use offsetX and offsetY with
        a small random value added. (Click to see full instructions)
      CSPU5_U3 - Canvas - appendToArray_instruction: |-
        Create an array to store each
        event parameter. Append each event parameter to this array within your event
        handler. (Click to see full instructions)
      CSPU5_U3 - Canvas - changeToMouseMove_instruction: |-
        Change your program so
        that dots are drawn at the location of the mouse as the user moves the mouse
        on the canvas. (Click to see full instructions)
      CSPU5_U3 - Canvas - clickToAdd_instruction: |-
        Change your program so that dots
        are added to the canvas when the user clicks on it. (Click to see full instructions)
      CSPU5_U3 - Canvas - delete_instruction: |-
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - draw at click point_instruction: |-
        Change your program so
        that dots are drawn at the location of the mouse click. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - freePlay_instruction: |-
        Extend the functionality of one
        of the effects, or create an entirely new one of your own. (Click to see full
        instructions)
      CSPU5_U3 - Canvas - introCanvas_instruction: |-
        Add a canvas to your app and
        set it to be the active canvas. Then add a large dot to your canvas. (Click
        to see full instructions)
      CSPU5_U3 - Canvas - movementFunction fix Orig_instruction: |-
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      CSPU5_U3 - Canvas - movementFunction_instruction: |-
        Write a function that takes
        the movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      CSPU5_U3 - Canvas - redrawOriginal_instruction: |-
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      CSPU5_U3 - Canvas - redrawRandom_instruction: |-
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      CSPU5_U3 - Canvas - redrawRandom2_instruction: |-
        Write a function that processes
        your array, redrawing every dot with a random size. (Click to see full instructions)
      CSPU5_U3 - Canvas - shiftKey_instruction: |-
        Add an if statement to your event
        handler so dots are only drawn when the shift key is pressed. (Click to see
        full instructions)
      CSPU5_U3 - Canvas - sketch_instruction: |-
        Write code that redraws your image
        using a sketch effect. (Click to see full instructions)
      CSPU5_U3 - Canvas - sprayPaint_instruction: |-
        Update the spray paint code so
        that it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      CSPU5_U3 - Canvas - transparentDots_instruction: |-
        Change the colors of your
        dots so they have a fully transparent stroke and partially transparent fill.
        (Click to see full instructions)
      CSPU5_U3 - Canvas - usingOffsetXY_instruction: |-
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      CSPU5_U3 - Conditional Basics - 6_instruction: |-
        Add a setText after the if
        statement to "Nope. Guess again." (Click to see full instructions)
      CSPU5_U3 - Conditionals - Combine AND OR Simple_instruction: |-
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      CSPU5_U3 - Conditionals - Combine AND OR and NOT_instruction: |-
        Write an if
        statement that uses AND and OR to display "Time to go to school!" if it's
        not the weekend and the user is under 18. (Click to see full instructions.)
      CSPU5_U3 - Conditionals - Simple AND_instruction: |-
        Write an if statement that
        uses AND to display "You are a teenager." if the user enters an age between
        13 and 19. (Click to see full instructions)
      CSPU5_U3 - Conditionals - Simple OR_instruction: |-
        Write an if statement that
        uses OR to display "It's the weekend!" if the user enters a weekend day
        at the prompt. (Click to see full instructions)
      CSPU5_U3 - Design Mode - Console Log_instruction: |-
        Update the ID names and
        `console.log` messages to match the correct button. (Click to see full instructions.)
      CSPU5_U3 - Design Mode - Layers and Delete_instruction: |-
        Fix the layout of
        the bullseye game. (Click to see full instructions)
      CSPU5_U3 - Design Mode - Multi Screens 2_instruction: |-
        Make a 2 screen app
        which can switch back and forth between a black screen and a white screen
        using buttons. (Click to see detailed instructions.)
      CSPU5_U3 - Design Mode - Multi Screens_instruction: |-
        Make a 2 screen app with
        a black screen and a white screen. (Click to see detailed instructions)
      CSPU5_U3 - Design Mode - WTF Console Log_instruction: |-
        Add a 3 console.log
        messages and test them out. (Click to see full instructions.)
      CSPU5_U3 - Design Mode -Recreate Beyond Buttons_instruction: |-
        Recreate the
        game from the "Chaser Game" with a Welcome Screen and Game Over Screen.
        (Click to see full instructions.)
      CSPU5_U3 - Design Mode 1_instruction: |-
        Add a large red button to your screen
        using Design Mode. (Click for full instructions.)
      CSPU5_U3 - Dice - Dropdown and Score_instruction: |-
        Add guess and score to the
        Dice Game (Click to see full instructions)
      CSPU5_U3 - Dice - Dropdown with Strings_instruction: |-
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      CSPU5_U3 - Dice - If_instruction: |-
        Show different die images for the random
        number generated. (Click to see full instructions)
      CSPU5_U3 - Dice - Nested_instruction: |-
        Use nested if statements to make the
        scoring different for the different game levels. (Click to see full instructions)
      CSPU5_U3 - High Low - Debug_instruction: |-
        Debug the order of the conditionals
        so that it will actually tell the user when their guess is close. (Click to
        see full instructions)
      CSPU5_U3 - High Low - Dropdown_instruction: |-
        Add a dropdown for their guess
        instead of promptNum (Click to see full instructions)
      CSPU5_U3 - High Low - Else if_instruction: |-
        Add an else-if statement in order
        to tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      CSPU5_U3 - High Low - Else_instruction: |
        Add an else statement so that the
        program will tell the user when they are right and when they are wrong. (Click
        to see full instructions)\r
      CSPU5_U3 - High Low - If_instruction: |-
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      CSPU5_U3 - Keys - Add Image URLs_instruction: |-
        Add image URLs to your array.
        Replace the text area with an image and setText with setImageURL. Then test
        your app! (Click to see full instructions)
      CSPU5_U3 - Keys - Buttons and Keys_instruction: |-
        Have the program respond the
        same way for both clicking images on the screen and hitting the up and down
        keys on the keyboard. (Click to see full instructions)
      CSPU5_U3 - Keys - Demo App_instruction: |-
        Play with the image scroller. Press
        the left and right arrows to progress through the images.
      CSPU5_U3 - Keys - Final Image Scroller_instruction: |-
        Update the image scroller
        to respond to buttons and key presses. (Click to see full instructions)
      CSPU5_U3 - Keys - Functions_instruction: |-
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      CSPU5_U3 - Keys - Key Up and Down_instruction: |-
        Try out the keyup and keydown
        events to see how they are different from keypress. (Click to see full instructions)
      CSPU5_U3 - Keys - Multiple Keys_instruction: |-
        Play a different sound when the
        down arrow is pressed. (Click to see full instructions)
      CSPU5_U3 - Loops -  Complex Condition_instruction: |-
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      CSPU5_U3 - Loops - 1_instruction: |-
        Change the condition for the while loop
        to check if the variable num is less than 90. (Click to see full instructions)
      CSPU5_U3 - Loops - 10_instruction: |-
        Write a program that simulates the rolling
        of two dice. Roll the dice repeatedly until the sum of the dice is either
        7 or 11.
      CSPU5_U3 - Loops - 11_instruction: |-
        Fix the condition so that it keeps rolling
        the die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      CSPU5_U3 - Loops - 12_instruction: |-
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      CSPU5_U3 - Loops - 14_instruction: |-
        Change the loop condition to prevent the
        infinite loop and stop counting once the count is past 30. (Click to see full
        instructions)
      CSPU5_U3 - Loops - 15_instruction: |-
        Count the number of times the sum of the
        dice is 12. (Click to see full instructions)
      CSPU5_U3 - Loops - 2_instruction: |-
        Try creating an infinite loop using !=,
        > and <. (Click to see full instructions)
      CSPU5_U3 - Loops - 3_instruction: |-
        Change the if statement to a while loop
        so the program will run until it rolls a 6. (Click to see full instructions)
      CSPU5_U3 - Loops - 4_instruction: |-
        Use the Debug Commands to make a list of
        all the values rolled before a 6. (Click to see full instructions)
      CSPU5_U3 - Loops - 5_instruction: |-
        Add code inside the while loop which will
        update the variable num so that the condition will eventually become false.
        (Click to see full instructions)
      CSPU5_U3 - Loops - 6_instruction: |-
        Fix the problem so the loop will run at
        least once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      CSPU5_U3 - Loops - 7_instruction: |-
        Without adding any lines of code, reorder
        the code so that it prints all the values of num. (Click to see full instructions)
      CSPU5_U3 - Loops - 8_instruction: |-
        Debug which number is not getting printed
        and add a write statement to display that value. (Click to see full instructions)
      CSPU5_U3 - Loops - 9_instruction: |2-
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      CSPU5_U3 - Loops - Minus Minus_instruction: |-
        Change the code to count down
        from 10 to 1. (Click to see full instructions)
      CSPU5_U3 - Loops - Plus Plus_instruction: |-
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      CSPU5_U3 - Loops - Typing in Console_instruction: |-
        Use console to check the
        ending value of num. (Click to see full instructions)
      CSPU5_U3 - Loops - minus = operator_instruction: |-
        Update the code to use the
        -= operator to count from 30 down to 0 by 3's. (Click to see full instructions)
      CSPU5_U3 - Loops - plus and minus = operator_instruction: |-
        Update the code
        to use the += operator. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Add 5_instruction: |-
        Add 5 to all the values in
        an array (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Counting Times_instruction: |-
        Count the number
        of times 5 appears in an array. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Divid by 2_instruction: |-
        Divide every value in
        the array by 2. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Find Min_instruction: |-
        Complete the findMinVal
        function to find and display the smallest value in an array  (Click to see
        full instructions)
      CSPU5_U3 - Loops And Arrays - General Search Param_instruction: |-
        Add a second
        parameter to the search function for the value to search for.  (Click to see
        full instructions)
      CSPU5_U3 - Loops And Arrays - Intro For Loop_instruction: |-
        Add a for loop with
        a console.log inside and test out the 3 pieces of the for loop. (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Linear Search_instruction: |-
        Visit every element
        in the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Loop Array If_instruction: |-
        Use an if statement
        to only display the values in the array that are greater than 5. (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |-
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Make it a Function_instruction: |-
        Move the code
        that searches the list for a 5 into a function called "search". (Click to
        see full instructions)
      CSPU5_U3 - Loops And Arrays - Print Array_instruction: |-
        Use a for loop to print
        out all the values in an array. (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Printing Single True_instruction: |-
        Process the
        array and display a single "true" if the array contains a 5 or a single
        "false" if it does not.  (Click to see full instructions)
      CSPU5_U3 - Loops And Arrays - Search with Boolean Var_instruction: |-
        Make a
        boolean variable to use as a flag to keep track of whether there is a 5 in
        the array. (Click to see full instructions)
      CSPU5_U3 - Movie Bot - Multiple If Sequences_instruction: |-
        Add another set
        of if, else if, and else statements inside the question if statement to check
        for keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      CSPU5_U3 - Movie Bot - Nested Motivation_instruction: |-
        Add a separate set of
        if statements to check for a "?" in the input. (Click to see full instructions)
      CSPU5_U3 - Movie Bot - When Multiple If Statements_instruction: |-
        Add an if
        and else-if statement that checks for please and thank you. (Click to see
        full instructions)
      CSPU5_U3 - Movie Bot - toLowerCase_instruction: |-
        Use the toLowerCase command
        to change all user input into lowercase letters after they enter it. (Click
        to see full instructions)
      CSPU5_U3 - Practice Create Performance Task_instruction: |-
        Design and implement
        your practice Create Performance Task. (Click to see full instructions)
      CSPU5_U3 - Return Values - constrainTurtle_instruction: |-
        Use constrain in this
        simple app to keep the turtle from driving off the screen.  (Click to see
        full instructions)
      CSPU5_U3 - Return Values - debuggingConstrain_instruction: |-
        Correct the error
        in constrain so that it returns the appropriate value.  (Click to see full
        instructions)
      CSPU5_U3 - Return Values - debuggingMaxVal_instruction: |-
        Correct the error
        in maxVal so that it correctly reports the maximum value.  (Click to see full
        instructions)
      CSPU5_U3 - Return Values - useMinVal_instruction: |-
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      CSPU5_U3 - Return Values - wrapTurtle_instruction: |-
        Write wrap in this simple
        app to let the turtle "wrap" to the other side of the screen when it goes
        off.  (Click to see full instructions)
      CSPU5_U3 - Return Values - writeMaxVal_instruction: |-
        Write the function maxVal
        and then use it within the console.log statement to calculate the maximum
        of two values.  (Click to see full instructions)
      CSPU5_U3 - Simulation - 1_instruction: |-
        Use a while loop to "flip a coin 10
        times" and write the values to the screen. (Click to see full instructions)
      CSPU5_U3 - Simulation - 2.1_instruction: |-
        Change your looping condition so
        the simulation runs until there are 5 heads flipped. (Click to see full instructions)
      CSPU5_U3 - Simulation - 2.5_instruction: |-
        Run your simulation to get the full
        10,000 heads! How long did it take? (Click to see full instructions)
      CSPU5_U3 - Simulation - 2_instruction: |-
        Keep track of how many heads (1's)
        your program generates and print the results to the screen. (Click to see
        full instructions)
      CSPU5_U3 - Simulation - 3_instruction: |
        Add functionality that counts how many
        heads in a row are flipped. (Click to see full instructions)\r
      CSPU5_U3 - Simulation - 4_instruction: |-
        Update your while loop's condition
        so the the coin flips until there are three heads in a row. (Click to see
        full instructions)
      CSPU5_U3 - Simulation - 5_instruction: |-
        Change your while loop to run until
        you get a streak of 12 heads. How many flips did it take? (Click to see full
        instructions)
      CSPU5_U3 - Simulation - 6_instruction: |-
        Keep adding to your simulation. What
        do you want to explore next? (Click to see full instructions)
      CSPU5_U3 - User Input - Save getText To Variable_instruction: |-
        Save the age
        and name of the user in variables (Click to see full instructions)
      CSPU5_U3 - Variables - Set to Expression with Other Variables_instruction: |-
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      CSPU5_U3 - Variables - Set to Expression_instruction: |-
        Test out the new expressions.
        (Click to see full instructions)
      CSPU5_U3 Digital Assistant Design_instruction: |-
        Pick a topic for your Digital
        Assistant and create the basic layout with a text input and text area. (Click
        to show full instructions)
      CSPU5_U3 Digital Assistant Set Text_instruction: |-
        Have your digital assistant
        repeat back what the user types and include a canned response. (Click to see
        full instructions)
      CSPU5_U3 Digital Assistant Target_instruction: |-
        Try out a demo of the Digital
        Assistant!
      CSPU5_U3 full clicker demo_instruction: Clicker game - Try it out!
      CSPU5_U3- Variables - Create And Assign_instruction: |-
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      CSPU5_U3- Variables - Text Mode_instruction: |-
        1. Switch to text mode and type
        instructions; 2. drag blocks out into text mode; 3. experiment with code completion
      CSPU5_U3-Design Mode-ID and Event Handler_instruction: |-
        Add an event handler
        for the button using the "Insert and show" link in the Design Mode Events
        tab. (Click to see full instructions).
      CSPU5_U3-Design Mode-Image_instruction: |-
        Recreate the "Chaser Game" from
        the last lesson using Design Mode. (Click to see full instructions.)
      CSPU5_U313 Two Buttons with Ids_instruction: |-
        Predict what will happen. Once
        you've made a prediction, run the code to see what happens. (Click to see
        full instructions)
      CSPU5_U313 drag Two Buttons_instruction: |-
        Run a program with two buttons that
        have the same id to see the warning message in the console. Change the ids
        to make the program run without getting a warning message.
      CSPU5_U3L13 - Debug Id Problem_instruction: |-
        Improve the button by choosing
        a descriptive and meaningful ID. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 1_instruction: |-
        Debug the program by verifying your
        IDs are being referenced properly. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 2_instruction: |-
        Debug the program by properly ordering
        your button commands and event handlers. (Click to see full instructions)
      CSPU5_U3L13 - Debugging 3_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSPU5_U3L13 - Debugging IDs case sensitive_instruction: |-
        Debug the program
        by verifying your IDs are being referenced properly. (Click to see full instructions)
      CSPU5_U3L13 - Project_instruction: |-
        Create your multi-screen app. (Click to
        see full instructions.)
      CSPU5_U3L13 - Turtle Driver Project_instruction: |-
        Create a "turtle driver"
        that includes buttons to move the turtle forward and turn it left and right.
        (Click to see full instructions)
      CSPU5_U3L13 - Turtle move with button_instruction: |-
        Add a button that moves
        the turtle when clicked.  (Click to see full instructions)
      CSPU5_U3L13 eventsDetails_instruction: |-
        Add an event handler to the button
        to move the turtle forward. (Click to see full instructions)
      CSPU5_U3L14 - Assigning Random Value_instruction: |-
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      CSPU5_U3L14 - Mini Calculator embed_instruction: |-
        You will be prompted for
        two numbers, one right after the other.  See what happens.  Enter different
        numbers until you get the idea.
      CSPU5_U3L14 - User Input Division calculator_instruction: |-
        Write a program
        that acts as a simple calculator. (click to see full instructions)
      CSPU5_U3L14 - Variable ReAssignment pt2_instruction: |-
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      CSPU5_U3L14 - concatenate simple_instruction: |-
        Modify the write statement on
        line 3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      CSPU5_U3L14 - moving memory challenge1_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge2_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge3_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge4_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge5_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L14 - moving memory challenge6_instruction: |-
        Using only the variables
        provided, assignment (=) and arithmetic (+ - * /) re-assign the values to
        make the console.log statement display the correct value(s).  (Click to see
        full instructions)
      CSPU5_U3L15 - Add reset button to UpDown app_instruction: |-
        Add code so that
        clicking the start over button will reset the game and send you back to the
        main screen. (Click to see full instructions)
      CSPU5_U3L15 - DEMO up down count practice app_instruction: |-
        Try out the demo
        app (Click to see full instructions)
      CSPU5_U3L15 - Debug forget to update var on reset in UpDown app_instruction: |-
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      CSPU5_U3L15 - Debug if never triggers in UpDown app_instruction: |-
        Run the app
        and use the up and down arrows to try to hit the gameOverScreen. You can't!
        Find and fix the issue in the code. (Click to see full instructions)
      CSPU5_U3L15 - Debugging Simple If-statements =v==_instruction: |-
        Run the app,
        and click the up button. Then restart and run it again, and click the down
        button. Find and fix the issue in the code. (Click to see full instructions)
      CSPU5_U3L15 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      CSPU5_U3L15 - add code to make count down work_instruction: |-
        Write code to
        make the down arrow work as expected. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug forget to set text_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug logic error wrong update_instruction: |-
        Find
        the bug in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - count upDown bug var not created globally_instruction: |-
        Find
        the bug in the program and fix it. (Click to see full instructions)
      CSPU5_U3L15 - global var example count up_instruction: |-
        Look at the code for
        this app and see how the code works to update the count variable when the
        up arrow is clicked. (Click to see full instructions).
      CSPU5_U3L15 - mini clicker update score_instruction: |-
        Add code to update the
        score when the apple is clicked. (Click to see full instructions)
      CSPU5_U3L15 - practice with setText_instruction: |-
        Use setText to complete the
        click event handler for the down arrow. (Click to see full instructions)
      CSPU5_U3L15 - variable scoping problem debugging_instruction: |-
        See if you can
        figure out why the code is no longer working. (Click to see full instructions)
      CSPU5_U3L15 click add lives_instruction: |-
        Add lives to the clicker game that
        decrement by 1 when the background image is clicked (Click to see full instructions)
      CSPU5_U3L15 full clicker app_instruction: |-
        Complete your clicker game! (Click
        to see full instructions)
      CSPU5_U3L16 - challenge say hi app_instruction: |-
        Write a greeting to the user
        when they hit 'enter' in the text input, using the 'change' event. (Click
        to see full instructions)
      CSPU5_U3L16 - chaserApp_instruction: |-
        Create your own "Chaser Game." (Click
        to see full instructions)
      CSPU5_U3L16 - chooseImages_instruction: |-
        Replace the image in your application
        with one of your own. (Click to see full instructions)
      CSPU5_U3L16 - doubleQuotes_instruction: |-
        Save a string inside a variable and
        log it to the console. (Click to see full instructions)
      CSPU5_U3L16 - intro getText_instruction: |-
        Add an event handler to the Submit
        button so that when the button is clicked it will display the name entered
        in the text box to the console.  Use getText to get the value out of the text
        box. (Click to see full instructions)
      CSPU5_U3L16 - introSetPosition_instruction: |-
        Move the buttons to the bottom
        of the screen. (Click to see full instructions)
      CSPU5_U3L16 - introStrings_instruction: |-
        Save a string inside a variable and
        log it to the console. (Click to see full instructions)
      CSPU5_U3L16 - newEventTypes_instruction: |-
        Experiment with different event types
        and select the one that you think is best. (Click to see full instructions)
      CSPU5_U3L16 - outputWithTextArea_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      CSPU5_U3L16 - setPosition to fixed location_instruction: |-
        Introdução do comando setPosition!
        Substitua o moveTo no manipulador de eventos de clique do botão para usar setPosition
        para mover o botão para uma posição aleatória quando ele for clicado.
      CSPU5_U3L16 - setPosition to move button_instruction: |-
        Introdução do comando setPosition!
        Substitua o moveTo no manipulador de eventos de clique do botão para usar setPosition
        para mover o botão para uma posição aleatória quando ele for clicado.
      CSPU5_U3L16 - singleSetPosition_instruction: |-
        Move the button to the middle
        of the screen. (Click to see full instructions)
      CSPU5_U3L16 - text labels_instruction: |-
        Use the textLabel command to replace
        the button in your program with a text label. (Click to see full instructions)
      CSPU5_U3L16 - textInput getText write_instruction: |-
        Add an Text Input box for
        the name and age. (Click to see full instructions)
      CSPU5_U3L16 - toUpper_instruction: |-
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      CSPU5_U3L16 - use images_instruction: |-
        Use the image command to replace the
        text label in your program with an image. (Click to see full instructions)
      CSPU5_U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text\nwhen
        the Play Again button is clicked (Click to see full instructions) "
      CSPU5_U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      CSPU5_U3L16 Mad Lib Student Setup_instruction: |-
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      CSPU5_U3L16 Mad Lib getText_instruction: "Before setting the text area with\nyour
        Mad Libs outline, get the user's text and incorporate their responses.\n(Click
        to see full instructions) "
      CSPU5_U3L16 Mad Lib setText_instruction: "When the Next button is clicked,\nset
        the text area to have the main outline of your How-to Mad Libs (without\nthe
        user's input). (Click to see full instructions) "
      CSPU5_U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase\nstring
        functions to the user's text. (Click to see full instructions) "
      CSPU5_U3L18 comparison operators_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_U3L19 - fix the var name syntax error v2_instruction: |-
        Fix the error
        and get it to print the value of both variables (Click to see full instructions)
      CSPU5_U3L19 - test reassignment of two vars_instruction: |-
        Predict the value
        of a and b. Add console.log statements to find out the actual value of a and
        b. (Click for full instructions)
      CSPU5_U3L19 - three basic ops of variables_instruction: |-
        Add another variable
        called "lives" and set the value to 3. Print the value of the variable to
        the console. (Click to see full instructions)
      CSPU5_U3L19 - variable reassignment challenge pt2_instruction: |-
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      CSPU5_U3L19 - write var and string with same name v2_instruction: |-
        Fix the
        code so that the values of both variables print to the console. (Click to
        see full instructions)
      CSPU5_U3L23 Chatbot Conditionals 1_instruction: |-
        Add if, else if, and else
        statements to detect the movie genres Comedy, Romance, Action, and Horror.
        (Click to see full instructions)
      CSPU5_U3L24 Chatbot Basic Conditionals_instruction: |-
        Check out the project
        description for instructions. (Click to see full instructions.)
      CSPU5_U3L24 Nested Conditionals 1_instruction: |-
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      CSPU5_U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. "
      CSPU5_U3L24 introIncludes_instruction: |-
        Practice using the includes command.
        (Click to see full instructions)
      CSPU5_U3L25 - drag out key event_instruction: |-
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      CSPU5_U3L25 - play sound when up key_instruction: |-
        Change the code so the sound
        will only play when the up arrow is pressed. (Click to see full instructions)
      CSPU5_U3L26 AND operator_instruction: |-
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      CSPU5_U3L26 OR operator_instruction: |-
        Update the if statement to use an OR
        to check for a "?" as well as who, what, where, when, why, how in the user
        input. (Click to see full instructions)
      CSPU5_addDescriptiveIDsToTurtleDriver_instruction: |-
        Improve the button by choosing
        a descriptive and meaningful ID. (Click to see full instructions)
      CSPU5_basic if - DIY secret number_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_basic if - check driving age_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_basic if - voting examle_instruction: |-
        Use console.log to print out the
        different boolean expressions below to see what information they return. (Click
        to see full instructions)
      CSPU5_basic if-else - driving age_instruction: |-
        Use console.log to print out
        the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      CSPU5_clickerGame_v1_template_instruction: |-
        Create your own "Chaser App".
        (Click to see full instructions)
      CSPU5_moveTurtleOnButtonClick_instruction: |-
        Add an event handler to the button
        to move the turtle forward. (Click to see full instructions)
      CSPU5_playWithEventTypes_instruction: |-
        Debug the program by fixing the logical
        error within the program. (Click to see full instructions)
      CSPU5_setPosition to fixed location_instruction: |-
        Introdução do comando setPosition!
        Substitua o moveTo no manipulador de eventos de clique do botão para usar setPosition
        para mover o botão para uma posição aleatória quando ele for clicado.
      CSPU5_turtleDriver_add2ndButton_instruction: |-
        Debug the program by verifying
        your IDs are being referenced properly. (Click to see full instructions)
      Calc Circles of Eval .1_instruction: |-
        Você vai escrever um tipo de código chamado
        Bloco de cálculo, porque cada bloco de código retorna um único valor.
        Altere o ??? nesse código para que o bloco retorne 5.
      Calc Circles of Eval .2_instruction: |-
        Esse bloco de cálculo é uma função
        de multiplicação que recebe dois números e retorna o produto desses números.
        Edite esse bloco para que ele multiplique 2 * 5
      Calc Circles of Eval .3_instruction: |-
        Esta é uma função de Adição que
        usa dois números e retorna sua soma. Use este bloco Adição para somar 3
        + 6.
      Calc Circles of Eval .4_instruction: |-
        Temos aqui um bloco de adição aninhado
        dentro de um bloco de multiplicação. Complete esse código para que ele multiplique 3 por (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |-
        Converta essa instrução para <alguma_forma>
        de cálculo.
      Calc Circles of Eval 1_instruction: |-
        Todo operador matemático (+, -, *,
        /, e assim por diante) pode ser representado por um bloco de cálculo. Altere o
        bloco de cálculo para associá-lo à expressão.
      Calc Circles of Eval 2 (copy 1)_instruction: |-
        Converta essa instrução para <alguma_forma>
        de cálculo.
      Calc Circles of Eval 2_instruction: |-
        Use um bloco de multiplicação para completar
        esse código.
      Calc Circles of Eval 3_instruction: |-
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 4_instruction: |-
        Nesse código estão faltando alguns blocos de
        cálculo - lembre-se de colocar tudo na ordem correta.
      Calc Circles of Eval 5_instruction: |-
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 6_instruction: |-
        Complete os blocos de cálculo para corresponder
        a essa expressão.
      Calc Circles of Eval 7_instruction: |-
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 8_instruction: |-
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 9_instruction: |-
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval Free Play_instruction: |-
        Atividade livre: tente usar um bloco de cálculo
        para escrever algumas equações você mesmo. Como aninhar os blocos de
        formas diferentes interfere no cálculo?
      Calc Define Funcs 1 (copy 1)_instruction: |-
        Agora, vamos ver mais algumas funções
        algébricas. Temos aqui uma função traduzida a partir de uma função algébrica simples
        f(x) = x + 1. O que você poderia esperar como saída dessa função se fosse fornecida uma
        entrada de 15?
      Calc Define Funcs 1_instruction: |-
        Agora, vamos olhar para algumas funções algébricas
        mais tradicionais. Temos aqui uma função traduzida da função algébrica simples
        f(x) = x + 1. O que você esperaria como saída dessa função se fosse fornecida uma
        entrada de 15?
      Calc Define Funcs 2_instruction: |-
        Escreva uma função "f" que recebe um parâmetro
        "x" e retorna x - 10. Teste sua função usando f(15).
      Calc Define Funcs 3_instruction: |-
        Não precisamos chamar nossa função "f"
        toda vez. Crie uma função chamada "vezes-dez" que deve receber um parâmetro
        "x" e retornar x * 10. Quando você criar a função, execute vezes-dez(50).
      Calc Define Funcs 4_instruction: |-
        Escreva uma função chamada "metade" que recebe
        um número "x" e retorna metade desse número. Quando você escrever a função,
        use-a para calcular metade(21)
      Calc Define Funcs 5 - multiply 1_instruction: |-
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |-
        Vamos usar a receita de design para criar uma
        função chamada "cubo" - essa função deve ter um domínio de número, uma imagem
        de número e retornar o número dado elevado à terceira potência. Lembre-se de escrever
        dois casos de exemplo! Quando você terminar, use sua nova função para calcular 7
        elevado ao cubo.
      Calc Design Recipe 2_instruction: |-
        Sua escola está promovendo uma venda de cookies e
        você precisa controlar o custo de produção de cada cookie, o dinheiro pago e o
        lucro total. Os cookies custam R$0,25 cada para produzir, e são vendidos por R$1,50/cookie.\r
        Escreva
        a função `custo`, que recebe o número de cookies que você pretende vender
        e retorna o custo de produção desses cookies.
      Calc Design Recipe 3_instruction: |-
        Escreva a função `vendas` que recebe o
        número de cookies vendidos e retorna a quantidade de dinheiro que os clientes gastaram
        para comprar esses cookies (cada cookie é vendido por R$1,50).
      Calc Design Recipe 4_instruction: |-
        Usando as duas funções que acabamos de escrever, escreva
        a função `lucro`, que recebe o número de cookies que você vendeu e
        retorna o lucro total que você obteve com a venda dos cookies, levando em conta
        o custo para produzi-los.
      Calc Free Play_instruction: |-
        Atividade livre: escreva funções e algoritmos com seu
        próprio design!
      Calc Rocket 1 (copy 1)_instruction: |
        No último desafio você escreveu um contrato
        para a função "altura-foguete" que diz que ela tem uma imagem numérica, um domínio
        numérico, e deve retornar a altura do foguete viajando a 15 m/s
        após um dado número de segundos. Agora vamos escrever um caso de exemplo para a
        altura do foguete em 3 segundos.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |
        No último desafio você escreveu um contrato para a
        função "altura-foguete" que tem um domínio numérico, uma imagem
        numérica, e deve retornar a altura do foguete que viaja a 15 m/s após
        um dado número de segundos. Agora, vamos escrever um caso de exemplo para a altura
        do foguete em 3 segundos.\r
        \r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 2_instruction: |-
        Excelente, vamos fazer mais um exemplo antes de escrever
        a função - qual deve ser a altura do foguete após 30 segundos?
      Calc Vars 1.1_instruction: |-
        Aqui, definimos a variável "idade" como 17 anos.
        Você consegue escrever uma expressão que calcula "idade" em dias?
      Calc Vars 1_instruction: |-
        As variáveis nos permitem dar nome a valores para que possamos
        facilmente nos referir a eles repetidamente ao longo dos nossos programas. Temos aqui uma
        variável chamada "idade". Defina seu valor como sua idade e clique em Executar.
      Calc Vars 2 (copy 1)_instruction: |-
        Aqui, definimos a variável "idade" como
        17 - você pode escrever uma expressão que calcula "idade" em meses?
      Calc Vars 2.1_instruction: |-
        Aqui temos uma variável chamada "idade-em-meses"
        - use a variável "idade" para definir "idade-em-meses"
      Calc Vars 2_instruction: |-
        Você pode escrever uma expressão que calcula "idade"
        em meses?
      Calc Vars 3 (copy 1)_instruction: |-
        Você pode fazer uma adição a esse código para que ele calcule
        quantas horas há em "idade" anos?
      Calc Vars 3_instruction: |-
        Você pode fazer uma adição a esse código para que ele use a variável "idade"
        para calcular a idade em horas?
      Calc Vars 4_instruction: |-
        Também podemos definir variáveis usando outras variáveis.
        Vamos supor que você tenha um irmão que é dois anos mais novo que você - você pode
        definir uma nova variável "idade-irmão" usando sua variável "idade"?
      Choose Your Own Adventure_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of choose your own adventure story in play lab.
      Choose Your Own Adventure_2018_instruction: |-
        You can do whatever you want in
        play lab! Here's an example of choose your own adventure story in play lab.
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Desenhe a reta. Ela tem\n200
        pixels de comprimento. "
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Desenhe a reta. Ela tem
        200\npixels de comprimento. "
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |-
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |-
        Mova a abelha até a flor
        e colete todo o néctar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |-
        Mova a abelha até as flores
        e colete todo o néctar de cada uma.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |-
        Desenhe essa reta usando
        a variável "comprimento". Cada segmento de reta tem 75 pixels de comprimento.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |-
        Desenhe um quadrado usando
        a variável comprimento fornecida.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |-
        O código fornecido desenha
        um triângulo. Faça uma adição para que ele desenhe triângulos em um padrão de hexágono.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |-
        O código fornecido desenha
        um triângulo. Faça uma adição para que ele desenhe triângulos em um padrão de hexágono.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "Isso é como um\nlaço
        \"para\". Complete o código para desenhar seis retas que crescem de 50, 60,
        70,\n80, 90, até 100 pixels de comprimento. "
      Code Studio Puzzle Challenge 14 - Artist_instruction: "Isso é como um\nlaço
        \"para\". Complete o laço para desenhar 4 quadrados que crescem de 80, 100,\n120,
        até 140 pixels. "
      Code Studio Puzzle Challenge 2 - Artist_instruction: |-
        Agora, adicione uma ação de virar e outra
        reta. As retas têm 200 pixels de comprimento.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |-
        Desenhe o quadrado. Cada
        lado tem 100 pixels de comprimento.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |-
        Desenhe o octógono. Cada
        lado tem 100 pixels de comprimento.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |-
        Mova a abelha até
        a flor e colete o néctar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |-
        As flores contêm uma quantidade
        específica de néctar. Mova a abelha até a flor e colete o néctar com o bloco
        obtenha néctar.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |-
        As colmeias podem guardar uma quantidade
        específica de mel. Colete o néctar da flor e produza um pouco de mel.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |-
        Mova a abelha até a flor
        e colete o néctar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |-
        A nuvem pode estar escondendo
        uma flor ou uma colmeia. Apenas colete néctar das flores. Apenas faça mel nas colmeias.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |-
        A nuvem pode estar escondendo
        uma flor ou uma colmeia. Apenas colete néctar das flores. Apenas faça mel nas colmeias.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Desenhe\na
        reta. Cada segmento tem 100 pixels de comprimento. "
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete o\ncódigo
        para desenhar a reta. Cada segmento tem 100 pixels de comprimento. "
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Desenhe a reta.\nCada
        segmento tem 100 pixels. "
      Code Studio Puzzle Challenge Bee Screencast_instruction: |-
        Mova a abelha até as
        flores e pegue todo o néctar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |-
        Desenhe um quadrado
        usando a variável comprimento fornecida.
      Code Studio Puzzle Challenge Var - Artist_instruction: |-
        Desenhe uma reta usando
        uma variável "comprimento" definida como 180.
      Collector Demo_instruction: |-
        Look at all this loot! Help me get as many coins
        as I can so I can improve my farm. I can only use 9 blocks though!
      Course 2 Bee Loops 1_instruction: "Olá, eu sou uma abelha. Você pode me ajudar
        a coletar\no néctar dessas flores? "
      Course 2 Bee Loops 13_instruction: |-
        Avaliação: use o bloco repita para coletar
        todo o néctar.
      Course 2 Bee Loops 2_instruction: |-
        Você consegue realizar a mesma tarefa mais facilmente
        com um laço?
      Course 2 Bee Loops 3_instruction: |-
        Agora, use o novo bloco repita para coletar
        todo o néctar e produzir todo o mel.
      Course 2 Bee Loops 3__instruction: |-
        Você consegue usar um laço para coletar todo
        o néctar?
      Course 2 Bee Loops 4_instruction: |-
        O que acontece se você repetir esta sequência 3
        vezes? Não se esqueça de fazer o mel no final!
      Course 2 Maze Loops 1_instruction: Você pode me levar até o porco usando 5 blocos?
      Course 4 2_instruction: |-
        Agora a abelha só quer néctar. Lembre-se, nem
        todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      Course 4 Artist 1_instruction: "Ajude-me a desenhar uma caixa. (Cada linha tem\n200
        pixels de comprimento) "
      Course 4 Artist 10_instruction: |-
        Clique aqui para ver as instruções completas novamente!\r
        \r
        Apresentamos
        aqui um código para uma forma interessante. O que acontece quando você o repete várias
        vezes, virando a cada repetição? Observe que as viradas nessa forma
        somam 420 graus, o que significa que quando seu artista terminar de desenhar,
        ele estará de frente para uma direção diferente do que quando você começou. Essa nova direção
        é exatamente 60 graus à direita de onde você iniciou.
      Course 4 Artist 11_instruction: |-
        Agora um desafio! Fique à vontade para usar tentativa
        e erro. Não esperamos que você seja perfeito na primeira vez. Quer
        ver mais dicas? Clique aqui!
      Course 4 Artist 12_instruction: |-
        Quer ver o design de inspiração ou as
        dicas? Clique aqui!\r
        \r
        Caso contrário, crie um design você mesmo!
      Course 4 Artist 13_instruction: |-
        Ainda jogando?  Temos aqui uma tela em branco
        na qual você pode projetar o que quiser!
      Course 4 Artist 2_instruction: |-
        Você consegue usar um laço para desenhar o quadrado em cinza? (Cada
        lado mede 300 pixels de comprimento)
      Course 4 Artist 20_instruction: |-
        Ainda jogando?  Temos aqui uma tela em branco na qual
        você pode criar o que quiser!
      Course 4 Artist 3_instruction: |-
        Tente descobrir o que acontece se você executar
        esse código (ou clique em "Executar" para ver). Em seguida, execute-o várias vezes para completar
        o desenho.
      Course 4 Artist 4_instruction: |-
        How many degrees are in a circle?  Fill in
        the repeat block with that number to create a circle of colors.
      Course 4 Artist 5_instruction: |-
        Desenhe a outra metade desse design para que ele
        fique simétrico. Os triângulos são equiláteros e têm 50 pixels de comprimento. Dica:
        talvez você precise executar o código várias vezes para descobrir quais blocos
        precisam ser adicionados.
      Course 4 Artist 6_instruction: |-
        Complete o código para desenhar esses três triângulos
        equiláteros.
      Course 4 Artist 7_instruction: "Agora, aninhe esse laço dentro de outro laço
        para desenhar\n10 triângulos. Isso se chama laço aninhado. Dica: todos os
        10 triângulos completam\numa rotação de 360 graus.  "
      Course 4 Artist 8_instruction: |-
        Desenhe esse sol repetindo todo este bloco de código
        várias vezes.
      Course 4 Artist 8a_instruction: |-
        Lembra-se dessa forma? Agora vamos deixar
        você construí-la sem dar nenhum bloco inicial!
      Course 4 Artist 9_instruction: |
        Repita esse desenho 10 vezes e certifique-se de
        virar a cada forma desenhada. \r
      Course 4 Artist Binary 1_instruction: |-
        Temos aqui uma função que recebe uma string
        binária de 1's e 0's e instrui o artista a mover-se da esquerda para
        a direita, de cima para baixo. O artista vai preencher os quadrados nos quais vir um 1 e ignorar
        os que tiverem um 0.\r
        \r
        Execute este código para ver como
        o artista usa números binários para desenhar este padrão.
      Course 4 Artist Binary 1a_instruction: |-
        Temos aqui uma função que recebe uma string
        binária de 1's e 0's e instrui o artista a mover-se da esquerda para
        a direita, de cima para baixo. O artista vai preencher os quadrados nos quais vir um 1 e ignorar
        os que tiverem um 0.\r
        \r
        Execute este código para ver como
        o artista usa números binários para desenhar este padrão.
      Course 4 Artist Binary 2_instruction: |-
        Qual dessas strings binárias você poderia
        repetir 8 vezes para desenhar esta imagem?
      Course 4 Artist Binary 3_instruction: |-
        Você consegue desenhar este padrão repetindo
        apenas três dígitos binários? (0 e 1)?
      Course 4 Artist Binary 4_instruction: |-
        Cada string binária representa uma linha dessa
        imagem. Você consegue reorganizá-las de forma que elas desenhem um rostinho feliz
        ao invés de um rostinho triste?
      Course 4 Artist Binary 5_instruction: |-
        Que string binária de 6 dígitos, repetida
        11 vezes, vai desenhar essa imagem?
      Course 4 Artist Binary 6_instruction: |-
        Qual é a menor string binária que você
        pode repetir para desenhar esta imagem?
      Course 4 Artist Binary 7_instruction: Termine o desenho.
      Course 4 Artist Binary Free Play 2_instruction: |-
        Atividade livre: aqui temos uma tela em branco
        para você desenhar. Divirta-se!
      Course 4 Artist Binary Free Play 2a_instruction: |-
        Temos aqui uma tela de maior
        resolução para desenhar - 16 pixels por 16 pixels!\r
        \r
        Você viu o que acontece quando
        começamos ser criativos com os bits?
      Course 4 Artist Binary Free Play 2b_instruction: Clique aqui para ver algumas
        dicas.
      Course 4 Artist Binary Free Play_instruction: |-
        Atividade livre: desenhe o que quiser
        com números binários!
      Course 4 Artist Binary pre1_instruction: |-
        Binário é uma forma de representar informações
        usando apenas duas opções. Aqui, vamos usar as opções "desligado" (representada
        pelo número 0) e "ligado" (representada pelo número 1).  \r
        \r
        Foi fornecida
        uma grade de "pixels" pela qual você pode andar e criar
        designs virando em certos quadrados. Você consegue fazer o artista desenhar
        "01010101" em binário na primeira fileira?
      Course 4 Artist Binary ryan_instruction: |-
        Binário é uma forma de representar informações
        usando apenas duas opções. Aqui, vamos usar as opções "desligado" (representada
        pelo número 0) e "ligado" (representada pelo número 1).  \r
        \r
        Foi fornecida
        uma grade de "pixels" pela qual você pode andar e criar
        designs virando em certos quadrados. Você consegue fazer o artista desenhar
        "01010101" em binário na primeira fileira?
      Course 4 Artist For  Functions 10_instruction: |-
        Vamos acelerar um pouco,
        você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte!
      Course 4 Artist For  Functions 11_instruction: |-
        Vamos acelerar um pouco,
        você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte!
      Course 4 Artist For Loops 1_instruction: |-
        Use um bloco "repita" para desenhar este triângulo
        que tem 50 pixels de largura.
      Course 4 Artist For Loops 10_instruction: |-
        Atividade livre! Divirta-se desenhando
        o que quiser com os blocos que você aprendeu a usar
      Course 4 Artist For Loops 11_instruction: "Você se lembra de quando usamos\numa
        variável para controlar o número de lados de uma forma em uma fase anterior?
        Faremos\na mesma coisa com a variável \"contador\" agora. Esse padrão começa\ncom
        um triângulo e adiciona um lado de cada vez até que seja desenhado um decágono
        (10 lados).\nCada lado deve ter 100 pixels de comprimento. "
      Course 4 Artist For Loops 11a_instruction: |-
        Vamos juntar tudo!  Usando
        seu conhecimento sobre laços "para" e sobre variável "contador", crie este desenho
        no qual cada forma tem dois lados a mais que a anterior. Garanta que cada lado
        seja 10 vezes maior que o número de lados do polígono.\r
        \r
        Apenas uma pequena parte
        do código foi fornecida para você.
      Course 4 Artist For Loops 12_instruction: "Isso foi muito legal, mas agora\neu
        gostaria de desenhar uma forma do lado da outra. Desta vez, cada lado tem\n20
        pixels. Use um bloco pule para avançar 40 pixels após cada forma. "
      Course 4 Artist For Loops 13_instruction: |-
        Hmm, essas formas estão ficando cada vez
        maiores! Já não tínhamos resolvido esse problema com variáveis? Como
        podemos usar a variável contador para deixar os lados menores conforme a forma tem
        mais lados? Ao invés de avançar por uma quantidade definida, avance (100 /
        contador) pixels.
      Course 4 Artist For Loops 14_instruction: |-
        Se você virar um pouco mais ou
        um pouco menos do que normalmente faria para uma forma, você conseguirá um efeito legal. Tente
        usar algum código do último nível, mas virando 89 graus para criar
        esta espiral quadrada retorcida.
      Course 4 Artist For Loops 15_instruction: |-
        Atividade livre: tente fazer alguns desenhos
        usando laços para. Adicionamos algumas variáveis genéricas para você
        usar também.
      Course 4 Artist For Loops 2_instruction: |-
        Eu coloquei o código para desenhar
        um triângulo dentro de um laço para que conta de 50 até 100, de 10 em 10. NOTA: Não deixe de ver
        o código antes de clicar em "Executar".
      Course 4 Artist For Loops 3_instruction: |
        Use o desafio anterior como referência
        para fazer este desafio. O menor triângulo tem lados de 20 pixels,
        o maior tem lados de 200 pixels, e cada triângulo é 20 pixels maior que o anterior.
      Course 4 Artist For Loops 4_instruction: |-
        Use um laço "para" para desenhar esses quadrados.
        Eles começam com 15 pixels de comprimento, o maior tem 300 pixels de comprimento, e cada quadrado
        é 15 pixels maior que o anterior. Foi fornecida a maior parte do código
        de que você vai precisar - está faltando um bloco, qual?
      Course 4 Artist For Loops 5_instruction: "Você fez um bom trabalho no último
        desafio!\nVamos usar o bloco da variável \"contador\" mais uma vez para desenhar
        esta imagem. "
      Course 4 Artist For Loops 6_instruction: |-
        Atividade livre: tente usar um laço "para"
        para desenhar um padrão crescente de formas com seu próprio design.
      Course 4 Artist For Loops 6a_instruction: |-
        Faça três pequenas alterações no
        código do último nível para conseguir isso!
      Course 4 Artist For Loops 7_instruction: |-
        O que acontece se você remover "Repita 3"
        desse algoritmo, mantendo os blocos "mova" e "vire" no laço
        para? Neste triângulo espiralado, cada lado é 20 pixels mais comprido que o anterior.
      Course 4 Artist For Loops 8_instruction: |-
        Apenas uma pequena alteração no código
        da última imagem pode criar este desenho. Você consegue descobrir qual é
        essa alteração?\r
        \r
        Dica: algo precisa ser removido!
      Course 4 Artist For Loops 8a_instruction: |-
        Apenas uma pequena alteração no código
        da última imagem pode criar esta imagem. Você consegue descobrir qual é essa
        alteração?
      Course 4 Artist For Loops 9_instruction: |-
        Você consegue fazer uma espiral? Avance
        de 1 a 75 pixels, aumentando 1 pixel de cada vez.
      Course 4 Artist For Loops Challenge_instruction: |-
        Você consegue descobrir como
        usar todas as coisas que você aprendeu para criar esta imagem?\r
        \r
        Precisa de uma
        dica? Clique aqui.
      Course 4 Artist For Loops Challenge_a_instruction: |-
        Você consegue descobrir como
        usar todas as coisas que você aprendeu para criar esta imagem?\r
        \r
        Precisa de uma
        dica? Clique aqui.
      Course 4 Artist For Loops inspire_instruction: |-
        Atividade livre - Inspiração: agora você
        aprendeu tudo o que precisa saber para criar um padrão como esse! Se essa
        imagem inspira você, tente fazer algo similar. Caso contrário, crie algo
        você mesmo.\r
        \r
        Precisa de uma dica? Clique aqui.
      Course 4 Artist Functions 1_instruction: |-
        Você consegue desenhar um quadrado com 100
        pixels de comprimento usando um laço?
      Course 4 Artist Functions 10_instruction: |-
        Qual bloco você precisa adicionar para
        que o triângulo fique em cima do quadrado?
      Course 4 Artist Functions 11_instruction: |-
        Veja esse código para desenhar um
        cubo - você consegue movê-lo para dentro de uma função chamada "desenhe um cubo"?
      Course 4 Artist Functions 12.1_instruction: |-
        Vamos criar uma função chamada
        "desenhe um octógono 20" que desenha um octógono no qual cada lado tem 20 pixels
        de comprimento.
      Course 4 Artist Functions 12_instruction: Repita a função quadrado para desenhar
        uma reta
      Course 4 Artist Functions 13.1_instruction: |-
        Agora, vamos criar uma função chamada
        "pule para a parte superior direita" que move o artista para a parte superior direito do octógono
        que você acabou de desenhar para terminarmos esse padrão.\r
        \r
        Dica: para ir para o
        canto superior direito, tente usar um padrão que faz apenas 3/8 do
        octógono.
      Course 4 Artist Functions 13_instruction: |-
        Confira nossa nova função
        "desenhe uma linha de quadrados". Fique à vontade para olhar dentro do bloco da função
        e ver como a construímos. Clique em "Executar" quando estiver pronto para o
        próximo desafio.
      Course 4 Artist Functions 14.1_instruction: |-
        Agora, vamos criar uma função chamada
        "pule para a parte superior direita" que move o artista para a parte superior direita do octógono
        que você acabou de desenhar, assim podemos terminar esse padrão.
      Course 4 Artist Functions 14_instruction: |-
        Excelente! Vamos usar
        sua nova função "desenhe uma linha de quadrados" para desenhar uma forma de quadrado. Lembre-se,
        cada quadrado tem 40 pixels de comprimento.
      Course 4 Artist Functions 15_instruction: 'Vamos acelerar um pouco, você consegue
        desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte! Dica: você terá de virar 144 graus'
      Course 4 Artist Functions 2_instruction: |-
        Você consegue desenhar 3 quadrados com 20 pixels de distância
        entre cada um? Dica: cada quadrado tem 100 pixels de tamanho
      Course 4 Artist Functions 3_instruction: |
        Usando o bloco de função "desenhe um quadrado",
        você consegue desenhar esta imagem? Dica: os quadrados estão a 120 pixels de distância um do outro.\r
      Course 4 Artist Functions 4_instruction: |-
        Você está pronto para criar seu próprio
        "bloco de função"? Clique no bloco "Funções" na caixa de ferramentas, nomeie-o
        como "desenhe um triângulo", e então crie um triângulo como você fez anteriormente
        com os blocos de ação e de laços. Então, clique em salvar e fechar no canto
        superior direito. Dica: crie um triângulo que tenha 100 pixels de comprimento.
        Boa sorte!
      Course 4 Artist Functions 5 OLD_instruction: |-
        Vamos tentar usar nossas duas funções
        para desenhar uma casa - o que precisa ser corrigido neste código para desenhar a casa corretamente?
      Course 4 Artist Functions 5_instruction: |
        Usando o bloco de função "desenhe um quadrado",
        você consegue desenhar esta imagem? Dica: os quadrados estão a 120 pixels de distância um do outro.\r
      Course 4 Artist Functions 6_instruction: |-
        Qual bloco você precisa adicionar para
        que o triângulo fique em cima do quadrado?
      Course 4 Artist Functions 7_instruction: |-
        Você consegue desenhar uma linha de quadrados usando
        uma função Quadrado? Cada quadrado tem 40 pixels de comprimento.
      Course 4 Artist Functions 8_instruction: "Você está pegando o jeito de como\nusar
        os blocos de função? Vamos modificar esse quadrado para que ele tenha 200
        pixels\nde tamanho. Dica: clique em \"editar\" para alterar o tamanho de \"desenhe
        um quadrado\"\nno editor da função. Lembre-se de clicar em \"Salvar e Fechar\"
        para sair do\neditor da função. "
      Course 4 Artist Functions 9_instruction: |-
        A maior parte do código para
        criar uma função foi dada a você. Contudo, parece que algo está faltando. Você consegue
        completar este bloco de função?
      Course 4 Artist Functions Inspiration_instruction: |-
        Clique aqui para ver as dicas
        novamente.
      Course 4 Artist Functions challenge_instruction: |-
        Clique aqui para ver as dicas
        novamente.
      Course 4 Artist Functions inspire_instruction: |-
        Clique aqui para ver a figura
        de inspiração novamente.
      Course 4 Artist Inspire_instruction: |-
        Quer ver o design de inspiração ou as
        dicas? Clique aqui!\r
        \r
        Caso contrário, crie um design você mesmo!
      Course 4 Artist Params 1_instruction: |-
        Vamos editar uma função que desenha um
        quadrado com lados de 50 pixels
      Course 4 Artist Params 10_instruction: "Você pode chamar funções de dentro\nde
        outras funções! Usando sua função \"forma\" como base, crie 3 formas\nde casa,
        cada uma 20 pixels maior que a anterior, começando com um comprimento de 50
        pixels. Usar\num laço com contador pode ser útil. "
      Course 4 Artist Params 11_instruction: |-
        Que tal uma função chamada "cata-vento"
        que recebe três parâmetros - "lados," "comprimento" e "repita"? Você pode
        calcular o quanto virar depois de cada forma usando os mesmos cálculos que você usou
        para descobrir as ações de virar para uma forma de "lados". Você consegue recriar esta imagem?
        Dica: cada forma tem 100 pixels de comprimento.
      Course 4 Artist Params 12_instruction: |-
        Use sua função "cata-vento" para desenhar
        cada uma dessas formas. O comprimento do lado de cada imagem é 50.
      Course 4 Artist Params 13_instruction: |-
        Atividade livre: aqui estão as funções que você escreveu
        e mais algumas com as quais você pode brincar. Desenhe alguma coisa incrível!
      Course 4 Artist Params 2_instruction: |-
        Essa função triângulo seria muito mais útil
        se pudesse desenhar triângulos de tamanhos diferentes. Foi adicionado
        um parâmetro para o comprimento da reta, mas ele ainda não faz coisa alguma. Você pode atualizar
        a função para que ela use o parâmetro "comprimento" para desenhar cada lado?
        Os tamanhos dos triângulos são 150 pixels, 75 pixels e 25 pixels.
      Course 4 Artist Params 3_instruction: "Incrível! Você consegue desenhar cada
        um desses triângulos\ncom essa nova função? O primeiro tem 25 pixels de comprimento,
        o segundo\ntem 50 e o terceiro tem 75. "
      Course 4 Artist Params 4_instruction: |-
        Você consegue adicionar uma nova função chamada quadrado?
        Ela também deve receber um parâmetro comprimento, como a função triângulo. Dessa vez,
        desenhe 3 quadrados, de 25, 50, e 75 pixels de comprimento, separados por 100 pixels.
      Course 4 Artist Params 5_instruction: |
        Use suas duas novas funções para desenhar
        esta imagem. Para facilitar, você pode usar um laço com um parâmetro "contador".
      Course 4 Artist Params 6_instruction: "Vamos editar essa função \"desenhe uma
        forma\".\nEla já tem um parâmetro \"comprimento\". Agora, vamos editar a função
        para adicionar também\num parâmetro \"lados\". Lembre-se de que o ângulo para
        virar para uma determinada forma é\n360 dividido pelos lados que ela tem.
        Dica: o triângulo tem 100 pixels de comprimento, o hexágono tem 25 pixels
        e o quadrado tem 50 pixels. "
      Course 4 Artist Params 7_instruction: "Você consegue desenhar essas formas,
        preenchendo\no \"???\"? O quadrado e o triângulo têm 100 pixels, enquanto
        o hexágono\ntem 75 pixels. "
      Course 4 Artist Params 8_instruction: |
        Você consegue descobrir como desenhar esta
        forma? Dica: crie uma nova função com 6 lados chamada hexágono.
      Course 4 Artist Params 9_instruction: |-
        Você se lembra de quando usamos o laço contador,
        mas removemos um laço de dentro? Vamos nos divertir um pouco e usar a função "desenhe uma
        forma" com os parâmetros "lados" e "comprimento". Você pode recriar
        essas formas? O contador do quadrado deve ser 5/100/5, o do triângulo deve ser
        10/100/10 e o do hexágono deve ser 2/100/2.
      Course 4 Artist Var 9_instruction: |-
        Aqui está o algoritmo para desenhar um triângulo.
        Modifique-o para que ele use a variável "lados". Substitua o número 3
        pela variável "lados". Dica: lembre-se de usar o bloco "defina os lados para".
      Course 4 Artist Vars 1_instruction: |-
        Vamos desenhar um triângulo equilátero. \r
        \r
        Ele
        deve ter exatamente 100 pixels de comprimento em cada lado.
      Course 4 Artist Vars 10_instruction: |-
        Aqui temos um algoritmo que desenha um triângulo
        a partir de triângulos menores. Você pode modificá-lo para que ele use a variável "lados"
        para desenhar cada triângulo? Olhe para o código e, toda vez que você
        vir o número 3, substitua-o pela variável "lados". Lembre-se de usar
        o bloco "defina os lados".
      Course 4 Artist Vars 11_instruction: |-
        Este é um código mais complicando com os mesmos conceitos que usamos
        no último desafio - qual deve ser o valor atribuído à variável "lados"
        para desenhar essa imagem de quadrados?
      Course 4 Artist Vars 12_instruction: |-
        Vamos definir a variável "lados" como
        5. Quanto mais lados adicionarmos a esse algoritmo, maior será o
        padrão! Observe que existe uma nova variável chamada "comprimento". Agora podemos usá-la onde há
        um bloco "avance". Para essa forma, defina a variável "comprimento" como 75.
      Course 4 Artist Vars 13_instruction: |-
        Quando uma forma tem muitos lados, cada
        lado deve ser menor se você quiser que todo o padrão caiba na tela.
        \r
        Vamos recriar o algoritmo para este padrão incrível, mas, em vez de
        definir manualmente a variável "comprimento", vamos usar um bloco de matemática com
        a variável "lados" dentro para nos certificar de que cada forma se encaixe corretamente. O
        perímetro de cada polígono é de 300 pixels.\r
        Precisa de dicas? Clique aqui.
      Course 4 Artist Vars 14_instruction: |-
        Atividade livre: Veja só! Agora seu algoritmo
        está aninhado dentro de mais um laço. Experimente alterar os valores das
        suas duas variáveis para desenhar padrões legais.\r
        \r
        Para conseguir mais efeito, experimente brincar com
        as cores! Use cores aleatórias dentro dos laços para ver como isso muda seu design.
      Course 4 Artist Vars 2_instruction: |-
        Ao invés de usar "avance por 150,"
        o bloco "mova" está referenciando agora uma variável chamada "comprimento." Você consegue
        definir "comprimento" como150 para desenhar esse novo triângulo?
      Course 4 Artist Vars 3_instruction: "Temos aqui um laço que desenha um quadrado,
        mas\nalgo está faltando. Você pode consertá-lo para que ele use a variável
        \"comprimento\"\npara descobrir qual deve ser o tamanho de cada lado? "
      Course 4 Artist Vars 4_instruction: |-
        Agora eu quero fazer um retângulo que tenha
        a altura duas vezes maior que a largura. Temos uma variável chamada "largura" que
        deve ser definida como 100. Você pode usar os blocos matemáticos para completar o código?
      Course 4 Artist Vars 5_instruction: |-
        Use a variável "lados" para controlar
        quantas vezes esse laço é executado.
      Course 4 Artist Vars 6_instruction: |-
        Temos aqui um código que pode desenhar qualquer polígono
        regular. Há uma nova variável chamada lados que está definida como 4. Você consegue usar
        a variável lados (junto com o bloco matemático) para virar a quantidade certa independentemente
        de quantos lados o polígono tem?\r
        \r
        Clique aqui para voltar para
        a dica!
      Course 4 Artist Vars 7_instruction: |-
        Use o que você aprendeu no último desafio
        para criar esse hexágono usando a variável "lados".\r
        \r
        Percebe como você pode
        alterar apenas um valor para desenhar um triângulo, um quadrado, um pentágono ou um octógono?
      Course 4 Artist Vars 8_instruction: |-
        Atividade livre: Brinque com o número
        de lados desta forma. Você consegue alterar o algoritmo para que o tamanho geral
        da forma permaneça o mesmo, independentemente do número de lados? Dica: Se
        você dividir seu comprimento inicial pelo número de lados, o comprimento de cada
        lado ficará menor à medida que o número de lados crescer.
      Course 4 Artist Vars 9_instruction: |-
        Modifique esse algoritmo para que ele use a variável
        "lados" ao invés de um número fixo para desenhar um triângulo. Não deixe de usar
        o bloco "defina os lados para".
      Course 4 Bee 1_instruction: |-
        A abelha não sabe o que há atrás da nuvem! \r
        \r
        Use o bloco "se" para verificar se há uma flor atrás da nuvem. \r
        \r
        Colete
        néctar uma vez, APENAS se for uma flor.
      Course 4 Bee 2_instruction: |-
        Use o bloco "se/senão" para verificar cada objeto
        e ver se ele é uma flor ou uma colmeia. Se for uma flor, colete um néctar... caso contrário,
        produza um mel!
      Course 4 Bee 3_instruction: |-
        O objeto desconhecido pode ser uma flor ou uma colmeia.
        Desta vez, use o bloco "se/senão" para coletar um néctar se for uma flor,
        senão, produza mel (porque então ele seria uma colmeia).
      Course 4 Bee 4_instruction: |-
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Aqui um bloco se/senão é combinado com outro bloco se/senão para criar
        um bloco "se/senão-se/senão". Complete a solução para coletar a quantidade desconhecida
        de néctar.
      Course 4 Bee 5_instruction: |-
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Adicione um bloco se-senão para criar um bloco se, senão-se, senão. Complete
        a solução para coletar a quantidade desconhecida de néctar.
      Course 4 Bee 6_instruction: |-
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Crie um bloco se, senão-se, senão para coletar a quantidade desconhecida de
        néctar.
      Course 4 Bee 7_instruction: |-
        Use tudo o que você aprendeu até agora para coletar
        todo o néctar. A flor roxa pode ter 1, 2 ou 3 néctares.
      Course 4 Bee For Loops 1_instruction: |-
        Use um laço para coletar o néctar de
        todas as flores.
      Course 4 Bee For Loops 10_instruction: |-
        Se seu laço está fazendo contagem regressiva, o
        incremento é subtraído da sua variável contador a cada repetição. Qual deve ser
        seu incremento para coletar 9, então 6, e então 3 néctares?
      Course 4 Bee For Loops 11_instruction: |-
        O que está errado nesse laço? Veja se
        você consegue arrumá-lo e fazer a abelha coletar todo o néctar.
      Course 4 Bee For Loops 2_instruction: |-
        Temos aqui um novo tipo de laço, chamado de
        laço "para". Esse laço para em particular vai contar de 1 até 5, de 1 em 1, e executar
        o conteúdo do laço a cada contagem. Ajude a abelha a chegar até o néctar.
      Course 4 Bee For Loops 3_instruction: |-
        Você pode resolver esse desafio usando um
        laço "para" para contar de 1 até 3, de 1 em 1. Agora vamos coletar um pouco de néctar!
      Course 4 Bee For Loops 4_instruction: |-
        Colete todo o néctar dessas
        flores. Eu gostaria de saber se existe uma forma mais fácil de fazer isso...
      Course 4 Bee For Loops 5_instruction: "Ah, o laço para deixa isso muito mais
        fácil!\nEstamos usando a variável \"contador\" do laço \"para\" para repetir
        o bloco \"obtenha néctar\"\no mesmo número de vezes que o laço se repete.
        Ufa! São muitas repetições.\nTodo o código que você precisa está aqui, dê
        uma olhada nele e então\nclique em Executar para ver como ele funciona. "
      Course 4 Bee For Loops 6_instruction: |-
        Você também pode usar um laço "para" para fazer contagem
        regressiva. Tente coletar esse néctar fazendo uma contagem regressiva de 5 até 1, de 1 em 1.
      Course 4 Bee For Loops 7_instruction: |-
        Use a variável "contador" do seu laço "para"
        para controlar a distância do movimento horizontal.
      Course 4 Bee For Loops 8_instruction: |-
        Você pode usar a variável do laço para controlar
        o movimento e a coleta de néctar?
      Course 4 Bee For Loops 9_instruction: |-
        O último número em seu laço para é
        chamado de "incremento" e, a cada execução do laço, a variável contador
        é alterada de acordo com o incremento. Tente coletar essas flores usando um incremento
        de 2.
      Course 4 Bee Loops 5 NEW_instruction: |-
        Temos aqui três flores. Você consegue encontrar
        o padrão das instruções que você precisa repetir 3 vezes para coletar o
        néctar com o menor número de blocos?
      Course 4 Bee Loops 5a NEW_instruction: |-
        Agora, use laços para ajudar a abelha a coletar
        todo o néctar em seu caminho até a colmeia com o menor número de blocos possível. Quando
        chegar lá, não se esqueça de produzir mel!
      Course 4 Bee Params 1_instruction: |-
        Escreva uma sequência para coletar todo o
        néctar usando a função "obtenha 3 néctares", que vira, move-se para coletar o néctar e
        então retorna à posição original.
      Course 4 Bee Params 2_instruction: |-
        Modifique a função "obtenha 2 néctares" para
        que ela me faça virar para a direita ao invés da esquerda para chegar às flores.
      Course 4 Bee Params 3 (copy 1)_instruction: |-
        Agora há flores em ambos os
        lados! Talvez você possa usar um parâmetro para que a mesma função funcione para flores
        dos dois lados. Eu adicionei um parâmetro chamado "direção" à função.
        Se o parâmetro "direção" for igual a 0 eu devo virar à esquerda, se ele for 1 eu devo
        virar à direita.
      Course 4 Bee Params 3_instruction: "Agora, há flores em ambos os lados! Adicionamos\nvariáveis
        chamadas \"esquerda\" e \"direita\" para você usar, e adicionamos um\nparâmetro
        chamado \"direção\" para \"obtenha 3 néctares\". Edite \"obtenha 3 néctares\"\npara
        que a abelha vire na direção correta quando as variáveis \"esquerda\" ou\n\"direita\"
        forem passadas para a função.  "
      Course 4 Bee Params 4 (copy 1)_instruction: |-
        Tente usar sua nova função para
        coletar todas as flores. Lembre-se, 0 = esquerda e 1 = direita.
      Course 4 Bee Params 4 - Two WhenRun_instruction: |-
        Tente usar sua nova função
        para coletar todas as flores. Lembre-se de usar as variáveis esquerda e direita.
      Course 4 Bee Params 4 backup_instruction: |-
        Não seria legal se pudéssemos
        coletar todo o néctar com uma única função? Tente adicionar um novo
        parâmetro à função chamado "néctares" para controlar a quantidade de néctar
        a coletar. Você provavelmente vai querer renomear a função também!
      Course 4 Bee Params 4_instruction: |-
        Tente usar sua nova função para coletar
        néctar de todas as flores. Lembre-se de usar as variáveis esquerda e direita.
      Course 4 Bee Params 5_instruction: |-
        Vamos começar do princípio - você pode criar
        uma nova função chamada "obtenha 5 néctares" com um parâmetro de direção?
      Course 4 Bee Params 6 (copy 1)_instruction: |-
        Tente usar sua nova função para
        coletar todo o néctar.
      Course 4 Bee Params 6_instruction: |-
        Não seria legal se pudéssemos coletar
        todo o néctar com uma única função? Tente adicionar um novo parâmetro
        à função chamado "unidades de néctar" para controlar a quantidade de néctar a coletar.
        Você provavelmente vai querer renomear a função também!
      Course 4 Bee Params 7 (copy 1)_instruction: |-
        Tente usar sua nova função para
        coletar todo o néctar.
      Course 4 Bee Params 7_instruction: |-
        Tente usar sua nova função para coletar
        todo o néctar.
      Course 4 Bee Params 8 Clone 2_instruction: |-
        Ah, agora também precisamos lidar
        com mel! Como você poderia atualizar sua função para coletar néctar ou produzir
        mel?
      Course 4 Bee Params 8 Clone_instruction: |-
        Ah, agora também precisamos lidar
        com mel! Como você poderia atualizar sua função para coletar néctar ou produzir
        mel?
      Course 4 Bee Params 8 clone 3_instruction: |-
        Ah, agora também precisamos lidar
        com mel! Como você poderia atualizar sua função para coletar néctar ou produzir
        mel?
      Course 4 Bee Params 8 new_instruction: |-
        Ah, agora também é preciso lidar com o
        mel! Como você poderia atualizar sua função para coletar néctar ou produzir mel?
      Course 4 Bee Params 8_instruction: |-
        Desafio: Agora você também precisa lidar com
        mel! Reescreva sua função para receber tanto o número de unidades de mel quanto o
        número de unidades de néctar. Como você usaria esses números para decidir o que
        fazer?
      Course 4 Bee Params Ex_instruction: |-
        Tente usar sua nova função para coletar
        todo o néctar.
      Course 4 Binary 1_instruction: |-
        Temos aqui uma função que recebe uma string binária
        de 1's e 0's e instrui a fazendeira a se mover da esquerda para a direita,
        de cima para baixo, passando pelos quadrados nos quais o número tem um zero. Execute o
        código fornecido para ver como a fazendeira usa números binários para desenhar uma imagem.
      Course 4 Binary 2_instruction: |-
        Qual string binária você poderia repetir 8 vezes para
        desenhar essa imagem? Dica o número "1" preenche um buraco.
      Course 4 Binary 3_instruction: |-
        Você pode desenhar esse padrão repetindo uma única
        string binária?
      Course 4 Binary 5 (copy 1)_instruction: |-
        Qual string binária, repetida 10 vezes,
        vai desenhar essa imagem?
      Course 4 Binary 5_instruction: |-
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 6 (copy 1)_instruction: |-
        Qual string binária, repetida 10 vezes,
        vai desenhar essa imagem?
      Course 4 Binary 6_instruction: |-
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 7_instruction: |-
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 8_instruction: |-
        Você pode completar a maior parte dessa imagem
        repetindo um número binário de 5 bits - então você vai precisar de mais um número de 4 bits
        para completar o canto inferior direito.
      Course 4 EC 1a_instruction: Sem regras. Sem pistas. Só o desafio!
      Course 4 EC 1b_instruction: Sem regras. Sem pistas. Só o desafio!
      Course 4 EC 2a_instruction: "* * Desafio Supremo: * * Sem regras. Sem pistas.
        Só o desafio!"
      Course 4 EC 2b_instruction: Sem regras. Sem pistas. Só o desafio!
      Course 4 EC 2c_instruction: Sem regras. Sem pistas. Só o desafio!
      Course 4 EC 2d_instruction: Sem regras. Sem pistas. Só o desafio!
      Course 4 EC 3_instruction: "Use o que você aprendeu no nível anterior para desenhar\numa
        imagem como esta. Nota: O código se torna mais simples se você incorporar\nparâmetros. "
      Course 4 EC 3a_instruction: 'Desafio Extremo: Sem regras. Sem pistas. Só o desafio!'
      Course 4 Maze 1_instruction: Leve o Angry Bird até o porco!
      Course 4 Maze 2_instruction: Desvie do TNT!
      Course 4 Maze 3_instruction: 'Programe o Angry Bird para chegar até o porco. '
      Course 4 Maze 4_instruction: |-
        Experimente o bloco "repita" para usar menos blocos
        na resolução deste desafio...
      Course 4 Maze 5_instruction: |-
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      Course 4 Maze 6_instruction: |-
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      Course 4 Play Lab For Loops 2_instruction: |-
        Dessa vez, vamos tentar contar
        os números ímpares de 1 até 100.
      Course 4 Play Lab Params 1_instruction: |-
        Aqui temos uma função chamada "pule"
        que faz seu personagem principal pular 100 pixels. Execute o programa e use
        a função "pule" para coletar todas as bandeiras movendo o cachorro com as setas
        do teclado.
      Course 4 Play Lab Params 10_instruction: "Adicionamos uma última função para\nvocê.\\r\n\\r\nUse
        uma instrução \"se\" para que seu jogo chame a função \"suba de nível\"\nsomente
        quando \"pontos_jogador\" for maior que um determinado número.\\r\n\\r\nPor\nexemplo:
        \"pontos_jogador\" > 6\\r\n\\r\nJogue e chegue até o nível 3\npara ir para
        o próximo desafio. "
      Course 4 Play Lab Params 2_instruction: |
        Agora temos bandeiras que estão altas
        demais para nosso pulo atual! Vamos usar as setas "para cima" e "para baixo"
        para termos diversas alturas de pulos. \r
        \r
        Precisamos adicionar um parâmetro
        à função "pule" chamado "altura". A seta para cima deve fazer o cão
        pular 200 pixels, e a seta para baixo deve fazê-lo pular somente 100 pixels.
      Course 4 Play Lab Params 3_instruction: "Adicionamos outro parâmetro à\nfunção
        pule para que possamos usá-la com outros personagens. Cada personagem é representado\npor
        um número, começando em um. Edite a função \"pule\" para que\nuse o parâmetro
        \"personagem\" para fazer o personagem certo pular. "
      Course 4 Play Lab Params 4_instruction: |-
        Aqui temos uma função chamada "patrulhe".
        \r
        \r
        Edite-a para mover o gato 400 pixels para cima, e então 400 pixels para baixo.
      Course 4 Play Lab Params 5_instruction: |-
        Edite a função chamada "patrulhe" para
        adicionar um parâmetro "personagem", assim podemos chamá-la para todos os personagens
        da tela. Lembre-se, os personagens correspondem aos números 1, 2 e 3.
      Course 4 Play Lab Params 6_instruction: |-
        Adicione outro parâmetro chamado "velocidade"
        à função "patrulhe". Tente usar um bloco "defina velocidade" com o novo parâmetro "velocidade"
        para ajudar o Pinguim a pegar as duas bandeiras antes que os outros personagens peguem
        uma.
      Course 4 Play Lab Params 7_instruction: |-
        Vamos nos divertir! Analise o
        código fornecido para ver se você consegue descobrir o que cada bloco faz.  \r
        Quando
        terminar, use as setas do teclado para controlar o cão e coletar todas as bandeiras.\r
        OBSERVAÇÃO:
        Você não precisa fazer nenhuma alteração no programa
      Course 4 Play Lab Params 8_instruction: |-
        Use o bloco "quando o personagem tocar"
        para enviar o cão de volta para a parte superior esquerda SOMENTE se ele tocar em qualquer outro personagem.
      Course 4 Play Lab Params 9_instruction: "Temos aqui nosso jogo de uma fase anterior,\nmas
        a maior parte do código está oculta. Há uma nova função chamada \"marcar_pontos\".\\r\n\\r\nEdite\na
        função para que um novo parâmetro \"pontos\" seja adicionado à variável \"pontos_jogador\".\n\\r\n\\r\nA
        variável \"pontos_jogador\" deve aumentar toda vez que o cão atingir o gato\ncom
        uma torta e diminuir toda vez que o gato atingir o cão com um sanduíche.\\r\n\\r\nObservação:\nQuando
        terminar, clique em \"Executar\" para jogar. Quando o cão marcar 6 pontos,
        você\nvai para o próximo desafio. "
      Course 4 Play Lab Vars 1_instruction: |-
        Desta vez você não precisa escrever código algum, apenas
        clique em "Executar" para jogar! Nesse jogo, você é o cão que está tentando
        coletar mais bandeiras do que o gato. Use a seta para baixo para controlar o cão.
        Pressione "Terminar" quando você terminar de jogar.
      Course 4 Play Lab Vars 2_instruction: |-
        A corrida do último desafio não foi
        muito justa! Altere a variável "velocidade_cão" para garantir que você possa coletar mais
        bandeiras do que o gato. O primeiro a coletar 10 bandeiras vence!
      Course 4 Play Lab Vars 3_instruction: |-
        Use as setas para a esquerda e para a direita para se mover,
        e a seta para cima para pular. Veja se você consegue coletar todas as bandeiras.
      Course 4 Play Lab Vars 4_instruction: |-
        Agora estamos usando uma variável chamada "altura"
        para controlar a altura que o cão pode pular. Atualize a variável "altura" para que
        o cão possa pular alto o suficiente para alcançar todas as bandeiras.
      Course 4 Play Lab Vars 5_instruction: "Vamos criar um jogo! Primeiro precisamos
        de\numa pontuação. Reconstrua o código que você viu no último nível para definir
        a pontuação\ncom valor 10. "
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |-
        Legal, agora temos nossa variável
        pontuação, mas como vamos torná-la útil? Que tal somar à variável
        pontuação toda vez que você acertar o inimigo com uma bola de fogo? Use o evento
        "quando o personagem 2 tocar em alguma coisa" para disparar uma atualização para a pontuação
        quando sua bola de fogo atingir o gato. Você pode incrementar a pontuação fazendo pontuação
        = pontuação + 1. Faça sua pontuação chegar até 10 (um ponto por vez!) para passar de nível.
      Course 4 Play Lab Vars 6_instruction: |-
        Use a seta para a direita para atirar tortas.\r
        \r
        Em
        nosso jogo, como podemos marcar pontos? Adicione 1 à variável "pontos" toda
        vez que o cão atingir o gato com um pedaço de torta. Use o evento "quando o personagem 2 tocar em alguma coisa"
        para acionar uma atualização em sua pontuação. Você pode incrementar sua variável
        definindo "pontos = pontos + 1". Aumente sua pontuação até 10 (um ponto
        de cada vez!) para passar de nível.
      Course 4 Play Lab Vars 7_instruction: |-
        Legal, agora vamos garantir que esse jogo
        não seja muito fácil. Sempre que o cão (personagem 1) for atingido por um sanduíche
        do gato (personagem 2), você deve perder um ponto. Comece com 10 pontos para que
        o jogo não seja muito difícil. Faça sua pontuação cair de 10 para 0 para passar de nível.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |-
        Certo, uma última coisa para
        esse jogo - vamos configurá-lo para que o jogador possa ganhar (ou perder). Use um laço infinito
        para verificar o valor da pontuação - se a pontuação for maior que 20, faça
        o inimigo desaparecer. Se a pontuação for menor que 0, faça o jogador desaparecer.
        Clique em "Terminar" quando o jogo funcionar do jeito que você gostaria.
      Course 4 Play Lab Vars 8_instruction: |-
        Vamos configurar o jogo para que o cão possa
        ganhar (ou perder). Use um laço infinito para para verificar o valor da pontuação - se a pontuação
        for maior que 20, faça o inimigo (o gato) desaparecer. Se a pontuação for
        menor que 0, faça o jogador (o cão) desaparecer. Clique em "Terminar" quando o jogo
        funcionar do jeito que você gostaria.
      Course 4 Play Lab Vars 9_instruction: |-
        Hora da atividade livre! Temos aqui todas as
        variáveis que usamos até agora essa etapa, bem como algumas a mais caso
        você queira usá-las. \r
        \r
        Observe que agora há muitos blocos em nossa
        caixa de ferramentas e eles precisam ser organizados! Aqui, colocamos cada peça em
        uma categoria apropriada. Reserve um tempo para explorar tudo o que está disponível.
        Quando terminar de explorar, crie um jogo ou uma história usando repetições, variáveis
        e eventos.  \r
        \r
        Dica: deslize a tela para baixo para ver todos os comandos na área de trabalho.
      Course 4 Play Lab Vars_instruction: |-
        Certo, uma última coisa para esse jogo
        - vamos configurá-lo para que o jogador possa ganhar (ou perder). Use um laço infinito para
        verificar o valor da pontuação - se a pontuação for maior que 20, faça o inimigo
        desaparecer. Se a pontuação for menor que 0, faça o jogador desaparecer.
      Course 4 Play Labs For Loops 1_instruction: |-
        Vamos fazer o cão falar todos
        os números de 1 a 100. Use um laço "para" e o bloco "contador" para que ele fale o
        a variável "contador" toda vez que o laço for executado.
      Course 4 Play Labs For Loops 2_instruction: |-
        Dessa vez, ajude Olívia, a gata,
        a contar apenas os números ímpares de 1 até 101.
      Course 4 Play Labs For Loops 3_instruction: |-
        Se contarmos números maiores,
        poderemos contar até números ainda maiores no mesmo intervalo de tempo. Tente fazer o pirata Perna de Pau
        contar de 10 até 1.000, contando de 10 em 10.
      Course 4 Play Labs For Loops 4_instruction: |-
        Alterar o incremento pode ser
        útil, mas ainda estamos contando linearmente (cada número está separado pela mesma
        distância do anterior). E se eu quisesse contar exponencialmente? Sem alterar
        as configurações desse laço para, você pode contar 1, 4, 9 , 16, 25... (contador
        ao quadrado)?
      Course 4 Play Labs For Loops 4a_instruction: |-
        Agora, vamos combinar as variáveis
        da Fase 7 com sua variável "contador" para fazer algo mágico acontecer.   \r
        \r
        Nesse
        desafio, o cão vai contar de 0 até 1000 usando "incremento".  Defina a variável "incremento"
        como 10 no começo do seu código para ver o que acontece.
      Course 4 Play Labs For Loops 5_instruction: |-
        Na última etapa contamos o
        quadrado de cada número. Tente alterar "contador ^ 2" para "contador ^ 3" para
        contar o cubo de cada número (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 5a_instruction: |-
        Nesse desafio, o cão vai ser seu
        guardião do tempo.\r
        \r
        O cão vai contar de 0 até 30 usando "incremento".  A variável "incremento"
        vai começar com um valor de 1.\r
        \r
        Você consegue fazer com que a cada
        vez que você clicar no cão, o incremento aumente em 2?  Clique na seta para a frente
        para executar o laço para.\r
        \r
        Execute o laço algumas vezes, clicando no cão antes
        de cada vez.
      Course 4 Play Labs For Loops 6_instruction: |-
        Você deve se lembrar de que um número primo
        é qualquer número inteiro que é divisível apenas por ele mesmo e por 1. Use a função "é_primo"
        para falar apenas os números primos de 1 a 100.
      Course 4 Play Labs For Loops 6a_instruction: |-
        O cão vai continuar contando
        com nosso "laço para" usando "incremento", mas dessa vez vamos adicionar o mago
        à mistura. Você consegue alterar o código para que "incremento" aumente em duas unidades
        toda vez que o mago for clicado?\r
        \r
        Atenção! O mago se move rápido!
      Course 4 Play Labs For Loops 7_instruction: |-
        Você poderia usar um laço "para" para me
        ajudar a falar a sequência 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 7a_instruction: |-
        Agora estamos chegando em algum lugar! E
        se começarmos a contar quantas vezes conseguimos clicar no mago antes do cão chegar
        até 30?  \r
        \r
        Termine adicionando blocos ao mago para que toda vez que ele for
        clicado a variável "clicado" aumente por um. Você pode ignorar "incremento"
        por enquanto.\r
        \r
        O cão vai começar a contar quando você clicar em "Executar".
      Course 4 Play Labs For Loops 8_instruction: |-
        Agora, ajude os personagens a se moverem enquanto
        contam  \r
        \r
        O cão deve se mover e contar adicionando 2 (contador + 2) a cada vez. O gato
        vai se mover e contar multiplicando por 2 (contador * 2)  a cada vez. O pinguim
        vai se mover e contar fazendo a potência de 2 (contador ^ 2) a cada vez.  Quem vai chegar
        primeiro à bandeira?
      Course 4 Play Labs For Loops 8a_instruction: |-
        Para terminar nosso jogo, precisamos
        trazer de volta a variável "incremento"!    Vamos relacioná-la ao nível do
        jogo.\r
        \r
        1) Guarde o número de vezes que o mago é clicado.\r
        2)
        Se o mago for clicado pelo menos 10 vezes antes do cão contar até 30, aumente
        "incremento" em 1 unidade e comece de novo.\r
        3) Se o mago não for clicado
        pelo menos 10 vezes, o jogo acaba.
      Course 4 Playlab For Loop Freeplay_instruction: |-
        Atividade livre: use tudo que você
        aprendeu até agora para fazer um jogo que inclua um laço "para"!
      Course 4 Playlab For Loops 4b_instruction: "Agora, esses dois personagens vão\ncorrer!
        \\r \n\\r\nCada um deles dará um passo de \"contador\" de cada vez, mas seus\ncontadores
        terão valores diferentes por causa dos laços \"para\".  \\r\n\\r\nVocê\npode
        mudar o incremento em um dos laços para que a corrida termine empatada?"
      Course 4 Playlab For Loops 5b_instruction: |-
        Ajuste o intervalo nestes laços "para"
        para que os dois personagens terminem exatamente no mesmo lugar.
      Course 4 Playlab For Loops 6b_instruction: "Edite este laço \"para\" para criar\num
        jogo que seja divertido!\\r\n\\r\nPressione \"Executar\" e clique na Madame\nUnicórnio
        4 vezes para vencer. "
      Course 4 SCF 1_instruction: |-
        Use as funções sugeridas para desenhar quatro
        linhas de hexágonos. Você percebeu como nossas linhas numeradas são deslocadas para a direita?
      Course 4 SCF 1a_instruction: |-
        Você consegue descobrir como coletar todos esse
        néctar com o menor número possível de blocos?
      Course 4 SCF 1b_instruction: |-
        Você consegue descobrir como coletar todos esse
        néctar com o menor número possível de blocos?
      Course 4 SCF 2_instruction: "Use o que você aprendeu no nível anterior\npara
        desenhar uma imagem como esta. Nota: O código se torna mais simples se você
        incorporar\nparâmetros. "
      Course 4 SCF 3 Fail 1_instruction: Você consegue descobrir como...
      Course 4 SCF 3 Fail 2_instruction: Você consegue descobrir como...
      Course 4 SCF 3_instruction: "Use o que você aprendeu no nível anterior\npara
        desenhar uma imagem como esta. Nota: O código se torna mais simples se você
        incorporar\nparâmetros. "
      Course 4 SCFL 1_instruction: |-
        Resolva este desafio usando o menor número
        possível de blocos.
      Course 4 SCFL 1a_instruction: |-
        Você consegue levar Skrat até a sua bolota usando
        o mínimo possível de blocos?
      Course 4 SCFL 1b_instruction: |-
        Você consegue levar Skrat até a sua bolota usando
        o mínimo possível de blocos?
      Course 4 SCFL 2_instruction: |-
        Resolva este desafio usando o menor número
        possível de blocos.
      Course 4 SCFL 3_instruction: Você consegue descobrir como recriar este desenho?
      Course 4 SCFL 4_instruction: Você consegue descobrir como recriar este desenho?
      Course 4 SCFL 5_instruction: Você consegue descobrir como recriar este desenho?
      Course 4 SCFL 6_instruction: |-
        Você consegue descobrir como recriar esse desenho
        com um único laço?
      Course 4 SCFL 7_instruction: |-
        O artista quer pegar umas ondas! Você consegue
        descobrir como recriar este desenho?
      Course 4 SCFP 1_instruction: |-
        Crie uma função com parâmetros que permitem
        ao artista saltar para trás e para frente por x pixels, e também para cima e para baixo
        por y pixels (usando números positivos e negativos).
      Course 4 SCV 1_instruction: Clique aqui para ver as instruções novamente.
      Course 4 SCV 2_instruction: Clique aqui para ver as instruções novamente.
      Course 4 SCV 3_instruction: |-
        Agora um jogo de pega-pega! Pegue o gato para ganhar 2 pontos.
        Pegue o pinguim para ganhar 3 pontos. Conquiste 10 pontos para ganhar!\r
        Mas atenção,
        quando o gato e o pinguim se encontram, eles tiram seus pontos.\r
        \r
        Adicione os
        blocos necessários para fazer esse jogo funcionar como foi explicado. Como
        você vai fazer o cão se mover em todas as direções usando as setas do teclado? Como
        você vai adicionar pontos quando o cão pegar o gato ou o pinguim? Como você vai subtrair pontos
        quando o gato e o pinguim se tocarem?
      Course 4 SCV 4_instruction: |-
        Resolva este desafio com o menor número de blocos
        possível.
      Course 4 SCV 5_instruction: |-
        Resolva este desafio com o menor número de blocos
        possível.
      Course 4 SCV 6_instruction: Clique aqui para ver as instruções novamente.
      Course 4 SCVP 1_instruction: |-
        Crie uma função com parâmetros que permitem
        ao artista saltar para trás e para frente por x pixels, e também para cima e para baixo
        por y pixels (usando números positivos e negativos).
      Course 4 Variables Assessment_instruction: |-
        Você consegue criar essa imagem usando
        uma variável para os lados? Cada linha deve ter 50 pixels de comprimento.
      Course1BeePuzzle12_instruction: Obtenha três néctares e então fabrique duas
        unidades de mel
      Course1MazeAssessment1_instruction: |-
        Isso é um teste!\r
        Mova-me por um caminho e então
        por outro para me levar até o porco
      Course1MazeAssessment2_instruction: |-
        Isso é um teste!\r
        Mova-me por um caminho e então
        por outro para me levar até o porco.
      CourseF_PlayLab_vars1_instruction: "To play this game, you don't have to write\nany
        code, just hit \"Run\"! "
      CourseF_PlayLab_vars10_instruction: |-
        Free Play time! Here are all of the variables
        we've played with so far in this stage, as well as a few more in case you
        want them. \r
        \r
        Notice that there are now so many blocks in our toolbox
        that they need to be organized!  Here, we've put each piece into an appropriate
        category.  Take some time to explore everything that is available. When you're
        done browsing, make a game or story using repeats, variables, and events.  \r
        \r
        Hint:
        scroll down to see all the commands in the workspace.
      CourseF_PlayLab_vars2_instruction: |-
        The race in that last puzzle wasn't very
        fair! Change the `dog_speed` variable to make sure you can collect more flags
        than Cat. The first to collect 10 flags wins!
      CourseF_PlayLab_vars3_instruction: |-
        Use as setas para a esquerda e para a direita para se mover,
        e a seta para cima para pular. Veja se você consegue coletar todas as bandeiras.
      CourseF_PlayLab_vars4_instruction: |-
        Agora estamos usando uma variável chamada "altura"
        para controlar a altura que o cão pode pular. Atualize a variável "altura" para que
        o cão possa pular alto o suficiente para alcançar todas as bandeiras.
      CourseF_PlayLab_vars5_instruction: "Vamos criar um jogo! Primeiro precisamos
        de\numa pontuação. Reconstrua o código que você viu no último nível para definir
        a pontuação\ncom valor 10. "
      CourseF_PlayLab_vars6_instruction: |-
        Use a seta para a direita para atirar tortas.\r
        \r
        Em
        nosso jogo, como podemos marcar pontos? Adicione 1 à variável "pontos" toda
        vez que o cão atingir o gato com um pedaço de torta. Use o evento "quando o personagem 2 tocar em alguma coisa"
        para acionar uma atualização em sua pontuação. Você pode incrementar sua variável
        definindo "pontos = pontos + 1". Aumente sua pontuação até 10 (um ponto
        de cada vez!) para passar de nível.
      CourseF_PlayLab_vars7_instruction: |-
        Use a seta para a direita para atirar tortas.\r
        \r
        Em
        nosso jogo, como podemos marcar pontos? Adicione 1 à variável "pontos" toda
        vez que o cão atingir o gato com um pedaço de torta. Use o evento "quando o personagem 2 tocar em alguma coisa"
        para acionar uma atualização em sua pontuação. Você pode incrementar sua variável
        definindo "pontos = pontos + 1". Aumente sua pontuação até 10 (um ponto
        de cada vez!) para passar de nível.
      CourseF_PlayLab_vars8_instruction: |-
        Use a seta para a direita para atirar tortas.\r
        \r
        Em
        nosso jogo, como podemos marcar pontos? Adicione 1 à variável "pontos" toda
        vez que o cão atingir o gato com um pedaço de torta. Use o evento "quando o personagem 2 tocar em alguma coisa"
        para acionar uma atualização em sua pontuação. Você pode incrementar sua variável
        definindo "pontos = pontos + 1". Aumente sua pontuação até 10 (um ponto
        de cada vez!) para passar de nível.
      CourseF_PlayLab_vars9_instruction: |-
        Nice, now let's make sure this game isn't
        too easy to play. Any time Dog (actor 1) gets hit by a sandwich from Cat (actor
        2), you should lose a point. Start with 10 points so it's not too hard. Let
        your score drop down from 10 to 0 to pass the level.
      Crack Random Substitution_instruction: Instruções
      Crack a Caesar Cipher_instruction: Instruções
      D_Frozen_nested3_instruction: Let's spin that line of shapes around!
      D_Frozen_nested4_instruction: Time to layer those shapes!
      D_Frozen_nested5_instruction: Play with the snowflakes!
      D_Frozen_nested6_instruction: |-
        Draw a stair-step pattern that uses turns between
        75 and 105 degrees.
      D_Frozen_nested7_instruction: |-
        Now, turn around 180 degrees and draw the stair
        pattern again!
      D_Frozen_nested8_instruction: Spin that shape around 5 or 6 times in a circle.
      D_Frozen_nested9_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      ECSPD Binary Odometer_instruction: |-
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |-
        Operadores booleanos (como >, <, =) nos permitem
        comparar valores diferentes, retornando "verdadeiro" ou "falso". Clique em "Executar"
        para ver o que essa expressão retorna.
      Eval Booleans 2_instruction: |-
        Você pode definir os valores para que essa expressão
        seja "verdadeira"?
      Eval Booleans 3_instruction: |-
        A função "comprimento-string" retorna o número
        de caracteres em uma string (incluindo espaços!) - faça esse código retornar
        "verdadeiro".
      Eval Booleans 4_instruction: |-
        Aqui temos um bloco de avaliação chamado E - ele retorna
        verdadeiro se ambos os parâmetros forem verdadeiros, caso contrário ele retorna falso. Edite
        a variável x para que essa expressão retorne verdadeiro.
      Eval Booleans 5_instruction: |-
        Esse bloco OU retorna verdadeiro se algum dos seus parâmetros
        for verdadeiro. Caso contrário, se ambos os parâmetros forem falsos, ele vai retornar falso. Defina
        a variável y com um valor que vai fazer com que a expressão retorne falso.
      Eval Booleans 6_instruction: |-
        Aqui temos mais um bloco booleano chamado NÃO. Esse
        bloco transforma verdadeiro em falso, ou falso em verdadeiro. Se você envolver esse bloco
        de código em um bloco NÃO, ele deve retornar verdadeiro (porque estamos perguntando se as
        duas expressões NÃO produzem valores iguais).
      Eval Booleans Free Play_instruction: |-
        Atividade livre: experimente criar algo
        você mesmo usando booleanos.
      Eval Booleans_instruction: |-
        Booleanos nos permitem comparar valores diferentes,
        retornando "verdadeiro" se eles forem iguais, ou "falso" se eles não forem. O que
        você acha que esse código vai retornar?
      Eval Cond 1_instruction: |-
        O bloco cond verifica as expressões booleanas na
        coluna esquerda, e assim que ele encontra uma que retorna "verdadeiro", ele executa
        o código correspondente na direita. Se nenhuma das expressões retornarem
        "verdadeiro", ele executa o bloco da parte inferior. Atualize a variável "temperatura" para
        que esse bloco retorne "Está certo".
      Eval Cond 2 (copy 1)_instruction: |-
        Essa condição retorna uma forma diferente
        com base no valor da variável "lados" - altere o valor de "lados"
        para que a condição retorne um triângulo.
      Eval Cond 2_instruction: |-
        Essa condição retorna uma forma diferente com base no
        valor da variável "lados" - altere o valor de "lados" para que
        a condição retorne um triângulo.
      Eval Cond 3 (copy 1)_instruction: |-
        Você consegue escrever uma condição que verifica
        a variável "idade" e retorna "idade suficiente para votar e dirigir" se idade >
        17, "idade suficiente para votar" se idade > 15 e "idade insuficiente para dirigir ou votar" se
        nenhuma das condições for verdadeira? Dica: a primeira condição a retornar "verdadeiro" ganha
        - lembre-se de colocar as condições na ordem certa.
      Eval Cond 3_instruction: |-
        Você pode escrever uma condição que verifica a variável
        "idade" e retorna "idade suficiente para votar e dirigir" se idade > 17, "idade suficiente
        para votar" se idade > 15 e "idade insuficiente para dirigir ou votar" se nenhuma das condições
        for verdadeira? Dica: a primeira condição a retornar "verdadeiro" ganha - lembre-se de
        colocar as condições na ordem certa.
      Eval Cond 4_instruction: |-
        Podemos usar a função "string=?" para criar condições
        que respondam à entrada de texto. Aqui temos uma função chamada "forma verde" que
        recebe um parâmetro string para a forma. Complete as condições para que a
        forma correta seja desenhada quando a função for executada com "círculo", "triângulo",
        "quadrado" ou "retângulo".
      Eval Cond 5_instruction: |-
        Aqui temos uma função "forma vermelha" semelhante com um
        parâmetro adicional para o tamanho. Complete as condições para que a imagem correta
        seja desenhada para "círculo", triângulo" e "estrela".
      Eval Cond 6_instruction: |-
        Escreva uma função chamada crítica-culinária, que recebe
        o nome de um prato e produz uma string que diz o que você acha desse
        prato. Por exemplo, (crítica-culinária "pizza") deve retornar "deliciosa", mas
        (crítica-culinária "ovos estragados") deve retornar "horrível!". Escolha pelo menos dois
        pratos para avaliar, mas você pode escrever mais se quiser! Não se esqueça de
        adicionar uma cláusula "senão"!\r
        Um exemplo - e parte da definição - já foram
        feitos para você!
      Eval Cond 7_instruction: |
        Atividade livre: escreva uma função chamada forma-verde, que
        recebe o nome de uma forma e produz uma forma verde sólida. Sua função
        deve funcionar pelo menos com "círculo", "estrela" e "retângulo", mas você pode adicionar
        outras formas se quiser. Você pode escolher o tamanho de cada forma. Não se esqueça
        de adicionar uma cláusula “senão”!\r
        Um exemplo - e parte da definição - já
        estão prontos para você!\r
      Eval Cond 8_instruction: |
        Atividade livre: suponha que você queira ter um carro aos 21 anos, ou
        ter seu próprio negócio aos 30 anos. Escreva uma função chamada objetivos-vida, que recebe
        uma idade e produz uma string que descreve seus objetivos de vida nessa idade. Não
        se esqueça de adicionar uma cláusula "senão"!\r
      Eval Contracts 1_instruction: |-
        Use a função "estrela" para produzir uma estrela vermelha
        com um raio de 60 pixels
      Eval Contracts 10A_instruction: |-
        Certo, vamos completar esse desafio com um
        quadrado verde que tem 175 pixels de tamanho.
      Eval Contracts 11A_instruction: |-
        Você consegue completar esse desafio e fazer aparecer "Olá,
        mundo" no cartaz?
      Eval Contracts 2_instruction: |-
        Confira a função "rotacione" - você pode
        usá-la para rotacionar esse quadrado verde de 90 pixels em 45 graus?
      Eval Contracts 3_instruction: |-
        Tente usar a função "texto" para escrever esse
        texto azul com tamanho 40.
      Eval Contracts 4 A_instruction: |-
        A função "escala" retorna uma imagem redimensionada
        para um tamanho menor ou maior que a imagem de entrada. Tente redimensionar
        esse círculo por um fator de 10 - como a imagem resultante é diferente do que seria se você
        simplesmente fizesse um círculo desse tamanho em primeiro lugar?
      Eval Contracts 4_instruction: |-
        A função "escala" retorna uma imagem que
        é maior ou menor que a imagem de entrada. Tente escalar esse círculo
        por um fator de 10. Como a imagem retornada é diferente da que você teria se você
        tivesse feito um círculo desse tamanho a princípio?
      Eval Contracts 8A_instruction: |-
        Você pode completar esse desafio? O triângulo grande
        tem 200 pixels de tamanho e é roxo?
      Eval Contracts A_instruction: |-
        Use a função "estrela" para produzir uma estrela
        vermelha sólida com raio de 60 pixels
      Eval Contracts C_instruction: |-
        Confira a função "rotacione" - você pode
        usá-la para rotacionar esse quadrado verde de 90 pixels em 45 graus?
      Eval Contracts E_instruction: |-
        Experimente usar a função "texto" para escrever
        "Olá, mundo!" na cor azul e com tamanho 40.
      Eval Contracts shrink_instruction: "Você pode completar essa imagem usando o
        bloco\nde função \"encolha\"? O raio é 20. "
      Eval Define Funcs 1_instruction: |-
        Aqui temos uma nova função chamada "triângulo-verde"
        que recebe um único número para o tamanho e produz um triângulo verde. Use a
        nova função para criar um triângulo verde de 125 pixels
      Eval Define Funcs 2_instruction: |-
        Vamos olhar dentro da função "triângulo-verde"
        para ver como ela funciona. Você pode modificá-la para que a função "triângulo-verde"
        sempre desenhe triângulos verdes delineados?
      Eval Define Funcs 3_instruction: "Temos aqui o começo de outra nova função\nchamada
        \"círculo-roxo\" com um domínio de um número (o raio) e um intervalo\nde imagem.
        Contudo, o corpo da função está errado, e ela sempre desenha um círculo\nde
        50 pixels de raio ao invés de usar o parâmetro raio. Substitua o número atual\npelo
        bloco \"raio\" do domínio. "
      Eval Define Funcs 4_instruction: |-
        Crie uma nova função chamada "estrela-aqua"
        que tem um domínio de um único número para o raio e retorna uma estrela aqua do
        raio dado. Execute sua nova função com um raio de 75.
      Eval Define Funcs 5_instruction: |-
        Vamos usar a função "estrela-aqua" para
        criar uma fileira com estrelas de tamanhos diferentes. Da esquerda para a direita, as estrelas
        devem ter raios de 25, 50 e 75.
      Eval Define Funcs Test_instruction: "Temos aqui o começo de outra nova função\nchamada
        \"círculo-roxo\" com um domínio de um número (o raio) e um intervalo\nde imagem.
        Contudo, o corpo da função está errado, e ela sempre desenha um círculo\nde
        50 pixels de raio ao invés de usar o parâmetro raio. Substitua o número atual\npelo
        bloco \"raio\" do domínio. "
      Eval Defining Vars Free Play 1_instruction: |-
        Atividade livre: fornecemos uma função
        que preenche sua tela com minha-imagem. Altere minha-imagem para ver que padrão
        você pode fazer.
      Eval Design Recipe .1_instruction: |-
        Temos aqui uma receita de design para uma função
        chamada "quadrado-círculo" com domínio de número e string e intervalo de imagem. Clique
        em Editar para escrever a definição da função (você vai ver dois exemplos fornecidos).
      Eval Design Recipe 1 (copy 1)_instruction: |-
        Vamos escrever uma função
        que desenha um retângulo sólido de qualquer cor e que tenha a largura duas vezes maior que
        sua altura. Comece com um exemplo - desenhe um retângulo verde sólido que tem uma altura de
        100 pixels.
      Eval Design Recipe 1_instruction: |-
        Certo, agora, dado o contrato ret-largo:
        string de números -> imagem, escreva um exemplo - desenhe um retângulo verde sólido que
        tenha altura de 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |-
        Vamos fazer mais um exemplo antes de
        escrever a definição da função - dessa vez, desenhe um retângulo vermelho sólido com
        uma altura de 75 pixels.
      Eval Design Recipe 2_instruction: |-
        Vamos fazer mais um exemplo antes de escrever
        a definição da função - dessa vez, desenhe um retângulo vermelho sólido com uma altura
        de 75 pixels.
      Eval Design Recipe 3_instruction: |-
        A receita de design para "ret-largo" já
        tem um contrato e um exemplo. Você consegue escrever um segundo exemplo e então completar
        a definição? A função "ret-largo" deve produzir um retângulo de uma determinada
        cor e que tenha a largura duas vezes maior que a altura.
      Eval Design Recipe 4_instruction: |-
        Use a receita de design para criar uma função
        "starburst" que tem dois domínios. 1) um número de pontos e 2) um raio.
        "starburst" retorna uma estrela radial amarela com os pontos dados e um raio
        interno que tem metade do tamanho do raio externo.
      Eval Design Recipe 5_instruction: |-
        Usando a receita de design, escreva uma função
        "bandeira-listrada" que recebe duas cores e produz uma bandeira de 250 pixels
        de largura, 150 pixels de altura e com três listras horizontais de cores determinadas, na ordem cor2, cor1 e cor2.
      Eval Design Recipe 6_instruction: |-
        Usando a receita de design, escreva uma função
        "polígono-grande" que deve retornar um polígono de lados e cor determinados que
        cobre a maior parte da janela, independentemente do número de lados. Para garantir
        que o polígono não fique muito grande conforme você aumenta o número de lados, o
        comprimento do lado deve ser inversamente proporcional ao número de lados, com um
        comprimento de (800/lados).
      Eval Design Recipe Free Play_instruction: |-
        Atividade livre: use a receita de design
        para criar algumas funções com seu próprio design
      Eval Free Play_instruction: 'Atividade livre: faça arte com código!'
      Eval Strings Images .1_instruction: |-
        Até agora, lidamos com um único
        tipo de dado, os números. Outro tipo de dados é a string, que é uma combinação
        de letras, números, ou outros caracteres envolvidos entre aspas. Execute a
        string "Olá, mundo!" e veja o que acontece.
      Eval Strings Images .2_instruction: |-
        A função "acrescentar-string" recebe duas
        strings e retorna uma única string combinada. Adicione uma string "universo"
        ao segundo argumento de "acrescentar-string".
      Eval Strings Images 1_instruction: |-
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |-
        Atividade livre: todos os blocos de cálculo estão identificados por cores
        para que você saiba que tipo de dados eles retornam e que tipo de dados eles precisam para seus
        parâmetros. O último parâmetro da função triângulo recebe uma string que
        controla sua cor - experimente algumas cores diferentes para ver o que acontece.
      Eval Strings Images 3_instruction: |-
        Algumas funções podem receber somente um conjunto específico
        de strings, tais como o segundo argumento dessa função círculo, que
        controla seu estilo. Desenhe esse círculo laranja contornado usando o bloco de string
        especial com um menu suspenso para garantir que você use apenas estilos válidos.
      Eval Strings Images 4_instruction: |-
        Tente usar o bloco "retângulo" para desenhar
        esse retângulo vermelho sólido - ele tem 175 pixels de largura e 100 pixels de altura.
      Eval Strings Images 5_instruction: |-
        Tente usar esse novo bloco de cálculo chamado
        "sobreposição" para desenhar um triângulo branco de 100 pixels em cima de um círculo
        vermelho de 200 pixels.
      Eval Strings Images 6_instruction: |-
        Use a função sobreposição para colocar uma estrela
        amarela com raio de 75 pixels em cima de um quadrado azul com 150 pixels de comprimento.
      Eval Strings Images 7_instruction: |-
        O bloco "deslocamento" permite que você mova uma imagem
        com relação a onde ela normalmente seria colocada. Use esse bloco para deslocar o
        quadrado por 100 pixels no eixo y.
      Eval Strings Images 8_instruction: |-
        Temos aqui um tipo diferente de bloco de estrela
        - ele é chamado "estrela-radial" e permite que você desenhe estrelas com qualquer número
        de pontos! Use-o para criar uma estrela laranja sólida com um raio interno de 75
        pixels e um raio externo de 175 pixels.
      Eval Strings Images Free Play_instruction: |-
        Atividade livre: explore os blocos disponíveis
        para criar algo interessante. Lembre-se de compartilhar suas criações favoritas.
      Farmer for Authored Hint testing_instruction: |-
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Farmer for TTS testing_instruction: |-
        Uau, eu encontrei um buraco realmente fundo! Eu não
        sei quantas pás de terra são necessárias. Você pode escrever um programa que preencha-o
        até que o solo fique nivelado. Dica: dessa vez, tente usar o laço enquanto.
      Finalize Your Chaser Game v.1_instruction: |-
        Introducing the setPosition command!
        Replace the moveTo in the button-click event handler to use setPosition to
        move the button itself to a random location when it's clicked.
      Find the Wizard_instruction: |-
        Build whatever you want. This is an example of
        a number-guessing game!
      Find the Wizard_2018_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Food Fight!_instruction: "We've added one last function for you. \\r\n\\r\nUse\nan
        \"if\" statement to program your game to call the \"level_up\" function\nonly
        when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it to level 3\nto move
        to the next puzzle. "
      Food Fight_instruction: |-
        You can make whatever you want in play lab! This is
        an example of a game you can make in play lab.
      FoodFight_instruction: This is an example of a game you can make in play lab.
      FoodFight_2018_instruction: |-
        This is an example of a game you can make in play
        lab.
      Frequency Analysis_instruction: Test
      Function intro Ryan_instruction: Use a função 'construir ponte' duas vezes para
        criar um caminho até a tocha.
      GLJ Drag and fall_instruction: |-
        This Corgi has been a good boy! Drag this carrot
        to him as a special treat.
      GLJ Dragity_instruction: |-
        This Corgi has been a good boy! Drag this carrot
        to him as a special treat.
      GLJ Flappy2_instruction: Click to flap - don't touch the ground!
      GLJr_Behavior_1_instruction: |-
        On your worksheet, write what you think the dog
        will do when you click "Run."
      GLJr_Behavior_2_instruction: |-
        Now you have some new blocks! Try them out and
        see how they work. On your worksheet, write down which ones you tried, and
        what they do.
      GLJr_Behavior_5_instruction: |-
        Now we have two sprites! Use behaviors to make
        the dog jittery and make the cat wander
      GLJr_Behavior_6_instruction: |-
        Let's try some more behaviors - make the dog
        run up and make the cat run right.
      GLJr_Forever_1_instruction: |-
        On your worksheet, write what you think the dog
        will do when you click "Run."
      GLJr_Forever_2_instruction: |-
        Now you have some new blocks! Try them out and
        see how they work. On your worksheet, write down which ones you tried, and
        what they do.
      GLJr_Forever_5_instruction: |-
        Now we have two sprites! Use a loop to make the
        dog jittery and make the cat wander
      'Game Lab Workshop: Random_instruction': |-
        Pick a shape block and use calls
        to randomNumber() in place of one or more of the parameters. Maker sure you
        run it a few times so you can see the effect of randomization.
      Geometric Pattern_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Geometric Sun_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Geometric Sun_2018_instruction: |-
        Project Idea: Create a pattern using geometric
        ideas like shapes. This requires persistence and planning!
      Get To The Goal_instruction: |-
        Build whatever you want. This is an example of
        a number-guessing game!
      'Grade 4 Example PlayLab Project #1_instruction': |-
        Take a look at this project.  Do
        you see how it was made?
      'Grade 4 Example PlayLab Project #2_instruction': |-
        Take a look at this project.  Do
        you see how it was made?
      Guess The Number 2_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Guess The Number_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Guess The Number_2018_instruction: |-
        Build whatever you want. This is an example
        of a number-guessing game!
      Harvester Test_instruction: |-
        It's harvest time! But I forgot what crop I planted
        at which tile. Please help me harvest all my crops, no matter how they were
        originally planted!
      Harvesting_instruction: |-
        Uh oh, I lost my map and can't remember what I planted.
        Every sprout could grow up to be corn, beans, or pumpkins. Can you write some
        code to pick all the crops, no matter what they are?
      Infinity_catch_instruction: |-
        Você pode fazer Elsa ("personagem 2") alcançar
        Anna usando as setas do teclado?
      Infinity_finale_instruction: Crie o que quiser e compartilhe!
      Infinity_move_collide_instruction: |-
        Hiro é o "personagem 1". Mova-o em direção a
        Baymax e reproduza um som quando eles se tocarem.
      Infinity_move_directions_instruction: |-
        Baymax é o "personagem 2". Adicione blocos "mova"
        e então mova Baymax usando as setas. Faça com que ele toque os outros dois personagens.
      Infinity_move_right_instruction: |-
        Hiro é o "personagem 1". Use o bloco "mova"
        para mover Hiro para que ele toque Baymax.
      Infinity_repeat_instruction: |-
        Use um bloco "repita infinitamente" para fazer Anna se mover
        400 pixels para cima e para baixo.
      Infinity_say_instruction: Faça Anna dizer "Oi." usando o bloco "diga".
      Infinity_shoot_instruction: |-
        Baymax é o "personagem 2". Faça Baymax lançar um foguete
        em Hiro.
      Infinity_shoot_directions_instruction: |-
        Hiro é o "personagem 3". Faça Hiro lançar
        um projétil em cada um dos quatro personagens. Espere um segundo entre cada
        lançamento.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Toque ainda mais flocos de neve!
      Infinity_touch_four_instruction: |-
        Mova Anna para cima, para a esquerda e para a direita para tocar
        cada um dos quatro flocos de neve.
      Infinity_touch_score_instruction: |-
        Faça Anna marcar um ponto quando ela tocar
        em um floco de neve. Depois clique em "Executar" e faça ela tocar uma vez em cada floco de neve.
      Inspirational Artwork_instruction: "Free Play Inspiration: You've now learned\neverything
        you need to know to make a pattern like this! If this picture inspires\nyou,
        try to make something similar. Otherwise, create something all your own.\\r\n\n\\r\nWant
        to know how our inspiration pattern was made? "
      InspirationalArtwork_instruction: |-
        If this picture inspires you, try to make
        something similar. Otherwise, create something all your own.
      InspirationalArtwork_2018_instruction: |-
        If this picture inspires you, try to
        make something similar. Otherwise, create something all your own.
      'Internet Simulator: Broadcast Mode_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: Broadcast_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: Broadcast_2018_instruction': |
        Now use the Internet Simulator
        to send the battleship moves. For setup, join a Room with your group, and
        add ships to your paper board for each opponent. When playing, all communication
        must be done through the tool, so no talking, but have fun!\r
      'Internet Simulator: DNS Mode_instruction': |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_instruction': |-
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: DNS_2018_instruction': |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      'Internet Simulator: Packets_instruction': |-
        Develop a Protocol for Reliably
        Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain only 8 characters\r
        -
        Packets may drop with small probability\r
        - Packets may not arrive in order
      'Internet Simulator: Packets_2018_instruction': |-
        Develop a Protocol for Reliably
        Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain only 8 characters\r
        -
        Packets may drop with small probability\r
        - Packets may not arrive in order
      'Internet Simulator: Routers_instruction': |-
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Routers_2018_instruction': |-
        Send messages with your classmates
        (Click to see full instructions)
      'Internet Simulator: Sending Binary Messages 1_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Binary Messages_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Binary Messages_2018_instruction': "Develop, document,\nand
        test a protocol that allows you to use Internet Simulator to relay a message.\nSee
        the worksheet for more detailed instructions.  "
      'Internet Simulator: Sending Numbers_instruction': |-
        With your partner, develop
        a protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Numbers_2018_instruction': |-
        With your partner,
        develop a protocol or set of rules for communicating a drawing using only
        bits. See the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_instruction': |-
        Work with a partner or in
        a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      'Internet Simulator: Sending Text_2018_instruction': |-
        Work with a partner or
        in a small team to develop a protocol that allows you to send formatted text.
        See the worksheet handed out by your teacher for more detailed instructions!
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: |-
        Desenhe uma pequena reta para cima e uma
        grande para a direita!
      K-1 Artist Loops 1_instruction: Desenhe esta reta usando o movimento para o
        leste 4 vezes.
      K-1 Artist Loops 2_instruction: Agora, desenhe a mesma reta usando um laço.
      K-1 Artist Loops 3_instruction: Você pode repetir esses blocos para desenhar
        6 retas?
      K-1 Artist Loops 4_instruction: |-
        Um laço poderia nos ajudar a desenhar o topo desse
        castelo?
      K-1 Artist Loops 5_instruction: O que você pode repetir 4 vezes para desenhar
        essas escadas?
      K-1 Artist Loops 6_instruction: |-
        São necessários dois laços: um para subir as
        escadas e outro para descer.
      K-1 Artist Loops 7_instruction: Laços podem ajudar você a terminar este padrão.
      K-1 Artist Loops 8_instruction: Esta escada tem degraus mais longos.
      K-1 Artist Loops 9_instruction: Qual é a maneira mais fácil de desenhar as escadas?
      K-1 Artist Loops Free Play_instruction: Atividade livre, desenhe algo divertido!
      K-1 Artist1 1_instruction: Desenhe o pé do homem com uma reta
      K-1 Artist1 10_instruction: |-
        Desenhe e pule para fazer o caminho tracejado até o tesouro
        X
      K-1 Artist1 2_instruction: Desenhe o bigode no gato com duas retas!
      K-1 Artist1 3_instruction: |-
        Desenhe duas retas para o leste e duas retas para o norte para terminar
        a casa!
      K-1 Artist1 4_instruction: Desenhe retas para cima, sobre e para baixo para
        completar o castelo!
      K-1 Artist1 5.5_instruction: |-
        Complete a terceira torre do castelo usando
        retas curtas
      K-1 Artist1 5_instruction: Desenhe o caule desta flor com duas retas!
      K-1 Artist1 6_instruction: Termine a imagem usando um bloco pule!
      K-1 Artist1 7_instruction: |-
        Use o bloco pule para se mover sem desenhar. Pule
        e desenhe uma reta.
      K-1 Artist1 8_instruction: |-
        Desenhe linhas tracejadas usando os blocos pule e
        desenhe
      K-1 Artist1 9_instruction: Desenhe e pule para fazer a reta tracejada
      K-1 Artist1 Assessment 1_instruction: Desenhe as retas pequenas e grandes!
      K-1 Artist1 Assessment 2_instruction: Desenhe as retas pequenas tracejadas!
      K-1 Artist2 1_instruction: Desenhe um quadrado abaixo do triângulo.
      K-1 Artist2 2_instruction: Pule e desenhe um quadrado próximo à casa.
      K-1 Artist2 3_instruction: Desenhe um quadrado sobre o outro quadrado
      K-1 Artist2 4_instruction: Desenhe um retângulo para completar a ponte.
      K-1 Artist2 5_instruction: Desenhe um retângulo para completar os suportes da
        ponte
      K-1 Artist2 6_instruction: Desenhe dois quadrados para criar um retângulo!
      K-1 Artist2 Assessment1_instruction: |-
        Avaliação: desenhe um quadrado ao lado do
        outro quadrado.
      K-1 Artist2 Free Draw_instruction: Desenhe qualquer coisa!
      K-1 Artist2_7_instruction: Desenhe um retângulo para dar uma gaveta à cômoda!
      K-1 Bee 1_instruction: |-
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 10_instruction: Colete quatro néctares e então fabrique duas unidades
        de mel!
      K-1 Bee 11.5_instruction: Colete quatro néctares para fabricar quatro unidades
        de mel!
      K-1 Bee 11_instruction: Colete três néctares e então fabrique uma unidade de
        mel
      K-1 Bee 12_instruction: Colete três néctares e então fabrique duas unidades
        de mel!
      K-1 Bee 13_instruction: Colete três néctares e então fabrique uma unidade de
        mel!
      K-1 Bee 14_instruction: |-
        Leve-me até o néctar e colete-o, leve-me até o mel
        e produza mel!
      K-1 Bee 15_instruction: Colete dois néctares para fabricar duas unidades de
        mel!
      K-1 Bee 2_instruction: |-
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 3_instruction: |-
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 4_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 5_instruction: Colete três néctares e então fabrique três unidades de
        mel!
      K-1 Bee 6_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 7_instruction: Colete três néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 8_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 9_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee Assessment 1_instruction: Colete néctar para fabricar mel!
      K-1 Bee Assessment 2_instruction: Colete néctar para fabricar mel!
      K-1 Bee Loops 1_instruction: Colete o néctar para fabricar mel!
      K-1 Bee Loops 10_instruction: |-
        Colete todo o néctar e faça todo o
        mel.
      K-1 Bee Loops 11_instruction: Colete todo o néctar e o mel!
      K-1 Bee Loops 12_instruction: Colete todo o néctar e todo o mel.
      K-1 Bee Loops 2_instruction: |-
        Use um laço "repita" para mover e então coletar o néctar e
        produzir mel!
      K-1 Bee Loops 3_instruction: |-
        Use três laços "repita" para coletar o néctar
        e
        fabricar o mel!
      K-1 Bee Loops 4_instruction: |-
        Use laços "repita" para obter néctar, produzir
        mel e
        para mover!
      K-1 Bee Loops 5_instruction: Use laços "repita" para obter néctar e mel!
      K-1 Bee Loops 6_instruction: Use um laço "repita" para coletar néctar, fabricar
        mel, e para mover!
      K-1 Bee Loops 7_instruction: Colete o néctar e produza mel!
      K-1 Bee Loops 8_instruction: Colete o néctar e produza mel!
      K-1 Bee Loops 9_instruction: Colete todo o néctar e produza todo o mel.
      K-1 Bee Loops Assessment 1_instruction: |-
        Obtenha néctar para produzir mel e use laços
        para mover!
      K-1 Bee Loops Assessment 2_instruction: Colete néctar para fabricar mel usando
        laços!
      K-1 Bee Puzzle 12_instruction: Obtenha três néctares e então fabrique duas unidades
        de mel
      K-1 Building a Foundation Assessment_instruction: |-
        Construa uma pirâmide de três níveis.
        Não há outras instruções, então simplesmente brinque com as peças até
        conseguir!
      K-1 Maze 10_instruction: 'Desvie do TNT para me levar até o porco! '
      K-1 Maze 11_instruction: |-
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar! Dica: ele está ao sul de onde estou.
      K-1 Maze 2_instruction: Mova-me para o leste para chegar até o porco!
      K-1 Maze 3_instruction: Mova-me para o sul para chegar até o porco!
      K-1 Maze 4_instruction: Mova-me para o norte para chegar até o porco!
      K-1 Maze 5_instruction: Mova-me para o leste para chegar até o porco!
      K-1 Maze 6_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 7_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 8_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 9_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze Assessment 1_instruction: 'Avaliação: leve-me até o porco!'
      K-1 Maze Assessment 12_instruction: Avaliação de nível
      K-1 Maze Assessment 13_instruction: Avaliação de nível
      K-1 Maze Assessment 2_instruction: 'Avaliação: leve-me até o porco!'
      K-1 Maze Loops 1_instruction: Leve-me até o porco!
      K-1 Maze Loops 10_instruction: |-
        Leve-me até o porco! O laço "repita"
        vai tornar tudo muito mais fácil.
      K-1 Maze Loops 11_instruction: |-
        Leve-me até o porco!\r
        O laço "repita" vai
        facilitar as coisas.
      K-1 Maze Loops 12_instruction: |-
        Leve-me até o porco! O laço "repita" vai
        facilitar as coisas.
      K-1 Maze Loops 2_instruction: Use o bloco "repita" para me levar até o porco!
      K-1 Maze Loops 3_instruction: Leve-me até o porco! Não deixe de usar laços "repita".
      K-1 Maze Loops 4_instruction: Leve-me até o porco!
      K-1 Maze Loops 5_instruction: Leve-me até o porco! Use laços "repita".
      K-1 Maze Loops 6_instruction: Leve-me até o porco! Use laços "repita".
      K-1 Maze Loops 7_instruction: Leve-me até o porco! Use laços "repita".
      K-1 Maze Loops 8_instruction: Use o laço "repita" para me levar até o porco.
      K-1 Maze Loops 9_instruction: Leve-me até o porco!
      K-1 Maze Loops Assessment 1_instruction: |-
        Veja só o que nós aprendemos! Use um
        laço "repita" para me levar até o porco!
      K-1 Maze Loops Assessment 2_instruction: Use um laço "repita" para me levar
        até o porco!
      K-1 Maze Multi 14_instruction: Avaliação de nível
      K-1 Maze Multi 15_instruction: Avaliação de nível
      K-1 Maze Sequence Assessment 1_instruction: |-
        Vejamos o que você aprendeu!\r
        Mova-me
        por um caminho e então por outro para me levar até o porco.
      K-1 Maze Sequence Assessment 2_instruction: |-
        Mova-me por um caminho e então
        por outro para me levar até o porco.
      K-1 Maze debug Assessment 1_instruction: |-
        Avaliação -- depure esse nível
        reorganizando e adicionando blocos para me levar até o porco!
      K-1 artist 1 level 10_instruction: Desenhe linhas tracejadas usando os blocos
        pule e desenhe
      K-1 artist 1 level 9_instruction: Faça o desenho usando três retas
      K-1 maze debug 1_instruction: Altere o código para me levar até o porco!
      K-1 maze debug 10_instruction: |-
        Depure esse nível reorganizando e trocando
        blocos para me levar até o porco!
      K-1 maze debug 11_instruction: |-
        Isso é um teste!\r
        Depure esse nível reorganizando
        e trocando blocos para me levar até o porco
      K-1 maze debug 2_instruction: |-
        Descubra o que está faltando e então adicione blocos
        para me levar até o porco!
      K-1 maze debug 3_instruction: |-
        Descubra o que está faltando e então REMOVA
        blocos
        para me levar até o porco!
      K-1 maze debug 4_instruction: |-
        Passe por esses blocos e conserte-os! Eu acho
        que estou indo na direção errada.
      K-1 maze debug 5_instruction: |-
        Depure esse nível reorganizando e trocando blocos
        para me levar até o porco!
      K-1 maze debug 6_instruction: |-
        Depure esse nível reorganizando e trocando
        blocos para me levar até o porco!
      K-1 maze debug 7_instruction: |-
        Depure esse nível reorganizando e trocando
        blocos para me levar até o porco!
      K-1 maze debug 8_instruction: |-
        Depure esse nível reorganizando e adicionando
        blocos
        para me levar até o porco!
      K-1 maze debug 9_instruction: |-
        Depure esse nível reorganizando e trocando
        blocos para me levar até o porco!
      K2.0 sequence 1_instruction: Altere o código para me levar até o porco!
      K2.0 sequence 10_instruction: |-
        Challenge: Move me around the TNT to get to
        the pig.
      K2.0 sequence 12_instruction: 'Let''s get that pig! '
      K2.0 sequence 2_instruction: Altere o código para me levar até o porco!
      K2.0 sequence 3_instruction: |-
        Something is not quite right. REMOVE a block
        to get me to the pig!
      K2.0 sequence 4_instruction: |-
        Time for a shorter puzzle!  Move one way, then
        another to get me to the pig.
      K2.0 sequence 4a_instruction: Try this puzzle again from the start!
      K2.0 sequence 5_instruction: Mova-me por um caminho, e então por outro para
        me levar até o porco!
      K2.0 sequence 6_instruction: |-
        Descubra o que está faltando e então adicione blocos
        para me levar até o porco!
      K2.0 sequence 7_instruction: |
        Debug this level by changing a block to get me
        to the pig!
      K2.0 sequence 8_instruction: |-
        Debug this level by adding blocks to get me to
        the pig!
      K2.0 sequence 9_instruction: 'Desvie do TNT para me levar até o porco! '
      K2.0 sequence FP_instruction: |-
        Now figure out how to get the pig any way you
        can!
      K2.0 sequence pre_instruction: |-
        Play with these blocks to see if you can get
        me to the pig!
      KIKI GLJ Test Response_instruction: |
        Look carefully at the code below.  What
        do you think the plane will do when you click "Run"?\r
      KTest1_instruction: Can you make me move South once more to get to the pig?
      KTest2_instruction: |-
        Trace the path and lead me to the silly pig. Avoid TNT
        or the feathers will fly!
      Kiki_StarWars_Test_3_instruction: Texto
      Kiki_StarWars_Test_4_instruction: Texto
      Kiki_StarWars_Test_5_instruction: Texto
      Kiki_StarWars_Test_5_Example_instruction: Texto
      LaurelDebugging4Video1_instruction: |-
        Move Laurel around and get as much gold
        as you can!
      Limited Quantity of Blocks Test_instruction: |-
        Get me to the pig by adding only
        one block
      Luigi's Pizza 1_instruction: |-
        Bem-vindo à pizzaria do Luigi! Para pedir uma pizza,
        digite o nome de um sabor na função "custo" e vamos retornar o
        preço da pizza. Tente pedir uma pizza de pepperoni para começar.
      Luigi's Pizza 2 (copy 1)_instruction: |-
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |-
        Agora há apenas quatro opções disponíveis
        na pizzaria do Luigi - vamos arrumar isso! Adicione alguns novos sabores ao bloco condicional
        na função "custo". Quando adicionar seus sabores, teste
        a função para ver se ela funciona.
      Luigi's Pizza 3 (copy 1)_instruction: |-
        Assim está melhor, todos adoram uma maior
        variedade nos sabores de pizza! Mas você ainda não consegue agradar a todos, e
        algumas pessoas estão vindo pedir sabores que Luigi não tem. Ao invés de
        dizer não a essas pessoas, você poderia atualizar a cláusula "senão" para que possamos
        cobrar a mais deles por sabores que normalmente não oferecemos?
      Luigi's Pizza 3_instruction: |-
        Assim está melhor, todos adoram uma maior variedade nos
        sabores de pizza! Mas você ainda não consegue agradar a todos, e algumas pessoas estão
        vindo pedir sabores que Luigi não tem. Ao invés de dizer não
        a essas pessoas, você poderia atualizar a cláusula "senão" para que possamos cobrar a
        mais deles por sabores que normalmente não oferecemos? Vamos cobrar R$10.000
        por um sabor que não está disponível.
      Luigi's Pizza 4_instruction: |-
        Atividade livre: o que você pode fazer para deixar a função de custo do Luigi
        ainda melhor? Tente usar uma (ou mais) das seguintes opções:\r
        - Mostrar uma
        imagem da pizza escolhida\r
        - Permitir a combinação de vários sabores\r
        -
        Permitir o pedido de várias pizzas\r
        - Adicionar um cupom com código para um desconto de 50%
      MC Agent Freeplay_instruction: "**Jogo Livre:**  É hora de explorar sozinho!"
      MC HOC 2016 Level 10_instruction: |-
        É hora de criar seu próprio Minecraft! Invoque
        criaturas e programe para que elas façam o que você quiser. Divirta-se!
      MC HOC 2016 Level 2-2_instruction: |-
        A galinha está congelada. Coloque blocos de "mover" e
        "virar" no espaço "ao invocar" para movê-la.
      MC HOC 2016 Level 3_instruction: |
        Ótimo, a galinha se moveu! Mas depois ela parou.
        Nos jogos, elas ficam caminhando. Use um loop de "fazer eterno" para manter essas galinhas
        em movimento.\r
      MC HOC 2016 Level 4_instruction: |-
        Agora as galinhas estão esquisitas, andando todas
        iguais. Jogos usam movimentos aleatórios para fazer as coisas parecerem reais. Faça as galinhas "virarem
        aleatoriamente".
      MC HOC 2016 Level 5_instruction: |-
        Essas vacas estão perdidas! Leve-as até a grama
        com um bloco "mover um passo adiante" em um loop de "fazer eterno".
      MC HOC 2016 Level 6_instruction: |-
        Agora você faz os zumbis. Use o bloco "invocar"
        para fazer 3 zumbis ao cair da noite. Faça-os andar até você. Sobreviva
        até o amanhecer.
      MC HOC 2016 Level 8_instruction: |-
        O caminho até sua ovelha está bloqueado por uma parede de
        pedra. Por sorte, tem um Creeper aqui. Os Creepers explodem quando você encosta neles.
        Faça o Creeper explodir a parede para você alcançar suas ovelhas!
      MC HOC 2016 New Drop_instruction: |-
        No Minecraft, ovelhas derrubam lã. Coloque o
        bloco "derrubar" em "ao usar", depois caminhe até a ovelha e use-a para derrubar um item.
      MC HOC 2016 New Spawn_instruction: |-
        Agora você pode colocar tudo o que quiser no
        mundo! Coloque um bloco "invocar" abaixo de "ao executar" para invocar algo quando o jogo iniciar.
      MC HOC 2016 New Walk_instruction: |-
        Vamos explorar nosso mundo! Mova-se com as
        setas, e pressione a barra de espaço ou toque no painel do jogo para usar os itens. Use a
        porta para entrar na casa.
      MC HOC 2016 SCORE LEVEL_instruction: |-
        Alguns jogos têm placar. Brinque de pega-pega
        com esses Golems de Ferro e use o bloco "adicionar 1 ao placar" para receber um ponto
        ao tocá-los. Faça 5 pontos para vencer!
      MC HOC 2016 Village Test_instruction: |-
        Ah não! Os zumbis trancaram você do lado de dentro!
        Programe o Golem de Ferro para acabar com eles!
      MC_2017_Ryan_02_instruction: |-
        Help the player get out by using loops to get
        the Agent to the pressure plate.
      MC_HOC_2017 Agent Test_instruction: |-
        Click "Run" to move the player to the
        orange square inside of the house.
      MC_HOC_2017_01_instruction: |-
        Click "Run" to move the player to the orange
        square inside of the house.
      MC_HOC_2017_01_Cole_instruction: |-
        You need to collect all the tools on this
        journey. Move around using the **arrow keys**, and get to the chest on the
        path to win
      MC_HOC_2017_01_Kiki_instruction: |-
        Click "Run" to move the player to the orange
        square inside of the house.
      MC_HOC_2017_01_RETRY_instruction: 'Leve o Agent para a placa de pressão, em
        seguida pressione "Executar" e use as teclas de seta para mover o jogador
        para fora da casa para coletar o baú. '
      MC_HOC_2017_02_instruction: Leve o Agent para a placa de pressão.
      MC_HOC_2017_02_Cole_instruction: 'Mova o Agent para a placa de pressão para
        que o jogador {currentPlayerName} consiga pegar o mapa. '
      MC_HOC_2017_02_Kiki_instruction: Leve o Agent até a placa de pressão e, em seguida,
        leve o jogador para o quadrado laranja.
      MC_HOC_2017_02_Will_instruction: Leve o Agent para a placa de pressão.
      MC_HOC_2017_03_Cole_instruction: 'Use o código do Agent para abrir o portão. '
      MC_HOC_2017_03_Kiki_instruction: Leve o Agent para a placa de pressão.
      MC_HOC_2017_04_instruction: Altere o ciclo do último enigma para ajudar o Agent
        a trilhar um caminho sobre a parte mais larga deste rio.
      MC_HOC_2017_04POINT5_Cole_instruction: Leve o Agent para a placa de pressão.
      MC_HOC_2017_04POINT5_RYAN_instruction: Leve o Agent para a placa de pressão.
      MC_HOC_2017_04_Cole_instruction: Leve o Agent para a placa de pressão.
      MC_HOC_2017_04_Kiki_instruction: Leve o Agent para a placa de pressão.
      MC_HOC_2017_05_instruction: Use uma função para ajudar o Agent a chegar até
        a placa de pressão.
      MC_HOC_2017_05_Cole_instruction: Leve o jogador até a pá.
      MC_HOC_2017_05_Josh_instruction: Leve o jogador até a pá.
      MC_HOC_2017_05_Kiki_instruction: Leve o jogador até o quadrado laranja.
      MC_HOC_2017_06_Cole_instruction: Corrija esse código para que o Agent consiga
        construir uma ponte para cruzar esse rio.
      MC_HOC_2017_06_Josh_instruction: Corrija esse código para ajudar o Agent a construir
        uma ponte para cruzar esse rio.
      MC_HOC_2017_06_Kiki_instruction: Corrija esse código para ajudar o Agent a construir
        uma ponte para cruzar esse rio.
      MC_HOC_2017_07_Cole_instruction: Destrua o gelo e leve o jogador {currentPlayerName}
        para o Carrinho de Minas.
      MC_HOC_2017_07_Kiki_instruction: Use uma função para abrir o caminho até o quadrado
        laranja.
      MC_HOC_2017_07a_Kiki_instruction: Abra o caminho até o quadrado laranja.
      MC_HOC_2017_08_Cole_instruction: Altere a função fornecida para funcionar com
        este bioma.
      MC_HOC_2017_08_Kiki_instruction: Altere a função para funcionar com este enigma.
      MC_HOC_2017_08_RY_instruction: Use as funções para encontrar um caminho pela
        lava.
      MC_HOC_2017_08_Will_instruction: Use as funções para encontrar um caminho pela
        lava.
      MC_HOC_2017_09_Cole_instruction: Programe o Agent para abrir o caminho para
        o jogador.
      MC_HOC_2017_09_Kiki_instruction: Programe o Agent para abrir o caminho para
        o jogador e levá-lo até a placa de pressão.
      MC_HOC_2017_10_Cole_instruction: Crie uma função para ajudá-lo a terminar este
        carrinho de minas.
      MC_HOC_2017_10_Cole_old_instruction: Crie uma função para ajudá-lo a terminar
        este carrinho de minas.
      MC_HOC_2017_10_Kiki_instruction: Crie uma função para ajudá-lo a terminar este
        carrinho de minas.
      MC_HOC_2017_10_RETRY_instruction: Crie uma função para ajudá-lo a terminar este
        carrinho de minas.
      MC_HOC_2017_10_RYAN_instruction: Crie uma função para ajudá-lo a terminar este
        carrinho de minas.
      MC_HOC_2017_10_RYAN2_instruction: Crie uma função para ajudá-lo a terminar este
        carrinho de minas.
      MC_HOC_2017_13_Cole_instruction: "**Jogo Livre:**  É hora de explorar sozinho!"
      MC_HOC_2017_4.5v2_instruction: Leve o Agent para a placa de pressão.
      MC_HOC_2017_Ali_instruction: Use as funções para encontrar um caminho pela lava.
      MC_HOC_2017_FP10x10_instruction: "**Jogo Livre:** Você consegue se superar e
        coletar todos os diamantes deste nível? "
      MC_HOC_2017_FP10x10_RE_instruction: "**Jogo Livre:** Você consegue se superar
        e coletar todos os diamantes deste nível? "
      MC_HOC_2017_FP20x20_instruction: "**Jogo Livre:**  É hora de explorar sozinho!"
      MC_HOC_2017_Ryan_03_instruction: Agora use os ciclos para ajudar o Agent a construir
        uma ponte sobre o rio colocando os blocos na água.
      MC_HOC_2017_Ryan_05_instruction: Destrua esses cactos para que o jogador consiga
        chegar à meta.
      MC_HOC_Kiki_02_instruction: Leve o Agent para a placa de pressão.
      MSM Big Game Empty_instruction: |-
        Todas as variáveis e funções atualmente são
        campos vazios. A progressão de cada desafio será concentrada na definição e em vários
        deles e, portanto, na adição de funcionalidade.
      MSM Big Game Vars 1 (copy 1)_instruction: |-
        Na caixa de ferramentas de variáveis você vai
        ver diversas variáveis que definem a aparência dos personagens do seu jogo e como eles se movem e
        interagem
      MSM Big Game Vars 1_instruction: |-
        Na caixa de ferramentas de variáveis você vai ver diversas
        variáveis que definem a aparência dos personagens do seu jogo e como eles se movem e
        interagem
      MSM Big Game Vars Backup_instruction: |-
        Na caixa de ferramentas de variáveis você vai ver diversas
        variáveis que definem a aparência dos personagens do seu jogo e como eles se movem e
        interagem
      MSM Defining Vars 1 (copy 1)_instruction: |-
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |-
        Escreva um programa que produz um triângulo
        verde sólido de 50 pixels.
      MSM Defining Vars 2 (copy 1)_instruction: |-
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |-
        Se quiséssemos fazer 50 triângulos verdes,
        seria horrível repetir esse bloco de código 50 vezes. Vamos criar uma
        variável chamada "minha-forma" e colocar o código para um triângulo verde sólido de 50 pixels
        dentro dela.
      MSM Defining Vars 3 (copy 1)_instruction: |-
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |-
        Pegue sua variável "minha-forma" e use-a
        com esse código fornecido para desenhar dois triângulos verdes idênticos que têm
        50 pixels.
      MSM Defining Vars 4_instruction: |-
        Edite sua variável "minha-forma" para que ela
        desenhe estrelas vermelhas sólidas de 75 pixels.
      MSM Play Lab Butterfly 1_instruction: |-
        Ajude Sam a ficar na tela para que
        você sempre possa ver pelo menos uma pequena parte dele. Usando as setas do teclado, veja
        quão longe Sam pode ir para a esquerda enquanto permanece na tela. Você vai descobrir que
        Sam fica na tela enquanto sua coordenada x for maior que -50. Então, complete
        o código para fazer Sam permanecer na tela.
      MSM Play Lab Butterfly 2_instruction: |-
        Agora, faça Sam ficar no lado direito
        da tela. Você precisa fazer experimentos para ver o quão longe ele pode ir e ainda
        ficar parcialmente visível na tela.
      MSM Play Lab Butterfly 3_instruction: |-
        Agora, combine seu trabalho para fazer Sam permanecer
        em ambos os lados da tela.
      MSM Play Lab Game 2_instruction: |-
        Variáveis também podem ser usadas para controlar
        a velocidade de jogadores em um jogo. Defina a velocidade do jogador e do inimigo e veja
        como os movimentos mudam. A velocidade pode ficar entre 2 e 12.
      Middle School Hackathon Pt 1_instruction: "(Click to see full instructions)"
      Middle School Hackathon Pt 2_instruction: "(Click to see full instructions)"
      Mike Pair Programming_instruction: Here are the instructions
      Mike Test Bee Conditionals 1_instruction: |-
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      Mike Test Bee Conditionals 2_instruction: |-
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      MikeAssessment1_instruction: Now do it right!
      MikeStar_instruction: Draw this.
      MikeStarHard_instruction: Draw this.
      MikeStarNested_instruction: Draw this.
      MikeTest1_instruction: Who knows what you should do?!?!
      MikeTest2_instruction: Draw something!
      MikeTest3_instruction: Build Something
      NEW Course 4 Artist Functions 1_instruction: |-
        Você consegue desenhar um quadrado com
        100 pixels de comprimento usando um laço?
      NEW Course 4 Artist Functions 10.1_instruction: |-
        Use as funções dos desafios
        anteriores para desenhar esse padrão.
      NEW Course 4 Artist Functions 10_instruction: |-
        Clique em "editar" para preencher
        os blocos na definição da função para fazer um quadrado de 40 pixels.
      NEW Course 4 Artist Functions 11_instruction: |-
        Agora, queremos criar uma nova
        função chamada "desenhe uma fileira de quadrados", que desenha seis quadrados em sequência. Você
        consegue criar essa função usando a função "desenhe um quadrado 20" que já criamos
        para você?
      NEW Course 4 Artist Functions 12_instruction: |-
        Use a função "desenhe uma fileira de quadrados"
        do último desafio para desenhar esse padrão.
      NEW Course 4 Artist Functions 13_instruction: "Você consegue desenhar uma forma
        de estrela usando\na função \"desenhe uma fileira de quadrados\"?  "
      NEW Course 4 Artist Functions 14_instruction: 'Atividade livre! '
      NEW Course 4 Artist Functions 2_instruction: |-
        Você consegue desenhar 3 quadrados com 20 pixels de distância
        entre cada um? Dica: cada quadrado tem 100 pixels de tamanho
      NEW Course 4 Artist Functions 3_instruction: |-
        Temos aqui um novo tipo de bloco.
        Ele é chamado de "função". Clique em "editar" e então preencha-o com o código
        para desenhar um quadrado com lados de 100 pixels. \r
        \r
        Quando terminar de editar
        a função, clique em "Fechar" para retornar ao seu programa.
      NEW Course 4 Artist Functions 4_instruction: |-
        Use a função "desenhe um quadrado"
        para desenhar esse padrão.
      NEW Course 4 Artist Functions 5_instruction: |-
        Como o bloco "desenhe um quadrado"
        sabia que comandos executar? Clique em "editar" no bloco de função "desenhe um quadrado".
        Os blocos no editor da função são a definição que
        compõe "desenhe um quadrado". Quando você terminar de analisar, clique em "Salvar
        e Fechar" e então em "Executar".
      NEW Course 4 Artist Functions 6_instruction: |
        Usando o bloco de função "desenhe um quadrado",
        você pode desenhar esta imagem? Dica: cada quadrado está separado por 20 pixels.\r
      NEW Course 4 Artist Functions 7_instruction: "Você está pegando o jeito de como\nusar
        os blocos de função? Vamos modificar esse quadrado para que ele tenha 200
        pixels\nde tamanho. Clique em \"editar\" para acessar o editor da função \"desenhe
        um quadrado\". Lembre-se\nde clicar em \"Fechar\" para sair do editor da função. "
      NEW Course 4 Artist Functions 8_instruction: |-
        Criamos uma nova função
        para você chamada "desenhe um triângulo". Você consegue editar a definição da função
        para desenhar um triângulo com lados de 100 pixels?
      NEW Course 4 Artist Functions 9_instruction: |-
        Você consegue resolver isso adicionando
        apenas um bloco?
      NEW Course 4 Artist Functions inspire_instruction: |-
        Clique aqui para ver a figura
        de inspiração novamente.
      NEW Course 4 Artist Params 1_instruction: |-
        Vamos definir essa função para desenhar
        um quadrado com lados de 50 pixels. Clique em "editar" para começar.
      NEW Course 4 Artist Params 10_instruction: "Crie um bloco de função \"desenhe\num
        hexágono\" com um parâmetro \"comprimento\". Esse hexágono tem lados de 100
        pixels\nde comprimento. "
      NEW Course 4 Artist Params 11_instruction: |-
        Você consegue descobrir como desenhar
        essa forma? Edite a função para usar o parâmetro "lados".
      NEW Course 4 Artist Params 12_instruction: |-
        Você consegue completar esse desenho?
        Os lados de todas as formas têm 100 pixels de comprimento.
      NEW Course 4 Artist Params 12a_instruction: |-
        Esta imagem é semelhante à anterior.
        Você consegue usar um laço "para" com sua função para criar deste desenho?
      NEW Course 4 Artist Params 13_instruction: "Vamos editar a função \"desenhe
        um\npolígono\". Ela já tem um parâmetro \"lados\". Agora, vamos adicionar
        um parâmetro\n\"comprimento\". \\r \nO perímetro de cada forma tem 200 pixels
        de comprimento. Você se lembra\nda equação para fazer as formas ficarem do
        mesmo tamanho quando elas têm um número diferente\nde lados?"
      NEW Course 4 Artist Params 14_instruction: |-
        Edite "desenhe uma borda espiral" para
        usar os parâmetros "comprimento" e "lados" e então recrie essas formas.
      NEW Course 4 Artist Params 15_instruction: |-
        Atividade livre: aqui estão as funções
        que você escreveu e mais algumas para você usar. Desenhe algo incrível!
        Brinque com a largura da caneta para ver como seus desenhos ficam diferentes!
      NEW Course 4 Artist Params 2_instruction: |-
        Create a `draw triangle` function
        from scratch that makes a triangle with  50 pixel sides.
      NEW Course 4 Artist Params 3_instruction: |
        Vamos usar a função para desenhar
        5 triângulos em sequência. Cada triângulo está separado por 30 pixels.\r
      NEW Course 4 Artist Params 4_instruction: |-
        Você percebe algo diferente
        sobre esses blocos de função? Clique em "Executar" para ver o que acontece.
      NEW Course 4 Artist Params 5_instruction: "Preencha \"???\" no bloco\ndo parâmetro
        \"comprimento\". O pentágono tem lados de 100 pixels. "
      NEW Course 4 Artist Params 6_instruction: |-
        Preencha o parâmetro "comprimento"
        para desenhar essa formas substituindo o "???" pelos números corretos. O
        quadrado e o triângulo têm lados de 100 pixels, enquanto o hexágono tem lados de
        75 pixels.
      NEW Course 4 Artist Params 7_instruction: |-
        Você consegue completar este desenho? Os
        lados de cada triângulo têm 25 pixels a mais que o anterior. O primeiro triângulo
        tem lados de 25 pixels de comprimento.
      NEW Course 4 Artist Params 8_instruction: |-
        O código da função deste triângulo
        está corrompido. Você consegue editar a função para corrigi-lo e criar triângulos
        de 25, 50 e 75 pixels de comprimento?
      NEW Course 4 Artist Params 9_instruction: |-
        Clique em "editar" para preencher a definição
        da função "desenhe um quadrado" e adicionar um parâmetro. Ela deve receber um parâmetro
        comprimento, como no triângulo. Dessa vez, desenhe 3 quadrados: 25, 50 e 75
        pixels de comprimento e separados por 100 pixels cada.
      NEW Course 4 Artist Params inspire_instruction: "Atividade livre - Inspiração:
        agora você\naprendeu tudo o que precisa saber para criar um padrão como esse!
        Se essa\nimagem inspira você, tente fazer algo similar. Caso contrário, crie
        algo\nvocê mesmo.\\r\n \\r\nQuer saber como nosso padrão de inspiração foi
        feito? "
      NEW Course 4 Artist Vars 1.5_instruction: "Dê uma olhada no código. Você consegue\nver
        como o bloco \"defina o comprimento\" e o bloco \"comprimento\" funcionam
        juntos? Clique\nem \"Executar\" para vê-los em ação. "
      NEW Course 4 Artist Vars 12_instruction: |-
        Agora, recrie o algoritmo do último
        nível para criar um pentágono de lados 150.
      NEW Course 4 Artist Vars 2.5_instruction: "Dê uma olhada no código. Você consegue\nver
        como o bloco \"defina o comprimento\" e o bloco \"comprimento\" funcionam
        juntos? Clique\nem \"Executar\" para vê-los em ação. "
      NEW Course 4 Artist Vars 2_instruction: |
        Arraste um bloco numérico para os blocos "defina
        o comprimento" e "repita_vezes" para desenhar um conjunto de triângulos de 50 pixels.
      NEW Course 4 Artist Vars 4 5_instruction: |-
        Belo trabalho no último desafio,
        vamos tentar novamente. Desta vez, vamos fazer esse design bacana com hexágonos
        de 60 pixels.
      NEW Course 4 Artist Vars 4_instruction: |-
        Vamos tentar de novo! \r
        \r
        Você consegue
        definir a variável "comprimento" em 60 para fazer este design bacana com hexágonos?
      NEW Course 4 Artist Vars 6_instruction: |-
        Desenhe esse padrão de pentágonos com
        lados de 100 pixels definindo o valor correto para "comprimento" e colocando a variável
        "comprimento" em todos os lugares corretos. \r
        \r
        Você percebeu que só precisa
        definir o valor de "comprimento" uma vez, e o código usa o valor correto em todos os lugares?
      NEW Course 4 Bee For Loops 1_instruction: |-
        Use um laço para coletar o néctar
        de cada flor.
      NEW Course 4 Bee For Loops 10_instruction: |-
        Use a variável "contador" do seu laço "para"
        para controlar a distância do movimento horizontal.
      NEW Course 4 Bee For Loops 10a_instruction: |-
        Pronto para um desafio? Use o que
        você aprendeu sobre laços e tente resolver esse problema. Lembre-se: você pode
        ter que executar sua solução várias vezes antes de descobrir todas as
        etapas.
      NEW Course 4 Bee For Loops 11_instruction: |-
        Você pode usar a variável do laço para
        controlar o movimento e a coleta de néctar?
      NEW Course 4 Bee For Loops 2_instruction: |-
        Adicione o código necessário para garantir que
        a abelha colete todo o néctar. Olhe quanto código você precisa para esse desafio!
        (Vamos aprender uma maneira mais simples no próximo desafio).
      NEW Course 4 Bee For Loops 3_instruction: "Ah, o \"laço para\" torna isso muito
        mais\nfácil! Todo o código que você precisa está lá, dê uma olhada em como
        ele é feito\ne então clique em \"Executar\" para ver como ele funciona. "
      NEW Course 4 Bee For Loops 4 4_instruction: |-
        Agora, precisamos mover para a frente "contador"
        vezes, e então obter o néctar "contador" vezes. Você consegue usar dois laços "repita"
        para resolver esse desafio?
      NEW Course 4 Bee For Loops 4_instruction: "Substitua o ??? no \"laço para\"\npela
        maior quantidade de néctar que a abelha tem que coletar. "
      NEW Course 4 Bee For Loops 5 5_instruction: |-
        Você está pegando o jeito de como usar
        o "laço para"? Vamos ajudar a abelha a obter o resto do néctar.
      NEW Course 4 Bee For Loops 5_instruction: |-
        Você também pode usar um laço "para" para fazer contagem
        regressiva. Tente coletar esse néctar fazendo uma contagem regressiva de 5 até 1, de 1 em 1.
      NEW Course 4 Bee For Loops 6_instruction: |-
        O último número em seu laço para é
        chamado de "incremento". A cada execução do laço, a variável contador
        é alterada de acordo com o incremento. Tente coletar essas flores usando
        um incremento de 2.
      NEW Course 4 Bee For Loops 7_instruction: |-
        Agora, vamos combinar a variável "contador"
        com um bloco matemático! Como você pode usar a variável "contador" para navegar
        por esse jardim com o menor número de blocos possível? O que você precisa fazer para
        coletar 3, 6, 9, 12 ou 15 néctares dessa vez? O segredo está na variável
        "contador"!\r
        \r
        Lembre-se: se seu laço estiver contando de forma crescente, o incremento é adicionado
        à variável "contador" a cada repetição.
      NEW Course 4 Bee For Loops 8_instruction: |-
        Você conseguiu! Qual deve ser seu
        incremento para coletar 3, 6, 9, 12, 15 néctares?
      NEW Course 4 Bee For Loops 9_instruction: |-
        Se seu laço está fazendo contagem regressiva, o
        incremento é subtraído da sua variável contador a cada repetição. Qual deve ser
        seu incremento para coletar 9, então 6, e então 3 néctares?
      NEW Course 4 Bee For Loops 95_instruction: |-
        Dê uma olhada em cada parte do
        "laço para" que você acabou de criar. Você consegue descobrir quais números
        você precisa dobrar para resolver esse desafio? Por que isso funciona?
      NEW Course 4 Play Lab Params 11_instruction: "É hora da atividade livre! Divirta-se\ncom
        todos os blocos da sua caixa de ferramentas. "
      NEW Course 4 Play Lab Params 5 5_instruction: |-
        Vamos tentar novamente, mas agora com
        menos ajuda. O que você precisa editar desta vez para fazer com que os personagens patrulhem?
      NEW Course 4 Play Lab Vars 4 5_instruction: |-
        "O que você acha que esse código vai
        fazer? Pressione "Executar" para ver o que acontece".
      NEW Course 4 Play Labs For Loops 7a_instruction: |-
        Usando o que você aprendeu até
        agora, você consegue fazer o dinossauro dar um passo à frente toda vez que o pinguim contar?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "É hora da atividade
        livre,\ndivirta-se com todos os blocos da sua caixa de ferramentas. "
      NEW Course 4 Play Labs For Loops 8a_instruction: "Desafio: como você\nusaria
        o \"laço para\" para fazer cada ator andar e dizer seu número de ator,\ne
        então sumir da tela? "
      NetSim Standalone Automatic DNS_instruction: |-
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |-
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |-
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |-
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |-
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? "
      NetSim_AddressingMessages_instruction: |-
        Nessa versão do simulador, você vai
        se conectar a um roteador ao invés de se conectar diretamente a outro aluno. Insira um
        endereço no campo "para" para enviar uma mensagem a outro aluno.
      NetSim_AutomaticDNS_instruction: |-
        Nessa versão do simulador um serviço DNS
        é fornecido para você. Envie uma mensagem no formulário GET [hostname] para o serviço
        DNS no endereço 15 para obter o endereço de um aluno.
      NetSim_ManualDNS_instruction: |-
        Nessa versão do simulador você não pode
        ver o endereço de outros alunos. Ao invés disso, um de vocês deve agir como um
        serviço de nome, para ajudar a compartilhar os endereços entre si.
      NetSim_SendAB_instruction: |-
        Conecte-se a outro aluno. Cada um pode definir
        o valor do fio entre si mesmo e "A" ou "B".  Veja se você consegue enviar
        uma mensagem completa!
      NetSim_SendAscii_instruction: |-
        Nessa versão do simulador, vocês podem enviar
        números ou caracteres ASCII uns para os outros, um bit por vez.
      NetSim_SendBits_instruction: |-
        Conecte-se a outro aluno. Agora você pode definir
        seu fio como "0" ou "1".  Envie uma mensagem ao seu parceiro!
      NetSim_SendNumbers_instruction: |-
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_SendingABTest_instruction: |-
        Esse é o teste de Sarah para fazer um nível
        netsim
      NetSim_Superuser_instruction: Você carregou o NetSim no modo superusuário.
      NetSim_Variant1_instruction: |-
        NetSim: Variante 1 permite que os alunos elaborem
        manualmente o tempo de envio de bits para trás e para a frente.
      NetSim_Variant2_instruction: |-
        NetSim: Variante 2: Os alunos se conectam diretamente
        uns aos outros e enviam pacotes inteiros para trás e para a frente, explorando sistemas de
        codificação de dados.
      NetSim_Variant3_instruction: |-
        NetSim: Variante 3: Conecta grupos de 2 a 6 alunos
        com um roteador e explora questões sobre roteamento e DNS
      New Artist Project_instruction: |-
        Desenhe algo incrível! Seu código é salvo
        como um projeto e você pode retornar a ele a qualquer momento.
      New Basketball Project_instruction: |-
        Create your own Basketball game. You can
        change all the rules. When you're done, click Finish to let friends try your
        game on their phones.
      New Bounce Project_instruction: |-
        Create your own Bounce game. You can change
        all the visuals and the rules. When you're done, click Finish to let friends
        try your game on their phones.
      New Course 4 Artist Functions Level 4_instruction: |-
        Use a função "desenhe um quadrado"
        para desenhar esse padrão.
      New Gumball Project_instruction: Crie o que quiser e compartilhe!
      New Ice Age Project_instruction: Crie o que quiser e compartilhe!
      New Infinity Project_instruction: Crie o que quiser e compartilhe!
      New Minecraft Hero Project_instruction: |-
        **Freeplay:**  Time to explore on
        your own!
      New Sports Project_instruction: |-
        Create your own game! You're in charge here:
        you can change all the rules, mix and match sports, get creative! When you're
        done, click Finish to let friends try your game on their phones.
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Vamos começar explorando um video game
        simples e então descobrir como ele funciona. Você pode usar as setas do teclado
        para mover o ninja para a esquerda, para a direita e para pular - tente pegar o unicórnio e
        desvie do dragão!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |-
        Vamos começar explorando um jogo simples
        e então vamos descobrir como ele funciona. Você pode usar as setas do teclado para mover o
        ninja para cima e para baixo - tente capturar o unicórnio e desviar do dragão! Quando você
        achar que já descobriu como o jogo funciona, clique em "Concluir"
      Ninjacat Demo No Animate_instruction: |-
        Vamos começar explorando um jogo simples
        e então vamos descobrir como ele funciona. Você pode usar as setas do teclado para mover o
        ninja para cima e para baixo - tente capturar o unicórnio e desviar do dragão! Quando você
        achar que já descobriu como o jogo funciona, clique em "Concluir"
      October15 JoL 1_instruction: |-
        Program the artist to design a face for your
        jack-o-lantern!
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: |-
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 pumpkin 1_instruction: |-
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |-
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: Não é uma boa ideia topar com um Creeper.
        Passe com cuidado pelos Creepers e chegue na sua casa em segurança.
      Overworld Avoid Monsters_2018_instruction: |-
        Running into a Creeper is a bad
        idea. Carefully move past the Creepers and reach the safety of your home.
      Overworld Chop Tree - allthethings_instruction: |-
        Wood is a very important resource.
        Many things are made from it. Walk to the tree and use the “destroy block”
        command to chop it down.
      Overworld Chop Tree_instruction: Madeira é um recurso muito importante. Muitas
        coisas são feitas com ela. Ande até a árvore e use o comando "destruir bloco"
        para derrubá-la.
      Overworld Chop Tree_2018_instruction: |-
        Wood is a very important resource. Many
        things are made from it. Walk to the tree and use the “destroy block” command
        to chop it down.
      Overworld Chop Trees_instruction: Precisamos construir uma casa antes que o
        sol se ponha. Casas utilizam muita madeira. Corte todas as 3 árvores.
      Overworld Chop Trees_2018_instruction: |-
        We need to build a house before the
        sun goes down. Houses require a lot of wood. Cut down all 3 trees.
      Overworld Free Play 20x20_instruction: Parabéns! Você concluiu todas as nossas
        tarefas! Agora, minere, construa e crie algo único, usando tudo que você já
        aprendeu.
      Overworld Free Play 20x20_2018_instruction: Parabéns! Você concluiu todas as
        nossas tarefas! Agora, minere, construa e crie algo único, usando tudo que
        você já aprendeu.
      Overworld House Frame Chosen_instruction: |-
        Construa o resto da sua casa com
        qualquer material que quiser. O comando "repita" vai ser bem útil.
      Overworld House Frame Chosen_2018_instruction: |-
        Build the rest of your house
        from any material you'd like. The "repeat" command will come in handy.
      Overworld Move to Sheep_instruction: Adicione um segundo comando "andar à frente"
        para chegar à ovelha.
      Overworld Move to Sheep_2018_instruction: |-
        Add a second `move forward` block
        to reach the sheep.
      Overworld Place Wall_instruction: Toda casa começa com uma parede. Construa
        a primeira parte da sua casa colocando os comandos "colocar" e "andar à frente"
        dentro do loop de repetição.
      Overworld Place Wall_2018_instruction: |-
        Every house starts with a wall. Build
        the first part of your house by putting the "place" and "move forward"
        commands inside the repeat loop.
      Overworld Plant Crops_instruction: É sempre bom pensar no futuro. Plante colheitas
        nos dois lados da água para você não passar fome depois.
      Overworld Plant Crops_2018_instruction: |-
        It’s good to plan ahead. Plant crops
        on both sides of the water so you don’t get hungry later on.
      Overworld Powered Minecart_instruction: Ótimo trabalho! Você coletou vários
        recursos e construiu uma casinha modesta. Agora, construa o trilho desde a
        borda do mapa até a porta da sua casa.
      Overworld Powered Minecart_2018_instruction: |-
        Great job! You’ve gathered lots
        of resources and built a modest home. Now lay rail from the edge of the map
        to the door of your house.
      Overworld Shear Sheep_instruction: Hora de tosquiar ovelhas! Use o comando "tosquiar"
        para obter lã das duas ovelhas.
      Overworld Shear Sheep_2018_instruction: |-
        Sheep-shearing time! Use the “shear”
        command to gather wool from both sheep.
      PDAlg 13-16 Sam Extension Puzzle_instruction: |-
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |-
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 Rocket Height Puzzle_instruction: |-
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg 8-12 ex dr 1_instruction: |-
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |-
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg Big Game History_instruction: |-
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |-
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |-
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |-
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |-
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |-
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |-
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |-
        As flores roxas podem ter 1 ou 0 néctar,
        mas você não sabe quanto ela tem! Tome cuidado para não coletar néctar de uma flor roxa
        que não tenha néctar algum. Verifique se o néctar é igual a 1 usando
        o bloco se.
      PDK5 Conditionals 2_instruction: "Experimente esse desafio que usa condicionais
        e\nlaços em conjunto. Use o bloco \"se\" para decidir quando virar. Dica:
        você só\nprecisa de mais um bloco para completar este desafio. "
      PDK5 Events 1_instruction: "Até agora, todos os programas que escrevemos são
        executados\nem ordem, de cima para baixo. Nesse desafio, vamos usar \"Eventos\"
        para responder\na uma ação em demanda. Faça o polvo dizer \"Olá\" somente
        quando você\nclicar nele. "
      PDK5 Functions 1_instruction: |-
        Olá. Mim artista zumbi. Mim amar desenhar! Ajude-me
        a desenhar os óculos quadrados. Dica: a haste entre os óculos é 25 pixels
        menor que o comprimento do quadrado.
      PDK5 Functions 2_instruction: |-
        As funções permitem que você defina novos blocos! Movemos
        os blocos para desenhar um quadrado dentro de uma função chamada "desenhe um quadrado".
        Você consegue usar a função "desenhe um quadrado" para criar os óculos? Os quadrados são separados
        por 75 pixels.
      PDK5 Loops 1_instruction: "Ao invés de usar 5 blocos \"avance\", use\no bloco
        \"repita\" com um bloco \"avance\" dentro dele. Em ciência da\ncomputação,
        isso é chamado de \"laço\". "
      PDK5 Loops 3_instruction: |-
        Temos aqui outro desafio para praticar o uso de laços. O que acontece
        se você usar o bloco repita para executar o código fornecido na área de trabalho
        4 vezes?
      PS - test - pixelation_instruction: |-
        Complete the X shape by typing 0s and
        1s
      PS FR test 7-25_instruction: 'Here are your instructions for this free response.  '
      PS Log test - Define and use turnAround_instruction: |-
        Define a function called
        turnAround. Call the function and then move the turtle forward. (Click to
        see full instructions)
      PS copy 2-3 Bee Conditionals 5_instruction: |-
        Be careful not to collect nectar
        from a purple flower if it doesn't have any. \r
        You must first check if
        the nectar is equal to 1 using the `if nectar` block.
      PS predictive Applab level test_instruction: 'Here are some instructions. '
      Pattern Bee 1_instruction: |-
        What a strange field of goodies! I wonder if there's
        a pattern here...
      Pixelation - AllTheThings 4_instruction: |-
        This pixelation level demonstrates
        the use of the `hide_encoding_controls` option.  Notice that the level displays
        the image data in hexadecimal and does not let you change it back to binary.
      Pixelation - AllTheThings 5_instruction: |-
        This pixelation level demonstrates
        the use of the "Hide sliders" option.  Notice that the width and height
        sliders are not available, and the width and height fields are not editable.
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |-
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |-
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |-
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |-
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |-
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |-
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |-
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |-
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |-
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |-
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |-
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |-
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |-
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |-
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Pizza on a Plate_instruction: |-
        Project Idea: Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Planning Farmer_instruction: |-
        What a strange field of goodies! I wonder if
        there's a pattern here...
      Planter Test_instruction: Help me plant my fields!
      Play Lab Rocket 1_instruction: |-
        Um foguete é lançado, viajando a 15 metros
        por segundo... clique em "Executar" para ver como é esse problema em forma de animação.
      Play Lab Rocket 2_instruction: |-
        Começamos a receita de design para a altura do foguete
        usando o contrato e os exemplos que você escreveu. Complete a definição da função
        para a altura do foguete e execute sua animação.
      Play Lab Rocket 2B_instruction: |-
        Um foguete decola, viajando a 15 metros
        por segundo. Usando a receita de design, escreva uma função chamada altura-foguete
        que recebe o número de segundos passados desde a decolagem do foguete
        e retorna a altura do foguete passado esse tempo.
      Play Lab Rocket 3_instruction: |-
        Excelente! Agora, você consegue atualizar essa função para
        que nosso foguete se mova mais rapidamente? Lembre-se de atualizar a instrução de finalidade,
        os exemplos e a definição da função para lançar um foguete a 40 metros por segundo.
      Play Lab Rocket 4 (copy 1)_instruction: |-
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |-
        Foguetes de verdade começam devagar e ganham velocidade
        com o passar do tempo - então vamos adicionar uma aceleração simples ao nosso! Você pode
        escrever uma função que descreve um foguete que está a 10 metros em 1 segundo, 40 metros
        em 2 segundos, 90 metros em 3 segundos, 160 em 4 segundos e assim por diante?
      Play Lab Rocket 5_instruction: |-
        Muito melhor, mas vamos escrever mais uma função
        com aceleração simples. Dessa vez o foguete deve estar a 15 metros em 1 segundo,
        45 metros em 2 segundos, 95 metros em 3 segundos e 165 metros em 4 segundos.
      Play Lab Rocket Free Play_instruction: |-
        Atividade livre: faça uma experiência com sua função altura-foguete
        para fazer o foguete voar de formas diferentes. Clique em "Concluir" quando você
        terminar.
      Poorva copy U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      Poorva-test_instruction: |-
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Practice Create Performance Task_instruction: |-
        Design and implement your practice
        Create Performance Task. (Click to see full instructions)
      Project - Final Image Scroller_instruction: |-
        Update the image scroller to respond
        to buttons and key presses. (Click to see full instructions)
      Project - Finish your canvas app_instruction: |-
        Extend the functionality of
        one of the effects, or create an entirely new one of your own. (Click to see
        full instructions)
      Project - Make Your Own Clicker Game_instruction: |-
        Complete your clicker game!
        (Click to see full instructions)
      Project - Your Own Multi Screen App_instruction: |-
        Create your multi-screen
        app. (Click to see full instructions.)
      Prompt Test_instruction: |-
        Build whatever you want. This is an example of a
        number-guessing game!
      Quantum Bee - Ryan_instruction: |-
        These clouds are bugging me! Some of the clouds
        have flowers inside, and some don't. I should check each cloud, and only
        get nectar from the flowers.
      Quantum Bee_instruction: Flores roxas podem ter 1 ou 0 néctar, mas você não
        saberá qual delas! Tenha cuidado para não recolher o néctar de uma flor roxa
        que não tem nenhum. Verifique se o néctar é igual a 1, usando o bloco "if".
      Robot Doodle_instruction: |-
        Project Idea: Create a picture of something familiar
        from the real world. This requires persistence and planning!
      Robot Doodle_2018_instruction: |-
        Project Idea: Create a picture of something
        familiar from the real world. This requires persistence and planning!
      Robot Drawing_instruction: |-
        Project Idea: Create a picture of something familiar
        from the real world. This requires persistence and planning!
      Robot_instruction: |-
        Project Idea: Create a picture of something familiar from
        the real world. This requires persistence and planning!
      Rocket Height Course A_instruction: |-
        Follow the Design Recipe to create a function
        rocket-height.
      Ryan - 4-5 Bee Conditionals 2_instruction: |-
        Agora, a abelha só quer néctar.
        Nem todos os objetos são flores, então olhe embaixo de TODAS AS NUVENS para ver se
        ela está escondendo uma flor. Se estiver, então você pode coletar o néctar.
      Ryan - Bee Conditionals_instruction: |-
        Agora, a abelha só quer néctar.
        Nem todos os objetos são flores, então olhe embaixo de TODAS AS NUVENS para ver se
        ela está escondendo uma flor. Se estiver, então você pode coletar o néctar.
      Ryan Doily Step 1_instruction: |-
        Now we're going to draw a doily step by step.
        First, draw a square.
      Ryan Doily Step 2_instruction: Agora, você precisa ativar e repeti-lo 20 vezes!
        Quantos graus se obter 360 depois de 20 iterações?
      Ryan Doily Step 3_instruction: Agora, você precisa ativar e repeti-lo 20 vezes!
        Quantos graus se obter 360 depois de 20 iterações?
      Ryan Test Locked Blocks_instruction: |-
        Aqui temos uma função chamada "patrulhe".
        Edite-a para mover o gato 400 pixels para cima, e então 400 pixels para baixo.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      RyanTest3_instruction: |-
        This level has shape-shifting turned on! Refresh to
        see different variants.
      SG Add Subgoals practice_instruction: |-
        Draw a 3x3 grid to the front and right
        of the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      SG U3L03 - draw step_instruction: |-
        Write the drawStep function. (Click to see
        full instructions)
      SG U3L03 Define and use turnAround_instruction: |-
        Escreva a função virar() e
        use-a para fazer a tartaruga se mover como descrito.
      SG U3L03 Draw a T using turnAround_instruction: |-
        Draw a plus sign using the
        provided version of turnAround().  (Click to see full instructions)
      SG U3L03 Three Steps_instruction: |-
        Define a function called drawSide() which
        draws three steps and moves the turtle to prepare for the next side (Click
        to see full instructions)
      SG U3L03 define turnRight and draw a rectangle_instruction: |-
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      SG U3L03 draw diamond_instruction: |-
        Create a function called drawDiamond()
        that makes use of your previous work to draw the complete diamond. (Click
        to see full instructions)
      SG U3L04 - 3 by 3 with functions_instruction: |-
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      SG U3L04 - snowflake_instruction: |-
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      SG U3L06 - moveForwardwithParams_instruction: |-
        Use a single command to move
        the turtle to the edge of the screen. (Click to see full instructions)
      SG U3L06 Challenge 1 triangle_instruction: |-
        Use the parameterized versions
        of the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      SG U3L06 Challenge 2 purple square_instruction: |-
        Read the documentation for
        penColor() and penWidth() before using them to draw the blue square.
      SG U3L06 Challenge 3 fill pink_instruction: |-
        Fill in the background of the
        screen with your favorite color. (Click to see full instructions)
      SG U3L06 Challenge 4 bullseye_instruction: |-
        Vamos tentar mais uma vez.
        Desta vez as cores NÃO são chamadas pelo nome - você precisa usar o número hexadecimal
        cor para defini-la. Assim, para que você não fique tentando adivinhar aleatoriamente, vamos
        lhe dar uma dica -- cada uma das cores mostradas na imagem-alvo é uma das
        cinco listadas a seguir:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  Você deve acertar o palpite se aplicar o que sabe sobre
        cores RGB.
      SG U3L06 Challenge 5 overlapping circles_instruction: |-
        This image is created
        just using dot() and penColor() but, how are we going to get those circles
        to be transparent?  If you haven't gotten the hint yet: check out the documentation!
      SG U3L06 Challenge 6 squiggles_instruction: |
        Read the documentation for the
        "arcLeft" and "arcRight" commands and then draw the squiggles as shown.
      SG U3L06 Challenge 7 smiley face_instruction: |-
        Use turnTo() and moveTo() to
        help draw a smiley face. (Click to see full instructions)
      SG U3L06 Challenge 8 make your own_instruction: |-
        Use as ferramentas que você aprendeu
        hoje para criar um desenho próprio. Se você tiver tempo, desafie seus
        amigos para ver se eles conseguem duplicar sua imagem. Vamos mostrar para você os
        desenhos que nós mesmos fizemos. Você pode tentar duplicá-los, se quiser.
        Caso não queira, divirta-se criando o seu próprio desenho!
      SG U3L07 - Free Play Loops and Random_instruction: |-
        Free Play! Use what you
        learned from loops and random to make your own little scene. Have fun.
      SG U3L07 - allSeaGrass_instruction: |-
        Add 50 pieces of seagrass to the image
        by writing drawAllSeagrass with a loop. (Click to see full instructions)
      SG U3L07 - bubbles_instruction: |-
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      SG U3L07 - createTriangleParam_instruction: |-
        Define a function that accepts
        a parameter to match the function calls and complete the image. (Click to
        see full instructions)
      SG U3L07 - fish_instruction: |-
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      SG U3L07 - introSquare_instruction: |-
        Use a loop to draw a square. Then add
        another loop to draw many squares each one rotated some amount. (Click to
        see full instructions)
      SG U3L07 - loopsWithRandom_instruction: |-
        Increase the number of iterations
        to fill the screen with white. (Click to see full instructions)
      SG U3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      SG U3L07 - randomSquare_instruction: |-
        Draw the figure using a loop. (Click
        to see full instructions)
      SG U3L07 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      SG U3L07 - seaStar_instruction: |-
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      SG U3L07 - sunBeams_instruction: |-
        Add 100 sunbeams to the image by writing
        drawAllSunbeams with a loop. (Click to see full instructions)
      SG U3L07 - topDownDesign_instruction: |-
        Get comfortable with the structure of
        this program, then move on to the next exercise. (Click to see full instructions)
      SG U3L07 More Subgoals_instruction: |-
        Desta vez vamos aprender
        um pouco sobre como alterar a caneta da tartaruga. Leia a documentação para encontrar
        larguraCaneta() e corCaneta(), e então desenhe o quadrado roxo como foi mostrado.
      SG U3L08 - createTwoParamTriangle_instruction: |-
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      SG U3L08 - digitalScene_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      SG U3L08 - drawSquareWithParam_instruction: |-
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      SG U3L08 - fish_instruction: |-
        Add a parameter to drawFish that changes the
        size of the fish drawn. (Click to see full instructions)
      SG U3L08 - freePlay_instruction: |-
        Keep adding to your image by making more
        calls to your new functions with parameters. (Click to see full instructions)
      SG U3L08 - individualCode_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      SG U3L08 - introUnderTheSea - recovery_instruction: |-
        Add an extra fish, starfish,
        and piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      SG U3L08 - introUnderTheSea_instruction: |-
        Add an extra fish, starfish, and
        piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      SG U3L08 - multiParamFish_instruction: |-
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      SG U3L08 - paramsToStarfish_instruction: |-
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      SG U3L08 - randomInput_instruction: |-
        Use the randomNumber() blocks to test
        the functions you designed with random input. (Click to see full instructions)
      SG U3L08 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      SG U3L08 - squareTwoParams_instruction: |-
        Call drawSquare() to complete the
        drawing of two squares. (Click to see full instructions)
      SG U3L08 comments_instruction: |-
        Use the randomNumber() blocks to test the functions
        you designed with random input. (Click to see full instructions)
      SG U3L08 how to add comments_instruction: |-
        Use the randomNumber() blocks to
        test the functions you designed with random input. (Click to see full instructions)
      SG U3L2 Using Simple Commands part 1_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      SG U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and to
        the left of the turtle's starting position. Click to see full instructions.
      SG U3L2_Add-subgoals_instruction: |-
        Desenhe uma grade 3x3 acima e à direita da
        tartaruga. Tente fazer isso com o menor número de comandos possível. OBSERVAÇÃO:
        Esse problema é bastante desafiador. Você deve precisar passar um tempo resolvendo-o
        e ajustando-o.  Você também deve considerar usar lápis e papel para esboçar
        suas ideias.
      SG U3L2_Turtle3by3Grid_instruction: |-
        Draw a 3x3 grid to the front and right
        of the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      SG U3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and to
        the right of the starting location. (Click to show full instructions)
      SGU3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      Sam the Butterfly 1 (copy 1)_instruction: |-
        Essa borboleta se chama Sam e
        a área do jogo é o quintal de Sam. O quintal de Sam tem 400 pixels de largura por 400 de
        altura! Como você pode ver, Sam é livre para andar pelo quintal, e as coordenadas na parte
        superior da tela são atualizadas para que você saiba sua localização. Use as setas do teclado
        para mover Sam pelo quintal. Ajude Sam a coletar todas as bandeiras para seguir em frente.
      Sam the Butterfly 1_instruction: |-
        Esse morcego se chama Sam e a área do jogo é o quintal
        de Sam. O quintal de Sam tem 400 pixels de largura por 400 de altura! Como você pode
        ver, Sam é livre para andar pelo quintal e as coordenadas na parte superior da tela são
        atualizadas para que você saiba sua localização. Use as setas do teclado para mover Sam
        pelo quintal, anotando as coordenadas de Sam em diferentes localizações.
        Clique em "Concluir" quando você estiver pronto para seguir em frente.
      Sam the Butterfly 2_instruction: |-
        A mãe de Sam quer garantir que ela sempre possa
        ver pelo menos uma parte dele, então vamos escrever algumas funções que ajudem a garantir
        que ele não vá muito longe no quintal. Aqui temos uma função chamada "esquerda-segura?"
        - ela deve receber um número para seu domínio que representa as coordenadas de x de Sam
        e retornar verdadeiro se ele estiver dentro do limite esquerdo do quintal (x > -25). Se
        sua função funcionar, Sam não deve poder sair do quintal pelo lado
        esquerdo.
      Sam the Butterfly 3_instruction: |-
        No último desafio, impedimos Sam de sair
        pela esquerda, agora vamos fazer o mesmo com a direta. Preencha a função "direita-segura?"
        para que Sam não passe de x = 425.
      Sam the Butterfly 4_instruction: |-
        Hmm, podemos impedir que Sam saia pela
        esquerda, ou podemos impedi-lo de sair pela direita, mas como podemos impedi-lo
        de sair por ambas as direções? Tente usar o bloco "E" para programar a função
        "na-tela?" para verificar se Sam tem a esquerda-segura? E a direita-segura?
      Sam the Butterfly 5_instruction: |-
        Atividade livre: Incrível, agora Sam não pode sair do quintal
        nem pela esquerda, nem pela direita, mas e quanto às partes de cima e de baixo? Adicionamos
        um parâmetro adicional "y" para a função "na-tela?". Você consegue atualizar
        seu programa para que Sam não possa sair nem por cima (y = 425) nem por baixo (y= -25)?
        Teste seu programa movendo Sam o mais longe que ele puder ir em todas as quatro direções.
        Clique em Concluir quando Sam estiver completamente protegido.
      Sam the Butterfly 6_instruction: |-
        Adicionamos um novo parâmetro "y" à
        função "na-tela?". Atualize a função para que ela verifique se "esquerda-segura?"
        E "direita-segura?" E "superior-segura?" são todas verdadeiras. Quando você consertar a
        função, tente sair do quintal pela direita, pela esquerda e por cima.
      Sam the Butterfly 7_instruction: |-
        Agora temos apenas uma única direção com a qual nos preocupar! Crie
        uma função "inferior-segura?" e atualize a função "na-tela?" para que ela
        verifique as partes de cima, de baixo, esquerda e direita.
      Sam the Butterfly Complete_instruction: |-
        Agora temos apenas uma única direção com a qual nos preocupar!
        Crie uma função "inferior-segura?" e atualize a função "na-tela?" para
        que ela verifique as partes de cima, de baixo, esquerda e direita.
      SpecialFrozenLevel_instruction: |-
        Você se tornou oficialmente um artista mestre!
        Crie um país das maravilhas de gelo.
      Standalone_Artist_1_instruction: |-
        Bem-vindo ao Artista! Primeiro, vamos tentar
        fazer um quadrado simples usando os blocos "vire à direita" e "avance".
        Cada lado deve medir 100 pixels.
      Standalone_Artist_2_instruction: |-
        Desenhe esse diamante com ângulos de 120 e 60
        graus e lados de 150 pixels de comprimento.
      Standalone_Artist_3_instruction: |-
        Você consegue desenhar este hexágono com lados de
        100 pixels e ângulos de 60 graus?
      Standalone_Artist_4_instruction: |-
        Agora você tem um novo bloco para brincar,
        o laço. Ele vai repetir um conjunto de comandos. O que acontece se você repetir esses
        comandos 6 vezes?
      Standalone_Artist_5.5_instruction: |-
        Observe como simplificamos o código do diamante,
        transformando-o em um laço. Você pode repetir toda a sequência 12 vezes para desenhar
        a flor. Dica: você terá que virar 30 graus depois do laço do seu diamante
        para não continuar desenhando o mesmo diamante todas as vezes.
      Standalone_Artist_5_instruction: |-
        Quantas vezes você precisa repetir esse diamante
        para desenhar a flor?
      Standalone_Artist_6_instruction: |-
        Repita esse código do hexágono 6 vezes para criar
        o design. Quantos graus você precisa virar a cada vez? Dica: divida
        o número de graus em um círculo pelo número de vezes que você está repetindo.
      Standalone_Artist_7_instruction: |-
        Uma função é mais uma ferramenta de programação para que
        você não tenha que repetir as mesmas ações. Essa função desenha uma flor, então
        você pode usá-la sempre que quiser desenhar uma flor. Use-a juntamente com o novo bloco
        "pule" para desenhar essas flores. Dica: as flores são separadas por 150 pixels
      Standalone_Artist_8_instruction: |-
        Temos aqui uma função chamada "Desenhe uma forma",
        que programamos para desenhar hexágonos. Execute o código para ver o que ele faz e,
        em seguida, tente usá-lo com a função para ver o que acontece. Você consegue fazer
        com que ela desenhe um padrão de quadrados, triângulos ou octógonos?
      Standalone_Artist_9_instruction: |-
        Agora vá em frente e faça a imagem que
        quiser! Você tem até uma função vazia para usar para fazer o que
        quiser!
      Standalone_Artist_v2_instruction: |-
        Bem-vindo ao Artista! Primeiro, vamos tentar
        fazer um quadrado simples usando os blocos "vire à direita" e "avance".
        Cada lado deve medir 100 pixels.
      StepIntro_instruction: Here's how to use the "Step" button.
      Test Play Lab_instruction: This is a test play lab level.
      Test embedded Blockly in instructions_instruction: |-
        As a block element, we
        should be able to include XML representing a valid Blockly block or blocks.\r
        \r
        <xml>\r
          <block
        type="draw_move_by_constant">\r
            <title name="DIR">moveForward</title>\r
            <title
        name="VALUE">100</title>\r
          </block>\r
        </xml>\r
        \r
        We also support
        Blockly XML as an inline element like so: <xml><block type="draw_move_by_constant"><title
        name="DIR">moveForward</title><title name="VALUE">100</title></block></xml>.
        The difference in input format being that this one is embedded within a paragraph,
        whereas the previous one is in a text block of its own. The difference in
        output is comparable.
      Test embedded K1 Blockly in instructions_instruction: |-
        Use three `move west`
        blocks and one `pick corn` block to solve this puzzle.
      Test of comment block_instruction: Drag out the subgoal label block you want.
      Testing Quantum Farmer_instruction: "Wow, look at that! \\r\n\\r\nI don't know\nhow
        many shovelfuls of dirt this hole needs.  \\r\nCan you write a program\nthat
        keeps using the `fill` block until the ground is even?  "
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.\r
        \r
      The Vigenere Cipher Widget_instruction: Instruções
      The Vigenere Cipher_instruction: Instruções
      Total Artist Clone Me_instruction: |-
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |-
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |-
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |-
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: |-
        Envie uma mensagem configurando o estado do
        fio como A ou B.
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |-
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 Vigenere_instruction: Test
      U2 frequency caesar_instruction: Instruções
      U2 frequency random sub_instruction: Instruções
      U2 vigenere cipher_instruction: Instruções
      U2L04 - NetSim Routers with Addresses_instruction: |-
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |-
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |-
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |-
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |-
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - Demo App_instruction: |-
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - appendItem_instruction: |-
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |-
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |-
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |-
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |-
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |-
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |-
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings Next_instruction: |-
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |-
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |-
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |-
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings createArray_instruction: |-
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |-
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |-
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings template_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |-
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |-
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |-
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |-
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |-
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |-
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |-
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |-
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |-
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |-
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |-
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |-
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |-
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |-
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |-
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |-
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |-
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |-
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |-
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |-
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |-
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |-
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |-
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |-
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |-
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |-
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |-
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |-
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |-
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND OR Simple_instruction: |-
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |-
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND and OR_instruction: |-
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Simple AND_instruction: |-
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |-
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Conditionals - intoOr_instruction: |-
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |-
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |-
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |-
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |-
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |-
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |-
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |-
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |-
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |-
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |-
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |-
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |-
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |-
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |-
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |-
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |-
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |-
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |-
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |-
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |-
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |-
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |-
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |-
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |-
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |-
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |-
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |-
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |-
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |-
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |-
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |-
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |-
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |-
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |-
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |-
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |-
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |-
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |-
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2-
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |-
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |-
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |-
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |-
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2-
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2-
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |-
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |-
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |-
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |-
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |-
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |-
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |-
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |-
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |-
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |-
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |-
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |-
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |-
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |-
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |-
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |-
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |-
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |-
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |-
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |-
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |-
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |-
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |-
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |-
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |-
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |-
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |-
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |-
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |-
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |-
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |-
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Practice Create Performance Task_instruction: |-
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |-
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |-
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |-
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |-
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |-
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |-
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |-
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |-
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |-
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |-
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |-
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simple Drawing - Comments_instruction: Do this
      U3 - Simple Drawing - Ellipse and No Fill_instruction: Do this
      U3 - Simple Drawing - Fill_instruction: Do This
      U3 - Simple Drawing - No Fill_instruction: Do this
      U3 - Simple Drawing - Order of Blocks_instruction: Do this
      U3 - Simple Drawing - Oval_instruction: Do This
      U3 - Simple Drawing - Personal Drawing_instruction: DO This
      U3 - Simple Drawing - Rectangle Width and Height_instruction: Do This
      U3 - Simple Drawing - Rectangle_instruction: Do This
      U3 - Simple Drawing - Road Ellipse_instruction: Do This
      U3 - Simple Drawing - Road Rects and Color_instruction: Do This
      U3 - Simple Drawing - Simple Shape Drawing_instruction: Do This
      U3 - Simple Drawing - Stroke and Stroke Weight_instruction: Do this
      U3 - Simple Drawing - X and Y values_instruction: Do This
      U3 - Simple Drawing - regular polygon_instruction: Do this
      U3 - Simple Drawing - text_instruction: Do This
      U3 - Simulation - 1_instruction: |-
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |-
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |-
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |-
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |-
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |-
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |-
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |-
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |-
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - Sprites - Intro Sprites_instruction: Do This
      U3 - Sprites and Mod - Create  and Draw Sprite_instruction: Do This
      U3 - Sprites and Mod - Mouse Width and Height_instruction: Do this
      U3 - Sprites and Mod - Mouse X and Y_instruction: Do this
      U3 - Sprites and Mod - Rand Around Mouse_instruction: Do this
      U3 - Sprites and Mod - Rand Shape Color_instruction: Do This
      U3 - Sprites and Mod - Shape Color_instruction: Do This
      U3 - Sprites and Mod - Wrap Many Squares_instruction: Do This
      U3 - Sprites and Mod - X and Y Prop_instruction: Do This
      U3 - Sprites and Mod - two sprites_instruction: Do This
      U3 - User Input - Save getText To Variable_instruction: |-
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |-
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |-
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |-
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |-
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |-
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |-
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |-
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |-
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |-
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |-
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |-
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |-
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |-
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |-
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |-
        Test out the new expressions.
        (Click to see full instructions)
      U3 - images - bee free play_instruction: Do this
      U3 Digital Assistant Design_instruction: |-
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |-
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |-
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |-
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 Variables consolelog_instruction: |-
        Use the write block to display the value
        of size
      U3 Variables flower example_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables gray square_instruction: |-
        Change the value of petalSize multiple
        times. How does it change your drawing?
      U3 Variables make a square_instruction: |-
        Change the value of size multiple
        times. How does it change your drawing?
      U3 Variables misconceptions try it_instruction: |-
        Test out your predictions
        from the previous level.
      U3 Variables randomize your square_instruction: |-
        Change the value of petalSize
        multiple times. How does it change your drawing?
      U3 Variables write_instruction: |-
        Use the write block to display the value of
        size
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |-
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |-
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |-
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |-
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |-
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |-
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |-
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 Two Buttons with Ids_instruction: |-
        Sua vez de tentar! Fornecemos a você um
        código inicial com dois botões e dois manipuladores de evento na tela, mas deixamos
        os Ids padrões de "id". Você precisa alterar esses ids para conectar
        o manipulador de eventos ao botão correto. (Curiosamente, o programa
        incorreto funciona, mas ele tem um comportamento bizarro. Vamos discutir mais
        sobre isso na próxima lição. Por enquanto, faça os botões funcionarem corretamente).
      U313 drag Two Buttons_instruction: |-
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |-
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |-
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 Creating Procedures 1_instruction: |-
        Escreva a função virar() e
        use-a para fazer a tartaruga se mover como descrito. Veja: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |-
        Escreva a função virar() e
        use-a para fazer a tartaruga se mover como descrito.
      U3L03 Draw a T using turnAround_instruction: "Agora a função \"virar\" é \nfornecida
        no código. Use a função virar() para desenhar um T conforme\ndescrito."
      U3L03 Three Steps_instruction: |-
        Desenhe 3 "passos", movendo para cima e para a direita. Observe
        o padrão do movimento. Você deve definir uma função chamada desenharPasso()
        que desenha um dos passos e então chamá-la 3 vezes para obter o efeito desejado.
      U3L03 choose your own drawing_instruction: |-
        Agora escolha o seu!  Escolha um dos
        três desenhos mostrados aqui e tente criá-lo você mesmo, tomando decisões
        inteligentes sobre como dividir o problema em funções reutilizáveis.  Você vai revisar seu
        trabalho com um colega usando os "procedimentos para a rubrica de revisão em pares".
        Verifique os procedimentos para ver os requisitos.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 define turnRight and draw a rectangle_instruction: |-
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 draw diamond_instruction: "Use qualquer função que você escreveu\nantes
        para fazer uma forma de \"diamante\" conforme mostrado na imagem.\\r\n\\r\nOBSERVAÇÃO:\nessa
        é mais uma pegadinha.  Os 4 lados do diamante são feitos desenhando\ntrês
        etapas com outro movimento feito entre as chamadas.  Dica: você deve criar\noutra
        função que desenha um lado do diamante. "
      U3L04 - 3 by 3 with functions_instruction: |-
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |-
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |-
        Agora escolha o seu!  Escolha um dos
        três desenhos mostrados aqui e tente criá-lo você mesmo, tomando decisões
        inteligentes sobre como dividir o problema em funções reutilizáveis.  Você vai revisar seu
        trabalho com um colega usando os "procedimentos para a rubrica de revisão em pares".
        Verifique os procedimentos para ver os requisitos.
      U3L04 diamond solution_instruction: |-
        Estude essa solução para o problema da função desenharDiamante
        Observe que todo programa começa chamando desenharDiamante() no
        começo.  Então, o programa segue uma cadeia de chamadas. Você pode acompanhar
        o que está acontecendo no código para ver as funções reutilizadas.  Também é fácil
        de ler porque os nomes das funções descrevem o comportamento esperado.
      U3L05_3x3GridEfficiencyChallenge_instruction: |-
        Vamos revisitar o problema da grade 3x3
        que você resolveu algumas lições atrás.  Desta vez o desafio é programar
        a solução da forma "mais eficiente possível".  Agora que você sabe como escrever
        funções, deve ser mais fácil dividir o problema e seu código deve ser
        mais fácil de ler e depurar. Veja a rubrica para mais detalhes sobre os requisitos
        e as expectativas.
      U3L05_draw3x3GridEfficiently_instruction: |-
        Desenhe uma grade 3x3 acima e para a
        direita da tartaruga. Tente fazer isso com o menor número de comandos possível.
        OBSERVAÇÃO: esse problema é bastante desafiador. Você deve precisar passar um tempo
        resolvendo-o e ajustando-o. Você também deve considerar usar lápis e papel para esboçar
        suas ideias.
      U3L06 - moveForwardwithParams_instruction: |-
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |-
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |-
        Desta vez vamos aprender
        um pouco sobre como alterar a caneta da tartaruga. Leia a documentação para encontrar
        larguraCaneta() e corCaneta(), e então desenhe o quadrado roxo como foi mostrado.
      U3L06 Challenge 3 fill pink_instruction: |-
        Agora, vamos tentar preencher todo o fundo
        da tela. Para deixar as coisas um pouco mais fáceis para você, podemos lhe dizer
        que a cor que escolhemos é uma das 140 cores nomeadas. Se você não souber os
        nomes das cores, dê uma olhada na documentação de corCaneta()
        novamente. Dica: você precisa usar ponto().
      U3L06 Challenge 4 bullseye_instruction: |-
        Vamos tentar mais uma vez.
        Desta vez as cores NÃO são chamadas pelo nome - você precisa usar o número hexadecimal
        cor para defini-la. Assim, para que você não fique tentando adivinhar aleatoriamente, vamos
        lhe dar uma dica -- cada uma das cores mostradas na imagem-alvo é uma das
        cinco listadas a seguir:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  Você deve acertar o palpite se aplicar o que sabe sobre
        cores RGB.
      U3L06 Challenge 5 overlapping circles_instruction: |-
        Esta imagem é criada apenas
        usando ponto() e corCaneta(), mas como vamos fazer esses círculos ficarem
        transparentes? Se você ainda não recebeu a dica: leia a documentação!
      U3L06 Challenge 6 squiggles_instruction: |-
        Em seguida, vamos adicionar algumas
        curvas ao nosso desenho. Leia a documentação para os comandos de "arco" e
        então desenhe os rabiscos como mostrado. Para facilitar as coisas, temos aqui uma dica: todos
        os parâmetros são múltiplos de 10 e as cores são da seguinte lista de
        nomes de cores: azulCeleste, azulClaro, azulTurquesa, Roxo e Magenta.
      U3L06 Challenge 7 smiley face_instruction: |-
        Para fazer essa carinha feliz você vai
        precisar olhar a documentação do comando mova() e então usá-lo com os
        outros que você aprendeu. Você pode fazer suposições razoáveis sobre as cores.
      U3L06 Challenge 8 make your own_instruction: |-
        Use as ferramentas que você aprendeu
        hoje para criar um desenho próprio. Se você tiver tempo, desafie seus
        amigos para ver se eles conseguem duplicar sua imagem. Vamos mostrar para você os
        desenhos que nós mesmos fizemos. Você pode tentar duplicá-los, se quiser.
        Caso não queira, divirta-se criando o seu próprio desenho!
      U3L07 - Free Play Loops and Random_instruction: |-
        Atividade livre! Use o que você aprendeu
        sobre laços e aleatoriedade para criar sua própria pequena cena. Divirta-se.
      U3L07 - Starry Night Starter Code_instruction: "Você vai usar laços e números\naleatórios
        para gerar uma imagem do céu em uma noite estrelada parecida com uma\nmostrada
        aqui. Fornecemos um código inicial para gerar o chão e o céu\n(apenas dois
        pontos gigantes) e você vai adicionar código a esse projeto para fazer as\nestrelas,
        a grama e a lua.  Todos os efeitos são aplicações inteligentes dos pontos,\nlinhas
        e cores da tartaruga.  Para começar, siga a série de etapas sugerida na\nplanilha
        de acompanhamento. "
      U3L07 - allSeaGrass_instruction: |-
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |-
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |-
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |-
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |-
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - introSquare_instruction: |-
        Use a loop to draw a square. Then add another
        loop to draw many squares each one rotated some amount. (Click to see full
        instructions)
      U3L07 - loopsWithRandom_instruction: |-
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |-
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |-
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |-
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - sunBeams_instruction: |-
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |-
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |-
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, seagrass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - createTwoParamTriangle_instruction: |-
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |-
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |-
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |-
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |-
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - fish_instruction: |-
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |-
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |-
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea with comments_instruction: |-
        Add an extra fish, starfish,
        and piece of seagrass to the image. Look at, but don't change, the functions
        that create them. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |-
        Add an extra fish, starfish, and piece
        of seagrass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |-
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |-
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |-
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |-
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |-
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |-
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |-
        Add an extra fish, starfish, and piece of seagrass
        to the image. Look at, but don't change, the functions that create them.
        (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |-
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 how to add comments_instruction: |-
        Use the randomNumber() blocks to test
        the functions you designed with random input. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |-
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |-
        Arraste um botão para fora da tela e
        defina seu texto como "Vá em frente!".  Execute o programa para ver se você consegue enxergar
        o botão.
      U3L13 - Debug Id Problem_instruction: |-
        Esse programa tem um problema! Você pode descobrir
        qual? Execute o programa e veja se você pode descobrir a partir das mensagens de erro
        no console qual é o problema. Não há muito código para ver, então você deve ser capaz
        de descobrir o problema simplesmente lendo o código com atenção. Faça uma alteração
        que permita que o programa funcione como esperado.
      U3L13 - Debug Id plus logic problem_instruction: "O último problema foi um exemplo\nde
        erro de sintaxe. O laboratório de aplicativo não entendeu qual objeto ele
        deveria ouvir \npara um evento \"clique\", então ele mostrou uma mensagem
        de erro no console para\ninformá-lo. Outro tipo de erro é um erro lógico -
        o programa é válido,\nmas não faz o que você quer que ele faça.\\r\n\\r\nEsse
        programa tem dois erros.\nUm erro de sintaxe (complicado) e um erro lógico.
        \ Encontre-os, conserte-os e faça\no programa funcionar como esperado."
      U3L13 - Debugging 1_instruction: |-
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |-
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |-
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |-
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |-
        Desafio: crie uma "tartaruga motorista"
        com pelo menos três botões na tela para mover a tartaruga para a frente e
        virá-la para a direita e para a esquerda. Se quiser, você pode copiar/colar de um nível anterior,
        mas você vai exercitar seus músculos de programação se criar
        esse pequeno programa desde o início. Se tiver tempo, adicione botões extras! Você
        também pode se divertir alterando os parâmetros nas funções da tartaruga, usando cores,
        etc.
      U3L13 - Turtle move with button_instruction: "Arraste um botão para fora da
        tela e\ndefina seu texto como \"Vá em frente!\". Adicione um manipulador de
        eventos para o botão que\nfaz a tartaruga se mover para a frente. Execute
        o programa para ver se ele funciona. "
      U3L13 eventsDetails_instruction: |-
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |-
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - Mini Calculator embed_instruction: |-
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - Unfortunate Events Free Play_instruction: |-
        Siga a planilha de "Eventos
        infelizes" e insira seu código aqui para testá-lo. Carregamos previamente
        o código que você precisa para começar.
      U3L14 - User Input Division calculator_instruction: |-
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |-
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L14 - concatenate simple_instruction: |-
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - moving memory challenge1_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |-
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |-
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |-
        Try out the demo app
        (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |-
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |-
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |-
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - add code to make count down work_instruction: |-
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - clicker update score_instruction: |-
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |-
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |-
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - global var example count up_instruction: |-
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |-
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |-
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - variable scoping problem debugging_instruction: |-
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |-
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |-
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |-
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |-
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |-
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |-
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |-
        Introdução de textInput, getText e write.  Primeiro,
        execute o código inicial várias vezes. Tente alterar o que é escrito na
        tela quando o botão for clicado. Então, use getText para escrever na tela
        o que o usuário digitou na caixa de texto. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |-
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |-
        Introdução do comando setPosition!  Substitua
        o moveTo no manipulador de eventos de clique do botão para usar setPosition para mover o
        botão para uma posição aleatória quando ele for clicado.
      U3L16 - images and text labels_instruction: "Introdução de objetos diferentes
        de\nbotões! - textLabels e imagens.  Primeiro, tente substituir seu botão
        por um\ntextLabel.  O texto vai responder a eventos da mesma forma que o botão?
        \ Tente conectá-lo\na um manipulador de eventos. Fornecemos um código inicial
        similar ao resultado do\núltimo nível, então você pode copiar o código do
        último nível aqui se\npreferir. "
      U3L16 - images_instruction: "Introdução de imagens. Tente substituir o textLabel\npor
        uma imagem. A imagem vai responder aos eventos como o botão respondia? Tente
        \nconectá-la a um manipulador de eventos. Fornecemos um código inicial similar\nao
        resultado do último nível, então você pode copiar o código do último nível\naqui
        se você preferir. "
      U3L16 - intro getText_instruction: |-
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |-
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |-
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |-
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |-
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |-
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |-
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |-
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |-
        Introdução do comando setPosition!
        Substitua o moveTo no manipulador de eventos de clique do botão para usar setPosition
        para mover o botão para uma posição aleatória quando ele for clicado.
      U3L16 - setPositionMoveButton_instruction: Use setPosition para moveButton
      U3L16 - setupMoveToRandom_instruction: "Vamos nos basear em alguns códigos\niniciais
        simples para esta lição. Sua primeira tarefa: use moveTo e randomNumber\npara
        fazer a tartaruga se mover para uma posição aleatória a cada clique do botão.
        Fornecemos\na você o código inicial para nossa configuração comum: um botão
        que move a tartaruga\nquando é clicado. Você deve modificar esse código.  "
      U3L16 - singleSetPosition_instruction: |-
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |-
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: "Introdução de textLabels.  Primeiro, tente
        substituir\nseu botão por um textLabel.  O texto vai responder a eventos da
        mesma forma que o\nbotão?  Tente conectá-lo a um manipulador de eventos. Fornecemos
        um código\ninicial similar ao resultado do último nível, então você pode copiar
        o código do\núltimo nível aqui se você preferir. "
      U3L16 - textInput getText write_instruction: |-
        Introdução de textInput, getText
        e write.  Primeiro, execute o código inicial várias vezes. Tente alterar o que
        é escrito na tela quando o botão for clicado. Então, use getText para escrever
        na tela o que o usuário digitou na caixa de texto.
      U3L16 - toUpper_instruction: |-
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |-
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) "
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib Student Setup_instruction: |-
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) "
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) "
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) "
      U3L17 - getAndSetKeyValue_instruction: |-
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |-
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |-
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |-
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |-
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |-
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |-
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |-
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |-
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |-
        Use esta área de laboratório do aplicativo para melhorar
        seu jogo no estilo clicker.  Você deve começar copiando/colando o código do seu jogo antigo
        aqui. Estamos mostrando um conjunto mais completo de blocos na caixa de ferramentas -
        você pode não ter usado algumas coisas ainda. Fique à vontade para explorar e
        testar o que você quiser. Tudo o que você precisa deve ser mostrado.
        Divirta-se!
      U3L19 - DEMO up down count practice app_instruction: |-
        Try out the demo app
        (Click to see full instructions)
      U3L19 - Debugging with consoleLog_instruction: |-
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |-
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |-
        Investigate the new elements of the
        'chaser-game'
      U3L19 - do concatenate string with var_instruction: |
        Demos a você um trecho
        de código da tela anterior. Tente alterar o valor atribuído a foo
        para ver a string ser alterada. \r
        Faça o seguinte: \r
        1. Tente alterar o valor atribuído
        a foo para ver a string ser alterada. \r
        2. Modificando apenas as linhas de código
        que lhe foram dadas, tente fazer a saída ser: “O valor de foo é:
        9.  Quem achar diferente que prove.” \r
      U3L19 - fix the var name syntax error v2_instruction: |-
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Demos a você um trecho de código
        com um erro. Ele não reconhece a variável. Você consegue descobrir o motivo? Conserte
        o erro e execute o programa. Observe também a mensagem de erro, já que ela
        pode aparecer em algum momento da sua vida.\r
        \r
      U3L19 - global var example count up_instruction: |-
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |-
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - test reassignment of two vars_instruction: |-
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Faça o seguinte:\r
        Demos a você
        três linhas de código mostradas na página anterior. Adicione três linhas de
        código abaixo das mostradas aqui para criar sua própria variável, atribuir um
        valor a ela e escrevê-la na tela.  OBSERVAÇÃO: altere o nome da variável de
        x para alguma outra coisa.\r
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |-
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |-
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |-
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |-
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |-
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: "Here is the code from\nprevious
        page that has a subtle problem with it.  FIRST: run the app and try\nit to
        see the problem. NOTE: NaN stands for \"Not a Number\".   DO THIS: figure\nout
        what's happening, where, and fix the problem.  We'll explain the issue\non
        the next page. "
      U3L19 - write var and string with same name v2_instruction: |-
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |-
        Agora, veja este
        exemplo. Adicionamos outra declaração de escrita. Antes de executar o código, veja
        se você consegue prever qual será a saída. É sério, anote sua previsão. DEPOIS,
        execute o código, mexa nele, se quiser, e vá para a próxima página para
        ver uma explicação.
      U3L2 Using Simple Commands (no tooltips)_instruction: |-
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |-
        Desenhe um quadrado usando apenas avance
        e vireEsquerda.  O quadrado deve ser desenhado acima e à esquerda da posição
        inicial da tartaruga.
      U3L23 Chatbot Conditionals 1_instruction: |-
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |-
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |-
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |-
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |-
        Add newline characters "\n" to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |-
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |-
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |-
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |-
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |-
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |-
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |-
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |-
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |-
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |-
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |-
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |-
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |-
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |-
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Nested Conditionals 1_instruction: |-
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. "
      U3L24 Nested Conditionals Bugs 2_instruction: |-
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |-
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |-
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L24 introIncludes_instruction: |-
        Practice using the includes command. (Click
        to see full instructions)
      U3L25 - drag out key event_instruction: |-
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |-
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |-
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |-
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |-
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |-
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |-
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |-
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |-
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |-
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |-
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |-
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |-
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" "
      U3L26 OR operator_instruction: |-
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |-
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |-
        Desenhe uma grade 3x3 acima e à direita da
        tartaruga. Tente fazer isso com o menor número de comandos possível. OBSERVAÇÃO:
        Esse problema é bastante desafiador. Você deve precisar passar um tempo resolvendo-o
        e ajustando-o.  Você também deve considerar usar lápis e papel para esboçar
        suas ideias.
      U3L2_TurtleSquare_right_instruction: |-
        Desenhe um quadrado usando apenas avance
        e vireEsquerda, mas, desta vez, faça o quadrado aparecer ACIMA e À DIREITA
        da posição inicial.
      U4 - Add Row By Hand_instruction: |-
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - Export Data_instruction: |-
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |-
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |-
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |-
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |-
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |-
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |-
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |-
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |-
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |-
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |-
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - CreateRecord - 1_instruction: |-
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |-
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |-
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |-
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |-
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |-
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - Edit Data Table by Hand_instruction: |-
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |-
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |-
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |-
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |-
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |-
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |-
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |-
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |-
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |-
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |-
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |-
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |-
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |-
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |-
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |-
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |-
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |-
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |-
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |-
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |-
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |-
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |-
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |-
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |-
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |-
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |-
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |-
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4 - add createRecord to contacts App_instruction: |-
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - debug column names are case sensitive_instruction: |-
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |-
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |-
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |-
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |-
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - fix contacts by hand in data table_instruction: |-
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |-
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 Model App_instruction: |-
        Add a large red button to your screen using Design
        Mode. (Click for full instructions.)
      U4 Model Design 1_instruction: |-
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U4 vigenere cipher 2_instruction: Instruções
      U4L02 - Objects - Template1_instruction: Modelo
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions) "
      U4L02 - Objects - eventParameter_instruction: |-
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |-
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |-
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. "
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. "
      U4L06 Data Storage 7_instruction: |-
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |-
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U5 if-else-if movie example_instruction: |-
        Add an else-if statement in order
        to tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U6 - Final Project - Project Level_instruction: |-
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |-
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |-
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |-
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |-
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |-
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |-
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: Há lava escondida sob alguns destes blocos,
        que você precisará cobrir antes de avançar. Um comando "se" será útil aqui.
        Adicione um comando "andar à frente" no local correto para minerar estes blocos.
      Underground Avoiding Lava_2018_instruction: |-
        Lava is hiding beneath some of
        these blocks, which you'll need to cover up before moving forward. An "if"
        command will come in handy here. Add a "move forward" command in the correct
        place to mine these blocks.
      Underground If Statements_instruction: Agora, a situação complicou um pouco.
        Minere 3 redstone, mas não caia na lava. Use um comando "se" para colocar
        paralelepípedos sobre qualquer lava que você descobrir.
      Underground If Statements_2018_instruction: |-
        Now things are getting tricky.
        Mine 3 redstone, but don’t fall in the lava. Use an "If" command to place
        cobblestone over any lava you uncover.
      Underground Iron_instruction: Não é uma boa ideia tentar andar sobre lava incandescente.
        Coloque os paralelepípedos para criar uma ponte, depois minere pelo menos
        dois dos blocos de ferro.
      Underground Iron_2018_instruction: |-
        Walking into molten lava is a bad idea.
        Place cobblestone to create a bridge, then mine at least two of the iron blocks.
      Underground Mining Coal_instruction: Você encontrará os recursos mais valiosos
        no subterrâneo, mas pode ficar escuro lá dentro. Coloque pelo menos 2 tochas
        e minere pelo menos 2 carvões.
      Underground Mining Coal_2018_instruction: Você encontrará os recursos mais valiosos
        no subterrâneo, mas pode ficar escuro lá dentro. Coloque pelo menos 2 tochas
        e minere pelo menos 2 carvões.
      Unicorn Tag_instruction: |-
        Take a look at this project.  Do you see how it was
        made?
      Valentine_artist2_01_instruction: |-
        Program the artist to draw some grass for
        the Love Bug.
      Valentine_artist_01_instruction: 'Help the artist finish his llama heart. '
      Valentine_playlab_01_instruction: "Program Kiki (Actor 1) to move left and\nright
        when the left and right arrows are pressed. When Kiki is clicked, she\nshould
        throw hearts towards her friends. "
      Vigenere_instruction: Test
      WhileAdventure_instruction: |-
        Our adventurer wants to collect coins. Can you
        help her grab as many as she can using only one remove 1 block?
      'Widget: Black and White Pixelation_instruction': |-
        Now make your own image!
        We've started you off with a 10x10 canvas but you can make it whatever size
        you want. Happy pixeling!
      'Widget: Color Pixelation_instruction': |-
        Requirements: The icon must be 16x16
        pixels. You must use the Pixelation Widget to encode the bits of color information.
        The image must be encoded with at least 12 bits per pixel.
      'Widget: Text Compression_instruction': |-
        Look for patterns (repeated words
        or phrases) in the text. Enter the patterns you see into the dictionary on
        the right. As you type entries into the dictionary, the symbol for the entry
        is inserted into the text in place of the pattern.
      XML Scratchpad_instruction: Use este nível de teste para pegar xml para testes
        de unidade
      aE1_instruction: "You chose to make a square napkin! \\r\n\\r\nTo finish, draw\na
        square with 20 pixel sides. "
      aE2_instruction: |-
        If you place your square loop inside another loop, we call
        that a nested loop. What do you need to add as an outer loop to make sure
        all 14 napkins line up next to each other?
      aE3_instruction: |-
        We've got to have a tablecloth!  \r
        \r
        Take your row of
        14 napkins and sew 14 of those together with another **outer loop** to make
        a cover for our table.
      aE3alternate_instruction: Alternate
      aE3alternateB_instruction: Alternate
      aE4_instruction: Alternate
      aE5_instruction: Example of puzzle using highest difficulty level shape.
      aE6_instruction: "How many times do you need to loop this to draw half  of\na
        circle? "
      aE7_instruction: |-
        If you create another loop like this one, but turn left instead
        of right, what happens? \r
        \r
        Can you repeat all of that to draw this wave?
      aE8_instruction: |-
        Now let's loop that whole thing four times to create this
        picture frame. Watch out for the corners - you can't just turn 90 degrees!
        \r
        \r
        If looping a 3 degree turn 60 times makes a half circle, which of
        these blocks of code will make an additional quarter circle for the corners?
      aEfreeplay_instruction: Free Play!
      allHallows2017_instruction: |-
        Trap the Code.org employees in the crayon box
        by drawing a square with 320 pixel sides!
      allthethings data blocks test_instruction: |-
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |-
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings level dataTables_instruction: |-
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings_U3 - Simple Drawing - Rectangle Width and Height_instruction: |-
        Do
        This
      allthethings_moviebot_instruction: |-
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). "
      allthethings_template_backed2_instruction: |-
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      allthethings_ttscsp_instruction: |-
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      artistDebugVideo1_instruction: Use the `repeat` loop to add waves to the water.
      artistFunctionsVideo1_instruction: |-
        Follow the instructions to make your own
        function.
      artistLoopsK1_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      artistLoopsK2_instruction: |-
        Now, use a `repeat` loop to draw this line five
        times!
      artistLoopsK2gradek_artist_loops3_instruction: |-
        Now, use a `repeat` loop to
        draw this line five times!
      artistLoopsK3_instruction: |-
        Draw a line eight steps long. This will become
        the land for our kingdom!
      artistLoopsK4_instruction: |-
        Now we need a castle with a draw bridge.  Fix the
        code so that the bridge lays straight instead of falling down.
      artistLoopsK5_instruction: |-
        Now we need to fix the top of the castle. Can you
        loop the code three times?
      artistLoopsK6_instruction: "Someone is stuck in the tower!  Fix the stairs\nto
        set them free. "
      artistLoopsK7_instruction: "This tower is lovely, what is downstairs? Build\nanother
        staircase to find out! "
      artistLoopsK8_instruction: |-
        Wow! There's a garden over there!  Help fix these
        stairs so I can get to it.
      artistLoopsK9_instruction: |-
        **Challenge:**  Lovely! Let's take a walk around
        the garden.
      artistLoopsKA_instruction: |-
        These stones are in the wrong place.  Help me move
        them so I don't fall in!
      artistLoopsKB_instruction: "Look!  It's a theater.  Help me set up the chairs\nso
        we can all see the stage. "
      artistLoopsKFP_instruction: |-
        Picture time!  Use what you have learned to draw
        a picture of what you think the Artist saw on stage.
      asteroids_instruction: |-
        This Corgi has been a good boy! Drag this carrot to
        him as a special treat.
      beeDebugVideo1_instruction: Use um laço "repita" para coletar todo o néctar.
      behavior bash mary_instruction: Clone this level and make your own blocks!
      behaviors clone me 2_instruction: Clone this level and make your own blocks!
      behaviors clone me Ram_instruction: Clone this level and make your own blocks!
      behaviors clone me joshl_instruction: Clone this level and make your own blocks!
      behaviors clone me nk_instruction: Clone this level and make your own blocks!
      behaviors clone me tanya_instruction: Clone this level and make your own blocks!
      behaviors clone me_instruction: Clone this level and make your own blocks!
      behaviors pet test 123 copy_instruction: |-
        When Daisy gets a carrot, she gets
        excited. Use the **"when touches"** event and the "add behavior" block
        to make Daisy do something fun when she gets the carrot.
      behaviors pet test 123_instruction: |-
        When Daisy gets a carrot, she gets excited.
        Use the **"when touches"** event and the "add behavior" block to make
        Daisy do something fun when she gets the carrot.
      behaviors pet test 2_instruction: |-
        When Daisy gets a carrot, she gets excited.
        Use the **"when touches"** event and the "add behavior" block to make
        Daisy do something fun when she gets the carrot.
      behaviors pet test 3_instruction: "**It's time to make your own virtual pet!**\nYou
        can change whatever code you want to to make your own pet. Here are some\nideas:\\r\n*
        Can you make your pet start a new behavior when you click on it?\\r\n*\nCan
        you make your pet run away when you drag the vacuum to it?\\r\n* Can you\nadd
        other animal friends to your pet's area? "
      behaviors pet test_instruction: |-
        Last time, you practiced using "behaviors"
        to make a sprite do something forever. This time, we will use behaviors to
        make a virtual pet. \r
        \r
        This dog's name is Daisy. Daisy LOVES to snack
        on carrots. Add the "drag and drop" behavior to the carrot so you can move
        it to her.
      behaviors_caley_instruction: Clone this level and make your own blocks!
      ben's first level_instruction: Clone this level and make your own blocks!
      birdsDebugVideo1_instruction: |-
        Trace the path and lead me to the silly pig.
        Avoid TNT or feathers will fly!
      bounce_1_instruction: Conecte um bloco ao bloco "quando clicar na seta para
        a esquerda" e clique em "Executar". Mova a raquete usando a seta para a esquerda
        para alcançar o objetivo final.
      bounce_10_instruction: Agora há um alvo na parte de cima. Conecte os blocos
        "marque um ponto" e "marque um ponto para o oponente" aos blocos "quando a
        bola atingir o alvo" e "quando a bola não acertar a raquete" para fazer um
        jogo. Veja quantos pontos você consegue marcar antes que seu oponente marque
        duas vezes.
      bounce_10_2018_instruction: Agora há um alvo na parte de cima. Conecte os blocos
        "marque um ponto" e "marque um ponto para o oponente" aos blocos "quando a
        bola atingir o alvo" e "quando a bola não acertar a raquete" para fazer um
        jogo. Veja quantos pontos você consegue marcar antes que seu oponente marque
        duas vezes.
      bounce_10_basketball_instruction: Agora há um alvo na parte de cima! Conecte
        os blocos "marque um ponto" e "marque um ponto para o oponente" aos blocos
        "quando a bola chega ao alvo" e "quando a bola não acerta a mão" para fazer
        um jogo. Veja quantos pontos você consegue marcar antes que seu oponente marque
        duas vezes.
      bounce_10_sports_instruction: Agora há um alvo na parte de cima! Conecte os
        blocos "marque um ponto" e "marque um ponto para o oponente" aos blocos "quando
        a bola chega ao alvo" e "quando a bola não acerta a mão" para fazer um jogo.
        Veja quantos pontos você consegue marcar antes que seu oponente marque duas
        vezes!
      bounce_11_instruction: Agora você pode conectar blocos ao bloco "quando o jogo
        começa". Você tem que anexar o novo bloco "jogue uma nova bola" em mais de
        um lugar. Além disso, tente mudar o cenário ou a velocidade da raquete e da
        bola e veja quantos pontos você pode marcar antes de seu oponente marcar duas
        vezes.
      bounce_11_2018_instruction: |-
        You can now attach blocks to the "when run"
        block. You have to attach the new "launch new ball" block in more than one
        place. Also, try changing the scene or the speed of the paddle and the ball
        and see how many points you can score before your opponent scores twice.
      bounce_11_basketball_instruction: Agora você pode conectar blocos ao bloco "quando
        o jogo começa". Você tem que conectar o novo bloco "jogue uma nova bola" em
        mais de um lugar. Além disso, tente mudar o cenário ou a velocidade da mão
        e da bola e veja quantos pontos você consegue marcar antes de seu oponente
        marcar duas vezes!
      bounce_11_sports_instruction: Agora você pode conectar blocos ao bloco "quando
        o jogo começa". Você tem que conectar o novo bloco "jogue uma nova bola" em
        mais de um lugar. Além disso, tente mudar o cenário ou a velocidade da mão
        e da bola e veja quantos pontos você consegue marcar antes de seu oponente
        marcar duas vezes!
      bounce_12_instruction: Crie seu próprio jogo de Pingue-pongue. Você pode mudar
        o visual e todas as regras. Quando terminar, clique em Concluir para que seus
        amigos possam jogar seu jogo em seus celulares.
      bounce_12_2018_instruction: |-
        Create your own Bounce game. You can change all
        the visuals and the rules. When you're done, click Finish to let friends
        try your game on their phones.
      bounce_12_basketball_instruction: Crie seu próprio jogo de basquete. Você pode
        mudar todas as regras. Quando terminar, clique em Concluir para permitir que
        seus amigos possam testar seu jogo em seus smartphones.
      bounce_12_sports_instruction: 'Crie seu próprio jogo! Aqui, você está no comando:
        você pode mudar todas as regras, misturar e combinar esportes, e criar o que
        quiser! Quando terminar, clique em Concluir para deixar seus amigos experimentarem
        seu jogo em seus smartphones.'
      bounce_1_2018_instruction: |-
        Attach a block to the "when left arrow" block
        and press "Run". Move the paddle using the left arrow to reach the finish
        target.
      bounce_1_basketball_instruction: Conecte um bloco ao bloco "quando clicar na
        seta para a esquerda" e clique em "Executar". Mova a mão usando a seta para
        a esquerda para alcançar o objetivo final.
      bounce_1_sports_instruction: Vá até a bandeira! Anexe um bloco ao bloco "quando
        seta para esquerda" e clique em "Executar" para mover o jogador até a bandeira.
      bounce_2_instruction: Conecte um bloco aos blocos "quando clicar na seta para
        a direita" e "quando clicar na seta para a esquerda". Mova a raquete para
        alcançar ambos os objetivos finais.
      bounce_2_2018_instruction: |-
        Attach a block to the "when right arrow" and
        "when left arrow" blocks. Move the paddle to reach both finish targets.
      bounce_2_basketball_instruction: Conecte um bloco aos blocos "quando clicar
        na seta para a direita" e "quando clicar na seta para a esquerda". Mova a
        mão para alcançar ambos os objetivos finais.
      bounce_2_sports_instruction: Agora há duas bandeiras! Anexe um bloco aos blocos
        "quando seta para esquerda" e "quando seta para direita" para fazer com que
        seu jogador se mova nas duas direções.
      bounce_3_instruction: Agora, tente algo semelhante com o bloco "quando clicar
        na seta para cima". Mova a raquete o objetivo final no topo.
      bounce_3_2018_instruction: Agora, tente algo semelhante com o bloco "quando
        clicar na seta para cima". Mova a raquete o objetivo final no topo.
      bounce_4_instruction: Desta vez, você precisa adicionar quatro blocos. Mova
        a raquete para todos os quatro alvos finais para completar este desafio.
      bounce_4_2018_instruction: |-
        This time you need to add four blocks. Move the
        paddle to all four finish targets to complete this puzzle.
      bounce_5_instruction: Vamos lançar uma bola em direção à raquete. Conecte um
        bloco ao bloco "quando a bola bater na raquete" para garantir que a bola atinja
        o alvo.
      bounce_5_2018_instruction: |-
        We're going to send a ball flying down towards
        the paddle. Attach a block to the "when ball hits paddle" block to ensure
        the ball reaches the finish target.
      bounce_5_basketball_instruction: Vamos lançar uma bola em direção à mão. Conecte
        um bloco ao bloco "quando a bola bater na mão" para garantir que a bola atinja
        a bandeira.
      bounce_5_sports_instruction: O disco de hóquei vai deslizar até o jogador! Anexe
        um bloco ao bloco "quando a bola atinge o jogador" para acertar a bandeira.
      bounce_6_instruction: Agora o alvo está no topo. Você precisa conectar blocos
        em ambos os blocos "quando a bola bater" para resolver este desafio.
      bounce_6_2018_instruction: |-
        Now the finish target is on the top. You need to
        attach blocks to both of the "when ball hits" blocks to solve this puzzle.
      bounce_6_basketball_instruction: Agora a bandeira está no topo. Você precisa
        conectar blocos a ambos os blocos "quando a bola bater" para resolver este
        desafio.
      bounce_6_sports_instruction: Agora a bandeira está no topo. Você precisa conectar
        blocos a ambos os blocos "quando a bola bater" para resolver este desafio.
      bounce_7_instruction: Conecte os blocos a cada um dos blocos "quando". Faça
        a bola quicar até que ela atinja o alvo.
      bounce_7_2018_instruction: Conecte os blocos a cada um dos blocos "quando".
        Faça a bola quicar até que ela atinja o alvo.
      bounce_7_basketball_instruction: Conecte os blocos a cada um dos blocos "quando".
        Faça a bola quicar até que ela atinja a bandeira.
      bounce_7_sports_instruction: Conecte os blocos a cada um dos blocos "quando".
        Faça a bola quicar até que ela atinja a bandeira.
      brendan behaviors clone_instruction: Clone this level and make your own blocks!
      brendan hackathon level_instruction: |-
        these are the instructions for my level.  you
        should do this level and have a good time.
      clone me mary_instruction: Clone this level and make your own blocks!
      collector example_instruction: |-
        Put these blocks in order to collect all of
        the gold and solve the puzzle.
      collectorDebugVideo2_instruction: |-
        Put these blocks in order to collect all
        of the gold and solve the puzzle.
      collectorSkinVideo1_instruction: Collect all four piles to pass this level.
      collectorSkinVideo2_instruction: Collect one pile of gold to pass this level.
      comment_intro_maze_2018_instruction: |-
        Use the new `comment` block to leave
        yourself quick reminders.
      conditionals_forvideo_harvester_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      conditionals_forvideo_playlab_instruction: Score as many points as you can!
      course1_artist_loops_challenge1_instruction: |-
        You can use a loop to draw many
        lines in a row.\r
        \r
        Can you draw a house? Make it look just the way you
        like it!  Try looking for patterns that repeat!
      course1_artist_loops_challenge2_instruction: |-
        Let's play a game! Draw as many
        X's as you can! Can you get 3 in a row?
      course1_artist_loops_challenge3_instruction: |-
        "Can you help me make two bird
        houses?"
      course1_artist_loops_challenge4_instruction: |-
        "It's time to toss the dice!
        Can you help me draw these?"
      course1_collector_loops_challenge1_instruction: |-
        "Can you help me spot some
        bugs? I know which way I want to go, but I'm not sure how many steps to take."
      course1_collector_loops_challenge2_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      course1_collector_loops_challenge3_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      course1_collector_loops_challenge4_instruction: |-
        Let's get the treasure! Help
        me across each row then come back to start the next row. Can you find a pattern?
      course1_maze_debugging_challenge1_instruction: |-
        Debug this level. Remove the
        extra blocks and add the missing blocks. Get the bird to the pig!
      course1_maze_debugging_challenge2_instruction: |-
        Debug this level. These are
        the right blocks, but they're in the wrong order!
      course1_maze_seq_challenge1_instruction: |-
        "Trace the path and lead me to the
        silly pig. Avoid TNT or the feathers will fly!"
      course1_maze_seq_challenge2_instruction: |-
        You can only move up to four times
        in each direction. Can you find a path before you run out of blocks?
      course1_playlab_events_challenge1_instruction: |-
        "Where are my friends hiding?
        Can you write code to show the rest of my friends?"
      course1_playlab_events_challenge2_instruction: |-
        "Let's have a party! Give
        my friends something to do when you click or tap them."
      course2_artist_nestedLoops_challenge1_instruction: |-
        Can you figure out how
        to make a picture like this?
      course2_artist_nestedLoops_challenge2_instruction: |-
        Can you figure out how
        to make a picture like this?
      course2_artist_prog_challenge1_instruction: |-
        Draw rooms for each of the animals.
        There are many different ways to solve this puzzle, so have some fun. The
        shortest possible solution is 6 blocks, but use as many as you like!
      course2_artist_prog_challenge2_instruction: |-
        *Help me paint the yellow lines
        on this road!*
      course2_bee_conditionals_challenge1_instruction: |-
        Collect all of the nectar
        or make all the honey.
      course2_bee_conditionals_challenge2_instruction: |-
        Collect all of the nectar
        or make all the honey.
      course2_collector_loops_challenge2_instruction: |-
        Let's hunt for treasure -
        using loops! Help the collector by debugging this code. Get all of the treasure!
      course2_collector_prog_challenge1_instruction: |-
        Look carefully! Can you collect
        all *10* pieces of treasure?
      course2_collector_prog_challenge2_instruction: |-
        There are 20 pieces of treasure
        to be found. Collect at least half to finish this challenge!
      course2_harvester_loops_challenge1_instruction: Collect all of the corn.
      course2_harvester_loops_challenge2_instruction: |-
        Collect all of the lettuce.
        Avoid the trees and fields!
      course2_maze_loops_challenge1_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      course2_maze_programming_challenge1_instruction: |-
        *"The pig is hiding! Can
        you help me find a way around?"*
      course2_maze_programming_challenge2_instruction: |-
        Sometimes there is more than
        one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      course2_maze_seq_challenge1_instruction: |-
        Trace the path and lead me to the
        silly pig. Avoid TNT or the feathers will fly!
      course2_maze_seq_challenge2_instruction: |-
        You can only move up to four times
        in each direction. Can you find a path before you run out of blocks?
      course2_playlab_stage17_1_instruction: |-
        Você pode fazer Jorge, o cachorro (personagem 1),
        dizer "Olá"?
      course2_playlab_stage17_10_instruction: |-
        Adicione blocos ao evento "quando correr"
        para mudar o plano de fundo e a velocidade de Valfredo.\r
        \r
        Jogue e
        mova Valfredo com as setas até marcar pontos.
      course2_playlab_stage17_11_instruction: |-
        Crie sua própria história. Quando terminar,
        clique em "Concluir" para que seus amigos testem sua história em seus celulares.
      course2_playlab_stage17_2_instruction: |-
        Você pode fazer Jorge (personagem 1) dizer alguma coisa e,
        depois, fazer a gata Olívia (personagem 2) dizer alguma coisa?
      course2_playlab_stage17_3_instruction: |-
        Você consegue escrever um programa para fazer Jorge
        (personagem 1) se mover em direção à gata Olívia?
      course2_playlab_stage17_4_instruction: "Você consegue escrever um programa que
        faça \nJorge (personagem 1) se mover até Olívia, a gata, e fazer Olívia dizer
        \"Olá\" quando Jorge\na alcançar?"
      course2_playlab_stage17_5_instruction: |-
        Você pode escrever um programa para fazer Otávia
        dizer "Olá" quando clicarem nela?
      course2_playlab_stage17_6_instruction: |-
        Agora escreva um programa que faça Valfredo
        se mover usando as teclas com as setas para cima / para baixo / à esquerda / à direita, para atingir todos os alvos!
      course2_playlab_stage17_7_instruction: |-
        The `repeat forever` block allows you
        to run code over and over forever. Can you attach blocks to move Chomp the
        Dino (actor 2) up and down forever?
      course2_playlab_stage17_8_instruction: |-
        Você pode fazer Valfredo (personagem 1) dizer
        "Ai!" e reproduzir um som de "batida" se ele encontrar Chomp? \r
        \r
        Quando
        terminar, jogue para que isso aconteça.
      course2_playlab_stage17_9_instruction: |-
        Você pode adicionar um bloco para marcar um ponto
        quando Valfredo se encontrar com Otávia (personagem 3)? \r
        Jogue e mova Valfredo
        com as setas do teclado até marcar ponto!
      course3_artist_concept_challenge1_instruction: |-
        Feel free to use trial and
        error. You are not expected to get the image perfect the first time.   Want
        to see more hints?  Click here!
      course3_artist_functions_challenge1_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      course3_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      course3_bee_debugging_challenge1_instruction: |-
        Watch how the bee gets the nectar.
        Can you use the same kind of pattern to help the bee make all of the honey?
      course3_bee_functions_challenge1_instruction: |-
        You are on your own for this
        challenge. This could "bee" harder than it looks!
      course3_bee_functions_challenge2_instruction: |-
        You are on your own for this
        challenge!
      course3_bee_functions_challenge3_instruction: |-
        Create a new function to collect
        all the nectar and honey while there is a path ahead. Use it to complete the
        puzzle!
      course3_bee_functions_challenge4_instruction: |-
        Use everything you have learned
        to complete this puzzle!
      course3_collector_debugging_challenge2_instruction: |-
        Are you an expert of nested
        loops? Use what you have learned so far to collect all of the treasure!
      course3_farmer_condLoops_challenge1_instruction: |-
        Turn right at the pumpkins.
        Collect everything to complete the level. Each hidden crop has only one corn
        or lettuce.
      course3_farmer_condLoops_challenge2_instruction: |-
        Collect everything to complete
        the level.
      course3_farmer_until_challenge2_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      course3_maze_debugging_challenge1_instruction: |-
        *"Am I just going around in
        circles?"*
      course3_maze_debugging_challenge2_instruction: |-
        *"If I turn too often, I might
        get dizzy! Help me reach the acorn with only four `turn` commands."*
      course3_maze_until_challenge1_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      course3_playLab_challenge1_instruction: |-
        Something should happen when you get
        enough points or when you run out of points. Add some code to the `win game`
        and `lose game` functions to make the game work the way it should. \r
        Click
        the hints for ideas!
      course3_playlab_challenge2_instruction: |-
        Can you figure out how this "Fortune
        Teller" app works? Click `MORE` to see your challenges.
      course3_playlab_stage16_1_instruction: Você consegue fazer esse cachorro dizer
        "Olá, mundo"?
      course3_playlab_stage16_2_instruction: |-
        Você pode fazer o cachorro dizer alguma coisa e,
        depois, fazer a gata dizer alguma coisa?
      course3_playlab_stage16_3_instruction: |-
        Você consegue escrever um programa para fazer este
        cachorro se mover até o gato?
      course3_playlab_stage16_4_instruction: |-
        Você consegue escrever um programa que faça
        o cachorro se mover até o gato e que faça o gato dizer "Olá" quando o cachorro o
        alcançar?
      course3_playlab_stage16_5_instruction: |-
        Você pode adicionar um bloco para deixar o polvo
        feliz?
      course3_playlab_stage16_6_instruction: |-
        Crie sua própria história. Quando terminar,
        clique em "Concluir" para que seus amigos testem sua história em seus celulares.
      course3_playlab_stage17_1_instruction: |-
        Você pode escrever um programa para fazer
        o polvo dizer "Olá" quando clicarem nele?
      course3_playlab_stage17_2_instruction: |-
        Você pode escrever um programa que faça Valfredo
        se mover usando as as setas para cima / para baixo / à esquerda / à direita do teclado, para atingir todos os alvos?
      course3_playlab_stage17_3_instruction: |-
        O bloco "repita infinitamente" permite
        que você execute o código de maneira contínua. Você consegue conectar blocos para mover este dinossauro
        para cima e para baixo repetidamente?
      course3_playlab_stage17_4_instruction: |-
        Você pode fazer Valfredo dizer "Ai!"
        e reproduzir um som de "batida" se ele encontrar o dinossauro, e então movê-lo com
        as setas to teclado para fazer isso acontecer?
      course3_playlab_stage17_5_instruction: |-
        Você pode adicionar um bloco para marcar um ponto
        quando Valfredo se encontrar com o polvo, e então movê-lo com as setas do teclado até
        marcar pontos?
      course3_playlab_stage17_6_instruction: |-
        Você pode adicionar blocos para mudar o plano de fundo
        e a velocidade de Valfredo, e então movê-lo com as setas do teclado até marcar pontos?
      course3_playlab_stage17_7_instruction: |-
        Crie sua própria história. Quando terminar,
        clique em "Concluir" para que seus amigos testem sua história em seus celulares.
      course4_artist_binary_challenge1_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      course4_artist_binary_challenge2_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      course4_artist_concept_challenge2_instruction: |-
        Create five pinwheel designs
        using the code below.
      course4_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      course4_artist_fwp_challenge1_instruction: |-
        Try running this program, and make
        changes to see what happens. Can you figure out how it works? (Or delete it
        and replace it with something totally different)
      course4_artist_variables_challenge1_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      course4_artist_variables_challenge2_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      course4_bee_for_challenge1_instruction: |-
        Use this for loop to collect all of
        the nectar. There are a few actions that you will want to repeat 'counter'
        times.
      course4_bee_fwp_challenge1_instruction: |-
        Use one `for loop` in a function to
        collect all of the corn. The same `for loop` can count to different maximum
        values by using the `length` parameter.
      course4_bee_fwp_challenge2_instruction: |-
        Use one `for loop` in a function to
        collect all of the vegetables in the row. Make the `for loop` can count to
        different maximum values by using the `length` parameter. Make your program
        as short as possible by using a second `for loop` outside the function.
      course4_collector_nested_loops_challenge2_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      course4_harvester_nested_loops_challenge1_instruction: |-
        "I need some help
        on the farm! Help me harvest this corn using only the blocks in your toolbox."
      course4_playlab_variables_challenge1_instruction: |-
        Use these blocks to make
        the actors share a knock-knock joke. Change the setup and punchline to tell
        your own joke!
      course4_playlab_variables_challenge3_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseA_artist_loops1_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      courseA_artist_loops10_instruction: |-
        Help me put down stones so I don't fall
        in!
      courseA_artist_loops10_2018_instruction: |-
        Help me put down stones so I don't
        fall in!
      courseA_artist_loops11_instruction: |-
        Help me build steps to watch the ship
        sail away.
      courseA_artist_loops11_2018_instruction: |-
        Help me build steps to watch the
        ship sail away.
      courseA_artist_loops12_instruction: |-
        The artist saw something funny in the
        distance.  Draw what you think he saw.
      courseA_artist_loops12_2018_instruction: |-
        The artist saw something funny in
        the distance.  Draw what you think he saw.
      courseA_artist_loops1_2018_instruction: |-
        This is a new type of puzzle called
        "Artist". Play with the level and draw something fun.
      courseA_artist_loops2_instruction: |-
        Help the artist draw this line two times
        forward.
      courseA_artist_loops2_2018_instruction: |-
        Help the artist draw this line two
        times forward.
      courseA_artist_loops3_instruction: Draw a line forward five times.
      courseA_artist_loops3_2018_instruction: Draw a line forward five times.
      courseA_artist_loops4_instruction: |-
        Now, use a `repeat` loop to draw this line
        five times!
      courseA_artist_loops4_2018_instruction: |-
        Now, use a `repeat` loop to draw this
        line five times!
      courseA_artist_loops5_instruction: |-
        Draw a line seven steps long. This will
        become our horizon.
      courseA_artist_loops5_2018_instruction: |-
        Draw a line seven steps long. This
        will become our horizon.
      courseA_artist_loops6_instruction: Let's put a nice hill in the back.
      courseA_artist_loops6_2018_instruction: Let's put a nice hill in the back.
      courseA_artist_loops7_instruction: |-
        Use the `repeat` loop to add waves to the
        water.
      courseA_artist_loops7_2018_instruction: |-
        Use the `repeat` loop to add waves
        to the water.
      courseA_artist_loops7_forVideo_instruction: |-
        Use the `repeat` loop to add waves
        to the water.
      courseA_artist_loops8_instruction: We need a ladder up to the boat.
      courseA_artist_loops8_2018_instruction: We need a ladder up to the boat.
      courseA_artist_loops9_instruction: 'Challenge: Fix the stairs.'
      courseA_artist_loops9_2018_instruction: 'Challenge: Fix the stairs.'
      courseA_artist_loops_challenge1_instruction: |-
        Can you draw a house? Make it
        look just the way you like it!
      courseA_artist_loops_challenge1_2018_instruction: |-
        Can you draw a house? Make
        it look just the way you like it!
      courseA_artist_loops_challenge2_instruction: |-
        "Can you help me make two bird
        houses?"
      courseA_artist_loops_challenge2a_instruction: |-
        *"Help me get these three tents
        set up!"*
      courseA_artist_loops_challenge2a_2018_instruction: |-
        *"Help me get these three
        tents set up!"*
      courseA_artist_loops_challenge3_instruction: |-
        Let's play a game! Draw as many
        X's as you can! Can you get 3 in a row?
      courseA_bee_seq1_instruction: |-
        Play with these blocks to help the bee get *one*
        nectar.
      courseA_bee_seq10_instruction: Try it by yourself! Get all the nectar.
      courseA_bee_seq11_instruction: Get all the nectar.
      courseA_bee_seq12_instruction: |-
        Play with these blocks to help the bee get
        *one* nectar.
      courseA_bee_seq13_instruction: |-
        Use three `Move West` blocks and one `Get Nectar`
        block.
      courseA_bee_seq14_instruction: |-
        Use three `Move North` blocks and one `Get
        Nectar` block.
      courseA_bee_seq2_instruction: Help the bee get the nectar!
      courseA_bee_seq3_instruction: Find the bug and fix it!
      courseA_bee_seq4_instruction: Try it yourself!
      courseA_bee_seq5_instruction: Try it yourself!
      courseA_bee_seq6_instruction: Now the bee needs to get nectar from two flowers!
      courseA_bee_seq7_instruction: Add two blocks to finish this puzzle!
      courseA_bee_seq8_instruction: Make sure to get nectar from every flower!
      courseA_bee_seq9_instruction: Make sure to get nectar from every flower!
      courseA_collector_loops1_instruction: |-
        Move Laurel around and get as much treasure
        as you can!
      courseA_collector_loops10_instruction: |-
        Help Laurel get all of the treasure
        along this path.
      courseA_collector_loops10_2018_instruction: |-
        Help Laurel get all of the treasure
        along this path.
      courseA_collector_loops11_instruction: |-
        Help Laurel get all of the treasure
        from this cave.
      courseA_collector_loops11_2018_instruction: |-
        Help Laurel get all of the treasure
        from this cave.
      courseA_collector_loops12_instruction: |-
        *"Eureka!  Get as much treasure as
        you can!"*
      courseA_collector_loops12_2018_instruction: |-
        *"Eureka!  Get as much treasure
        as you can!"*
      courseA_collector_loops1_2018_instruction: |-
        Move Laurel around and get as much
        treasure as you can!
      courseA_collector_loops2_instruction: |-
        Collect all three piles to pass this
        level.
      courseA_collector_loops2_2018_instruction: |-
        Get all three piles to pass this
        level.
      courseA_collector_loops4_instruction: |-
        Fix Laurel's path to get all of this
        treasure.
      courseA_collector_loops4_2018_instruction: |-
        Fix Laurel's path to get all of
        this treasure.
      courseA_collector_loops5_instruction: |-
        Use what you learned to get all of the
        treasure.
      courseA_collector_loops5_2018_instruction: |-
        Use what you learned to get all
        of the treasure.
      courseA_collector_loops6_instruction: |-
        Add blocks to this code to get all of
        the treasure.
      courseA_collector_loops6_2018_instruction: |-
        Add blocks to this code to get
        all of the treasure.
      courseA_collector_loops7_instruction: |-
        What should you add to this code to
        get all of the treasure?
      courseA_collector_loops7_2018_instruction: |-
        What should you add to this code
        to get all of the treasure?
      courseA_collector_loops8_instruction: Write the code to get all of this gold.
      courseA_collector_loops8_2018_instruction: Write code to get all of this treasure.
      courseA_collector_loops9_instruction: |-
        **Challenge:** The treasure goes all
        the way up these stairs!  Write the code to help Laurel get it all.
      courseA_collector_loops9_2018_instruction: |-
        **Challenge:** The treasure goes
        all the way up these stairs!  Write the code to help Laurel get it all.
      courseA_collector_loops_challenge1_instruction: |-
        *"Can you help me spot some
        bugs?"*
      courseA_collector_loops_challenge1_2018_instruction: |-
        *"Can you help me spot
        some bugs?"*
      courseA_collector_loops_challenge2_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      courseA_collector_loops_challenge2kp_instruction: |-
        Collect at least **3** pieces
        of treasure to pass this level.
      courseA_collector_loops_challenge2kp_2018_instruction: |-
        Collect at least **3**
        pieces of treasure to pass this level.
      courseA_collector_preLoops1_instruction: |-
        This is Laurel the Adventurer! \r
        \r
        Press
        "Run" to see her walk up to the treasure and grab it.
      courseA_collector_preLoops2_instruction: |-
        Great!  Now you get to add code yourself!  \r
        \r
        Snap
        a `get treasure` block to the bottom of the program and click "Run".
      courseA_collector_preLoops3_instruction: |-
        Snap two `E -->` blocks and one `get
        treasure` block to the bottom of the program, then click "Run".
      courseA_collector_preLoops4_instruction: |-
        Can you figure out how to solve this
        puzzle?
      courseA_collector_preLoops5_instruction: |-
        Get 1 of these 2 gems to solve this
        puzzle.
      courseA_collector_preLoops6_instruction: |-
        Get both pieces of treasure to solve
        this puzzle.
      courseA_collector_preLoops7_instruction: |-
        Get all three piles to pass this
        level.
      courseA_forVideoTest_artist_instruction: |-
        Use the `repeat` loop to add waves
        to the water.
      courseA_harvester_forVideo_instruction: |-
        Can you pick all the corn using only
        **one** move block?
      courseA_harvester_loops1_instruction: Help the farmer pick all the corn!
      courseA_harvester_loops10_instruction: |-
        Help the harvester pick all five ears
        of corn!
      courseA_harvester_loops11_instruction: 'Try one more on your own! '
      courseA_harvester_loops2_instruction: Make sure to pick all the corn!
      courseA_harvester_loops3_instruction: |-
        Can you pick all the corn using only
        **one** move block?
      courseA_harvester_loops4_instruction: |-
        Can you help the harvester find the
        bug in her code?
      courseA_harvester_loops5_instruction: |-
        Try it yourself! Can you pick the corn
        at the end too?
      courseA_harvester_loops5a_instruction: |-
        Look at all this corn! Can you pick
        it all by yourself?
      courseA_harvester_loops5b_instruction: |-
        Can you change your code to make the
        harvester pick all the corn?
      courseA_harvester_loops6_instruction: |-
        You will need **one** `Move South` block
        and **one** `Move West` block.
      courseA_harvester_loops7_instruction: 'Try it on your own! '
      courseA_harvester_loops8_instruction: |-
        This is the same puzzle, but now you
        have to repeat **three** times!
      courseA_harvester_loops9_instruction: |-
        Can you figure out how to pick all the
        corn?
      courseA_harvester_seq1_instruction: |-
        Play with these blocks to help the harvester
        pick the piece of corn.
      courseA_harvester_seq10_instruction: Make sure to pick all the corn!
      courseA_harvester_seq11_instruction: Try it by yourself! Pick all the corn.
      courseA_harvester_seq12_instruction: |-
        Play with these blocks to help the bee
        get *one* nectar.
      courseA_harvester_seq13_instruction: |-
        Play with these blocks to help the harvester
        pick **one** corn.
      courseA_harvester_seq2_instruction: |-
        Use three `move west` blocks and one `pick
        corn` block to solve this puzzle.
      courseA_harvester_seq3_instruction: |-
        Use three `Move North` blocks and one
        `Pick Corn` block.
      courseA_harvester_seq4_instruction: |-
        Add one block to help the harvester pick
        the corn.
      courseA_harvester_seq5_instruction: Find the bug and fix it!
      courseA_harvester_seq6_instruction: Try it yourself!
      courseA_harvester_seq7_instruction: Try it yourself!
      courseA_harvester_seq8_instruction: |-
        Now the harvester needs to pick corn two
        times!
      courseA_harvester_seq9_instruction: Add two blocks to finish this puzzle!
      courseA_maze_ramp2_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseA_maze_ramp2a_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseA_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseA_maze_ramp3a_2018_instruction: |-
        Add a `North` block to the bottom of
        the other blocks to finish this code, then click "Run".
      courseA_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseA_maze_ramp4a_2018_instruction: |-
        Can you figure out which block you need
        to add to the bottom of the other blocks to finish this code?
      courseA_maze_ramp5_2018_instruction: Avoid the TNT.
      courseA_maze_ramp5a_2018_instruction: Get the bird to the pig!
      courseA_maze_seq1_instruction: |-
        Play with these blocks to see if you can get
        me to the pig!
      courseA_maze_seq10_instruction: "Challenge: Go around the TNT to get the bird\nto
        the pig! "
      courseA_maze_seq10_2018_instruction: "Challenge: Avoid the TNT to get the bird\nto
        the pig! "
      courseA_maze_seq11_instruction: |-
        Move one way, then another to get the bird
        to the pig.
      courseA_maze_seq11_2018_instruction: |-
        Move one way, then another to get the
        bird to the pig.
      courseA_maze_seq12_instruction: 'Get that pig! '
      courseA_maze_seq12_2018_instruction: 'Get that pig! '
      courseA_maze_seq13_instruction: Get the pig any way you can!
      courseA_maze_seq13_2018_instruction: Get the pig any way you can!
      courseA_maze_seq1_2018_instruction: Get the bird to the bad pig!
      courseA_maze_seq2_instruction: Altere o código para me levar até o porco!
      courseA_maze_seq2_2018_instruction: Altere o código para me levar até o porco!
      courseA_maze_seq3_instruction: Fix the code to get the bird to the pig!
      courseA_maze_seq3_2018_instruction: Fix the code to get the bird to the pig!
      courseA_maze_seq4_instruction: REMOVE a block to get the bird to the pig!
      courseA_maze_seq4_2018_instruction: |-
        REMOVE a block to get the bird to the
        pig!
      courseA_maze_seq4a_instruction: |-
        Get the bird to the pig using the fewest possible
        blocks.
      courseA_maze_seq5_instruction: Try this one yourself from the beginning.
      courseA_maze_seq5_2018_instruction: Try this one yourself from the beginning.
      courseA_maze_seq5a_2018_instruction: |-
        What can you add to the end of this code
        to get the bird to the pig?
      courseA_maze_seq6_instruction: |-
        Move one way, then another to get the bird
        to the pig!
      courseA_maze_seq6_2018_instruction: |-
        Move one way, then another to get the
        bird to the pig!
      courseA_maze_seq7_instruction: |-
        Figure out what is missing and then add blocks
        to get the bird to the pig!
      courseA_maze_seq7_2018_instruction: |-
        Figure out what is missing and then add
        blocks to get the bird to the pig!
      courseA_maze_seq8_instruction: Solve this level and get the bird to the pig!
      courseA_maze_seq8_2018_instruction: |-
        Solve this level and get the bird to the
        pig!
      courseA_maze_seq9_instruction: |-
        Debug this level by adding blocks to get the
        bird to the pig!
      courseA_maze_seq9_2018_instruction: |-
        Debug this level by adding blocks to get
        the bird to the pig!
      courseA_maze_seq_challenge1_instruction: |-
        Something is wrong here. Help fix
        the code to get the bird to the pig!
      courseA_maze_seq_challenge1_2018_instruction: |-
        Something is wrong here. Help
        fix the code to get the bird to the pig!
      courseA_maze_seq_challenge2_instruction: |-
        Trace the path to lead the bird to
        the pig. Avoid TNT or feathers will fly!
      courseA_maze_seq_challenge2_2018_instruction: |-
        Trace the path to lead the bird
        to the pig. Avoid TNT or feathers will fly!
      courseA_playLab_events1_instruction: |-
        This is a Play Lab level.  Move blocks
        to the workspace and see what happens!
      courseA_playLab_events1_2018_instruction: |-
        This is a Play Lab level.  Move
        blocks to the workspace and see what happens!
      courseA_playLab_events2_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      courseA_playLab_events2_2018_instruction: |-
        Jorge the Dog wants to say "Hi
        there."  Can you help him?
      courseA_playLab_events3_instruction: |-
        Connect the `move left` block to the
        `when left` event block that is already in the workspace.
      courseA_playLab_events3_2018_instruction: |-
        Connect the `move left` block to
        the `when left` event block that is already in the workspace.
      courseA_playLab_events4_instruction: |-
        Now, get Jorge to move right when the
        `right` button is clicked.
      courseA_playLab_events4_2018_instruction: |-
        Now, get Jorge to move right when
        the `right` button is clicked.
      courseA_playLab_events5_instruction: |-
        Add events to have Jorge move up and
        down when the `up` and `down` buttons are pressed.
      courseA_playLab_events5_2018_instruction: |-
        Add events to have Jorge move up
        and down when the `up` and `down` buttons are pressed.
      courseA_playLab_events6_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      courseA_playLab_events6_2018_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      courseA_playLab_events7_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      courseA_playLab_events7_2018_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      courseA_playlab_events_challenge1_instruction: |-
        Can you write code to show
        the rest of my friends? The hints will help you do this project step-by-step.
      courseA_playlab_events_challenge1_2018_instruction: |-
        Can you write code to
        show the rest of my friends? The hints will help you do this project step-by-step.
      courseA_playlab_events_challenge2_instruction: |-
        Give everyone something to
        do when you click on them.
      courseA_playlab_events_challenge2_2018_instruction: |-
        Give everyone something
        to do when you click on them.
      courseA_playlab_events_challengeClone_instruction: |-
        Where are my friends hiding?
        Can you write code to show the rest of my friends?
      courseA_toMakeLoopsVideo_Collector_instruction: |-
        Loops let you do whatever
        is inside over and over again!
      courseA_video_events_instruction: Need a better playlab/events combo
      courseA_video_events_2018_instruction: Need a better playlab/events combo
      courseB_Scrat_ramp1_2018_instruction: |-
        For this puzzle, snap the blocks together
        and click "Run"!
      courseB_Scrat_ramp2_2018_instruction: |-
        Snap all blocks together to finish your
        code, then click "Run".
      courseB_Scrat_ramp3a_2018_instruction: |-
        Add a `North` block to the bottom of
        the other blocks to finish this code, then click "Run".
      courseB_Scrat_ramp4a_2018_instruction: |-
        Can you figure out which block you
        need to add to the bottom of the other blocks to finish this code?
      courseB_Scrat_ramp5a_2018_instruction: Get the bird to the pig!
      courseB_artist_loops1_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      courseB_artist_loops10_instruction: |-
        Use what you have learned to draw a picture
        of what you think the artist saw when he got home.
      courseB_artist_loops10_2018_instruction: |-
        Use what you have learned to draw
        a picture of what you think the artist saw when he got home.
      courseB_artist_loops1_2018_instruction: |-
        This is a new type of puzzle called
        "Artist". Play with the level and draw something fun.
      courseB_artist_loops2_instruction: |-
        The Artist is trying to draw a line **6**
        times, but can't get it right.  Can you help?
      courseB_artist_loops2_2018_instruction: |-
        The Artist is trying to draw a line
        **6** times, but can't get it right.  Can you help?
      courseB_artist_loops3_instruction: |-
        Help the artist draw a line 7 times to
        make a garden wall.
      courseB_artist_loops3_2018_instruction: |-
        Help the artist draw a line 7 times
        to make a garden wall.
      courseB_artist_loops4_instruction: "Now we need to get the soil ready to plant.\nFind
        the bugs in the code and help the artist prepare the ground. "
      courseB_artist_loops4_2018_instruction: |
        Now we need to get the soil ready
        to plant. Find the bugs in the code and help the artist prepare the ground.
      courseB_artist_loops5_instruction: |-
        Time to fix the stairs!  Repeat this pattern
        **5** times so the artist can reach the top of the bushes.
      courseB_artist_loops5_2018_instruction: |-
        Time to fix the stairs!  Repeat this
        pattern **5** times so the artist can reach the top of the bushes.
      courseB_artist_loops6_instruction: Climb the vine and see where it goes?
      courseB_artist_loops6_2018_instruction: Climb the vine and see where it goes?
      courseB_artist_loops7_instruction: |-
        **Challenge:**  It's a hidden garden!
        Let's walk around.
      courseB_artist_loops7_2018_instruction: |-
        **Challenge:**  It's a hidden garden!
        Let's walk around.
      courseB_artist_loops8_instruction: |-
        Time to head home. Can you fix this ladder
        using only one block to help the artist get down?
      courseB_artist_loops8_2018_instruction: |-
        Time to head home. Can you fix this
        ladder using only one block to help the artist get down?
      courseB_artist_loops9_instruction: |-
        Let's take the short way home, over the
        pond. Can you help the artist stay on the stones?
      courseB_artist_loops9_2018_instruction: |-
        Let's take the short way home, over
        the pond. Can you help the artist stay on the stones?
      courseB_artist_loops_challenge1_instruction: |-
        "It's time to toss the dice!
        Can you help me draw these?"
      courseB_artist_loops_challenge1_2018_instruction: |-
        "It's time to toss the
        dice! Can you help me draw these?"
      courseB_artist_loops_challenge2_instruction: |-
        Draw as many X's as you can.
        Can you get 3 in a row?
      courseB_artist_loops_challenge2_2018_instruction: |-
        Draw as many X's as you
        can. Can you get 3 in a row?
      courseB_collector_loops1_instruction: |-
        This is Laurel the Adventurer!  Can
        you move her around and get treasure?
      courseB_collector_loops10_instruction: |-
        Help Laurel get all of the treasure
        from this cave.
      courseB_collector_loops10_2018_instruction: |-
        Help Laurel get all of the treasure
        from this cave.
      courseB_collector_loops11_instruction: |-
        Eureka!  Get as much treasure as you
        can!
      courseB_collector_loops11_2018_instruction: |-
        Eureka!  Get as much treasure
        as you can!
      courseB_collector_loops1_2018_instruction: |-
        This is Laurel the Adventurer!  Can
        you move her around and get treasure?
      courseB_collector_loops2_instruction: |-
        Collect all four piles to pass this
        level.
      courseB_collector_loops2_2018_instruction: |-
        Get all four piles to pass this
        level.
      courseB_collector_loops3_instruction: |-
        How can Laurel get all five piles of
        treasure using only one `E -->` block?
      courseB_collector_loops3_2018_instruction: |-
        How can Laurel get all five piles
        of treasure using only one `E -->` block?
      courseB_collector_loops3_predict1_instruction: |-
        How can Laurel collect all
        five piles of gold using only one `E -->` block?
      courseB_collector_loops4_instruction: |-
        Fix Laurel's path to get all of this
        treasure!
      courseB_collector_loops4_2018_instruction: |-
        Fix Laurel's path to get all of
        this treasure!
      courseB_collector_loops5_instruction: "Add to the code from the last puzzle\nto
        get all of the treasure. "
      courseB_collector_loops5_2018_instruction: "Add to the code from the last puzzle\nto
        get all of the treasure. "
      courseB_collector_loops6_instruction: |-
        Figure out the code to help Laurel get
        all of the treasure!
      courseB_collector_loops6_2018_instruction: |-
        Figure out the code to help Laurel
        get all of the treasure!
      courseB_collector_loops7_instruction: Write the code to get all of this gold.
      courseB_collector_loops7_2018_instruction: |-
        Write the code to get all of this
        treasure.
      courseB_collector_loops8_instruction: |-
        **Challenge: ** The treasure goes all
        the way down these stairs!  Write the code to help Laurel get it all.
      courseB_collector_loops8_2018_instruction: |-
        **Challenge: ** The treasure goes
        all the way down these stairs!  Write the code to help Laurel get it all.
      courseB_collector_loops9_instruction: |-
        *"Help me get the treasure from this
        deep valley."*
      courseB_collector_loops9_2018_instruction: |-
        *"Help me get the treasure from
        this deep valley."*
      courseB_collector_loops_challenge1_instruction: "This time you have limited\nblocks.
        Get all of the treasure! "
      courseB_collector_loops_challenge1_2018_instruction: "This time you have limited\nblocks.
        Get all of the treasure! "
      courseB_collector_loops_challenge2_instruction: |-
        Let's get the treasure! Help
        me across each row then come back to start the next row. Can you find a pattern?
      courseB_collector_loops_challenge2a_instruction: |-
        Help Laurel get at least
        **5** pieces of treasure to finish this puzzle.
      courseB_collector_loops_challenge2a_2018_instruction: |-
        Help Laurel get at least
        **5** pieces of treasure to finish this puzzle.
      courseB_collector_loops_challenge`_instruction: "This time you can only use\none
        of each arrow block. Get all of the treasure! "
      courseB_collector_prog1_instruction: |-
        This is Laurel the Adventurer!  Can you
        move her around and get gold?
      courseB_collector_prog2_instruction: Four piles of gold!  Collect all four.
      courseB_collector_prog3_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `E -->` block?
      courseB_iceage_loops1_instruction: |-
        Help Scrat across the ice to get to the
        acorn!
      courseB_iceage_loops10_instruction: |-
        Help Scrat get all the way over to the
        acorn!
      courseB_iceage_loops11_instruction: Help Scrat get to the acorn!
      courseB_iceage_loops12_instruction: Get to the acorn any way you can!
      courseB_iceage_loops2_instruction: |-
        Use two different move blocks to get to
        the acorn!
      courseB_iceage_loops3_instruction: |-
        Can you get to the acorn with just one
        `W` block?
      courseB_iceage_loops4_instruction: |-
        Add one more block to get Scrat all the
        way to the acorn!
      courseB_iceage_loops5_instruction: |-
        Can you add one more loop to get to the
        acorn?
      courseB_iceage_loops6_instruction: Can you add a loop to get to the acorn?
      courseB_iceage_loops7_instruction: 'Scrat really wants that acorn! '
      courseB_iceage_loops8_instruction: 'Can you fix this code? '
      courseB_iceage_loops9_instruction: |-
        The acorn is so far away! Can you use loops
        to help Scrat get there?
      courseB_maze_seq1_instruction: |-
        Play with these blocks to see what they make
        the bird do! \r
        \r
        Get the bird to the pig to complete the level.
      courseB_maze_seq10_instruction: Fix the bugs to get the bird to the pig.
      courseB_maze_seq10_2018_instruction: Fix the bugs to get the bird to the pig.
      courseB_maze_seq11_instruction: It's all you!  Get the bird to the pig.
      courseB_maze_seq11_2018_instruction: It's all you!  Get the bird to the pig.
      courseB_maze_seq12_instruction: Now get that pig any way you can!
      courseB_maze_seq12_2018_instruction: Now get that pig any way you can!
      courseB_maze_seq1_2018_instruction: |-
        Play with these blocks to see what they
        make Scrat do! \r
        \r
        Get Scrat to the acorn to complete the level.
      courseB_maze_seq2_instruction: '*"A bug! Fix the code to get me to the pig."*'
      courseB_maze_seq2_2018_instruction: |-
        A bug! Fix the code to get Scrat to the
        acorn!
      courseB_maze_seq4_instruction: Add 2 blocks to get the bird to the pig.
      courseB_maze_seq4_2018_instruction: |-
        Use **2** movement blocks to get the Scrat
        to the acorn.
      courseB_maze_seq5_instruction: Now try this puzzle from the start!
      courseB_maze_seq5_2018_instruction: Now try this puzzle from the start!
      courseB_maze_seq6_instruction: |-
        Move one way, then another to get the bird
        to the pig!
      courseB_maze_seq6_2018_instruction: |-
        Move one way, then another to get Scrat
        to the acorn!
      courseB_maze_seq7_instruction: |-
        Figure out what is missing and then add blocks
        to get the bird to the pig!
      courseB_maze_seq7_2018_instruction: |-
        Figure out what is missing and then add
        blocks to get Scrat to the acorn!
      courseB_maze_seq8_instruction: |-
        Your turn!  What do you need to do to get the
        bird to the pig?
      courseB_maze_seq8_2018_instruction: |-
        Your turn!  What do you need to do to
        get Scrat to the acorn?
      courseB_maze_seq9_instruction: |-
        Challenge: Move around the TNT to get the bird
        to the pig.
      courseB_maze_seq9_2018_instruction: |-
        Challenge: Move around the broken ice
        to get Scrat to the acorn.
      courseB_maze_seq9_challenge1_instruction: "*Where's that pig hiding now?*"
      courseB_maze_seqCold_instruction: |-
        Challenge: Debug this level by adding blocks
        to get the bird to the pig!
      courseB_maze_seqOld_instruction: "Go around the TNT to get the bird to the\npig! "
      courseB_maze_seq_challenge1_instruction: |-
        Can you find a path before you run
        out of blocks?
      courseB_maze_seq_challenge1_2018_instruction: |-
        Can you find a path before you
        run out of blocks?
      courseB_maze_seq_challenge2_instruction: |-
        Debug this level. These are the right
        blocks, but they're in the wrong order!
      courseB_maze_seq_challenge2_2018_instruction: |-
        Debug this level. These are
        the right blocks, but they're in the wrong order!
      courseB_playLab_events1_instruction: |-
        See if you can figure out what each block
        does.
      courseB_playLab_events1_2018_instruction: |-
        See if you can figure out what each
        block does.
      courseB_playlab_events2_instruction: |-
        Have Daisy the Dragon say something when
        you click "Run".
      courseB_playlab_events2_2018_instruction: |-
        Have Daisy the Dragon say something
        when you click "Run".
      courseB_playlab_events3_instruction: |-
        Use an event to make Daisy the Dragon
        switch to a random mood when you click on her.
      courseB_playlab_events3_2018_instruction: |-
        Use an event to make Daisy the Dragon
        switch to a random mood when you click on her.
      courseB_playlab_events4_instruction: |-
        Knight time!  Add an event so that the
        knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events4_2018_instruction: |-
        Knight time!  Add an event so that
        the knight moves toward the dragon when the left arrow is clicked.
      courseB_playlab_events5_instruction: |-
        Now add an event so that the knight runs
        away from the dragon when you press the right arrow.
      courseB_playlab_events5_2018_instruction: |-
        Now add an event so that the knight
        runs away from the dragon when you press the right arrow.
      courseB_playlab_events6_instruction: |-
        Help your knight get all of the flags!\r
        \r
        To
        do this, you'll need to add events to help the knight move up, down, left,
        and right.
      courseB_playlab_events6_2018_instruction: |-
        Help your knight get all of the
        flags!\r
        \r
        To do this, you'll need to add events to help the knight move
        up, down, left, and right.
      courseB_playlab_events7_instruction: |-
        Make this game fun by setting the knight
        to vanish when he runs into the dragon on his way to get the flags!  Play
        a sound when they collide to make it feel more real.
      courseB_playlab_events7_2018_instruction: |-
        Make this game fun by setting the
        knight to vanish when he runs into the dragon on his way to get the flags!  Play
        a sound when they collide to make it feel more real.
      courseB_playlab_events8_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      courseB_playlab_eventsFP_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      courseB_playlab_eventsFP_2018_instruction: |-
        Use your imagination. What can
        you do to make this game more fun?
      courseB_playlab_eventsToolbox_instruction: |-
        Finish by playing a sound and making
        the knight vanish when he runs into the dragon!
      courseB_playlab_events_challenge1_instruction: "Make the animals move down\nwhen
        you press ▼. "
      courseB_playlab_events_challenge1_2018_instruction: "Make the animals move\ndown
        when you press ▼. "
      courseB_playlab_events_challenge2_instruction: |-
        Make the animals disappear
        when you click on them.
      courseB_playlab_events_challenge2_2018_instruction: |-
        Make the animals disappear
        when you click on them.
      courseB_playlab_events_challenge2_embed_instruction: |-
        Here is your finished
        game!
      courseB_playlab_events_challenge2_template_instruction: |-
        Let's make the animals
        disappear when you click on them! You can also add sounds and score points
        to create a fun game of Animal Tag!
      courseB_playlab_events_challenge2_template_2018_instruction: |-
        Let's make the
        animals disappear when you click on them! You can also add sounds and score
        points to create a fun game of Animal Tag!
      courseB_scrat_forVideo_instruction: Get the acorn!
      courseB_starWars_prog1_instruction: Help BB-8 get the scrap metal!
      courseB_starWars_prog10_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog10_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseB_starWars_prog11_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog11_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseB_starWars_prog1_2018_instruction: '"Go get the scrap metal, BB-8!"'
      courseB_starWars_prog2_instruction: |-
        Help BB-8 gather **all** of the glowing
        scrap metal
      courseB_starWars_prog2_2018_instruction: Get all the metal.
      courseB_starWars_prog3_instruction: |-
        Help BB-8 gather **all** of the glowing
        scrap metal
      courseB_starWars_prog3_2018_instruction: Get all the scrap metal
      courseB_starWars_prog4_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog4_2018_instruction: Get all the scrap metal
      courseB_starWars_prog5_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog5_2018_instruction: Get the scrap metal
      courseB_starWars_prog6_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog6_2018_instruction: Get all the scrap metal
      courseB_starWars_prog7_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog7_2018_instruction: Go get it!
      courseB_starWars_prog8_instruction: |-
        **Challenge:** Help BB-8 gather the glowing
        scrap metal
      courseB_starWars_prog8_2018_instruction: |-
        **Challenge:** Help BB-8 gather the
        glowing scrap metal
      courseB_starWars_prog9_instruction: Help BB-8 gather the glowing scrap metal
      courseB_starWars_prog9_2018_instruction: |-
        Help BB-8 gather the glowing scrap
        metal
      courseC_PlayLab_events1_instruction: |-
        Make Jorge the Dog (actor 1) say "Hi
        there."
      courseC_PlayLab_events1_2018_instruction: |-
        Make Jorge the Dog (actor 1) say
        "Hi there."
      courseC_PlayLab_events2_instruction: |-
        Can you make Jorge the Dog (actor 1)
        say something, then have Olive the Cat (actor 2) say something afterward?
      courseC_PlayLab_events2_2018_instruction: |-
        Can you make Jorge the Dog (actor
        1) say something, then have Olive the Cat (actor 2) say something afterward?
      courseC_PlayLab_events3_instruction: |-
        Você consegue escrever um programa para fazer Jorge
        (personagem 1) se mover em direção à gata Olívia?
      courseC_PlayLab_events3_2018_instruction: |-
        Can you write a program to make
        Jorge (actor 1) move toward Olive the Cat?
      courseC_PlayLab_events4_instruction: |-
        Can you write a program that makes Jorge
        (actor 1) move to Olive the Cat, and have Olive say "Hi there." when Jorge
        reaches her?
      courseC_PlayLab_events4_2018_instruction: |-
        Can you write a program that makes
        Jorge (actor 1) move to Olive the Cat, and have Olive say "Hi there." when
        Jorge reaches her?
      courseC_PlayLab_events5_instruction: |-
        Can you write a program to make Octavia
        the Octopus say "What's new?" when she is clicked?
      courseC_PlayLab_events5_2018_instruction: |-
        Can you write a program to make
        Octavia the Octopus say "What's new?" when she is clicked?
      courseC_PlayLab_events6_instruction: |-
        Now, write a program to make Waddles
        the Penguin move around using the up / down / left / right keys to hit all
        of the targets!
      courseC_PlayLab_events6_2018_instruction: |-
        Now, write a program to make Waddles
        the Penguin move around using the up / down / left / right keys to hit all
        of the targets!
      courseC_PlayLab_events7_instruction: |-
        The `repeat forever` block allows you
        to run code over and over forever.  Use this block to move Chomp the Dino
        (actor 2) up and down by 400 pixels forever.
      courseC_PlayLab_events7_2018_instruction: |-
        The `repeat forever` block allows
        you to run code over and over forever.  Use this block to move Chomp the Dino
        (actor 2) up and down by 400 pixels forever.
      courseC_PlayLab_events8_instruction: |-
        Can you have Waddles (actor 1) play a
        "hit" sound and say "Ouch!" if he runs into Chomp? \r
        When you're done,
        play the game to make that happen.
      courseC_PlayLab_events8_2018_instruction: |-
        Can you have Waddles (actor 1) play
        a "hit" sound and say "Ouch!" if he runs into Chomp? \r
        When you're
        done, play the game to make that happen.
      courseC_PlayLab_events9_instruction: |-
        Can you add a block to score a point
        when Waddles the Penguin (actor1) runs into Octavia the Octopus (actor 3)?
        \r
        Play the game and move Waddles with the arrows until you score!
      courseC_PlayLab_events9_2018_instruction: |-
        Can you add a block to score a point
        when Waddles the Penguin (actor1) runs into Octavia the Octopus (actor 3)?
        \r
        Play the game and move Waddles with the arrows until you score!
      courseC_PlayLab_eventsA_instruction: |-
        Add blocks to the `when run` event to
        change the background scene and the speed of Waddles the Penguin.\r
        \r
        Play
        the game and move Waddles with the arrows until you score.
      courseC_PlayLab_eventsA_2018_instruction: |-
        Add blocks to the `when run` event
        to change the background scene and the speed of Waddles the Penguin.\r
        \r
        Play
        the game and move Waddles with the arrows until you score.
      courseC_PlayLab_eventsFP_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends. See story ideas in the hints.
      courseC_PlayLab_eventsFP_2018_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends. See story ideas in the hints.
      courseC_PlayLab_events_challenge1_instruction: |-
        Use a new block to make Waddles
        automatically move back to the start when he runs into the Dinosaur and when
        he scores a point. \r
        Play the game and move Waddles with the arrows until
        you score enough points.
      courseC_PlayLab_events_challenge1_2018_instruction: |-
        Use a new block to make
        Waddles automatically move back to the start when he runs into the Dinosaur
        and when he scores a point. \r
        Play the game and move Waddles with the arrows
        until you score enough points.
      courseC_PlayLab_events_challenge1_xy_blocks_instruction: |-
        Here is a new block
        that is somewhat complicated. Use it to move Waddles back to the start when
        he runs into the Dinosaur and when he scores a point. This will make your
        game more challenging and fun!\r
        \r
        Play the game and move Waddles with
        the arrows until you score enough points.
      courseC_artist_loop1_instruction: Let's add some pizazz!
      courseC_artist_loop1_2018_instruction: Let's add some pizazz!
      courseC_artist_loops1_instruction: "*\"Zombie.  Draw!\"*\\r\n\\r\nThe zombie\nwants
        to draw a line from where he is to the garden of sunflowers.  Can you\nhelp
        him?  \\r\n*(The garden is 250 pixels away)*  "
      courseC_artist_loops1a_instruction: "Get the artist to the center of the play\narea,
        then draw a bird using a sticker. "
      courseC_artist_loops1a_2018_instruction: "Get the artist to the center of the\nplay
        area, then draw a bird using a sticker. "
      courseC_artist_loops2_instruction: |-
        Now that the zombie knows his way, help
        him dig holes along the path to plant more flowers!
      courseC_artist_loops2a_instruction: |-
        Now, use a loop to spin your bird around
        12 times with a 30 degree turn.
      courseC_artist_loops2a_2018_instruction: |-
        Now, use a loop to spin your bird
        around 12 times with a 30 degree turn.
      courseC_artist_loops3_instruction: |-
        Excellent!  Now that the flowers have sprouted,
        help the zombie place a friend every 50 pixels to guard over them until they
        are grown.
      courseC_artist_loops3a_instruction: Now add a bat!
      courseC_artist_loops3a_2018_instruction: Now add a bat!
      courseC_artist_loops4_instruction: |-
        The zombie has found an empty farm!  Can
        you help him bring it to life by stamping animal stickers every 100 pixels
        around the border?
      courseC_artist_loops4a_instruction: Try jumping forward by 75 pixels.
      courseC_artist_loops4a_2018_instruction: Try jumping forward by 75 pixels.
      courseC_artist_loops5_instruction: |
        Great!  Now it's time to make a fence
        inside to keep the animals out.   \r
        \r
      courseC_artist_loops5a_instruction: Try new stickers!
      courseC_artist_loops5a_2018_instruction: Try new stickers!
      courseC_artist_loops5b_instruction: Try adding lines!
      courseC_artist_loops5b_2018_instruction: Try adding lines!
      courseC_artist_loops6_instruction: |
        What should the zombie put inside of the
        garden?  \r
        \r
        \r
      courseC_artist_loops6a_instruction: Add another sticker!
      courseC_artist_loops6a_2018_instruction: Add another sticker!
      courseC_artist_loops7a_instruction: Play with the loops and angles.
      courseC_artist_loops7a_2018_instruction: Play with the loops and angles.
      courseC_artist_loops8a_instruction: Now try something on your own!
      courseC_artist_loops8a_2018_instruction: Now try something on your own!
      courseC_artist_loopsPre1a_instruction: Time to spin that line around!
      courseC_artist_loopsPre1a_2018_instruction: Time to spin that line around!
      courseC_artist_loopsPrePre1a_instruction: "Get the artist to the center of\nthe
        play area, then draw a line. "
      courseC_artist_loopsPrePre1a_2018_instruction: "Get the artist to the center\nof
        the play area, then draw a line. "
      courseC_artist_loopsTemplate_instruction: |-
        Excellent!  Now that the flowers
        have sprouted, help the zombie place a friend every 50 pixels to guard over
        them until they are grown.
      courseC_artist_loopsTemplateA_instruction: "Get the artist to the center of\nthe
        play area, then draw a bird using a sticker. "
      courseC_artist_loopsTemplateA_2018_instruction: "Get the artist to the center\nof
        the play area, then draw a bird using a sticker. "
      courseC_artist_prog1_instruction: |-
        Play with the blocks in the toolbox to see
        what they do!
      courseC_artist_prog1_2018_instruction: |-
        Play with the blocks in the toolbox
        to see what they do!
      courseC_artist_prog2_instruction: |-
        Drag blocks onto the screen to have the
        artist draw over the grey lines in the picture. (Each line is 100 pixels long)
      courseC_artist_prog2_2018_instruction: |-
        Drag blocks onto the screen to have
        the artist draw over the grey lines in the picture. (Each line is 100 pixels
        long)
      courseC_artist_prog3_instruction: |-
        Each side of the inner square is 100 pixels
        and all of the angles are 90 degrees.
      courseC_artist_prog3_2018_instruction: |-
        Each side of the inner square is 100
        pixels and all of the angles are 90 degrees.
      courseC_artist_prog4_instruction: |-
        Finish Starla's rocket so she can chase
        her pet.
      courseC_artist_prog4_2018_instruction: |-
        Finish Starla's rocket so she can
        chase her pet.
      courseC_artist_prog5_instruction: 'Essa casa precisa de um telhado! Desenhe
        o triângulo. Dica: todos os 3 lados têm o mesmo comprimento.'
      courseC_artist_prog5_2018_instruction: |-
        Finish this tag by drawing a rectangle
        around the outside.\r
        (The long sides are 200 pixels each and the short sides
        are each 100 pixels)
      courseC_artist_prog6_instruction: Draw this diamond with 200 pixel sides.
      courseC_artist_prog6_2018_instruction: Draw this diamond with 200 pixel sides.
      courseC_artist_prog7_instruction: |-
        **Challenge:** This tag is a special one!  Can
        you figure out how to draw the outline?
      courseC_artist_prog7_2018_instruction: |-
        **Challenge:** This tag is a special
        one!  Can you figure out how to draw the outline?
      courseC_artist_prog8_instruction: |-
        One more tag.  This is a triangle for Pi.\r
        (Each
        side is 150 pixels)
      courseC_artist_prog8_2018_instruction: |-
        One more tag.  This is a triangle for
        Pi.\r
        (Each side is 150 pixels)
      courseC_artist_prog_challenge1-doghouse_instruction: |-
        Let's build a dog house
        for Jorge!
      courseC_artist_prog_challenge1_instruction: 'Draw rooms for each of the animals.

'
      courseC_artist_prog_challenge1_2018_instruction: "Draw rooms for each of the\nanimals. "
      courseC_artist_prog_challenge2_instruction: |-
        *Help me paint the yellow lines
        on this road!*
      courseC_artist_prog_challenge2a_instruction: |-
        *"Help me paint the yellow lines
        on this road!"*
      courseC_artist_prog_challenge2a_2018_instruction: |-
        *"Help me paint the yellow
        lines on this road!"*
      courseC_collector_loops_challenge2_instruction: |-
        Get at least **5** pieces
        of treasure!
      courseC_collector_loops_challenge2_2018_instruction: |-
        Get at least **5** pieces
        of treasure!
      courseC_collector_prog1_instruction: |-
        Play around with the blocks to see if
        you can help Laurel collect some treasure.
      courseC_collector_prog1_2018_instruction: |-
        Play around with the blocks to see
        if you can help Laurel collect some treasure.
      courseC_collector_prog2_instruction: |-
        Move Laurel to the treasure, then use
        `collect` to pick it up.
      courseC_collector_prog2_2018_instruction: |-
        Move Laurel to the treasure, then
        use `collect` to pick it up.
      courseC_collector_prog3_instruction: |-
        Order these blocks to collect the treasure
        and solve the puzzle.
      courseC_collector_prog3_2018_instruction: |-
        Order these blocks to collect the
        treasure and solve the puzzle.
      courseC_collector_prog4_instruction: |-
        Put these blocks in order to collect
        all of the treasure and solve the puzzle.
      courseC_collector_prog4_2018_instruction: |-
        Put these blocks in order to collect
        all of the treasure and solve the puzzle.
      courseC_collector_prog5_instruction: |-
        These blocks are in the wrong order.
        Can you fix them?
      courseC_collector_prog5_2018_instruction: |-
        These blocks are in the wrong order.
        Can you fix them?
      courseC_collector_prog6_instruction: |-
        Reorder the blocks to collect all of
        the treasure.
      courseC_collector_prog6_2018_instruction: |-
        Reorder the blocks to collect all
        of the treasure.
      courseC_collector_prog7_instruction: |-
        Use blocks from the toolbox to collect
        all of the treasure.
      courseC_collector_prog7_2018_instruction: |-
        Use blocks from the toolbox to collect
        all of the treasure.
      courseC_collector_prog8_instruction: |-
        *"Keep up the good work! Help me collect
        all of the treasure."*
      courseC_collector_prog8_2018_instruction: |-
        *"Keep up the good work! Help me
        collect all of the treasure."*
      courseC_collector_prog9_instruction: '*"Let''s get all of the coins!"*'
      courseC_collector_prog9_2018_instruction: '*"Let''s get all of the treasure!"*'
      courseC_collector_progA_instruction: Help Laurel collect all of the treasure.
      courseC_collector_progB_instruction: |-
        Collect as many coins as you can to finish
        the stage!
      courseC_collector_prog_challenge1_instruction: |-
        Look carefully! Can you collect
        all **10** pieces of treasure?
      courseC_collector_prog_challenge1_2018_instruction: |-
        Look carefully! Can you
        collect all **10** pieces of treasure?
      courseC_collector_prog_challenge2_instruction: |-
        Collect at least **10** pieces
        of treasure to finish this challenge!
      courseC_collector_prog_challenge2_2018_instruction: |-
        Collect at least **10**
        pieces of treasure to finish this challenge!
      courseC_flappy_embed_events_instruction: |-
        Here's an example of a game that
        you're about to create yourself! Play through it one or two times to get
        an idea of what you are about to make.
      courseC_flappy_events1_instruction: |-
        Attach the `flap normal amount` block
        to the `when click` event, then press "Run".    Click or tap on the play
        space to move Flappy to the target.
      courseC_flappy_events10_instruction: 'Create your own Flappy game! '
      courseC_flappy_events10_2018_instruction: 'Create your own Flappy game! '
      courseC_flappy_events1_2018_instruction: |-
        Attach the `flap normal amount` block
        to the `when click` event, then press "Run".    Click or tap on the play
        space to move Flappy to the target.
      courseC_flappy_events2_instruction: |-
        Try adding a block that sets the level
        speed when the "Run" button is pressed.  Play the game and flap to the target
        to continue.
      courseC_flappy_events2_2018_instruction: |-
        Try adding a block that sets the
        level speed when the "Run" button is pressed.  Play the game and flap to
        the target to continue.
      courseC_flappy_events3_instruction: |-
        Attach the `end game` block to the `when
        hit the ground` event.   Play the game and crash the bird into the ground
        to continue.
      courseC_flappy_events3_2018_instruction: |-
        Attach the `end game` block to the
        `when hit the ground` event.   Play the game and crash the bird into the ground
        to continue.
      courseC_flappy_events4_instruction: |-
        Attach a block to the `when hit an obstacle`
        event so that the game ends when Flappy crashes into the first set of pipes.
      courseC_flappy_events4_2018_instruction: |-
        Attach a block to the `when hit an
        obstacle` event so that the game ends when Flappy crashes into the first set
        of pipes.
      courseC_flappy_events5_instruction: |-
        Add a block to the `when pass an obstacle`
        event, then press "Run" to score a point by flying Flappy through the first
        set of pipes.
      courseC_flappy_events5_2018_instruction: |-
        Add a block to the `when pass an
        obstacle` event, then press "Run" to score a point by flying Flappy through
        the first set of pipes.
      courseC_flappy_events6_instruction: |-
        See if you can still score a point after
        making Flappy flap either a smaller or larger amount each time you click.
      courseC_flappy_events6_2018_instruction: |-
        See if you can still score a point
        after making Flappy flap either a smaller or larger amount each time you click.
      courseC_flappy_events7_instruction: |-
        Next, try changing the scene by attaching
        a block to the `when run` event.
      courseC_flappy_events7_2018_instruction: |-
        Next, try changing the scene by attaching
        a block to the `when run` event.
      courseC_flappy_events8_instruction: |-
        Try setting a **random** scene when other
        events happen...for example, when passing an obstacle.
      courseC_flappy_events8_2018_instruction: |-
        Try setting a **random** scene when
        other events happen...for example, when passing an obstacle.
      courseC_flappy_events9_instruction: |-
        To mix things up, instead of ending the
        game when Flappy hits an obstacle, try setting the score back to 0.
      courseC_flappy_events9_2018_instruction: |-
        To mix things up, instead of ending
        the game when Flappy hits an obstacle, try setting the score back to 0.
      courseC_harvester_loops1_instruction: Use loops to pick all of the pumpkins.
      courseC_harvester_loops10_instruction: |-
        Collect all of the corn and all of
        the pumpkins.
      courseC_harvester_loops10_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops11_instruction: |-
        Collect all of the corn and all of
        the pumpkins.
      courseC_harvester_loops11_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops1_2018_instruction: Use loops to pick all of the pumpkins.
      courseC_harvester_loops2_instruction: |-
        Can you combine two different loops
        to move toward the pumpkins, then collect them all?
      courseC_harvester_loops2_2018_instruction: |-
        Can you combine two different loops
        to move toward the pumpkins, then collect them all?
      courseC_harvester_loops3_instruction: Collect all of the pumpkins.
      courseC_harvester_loops3_2018_instruction: Collect all of the pumpkins.
      courseC_harvester_loops4_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops4_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops5_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops5_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops6_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops6_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops7_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops7_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops8_instruction: |-
        **Challenge:** Collect all of the corn
        and all of the pumpkins.
      courseC_harvester_loops8_2018_instruction: |-
        **Challenge:** Collect all of the
        corn and all of the pumpkins.
      courseC_harvester_loops9_instruction: |-
        Collect all of the corn and all of the
        pumpkins.
      courseC_harvester_loops9_2018_instruction: |-
        Collect all of the corn and all
        of the pumpkins.
      courseC_harvester_loops_challenge1_instruction: Collect all of the corn.
      courseC_harvester_loops_challenge1a_instruction: Collect all of the corn.
      courseC_harvester_loops_challenge1a_2018_instruction: Collect all of the corn.
      courseC_harvester_loops_challenge2_instruction: |-
        Collect all of the lettuce.
        Avoid the trees and fields!
      courseC_harvester_loops_challenge2_2018_instruction: |-
        Collect all of the lettuce.
        Avoid the trees and fields!
      courseC_harvester_loops_forVid_instruction: |-
        Collect all of the corn, all of
        the lettuce, and all of the pumpkins.
      courseC_maze_debugging1_instruction: |-
        Fix the code to help get Scrat get to
        the acorn.
      courseC_maze_debugging10_instruction: |-
        Debug this level by rearranging and
        changing blocks to get me to the pig!
      courseC_maze_debugging1_2018_instruction: |-
        Fix the code to help get Scrat get
        to the acorn.
      courseC_maze_debugging2_instruction: |-
        Use your debugging skills to get Scrat
        to the acorn.
      courseC_maze_debugging2_2018_instruction: |-
        Use your debugging skills to get
        Scrat to the acorn.
      courseC_maze_debugging3_instruction: Remove blocks to get Skrat to the acorn!
      courseC_maze_debugging3_2018_instruction: |-
        Remove blocks to get Scrat to the
        acorn!
      courseC_maze_debugging4_instruction: |-
        Someone has their directions mixed up!
        Can you help?
      courseC_maze_debugging4_2018_instruction: |-
        Someone has their directions mixed
        up! Can you help?
      courseC_maze_debugging5_instruction: |-
        Debug this level by rearranging and changing
        blocks.
      courseC_maze_debugging5_2018_instruction: |-
        Debug this level by rearranging
        and changing blocks.
      courseC_maze_debugging6_instruction: |-
        Figure out what is wrong and get Scrat
        to the acorn.
      courseC_maze_debugging6_2018_instruction: |-
        Figure out what is wrong and get
        Scrat to the acorn.
      courseC_maze_debugging7_instruction: |-
        **Challenge:** Debug this level by rearranging,
        adding, and deleting blocks.
      courseC_maze_debugging7_2018_instruction: |-
        **Challenge:** Debug this level
        by rearranging, adding, and deleting blocks.
      courseC_maze_debugging8_instruction: |-
        Debug this level to get Scrat to the
        acorn.
      courseC_maze_debugging9_instruction: |-
        Debug this level to get Scrat to the
        acorn.
      courseC_maze_debugging9_2018_instruction: |-
        Debug this level to get Scrat to
        the acorn.
      courseC_maze_debugging_challenge1_instruction: |-
        Help Scrat decide which way
        to turn to get to the acorn.
      courseC_maze_debugging_challenge1_2018_instruction: |-
        Help Scrat decide which
        way to turn to get to the acorn.
      courseC_maze_debugging_challenge2_instruction: |-
        Help Scrat reach the acorn
        with only four `turn` commands.
      courseC_maze_debugging_challenge2_2018_instruction: |-
        Help Scrat reach the acorn
        with only four `turn` commands.
      courseC_maze_loops1_instruction: |-
        Can you get the bird to the pig using 5 of
        the same kind of blocks?
      courseC_maze_loops10_instruction: You are doing great! Keep it up!
      courseC_maze_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_maze_loops2_instruction: |-
        Can you get the bird to the pig by creating
        a loop that uses only one `move forward` block inside of a `repeat`?
      courseC_maze_loops3_instruction: Solve this puzzle by creating a loop!
      courseC_maze_loops4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get the bird to the pig with the fewest number of blocks!
      courseC_maze_loops5_instruction: '*"Get me to the pig as quickly as possible!"*'
      courseC_maze_loops6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence?
      courseC_maze_loops7_instruction: Use what you learned in other puzzles!
      courseC_maze_loops8_instruction: |-
        Challenge: Combine ideas from the last few
        puzzles to complete this level.
      courseC_maze_loops9_instruction: You are doing great! Keep it up!
      courseC_maze_loops_challenge1_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      courseC_maze_loops_challenge1a_instruction: "Now Scrat wants to try using loops\nto
        find his acorn! "
      courseC_maze_loops_challenge1a_2018_instruction: "Now Scrat wants to try using\nloops
        to find his acorn! "
      courseC_maze_loops_challenge2_instruction: |-
        Let's hunt for treasure - using
        loops! Help the collector by debugging this code. Get all of the treasure!
      courseC_maze_programming1_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      courseC_maze_programming1_2018_instruction: |-
        For this puzzle, drag all of the
        blocks together and click "Run" to watch it go!
      courseC_maze_programming2_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox to finish your code.
      courseC_maze_programming2_2018_instruction: |-
        Drag an extra `move forward` block
        out of the toolbox to finish your code.
      courseC_maze_programming3_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseC_maze_programming3_2018_instruction: |-
        There is one extra block that
        is going to cause the bird to crash. Throw it away by dragging it back to
        the toolbox.
      courseC_maze_programming4_instruction: Avoid TNT or feathers will fly!
      courseC_maze_programming4_2018_instruction: Avoid TNT or feathers will fly!
      courseC_maze_programming5_instruction: Avoid the TNT.
      courseC_maze_programming5_2018_instruction: Avoid the TNT.
      courseC_maze_programming6_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseC_maze_programming6_2018_instruction: |-
        "Keep calm and help me find the
        bad pig. Otherwise I might get angry!"
      courseC_maze_programming7_instruction: |-
        **Challenge:** This code has a lot
        of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming7_2018_instruction: |-
        **Challenge:** This code has a
        lot of bugs. You'll need to remove some blocks and add others.
      courseC_maze_programming8_instruction: |-
        *"Keep calm and help me find the bad
        pig."*
      courseC_maze_programming8_2018_instruction: |-
        *"Keep calm and help me find
        the bad pig."*
      courseC_maze_programming8_predict1_instruction: |-
        *"Keep calm and help me find
        the bad pig."*
      courseC_maze_programming8_predict1_2018_instruction: |-
        *"Keep calm and help
        me find the bad pig."*
      courseC_maze_programming9_instruction: |-
        *"Now, help me sneak up on the pig
        any way you want to!"*
      courseC_maze_programming9_2018_instruction: |-
        *"Now, help me sneak up on the
        pig any way you want to!"*
      courseC_maze_programming_challenge1_instruction: "The pig is hiding, and the\ngoal
        is to find it. "
      courseC_maze_programming_challenge1_2018_instruction: "The pig is hiding, and\nthe
        goal is to find it. "
      courseC_maze_programming_challenge2_instruction: |-
        Sometimes there is more than
        one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      courseC_maze_programming_challenge2_2018_instruction: |-
        Sometimes there is more
        than one way to solve the same problem. Sometimes it's faster to go backwards
        than it is to go forwards!
      courseC_playLab_embedded_instruction: |-
        Here's a game for you to play! To win,
        use your arrow keys to get the penguin to run into the octopus.\r
        \r
        Once
        you are done, you will learn how to make this game!
      courseC_puppy_loops10_instruction: You are doing great! Keep it up!
      courseC_puppy_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_puppy_loops8_instruction: |-
        Challenge: Combine ideas from the last few
        puzzles to complete this level.
      courseC_puppy_loops8courseC_maze_loops8_instruction: |-
        Challenge: Combine ideas
        from the last few puzzles to complete this level.
      courseC_puppy_loops9_instruction: You are doing great! Keep it up!
      courseC_starWars_loops1_instruction: |-
        BB-8 will pick up any metal scraps along
        the path where he moves. Use 5 of the same block to get BB-8 to pick up all
        of the scrap metal in the play area.
      courseC_starWars_loops10_instruction: You are doing great! Keep it up!
      courseC_starWars_loops10_2018_instruction: You are doing great! Keep it up!
      courseC_starWars_loops10_predict2_instruction: |-
        You are doing great! Keep it
        up!
      courseC_starWars_loops10_predict2_2018_instruction: |-
        You are doing great! Keep
        it up!
      courseC_starWars_loops11_instruction: |-
        You are almost there! This time, choose
        any path you like!
      courseC_starWars_loops11_2018_instruction: |-
        You are almost there! This time,
        choose any path you like!
      courseC_starWars_loops1_2018_instruction: |-
        BB-8 will pick up any metal scraps
        along the path where he moves. Use 5 of the same block to get BB-8 to pick
        up all of the scrap metal in the play area.
      courseC_starWars_loops1_predict1_instruction: |-
        BB-8 will pick up any metal
        scraps along the path where he moves. Use 5 of the same block to get BB-8
        to pick up all of the scrap metal in the play area.
      courseC_starWars_loops1_predict1_2018_instruction: |-
        BB-8 will pick up any metal
        scraps along the path where he moves. Use 5 of the same block to get BB-8
        to pick up all of the scrap metal in the play area.
      courseC_starWars_loops2_instruction: |-
        To get all the scrap metal, try creating
        a loop that uses only one block inside of a `repeat` block.
      courseC_starWars_loops2_2018_instruction: |-
        To get all the scrap metal, try
        creating a loop that uses only one block inside of a `repeat` block.
      courseC_starWars_loops4_instruction: |-
        In this puzzle, two `repeat` loops will
        help you get BB-8 to all of the scrap metal with the fewest number of blocks!
      courseC_starWars_loops4_2018_instruction: |-
        In this puzzle, two `repeat` loops
        will help you get BB-8 to all of the scrap metal with the fewest number of
        blocks!
      courseC_starWars_loops5_instruction: |-
        Get BB-8 to pick up all the scrap metal
        as quickly as possible!
      courseC_starWars_loops5_2018_instruction: |-
        Get BB-8 to pick up all the scrap
        metal as quickly as possible!
      courseC_starWars_loops6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence?
      courseC_starWars_loops6_2018_instruction: |-
        Loops even work with more than one
        block inside!  Can you loop this sequence?
      courseC_starWars_loops7_instruction: |-
        Can you try to get all the scrap metal
        using just one loop? Try programming it all out then finding the repeating
        code to put in a loop.
      courseC_starWars_loops7_2018_instruction: |-
        Can you try to get all the scrap
        metal using just one loop? Try programming it all out then finding the repeating
        code to put in a loop.
      courseC_starWars_loops9_instruction: |-
        Use what you have learned to pick up
        all of the scrap metal!
      courseC_starWars_loops9_2018_instruction: |-
        Use what you have learned to pick
        up all of the scrap metal!
      courseD_Frozen_nested1_instruction: "Draw a small shape, between **20 and 50**\npixels
        wide.  It can be any shape that you like.  "
      courseD_Frozen_nested2_instruction: |-
        Now take your shape and draw two or three
        in a row!
      courseD_Frozen_nested3_instruction: Let's spin that line of shapes around!
      courseD_Frozen_nested4_instruction: Time to layer those shapes!
      courseD_Frozen_nested5_instruction: Play with the snowflakes!
      courseD_Frozen_nested6_instruction: |-
        Draw a stair-step pattern that uses turns
        between 75 and 105 degrees.
      courseD_Frozen_nested7_instruction: |-
        Now, turn around 180 degrees and draw
        the stair pattern again!
      courseD_Frozen_nested8_instruction: |-
        Spin that shape around 5 or 6 times in
        a circle.
      courseD_Frozen_nested9_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      courseD_artist_1_2018_instruction: |
        Draw a small square with **30** pixel long
        sides.  \r
      courseD_artist_2_2018_instruction: |
        Now, turn right by **60** degrees, then
        draw a straight line **150** pixels long and jump back to the center of the
        play area.\r
      courseD_artist_3_2018_instruction: "Nest all of the code inside of another\n`repeat`
        loop and run it a total of **6** times. "
      courseD_artist_4_2018_instruction: Add a tiny shape to the end of your line!
      courseD_artist_5_2018_instruction: Play with the snowflakes!
      courseD_artist_6_2018_instruction: |
        Try changing your long 150 pixel line into
        6 short lines of **25** pixels, with little turns at the end.\r
      courseD_artist_7_2018_instruction: |-
        Now, turn around 180 degrees and draw the
        stair pattern again!
      courseD_artist_8_2018_instruction: |-
        Spin that shape around 5 or 6 times in
        a circle.
      courseD_artist_9_2018_instruction: |-
        Try playing around with what you've created.
        Draw whatever you like!\r
        - What happens if you use two different angles
        in your stair step pattern?\r
        - What happens if you make your diamond pattern
        longer or shorter?\r
        - What does it look like to draw two snowflakes on top
        of one another?
      courseD_artist_binary1_instruction: |-
        Use the blocks below to have the artist
        draw "01010101" in binary in the first row.
      courseD_artist_binary1_2018_instruction: |-
        Binário é uma forma de representar informações
        usando apenas duas opções. Aqui, vamos usar as opções "desligado" (representada
        pelo número 0) e "ligado" (representada pelo número 1).  \r
        \r
        Foi fornecida
        uma grade de "pixels" pela qual você pode andar e criar
        designs virando em certos quadrados. Você consegue fazer o artista desenhar
        "01010101" em binário na primeira fileira?
      courseD_artist_binary2_instruction: |-
        Run this code to see how the artist uses
        binary to draw this pattern.
      courseD_artist_binary2_2018_instruction: |-
        Run this code to see how the artist
        uses binary to draw this pattern.
      courseD_artist_binary3_instruction: |-
        Which of the binary strings below could
        you loop 8 times to draw this image?
      courseD_artist_binary3_2018_instruction: |-
        Which of the binary strings below
        could you loop 8 times to draw this image?
      courseD_artist_binary4_instruction: |-
        Can you draw this pattern by looping just
        three binary digits (0s and 1s)?
      courseD_artist_binary4_2018_instruction: |-
        Você consegue desenhar este padrão repetindo
        apenas três dígitos binários? (0 e 1)?
      courseD_artist_binary5_instruction: |-
        Each binary string below represents one
        row of this picture. \r
        \r
        Can you rearrange them so it draws a smiley face
        instead of a frown?
      courseD_artist_binary5_2018_instruction: |-
        Each binary string below represents
        one row of this picture. \r
        \r
        Can you rearrange them so it draws a smiley
        face instead of a frown?
      courseD_artist_binary6_instruction: |-
        Que string binária de 6 dígitos, repetida
        11 vezes, vai desenhar essa imagem?
      courseD_artist_binary6_2018_instruction: |-
        Que string binária de 6 dígitos, repetida
        11 vezes, vai desenhar essa imagem?
      courseD_artist_binary7_instruction: |-
        Qual é a menor string binária que você
        pode repetir para desenhar esta imagem?
      courseD_artist_binary7_2018_instruction: |-
        What is the shortest binary string
        that you can repeat to draw this image?
      courseD_artist_binary8_instruction: Finish the code to create this drawing.
      courseD_artist_binary8_2018_instruction: Finish the code to create this drawing.
      courseD_artist_binary8_predict1_instruction: |-
        Finish the code to create this
        drawing.
      courseD_artist_binary8_predict1_2018_instruction: |-
        Finish the code to create
        this drawing.
      courseD_artist_binaryFP_instruction: |-
        Here's a higher resolution canvas to
        draw on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start to
        get creative with the bits!
      courseD_artist_binaryFP8_instruction: "**Free Play:**  Draw whatever you want\nin
        binary! "
      courseD_artist_binaryFP_2018_instruction: |-
        Here's a higher resolution canvas
        to draw on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start
        to get creative with the bits!
      courseD_artist_binary_challenge0_instruction: |-
        Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge1_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge1_2018_instruction: |-
        You can only use each binary
        value (0 or 1) once each in this puzzle. Try using nested loops to complete
        this drawing.
      courseD_artist_binary_challenge2_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      courseD_artist_binary_challenge2_2018_instruction: |-
        Are you persistent enough
        to restore this logo back to normal?
      courseD_artist_binary_challenge3_instruction: |-
        Are you persistent enough to
        restore this logo back to normal?
      courseD_artist_embed_frozen_instruction: Press Run to see a snowflake design!
      courseD_artist_embed_frozen2_instruction: Press Run to see a snowflake design.
      courseD_artist_functions10_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseD_artist_functions2_instruction: |
        This time, use the `draw a square`
        function to create the glasses. \r
      courseD_artist_functions3_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseD_artist_functions4_instruction: |-
        Now that you can draw a star, try drawing
        four stars!
      courseD_artist_functions5_instruction: |-
        Draw only those three stars to finish
        this puzzle.
      courseD_artist_functions6_instruction: |-
        Make this window by drawing a square,
        then turning 90 degrees before drawing another, and so on.
      courseD_artist_functions7_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseD_artist_functions8_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseD_artist_functions9_instruction: |-
        Create this image using only the blocks
        provided.
      courseD_artist_nestedLoops1_instruction: |-
        Draw a triangle to kickstart this
        stage.  \r
        (Each side is 100 pixels long and you'll need to turn 120 degrees
        for each exterior angle.)
      courseD_artist_nestedLoops10_instruction: |-
        Take the squares from before, but
        this time only make 7 of them, and lay them out in a row.
      courseD_artist_nestedLoops10_2018_instruction: |-
        Take the squares from before,
        but this time only make 7 of them, and lay them out in a row.
      courseD_artist_nestedLoops1_2018_instruction: |-
        Draw a triangle to kickstart
        this stage.  \r
        (Each side is 100 pixels long and you'll need to turn 120
        degrees for each exterior angle.)
      courseD_artist_nestedLoops1a_instruction: |-
        Now loop the triangle 6 times. \r
        After
        each triangle, you'll need to turn 60 degrees before drawing the next.
      courseD_artist_nestedLoops1a_2018_instruction: 'Now loop the triangle 6 times.

'
      courseD_artist_nestedLoops2_instruction: |-
        This time, complete the puzzle with
        the fewest number of blocks possible.
      courseD_artist_nestedLoops2_2018_instruction: |-
        This time, complete the puzzle
        with the fewest number of blocks possible.
      courseD_artist_nestedLoops3_instruction: |-
        Use your new skills to quickly draw
        the last row of windows for this building.\r
        \r
        The windows are 20 pixel
        squares, each 20 pixels apart.
      courseD_artist_nestedLoops3_2018_instruction: |-
        Use your new skills to quickly
        draw the last row of windows for this building.\r
        \r
        The windows are 20
        pixel squares, each 20 pixels apart.
      courseD_artist_nestedLoops4_instruction: |-
        Great!  Do the same thing with these
        circles.
      courseD_artist_nestedLoops4_2018_instruction: |-
        Great!  Do the same thing with
        these circles.
      courseD_artist_nestedLoops5_instruction: |-
        What happens if you also turn 90
        degrees between circles?
      courseD_artist_nestedLoops5_2018_instruction: |-
        What happens if you also turn
        90 degrees between circles?
      courseD_artist_nestedLoops6_instruction: |-
        Edit blocks within your existing
        code to make this image.
      courseD_artist_nestedLoops7_instruction: |-
        Use what you've learned to make
        this drawing.
      courseD_artist_nestedLoops7_2018_instruction: |-
        Use what you've learned to
        make this drawing.
      courseD_artist_nestedLoops8_instruction: |-
        Using what you have learned in the
        last couple of puzzles, build this image from the beginning.
      courseD_artist_nestedLoops8_2018_instruction: |-
        Using what you have learned
        in the last couple of puzzles, build this image from the beginning.
      courseD_artist_nestedLoops9_instruction: |-
        **Challenge:** Can you figure out
        how to make a picture like this?
      courseD_artist_nestedLoops9_2018_instruction: |-
        **Challenge:** Can you figure
        out how to make a picture like this?
      courseD_artist_nestedLoops9_predict1_instruction: |-
        **Challenge:** Can you figure
        out how to make a picture like this?
      courseD_artist_nestedLoops9_predict1_2018_instruction: |-
        **Challenge:** Can
        you figure out how to make a picture like this?
      courseD_artist_nestedLoopsFP_instruction: |-
        Now it's your turn.  Take the skills
        you have learned and make something that you love!
      courseD_artist_nestedLoopsFP_2018_instruction: |-
        Now it's your turn.  Take
        the skills you have learned and make something that you love!
      courseD_artist_nestedLoopsPre1_instruction: |-
        Create a triangle to kickstart
        this stage.
      courseD_artist_nestedLoops_challenge1_instruction: |-
        Can you figure out how
        to make a picture like this?
      courseD_artist_nestedLoops_challenge1_2018_instruction: |-
        Can you figure out
        how to make a picture like this?
      courseD_artist_nestedLoops_challenge2_instruction: |-
        Fix the code to make this
        picture!
      courseD_artist_nestedLoops_challenge2_2018_instruction: |-
        Fix the code to make
        this picture!
      courseD_artist_project1_instruction: "Draw a small shape, between **20 and\n50**
        pixels wide.  It can be any shape that you like.  "
      courseD_artist_project1_2018_instruction: "Draw a small shape, between **20\nand
        50** pixels wide.  It can be any shape that you like.  "
      courseD_artist_project1a_instruction: |-
        Draw a stair-step pattern that uses
        turns between 75 and 105 degrees.
      courseD_artist_project1a_2018_instruction: |-
        Draw a stair-step pattern that
        uses turns between 75 and 105 degrees.
      courseD_artist_project2_instruction: |-
        Now take your shape and draw two or three
        in a row!
      courseD_artist_project2_2018_instruction: |-
        Now take your shape and draw two
        or three in a row!
      courseD_artist_project2a_instruction: |-
        Now, turn around 180 degrees and draw
        the stair pattern again!
      courseD_artist_project2a_2018_instruction: |-
        Now, turn around 180 degrees and
        draw the stair pattern again!
      courseD_artist_project3_instruction: Let's spin that line of shapes around!
      courseD_artist_project3_2018_instruction: |-
        Let's spin that line of shapes
        around!
      courseD_artist_project3a_instruction: |-
        Spin that shape around 5 or 6 times
        in a circle.
      courseD_artist_project3a_2018_instruction: |-
        Spin that shape around 5 or 6 times
        in a circle.
      courseD_artist_project4_instruction: Time to layer those shapes!
      courseD_artist_project4_2018_instruction: Time to layer those shapes!
      courseD_artist_project4a_instruction: |-
        Try playing around with what you've
        created. Draw whatever you like!\r
        - What happens if you use two different
        angles in your stair step pattern?\r
        - What happens if you make your diamond
        pattern longer or shorter?\r
        - What does it look like to draw two snowflakes
        on top of one another?
      courseD_artist_project4a_2018_instruction: |-
        Try playing around with what you've
        created. Draw whatever you like!\r
        - What happens if you use two different
        angles in your stair step pattern?\r
        - What happens if you make your diamond
        pattern longer or shorter?\r
        - What does it look like to draw two snowflakes
        on top of one another?
      courseD_artist_project5_instruction: Play with the snowflakes!
      courseD_artist_project5_2018_instruction: Play with the snowflakes!
      courseD_artist_project_embedded_instruction: |-
        Here's what you will soon be
        making!
      courseD_artist_ramp11_instruction: Now make a square using Artist!
      courseD_artist_ramp12_instruction: |-
        Use what you've learned to draw this triangle
        inside of a square.
      courseD_bee_conditionals1_instruction: |-
        Check to see if there's a flower under
        the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals10_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      courseD_bee_conditionals10_2018_instruction: |-
        Collect all of the nectar and
        make all of the honey.
      courseD_bee_conditionals1_predict1_instruction: |-
        Check to see if there's a
        flower under the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals1_predict1_2018_instruction: |-
        Check to see if there's
        a flower under the cloud. If there's a flower, get nectar.
      courseD_bee_conditionals2_instruction: "Check underneath every cloud to see\nif
        it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals2_2018_instruction: "Check underneath every cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals2_test_instruction: "Check underneath every cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseD_bee_conditionals3_instruction: |-
        Help the bee collect all of the nectar.
        \r
        \r
        You can only collect nectar from flowers, but you can check any space
        to see if there is a flower.
      courseD_bee_conditionals3_2018_instruction: |-
        Help the bee collect all of the
        nectar. \r
        \r
        You can only collect nectar from flowers, but you can check
        any space to see if there is a flower.
      courseD_bee_conditionals4_instruction: |-
        Get all of the nectar using as few
        blocks as possible.
      courseD_bee_conditionals4_2018_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      courseD_bee_conditionals5_instruction: |-
        Collect all of the nectar using as
        few blocks as possible
      courseD_bee_conditionals5_2018_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      courseD_bee_conditionals6_instruction: |-
        Some of these clouds might have honeycombs
        under them.  Be sure to check if a honeycomb is hiding behind each cloud!
      courseD_bee_conditionals6_2018_instruction: |-
        Some of these clouds might have
        honeycombs under them.  Be sure to check if a honeycomb is hiding behind each
        cloud!
      courseD_bee_conditionals7_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_2018_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_predict2_instruction: |-
        Use the `if/else` block to
        collect nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals7_predict2_2018_instruction: |-
        Use the `if/else` block
        to collect nectar at flowers and make honey at honeycomb.
      courseD_bee_conditionals8_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseD_bee_conditionals8_2018_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseD_bee_conditionals9_instruction: |-
        Collect all of the nectar or make all
        the honey.
      courseD_bee_conditionals9_2018_instruction: |-
        Collect all of the nectar or make
        all the honey.
      courseD_bee_conditionals_challenge1_instruction: |-
        Collect all the nectar and
        make all the honey.
      courseD_bee_conditionals_challenge1_2018_instruction: |-
        Collect all the nectar
        and make all the honey.
      courseD_bee_conditionals_challenge2_instruction: |-
        Collect all of the nectar
        and make all the honey.
      courseD_bee_conditionals_challenge2_2018_instruction: |-
        Collect all of the nectar
        and make all the honey.
      courseD_bee_conditionals_challenge3_instruction: |-
        Collect all of the nectar
        or make all the honey.
      courseD_bee_debugging1_instruction: |-
        Fix the error(s) to collect all of the
        nectar.
      courseD_bee_debugging2_instruction: |-
        Fix the error(s) to collect all of the
        nectar.
      courseD_bee_debugging3_instruction: |-
        Fix the error(s) to collect all of the
        nectar and make all of the honey.
      courseD_bee_debugging4_instruction: Fix the error(s) to make all of the honey.
      courseD_bee_debugging5_instruction: |-
        Challenge: All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_bee_debugging6_instruction: |-
        Challenge:  Fix the errors to collect
        all of the nectar and make all of the honey.
      courseD_bee_debugging9_instruction: |-
        Help the bee fix the code to get all the
        nectar.
      courseD_bee_debugging_challenge1_instruction: |-
        Watch how the bees gets the
        nectar. Can you use the same kind of pattern to help the bee make all of the
        honey?
      courseD_bee_debugging_challenge1_2018_instruction: |-
        Watch how the bees gets
        the nectar. Can you use the same kind of pattern to help the bee make all
        of the honey?
      courseD_bee_debugging_challenge1a_instruction: |-
        Watch how the bee gets the
        nectar. Use the same pattern to help the bee make all the honey.
      courseD_bee_debugging_challenge2_instruction: |-
        Watch how the bees gets the
        nectar. Can you use the same kind of pattern to help the bee make all of honey?
      courseD_bee_nestedLoops1_instruction: Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1_2018_instruction: |-
        Help the bee collect all of the
        nectar.
      courseD_bee_nestedLoops1a_instruction: Help the bee collect all of the nectar.
      courseD_bee_nestedLoops1a_2018_instruction: |-
        Help the bee collect all of the
        nectar.
      courseD_bee_nestedLoops2_instruction: |-
        This time, help the bee collect all
        of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_2018_instruction: |-
        This time, help the bee collect
        all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_predict1_instruction: |-
        This time, help the bee collect
        all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops2_predict1_2018_instruction: |-
        This time, help the bee
        collect all of the nectar using as few blocks as possible.
      courseD_bee_nestedLoops3_instruction: |-
        Collect all of the nectar from each
        flower.
      courseD_bee_nestedLoops5_instruction: "Collect all of the nectar from each\nflower
        and make honey at the honeycomb. "
      courseD_bee_nestedLoops6_instruction: Make all of the nectar.
      courseD_bee_nestedLoops6_2018_instruction: |-
        Get the zombie to the sunflower
        using only the blocks available.
      courseD_bee_nestedLoops7_instruction: |-
        Challenge: Figure out how to get all
        of the nectar using only the blocks available.
      courseD_bee_nestedLoops7_2018_instruction: |-
        Challenge: Figure out how to get
        all of the nectar using only the blocks available.
      courseD_bee_nestedLoops8_instruction: "Collect all of the nectar from each\nflower
        and make honey at the honeycomb. "
      courseD_bee_nestedLoops8_2018_instruction: "Collect all of the nectar from\neach
        flower and make honey at the honeycomb. "
      courseD_bee_nestedLoops9_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_2018_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_predict2_instruction: Make all of the honey.
      courseD_bee_nestedLoops9_predict2_2018_instruction: Make all of the honey.
      courseD_bee_nested_loops_challenge1_instruction: |-
        Let's hunt for treasure
        - using loops! Help the collector reach at least two piles of treasure using
        only the blocks in your toolbox.
      courseD_bee_nested_loops_challenge2_instruction: |-
        Let's hunt for treasure
        - using loops! Help the collector reach at least two piles of treasure using
        only the blocks in your toolbox.
      courseD_bounce_embed_endgame_instruction: |-
        Use the left and right arrows to
        move the paddle. See how many points you can get before your opponent scores
        twice!
      courseD_bounce_embedded_instruction: Write Instructions Here
      courseD_bounce_events1_instruction: |-
        Attach a block to the "when left arrow"
        block and press "Run" to move the player to the flag.
      courseD_bounce_events10_instruction: |-
        There is now a goal at the top. Attach
        the "score point" and "score opponent point" blocks to the "when ball
        in goal" and "when ball misses paddle" blocks to make a game. See how many
        points you can score before your opponent scores twice.
      courseD_bounce_events10s_instruction: "Attach the `score point` block to the\n`when
        ball in goal` event and the `score opponent point` block to the `when\nball
        misses hand` event to make a game. "
      courseD_bounce_events10s_2018_instruction: "Attach the `score point` block\nto
        the `when ball in goal` event and the `score opponent point` block to the\n`when
        ball misses hand` event to make a game. "
      courseD_bounce_events11_instruction: |-
        You can now attach blocks to the "when
        run" block. You have to attach the new "launch new ball" block in more
        than one place. Also, try changing the scene or the speed of the paddle and
        the ball and see how many points you can score before your opponent scores
        twice.
      courseD_bounce_events11s_instruction: "Attach the `throw new ball` block in\nall
        of the places where the game needs a new ball. "
      courseD_bounce_events11s_2018_instruction: "Attach the `throw new ball` block\nin
        all of the places where the game needs a new ball. "
      courseD_bounce_events12_instruction: |-
        Create your own Bounce game. You can
        change all the visuals and the rules. When you're done, click Finish to let
        friends try your game on their phones.
      courseD_bounce_events12s_instruction: |-
        Make this game your own. You can change
        all the visuals and the rules. When you're done, click "Finish" to let
        friends try your game on their phones.
      courseD_bounce_events12s_2018_instruction: |-
        Make this game your own. You can
        change all the visuals and the rules. When you're done, click "Finish"
        to let friends try your game on their phones.
      courseD_bounce_events1s_instruction: |-
        Attach a block to the "when left arrow"
        block and press "Run" to move the player to the net.
      courseD_bounce_events1s_2018_instruction: |-
        Attach a block to the "when left
        arrow" block and press "Run" to move the player to the net.
      courseD_bounce_events2_instruction: |-
        Attach a block to the "when right arrow"
        and "when left arrow" blocks. Move the paddle to reach both finish targets.
      courseD_bounce_events2s_instruction: |-
        Now, attach a block to the `when right
        event` so that the hand can get to both baskets.
      courseD_bounce_events2s_2018_instruction: |-
        Now, attach a block to the `when
        right event` so that the hand can get to both baskets.
      courseD_bounce_events3_instruction: |-
        Now try something similar with the "when
        up arrow" block. Move the paddle to the finish target at the top.
      courseD_bounce_events3s_instruction: |-
        Now try something similar with the "when
        up arrow" block. Move the paddle to the finish target at the top.
      courseD_bounce_events4_instruction: |-
        This time you need to add four blocks.
        Move the paddle to all four finish targets to complete this puzzle.
      courseD_bounce_events4s_instruction: |-
        This time you need to add four blocks.
        Move the paddle to all four finish targets to complete this puzzle.
      courseD_bounce_events5_instruction: |-
        We're going to send a ball flying down
        towards the paddle. Attach a block to the "when ball hits paddle" block
        to ensure the ball reaches the finish target.
      courseD_bounce_events5s_instruction: |-
        Attach a block to the `when ball hits
        hand` event to ensure the ball reaches the basket.
      courseD_bounce_events5s_2018_instruction: |-
        Attach a block to the `when ball
        hits hand` event to ensure the ball reaches the basket.
      courseD_bounce_events6_instruction: |-
        Now the finish target is on the top. You
        need to attach blocks to both of the "when ball hits" blocks to solve this
        puzzle.
      courseD_bounce_events6s_instruction: |-
        Attach code to make the ball bounce when
        it hits the wall so you can solve this puzzle.
      courseD_bounce_events6s_2018_instruction: |-
        Attach code to make the ball bounce
        when it hits the wall so you can solve this puzzle.
      courseD_bounce_events7_instruction: |-
        Attach blocks to each of the "when"
        blocks. Bounce the ball until it hits the finish target.
      courseD_bounce_events7s_instruction: |-
        Attach sound blocks to make the net swish
        when you hit the basket and have the whistle blow when the ball misses your
        hand. Bounce the ball until it hits the finish target.
      courseD_bounce_events7s_2018_instruction: |-
        Attach sound blocks to make the
        net swish when you hit the basket and have the whistle blow when the ball
        misses your hand. Bounce the ball until it hits the finish target.
      courseD_collector_debugging1_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging1_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging1a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging1a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging2_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging2_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging2a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging2a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging3_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging3_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging3a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging3a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging4_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging4_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging4a_instruction: |-
        Fix the error(s) to collect all
        of the treasure.
      courseD_collector_debugging4a_2018_instruction: |-
        Fix the error(s) to collect
        all of the treasure.
      courseD_collector_debugging5_instruction: |-
        All of the commands that you need
        are already here...now use your debugging skills to figure out how to solve
        this puzzle.
      courseD_collector_debugging5_2018_instruction: |-
        All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_collector_debugging5a_instruction: |-
        All of the commands that you need
        are already here...now use your debugging skills to figure out how to solve
        this puzzle.
      courseD_collector_debugging5a_2018_instruction: |-
        All of the commands that you
        need are already here...now use your debugging skills to figure out how to
        solve this puzzle.
      courseD_collector_debugging6_instruction: |-
        Challenge: Use your debugging skills
        to fix the errors and collect all of the treasure.
      courseD_collector_debugging6_2018_instruction: |-
        Challenge: Use your debugging
        skills to fix the errors and collect all of the treasure.
      courseD_collector_debugging6a_instruction: |-
        Challenge: Use the code in the
        work area to get at least **6** pieces of treasure!
      courseD_collector_debugging6a_2018_instruction: |-
        Challenge: Use the code in
        the work area to get at least **6** pieces of treasure!
      courseD_collector_debugging7_instruction: |-
        Challenge: All of the commands that
        you need are already here...now use your debugging skills to figure out how
        to solve this puzzle.
      courseD_collector_debugging_challenge2_instruction: |-
        Are you an expert at nested
        loops? Use what you have learned so far to collect all the treasure!
      courseD_collector_debugging_challenge2_2018_instruction: |-
        Are you an expert
        at nested loops? Use what you have learned so far to collect all the treasure!
      courseD_collector_nested_loops_challenge2_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      courseD_collector_nested_loops_challenge2_2018_instruction: |-
        Help the collector
        reach at least two piles of treasure using only the blocks in your toolbox.
        It is possible to collect all 4.
      courseD_collector_nested_loops_challenge2a_instruction: |-
        Help Laurel collect
        at least two piles of treasure.
      courseD_collector_ramp10_instruction: Help Laurel collect all of the treasure.
      courseD_collector_ramp8_instruction: Help Laurel collect all of the treasure.
      courseD_collector_ramp9_instruction: Help Laurel collect all of the treasure.
      courseD_collector_until_challenge1_instruction: |-
        Are you an expert of nested
        loops? Use what you have learned so far to collect all of the treasure!
      courseD_debugging_1_instruction: Fix the error(s) to collect all of the nectar.
      courseD_debugging_2_instruction: Fix the error(s) to collect all of the nectar.
      courseD_debugging_3_instruction: |-
        Corrija o(s) erro(s) para coletar todo o néctar
        e produzir todo o mel.
      courseD_debugging_4_instruction: Fix the error(s) to make all of the honey.
      courseD_debugging_5_instruction: |-
        Challenge: All of the commands that you need
        are already here...now use your debugging skills to figure out how to solve
        this puzzle.
      courseD_debugging_6_instruction: |-
        Challenge:  Fix the errors to collect all
        of the nectar and make all of the honey.
      courseD_farmer_condLoops1_instruction: |-
        Use conditionals to make sure that
        you pick corn only when it's there.
      courseD_farmer_condLoops1_2018_instruction: |-
        Use conditionals to make sure
        that you pick corn only when it's there.
      courseD_farmer_condLoops2_instruction: |-
        Help the harvester collect both corn
        and lettuce from the field.
      courseD_farmer_condLoops2_2018_instruction: |-
        Help the harvester collect both
        corn and lettuce from the field.
      courseD_farmer_condLoops3_instruction: |-
        *"Corn, lettuce, AND pumpkins! Help
        me harvest them all."*
      courseD_farmer_condLoops3_2018_instruction: |-
        *"Corn, lettuce, AND pumpkins!
        Help me harvest them all."*
      courseD_farmer_condLoops4_instruction: |-
        Help the harvester pick all of the
        lettuce in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops4_2018_instruction: |-
        Help the harvester pick all of
        the lettuce in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops4a_instruction: |-
        Help the farmer pick all of the lettuce
        in each cluster before moving on to the next bunch.
      courseD_farmer_condLoops5_instruction: |-
        Collect all of the corn and lettuce,
        then grab the pumpkin at the end.
      courseD_farmer_condLoops5_2018_instruction: |-
        Collect all of the corn and lettuce,
        then grab the pumpkin at the end.
      courseD_farmer_condLoops6_instruction: |-
        Can you figure out how to pick the
        pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops6_2018_instruction: |-
        Can you figure out how to pick
        the pumpkin?  Make sure to collect all of the corn along the way!
      courseD_farmer_condLoops7_instruction: |-
        Challenge: Collect all of the corn
        and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops7_2018_instruction: |-
        Challenge: Collect all of the
        corn and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops8_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops8_2018_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_2018_instruction: |-
        Collect all of the corn and lettuce,
        then pick the pumpkin.
      courseD_farmer_condLoops9_predict1_instruction: |-
        Collect all of the corn and
        lettuce, then pick the pumpkin.
      courseD_farmer_condLoops9_predict1_2018_instruction: |-
        Collect all of the corn
        and lettuce, then pick the pumpkin.
      courseD_farmer_condLoops_challenge1_instruction: |-
        Collect everything to complete
        the level. Each hidden crop has only one corn or lettuce.
      courseD_farmer_condLoops_challenge1_2018_instruction: |-
        Collect everything to
        complete the level. Each hidden crop has only one corn or lettuce.
      courseD_farmer_condLoops_challenge2_instruction: |-
        Collect everything to complete
        the level.
      courseD_farmer_condLoops_challenge2_2018_instruction: |-
        Collect everything to
        complete the level.
      courseD_farmer_condLoops_challenge2_clone_instruction: |-
        Collect everything
        to complete the level.
      courseD_farmer_conditionals1_instruction: |-
        Move to the pile of dirt and use
        the `remove` block to remove it.
      courseD_farmer_conditionals10_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_conditionals2_instruction: |-
        Move to the hole and fill it with
        six shovelfuls of dirt, using the `fill` block.
      courseD_farmer_conditionals3_instruction: |-
        Use as few blocks as possible to
        solve this puzzle.
      courseD_farmer_conditionals4_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_conditionals5_instruction: 'Help me remove all of this dirt.

'
      courseD_farmer_conditionals6_instruction: |-
        Use the `while` loop to easily fill
        all of the holes.
      courseD_farmer_conditionals7_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseD_farmer_conditionals8_instruction: "Challenge: Fill all of these holes\nusing
        as few blocks as possible. "
      courseD_farmer_conditionals9_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_until_challenge2_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      courseD_farmer_until_challenge2_2018_instruction: |-
        Use If/Else blocks to follow
        the curvy path. At each corner, use the `remove 1` command in a loop to clear
        the piles.
      courseD_farmer_while1_instruction: |-
        Move to the pile of dirt and use the `remove`
        block to remove it.
      courseD_farmer_while10_instruction: "Flatten all of these piles using as few\nblocks
        as possible. "
      courseD_farmer_while10_2018_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_while10_predict2_instruction: "Flatten all of these piles using\nas
        few blocks as possible. "
      courseD_farmer_while10_predict2_2018_instruction: "Flatten all of these piles\nusing
        as few blocks as possible. "
      courseD_farmer_while1_2018_instruction: |-
        Move to the pile of dirt and use the
        `remove` block to remove it.
      courseD_farmer_while2_instruction: |-
        Move to the hole and fill it with six shovelfuls
        of dirt, using the `fill` block.
      courseD_farmer_while2_2018_instruction: |-
        Move to the hole and fill it with
        six shovelfuls of dirt, using the `fill` block.
      courseD_farmer_while3_instruction: |-
        Use as few blocks as possible to solve
        this puzzle.
      courseD_farmer_while3_2018_instruction: |-
        Use as few blocks as possible to solve
        this puzzle.
      courseD_farmer_while4_instruction: |-
        Help the farmer remove this entire pile
        using a `while` loop.
      courseD_farmer_while4_2018_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_while4_predict1_instruction: |-
        Help the farmer remove this entire
        pile using a `while` loop.
      courseD_farmer_while4_predict1_2018_instruction: |-
        Help the farmer remove this
        entire pile using a `while` loop.
      courseD_farmer_while5_instruction: 'Help me remove all of this dirt. '
      courseD_farmer_while5_2018_instruction: 'Help me remove all of this dirt. '
      courseD_farmer_while6_instruction: |-
        Use the `while` loop to easily fill all
        of the holes.
      courseD_farmer_while6_2018_instruction: |-
        Use the `while` loop to easily fill
        all of the holes.
      courseD_farmer_while7_instruction: |-
        Fill in the hole at the end of each of
        these paths.
      courseD_farmer_while7_2018_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseD_farmer_while8_instruction: "Challenge: Fill all of these holes using\nas
        few blocks as possible. "
      courseD_farmer_while8_2018_instruction: "Challenge: Fill all of these holes\nusing
        as few blocks as possible. "
      courseD_farmer_while9_instruction: "Flatten all of these piles using as few\nblocks
        as possible. "
      courseD_farmer_while9_2018_instruction: "Flatten all of these piles using as\nfew
        blocks as possible. "
      courseD_farmer_while_challenge1_instruction: |-
        Fill all of the holes and remove
        all of the piles.
      courseD_farmer_while_challenge1_2018_instruction: |-
        Fill all of the holes and
        remove all of the piles.
      courseD_farmer_while_challenge2_instruction: |-
        Fill all of the holes and remove
        all of the piles.
      courseD_farmer_while_challenge2_2018_instruction: |-
        Fill all of the holes and
        remove all of the piles.
      courseD_harvester_nested_loops_challenge1-broken_instruction: |-
        "I need some
        help on the farm! Help me harvest this corn using only the blocks in your
        toolbox."
      courseD_harvester_nested_loops_challenge1_instruction: |-
        "I need some help
        on the farm! Help me harvest this corn using only the blocks in your toolbox."
      courseD_harvester_nested_loops_challenge1_2018_instruction: |-
        "I need some
        help on the farm! Help me harvest this corn using only the blocks in your
        toolbox."
      courseD_iceage_loops1_instruction: |-
        Help Scrat across the ice to get to the
        acorn!
      courseD_iceage_loops10_instruction: |-
        Help Scrat get all the way over to the
        acorn!
      courseD_iceage_loops11_instruction: Help Scrat get to the acorn!
      courseD_iceage_loops12_instruction: Get to the acorn any way you can!
      courseD_iceage_loops2_instruction: Use a `turn left` block to get to the acorn!
      courseD_iceage_loops3_instruction: |-
        Can you get to the acorn with just one
        `move forward` block?
      courseD_iceage_loops4_instruction: |-
        Add one more block to get Scrat all the
        way to the acorn!
      courseD_iceage_loops6_instruction: Can you add a loop to get to the acorn?
      courseD_iceage_loops7_instruction: 'Scrat really wants that acorn! '
      courseD_iceage_loops8_instruction: 'Can you fix this code? '
      courseD_iceage_loops9_instruction: |-
        The acorn is so far away! Can you use loops
        to help Scrat get there?
      courseD_maze_loops_challenge1_instruction: |-
        Let's hunt for treasure - using
        loops! Help the collector reach at least two piles of treasure using only
        the blocks in your toolbox.
      courseD_maze_nestedLoops3_instruction: |-
        Get the zombie to the sunflower using
        the fewest number of blocks possible.
      courseD_maze_nestedLoops3_2018_instruction: |-
        Get the zombie to the sunflower
        using the fewest number of blocks possible.
      courseD_maze_nestedLoops4_instruction: "Get the zombie to the sunflower using\nthe
        fewest blocks possible!  "
      courseD_maze_nestedLoops4_2018_instruction: "Get the zombie to the sunflower\nusing
        the fewest blocks possible!  "
      courseD_maze_nestedLoops5_instruction: |-
        Get the zombie to the sunflower using
        the fewest number of blocks possible!
      courseD_maze_nestedLoops5_2018_instruction: |-
        Get the zombie to the sunflower
        using the fewest number of blocks possible!
      courseD_maze_nestedLoops6_instruction: |-
        Get the zombie to the sunflower using
        only the blocks available.
      courseD_maze_nestedLoops6_2018_instruction: |-
        Get the zombie to the sunflower
        using only the blocks available.
      courseD_maze_ramp1_instruction: |-
        For this puzzle, snap all of the blocks together
        and click "Run" to watch it go!
      courseD_maze_ramp1_2018_instruction: |-
        For this puzzle, snap all of the blocks
        together and click "Run" to watch it go!
      courseD_maze_ramp2_instruction: |-
        Drag an extra `move forward` block out of
        the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_maze_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_maze_ramp3_instruction: |-
        There is one extra block that is going to
        cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseD_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseD_maze_ramp4_instruction: Avoid TNT or feathers will fly!
      courseD_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseD_maze_ramp5_instruction: Avoid the TNT.
      courseD_maze_ramp5_2018_instruction: Avoid the TNT.
      courseD_maze_ramp5a_instruction: |-
        Pay attention to the sequence and see if
        you can figure out how to get to that pig!
      courseD_maze_ramp5a_2018_instruction: |-
        Pay attention to the sequence and see
        if you can figure out how to get to that pig!
      courseD_maze_ramp5b_instruction: |-
        Navigate this maze to help the bird find
        the pig!
      courseD_maze_ramp5b_2018_instruction: |-
        Navigate this maze to help the bird
        find the pig!
      courseD_maze_ramp5c_instruction: Help the bird get to the pig.
      courseD_maze_ramp5c_2018_instruction: Help the bird get to the pig.
      courseD_maze_ramp5d_instruction: Get the bird to the pig.
      courseD_maze_ramp5d_2018_instruction: Get the bird to the pig.
      courseD_maze_ramp6_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseD_maze_ramp6a_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseD_maze_ramp7_instruction: "**Challenge:**  Get the bird to the pig!"
      courseD_maze_until1_instruction: Get the angry bird to the pig.
      courseD_maze_until10_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_predict2_instruction: Help the zombie get to the sunflower.
      courseD_maze_until10_predict2_2018_instruction: |-
        Help the zombie get to the
        sunflower.
      courseD_maze_until1_2018_instruction: Get the angry bird to the pig.
      courseD_maze_until2_instruction: |-
        Now, use the `repeat until` loop to do the
        same thing without specifying how many times to move forward and turn.
      courseD_maze_until3_instruction: Get the bird to the pig.
      courseD_maze_until3_2018_instruction: Get the bird to the pig.
      courseD_maze_until4_instruction: |-
        Can you get the zombie to the sunflower using
        only the blocks that are available?
      courseD_maze_until4_2018_instruction: |-
        Can you get the zombie to the sunflower
        using only the blocks that are available?
      courseD_maze_until5_instruction: |-
        Use the `if` block to help the zombie decide
        when to turn, then get the zombie to the sunflower.
      courseD_maze_until5_2018_instruction: |-
        Use the `if` block to help the zombie
        decide when to turn, then get the zombie to the sunflower.
      courseD_maze_until6_instruction: Help the zombie get to the sunflower.
      courseD_maze_until6_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until7_instruction: Help the zombie get to the sunflower.
      courseD_maze_until7_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until8_instruction: Help the zombie get to the sunflower.
      courseD_maze_until8_2018_instruction: Help the zombie get to the sunflower.
      courseD_maze_until9_instruction: |-
        **Challenge:** Avoid the chompers and help
        the zombie get to the sunflower.
      courseD_maze_until9_2018_instruction: |-
        **Challenge:** Avoid the chompers and
        help the zombie get to the sunflower.
      courseD_maze_until_challenge_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_maze_until_challenge1-delete-this-copy_instruction: |-
        No hints, just
        challenge. Get the zombie to the sunflower.
      courseD_maze_until_challenge1_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_maze_until_challenge1_2018_instruction: |-
        No hints, just challenge.
        Get the zombie to the sunflower.
      courseD_maze_until_challenge2_instruction: |-
        No hints, just challenge. Get the
        zombie to the sunflower.
      courseD_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      courseD_playLab_cond1_instruction: |-
        Get Pegleg to the dragon to solve this
        puzzle.
      courseD_playLab_cond1_2018_instruction: |-
        Get Pegleg to the flags to solve this
        puzzle.
      courseD_playLab_cond2_instruction: "Give Pegleg a point every time he makes\nit
        to the dragon. "
      courseD_playLab_cond2_2018_instruction: "Give Pegleg a point every time he\nmakes
        it to the dragon. "
      courseD_playLab_cond3_instruction: "Make the dragon change between random emotions\nevery
        second.  "
      courseD_playLab_cond3_2018_instruction: "Make the dragon change between random\nemotions
        every second.  "
      courseD_playLab_cond3a_instruction: |-
        Make it so when Pegleg gets to the dragon,
        he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond3a_2018_instruction: |-
        Make it so when Pegleg gets to the
        dragon, he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond3b_instruction: |-
        1) Make the dragon change between random
        emotions every second.  \r
        2) Make it so when Pegleg gets to the dragon,
        he gets 2 points if the dragon is happy and 1 otherwise.
      courseD_playLab_cond4_instruction: |-
        Add some code so that the ninja (actor
        3) starts chasing Pegleg as soon as the game begins.  End the game as a loss
        if the ninja catches him.
      courseD_playLab_cond4_2018_instruction: |-
        Add some code so that the ninja (actor
        3) starts chasing Pegleg as soon as the game begins.  End the game as a loss
        if the ninja catches him.
      courseD_playLab_cond5_instruction: |-
        Add a `repeat forever` loop that continuously
        checks if the score is greater than 5, then ends the game as a win when it
        is.
      courseD_playLab_cond5_2018_instruction: |-
        Add a `repeat forever` loop that continuously
        checks if the score is greater than 5, then ends the game as a win when it
        is.
      courseD_playLab_cond6_instruction: "1)  Slow the ninja (actor 3) down before\nyou
        set him to chase the pirate.  \\r\n2)  If the pirate is greater than 225\npixels
        down, set the ninja to **flee** the pirate.  Otherwise, set the ninja\nto
        **chase** the pirate.  "
      courseD_playLab_cond6_2018_instruction: "1)  Slow the ninja (actor 3) down\nbefore
        you set him to chase the pirate.  \\r\n2)  If the pirate is greater\nthan
        225 pixels down, set the ninja to **flee** the pirate.  Otherwise, set\nthe
        ninja to **chase** the pirate.  "
      courseD_playLab_cond6a_instruction: |-
        If the pirate (actor 1) is in the safe
        zone, wait one second, then deduct a point as long as he stays beneath the
        octopus line.
      courseD_playLab_cond6a_2018_instruction: |-
        If the pirate (actor 1) is in the
        safe zone, wait one second, then deduct a point as long as he stays beneath
        the octopus line.
      courseD_playLab_cond6cloneForTest_instruction: Testando
      courseD_playLab_condFP_instruction: |-
        Now, build your own game to show off to
        your friends!
      courseD_playLab_condFP_2018_instruction: |-
        Now, build your own game to show
        off to your friends!
      courseD_playLab_embedded_instruction: |-
        Move Pegleg the Pirate with the arrow
        keys. Get to the dragon to score points, but avoid the ninja! Standing below
        the line of octopuses will make the ninja stop chasing you, but beware! The
        longer you stay there, the more points you lose. \r
        \r
        Get 5 points to win!
      courseD_scrat_ramp1_instruction: |-
        For this puzzle, snap all of the blocks together
        and click "Run" to watch it go!
      courseD_scrat_ramp1_2018_instruction: |-
        For this puzzle, snap all of the blocks
        together and click "Run" to watch it go!
      courseD_scrat_ramp2_instruction: |-
        Drag an extra `move forward` block out of
        the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_scrat_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseD_scrat_ramp3_instruction: |-
        There is one extra block that is going to
        cause Scrat to crash. Throw it away by dragging it back to the toolbox.
      courseD_scrat_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause Scrat to crash. Throw it away by dragging it back to the toolbox.
      courseD_scrat_ramp4_instruction: Avoid the cracked ice to keep Scrat safe!
      courseD_scrat_ramp4_2018_instruction: |-
        Avoid the cracked ice to keep Scrat
        safe!
      courseD_scrat_ramp5_instruction: Avoid the cracked ice.
      courseD_scrat_ramp5_2018_instruction: Avoid the cracked ice.
      courseD_scrat_ramp6_instruction: Help Scrat get to the acorn using a loop!
      courseD_scrat_ramp6_2018_instruction: |-
        Help Scrat get to the acorn using a
        loop!
      courseD_scrat_ramp7_instruction: Help Scrat get to the acorn!
      courseD_scrat_ramp7_2018_instruction: Help Scrat get to the acorn!
      courseD_scrat_ramp8_instruction: |-
        Use what you've learned to get Scrat to
        the acorn!
      courseD_scrat_ramp8_2018_instruction: |-
        Use what you've learned to get Scrat
        to the acorn!
      courseE_artist_concept1_instruction: 'Recreate this image. '
      courseE_artist_concept1_2018_instruction: 'Recreate this image. '
      courseE_artist_concept4_instruction: |-
        Recreate this drawing using 13 blocks
        or fewer.
      courseE_artist_concept4_2018_instruction: Recreate this drawing.
      courseE_artist_concept_challenge1_instruction: "Help the artist draw this unique\nshape. "
      courseE_artist_concept_challenge1_2018_instruction: "Help the artist draw this\nunique
        shape. "
      courseE_artist_concept_challenge2_instruction: |-
        Create five pinwheel designs
        using the code below.
      courseE_artist_concept_challenge2_2018_instruction: |-
        Create five pinwheel designs
        using the code below.
      courseE_artist_embed_functions8_instruction: |-
        Look at this level carefully.
        What kind of functions do you see a program needing in order to create a design
        like this. You'll soon make this on your own, so come back here if you need
        help.
      courseE_artist_functions1_instruction: |-
        Help the zombie draw glasses using
        squares with sides of 100 pixels.  \r
        The bridge between the glasses is 75
        pixels long.
      courseE_artist_functions10_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseE_artist_functions10_2018_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      courseE_artist_functions1_2018_instruction: |-
        Help the zombie draw glasses using
        squares with sides of 100 pixels.  \r
        The bridge between the glasses is 75
        pixels long.
      courseE_artist_functions2_instruction: "This time, use the `draw a square`\nfunction
        to create the glasses. "
      courseE_artist_functions2_2018_instruction: "This time, use the `draw a square`\nfunction
        to create the glasses. "
      courseE_artist_functions3_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseE_artist_functions3_2018_instruction: |-
        You can make this drawing by adding
        a repeat block.
      courseE_artist_functions4_instruction: |-
        Now that you can draw a star, try drawing
        four stars!
      courseE_artist_functions4_2018_instruction: |-
        Now that you can draw a star,
        try drawing four stars!
      courseE_artist_functions5_instruction: |-
        Draw only those three stars to finish
        this puzzle.
      courseE_artist_functions5_2018_instruction: |-
        Draw only those three stars to
        finish this puzzle.
      courseE_artist_functions6_instruction: |-
        Make this window by drawing a square,
        then turning 90 degrees before drawing another, and so on.
      courseE_artist_functions6_2018_instruction: |-
        Make this window by drawing a
        square, then turning 90 degrees before drawing another, and so on.
      courseE_artist_functions7_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseE_artist_functions7_2018_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!
      courseE_artist_functions8_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions8_2018_instruction: |-
        Challenge: Create as many functions
        as you think you need to make this drawing of 50 pixel squares.
      courseE_artist_functions9_instruction: |-
        Create this image using only the blocks
        provided.
      courseE_artist_functions9_2018_instruction: |-
        Create this image using only the
        blocks provided.
      courseE_artist_functions_challenge_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge1_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge1_2018_instruction: |-
        Once you define a function,
        you can call it over and over again - whenever and wherever you want! Try
        this code to see how it works, then change it to make your own impressive
        design!
      courseE_artist_functions_challenge2_instruction: |-
        Try this code to see how
        it works, then make the program your own!
      courseE_artist_functions_challenge2_2018_instruction: |-
        Try this code to see
        how it works, then make the program your own!
      courseE_artist_ramp10_instruction: |-
        Now, drag the code for the last triangle
        into a new loop to spin it around and make a snowflake!
      courseE_artist_ramp11_instruction: Now make a square using Artist!
      courseE_artist_ramp12_instruction: |-
        Use what you've learned to draw this triangle
        inside of a square.
      courseE_artist_ramp8_instruction: Now make a square using Artist!
      courseE_artist_ramp8_2_instruction: Now make a square using Artist!
      courseE_artist_ramp8_2018_instruction: Now make a square using Artist!
      courseE_artist_ramp8_2_2018_instruction: Now make a square using Artist!
      courseE_artist_ramp9_instruction: Use what you've learned to draw this triangle.
      courseE_artist_ramp9_2_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseE_artist_ramp9_2018_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseE_artist_ramp9_2_2018_instruction: |-
        Use what you've learned to draw
        this triangle.
      courseE_bee_concept1_instruction: "Colete todo o néctar de cada flor.\nUse um
        laço aninhado. "
      courseE_bee_concept1_2018_instruction: |-
        Collect all of the nectar from each
        flower.
      courseE_bee_concept2_instruction: |-
        Help the bee make all of the honey. You
        can only make honey at a honeycomb, but you can check any space to see if
        there is a honeycomb.
      courseE_bee_concept2_2018_instruction: 'Help the bee make all of the honey.

'
      courseE_bee_concept3_instruction: |-
        Collect all of the nectar using  as few
        blocks as possible.
      courseE_bee_concept3_2018_instruction: |-
        Collect all of the nectar using  as
        few blocks as possible.
      courseE_bee_concept4_instruction: |-
        Uh oh! The bee is not sure if he should
        collect nectar or make honey. Can you help him out?
      courseE_bee_concept4_2018_instruction: |-
        Uh oh! The bee is not sure if he should
        collect nectar or make honey. Can you help him out?
      courseE_bee_concept5_instruction: |-
        Help the bee collect the nectar from the
        flowers?
      courseE_bee_concept5_2018_instruction: |-
        Help the bee collect the nectar from
        the flowers?
      courseE_bee_functions1_instruction: Colete todo o néctar de cada flor.
      courseE_bee_functions10_instruction: |-
        Solve this puzzle by creating a function
        that helps the bee go get all of the honey before returning back to the main
        path.
      courseE_bee_functions10_2018_instruction: |-
        Solve this puzzle by creating a
        function that helps the bee go get all of the honey before returning back
        to the main path.
      courseE_bee_functions1_2018_instruction: |-
        Collect all the nectar from each
        flower.
      courseE_bee_functions2_instruction: |-
        Use the `get 2 nectar` function to collect
        the nectar from each flower.
      courseE_bee_functions2_2018_instruction: |-
        Use the `get 2 nectar` function to
        collect the nectar from each flower.
      courseE_bee_functions3_instruction: |-
        As funções são blocos de código que realizam
        uma tarefa. \r
        \r
        Use a função "obtenha 5" para obter 5 néctares por vez.
      courseE_bee_functions3_2018_instruction: |-
        Build the `get 5` function to use
        in this puzzle.
      courseE_bee_functions4_instruction: |-
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. \r
        \r
        Use
        a função para coletar todo o néctar.
      courseE_bee_functions4_2018_instruction: |-
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. \r
        \r
        Use
        a função para coletar todo o néctar.
      courseE_bee_functions5_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      courseE_bee_functions5_2018_instruction: |-
        Now write the function to collect
        nectar from the flowers.
      courseE_bee_functions6_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions6_2018_instruction: |-
        Create a function and call it to
        collect nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions6test_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      courseE_bee_functions7_instruction: |-
        Create your own function that goes down
        a path, gets nectar, makes honey, and then returns the bee to the top of the
        path. Collect all the nectar and make all the honey!
      courseE_bee_functions7_2018_instruction: |-
        Create your own function that goes
        down a path, gets nectar, makes honey, and then returns the bee to the top
        of the path. Collect all the nectar and make all the honey!
      courseE_bee_functions8_instruction: |-
        Create a function that collects all of
        the nectar from each flower.
      courseE_bee_functions8_2018_instruction: |-
        Create a function that collects all
        of the nectar from each flower.
      courseE_bee_functions9_instruction: |-
        Create a function to collect all of the
        nectar from each flower.
      courseE_bee_functions9_2018_instruction: |-
        Create a function to collect all
        of the nectar from each flower.
      courseE_bee_functions9b_instruction: Now try it in Bee!
      courseE_bee_functions_challenge1_instruction: |-
        You are on your own for this
        challenge. This could "bee" harder than it looks!
      courseE_bee_functions_challenge1_2018_instruction: |-
        You are on your own for
        this challenge. This could "bee" harder than it looks!
      courseE_bee_functions_challenge2_instruction: |-
        You are on your own for this
        challenge. Sweet!
      courseE_bee_functions_challenge2_2018_instruction: |-
        You are on your own for
        this challenge. Sweet!
      courseE_bee_ramp14_instruction: |-
        Help the bee follow the path to gather all
        of the honey and all of the nectar.
      courseE_bee_ramp14_2018_instruction: |-
        Help the bee follow the path to gather
        all of the honey and all of the nectar.
      courseE_bee_ramp17_instruction: Use what you have learned to solve this puzzle.
      courseE_collector_ramp10_instruction: Help Laurel collect all of the treasure.
      courseE_collector_ramp8_instruction: Help Laurel collect all of the treasure.
      courseE_collector_ramp9_instruction: Help Laurel collect all of the treasure.
      courseE_farmer_concept1_instruction: |-
        Can you write a program that fills these
        holes until the ground is even?
      courseE_farmer_concept1_2018_instruction: |-
        Can you write a program that fills
        these holes until the ground is even?
      courseE_farmer_concept2_instruction: Collect all of the pumpkins.
      courseE_farmer_concept2_2018_instruction: Collect all of the pumpkins.
      courseE_farmer_concept3_instruction: |-
        Fill in the hole at the end of each of
        these paths.
      courseE_farmer_concept3_2018_instruction: |-
        Fill in the hole at the end of each
        of these paths.
      courseE_farmer_concept4_instruction: |-
        Agora, vamos nos aprofundar mais um nível!
        Aninhamos todo o bloco de código dentro de outro laço, mas você precisa posicionar o
        artista no lugar para desenhar a próxima reta. Qual desses blocos de código você
        pode colocar no final do laço mais externo para desenhar toda a grade?
      courseE_farmer_functions1_instruction: |-
        Help the harvester get to the pumpkin
        and pick it.
      courseE_farmer_functions10_instruction: "No one knows what these sprouts will\nbecome.
        \ Use `if` statements to write the code to check and harvest each one.   "
      courseE_farmer_functions10b_instruction: |-
        Use your new function twice to solve
        this puzzle.
      courseE_farmer_functions10b_2018_instruction: |-
        Use your new function twice
        to solve this puzzle.
      courseE_farmer_functions1_2018_instruction: |-
        Help the harvester get to the
        pumpkin and pick it.
      courseE_farmer_functions1a_instruction: |-
        Now help the harvester pick the corn,
        lettuce, **and** pumpkin.
      courseE_farmer_functions1a_2018_instruction: |-
        Now help the harvester pick the
        corn, lettuce, **and** pumpkin.
      courseE_farmer_functions2_instruction: |-
        Now, there will be a different number
        of pumpkins each time you run the program.   \r
        \r
        Use the `while` block
        to pick only as many pumpkins as you need.
      courseE_farmer_functions2a_instruction: |-
        We're going to check lots of squares
        for crops in the next few puzzles.  Let's move everything into a function
        to make it easier.
      courseE_farmer_functions2aALT_instruction: |-
        We're going to check lots of squares
        for crops in the next few puzzles.  Let's move everything into a function
        to make it easier.
      courseE_farmer_functions2b_instruction: |-
        Help the harvester pick the corn and
        pumpkins.
      courseE_farmer_functions2b_2018_instruction: |-
        Help the harvester pick the corn
        and pumpkins.
      courseE_farmer_functions2ba_instruction: |-
        Help the farmer pick the corn and
        pumpkins using the `corn and pumpkin` function.
      courseE_farmer_functions2ba_2018_instruction: |-
        Help the farmer pick the corn
        and pumpkins using the `corn and pumpkin` function.
      courseE_farmer_functions3_instruction: |-
        What happens when the paths to the
        pumpkins are all different lengths?   \r
        \r
        Get them all with as few blocks
        as possible.
      courseE_farmer_functions3b_instruction: |-
        Now help the farmer pick the corn,
        lettuce, **and** pumpkin.
      courseE_farmer_functions3c_instruction: |-
        Now, fill-in the function yourself
        by pulling the blocks from the code and dropping them into the **function
        definition**.
      courseE_farmer_functions3c_2018_instruction: |-
        Now, fill-in the function yourself
        by pulling the blocks from the code and dropping them into the **function
        definition**.
      courseE_farmer_functions4_instruction: |-
        Great!  Now you have code that will
        work to get pumpkins from any size path.\r
        \r
        Let's drag that code into
        a function so we can use it in lots of ways...but first use it to solve this
        puzzle again.
      courseE_farmer_functions4b_instruction: |-
        Use your new function to solve this
        puzzle.
      courseE_farmer_functions4b_2018_instruction: |-
        Use your new function to solve
        this puzzle.
      courseE_farmer_functions5_instruction: |-
        How can you change your program to
        get this function to work for each of these paths?
      courseE_farmer_functions5a_instruction: |-
        How can you change your program to
        get this function to work for each of these paths?
      courseE_farmer_functions5b_instruction: |-
        The crops are now growing in clusters.  Add
        some new `while` loops to your function to make sure you get all of the produce.
      courseE_farmer_functions5c_instruction: Your function will come in handy here.
      courseE_farmer_functions5c_2018_instruction: |-
        Your function will come in handy
        here.
      courseE_farmer_functions6_instruction: |-
        *"Lettuce try something new!"*\r
        \r
        Here's
        some code to collect all of the lettuce.  Move it into a function so we can
        use it later.
      courseE_farmer_functions6b_instruction: Pick all of the produce.
      courseE_farmer_functions6c_instruction: |-
        What do you need to add this program
        to check whether a sprout is corn or lettuce?
      courseE_farmer_functions6c_2018_instruction: |-
        What do you need to add this
        program to check whether a sprout is corn or lettuce?
      courseE_farmer_functions7_instruction: Use your functions to solve this puzzle.
      courseE_farmer_functions7b_instruction: |-
        Help the harvester find her way down
        this confusing path and to the pumpkin by turning left at the corn and right
        at the lettuce.
      courseE_farmer_functions7b_2018_instruction: |-
        Help the harvester find her way
        down this confusing path and to the pumpkin by turning left at the corn and
        right at the lettuce.
      courseE_farmer_functions8_instruction: |-
        **Challenge:**  Solve this puzzle with
        as few blocks as possible.
      courseE_farmer_functions8b_instruction: "**Challenge:** Collect all of the\npumpkins
        using the method from the last puzzle. "
      courseE_farmer_functions8b_2018_instruction: "**Challenge:** Collect all of\nthe
        pumpkins using the method from the last puzzle. "
      courseE_farmer_functions9_instruction: Use conditionals to simplify your program.
      courseE_farmer_functions9b_instruction: |-
        Can you figure out the pattern that
        you need to solve this puzzle?
      courseE_farmer_functions9b_2018_instruction: |-
        Can you figure out the pattern
        that you need to solve this puzzle?
      courseE_farmer_functions9b_clone_instruction: |-
        Can you figure out the pattern
        that you need to solve this puzzle?
      courseE_farmer_predict1_instruction: |-
        Pick all of the lettuce (only while there
        is some to pick.)
      courseE_farmer_predict1_2018_instruction: |-
        Pick all of the lettuce (only while
        there is some to pick.)
      courseE_farmer_ramp11_instruction: |-
        This puzzle also uses nested loops.  Can
        you figure out how?
      courseE_farmer_ramp11a_instruction: "Pick lettuce only while there is still\nlettuce
        to pick. "
      courseE_farmer_ramp11a_2018_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp11b_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp11b_2018_instruction: While there is a pile, remove dirt.
      courseE_farmer_ramp12_instruction: |-
        Now use nested loops (`repeat` and `while`)
        to solve this puzzle.
      courseE_farmer_ramp12_2018_instruction: |-
        Now use nested loops to solve this
        puzzle.
      courseE_farmer_ramp12_forswap_instruction: |-
        Now use nested loops to solve this
        puzzle.
      courseE_farmer_ramp12_forswap_2018_instruction: |-
        Now use nested loops to solve
        this puzzle.
      courseE_farmer_ramp12a_instruction: |-
        Help the farmer correctly travel the path
        to gather all of the lettuce.
      courseE_farmer_ramp12a_2018_instruction: |-
        Help the farmer correctly travel
        the path to gather all of the lettuce.
      courseE_farmer_ramp12b_instruction: While there is lettuce, pick lettuce!
      courseE_farmer_ramp12b_2018_instruction: While there is lettuce, pick lettuce!
      courseE_farmer_ramp12c_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12c_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12d_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12d_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12e_instruction: |-
        Move forward until you reach the lettuce,
        then pick it all using a `while` loop.
      courseE_farmer_ramp12e_2018_instruction: |-
        Move forward until you reach the
        lettuce, then pick it all using a `while` loop.
      courseE_farmer_ramp12f_instruction: |-
        Move forward until you reach the lettuce,
        then turn left **if** there is a path to the left.  Otherwise, turn right.
      courseE_farmer_ramp12f_2018_instruction: |-
        Move forward until you reach the
        lettuce, then turn left **if** there is a path to the left.  Otherwise, turn
        right.
      courseE_farmer_ramp12g_instruction: |-
        Move forward until you reach the lettuce,
        then turn left **if** there is a path to the left.  Otherwise, turn right.
      courseE_farmer_ramp12g_2018_instruction: |-
        Move forward until you reach the
        lettuce, then turn left **if** there is a path to the left.  Otherwise, turn
        right.
      courseE_farmer_ramp13_instruction: |-
        Pick corn if there is corn, and pick lettuce
        while there is lettuce.
      courseE_farmer_ramp13_2018_instruction: |-
        Pick corn if there is corn, and pick
        lettuce while there is lettuce.
      courseE_farmer_ramp15_instruction: |-
        Solve this puzzle using only the blocks
        available.
      courseE_farmer_ramp15_2018_instruction: |-
        Solve this puzzle using only the blocks
        available.
      courseE_farmer_ramp16_instruction: |-
        **Challenge:** Solve this puzzle with the
        fewest number of blocks.
      courseE_maze_predict1_instruction: |-
        This code includes a new block. What do
        you think would happen if you press the "Run" block?
      courseE_maze_predict1_2018_instruction: |-
        This code includes a new block. What
        do you think would happen if you press the "Run" block?
      courseE_maze_ramp1_instruction: |-
        For this puzzle, drag all of the blocks together
        and click "Run" to watch it go!
      courseE_maze_ramp13_instruction: Time for one last puzzle to pull it all together!
      courseE_maze_ramp1_2018_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      courseE_maze_ramp2_instruction: |-
        Drag an extra `move forward` block out of
        the toolbox, then attach all blocks to `when run` to finish your code.
      courseE_maze_ramp2_2018_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox, then attach all blocks to `when run` to finish your code.
      courseE_maze_ramp3_instruction: |-
        There is one extra block that is going to
        cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseE_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      courseE_maze_ramp4_instruction: Avoid TNT or feathers will fly!
      courseE_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseE_maze_ramp5_instruction: Avoid the TNT.
      courseE_maze_ramp5_2018_instruction: Avoid the TNT.
      courseE_maze_ramp6_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseE_maze_ramp6_2018_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseE_maze_ramp7_instruction: |-
        Use what you've learned to get the bird to
        the pig!
      courseE_maze_ramp7_2018_instruction: |-
        Use what you've learned to get the bird
        to the pig!
      courseE_maze_ramp_predict1_instruction: |-
        This code includes a new block. What
        do you think would happen if you press the "Run" block?
      courseE_multi_maze_ramp5_instruction: Avoid the TNT.
      courseE_playLab_challenge1_instruction: |-
        Something should happen when you get
        enough points or when you run out of points. Add some code to the `win game`
        and `lose game` functions to make the game work the way it should. \r
        Click
        the hints for ideas!
      courseE_playLab_challenge1_2018_instruction: |-
        Something should happen when
        you get enough points or when you run out of points. Add some code to the
        `win game` and `lose game` functions to make the game work the way it should.
        \r
        Click the hints for ideas!
      courseE_playLab_embedded_instruction: |-
        This is an example game you can play
        around with. Move the dog with your arrow keys. When the dog touches one of
        the cats, he scores a point! Score 5 points to win!
      courseE_playLab_exampleProject2_instruction: |-
        Here's all of your code to choose
        a card - try adding some other fun features!
      courseE_playLab_scaffold1_instruction: |-
        Choose a background and map, and pick
        an actor to be your game's hero.
      courseE_playLab_scaffold1_2018_instruction: |-
        Choose a background and map, and
        pick an actor to be your game's hero.
      courseE_playLab_scaffold2_instruction: |-
        Use event handlers and actions to make
        your hero move.
      courseE_playLab_scaffold2_2018_instruction: |-
        Use event handlers and actions
        to make your hero move.
      courseE_playLab_scaffold3_instruction: |-
        Add two or more additional actors to
        your game and make them move.
      courseE_playLab_scaffold3_2018_instruction: |-
        Add two or more additional actors
        to your game and make them move.
      courseE_playLab_scaffold4_instruction: |-
        Find some interesting ways to change
        the score in your game. Get the score to show something other than 0 to continue.
      courseE_playLab_scaffold4_2018_instruction: |-
        Find some interesting ways to
        change the score in your game. Get the score to show something other than
        0 to continue.
      courseE_playLab_scaffold5_instruction: |-
        Now spend some time making sure the
        game works the way you want. Include a way to win or lose your game, then
        play until you meet one of those conditions.
      courseE_playLab_scaffold5_2018_instruction: |-
        Now spend some time making sure
        the game works the way you want. Include a way to win or lose your game, then
        play until you meet one of those conditions.
      courseE_playLab_scaffold6_instruction: |-
        You've finished! Now you can play
        your game or share it with your friends and classmates!
      courseE_playLab_scaffold6_2018_instruction: |-
        You've finished! Now you can
        play your game or share it with your friends and classmates!
      courseE_playlab_challenge2_instruction: |-
        Can you figure out how this "Fortune
        Teller" app works? Click `MORE` to see your challenges.
      courseE_playlab_variables_challenge2_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseE_video_createFunctions_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseE_video_createFunctions2_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseE_video_createFunctions2_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      courseE_video_createFunctions_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      courseF_IceAge_1_instruction: |-
        Help Sid say "Hello!" by dragging the `actor
        1 say` block out and connecting it to the bottom of the `when run` event.
      courseF_IceAge_10_instruction: |-
        Use the `actor __ throw` command to have Sid
        (actor 1) throw hearts at Granny (actor 2) and set Granny's mood to happy
        when she gets hit with them.
      courseF_IceAge_11_instruction: 'Time to create your own game or story! '
      courseF_IceAge_2_instruction: |-
        Help Manny and Sid greet each other by using
        the the `actor ___ say` block twice.
      courseF_IceAge_3_instruction: |-
        Scrat is looking for his acorn! Can you help
        him move the last 200 pixels?
      courseF_IceAge_4_instruction: |-
        Connect a block to the `when actor touches`
        event to play a sound when Diego finds Manny.
      courseF_IceAge_5_instruction: |-
        Help Granny get some exercise by moving left
        and right repeatedly.
      courseF_IceAge_6_instruction: "Can you help Sid call for his friends when you\nclick
        on him? "
      courseF_IceAge_7_instruction: |-
        Write the code to help Scrat get all of the
        acorns!
      courseF_IceAge_8_instruction: |
        Can you finish this program to make it so that
        you both **play a sound** and **score a point** when Sid and Granny collide?
      courseF_IceAge_9_instruction: |-
        Change the scene to an icy background and set
        Sid’s (actor 1) speed to fast.
      courseF_IceAge_template_instruction: |-
        Write the code to help Scrat get all
        of the acorns!
      courseF_artist_embed_for7_instruction: |-
        Press Run to see a program in action!
        This one uses for loops.
      courseF_artist_embed_variables9_instruction: |-
        Press Run to see this program
        in action!
      courseF_artist_for1_instruction: |-
        Experiment with the `for` loop and play with
        the `counter` variable.
      courseF_artist_for10_instruction: |-
        Free Play: Try using the `counter` variable
        with other drawing elements to make magical images like this one.
      courseF_artist_for10_2018_instruction: |-
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      courseF_artist_for1_2018_instruction: |-
        Experiment with the `for` loop and play
        with the `counter` variable.
      courseF_artist_for2_instruction: |-
        Create this stack of triangles that goes
        from 50 pixel to 100 pixel sides.
      courseF_artist_for2_2018_instruction: |-
        Create this stack of triangles that
        goes from 50 pixel to 100 pixel sides.
      courseF_artist_for3_instruction: "These triangles go from 20 pixel sides to\n200
        pixel sides, and each triangle is 20 pixels larger than the last. "
      courseF_artist_for3_2018_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. "
      courseF_artist_for4_instruction: |
        These squares start at 15 pixels long. The
        largest is 300 pixels long, and each square is 15 pixels larger than the last.
      courseF_artist_for4_2018_instruction: "These squares start at 15 pixels long.\nThe
        largest is 300 pixels long, and each square is 15 pixels larger than the\nlast. "
      courseF_artist_for5_instruction: |-
        Just one little change to the code from the
        last image can create this drawing. Can you figure out what that change is?
      courseF_artist_for5_2018_instruction: |-
        Just one little change to the code from
        the last image can create this drawing. Can you figure out what that change
        is?
      courseF_artist_for6_instruction: |-
        Recreate your code from the last level, but
        turn 89 degrees to create this twisted square spiral.
      courseF_artist_for6_2018_instruction: |-
        Recreate your code from the last level,
        but turn 89 degrees to create this twisted square spiral.
      courseF_artist_for7_instruction: |-
        Make three small changes to the code from
        the last level to get this!
      courseF_artist_for7_2018_instruction: |-
        Make three small changes to the code
        from the last level to get this!
      courseF_artist_for8_instruction: |-
        Take the angle down to 72 degrees to get
        a spiraled pentagon.
      courseF_artist_for8_2018_instruction: |-
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      courseF_artist_for9_instruction: |-
        **Inspiration:**  Use the counter inside
        the `set alpha` block to get this faded center.
      courseF_artist_for9_2018_instruction: |-
        **Inspiration:**  Use the counter inside
        the `set alpha` block to get this faded center.
      courseF_artist_for_Template_instruction: |-
        Try using some of the code from the
        last level, but turning 89 degrees to create this twisted square spiral.
      courseF_artist_for_Template_2018_instruction: |-
        Try using some of the code from
        the last level, but turning 89 degrees to create this twisted square spiral.
      courseF_artist_for_challenge1_instruction: |-
        Can you figure out how to re-create
        this drawing?
      courseF_artist_for_challenge1_2018_instruction: |-
        Can you figure out how to
        re-create this drawing?
      courseF_artist_for_challenge2_instruction: |-
        Can you figure out how to re-create
        this drawing with a single loop?
      courseF_artist_for_challenge2_2018_instruction: |-
        Can you figure out how to
        re-create this drawing with a single loop?
      courseF_artist_fwp1_instruction: |-
        Edit the function 'draw a square' to find
        bugs.
      courseF_artist_fwp1_2018_instruction: |-
        Edit the function 'draw a square'
        to find bugs.
      courseF_artist_fwp2_instruction: |-
        Edit the function to accept a parameter called
        `length`.
      courseF_artist_fwp2_2018_instruction: |-
        Edit the function to accept a parameter
        called `length`.
      courseF_artist_fwp2_predict1_instruction: |-
        Edit the function to accept a parameter
        called `length`.
      courseF_artist_fwp2_predict1_2018_instruction: |-
        Edit the function to accept
        a parameter called `length`.
      courseF_artist_fwp3_instruction: |-
        Create a function called 'draw a square'
        and use it to outline these four boxes using parameters.
      courseF_artist_fwp3_2018_instruction: |-
        Create a function called 'draw a square'
        and use it to outline these four boxes using parameters.
      courseF_artist_fwp4_instruction: |-
        Edit this function to add a parameter for
        the number of sides in your polygon.
      courseF_artist_fwp4_2018_instruction: |-
        Edit this function to add a parameter
        for the number of sides in your polygon.
      courseF_artist_fwp5_instruction: "Use the function from the last puzzle to\ndraw
        this series of shapes.  "
      courseF_artist_fwp5_2018_instruction: "Use the function from the last puzzle\nto
        draw this series of shapes.  "
      courseF_artist_fwp6_instruction: |-
        Challenge: Edit `draw a spiral edge` to use
        `length` and `sides` parameters, then recreate these shapes.
      courseF_artist_fwp6_2018_instruction: |-
        Challenge: Edit `draw a spiral edge`
        to use `length` and `sides` parameters, then recreate these shapes.
      courseF_artist_fwp7_instruction: |-
        Finish off the `draw a spiral edge` function
        to also ask for a minimum length for the center of the spiral.
      courseF_artist_fwp7_2018_instruction: |-
        Finish off the `draw a spiral edge`
        function to also ask for a minimum length for the center of the spiral.
      courseF_artist_fwp8_instruction: |-
        Can you figure out how to make this drawing
        using the function that you just created?
      courseF_artist_fwp8_2018_instruction: |-
        Can you figure out how to make this
        drawing using the function that you just created?
      courseF_artist_fwp9_instruction: |-
        Freeplay: Draw something awesome! Play with
        the pen width to see how different your drawings look!
      courseF_artist_fwp9_2018_instruction: |-
        Freeplay: Draw something awesome! Play
        with the pen width to see how different your drawings look!
      courseF_artist_fwp_challenge1_instruction: |-
        Can you figure out how this program
        works?
      courseF_artist_fwp_challenge1_2018_instruction: |-
        Can you figure out how this
        program works?
      courseF_artist_fwp_challenge2_instruction: |-
        Use what you learned in the previous
        level to draw an image like this.
      courseF_artist_fwp_challenge2_2018_instruction: |-
        Use what you learned in the
        previous level to draw an image like this.
      courseF_artist_ramp10_instruction: |-
        Now, drag the code for the last triangle
        into a new loop to spin it around and make a snowflake!
      courseF_artist_ramp10_2018_instruction: |-
        Now, drag the code for the last triangle
        into a new loop to spin it around and make a snowflake!
      courseF_artist_ramp8_instruction: Now make a square using Artist!
      courseF_artist_ramp8_2018_instruction: Now make a square using Artist!
      courseF_artist_ramp9_instruction: Use what you've learned to draw this triangle.
      courseF_artist_ramp9_2018_instruction: |-
        Use what you've learned to draw this
        triangle.
      courseF_artist_variables1_instruction: |-
        Let's draw an equilateral triangle
        that is exactly 50 pixels long on each side.
      courseF_artist_variables10_instruction: "Here's your code from the last puzzle.
        \ Try\nediting the variable in other ways.  "
      courseF_artist_variables10_2018_instruction: "Here's your code from the last\npuzzle.
        \ Try editing the variable in other ways.  "
      courseF_artist_variables2_instruction: "Now draw three of those triangles right\nnext
        to each other.   "
      courseF_artist_variables2_2018_instruction: "Now draw three of those triangles\nright
        next to each other.   "
      courseF_artist_variables3_instruction: |-
        Move the length of 50 into a variable
        so we can use it in the next few puzzles.
      courseF_artist_variables3_2018_instruction: |-
        Move the length of 50 into a variable
        so we can use it in the next few puzzles.
      courseF_artist_variables4_instruction: |-
        Now, use the `length` variable to have
        the artist jump forward and down by `length` pixels between triangles.
      courseF_artist_variables4_2018_instruction: |-
        Now, use the `length` variable
        to have the artist jump forward and down by `length` pixels between triangles.
      courseF_artist_variables5_instruction: |-
        Add another set of loops at the end
        of your code to add three more triangles. This time, move forward and up!
      courseF_artist_variables5_2018_instruction: |-
        Add another set of loops at the
        end of your code to add three more triangles. This time, move forward and
        up!
      courseF_artist_variables6_instruction: "Now make the triangles to be 60 pixels\nwide,
        with 60 pixel jumps.  "
      courseF_artist_variables6_2018_instruction: "Now make the triangles to be 60\npixels
        wide, with 60 pixel jumps.  "
      courseF_artist_variables6a_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables6a_2018_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables7_instruction: 'Draw a triangle with 150 pixels sides.

'
      courseF_artist_variables7_2018_instruction: "Draw a triangle with 150 pixels\nsides. "
      courseF_artist_variables8_instruction: |-
        Rebuild the triangle code from the
        last puzzle, but this time use the `set length to` block to reset the `length`
        variable to `length`+10 at the end of each loop iteration.
      courseF_artist_variables8_2018_instruction: |-
        Rebuild the triangle code from
        the last puzzle, but this time use the `set length to` block to reset the
        `length` variable to `length`+10 at the end of each loop iteration.
      courseF_artist_variables9_instruction: |-
        See what happens when you repeat the
        code from the last puzzle 30 times instead of only 3!  Feel free to make your
        lines any color or pattern for some extra zest.
      courseF_artist_variables9_2018_instruction: |-
        See what happens when you repeat
        the code from the last puzzle 30 times instead of only 3!  Feel free to make
        your lines any color or pattern for some extra zest.
      courseF_artist_variablesFP_instruction: "**Freeplay:** Take what you've learned\nand
        make your own drawing. "
      courseF_artist_variablesFP_2018_instruction: "**Freeplay:** Take what you've\nlearned
        and make your own drawing. "
      courseF_artist_variables_10_instruction: "Here's your code from the last puzzle.
        \ Try\nediting the variable in other ways.  "
      courseF_artist_variables_2_instruction: |
        Now use another loop to draw three
        of those triangles right next to each other.   \r
        You can nest the code from
        your last puzzle inside.\r
      courseF_artist_variables_5_instruction: |-
        Add another set of loops at the end
        of your code to add three more triangles. This time, move forward and up!
      courseF_artist_variables_6_instruction: |-
        OOPS! We actually need the triangles
        to be 60 pixels wide, with 60 pixel jumps.  \r
        Aren't you glad you're using
        a variable?
      courseF_artist_variables_6a_instruction: |-
        Build this design where the squares
        have 80 pixel sides and the artist jumps 80 pixels over and down between each
        one.
      courseF_artist_variables_9_instruction: |-
        See what happens when you repeat the
        code from the last puzzle 30 times instead of only 3!\r
        \r
        Feel free to
        make your lines any color or pattern for some extra zest.
      courseF_artist_variables_FP_instruction: |-
        **Freeplay:** Take what you've learned
        and make your own drawing. \r
        \r
        How can you use variables with squares,
        pentagons, or hexagons?
      courseF_artist_variables_challenge1_instruction: |-
        Can you create a `length`
        variable and use it to create this pattern?
      courseF_artist_variables_challenge1_2018_instruction: |-
        Can you create a `length`
        variable and use it to create this pattern?
      courseF_artist_variables_challenge1a_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this! This puzzle is meant to be difficult.  Can
        you stick with it until you figure out the solution?
      courseF_artist_variables_challenge2_instruction: |-
        You've now learned everything
        you need to know to make a pattern like this!
      courseF_artist_variables_challenge2_2018_instruction: |-
        You've now learned
        everything you need to know to make a pattern like this!
      courseF_artistembed_variables9_instruction: |-
        See what happens when you repeat
        the code from the last puzzle 30 times instead of only 3!  Feel free to make
        your lines any color or pattern for some extra zest.
      courseF_bee_conditionals10_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      courseF_bee_conditionals10_2018_instruction: |-
        Collect all of the nectar and
        make all of the honey.
      courseF_bee_conditionals1_predict1_instruction: |-
        Check to see if there's a
        flower under the cloud. If there's a flower, get nectar.
      courseF_bee_conditionals1_predict1_2018_instruction: |-
        Check to see if there's
        a flower under the cloud. If there's a flower, get nectar.
      courseF_bee_conditionals2_instruction: "Check underneath each cloud to see\nif
        it is hiding a flower before you get nectar.  "
      courseF_bee_conditionals2_2018_instruction: "Check underneath each cloud to\nsee
        if it is hiding a flower before you get nectar.  "
      courseF_bee_conditionals3_instruction: 'Help the bee collect all of the nectar.

'
      courseF_bee_conditionals3_2018_instruction: "Help the bee collect all of the\nnectar. "
      courseF_bee_conditionals4_instruction: |-
        Get all of the nectar using as few
        blocks as possible.
      courseF_bee_conditionals4_2018_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      courseF_bee_conditionals5_instruction: |-
        Collect all of the nectar using as
        few blocks as possible
      courseF_bee_conditionals5_2018_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      courseF_bee_conditionals7_predict2_instruction: |-
        Use the `if/else` block to
        collect nectar at flowers and make honey at honeycomb.
      courseF_bee_conditionals7_predict2_2018_instruction: |-
        Use the `if/else` block
        to collect nectar at flowers and make honey at honeycomb.
      courseF_bee_conditionals8_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseF_bee_conditionals8_2018_instruction: |-
        Collect nectar if there is a flower.\r
        Otherwise,
        make honey (because there is a honeycomb).
      courseF_bee_for1_instruction: |-
        Collect the nectar from each flower using the
        fewest blocks possible.
      courseF_bee_for10_instruction: "**Challenge:** Take what you've learned about\n`for`
        loops and try to solve this problem. "
      courseF_bee_for10_2018_instruction: "**Challenge:** Take what you've learned\nabout
        `for` loops and try to solve this problem. "
      courseF_bee_for11_instruction: |-
        What should your increment be to collect 15,
        then 12, then 9, 6, 3 nectar?
      courseF_bee_for11_2018_instruction: |-
        What should your increment be to collect
        15, then 12, then 9, 6, 3 nectar?
      courseF_bee_for1_2018_instruction: |-
        Collect the nectar from each flower using
        the fewest blocks possible.
      courseF_bee_for2_instruction: |-
        Write the code to help the bee collect all of
        the nectar.
      courseF_bee_for2_2018_instruction: |-
        Write the code to help the bee collect
        all of the nectar.
      courseF_bee_for3_instruction: |-
        Try this puzzle using the `for` loop and the
        `counter` variable to see how much shorter your code becomes.
      courseF_bee_for4_instruction: Help the bee collect all of the nectar.
      courseF_bee_for4_2018_instruction: Help the bee collect all of the nectar.
      courseF_bee_for5_instruction: |-
        Use the `counter` variable twice to solve this
        puzzle.
      courseF_bee_for5_2018_instruction: |-
        Use the `counter` variable twice to solve
        this puzzle.
      courseF_bee_for6_instruction: |-
        Try gathering this nectar by counting down from
        5 to 1 by 1.
      courseF_bee_for6_2018_instruction: |-
        Try gathering this nectar by counting down
        from 5 to 1 by 1.
      courseF_bee_for7_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      courseF_bee_for7_2018_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      courseF_bee_for8_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for8_2018_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      courseF_bee_for9_instruction: |-
        Use the `counter` variable to navigate this
        garden with the fewest number of blocks possible.
      courseF_bee_for9_2018_instruction: |-
        Use the `counter` variable to navigate
        this garden with the fewest number of blocks possible.
      courseF_bee_for_challenge1_instruction: "Use this `for loop` to collect all\nof
        the nectar. "
      courseF_bee_for_challenge1_2018_instruction: "Use this `for loop` to collect\nall
        of the nectar. "
      courseF_bee_for_challenge2_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_for_challenge2_2018_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_for_challenge3_instruction: |-
        Solve this puzzle using the fewest
        number of blocks possible.
      courseF_bee_functions2_instruction: |-
        Use the `get only nectar` function to
        collect the nectar from each flower.
      courseF_bee_functions2_2018_instruction: |-
        Use the `get only nectar` function
        to collect the nectar from each flower.
      courseF_bee_functions3_instruction: |-
        Click "edit" to put code inside the
        `only make honey` function, then use it to solve this puzzle.
      courseF_bee_functions3_2018_instruction: |-
        Click "edit" to put code inside
        the `only make honey` function, then use it to solve this puzzle.
      courseF_bee_functions3a_instruction: |-
        Write a function that gets nectar if
        the bee is at a flower, otherwise it gets honey.  Use your function to solve
        the puzzle!
      courseF_bee_functions3a_2018_instruction: |-
        Write a function that gets nectar
        if the bee is at a flower, otherwise it gets honey.  Use your function to
        solve the puzzle!
      courseF_bee_functions4_instruction: |-
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. \r
        \r
        Use
        a função para coletar todo o néctar.
      courseF_bee_functions4_2018_instruction: |-
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. \r
        \r
        Use
        a função para coletar todo o néctar.
      courseF_bee_functions5_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      courseF_bee_functions5a_instruction: |-
        Use the `move and check` function to
        collect all of the nectar.
      courseF_bee_functions5a_2018_instruction: |-
        Use the `move and check` function
        to collect all of the nectar.
      courseF_bee_functions6_instruction: |-
        Help the bee through the maze by turning
        left at flowers and right at honeycomb.
      courseF_bee_functions6_2018_instruction: |-
        Help the bee through the maze by
        turning left at flowers and right at honeycomb.
      courseF_bee_functions7_instruction: |-
        Rebuild your function from the last puzzle
        to solve this maze.
      courseF_bee_functions7_2018_instruction: |-
        Rebuild your function from the last
        puzzle to solve this maze.
      courseF_bee_functions8a_instruction: |-
        Collect all the nectar or make all of
        the honey!
      courseF_bee_functions8a_2018_instruction: |-
        Collect all the nectar or make all
        of the honey!
      courseF_bee_functionsPre7_instruction: |-
        Now try building a function to solve
        this maze.  How is it different from last time?
      courseF_bee_functionsPre7_2018_instruction: |-
        Now try building a function to
        solve this maze.  How is it different from last time?
      courseF_bee_functions_challenge1_instruction: |-
        Create a new function to collect
        all the nectar and honey while there is a path ahead.
      courseF_bee_functions_challenge1_2018_instruction: |-
        Create a new function to
        collect all the nectar and honey while there is a path ahead.
      courseF_bee_functions_challenge2_instruction: |-
        Use everything you have learned
        to complete this puzzle!
      courseF_bee_functions_challenge2_2018_instruction: |-
        Use everything you have
        learned to complete this puzzle!
      courseF_bee_functions_challenge2_recursion_instruction: |-
        Collect all the nectar
        or make all of the honey!
      courseF_bee_fwp2_instruction: |-
        Pull this code into a function, then call the
        function to check this row for nectar.
      courseF_bee_fwp2_2018_instruction: |-
        Pull this code into a function, then call
        the function to check this row for nectar.
      courseF_bee_fwp3_instruction: |-
        Let's see if the function makes collecting
        these three rows of nectar any easier.
      courseF_bee_fwp3_2018_instruction: |-
        Let's see if the function makes collecting
        these three rows of nectar any easier.
      courseF_bee_fwp4_instruction: |-
        Add a `length` parameter to the function so
        that it will still work when the row is a different length.
      courseF_bee_fwp4_2018_instruction: |-
        Add a `length` parameter to the function
        so that it will still work when the row is a different length.
      courseF_bee_fwp5_instruction: Use this function to collect the nectar.
      courseF_bee_fwp5_2018_instruction: Use this function to collect the nectar.
      courseF_bee_fwp6_instruction: Build a short and sweet solution to this puzzle.
      courseF_bee_fwp6_2018_instruction: |-
        Build a short and sweet solution to this
        puzzle.
      courseF_bee_fwp7_instruction: |-
        **Challenge:** Modify your function to make
        honey as well.
      courseF_bee_fwp7_2018_instruction: |-
        **Challenge:** Modify your function to
        make honey as well.
      courseF_bee_fwp8_instruction: Use your new function to solve this spiral.
      courseF_bee_fwp8_2018_instruction: Use your new function to solve this spiral.
      courseF_bee_fwp9_instruction: Use your new function to solve this puzzle.
      courseF_bee_fwp9_predict1_instruction: |-
        Use your new function to solve this
        puzzle.
      courseF_bee_fwp9_predict1_2018_instruction: |-
        Use your new function to solve
        this puzzle.
      courseF_bee_fwp_challenge1_instruction: |-
        Use one `for loop` in a function with
        a `length` parameter to collect all of the corn.
      courseF_bee_fwp_challenge1_2018_instruction: |-
        Use one `for loop` in a function
        with a `length` parameter to collect all of the corn.
      courseF_bee_fwp_challenge2_instruction: "Use one `for loop` in a function with\na
        `length` parameter to collect all of the vegetables in each row. "
      courseF_bee_fwp_challenge2_2018_instruction: "Use one `for loop` in a function\nwith
        a `length` parameter to collect all of the vegetables in each row. "
      courseF_farmer_ramp11_instruction: |-
        This puzzle also uses nested loops.  Can
        you figure out how?
      courseF_farmer_ramp11_2018_instruction: |-
        This puzzle also uses nested loops.  Can
        you figure out how?
      courseF_maze_predict1_instruction: |-
        This code includes a new block. What do
        you think would happen if you press the "Run" block?
      courseF_maze_ramp13_instruction: |-
        Time for another Angry Birds puzzle to pull
        it all together!
      courseF_maze_ramp15_instruction: |-
        Use what you've learned to get the bird
        to the pig!
      courseF_maze_ramp4_instruction: Avoid TNT or feathers will fly!
      courseF_maze_ramp4_2018_instruction: Avoid TNT or feathers will fly!
      courseF_maze_ramp5_instruction: Avoid the TNT.
      courseF_maze_ramp5_2018_instruction: Avoid the TNT.
      courseF_maze_ramp6_instruction: |-
        "Keep calm and help me find the bad pig.
        Otherwise I might get angry!"
      courseF_maze_ramp6_2018_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      courseF_maze_ramp7_instruction: |-
        Use what you've learned to get the bird to
        the pig!
      courseF_playlab_embed_vars_instruction: |-
        Answer Pegleg the Pirate's questions.
        What happens if you enter the codename "password"? What about some other
        code name?
      courseF_playlab_variables0_instruction: Esta é uma Perna de Pirata. Ele é muito
        difícil de entender nos dias de hoje!
      courseF_playlab_variables1_instruction: Esta é uma Perna de Pirata. Ele é muito
        difícil de entender nos dias de hoje!
      courseF_playlab_variables1a_instruction: |-
        Variables can be used to store text
        that you want to use later.  Have Kiki, the soccer player,  scream "Goal!"
        by assigning that text to the `shout` variable.
      courseF_playlab_variables1a_2018_instruction: |-
        Variables can be used to store
        text that you want to use later.  Have Kiki, the soccer player,  scream "Goal!"
        by assigning that text to the `shout` variable.
      courseF_playlab_variables2_instruction: 'Agora, decodifique a fala da Perna
        de Pirata mudando o valor das variáveis em apenas dois lugares! \r

'
      courseF_playlab_variables2a_instruction: 'Agora, decodifique a fala da Perna
        de Pirata mudando o valor das variáveis em apenas dois lugares! \r

'
      courseF_playlab_variables2b RYAN CLONE_instruction: |-
        Insert the variable `color`
        into the middle of a sentence by putting it into the empty slot in the `join`
        block.
      courseF_playlab_variables2b_instruction: |-
        Insert the variable `color` into
        the middle of a sentence by putting it into the empty slot in the `join` block.
      courseF_playlab_variables2b_2018_instruction: |-
        Insert the variable `color`
        into the middle of a sentence by putting it into the empty slot in the `join`
        block.
      courseF_playlab_variables3_instruction: |-
        The `ask` block will automatically
        store whatever the user answers into the variable of your choice.
      courseF_playlab_variables3b_instruction: "Help Kiki have a conversation with\nBrian
        by using the variable `age` in all of the places where age `12` should\nbe
        used. "
      courseF_playlab_variables3bEdit_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `A1` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3b_josh_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `age` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables3b_josh_2018_instruction: "Help Kiki have a conversation\nwith
        Brian by using the variable `age` in all of the places where age `12`\nshould
        be used. "
      courseF_playlab_variables4_instruction: |-
        Can you find the correct variable
        in the toolbox to fill in the slot?
      courseF_playlab_variables4b_instruction: |-
        Put the variables in the correct
        places to create this conversation.
      courseF_playlab_variables4b_2018_instruction: |-
        Put the variables in the correct
        places to create this conversation.
      courseF_playlab_variables5_instruction: |-
        Can you find the correct variable
        in the toolbox to fill in the slot?
      courseF_playlab_variables5b_instruction: |-
        Put all of the variables in the correct
        place so that Pegleg's story makes sense.
      courseF_playlab_variables5c RYAN Copy_instruction: |-
        Let's combine the `ask`
        block with an `if/else` statement to make a game!
      courseF_playlab_variables5c_instruction: |-
        Let's combine the `ask` block with
        an `if/else` statement to have some fun!
      courseF_playlab_variables5c_2018_instruction: |-
        Let's combine the `ask` block
        with an `if/else` statement to have some fun!
      courseF_playlab_variables6b_instruction: |-
        Join the variables together to make
        a fun story that takes more than one speech bubble to tell.
      courseF_playlab_variables6c_instruction: |-
        In the rest of this stage, we're
        going to build a game that you control!
      courseF_playlab_variables6c_2018_instruction: |-
        In the rest of this stage, we're
        going to build a game that you control!
      courseF_playlab_variables7b_instruction: |-
        Create some questions and weave the
        answers together into your very own story.
      courseF_playlab_variables7b_2018_instruction: |-
        Create some questions and weave
        the answers together into your very own story.
      courseF_playlab_variables7c_instruction: |-
        Make the game do something by asking
        the user to guess a color.
      courseF_playlab_variables7c_2018_instruction: |-
        Make the game do something by
        asking the user to guess a color.
      courseF_playlab_variables8b_instruction: |-
        Use what you've learned to create
        an improv scene between the actors.
      courseF_playlab_variables8c_instruction: |-
        Use the variables to make the game
        more personal.
      courseF_playlab_variables8c_2018_instruction: |-
        Use the variables to make the
        game more personal.
      courseF_playlab_variables_challenge1_instruction: "Use these blocks to make\nthe
        actors share a knock-knock joke. "
      courseF_playlab_variables_challenge1_2018_instruction: "Use these blocks to\nmake
        the actors share a knock-knock joke. "
      courseF_playlab_variables_challenge2_instruction: |-
        This game will use variables
        to keep track of points.  Tag Cat to get 2 points. Tag Penguin to get 3 points.  When
        Cat and Penguin touch, take points away. Get exactly 10 points to win!
      courseF_playlab_variables_challenge2_2018_instruction: |-
        This game will use
        variables to keep track of points.  Tag Cat to get 2 points. Tag Penguin to
        get 3 points.  When Cat and Penguin touch, take points away. Get exactly 10
        points to win!
      courseF_playlab_variables_challenge3_instruction: |-
        Can you figure out how this
        "Fortune Teller" app works? Click `MORE` to see your challenges.
      courseF_video_createFunctions_instruction: |-
        We don't have a video for creating
        functions, yet. This is a placeholder.
      courseF_video_createFunctions_2018_instruction: |-
        We don't have a video for
        creating functions, yet. This is a placeholder.
      course_playlab_variables1_instruction: Esta é uma Perna de Pirata. Ele é muito
        difícil de entender nos dias de hoje!
      course_playlab_variables2_instruction: 'Agora, decodifique a fala da Perna de
        Pirata mudando o valor das variáveis em apenas dois lugares! \r

'
      course_playlab_variables3_instruction: 'Agora, decodifique a fala da Perna de
        Pirata mudando o valor das variáveis em apenas dois lugares! \r

'
      coursea_maze_ramp1_2018_instruction: |-
        For this puzzle, snap the blocks together
        and click "Run"!
      coursef_explore_CYOA_Witch_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of choose your own adventure story in play lab.
      coursef_explore_playlab2_instruction: |-
        You can do whatever you want in play
        lab! Here's an example of story in play lab.
      coursef_explore_playlab_cat_game_instruction: |-
        You can do whatever you want
        in play lab! Here's an example of game you can make.
      coursef_maze_ramp3_instruction: |-
        There is one extra block that is going to
        cause the bird to crash. Throw it away by dragging it back to the toolbox.
      coursef_maze_ramp3_2018_instruction: |-
        There is one extra block that is going
        to cause the bird to crash. Throw it away by dragging it back to the toolbox.
      drawings!_instruction: |-
        Draw the equilateral triangle - all the sides are the
        same!
      eventsIntro_instruction: Need a better playlab/events combo
      flappy_1_instruction: Conecte um bloco no bloco "quando clicar" e, em seguida,
        clique em "Executar". Clique ou toque na tela para mover o passarinho em direção
        ao alvo.
      flappy_11_instruction: Crie seu próprio jogo Flappy Bird. Você pode mudar o
        visual e todas as regras, até mesmo a gravidade. Quando terminar, clique em
        Concluir para que seus amigos joguem seu jogo em seus celulares.
      flappy_11_2018_instruction: |-
        Create your own Flappy game. You can change all
        the visuals and all the rules, even the gravity. When you're done, click
        Finish to let friends try your game on their phones.
      flappy_1_2018_instruction: |-
        Attach a block to the "when click" block, then
        press "Run". Click or tap the screen to move Flappy to the target.
      flappy_2_instruction: Agora que já temos uma base. Conecte um bloco ao bloco
        "quando bater no chão". Seu código precisa 'TERMINAR O JOGO' quando o passarinho
        bater.
      flappy_2_2018_instruction: |-
        Now we've added some ground.  Attach a block to
        the "when hit the ground" block.  Your code needs to 'END GAME' when Flappy
        crashes.
      flappy_3_instruction: O bloco "quando o jogo começa" permite que você execute
        o código quando o jogo começa. Defina a velocidade do nível e voe em direção
        ao alvo.
      flappy_3_2018_instruction: |-
        The "when run" block allows you to run code when
        your game starts.  Try setting the level speed and flapping to the target.
      flappy_4_instruction: O passarinho vai atravessar os obstáculos, a menos que
        você programe para fazê-lo bater. Conecte um bloco ao bloco "quando atingir
        um obstáculo". Seu programa precisa 'TERMINAR O JOGO' quando o passarinho
        bater nos obstáculos.
      flappy_4_2018_instruction: |-
        Flappy will fly through obstacles unless you write
        code to make him crash. Attach a block to the "when hit an obstacle" block.
        Your code needs to 'END GAME' when Flappy crashes into the first set of
        pipes.
      flappy_5_instruction: Vamos adicionar um painel de pontuação e aumentar os pontos
        quando o passarinho passar pelos obstáculos. Faça isso no bloco "quando passar
        um obstáculo", e então marque um ponto quando o passarinho passar pelo primeiro
        conjunto de obstáculos.
      flappy_5_2018_instruction: |-
        Let's add a scoreboard, and count points when
        Flappy makes it past obstacles. Add to the "when pass an obstacle" block,
        and then score a point by flying Flappy through the first set of pipes.
      flappy_6_instruction: Veja se você ainda pode marcar um ponto depois de fazer
        o passarinho bater as asas mais ou menos.
      flappy_6_2018_instruction: |-
        See if you can still score a point after making
        Flappy flap either a smaller or larger amount.
      flappy_7_instruction: Em seguida, tente mudar a cena conectando outro bloco
        ao bloco "quando o jogo começa".
      flappy_7_2018_instruction: |-
        Next, try changing the scene by attaching another
        block to the "when run" block.
      flappy_8_instruction: Você pode definir o visual a qualquer momento, não apenas
        quando o jogo começa. Tente criar um cenário ALEATÓRIO quando outros eventos
        acontecerem, por exemplo, ao passar um obstáculo.
      flappy_8_2018_instruction: |-
        You can set visuals anytime, not just when the
        game starts. Try setting a RANDOM scene when other events happen, for example,
        when passing an obstacle.
      flappy_9_instruction: Para misturar as coisas, ao invés de terminar o jogo quando
        bater em um obstáculo, tente fazer a pontuação voltar a 0.
      flappy_9_2018_instruction: Para misturar as coisas, ao invés de terminar o jogo
        quando bater em um obstáculo, tente fazer a pontuação voltar a 0.
      frozen circle function in circle_instruction: |-
        Agora vamos criar 20 círculos
        sobrepostos, virando 18 graus entre cada círculo.
      frozen circle function with parameter_instruction: |-
        Temos aqui um bloco "crie um círculo"
        que pode fazer círculos de tamanhos diferentes. Você pode usar isso para criar
        um pequeno círculo de tamanho 5 e um círculo maior de tamanho 10?
      frozen circle function_instruction: |-
        Use o novo bloco "crie um círculo" para
        criar 10 círculos sobrepostos. Não se esqueça de avançar entre os círculos.
      frozen circle_instruction: |-
        Um círculo é uma forma especial. Você pode descobrir
        que número usar para substituir os pontos de interrogação para desenhar um círculo?
      frozen cross rotate dense_instruction: |-
        Vamos repetir isso 90 vezes! Quantas
        vezes 90 cabe em 360? Dica: é um número realmente pequeno.
      frozen cross rotate_instruction: |-
        Agora, tente repetir isso 10 vezes. Quantos graus
        você precisa virar entre cada reta?
      frozen cross_instruction: |-
        Envolva um bloco "Repita" em torno desses comandos para criar
        um sinal de adição. Você notou que Elsa pode se mover para a frente e para trás?
      frozen diamond mini snowflake_instruction: |-
        Você sabia que cada floco de neve
        tem uma forma diferente? Vamos criar um novo floco de neve usando o bloco "Repita"
        para repetir um paralelogramo 4 vezes, virando 90 graus à direita entre
        cada paralelogramo.
      frozen diamond snowflake_instruction: |-
        Agora, vamos criar um novo floco de neve
        usando o bloco repita para repetir um paralelogramo 10 vezes, virando 36 graus
        à direita entre cada um.
      frozen diamond_instruction: |-
        Use um bloco "Repita" em torno desses blocos para criar um paralelogramo.
        É como um retângulo mas tem ângulos diferentes. Este tem ângulos de 60 graus
        e 120 graus em vez de todos os ângulos terem 90 graus.
      frozen freeplay_instruction: |-
        Você se tornou oficialmente um artista mestre! Crie
        um país das maravilhas de gelo.
      frozen line_instruction: |-
        Oi! Eu sou Elsa de Arendelle. Ajude-me a criar uma
        reta.
      frozen perpendicular_instruction: |-
        Agora, vamos ver se podemos criar duas retas
        que formam um ângulo de 90 graus entre si. Você vai precisar usar o bloco "vire"
        e também o bloco "mova".
      frozen snowflake branch_instruction: |-
        Tente usar o bloco "crie um floco de neve do tipo ramificado”
        para criar três ramificações, o que começa a parecer um floco de neve.
      frozen snowflake full_instruction: |-
        Agora, vamos repetir isso 8 vezes para fazer um
        belo floco de neve!
      frozen snowflower_instruction: |-
        Padrões de neve complexos podem ser criados com
        formas muito simples. Você pode criar um padrão repetindo 5 círculos de tamanho
        5 e 5 círculos de tamanho 10?
      frozen square iterative_instruction: |-
        Parece que estamos na metade do caminho para fazer
        um quadrado. Vamos juntar 4 retas para criar um quadrado.
      frozen square loop 3x_instruction: |-
        Vamos criar três quadrados, virando depois
        de cada quadrado. Lembre-se de virar 120 graus antes de cada novo quadrado.
      frozen square loop_instruction: |-
        Oi, eu sou Anna de Arendelle! Vamos fazer um quadrado
        com o bloco "repita", que usa menos blocos. Quantas vezes (???) o bloco
        "repita" deve repetir os blocos dentro dele para fazer um quadrado?
      frozen square snowflake_instruction: |-
        Você consegue criar um floco de neve usando o bloco
        "repita" para criar um quadrado 10 vezes e o bloco "vire" para virar 36
        graus entre cada quadrado?
      grade1_adventurer_loops1_instruction: Four piles of gold!  Collect all four.
      grade1_adventurer_loops10_instruction: |-
        Help me get all of the gold from this
        cave.
      grade1_adventurer_loops2_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `E -->` block?
      grade1_adventurer_loops3_instruction: |-
        Can you fix Laurel's path to get all
        of this gold?
      grade1_adventurer_loops4_instruction: "Add to the code from the last puzzle\nto
        get all of the gold. "
      grade1_adventurer_loops5_instruction: |-
        What should you add to this code to
        get all of the gold?
      grade1_adventurer_loops6_instruction: Write the code to get all of this gold.
      grade1_adventurer_loops7_challenge_instruction: |-
        **Challenge: ** The gold goes
        all the way down these stairs!  Write the code to help me get it all.
      grade1_adventurer_loops8_challenge_instruction: |-
        Challenge: Try this staircase
        now! It has an extra spike at the end you'll have to climb.
      grade1_adventurer_loops9_instruction: |-
        Help me get the gold from this deep
        valley.
      grade1_adventurer_loopsFP_instruction: |-
        Eureka!  Collect as much gold as you
        can!
      grade1_adventurer_loopsPre_instruction: |-
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      grade1_artist_loops1_instruction: |-
        The Artist is trying to draw a line six
        times, but can't get it right.  Can you help?
      grade1_artist_loops2_instruction: |-
        Help the artist draw a line 7 times to make
        a garden wall.
      grade1_artist_loops3_instruction: "Now we need to get the soil ready to plant.\nFind
        the bugs in the code and help the artist prepare the ground. "
      grade1_artist_loops4_instruction: |-
        Time to fix the stairs!  Repeat this pattern
        five times so the artist can reach the top of the bushes.
      grade1_artist_loops5_instruction: |-
        Behind the bushes there is a beautiful vine
        full of flowers.  Can you climb the vine and see where it goes?
      grade1_artist_loops6_instruction: |-
        **Challenge:**  It's a hidden garden! Let's
        walk around.
      grade1_artist_loops7_instruction: |-
        The flowers down here are so pretty.  Let's
        take a closer look.
      grade1_artist_loops7a_instruction: |-
        **Challenge:**  Lovely! Let's take a walk
        around the garden.
      grade1_artist_loops7b_instruction: |-
        Time to head home. Can you fix this ladder
        to help the artist get down?
      grade1_artist_loops8_instruction: |-
        Let's take the short way home, over the
        pond. Can you help the artist stay on the stones?
      grade1_artist_loops9_instruction: I still need a story for this puzzle
      grade1_artist_loopsFP_instruction: |-
        Use what you have learned to draw a picture
        of what you think the artist saw when he got home.
      grade1_maze_sequence1_instruction: Altere o código para me levar até o porco!
      grade1_maze_sequence10_instruction: Move me around the TNT to get to the pig.
      grade1_maze_sequence2_instruction: Altere o código para me levar até o porco!
      grade1_maze_sequence3_instruction: |
        Can you add 2 blocks to get the bird to
        the pig.
      grade1_maze_sequence4_instruction: Now try this puzzle from the start!
      grade1_maze_sequence5_instruction: |-
        Move one way, then another to get me to
        the pig!
      grade1_maze_sequence6_instruction: |-
        Figure out what is missing and then add
        blocks to get me to the pig!
      grade1_maze_sequence7_instruction: |-
        Your turn!  What do you need to do to get
        the bird to the pig?
      grade1_maze_sequence8_instruction: |-
        Debug this level by adding blocks to get
        me to the pig!
      grade1_maze_sequence9_instruction: 'Go around the TNT to get me to the pig!

'
      grade1_maze_sequenceA_instruction: |-
        Challenge: Move me around the TNT to get
        to the pig.
      grade1_maze_sequenceB_instruction: Fix the bugs to get the bird to the pig.
      grade1_maze_sequenceC_instruction: It's all you!  Get the bird to the pig.
      grade1_maze_sequenceD_instruction: 'It''s a pig party!  Get those pigs! '
      grade1_playlab_events1_instruction: |-
        This game is called "Play Lab".  See
        if you can figure out what each block does.
      grade1_playlab_events1a_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      grade1_playlab_events2_instruction: |-
        This program makes Robin fly.  Can you
        get her to vanish when you click her?
      grade1_playlab_events2a_instruction: |-
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      grade1_playlab_events3_instruction: |
        This program makes Robin fly.  Can you
        make the robot jump when you press the up button?\r
      grade1_playlab_events3a_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade1_playlab_events4_instruction: |-
        Add a block to make Robin vanish when
        she collides with the robot.
      grade1_playlab_events4a_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade1_playlab_events5_instruction: |-
        Add a block to the 'when run' event
        that starts the dragon flying.
      grade1_playlab_events5a_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      grade1_playlab_events6_instruction: |-
        Add a block to the 'when actor 1 clicked'
        event that makes the dragon return to the middle of the screen.
      grade1_playlab_events7_instruction: |-
        Add a block so that when you push the
        left arrow button, the knight surges toward the dragon.
      grade1_playlab_events8_instruction: |-
        Add a block so that when the knight collides
        with the dragon, it plays a sound.
      grade1_playlab_events9 RYAN COPY_instruction: |-
        Now, have Robin wait a second,
        then come back after she vanishes.
      grade1_playlab_events9_instruction: |-
        Now, add a block to keep score each time
        the knight hits the dragon.
      grade1_playlab_eventsFP_instruction: |-
        Use your imagination. What can you do
        to make this game more fun?
      grade1_sequence_pre_instruction: |-
        Play with these blocks to see what they make
        the bird do!
      grade1_video_frustrationRainbow_instruction: |-
        This video describes the rainbow
        of frustration and introduces persistence.
      grade2_CaringForNewPet_0_instruction: |-
        For this puzzle, drag all of the blocks
        together and click "Run" to watch it go!
      grade2_CaringForNewPet_1_instruction: |-
        Drag an extra `move forward` block out
        of the toolbox to finish your code.
      grade2_CaringForNewPet_10_instruction: Leve-me até o porco!
      grade2_CaringForNewPet_11_instruction: |-
        "Keep calm and help me find the bad
        pig."
      grade2_CaringForNewPet_2_instruction: |-
        "This pig is ruffling my feathers."\r
        \r
        There
        is one extra block that is going to cause the bird to crash. Throw it away
        by dragging it back to the toolbox.
      grade2_CaringForNewPet_2courseC_maze_programming3_instruction: |-
        There is one
        extra block that is going to cause the bird to crash. Throw it away by dragging
        it back to the toolbox.
      grade2_CaringForNewPet_3_instruction: |-
        "Trace the path and lead me to the
        silly pig. Avoid TNT or feathers will fly!"
      grade2_CaringForNewPet_3D_instruction: |-
        "Follow this path to get me to the
        pig!"
      grade2_CaringForNewPet_4_instruction: |-
        "Keep calm and help me find the bad
        pig. Otherwise I might get angry!"
      grade2_CaringForNewPet_5_instruction: Leve-me até o porco!
      grade2_CaringForNewPet_6_instruction: |-
        Challenge: Guide me to the green evilness!
        (Watch out for TNT)
      grade2_CaringForNewPet_7D_instruction: |-
        Challenge: This code has a lot of bugs.
        You'll need to remove blocks and add blocks.
      grade2_MakeDogTag_1_instruction: |-
        Drag blocks onto the screen to have the artist
        draw over the grey lines in the picture. (Each line is 100 pixels long)
      grade2_MakeDogTag_10_instruction: Agora desenhe o que você quiser!
      grade2_MakeDogTag_2_instruction: |-
        This spaceship needs a window!\r
        \r
        Each
        side of the inner square is 100 pixels and all of the angles are 90 degrees.
      grade2_MakeDogTag_3_instruction: Ajude-me a completar a casa para o gato.
      grade2_MakeDogTag_4_instruction: 'Essa casa precisa de um telhado! Desenhe o
        triângulo. Dica: todos os 3 lados têm o mesmo comprimento.'
      grade2_MakeDogTag_5_instruction: |-
        "Now a tag for Belle!"\r
        \r
        Draw this
        diamond with 200 pixel sides.
      grade2_MakeDogTag_6_instruction: Atividade livre! Desenhe o que você quiser.
      grade2_MakeDogTag_7_instruction: |-
        One more tag.  This is a triangle for Pi.\r
        (Each
        side is 150 pixels)
      grade2_MakeDogTag_8_instruction: |-
        Agora vamos conectar um monte de "V"
        em um laço.
      grade2_MakeDogTag_9_instruction: |-
        Rebuild the code from the last puzzle, but
        this time, add a left turn of 30 degrees inside the loop. Now, repeat it 24
        times instead of 8.
      grade2_MakeDogTag_BFP_instruction: |-
        "Hi, I'm an artist. You can write code
        to make me draw almost anything."\r
        \r
        Play with the blocks in the toolbox
        to see what they do!
      grade2_MakeDogTag_FP_instruction: |-
        Freeplay: What shape will you make the tag
        for your pet?
      grade2_PuppyLoops_1_instruction: |-
        Can you get me to the pig using 5 of the
        same kind of blocks?
      grade2_PuppyLoops_10_instruction: |-
        Meu professor diz que eu devo terminar o que
        comecei!\r
        \r
        Ajude-me a terminar meu cata-vento. Você consegue descobrir o que há de errado?
      grade2_PuppyLoops_2_instruction: |-
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_PuppyLoops_3_instruction: |-
        Get me to the pig! Solve this puzzle by creating
        a loop!
      grade2_PuppyLoops_4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_PuppyLoops_5_instruction: |-
        Você consegue descobrir a maneira mais rápida de me
        levar até o porco?
      grade2_PuppyLoops_6_instruction: |-
        Loops even work with more than one block
        inside!  Can you loop this sequence to get me to the pig?
      grade2_PuppyLoops_7_instruction: Use o que você aprendeu para me levar até o
        girassol!
      grade2_PuppyLoops_8_instruction: |-
        O código dos bigodes do gato está errado.
        \r
        \r
        Corrija o código para desenhar os bigodes, todos com o mesmo tamanho.
      grade2_PuppyLoops_9_instruction: |-
        Parece que o C no código está desenhado ao contrário!\r
        \r
        Você
        consegue fazê-lo parecer com um C de novo?
      grade2_collector_10_instruction: |-
        You're almost done! Collect as many pieces
        of treasure as you can to finish the stage!
      grade2_collector_10_2018_instruction: |-
        You're almost done! Collect as many
        pieces of treasure as you can to finish the stage!
      grade2_collector_2_instruction: |-
        Move Laurel to the gold, then use `collect`
        to pick it up.
      grade2_collector_3_instruction: |-
        Put these blocks in order to collect all of
        the gold and solve the puzzle.
      grade2_collector_4_instruction: |-
        Sequence matters! The blocks you need are
        already in the workspace, but not connected.  Order these blocks to solve
        the puzzle.
      grade2_collector_5_instruction: |-
        These blocks are in the wrong order. Can you
        fix them?
      grade2_collector_6_instruction: |-
        "Help me collect each gold coin!"\r
        \r
        These
        blocks are in the wrong order.
      grade2_collector_7_instruction: |-
        Challenge puzzle! Use blocks from the toolbox
        to collect all of the treasure.
      grade2_collector_8_instruction: |-
        "Keep up the good work! Help me collect all
        of the coins."
      grade2_collector_9_instruction: Let's get the coins!
      grade2_collector_9a_instruction: "**Challenge:** Grab all of the coins."
      grade2_collector_A_instruction: Help Laurel collect all of the treasure.
      grade2_collector_A_2018_instruction: Help Laurel collect all of the treasure.
      grade2_collector_pre1_instruction: |-
        "Hi, I'm Laurel. Today I'm searching
        for treasure at the dog park!" \r
        \r
        Play around with the blocks to see
        if you can help Laurel collect some gold.
      grade2_maze_debuggingFP_instruction: |-
        "Now, help me sneak up on the pig any
        way you want to!"
      grade2_maze_debuggingPre_instruction: |-
        Play with these blocks to see what they
        make the bird do!
      grade2_maze_intro10_instruction: Solve this puzzle.
      grade2_maze_intro2_instruction: |-
        Welcome to Code Studio! Here you will learn
        to use blocks to build programs. Press `Run` to run a program now!
      grade2_maze_intro3_instruction: |-
        The `workspace` is where you will create all
        of your programs. Can you guess what this program does? Press the “Run” button
        to find out.
      grade2_maze_intro4_instruction: |-
        Drag a block from the toolbox into the workspace.
        Connect it to the other blocks.
      grade2_maze_intro6_instruction: "That’s it!  Now we’re ready to try to solve\na
        few puzzles. "
      grade2_maze_intro7_instruction: This time, try something a bit more challenging.
      grade2_maze_intro8_instruction: |-
        This is a challenge puzzle.  It is meant to
        be hard and will probably take you a couple of tries to solve.  If you don’t
        solve it after several tries, don’t worry!  It will be in the Play Zone at
        the end of the stage and you can try it again when you’ve had more practice.
      grade2_maze_intro9_instruction: Solve this puzzle.
      grade2_playlab_project_1_instruction: |-
        Agora escreva um programa que faça Valfredo
        se mover usando as teclas com as setas para cima / para baixo / à esquerda / à direita, para atingir todos os alvos!
      grade2_playlab_project_2_instruction: |-
        The `repeat forever` block allows you
        to run code over and over forever. Can you attach blocks to move Chomp the
        Dino (actor 2) up and down forever?
      grade2_playlab_project_3_instruction: |-
        Can you have Waddles (actor 1) say "Ouch!"
        and play a "hit" sound if he runs into Chomp? \r
        \r
        When you're done,
        play the game to make that happen.
      grade2_playlab_project_4_instruction: |-
        Você pode adicionar um bloco para marcar um ponto
        quando Valfredo se encontrar com Otávia (personagem 3)? \r
        Jogue e mova Valfredo
        com as setas do teclado até marcar ponto!
      grade2_playlab_project_5_instruction: |-
        Add blocks to the `when run` event to
        change the background and the speed of Waddles.\r
        \r
        Play the game and move
        Waddles with the arrows until you score.
      grade2_playlab_project_6_instruction: |-
        Create your own story. When you're
        done, click "Finish" to share with friends.
      grade2_puppy_loops2_instruction: |-
        Can you get to the pig by creating a loop
        that uses only one `move forward` block inside of a `repeat`?
      grade2_puppy_loops3_instruction: |-
        "Get me to the pig!"\r
        \r
         Solve this
        puzzle by creating a loop!
      grade2_puppy_loops4_instruction: |-
        In this puzzle, two `repeat` loops will help
        you get to the pig with the fewest number of blocks!
      grade2_puppy_loops5_instruction: |
        Você consegue descobrir a maneira mais rápida de me
        levar até o porco?
      grade2_puppy_loops6_instruction: |-
        "This pig is ruffling my feathers!"\r
        \r
        Loops
        even work with more than one block inside!  Can you loop this sequence?
      grade2_puppy_loops7_instruction: |-
        "Get me to the pig!"\r
        \r
        Use what you
        learned in other puzzles!
      grade3_AboutMyRobot_1_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      grade3_AboutMyRobot_2_instruction: |-
        Edit the code so that when the second bird
        is clicked, your program plays a sound!
      grade3_AboutMyRobot_3_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      grade3_AboutMyRobot_4_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      grade3_AboutMyRobot_5_instruction: |-
        About My Robot Project! Write code so that
        clicking on each bird shows a new fact about your robot.
      grade3_AboutMyRobot_TeacherIDo_instruction: |-
        Run this puzzle and click on the
        robot to see what happens!
      grade3_ConditionalsElse_1_instruction: |-
        Esta nuvem está tapando minha visão! Veja
        se há uma flor atrás da nuvem, e só colete néctar se houver
        uma flor. Cuidado, isso pode mudar!
      grade3_ConditionalsElse_2_instruction: |-
        Mais nuvens! \r
        \r
        Procure atrás
        de todas as nuvens para ver se elas escondem alguma flor antes de coletar o néctar.  \r
        \r
        Lembre-se:
        Nem todas as nuvens escondem alguma coisa!
      grade3_ConditionalsElse_3_instruction: |-
        Now I just want to make honey. Some
        of these clouds might have honeycombs under them. Be sure to check each cloud!
      grade3_ConditionalsElse_4_instruction: |-
        Às vezes esta nuvem esconde uma flor
        e outras vezes uma colmeia! Use o bloco "se/senão" para coletar néctar
        se for uma flor, senão para produzir mel (porque é uma colmeia).
      grade3_ConditionalsElse_5_instruction: |-
        There will be either a flower or a
        honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block to collect
        nectar if there is a flower.\r
        Otherwise, make honey (because there is a
        honeycomb).
      grade3_ConditionalsElse_6_instruction: |-
        I am not sure how much nectar this
        flower has, but I know it has either 1, 2, or 3 nectar. \r
        \r
        Combine the
        conditional blocks (`if` and/or `if/else`) to only get as much nectar as the
        flower has. \r
        \r
        Remember, the amount of nectar can change each time you
        run the puzzle!
      grade3_ConditionalsElse_7_instruction: |-
        Essas flores podem ter 3, 2 ou 1 néctar.
        \r
        \r
        Complete a função "verifique a flor roxa" e use-a para coletar
        todo o néctar das flores.
      grade3_ConditionalsElse_8_instruction: |-
        Write the function for `check flower
        make honey`. \r
        \r
        Your function should check if the purple flower has 3,
        2, or 1 nectar and get all of the nectar. \r
        Then, move forward and make
        honey.
      grade3_ConditionalsElse_9_instruction: |
        **Assessment:** This cloud is either
        hiding a flower with one nectar or a honeycomb that needs one honey.  \r
        \r
        Complete
        the `get nectar or make honey` function, then call it to collect the nectar
        or honey. \r
      grade3_ConditionalsElse_TeacherIDo_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade3_Conditionals_1 BAD_instruction: Use um laço para coletar todo o néctar.
      grade3_Conditionals_1_instruction: |-
        Sou uma abelha faminta! \r
        Ajude-me a coletar
        todo o néctar das flores usando o menor número possível de blocos.
      grade3_Conditionals_10 BAD_instruction: |-
        Colete o néctar das fileiras de flores!
        Use um laço aninhado.
      grade3_Conditionals_10_instruction: |-
        Há muita coisa acontecendo por aqui!\r
        \r
        Use
        o que você aprendeu para coletar todo o néctar e, então, produza o mel.
      grade3_Conditionals_11 BAD_instruction: |-
        Avaliação: Use um laço "enquanto" para
        coletar todo o néctar dessas flores.
      grade3_Conditionals_11_instruction: |-
        Vamos unir todas as informações!\r
        \r
        Use
        o que você aprendeu para me ajudar a coletar néctar apenas das flores que têm
        néctar para oferecer, usando o menor número possível de blocos. Não se esqueça de produzir o mel para terminar.
      grade3_Conditionals_12_instruction: |-
        Este padrão de degrau deve ser familiar.  \r
        \r
        Você
        consegue coletar néctar apenas das flores que têm néctar para oferecer, usando o menor número de
        blocos possível?
      grade3_Conditionals_13_instruction: |-
        Assessment: Collect all of the nectar.
        Be careful not to try to collect nectar from a purple flower if it doesn't
        have any.
      grade3_Conditionals_2_instruction: "Olhe só todo esse néctar!\\r\n\\r\nAjude-me\na
        coletar todo o néctar e produzir mel usando o menor número possível de blocos.
        \ "
      grade3_Conditionals_3_instruction: |-
        Be careful not to collect nectar from a
        purple flower if it doesn't have any. \r
        You must first check if the nectar
        is equal to 1 using the `if nectar` block.
      grade3_Conditionals_4_instruction: |-
        Verifique essa flor com um bloco "se"
        para ver se há algum néctar disponível.
      grade3_Conditionals_5_instruction: |-
        Colete o néctar de cada flor, apenas se
        ela tiver néctar disponível.
      grade3_Conditionals_6_instruction: |-
        Este campo tem flores vermelhas e roxas.
        As flores vermelhas têm uma quantidade de néctar conhecida, mas o néctar das flores roxas é desconhecido.
        Colete todo o néctar.
      grade3_Conditionals_7_instruction: Colete todo o néctar de cada flor.
      grade3_Conditionals_8_instruction: "O que será que tem por aí!\\r\n\\r\nAjude-me\na
        voar pelo jardim e coletar o néctar apenas das flores que têm\nnéctar para
        oferecer. "
      grade3_Conditionals_9_instruction: |-
        Help me find all of the nectar using as
        few blocks as possible!
      grade3_Conditionals_TeacherIDo_instruction: |-
        Check this flower with an "if"
        block to see if there is any nectar available.
      grade3_Debugging_1_instruction: |-
        Esses blocos estão me incomodando. Corrija o(s)
        erro(s) para coletar todo o néctar.
      grade3_Debugging_5_instruction: |-
        That flower looks tasty! \r
        \r
        Fix the error(s)
        to collect all of the nectar.  You can now use both run and step.
      grade3_Debugging_6_instruction: |-
        Que doce desafio!\r
        \r
        Corrija o(s) erro(s)
        para coletar todo o néctar.
      grade3_Debugging_7_instruction: |-
        Corrija o(s) erro(s) para coletar todo o néctar
        e produzir todo o mel.
      grade3_Debugging_9_instruction: |-
        Uau, que ferroada!\r
        \r
        Você
        terá que corrigir algumas coisas neste programa para coletar todo o
        néctar e produzir todo o mel.
      grade3_Debugging_TeacherIDo_instruction: |-
        These blocks are really bugging me.
        Fix the error(s) to collect all of the nectar and make all of the honey.
      grade3_Loops_1_instruction: "Can you help me collect the nectar from these\nflowers? "
      grade3_Loops_10_instruction: |-
        Que abelha trabalhadora!\r
        \r
        Ajude a abelha a coletar todo o
        néctar e produzir todo o mel com o menor número de blocos possível.
      grade3_Loops_11_instruction: |-
        O formato deste caminho é diferente dos
        demais. \r
        \r
        Você consegue coletar todo o néctar usando o menor número possível de blocos?
      grade3_Loops_12_instruction: |-
        Você consegue encontrar a maneira mais rápida para a abelha
        coletar todo o néctar e produzir todo o mel?
      grade3_Loops_2_instruction: Desta vez, use um laço para juntar todo o néctar.
      grade3_Loops_3_instruction: Use um laço "repita" para coletar todo o néctar.
      grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all of the
        nectar and make all of the honey.
      grade3_Loops_5_instruction: |-
        Que lindo campo florido!  Ajude a
        abelha a visitar cada flor. Você consegue achar uma maneira de fazer isso com menos de 7 blocos?
      grade3_Loops_6_instruction: |-
        Quantas vezes os laços ajudaram você neste desafio?  \r
        \r
        Os laços
        são seus amigos! Use alguns deles para completar este desafio com o menor número
        de blocos possível.
      grade3_Loops_7_instruction: |-
        Essas flores parecem deliciosas!\r
        \r
        Colete o néctar
        de cada uma das flores usando o menor número possível de blocos.
      grade3_Loops_8_instruction: |-
        Colete todo o néctar e produza todo o mel
        usando o menor número possível de blocos.
      grade3_Loops_9_instruction: |-
        Colete o néctar de cada flor e produza mel
        em cada colmeia usando o menor número possível de blocos.
      grade3_Loops_TeacherIDo_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      grade3_RunningFarm_1_instruction: |-
        Use conditionals to make sure that you pick
        all of the corn, but don't disturb the stalks where nothing is growing yet.
      grade3_RunningFarm_10_instruction: |-
        Collect all of the corn and lettuce, then
        pick the pumpkin.
      grade3_RunningFarm_11a_instruction: |-
        Collect all of the corn and lettuce, then
        pick the pumpkin.
      grade3_RunningFarm_2_instruction: |-
        Help the farmer collect both corn and lettuce
        from the field.
      grade3_RunningFarm_3_instruction: |-
        *"Corn, lettuce, AND pumpkins! Help me
        harvest them all."*
      grade3_RunningFarm_4_instruction: |-
        Help the farmer pick all of the lettuce
        in each cluster before moving on to the next bunch.
      grade3_RunningFarm_5_instruction: |-
        This field has clusters of corn, lettuce,
        and pumpkins all growing together.  Can you collect them all?
      grade3_RunningFarm_6_instruction: |-
        Can you figure out how to pick the pumpkin?  Make
        sure to collect all of the corn along the way!
      grade3_RunningFarm_7_instruction: |-
        **Challenge:** Collect all of the corn and
        lettuce, then pick the pumpkin.
      grade3_RunningFarm_8_instruction: |-
        Have wheat and potatoes planted randomly
        at various growth stages. Now we introduce multiple while loops (stacked)
        nested inside a loop. The two while loops in the solution represent different
        while loops (while there is potato and while there is wheat)
      grade3_RunningFarm_9_instruction: |-
        Add Weeds element. Weeds start out in random
        spots in the field and spread more and more rapidly as time goes on.. This
        puzzle is the culminating game-like puzzle. Students should have the event
        blocks (up, down, left, right, spacebar) available in the toolbox to use if
        they want. The entire field should be planted randomly with mostly wheat,
        potatoes, and a few weeds.
      grade3_RunningFarm_TeacherIDo_instruction: |-
        Teacher I Do: Show students how
        they can use loops and conditionals to plant and harvest 2 rows of crops.
      grade3_RunningFarm_TeacherIDo2_instruction: |-
        Teacher I Do: Show students how
        to use loops to harvest many crops.
      grade3_bee_Conditionals_new4_instruction: |-
        Now try checking all of these flowers
        with "if" blocks to see if there is any nectar available.
      grade3_bee_conditionals_new1a_instruction: |-
        Help the bee collect all of the
        nectar. \r
        \r
        You can only collect nectar from flowers, but you can check
        any space to see if there is a flower.
      grade3_bee_conditionals_new1b_instruction: |-
        Help the bee collect all of the
        nectar. You can only collect nectar from flowers, but you can check any space
        to see if there is a flower.
      grade3_bee_conditionals_new2_instruction: |-
        Collect all of the nectar using
        as few blocks as possible
      grade3_bee_conditionals_new2a_instruction: |-
        Get all of the nectar using as
        few blocks as possible.
      grade3_bee_conditionals_new2b_instruction: |-
        Collect all of the nectar. You
        can only collect nectar from flowers, but you can check any space to see if
        there is a flower.
      grade3_bee_conditionals_new3a_instruction: |-
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade3_bee_conditionals_new3b_instruction: |-
        Collect all of the nectar and make
        all of the honey.
      grade3_bee_conditionals_new3c_instruction: |-
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade3_bee_conditionals_quantum1_instruction: |-
        Check to see if there's a flower
        under the cloud. If there's a flower, get nectar.
      grade3_bee_conditionals_quantum2_instruction: |-
        Mais nuvens! \r
        \r
        Procure atrás
        de todas as nuvens para ver se elas escondem alguma flor antes de coletar o néctar.  \r
        \r
        Lembre-se:
        Nem todas as nuvens escondem alguma coisa!
      grade3_bee_conditionals_quantum3_instruction: |-
        Some of these clouds might have
        honeycombs under them.  Be sure to check if a honeycomb is hiding behind each
        cloud!
      grade3_bee_conditionals_quantum4_instruction: |-
        Use the `if/else` block to collect
        nectar at flowers and make honey at honeycomb.
      grade3_bee_conditionals_quantum5_instruction: |-
        Use the `if/else` block to collect
        nectar if there is a flower.\r
        Otherwise, make honey (because there is a
        honeycomb).
      grade3_maze_Loop1_instruction: "Assessment:  Get me to the sunflower using\nonly
        5 blocks! "
      grade3_maze_loops1_instruction: Get the zombie to the sunflower.
      grade3_maze_loops2_instruction: |-
        Leve-me até o girassol usando o menor número de blocos
        possível! \r
        \r
        Use um laço "repita" dentro de outro para diminuir
        a quantidade de códigos que você precisa.
      grade3_maze_loops2a_instruction: |-
        Get the zombie to the sunflower using the
        fewest number of blocks possible.
      grade3_maze_loops3_instruction: |-
        Vamos subir o nível! \r
        Use
        laços para me levar até o girassol com o menor número de laços possível.
      grade3_maze_loops4_instruction: |-
        Leve-me até o girassol usando o menor número
        possível de blocos!
      grade3_maze_loops5_instruction: |-
        Leve-me até o girassol usando o menor número possível
        de blocos!
      grade3_maze_nestedLoops1_instruction: |-
        Can you get me to the pig using 5 of
        the same kind of blocks?
      grade3_maze_nestedLoops2_instruction: |-
        Can you get to the pig by creating a
        loop that uses only one `move forward` block inside of a `repeat`?
      grade3_maze_nestedLoops3_instruction: |-
        Get me to the pig! You can only use
        one move forward block this time
      grade3_maze_nestedLoops4_instruction: |-
        In this puzzle, two `repeat` loops will
        help you get to the pig with the fewest number of blocks!
      grade3_playLab_buildGame_1_instruction: |-
        There is a new block in this lesson,
        the `random integer` block. It is used to choose a random number. Write a
        program where the robot says a random number between 1 and 100!
      grade3_playLab_buildGame_2_instruction: |-
        We have already created a random integer,
        "j", which is either 1 or 0. Now, we need to use it to decide whether our
        card is red or black. Add a second if statement to the code under `when run`
        to complete this code.
      grade3_playLab_buildGame_3_instruction: |-
        There are 13 different card values
        in a deck of cards, so we'll need to have 13 options. Under the empty `when
        run` block, add a line that sets the placeholder "i" to a random integer
        between 1 and 13.
      grade3_playLab_buildGame_4_instruction: |-
        In a deck of cards, a card with value
        1 isn't actually called a "1", there's a special name. Write an if statement
        that checks if the random number is a 1, then tell the computer that the value
        of that card is "Ace".
      grade3_playLab_buildGame_5_instruction: |-
        We can just call the cards from 2
        to 10 by their numbers, so add an if statement that checks whether the number
        generated is within those numbers, then sets the card value to the number
        generated.
      grade3_playLab_buildGame_6_instruction: |-
        There are three more cards with special
        names in the deck. Add to your code so that a card number 11 is called a "Jack",
        a 12 is a "Queen" and a 13 is a "King"
      grade3_playLab_buildGame_7_instruction: |-
        You already know what color your card
        is, but what suit is it? Add code to the conditional statement "if card is
        Red" to choose hearts or diamonds.
      grade3_playLab_buildGame_8_instruction: |-
        Add the second part of the code to
        choose a suit, copying what you made for a Red card.
      grade3_playLab_buildGame_final_instruction: |-
        Final stage for playlab conditionals
        level (could hide entire function so that students just work with point scoring)
      grade3_playLab_buildGame_final2_instruction: |-
        Here's all of your code to choose
        a card - try adding some other fun features!
      grade3_robotFarmer_ConditionalsIntro4_instruction: |-
        Help the farmer remove
        this entire pile using a `while` loop.
      grade3_robotFarmer_ConditionalsIntro_1_instruction: |-
        *"Hi, I'm a farmer.
        I need your help to flatten the field on my farm so it's ready for planting!"*  \r
        \r
        Move
        to the pile of dirt and use the `remove` block to remove it.
      grade3_robotFarmer_ConditionalsIntro_10_instruction: |-
        I'm working late, so
        it's dark out, and I can't tell how large the piles are. Now I don't have
        all the options I used to have on the while block. Move me along the field,
        and if there is a pile, remove it
      grade3_robotFarmer_ConditionalsIntro_10a_instruction: "Flatten all of these\npiles
        using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_11_instruction: |-
        It's still dark outside.
        Move me along the field. If there is a pile, remove it, and if there is a
        hole, fill it in. Hint: use the dropdown menu of options on the "if" block.
      grade3_robotFarmer_ConditionalsIntro_11a_instruction: "Flatten all of these\npiles
        using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_2_instruction: |-
        Next, move to the hole
        and fill it with six shovelfuls of dirt, using the `fill` block.
      grade3_robotFarmer_ConditionalsIntro_3_instruction: |-
        *"Move to the pile of
        dirt and tell me how many shovelfuls to remove using as few blocks as possible."*
      grade3_robotFarmer_ConditionalsIntro_4_instruction: |-
        *"I don't know how much
        dirt is in this pile!"*\r
        \r
        Help the farmer remove this entire pile using
        a `while` loop.
      grade3_robotFarmer_ConditionalsIntro_5_instruction: "Help me remove all of\nthis
        dirt. "
      grade3_robotFarmer_ConditionalsIntro_6_instruction: |-
        Remove all the piles of
        dirt, using as few blocks as possible. The new options in the dropdown menu
        on the "while" block tell me if I'm standing on a pile or a hole.
      grade3_robotFarmer_ConditionalsIntro_7_instruction: |-
        Look at all of those holes!  Each
        one needs a different amount of dirt.   \r
        \r
        You can use the `while` loop
        to easily fill them all!
      grade3_robotFarmer_ConditionalsIntro_8_instruction: |-
        Fill in the hole at the
        end of each of these paths.
      grade3_robotFarmer_ConditionalsIntro_9_instruction: "**Challenge:** Fill all\nof
        these holes using as few blocks as possible. "
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo1_instruction: |-
        Help me fill
        in all these holes with 5 shovelfuls of dirt. Hint: you can put a "repeat"
        block inside the "while" block.
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo2_instruction: |-
        I'm working
        late, so it's dark out, and I can't tell how large the piles are. Now I
        don't have all the options I used to have on the while block. Move me along
        the field, and if there is a pile, remove it
      grade4_arist_functions_star0_instruction: |-
        Have you drawn something like this
        star before? Practice making it one more time by adding a turn and a repeat
        block.
      grade4_arist_nested_loop_circles1_instruction: |-
        Assessment: Use a nested loop
        to complete the design.
      grade4_arist_nested_loop_flags1_instruction: |-
        Loop the given code to create
        a windmill.
      grade4_arist_nested_loop_polygons1_instruction: |-
        Loop this design 10 times.
        \r
        \r
        How much do you have to turn each time you loop?
      grade4_arist_nested_loop_polygons2_instruction: "Loop this shape 6 times. \\r\n\\r\nHow\nmuch
        do you have to turn each time you loop? "
      grade4_arist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_arist_nested_loop_triangles2_instruction: "Now nest this loop inside\nanother
        loop to draw 10 triangles.  This is called a \"nested\" loop.  "
      grade4_arist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by
        looping the triangle code?
      grade4_arist_nested_loop_triangles4_instruction: |-
        Draw the teeth in the alligator's
        mouth!
      grade4_arist_nested_loop_triangles5_instruction: |-
        Create a sun by nesting the
        starter code in another loop.\r
        \r
        To get this cool design with a hollow
        center, you'll need to jump forward by the length of the triangle before
        turning.
      grade4_arist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_freeplay_instruction: |-
        You are on your own now! Try out any of
        the functions you used in this stage or try this new function that will automatically
        give your image a beautiful background color! This creation will be saved
        to your Projects dashboard so that you can easily edit it any time!
      grade4_artist_functions1_instruction: |-
        "Olá! Eu sou um artista zumbi. Eu amo desenhar!"  \r
        \r
        Ajude
        o zumbi a desenhar óculos usando quadrados com lados de 100 pixels de comprimento.  \r
        \r
        A
        haste entre as lentes tem 75 pixels de comprimento.
      grade4_artist_functions2_instruction: |-
        Functions let you define new blocks!
        \r
        \r
        We've moved the blocks needed for drawing a square into a function
        called `draw a square`. This time, use the `draw a square` function to create
        the glasses. \r
        \r
        The squares are 75 pixels apart.
      grade4_artist_functions2a_instruction: |-
        Create this image using only the blocks
        provided.
      grade4_artist_functions3a_instruction: |-
        Create this image using only the blocks
        provided.
      grade4_artist_functions3b_instruction: |-
        This time, use lines of 8 hexagons
        with 25 pixel sides.
      grade4_artist_functionsChallenge0_instruction: |-
        **Challenge:** Create as many
        functions as you think you need to make this drawing of 50 pixel squares.
      grade4_artist_functions_challenge_instruction: |-
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_challenge2_instruction: |-
        Use the suggested functions
        to draw four rows of hexagons. Notice how our even numbered rows are shifted
        to the right?
      grade4_artist_functions_freeplay_instruction: |-
        You are on your own now! Try
        out any of the functions you used in this stage or try this new function that
        will automatically give your image a beautiful background color! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade4_artist_functions_stars0_instruction: |-
        You can make this drawing by adding
        a repeat block.
      grade4_artist_functions_stars1_instruction: |-
        Now that you can draw a star,
        try drawing four stars!
      grade4_artist_functions_stars2_instruction: |-
        Draw only those three stars to
        finish this puzzle.
      grade4_artist_functions_stars3_instruction: |-
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade4_artist_functions_windows0_instruction: |-
        Make this window by drawing
        a square, then turning 90 degrees before drawing another, and so on.
      grade4_artist_functions_windows1_instruction: |-
        If you can draw one window,
        you can draw three! Try using your choice of a nested loop or a function here.
        Don't forget the jump block!
      grade4_artist_functions_windows2_instruction: |-
        Try solving this puzzle by creating
        `draw a window` and calling it five times. Watch out for the door!\r
        \r
        -
        The top windows are 50 pixels away from each other.  \r
        - The bottom windows
        are 100 pixels below the top set.
      grade4_artist_nestedLoops_challenge_instruction: |-
        Click here to see the full
        instructions again!\r
        \r
        Here is the code for an interesting shape.  What
        happens when you repeat it multiple times, turning between each iteration?   Notice
        that the turns in this shape add up to 420 degrees, which means that when
        your artist is done drawing, it will be facing a different direction than
        when you started.  That new direction is exactly 60 degrees to the right of
        where you began.
      grade4_artist_nestedLoops_challenge2_instruction: |-
        Now for a challenge!  Feel
        free to use trial and error. You are not expected to get the image perfect
        the first time.   Want to see more hints?  Click here!
      grade4_artist_nested_loop_circles1_instruction: |-
        Assessment: Use a nested loop
        to complete the design.
      grade4_artist_nested_loop_flags1_instruction: |-
        Loop the given code to create
        a windmill.
      grade4_artist_nested_loop_polygons1_instruction: |-
        Loop this design 10 times.
        \r
        \r
        How much do you have to turn each time you loop?
      grade4_artist_nested_loop_polygons2_instruction: "Hi, I'm the Artist! Let's\ncreate
        some drawings together! For starters, try repeating this shape 6 times.\n\\r\n\\r\nHow
        much do you have to turn each time you loop? "
      grade4_artist_nested_loop_squares1_instruction: |-
        Can you draw these 10 squares
        of this sidewalk using a nested loop? Each square is 30 pixels.
      grade4_artist_nested_loop_triangles1_instruction: |-
        Complete the code to draw
        these triangles.  The first one is done for you.  Hint:  3 triangles in a
        360 degree rotation.
      grade4_artist_nested_loop_triangles2_instruction: |-
        Let's make a quick adjustment
        to get completely different image!  \r
        Hint: ? × 10 = 360
      grade4_artist_nested_loop_triangles3_instruction: |-
        Can you draw a hexagon by
        looping the triangle code?\r
        Hint: 6 × ? = 360
      grade4_artist_nested_loop_triangles4_instruction: |-
        Hi! I'm the Artist. Let's
        try some different types of drawings together. Can you help me draw the bottom
        teeth in the alligator's mouth?
      grade4_artist_nested_loop_triangles5_instruction: |-
        Create a sun by nesting
        the starter code in another loop.\r
        \r
        To get this cool design with a hollow
        center, you'll need to jump forward by the length of the triangle before
        turning.
      grade4_artist_nested_loop_triangles6_instruction: |-
        Can you draw these 36 triangles
        using a nested loop?
      grade4_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade4_artist_parameters_triangles1_instruction: |-
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade4_artist_parameters_triangles2_instruction: |-
        Você percebe algo diferente
        sobre esses blocos de função? Clique em "Executar" para ver o que acontece.
      grade4_artist_parameters_triangles2b_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles3_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_artist_parameters_triangles4_instruction: |-
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade4_artist_parameters_trianglesx_instruction: |-
        Can you complete this drawing?
        The sides of each triangle are 25 pixels larger than the last.  The first
        triangle has 25 pixel sides.
      grade4_bee_conditionals_nested_loops_instruction: |-
        Collect all of the nectar.
        You can only collect nectar from flowers, but you can check any space to see
        if there is a flower.
      grade4_bee_conditionals_new1_instruction: |-
        Collect all of the nectar. You can
        only collect nectar from flowers, but you can check any space to see if there
        is a flower.
      grade4_bee_conditionals_new1a_instruction: |-
        Help the bee make all of the honey.
        You can only make honey at a honeycomb, but you can check any space to see
        if there is a honeycomb.
      grade4_bee_conditionals_new2_instruction: |-
        Can you help the bee collect the
        nectar from the flowers? You can only collect nectar from flowers, but you
        can check any space to see if there is a flower.
      grade4_bee_conditionals_new2a_instruction: |-
        Make all of the honey. It's actually
        more efficient to check each space for a honey comb, even when you know some
        are empty.
      grade4_bee_conditionals_new3a_instruction: |-
        Collect all of the nectar or make
        all the honey. You can only collect nectar from flowers and make honey from
        honeycombs. Check any space to see if there is a flower or honeycomb.
      grade4_bee_conditionals_new3b_instruction: |-
        Uh oh! The bee is not sure if he
        should collect nectar or make honey. Can you help him out?
      grade4_bee_conditionals_new3c_instruction: |-
        Help the bee collect all of the
        nectar and make all of the honey! Hint: Try using one loop inside of another
        loop.
      grade4_bee_conditionals_quantum1_instruction: |-
        This cloud is blocking my view!
        Check to see if there's a flower under the cloud, and only get nectar if
        there's a flower. Be careful, it can change!
      grade4_bee_conditionals_quantum2_instruction: |-
        Mais nuvens! \r
        \r
        Procure atrás
        de todas as nuvens para ver se elas escondem alguma flor antes de coletar o néctar.  \r
        \r
        Lembre-se:
        Nem todas as nuvens escondem alguma coisa!
      grade4_bee_conditionals_quantum3_instruction: |-
        Now I just want to make honey.
        Some of these clouds might have honeycombs under them. The way we've been
        going about things won't work here. Be sure to check if a honeycomb is hiding
        behind each cloud!
      grade4_bee_conditionals_quantum4_instruction: |-
        Sometimes this cloud covers
        a flower, and sometimes it covers a honeycomb! Use the if/else block to collect
        nectar if it is a flower, else to make honey (because it is a honeycomb).
      grade4_bee_conditionals_quantum5_instruction: |-
        There will be either a flower
        or a honeycomb under each of those clouds!\r
        \r
        Use the `if/else` block
        to collect nectar if there is a flower.\r
        Otherwise, make honey (because
        there is a honeycomb).
      grade4_bee_functions_instruction: |-
        Have we met before? I'm the farmer! Please
        help me remove this pile of dirt and fill this hole.
      grade4_bee_functions1_instruction: Colete todo o néctar de cada flor.
      grade4_bee_functions10_instruction: |-
        Create a function to collect all of the
        nectar from each flower.
      grade4_bee_functions11_instruction: |-
        Solve this function by creating a function
        to turn, move forward and make all of the honey, then return the bee to where
        it started and turn back.
      grade4_bee_functions2_instruction: |-
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 2 néctares" para coletar o néctar de cada
        flor.
      grade4_bee_functions3_instruction: |-
        As funções são blocos de código que realizam
        uma tarefa. \r
        \r
        Use a função "obtenha 5" para obter 5 néctares por vez.
      grade4_bee_functions4_instruction: |-
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. \r
        \r
        Use
        a função para coletar todo o néctar.
      grade4_bee_functions5_instruction: This puzzle will be deleted!
      grade4_bee_functions6_instruction: |-
        Now write the function to collect nectar
        from the flowers.
      grade4_bee_functions7_instruction: |-
        Create a function and call it to collect
        nectar at each flower and make honey at each honeycomb.
      grade4_bee_functions8_instruction: |-
        Create your own function that goes down
        a path, gets nectar, makes honey, and then returns the bee to the top of the
        path. Then collect all the nectar and make all the honey!
      grade4_bee_functions9_instruction: |-
        Create a function that collects all of
        the nectar from each flower.
      grade4_bee_nestedLoops0_instruction: Use um laço para coletar todo o néctar.
      grade4_bee_nestedLoops1_instruction: "Colete todo o néctar de cada flor.\nUse
        um laço aninhado. "
      grade4_bee_nestedLoops2_instruction: |-
        **Challenge:** Figure out how to get
        all of the nectar using only the blocks available.
      grade4_bee_nestedLoops2a_instruction: |-
        Collect all of the nectar using  as
        few blocks as possible.
      grade4_bee_nestedLoops3_instruction: |-
        Colete todo o néctar criando
        um laço aninhado.
      grade4_bee_nestedLoops4_instruction: "Colete todo o néctar de cada flor\ne produza
        mel na colmeia. \\r\n\\r\nUse um laço aninhado. "
      grade4_bee_nestedLoops_assess_instruction: |-
        **Assessment:** Collect all of
        the nectar and make all of the honey using loops.\r
        \r
        Hint: There are several
        possible solutions!
      grade4_designProcess_vid_instruction: |-
        Prepare to build a project within some
        given parameters.
      grade4_farmer_functions1_instruction: |-
        *"Have we met before? I'm the farmer!"*\r
        \r
        Help
        the farmer get to the pumpkins and pick them.
      grade4_farmer_functions2_instruction: |-
        Take the code you just wrote it and
        use it to define a new function. Call the function twice to complete the puzzle.
      grade4_farmer_functions3_instruction: |-
        Try using a couple of repeat blocks
        within your function definition.
      grade4_farmer_functions4_instruction: |-
        Swap out your repeat loops for more
        versatile while loops.
      grade4_farmer_functions5_instruction: |-
        Things are going to start getting trickier,
        but don't give up! You can use the same while loops to check both spaces
        in each pass.
      grade4_farmer_functions6_instruction: |-
        The paths are a different length. You
        can use a different type of while loop to keep the pattern going as long as
        you need to.
      grade4_frozen_freeplay_instruction: |-
        Você se tornou oficialmente um artista mestre!
        Crie um país das maravilhas de gelo.
      grade4_frozen_functions0_instruction: |-
        Can you figure out what number to replace
        the question marks with to draw a circle?
      grade4_frozen_functions1_instruction: |-
        Use the new “draw a circle” function
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions1a_instruction: |-
        Use the new “Create a circle” block
        to create 10 overlapping circles. Don't forget to jump forward between circles.
      grade4_frozen_functions2_instruction: |-
        Now let's create 20 overlapping circles,
        turning 18 degrees between each circle.
      grade4_frozen_functions3_instruction: |-
        Here's a ”Create circle” block that
        can make circles of different sizes. Can you use this to create a small circle
        of size 5 and a larger circle of size 10?
      grade4_frozen_functions4_instruction: |-
        Intricate snow patterns can be created
        with very simple shapes. Can you make a pattern by repeating 5 circles of
        size 5 and 5 circles of size 10?
      grade4_frozen_nested_loop_diamonds1_instruction: |-
        Let’s use a repeat block
        to create a rhombus. Like a square, all sides are equal length, but the angles
        are different. This one has 60 degree and 120 degree angles instead of all
        90 degree angles.
      grade4_frozen_nested_loop_diamonds2_instruction: |-
        Did you know every snowflake
        is a different shape? Let's create a new snowflake by using another “Repeat"
        block to repeat a parallelogram 4 times, turning right by 90 degrees between
        each parallelogram.
      grade4_frozen_nested_loop_diamonds3_instruction: |-
        Now, let's create a new
        snowflake by using the repeat block to repeat a parallelogram 10 times, turning
        right by 36 degrees between each one.
      grade4_frozen_nested_loop_rectangle1_instruction: |-
        Hi, I’m Anna of Arendelle!
        Let’s use a repeat block to create a rectangle. This one is  200 pixels long
        and 100 pixels tall. All of the corners are 90 degree angles.
      grade4_frozen_square_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make a
        square with the “Repeat” block, which uses fewer blocks. How many times (???)
        should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop1_instruction: |-
        Hi, I’m Anna of Arendelle! Let’s make
        a square with the “Repeat” block, which uses fewer blocks. How many times
        (???) should the “Repeat” block loop the blocks inside it to make a square?
      grade4_frozen_square_loop2_instruction: |-
        Let's create three squares, turning
        after each square. Be sure to turn by 120 degrees before each new square.
      grade4_frozen_square_loop3_instruction: |-
        Você consegue criar um floco de neve usando o bloco
        "repita" para criar um quadrado 10 vezes e o bloco "vire" para virar 36
        graus entre cada quadrado?
      grade4_playLab_proj_example1_instruction: instructions
      grade4_playLab_proj_example1a_instruction: |-
        Take a look at this project.  Do
        you see how it was made?
      grade4_playLab_proj_example2a_instruction: |-
        Take a look at this project.  Do
        you see how it was made?
      grade4_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. "
      grade4_playlab_test_instruction: |-
        Use a seta para a direita para atirar tortas.\r
        \r
        Em
        nosso jogo, como podemos marcar pontos? Adicione 1 à variável "pontos" toda
        vez que o cão atingir o gato com um pedaço de torta. Use o evento "quando o personagem 2 tocar em alguma coisa"
        para acionar uma atualização em sua pontuação. Você pode incrementar sua variável
        definindo "pontos = pontos + 1". Aumente sua pontuação até 10 (um ponto
        de cada vez!) para passar de nível.
      grade4_playlab_test2_instruction: |-
        Here's a function called `jump` that causes
        your main character to jump up 100 pixels. Run the program and use the jump
        function to collect all of the flags by moving the dog with the arrow keys.
      grade4_prompt_test_instruction: This is a test play lab level.
      grade4_review_artist1_instruction: |-
        Hi, I'm an artist. You can write code
        to make me draw almost anything. Use a few blocks to make me draw over the
        grey lines in the picture. (Each line is 100 pixels long)
      grade4_review_artist2_instruction: 'Essa casa precisa de um telhado! Desenhe
        o triângulo. Dica: todos os 3 lados têm o mesmo comprimento.'
      grade4_review_artist3_instruction: |-
        The jump block moves the artist without
        drawing. Draw the dashed line using both the `jump forward` and `move forward`
        blocks. Each line is 50 pixels long.
      grade4_review_bee1_instruction: |-
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      grade4_review_bee2_instruction: |-
        Colete o néctar de cada flor e produza mel
        em cada colmeia usando o menor número possível de blocos.
      grade4_review_bee3_instruction: |-
        Que abelha trabalhadora!\r
        \r
        Ajude a abelha a coletar todo o
        néctar e produzir todo o mel com o menor número de blocos possível.
      grade4_scaffolded_project1_instruction: |-
        It is amazing how much you have learned!
        Let's put them together to make a game, step by step.
      grade4_scaffolded_project2_instruction: |
        Now let's get things moving! Use
        event handlers and actions to make your hero move.\r
        \r
        We've added these
        blocks to your tool box to help you.\r
      grade4_scaffolded_project3_instruction: |-
        Now that your game has a hero, it's
        time to start adding other actors and assigning them behaviors. \r
        \r
        Add
        two or more additional actors to your game and make them move. Do you want
        to have an actor patrol back and forth? Try using a these new blocks to bring
        these other components of your game to life!
      grade4_scaffolded_project4_instruction: |-
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project4a_instruction: |-
        Just getting the actors moving is
        a great step, but we need to program some interactions to make this really
        feel like a game. A simple way to do this is to add or remove points when
        actors collide with projectiles or each other. Find some interesting ways
        to change the score in your game.
      grade4_scaffolded_project5_instruction: |-
        Now spend some time making sure the
        game works the way you want. Try including a way to win or lose your game.
      grade4_scaffolded_project6_instruction: |-
        You've finished! Now you can play
        your game or share it with your friends and classmates!
      grade5_artist_binary1_instruction: |-
        Binário é uma forma de representar informações
        usando apenas duas opções. Aqui, vamos usar as opções "desligado" (representada
        pelo número 0) e "ligado" (representada pelo número 1).  \r
        \r
        Foi fornecida
        uma grade de "pixels" pela qual você pode andar e criar
        designs virando em certos quadrados. Você consegue fazer o artista desenhar
        "01010101" em binário na primeira fileira?
      grade5_artist_binary10_instruction: Clique aqui para ver algumas dicas.
      grade5_artist_binary11_instruction: |-
        Free Play: Here's a blank canvas for
        you to draw on.  Have fun!
      grade5_artist_binary2_instruction: |-
        Temos aqui uma função que recebe uma string
        binária de 1's e 0's e instrui o artista a mover-se da esquerda para
        a direita, de cima para baixo. O artista vai preencher os quadrados nos quais vir um 1 e ignorar
        os que tiverem um 0.\r
        \r
        Execute este código para ver como
        o artista usa números binários para desenhar este padrão.
      grade5_artist_binary3_instruction: |-
        Which of these binary strings could you
        loop 8 times to draw this image?
      grade5_artist_binary4_instruction: |-
        Can you draw this pattern by looping just
        three binary digits (0s and 1s)?
      grade5_artist_binary5_instruction: |-
        Each binary string represents one row of
        this picture. Can you rearrange them so it draws a smiley face instead of
        a frowny face?
      grade5_artist_binary6_instruction: |-
        Which 6 digit binary string, repeated 11
        times, will draw this image?
      grade5_artist_binary7_instruction: |-
        Qual é a menor string binária que você
        pode repetir para desenhar esta imagem?
      grade5_artist_binary8_instruction: Termine o desenho.
      grade5_artist_binary9_instruction: |-
        Here's a higher resolution canvas to draw
        on - 16 pixels by 16 pixels!\r
        \r
        See what happens when we start to get
        creative with the bits?
      grade5_artist_for_loops1_instruction: |-
        Use um bloco "repita" para desenhar este triângulo
        que tem 50 pixels de largura.
      grade5_artist_for_loops10_instruction: |-
        Can you figure out how to use all of
        the things you've learned to create this image?\r
        \r
        Need a hint? Click
        here.
      grade5_artist_for_loops1a_instruction: |-
        Try using a `for loop`to create this
        triangular design. Don't worry that the numbers are different than the last
        puzzle. As long as you turn by the right number of degrees, the artist will
        make the correct shape!
      grade5_artist_for_loops1b_instruction: |-
        Experiment with the `for` loop and
        play with the `counter` variable.
      grade5_artist_for_loops2_instruction: |-
        Use a `repeat` inside of a `for` loop
        to create this stack of triangles that goes from 50 pixels to 100 pixels.
      grade5_artist_for_loops3_instruction: "These triangles go from 20 pixel sides\nto
        200 pixel sides, and each triangle is 20 pixels larger than the last. "
      grade5_artist_for_loops4_instruction: "These squares start at 15 pixels long,\nthe
        largest is 300 pixels long, and each square is 15 pixels larger than the\nlast. "
      grade5_artist_for_loops5_instruction: |-
        Just one little change to the code from
        the last image can create this drawing. Can you figure out what that change
        is?\r
        \r
        Hint:  You need to remove something!
      grade5_artist_for_loops6_instruction: |-
        If you turn a little bit more or less
        than you normally would for a shape, it creates a neat effect. Try using some
        of the code from the last level, but turning 89 degrees to create this twisted
        square spiral.
      grade5_artist_for_loops7_instruction: |-
        Make three small changes to the code
        from the last level to get this!
      grade5_artist_for_loops7a_instruction: |-
        Take the angle down to 72 degrees to
        get a spiraled pentagon.
      grade5_artist_for_loops7b_instruction: |-
        Use the counter inside the `set alpha`
        block to get this faded center.\r
        (This hexagon pattern was made using a
        60 degree turn.)
      grade5_artist_for_loops8_instruction: "Remember back in a previous stage when\nwe
        used a variable to control the number of sides in a shape? We are going\nto
        do the same thing with the `counter` variable now. This pattern starts\nwith
        a triangle and adds one side at a time until it draws a decagon (10 sides).\nEach
        side should be 100 pixels long. "
      grade5_artist_for_loops9_instruction: |-
        Let's put it all together!  Using your
        knowledge of `for` loops and the `counter` variable, create this drawing where
        each shape has two more sides than the last.  Make sure that each side is
        10 times as long as the number of sides in the polygon.\r
        \r
        Very little
        of the code has been provided for you.
      grade5_artist_for_loopsfreeplay11_instruction: |-
        Atividade livre - Inspiração: agora você
        aprendeu tudo o que precisa saber para criar um padrão como esse! Se essa
        imagem inspira você, tente fazer algo similar. Caso contrário, crie algo
        você mesmo.\r
        \r
        Precisa de uma dica? Clique aqui.
      grade5_artist_for_loopsfreeplay12_instruction: |-
        Free Play: Try using the `counter`
        variable with other drawing elements to make magical images like this one.
      grade5_artist_freeplay_instruction: |-
        Create your own project! This creation
        will be saved to your Projects dashboard so that you can easily edit it any
        time!
      grade5_artist_functionparameters10_instruction: "Atividade livre - Inspiração:
        agora você\naprendeu tudo o que precisa saber para criar um padrão como esse!
        Se essa\nimagem inspira você, tente fazer algo similar. Caso contrário, crie
        algo\nvocê mesmo.\\r\n \\r\nQuer saber como nosso padrão de inspiração foi
        feito? "
      grade5_artist_functionparameters11_instruction: |-
        Atividade livre: aqui estão as funções
        que você escreveu e mais algumas para você usar. Desenhe algo incrível!
        Brinque com a largura da caneta para ver como seus desenhos ficam diferentes!
      grade5_artist_functionparameters7_instruction: |-
        This image is similar to the
        last. Can you use a `for` loop with your function to make this design?
      grade5_artist_functionparameters8_instruction: "Vamos editar a função \"desenhe
        um\npolígono\". Ela já tem um parâmetro \"lados\". Agora, vamos adicionar
        um parâmetro\n\"comprimento\". \\r \nO perímetro de cada forma tem 200 pixels
        de comprimento. Você se lembra\nda equação para fazer as formas ficarem do
        mesmo tamanho quando elas têm um número diferente\nde lados?"
      grade5_artist_functionparameters9_instruction: |-
        Challenge: Edit `draw a spiral
        edge` to use `length` and `sides` parameters, then recreate these shapes.
      grade5_artist_functionparameters9a_instruction: |-
        Finish off the `draw a spiral
        edge` function to also ask for a minimum length for the center of the spiral.
      grade5_artist_functionparameters9b_instruction: |-
        Can you figure out how to
        make this drawing using the function that you just created?
      grade5_artist_functionparameters_6_instruction: |-
        Você consegue completar esse desenho?
        Os lados de todas as formas têm 100 pixels de comprimento.
      grade5_artist_parameters_squares1_instruction: |-
        Click "edit" to fill in the
        function definition of "draw a square" and add a parameter. It should take
        a length parameter, just like the triangle. This time, draw 3 squares: 25,
        50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_squares1a_instruction: |-
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a square' to find the bug.
      grade5_artist_parameters_squares2_instruction: |-
        Create a function called 'draw
        a square' and use it to outline these four boxes. Make sure to add a parameter
        for 'length'! Starting from the upper right, the box widths are 50, 100,
        150, and 200.
      grade5_artist_parameters_squares2a_instruction: |-
        Edit the function to accept
        a parameter called `length`.
      grade5_artist_parameters_stars1_instruction: |-
        That last one is tough if you
        only use loops. Let's try drawing the same picture using this new 'function'
        that will help to **draw a star**.
      grade5_artist_parameters_triangles1_instruction: |-
        This program looks okay from
        here, but something isn't working right. See if you can figure out how to
        edit the function 'draw a square' to find the bug.
      grade5_artist_parameters_triangles1a_instruction: |-
        Today, we're going to try
        out a different, more powerful function editor. See if you can figure out
        how to edit the function 'draw a triangle' to find the bugs.
      grade5_artist_parameters_triangles1aa_instruction: |-
        Click "edit" to fill
        in the function definition of "draw a triangle" and add a parameter. It
        should take a length parameter, just like the triangle. This time, draw 3
        triangles: 25, 50 and 75 pixels in length, each 100 pixels apart.
      grade5_artist_parameters_triangles2_instruction: |-
        This drawing can be easily
        created using a new type of function that includes a parameter. The sides
        of each triangle are 25 pixels larger than the last.  The first triangle has
        25 pixel sides. Replace the '???' with the correct values to draw the picture.
      grade5_artist_parameters_triangles2a_instruction: |-
        Você percebe algo diferente
        sobre esses blocos de função? Clique em "Executar" para ver o que acontece.
      grade5_artist_parameters_triangles3_instruction: |-
        The code for this triangle
        function is broken.\r
        \r
        Can you edit the function to fix it, and then make
        triangles of length 150, 75, 25?
      grade5_artist_parameters_triangles4_instruction: |-
        The code for this triangle
        function is broken. Can you edit the function to fix it, and then make triangles
        of length 25, 50, and 75?
      grade5_artist_parameters_trianglesy_instruction: |-
        The code for this triangle
        function is broken.\r
        \r
        Can you edit the function to fix it, and then make
        triangles of length 150, 75, 25?
      grade5_artist_variables_freeplay10_instruction: |-
        Free Play: Experiment with
        the number of sides this shape has. Can you change the algorithm so that the
        overall size of the shape stays the same, no matter how many sides it has?
        Hint: If you divide your starting length by the number of sides, the length
        of each side will get shorter as the number of sides gets higher.
      grade5_artist_variables_freeplay14_instruction: |-
        Free Play: Check it out! Now
        your algorithm is nested within one more loop. Experiment with changing the
        values of your two variables to draw cool patterns.\r
        \r
        For even more effect,
        try playing with color!  Use random colors inside loops to see how it changes
        your design.
      grade5_artist_variables_freeplay15_instruction: |-
        Want a second peek at the
        inspiration design or the hints?  Click here!\r
        \r
        Otherwise, make a design
        all your own!
      grade5_artist_variables_freeplay16_instruction: |-
        Still playing?  Here is a
        blank canvas where you can create whatever you want!
      grade5_artist_variables_hexagons1_instruction: |-
        Let's try it again! \r
        \r
        Can
        you set the `length` variable to 60 to make this cool design with hexagons?
      grade5_artist_variables_letterT11_instruction: |-
        Here’s more complicated code
        using the same concepts from the last puzzle - what should you set the "sides"
        variable to in order to draw this picture made of squares?
      grade5_artist_variables_new1_instruction: |-
        Here is a program that will create
        an image. There are a few things that are wrong with it.
      grade5_artist_variables_octagons13_instruction: |-
        When a shape has lots of sides,
        each side needs to be shorter if you want the whole pattern to fit on the
        screen. \r
        Let's recreate the algorithm for this amazing pattern, but instead
        of manually setting the `length` variable, let's use a math block with the
        `sides` variable inside to make sure that each shape fits correctly. The perimeter
        of each polygon is 300 pixels.\r
        Need some hints?  Click here.
      grade5_artist_variables_pentagon8_instruction: |-
        Use what you learned in the
        last puzzle to create this hexagon using the "sides" variable.\r
        \r
        See
        how you could change just one value to draw a triangle,  square, pentagon,
        or octagon?
      grade5_artist_variables_pentagon9_instruction: |-
        Now, recreate the algorithm
        from the last level and create a pentagon with sides of length 150.
      grade5_artist_variables_pentagons1_instruction: |-
        Draw this pattern of pentagons
        with 100 pixel sides by setting the right value for `length` and dropping
        the `length` variable into all of the the correct places. \r
        \r
        See how
        you only have to set the value for `length` once, and the code uses the right
        value everywhere?
      grade5_artist_variables_pentagons12_instruction: |-
        Let's set the "sides"
        variable to 5. The more sides we add to this algorithm, the bigger this whole
        pattern gets! Notice that there is another variable called "length". We
        can now use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      grade5_artist_variables_rectangle6_instruction: |-
        Now I want to make a rectangle
        that is twice as tall as it is wide. We've got a variable called "width"
        that needs to be set to 100. Can you use the math blocks to complete the code?
      grade5_artist_variables_square7_instruction: |-
        Here’s some code that can draw
        any regular polygon. There’s a new variable called sides that is set to 4.
        Can you use the sides variable (along with the math block) to turn the right
        amount regardless of how many sides there are in the polygon?\r
        \r
        Click
        here to go back to the hint!
      grade5_artist_variables_triangles2_instruction: |-
        Instead of using "move forward
        by 150," the "move" block is now referencing a variable called "length."
        Can you set "length" to 150 to draw this new triangle?
      grade5_artist_variables_triangles3_instruction: "Drag a number block to both\nthe
        `set length` block and the `repeat _ times` block to draw a set of 50\npixel
        triangles. "
      grade5_bee_for_loops1_instruction: |-
        Use a loop to collect the nectar from each
        flower.
      grade5_bee_for_loops10_instruction: |-
        What should your increment be to collect
        15, then 12, then 9, 6, 3 nectar?
      grade5_bee_for_loops11_instruction: "**Challenge:** Take what you've learned\nabout
        `for` loops and try to solve this problem. "
      grade5_bee_for_loops2_instruction: |-
        Add the code necessary to make sure the
        bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      grade5_bee_for_loops3_instruction: |-
        Try this puzzle using the `for` loop with
        `counter` variable and see how much shorter your code becomes.
      grade5_bee_for_loops4_instruction: "Replace the ??? in the \"for loop\" with\nthe
        largest amount of nectar the bee has to collect. "
      grade5_bee_for_loops6_instruction: |-
        You can also use a "for loop" to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      grade5_bee_for_loops7_instruction: |-
        Try collecting these flowers using an increment
        of 2.
      grade5_bee_for_loops8_instruction: |-
        You've got this! What should your increment
        be to collect 3, 6, 9, 12, 15 nectar?
      grade5_bee_for_loops9_instruction: |-
        Use the `counter` variable to navigate
        this garden with the fewest number of blocks possible.
      grade5_bee_parameters_new8_instruction: |-
        That's a great function you've created!
        You are officially on your own now. Collect all the nectar. Make all the honey.
      grade5_bee_parameters_new9_instruction: |-
        Bonus Challenge! If you are feeling
        ambitious, try this puzzle. It is possible to collect all of the nectar and
        make all of the honey using only a For loop, a Repeat loop, a function call,
        and a turn. Try it all on your own, or view the hints to build it step-by-step.
        Great job with this stage!
      grade5_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      grade5_playlab_freeplay_instruction: "It's free play time! Have fun with all\nthe
        blocks in your tool box. "
      grade5_playlab_parameters_points1_instruction: "Here's the same game but most\nof
        the code is hidden. We've added a new function called `score_points.`\\r\n\\r\nAdd\na
        new parameter called `points` to the `player_score` function. \\r\n\\r\nThe\n`score_points`
        function should be able to both add and remove points from\n`player_score`
        depending on which actor is hit.\\r\nChanging the score by 1\nwill add a point,
        while changing the score by -1 will subtract a point.\\r\n\\r\nWhen\nyou're
        done, click \"Run\" to play.  When Dog scores 6 points, you will move\non
        to the next puzzle. "
      grade5_playlab_variables1_instruction: |-
        This time you don't have to write
        any code, just hit "Run" to play the game! In this game, you're the dog
        who is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      grade5_playlab_variables10_instruction: |-
        Edite a função chamada "patrulhe" para
        adicionar um parâmetro "personagem", assim podemos chamá-la para todos os personagens
        da tela. Lembre-se, os personagens correspondem aos números 1, 2 e 3.
      grade5_playlab_variables11_instruction: |-
        Adicione outro parâmetro chamado "velocidade"
        à função "patrulhe". Tente usar um bloco "defina velocidade" com o novo parâmetro "velocidade"
        para ajudar o Pinguim a pegar as duas bandeiras antes que os outros personagens peguem
        uma.
      grade5_playlab_variables12_instruction: |-
        Vamos nos divertir! Analise o
        código fornecido para ver se você consegue descobrir o que cada bloco faz.  \r
        Quando
        terminar, use as setas do teclado para controlar o cão e coletar todas as bandeiras.\r
        OBSERVAÇÃO:
        Você não precisa fazer nenhuma alteração no programa
      grade5_playlab_variables13_instruction: |-
        Use o bloco "quando o personagem tocar"
        para enviar o cão de volta para a parte superior esquerda SOMENTE se ele tocar em qualquer outro personagem.
      grade5_playlab_variables14_instruction: "It's free play time! Have fun with\nall
        the blocks in your tool box. "
      grade5_playlab_variables1ask_instruction: |-
        This time, when you press 'run',
        you will see a 'prompt' asking you for a number. This number will be stored
        in a variable used to set the dog's speed.\r
        \r
        \r
        Pay attention to how
        this program is written!
      grade5_playlab_variables2_instruction: |-
        A corrida do último desafio não foi
        muito justa! Altere a variável "velocidade_cão" para garantir que você possa coletar mais
        bandeiras do que o gato. O primeiro a coletar 10 bandeiras vence!
      grade5_playlab_variables3_instruction: |-
        Use as setas para a esquerda e para a direita para se mover,
        e a seta para cima para pular. Veja se você consegue coletar todas as bandeiras.
      grade5_playlab_variables4_instruction: |-
        Now we're using a variable called
        "height" to control how high the dog can jump. Update the "height" variable
        so that the dog can jump high enough to reach all the flags.
      grade5_playlab_variables5_instruction: |-
        You've seen now how a variable can
        be used to set the height of an actor's jump. How else could  you use a variable?\r
        \r
        Let's
        build a game! First we'll need a score. Try setting the 'points' variable
        to give yourself 10 free points!
      grade5_playlab_variables6_instruction: |-
        Use a seta para a direita para atirar tortas.\r
        \r
        Em
        nosso jogo, como podemos marcar pontos? Adicione 1 à variável "pontos" toda
        vez que o cão atingir o gato com um pedaço de torta. Use o evento "quando o personagem 2 tocar em alguma coisa"
        para acionar uma atualização em sua pontuação. Você pode incrementar sua variável
        definindo "pontos = pontos + 1". Aumente sua pontuação até 10 (um ponto
        de cada vez!) para passar de nível.
      grade5_playlab_variables6ask_instruction: |-
        This time, you need 100 points to
        win!  Don't worry though, you can choose how many points you earn each time
        you score a hit!\r
        Try adding the `ask` block and changing the number 1 out
        for the variable `value`.
      grade5_playlab_variables7_instruction: |-
        Legal, agora vamos garantir que esse jogo
        não seja muito fácil. Sempre que o cão (personagem 1) for atingido por um sanduíche
        do gato (personagem 2), você deve perder um ponto. Comece com 10 pontos para que
        o jogo não seja muito difícil. Faça sua pontuação cair de 10 para 0 para passar de nível.
      grade5_playlab_variables71_instruction: "Temos aqui nosso jogo de uma fase anterior,\nmas
        a maior parte do código está oculta. Há uma nova função chamada \"marcar_pontos\".\\r\n\\r\nEdite\na
        função para que um novo parâmetro \"pontos\" seja adicionado à variável \"pontos_jogador\".\n\\r\n\\r\nA
        variável \"pontos_jogador\" deve aumentar toda vez que o cão atingir o gato\ncom
        uma torta e diminuir toda vez que o gato atingir o cão com um sanduíche.\\r\n\\r\nObservação:\nQuando
        terminar, clique em \"Executar\" para jogar. Quando o cão marcar 6 pontos,
        você\nvai para o próximo desafio. "
      grade5_playlab_variables81_instruction: "Adicionamos uma última função para\nvocê.\\r\n\\r\nUse
        uma instrução \"se\" para que seu jogo chame a função \"suba de nível\"\nsomente
        quando \"pontos_jogador\" for maior que um determinado número.\\r\n\\r\nPor\nexemplo:
        \"pontos_jogador\" > 6\\r\n\\r\nJogue e chegue até o nível 3\npara ir para
        o próximo desafio. "
      grade5_playlab_variables9_instruction: |-
        Aqui temos uma função chamada "patrulhe".
        \r
        \r
        Edite-a para mover o gato 400 pixels para cima, e então 400 pixels para baixo.
      grade5_playlab_variables_freeplay_instruction: |-
        Free Play time! Here are all
        of the variables we've played with so far in this stage, as well as a few
        more in case you want them. \r
        \r
        Notice that there are now so many blocks
        in our toolbox that they need to be organized!  Here, we've put each piece
        into an appropriate category.  Take some time to explore everything that is
        available. When you're done browsing, make a game or story using repeats,
        variables, and events.  \r
        \r
        Hint: scroll down to see all the commands
        in the workspace.
      grade5_playlab_variables_jump1_instruction: |-
        This puzzle uses a hidden function
        that makes the dog jump when the 'up' arrow is pressed. The height of the
        jumps can be set at the start of the game using the 'jumpPower' variable.
        Try to touch all of the flags!
      grade5_prompt_test_instruction: |-
        Variables aren't always numbers. What if
        you wanted to store a word or text? Experiment with the new `ask` block.
      gradeK_sequence_4_instruction: Try this one yourself from the beginning.
      gradek_adventurer_loops1_instruction: |
        This is Laurel the Adventurer!  Can
        you move her around and get gold?
      gradek_adventurer_loops10_instruction: |-
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loops2_instruction: |-
        How can Laurel collect all five piles
        of gold using only one `[E-->]` block?
      gradek_adventurer_loops3_instruction: |-
        Can you fix Laurel's path to get all
        of this gold?
      gradek_adventurer_loops4_instruction: |-
        Use what you learned to get all of the
        coins.
      gradek_adventurer_loops4a_instruction: |-
        Add to this code to collect all of
        the coins.
      gradek_adventurer_loops5_instruction: |-
        What should you add to this code to
        get all of the gold?
      gradek_adventurer_loops6_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_instruction: Write the code to get all of this gold.
      gradek_adventurer_loops7_challenge_instruction: |-
        **Challenge:** The gold goes
        all the way up these stairs!  Write the code to help me get it all.
      gradek_adventurer_loops8_instruction: |-
        Help me get all of the gold from this
        deep valley.
      gradek_adventurer_loops9_instruction: |-
        Help me get all of the gold from this
        cave.
      gradek_adventurer_loopsFP_instruction: |-
        Eureka!  Collect as much gold as you
        can!
      gradek_adventurer_loopsPre_instruction: |-
        This is Laurel the Adventurer.  Mover
        her around and get as much gold as you can!
      gradek_artist_loops1_instruction: |-
        Help the artist draw this line two times
        forward.
      gradek_artist_loops2_instruction: |-
        Our artist is trying to draw a line five
        times, but can't get it right.  Can you help?
      gradek_artist_loops3_instruction: |-
        Now, use a `repeat` loop to draw this line
        five times!
      gradek_artist_loops4_instruction: |-
        Draw a line seven steps long. This will
        become our horizon.
      gradek_artist_loops5_instruction: Let's put a nice hill in the back.
      gradek_artist_loops6_instruction: |-
        Use the `repeat` loop to add waves to the
        water.
      gradek_artist_loops7_instruction: We need a ladder up to the boat.
      gradek_artist_loops8_instruction: |-
        Challenge: The stairs down to the dock are
        broken.  Help me fix them.
      gradek_artist_loops9_instruction: |-
        Time to head back to land. Help me put down
        stones so I don't fall in!
      gradek_artist_loopsA_instruction: |-
        Help me build steps to watch the ship sail
        away.
      gradek_artist_loopsFP_instruction: |-
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      gradek_artist_loopsPre_instruction: |-
        This is a new type of puzzle called "Artist".
        Play with the level and draw something fun.
      gradek_playlab_events1_instruction: |-
        Make your robot say "Hello!" when the
        button is clicked.
      gradek_playlab_events1a_instruction: |-
        Add a block so that when you click the
        "up" button, Olive the Cat walks up.
      gradek_playlab_events1c_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      gradek_playlab_events2_instruction: |-
        Edit the code so that when the second
        bird is clicked, your program plays a sound!
      gradek_playlab_events2a_instruction: |-
        Add a block so that when you click "down"
        Olive the Cat walks down.
      gradek_playlab_events2c_instruction: |-
        Help Jorge the Dog get moving by connecting
        the `move left` block to the `when left` event block that is already in the
        workspace.
      gradek_playlab_events3_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3a_instruction: |-
        When the third bird is clicked, the background
        should change to a city. Can you add code to make this happen?
      gradek_playlab_events3b_instruction: |-
        Add a button so that Olive the Cat moves
        right when you click the "right" button.
      gradek_playlab_events3c_instruction: |-
        Now, get Jorge to move right when the
        `right` button is clicked.
      gradek_playlab_events4_instruction: |-
        Add code to make something happen when
        the fourth bird is clicked. Be creative!
      gradek_playlab_events4a_instruction: |-
        Add a block so that Olive the Cat moves
        left when you click the "left" button.
      gradek_playlab_events4c_instruction: |-
        Add events to have Jorge move up and
        down when the `up` and `down` buttons are pressed.
      gradek_playlab_events5_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      gradek_playlab_events5a_instruction: |-
        About My Robot Project! Write code so
        that clicking on each bird shows a new fact about your robot.
      gradek_playlab_events5c_instruction: |-
        Make this more interesting by changing
        the background and playing a random sound when Jorge is clicked.
      gradek_playlab_eventsA_instruction: |-
        Now, have the cat change to a random size
        AND have it play a random sound when you click the center button.
      gradek_playlab_eventsFP_instruction: |-
        Add anything you want to this game.  Can
        you make the dinosaur disappear when Jorge runs into him?
      gradek_playlab_eventsPre_instruction: |-
        This is a Play Lab level.  Move blocks
        to the workspace and see what happens!
      group test_instruction: Make a game
      harvester_Kahoot_instruction: |-
        Now help the farmer pick the corn, lettuce,
        **and** pumpkin.
      harvey_pixelation_instruction: |-
        Encode an image of anything you like using
        binary. The binary language will be represented with '0' and '1' only.
      harvey_snowflake_artist1_instruction: Get your snowflake ready for 3d printing!
      harvey_snowflake_artist2_instruction: Get your snowflake ready for 3d printing!
      harvey_tictactoe_instruction: |-
        Let's play a game! Draw as many X's as you
        can! Can you get 3 in a row?
      iceAgeLoopsforVideo_instruction: |-
        Can you get to the acorn with just one `move
        forward` block?
      iceage_click_hello_instruction: "Can you help Sid call for his friends when\nyou
        click on him? "
      iceage_click_hello_2018_instruction: "Can you help Sid call for his friends\nwhen
        you click on him? "
      iceage_free_play_instruction: 'Time to create your own game or story! '
      iceage_free_play_2018_instruction: 'Time to create your own game or story!

'
      iceage_free_playcourseF_IceAge_11_instruction: "Time to create your own game\nor
        story! "
      iceage_hello1_instruction: |-
        Help Sid say "Hello!" by dragging the `say` block
        out and connecting it to the bottom of the `when run` event.
      iceage_hello1_2018_instruction: |-
        Help Sid say "Hello!" by dragging the `say`
        block out and connecting it to the bottom of the `when run` event.
      iceage_hello2_instruction: |-
        Help Manny and Sid greet each other by using the
        the `actor ___ say` block twice.
      iceage_hello2_2018_instruction: |-
        Help Manny and Sid greet each other by using
        the the `actor ___ say` block twice.
      iceage_move_events_instruction: |-
        Write the code to help Scrat get all of the
        acorns!
      iceage_move_events_2018_instruction: |-
        Write the code to help Scrat get all
        of the acorns!
      iceage_move_to_actor_instruction: |-
        Connect a block to the `when actor touches`
        event to play a sound when Diego finds Manny.
      iceage_move_to_actor_2018_instruction: |-
        Connect a block to the `when actor
        touches` event to play a sound when Diego finds Manny.
      iceage_move_to_flag_instruction: |-
        Scrat is looking for his acorn! Can you help
        him move the last 200 pixels?
      iceage_move_to_flag_2018_instruction: |-
        Scrat is looking for his acorn! Can
        you help him move the last 200 pixels?
      iceage_repeat_instruction: |-
        Help Granny get some exercise by moving left and
        right repeatedly.
      iceage_repeat_2018_instruction: |-
        Help Granny get some exercise by moving left
        and right repeatedly.
      iceage_sound_and_points_instruction: "Can you finish this program to make it\nso
        that you both **play a sound** and **score a point** when Sid and Granny\ncollide? "
      iceage_sound_and_points_2018_instruction: "Can you finish this program to make\nit
        so that you both **play a sound** and **score a point** when Sid and Granny\ncollide? "
      iceage_throw_hearts_instruction: |-
        Use the `actor __ throw` command to have
        Sid (actor 1) throw hearts at Granny (actor 2) and set Granny's mood to happy
        when she gets hit with them.
      iceage_throw_hearts_2018_instruction: |-
        Use the `actor __ throw` command to
        have Sid (actor 1) throw hearts at Granny (actor 2) and set Granny's mood
        to happy when she gets hit with them.
      iceage_warn_ice_age_instruction: |-
        Change the scene to an icy background and
        set Sid’s (actor 1) speed to fast.
      iceage_warn_ice_age_2018_instruction: |-
        Change the scene to an icy background
        and set Sid’s (actor 1) speed to fast.
      jessie-test_instruction: Lots of instructions
      k-1 maze 1_instruction: Você pode me mover para o oeste para chegar até o porco?
      k1stickerfreeplay_instruction: |-
        The artist saw something funny in the distance.  Draw
        what you think he saw.
      kikiTesta_instruction: |-
        Our adventurer wants to collect coins.  But she can
        only use 4 blocks to get them.\r
        \r
        Can you help her grab as many as she
        can using just 4 blocks?
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      level 'grade3_Loops_10_instruction: |-
        Such a busy bee!\r
        \r
        Help bee collect
        all of the nectar and make all of the honey with the fewest blocks possible.
      level 'grade3_Loops_11_instruction: |-
        The shape of this path is different than
        the others. \r
        \r
        Can you collect all of the nectar using as few blocks
        as possible?
      level 'grade3_Loops_12_instruction: |-
        Can you find the quickest way for the
        bee to collect all of the nectar and make all of the honey?
      level 'grade3_Loops_2_instruction: |-
        This time, use a loop to gather all of
        the nectar.
      level 'grade3_Loops_3_instruction: |-
        Use a `repeat` loop to collect all of the
        nectar.
      level 'grade3_Loops_4_instruction: |-
        Now use the `repeat` block to collect all
        of the nectar and make all of the honey.
      level 'grade3_Loops_5_instruction: |-
        What a beautiful field of flowers!   Help
        the bee visit each one.  Can you find a way to do it with fewer than 7 blocks?
      level 'grade3_Loops_6_instruction: |-
        How many times can loops help you in this
        puzzle?  \r
        \r
        Loops are your friend! Use a few of them to complete this
        puzzle with the fewest blocks possible.
      level 'grade3_Loops_7_instruction: |-
        Those flowers look tasty!\r
        \r
        Collect
        nectar from each of the flowers using the fewest blocks possible.
      level 'grade3_Loops_8_instruction: |-
        Collect all the nectar and make all of
        the honey using the fewest blocks possible.
      level 'grade3_Loops_9_instruction: |-
        Collect nectar from each flower and make
        honey at each honeycomb using the fewest blocks possible.
      level grade3_Loops_2_instruction: |-
        This time, use a loop to gather all of the
        nectar.
      loop pet test_instruction: |-
        Last time, you practiced using the "repeat forever"
        loop to make a sprite do something forever. This time, we will use it to make
        a virtual pet. \r
        \r
        This dog's name is Daisy. Daisy LOVES to snack on
        carrots. Use the "drag and drop" block to move the carrot to Daisy.
      loops_forvideo_angrybirds_ab_instruction: |-
        Use loops to get the bird to the
        pig!
      loops_forvideo_angrybirds_cf_instruction: |-
        Use loops to get the bird to the
        pig!
      loops_forvideo_bee_cf_instruction: |-
        Use loops to help the bee get nectar from
        all the flowers!
      loops_forvideo_collector_ab_instruction: |-
        Use loops to help the collector get
        all the gems!
      loops_forvideo_collector_cf_instruction: |-
        Use loops to help Laurel collect
        gems!
      loops_forvideo_harvester_ab_instruction: |-
        Use loops to help the harvester pick
        the corn!
      loops_forvideo_harvester_cf_instruction: |-
        Use loops to help the harvester pick
        her crops!
      loops_forvideo_iceage_ab_instruction: Use loops to get Scrat to the acorn!
      loops_forvideo_iceage_cf_instruction: Use loops to get Scrat to the acorn!
      love_spring_1_instruction: |-
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |-
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      marina_gameLab_play_instruction: Clone this level and make your own blocks!
      mike3bit_instruction: |-
        We start you with the 4x2 image Maddie was creating,
        but we've left out the last few pixels. Finish off the image by figuring
        out which colors are missing and encoding them.
      mike3bitbird_instruction: |-
        Here's an example of an image made with 3-bit color.
        Try changing it to understand how it works. If you want to reset the image,
        press "Start Over".
      mike3bitfreeplay_instruction: |-
        Make something awesome and share it with your
        classmates! You can copy and paste the value of a pixel to use it repeatedly.
      mike3bitmario_instruction: |-
        A careless binary coder typed in ONE extra 0 or
        1 somewhere within this image's data. The extra bit that is causing Mario
        to glitch out! \r
        \r
        Delete the extra bit to restore Mario back to normal!
      pet game 1_instruction: |-
        Use the "make a new sprite" block to make yourself
        a pet!
      pet game 2_instruction: |-
        Your pet needs some exercise! Use the "add behavior"
        block to get them moving.
      pet game 3_instruction: |-
        Pets love toys! Use a second "make sprite" block
        to give your pet a toy, then use the "move towards" behavior to make your
        pet run to their new toy.
      pet game 4_instruction: |-
        When your pet gets to their toy, they get excited!
        Use the "when touches" block to detect when your pet gets to their toy.\r
        \r
        When
        that happens, use the "remove behavior" block to make them stop walking,
        and the "add behavior" block to make them have a dance party!
      pet game 5_instruction: |-
        You can add lots more things for your pet to interact
        with! Play around with the "set sprite" block and make more stuff anywhere
        you want it!
      pet game 6_instruction: |-
        It's important for pets to learn to follow commands.
        Use the "when clicked" block to teach your pet to only start wandering after
        you click on them.
      pet game 7_instruction: |-
        Pets need to learn to stop, too! Use the "when clicked"
        block to teach your pet to stop wandering after you click on them.
      pet game 8_instruction: |-
        Your pet now has two toys! Use the "when clicked"
        block to get them to move to the toy you click on
      pet game 9_instruction: |-
        Your pet has been so good, they deserve a treat. Use
        the "add behavior" block to make the bone draggable, then drag it to your
        pet.
      playEventsK1_instruction: |-
        This game is called "Play Lab".  See if you can
        figure out what each block does.
      playEventsK2_instruction: |-
        Jorge wants to say "Hi there."\r
        \r
        Can you
        help?
      playEventsK3_instruction: |-
        Jorge wants to be scratched behind the ears!  Can
        you make it so that when you click Jorge he is happy?
      playEventsK4_instruction: |-
        Can you make it so that Jorge the dog chases Robin
        the bird when you click the up arrow?
      playEventsK5_instruction: |-
        Now add code so that Robin flies away when you click
        the forward arrow.
      playEventsK6_instruction: |-
        Have Robin talk back to Jorge when you click on
        her.
      playEventsK7_instruction: What else can you do in this fun scene?
      playLabDebugVideo1_instruction: |-
        Jorge the Dog wants to say "Hi there."  Can
        you help him?
      ramp_artist_loops1_instruction: |-
        Move forward by 60 pixels to complete this
        puzzle.
      ramp_artist_loops1_2018_instruction: |-
        Move forward by 60 pixels to complete
        this puzzle.
      ramp_artist_loops2_instruction: |-
        Move forward five times and make this colored
        line.
      ramp_artist_loops2_2018_instruction: |-
        Move forward five times and make this
        colored line.
      ramp_artist_loops3_instruction: Use a `repeat` loop to draw five colored dashes.
      ramp_artist_loops3_2018_instruction: |-
        Use a `repeat` loop to draw five colored
        dashes.
      ramp_artist_loops4_instruction: |-
        What happens when you add a 72 degree right
        turn after everything else inside your loop?
      ramp_artist_loops4_2018_instruction: |-
        What happens when you add a 72 degree
        right turn after everything else inside your loop?
      ramp_artist_loops5_instruction: Use loops to draw this staircase.
      ramp_artist_loops5_2018_instruction: Use loops to draw this staircase.
      ramp_artist_loops6_instruction: Edit your loop to draw this staircase.
      ramp_artist_loops6_2018_instruction: Edit your loop to draw this staircase.
      ramp_artist_loops7_instruction: |-
        Look for a pattern and make this code shorter
        using loops!
      ramp_artist_loops7_2018_instruction: |-
        Look for a pattern and make this code
        shorter using loops!
      ramp_artist_loops8_instruction: |-
        Look for a pattern and make this code shorter
        using loops.
      ramp_artist_loops8_2018_instruction: |-
        Look for a pattern and make this code
        shorter using loops.
      ramp_artist_loops8_clone_instruction: |-
        Look for a pattern and make this code
        shorter using loops.
      ramp_artist_loops9_instruction: Solve this puzzle by drawing a square.
      ramp_artist_loops9_2018_instruction: Solve this puzzle by drawing a square.
      sample1_instruction: |-
        Our adventurer wants to collect coins.  But she can only
        use 4 blocks to get them.\r
        \r
        Can you help her grab as many as she can
        using just 4 blocks?
      sample10_instruction: Now you can use loops to draw whatever you like!
      sample10a_instruction: |-
        You have helped the adventurer and her bee!  As a reward,
        please stay and play around in my magical village. \r
        \r
        You should have
        everything you need to create a game of your own.
      sample2_instruction: |-
        Use what you've learned to help bee gather all of this
        honey using only the blocks that you have here.
      sample2a_instruction: |-
        Use what you've learned to help bee gather all of this
        honey using only 4 blocks.
      sample3_instruction: |-
        Now you can help bee make all of the honey using just
        the blocks in the toolbox.
      sample3assessment_instruction: |-
        Can you figure out how to gather all of this
        nectar in just one try?
      sample4_instruction: |-
        Our adventurer has found a stash of coins in this cave.\r
        \r
        Can
        you help her grab as many as she can using just 7 blocks?
      sample5_instruction: Help bee make all of the honey.
      sample6_instruction: 'Challenge: Help bee make all of the honey.'
      sample7assessment_instruction: |-
        Can you help bee make all of the honey in just
        one try?
      sample8_instruction: |-
        Look at this trove of coins! How many can you get the
        adventurer to grab?
      sample9_instruction: 'Use loops to help the artist connect all of the dots.

'
      sample9a_instruction: |-
        The wizard has found his potions!  Use everything you
        have learned to help him collect them.
      scrat 16 (copy 1)_instruction: |-
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: |-
        Bolota! Bolota! Bolota! Use um bloco "se" para me levar até lá
        com o menor número de blocos.
      scrat 17 (copy 1)_instruction: |-
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: |-
        Ok, vamos fazer novamente para pegar a prática - este não é
        muito diferente, mas cuidado com a parede!
      scrat 18 (copy 1)_instruction: |-
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: |-
        Os blocos "se-senão" verificam uma condição e, em seguida,
        fazem uma coisa OU outra. Para que eu chegue até a bolota, tente usar este novo bloco.
      scrat 19 (copy 1)_instruction: |-
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: |-
        Vamos praticar o uso do bloco "se-senão" mais uma vez. Você consegue
        acertar na primeira tentativa?
      scrat 20_instruction: |-
        Você consegue adicionar somente 3 blocos para me ajudar a resolver um labirinto mais
        complexo? Se você fizer isso corretamente, eu posso percorrer qualquer caminho cheio de curvas,
        não importa o comprimento. Depressa! O gelo está derretendo!
      skratDebugVideo1_instruction: Get Skrat to the Acorn.
      subgoal U3 L4 introducing subgoal labels_instruction: |-
        Introduce orient turtle
        and move turtle
      subgoal U3L2 Using Simple Commands_instruction: |-
        Draw a 1x1 square above and
        to the left of the turtle's starting position. Click to see full instructions.
      subgoalU3L2_TurtleSquare_right_instruction: |-
        Draw a square to the front and
        to the right of the starting location. (Click to show full instructions)
      template test_instruction: what up
      testArtistForTestK_instruction: |-
        The Artist is trying to draw a line five times,
        but can't get it right.  Can you help?
      test_sarah_instruction: hi
      u3-old-drawing-view_instruction: DO This
      valentine_artist_03_instruction: Now try something on your own!
      weird_playLab_instruction: |-
        About My Robot Project! Write code so that clicking
        on each bird shows a new fact about your robot.
