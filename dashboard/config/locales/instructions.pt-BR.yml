"pt":
  data:
    instructions:
      2-3 _instruction: Flores roxas podem ter 1 ou 0 néctar. Tenha cuidado para não
        coletar néctar de uma flor roxa se ela não tiver nenhum néctar.
      2-3 Artist 1 new_instruction: Oi, eu sou um artista. Você pode escrever códigos
        para me fazer desenhar quase qualquer coisa. Use alguns blocos para me fazer
        desenhar sobre as linhas cinzas na imagem. (Cada linha tem o comprimento de
        100 pixels)
      2-3 Artist 11_instruction: "Faça uma borda na placa de pare criando um octógono\ncom
        8 lados, com 100 pixels de comprimento cada. Quantos graus você deve virar?
        (Dica:\nquanto é 360 divido por 8?) \n"
      2-3 Artist 12_instruction: |
        Configure o bloco "repita vezes" para que ele crie
        um "círculo" para terminar o globo ocular. Se cada movimento virar um grau para a direita,
        quantas vezes você precisa repetir para completar o círculo? 180? 360? 500?
      2-3 Artist 2 new_instruction: "Esta casa tem uma parede inacabada. Cada lado\ntem
        100 pixels de comprimento, mas a parede inacabada tem apenas 50. Complete
        a parede. \n"
      2-3 Artist 2_instruction: "Esta casa tem uma parede inacabada. Cada lado tem\n100
        pixels de comprimento, mas a parede inacabada tem apenas 50. Complete a parede.
        \n"
      2-3 Artist 3.4_instruction: |
        O bloco pule move o artista sem desenhar.
        Desenhe a linha tracejada usando os bloco pule e desenhe.
      2-3 Artist 3_instruction: Esse chapéu tem 100 pixels de altura. Desenhe um chapéu
        que tenha 70 pixels a menos.
      2-3 Artist 3new_instruction: |
        O chapéu vermelho tem 100 pixels de altura. Termine o desenho
        de um chapéu preto que seja 70 pixels menor. A largura do chapéu preto é de 50 pixels.
      2-3 Artist 4_instruction: Ajude-me a completar a casa para o gato.
      2-3 Artist 5_instruction: |
        Substitua esse código por um bloco "repita vezes"
        para desenhar a mesma casa usando apenas 3 blocos.
      2-3 Artist 6_instruction: 'Essa casa precisa de um telhado! Desenhe o triângulo.
        Dica: todos os 3 lados têm o mesmo comprimento.'
      2-3 Artist 7_instruction: 'Termine de desenhar a metade direita da última janela.
        Cada quadrado da janela tem 25 pixels. '
      2-3 Artist 8_instruction: |
        Complete os quartos para cada um dos animais dividindo
         o retângulo em 2 quadrados de mesmo tamanho. O retângulo tem 200 pixels de largura
        e 100 pixels de altura.
      2-3 Artist 9_instruction: Termine esta pipa
      2-3 Artist Assessment 1_instruction: 'Avaliação: termine de desenhar o último
        dente, 25 pixels de largura e 25 pixels de altura.'
      2-3 Artist Debugging 1_instruction: Você consegue fazer esse chapéu com 100
        pixels de altura?
      2-3 Artist Debugging 10_instruction: |
        O controlador de direção do controle do meu jogo
        é muito estreito. Dica: faça-o 10 pixels mais largo
      2-3 Artist Debugging 11_instruction: Ajude-me a terminar meu lindo floco de
        neve. Quantas vezes preciso "repetir" para terminá-lo?
      2-3 Artist Debugging 12_instruction: Eu devo adicionar uma onda do mar nessa
        cena. Você pode me ajudar?
      2-3 Artist Debugging 2_instruction: 'O código para os três bigodes que você
        vê está errado. Dica: cada bigode tem o comprimento de 75 pixels. Corrija
        esse código para desenhar os bigodes.'
      2-3 Artist Debugging 3_instruction: |
        Meu barco tem um buraco! Você consegue corrigi-lo
        alterando o ângulo da linha? Dica: o último ângulo está 15 graus fora de lugar.
      2-3 Artist Debugging 4_instruction: |
        Qual é a imagem que estamos tentando
        desenhar? Termine de conectar os pontos usando as linhas e ângulos apropriados.
      2-3 Artist Debugging 5_instruction: |
        O código para a perna e para o pé que você vê
        está errado. Dica: o pé está muito comprido, pode ser necessário excluir um passo (pé... passo... trocadilho)
      2-3 Artist Debugging 6_instruction: |
        Parece que estou sentado em uma cadeira
        sem uma perna. Edite os blocos para desenhar a perna.
      2-3 Artist Debugging 7_instruction: |
        Parece que o C no código está desenhado ao contrário.
        Você consegue fazê-lo parecer com um C?
      2-3 Artist Debugging 8_instruction: |
        Meu cata-vento não está pronto. Quantas
        vezes eu preciso repetir para terminá-lo?
      2-3 Artist Debugging 9_instruction: |
        O código para este caule está incorreto. Dica:
        o ângulo está 60 graus fora de lugar
      2-3 Artist Debugging Assessment 1_instruction: |
        Esta forma é muito pequena. Você
        pode fazê-la maior? Dica: ela deve ter 75 pixels a mais de cada lado.
      2-3 Artist Free Play_instruction: Atividade livre! Desenhe o que você quiser.
      2-3 Artist Functions 1_instruction: |
        Olá. Mim artista zumbi. Mim ama desenhar!
        Me ajude a desenhar os óculos quadrados. Dica: a haste entre as lentes é
        25 pixels menor que o comprimento do quadrado.
      2-3 Artist Functions 10_instruction: |
        Aqui temos duas funções, uma para desenhar uma
        engrenagem grande e outra para desenhar uma engrenagem pequena. Use-as para desenhar o interior de uma máquina!
      2-3 Artist Functions 11.5_instruction: |
        Aqui está a mesma função "Desenhe um hexágono".
        O que acontece se você virar apenas 60 graus a cada repetição?
      2-3 Artist Functions 11_instruction: |
        Renomeamos a função "desenhe um quadrado"
        como "desenhe um hexágono", mas ela ainda desenha apenas quadrados! Você consegue
        modificar a função "desenhe um hexágono" para desenhar um hexágono com lados de 50 pixels, e
        desenhar a imagem usando a função?
      2-3 Artist Functions 12_instruction: "Funções são ótimas para desenhar\ncoisas
        complexas várias vezes. Você consegue usar a função \"desenhe uma flor\"\npara
        preencher o resto do canteiro de plantas? (Dica: as plantas estão todas separadas\npor
        um comprimento de 100 pixels)  \n"
      2-3 Artist Functions 13_instruction: |
        Fornecemos quatro funções para você.
        Use-as da forma que quiser dentro de um ou mais laços para criar imagens que
        você pode compartilhar com seus amigos. Pressione "Executar" para ver um exemplo.
      2-3 Artist Functions 2_instruction: |
        As funções permitem que você defina novos blocos! Movemos
        os blocos para desenhar um quadrado para dentro de uma função chamada "desenhe um quadrado".
        Você consegue usar a função "desenhe um quadrado" para criar os óculos? Os quadrados são separados
        por 75 pixels.
      2-3 Artist Functions 3_instruction: |
        Edite a função para desenhar um quadrado com
        lados de 115 pixels de comprimento e desenhe os óculos maiores. Agora, os quadrados estão separados por 45 pixels.
      2-3 Artist Functions 4_instruction: |
        Use o bloco "repita" para desenhar esses
        3 quadrados.
      2-3 Artist Functions 7_instruction: |
        Use a função "desenhe uma casa" para desenhar
        duas casas usando dois parâmetros diferentes. (Dica: a primeira casa tem 100 pixels).
      2-3 Artist Functions 9_instruction: |
        Esta é uma função para flocos de neve. Experimente
        usá-la para criar uma cena de inverno! Esse nível é livre, então não há
        desafios para resolver. Divirta-se!
      2-3 Artist Loops 1_instruction: |
        Você consegue fazer um hexágono com lados de
        100 pixels de comprimento para terminar a célula? Lembre-se, isso significa que você só vai
        precisar virar 60 graus!
      2-3 Artist Loops 10_instruction: |
        O que acontece com o design quando fazemos nossa
        etapa final com metade do comprimento?
      2-3 Artist Loops 11_instruction: |
        Agora, vamos colocar *outro* laço em torno de toda
        a criação! Não se esqueça de adicionar um ângulo ao final do laço externo.
      2-3 Artist Loops 2_instruction: |
        Agora, use um bloco "repita" para transformar a célula em uma
        concha.
      2-3 Artist Loops 4_instruction: |
        Quer ver o que acontece quando repetimos essa
        forma várias vezes usando um laço?
      2-3 Artist Loops 5_instruction: |
        Agora, vamos fazer uma pequena alteração no laço
        e ver como nossas imagens ficam diferentes.
      2-3 Artist Loops 6_instruction: |
        Adicione mais um movimento e outra ação de virar dentro
        do laço e veja como seu design muda.
      2-3 Artist Loops 7_instruction: "Podemos usar laços para criar todos os tipos
        de polígonos. Você \nconsegue criar um losango dentro desse hexágono?\n"
      2-3 Artist Loops 8_instruction: Vamos colocar ambos os elementos dentro de um
        laço.
      2-3 Artist Loops 9_instruction: "Vamos repetir os mesmos elementos, mas \nagora
        vamos adicionar alguma distância entre eles.\r\nUse o mesmo código usado \nanteriormente,
        mas adicione um passo à frente no final do laço externo."
      2-3 Artist Loops New 1_instruction: |
        Vamos desenhar a cabeça do robô! Você pode
        fazer um quadrado com lados de 100 pixels?
      2-3 Artist Loops New 10_instruction: |
        Agora vamos conectar um monte de V's,
        desenhando-os em um laço.
      2-3 Artist Loops New 11_instruction: |
        Dessa vez, vamos desenhar 24 vezes. Adicione
        uma ação de virar à esquerda em 30 graus ao código e coloque tudo em um bloco repita.
      2-3 Artist Loops New 12_instruction: |
        Desenhe um diamante com lados de 100 pixels.
      2-3 Artist Loops New 13_instruction: Agora, desenhe o diamante 3 vezes em um
        laço.
      2-3 Artist Loops New 14_instruction: |
        Agora, vamos desenhar o diamante 10 vezes,
        mas vamos rotacionar 90 graus entre cada diamante.
      2-3 Artist Loops New 15_instruction: Desenhe algo divertido.
      2-3 Artist Loops New 2_instruction: |
        Aqui temos alguns dos códigos que você usou para desenhar
        aquele quadrado. O que acontece se você usar o bloco repita para executar esse código 4 vezes?
      2-3 Artist Loops New 9_instruction: |
        Desenhe um V simples com ambos os lados com 50
        pixels para completar a seta.
      2-3 Artist Match Hex Pic_instruction: 'Correspondência: ajude a terminar o hexágono.'
      2-3 Artist Match Rho Pic_instruction: 'Correspondência: termine o código que
        falta.'
      2-3 Artist Match Sq Pic_instruction: 'Correspondência: complete o código que
        falta'
      2-3 Artist Match Tri pic_instruction: 'Correspondência: preencha o código que
        falta.'
      2-3 Artist Nested Loops 1_instruction: "Você usou laços para desenhar formas
        antes,\nmas você sabia que pode colocar um laço dentro de outro laço?\r\nRepita
        este bloco\nde código inteiro 3 vezes para desenhar o padrão."
      2-3 Artist Nested Loops 10_instruction: |
        Repita este código 12 vezes para completar
        o padrão.
      2-3 Artist Nested Loops 11_instruction: |
        Repita este código 4 vezes para completar
        o padrão, vire 90 graus após cada círculo.
      2-3 Artist Nested Loops 12_instruction: |
        Repita este código 12 vezes para completar
        as espirais.
      2-3 Artist Nested Loops 2_instruction: |
        Agora, repita o triângulo 6 vezes. Depois
        de cada triângulo, você precisa virar 60 graus antes de desenhar o próximo.
      2-3 Artist Nested Loops 3_instruction: |
        Você vai precisar repetir o triângulo 12
        vezes para desenhar este padrão. Divida o número de graus em um círculo (360)
        pelo número de formas que você está desenhando (12) para descobrir quanto virar
        depois de cada forma.
      2-3 Artist Nested Loops 4_instruction: |
        Repita este diamante 12 vezes para desenhar
        uma flor. Dica: 12 diamantes são como os 12 triângulos que você fez - quanto
        você precisa virar depois de cada forma?
      2-3 Artist Nested Loops 5_instruction: |
        Preencha as janelas deste edifício com
        um laço aninhado. As janelas têm 20 pixels de comprimento e são separadas por 20 pixels.
      2-3 Artist Nested Loops 6_instruction: |
        Esse dinossauro tem 8 espinhos ao longo
        de sua cauda. Cada espinho tem 30 pixels de comprimento. Repita o triângulo 8 vezes, mas
        lembre-se de avançar depois de cada um.
      2-3 Artist Nested Loops 7_instruction: |
        Repita esse triângulo 10 vezes para desenhar
        o sol. Você vai precisar mover e virar depois de cada triângulo. Você pode descobrir
        quanto virar dividindo o número de graus em um círculo pelo
        número de formas que o compõem.
      2-3 Artist Nested Loops 8_instruction: |
        Agora, vamos adicionar um pouco de grama à imagem.
        Cada tufo de grama é separado por 50 pixels.
      2-3 Artist Nested Loops 9_instruction: |
        Vamos terminar essa imagem adicionando
        uma flor. Repita o diamante 12 vezes para desenhar sua flor.
      2-3 Artist Nested Loops Free Play_instruction: |
        Atividade livre. Desenhe algo legal
        com laços aninhados.
      2-3 Bee Conditionals 1_instruction: |
        Olá! Eu sou uma abelha. Ajude-me a coletar o néctar
        da flor.
      2-3 Bee Conditionals 10_instruction: "As flores roxas podem ter 1 ou 0 néctar.\nTenha
        cuidado para não coletar néctar de uma flor roxa se ela não\ntiver néctar.\r\n"
      2-3 Bee Conditionals 11_instruction: Colete néctar onde as flores têm néctar.
      2-3 Bee Conditionals 12_instruction: |
        Use um laço para verificar e coletar o néctar
        de todas essas flores.
      2-3 Bee Conditionals 13_instruction: |
        Colete néctar e produza mel. Dica:
        o que acontece se você usar a condição "se houver néctar" em uma flor vermelha? Você pode
        completar isso com um laço?
      2-3 Bee Conditionals 14_instruction: |
        Colete néctar e produza mel. Tenha cuidado
        para não coletar néctar de uma flor roxa se ela não tiver néctar.
      2-3 Bee Conditionals 15_instruction: Colete néctar das quatro flores.
      2-3 Bee Conditionals 2_instruction: |
        Olá, eu sou uma abelha! Ajude-me a coletar todo
        o néctar das flores. Use um laço.
      2-3 Bee Conditionals 3_instruction: |
        Ajude-me a coletar todo o néctar das
        flores e a produzir mel. Use um laço.
      2-3 Bee Conditionals 4_instruction: |
        Ajude-me a coletar todo o néctar das
        flores e a produzir todo o mel.
      2-3 Bee Conditionals 5_instruction: |
        As flores roxas podem ter 1 ou 0
        néctar, mas você não sabe quanto! Tenha cuidado para não coletar néctar de
        uma flor roxa se ela não tiver néctar. Verifique se o néctar é igual a 1
        usando o bloco se.
      2-3 Bee Conditionals 6_instruction: |
        Verifique essa flor com um bloco "se"
        para ver se há algum néctar disponível.
      2-3 Bee Conditionals 7_instruction: |
        Colete o néctar de cada flor que
        tiver néctar disponível.
      2-3 Bee Conditionals 8_instruction: |
        Este campo tem flores vermelhas e roxas.
        As flores vermelhas têm uma quantidade de néctar conhecida, mas o néctar das flores roxas é desconhecido.
        Colete todo o néctar.
      2-3 Bee Conditionals 9_instruction: Colete todo o néctar de cada flor.
      2-3 Bee Conditionals Assessment 1_instruction: |
        Avaliação: Colete todo o
        néctar. Tenha cuidado para não coletar néctar de uma flor roxa se ela não
        tiver néctar.
      2-3 Bee Debugging 1_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 10_instruction: |
        Esses blocos estão me incomodando. Conserte
        o(s) erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 2_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 3_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 4_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 5_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel. Agora você pode
        usar os botões Executar e Passo.
      2-3 Bee Debugging 6_instruction: "Esses blocos estão me incomodando. Conserte
        o(s)\nerro(s) para coletar todo o néctar e produzir todo o mel. \n"
      2-3 Bee Debugging 7_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 8_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging 9_instruction: |
        Esses blocos estão me incomodando. Conserte o(s)
        erro(s) para coletar todo o néctar e produzir todo o mel.
      2-3 Bee Debugging Assessment 1_instruction: |
        Avaliação:  Esses blocos estão
        me incomodando. Conserte o(s) erro(s) para coletar todo o néctar e produzir
        todo o mel.
      2-3 Bee Functions 1_instruction: |
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 2 néctares" para coletar o néctar de cada
        flor.
      2-3 Bee Functions 10_instruction: |
        As flores roxas podem ter 1 ou 0 néctar.  Crie
        uma função que coleta néctar apenas das flores que têm néctar.
      2-3 Bee Functions 2_instruction: |
        Funções são blocos de código que realizam
        uma tarefa. Use a função "obtenha 5" para coletar 5 néctares de uma vez. Lembre-se também
        de usar um laço para obter um contador de bloco ideal.
      2-3 Bee Functions 3_instruction: Colete todo o néctar de cada flor.
      2-3 Bee Functions 4_instruction: |
        A função "mova e obtenha néctar" vira
        a abelha, coleta néctar, e então retorna a abelha para onde ela começou. Use
        a função para coletar todo o néctar.
      2-3 Bee Functions 5_instruction: |
        Agora há mais néctar nas flores.
        Edite a função dada para que ela colete 4 néctares e use-a para coletar
        todo o néctar das flores.
      2-3 Bee Functions 6_instruction: |
        Agora, use a mesma função para coletar néctar
        das três flores.
      2-3 Bee Functions 7_instruction: |
        Agora as flores estão mais longe. Edite a
        função dada e use-a para coletar todo o néctar das flores.
      2-3 Bee Functions 8_instruction: |
        Crie sua própria função que coleta 7 néctares,
        avança e produz 7 unidades de mel. Use a função para coletar néctar em todas as
        flores e produzir mel em todas as colmeias.
      2-3 Bee Functions 9_instruction: |
        Crie sua própria função que vai por um
        caminho, obtém néctar, produz mel, e então retorna a abelha para o início do
        caminho.
      2-3 Bee Functions Assessment 1_instruction: |
        Avaliação: Use a função dada
        para coletar o néctar de cada flor.
      2-3 Bee Functions Assessment 2_instruction: |
        Avaliação: Crie uma função
        para produzir 3 unidades de mel de uma vez.
      2-3 Bee Loops 1_instruction: "Cada flor contém uma unidade de néctar. Colete\no
        néctar de cada uma das flores. \n"
      2-3 Bee Loops 10_instruction: |
        Você pode usar um laço enquanto dentro de outros dois
        laços para coletar todo o néctar?
      2-3 Bee Loops 11_instruction: |
        Use laços enquanto para coletar todo o néctar
        das flores desse campo.
      2-3 Bee Loops 12_instruction: |
        Use laços enquanto para coletar todo o néctar
        das flores desse campo.
      2-3 Bee Loops 13_instruction: |
        Avaliação: use o bloco repita para coletar
        todo o néctar.
      2-3 Bee Loops 1A_instruction: "Olá, eu sou uma abelha. Você pode me ajudar a
        coletar\no néctar dessas flores? \n"
      2-3 Bee Loops 2_instruction: |
        Use um laço para coletar o néctar e produzir o
        mel.
      2-3 Bee Loops 2A_instruction: |
        Você consegue realizar a mesma tarefa mais facilmente
        com um laço?
      2-3 Bee Loops 3_instruction: |
        Colete o néctar de cada flor e produza mel
        em cada colmeia.
      2-3 Bee Loops 3A_instruction: Você consegue usar um laço para coletar todo o
        néctar?
      2-3 Bee Loops 3B_instruction: Agora, use o novo bloco repita para coletar todo
        o néctar e produzir todo o mel.
      2-3 Bee Loops 4_instruction: |
        Use um laço parecido com o do último desafio, mas realize
        uma ação de virar dentro dele.
      2-3 Bee Loops 4A_instruction: O que acontece se você repetir esta sequência
        3 vezes? Não se esqueça de fazer o mel no final!
      2-3 Bee Loops 5_instruction: |
        Use um laço para descer as escadas e coletar o
        néctar.
      2-3 Bee Loops 6_instruction: |
        Use um laço para coletar o néctar de cada flor
        e produzir mel em cada colmeia.
      2-3 Bee Loops 7_instruction: |
        Coloque esses blocos em um laço para coletar o néctar
        de cada flor.
      2-3 Bee Loops 8_instruction: |
        Essas flores roxas têm uma quantidade desconhecida de
        néctar. Use o laço "enquanto houver néctar" para coletar todo o néctar. Esse laço
        será executado enquanto a condição for verdadeira, neste caso, enquanto néctar > 0.
      2-3 Bee Loops 9_instruction: |
        O laço enquanto pode realizar a mesma ação que
        um comando se em um laço. Adicione um laço enquanto a esse código para realizar a mesma
        tarefa.
      2-3 Bee Loops Assessment 1_instruction: |
        Avaliação - use um laço enquanto para coletar
        todo o néctar dessa flor.
      2-3 Maze 1_instruction: "Você pode me ajudar a pegar o porco malvado? Junte
        alguns\nblocos \"avance\" e clique em \"Executar\". \n"
      2-3 Maze 10_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 11_instruction: |
        Estou com fome, leve-me até a flor! Quantas vezes
        você precisa repetir um bloco?
      2-3 Maze 12 (copy 1)_instruction: |
        Você pode substituir a resposta anterior por
        apenas dois blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 12 (copy 2)_instruction: |
        Você pode substituir a resposta anterior por
        apenas dois blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 12 (old)_instruction: |
        Leve-me até o porco, agora com o bloco repita
        vezes!
      2-3 Maze 12_instruction: |
        Você pode substituir esses cinco blocos por apenas dois blocos?
        (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze 13 (old)_instruction: |
        Leve-me até o porco, agora com o bloco repita
        até!
      2-3 Maze 13_instruction: Leve-me até o porco usando apenas dois blocos.
      2-3 Maze 14 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 14_instruction: |
        Leve-me até o girassol! (Onde está o bloco "repita
        vezes" quando eu preciso dele?)
      2-3 Maze 15 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 15_instruction: Use dois laços para chegar até o porco usando menos
        blocos.
      2-3 Maze 16 (old)_instruction: Leve-me até o porco com o bloco repita até!
      2-3 Maze 16 before_instruction: Leve-me até o porco.
      2-3 Maze 16_instruction: Leve-me até o girassol. Repita a sequência!
      2-3 Maze 2_instruction: Esse porco está me irritando. Ajude-me a chegar até
        ele!
      2-3 Maze 3_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze 4_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 5_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 6_instruction: |
        Fique calmo e ajude-me a chegar até o porco malvado. Senão
        eu vou ficar braco!
      2-3 Maze 7_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze 8_instruction: Leve-me até o porco!
      2-3 Maze 9_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze Loops 1_instruction: Você pode me levar até o porco usando 5 blocos?
      2-3 Maze Loops 17_instruction: Leve-me até o girassol!
      2-3 Maze Loops 18_instruction: Leve-me até o girassol!
      2-3 Maze Loops 19_instruction: Leve-me até o girassol!
      2-3 Maze Loops 20_instruction: Leve-me até o girassol!
      2-3 Maze Loops 21_instruction: Leve-me até o girassol!
      2-3 Maze Loops Assessment 1_instruction: "Avaliação: Leve-me até o girassol\nusando
        apenas 5 blocos! \n"
      2-3 Maze sq1 _instruction: |
        Esse porco está me incomodando. Ajude-me a
        encontrá-lo!
      2-3 Maze sq10_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 Maze sq10v2_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 maze sq11_instruction: Leve-me até o porco! Que blocos foram repetidos?
      2-3 maze sq12_instruction: |
        Você pode substituir a resposta anterior por um laço
        usando um bloco "repita vezes"?
      2-3 maze sq13_instruction: |
        Querida pessoa. Mim zumbi. Deve... chegar... girassol.
        Crie um laço com o bloco "repita até".
      2-3 maze sq14_instruction: Você pode chegar até o girassol usando apenas quatro
        blocos?
      2-3 maze sq15_instruction: Você pode chegar até o girassol usando apenas blocos?
      2-3 maze sq16_instruction: |
        Ok, isso é parecido, mas um pouco diferente. Você pode
        fazer isso em apenas cinco blocos?
      2-3 Maze sq2_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar!
      2-3 Maze sq3_instruction: Leve-me até a maldade verde! (Cuidado com a dinamite)
      2-3 Maze sq4_instruction: |
        Fique calmo e ajude-me a chegar até o porco malvado. Senão
        eu vou ficar braco!
      2-3 Maze sq5_instruction: |
        Leve-me até o porco! Quantas vezes você precisa
        repetir um bloco?
      2-3 Maze sq6_instruction: |
        Você pode substituir a resposta anterior por apenas dois
        blocos? (Dica: crie um laço usando um bloco "repita vezes")
      2-3 Maze sq7_instruction: Leve-me até o intruso verde usando apenas três blocos.
      2-3 Maze sq8_instruction: |
        Leve-me até o porco! (Onde está o bloco "repita vezes"
        quando eu preciso dele?)
      2-3 Maze sq9_instruction: Crie laços para chegar até o porco usando menos blocos.
      2-3level1_instruction: Ajude o pássaro a pegar o porco safado movendo-o para
        frente
      4-5 Artist 1_instruction: "Ajude-me a terminar de desenhar minha caixa. (Cada
        linha\ntem 300 pixels de comprimento) \n"
      4-5 Artist 10_instruction: |
        Pressione "Executar" para testar o código. Em seguida, repita o código
        o número suficiente de vezes para completar o desenho. As cores serão diferentes toda vez.
      4-5 Artist 11_instruction: |
        Complete as retas verdes. As retas têm 300 pixels
        de comprimento e são separadas por 15 pixels.
      4-5 Artist 2_instruction: Você pode repetir esse código para completar o quadrado?
      4-5 Artist 3.5_instruction: |
        Ok, tente descobrir o que acontece se você executar
        esse código (ou pressione "Executar" para testar o código). Em seguida, repita o código o número suficiente de vezes para completar
        o desenho. As cores serão (provavelmente) diferentes toda vez.
      4-5 Artist 3_instruction: |
        Esse canteiro de flores retangular tem um perímetro de 600.
        O lado comprido tem 200 de comprimento. Desenhe o retângulo.
      4-5 Artist 4_instruction: |
        Quantos graus há em um círculo? Repita os blocos
        para criar um círculo de cores.
      4-5 Artist 5_instruction: Que ângulo você usa?
      4-5 Artist 6_instruction: |
        Esse triângulo equilátero tem ângulos de 60, 60
        e 60 graus. Cada lado tem 200 pixels. Complete o desenho.
      4-5 Artist 7_instruction: |
        O triângulo reto tem ângulos de 30, 60 e 90
        graus. O comprimento do lado inclinado é o dobro da altura de 100 pixels. Complete
        o desenho.
      4-5 Artist 8_instruction: |
        A linha do meio-campo em um campo de futebol é perpendicular
        às linhas laterais. O campo tem um perímetro de 800 pixels e tem 240 pixels
        de comprimento. Qual é sua largura? Desenhe as bordas e a linha do meio-campo.
      4-5 Artist 9_instruction: |
        Desenhe a outra metade de forma que o design seja simétrico.
        Os triângulos são equiláteros e têm 50 pixels de comprimento.
      4-5 Artist Assessment 1_instruction: |
        Avaliação: Use um laço para desenhar o triângulo
        equilátero. Cada lado tem 300 pixels.
      4-5 Artist For Loops 1_instruction: |
        Coloque os números de 1 a 10 nos
        blocos de largura e execute o código.
      4-5 Artist For Loops 11_instruction: |
        Complete o bloco "para" para que ele
        conte 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: "O que acontece se você inverter os números
        que estão em \"de\"\ne \"até\"? Complete o bloco \"para\" de forma que ele
        conte 200, 180,\n160, 140, 120...0. \n"
      4-5 Artist For Loops 13_instruction: |
        Esse design foi iniciado sem um laço "para"
        e está usando muitos blocos! Use um bloco "para" e complete a espiral. Dica:
        a última linha tem 250 pixels.
      4-5 Artist For Loops 14_instruction: |
        Alguém começou o código, mas então percebeu que
        deve haver uma forma mais rápida! Use um bloco "para" para substituir os blocos e
        complete a espiral triangular. (Dica: a última linha tem 300 pixels.
      4-5 Artist For Loops 15_instruction: |
        Alguém começou o código, mas então percebeu que
        deve haver uma forma mais rápida! Use um bloco "para" para substituir os blocos e
        complete a espiral hexagonal. (Dica: a última linha tem 200 pixels.
      4-5 Artist For Loops 2_instruction: |
        Este é um bloco "para". Ao invés de digitar
        1, 2, 3... 10, o bloco "para" pode repetir os blocos dentro dele e contar os
        números para você. Coloque o número 10 na seção "até" do bloco
        "para".
      4-5 Artist For Loops 3_instruction: |
        Como podemos contar de 1 até 50? Edite o
        bloco "para".
      4-5 Artist For Loops 4_instruction: |
        Complete o bloco "para" para que ele
        conte de 1 até 10, de 1 em 1.
      4-5 Artist For Loops 6_instruction: |
        Desenhe quadrados com lados de 50, 60, 70,
        80 e 90 pixels. Você vai precisar usar a função "desenhe um quadrado" cinco
        vezes.
      4-5 Artist For Loops 7_instruction: |
        Desenhe os mesmos quadrados, mas use um bloco "conte
        com" para alterar os tamanhos. Coloque o bloco "contador" na função "desenhe
        um quadrado". Dica: ele está na categoria Variáveis.
      4-5 Artist For Loops 8_instruction: |
        Você pode completar o programa colocando
        os blocos dentro de um bloco "para" que conta de 10 até 200, de 10 em 10? Você pode
        encontrar o bloco "for" na categoria Laços.
      4-5 Artist For Loops 9_instruction: |
        Esses círculos são de tamanhos 5, 10, 15, 20,
        25, 30 e 35. Desenhe os círculos usando um bloco "para".
      4-5 Artist Free Draw 1_instruction: |
        Desenho livre! Desenhe o que você estiver inspirado
        a criar.
      4-5 Artist Functions 1_instruction: Use um laço repita para desenhar esse triângulo.
      4-5 Artist Functions 10a_instruction: |
        Coloque esse código na função "desenhe um floco de neve"
        e substitua o 50 pelo parâmetro "tamanho". A função já é
        chamada para criar um floco de neve que tem 100 pixels.
      4-5 Artist Functions 10b_instruction: |
        Use a função "desenhe um floco de neve"
        para criar flocos de tamanhos diferentes. Dica: o primeiro floco de neve tem 25 de comprimento
        e cada floco de neve tem duas vezes o tamanho do floco anterior.
      4-5 Artist Functions 11_instruction: |
        Essa função "desenhe um hexágono" usa
        a função "desenhe um triângulo". Complete a função do hexágono. (Dica: um
        hexágono tem 6 lados, cada um com 100 pixels de comprimento)
      4-5 Artist Functions 12_instruction: |
        Complete a função "desenhe ondas". Cada
        onda é feita de uma onda superior e uma onda inferior. Dica: desenhe 5 ondas
        azuis.
      4-5 Artist Functions 13 Free play_instruction: |
        Temos aqui algumas funções para
        desenhar planetas, estrelas, foguetes e robôs. Use-as da forma que quiser para criar
        imagens que você pode compartilhar com seus amigos.
      4-5 Artist Functions 14 Free play_instruction: |
        Aqui, fornecemos
        várias funções para você. Use-as da forma que quiser dentro de um ou mais laços
        para criar imagens que você pode compartilhar com seus amigos. Clique em "Executar" para ver
        um exemplo.
      4-5 Artist Functions 15 Assessment_instruction: |
        Avaliação: use a função "desenhe
        um quadrado" para criar os quadrados. Os quadrados têm 50, 100 e 150
        pixels.
      4-5 Artist Functions 2a_instruction: |
        Agora coloque esses blocos em uma nova função
        chamada "desenhe um triângulo pequeno" e chame-a.
      4-5 Artist Functions 2b_instruction: |
        Agora crie uma função chamada "desenhe um
        triângulo pequeno" usando os blocos fornecidos.
      4-5 Artist Functions 3_instruction: "Agora crie as funções \"desenhe um triângulo\nmédio\"
        e \"desenhe um triângulo grande\". A função \"desenhe um triângulo pequeno\"\nestá
        pronta para você. Os triângulos têm comprimentos de 50 (pequeno), 100 (médio)\ne
        150 (grande). \n"
      4-5 Artist Functions 4_instruction: |
        Essa nova função "desenhe um triângulo"
        tem um parâmetro e pode fazer o trabalho das três funções de antes. Desenhe os
        mesmos triângulos usando essa nova função.
      4-5 Artist Functions 5_instruction: |
        Você pode transformar a função "desenhe um triângulo"
        em uma função "desenhe um quadrado" para alterar o desenho?
      4-5 Artist Functions 6_instruction: |
        Use as funções "desenhe um quadrado" e "desenhe um
        triângulo" para desenhar uma casa. (Dica: os lados do quadrado têm 200 pixels)
      4-5 Artist Functions 6b_instruction: |
        Use as funções desenhe um quadrado e desenhe um triângulo
        junto com outros blocos para criar uma casa, adicionando-as à função "desenhe uma casa"
        e chamando-a.
      4-5 Artist Functions 7_instruction: |
        Use a função "desenhe uma casa" para desenhar
        casas de 100 pixels e 50 pixels. As duas casas são separadas por
        50 pixels.
      4-5 Artist Functions 8_instruction: |
        A função "desenhe uma flor" tem um parâmetro
        que permite que você defina a altura do caule. Defina a altura como 200 e veja o que acontece.
      4-5 Artist Functions 9_instruction: |
        Desenhe essas 3 flores. A altura da primeira
        é 100 e a próxima flor sempre tem 50 pixels de altura a mais que
        a anterior. As flores também são separadas por 100 pixels.
      4-5 Artist Patterns 1_instruction: |
        Você pode desenhar esse quadrado usando um laço?
        Cada lado tem 20 pixels de comprimento.
      4-5 Artist Patterns 10_instruction: |
        O código desenha duas fileiras de hexágonos -
        repita todo o código 4 vezes para desenhar a colmeia inteira. Dica: você vai precisar
        recuar 120 pixels no laço mais externo para garantir que o artista não
        desenhe fora da tela.
      4-5 Artist Patterns 11_instruction: |
        Quantas vezes você precisa repetir isso
        para desenhar um semicírculo? Dica: se há 360 graus em um círculo e cada
        repetição move 3 graus, quantas vezes você precisaria repetir para desenhar um círculo completo?
      4-5 Artist Patterns 12_instruction: |
        Se você copiar esse laço e virar para a esquerda ao invés
        da direita, o que acontece? Você pode repetir isso para desenhar essa onda?
      4-5 Artist Patterns 13_instruction: |
        Agora vamos repetir tudo quatro
        vezes para criar a moldura dessa imagem. Preste atenção aos cantos - você não pode
        simplesmente virar 90 graus! Se repetir uma ação de virar 3 graus 60 vezes faz um semicírculo,
        qual desses blocos de código vai fazer um quarto de círculo para os cantos?
      4-5 Artist Patterns 2_instruction: |
        Se você colocar seu laço do quadrado dentro
        de outro laço, o chamamos de laço aninhado. O que você precisa adicionar ao seu laço externo
        para garantir que todos os 15 quadrados fiquem alinhados?
      4-5 Artist Patterns 3_instruction: |
        Agora, vamos nos aprofundar mais um nível!
        Aninhamos todo o bloco de código dentro de outro laço, mas você precisa posicionar o
        artista no lugar para desenhar a próxima reta. Qual desses blocos de código você
        pode colocar no final do laço mais externo para desenhar toda a grade?
      4-5 Artist Patterns 4_instruction: |
        Esse diamante tem lados de 50 pixels e ângulos
        de 120 e 60 graus. Use um laço para desenhá-lo.
      4-5 Artist Patterns 5.5_instruction: |
        Quantas vezes você precisa repetir
        esse bloco para desenhar toda a grade de diamantes?
      4-5 Artist Patterns 5_instruction: |
        Vamos repetir isso para fazer uma fileira de 6 diamantes.
        Perceba que alteramos nosso código do diamante para repetir 3 vezes ao invés de 2 - por que
        você acha que fizemos isso?
      4-5 Artist Patterns 6_instruction: |
        Quantas vezes você precisa repetir esse
        bloco para desenhar toda a grade de diamantes?
      4-5 Artist Patterns 7_instruction: |
        Vamos modificar o código do último desafio
        para fazer esse padrão mais complexo. Perceba como os diamantes se sobrepõem agora. Tente
        alterar o primeiro "pule para trás" de 100 para 50 (metade da distância) - agora, quão
        longe o artista deve ir no segundo "pule para trás"?
      4-5 Artist Patterns 8_instruction: |
        Use um laço para desenhar esse hexágono com
        lados de 40 pixels e ângulos de 60 graus.
      4-5 Artist Patterns 9.5_instruction: |
        Vamos repetir esse código para desenhar duas fileiras
        de hexágonos. Perceba como nossa segunda fileira está deslocada para a direita.
      4-5 Artist Patterns 9_instruction: |
        Agora, repita o código 3 vezes para desenhar a
        a linha inteira. Dica: cada hexágono tem 80 pixels de largura da extrema esquerda
        à extrema direita.
      4-5 Artist Patterns Free Play_instruction: |
        Atividade livre - experimente criar
        seu próprio padrão!
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        A abelha não sabe se isso é
        uma flor ou uma colmeia. Colete néctar apenas das flores, mas primeiro verifique
        se o objeto é uma flor ou uma colmeia.
      4-5 Bee Conditionals 1_instruction: |
        A abelha não sabe se isso é uma flor ou
        uma colmeia. Colete néctar apenas das flores, mas primeiro verifique se o objeto é
        uma flor ou uma colmeia.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        Agora a abelha só quer néctar.
        Lembre-se, nem todos os objetos são flores, então faça a verificação para coletar néctar apenas
        das flores.
      4-5 Bee Conditionals 2_instruction: |
        Agora a abelha só quer néctar. Lembre-se,
        nem todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      4-5 Bee Conditionals 3_instruction: |
        Agora a abelha só quer produzir mel.
        Faça a verificação para produzir mel apenas nas colmeias.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        O objeto desconhecido pode ser
        uma flor ou uma colmeia. Use o bloco se/senão para coletar néctar se ele for
        uma flor, senão para produzir mel (porque ele é, então, uma colmeia).
      4-5 Bee Conditionals 4_instruction: |
        O objeto desconhecido pode ser uma flor
        ou uma colmeia. Use o bloco se/senão para coletar néctar se ele for uma flor,
        senão para produzir mel (porque ele é, então, uma colmeia).
      4-5 Bee Conditionals 5_instruction: |
        Deve haver uma flor ou uma colmeia
        sob essas nuvens. Use o bloco se/senão para coletar néctar se houver uma
        uma flor, senão para produzir mel (porque há, então, uma colmeia).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        Essa flor roxa pode ter
        1, 2 ou 3 néctares. Aqui um bloco se-senão está combinado com outro bloco
        se-senão para criar um bloco se, senão-se, senão. Complete a solução para coletar
        a quantidade desconhecida de néctar.
      4-5 Bee Conditionals 6_instruction: |
        Essa flor roxa pode ter 1,
        2 ou 3 néctares. Aqui um bloco se-senão está combinado com outro bloco se-senão
        para criar um bloco se, senão-se, senão. Complete a solução para coletar a
        quantidade desconhecida de néctar.
      4-5 Bee Conditionals 7_instruction: |
        Lembre-se de que as flores roxas podem ter
        1, 2 ou 3 néctares. Complete a função "verifique a flor roxa" e use-a
        para coletar todo o néctar das flores.
      4-5 Bee Conditionals 8_instruction: |
        Escreva uma função dentro do bloco chamado
        "verifique a flor e produza mel". Sua função deve verificar quanto néctar a
        flor roxa tem e coletá-lo, avançar e então produzir mel.
      4-5 Bee Conditionals Assessment 1_instruction: |
        Avaliação: esse código está errado.
        Complete a função "colete néctar ou produza mel" e então chame-a para coletar
        todo o néctar e produzir o mel. Lembre-se, as flores roxas podem ter 1, 2 ou 3 néctares.
      4-5 Bee Debugging 1_instruction: |
        Estes blocos estão me incomodando. Você pode
        consertá-los?
      4-5 Bee Debugging 10_instruction: Encontre os erros e corrija-os.
      4-5 Bee Debugging 11_instruction: Isso conta corretamente?
      4-5 Bee Debugging 2_instruction: Ajude a abelha a coletar o néctar e fabricar
        o mel.
      4-5 Bee Debugging 3_instruction: Encontre os erros e corrija-os.
      4-5 Bee Debugging 4_instruction: Esses blocos não funcionam. Qual é o padrão?
      4-5 Bee Debugging 5_instruction: Algo não está certo aqui...
      4-5 Bee Debugging 6_instruction: |
        A flor roxa tem uma quantidade desconhecida de
        néctar. Conserte os blocos para coletar todo o néctar da flor.
      4-5 Bee Debugging 7_instruction: Está faltando alguma coisa na função...
      4-5 Bee Debugging 8_instruction: |
        Essa função está certa, mas não é usada
        corretamente.
      4-5 Bee Debugging 9_instruction: Por que a abelha não está produzindo mel suficiente?
      4-5 Bee Debugging Assessment 1_instruction: 'Avaliação: conserte o código.'
      4-5 Bee Nested Loops 1_instruction: Use um laço para coletar todo o néctar.
      4-5 Bee Nested Loops 2_instruction: "Colete todo o néctar de cada flor.\nUse
        um laço aninhado. \n"
      4-5 Bee Nested Loops 3_instruction: |
        Colete todo o néctar colocando o
        código inicial dentro de um laço aninhado.
      4-5 Bee Nested Loops 4_instruction: "Colete todo o néctar de cada flor\ne produza
        mel em cada colmeia. Use um laço aninhado. \n"
      4-5 Bee Nested Loops 5_instruction: |
        Colete todo o néctar criando
        um laço aninhado.
      4-5 Bee Nested Loops 6_instruction: Colete todo o néctar.
      4-5 Bee Nested Loops 7_instruction: |
        Coloque esse laço dentro de outro laço para criar
        um laço aninhado e coletar todo o néctar das flores.
      4-5 Bee Nested Loops 8_instruction: "Colete todo o néctar dessas flores\naninhando
        um laço enquanto. Substitua o bloco interno repita vezes por um bloco\nenquanto.
        \n"
      4-5 Bee Nested Loops 9_instruction: |
        Colete todo o néctar dessas flores
        aninhando um laço enquanto dentro de um bloco repita.
      4-5 Bee Nested Loops Assessment 1_instruction: |
        Avaliação - colete todo o
        néctar e produza todo o mel usando laços.
      4-5 Bee Nested Loops Rows_instruction: |
        Colete o néctar das fileiras de flores!
        Use um laço aninhado.
      4-5 Maze 1 (copy 1)_instruction: |
        Querida pessoa. Mim zumbi. Precisa... chegar...
        girassol.
      4-5 Maze 1_instruction: Querida pessoa. Mim zumbi. Deve... chegar... girassol.
      4-5 Maze 10_instruction: Você consegue chegar até o girassol usando apenas quatro
        blocos?
      4-5 Maze 11_instruction: Você pode chegar até o girassol usando apenas seis
        blocos?
      4-5 Maze 12_instruction: |
        Ok, isso é um pouco diferente. Você pode fazer isso em
        apenas seis blocos?
      4-5 Maze 13_instruction: Leve-me até o porco!
      4-5 Maze 14_instruction: Leve-me até o porco! Use o bloco repita até.
      4-5 Maze 2 (copy 1)_instruction: |
        Leve o zumbi até o girassol, mas desvie
        da carnívora!
      4-5 Maze 2_instruction: Leve o zumbi até o girassol, mas desvie da carnívora!
      4-5 Maze 3 (copy 1)_instruction: Precisa... chegar... girassol.
      4-5 Maze 3_instruction: Precisa... chegar... girassol.
      4-5 Maze 4 (copy 1)_instruction: Experimente o bloco "repita" para usar menos
        blocos...
      4-5 Maze 4_instruction: Experimente o bloco "repita" para usar menos blocos...
      4-5 Maze 5 (copy 1)_instruction: |
        Você pode resolver esse desafio usando o menor
        número possível de blocos?
      4-5 Maze 5_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      4-5 Maze 6 (copy 1)_instruction: |
        Você pode resolver esse desafio usando o menor
        número possível de blocos?
      4-5 Maze 6_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      4-5 Maze 7_instruction: Querida pessoa. Mim zumbi. Precisa... chegar... girassol.
      4-5 Maze 8_instruction: |
        Use o bloco "repita" para levar o zumbi até o
        girassol. (Desvie das carnívoras!)
      4-5 Maze 9_instruction: Crie um laço com o bloco "repita até".
      4-5 Maze Assessment 1_instruction: 'Avaliação: chegue até o girassol.'
      4-5 Maze Conditionals 1_instruction: |
        Use o bloco repita até para levar o
        zumbi até o girassol.
      4-5 Maze Conditionals 10_instruction: |
        Você pode adicionar apenas 3 blocos para me ajudar
        a resolver um labirinto mais complexo? Se você fizer isso corretamente, eu poderei andar por qualquer caminho cheio de curvas,
        não importa o comprimento.
      4-5 Maze Conditionals 2_instruction: |
        Use o bloco repita até para levar o
        zumbi até o girassol.
      4-5 Maze Conditionals 3_instruction: |
        Use o bloco "se" para me deixar decidir
        quando virar. Dica: você precisa de somente mais um bloco, mas aprenda como o configuramos
        para que você possa fazer isso sozinho na próxima vez.
      4-5 Maze Conditionals 4_instruction: |
        Ok, esse desafio é como o último,
        mas você precisa se lembrar de como usou o bloco "se" e o bloco "repita"
        juntos.
      4-5 Maze Conditionals 5_instruction: |
        Mim querer girassol! Use um bloco "se"
        para que eu chegue lá com o menor número de blocos possível.
      4-5 Maze Conditionals 6_instruction: |
        Mim querer girassol! Use um bloco "se"
        para que eu chegue lá com o menor número de blocos possível.
      4-5 Maze Conditionals 7_instruction: |
        Ok, vamos praticar mais uma vez
        - essa parte não é muito diferente, mas fique de olho nas carnívoras!
      4-5 Maze Conditionals 8_instruction: |
        Os blocos "se-senão" verificam uma condição
        e, em seguida, fazem uma coisa OU outra. Para me levar ao girassol, tente
        usar esse novo bloco.
      4-5 Maze Conditionals 9_instruction: |
        Vamos praticar o uso do bloco "se-senão" mais uma
        vez, você consegue fazer corretamente na primeira tentativa?
      4-5 Maze Conditionals Assessment 1_instruction: |
        Use um bloco "repita até" e
        um bloco "se-senão" para me levar até o girassol no menor número de blocos possível.
      4-5 Nested Loops 1_instruction: |
        Complete o código para desenhar esses triângulos. O
        primeiro está pronto para você. Dica: 3 triângulos em uma rotação de 360 graus.
      4-5 Nested Loops 10_instruction: |
        Desenhe a última linha de estrelas nessa bandeira
        repetindo os blocos fornecidos. As estrelas estão separadas por 50 pixels, mas lembre-se
        que elas têm 30 pixels de largura.
      4-5 Nested Loops 11_instruction: |
        Você pode desenhar esses 10 quadrados dessa
        calçada usando um laço aninhado? Cada quadrado tem 30 pixels.
      4-5 Nested Loops 12_instruction: |
        Você pode desenhar esses 36 triângulos usando
        um laço aninhado?
      4-5 Nested Loops 2_instruction: "Agora, aninhe esse laço dentro de outro laço
        para desenhar\n10 triângulos. Isso se chama laço aninhado. Dica: todos os
        10 triângulos completam\numa rotação de 360 graus.  \n"
      4-5 Nested Loops 3_instruction: "Crie um sol aninhando o código inicial\ndentro
        de outro laço. Chamamos isso de laço aninhado.\r\n"
      4-5 Nested Loops 5_instruction: Repita o código dado para criar um moinho de
        vento.
      4-5 Nested Loops 6_instruction: |
        Você pode desenhar um hexágono repetindo o
        código do triângulo?
      4-5 Nested Loops 7_instruction: |
        Repita esse design 10 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 10?)
      4-5 Nested Loops 8_instruction: |
        Repita esse design 6 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 6?)
      4-5 Nested Loops 9_instruction: Desenhe o dente na boca do crocodilo!
      4-5 Nested Loops Assessment 1_instruction: |
        Use um laço aninhado para completar
        o design.
      4-5 While Loops 1_instruction: |
        Mova-me para o buraco e preencha-o com
        duas pás de terra, usando o bloco "preencha".
      4-5 While Loops 2_instruction: |
        Mova-me para o monte de terra e remova-o
        com 5 pás de terra, usando o bloco "remova".
      4-5 While Loops 3_instruction: |
        Mova-me para o monte e remova toda a
        terra, então mova-me para o buraco e preencha-o completamente. Dica: use o menor número de
        blocos possível.
      4-5 While Loops 4_instruction: |
        Uau, eu encontrei um buraco realmente fundo! Eu não
        sei quantas pás de terra são necessárias. Você pode escrever um programa que preencha-o
        até que o solo fique nivelado? Dica: dessa vez, tente usar o laço enquanto.
      4-5 While Loops 5_instruction: |
        Uau, agora há dois buracos profundos! Você
        pode escrever um programa que os preencha até o que o solo fique nivelado?
      4-5 While Loops 6_instruction: |
        Uau, agora há um grande monte de terra!
        Você pode escrever um programa que remova a terra até que o solo fique nivelado?
      4-5 While Loops 7_instruction: |
        Uau, agora há três grandes montes de terra!
        Você pode escrever um programa que remova cada um deles até que o solo fique nivelado?
      4-5 While Loops 8_instruction: |2
         Há um buraco realmente fundo e um monte de terra
        realmente grande. Quantas pás de terra são necessárias para
        tornar o solo plano? Dica: use o laço enquanto para ambos.
      4-5 While Loops Assessment 1_instruction: |
        Há um monte de buracos e
        montes. Ajude-me a preenchê-los e removê-los para tornar o solo plano.
      Artist - Nested Loops 1_instruction: |
        Complete o código para desenhar esses triângulos. O
        primeiro está pronto para você. Dica: 3 triângulos em uma rotação de 360 graus.
      Artist - Nested Loops 10_instruction: |
        Desenhe a última linha de estrelas nessa bandeira
        repetindo os blocos fornecidos. As estrelas estão separadas por 50 pixels, mas lembre-se
        que elas têm 30 pixels de largura.
      Artist - Nested Loops 11_instruction: |
        Você pode desenhar esses 10 quadrados dessa
        calçada usando um laço aninhado? Cada quadrado tem 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Você pode desenhar esses 36 triângulos usando
        um laço aninhado?
      Artist - Nested Loops 2_instruction: "Agora aninhe esse laço dentro de outro
        laço\npara desenhar 10 triângulos. Isso se chama laço aninhado. Dica: todos
        os 10 triângulos\ncompletam uma rotação de 360 graus.  \n"
      Artist - Nested Loops 3_instruction: "Crie um sol aninhando o código inicial\ndentro
        de outro laço. Chamamos isso de laço aninhado.\r\n"
      Artist - Nested Loops 5_instruction: Repita o código dado para criar um moinho
        de vento.
      Artist - Nested Loops 6_instruction: |
        Você pode desenhar um hexágono repetindo o
        código do triângulo?
      Artist - Nested Loops 7_instruction: |
        Repita esse design 10 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 10?)
      Artist - Nested Loops 8_instruction: |
        Repita esse design 6 vezes. Quanto
        você precisa virar a cada repetição? (Dica: quanto é 360 dividido por 6?)
      Artist - Nested Loops 9_instruction: Desenhe o dente na boca do crocodilo!
      Artist - Nested Loops Assessment 1_instruction: |
        Use um laço aninhado para completar
        o design.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Agora que você aprendeu a escrever funções lineares
        simples, vamos usá-las para adicionar um pouco de movimento ao nosso jogo.
        Clique em Executar para ver o que seu jogo pode fazer (não muito!), atualizar as variáveis que
        você quiser e depois clique em Concluir para seguir em frente.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        A função "atualize-alvo" recebe o
        valor atual de x do alvo e retorna um valor atualizado. Complete a função "atualize-alvo"
        para que ela some ao valor de x toda vez que for chamada. Quanto mais você
        adicionar a x, mais rápido será o alvo.
      Big Game Animation 3_instruction: |
        A função "atualize-inimigo" deve funcionar
        como a função "atualize-alvo", exceto pelo fato de o perigo se mover do lado direito
        em direção à esquerda. Complete a função "atualize-inimigo" para fazer
        o inimigo voar pela tela.
      Big Game Animation 4_instruction: |
        Nesse ponto do seu jogo, seu inimigo deve
        percorrer a tela da direita para a esquerda e seu alvo deve percorrer a tela
        da esquerda para a direita. Eles nunca voltam para a tela uma vez que tenham saído,
        mas cuidaremos disso depois. Analise seu jogo para ver se ele está
        funcionando como você gostaria e então clique em Concluir para seguir em frente.
      Big Game Booleans 1_instruction: |
        Da última vez que você trabalhou em seu jogo fizemos
        nossos alvo e inimigo voarem pela tela, mas eles nunca
        voltaram. Clique em Executar para ver como seu jogo está funcionando agora e depois clique
        em concluir. Vamos fazer os gráficos reaparecerem na tela depois que eles tiverem
        saído.
      Big Game Booleans 2_instruction: |
        Agora que sua função na-tela? está verificando
        esquerda-segura? e direita-segura? podemos completar essas funções. Vá até a seção
        "Funções" da caixa de ferramentas e complete a função esquerda-segura? para que ela retorne
        verdadeiro se a coordenada de x do inimigo for mais que -50. Se você for bem sucedido,
        você deve ver o inimigo sair pelo lado esquerdo e retornar pelo lado direito.
      Big Game Booleans 3_instruction: |
        Agora que você completou esquerda-segura?, vamos preencher
        a direita-segura? - ela deve receber a coordenada de x do alvo e retornar verdadeiro
        se essa coordenada for menor que 450. Uma vez que você tenha completado a direita-segura?,
        você deve ver o alvo sair pelo lado direito da tela e retornar pela
        esquerda.
      Big Game Booleans 4_instruction: |
        Fornecemos algumas funções vazias
        para esquerda-segura? e direita-segura?. A primeira coisa que você precisa fazer é completar
        a função na-tela? para que ela verifique se esquerda-segura? e direita-segura?
        são verdadeiras. Dica - mesmo depois de adicionar esquerda-segura? e direita-segura? seus
        objetos não vão retornar à tela - porque você acha que isso acontece?
      Big Game Booleans 5_instruction: |
        Nesse ponto do seu jogo, seu inimigo deve percorrer
        a tela da direita para a esquerda, seu alvo deve percorrer a tela da esquerda para
        a direita e eles devem retornar para o lado oposto, repetidamente. Veja
        se seu jogo está funcionando como você gostaria e então clique em
        Concluir para seguir em frente.
      Big Game Collision 1 (copy 1)_instruction: |
        Da última vez que você trabalhou em seu jogo
        fizemos nossos alvo e inimigo voarem pela tela, mas eles nunca
        voltaram. Clique em Executar para ver como seu jogo está funcionando agora e depois clique
        em concluir. Vamos fazer os gráficos reaparecerem na tela depois que eles tiverem
        saído.
      Big Game Collision 1_instruction: |
        Até agora você programou um jogo
        com um alvo e um inimigo que se movem, sendo que ambos retornam à tela quando
        saem, e um jogador que responde à entrada do teclado. Clique em Executar para
        ver como seu jogo está funcionando e então vamos para o que
        está faltando - a detecção de colisão!
      Big Game Collision 2_instruction: "Para mover o jogador para cima e para baixo,
        vamos precisar\nusar um bloco condicional para descobrir qual tecla está pressionada
        e responder\nde acordo. Os computadores leem teclas pressionadas como códigos
        numéricos - a seta para\ncima é 38 e a seta para baixo é 40. Você pode consultar
        outros códigos de teclas em seu material.\nEdite a função \"atualizar-jogador\"
        para que ela mova o jogador para cima quando \na seta para cima está pressionada,
        ou para baixo quando a seta para baixo está pressionada.\n"
      Big Game Collision 3_instruction: |
        Vamos consertar essa função de distância para que nossa
        detecção de colisão funcione corretamente. Use a fórmula da distância para que a função
        de distância retorne a distância entre as coordenadas centrais do jogador (px,
        py) e as coordenadas centrais de outro objeto (cx, cy). Fornecemos uma função
        de uma linha que funciona para lhe ajudar.
      Big Game Collision 4_instruction: |
        A função "distância" retorna a distância
        entre dois objetos. Complete a função "colisão?" para que ela retorne
        verdadeiro se a distância entre dois pontos for menor que 100 pixels. Se
        completá-la corretamente, seus objetos vão colidir instantaneamente - por que você
        acha que isso acontece?
      Big Game Complete (copy 1)_instruction: |
        Uma demonstração do projeto Grande Jogo
        da Álgebra em CC completo
      Big Game Complete_instruction: |
        Uma demonstração do projeto Grande Jogo da Álgebra em CC
        completo
      Big Game Final_instruction: |
        Você conseguiu! Agora seu jogo deve estar
        funcionando completamente. Aproveite seu novo jogo e faça alguns ajustes
        finais. Quando você estiver feliz com o produto final, clique em Concluir e
        você terá a oportunidade de compartilhar um link para o seu jogo. Bom trabalho!
      Big Game Player 1_instruction: |
        Estamos quase terminando o jogo!
        Da última vez que você trabalhou no seu jogo, você usou booleanos para fazer seu alvo e
        seu inimigo retornarem à tela quando saírem. Clique em Executar para ver como seu
        jogo está agora e então vamos fazer seu jogador se mover para cima e para
        baixo.
      Big Game Player 2_instruction: |
        Para mover o jogador para cima e para baixo, vamos precisar
        usar um bloco condicional para descobrir qual tecla está pressionada e responder de acordo.
        Os computadores leem teclas pressionadas como códigos numéricos - a seta para cima é 38
        e a seta para baixo é 40. Você pode consultar outros códigos de teclas em seu material. Edite
        a função "atualize-jogador" para que ela mova o jogador para cima quando  a seta para
        cima estiver pressionada e para baixo quando a seta para baixo estiver pressionada.
      Big Game Testing_instruction: |
        Uma demonstração do projeto Grande Jogo da Álgebra em CC
        completo
      Big Game Vars 1 (copy 1)_instruction: |
        Vamos começar o seu Grande Jogo!
        Aqui você vai ver um monte de trechos de código para reservar espaço que você eventualmente
        vai substituir pelo seu próprio código, mas por enquanto vamos nos preocupar somente
        em definir as variáveis. Clique em "Executar" para ver como é o jogo com os
        valores-padrão.
      Big Game Vars 1_instruction: |
        Vamos começar o seu Grande Jogo! Aqui você vai
        ver um monte de trechos de código para reservar espaço que você eventualmente vai substituir
        pelo seu próprio código, mas por enquanto vamos nos preocupar somente em definir as variáveis.
        Clique em "Executar" para ver como é o jogo com os valores-padrão.
      Big Game Vars 2 (copy 1)_instruction: |
        A primeira etapa para você colocar a sua marca
        nesse jogo é dar a ele um bom título. Clique em editar nas variáveis "título"
        e "subtítulo" e altere-as para algo novo.
      Big Game Vars 2_instruction: |
        A primeira etapa para você colocar a sua marca
        nesse jogo é dar a ele um bom título. Clique em editar nas variáveis "título" e "subtítulo" e
        altere-as para algo novo.
      Big Game Vars 3 (copy 1)_instruction: |
        Agora, vamos definir o pano de fundo para seu
        novo jogo. Edite a variável "bg" e selecione uma nova imagem de pano de fundo no
        menu.
      Big Game Vars 3_instruction: |
        Agora, vamos definir o pano de fundo para seu novo jogo.
        Edite a variável "bg" e selecione uma nova imagem de pano de fundo no menu.
      Big Game Vars 4 (copy 1)_instruction: |
        Incrível, agora você pode atualizar as variáveis
        para seu jogador, alvo e inimigo. Fique à vontade para brincar com as variáveis
        para deixar o seu jogo do jeito que você quiser. Clique em "Concluir"
        quando estiver pronto.
      Big Game Vars 4_instruction: |
        Incrível! Agora você pode atualizar as variáveis para
        o jogador, o alvo e o inimigo. Fique à vontade para brincar com todas as variáveis
        e assim deixar seu jogo do jeito que você quer. Clique em "Concluir"
        quando você terminar.
      Building a Foundation Assessment_instruction: |
        Construa uma pirâmide de três níveis.
        Não há outras instruções, então simplesmente brinque com as peças até
        conseguir!
      C3-Farmer While Loops 1_instruction: |
        Mova-me para o buraco e preencha-o com
        duas pás de terra, usando o bloco "preencha".
      C3-Farmer While Loops 2_instruction: |
        Mova-me para o monte de terra e remova-o
        com 5 pás de terra, usando o bloco "remova".
      C3-Farmer While Loops 3_instruction: |
        Mova-me para o monte e remova toda a
        terra, então mova-me para o buraco e preencha-o completamente. Dica: use o menor número de
        blocos possível.
      C3-Farmer While Loops 4_instruction: |
        Uau, eu encontrei um buraco realmente fundo! Eu não
        sei quantas pás de terra são necessárias. Você pode escrever um programa que preencha-o
        até que o solo fique nivelado. Dica: dessa vez, tente usar o laço enquanto.
      C3-Farmer While Loops 5_instruction: |
        Uau, agora há dois buracos profundos! Você
        pode escrever um programa que os preencha até o que o solo fique nivelado?
      C3-Farmer While Loops 6_instruction: |
        Uau, agora há um grande monte de terra!
        Você pode escrever um programa que remova a terra até que o solo fique nivelado?
      C3-Farmer While Loops 7_instruction: |
        Uau, agora há três grandes montes de terra!
        Você pode escrever um programa que remova cada um deles até que o solo fique nivelado?
      C3-Farmer While Loops 8_instruction: |2
         Há um buraco realmente fundo e um monte de terra
        realmente grande. Quantas pás de terra são necessárias para
        tornar o solo plano? Dica: use o laço enquanto para ambos.
      C3-Farmer While Loops Assessment 1_instruction: |
        Há um monte de buracos e
        montes. Ajude-me a preenchê-los e removê-los para tornar o solo plano.
      Calc Circles of Eval .1_instruction: |
        Você vai escrever um tipo de código chamado
        Bloco de cálculo, porque cada bloco de código retorna um único valor.
        Altere o ??? nesse código para que o bloco retorne 5.
      Calc Circles of Eval .2_instruction: |
        Esse bloco de cálculo é uma função
        de multiplicação que recebe dois números e retorna o produto desses números.
        Edite esse bloco para que ele multiplique 2 * 5
      Calc Circles of Eval .3_instruction: |
        Esta é uma função de Adição que
        usa dois números e retorna sua soma. Use este bloco Adição para somar 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Temos aqui um bloco de adição aninhado
        dentro de um bloco de multiplicação. Complete esse código para que ele multiplique 3 por (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Converta essa instrução para <alguma_forma>
        de cálculo.
      Calc Circles of Eval 1_instruction: |
        Todo operador matemático (+, -, *,
        /, e assim por diante) pode ser representado por um bloco de cálculo. Altere o
        bloco de cálculo para associá-lo à expressão.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Converta essa instrução para <alguma_forma>
        de cálculo.
      Calc Circles of Eval 2_instruction: |
        Use um bloco de multiplicação para completar
        esse código.
      Calc Circles of Eval 3_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 4_instruction: |
        Nesse código estão faltando alguns blocos de
        cálculo - lembre-se de colocar tudo na ordem correta.
      Calc Circles of Eval 5_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 6_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa expressão.
      Calc Circles of Eval 7_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval 8_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa expressão.
      Calc Circles of Eval 9_instruction: |
        Complete os blocos de cálculo para corresponder
        a essa instrução.
      Calc Circles of Eval Free Play_instruction: |
        Atividade livre: tente usar um bloco de cálculo
        para escrever algumas equações você mesmo. Como aninhar os blocos de
        formas diferentes interfere no cálculo?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Agora, vamos ver mais algumas funções
        algébricas. Temos aqui uma função traduzida a partir de uma função algébrica simples
        f(x) = x + 1. O que você poderia esperar como saída dessa função se fosse fornecida uma
        entrada de 15?
      Calc Define Funcs 1_instruction: |
        Agora, vamos olhar para algumas funções algébricas
        mais tradicionais. Temos aqui uma função traduzida da função algébrica simples
        f(x) = x + 1. O que você esperaria como saída dessa função se fosse fornecida uma
        entrada de 15?
      Calc Define Funcs 2_instruction: |
        Escreva uma função "f" que recebe um parâmetro
        "x" e retorna x - 10. Teste sua função usando f(15).
      Calc Define Funcs 3_instruction: |
        Não precisamos chamar nossa função "f"
        toda vez. Crie uma função chamada "vezes-dez" que deve receber um parâmetro
        "x" e retornar x * 10. Quando você criar a função, execute vezes-dez(50).
      Calc Define Funcs 4_instruction: |
        Escreva uma função chamada "metade" que recebe
        um número "x" e retorna metade desse número. Quando você escrever a função,
        use-a para calcular metade(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Vamos usar a receita de design para criar uma
        função chamada "cubo" - essa função deve ter um domínio de número, uma imagem
        de número e retornar o número dado elevado à terceira potência. Lembre-se de escrever
        dois casos de exemplo! Quando você terminar, use sua nova função para calcular 7
        elevado ao cubo.
      Calc Design Recipe 2_instruction: "Sua escola está promovendo uma venda de cookies
        e\nvocê precisa controlar o custo de produção de cada cookie, o dinheiro pago
        e o\nlucro total. Os cookies custam R$0,25 cada para produzir, e são vendidos
        por R$1,50/cookie.\r\nEscreva\na função `custo`, que recebe o número de cookies
        que você pretende vender\ne retorna o custo de produção desses cookies."
      Calc Design Recipe 3_instruction: |
        Escreva a função `vendas` que recebe o
        número de cookies vendidos e retorna a quantidade de dinheiro que os clientes gastaram
        para comprar esses cookies (cada cookie é vendido por R$1,50).
      Calc Design Recipe 4_instruction: |
        Usando as duas funções que acabamos de escrever, escreva
        a função `lucro`, que recebe o número de cookies que você vendeu e
        retorna o lucro total que você obteve com a venda dos cookies, levando em conta
        o custo para produzi-los.
      Calc Free Play_instruction: |
        Atividade livre: escreva funções e algoritmos com seu
        próprio design!
      Calc Rocket 1 (copy 1)_instruction: "No último desafio você escreveu um contrato\npara
        a função \"altura-foguete\" que diz que ela tem uma imagem numérica, um domínio\nnumérico,
        e deve retornar a altura do foguete viajando a 15 m/s\napós um dado número
        de segundos. Agora vamos escrever um caso de exemplo para a\naltura do foguete
        em 3 segundos.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: "No último desafio você escreveu um contrato para
        a\nfunção \"altura-foguete\" que tem um domínio numérico, uma imagem\nnumérica,
        e deve retornar a altura do foguete que viaja a 15 m/s após\num dado número
        de segundos. Agora, vamos escrever um caso de exemplo para a altura\ndo foguete
        em 3 segundos.\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 2_instruction: |
        Excelente, vamos fazer mais um exemplo antes de escrever
        a função - qual deve ser a altura do foguete após 30 segundos?
      Calc Vars 1.1_instruction: |
        Aqui, definimos a variável "idade" como 17 anos.
        Você consegue escrever uma expressão que calcula "idade" em dias?
      Calc Vars 1_instruction: |
        As variáveis nos permitem dar nome a valores para que possamos
        facilmente nos referir a eles repetidamente ao longo dos nossos programas. Temos aqui uma
        variável chamada "idade". Defina seu valor como sua idade e clique em Executar.
      Calc Vars 2 (copy 1)_instruction: |
        Aqui, definimos a variável "idade" como
        17 - você pode escrever uma expressão que calcula "idade" em meses?
      Calc Vars 2.1_instruction: |
        Aqui temos uma variável chamada "idade-em-meses"
        - use a variável "idade" para definir "idade-em-meses"
      Calc Vars 2_instruction: |
        Você pode escrever uma expressão que calcula "idade"
        em meses?
      Calc Vars 3 (copy 1)_instruction: |
        Você pode fazer uma adição a esse código para que ele calcule
        quantas horas há em "idade" anos?
      Calc Vars 3_instruction: |
        Você pode fazer uma adição a esse código para que ele use a variável "idade"
        para calcular a idade em horas?
      Calc Vars 4_instruction: |
        Também podemos definir variáveis usando outras variáveis.
        Vamos supor que você tenha um irmão que é dois anos mais novo que você - você pode
        definir uma nova variável "idade-irmão" usando sua variável "idade"?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Desenhe a reta. Ela tem\n200
        pixels de comprimento. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Desenhe a reta. Ela tem
        200\npixels de comprimento. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Mova a abelha até a flor
        e colete todo o néctar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Mova a abelha até as flores
        e colete todo o néctar de cada uma.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Desenhe essa reta usando
        a variável "comprimento". Cada segmento de reta tem 75 pixels de comprimento.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Desenhe um quadrado usando
        a variável comprimento fornecida.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        O código fornecido desenha
        um triângulo. Faça uma adição para que ele desenhe triângulos em um padrão de hexágono.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        O código fornecido desenha
        um triângulo. Faça uma adição para que ele desenhe triângulos em um padrão de hexágono.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "Isso é como um\nlaço
        \"para\". Complete o código para desenhar seis retas que crescem de 50, 60,
        70,\n80, 90, até 100 pixels de comprimento. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "Isso é como um\nlaço
        \"para\". Complete o laço para desenhar 4 quadrados que crescem de 80, 100,\n120,
        até 140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Agora, adicione uma ação de virar e outra
        reta. As retas têm 200 pixels de comprimento.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Desenhe o quadrado. Cada
        lado tem 100 pixels de comprimento.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Desenhe o octógono. Cada
        lado tem 100 pixels de comprimento.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Mova a abelha até
        a flor e colete o néctar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        As flores contêm uma quantidade
        específica de néctar. Mova a abelha até a flor e colete o néctar com o bloco
        obtenha néctar.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        As colmeias podem guardar uma quantidade
        específica de mel. Colete o néctar da flor e produza um pouco de mel.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Mova a abelha até a flor
        e colete o néctar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        A nuvem pode estar escondendo
        uma flor ou uma colmeia. Apenas colete néctar das flores. Apenas faça mel nas colmeias.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        A nuvem pode estar escondendo
        uma flor ou uma colmeia. Apenas colete néctar das flores. Apenas faça mel nas colmeias.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Desenhe\na
        reta. Cada segmento tem 100 pixels de comprimento. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete o\ncódigo
        para desenhar a reta. Cada segmento tem 100 pixels de comprimento. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Desenhe a reta.\nCada
        segmento tem 100 pixels. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Mova a abelha até as
        flores e pegue todo o néctar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Desenhe um quadrado
        usando a variável comprimento fornecida.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Desenhe uma reta usando
        uma variável "comprimento" definida como 180.
      course 1 artist 1 level 10_instruction: |
        Desenhe a reta tracejada usando
        os blocos pule e desenhe
      course 1 artist 1 level 9_instruction: Faça o desenho usando três retas
      Course 2 Bee Loops 1_instruction: "Olá, eu sou uma abelha. Você pode me ajudar
        a coletar\no néctar dessas flores? \n"
      Course 2 Bee Loops 13_instruction: |
        Avaliação: use o bloco repita para coletar
        todo o néctar.
      Course 2 Bee Loops 2_instruction: |
        Você consegue realizar a mesma tarefa mais facilmente
        com um laço?
      Course 2 Bee Loops 3_instruction: |
        Agora, use o novo bloco repita para coletar
        todo o néctar e produzir todo o mel.
      Course 2 Bee Loops 3__instruction: |
        Você consegue usar um laço para coletar todo
        o néctar?
      Course 2 Bee Loops 4_instruction: |
        O que acontece se você repetir esta sequência 3
        vezes? Não se esqueça de fazer o mel no final!
      Course 2 Maze Loops 1_instruction: Você pode me levar até o porco usando 5 blocos?
      Course 4 2_instruction: |
        Agora a abelha só quer néctar. Lembre-se, nem
        todos os objetos são flores, então faça a verificação para coletar néctar apenas das flores.
      Course 4 Artist 1_instruction: "Ajude-me a terminar de desenhar minha caixa.
        (Cada linha tem\n300 pixels de comprimento) \n"
      Course 4 Artist 10_instruction: "Atividade livre! Divirta-se e desenhe\no que
        quiser. \n"
      Course 4 Artist 2_instruction: |
        Você consegue repetir este código para desenhar
        o quadrado em cinza?
      Course 4 Artist 3_instruction: |
        Ok, tente descobrir o que acontece se você executar
        esse código (ou clique em "Executar" para ver). Em seguida, execute-o várias vezes para completar
        o desenho.
      Course 4 Artist 4_instruction: |
        How many degrees are in a circle?  Fill in
        the repeat block with that number to create a circle of colors.
      Course 4 Artist 5_instruction: |
        Desenhe a outra metade desse design para que ele
        fique simétrico. Os triângulos são equiláteros e têm 50 pixels de comprimento.
      Course 4 Artist 6_instruction: "Complete o código para desenhar esses triângulos.
        \nDica: 3 triângulos em uma rotação de 360 graus.\n"
      Course 4 Artist 7_instruction: "Agora, aninhe esse laço dentro de outro laço
        para desenhar\n10 triângulos. Isso se chama laço aninhado. Dica: todos os
        10 triângulos completam\numa rotação de 360 graus.  \n"
      Course 4 Artist 8_instruction: |
        Desenhe esse sol repetindo todo este bloco de código
        12 vezes.
      Course 4 Artist 9_instruction: |
        Repita esse design 10 vezes e certifique-se de virar
        a cada figura desenhada. Uma dica sobre o quanto você
        precisa virar: quanto é 360 dividido por 10?
      Course 4 Artist Binary 1_instruction: |
        Temos aqui uma função que recebe uma string
        binária de 1's e 0's e instrui o artista a mover-se da esquerda para
        a direita, de cima para baixo, preenchendo os quadrados nos quais ele vê um 1 e ignorando
        os que têm um 0. Execute esse código para ver como o artista usa números binários para desenhar
        este padrão.
      Course 4 Artist Binary 2_instruction: |
        Qual dessas strings binárias você poderia
        repetir 8 vezes para desenhar esta imagem?
      Course 4 Artist Binary 3_instruction: |
        Você consegue desenhar este padrão usando
        a repetição de uma string binária de 3 dígitos?
      Course 4 Artist Binary 4_instruction: |
        Cada string binária representa uma linha dessa
        imagem. Você consegue reorganizá-las de forma que elas desenhem um rostinho feliz
        ao invés de um rostinho triste?
      Course 4 Artist Binary 5_instruction: |
        Que string binária de 6 dígitos, repetida
        11 vezes, vai desenhar essa imagem?
      Course 4 Artist Binary 6_instruction: |
        Qual é a menor string binária que você
        pode repetir para desenhar esta imagem?
      Course 4 Artist Binary 7_instruction: Termine o desenho.
      Course 4 Artist Binary Free Play 2_instruction: |
        Atividade livre: aqui temos uma tela de maior
        resolução para desenhar - 16 bits por 16 bits!
      Course 4 Artist Binary Free Play_instruction: |
        Atividade livre: desenhe o que quiser
        com números binários!
      Course 4 Artist For  Functions 10_instruction: |
        Vamos acelerar um pouco,
        você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte!
      Course 4 Artist For  Functions 11_instruction: |
        Vamos acelerar um pouco,
        você consegue desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte!
      Course 4 Artist For Loops 1_instruction: |
        Desenhe este triângulo que tem 50 pixels.
        Dica: use um bloco repita.
      Course 4 Artist For Loops 10_instruction: |
        Atividade livre! Divirta-se desenhando
        o que quiser com os blocos que você aprendeu a usar
      Course 4 Artist For Loops 11_instruction: |
        Você se lembra de quando usamos uma variável
        para controlar o número de lados em uma forma? Este padrão começa com um triângulo
        e adiciona um lado por vez, até que seja desenhado um decágono (10 lados). Cada lado
        deve ter 100 pixels de comprimento. Dica: 360 dividido pelo número de lados de uma forma
        é o número de graus que você vai precisar virar.
      Course 4 Artist For Loops 12_instruction: "Isso foi muito legal, mas agora\neu
        gostaria de desenhar uma forma do lado da outra. Desta vez, cada lado tem\n20
        pixels. Use um bloco pule para avançar 40 pixels após cada forma. \n"
      Course 4 Artist For Loops 13_instruction: |
        Hmm, essas formas estão ficando cada vez
        maiores! Já não tínhamos resolvido esse problema com variáveis? Como
        podemos usar a variável contador para deixar os lados menores conforme a forma tem
        mais lados? Ao invés de avançar por uma quantidade definida, avance (100 /
        contador) pixels.
      Course 4 Artist For Loops 14 _instruction: |
        Se você virar um pouco mais, ou um pouco menos, do que normalmente faria para uma forma, você cria um efeito legal. Tente
        virar 89 graus para criar esse efeito de espiral quadrada.
      Course 4 Artist For Loops 14_instruction: |
        Se você virar um pouco mais, ou um pouco menos, do que normalmente faria para uma forma, você cria um efeito legal. Tente
        virar 89 graus para criar esse efeito de espiral quadrada.
      Course 4 Artist For Loops 15_instruction: |
        Atividade livre: tente fazer alguns desenhos
        você mesmo, usando laços para. Adicionamos algumas variáveis genéricas
        para você usar também.
      Course 4 Artist For Loops 2_instruction: "Eu coloquei o código para desenhar\num
        triângulo dentro de um laço para que conta de 50 até 100, de 10 em 10. Veja
        como\neu fiz o código, e então clique em \"Executar\" quando você estiver
        pronto para vê-lo\nem ação. \n"
      Course 4 Artist For Loops 3_instruction: |
        O menor triângulo tem lados de 20 pixels,
        o maior tem lados de 200 pixels, e cada triângulo é 20 pixels maior que
        o anterior. Atualize o laço para desenhar esses triângulos.
      Course 4 Artist For Loops 4_instruction: |
        Use um laço "para" para desenhar esses quadrados.
        Eles começam com 50 pixels de comprimento, o maior tem 300 pixels de comprimento, e cada quadrado
        é 25 pixels maior que o anterior. Foi fornecida a maior parte do código
        de que você vai precisar - está faltando um bloco, qual?
      Course 4 Artist For Loops 5_instruction: "Você fez um bom trabalho no último
        desafio!\nVamos usar o bloco da variável \"contador\" mais uma vez para desenhar
        esta imagem. \n"
      Course 4 Artist For Loops 6_instruction: |
        Atividade livre: tente usar um laço "para"
        para desenhar um padrão crescente de formas com seu próprio design.
      Course 4 Artist For Loops 7_instruction: |
        O que acontece se você remover "Repita 3"
        desse algoritmo, mantendo os blocos "mova" e "vire" no laço
        para? Neste triângulo espiralado, cada lado é 20 pixels mais comprido que o anterior.
      Course 4 Artist For Loops 8_instruction: |
        A menor reta nessa espiral quadrada
        tem 10 pixels, a maior tem 200, e cada reta é 10 pixels maior que a
        anterior. Você consegue preencher os blocos que faltam para completar essa imagem incrível?
      Course 4 Artist For Loops 9_instruction: |
        Você consegue fazer uma espiral? Avance
        de 1 a 75 pixels, aumentando 1 pixel de cada vez.
      Course 4 Artist Functions 1_instruction: |
        Você consegue desenhar um quadrado com 100
        pixels de comprimento usando um laço?
      Course 4 Artist Functions 10_instruction: |
        Qual bloco você precisa adicionar para
        que o triângulo fique em cima do quadrado?
      Course 4 Artist Functions 11_instruction: |
        Veja esse código para desenhar um
        cubo - você consegue movê-lo para dentro de uma função chamada "desenhe um cubo"?
      Course 4 Artist Functions 12_instruction: Repita a função quadrado para desenhar
        uma reta
      Course 4 Artist Functions 13_instruction: |
        Confira nossa nova função
        "desenhe uma linha de quadrados". Fique à vontade para olhar dentro do bloco da função
        e ver como a construímos. Clique em "Executar" quando estiver pronto para o
        próximo desafio.
      Course 4 Artist Functions 14_instruction: |
        Excelente! Vamos usar
        sua nova função "desenhe uma linha de quadrados" para desenhar uma forma de quadrado. Lembre-se,
        cada quadrado tem 40 pixels de comprimento.
      Course 4 Artist Functions 15_instruction: 'Vamos acelerar um pouco, você consegue
        desenhar uma forma de estrela usando a função "desenhe uma linha de quadrados"?
        Boa sorte! Dica: você terá de virar 144 graus'
      Course 4 Artist Functions 2_instruction: |
        Você consegue desenhar 3 quadrados com 20 pixels de distância
        entre cada um? Dica: cada quadrado tem 100 pixels de tamanho
      Course 4 Artist Functions 3_instruction: "Usando o bloco de função \"desenhe
        um quadrado\",\nvocê consegue desenhar esta imagem? Dica: os quadrados estão
        a 120 pixels de distância um do outro.\r\n"
      Course 4 Artist Functions 4_instruction: |
        Você está pronto para criar seu próprio
        "bloco de função"? Clique no bloco "Funções" na caixa de ferramentas, nomeie-o
        como "desenhe um triângulo", e então crie um triângulo como você fez anteriormente
        com os blocos de ação e de laços. Então, clique em salvar e fechar no canto
        superior direito. Dica: crie um triângulo que tenha 100 pixels de comprimento.
        Boa sorte!
      Course 4 Artist Functions 5 OLD_instruction: |
        Vamos tentar usar nossas duas funções
        para desenhar uma casa - o que precisa ser corrigido neste código para desenhar a casa corretamente?
      Course 4 Artist Functions 5_instruction: "Usando o bloco de função \"desenhe
        um quadrado\",\nvocê consegue desenhar esta imagem? Dica: os quadrados estão
        a 120 pixels de distância um do outro.\r\n"
      Course 4 Artist Functions 6_instruction: |
        Qual bloco você precisa adicionar para
        que o triângulo fique em cima do quadrado?
      Course 4 Artist Functions 7_instruction: |
        Você consegue desenhar uma linha de quadrados usando
        uma função Quadrado? Cada quadrado tem 40 pixels de comprimento.
      Course 4 Artist Functions 8_instruction: "Você está pegando o jeito de como\nusar
        os blocos de função? Vamos modificar esse quadrado para que ele tenha 200
        pixels\nde tamanho. Dica: clique em \"editar\" para alterar o tamanho de \"desenhe
        um quadrado\"\nno editor da função. Lembre-se de clicar em \"Salvar e Fechar\"
        para sair do\neditor da função. \n"
      Course 4 Artist Functions 9_instruction: |
        A maior parte do código para
        criar uma função foi dada a você. Contudo, parece que algo está faltando. Você consegue
        completar este bloco de função?
      Course 4 Artist Params 1_instruction: |
        Vamos editar uma função que desenha um
        quadrado com lados de 50 pixels
      Course 4 Artist Params 10_instruction: "Você pode chamar funções de dentro\nde
        outras funções! Usando sua função \"forma\" como base, crie 3 formas\nde casa,
        cada uma 20 pixels maior que a anterior, começando com um comprimento de 50
        pixels. Usar\num laço com contador pode ser útil. \n"
      Course 4 Artist Params 11_instruction: |
        Que tal uma função chamada "cata-vento"
        que recebe três parâmetros - "lados," "comprimento" e "repita"? Você pode
        calcular o quanto virar depois de cada forma usando os mesmos cálculos que você usou
        para descobrir as ações de virar para uma forma de "lados". Você consegue recriar esta imagem?
        Dica: cada forma tem 100 pixels de comprimento.
      Course 4 Artist Params 12_instruction: |
        Use sua função "cata-vento" para desenhar
        cada uma dessas formas. O comprimento do lado de cada imagem é 50.
      Course 4 Artist Params 13_instruction: |
        Atividade livre: aqui estão as funções que você escreveu
        e mais algumas com as quais você pode brincar. Desenhe alguma coisa incrível!
      Course 4 Artist Params 2_instruction: |
        Essa função triângulo seria muito mais útil
        se pudesse desenhar triângulos de tamanhos diferentes. Foi adicionado
        um parâmetro para o comprimento da reta, mas ele ainda não faz coisa alguma. Você pode atualizar
        a função para que ela use o parâmetro "comprimento" para desenhar cada lado?
        Os tamanhos dos triângulos são 150 pixels, 75 pixels e 25 pixels.
      Course 4 Artist Params 3_instruction: "Incrível! Você consegue desenhar cada
        um desses triângulos\ncom essa nova função? O primeiro tem 25 pixels de comprimento,
        o segundo\ntem 50 e o terceiro tem 75. \n"
      Course 4 Artist Params 4_instruction: |
        Você consegue adicionar uma nova função chamada quadrado?
        Ela também deve receber um parâmetro comprimento, como a função triângulo. Dessa vez,
        desenhe 3 quadrados, de 25, 50, e 75 pixels de comprimento, separados por 100 pixels.
      Course 4 Artist Params 5_instruction: |
        Use suas duas novas funções para desenhar
        esta imagem. Para facilitar, você pode usar um laço com um parâmetro "contador".
      Course 4 Artist Params 6_instruction: "Vamos editar essa função \"desenhe uma
        forma\".\nEla já tem um parâmetro \"comprimento\". Agora, vamos editar a função
        para adicionar também\num parâmetro \"lados\". Lembre-se de que o ângulo para
        virar para uma determinada forma é\n360 dividido pelos lados que ela tem.
        Dica: o triângulo tem 100 pixels de comprimento, o hexágono tem 25 pixels
        e o quadrado tem 50 pixels. \n"
      Course 4 Artist Params 7_instruction: "Você consegue desenhar essas formas,
        preenchendo\no \"???\"? O quadrado e o triângulo têm 100 pixels, enquanto
        o hexágono\ntem 75 pixels. \n"
      Course 4 Artist Params 8_instruction: |
        Você consegue descobrir como desenhar esta
        forma? Dica: crie uma nova função com 6 lados chamada hexágono.
      Course 4 Artist Params 9_instruction: |
        Você se lembra de quando usamos o laço contador,
        mas removemos um laço de dentro? Vamos nos divertir um pouco e usar a função "desenhe uma
        forma" com os parâmetros "lados" e "comprimento". Você pode recriar
        essas formas? O contador do quadrado deve ser 5/100/5, o do triângulo deve ser
        10/100/10 e o do hexágono deve ser 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Aqui está o algoritmo para desenhar um triângulo.
        Modifique-o para que ele use a variável "lados". Substitua o número 3
        pela variável "lados". Dica: lembre-se de usar o bloco "defina os lados para".
      Course 4 Artist Vars 1_instruction: |
        Você pode me ajudar a desenhar um triângulo? Ele tem
        100 pixels de comprimento em cada lado.
      Course 4 Artist Vars 10_instruction: |
        Aqui temos um algoritmo que desenha um triângulo
        a partir de triângulos menores. Você pode modificá-lo para que ele use a variável "lados"
        para desenhar cada triângulo? Olhe para o código e, toda vez que você
        vir o número 3, substitua-o pela variável "lados". Lembre-se de usar
        o bloco "defina os lados".
      Course 4 Artist Vars 11_instruction: |
        Aqui está o mesmo algoritmo que usamos
        no último desafio - qual deve ser o valor atribuído à variável "lados"
        para desenhar essa imagem de quadrados?
      Course 4 Artist Vars 12_instruction: |
        Vamos definir a variável "lados" como
        5. Quanto mais lados adicionarmos a esse algoritmo, maior será o
        padrão! Vamos adicionar uma nova variável chamada "comprimento" e usá-la onde há
        um bloco "avance". Para essa forma, defina a variável "comprimento" como 75.
      Course 4 Artist Vars 13_instruction: |
        Quanto mais lados a forma tem, menor
        cada lado precisa ser para que o padrão todo caiba na tela.
        Ao invés de definir a variável "comprimento" manualmente, vamos usar a variável "lados"
        e um bloco matemático para definir o "comprimento". Escolha a equação correta
        da caixa de ferramentas para definir a variável "comprimento" e também atualize a variável
        "lados".
      Course 4 Artist Vars 14_instruction: |
        Atividade livre: veja, agora seu algoritmo
        está aninhado dentro de mais um laço. Experimente alterar os valores das
        suas duas variáveis para desenhar padrões legais.
      Course 4 Artist Vars 2_instruction: |
        Ao invés de "avance por 100,"
        o bloco "mova" agora referencia a variável "comprimento". Você pode definir
        "comprimento" como 150 para desenhar esse triângulo novo?
      Course 4 Artist Vars 3_instruction: "Temos aqui um laço que desenha um quadrado,
        mas\nalgo está faltando. Você pode consertá-lo para que ele use a variável
        \"comprimento\"\npara descobrir qual deve ser o tamanho de cada lado? \n"
      Course 4 Artist Vars 4_instruction: |
        Agora eu quero fazer um retângulo que tenha
        a altura duas vezes maior que a largura. Temos uma variável chamada "largura" que
        tem valor 100. Você pode usar os blocos matemáticos para completar o código?
      Course 4 Artist Vars 5_instruction: |
        Use a variável "lados" para controlar
        quantas vezes esse laço é executado.
      Course 4 Artist Vars 6_instruction: |
        Hmm, eu tentei alterar o valor da variável "lados"
        para 4 a partir do código do último desafio, mas ele ainda está desenhando um triângulo.
        Você pode usar a variável "lados" (junto com um bloco matemático) para garantir
        que eu vire a quantidade correta? Dica: 360 dividido pelo número de lados
        resulta no número de graus a virar.
      Course 4 Artist Vars 7_instruction: |
        Você pode modificar a variável "lados"
        para me ajudar a desenhar esse hexágono?
      Course 4 Artist Vars 8_instruction: "Atividade livre: faça experiências com
        o número\nde lados que essa forma tem. Você consegue alterar o algoritmo de
        forma que o tamanho\ntotal da forma seja sempre o mesmo, não importando quantos
        lados ela tem? Dica: você\npode precisar usar seus blocos matemáticos (360
        dividido por \"lados\" em dois lugares\ndesta vez) \n"
      Course 4 Artist Vars 9_instruction: |
        Modifique esse algoritmo para que ele use a variável
        "lados" ao invés de um número fixo para desenhar um triângulo. Substitua o número
        3 pela variável "lados" e use o bloco "defina os lados para".
      Course 4 Bee 1_instruction: "A abelha não sabe dizer se isso é uma flor ou uma
        colmeia.\nPrimeiro verifique se isso é uma for ou uma colmeia, e então colete
        néctar\napenas se for uma flor. \n"
      Course 4 Bee 2_instruction: |
        Verifique cada um dos objetos para ver se ele é uma flor
        - se for, colete néctar.
      Course 4 Bee 3_instruction: |
        O objeto desconhecido pode ser uma flor ou uma colmeia.
        Use o bloco se-senão para coletar néctar se ele for uma flor, senão produza mel
        (porque então ele seria uma colmeia).
      Course 4 Bee 4_instruction: |
        Essa flor roxa pode ter 1, 2 ou 3
        néctares. Aqui um bloco se-senão é combinado com outro bloco se-senão para criar
        um bloco se, senão-se, senão. Complete a solução para coletar a quantidade desconhecida
        de néctar.
      Course 4 Bee For Loops 1_instruction: |
        Use um laço para coletar o néctar de
        todas as flores.
      Course 4 Bee For Loops 10_instruction: |
        Se seu laço está fazendo contagem regressiva, o
        incremento é subtraído da sua variável contador a cada repetição. Qual deve ser
        seu incremento para coletar 9, então 6, e então 3 néctares?
      Course 4 Bee For Loops 2_instruction: |
        Temos aqui um novo tipo de laço, chamado de
        laço "para". Esse laço para em particular vai contar de 1 até 5, de 1 em 1, e executar
        o conteúdo do laço a cada contagem. Ajude a abelha a chegar até o néctar.
      Course 4 Bee For Loops 3_instruction: |
        Você pode resolver esse desafio usando um
        laço "para" para contar de 1 até 3, de 1 em 1. Agora vamos coletar um pouco de néctar!
      Course 4 Bee For Loops 4_instruction: |
        Colete todo o néctar dessas
        flores. Eu gostaria de saber se existe uma forma mais fácil de fazer isso...
      Course 4 Bee For Loops 5_instruction: "Ah, o laço para deixa isso muito mais
        fácil!\nEstamos usando a variável \"contador\" do laço \"para\" para repetir
        o bloco \"obtenha néctar\"\no mesmo número de vezes que o laço se repete.
        Ufa! São muitas repetições.\nTodo o código que você precisa está aqui, dê
        uma olhada nele e então\nclique em Executar para ver como ele funciona. \n"
      Course 4 Bee For Loops 6_instruction: |
        Você também pode usar um laço "para" para fazer contagem
        regressiva. Tente coletar esse néctar fazendo uma contagem regressiva de 5 até 1, de 1 em 1.
      Course 4 Bee For Loops 7_instruction: |
        Use a variável "contador" do seu laço "para"
        para controlar a distância do movimento horizontal.
      Course 4 Bee For Loops 8_instruction: |
        Você pode usar a variável do laço para controlar
        o movimento e a coleta de néctar?
      Course 4 Bee For Loops 9_instruction: |
        O último número em seu laço para é
        chamado de "incremento" e, a cada execução do laço, a variável contador
        é alterada de acordo com o incremento. Tente coletar essas flores usando um incremento
        de 2.
      Course 4 Bee Params 1_instruction: |
        Use a função "obtenha 3 néctares" que
        vira, move-se para coletar o néctar e então retorna à posição original.
        Escreva uma sequência para coletar todo o néctar usando "obtenha 3 néctares".
      Course 4 Bee Params 2_instruction: |
        Modifique a função "obtenha 2 néctares" para
        que ela me faça virar para a direita ao invés da esquerda para chegar às flores.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Agora há flores em ambos os
        lados! Talvez você possa usar um parâmetro para que a mesma função funcione para flores
        dos dois lados. Eu adicionei um parâmetro chamado "direção" à função.
        Se o parâmetro "direção" for igual a 0 eu devo virar à esquerda, se ele for 1 eu devo
        virar à direita.
      Course 4 Bee Params 3_instruction: |
        Agora há flores em ambos os lados! Eu
        adicionei um parâmetro chamado "direção" à função. Use as variáveis "esquerda" e
        "direita" para controlar a direção. Preencha o resto da definição da função
        e então clique em "Salvar e Fechar".
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todas as flores. Lembre-se, 0 = esquerda e 1 = direita.
      Course 4 Bee Params 4 backup_instruction: |
        Não seria legal se pudéssemos
        coletar todo o néctar com uma única função? Tente adicionar um novo
        parâmetro à função chamado "néctares" para controlar a quantidade de néctar
        a coletar. Você provavelmente vai querer renomear a função também!
      Course 4 Bee Params 4_instruction: |
        Tente usar sua nova função para coletar
        todas as flores. Lembre-se de usar as variáveis esquerda e direita.
      Course 4 Bee Params 5_instruction: |
        Vamos começar do princípio - você pode criar
        uma nova função chamada "obtenha 5 néctares" com um parâmetro de direção?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todo o néctar.
      Course 4 Bee Params 6_instruction: |
        Não seria legal se pudéssemos coletar
        todo o néctar com uma única função? Tente adicionar um novo parâmetro
        à função chamado "néctares" para controlar a quantidade de néctar a coletar.
        Você provavelmente vai querer renomear a função também!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Tente usar sua nova função para
        coletar todo o néctar.
      Course 4 Bee Params 7_instruction: |
        Tente usar sua nova função para coletar
        todo o néctar.
      Course 4 Bee Params 8_instruction: |
        Ah, agora também precisamos lidar com o mel!
        Como você poderia atualizar sua função para coletar néctar ou produzir mel?
      Course 4 Binary 1_instruction: |
        Temos aqui uma função que recebe uma string binária
        de 1's e 0's e instrui a fazendeira a se mover da esquerda para a direita,
        de cima para baixo, passando pelos quadrados nos quais o número tem um zero. Execute o
        código fornecido para ver como a fazendeira usa números binários para desenhar uma imagem.
      Course 4 Binary 2_instruction: |
        Qual string binária você poderia repetir 8 vezes para
        desenhar essa imagem? Dica o número "1" preenche um buraco.
      Course 4 Binary 3_instruction: |
        Você pode desenhar esse padrão repetindo uma única
        string binária?
      Course 4 Binary 5 (copy 1)_instruction: |
        Qual string binária, repetida 10 vezes,
        vai desenhar essa imagem?
      Course 4 Binary 5_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 6 (copy 1)_instruction: |
        Qual string binária, repetida 10 vezes,
        vai desenhar essa imagem?
      Course 4 Binary 6_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 7 (copy 1)_instruction: |
        Você pode completar a maior parte dessa
        imagem repetindo um número binário de 5 bits - então você vai precisar de mais um número
        de 4 bits para completar o canto inferior direito.
      Course 4 Binary 7_instruction: |
        Qual string binária, repetida 10 vezes, vai
        desenhar essa imagem?
      Course 4 Binary 8_instruction: |
        Você pode completar a maior parte dessa imagem
        repetindo um número binário de 5 bits - então você vai precisar de mais um número de 4 bits
        para completar o canto inferior direito.
      Course 4 Maze 1_instruction: Leve o Angry Bird até o porco!
      Course 4 Maze 2_instruction: Desvie do TNT!
      Course 4 Maze 3_instruction: 'Programe o Angry Bird para chegar até o porco. '
      Course 4 Maze 4_instruction: Experimente o bloco "repita" para usar menos blocos...
      Course 4 Maze 5_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      Course 4 Maze 6_instruction: |
        Você pode resolver esse desafio usando o menor número
        possível de blocos?
      Course 4 Play Lab For Loops 2_instruction: |
        Dessa vez, vamos tentar contar
        os números ímpares de 1 até 100.
      Course 4 Play Lab Params 1 (copy 1)_instruction: |
        Aqui temos uma função chamada
        "pule" que faz seu personagem principal pular 100 pixels. Use a função pule
        para coletar todas as bandeiras.
      Course 4 Play Lab Params 1_instruction: |
        Aqui temos uma função chamada "pule"
        que faz seu personagem principal pular 100 pixels. Use a função pule
        para coletar todas as bandeiras.
      Course 4 Play Lab Params 10_instruction: |
        Adicionamos uma última função para
        que você use. Programe seu jogo para chamar a função "suba de nível" se "pontos_jogador"
        > 10. Jogue o jogo e passe do nível 4 para seguir para o próximo desafio.
      Course 4 Play Lab Params 2 (copy 1)_instruction: |
        Agora temos bandeiras que
        estão muito altas para nosso pulo atual! Vamos adicionar um parâmetro para nossa função pule
        chamado "altura". A seta para cima deve pular 100 pixels, mas a seta para baixo
        deve pular 300 pixels. Cuidado, você não quer bater na <barreira futura
        acima as bandeiras de baixo>!
      Course 4 Play Lab Params 2_instruction: |
        Agora temos bandeiras que estão altas demais
        para nosso pulo atual! Vamos adicionar um parâmetro à função pule chamado
        "altura". A seta para cima deve pular 200 pixels, mas a seta para baixo deve
        pular 100 pixels. Clique em "editar" na função pule e atualize-a para que
        ela use o parâmetro altura ao invés de simplesmente pular 100 pixels.
      Course 4 Play Lab Params 3_instruction: "Vamos adicionar outro parâmetro à\nfunção
        pule para que possamos usá-la com outros personagens. Cada personagem é representado\npor
        um número, começando em um. Edite a função \"pule\" para que a definição\ninclua
        o parâmetro \"personagem\". \n"
      Course 4 Play Lab Params 4_instruction: |
        Aqui temos uma função chamada "patrulhe".
        Edite-a para mover o gato 400 pixels para cima, e então 400 pixels para baixo.
      Course 4 Play Lab Params 5_instruction: |
        Preencha a entrada do parâmetro "personagem"
        para que possamos chamar a função "patrulhe" para cada um dos personagens. Lembre-se,
        os personagens correspondem aos números 1, 2 e 3.
      Course 4 Play Lab Params 6_instruction: |
        Adicione outro parâmetro chamado "velocidade"
        à função "patrulhe". Use um bloco "defina a velocidade" com o novo parâmetro
        "velocidade".
      Course 4 Play Lab Params 7_instruction: |
        Use as setas do teclado para controlar o
        cão e coletar todas as bandeiras.
      Course 4 Play Lab Params 8_instruction: |
        Use um bloco "quando tocar" para enviar
        o cão de volta para a parte superior esquerda se ele tocar em qualquer outro personagem.
      Course 4 Play Lab Params 9_instruction: "Temos aqui um dos jogos nos quais estávamos
        trabalhando\nmais cedo. Adicionamos uma função chamada \"marque_pontos\" que
        recebe um parâmetro\n\"pontos\". Edite a função para que o parâmetro \"pontos\"
        seja adicionado à\nvariável \"pontos_do_jogador\". Faça o cão marcar 10 pontos
        para seguir para\no próximo desafio. \n"
      Course 4 Play Lab Vars 1_instruction: |
        Você não precisa escrever código algum, apenas
        clique em "Executar" para jogar! Nesse jogo, você é o cão que está tentando
        coletar mais bandeiras do que o gato. Use a seta para baixo para controlar o cão.
        Pressione "Terminar" quando você terminar de jogar.
      Course 4 Play Lab Vars 2_instruction: |
        Essa corrida não foi muito justa! Altere
        a variável "velocidade_cão" para garantir que você possa coletar mais bandeiras do que o
        gato. O primeiro a coletar 10 bandeiras vence!
      Course 4 Play Lab Vars 3 (copy 1)_instruction: |
        Temos aqui um novo tipo de jogo!
        Use as setas para a esquerda e para a direita para se mover e a seta para cima para pular. Veja se
        você consegue coletar todas as bandeiras.
      Course 4 Play Lab Vars 3_instruction: |
        Temos aqui um novo tipo de jogo! Use as
        setas para a esquerda e para a direita para se mover e a seta para cima para pular. Veja se você
        consegue coletar todas as bandeiras.
      Course 4 Play Lab Vars 4_instruction: |
        Agora estamos usando uma variável chamada "altura"
        para controlar a altura que o cão pode pular. Atualize a variável "altura" para que
        o cão possa pular alto o suficiente para alcançar todas as bandeiras. Dica: as novas bandeiras estão
        a uma altura de 200 pixels.
      Course 4 Play Lab Vars 5_instruction: "Vamos criar um jogo! Primeiro precisamos
        de\numa pontuação. Use o bloco \"defina os pontos como\" para definir a pontuação
        com valor 10. \n"
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Legal, agora temos nossa variável
        pontuação, mas como vamos torná-la útil? Que tal somar à variável
        pontuação toda vez que você acertar o inimigo com uma bola de fogo? Use o evento
        "quando o personagem 2 tocar em alguma coisa" para disparar uma atualização para a pontuação
        quando sua bola de fogo atingir o gato. Você pode incrementar a pontuação fazendo pontuação
        = pontuação + 1. Faça sua pontuação chegar até 10 (um ponto por vez!) para passar de nível.
      Course 4 Play Lab Vars 6_instruction: |
        Em nosso jogo, como devemos marcar pontos?
        Adicione 1 à variável "pontos" toda vez que o cão atingir o gato com uma bola de fogo.
        Use o evento "quando o personagem 2 tocar alguma coisa" para disparar uma atualização em
        sua pontuação. Você pode incrementar sua variável definindo "pontos = pontos +1".
        Faça sua pontuação chegar até 10 (aumentando um ponto por vez!) para passar de nível.
      Course 4 Play Lab Vars 7 (copy 1)_instruction: |
        Legal, agora vamos garantir
        que esse jogo não seja muito fácil - sempre que você for atingido por uma bola de fogo, você deve
        perder um ponto. Também vamos começar com 10 pontos, para que ele não seja muito difícil.
        Faça sua pontuação cair de 10 para 0 para passar de nível.
      Course 4 Play Lab Vars 7_instruction: |
        Legal, agora vamos garantir que esse jogo
        não seja muito fácil - sempre que o cão (personagem 1) for atingido por uma bola de fogo,
        você deve perder um ponto. Comece com 10 pontos para que o jogo não seja muito difícil. Faça sua
        pontuação cair de 10 para 0 para passar de nível.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Certo, uma última coisa para
        esse jogo - vamos configurá-lo para que o jogador possa ganhar (ou perder). Use um laço infinito
        para verificar o valor da pontuação - se a pontuação for maior que 20, faça
        o inimigo desaparecer. Se a pontuação for menor que 0, faça o jogador desaparecer.
        Clique em "Terminar" quando o jogo funcionar do jeito que você gostaria.
      Course 4 Play Lab Vars 8_instruction: |
        Vamos configurar o jogo para que o cão possa
        ganhar (ou perder). Use um laço infinito para para verificar o valor da pontuação - se a pontuação
        for maior que 20, faça o inimigo (o gato) desaparecer. Se a pontuação for
        menor que 0, faça o jogador (o cão) desaparecer. Clique em "Terminar" quando o jogo
        funcionar do jeito que você gostaria.
      Course 4 Play Lab Vars 9_instruction: |
        Hora da atividade livre! Aqui estão todas as
        variáveis que usamos até agora e também algumas a mais, caso você as
        queira. Crie um jogo ou uma história que usa essas variáveis. Dica: role para baixo para
        ver todos os comandos da área de trabalho.
      Course 4 Play Lab Vars_instruction: |
        Certo, uma última coisa para esse jogo
        - vamos configurá-lo para que o jogador possa ganhar (ou perder). Use um laço infinito para
        verificar o valor da pontuação - se a pontuação for maior que 20, faça o inimigo
        desaparecer. Se a pontuação for menor que 0, faça o jogador desaparecer.
      Course 4 Play Labs For Loops 1_instruction: |
        Vamos fazer o cão falar todos
        os números de 1 a 100. Use um laço para e o bloco contador para que ele fale o valor da variável
        contador a cada vez que o laço for executado.
      Course 4 Play Labs For Loops 2_instruction: |
        Dessa vez, vamos tentar contar
        os números ímpares de 1 até 100.
      Course 4 Play Labs For Loops 3_instruction: |
        Se contarmos usando números maiores,
        podemos contar até números ainda maiores no mesmo intervalo de tempo. Tente fazer o cão
        contar de 10 até 1000, contando de 10 em 10.
      Course 4 Play Labs For Loops 4 (copy 1)_instruction: |
        Alterar o incremento
        pode ser útil, mas ainda estamos contando linearmente (cada número está separado
        pela mesma distância do anterior). E se eu quisesse contar exponencialmente? Sem alterar
        as configurações desse laço para, você pode contar 1, 4, 9 , 16, 25... (contador
        ao quadrado)?
      Course 4 Play Labs For Loops 4_instruction: |
        Alterar o incremento pode ser
        útil, mas ainda estamos contando linearmente (cada número está separado pela mesma
        distância do anterior). E se eu quisesse contar exponencialmente? Sem alterar
        as configurações desse laço para, você pode contar 1, 4, 9 , 16, 25... (contador
        ao quadrado)?
      Course 4 Play Labs For Loops 5_instruction: |
        Na última etapa contamos o
        quadrado de cada número. Tente alterar "contador ^ 2" para "contador ^ 3" para
        contar o cubo de cada número (1, 8, 27, 64, 125, 216, 343 ….)
      Course 4 Play Labs For Loops 6_instruction: |
        Você deve se lembrar de que um número primo
        é qualquer número inteiro que é divisível apenas por ele mesmo e por 1. Use a função "é_primo"
        para falar apenas os números primos de 1 a 100.
      Course 4 Play Labs For Loops 7_instruction: |
        Você poderia usar um laço "para" para me
        ajudar a falar a sequência 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 8_instruction: |
        Qual laço me faria falar
        19, 27, 35, 43, 51?
      Course1BeePuzzle12_instruction: Obtenha três néctares e então fabrique duas
        unidades de mel
      Course1MazeAssessment1_instruction: "Isso é um teste!\r\nMova-me por um caminho
        e então\npor outro para me levar até o porco"
      Course1MazeAssessment2_instruction: "Isso é um teste!\r\nMova-me por um caminho
        e então\npor outro para me levar até o porco."
      Eval Booleans 1_instruction: |
        Operadores booleanos (como >, <, =) nos permitem
        comparar valores diferentes, retornando "verdadeiro" ou "falso". Clique em "Executar"
        para ver o que essa expressão retorna.
      Eval Booleans 2_instruction: |
        Você pode definir os valores para que essa expressão
        seja "verdadeira"?
      Eval Booleans 3_instruction: |
        A função "comprimento-string" retorna o número
        de caracteres em uma string (incluindo espaços!) - faça esse código retornar
        "verdadeiro".
      Eval Booleans 4_instruction: |
        Aqui temos um bloco de avaliação chamado E - ele retorna
        verdadeiro se ambos os parâmetros forem verdadeiros, caso contrário ele retorna falso. Edite
        a variável x para que essa expressão retorne verdadeiro.
      Eval Booleans 5_instruction: |
        Esse bloco OU retorna verdadeiro se algum dos seus parâmetros
        for verdadeiro. Caso contrário, se ambos os parâmetros forem falsos, ele vai retornar falso. Defina
        a variável y com um valor que vai fazer com que a expressão retorne falso.
      Eval Booleans 6_instruction: |
        Aqui temos mais um bloco booleano chamado NÃO. Esse
        bloco transforma verdadeiro em falso, ou falso em verdadeiro. Se você envolver esse bloco
        de código em um bloco NÃO, ele deve retornar verdadeiro (porque estamos perguntando se as
        duas expressões NÃO produzem valores iguais).
      Eval Booleans Free Play_instruction: |
        Atividade livre: experimente criar algo
        você mesmo usando booleanos.
      Eval Booleans_instruction: |
        Booleanos nos permitem comparar valores diferentes,
        retornando "verdadeiro" se eles forem iguais, ou "falso" se eles não forem. O que
        você acha que esse código vai retornar?
      Eval Cond 1_instruction: |
        O bloco cond verifica as expressões booleanas na
        coluna esquerda, e assim que ele encontra uma que retorna "verdadeiro", ele executa
        o código correspondente na direita. Se nenhuma das expressões retornarem
        "verdadeiro", ele executa o bloco da parte inferior. Atualize a variável "temperatura" para
        que esse bloco retorne "Está certo".
      Eval Cond 2 (copy 1)_instruction: |
        Essa condição retorna uma forma diferente
        com base no valor da variável "lados" - altere o valor de "lados"
        para que a condição retorne um triângulo.
      Eval Cond 2_instruction: |
        Essa condição retorna uma forma diferente com base no
        valor da variável "lados" - altere o valor de "lados" para que
        a condição retorne um triângulo.
      Eval Cond 3 (copy 1)_instruction: |
        Você consegue escrever uma condição que verifica
        a variável "idade" e retorna "idade suficiente para votar e dirigir" se idade >
        17, "idade suficiente para votar" se idade > 15 e "idade insuficiente para dirigir ou votar" se
        nenhuma das condições for verdadeira? Dica: a primeira condição a retornar "verdadeiro" ganha
        - lembre-se de colocar as condições na ordem certa.
      Eval Cond 3_instruction: |
        Você pode escrever uma condição que verifica a variável
        "idade" e retorna "idade suficiente para votar e dirigir" se idade > 17, "idade suficiente
        para votar" se idade > 15 e "idade insuficiente para dirigir ou votar" se nenhuma das condições
        for verdadeira? Dica: a primeira condição a retornar "verdadeiro" ganha - lembre-se de
        colocar as condições na ordem certa.
      Eval Cond 4_instruction: |
        Podemos usar a função "string=?" para criar condições
        que respondam à entrada de texto. Aqui temos uma função chamada "forma verde" que
        recebe um parâmetro string para a forma. Complete as condições para que a
        forma correta seja desenhada quando a função for executada com "círculo", "triângulo",
        "quadrado" ou "retângulo".
      Eval Cond 5_instruction: |
        Aqui temos uma função "forma vermelha" semelhante com um
        parâmetro adicional para o tamanho. Complete as condições para que a imagem correta
        seja desenhada para "círculo", triângulo" e "estrela".
      Eval Cond 6_instruction: "Escreva uma função chamada crítica-culinária, que
        recebe\no nome de um prato e produz uma string que diz o que você acha desse\nprato.
        Por exemplo, (crítica-culinária \"pizza\") deve retornar \"deliciosa\", mas\n(crítica-culinária
        \"ovos estragados\") deve retornar \"horrível!\". Escolha pelo menos dois\npratos
        para avaliar, mas você pode escrever mais se quiser! Não se esqueça de\nadicionar
        uma cláusula \"senão\"!\r\nUm exemplo - e parte da definição - já foram\nfeitos
        para você!"
      Eval Cond 7_instruction: "Atividade livre: escreva uma função chamada forma-verde,
        que\nrecebe o nome de uma forma e produz uma forma verde sólida. Sua função\ndeve
        funcionar pelo menos com \"círculo\", \"estrela\" e \"retângulo\", mas você
        pode adicionar\noutras formas se quiser. Você pode escolher o tamanho de cada
        forma. Não se esqueça\nde adicionar uma cláusula “senão”!\r\nUm exemplo -
        e parte da definição - já\nestão prontos para você!\r\n"
      Eval Cond 8_instruction: "Atividade livre: suponha que você queira ter um carro
        aos 21 anos, ou\nter seu próprio negócio aos 30 anos. Escreva uma função chamada
        objetivos-vida, que recebe\numa idade e produz uma string que descreve seus
        objetivos de vida nessa idade. Não\nse esqueça de adicionar uma cláusula \"senão\"!\r\n"
      Eval Contracts 1_instruction: |
        Use a função "estrela" para produzir uma estrela vermelha
        com um raio de 60 pixels
      Eval Contracts 10A_instruction: |
        Certo, vamos completar esse desafio com um
        quadrado verde que tem 175 pixels de tamanho.
      Eval Contracts 11A_instruction: |
        Você consegue completar esse desafio e fazer aparecer "Olá,
        mundo" no cartaz?
      Eval Contracts 2_instruction: |
        Confira a função "rotacione" - você pode
        usá-la para rotacionar esse quadrado verde de 90 pixels em 45 graus?
      Eval Contracts 3_instruction: |
        Tente usar a função "texto" para escrever esse
        texto azul com tamanho 40.
      Eval Contracts 4 A_instruction: |
        A função "escala" retorna uma imagem redimensionada
        para um tamanho menor ou maior que a imagem de entrada. Tente redimensionar
        esse círculo por um fator de 10 - como a imagem resultante é diferente do que seria se você
        simplesmente fizesse um círculo desse tamanho em primeiro lugar?
      Eval Contracts 4_instruction: |
        A função "escala" retorna uma imagem que
        é maior ou menor que a imagem de entrada. Tente escalar esse círculo
        por um fator de 10. Como a imagem retornada é diferente da que você teria se você
        tivesse feito um círculo desse tamanho a princípio?
      Eval Contracts 8A_instruction: |
        Você pode completar esse desafio? O triângulo grande
        tem 200 pixels de tamanho e é roxo?
      Eval Contracts A_instruction: |
        Use a função "estrela" para produzir uma estrela
        vermelha sólida com raio de 60 pixels
      Eval Contracts C_instruction: |
        Confira a função "rotacione" - você pode
        usá-la para rotacionar esse quadrado verde de 90 pixels em 45 graus?
      Eval Contracts E_instruction: |
        Experimente usar a função "texto" para escrever
        "Olá, mundo!" na cor azul e com tamanho 40.
      Eval Contracts shrink_instruction: "Você pode completar essa imagem usando o
        bloco\nde função \"encolha\"? O raio é 20. \n"
      Eval Define Funcs 1_instruction: |
        Aqui temos uma nova função chamada "triângulo-verde"
        que recebe um único número para o tamanho e produz um triângulo verde. Use a
        nova função para criar um triângulo verde de 125 pixels
      Eval Define Funcs 2_instruction: |
        Vamos olhar dentro da função "triângulo-verde"
        para ver como ela funciona. Você pode modificá-la para que a função "triângulo-verde"
        sempre desenhe triângulos verdes delineados?
      Eval Define Funcs 3_instruction: "Temos aqui o começo de outra nova função\nchamada
        \"círculo-roxo\" com um domínio de um número (o raio) e um intervalo\nde imagem.
        Contudo, o corpo da função está errado, e ela sempre desenha um círculo\nde
        50 pixels de raio ao invés de usar o parâmetro raio. Substitua o número atual\npelo
        bloco \"raio\" do domínio. \n"
      Eval Define Funcs 4_instruction: |
        Crie uma nova função chamada "estrela-aqua"
        que tem um domínio de um único número para o raio e retorna uma estrela aqua do
        raio dado. Execute sua nova função com um raio de 75.
      Eval Define Funcs 5_instruction: |
        Vamos usar a função "estrela-aqua" para
        criar uma fileira com estrelas de tamanhos diferentes. Da esquerda para a direita, as estrelas
        devem ter raios de 25, 50 e 75.
      Eval Defining Vars Free Play 1_instruction: |
        Atividade livre: fornecemos uma função
        que preenche sua tela com minha-imagem. Altere minha-imagem para ver que padrão
        você pode fazer.
      Eval Design Recipe .1_instruction: |
        Temos aqui uma receita de design para uma função
        chamada "quadrado-círculo" com domínio de número e string e intervalo de imagem. Clique
        em Editar para escrever a definição da função (você vai ver dois exemplos fornecidos).
      Eval Design Recipe 1 (copy 1)_instruction: |
        Vamos escrever uma função
        que desenha um retângulo sólido de qualquer cor e que tenha a largura duas vezes maior que
        sua altura. Comece com um exemplo - desenhe um retângulo verde sólido que tem uma altura de
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Certo, agora, dado o contrato ret-largo:
        string de números -> imagem, escreva um exemplo - desenhe um retângulo verde sólido que
        tenha altura de 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Vamos fazer mais um exemplo antes de
        escrever a definição da função - dessa vez, desenhe um retângulo vermelho sólido com
        uma altura de 75 pixels.
      Eval Design Recipe 2_instruction: |
        Vamos fazer mais um exemplo antes de escrever
        a definição da função - dessa vez, desenhe um retângulo vermelho sólido com uma altura
        de 75 pixels.
      Eval Design Recipe 3_instruction: |
        A receita de design para "ret-largo" já
        tem um contrato e um exemplo. Você consegue escrever um segundo exemplo e então completar
        a definição? A função "ret-largo" deve produzir um retângulo de uma determinada
        cor e que tenha a largura duas vezes maior que a altura.
      Eval Design Recipe 4_instruction: |
        Use a receita de design para criar uma função
        "starburst" que tem dois domínios. 1) um número de pontos e 2) um raio.
        "starburst" retorna uma estrela radial amarela com os pontos dados e um raio
        interno que tem metade do tamanho do raio externo.
      Eval Design Recipe 5_instruction: |
        Usando a receita de design, escreva uma função
        "bandeira-listrada" que recebe duas cores e produz uma bandeira de 250 pixels
        de largura, 150 pixels de altura e com três listras horizontais de cores determinadas, na ordem cor2, cor1 e cor2.
      Eval Design Recipe 6_instruction: |
        Usando a receita de design, escreva uma função
        "polígono-grande" que deve retornar um polígono de lados e cor determinados que
        cobre a maior parte da janela, independentemente do número de lados. Para garantir
        que o polígono não fique muito grande conforme você aumenta o número de lados, o
        comprimento do lado deve ser inversamente proporcional ao número de lados, com um
        comprimento de (800/lados).
      Eval Design Recipe Free Play_instruction: |
        Atividade livre: use a receita de design
        para criar algumas funções com seu próprio design
      Eval Free Play_instruction: 'Atividade livre: faça arte com código!'
      Eval Strings Images .1_instruction: |
        Até agora, lidamos com um único
        tipo de dado, os números. Outro tipo de dados é a string, que é uma combinação
        de letras, números, ou outros caracteres envolvidos entre aspas. Execute a
        string "Olá, mundo!" e veja o que acontece.
      Eval Strings Images .2_instruction: |
        A função "acrescentar-string" recebe duas
        strings e retorna uma única string combinada. Adicione uma string "universo"
        ao segundo argumento de "acrescentar-string".
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This "star" function takes in a Number and two Strings,
        and it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Atividade livre: todos os blocos de cálculo estão identificados por cores
        para que você saiba que tipo de dados eles retornam e que tipo de dados eles precisam para seus
        parâmetros. O último parâmetro da função triângulo recebe uma string que
        controla sua cor - experimente algumas cores diferentes para ver o que acontece.
      Eval Strings Images 3_instruction: |
        Algumas funções podem receber somente um conjunto específico
        de strings, tais como o segundo argumento dessa função círculo, que
        controla seu estilo. Desenhe esse círculo laranja contornado usando o bloco de string
        especial com um menu suspenso para garantir que você use apenas estilos válidos.
      Eval Strings Images 4_instruction: |
        Tente usar o bloco "retângulo" para desenhar
        esse retângulo vermelho sólido - ele tem 175 pixels de largura e 100 pixels de altura.
      Eval Strings Images 5_instruction: |
        Tente usar esse novo bloco de cálculo chamado
        "sobreposição" para desenhar um triângulo branco de 100 pixels em cima de um círculo
        vermelho de 200 pixels.
      Eval Strings Images 6_instruction: |
        Use a função sobreposição para colocar uma estrela
        amarela com raio de 75 pixels em cima de um quadrado azul com 150 pixels de comprimento.
      Eval Strings Images 7_instruction: |
        O bloco "deslocamento" permite que você mova uma imagem
        com relação a onde ela normalmente seria colocada. Use esse bloco para deslocar o
        quadrado por 100 pixels no eixo y.
      Eval Strings Images 8_instruction: |
        Temos aqui um tipo diferente de bloco de estrela
        - ele é chamado "estrela-radial" e permite que você desenhe estrelas com qualquer número
        de pontos! Use-o para criar uma estrela laranja sólida com um raio interno de 75
        pixels e um raio externo de 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Atividade livre: explore os blocos disponíveis
        para criar algo interessante. Lembre-se de compartilhar suas criações favoritas.
      frozen circle function in circle_instruction: |
        Agora vamos criar 20 círculos
        sobrepostos, virando 18 graus entre cada círculo.
      frozen circle function with parameter_instruction: |
        Temos aqui um bloco "crie um círculo"
        que pode fazer círculos de tamanhos diferentes. Você pode usar isso para criar
        um pequeno círculo de tamanho 5 e um círculo maior de tamanho 10?
      frozen circle function_instruction: |
        Use o novo bloco "crie um círculo" para
        criar 10 círculos sobrepostos. Não se esqueça de avançar entre os círculos.
      frozen circle_instruction: |
        Um círculo é uma forma especial. Você pode descobrir
        que número usar para substituir os pontos de interrogação para desenhar um círculo?
      frozen cross rotate dense_instruction: |
        Vamos repetir isso 90 vezes! Quantas
        vezes 90 cabe em 360? Dica: é um número realmente pequeno.
      frozen cross rotate_instruction: |
        Agora, tente repetir isso 10 vezes. Quantos graus
        você precisa virar entre cada reta?
      frozen cross_instruction: |
        Use o bloco "repita" para criar um sinal de adição. Você
        percebeu que Elsa pode se mover para a frente e para trás?
      frozen diamond mini snowflake_instruction: |
        Você sabia que cada floco de neve tem
        uma forma diferente? Vamos criar um novo floco de neve usando o bloco "repita"
        para repetir um paralelogramo 4 vezes, virando 90 graus à direita entre cada
        paralelogramo.
      frozen diamond snowflake_instruction: |
        Agora, vamos criar um novo floco de neve
        usando o bloco repita para repetir um paralelogramo 10 vezes, virando 36 graus
        à direita entre cada um.
      frozen diamond_instruction: |
        Vamos criar um paralelogramo. Ele é como
        um quadrado, mas tem ângulos diferentes: ângulos de 60 e de 120 graus ao invés de
        ângulos de 90 graus.
      frozen freeplay_instruction: |
        Você se tornou oficialmente um artista mestre! Crie
        um país das maravilhas de gelo.
      frozen line_instruction: |
        Oi! Eu sou Elsa de Arendelle. Ajude-me a criar uma
        reta.
      frozen perpendicular_instruction: |
        Agora, vamos ver se podemos criar duas retas
        que formam um ângulo de 90 graus entre si. Você vai precisar usar o bloco "vire"
        e também o bloco "mova".
      frozen snowflake branch_instruction: |
        Tente usar o bloco "crie um floco de neve do tipo ramificado”
        para criar três ramificações, o que começa a parecer um floco de neve.
      frozen snowflake full_instruction: |
        Agora, vamos repetir isso 8 vezes para fazer um
        belo floco de neve!
      frozen snowflower_instruction: |
        Padrões de neve complexos podem ser criados com
        formas muito simples. Você pode criar um padrão repetindo 5 círculos de tamanho
        5 e 5 círculos de tamanho 10?
      frozen square iterative_instruction: |
        Parece que estamos na metade do caminho para fazer
        um quadrado. Vamos juntar 4 retas para criar um quadrado.
      frozen square loop 3x_instruction: |
        Vamos criar três quadrados, virando depois
        de cada quadrado. Lembre-se de virar 120 graus antes de cada novo quadrado.
      frozen square loop_instruction: |
        Oi, eu sou Anna de Arendelle! Vamos fazer um quadrado
        com o bloco "repita", que usa menos blocos. Quantas vezes (???) o bloco
        "repita" deve repetir os blocos dentro dele para fazer um quadrado?
      frozen square snowflake_instruction: |
        Você consegue criar um floco de neve usando o bloco
        "repita" para criar um quadrado 10 vezes e o bloco "vire" para virar 36
        graus entre cada quadrado?
      Infinity_catch_instruction: |
        Você pode fazer Elsa ("personagem 2") alcançar
        Anna usando as setas do teclado?
      Infinity_finale_instruction: Crie o que quiser e compartilhe!
      Infinity_move_collide_instruction: |
        Hiro é o "personagem 1". Mova-o em direção a
        Baymax e reproduza um som quando eles se tocarem.
      Infinity_move_directions_instruction: |
        Baymax é o "personagem 2". Adicione blocos "mova"
        e então mova Baymax usando as setas. Faça com que ele toque os outros dois personagens.
      Infinity_move_right_instruction: |
        Hiro é o "personagem 1". Use o bloco "mova"
        para mover Hiro para que ele toque Baymax.
      Infinity_repeat_instruction: |
        Use um bloco "repita infinitamente" para fazer Anna se mover
        400 pixels para cima e para baixo.
      Infinity_say_instruction: Faça Anna dizer "Oi." usando o bloco "diga".
      Infinity_shoot_instruction: |
        Baymax é o "personagem 2". Faça Baymax lançar um foguete
        em Hiro.
      Infinity_shoot_directions_instruction: |
        Hiro é o "personagem 3". Faça Hiro lançar
        um projétil em cada um dos quatro personagens. Espere um segundo entre cada
        lançamento.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Toque ainda mais flocos de neve!
      Infinity_touch_four_instruction: |
        Mova Anna para cima, para a esquerda e para a direita para tocar
        cada um dos quatro flocos de neve.
      Infinity_touch_score_instruction: |
        Faça Anna marcar um ponto quando ela tocar
        em um floco de neve. Depois clique em "Executar" e faça ela tocar uma vez em cada floco de neve.
      K-1 Artist 1 Assessment 1_instruction: |
        Desenhe uma pequena reta para cima e uma
        grande para a direita!
      K-1 artist 1 level 10_instruction: Desenhe as linhas tracejadas usando os blocos
        pule e desenhe
      K-1 artist 1 level 9_instruction: Faça o desenho usando três retas
      K-1 Artist Loops 1_instruction: Desenhe esta reta usando o movimento para o
        leste 4 vezes.
      K-1 Artist Loops 2_instruction: Você pode desenhar a mesma reta usando um laço?
      K-1 Artist Loops 3_instruction: Você pode repetir esses blocos para desenhar
        6 retas?
      K-1 Artist Loops 4_instruction: |
        Um laço poderia nos ajudar a desenhar o topo desse
        castelo?
      K-1 Artist Loops 5_instruction: O que você pode repetir 4 vezes para desenhar
        essas escadas?
      K-1 Artist Loops 6_instruction: |
        São necessários dois laços: um para subir as
        escadas e outro para descer.
      K-1 Artist Loops 7_instruction: Você pode terminar este padrão com dois laços?
      K-1 Artist Loops 8_instruction: Esta escada tem degraus mais longos.
      K-1 Artist Loops 9_instruction: 'Avaliação: use um laço para desenhar as escadas'
      K-1 Artist Loops Free Play_instruction: Atividade livre, desenhe algo divertido!
      K-1 Artist1 1_instruction: Desenhe o pé do homem com uma reta
      K-1 Artist1 10_instruction: |
        Desenhe e pule para fazer o caminho tracejado até o tesouro
        X
      K-1 Artist1 2_instruction: Desenhe o bigode no gato com duas retas!
      K-1 Artist1 3_instruction: |
        Desenhe duas retas para o leste e duas retas para o norte para terminar
        a casa!
      K-1 Artist1 4_instruction: Desenhe retas para cima, sobre e para baixo para
        completar o castelo!
      K-1 Artist1 5.5_instruction: |
        Complete a terceira torre do castelo usando
        retas curtas
      K-1 Artist1 5_instruction: Desenhe o caule desta flor com duas retas!
      K-1 Artist1 6_instruction: Termine a imagem usando um bloco pule!
      K-1 Artist1 7_instruction: |
        Use o bloco pule para se mover sem desenhar. Pule
        e desenhe uma reta.
      K-1 Artist1 8_instruction: |
        Desenhe linhas tracejadas usando os blocos pule e
        desenhe
      K-1 Artist1 9_instruction: Desenhe e pule para fazer a reta tracejada
      K-1 Artist1 Assessment 1_instruction: Desenhe as retas pequenas e grandes!
      K-1 Artist1 Assessment 2_instruction: Desenhe as retas pequenas tracejadas!
      K-1 Artist2 1_instruction: Desenhe um quadrado abaixo do triângulo.
      K-1 Artist2 2_instruction: Pule e desenhe um quadrado próximo à casa.
      K-1 Artist2 3_instruction: Desenhe um quadrado sobre o outro quadrado
      K-1 Artist2 4_instruction: Desenhe um retângulo para completar a ponte.
      K-1 Artist2 5_instruction: Desenhe um retângulo para completar os suportes da
        ponte
      K-1 Artist2 6_instruction: Desenhe dois quadrados para criar um retângulo!
      K-1 Artist2 Assessment1_instruction: |
        Avaliação: desenhe um quadrado ao lado do
        outro quadrado.
      K-1 Artist2 Free Draw_instruction: Desenhe qualquer coisa!
      K-1 Artist2_7_instruction: Desenhe um retângulo para dar uma gaveta à cômoda!
      K-1 Bee 1_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 10_instruction: Colete quatro néctares e então fabrique duas unidades
        de mel!
      K-1 Bee 11.5_instruction: Colete quatro néctares para fabricar quatro unidades
        de mel!
      K-1 Bee 11_instruction: Colete três néctares e então fabrique uma unidade de
        mel
      K-1 Bee 12_instruction: Colete três néctares e então fabrique duas unidades
        de mel!
      K-1 Bee 13_instruction: Colete três néctares e então fabrique uma unidade de
        mel!
      K-1 Bee 14_instruction: |
        Leve-me até o néctar e colete-o, leve-me até o mel
        e produza mel
      K-1 Bee 15_instruction: Colete dois néctares para fabricar duas unidades de
        mel!
      K-1 Bee 2_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 3_instruction: |
        Mova-me até a flor, colete o néctar e então mova-me
        até a colmeia e produza mel
      K-1 Bee 4_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 5_instruction: Colete três néctares e então fabrique três unidades de
        mel!
      K-1 Bee 6_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 7_instruction: Colete três néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 8_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee 9_instruction: Colete dois néctares e então fabrique duas unidades de
        mel!
      K-1 Bee Assessment 1_instruction: Colete néctar para fabricar mel!
      K-1 Bee Assessment 2_instruction: Colete néctar para fabricar mel!
      K-1 Bee Loops 1_instruction: Colete o néctar para fabricar mel!
      K-1 Bee Loops 10_instruction: Use laços para coletar néctar, fabricar mel e
        para se mover!
      K-1 Bee Loops 11_instruction: |
        Avaliação: use laços e obtenha o néctar e o
        mel!
      K-1 Bee Loops 12_instruction: |
        Avaliação: use laços para obter néctar, mel
        e para mover!
      K-1 Bee Loops 2_instruction: |
        Use um laço para mover e então coletar o néctar e
        produzir mel!
      K-1 Bee Loops 3_instruction: Use laços para coletar o néctar e fabricar o mel!
      K-1 Bee Loops 4_instruction: |
        Use laços para obter néctar, produzir mel e
        para mover!
      K-1 Bee Loops 5_instruction: Use laços para obter néctar e mel!
      K-1 Bee Loops 6_instruction: Use laços para coletar néctar, fabricar mel e para
        se mover!
      K-1 Bee Loops 7_instruction: Use laços para coletar o néctar e fabricar o mel!
      K-1 Bee Loops 8_instruction: Use laços para obter néctar e mel!
      K-1 Bee Loops 9_instruction: Use laços para coletar néctar, fabricar mel e para
        se mover!
      K-1 Bee Loops Assessment 1_instruction: |
        Obtenha néctar para produzir mel e use laços
        para mover!
      K-1 Bee Loops Assessment 2_instruction: Colete néctar para fabricar mel usando
        laços!
      K-1 Bee Puzzle 12_instruction: Obtenha três néctares e então fabrique duas unidades
        de mel
      K-1 Building a Foundation Assessment_instruction: |
        Construa uma pirâmide de três níveis.
        Não há outras instruções, então simplesmente brinque com as peças até
        conseguir!
      k-1 maze 1_instruction: Você pode me mover para o oeste para chegar até o porco?
      K-1 Maze 10_instruction: 'Desvie do TNT para me levar até o porco! '
      K-1 Maze 11_instruction: |
        Trace o caminho e leve-me até o porco bobalhão. Desvie
        do TNT, ou penas vão voar! Dica: ele está ao sul de onde estou.
      K-1 Maze 2_instruction: Mova-me para o leste para chegar até o porco!
      K-1 Maze 3_instruction: Mova-me para o sul para chegar até o porco!
      K-1 Maze 4_instruction: Mova-me para o norte para chegar até o porco!
      K-1 Maze 5_instruction: Mova-me para o leste para chegar até o porco!
      K-1 Maze 6_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 7_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 8_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze 9_instruction: Mova-me por um caminho, e então por outro para me levar
        até o porco!
      K-1 Maze Assessment 1_instruction: 'Avaliação: leve-me até o porco!'
      K-1 Maze Assessment 12_instruction: Avaliação de nível
      K-1 Maze Assessment 13_instruction: Avaliação de nível
      K-1 Maze Assessment 2_instruction: 'Avaliação: leve-me até o porco!'
      K-1 maze debug 1_instruction: Altere o código para me levar até o porco!
      K-1 maze debug 10_instruction: |
        Depure esse nível reorganizando e adicionando
        blocos para me levar até o porco!
      K-1 maze debug 11_instruction: "Isso é um teste!\r\nDepure esse nível reorganizando\ne
        adicionando blocos para me levar até o porco"
      K-1 maze debug 2_instruction: |
        Descubra o que está faltando e então adicione blocos
        para me levar até o porco!
      K-1 maze debug 3_instruction: |
        Descubra o que está faltando e então REMOVA blocos
        para me levar até o porco!
      K-1 maze debug 4_instruction: |
        Passe por esses blocos e conserte-os! Eu acho
        que estou indo na direção errada.
      K-1 maze debug 5_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 maze debug 6_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 maze debug 7_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 maze debug 8_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 maze debug 9_instruction: |
        Depure esse nível reorganizando e adicionando blocos
        para me levar até o porco!
      K-1 Maze debug Assessment 1_instruction: |
        Avaliação -- depure esse nível
        reorganizando e adicionando blocos para me levar até o porco!
      K-1 Maze Loops 1_instruction: Leve-me até o porco!
      K-1 Maze Loops 10_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 11_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 12_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 2_instruction: Use o bloco repita para me levar até o porco!
      K-1 Maze Loops 3_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 4_instruction: Leve-me até o porco!
      K-1 Maze Loops 5_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 6_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 7_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 8_instruction: Leve-me até o porco! Use o laço repita.
      K-1 Maze Loops 9_instruction: Leve-me até o porco!
      K-1 Maze Loops Assessment 1_instruction: |
        Avaliação -- use laços para me levar
        até o poco!
      K-1 Maze Loops Assessment 2_instruction: |
        Avaliação -- use laços para me levar
        até o poco!
      K-1 Maze Multi 14_instruction: Avaliação de nível
      K-1 Maze Multi 15_instruction: Avaliação de nível
      K-1 Maze Sequence Assessment 1_instruction: "Isso é um teste!\r\nMova-me por
        um caminho e então\npor outro para me levar até o porco"
      K-1 Maze Sequence Assessment 2_instruction: "Isso é um teste!\r\nMova-me por
        um caminho e então\npor outro para me levar até o porco."
      Luigi's Pizza 1_instruction: |
        Bem-vindo à pizzaria do Luigi! Para pedir uma pizza,
        digite o nome de um sabor na função "custo" e vamos retornar o
        preço da pizza. Tente pedir uma pizza de pepperoni para começar.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Agora há apenas quatro opções disponíveis
        na pizzaria do Luigi - vamos arrumar isso! Adicione alguns novos sabores ao bloco condicional
        na função "custo". Quando adicionar seus sabores, teste
        a função para ver se ela funciona.
      Luigi's Pizza 3 (copy 1)_instruction: |
        Assim está melhor, todos adoram uma maior
        variedade nos sabores de pizza! Mas você ainda não consegue agradar a todos, e
        algumas pessoas estão vindo pedir sabores que Luigi não tem. Ao invés de
        dizer não a essas pessoas, você poderia atualizar a cláusula "senão" para que possamos
        cobrar a mais deles por sabores que normalmente não oferecemos?
      Luigi's Pizza 3_instruction: |
        Assim está melhor, todos adoram uma maior variedade nos
        sabores de pizza! Mas você ainda não consegue agradar a todos, e algumas pessoas estão
        vindo pedir sabores que Luigi não tem. Ao invés de dizer não
        a essas pessoas, você poderia atualizar a cláusula "senão" para que possamos cobrar a
        mais deles por sabores que normalmente não oferecemos? Vamos cobrar R$10.000
        por um sabor que não está disponível.
      Luigi's Pizza 4_instruction: "Atividade livre: o que você pode fazer para deixar
        a função de custo do Luigi\nainda melhor? Tente usar uma (ou mais) das seguintes
        opções:\r\n- Mostrar uma\nimagem da pizza escolhida\r\n- Permitir a combinação
        de vários sabores\r\n-\nPermitir o pedido de várias pizzas\r\n- Adicionar
        um cupom com código para um desconto de 50%"
      MSM Big Game Empty_instruction: |
        Todas as variáveis e funções atualmente são
        campos vazios. A progressão de cada desafio será concentrada na definição e em vários
        deles e, portanto, na adição de funcionalidade.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        Na caixa de ferramentas de variáveis você vai
        ver diversas variáveis que definem a aparência dos personagens do seu jogo e como eles se movem e
        interagem
      MSM Big Game Vars 1_instruction: |
        Na caixa de ferramentas de variáveis você vai ver diversas
        variáveis que definem a aparência dos personagens do seu jogo e como eles se movem e
        interagem
      MSM Big Game Vars Backup_instruction: |
        Na caixa de ferramentas de variáveis você vai ver diversas
        variáveis que definem a aparência dos personagens do seu jogo e como eles se movem e
        interagem
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Escreva um programa que produz um triângulo
        verde sólido de 50 pixels.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        Se quiséssemos fazer 50 triângulos verdes,
        seria horrível repetir esse bloco de código 50 vezes. Vamos criar uma
        variável chamada "minha-forma" e colocar o código para um triângulo verde sólido de 50 pixels
        dentro dela.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Pegue sua variável "minha-forma" e use-a
        com esse código fornecido para desenhar dois triângulos verdes idênticos que têm
        50 pixels.
      MSM Defining Vars 4_instruction: |
        Edite sua variável "minha-forma" para que ela
        desenhe estrelas vermelhas sólidas de 75 pixels.
      MSM Play Lab Butterfly 1_instruction: |
        Ajude Sam a ficar na tela para que
        você sempre possa ver pelo menos uma pequena parte dele. Usando as setas do teclado, veja
        quão longe Sam pode ir para a esquerda enquanto permanece na tela. Você vai descobrir que
        Sam fica na tela enquanto sua coordenada x for maior que -50. Então, complete
        o código para fazer Sam permanecer na tela.
      MSM Play Lab Butterfly 2_instruction: |
        Agora, faça Sam ficar no lado direito
        da tela. Você precisa fazer experimentos para ver o quão longe ele pode ir e ainda
        ficar parcialmente visível na tela.
      MSM Play Lab Butterfly 3_instruction: |
        Agora, combine seu trabalho para fazer Sam permanecer
        em ambos os lados da tela.
      MSM Play Lab Game 2_instruction: |
        Variáveis também podem ser usadas para controlar
        a velocidade de jogadores em um jogo. Defina a velocidade do jogador e do inimigo e veja
        como os movimentos mudam. A velocidade pode ficar entre 2 e 12.
      NetSim_AddressingMessages_instruction: |
        Nessa versão do simulador, você vai
        se conectar a um roteador ao invés de se conectar diretamente a outro aluno. Insira um
        endereço no campo "para" para enviar uma mensagem a outro aluno.
      NetSim_AutomaticDNS_instruction: |
        Nessa versão do simulador um serviço DNS
        é fornecido para você. Envie uma mensagem no formulário GET [hostname] para o serviço
        DNS no endereço 15 para obter o endereço de um aluno.
      NetSim_ManualDNS_instruction: |
        Nessa versão do simulador você não pode
        ver o endereço de outros alunos. Ao invés disso, um de vocês deve agir como um
        serviço de nome, para ajudar a compartilhar os endereços entre si.
      NetSim_SendAB_instruction: |
        Conecte-se a outro aluno. Cada um pode definir
        o valor do fio entre si mesmo e "A" ou "B".  Veja se você consegue enviar
        uma mensagem completa!
      NetSim_SendAscii_instruction: |
        Nessa versão do simulador, vocês podem enviar
        números ou caracteres ASCII uns para os outros, um bit por vez.
      NetSim_SendBits_instruction: |
        Conecte-se a outro aluno. Agora você pode definir
        seu fio como "0" ou "1".  Envie uma mensagem ao seu parceiro!
      NetSim_SendingABTest_instruction: |
        Esse é o teste de Sarah para fazer um nível
        netsim
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: Você carregou o NetSim no modo superusuário.
      NetSim_Variant1_instruction: |
        NetSim: Variante 1 permite que os alunos elaborem
        manualmente o tempo de envio de bits para trás e para a frente.
      NetSim_Variant2_instruction: |
        NetSim: Variante 2: Os alunos se conectam diretamente
        uns aos outros e enviam pacotes inteiros para trás e para a frente, explorando sistemas de
        codificação de dados.
      NetSim_Variant3_instruction: |
        NetSim: Variante 3: Conecta grupos de 2 a 6 alunos
        com um roteador e explora questões sobre roteamento e DNS
      New Artist Project_instruction: |
        Draw something awesome! Your code is saved
        as a project that you can return to at any time.
      NEW Course 4 Artist Functions 1_instruction: |
        Você consegue desenhar um quadrado com
        100 pixels de comprimento usando um laço?
      NEW Course 4 Artist Functions 10_instruction: |
        Clique em "editar" para preencher
        os blocos na definição da função para fazer um quadrado de 40 pixels.
      NEW Course 4 Artist Functions 11_instruction: |
        Temos uma nova função chamada
        "desenhe uma linha de quadrados". Fique à vontade para olhar dentro do bloco da função
        para ver como a construímos. Clique em "Executar" quando você estiver pronto para o próximo
        desafio.
      NEW Course 4 Artist Functions 12_instruction: |
        Use a função "desenhe uma linha de quadrados"
        do último desafio para desenhar esse padrão."
      NEW Course 4 Artist Functions 13_instruction: |
        Você consegue desenhar uma forma de estrela usando
        a função "desenhe uma linha de quadrados"? Dica: você pode precisar avançar
        60 pixels e virar 144 graus
      NEW Course 4 Artist Functions 14_instruction: 'Atividade livre! '
      NEW Course 4 Artist Functions 2_instruction: |
        Você consegue desenhar 3 quadrados com 20 pixels de distância
        entre cada um? Dica: cada quadrado tem 100 pixels de tamanho
      NEW Course 4 Artist Functions 3_instruction: "Temos aqui um novo tipo de bloco.\nEle
        é chamado de \"bloco de função\". Clique em \"Executar\" para ver o que ele
        pode fazer. \n"
      NEW Course 4 Artist Functions 4_instruction: |
        Use a função "desenhe um quadrado"
        para desenhar esse padrão. Dica: você vai precisar usar um bloco "vire 120 graus à direita"
        após cada quadrado.
      NEW Course 4 Artist Functions 5_instruction: |
        Como o bloco "desenhe um quadrado"
        sabia que comandos executar? Clique em "editar" no bloco de função "desenhe um quadrado".
        Os blocos no editor da função são a definição que
        compõe "desenhe um quadrado". Quando você terminar de analisar, clique em "Salvar
        e Fechar" e então em "Executar".
      NEW Course 4 Artist Functions 6_instruction: "Usando o bloco de função \"desenhe
        um quadrado\",\nvocê pode desenhar esta imagem? Dica: cada quadrado está separado
        por 20 pixels.\r\n"
      NEW Course 4 Artist Functions 7_instruction: "Você está pegando o jeito de como\nusar
        os blocos de função? Vamos modificar esse quadrado para que ele tenha 200
        pixels\nde tamanho. Dica: clique em \"editar\" para alterar o tamanho de \"desenhe
        um quadrado\"\nno editor da função. Lembre-se de clicar em \"Salvar e Fechar\"
        para sair do\neditor da função. \n"
      NEW Course 4 Artist Functions 8_instruction: |
        Demos a você a maior parte do
        código para criar uma função. Contudo, parece que algo está faltando. Você
        consegue editar a definição da função para desenhar o triângulo?
      NEW Course 4 Artist Functions 9_instruction: |
        Qual bloco você precisa adicionar
        para que o triângulo fique em cima do quadrado?
      New Course 4 Artist Functions Level 4_instruction: |
        Use a função "desenhe um quadrado"
        para desenhar esse padrão.
      NEW Course 4 Artist Params 1_instruction: |
        Vamos definir essa função para desenhar
        um quadrado com lados de 50 pixels. Clique em "editar" para começar.
      NEW Course 4 Artist Params 10_instruction: "Crie um bloco de função \"desenhe
        um hexágono\"\ncom um parâmetro comprimento. Dica: esse hexágono tem 100 pixels
        de tamanho. \n"
      NEW Course 4 Artist Params 11_instruction: |
        Você consegue descobrir como desenhar
        essa forma? Edite a função para usar o parâmetro "lados".
      NEW Course 4 Artist Params 12_instruction: |
        Você consegue completar esse desenho?
        Os lados de todas as formas têm 100 pixels de comprimento.
      NEW Course 4 Artist Params 13_instruction: |
        Vamos editar essa função "desenhe uma forma".
        Ela já tem um parâmetro "comprimento". Agora, vamos editar a função
        para adicionar também um parâmetro "lados". Lembre-se de que o ângulo para virar para uma
        determinada forma é 360 dividido pelos lados que ela tem. Dica: os comprimentos de cada forma
        são: o triângulo tem 100 pixels, o hexágono tem 25 pixels e o quadrado tem 50 pixels.
      NEW Course 4 Artist Params 14_instruction: "Você consegue recriar essas formas?\nArraste
        o parâmetro \"comprimento\" para dentro da definição da função. \n"
      NEW Course 4 Artist Params 15_instruction: |
        Atividade livre: aqui estão as funções
        que você escreveu e mais algumas com as quais você pode brincar. Desenhe alguma coisa incrível!
      NEW Course 4 Artist Params 2 _instruction: |
        Crie uma função "desenhe um triângulo
        com lados de 50 pixels" desde o início
      NEW Course 4 Artist Params 2_instruction: |
        Crie uma função "desenhe um triângulo
        com lados de 50 pixels" desde o início
      NEW Course 4 Artist Params 3_instruction: "Agora, vamos usar a função para desenhar\n3
        triângulos do último desafio em uma linha. Dica: cada triângulo está separado
        por\n50 pixels.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Você percebe algo diferente
        sobre esses blocos de função? Clique em "Executar" para ver o que acontece.
      NEW Course 4 Artist Params 5_instruction: "Preencha o ??? no bloco de entrada\ndo
        parâmetro comprimento. Dica: o tamanho do pentágono é de 100 pixels. \n"
      NEW Course 4 Artist Params 6_instruction: |
        Preencha o parâmetro "comprimento"
        para desenhar essa formas substituindo o "???" pelos números corretos. O
        quadrado e o triângulo têm tamanho de 100 pixels, enquanto o hexágono tem tamanho de
        75 pixels.
      NEW Course 4 Artist Params 7_instruction: |
        Você consegue completar este desenho? Dica:
        cada triângulo é 25 pixels maior que o anterior. O primeiro triângulo tem 25
        pixels.
      NEW Course 4 Artist Params 8_instruction: |
        Você pode desenhar cada um desses triângulos
        com a nova função? O primeiro tem 25 pixels de comprimento, o segundo 50 e
        o terceiro 75. Dica: comece clicando em "editar" no bloco da função.
      NEW Course 4 Artist Params 9_instruction: |
        Clique em "editar" para preencher a definição
        da função "desenhe um quadrado" e adicionar um parâmetro. Ela deve receber um parâmetro
        comprimento, como no triângulo. Dessa vez, desenhe 3 quadrados: 25, 50 e 75
        pixels de comprimento e separados por 100 pixels cada.
      NEW Course 4 Artist Vars 1.5_instruction: "Dê uma olhada no código. Você consegue\nver
        como o bloco \"defina o comprimento\" e o bloco \"comprimento\" funcionam
        juntos? Clique\nem \"Executar\" para vê-los em ação. \n"
      NEW Course 4 Artist Vars 12_instruction: |
        Modifique esse algoritmo para que ele use
        a variável "lados" ao invés de um número fixo para desenhar um pentágono. Substitua
        o número 5 pela variável "lados" e use o bloco "defina lados para".
      NEW Course 4 Artist Vars 2.5_instruction: "Dê uma olhada no código. Você consegue\nver
        como o bloco \"defina o comprimento\" e o bloco \"comprimento\" funcionam
        juntos? Clique\nem \"Executar\" para vê-los em ação. \n"
      NEW Course 4 Artist Vars 2_instruction: "Arraste um bloco numérico para o bloco
        \"defina o comprimento\"\npara desenhar um conjunto de triângulos de 50 pixels.
        \n"
      NEW Course 4 Artist Vars 4 5_instruction: |
        Belo trabalho no último desafio,
        vamos tentar novamente. Desta vez, vamos fazer esse design bacana com hexágonos
        de 60 pixels.
      NEW Course 4 Artist Vars 4_instruction: |
        Vamos tentar novamente. Agora, vamos fazer
        esse design bacana com hexágonos de 60 pixels.
      NEW Course 4 Artist Vars 6_instruction: |
        Você pode me ajudar a desenhar esse padrão
        colocando o bloco da variável "comprimento" nos lugares corretos?
      NEW Course 4 Bee For Loops 1_instruction: |
        Use um laço para coletar o néctar
        de cada flor.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use a variável "contador" do seu laço "para"
        para controlar a distância do movimento horizontal.
      NEW Course 4 Bee For Loops 11_instruction: |
        Você pode usar a variável do laço para
        controlar o movimento e a coleta de néctar?
      NEW Course 4 Bee For Loops 2_instruction: |
        Adicione o código necessário para garantir que
        a abelha colete todo o néctar. Olhe quanto código você precisa para esse desafio!
        (Vamos aprender uma maneira mais simples no próximo desafio).
      NEW Course 4 Bee For Loops 3_instruction: "Ah, o laço para torna isso muito
        mais\nfácil! Todo o código que você precisa está lá, dê uma olhada em como
        ele é feito\ne então clique em \"Executar\" para ver como ele funciona. \n"
      NEW Course 4 Bee For Loops 4 4_instruction: "Você pode ajudar a abelha a coletar
        o\nresto do mel usando esse laço para? \n"
      NEW Course 4 Bee For Loops 4_instruction: "Substitua o ??? no laço \"para\"\npela
        maior quantidade de néctar que a abelha tem que coletar. \n"
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Você está pegando o jeito de como usar
        o laço para? Vamos ajudar a abelha a obter o resto do néctar.
      NEW Course 4 Bee For Loops 5_instruction: |
        Você também pode usar um laço "para" para fazer contagem
        regressiva. Tente coletar esse néctar fazendo uma contagem regressiva de 5 até 1, de 1 em 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        O último número em seu laço para é
        chamado de "incremento" e a cada execução do laço a variável contador
        é alterada de acordo com o incremento. Tente coletar essas flores usando um incremento
        de 2.
      NEW Course 4 Bee For Loops 7_instruction: |
        Você está pegando o jeito dos laços para?
        Isso é parecido com o último desafio, mas você precisa coletar 2, 4, 6, 8 e 10 néctares.
        O código inicial foi fornecido, exceto pelos números nos laços contadores.
        Vamos coletar um pouco de néctar!
      NEW Course 4 Bee For Loops 8_instruction: "Se seu laço está contando, o\nincremento
        é somado à variável contador a cada repetição. Qual deve ser seu incremento\npara
        coletar 3, 6 e 9 néctares?\r\n"
      NEW Course 4 Bee For Loops 9_instruction: |
        Se seu laço está fazendo contagem regressiva, o
        incremento é subtraído da sua variável contador a cada repetição. Qual deve ser
        seu incremento para coletar 9, então 6, e então 3 néctares?
      NEW Course 4 Play Lab Params 11 (copy 1)_instruction: "É hora da atividade livre!\nDivirta-se
        com todos os blocos da sua caixa de ferramentas. \n"
      NEW Course 4 Play Lab Params 11_instruction: "É hora da atividade livre! Divirta-se\ncom
        todos os blocos da sua caixa de ferramentas. \n"
      NEW Course 4 Play Lab Params 5 5_instruction: "Preencha as entradas de parâmetro\ndos
        personagens com números (1, 2 e 3) para fazer com que esses personagens patrulhem.
        \n"
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        "O que você acha que esse código vai
        fazer? Pressione "Executar" para ver o que acontece".
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "É hora da atividade
        livre,\ndivirta-se com todos os blocos da sua caixa de ferramentas. \n"
      New Play Lab Project_instruction: |
        Crie sua própria história ou jogo! Seu código
        está salvo como um projeto para o qual você pode retornar a qualquer hora.
      Ninjacat Demo B (copy 1)_instruction: "\r\nVamos começar explorando um video
        game\nsimples e então descobrir como ele funciona. Você pode usar as setas
        do teclado\npara mover o ninja para a esquerda, para a direita e para pular
        - tente pegar o unicórnio e\ndesvie do dragão!\r\n\r\n\r\n\r\n  \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Vamos começar explorando um jogo simples
        e então vamos descobrir como ele funciona. Você pode usar as setas do teclado para mover o
        ninja para cima e para baixo - tente capturar o unicórnio e desviar do dragão! Quando você
        achar que já descobriu como o jogo funciona, clique em "Concluir"
      PDK5 Conditionals 1_instruction: |
        As flores roxas podem ter 1 ou 0 néctar,
        mas você não sabe quanto ela tem! Tome cuidado para não coletar néctar de uma flor roxa
        que não tenha néctar algum. Verifique se o néctar é igual a 1 usando
        o bloco se.
      PDK5 Conditionals 2_instruction: "Experimente esse desafio que usa condicionais
        e\nlaços em conjunto. Use o bloco \"se\" para decidir quando virar. Dica:
        você só\nprecisa de mais um bloco para completar este desafio. \n"
      PDK5 Events 1_instruction: "Até agora, todos os programas que escrevemos são
        executados\nem ordem, de cima para baixo. Nesse desafio, vamos usar \"Eventos\"
        para responder\na uma ação em demanda. Faça o polvo dizer \"Olá\" somente
        quando você\nclicar nele. \n"
      PDK5 Functions 1_instruction: |
        Olá. Mim artista zumbi. Mim amar desenhar! Ajude-me
        a desenhar os óculos quadrados. Dica: a haste entre os óculos é 25 pixels
        menor que o comprimento do quadrado.
      PDK5 Functions 2_instruction: |
        As funções permitem que você defina novos blocos! Movemos
        os blocos para desenhar um quadrado para dentro de uma função chamada "desenhe um quadrado".
        Você consegue usar a função "desenhe um quadrado" para criar os óculos? Os quadrados são separados
        por 75 pixels.
      PDK5 Loops 1_instruction: "Ao invés de usar 5 blocos \"avance\", use\no bloco
        \"repita\" com um bloco \"avance\" dentro dele. Em ciência da\ncomputação,
        isso é chamado de \"laço\". \n"
      PDK5 Loops 3_instruction: |
        Temos aqui outro desafio para praticar o uso de laços. O que acontece
        se você usar o bloco repita para executar o código fornecido na área de trabalho
        4 vezes?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Algo aconteceu com
        os bits desta imagem! Ache o erro e corrija-o! Dica: alguns poucos bits
        extras foram adicionados. Você somente precisará remover alguns bits.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Algo aconteceu com
        os bits desta imagem! Ache o erro e corrija-o! Dica: alguns poucos bits extras
        foram adicionados. Você somente precisará remover alguns bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Faça uma letra "A"
        3x5.  O widget está configurado com as dimensões incorretas. Sua primeira tarefa
        é definir o segundo byte com o código binário de 8 bits para 5: 0000 0101.  Então,
        comece a inserir os dados do pixel.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Agora, crie
        sua própria imagem! Começamos com uma tela de 10x10, mas você pode deixá-la
        do tamanho que você quiser.  Feliz pixelização!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Agora, crie sua
        própria imagem! Começamos com uma tela de 10x10, mas você pode deixá-la
        do tamanho que você quiser.  Feliz pixelização!
      Pixelation 2_instruction: |
        Algo aconteceu com os bits nessa imagem!  Encontre
        o erro e conserte-o!
      Pixelation 4x4 Empty_instruction: |
        Agora, a largura e a altura estão codificadas nos
        dados do pixel. Você consegue descobrir como ajustar as dimensões?
      Play Lab Rocket 1_instruction: |
        Um foguete é lançado, viajando a 15 metros
        por segundo... clique em "Executar" para ver como é esse problema em forma de animação.
      Play Lab Rocket 2 (copy 1)_instruction: |
        Adicionamos seu contrato e dois
        exemplos da receita de design para a altura do foguete. Agora escreva a função
        para a altura do foguete.
      Play Lab Rocket 2 (copy 2)_instruction: |
        Começamos a receita de design para
        altura-foguete usando o contrato e os exemplos que você acabou de escrever. Complete a
        definição da função para a altura do foguete e execute sua animação.
      Play Lab Rocket 2_instruction: |
        Começamos a receita de design para a altura do foguete
        usando o contrato e os exemplos que você escreveu. Complete a definição da função
        para a altura do foguete e execute sua animação.
      Play Lab Rocket 2B (copy 1)_instruction: |
        Começamos a receita de design
        para altura-foguete usando o contrato e os exemplos que você acabou de escrever. Complete
        a definição da função para a altura do foguete e execute sua animação.
      Play Lab Rocket 2B_instruction: |
        Um foguete decola, viajando a 15 metros
        por segundo. Usando a receita de design, escreva uma função chamada altura-foguete
        que recebe o número de segundos passados desde a decolagem do foguete
        e retorna a altura do foguete passado esse tempo.
      Play Lab Rocket 3 (copy 1)_instruction: |
        Awesome, now can you update that function
        so that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 3_instruction: |
        Excelente! Agora, você consegue atualizar essa função para
        que nosso foguete se mova mais rapidamente? Lembre-se de atualizar a instrução de finalidade,
        os exemplos e a definição da função para lançar um foguete a 40 metros por segundo.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Foguetes de verdade começam devagar e ganham velocidade
        com o passar do tempo - então vamos adicionar uma aceleração simples ao nosso! Você pode
        escrever uma função que descreve um foguete que está a 10 metros em 1 segundo, 40 metros
        em 2 segundos, 90 metros em 3 segundos, 160 em 4 segundos e assim por diante?
      Play Lab Rocket 5_instruction: |
        Muito melhor, mas vamos escrever mais uma função
        com aceleração simples. Dessa vez o foguete deve estar a 15 metros em 1 segundo,
        45 metros em 2 segundos, 95 metros em 3 segundos e 165 metros em 4 segundos.
      Play Lab Rocket Free Play_instruction: |
        Atividade livre: faça uma experiência com sua função altura-foguete
        para fazer o foguete voar de formas diferentes. Clique em "Concluir" quando você
        terminar.
      Sam the Butterfly 1 (copy 1)_instruction: |
        Essa borboleta se chama Sam e
        a área do jogo é o quintal de Sam. O quintal de Sam tem 400 pixels de largura por 400 de
        altura! Como você pode ver, Sam é livre para andar pelo quintal, e as coordenadas na parte
        superior da tela são atualizadas para que você saiba sua localização. Use as setas do teclado
        para mover Sam pelo quintal. Ajude Sam a coletar todas as bandeiras para seguir em frente.
      Sam the Butterfly 1_instruction: |
        Esse morcego se chama Sam e a área do jogo é o quintal
        de Sam. O quintal de Sam tem 400 pixels de largura por 400 de altura! Como você pode
        ver, Sam é livre para andar pelo quintal e as coordenadas na parte superior da tela são
        atualizadas para que você saiba sua localização. Use as setas do teclado para mover Sam
        pelo quintal, anotando as coordenadas de Sam em diferentes localizações.
        Clique em "Concluir" quando você estiver pronto para seguir em frente.
      Sam the Butterfly 2_instruction: |
        A mãe de Sam quer garantir que ela sempre possa
        ver pelo menos uma parte dele, então vamos escrever algumas funções que ajudem a garantir
        que ele não vá muito longe no quintal. Aqui temos uma função chamada "esquerda-segura?"
        - ela deve receber um número para seu domínio que representa as coordenadas de x de Sam
        e retornar verdadeiro se ele estiver dentro do limite esquerdo do quintal (x > -25). Se
        sua função funcionar, Sam não deve poder sair do quintal pelo lado
        esquerdo.
      Sam the Butterfly 3_instruction: |
        No último desafio, impedimos Sam de sair
        pela esquerda, agora vamos fazer o mesmo com a direta. Preencha a função "direita-segura?"
        para que Sam não passe de x = 425.
      Sam the Butterfly 4_instruction: |
        Hmm, podemos impedir que Sam saia pela
        esquerda, ou podemos impedi-lo de sair pela direita, mas como podemos impedi-lo
        de sair por ambas as direções? Tente usar o bloco "E" para programar a função
        "na-tela?" para verificar se Sam tem a esquerda-segura? E a direita-segura?
      Sam the Butterfly 5_instruction: |
        Atividade livre: Incrível, agora Sam não pode sair do quintal
        nem pela esquerda, nem pela direita, mas e quanto às partes de cima e de baixo? Adicionamos
        um parâmetro adicional "y" para a função "na-tela?". Você consegue atualizar
        seu programa para que Sam não possa sair nem por cima (y = 425) nem por baixo (y= -25)?
        Teste seu programa movendo Sam o mais longe que ele puder ir em todas as quatro direções.
        Clique em Concluir quando Sam estiver completamente protegido.
      Sam the Butterfly 6_instruction: |
        Adicionamos um novo parâmetro "y" à
        função "na-tela?". Atualize a função para que ela verifique se "esquerda-segura?"
        E "direita-segura?" E "superior-segura?" são todas verdadeiras. Quando você consertar a
        função, tente sair do quintal pela direita, pela esquerda e por cima.
      Sam the Butterfly 7_instruction: |
        Agora temos apenas uma única direção com a qual nos preocupar! Crie
        uma função "inferior-segura?" e atualize a função "na-tela?" para que ela
        verifique as partes de cima, de baixo, esquerda e direita.
      Sam the Butterfly Complete_instruction: |
        Agora temos apenas uma única direção com a qual nos preocupar!
        Crie uma função "inferior-segura?" e atualize a função "na-tela?" para
        que ela verifique as partes de cima, de baixo, esquerda e direita.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: |
        Bolota! Bolota! Bolota! Use um bloco "se" para me levar até lá
        com o menor número de blocos.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: |
        Ok, vamos fazer novamente para pegar a prática - este não é
        muito diferente, mas cuidado com a parede!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: |
        Os blocos "se-senão" verificam uma condição e, em seguida,
        fazem uma coisa OU outra. Para que eu chegue até a bolota, tente usar este novo bloco.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: |
        Vamos praticar o uso do bloco "se-senão" mais uma vez. Você consegue
        acertar na primeira tentativa?
      scrat 20_instruction: |
        Você consegue adicionar somente 3 blocos para me ajudar a resolver um labirinto mais
        complexo? Se você fizer isso corretamente, eu posso percorrer qualquer caminho cheio de curvas,
        não importa o comprimento. Depressa! O gelo está derretendo!
      SpecialFrozenLevel_instruction: |
        Você se tornou oficialmente um artista mestre!
        Crie um país das maravilhas de gelo.
      Standalone_Artist_1_instruction: |
        Bem-vindo ao Artista! Primeiro, vamos tentar
        fazer um quadrado simples usando os blocos "vire à direita" e "avance".
        Cada lado deve medir 100 pixels.
      Standalone_Artist_2_instruction: |
        Desenhe esse diamante com ângulos de 120 e 60
        graus e lados de 150 pixels de comprimento.
      Standalone_Artist_3_instruction: |
        Você consegue desenhar este hexágono com lados de
        100 pixels e ângulos de 60 graus?
      Standalone_Artist_4_instruction: |
        Agora você tem um novo bloco para brincar,
        o laço. Ele vai repetir um conjunto de comandos. O que acontece se você repetir esses
        comandos 6 vezes?
      Standalone_Artist_5.5_instruction: |
        Observe como simplificamos o código do diamante,
        transformando-o em um laço. Você pode repetir toda a sequência 12 vezes para desenhar
        a flor. Dica: você terá que virar 30 graus depois do laço do seu diamante
        para não continuar desenhando o mesmo diamante todas as vezes.
      Standalone_Artist_5_instruction: |
        Quantas vezes você precisa repetir esse diamante
        para desenhar a flor?
      Standalone_Artist_6_instruction: |
        Repita esse código do hexágono 6 vezes para criar
        o design. Quantos graus você precisa virar a cada vez? Dica: divida
        o número de graus em um círculo pelo número de vezes que você está repetindo.
      Standalone_Artist_7_instruction: |
        Uma função é mais uma ferramenta de programação para que
        você não tenha que repetir as mesmas ações. Essa função desenha uma flor, então
        você pode usá-la sempre que quiser desenhar uma flor. Use-a juntamente com o novo bloco
        "pule" para desenhar essas flores. Dica: as flores são separadas por 150 pixels
      Standalone_Artist_8_instruction: |
        Temos aqui uma função chamada "Desenhe uma forma",
        que programamos para desenhar hexágonos. Execute o código para ver o que ele faz e,
        em seguida, tente usá-lo com a função para ver o que acontece. Você consegue fazer
        com que ela desenhe um padrão de quadrados, triângulos ou octógonos?
      Standalone_Artist_9_instruction: |
        Agora vá em frente e faça a imagem que
        quiser! Você tem até uma função vazia para usar para fazer o que
        quiser!
      Standalone_Artist_v2_instruction: |
        Bem-vindo ao Artista! Primeiro, vamos tentar
        fazer um quadrado simples usando os blocos "vire à direita" e "avance".
        Cada lado deve medir 100 pixels.
      Text Compression Peter Piper_instruction: |
        Esse poema foi comprimido com
        a substituição de duas frases comuns por símbolos do dicionário. Você consegue identificar
        outro padrão comum para comprimir ainda mais o poema?
      U1L4 NetSim SendAB_instruction: |
        NetSim: Variante 1 - parque de diversões: EM CONSTRUÇÃO:
        A variante 1 ainda não é funcional porque as conexões P2P não foram implementadas.
        A variante 1 permite que os alunos elaborem manualmente o tempo de envio de bits
        para trás e para a frente.
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the simulator a
        DNS service is provided for you. Send a message in the form GET [hostname]
        to the DNS service at address 15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L2 NetSim Hub Mode_instruction: "You'll now play the \"Game of Messages\"\ngame
        you just played in person, but this time using the Internet Simulator.\nJoin
        a room to be connected to your group, and then follow the instructions\non
        the worksheet handed out by your teacher.\r\n"
      U2L3 NetSim Hub Mode_instruction: "With your group, invent a standard addressing\nscheme
        for the \"Game of Messages\" game, and try it out using the Internet\nSimulator.
        \n"
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter
        with the others in your group. Important note: The router will only\nproperly
        route messages where the first 4 bits are the To: address and the\nsecond
        4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na
        router with the others in your group. The Internet Simulator now provides\na
        place for you to put the To and From addresses, so you don't have to type\nout
        the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U313 Two Buttons with Ids_instruction: |
        Sua vez de tentar! Fornecemos a você um
        código inicial com dois botões e dois manipuladores de evento na tela, mas deixamos
        os Ids padrões de "id". Você precisa alterar esses ids para conectar
        o manipulador de eventos ao botão correto. (Curiosamente, o programa
        incorreto funciona, mas ele tem um comportamento bizarro. Vamos discutir mais
        sobre isso na próxima lição. Por enquanto, faça os botões funcionarem corretamente).
      U3L03 choose your own drawing_instruction: |
        Agora escolha o seu!  Escolha um dos
        três desenhos mostrados aqui e tente criá-lo você mesmo, tomando decisões
        inteligentes sobre como dividir o problema em funções reutilizáveis.  Você vai revisar seu
        trabalho com um colega usando os "procedimentos para a rubrica de revisão em pares".
        Verifique os procedimentos para ver os requisitos.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Escreva a função virar() e
        use-a para fazer a tartaruga se mover como descrito. Veja: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Escreva a função virar() e
        use-a para fazer a tartaruga se mover como descrito.
      U3L03 define turnRight and draw a rectangle_instruction: "Create a turnRight()\nfunction
        and draw a rectangle twice as tall as it is wide by having the turtle\nnavigate
        clockwise to draw the rectangle. \n"
      U3L03 Draw a T using turnAround_instruction: "Agora a função \"virar\" é \nfornecida
        no código. Use a função virar() para desenhar um T conforme\ndescrito.\n"
      U3L03 draw diamond_instruction: "Use qualquer função que você escreveu\nantes
        para fazer uma forma de \"diamante\" conforme mostrado na imagem.\r\n\r\nOBSERVAÇÃO:\nessa
        é mais uma pegadinha.  Os 4 lados do diamante são feitos desenhando\ntrês
        etapas com outro movimento feito entre as chamadas.  Dica: você deve criar\noutra
        função que desenha um lado do diamante. "
      U3L03 Three Steps_instruction: |
        Desenhe 3 "passos", movendo para cima e para a direita. Observe
        o padrão do movimento. Você deve definir uma função chamada desenharPasso()
        que desenha um dos passos e então chamá-la 3 vezes para obter o efeito desejado.
      U3L04 choose your own drawing_instruction: |
        Agora escolha o seu!  Escolha um dos
        três desenhos mostrados aqui e tente criá-lo você mesmo, tomando decisões
        inteligentes sobre como dividir o problema em funções reutilizáveis.  Você vai revisar seu
        trabalho com um colega usando os "procedimentos para a rubrica de revisão em pares".
        Verifique os procedimentos para ver os requisitos.
      U3L04 diamond solution_instruction: |
        Estude essa solução para o problema da função desenharDiamante
        Observe que todo programa começa chamando desenharDiamante() no
        começo.  Então, o programa segue uma cadeia de chamadas. Você pode acompanhar
        o que está acontecendo no código para ver as funções reutilizadas.  Também é fácil
        de ler porque os nomes das funções descrevem o comportamento esperado.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Vamos revisitar o problema da grade 3x3
        que você resolveu algumas lições atrás.  Desta vez o desafio é programar
        a solução da forma "mais eficiente possível".  Agora que você sabe como escrever
        funções, deve ser mais fácil dividir o problema e seu código deve ser
        mais fácil de ler e depurar. Veja a rubrica para mais detalhes sobre os requisitos
        e as expectativas.
      U3L05_draw3x3GridEfficiently_instruction: |
        Desenhe uma grade 3x3 acima e para a
        direita da tartaruga. Tente fazer isso com o menor número de comandos possível.
        OBSERVAÇÃO: esse problema é bastante desafiador. Você deve precisar passar um tempo
        resolvendo-o e ajustando-o. Você também deve considerar usar lápis e papel para esboçar
        suas ideias.
      U3L06 Challenge 1 triangle_instruction: |
        Check out the extended Turtle palette
        now made available to you. These new commands accept parameters, allowing
        you to specify precisely how the function operates rather than only being
        able to move or turn a predetermined amount. Make use of these functions to
        draw the triangle as shown.
      U3L06 Challenge 2 purple square_instruction: |
        Desta vez vamos aprender
        um pouco sobre como alterar a caneta da tartaruga. Leia a documentação para encontrar
        larguraCaneta() e corCaneta(), e então desenhe o quadrado roxo como foi mostrado.
      U3L06 Challenge 3 fill pink_instruction: |
        Agora, vamos tentar preencher todo o fundo
        da tela. Para deixar as coisas um pouco mais fáceis para você, podemos lhe dizer
        que a cor que escolhemos é uma das 140 cores nomeadas. Se você não souber os
        nomes das cores, dê uma olhada na documentação de corCaneta()
        novamente. Dica: você precisa usar ponto().
      U3L06 Challenge 4 bullseye_instruction: |
        Vamos tentar mais uma vez.
        Desta vez as cores NÃO são chamadas pelo nome - você precisa usar o número hexadecimal
        cor para defini-la. Assim, para que você não fique tentando adivinhar aleatoriamente, vamos
        lhe dar uma dica -- cada uma das cores mostradas na imagem-alvo é uma das
        cinco listadas a seguir:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  Você deve acertar o palpite se aplicar o que sabe sobre
        cores RGB.
      U3L06 Challenge 5 overlapping circles_instruction: |
        Esta imagem é criada apenas
        usando ponto() e corCaneta(), mas como vamos fazer esses círculos ficarem
        transparentes? Se você ainda não recebeu a dica: leia a documentação!
      U3L06 Challenge 6 squiggles_instruction: |
        Em seguida, vamos adicionar algumas
        curvas ao nosso desenho. Leia a documentação para os comandos de "arco" e
        então desenhe os rabiscos como mostrado. Para facilitar as coisas, temos aqui uma dica: todos
        os parâmetros são múltiplos de 10 e as cores são da seguinte lista de
        nomes de cores: azulCeleste, azulClaro, azulTurquesa, Roxo e Magenta.
      U3L06 Challenge 7 smiley face_instruction: |
        Para fazer essa carinha feliz você vai
        precisar olhar a documentação do comando mova() e então usá-lo com os
        outros que você aprendeu. Você pode fazer suposições razoáveis sobre as cores.
      U3L06 Challenge 8 make your own_instruction: |
        Use as ferramentas que você aprendeu
        hoje para criar um desenho próprio. Se você tiver tempo, desafie seus
        amigos para ver se eles conseguem duplicar sua imagem. Vamos mostrar para você os
        desenhos que nós mesmos fizemos. Você pode tentar duplicá-los, se quiser.
        Caso não queira, divirta-se criando o seu próprio desenho!
      U3L07 - Free Play Loops and Random_instruction: |
        Atividade livre! Use o que você aprendeu
        sobre laços e aleatoriedade para criar sua própria pequena cena. Divirta-se.
      U3L07 - Starry Night Starter Code_instruction: "Você vai usar laços e números\naleatórios
        para gerar uma imagem do céu em uma noite estrelada parecida com uma\nmostrada
        aqui. Fornecemos um código inicial para gerar o chão e o céu\n(apenas dois
        pontos gigantes) e você vai adicionar código a esse projeto para fazer as\nestrelas,
        a grama e a lua.  Todos os efeitos são aplicações inteligentes dos pontos,\nlinhas
        e cores da tartaruga.  Para começar, siga a série de etapas sugerida na\nplanilha
        de acompanhamento. \n"
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L13 - Button with ID_instruction: |
        Arraste um botão para fora da tela e
        defina seu texto como "Vá em frente!".  Execute o programa para ver se você consegue enxergar
        o botão.
      U3L13 - Debug Id plus logic problem_instruction: "O último problema foi um exemplo\nde
        erro de sintaxe. O laboratório de aplicativo não entendeu qual objeto ele
        deveria ouvir \npara um evento \"clique\", então ele mostrou uma mensagem
        de erro no console para\ninformá-lo. Outro tipo de erro é um erro lógico -
        o programa é válido,\nmas não faz o que você quer que ele faça.\r\n\r\nEsse
        programa tem dois erros.\nUm erro de sintaxe (complicado) e um erro lógico.
        \ Encontre-os, conserte-os e faça\no programa funcionar como esperado."
      U3L13 - Debug Id Problem_instruction: |
        Esse programa tem um problema! Você pode descobrir
        qual? Execute o programa e veja se você pode descobrir a partir das mensagens de erro
        no console qual é o problema. Não há muito código para ver, então você deve ser capaz
        de descobrir o problema simplesmente lendo o código com atenção. Faça uma alteração
        que permita que o programa funcione como esperado.
      U3L13 - Turtle Driver Project_instruction: |
        Desafio: crie uma "tartaruga motorista"
        com pelo menos três botões na tela para mover a tartaruga para a frente e
        virá-la para a direita e para a esquerda. Se quiser, você pode copiar/colar de um nível anterior,
        mas você vai exercitar seus músculos de programação se criar
        esse pequeno programa desde o início. Se tiver tempo, adicione botões extras! Você
        também pode se divertir alterando os parâmetros nas funções da tartaruga, usando cores,
        etc.
      U3L13 - Turtle move with button_instruction: "Arraste um botão para fora da
        tela e\ndefina seu texto como \"Vá em frente!\". Adicione um manipulador de
        eventos para o botão que\nfaz a tartaruga se mover para a frente. Execute
        o programa para ver se ele funciona. \n"
      U3L14 - Unfortunate Events Free Play_instruction: |
        Siga a planilha de "Eventos
        infelizes" e insira seu código aqui para testá-lo. Carregamos previamente
        o código que você precisa para começar.
      U3L16 - challenge say hi app_instruction: "In this challenge we give you starter\ncode
        that lays all the elements out on the screen.  Here’s what you need to\ndo:\r\nAdd
        event handler to textInput with the event type ‘input’ that shows\nthe “Say
        hi” button when that event occurs.\r\nAdd event handler to button\nso that
        on click, it writes a hello message to the screen and hides the textInput\nand
        button."
      U3L16 - hideAndShow_instruction: |
        Introdução de textInput, getText e write.  Primeiro,
        execute o código inicial várias vezes. Tente alterar o que é escrito na
        tela quando o botão for clicado. Então, use getText para escrever na tela
        o que o usuário digitou na caixa de texto. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introdução do comando setPosition!  Substitua
        o moveTo no manipulador de eventos de clique do botão para usar setPosition para mover o
        botão para uma posição aleatória quando ele for clicado.
      U3L16 - images and text labels_instruction: "Introdução de objetos diferentes
        de\nbotões! - textLabels e imagens.  Primeiro, tente substituir seu botão
        por um\ntextLabel.  O texto vai responder a eventos da mesma forma que o botão?
        \ Tente conectá-lo\na um manipulador de eventos. Fornecemos um código inicial
        similar ao resultado do\núltimo nível, então você pode copiar o código do
        último nível aqui se\npreferir. \n"
      U3L16 - images_instruction: "Introdução de imagens. Tente substituir o textLabel\npor
        uma imagem. A imagem vai responder aos eventos como o botão respondia? Tente
        \nconectá-la a um manipulador de eventos. Fornecemos um código inicial similar\nao
        resultado do último nível, então você pode copiar o código do último nível\naqui
        se você preferir. \n"
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introdução do comando setPosition!
        Substitua o moveTo no manipulador de eventos de clique do botão para usar setPosition
        para mover o botão para uma posição aleatória quando ele for clicado.
      U3L16 - setPositionMoveButton_instruction: Use setPosition para moveButton
      U3L16 - setupMoveToRandom_instruction: "Vamos nos basear em alguns códigos\niniciais
        simples para esta lição. Sua primeira tarefa: use moveTo e randomNumber\npara
        fazer a tartaruga se mover para uma posição aleatória a cada clique do botão.
        Fornecemos\na você o código inicial para nossa configuração comum: um botão
        que move a tartaruga\nquando é clicado. Você deve modificar esse código.  \n"
      U3L16 - text labels_instruction: "Introdução de textLabels.  Primeiro, tente
        substituir\nseu botão por um textLabel.  O texto vai responder a eventos da
        mesma forma que o\nbotão?  Tente conectá-lo a um manipulador de eventos. Fornecemos
        um código\ninicial similar ao resultado do último nível, então você pode copiar
        o código do\núltimo nível aqui se você preferir. \n"
      U3L16 - textInput getText write_instruction: |
        Introdução de textInput, getText
        e write.  Primeiro, execute o código inicial várias vezes. Tente alterar o que
        é escrito na tela quando o botão for clicado. Então, use getText para escrever
        na tela o que o usuário digitou na caixa de texto.
      U3L16 - use images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer.
      U3L19 - Debugging with consoleLog_instruction: |
        This example shows how you
        might insert console.log statements in your code to verify for yourself how
        the values in the variables change during the running of the code.  This is
        an important debugging technique to use when each line in your program doesn't
        have a visual effect on the app that you can see to verify things are working
        right.  Run the code to see the output in the console.
      U3L19 - DEMO up down count practice app_instruction: |
        This is a demonstration
        of a simple App that uses variables, arithmetic and setText.  Play with it
        a little bit here to see what it does.  You can also come back to experiment
        if you want.  You are going to try to create this app yourself on the next
        screen.  Don't worry, we'll start you out with some of the code and leave
        the rest for you to complete.
      U3L19 - do concatenate string with var_instruction: "Demos a você um trecho\nde
        código da tela anterior. Tente alterar o valor atribuído a foo\npara ver a
        string ser alterada. \r\nFaça o seguinte: \r\n1. Tente alterar o valor atribuído\na
        foo para ver a string ser alterada. \r\n2. Modificando apenas as linhas de
        código\nque lhe foram dadas, tente fazer a saída ser: “O valor de foo é:\n9.
        \ Quem achar diferente que prove.” \r\n"
      U3L19 - fix the var name syntax error_instruction: "Demos a você um trecho de
        código\ncom um erro. Ele não reconhece a variável. Você consegue descobrir
        o motivo? Conserte\no erro e execute o programa. Observe também a mensagem
        de erro, já que ela\npode aparecer em algum momento da sua vida.\r\n\r\n"
      U3L19 - practice with setText_instruction: |
        We've started you out with the
        code shown on the previous screen.  First experiment with the app.  Identify
        where setText is being used.  CHALLENGE: modify the code to also use setText
        to change the text on the button itself when it's clicked.  GIF: U3L19 -
        setTextOfButton.gif
      U3L19 - Target Clicker App_instruction: "# A motivating example\r\n\r\nHere\nis
        an example of the kind of app we want to make.  Study this for the elements\ncontained
        in the app rather than what it is or does.  Things to investigate:\n\r\n\r\n1.
        what happens when you click on the Code.org logo? \r\n2. What happens\nwhen
        you click somewhere else? \r\n3. Try the reset button.   \r\n\r\nThe\nelements
        contained in this app appear to be simple, and they are in some ways.\nHowever,
        the computing principles involved - controlling and keeping track\nof things
        in memory while the program is running - get into some deeper issues\nof programming
        and computer science in general.  There are some devilish details\nand paths
        that can lead to misunderstanding if you're not careful.\r\n\r\nSo,\nkeep
        this app in mind as you go through the different levels in this lesson.  It\nmight
        seem like you need to learn a lot in order to get this simple thing\nworking.
        \ But it's worth taking the time to understand at a deeper level\nwhat is
        going on.  Because this one topic: controlling memory leads to many\npossible
        misunderstandings about coding, and how computers work.  We want\nto make
        sure you get it right from the outset.  \r\n\r\nSo take your time.  Work\nthrough
        the issues.  Read the explanations.  You'll come out on the other\nside a
        better programmer with much deeper knowledge and understanding of how\nthings
        work.  \r\n\r\nAre you ready?  Click 'finish' to move to the next\npage and
        start the lesson."
      U3L19 - test reassignment of two vars_instruction: |
        Why is this happening?
        The code given here is the same as the example from the previous page where
        we asked you to make a prediction about what will happen.  Run this code to
        find out if you were right.  If you weren't, that's okay.  You might experiment  a
        little if you want to, but bon't spend too much time here. We'll explain
        more on the next page.
      U3L19 - three basic ops of variables_instruction: "Faça o seguinte:\r\nDemos
        a você\ntrês linhas de código mostradas na página anterior. Adicione três
        linhas de\ncódigo abaixo das mostradas aqui para criar sua própria variável,
        atribuir um\nvalor a ela e escrevê-la na tela.  OBSERVAÇÃO: altere o nome
        da variável de\nx para alguma outra coisa.\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe
        statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).
        \ Run\nthe program and you should see the output show up in the console area
        below\nthe workspace.  Then try adding a few more console.log statements.
        \ Display\nsome text.  Make another variable and display that.  \r\nThe app
        screen will\nbe blank -- that's the point.  With console.log you can test
        output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF:
        U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        This app is only SLIGHTLY
        different from the previous one, but much more dynamic.  See if you can figure
        out how and why the count is going up.  Once you've figured it out then you
        should be able to DO THIS: add a button to the app that when clicked makes
        the count go down, and updates the label.  When you're done the app should
        work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        We've given you
        the code from the previous page.  Right now, because the code only sets the
        values of variables, the app doesn't display anything. DO THIS: insert write
        or console.log statements into the code to figure out what the values of a,
        b, and c are after the code has executed.  You should have first made a prediction
        to see if your mental model of how the computer works is correct.  We'll
        ask for the answer on the next page.
      U3L19 - variable scope problem 2_instruction: |
        First run the program to see
        the problem.  You don't need to write code to solve any problem here.  But
        you do need to investigate the code and come up with an explanation for WHY
        what's happening is happening.  Why aren't 3 things being written to the
        screen?  Why does the variable foo seem to exist once but not the other times?  If
        you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages?  Once you think you have a good
        answer, continue to the next page.
      U3L19 - variable scoping problem debugging_instruction: "Here is the code from\nprevious
        page that has a subtle problem with it.  FIRST: run the app and try\nit to
        see the problem. NOTE: NaN stands for \"Not a Number\".   DO THIS: figure\nout
        what's happening, where, and fix the problem.  We'll explain the issue\non
        the next page. \n"
      U3L19 - write var and string with same name_instruction: |
        Agora, veja este
        exemplo. Adicionamos outra declaração de escrita. Antes de executar o código, veja
        se você consegue prever qual será a saída. É sério, anote sua previsão. DEPOIS,
        execute o código, mexa nele, se quiser, e vá para a próxima página para
        ver uma explicação.
      U3L2 Using Simple Commands_instruction: |
        Desenhe um quadrado usando apenas avance
        e vireEsquerda.  O quadrado deve ser desenhado acima e à esquerda da posição
        inicial da tartaruga.
      U3L2_Turtle3by3Grid_instruction: |
        Desenhe uma grade 3x3 acima e à direita da
        tartaruga. Tente fazer isso com o menor número de comandos possível. OBSERVAÇÃO:
        Esse problema é bastante desafiador. Você deve precisar passar um tempo resolvendo-o
        e ajustando-o.  Você também deve considerar usar lápis e papel para esboçar
        suas ideias.
      U3L2_TurtleSquare_right_instruction: |
        Desenhe um quadrado usando apenas avance
        e vireEsquerda, mas, desta vez, faça o quadrado aparecer ACIMA e À DIREITA
        da posição inicial.
      XML Scratchpad_instruction: Use este nível de teste para pegar xml para testes
        de unidade
