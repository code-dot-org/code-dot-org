---
zh-CN:
  data:
    short_instructions:
      2-3 Artist 1 new: 您好，我是一个艺术家。你写的代码可以让我画任何的东西。 用几个程序模块来让我画一些灰色线条吧。 (每一行是100个像素长)
      2-3 Artist 11: "为停止标志画一个八边形的边，边长为100像素。\r\n\r\n"
      2-3 Artist 12: "画一个圆圈来完成这个眼球！\r\n\r\n如果每次都是转1度，你需要重复次才能完成这个圈？180 、360 、还是500次呢？"
      2-3 Artist 2 new: '这所房子有一堵墙只完成了一半。每一边长都是 100，但是完成了一半的墙只有 50。请完成该墙。 '
      2-3 Artist 2: '这所房子有一堵墙只完成了一半。每一边长都是 100，但是完成了一半的墙只有 50。请完成该墙。 '
      2-3 Artist 3.4: |-
        “跳”模块会移动艺术家但不画线。通过使用“向前跳”块和“向前移动”块来画出虚线。
        每行是50像素长。
      2-3 Artist 3: 这顶帽子的高度是 100 像素。请你画一顶高度为 70 像素的帽子。
      2-3 Artist 3new: "红色的帽子高度是 100 像素。请绘制一顶高度矮70个像素的黑色帽子。\r\n（注意：每顶帽子的宽度是50像素。）"
      2-3 Artist 4: 帮我为小猫盖好房子
      2-3 Artist 5: 将这段代码用“重复次数”模块来代替，画出同样的房子只需要3块模块。
      2-3 Artist 6: 这个房子需要一个屋顶！提示：所有三面都具有相同的长度。
      2-3 Artist 7: '画完学校窗户的最后一部分，这样班级里的每个人都可以看到外面了。每个正方形窗户的边长都是25像素。 '
      2-3 Artist 8: 把矩形分成两个相等的正方形来为每只动物提供一个房间。长方形的宽是200像素，高是100像素。有很多方法都可以解决这个难题，所以找出一些乐趣吧！
      2-3 Artist 9 NEW: 完成这只风筝
      2-3 Artist 9 REPLACEMENT: 绘制完这些楼梯 ！
      2-3 Artist 9: 完成这只风筝
      2-3 Artist Assessment 1: 评估： 完成绘制最后一个齿。宽度为25像素并且高度为25像素。
      2-3 Artist Debugging 1: 这顶帽子应该只有50像素宽。 你能改好它吗？
      2-3 Artist Debugging 10: "我的游戏控制器方向键太窄了。\r\n\r\n你能让它增加 10 像素吗？ \r\n\r\n试试先运行代码看看哪里有问题。"
      2-3 Artist Debugging 11: "我的雪花在崩塌！\r\n\r\n你能找到哪里错了吗？"
      2-3 Artist Debugging 12: 我希望添加一片海浪到场景里。能帮我吗？
      2-3 Artist Debugging 2: "这只猫的三条胡须的代码是错误的。\n\r\n\r\n修改代码来画出一样长的胡须。"
      2-3 Artist Debugging 3: "我的船有个洞!\r\n\r\n你可以帮我修好它吗?"
      2-3 Artist Debugging 4: |-
        我们想要画的图是什么？
        用适当的线条和角度连接这些点。
      2-3 Artist Debugging 5: "画腿和脚的程序是错误的。\r\n\r\n你能改对它吗？"
      2-3 Artist Debugging 6: "好像我坐的椅子少了一条腿！\r\n\r\n编辑代码来画出最后一条腿。"
      2-3 Artist Debugging 7: "代码里面的这个“C”看起来像是画反了！\r\n\r\n你能把它再改成“C”吗？"
      2-3 Artist Debugging 8: "我的老师说应该有始有终！\r\n\r\n帮我完成我的风车。你能找出哪里错了吗？"
      2-3 Artist Debugging 9: "有东西断了！\r\n\r\n茎的代码错了。你能让小画家画出正确的茎吗？"
      2-3 Artist Debugging Assessment 1: "评估：为什么每条边75像素太短了？\r\n\r\n代码哪里错了？"
      2-3 Artist Free Play: 自己玩吧！想画什么就画什么。
      2-3 Artist Functions 1 a: "“我，僵尸艺术家。我，爱画画 ！”\r\n\r\n请帮它画副方形眼镜。\r\n\r\n正方形的宽度是100像素，而眼镜间的桥比它短25像素。"
      2-3 Artist Functions 1: "“我，僵尸艺术家。我，爱画画 ！”\r\n\r\n请帮它画副方形眼镜。\r\n\r\n正方形的宽度是100像素，而眼镜间的桥比它短25像素。"
      2-3 Artist Functions 10: 自由发挥：这里有两个函数，一个是绘制一个大齿轮，另一个是画一个小齿轮。用它们来绘制一个机器的内部结构！
      2-3 Artist Functions 11 a: "我们将`draw a square`（画一个正方形）的函数改成了`draw a hexagon`（画一个六边形），但它实际上还是只能画正方形！你能把`draw
        a hexagon`（画一个六边形）函数改成能画边长50像素的六边形吗？\r\n\r\n用新函数来画这个图形吧！"
      2-3 Artist Functions 11.5 a: "这里同样是\"画一个六边形\"的功能。\r\n\r\n如果在循环中每次转 60 度，一共转6次，会发生什么呢？"
      2-3 Artist Functions 11.5: "这里同样是\"画一个六边形\"的功能。\r\n\r\n如果在循环中每次转 60 度，一共转6次，会发生什么呢？"
      2-3 Artist Functions 11: "我们将`draw a square`（画一个正方形）的函数改成了`draw a hexagon`（画一个六边形），但它实际上还是只能画正方形！你能把`draw
        a hexagon`（画一个六边形）函数改成能画边长50像素的六边形吗？\r\n\r\n用新函数来画这个图形吧！"
      2-3 Artist Functions 12 Mike: "函数对于多次画一个复杂的事物非常有帮助。\r\n\r\n你能用“画一朵花”函数来填满整个花盆吗？\r\n提示：每株花应该相隔100像素。"
      2-3 Artist Functions 12 a: "函数对于多次画一个复杂的事物非常有帮助。\r\n\r\n你能用“画一朵花”函数来填满整个花盆吗？\r\n提示：每株花应该相隔100像素。"
      2-3 Artist Functions 12: "函数对于多次画一个复杂的事物非常有帮助。\r\n\r\n你能用“画一朵花”函数来填满整个花盆吗？\r\n提示：每株花应该相隔100像素。"
      2-3 Artist Functions 13: 我们提供了4个函数。你可以随意把它们放在一个或者多个循环中来画图，然后分享给你的朋友们。点击“运行”来看示例。
      2-3 Artist Functions 2 a: '用这个小绿的`draw a square 20`（画一个边长20像素的正方形）模块来调用新函数，并创建眼镜。 '
      2-3 Artist Functions 2: "函数能让你定义新的模块。\r\n\r\n我们将画正方形的模块挪到了一个叫做“画一个正方形”的函数里。这次，用“画一个正方形”函数来画个眼镜吗。\n\r\n\r\n正方形间隔75像素。"
      2-3 Artist Functions 3 a: "编辑\"draw a square 20\"（画一个边长20像素的正方形）函数来画一个每边是115像素的有框架的眼镜。\r\n\r\n正方形相隔45像素。"
      2-3 Artist Functions 3: "编辑这个函数来画一个边长115像素的正方形，从而能够画出一个更大的眼镜。\r\n\r\n正方形的间隔为45个像素。"
      2-3 Artist Functions 4 a: 现在，将函数放到一个循环中，并再加一个转向来画这三个正方形。
      2-3 Artist Functions 4: 现在，将函数放到循环里来画这三个正方形。
      2-3 Artist Functions 7: '用“画一个房子"的函数来画两个参数不同的房子。（提示: 第一个房子是100像素的）。'
      2-3 Artist Functions 9: 自由发挥：这里有个雪花函数。试试用它创造出冬季的景色！这是一个自由关卡，不需要解决问题。随便玩吧！
      2-3 Artist Loops 1: 可以做出一个边长100像素的六边形吗？记住，这代表每次只能转60度。
      2-3 Artist Loops 10: 如果让最后一步提早一半，将会发生什么？
      2-3 Artist Loops 11: 现在，让我们用另一个循环把整个作品都包围起来！ 别忘了在外层循环的最后增加一个角度。
      2-3 Artist Loops 2: 现在用重复模块来给单元加个壳。
      2-3 Artist Loops 4: 如果我们用循环来一次次重复这个形状的话，会发生什么呢？
      2-3 Artist Loops 5: 现在，让我们对这个循环做个小小的改动，然后看看图象有什么不同。
      2-3 Artist Loops 6: 在循环里再添加一个移动和另一个转弯，然后看看你的设计有什么变化。
      2-3 Artist Loops 7: 我们可以用循环来制作所有的多边形。可以在六边形里面创建一个平行四边形吗？
      2-3 Artist Loops 8: 将两个元素放到一个循环里。
      2-3 Artist Loops 9: "我们要循环同样的元素了，但是现在我们需要给它们之间加一些距离。\r用和以前一样的代码，但是在外面的循环结束时往前走一步。"
      2-3 Artist Loops New 1: 让我们来画一个机器人的头！你可以创建一个100像素边的正方形。
      2-3 Artist Loops New 10: 现在，让我们把这一堆V用循环连在一起。
      2-3 Artist Loops New 11: 重构刚刚那一关的代码，但是这次，加一个左转30度到循环里。现在，重复24次，而不是8次。
      2-3 Artist Loops New 12: '画一个边长100像素的菱形。 '
      2-3 Artist Loops New 13: "现在，我们从一些（灰色的）代码开始来画一个菱形。\r\n\r\n循环灰色的代码来创造一个有趣的图形！"
      2-3 Artist Loops New 14: 改一改画菱形的代码，看看能画出什么别的形状。试试改变转向的度数和循环的次数。
      2-3 Artist Loops New 15: 现在，随便画你喜欢的东西吧！
      2-3 Artist Loops New 2: "这是一个以前解决过的问题，但是这次，我们只用一个“向前移动”和一个“转向”模块。\r\n\r\n你能用一个“重复”模块来解决这个问题吗？"
      2-3 Artist Loops New 9: 画一个简单的V（两边都是50像素）来完成这个箭头。
      2-3 Artist Match Hex Pic: 比赛： 帮助完成六角形。
      2-3 Artist Match Rho Pic: 比赛： 补全缺少的代码。
      2-3 Artist Match Sq Pic: 比赛： 完成缺少的代码
      2-3 Artist Match Tri pic: 匹配： 填写缺少的代码。
      2-3 Artist Nested Loops 1: 将整个代码块放到一个“重复”模块中来画出这个形状。
      2-3 Artist Nested Loops 10: 让这段代码循环12次来完成这个图案。
      2-3 Artist Nested Loops 11: 让这段代码循环4次可以完成该图案，在每个圆圈后要旋转 90 度哦。
      2-3 Artist Nested Loops 12: 让这段代码循环12次就可完成曲线。
      2-3 Artist Nested Loops 2: "现在，循环这个三角形6次。\r\n\r\n在画完每个三角形后，需要转60度。"
      2-3 Artist Nested Loops 3: "你需要循环这个三角形12次来画出图形。\r\n\r\n将圆周（360度）除以要画形状的数量（12）来算算每次画完后应该转多少度。"
      2-3 Artist Nested Loops 4: "将菱形循环12次来画出一朵花!\r\n\r\n提示：我们会用和画12个三角形一样的角度来画12个菱形。\r\n\r\n画出每个形状后应该转多少度？"
      2-3 Artist Nested Loops 5: "用嵌套循环来填满建筑物的窗户。\r\n\r\n这些窗户长20像素，相隔20像素。"
      2-3 Artist Nested Loops 6: "这只恐龙的尾巴上有8个尖刺。\r\n每根刺有30像素长。将三角形循环8次，但确保画出每个三角形之后向前跳！"
      2-3 Artist Nested Loops 7: "循环这个三角形10次来画出太阳。\r\n\r\n画出每个三角形后，需要移动并转向。\r\n\r\n你可以用圆圈的度数（360）除以三角形的数量，来算算每次需要转多少度。"
      2-3 Artist Nested Loops 8: "现在我们加一些草到图画中。\n\r\n\r\n每一簇草相隔50像素。"
      2-3 Artist Nested Loops 9: "再加上一朵花，这幅图就完成了。\r\n\r\n将菱形循环12次来画出这朵花。"
      2-3 Artist Nested Loops Free Play: 自由发挥，用嵌套循环画一些很酷的东西。
      2-3 Bee Conditionals 1: 嗨！我是一只蜜蜂。帮我从这朵花获得花蜜。
      2-3 Bee Conditionals 10: "紫色的话也许有一个花蜜，或者一个都没有。小心不要从没有蜜的花里面采蜜。\r\n"
      2-3 Bee Conditionals 11: "我想知道那里有什么！\r\n\r\n帮我飞到院子里，只从有花蜜的花里收集花蜜。 "
      2-3 Bee Conditionals 12: 帮我用尽可能少的模块找到所有的花蜜！
      2-3 Bee Conditionals 13: "这里有好多！\r\n\r\n用你学到的知识来收集所有的花蜜，并制作蜂蜜。"
      2-3 Bee Conditionals 14: "让我们把东西都放到一起！\r\n\r\n用你学到的知识只从有花蜜的花里收集，用的模块越少越好。别忘了最后制作蜂蜜。"
      2-3 Bee Conditionals 15: "这个像阶梯一样的图形看起来很熟悉。\r\n\r\n你能用尽量少的模块从花里收集一些花蜜吗？"
      2-3 Bee Conditionals 2: "我是一只饥饿的蜜蜂！\r\n帮我用最少的模块从花朵中采集花蜜。"
      2-3 Bee Conditionals 3: "查看所有的花蜜！\r\n\r\n帮我用尽可能少的模块来收集花蜜并酿成蜂蜜。  "
      2-3 Bee Conditionals 4: 帮我从所有花中采集花蜜并酿造成蜂蜜。
      2-3 Bee Conditionals 5: "小心不要从没有花蜜的紫花里收集花蜜。\r\n你必须先用“如果”模块来检查是否花蜜等于1。"
      2-3 Bee Conditionals 6: 用“如果”模块来检查是否花里面有花蜜。
      2-3 Bee Conditionals 7: 从每一朵花中采集花蜜（如果有的话）。
      2-3 Bee Conditionals 8: 这块地里有红色和紫色的花。你能看到红色的花里有多少花蜜，但不知道紫色的有多少。收集所有的花蜜。
      2-3 Bee Conditionals 9: 收集每朵花的花蜜。
      2-3 Bee Conditionals Assessment 1: 评估：收集所有的花蜜。小心，不要采集没有花蜜的紫花。
      2-3 Bee Debugging 1: 这些模块真的让我很困扰。改正错误，从而能够采集所有花蜜。
      2-3 Bee Debugging 10: "这些模块真的让我很困扰。\r\n改正错误，从而能够采集所有花蜜，并酿成蜂蜜。"
      2-3 Bee Debugging 2: "你能找到问题吗？\r\n改正错误，从而能够采集所有花蜜。"
      2-3 Bee Debugging 3: "哎呀，被蛰了！\r\n\r\n改正错误，从而能够采集所有花蜜。"
      2-3 Bee Debugging 4: 这些模块真的让我很困扰。改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      2-3 Bee Debugging 5: "那朵花看起来很好吃！\r\n\r\n改正错误，从而能够采集所有花蜜。你可以用“运行”和“下一步”了。"
      2-3 Bee Debugging 6: "真是一个甜蜜的挑战！\r\n\r\n改正错误，从而能够采集所有花蜜。"
      2-3 Bee Debugging 7: 修复错误来收集所有的花蜜并酿蜂蜜。
      2-3 Bee Debugging 8: "这么多美丽的花！\r\n\r\n改正错误，从而能够采集所有花蜜。"
      2-3 Bee Debugging 9: "有点耐心！\r\n\r\n你需要修复这个程序的一些问题，，从而能够采集所有花蜜，并酿成蜂蜜。"
      2-3 Bee Debugging Assessment 1: "评估：现在是时候看看你学会了什么了！\r\n\r\n改正错误，从而能够采集所有花蜜，并酿成蜂蜜。"
      2-3 Bee Functions 1: 函数能执行多个模块来完成一个任务。使用“采2份花蜜”方程来采集花蜜。
      2-3 Bee Functions 10: "每次你运行关卡的时候，紫色花朵内的花蜜都会在 1 和 0 中变动。 \r\n\r\n创建一个函数，使小蜜蜂只从有花蜜的紫色花收集花蜜。"
      2-3 Bee Functions 2: "函数是由多个模块组合起来完成同一个任务。\r\n\r\n用“get 5”函数来一次得到5个花蜜。"
      2-3 Bee Functions 3: 收集每朵花的花蜜。
      2-3 Bee Functions 4: "“移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r\n\r\n用这个函数收集所有的花蜜。"
      2-3 Bee Functions 5: 现在花里有更多的花蜜了。编辑这个函数，以使它每次能收集4个花蜜，然后用它收集到所有的花蜜。
      2-3 Bee Functions 6: 现在用同样的函数来从三朵花里收集花蜜。
      2-3 Bee Functions 7: 现在，花更远了。编辑给定的函数，用它收集所有的花蜜。
      2-3 Bee Functions 8: 创建函数来获取花蜜，向前移动，并酿造蜂蜜。用函数来收集花蜜，并在蜂窝那里酿造花蜜。
      2-3 Bee Functions 9: 创造您自己的函数。这个函数可以向下走，采集花蜜，酿造蜂蜜，然后返回起点。
      2-3 Bee Functions Assessment 1: 评估：用给定的函数从每朵花上收集花蜜。
      2-3 Bee Functions Assessment 2: 评估：创建一个函数来转向、往前移动、并酿造三个蜂蜜，然后让蜜蜂返回出发的位置并向后转。
      2-3 Bee Loops 1: "这些花看上去很好吃！\r\n\r\n用尽可能少的模块，从每朵花里收集蜂蜜。"
      2-3 Bee Loops 10: 可以把“当”循环放到另外两个循环里来收集所有的花蜜吗？
      2-3 Bee Loops 11: 在这块地里，用当循环来收集所有的花蜜。
      2-3 Bee Loops 12: 在这块地里，用当循环来收集所有的花蜜。
      2-3 Bee Loops 13: 评估：用尽可能少的模块来收集所有的花蜜。
      2-3 Bee Loops 1A: '你好，我是蜜蜂。可以帮我从这些花里收集花蜜吗？ '
      2-3 Bee Loops 2: 用尽可能少的模块来收集花蜜，并酿造蜂蜜。
      2-3 Bee Loops 2A: 这次，用循环来收集所有花蜜。
      2-3 Bee Loops 3: 用最少的模块来收集花蜜，并在蜂窝那里酿造蜂蜜。
      2-3 Bee Loops 3A: 用一个“重复”循环来收集所有花蜜。
      2-3 Bee Loops 3B: 现在，用“重复”模块来收集花蜜，并酿造蜂蜜。
      2-3 Bee Loops 4: "忙碌的蜜蜂！\r\n\r\n帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。"
      2-3 Bee Loops 4A: "这个谜题中的循环应该进行多少次？\r\n\r\n循环是你的朋友！用一些循环来减少模块，并完成这道谜题。"
      2-3 Bee Loops 5: "这条路的形状和其它的不一样。\r\n\r\n你能用尽量少的模块来收集所有花蜜吗？"
      2-3 Bee Loops 6: 你能为蜜蜂找到最快的路，收集所有花蜜并酿造蜂蜜吗？
      2-3 Bee Loops 7: 多美的花园啊！帮助蜜蜂访问每一朵。你能找到只用7个模块就实现的方法吗？
      2-3 Bee Loops 8: "在每次你游玩这个谜题时紫色花里的花蜜数量都是不一样的。\r\n\r\n使用“当有花蜜时”循环来收集所有花蜜。\r\n\r\n循环在条件为真时会不停的运行，在这里条件为“花蜜数量大于0”。"
      2-3 Bee Loops 9: "“当循环”就像在循环里面有个“如果”语句一样。添加一个当循环到代码里来完成同样的任务。"
      2-3 Bee Loops Assessment 1: 评估 - 用当循环来收集所有花蜜。
      2-3 Maze 1: '可以帮我抓住这只顽皮的猪吗？在“当运行时”模块下放几个“向前移动”的模块，然后点击“运行”。 '
      2-3 Maze 10: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze 11: 带我去那朵花， 我饿了！你需要用模块重复几次？
      2-3 Maze 12 (copy 1): 你能用两个模块就完成上一个问题吗？（提示：用重复数次模块来创建一个循环）
      2-3 Maze 12 (copy 2): 你能用两个模块就完成上一个问题吗？（提示：用重复数次模块来创建一个循环）
      2-3 Maze 12 (old): 这次用重复模块来帮我到达那只猪！
      2-3 Maze 12 - One Move Block: |-
        走到猪的位置！
        这次你能只用一个“向前移动”模块。另外，看看其他的模块有用吗？
      2-3 Maze 12: 你能通过创建一个只有`向前移动`的`重复`循环来到达猪那里吗？
      2-3 Maze 13 (old): 现在，用“重复直到”模块帮我到达那只猪旁边！
      2-3 Maze 13: 帮我到达猪那里！这次只能用一个“向前移动”模块。
      2-3 Maze 14 (old): 帮我用”重复直到“模块到达那头猪！
      2-3 Maze 14: 带我到向日葵那里！（我需要的“重复次数”模块呢？）
      2-3 Maze 15 (old): 帮我用”重复直到“模块到达那头猪！
      2-3 Maze 15: 在这道题里，两个“重复”循环能够让你用最少数量的模块来到达猪那里！
      2-3 Maze 16 (old): 帮我用”重复直到“模块到达那头猪！
      2-3 Maze 16 before: 你能找到最快的路来帮我到那只猪那里吗？
      2-3 Maze 16: 在循环里放置一个以上的模块！你能循环这个序列，让僵尸走到向日葵那里吗？
      2-3 Maze 2: 这只猪弄乱了我的羽毛！帮我抓住他！
      2-3 Maze 3: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      2-3 Maze 4: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze 5: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze 6: 保持冷静，帮我找到那只坏猪。不然我要被它气死了！
      2-3 Maze 7: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze 8: 帮我到达那只猪。
      2-3 Maze 9: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze Loops 1: 能用5个同样的模块来帮我到达猪那里吗？
      2-3 Maze Loops 17: 用你学会的知识让我到达向日葵那里！
      2-3 Maze Loops 18: "用最少的模块帮我到达太阳花！\r\n\r\n试着在一个“重复”循环里添加另一个，这样来减少所需要模块的数量。"
      2-3 Maze Loops 19: "让我们到达下一级！\r\n用循环来使用尽可能少的模块，帮我到达向日葵！"
      2-3 Maze Loops 20: 你能用最少的模块来让我达到向日葵吗？
      2-3 Maze Loops 21: 用尽可能少的模块来帮我到达向日葵！
      2-3 Maze Loops Assessment 1: '评估：只用5个模块帮我到达向日葵！ '
      2-3 Maze sq1: 这只猪把我的羽毛弄乱了。帮我抓住他！
      2-3 Maze sq10: 帮我送到那头猪那里！什么模块被重复执行了？
      2-3 Maze sq10v2: 帮我送到那头猪那里！什么模块被重复执行了？
      2-3 Maze sq2: 顺着路把我带到傻猪那里。记得躲开TNT炸药，不然我的羽毛就没了。
      2-3 Maze sq3: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      2-3 Maze sq4: 保持冷静，帮我找到那只坏猪。不然我要被它气死了！
      2-3 Maze sq5: 帮我抓住那只猪！你需要重复模块多少次？
      2-3 Maze sq6: 你能用两个模块就完成上一个问题吗？（提示：用重复数次模块来创建一个循环）
      2-3 Maze sq7: 只用3个模块，就把我送到绿色的入侵者那里。
      2-3 Maze sq8: 帮我到达那只猪！（我需要的“重复次数”模块在哪里？）
      2-3 Maze sq9: 通过用循环来使用更少的模块到达那只猪。
      2-3 maze sq11: 帮我送到那头猪那里！什么模块被重复执行了？
      2-3 maze sq12: 你能用“重复次数”模块循环来替代以前的答案吗？
      2-3 maze sq13: 亲爱的人。我，僵尸。必须...... 到向日葵。用"重复直到"块创建一个循环。
      2-3 maze sq14: 你能只用4个模块就帮我到达向日葵吗？
      2-3 maze sq15: 你能只用5个模块就到达向日葵吗？
      2-3 maze sq16: 这一关差不多，但是有一点不同。你能只用5个模块吗？
      2-3: 紫色的花可能有或没有花蜜。小心不要从没有花蜜的紫色中采集花蜜。
      2-3level1: 帮助这只鸟往前走来抓住淘气的猪。
      20hr_farmer_stage9_1: 你好，我是一个农夫。我需要你帮我把一块地翻平来为种植做准备。把我移动到那堆土上面，并使用"移走"块来移除它。
      20hr_farmer_stage9_10: 我工作的太晚了，外面天都黑了。我没办法知道那些土堆有多大了。所以”当“块上的某些选项消失了。把我挪到田地的另一头，如果遇到一个土堆，就移除它。
      20hr_farmer_stage9_11: 外面还是一片漆黑。让我移动到田地的另一边。如果遇到一个土堆，就移除它。相对的，如果遇到一个洞，就填平他。提示：你可以使用”如果“块的下拉菜单中的选项。
      20hr_farmer_stage9_2: 下一步，把我移动到那个洞，并且用“填充”块来把它填平。这个洞需要两铲子土。
      20hr_farmer_stage9_3: 把我移到那堆土那里，告诉我需要多少铲子才能把这堆土移除。尽量使用少的块来解开这个谜题。
      20hr_farmer_stage9_4: 可以帮我移除这所有四堆土么？提示：试试用”重复“块。
      20hr_farmer_stage9_5: 帮我用五铲子的土来填充这些洞。提示： 你可以把"重复"块放在"当"块里面试试。
      20hr_farmer_stage9_6: 移走所有的土堆，尽可能使用尽量少的块。在”当“块的下拉菜单中有新的选项，它能告诉我现在是否站在一个土堆或一个洞上。
      20hr_farmer_stage9_7: 哇，我发现一个很深的洞 ！我不知道它需要多少铲子的土。您能不能编一个程序，往洞里填土直到地面被填平？
      20hr_farmer_stage9_8: 用尽量少的块帮我把田地那边的洞填平。
      20hr_farmer_stage9_9: 请尝试用尽可能少的块来移除所有的土堆。提示：请尝试使用‘当'块
      20hr_maze_stage2_1: 可以帮我抓住这只淘气猪吗？把两个“向前移动”模块堆在一起，然后按"运行程序"来帮我到达那里。
      20hr_maze_stage2_10: 好的，试试看新的“重复直到”模块，它会一直重复直到我抓到那只讨人厌的猪。
      20hr_maze_stage2_11: 好了，最后一次的练习 —— 你可以只用 4个模块来解决这个问题吗？
      20hr_maze_stage2_12: 亲爱的人类。我是一只僵尸。我饿了。我必须...... 得到向日葵...... 你可以用5个模块让我到达那里吗？
      20hr_maze_stage2_13: 好的，这道题目很相似，但略有不同。你可以只用5块块解决它吗？
      20hr_maze_stage2_14: 用新的"如果"模块让我来决定什么时候转弯。提示： 你只需要加一个模块，但记住其它模块是怎么排列的，这样下次你就会自己写了。
      20hr_maze_stage2_15: 好啦，这是最后一个谜题了，但你学会怎么一起使用"如果"模块和"重复"模块了么？
      20hr_maze_stage2_16: 我想要向日葵 ！使用"如果"模块，让我用最少的模块到达那里。
      20hr_maze_stage2_17: 好啦，让我们再来练习一次 —— 这和之前的差不多，但是小心别被食人花吃了！
      20hr_maze_stage2_18: "“如果 - 否则”块检查当前是否满足一个条件，并根据结果执行相应模块。试试用这个新的模块让我得到那个向日葵。"
      20hr_maze_stage2_19: 让我们来再练习一次使用“如果/否则”块，你能第一次就成功么？
      20hr_maze_stage2_2: 这只猪把我的羽毛弄乱了。帮我抓住他！
      20hr_maze_stage2_20: 能不能加三个块来帮我走出这个复杂的迷宫？如果你做对了，那我就可以通过任何长度的弯曲路径了。
      20hr_maze_stage2_3: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      20hr_maze_stage2_4: 带我去找那个绿色的小恶魔！（小心 TNT 炸药）
      20hr_maze_stage2_5: 保持冷静，帮我找到那只坏猪。不然我要被它气死了！
      20hr_maze_stage2_6: 有一种方法可以只用两个模块就抓到这只笨猪。可以想出是怎么做么？
      20hr_maze_stage2_7: 只用3个模块，帮我抓住那只绿色的人侵者！
      20hr_maze_stage2_8: 用尽量少的模块帮我驱逐这只坏猪。试试看使用“重复多次”块。
      20hr_maze_stage2_9: 当一个块是灰色的，这表示你不能删除它。解决这个难题，使用"重复"块，重复 3 次。试着把这3个区块放在灰色的"重复"块中：
        移动、 移动、 转向。
      4-5 Artist 1: 帮我完成画我的箱子。(每一行是300像素长)
      4-5 Artist 10: 点击“运行”来试试代码。然后，重复它足够多的次数来完成这幅画。每次的颜色都会不一样。
      4-5 Artist 11: 完成这些绿线。它们有300像素长，相隔15像素。
      4-5 Artist 2: 你能用“重复”模块来完成这个正方形吗？
      4-5 Artist 3.5: 试着了解这段代码会发生什么（或者点击"运行"来试试）。然后，重复它来完成这幅图！
      4-5 Artist 3: 这个长方形的花床周长是600。长边是200。用最少的模块来画出这个长方形。
      4-5 Artist 4: 一个圆有多少度？循环这些模块来创造一个彩色的圆圈。
      4-5 Artist 5: 在“???”里应该放什么，才能让僵尸用循环来完成这幅画呢？
      4-5 Artist 6: 等边三角形每个角的度数都是60。每条边是200像素。完成这幅画。
      4-5 Artist 7: 直角三角形的各个角分别是30、60、90度。斜边（弦）的长度是200像素。完成这幅画。
      4-5 Artist 8: "足球场中线与边线是垂直的。\r\n这个场地的周长是800像素，长是240像素。它有多高？\r\n\r\n画出球场的边线和中线。"
      4-5 Artist 9: 画出这幅图的另一半，使得这个图变得对称。这些是等边三角形，边长是50像素。
      4-5 Artist Assessment 1: 评估：用循环来画等边三角形。每条边是300像素。
      4-5 Artist For Loops 1: 把数字1到10放到宽度的模块中，然后运行代码。
      4-5 Artist For Loops 11: 完成for循环模块，使得它可以按照0，20，40，60，80... 200来数数。
      4-5 Artist For Loops 12: '如果将“从”和“到”的数字反过来会发生什么？完成计数循环模块，使得它能按照200，180，160，140，120...0数数。 '
      4-5 Artist For Loops 13: 这份代码没有使用计数循环，所以用了非常多的模块！用一个计数循环模块来完成这个螺旋。提示：最后一条线的长度是250像素。
      4-5 Artist For Loops 14: 有人开始写代码后，认识到应该有更快的办法！用一个“计数循环"模块来替代其它模块，并完成这个三角形螺旋。（提示：最后一行的长度是300像素）
      4-5 Artist For Loops 15: 有人开始写代码后，认识到应该有更快的办法！用一个“计数循环"模块来替代其它模块，并完成这个六边形螺旋。（提示：最后一行的长度是200像素）
      4-5 Artist For Loops 2: 这是一个“计数循环”模块。“计数循环”模块能够将里面的代码重复给定的次数，而不是每次输入1,2,3...
        10。把数字10放入"计数循环"循环的"至"区段内。
      4-5 Artist For Loops 3: 我们怎么从1计数到50？编辑”计数循环“模块。
      4-5 Artist For Loops 4: 完成”计数循环“模块，从而能够从1数到10，并且每次数1.
      4-5 Artist For Loops 6: 试试画大小为50，60，70，80，和90的正方形。你可以使用五次"画一个正方形"的函数。
      4-5 Artist For Loops 7: 绘制的相同的方块，但使用"计数"的块来更改大小。将"计数器"模块放到"画一个正方形"函数里。提示：它在变量类别中。
      4-5 Artist For Loops 8: 你能将模块放入“计数循环”模块，并且从10增加到200，每次增加10吗？你能在循环类别中找到“计数循环”模块。
      4-5 Artist For Loops 9: 这些圆圈的大小是5和10，15，20，25，30，35。用一个“计数循环”模块来画出这些圆圈。
      4-5 Artist Free Draw 1: 自由发挥！想画什么就画什么。
      4-5 Artist Functions 1: 用重复循环来画这个三角形。
      4-5 Artist Functions 10a: 将代码放到“画一个雪花”的函数中，并且将50替换为参数“大小”。这个函数已经被调用了，并且参数是100像素。
      4-5 Artist Functions 10b: '用“画一个雪花”函数来创建不同大小的雪花。提示: 第一个雪花是25像素长，随后每个雪花的长度都是前一个的两倍。'
      4-5 Artist Functions 11: 这个“画一个六边形”的函数用了“画一个三角形”的函数。完成花六边形的函数。（提示：一个六边形有6条边，每条是100像素长）
      4-5 Artist Functions 12: 完成“画波浪”的函数。每个波浪由一个高峰和一个低谷组成。提示：画5个蓝色的波浪。
      4-5 Artist Functions 13 Free play: 这里有一些函数能画出行星、恒星、火箭和机器人。想画什么就画什么吧，然后分享给你的朋友。
      4-5 Artist Functions 14 Free play: 这里提供了几个函数。将它们放到循环里来画画吧，然后分享给你的朋友。点击“运行”看看示例。
      4-5 Artist Functions 15 Assessment: 评估：用“画一个正方形”函数来创建正方形。这些正方形长度为50，100，150像素。
      4-5 Artist Functions 2a: 现在将这些模块放到一个叫做“画一个小三角形”的新函数里，然后调用它。
      4-5 Artist Functions 2b: 现在，用提供的模块创建一个函数叫做“画一个小三角形”。
      4-5 Artist Functions 3: '现在，创建“画一个中等的三角形”和“画一个大三角形”函数。“画一个小三角形”的函数已经有了。这些三角形的边长分别为50（小的），100（中等的），150（大的）。 '
      4-5 Artist Functions 4: 新的“画一个三角形”的函数有一个参数，它能做以前的三个函数的事情。用这个新的函数画出同样的三角形。
      4-5 Artist Functions 5: 你能将“画一个三角形”函数改成“画一个正方形”，从而改变画出的图形吗？
      4-5 Artist Functions 6: 用“画一个正方形”和“画一个三角形”函数来画一个房子。（提示：正方形的边长是200像素）
      4-5 Artist Functions 6b: 用“画一个正方形”和“画一个三角形”函数，以及其它模块来创建“画一个房子”的函数，然后调用它。
      4-5 Artist Functions 7: 用“画一个房子”的函数来画一个100像素和一个50像素的房子。这两个房子相隔50像素。
      4-5 Artist Functions 8: 这个“花一朵花”的函数有一个能调整茎的高度的参数。将它设置为200，然后看看会发生什么。
      4-5 Artist Functions 9: 画出这三朵花。第一朵花的高度是100像素，接下来的每朵花都比前一朵高50像素。每朵花之间相隔100像素。
      4-5 Artist Patterns 1: "用循环来画出正方形。\r\n\r\n每条边是20像素长。"
      4-5 Artist Patterns 10: "这个代码画了两行六边形 - 循环整个代码4次来画一个蜂窝。\r\n\r\n你需要在最外层的的循环里往回跳120像素，确保小艺术家不会画到屏幕外面去。\r\n"
      4-5 Artist Patterns 11: '需要重复多少次才能画出一个半圆？ '
      4-5 Artist Patterns 12: "如果你创建一个和这个很像的循环，但是往左转，而不是往右转，会怎样呢？\r\n\r\n你能重复它来画出波浪吗？"
      4-5 Artist Patterns 13: "现在，让我们把所有东西重复4次来画出这个画框。小心转角 -- 你不能只转90度！\r\n\r\n如果转60次3度，就会创建出一个半圆，什么样的代码能创建出1/4圆的转角？"
      4-5 Artist Patterns 2: 如果将你的正方形循环放到另一个循环中，我们称之为嵌套循环。在外面的循环里需要加上什么代码，才能让15个正方形一个挨一个的排成一条线？
      4-5 Artist Patterns 3: 现在，让我们增加难度！我们已经将所有模块嵌套到另一个循环里了，但是你需要让小艺术家回来画下一行。哪些代码模块能放在最外层循环的下面来画出整个网格？
      4-5 Artist Patterns 4: 菱形的边长是50像素，角度是120度和60度。用循环来画出它。
      4-5 Artist Patterns 5.5: 需要重复多少次这个模块才能画出网格中所有的菱形？
      4-5 Artist Patterns 5: "让我们重复这个来画出一行6个菱形。\r\n\r\n\r\n注意：我们需要改动菱形的代码来重复3次，而不是两次。想想为什么要这么改呢？\n"
      4-5 Artist Patterns 6: 需要重复多少次这个模块才能画出网格中所有的菱形？
      4-5 Artist Patterns 7: 让我们来修改上一关的代码来适应更复杂的这一关。注意这些菱形的重叠方式，尝试将第一个“向后跳跃”的距离从100变到50(一半的距离)-那么现在小艺术家在第二个“向后跳跃”的时候应该跳多远。
      4-5 Artist Patterns 8: 用一个循环来画出这个边长为40像素，角度为60的六边形。
      4-5 Artist Patterns 9.5: 让我们循环此代码来画两行六边形。请注意第二行是如何被移动到右边的。
      4-5 Artist Patterns 9: "现在，重复三次代码来画出整行。\r\n\r\n每个六边形从最左到最右的宽度是80像素。"
      4-5 Artist Patterns Free Play: 自由发挥 - 试着亲手画一个自己的图案！
      4-5 Bee Conditionals - FC Test: 蜜蜂现在只想要花蜜。不是所有的目标都是花，所以检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。
      4-5 Bee Conditionals 1 (copy 1): 蜜蜂不能分辨出那是花还是蜂巢。先检查那是花朵还是蜂巢，然后从花里面收集花蜜。
      4-5 Bee Conditionals 1: 云朵挡住了我的视线！检查一下云下面是否有花，然后只从有花的地方收集花蜜。小心，它是能变化的！
      4-5 Bee Conditionals 2 (copy 1): 蜜蜂想在只想要花蜜。记住，不是所有目标都是花，所以检查一下，只从花上采集花蜜。
      4-5 Bee Conditionals 2: "更多的云！\r\n\r\n检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。\r\n\r\n记住：\n不是所有云下面都是一样的东西！"
      4-5 Bee Conditionals 3: 现在，我只想酿蜂蜜。有些云下面有蜂蜜。确保检查了每一朵云！
      4-5 Bee Conditionals 4 (copy 1): 未知的目标要么是花，要么是蜂巢。如果是花，用“如果/否则”模块来收集花蜜。否则酿蜂蜜（因为它是蜂巢）。
      4-5 Bee Conditionals 4: 有时云下面是花，有时云下面是蜂蜜！用“如果/否则”模块来收集花里的花蜜，否则酿蜂蜜（因为它是蜂巢）。
      4-5 Bee Conditionals 5: "在云底下要么是花，要么是蜂巢！\r\n\r\n如果是花，用“如果/否则”模块来收集花蜜。\r\n否则酿蜂蜜（因为它是蜂巢）。"
      4-5 Bee Conditionals 6 (copy 1): 紫色的花可能有1个，2个或3个花蜜。这里有一个“如果/否则”模块和另一个“如果/否则”模块混合在一起，成为了一个“如果，否则如果，否则”模块。写出解答来采集未知数量的花蜜。
      4-5 Bee Conditionals 6: "我不确定这朵花有多少花蜜， 但我知道它可能有1个，两个或3个花蜜。\r\n\r\n将一个“如果/否则”模块和另一个“如果/否则”模块混合在一起，成为了一个“如果，否则如果，否则”模块，来采集花里的所有花蜜。\r\n\r\n记住，每次你运行谜题时，花蜜的数量都会变化的！"
      4-5 Bee Conditionals 7: "这些花里可能有一个，两个或三个花蜜。\n\r\n\r\n完成“检查紫色花朵”的函数，然后用它来从所有花里收集花蜜。"
      4-5 Bee Conditionals 8: "完成“检查花朵，酿造蜂蜜”的函数。\r\n\r\n你的函数应该检查紫色的花是否有3个，2个或1个花蜜，然后收集所有的花蜜。\r\n然后，往前移动并酿造蜂蜜。"
      4-5 Bee Conditionals Assessment 1: "评估：这朵云要么藏着一朵有一个花蜜的花，或者有一个蜂蜜的蜂蜜罐。\n\r\n\r\n完成这个“采集花蜜或酿造蜂蜜”的函数，然后调用它来采集所有花蜜，并且酿蜂蜜。\r\n"
      4-5 Bee Debugging 1: "这些模块真的让我很苦恼。\r\n\r\n你能修好它们吗？"
      4-5 Bee Debugging 10: 找到错误，并修好它们。
      4-5 Bee Debugging 11: 这里的计数对吗？
      4-5 Bee Debugging 2: 帮助蜜蜂得到花蜜，并酿造蜂蜜。
      4-5 Bee Debugging 3: 找到错误，并修好它们。
      4-5 Bee Debugging 4: 这些模块不能正常工作。怎样才是正确的？
      4-5 Bee Debugging 5: 哪里有些不对...
      4-5 Bee Debugging 6: "紫色花的花蜜数量在每次运行谜题的时候都是不一样的。\r\n\r\n修好这些模块来收集到所有花里的花蜜。"
      4-5 Bee Debugging 7: 这个函数少了什么...
      4-5 Bee Debugging 8: 这个函数是正确的，但是它没有被正确使用。
      4-5 Bee Debugging 9: 为什么蜜蜂不能制作出足够的蜂蜜？
      4-5 Bee Debugging Assessment 1: '评估: 修复代码。'
      4-5 Bee Nested Loops 1: 用循环来收集所有的花蜜。
      4-5 Bee Nested Loops 2: '从每朵花里收集所有的花蜜。用嵌套循环。 '
      4-5 Bee Nested Loops 3: 将初始的代码放到另一个循环里来收集所有的花蜜。
      4-5 Bee Nested Loops 4: "从所有的花里收集花蜜，然后在每个蜂窝那里酿花蜜。\r\n\r\n用嵌套循环。 "
      4-5 Bee Nested Loops 5: 创建一个嵌套循环来收集所有花蜜。
      4-5 Bee Nested Loops 6: 采集所有的花蜜。
      4-5 Bee Nested Loops 7: 将循环放到另一个循环里来创建一个嵌套循环，然后从所有花里收集所有的花蜜。
      4-5 Bee Nested Loops 8: '用嵌套的“当循环”来从那些花里收集所有的花蜜。将里面的重复次数模块换成一个当循环模块。 '
      4-5 Bee Nested Loops 9: 在一个重复中嵌套一个当循环来从那些花里收集所有的花蜜。
      4-5 Bee Nested Loops Assessment 1: 评估 - 收集所有花蜜，然后用循环来酿造蜂蜜。
      4-5 Bee Nested Loops Rows: 用嵌套循环从每行的所有花里收集花蜜。
      4-5 Maze 1 (copy 1): 亲爱的人. 我僵尸. 必须... 得到... 那朵向日葵。
      4-5 Maze 1: 亲爱的人. 我僵尸. 必须... 得到... 那朵向日葵。
      4-5 Maze 10: 你能只用4个模块就帮我到达向日葵吗？
      4-5 Maze 11: 你能只用6个模块就到达向日葵吗？
      4-5 Maze 12: 好，现在有一点不一样。你能只用6个模块就成功吗？
      4-5 Maze 13: 帮我到达那只猪。
      4-5 Maze 14: 帮我到达那只猪！用“重复直到”模块。
      4-5 Maze 2 (copy 1): 让僵尸到向日葵那里，但要躲开食人花！
      4-5 Maze 2: 让僵尸到向日葵那里，但要躲开食人花！
      4-5 Maze 3 (copy 1): 必须... 得到... 那朵花。
      4-5 Maze 3: 必须... 得到... 那朵花。
      4-5 Maze 4 (copy 1): 试试通过用”重复“模块来使用更少的模块...
      4-5 Maze 4: 使用"重复"的块来迅速解决这一关......
      4-5 Maze 5 (copy 1): 你能用最少的模块来通过这关吗？
      4-5 Maze 5: 你能用最少的模块来通过这关吗？
      4-5 Maze 6 (copy 1): 你能用最少的模块来通过这关吗？
      4-5 Maze 6: 你能用最少的模块来让我达到向日葵吗？
      4-5 Maze 7: 让僵尸快速的到达向日葵！你能用少于等于11个模块来解决这道题吗？
      4-5 Maze 8: "用尽可能少的模块让僵尸到达向日葵。\r\n（躲开食人花！）"
      4-5 Maze 9: "现在，我们用一个新的，叫做“重复直到”的模块。\r\n\r\n这个模块保持循环命令，直到僵尸到达太阳花那里。\r\n\r\n用新的“重复直到”模块来用尽可能少的模块来解决这道题。"
      4-5 Maze Assessment 1: 评估：用尽可能少的模块到达向日葵。
      4-5 Maze Conditionals 1: 用“重复直到”模块让僵尸到达太阳花。
      4-5 Maze Conditionals 10: "能不能加三个块来帮僵尸走出这个复杂的迷宫？\r\n\r\n如果你做对了，那它就可以通过任何长度的弯曲路径了！"
      4-5 Maze Conditionals 2: 用“重复直到”模块让僵尸到达太阳花。
      4-5 Maze Conditionals 3: "用新的\"如果\"模块让我来决定什么时候转弯。\r\n"
      4-5 Maze Conditionals 4: 好啦，这是最后一个关卡了，但你需要记住如何一起使用"如果"模块和"重复"模块。
      4-5 Maze Conditionals 5: "“我，想要向日葵” ！\r\n\r\n使用\"如果\"模块，让僵尸用最少的模块到达太阳花那里。"
      4-5 Maze Conditionals 6: "“吃掉向日葵 ！”\r\n\r\n使用\"如果\"模块，让僵尸用最少的模块到达太阳花那里。"
      4-5 Maze Conditionals 7: 这个关卡的解决方案不是非常不同，但是要小心食人花！
      4-5 Maze Conditionals 8: "“如果/否则”否则模块会检查一个条件，然后根据结果执行相应的部分。\r\n\r\n用这个新的模块让我到达太阳花那里。"
      4-5 Maze Conditionals 9: "让我们来再练习一次使用“如果/否则”块！\n\r\n\r\n用你的手指头比划一下，看看你能否试一次就成功。"
      4-5 Maze Conditionals Assessment 1: 评估：用一个“重复直到”和一个“如果/否则”模块，并用尽量少的模块来帮我到达太阳花。
      4-5 Nested Loops 1: 完成代码来画出这些三角形。第一个三角形已经帮你画好了。提示：三个三角形一共旋转了360度。
      4-5 Nested Loops 10: 通过循环已有的模块来画出旗帜上最后一行星星。这些星星都是30像素宽，而且它们之间距离50像素。
      4-5 Nested Loops 11: 你能用嵌套循环画出人行道上的十个正方形吗？每个正方形是30像素。
      4-5 Nested Loops 12: 你能用嵌套循环画出36个三角形吗？
      4-5 Nested Loops 2: '现在，把这个循环放到另一个循环里，来画出10个三角形。这就叫做嵌套循环。  '
      4-5 Nested Loops 3: "通过将开始的代码嵌套到另一个循环中来画一个太阳。\r\n\r\n如果要画出这个很酷的中空设计，你需要在转弯前往前跳三角形长度那么多。"
      4-5 Nested Loops 5: 循环下面的代码来创建一个风车。
      4-5 Nested Loops 6: 你可以通过循环三角形代码来画一个六边形吗?
      4-5 Nested Loops 7: "循环这个图形10次。\r\n\r\n你的循环里每次需要转多少度呢？"
      4-5 Nested Loops 8: "循环这个图形6次。\r\n\r\n你的循环里每次需要转多少度呢？ "
      4-5 Nested Loops 9: 在鳄鱼嘴里画上牙齿！
      4-5 Nested Loops Assessment 1: 评估：用嵌套循环来完成这幅画。
      4-5 While Loops 1: 将我移到坑旁边，并且使用“填满”模块来用两铲土填满它。
      4-5 While Loops 2: 将我移到土堆那里，然后用“移除”模块来移除五铲土。
      4-5 While Loops 3: "用尽可能少的模块来完成这一关！\r\n\r\n将我移到土堆那里，并将所有土移除。然后将我移动坑旁边，然后完全填满它。"
      4-5 While Loops 4: "哇，瞧瞧这里！\r\n\r\n我不知道要多少铲土才能填满它。\r\n你能写一个程序用“填充”模块，直到它和地面一样平吗？
        \ "
      4-5 While Loops 5: 哇，现在有两个很深的坑！你能写一个程序填充它们，直到和地面一样平吗？
      4-5 While Loops 6: 哇，现在这里有一大堆土！你能写个程序来移除土，直到它和地面一样平吗？
      4-5 While Loops 7: 哇，这里有三堆土！你能写一个程序，将它们一铲铲移除，直到地面平整吗？
      4-5 While Loops 8: " 这里有一个很深的坑，和一个很大的土堆。需要移动多少土才能将地面弄平整呢？"
      4-5 While Loops Assessment 1: 这里有好多坑和土堆。帮我填满或移除它们来让地面平整。
      AB_Debug_PlayLab2: |-
        为什么这个游戏不能做任何事情？

        你能找到"隐藏"的缺陷吗？有些会比较简单。
      AB_Debug_PlayLab3: 将骑士移动到每个旗帜上。如果出错了，就找到缺陷！
      AlgPD DR Free Play: 根据自己的单词问题创建一个函数。
      Alien Defender: 项目创意：在游戏实验室里制作一个塔防游戏！
      Alien Defender_2018: 项目创意：在游戏实验室里制作一个塔防游戏！
      AllTheThings Applab - Turtle move with button: 添加一个按钮，在点击时移动乌龟。（点击查看完整说明）
      'AllTheThings: Pixelation - Lesson 14 - Make the Letter A': 制作一个3x5的字母A。部件的设定尺寸是错误的。你的第一个任务是将第二个字节设置为5的8位二进制码：00000101。然后开始输入像素数据。
      'AllTheThings: Pixelation - Lesson 15 - Color Shades 4x4': 我们已经帮你创建了视频中曼蒂的4x4图像。你的任务是将12位字节的颜色填充到4x4像素网格中。要求如下：第1行
        - 红色系。第2行 - 绿色系。第3行 - 蓝色系。第4行 - 灰色系。
      'AllTheThings: Pixelation - Lesson 15 - Complete 3-bit color': 这是曼蒂创建的4x2的图像，但缺失了最后两个方块。请找出是哪两种颜色并编码完成该图形。
      App Lab test: 测试
      AppLab_test02: 活动的一句话摘要。点击查看完整说明。
      Applab AllTheThings ResourcesTab AllResources: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      Applab AllTheThings ResourcesTab MapReference: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      Applab AllTheThings ResourcesTab ReferenceLinks: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      Applab allthethings onRecordEvent: 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/*通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦*/)。
      Applab test: 这一关可提交。仅用于测试！
      Artist - Nested Loops 1: 完成代码来画出这些三角形。第一个三角形已经帮你画好了。提示：三个三角形一共旋转了360度。
      Artist - Nested Loops 10: 通过循环已有的模块来画出旗帜上最后一行星星。这些星星都是30像素宽，而且它们之间距离50像素。
      Artist - Nested Loops 11: 你能用嵌套循环画出人行道上的十个正方形吗？每个正方形是30像素。
      Artist - Nested Loops 12: 你能用嵌套循环画出36个三角形吗？
      Artist - Nested Loops 2: '现在，把这个循环放到另一个循环里，来画出10个三角形。这就叫做嵌套循环。提示：10个三角形完成了360度的旋转。  '
      Artist - Nested Loops 3: '通过将开始的代码嵌套到另一个循环中来画一个太阳。这就叫做嵌套的循环。  '
      Artist - Nested Loops 5: 循环下面的代码来创建一个风车。
      Artist - Nested Loops 6: 你可以通过循环三角形代码来画一个六边形吗?
      Artist - Nested Loops 7: 循环这个图形10次。循环里每次需要转多少度呢？（提示：360度除以10是多少？）
      Artist - Nested Loops 8: 循环这个图形6次。循环里每次需要转多少度呢？（提示：360度除以6是多少？）
      Artist - Nested Loops 9: 在鳄鱼嘴里画上牙齿！
      Artist - Nested Loops Assessment 1: 用嵌套循环来完成这幅画。
      Artist Autorun Test: 现在，将函数放到循环里来画这三个正方形。
      Artist Inspiration: '自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 '
      Auto Open Function Editor: '你能用一个函数里调用其它函数！用你的“形状”函数作为基础，创建三个房子图形，第一个是50像素宽，而每个都比前一个大20像素。用一个计数循环可能会方便一些。 '
      Bee Recommended Blocks test: 紫色的花里可能会有一个花蜜，但也可能没有花蜜，而且你不知道哪些花有花蜜！请注意不要从没有花蜜的紫花里收集花蜜。你可以用“如果”模块来检查（花朵里的）花蜜是否等于1。
      Bergeron Robot Maze1: '可以帮我抓住这只顽皮的猪吗？在“当运行时”模块下放几个“向前移动”的模块，然后点击“运行”。 '
      Big Game Animation 1 (copy 1): 你已经学习了如何编写简单的线性函数，现在就使用这些函数给游戏增加一些动作吧。点击 "运行"
        看看游戏现在能做什么（虽然并不多）！可以修改其中的变量，然后单击“完成”继续。
      Big Game Animation 1: 现在, 你已经学会了编写简单的线性函数, 让我们运用这些函数让游戏运动起来。点击 "运行" 查看游戏当前可以做什么
        (不是太多!), 可以尝试更改任意变量，看看变化, 然后单击“完成”继续下一步。
      Big Game Animation 2 (copy 1): "`更新目标`函数采用目标的当前 x 值, 并返回更新后的值。完成 `更新目标`, 以便每次调用时都增加
        x 值。x 越大, 目标就运动得越快。"
      Big Game Animation 2: update-target函数采用目标的当前 x 值，并返回更新后的值。完成update-target函数，使其每次调用时都会增加
        x的值。x越大，目标运动越快。
      Big Game Animation 3: update-danger函数和update-danger的行为类似，只是危险应当从右侧滑向左侧。完成update-danger，使危险飞过屏幕
      Big Game Animation 4: 这时，危险应该从右向左穿过屏幕，目标应该从左到右运动，他们离开后不会再返回屏幕，我们稍后将处理它。花点时间来确保游戏像我们想的那样工作，然后点击
        "完成" 继续。
      Big Game Booleans 1: 在上一次编程游戏的过程中, 我们看到了目标以及危险的精灵穿过了屏幕，但永远不会飞回来。单击 "运行" 查看你的程序究竟是怎样运行的,
        然后单击完成，让那些已经离开屏幕的精灵重新出现。
      Big Game Booleans 5: 这时，危险应该从右向左运行, 你的目标应该从左到右运行, 它们都应该返回到对面的位置上，并反复执行。花一分钟来确保游戏像想要的那样工作,
        然后点击 "完成" 继续。
      Big Game Vars 1 (copy 1): 让我们开始游戏吧! 在这里, 将看到一大堆占位符代码, 它们最终被自己的代码替换, 但现在先从定义变量开始。单击
        "运行" ，查看使用默认值运行的游戏是什么样子。
      Big Game Vars 1: 让我们开始游戏吧! 在这里, 将看到一大堆占位符代码, 它们最终被自己的代码替换, 但现在先从定义变量开始。单击 "运行"
        ，查看使用默认值运行的游戏是什么样子。
      Big Game Vars 4: 太棒了！现在, 可以更新玩家、目标和危险的变量。尽情尝试改变这些变量, 把游戏变成喜欢的样子。完成后单击 "完成"。
      Brad Spooky House Copy: 自由发挥：这里除了你写的函数，还有更多的函数让你发挥。画些令人惊叹的东西吧！用不同的笔宽度来看看你能画出什么不一样的图形！
      Brad Spooky House: 自由发挥：这里除了你写的函数，还有更多的函数让你发挥。画些令人惊叹的东西吧！用不同的笔宽度来看看你能画出什么不一样的图形！
      Building a Foundation Assessment: 修建一个三层的金字塔。这里没有其它方向，所以用这些模块，直到画出它！
      Busy Bee 2: 这只蜜蜂有好多工作要做！你注意到有什么模式能让代码更简单吗?
      Busy Bee: 这只蜜蜂有好多工作要做！你注意到有什么模式能让代码更简单吗?
      C3-Farmer While Loops 1: 将我移到坑旁边，并且使用“填满”模块来用两铲土填满它。
      C3-Farmer While Loops 2: 将我移到土堆那里，然后用“移除”模块来移除五铲土。
      C3-Farmer While Loops 3: 将我移到土堆，并将所有土移除。然后将我移动坑旁边，然后完全填满它。提示：用尽可能少的模块来完成这道题。
      C3-Farmer While Loops 4: 哇，我发现一个很深的坑！我不知道要多少铲土才能填满它。你能写一个程序填充它，直到它和地面一样平吗？提示：这次应该用当循环。
      C3-Farmer While Loops 5: 哇，现在有两个很深的坑！你能写一个程序填充它们，直到和地面一样平吗？
      C3-Farmer While Loops 6: 哇，现在这里有一大堆土！你能写个程序来移除土，直到它和地面一样平吗？
      C3-Farmer While Loops 7: 哇，这里有三堆土！你能写一个程序，将它们一铲铲移除，直到地面平整吗？
      C3-Farmer While Loops 8: " 这里有一个很深的坑，和一个很大的土堆。需要移动多少土才能将地面弄平整呢？提示：两个都要用“当”循环。"
      C3-Farmer While Loops Assessment 1: 这里有好多坑和土堆。帮我填满或移除它们来让地面平整。
      CDEF_debugging_flappy2: 为什么这个游戏不能玩？
      CSD Hackathon Pt 1: "（点击以查看完整的说明）"
      CSD Hackathon Pt 2: "（点击以查看完整的说明）"
      CSD Hackathon Week 1: "（点击以查看完整的说明）"
      CSD Hackathon Week 2: "（点击以查看完整的说明）"
      CSD U3 Background Discuss: |-
        这里有一个看起来与你之前写的非常类似的但实际上却完全不同的程序。
        你可能需要停下来并与同学们讨论一下再继续。
      CSD U3 Background Experiment: |-
        这里有一个看起来与你之前写的非常类似的但实际上却完全不同的程序。
        你可能需要停下来并与同学们讨论一下再继续。
      CSD U3 Boolean Modify: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Boolean Modify_2018: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Boolean Modify_2019: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Boolean Predict: 你认为这个代码在执行时会做什么？预测一下每个console.log() （控制台.日志）命令会打印什么，然后运行程序来检查一下你的预测。
      CSD U3 Boolean Predict_2018: 你认为这个代码在执行时会做什么？预测一下每个console.log() （控制台.日志）命令会打印什么，然后运行程序来检查一下你的预测。
      CSD U3 Boolean Predict_2019: 你认为这个代码在执行时会做什么？预测一下每个console.log() （控制台.日志）命令会打印什么，然后运行程序来检查一下你的预测。
      CSD U3 Draw Loop Discuss: |-
        这里有一个看起来与你之前写的非常类似的但实际上却完全不同的程序。
        你可能需要停下来并与同学们讨论一下再继续。
      CSD U3 Draw Loop Experiment: 尝试使用在绘制循环中学到的一些其他形状函数。 使用randomNumber()随机数函数生成一些输入时会发生什么？在继续之前，你需要停止并与班级讨论。
      CSD U3 Expressions calculator: 将数字1到10相加，然后相乘。与旁边的同学互相检查答案。
      CSD U3 Frame Rate: 使用 frameRate() 帧率函数来使盖瑞的动作慢下来。
      CSD U3 Keypress Boolean-2018: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Keypress Boolean: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Keypress Boolean_2018: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Keypress Boolean_2018_2019: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Keypress Watchers: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Keypress Watchers_2018: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 Keypress Watchers_2019: 修改代码，以便使所有的console.log命令打印“真”。
      CSD U3 L5 Freeplay: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 L5 Freeplay_2018: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 L5 Freeplay_2019: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Mouse Input Bee 2: 这样做
      CSD U3 Mouse Input Bee 2_2018: 这样做
      CSD U3 Mouse Input Bee 2_2019: 这样做
      CSD U3 Random Animation: 使用 randomNumber() 随机数函数来激活盖瑞的嘴巴。
      CSD U3 Random Choice: 使用 randomNumber() 随机数模块生成0或1
      CSD U3 Random Color: 你可以使用 randomNumber() 随机数函数来挑选随机颜色吗？ 尝试使用随机数设置 rgb 模块中的一个或多个通道。
        最大值应该是多少？
      CSD U3 Random Intro: 当它运行时，你认为这个代码会做什么？进行预测，然后运行该代码 5-10 次并记录每次的输出。与旁边的同学分享你的结果。
      CSD U3 Random Min Max: 使用 console.log () 函数编写一个程序，在定义的范围内随机返回一个数字。
      CSD U3 Random Width Height: 选取形状块并使用调用 randomNumber () 随机数函数代替一个或多个参数。确定你多次运行了它，以便看到随机化的效果。
      CSD U3 Simple Drawing - Personal Animation: 做这个
      CSD U3 Sprites intro sprites: 做这个
      CSD U3 Sprites intro sprites_2018 - Validation Test: 做这个
      CSD U3 Sprites intro sprites_2018: 做这个
      CSD U3 Sprites intro sprites_2019: 做这个
      CSD U3 Variable Arithmetic: 改变变量“size”（尺寸）的初始值来画一个更大的正方形。
      CSD U3 Variables Square Random: 改变变量“size”（尺寸）的初始值来画一个更大的正方形。
      CSD U3 Variables Square: 改变变量“size”（尺寸）的初始值来画一个更大的正方形。
      CSD U3 Variables TEMPLATE square: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables change circle size: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables change circle size_2018: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables change circle size_2019: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables multiple assignments: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables naming rules v2-2018: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables naming rules v2: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables naming rules v2_2018: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables naming rules v2_2018_2019: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables naming rules: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables random assignment: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables random with assignment: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables random with assignment_2018: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U3 Variables random with assignment_2019: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      CSD U4 - Events Template: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      CSD U5 black white images pixelation 2: 绘制一个笑脸(点击此处看图)
      CSD U5 black white images pixelation 2_2018: 绘制一个笑脸(点击此处看图)
      CSD U5 black white images pixelation 2_2019: 绘制一个笑脸(点击此处看图)
      CSD U5 black white images pixelation 3: 调整宽度和高度滑杆找到图案(点击此处查看更多)
      CSD U5 black white images pixelation 3_2018: 调整宽度和高度滑杆找到图案(点击此处查看更多)
      CSD U5 black white images pixelation 3_2019: 调整宽度和高度滑杆找到图案(点击此处查看更多)
      CSD U5 black white images pixelation 4: 给笑脸添加眉毛(点击此处查看图像)
      CSD U5 black white images pixelation 4_2018: 给笑脸添加眉毛(点击此处查看图像)
      CSD U5 black white images pixelation 4_2019: 给笑脸添加眉毛(点击此处查看图像)
      CSD U5 black white images pixelation 5: 绘制任何你喜欢的图案
      CSD U5 black white images pixelation 5_2018: 绘制任何你喜欢的图案
      CSD U5 black white images pixelation 5_2019: 绘制任何你喜欢的图案
      CSD U5 black white images pixelation: 通过键入0和1来完成图形X
      CSD U5 black white images pixelation_2018: 通过键入0和1来完成图形X
      CSD U5 black white images pixelation_2019: 通过键入0和1来完成图形X
      CSD U6 params modify clouds: "# 云\r\n\r\n当你吹声音传感器的时候, 这个程序会让云朵移动。但它还没完成。\r\n\r\n#
        这样做\r\n* 创建一个新函数`moveCloud(name)`（移动云朵 名称），它将移动任何云朵。\r\n* （提示: 代码几乎和`moveCloud0`函数相同）\r\n*
        在事件模块内调用新的`moveCloud(name)`函数, 每个云朵名称一次。\r\n* （提示: 这类似于 `loopCloud(name)`
        函数被多次调用的方式。）"
      CSD U6 params modify clouds_2018: "# 云\r\n\r\n当你吹声音传感器的时候, 这个程序会让云朵移动。但它还没完成。\r\n\r\n#
        这样做\r\n* 创建一个新函数`moveCloud(name)`（移动云朵 名称），它将移动任何云朵。\r\n* （提示: 代码几乎和`moveCloud0`函数相同）\r\n*
        在事件模块内调用新的`moveCloud(name)`函数, 每个云朵名称一次。\r\n* （提示: 这类似于 `loopCloud(name)`
        函数被多次调用的方式。）"
      CSD U6 params modify planes: "# 多飞机控制器\r\n\r\n此程序使用主板加速度计和屏幕上的复选框来移动三架飞机。现在只有红色的飞机起作用。\n\r\n\r\n#
        这样做\r\n* 创建一个新的`movePlane(name)`函数，它可以移动任何飞机。\r\n* 在事件模块内调用`movePlane(name)`函数,
        这样它只在选中复选框时移动。\r\n\r\n_挑战：现在飞机的移动速度太快了。 你能想出如何更改代码, 使它们移动得慢一些吗？_"
      CSD U6 params modify planes_2018: "# 多飞机控制器\r\n\r\n此程序使用主板加速度计和屏幕上的复选框来移动三架飞机。现在只有红色的飞机起作用。\n\r\n\r\n#
        这样做\r\n* 创建一个新的`movePlane(name)`函数，它可以移动任何飞机。\r\n* 在事件模块内调用`movePlane(name)`函数,
        这样它只在选中复选框时移动。\r\n\r\n_挑战：现在飞机的移动速度太快了。 你能想出如何更改代码, 使它们移动得慢一些吗？_"
      CSD U6 params modify planes_2019: "# 多飞机控制器\r\n\r\n此程序使用主板加速度计和屏幕上的复选框来移动三架飞机。现在只有红色的飞机起作用。\n\r\n\r\n#
        这样做\r\n* 创建一个新的`movePlane(name)`函数，它可以移动任何飞机。\r\n* 在事件模块内调用`movePlane(name)`函数,
        这样它只在选中复选框时移动。\r\n\r\n_挑战：现在飞机的移动速度太快了。 你能想出如何更改代码, 使它们移动得慢一些吗？_"
      CSDU4 - AppLab - 1: 请阅读 penColor () 和 penWidth () 的文档, 然后再使用它们绘制蓝色正方形。
      CSDU4 - Design Mode - 1: 添加一个按钮，在点击时移动乌龟。（点击查看完整说明）
      CSDU6 - Arrays - expressionsAsIndexes: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSDU6 - Arrays - indexPractice: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSDU6 - for loop - color buttons with for: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSDU6 - for loop - color buttons: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSDU6 - for loop - why for: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSDU6 arrays rainbow: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSDU6 arrays random: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSDU6 arrays select icons: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSDU6 arrays select rainbow: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSDU6 arrays select rainbow_2018: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSDU6 arrays select rainbow_2019: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSDU6 arrays select random: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSDU6 arrays select random_2018: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSDU6 arrays select random_2019: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSDU6 arrays select variable: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSDU6 arrays select variable_2018: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSDU6 arrays select variable_2019: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSDU6 arrays variable: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSP student contact info: 请输入您的电子邮箱地址。
      CSPU5_U3 - Arrays - expressionsAsIndexes: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSPU5_U3 - Arrays - expressionsAsIndexes_2018: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSPU5_U3 - Arrays - expressionsAsIndexes_2019: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      CSPU5_U3 - Arrays - indexPractice: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSPU5_U3 - Arrays - indexPractice_2018: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSPU5_U3 - Arrays - indexPractice_2019: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      CSPU5_U3 - Canvas - freePlay: 扩展其中一个效果的功能, 或创建一个全新的。(点击查看完整说明)
      CSPU5_U3 - Canvas - freePlay_2018: 扩展其中一个效果的功能, 或创建一个全新的。(点击查看完整说明)
      CSPU5_U3 - Canvas - freePlay_2019: 扩展其中一个效果的功能, 或创建一个全新的。(点击查看完整说明)
      CSPU5_U3 - Design Mode 1: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      CSPU5_U3 - Design Mode 1_2018: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      CSPU5_U3 - Design Mode 1_2019: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      CSPU5_U3 - Keys - Final Image Scroller: 更新图像滚动条以响应按钮和按键。(点击查看完整说明)
      CSPU5_U3 - Loops - 4: 使用调试命令创建包含6之前所有数字的一个列表。(点击查看详细说明)
      CSPU5_U3 - Loops - 4_2018: 使用调试命令创建包含6之前所有数字的一个列表。(点击查看详细说明)
      CSPU5_U3 - Loops - 4_2019: 使用调试命令创建包含6之前所有数字的一个列表。(点击查看详细说明)
      CSPU5_U3L13 - Turtle move with button: 添加一个按钮，在点击时移动乌龟。（点击查看完整说明）
      CSPU5_U3L15 full clicker app: 完成你的遥控器游戏 ！（点击查看完整的说明）
      CSPU5_U3L15 full clicker app_2018: 完成你的遥控器游戏 ！（点击查看完整的说明）
      CSPU5_U3L15 full clicker app_2019: 完成你的遥控器游戏 ！（点击查看完整的说明）
      Calc Circles of Eval 3: 完成评估模块来匹配此声明。
      Calc Circles of Eval 5: 完成评估模块来匹配此声明。
      Calc Circles of Eval 7: 完成评估模块来匹配此声明。
      Calc Circles of Eval 8: 完成评估模块来匹配此声明。
      Calc Circles of Eval 9: 完成评估模块来匹配此声明。
      Choose Your Own Adventure: 你可以在游戏实验室做任何你想做的事! 下面是一个在游戏实验室中选择自己的冒险故事的例子。
      Choose Your Own Adventure_2018: 你可以在游戏实验室做任何你想做的事! 下面是一个在游戏实验室中选择自己的冒险故事的例子。
      CoureE_HOC 2018 Level_7a: 搜索水下废墟，寻找箱子。
      Course 2 Bee Loops 1: '你好，我是蜜蜂。可以帮我从这些花里收集花蜜吗？ '
      Course 2 Maze Loops 1: 你能用5个模块来帮我到达猪那里吗？
      Course 4 2: 蜜蜂想在只想要花蜜。记住，不是所有目标都是花，所以检查一下，只从花上采集花蜜。
      Course 4 Artist 1: '帮我画个箱子。（每条边都是200像素长） '
      Course 4 Artist 10: "点击这里再看一遍提示！\r\n\r\n这里是这个有趣的图形的代码。当你重复多次，在每次转动之间会发生什么？这样会让图形转动最多420度。这也表示当小艺术家画完后，就和刚开始时面朝不一样的方向了。新的方向正好是向右转了60度。"
      Course 4 Artist 11: 挑战来了！多试验，多试错，不要指望第一次就能完全正确。想看看更多的提示？点击这里！
      Course 4 Artist 12: "想再看一次启发人的设计或者提示吗？点击这里！\r\n\r\n除此之外，你也可以设计自己的图形！"
      Course 4 Artist 13: 还想玩？这里是一块空的画布，想画什么就画什么吧！
      Course 4 Artist 2: 你能循环这段代码来画出灰色的正方形吗？（边长是300像素）
      Course 4 Artist 20: 还想玩？这是空白的画布。想画什么就画什么吧！
      Course 4 Artist 3: 试试运行这个代码会发生什么（或者点击“运行”来测试代码）。然后，重复足够多的次数来完成这幅画。
      Course 4 Artist 4: 一个圆有多少都？将这个数字填到重复模块中来创造一个彩色的圆。
      Course 4 Artist 5: 画出另一半图形，让它对称。这是等边三角形，每条边是50像素。提示：你可能需要多运行几次代码来看看需要加上什么模块。
      Course 4 Artist 6: 完成代码来画出这些等边三角形。
      Course 4 Artist 7: '现在，把这个循环放到另一个循环里，来画出10个三角形。这就叫做嵌套循环。提示：10个三角形完成了360度的旋转。  '
      Course 4 Artist 8: 通过循环整个模块多次来画出太阳。
      Course 4 Artist 8a: 还记得这个形状吗？现在从零开始画吧！
      Course 4 Artist 9: "循环这个设计10次，并且确保在每个图形之间要转动一下。\r\n"
      Course 4 Artist Binary 1: "这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\r\n\r\n运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。"
      Course 4 Artist Binary 1a: "这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\r\n\r\n运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。"
      Course 4 Artist Binary 2: 哪个二进制字符串能让你循环8次来画出这个图像？
      Course 4 Artist Binary 3: 你能通过循环3个二进制位（0和1）来画出这个图形吗？
      Course 4 Artist Binary 4: 每个二进制字符串表达这个图形中的一行。你能重新排列他们，从而能够画出一张笑脸，而不是皱眉的脸吗？
      Course 4 Artist Binary 5: 哪个6位的二进制字符串重复11次后能够画出这个图形?
      Course 4 Artist Binary 6: 能让你重复并画出这个图形的最短的二进制字符串是什么?
      Course 4 Artist Binary 7: 完成这幅画。
      Course 4 Artist Binary Free Play 2: 自由发挥：这是一张空白的画布。尽情画吧！
      Course 4 Artist Binary Free Play 2a: "这是更高分辨率的画布 - 16像素乘以16像素！\r\n\r\n看看你用二进制位能创造出什么？"
      Course 4 Artist Binary Free Play 2b: 单击此处查看提示。
      Course 4 Artist Binary Free Play: '自由发挥: 用二进制画你喜欢的！'
      Course 4 Artist Binary pre1: 用下面的模块来让小画家在第一行画出二进制字符串“01010101”。
      Course 4 Artist Binary ryan: "二进制是只用两个选择来表达信息的方法。这里，我们会使用选项“关”（通过数字0来表达）和“开”（通过数字1来表达）。\r\n\r\n我们给你提供了一个“像素”的网格，你能穿过并将某些正方形像素设置为“开”。你能让小画家在第一行画出二进制字符串“01010101”吗？"
      Course 4 Artist For  Functions 10: 让我们再提高一点。你能用“画一个正方形线条”的函数来画一个星星吗？祝你好运！
      Course 4 Artist For  Functions 11: 让我们再提高一点。你能用“画一个正方形线条”的函数来画一个星星吗？祝你好运！
      Course 4 Artist For Loops 1: 用一个重复模块来画一个边长50像素的三角形。
      Course 4 Artist For Loops 10: 自由发挥时间！用你学会的模块画任何你想画的东西。
      Course 4 Artist For Loops 11: '还记得在前一阶段中，我们用变量来控制形状中边的数量吗？现在，我们要用“计数器”变量来做同样的事情了。这个图形从一个三角形开始，并且每次加一条边直到画出一个十边形。每条边应该是100像素长。 '
      Course 4 Artist For Loops 11a: "让我们总结一下吧！用你的“计数循环”和“计数器”的知识，来创造出每个形状都比上一个多两条边的画。确保每条边的长度都是这个多边形边的数量的10倍。\r\n\r\n这里有非常少的一些代码。"
      Course 4 Artist For Loops 12: '看起来不错，现在我想画的每个图形都和上一个挨着。这次每条边都是20像素。每次画好一个图形后，用跳跃模块来往前跳40像素。 '
      Course 4 Artist For Loops 13: 嗯，这些形状每次都变会大一点！准备好用变量来解决这个问题了吗？因为边越来越多，我们应该怎样用计数器变量来让这些边越来越短？别用设置好的变量往前移动，试试移动
        (100 除以 计数器）个像素。
      Course 4 Artist For Loops 14: 如果每次都多转或少转一些角度，那么你可以创造出来一个有规律的效果。试着重用上一关的一些代码，但是转89度来创造螺旋的正方形出来。
      Course 4 Artist For Loops 15: 自由发挥：试着用“计数循环”来画自己的画。我们也为你加了一些有用的变量。
      Course 4 Artist For Loops 2: 这里已经有代码来用计数循环画三角形了，它会从50增加到100，每次增加10。注意：在点击“运行”前，先看看代码。这样你才知道以后的关卡如何通过。
      Course 4 Artist For Loops 3: '用上一关做为参考来完成这关。最小的三角形的边长是20像素，最大的是200像素，每个三角形的边比上一个大20像素。

'
      Course 4 Artist For Loops 4: '怎样修改你学会的东西来画这些正方形？它们边长从15像素起，最大边长300像素，每个正方形的边长比上一个大15像素。 '
      Course 4 Artist For Loops 5: '上一关完成的很好！让我们再次用“计数器”变量模块画出这个很酷的图。 '
      Course 4 Artist For Loops 6: 自由发挥！试着用计数循环自己设计出一个不断增长的模式。
      Course 4 Artist For Loops 6a: 将上一关的代码做三个小小的改动来画出这个！
      Course 4 Artist For Loops 7: 如果你保持计数循环中的移动和转向模块不动，但删除掉算法中的重复3次，会发生什么? 在这个螺旋三角形中，每条边都比上一条长20像素。
      Course 4 Artist For Loops 8: "只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？\r\n\r\n提示：你需要移除某项！"
      Course 4 Artist For Loops 8a: 只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？
      Course 4 Artist For Loops 9: 你能创造一个螺旋吗？从1增加到75像素，每次增加1像素。
      Course 4 Artist For Loops Challenge: 挑战：你能想出怎样用所有你学到的知识，来创建出这个所有边长都是40像素的多边形吗？
      Course 4 Artist For Loops Challenge_a: "你能想出怎样用所有你学到的知识来创建出这幅图象吗？\r\n\r\n需要提示？点击这里。"
      Course 4 Artist For Loops inspire: "自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。\r\n\r\n需要提示？点击这里。"
      Course 4 Artist Functions 1: 你能用循环画出一个100像素长的正方形吗？
      Course 4 Artist Functions 10: 需要添加哪个模块才能在正方形上画出一个三角形？
      Course 4 Artist Functions 11: 检查一下这个画立方体的代码 - 你能将它挪到一个叫做“画立方体”的函数里吗？
      Course 4 Artist Functions 12.1: 让我们创造一个叫做“画八边形”的函数，它能画出一个每条边都是20像素长的八边形。
      Course 4 Artist Functions 12: 循环正方形函数来画出一条线。
      Course 4 Artist Functions 13.1: "现在，让我们创建一个叫做“跳到右上角”的函数，它能让小艺术家移动到刚刚画的八边形的右上角。这样我们就能完成整个图形了。\r\n\r\n提示：如果向移动到右上角，试试跳正好八边形的3/8。"
      Course 4 Artist Functions 13: 来看看新的“用正方形画线”的函数吧。可以仔细看看这个函数的内部是如何实现的。如果你准备好进入下一关了，就点击“运行”。
      Course 4 Artist Functions 14.1: 现在，让我们创建一个叫做“跳到右上角”的函数，它能让小艺术家移动到刚刚画的八边形的右上角。
      Course 4 Artist Functions 14: 做得很好！让我们用新的“用正方形画线”函数来画一个正方形。记住每个正方形的长度是40像素。
      Course 4 Artist Functions 15: 让我们提高一点难度，你能通过“用正方形画线”函数来画一个星形吗？祝你好运！提示：每次需要转144度。
      Course 4 Artist Functions 2: 你能画三个正方形，每个之间相隔20像素吗？提示：每个正方形的边长是100像素。
      Course 4 Artist Functions 3: "你能通过“画正方形”函数，来画出这个图形吗？提示：每个正方形相隔120像素。\r\n"
      Course 4 Artist Functions 4: 准备好创建你自己的函数模块了吗？点击工具箱上的“函数”模块，将它命名为“画一个三角形”，然后像你以前写好的代码一样用行动和循环创建一个三角形。然后点击右上角的保存和关闭按钮。提示：创建一个100像素长的三角形。祝你好运！
      Course 4 Artist Functions 5 OLD: 让我们试试用两个函数来画个房子——怎样才能将画房子的代码修改正确？
      Course 4 Artist Functions 5: "你能通过“画正方形”函数，来画出这个图形吗？提示：每个正方形相隔120像素。\r\n"
      Course 4 Artist Functions 6: 需要添加哪个模块才能在正方形上画出一个三角形？
      Course 4 Artist Functions 7: 你能用正方形函数来划出一条线吗？每个正方形的边是40像素。
      Course 4 Artist Functions 8: '你已经懂得怎样使用函数模块了吗？让我们改一下代码，来让它的边长是200像素。提示：点击“画一个正方形”函数的“编辑”来改变其长度。记得点击右上角的“保存并关闭”。 '
      Course 4 Artist Functions 9: 你已经有了大部分创建函数的代码了。不过这里看起来少了什么。你能完成这个函数模块吗？
      Course 4 Artist Functions Inspiration: 点击这里来再看一下提示。
      Course 4 Artist Functions challenge: 点击这里来再看一下提示。
      Course 4 Artist Functions inspire: 点击这里，再看一次激发灵感的图像。
      Course 4 Artist Inspire: "想再看一次启发人的设计或者提示吗？点击这里！\r\n\r\n除此之外，你也可以设计自己的图形！"
      Course 4 Artist Params 1: 让我们编辑一个能画正方形的函数，边长为50像素。
      Course 4 Artist Params 10: '你能用一个函数里调用其它函数！用你的“形状”函数作为基础，创建三个房子图形，第一个是50像素宽，而每个都比前一个大20像素。用一个计数循环可能会方便一些。 '
      Course 4 Artist Params 12: 用你的“玩具风车”函数来画出每个图形。每个图形的边长是50像素。
      Course 4 Artist Params 13: 自由发挥：这里除了你写的函数，还有更多的函数让你发挥。画些令人惊叹的东西吧！
      Course 4 Artist Params 3: '哇，你能用新函数来画出每个三角形吗？第一个是25像素长，第二个是50像素，第三个是75像素。 '
      Course 4 Artist Params 4: 你能添加一个叫做“正方形”的函数吗？它像三角形函数一样，有一个长度参数。这次画三个正方形，各有25，50和75像素长，并相隔100像素。
      Course 4 Artist Params 5: '用这两个新函数来画图。使用有计数器参数的循环会更容易。

'
      Course 4 Artist Params 6: '让我们编辑“画一个图形”的函数。它已经有了一个长度参数。现在，让我们编辑这个函数加一个“边数”的参数。这个图形每条边需要转的角度是360度除以边的数量。提示：每个三角形的边长为100像素，六边形边长是25像素，正方形是50像素。 '
      Course 4 Artist Params 7: '你能通过填写“???”的内容来画出这些图形吗？正方形和三角形的边长是100像素，而六边形是75像素。 '
      Course 4 Artist Params 8: '你能想出怎么画这个图形吗？提示：创建一个能画6条边的函数，并取名为“六边形”函数。

'
      Course 4 Artist Params 9: 还记得当我们用计数循环，但删除了里面的一个循环了吗？让我们做点有意思的，用有“边数”和“长度”参数的“画一个形状”的函数。你能重新创建这些形状吗？这些正方形计数应该是5/100/5，三角形的计数应该是10/100/10，六边形是2/100/2。
      Course 4 Artist Var 9: 这里是一个画三角形的算法，将他改成用“边数”变量。将数字3用“边数”变量替换掉。提示：记得用“设置边数为”模块。
      Course 4 Artist Vars 1: "让我们画一个等边三角形。\r\n\r\n它的每条边都正好一样是100像素。"
      Course 4 Artist Vars 10: 这里有个算法能在一个小一点的三角形外面再画一个三角形。你能将它改成用“边数”变量来画出每个三角形吗？浏览一下代码，每次看到数字3，就将它换成“边数”变量。记得使用“设置边数”模块。
      Course 4 Artist Vars 11: 这里有一些更复杂的代码，它也使用了一些上一关的概念 —— 你需要将“边数”变量设置成什么来画出这里的正方形？
      Course 4 Artist Vars 12: 让我们将“边数”变量设置为5. 我们会加更多的边到这个算法中，边数越大，就越能明白整个模式！注意，这里有另一个叫做长度的变量。我们能在任何“向前移动”模块中使用它，并且将长度变量设置为75。
      Course 4 Artist Vars 13: "当一个图形有很多条边时，为了让它能显示在屏幕中，要让每条边都短一些。\n\r\n让我们重新创建这个算法来得到这个神奇的图形。为了不手动输入“长度”变量，让我们将“边数”变量放到一个“数学”模块中，来确保每个图形都能显示完整。每个多边形的边长都是300像素。\r\n需要提示吗？点击这里。"
      Course 4 Artist Vars 14: "自由发挥！现在你的算法嵌套到了又一个循环中。试着改变这两个变量的值来画出很酷的图形。\r\n\r\n如果想看到更好的效果，试试使用颜色模块！在循环里面使用随机颜色，看看效果如何。"
      Course 4 Artist Vars 2: 改进“向前移动150像素”，让移动模块使用一个叫做“长度”的变量。你能将长度设置为150来重新画这个三角形吗？
      Course 4 Artist Vars 3: '这是个画正方形的循环，但是少了些什么。你能修好它，让它用长度变量并想想每条边应该是多长？ '
      Course 4 Artist Vars 4: 现在，我们来画一个高度是宽度两倍的长方形。这里有一个叫做“宽度”的变量需要设置为100。你能用“数学”模块来完成代码吗？
      Course 4 Artist Vars 5: 用“边数”变量来控制循环运行多少次。
      Course 4 Artist Vars 6: 这些代码能画任何规则的多边形。这里有个叫做“边数”的变量设置为4。不管边数是多少，你都能用“边数”变量与数学模块一起来转正确的度数吗？
      Course 4 Artist Vars 7: "用你在上一关中学到的来用边数变量创建这个六边形。\r\n\r\n看看如何就改一个值来画出一个三角形、正方形、五边形或者八边形？"
      Course 4 Artist Vars 8: 自由发挥：尝试改变这个图形的边数。你能改变算法，不管边数是多少，都让这个图形的大小基本不变吗？提示：如果你用长度除以边数，这样当边数变多的时候，每条边长会变短。
      Course 4 Artist Vars 9: 修改这个算法，让它能用边数变量，而不是一个固定的数字来画出这个三角形。别忘了用“设置边数为”模块。
      Course 4 Bee 1: "蜜蜂不知道云下面有什么！\r\n\r\n用“如果”模块来检查云下面是否有花。\r\n\r\n仅在有花时，采集一次花蜜。"
      Course 4 Bee 2: 用“如果/否则”模块来检查每个目标，看看是花还是蜂窝。如果是花，就收集花蜜，否则就酿蜂蜜！
      Course 4 Bee 3: 未知目标有可能是花或者是蜂窝。这次，用“如果/否则”模块，如果是花就收集花蜜，否则酿蜂蜜（因为它是蜂窝）。
      Course 4 Bee 4: 紫色的花可能有1个，2个或3个花蜜。这里有一个“如果/否则”模块和另一个“如果/否则”模块混合在一起，成为了一个“如果，否则如果，否则”模块。写出解答来采集未知数量的花蜜。
      Course 4 Bee 5: 紫色的花可能有1个，两个或3个花蜜。添加一个“如果/否则”模块来创建“如果，否则如果，否则”模块。写出解答来采集未知数量的花蜜。
      Course 4 Bee 6: 紫色的花可能有1个，两个或3个花蜜。创建一个““如果，否则如果，否则”模块，来采集未知数量的花蜜。
      Course 4 Bee 7: 用你学到的知识来采集所有的花蜜。紫色的花可能有紫色的花可能有1个，2个或3个花蜜。
      Course 4 Bee For Loops 1: 用循环从每朵花里采集花蜜。
      Course 4 Bee For Loops 10: 如果循环的数字是递减的，每次循环就会从计数器变量中减去增量的值。如果要收集9，然后6，3个花蜜，增量的值需要设置为多少？
      Course 4 Bee For Loops 11: 这个循环出了什么问题呢？看看您是否可以修复它，使蜜蜂采集到所有花蜜。
      Course 4 Bee For Loops 2: 这里有种新的循环，叫做“计数”循环。它的特点是循环会从1数到5，每次加1，然后每次都会运行循环里的内容。帮助蜜蜂得到花蜜。
      Course 4 Bee For Loops 3: 你能通过用计数循环从1加到3，每次加1来解决这一关。现在让我们开始采集花蜜吧！
      Course 4 Bee For Loops 4: 从这些花中采集所有花蜜。我想知道是否有更简单的方法做到这一点...
      Course 4 Bee For Loops 5: '啊哈，这个计数循环让这一关简单多了！通过计数循环里的“计数器”变量来运行同样多次数“采花蜜”模块。好多循环！所有你需要的模块都有了，想想它是怎样工作的，然后点击循环再看看结果。 '
      Course 4 Bee For Loops 6: 你也能用计数循环递减。试着通过从5到1，每次减1来递减计数收集花蜜。
      Course 4 Bee For Loops 7: 用计数循环中的计数变量来控制水平移动多远。
      Course 4 Bee For Loops 8: 你能用循环变量来控制移动并收集花蜜吗？
      Course 4 Bee For Loops 9: 计数循环里的最后一个数字叫做“增量”，每次循环时，计数器变量都要改变“增量”这么多。试着用增量2来收集花蜜。
      Course 4 Bee Loops 5 NEW: 这里有3朵花。你能找到模式，并用更少的模块重复3次来收集花蜜吗？
      Course 4 Bee Loops 5a NEW: 现在，通过循环来用最少的模块帮助蜜蜂在蜂窝的路上收集所有的花蜜。当到达蜂窝时，别忘了酿蜂蜜！
      Course 4 Bee Params 1: 写一个序列“收集3个花蜜”来转向、移动、收集花蜜，然后返回原始位置。
      Course 4 Bee Params 2: 修改“收集3个花蜜”函数，来让我向右转，而不是向左转来到达花。
      Course 4 Bee Params 3 (copy 1): 现在，两边都有花了！也许你可以用一个参数，让同一个函数对两边的花都可以使用。我已经加了一个叫做“方向”的参数到函数上。如果这个“方向”参数等于0，就会向左转，如果它等于1，就会向右转。
      Course 4 Bee Params 3: '现在，两边都有花了！这里有两个叫做“左”和“右”的变量，并且给“收集3个花蜜”的函数增加了“方向”参数。编辑“收集3个花蜜”的函数，当变量“左”或者“右”传递进函数时，让蜜蜂往正确的转向。  '
      Course 4 Bee Params 4 (copy 1): 试着用新函数来收集花蜜。记住，0等于“左”，1等于“右”。
      Course 4 Bee Params 4 - Two WhenRun: 试着用新函数来收集所有花蜜。记住使用变量左和右。
      Course 4 Bee Params 4 backup: 如果你能用一个函数来收集所有花蜜，是否会更好？试着给你的“花蜜”函数加一个新参数来控制收集的花蜜数量。你可能也想重新命名这个函数！
      Course 4 Bee Params 4: 试着用新函数来收集所有花蜜。记住使用变量左和右。
      Course 4 Bee Params 5: 让我们从头开始，你能创建一个含有方向参数的“拿5罐花蜜”的新函数吗？
      Course 4 Bee Params 6 (copy 1): 试着用新函数来收集所有花蜜。
      Course 4 Bee Params 6: 如果你能用一个函数来收集所有花蜜，是否会更好？试着给你的“花蜜单元”函数加一个新参数来控制收集的花蜜数量。你也许也想重新命名这个函数！
      Course 4 Bee Params 7 (copy 1): 试着用新函数来收集所有花蜜。
      Course 4 Bee Params 7: 试着用新函数来收集所有花蜜。
      Course 4 Bee Params 8 Clone 2: 噢，现在还有蜂蜜也需要处理！怎样修改函数才能让它能收集花蜜或者酿蜂蜜？
      Course 4 Bee Params 8 Clone: 噢，现在还有蜂蜜也需要处理！怎样修改函数才能让它能收集花蜜或者酿蜂蜜？
      Course 4 Bee Params 8 clone 3: 噢，现在还有蜂蜜也需要处理！怎样修改函数才能让它能收集花蜜或者酿蜂蜜？
      Course 4 Bee Params 8 new: 噢，现在还有蜂蜜也需要处理！怎样修改函数才能让它能收集花蜜或者酿蜂蜜？
      Course 4 Bee Params 8: 挑战：现在还有蜂蜜也需要处理！重写你的函数来一起使用蜂蜜数量和花蜜数量。怎样用这些数字来决定你应该做什么？
      Course 4 Bee Params Ex: 试着用新函数来收集所有花蜜。
      Course 4 Binary 1: 这里的函数使用了一个由 1 和 0组成的二进制字符串，来指导农夫从左到右，从上到下移动。当数字是0时，会让正方形打开。运行代码来看看农夫是怎样通过二进制字符串来画图的。
      Course 4 Binary 2: 什么二进制字符串在循环8次后能画出这个图？提示：数字1会填满一个坑。
      Course 4 Binary 3: 你能通过循环一个二进制字符串来画出这个模式吗？
      Course 4 Binary 5 (copy 1): 哪个二进制字符串重复10次后能画出这个图形？
      Course 4 Binary 5: 哪个二进制字符串重复10次后能画出这个图形？
      Course 4 Binary 6 (copy 1): 哪个二进制字符串重复10次后能画出这个图形？
      Course 4 Binary 6: 哪个二进制字符串重复10次后能画出这个图形？
      Course 4 Binary 7: 哪个二进制字符串重复10次后能画出这个图形？
      Course 4 Binary 8: 你能通过重复一个5位的二进制字符串来完成这个图的大部分 —— 然后还需要一个4位的数字来完成右下角。
      Course 4 EC 1a: 没有规则。没有线索。只有挑战！
      Course 4 EC 1b: 没有规则。没有线索。只有挑战！
      Course 4 EC 2a: 没有规则。没有线索。只有挑战！
      Course 4 EC 2b: 没有规则。没有线索。只有挑战！
      Course 4 EC 2c: 没有规则。没有线索。只有挑战！
      Course 4 EC 2d: 没有规则。没有线索。只有挑战！
      Course 4 EC 3: '用你在前一关学会的来画这个图！注意：如果合并了参数，代码会变得更简单。 '
      Course 4 EC 3a: "* * 极限挑战: * * 没有规则。没有线索。只有挑战！"
      Course 4 Maze 1: 帮愤怒的小鸟到那只猪那里！
      Course 4 Maze 2: 躲开TNT！
      Course 4 Maze 3: '编写程序帮愤怒的小鸟到那只猪那里！ '
      Course 4 Maze 4: 试试使用“重复”模块来用更少的模块通过这一关。
      Course 4 Maze 5: 你能用最少的模块来通过这关吗？
      Course 4 Maze 6: 你能用最少的模块来通过这关吗？
      Course 4 Play Lab For Loops 2: 这次，让我们数数从1到100的奇数。
      Course 4 Play Lab Params 1: 这里有个叫做“跳”的函数，它能让你的演员跳100像素。运行程序，用方向箭头来移动小狗，用“跳”函数来收集所有的旗帜。
      Course 4 Play Lab Params 10: "我们已为你添加了上一关的函数。\r\n\r\n用“如果”模块来编写你的游戏，当play_score(玩家分数)
        大于某个值时，调用level_up(升级) 函数。\r\n\r\n例如：“play_score” > 6\r\n\r\n玩游戏，并且达到第3级来到达下一关。 "
      Course 4 Play Lab Params 2: "现在，我们明白了有些旗帜太高了，跳不上去！让我们一起使用“上”和“下”方向键，来让我们能跳不同的高度。\r\n\r\n我们需要添加一个叫做“高度”的参数到“跳”的函数中。上方向键让小狗跳200像素，而下方向键让它只跳100像素。\n"
      Course 4 Play Lab Params 3: '我们已经给“跳”函数添加了另一个参数，因此它可以用在别的演员上了。每个演员都有一个编号，编号从1开始。编辑“跳”函数来使用“演员”参数，使它能够让正确的演员跳起来。 '
      Course 4 Play Lab Params 4: "这里有个函数叫做`巡逻`。\r\n\r\n编辑`巡逻`来让猫向上移动400像素，再向下移动400像素。"
      Course 4 Play Lab Params 5: 编辑“巡逻”函数来添加一个“演员”参数，由此调用它时，能让屏幕上每个演员都动起来。记住，演员对应到数字1和2，3上。
      Course 4 Play Lab Params 6: 添加另一个叫做“速度”的参数到“巡逻”函数里。试着在“设置速度”模块中使用新的“速度”参数，来帮助企鹅在别的小动物之前得到所有旗帜。
      Course 4 Play Lab Params 7: "来点好玩的！看看这里的代码，是否你能明白每个模块都做了什么。\r\n\r\n看完以后，用方向键来让小狗收集到所有旗帜。\r\n注意：你不必改动代码。"
      Course 4 Play Lab Params 8: 在小狗碰到任何一个演员时，用“当演员碰到”模块来把小狗送回左上角。
      Course 4 Play Lab Params 9: "这是一个早先的游戏，但是大部分代码都隐藏了。这里有个新函数叫做“score_points”（得分）。\r\n\r\n编辑这个函数，使得“points”（分数）参数能加到“player_score”（玩家分数）变量上。\n\r\n\r\n“player_score”（玩家分数）变量会在每次小狗的馅饼碰到小猫时增加，在小猫的三明治碰到小狗时减少。\r\n\r\n注意：当你完成后，点击“运行”来玩玩。当小狗得到6分时，就可以进入下一关。 "
      Course 4 Play Lab Vars 1: 这次你不需要写任何代码，点击“运行”来玩游戏吧！在这个游戏里，你会扮演小狗，要比小猫收集到更多的旗帜。用下方向键来控制小狗。当你玩完以后，点击“完成”。
      Course 4 Play Lab Vars 2: 最后关卡中的比赛不是很公平! 更改`dog_speed`（狗_速度）变量以确保你可以收集比猫更多的旗子。第一个收集到10面旗子的赢！
      Course 4 Play Lab Vars 3: 用左右方向键来移动，上方向键跳跃。看看你能否收集到所有的旗帜。
      Course 4 Play Lab Vars 4: 现在，我们用一个叫做“高度”的变量来控制小狗能跳多高。修改“高度”变量，让小狗能跳足够高，得到所有旗帜。
      Course 4 Play Lab Vars 5: '让我们编写一个游戏！首先我们需要一个分数。重新构造代码来做出像上一关的分数，并且设置为10分。 '
      Course 4 Play Lab Vars 6 (copy 1): 酷，现在我们已经有了分数变量了，但我们怎么能让它有用呢？如果每次用火球击中敌人就加分如何？使用"当演员2碰到任何东西"事件，这样当火球碰到小猫时，就会触发分数的更新。你可以通过设置分数=分数+1来增加分数。到达10分（一次得一分！）就能通过这关。
      Course 4 Play Lab Vars 6: "用右方向键来发射馅饼。\r\n\r\n在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用\"points
        = points + 1\"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。"
      Course 4 Play Lab Vars 7: 很好, 现在让我们来确保这个游戏不是太容易。任何时间狗 (演员 1) 被从猫（演员2）的三明治击中,
        将失去一分。从10分开始那样就不难了。让你的分数从10下降到 0来通过此关卡。
      Course 4 Play Lab Vars 8 (copy 1): 好吧，这个游戏的最后一件事 —— 让我们调整它能让玩家赢或者输。用一个无限循环来检查分数的值，如果分数大于20，让敌人消失。如果分数小于0，让玩家消失。当游戏和你想的一样时，点击“完成”。
      Course 4 Play Lab Vars 8: 让我们改一下游戏，能让小狗赢或者输。用一个无限循环来检查分数的值，如果分数大于20，让敌人（小猫）消失。如果分数小于0，让玩家（小狗）消失。当游戏和你想的一样时，点击“完成”。
      Course 4 Play Lab Vars 9: "自由发挥时间! 下面是我们在这个阶段所玩过的所有变量, 以及一些你可能需要的额外变量。\r\n\r\n注意到我们的工具箱中现在有这么多的模块,
        它们需要整理! 在这里, 我们把每一块放到一个合适的类别中。花些时间去探索所有可用的东西。完成浏览后, 使用重复，变量和事件来制作游戏或故事。 \r\n\r\n提示:
        向下滚动来查看工作区中的所有指令。"
      Course 4 Play Lab Vars: 好吧，这个游戏的最后一件事 —— 让我们调整它能让玩家赢或者输。用一个无限循环来检查分数的值，如果分数大于20，让敌人消失。如果分数小于0，让玩家消失。
      Course 4 Play Labs For Loops 1: 让小狗说出从1到100的所有数字。用一个计数循环和一个计数器模块来让小狗在每次循环时说出计数器变量。
      Course 4 Play Labs For Loops 2: 这一次，帮助奥利弗猫数一数从1到101的奇数。
      Course 4 Play Labs For Loops 3: 如果我们数大一点的数，也能在相同次数内完成它。试着让小狗从10数到1000，每次增加10。
      Course 4 Play Labs For Loops 4: 改变每次增加的值会有帮助，但我们一直是线性计数（每次改变的数量都和上次一样）。如果我想用指数计数呢？不用改变计数循环的设置，你能按照1，4，9，16，25...
        计数吗（按照平方计数）？
      Course 4 Play Labs For Loops 4a: "现在，让我们将一些第7关中的变量和“计数器”变量混合起来制造一些神奇的变化。\r\n\r\n在这一关中，小狗通过“increment”（增加）来从0到1000计数。在代码最开始处，将“increment”设置为10，看看会发生什么。"
      Course 4 Play Labs For Loops 5: 在上一关中，我们按照每个数的平方计数了。试试将“counter ^ 2”（计数器的2次方）改为“counter
        ^ 3”（计数器的3次方）来按照每个数的立方来计数。（1，8，27，64，125，216，343...）
      Course 4 Play Labs For Loops 6: 你也许知道质数是指的一个数只能被它自己自己和1整除。用“is_prime”（是否质数）函数来只说出1到100的质数。
      Course 4 Play Labs For Loops 6a: "小狗一直按照计数循环中的增量来按时计数。但这次，我们要将巫师混合进来。你能改变代码，在巫师被点击的时候，让“increment”（增量）每次增加2吗？\r\n\r\n小心！巫师移动得很快！"
      Course 4 Play Labs For Loops 7: 你用用计数循环帮我说出序列1，4，7，10，13，16，19，22，25吗？
      Course 4 Play Labs For Loops 7a: "现在我们有所进展了！开始计数后，在小狗数到30前，我们需要点击多少次巫师？\r\n\r\n添加模块到巫师上，让每次它被点击时，“clicked”（被点击）变量增加1。现在你可以忽略“increment”（增量）变量了。\r\n\r\n小狗会在你点击运行后开始数数。"
      Course 4 Play Labs For Loops 8: "现在帮助演员们按照计数来移动。\r\n\r\n小狗每次按照增加2（counter +
        2）来移动和计数。小猫每次按照乘以2（counter * 2）来移动和计数。企鹅按照指数2（counter ^ 2）来移动和计数。谁会第一个到达旗帜？"
      Course 4 Play Labs For Loops 8a: "要完成这个游戏，需要拿回“increment”（增量）变量！让我们将它设置到游戏级别上。\r\n\r\n1)
        记录巫师被点击的次数。\r\n2) 如果巫师在小狗数到30前，巫师被点击了至少10次，就将“increment”（增量）增加1，并重新开始。\r\n3)
        如果巫师没有被点击10次，游戏就结束。"
      Course 4 Playlab For Loop Freeplay: 自由发挥：使用到目前为止你已经学会的一切制作一个游戏，包括“计数”循环。
      Course 4 Playlab For Loops 4b: 你能尝试修改他们其中一个循环的**增量**，使他们能同时到达终点吗？
      Course 4 Playlab For Loops 5b: 调整计数循坏的间隔，以便这两个角色到达完全相同的位置。
      Course 4 Playlab For Loops 6b: "请尝试修改计数循环来编一个好玩的游戏吧！\r\n按“运行”后，快速点击独角兽来得分。你能超过我的成绩（24分）吗？ "
      Course 4 SCF 1: 用提供的函数来画四行六边形。要注意是怎样让偶数行转移到右边的？
      Course 4 SCF 1a: 你能想出怎么用最少的模块收集到所有花蜜吗？
      Course 4 SCF 1b: 你能想出怎么用最少的模块收集到所有花蜜吗？
      Course 4 SCF 2: '用你在前一关学会的来画这个图！注意：如果合并了参数，代码会变得更简单。 '
      Course 4 SCF 3 Fail 1: 你能想出怎样...
      Course 4 SCF 3 Fail 2: 你能想出怎样...
      Course 4 SCF 3: '用你在前一关学会的来画这个图！注意：如果合并了参数，代码会变得更简单。 '
      Course 4 SCFL 1: 使用尽可能少的模块来解决这个关卡。
      Course 4 SCFL 1a: 你能用最少的模块让斯奎塔到达他的橡子吗？
      Course 4 SCFL 1b: 你能用最少的模块让斯奎塔到达他的橡子吗？
      Course 4 SCFL 2: 使用尽可能少的模块来解决这个关卡。
      Course 4 SCFL 3: 你能想出如何重新创建这幅画吗？
      Course 4 SCFL 4: 你能想出如何重新创建这幅画吗？
      Course 4 SCFL 5: 你能想出如何重新创建这幅画吗？
      Course 4 SCFL 6: 你能想出如何使用一个简单的循环来重新创建这幅画吗？
      Course 4 SCFL 7: 小艺术家想画出一些波浪！你能想出怎么重画这个图形吗？
      Course 4 SCFP 1: 创建一个函数，能够让小艺术家往前或者往后跳x像素，而且也能让他往上或者往下跳y个像素。（使用正数和负数）
      Course 4 SCV 1: 点击这里再看一遍介绍。
      Course 4 SCV 2: 点击这里再看一遍介绍。
      Course 4 SCV 3: "现在是捉人游戏！捉住小猫得2分。捉住企鹅得3分。得到10分就赢了！\r\n但是小心，当小猫和企鹅互相碰到时，他们就会把分数要回去。\r\n\r\n添加所需的模块能让这个游戏按照解说的运行。怎样让小狗能用方向键往所有方向移动？怎样在小狗捉住小猫或者企鹅时加分？怎样在小猫和企鹅碰到时扣分？"
      Course 4 SCV 4: 用最少的模块来通过这一关。
      Course 4 SCV 5: 用最少的模块来通过这一关。
      Course 4 SCV 6: 点击这里再看一遍介绍。
      Course 4 SCVP 1: 创建一个函数，能够让小艺术家往前或者往后跳x像素，而且也能让他往上或者往下跳y个像素。（使用正数和负数）
      Course 4 Variables Assessment: 你能用一个“边数”变量来画出这幅图吗？每条边应该是50像素长。
      Course E MC Conditionals1: 你可以在地底下找到最宝贵的资源，但下面很暗。请至少放上 2 根火把，并开采至少 2 块煤炭。
      Course1BeePuzzle12: 获得3个花蜜，然后酿两个蜂蜜。
      CourseD_Dance_Party_01: 将`新建`模块拖到工作区，并关联到`设置`模块。
      CourseD_Dance_Party_02: 让驼鹿在 4 个小节后做新动作！
      CourseD_Dance_Party_03: 现在让舞者在 6 个小节后开始做新动作！
      CourseD_Dance_Party_04: 为程序添加背景效果。
      CourseD_Dance_Party_05: 使用其他新模块让舞者每 2 个小节变换动作。
      CourseD_Dance_Party_06: 创建名为“backup_dancer1”的伴舞，与猫一起跳舞。
      CourseD_Dance_Party_08: 你能让两个伴舞的大小相同吗？
      CourseD_Dance_Party_09: 使用`设置色彩`模块，更改一个舞者的颜色。
      CourseD_Dance_Party_10: 使用`开始跟随`模块，让另一个舞者也对音乐做出响应。
      CourseD_Dance_Party_11: "`当按下上方向键时`模块可以在按下上方向键时运行代码。尝试让舞者在按下上方向键时快速移动。"
      CourseD_Dance_Party_11_5: 使用“所有鸭子”模块，让鸭子一起跳舞。
      CourseD_Dance_Party_11b: 让机器人在按下右方向键时“掉落”，在按下上方向键时"鼓掌"。做掉落-鼓掌舞动作要尽可能快！
      CourseD_Dance_Party_12: 随着节奏律动吧！创建自己的舞蹈，并与朋友分享。
      CourseE_HOC 2018 Level_1: 从箱子中拿出一艘船。
      CourseE_HOC 2018 Level_10: 前往海底遗迹的入口。
      CourseE_HOC 2018 Level_11: 在海底遗迹内使用海晶石制作一个导管。
      CourseE_HOC 2018 Level_2: 前往船坞的尽头。
      CourseE_HOC 2018 Level_3: 穿过开阔水域寻找鳕鱼。
      CourseE_HOC 2018 Level_4: 用循环到达海豚。
      CourseE_HOC 2018 Level_5: 探索沉船，找到箱子。
      CourseE_HOC 2018 Level_6: 穿过海冰，找到鲑鱼。
      CourseE_HOC 2018 Level_7a: 搜索水下废墟，寻找箱子。
      CourseE_HOC 2018 Level_9b: 把珊瑚当做航标，找到宝藏。
      CourseF_PlayLab_vars1: '玩这个游戏不需要写任何代码, 只要点击 "运行"! '
      CourseF_PlayLab_vars10: "自由发挥时间! 下面是我们在这个阶段所玩过的所有变量, 以及一些你可能需要的额外变量。\r\n\r\n注意到我们的工具箱中现在有这么多的模块,
        它们需要整理! 在这里, 我们把每一块放到一个合适的类别中。花些时间去探索所有可用的东西。完成浏览后, 使用重复，变量和事件来制作游戏或故事。 \r\n\r\n提示:
        向下滚动来查看工作区中的所有指令。"
      CourseF_PlayLab_vars2: 最后关卡中的比赛不是很公平! 更改`dog_speed`（狗_速度）变量以确保你可以收集比猫更多的旗子。第一个收集到10面旗子的赢！
      CourseF_PlayLab_vars3: 用左右方向键来移动，上方向键跳跃。看看你能否收集到所有的旗帜。
      CourseF_PlayLab_vars4: 现在，我们用一个叫做“高度”的变量来控制小狗能跳多高。修改“高度”变量，让小狗能跳足够高，得到所有旗帜。
      CourseF_PlayLab_vars5: '让我们编写一个游戏！首先我们需要一个分数。重新构造代码来做出像上一关的分数，并且设置为10分。 '
      CourseF_PlayLab_vars6: "用右方向键来发射馅饼。\r\n\r\n在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用\"points
        = points + 1\"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。"
      CourseF_PlayLab_vars7: "用右方向键来发射馅饼。\r\n\r\n在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用\"points
        = points + 1\"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。"
      CourseF_PlayLab_vars8: "用右方向键来发射馅饼。\r\n\r\n在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用\"points
        = points + 1\"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。"
      CourseF_PlayLab_vars9: 很好, 现在让我们来确保这个游戏不是太容易。任何时间狗 (演员 1) 被从猫（演员2）的三明治击中, 将失去一分。从10分开始那样就不难了。让你的分数从10下降到
        0来通过此关卡。
      Crack Random Substitution: 说明
      Crack Random Substitution_2018: 说明
      Crack Random Substitution_2019: 说明
      Crack a Caesar Cipher: 说明
      Crack a Caesar Cipher_2018: 说明
      Crack a Caesar Cipher_2019: 说明
      D_Frozen_nested3: 让我们旋转那个形状的线吧!
      D_Frozen_nested4: 是时候把这些形状分层了!
      D_Frozen_nested5: 玩一玩雪花功能!
      D_Frozen_nested6: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      D_Frozen_nested7: 现在，转180度，再次绘制楼梯图案!
      D_Frozen_nested8: 在一个圆圈内旋转该形状大约5或6次。
      D_Frozen_nested9: "试着改动一下你所创造的东西。画任何你喜欢的东西! \r\n- 如果你在台阶上使用两个不同的角度, 会发生什么？\r\n-
        如果你把你的钻石图案变长或变短, 会发生什么？\r\n- 如果把两片雪花叠起来是什么样的？"
      Dance Party 1-validated: '当点击这个外星人的时候, 你认为会发生什么？  '
      Dance Party 1-validated_2019: '当点击这个外星人的时候, 你认为会发生什么？  '
      Dance Party 1-validated_simple: '当点击这个外星人的时候, 你认为会发生什么？  '
      Dance Party 2: 改变 `___ begins ___` 模块内的行为, 使外星人开始旋转。
      Dance Party 2_2019: 改变 `___ begins ___` 模块内的行为, 使外星人开始旋转。
      Dance Party 2_simple: 改变 `___ begins ___` 模块内的行为, 使外星人开始旋转。
      Dance Party 3 - Validated: '先创造一个叫`外星人2`的图形，然后让它在被点击时完成一个新的舞步。  '
      Dance Party 3 Ram: 当按向上箭头的时候让精灵做一些不同的事情。
      Dance Party 3: '先创造一个叫`外星人2`的图形，然后让它在被点击时完成一个新的舞步。  '
      Dance Party 3_2019: '先创造一个叫`外星人2`的图形，然后让它在被点击时完成一个新的舞步。  '
      Dance Party 3_simple: '先创造一个叫`外星人2`的图形，然后让它在被点击时完成一个新的舞步。  '
      Dance Party 4 Validated: '创建一个名为 `alien3` 的第三个精灵, 并让所有的外星人站在一条线上。 '
      Dance Party 4: '创建一个名为 `alien3` 的第三个精灵, 并让所有的外星人站在一条线上。 '
      Dance Party 4_2019: '创建一个名为 `alien3` 的第三个精灵, 并让所有的外星人站在一条线上。 '
      Dance Party 4_simple: '创建一个名为 `alien3` 的第三个精灵, 并让所有的外星人站在一条线上。 '
      Dance Party 5 - Validated: 添加代码以在单击时更改每个外星人的颜色。
      Dance Party 5: 添加代码以在单击时更改每个外星人的颜色。
      Dance Party 5_2019: 添加代码以在单击时更改每个外星人的颜色。
      Dance Party 5_simple: 添加代码以在单击时更改每个外星人的颜色。
      Dance Party 6 - Validated: 这些外星人太调皮了！使用`停止所有`模块，在点击时让每个外星人都停下来。
      Dance Party 6: 这些外星人太调皮了！使用`停止所有`模块，在点击时让每个外星人都停下来。
      Dance Party 6_2019: 这些外星人太调皮了！使用`停止所有`模块，在点击时让每个外星人都停下来。
      Dance Party 6_simple: 这些外星人太调皮了！使用`停止所有`模块，在点击时让每个外星人都停下来。
      Dance Party 7 - Validated: 添加一个样子是钟，名字叫 `myBell` 的精灵, 功能是在被点击时使所有的外星人开始跳同样的舞蹈。
      Dance Party 7: 添加一个样子是钟，名字叫 `myBell` 的精灵, 功能是在被点击时使所有的外星人开始跳同样的舞蹈。
      Dance Party 7_2019: 添加一个样子是钟，名字叫 `myBell` 的精灵, 功能是在被点击时使所有的外星人开始跳同样的舞蹈。
      Dance Party 7_simple: 添加一个样子是钟，名字叫 `myBell` 的精灵, 功能是在被点击时使所有的外星人开始跳同样的舞蹈。
      Dance Party Freeplay: 现在来一段你自创的外星迪斯科吧！
      Dance Party Freeplay_2019: 现在来一段你自创的外星迪斯科吧！
      Dance Party Freeplay_simple: 现在来一段你自创的外星迪斯科吧！
      Dance Party Predict: '当点击这个外星人的时候, 你认为会发生什么？  '
      Dance Party Predict_2019: '当点击这个外星人的时候, 你认为会发生什么？  '
      Dance Party Predict_simple: '当点击这个外星人的时候, 你认为会发生什么？  '
      Dance_Party_01: 将`新建`模块拖到工作区，并关联到`设置`模块。
      Dance_Party_01_low: 将`新建`模块拖到工作区，并关联到`设置`模块。
      Dance_Party_02: 让驼鹿在 4 个小节后做新动作！
      Dance_Party_03: 现在让舞者在 6 个小节后开始做新动作！
      Dance_Party_04: 为程序添加背景效果。
      Dance_Party_05: 使用其他新模块让舞者每 2 个小节变换动作。
      Dance_Party_06: 创建名为“backup_dancer1”的伴舞，与猫一起跳舞。
      Dance_Party_08: 你能让两个伴舞的大小相同吗？
      Dance_Party_09: 使用`设置色彩`模块，更改一个舞者的颜色。
      Dance_Party_10: 使用`开始跟随`模块，让另一个舞者也对音乐做出响应。
      Dance_Party_11.5_test: 使用“所有鸭子”模块，让鸭子一起跳舞。
      Dance_Party_11: "`当按下上方向键时`模块可以在按下上方向键时运行代码。尝试让舞者在按下上方向键时快速移动。"
      Dance_Party_11_5: 使用“所有鸭子”模块，让鸭子一起跳舞。
      Dance_Party_11b: 让机器人在按下右方向键时“掉落”，在按下上方向键时"鼓掌"。做掉落-鼓掌舞动作要尽可能快！
      Dance_Party_12: 随着节奏律动吧！创建自己的舞蹈，并与朋友分享。
      Eval Free Play: 自由发挥： 用代码来创造艺术吧！
      Eval Strings Images .1: 到目前为止我们仅处理单一类型的数据，就是数字。 另一种数据类型是字符串，它可以是字母、 数字或其他用引号引起来的字符的任意组合。运行字符串"你好,
        世界！"，看看会发生什么。
      Farmer for Authored Hint testing: 哇，我发现一个很深的坑！我不知道要多少铲土才能填满它。你能写一个程序填充它，直到它和地面一样平吗？提示：这次应该用当循环。
      Farmer for TTS testing: 哇，我发现一个很深的坑！我不知道要多少铲土才能填满它。你能写一个程序填充它，直到它和地面一样平吗？提示：这次应该用当循环。
      Find the Wizard: 随便创造一个东西。这是一个猜数游戏的例子！
      Find the Wizard_2018: 随便创造一个东西。这是一个猜数游戏的例子！
      Fish Tank 2-validated: 改变达斯汀（风滚草）为鱼。
      Fish Tank 2-validated_2019: 改变达斯汀（风滚草）为鱼。
      Fish Tank 2-validated_simple: 改变达斯汀（风滚草）为鱼。
      Fish Tank 3-validated Ram: 改动一下鱼的行为，让它沿着水缸边缘游。
      Fish Tank 3-validated: 改动一下鱼的行为，让它沿着水缸边缘游。
      Fish Tank 3-validated_2019: 改动一下鱼的行为，让它沿着水缸边缘游。
      Fish Tank 3-validated_simple: 改动一下鱼的行为，让它沿着水缸边缘游。
      Fish Tank 4-validated: 加入`"background-color"`（背景颜色）模块将背景改为蓝色。
      Fish Tank 4-validated_2019: 加入`"background-color"`（背景颜色）模块将背景改为蓝色。
      Fish Tank 4-validated_simple: 加入`"background-color"`（背景颜色）模块将背景改为蓝色。
      Fish Tank 5-validated: 鱼有些孤单。在鱼缸内创造一个新的精灵。
      Fish Tank 5-validated_2019: 鱼有些孤单。在鱼缸内创造一个新的精灵。
      Fish Tank 5-validated_2019_implicitGroupTest: 鱼有些孤单。在鱼缸内创造一个新的精灵。
      Fish Tank 5-validated_simple: 鱼想要一个朋友。  添加新的精灵。
      Fish Tank 6-validated: 给鱼的新朋友添加一种新行为。
      Fish Tank 6-validated_2019: 给鱼的新朋友添加一种新行为。
      Fish Tank 6-validated_simple: 给鱼的新朋友添加一种新行为。
      Fish Tank 7-validated: 使用一些新的模块让鱼缸变得与众不同！
      Fish Tank 7-validated_2019: 使用一些新的模块让鱼缸变得与众不同！
      Fish Tank 7-validated_simple: 使用一些新的模块让鱼缸变得与众不同！
      Food Fight!: "我们已为你添加了上一关的函数。\r\n\r\n用“如果”模块来编写你的游戏，当play_score(玩家分数) 大于某个值时，调用level_up(升级)
        函数。\r\n\r\n例如：“play_score” > 6\r\n\r\n玩游戏，并且达到第3级来到达下一关。 "
      FoodFight: 这是一个可以在游戏实验室里玩的游戏的示例。
      FoodFight_2018: 这是一个可以在游戏实验室里玩的游戏的示例。
      Function intro Ryan: 使用"建造桥梁"功能两次，制造一条通往红石火把的路径。
      Function intro Ryan_2019: 使用"建造桥梁"功能两次，制造一条通往红石火把的路径。
      GLJ Drag and fall: 柯基犬是个好孩子！作为特殊的款待，拖出这个胡萝卜给它。
      GLJ Dragity: 柯基犬是个好孩子！作为特殊的款待，拖出这个胡萝卜给它。
      GLJ Flappy2: 点击来拍翅膀 - 别碰到地面！
      GLJr_Behavior_1: 在你的工作表上，写下当你点击"运行"时，你认为小狗会做什么。
      GLJr_Behavior_2: 现在，你有了些新模块！试一试，看看它们有什么用。在你的工作表上，写下你试过哪些，以及它们能做什么。
      GLJr_Behavior_5: 现在，我们有了两个精灵！用行为来让小狗紧张，并让小猫漫步。
      GLJr_Behavior_6: 让我们试试更多的行为 - 让小狗向上跑，小猫向右跑。
      GLJr_Forever_1: 在你的工作表上，写下当你点击"运行"时，你认为小狗会做什么。
      GLJr_Forever_2: 现在，你有了些新模块！试一试，看看它们有什么用。在你的工作表上，写下你试过哪些，以及它们能做什么。
      GLJr_Forever_5: 现在，我们有了两个精灵！用循环来让小狗紧张，并让小猫漫步。
      'Game Lab Workshop: Random': 选取形状块并使用调用 randomNumber () 随机数函数代替一个或多个参数。确定你多次运行了它，以便看到随机化的效果。
      Geometric Pattern: 项目创意：使用例如形状的几何概念来创建图案。这需要坚持和计划！
      Geometric Sun: 项目创意：使用例如形状的几何概念来创建图案。这需要坚持和计划！
      Geometric Sun_2018: 项目创意：使用例如形状的几何概念来创建图案。这需要坚持和计划！
      Geometric Sun_2019: 项目创意：使用例如形状的几何概念来创建图案。这需要坚持和计划！
      Get To The Goal: 随便创造一个东西。这是一个猜数游戏的例子！
      'Grade 4 Example PlayLab Project #1': 仔细瞧瞧这个项目，你知道它是怎么做出来的了吗？
      'Grade 4 Example PlayLab Project #2': 仔细瞧瞧这个项目，你知道它是怎么做出来的了吗？
      Guess The Number 2: 随便创造一个东西。这是一个猜数游戏的例子！
      Guess The Number: 随便创造一个东西。这是一个猜数游戏的例子！
      Guess The Number_2018: 随便创造一个东西。这是一个猜数游戏的例子！
      HOC 2018 Level_1: 从箱子中拿出一艘船。
      HOC 2018 Level_10: 前往海底遗迹的入口。
      HOC 2018 Level_11: 在海底遗迹内使用海晶石制作一个导管。
      HOC 2018 Level_12: '设计自己的水下世界，由你决定！  '
      HOC 2018 Level_2: 前往船坞的尽头。
      HOC 2018 Level_3: 穿过开阔水域寻找鳕鱼。
      HOC 2018 Level_4: 用循环到达海豚。
      HOC 2018 Level_5: 探索沉船，找到箱子。
      HOC 2018 Level_6: 穿过海冰，找到鲑鱼。
      HOC 2018 Level_7a: 搜索水下废墟，寻找箱子。
      HOC 2018 Level_9b: 把珊瑚当做航标，找到宝藏。
      HoCAB_labyrinth1: 使用箭头模块来解决这个迷宫!
      Infinity_catch: 你能用方向键让爱莎（演员2）追上安娜吗？
      Infinity_finale: 创建并分享你想的任何东西！
      Infinity_move_collide: 阿宽是演员1。让他向右走到大白那里，当他们碰到一起时播放声音。
      Infinity_move_directions: 大白是演员2。添加移动模块，然后用方向键移动大白。让他到达另外两个演员那里。
      Infinity_move_right: 阿宽是演员1。让他移动到大白那里。
      Infinity_repeat: 用“一直重复”模块让安娜不停上下移动400像素。
      Infinity_say: 使用“说”模块让安娜说“你好”。
      Infinity_shoot: 大白是“演员2”。让大白向阿宽扔一枚火箭。
      Infinity_shoot_directions: 阿宽是“演员3”。让阿宽向这4个演员都扔一枚火箭。每次扔火箭之间等1秒。
      Infinity_test: 这是一个测试用的无尽关卡。
      Infinity_touch_faster: 接触更多的雪花！
      Infinity_touch_four: 让安娜上、下、左、右移动来碰到这4朵雪花。
      Infinity_touch_score: 当安娜碰到一片雪花时，就得一分。然后点击“运行”后控制她碰一下每片雪花。
      Inspirational Artwork: '自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 '
      InspirationalArtwork: 如果这张照片启发了你，试着做一些类似的东西。否则。也可以创建你自己的东西。
      InspirationalArtwork_2018: 如果这张照片启发了你，试着做一些类似的东西。否则。也可以创建你自己的东西。
      InspirationalArtwork_2019: 如果这张照片启发了你，试着做一些类似的东西。否则。也可以创建你自己的东西。
      K-1 Artist 1 Assessment 1: 往上画一条短线，然后往右画一条长线。
      K-1 Artist Loops 1: 向东移动4次来画出这条线。
      K-1 Artist Loops 2: 现在，用循环来画出同样的线。
      K-1 Artist Loops 3: 你能循环这些模块画出6条线吗？
      K-1 Artist Loops 4: 你能用循环帮我们画出城堡顶吗？
      K-1 Artist Loops 5: 将哪些模块重复4次能画出这些楼梯？
      K-1 Artist Loops 6: 这个需要两个循环：一个用来画向上的楼梯，另一个用来画向下的楼梯。
      K-1 Artist Loops 7: 循环可以帮助你完成这个图形。
      K-1 Artist Loops 8: 这个楼梯比较长。
      K-1 Artist Loops 9: 用什么方法来画这些楼梯最容易？
      K-1 Artist Loops Free Play: 自由发挥，画一些有趣的东西！
      K-1 Artist1 1: 用一行来画这个人的脚。
      K-1 Artist1 10: 用“画”和“跳”来画出到宝藏X的虚线。
      K-1 Artist1 2: 用两行来画出小猫的胡须。
      K-1 Artist1 3: 画两条向东和两条向北的线来完成这个房子！
      K-1 Artist1 4: 画出上下左右的线来完成这个城堡！
      K-1 Artist1 5.5: 用短线完成城堡的第三个塔。
      K-1 Artist1 5: 用两条线画这个花的茎。
      K-1 Artist1 6: 用“跳”模块来完成这幅画！
      K-1 Artist1 7: 用跳模块来移动，但不画线。跳起来，然后画一条线。
      K-1 Artist1 8: 用“跳”和“画”模块来画虚线。
      K-1 Artist1 9: 用跳和画来画出虚线。
      K-1 Artist1 Assessment 1: 画出短的和长的线！
      K-1 Artist1 Assessment 2: 画出短的虚线！
      K-1 Artist2 1: 在三角形下方画一个正方形。
      K-1 Artist2 2: 跳到房子旁边并画出一个正方形。
      K-1 Artist2 3: 在正方形上画出另一个正方形。
      K-1 Artist2 4: 画一个长方形来完成这座桥。
      K-1 Artist2 5: 画一个长方形来完成这个桥的支柱。
      K-1 Artist2 6: 画两个正方形来形成一个长方形！
      K-1 Artist2 Assessment1: 评估：在正方形旁边再画一个正方形。
      K-1 Artist2 Free Draw: 随便画些什么！
      K-1 Artist2_7: 画一个矩形来给梳妆台最上面装上一个抽屉！
      K-1 Bee 1: 将我移动到花那里，采花蜜，然后移动到蜂窝那里酿蜂蜜。
      K-1 Bee 10: 获得4个花蜜，然后酿两个蜂蜜。
      K-1 Bee 11.5: 获得4个花蜜，然后酿4个蜂蜜！
      K-1 Bee 11: 获得3个花蜜，然后酿1个蜂蜜。
      K-1 Bee 12: 获得3个花蜜，然后酿2个蜂蜜。
      K-1 Bee 13: 获得3个花蜜，然后酿1个蜂蜜。
      K-1 Bee 14: 帮我到花蜜那里，捡起它。然后帮我到蜂窝那里，酿蜂蜜。
      K-1 Bee 15: 采两个花蜜来酿两个蜂蜜！
      K-1 Bee 2: 将我移动到花那里，采花蜜，然后移动到蜂窝那里酿蜂蜜。
      K-1 Bee 3: 将我移动到花那里，采花蜜，然后移动到蜂窝那里酿蜂蜜。
      K-1 Bee 4: 采两个花蜜，然后酿两个蜂蜜！
      K-1 Bee 5: 采3个花蜜，然后酿3个蜂蜜！
      K-1 Bee 6: 采两个花蜜，然后酿两个蜂蜜！
      K-1 Bee 7: 获得3个花蜜，然后酿2个蜂蜜。
      K-1 Bee 8: 采两个花蜜，然后酿两个蜂蜜！
      K-1 Bee 9: 采两个花蜜，然后酿两个蜂蜜！
      K-1 Bee Assessment 1: 采花蜜来酿蜂蜜！
      K-1 Bee Assessment 2: 采花蜜来酿蜂蜜！
      K-1 Bee Loops 1: 采花蜜来酿蜂蜜！
      K-1 Bee Loops 10: 采集所有的花蜜，然后酿蜂蜜。
      K-1 Bee Loops 11: 得到所有的花蜜，并且酿蜂蜜！
      K-1 Bee Loops 12: 得到所有的花蜜，然后酿蜂蜜。
      K-1 Bee Loops 2: 用重复循环来移动，然后采花蜜，酿蜂蜜。
      K-1 Bee Loops 3: 用三个重复循环来采花蜜，酿蜂蜜！
      K-1 Bee Loops 4: 用重复循环来采花蜜，酿蜂蜜，并且移动。
      K-1 Bee Loops 5: 用重复循环来采花蜜，酿蜂蜜！
      K-1 Bee Loops 6: 用`重复`循环来采花蜜，酿蜂蜜，并且移动！
      K-1 Bee Loops 7: 采花蜜，酿蜂蜜！
      K-1 Bee Loops 8: 采花蜜，酿蜂蜜！
      K-1 Bee Loops 9: 采集所有的花蜜，然后酿蜂蜜。
      K-1 Bee Loops Assessment 1: 采集花蜜来酿蜂蜜，并且用循环来移动！
      K-1 Bee Loops Assessment 2: 用循环采集花蜜，酿蜂蜜！
      K-1 Bee Puzzle 12: 获得3个花蜜，然后酿两个蜂蜜。
      K-1 Building a Foundation Assessment: 修建一个三层的金字塔。这里没有其它方向，所以用这些模块，直到画出它！
      K-1 Maze 10: '绕过炸药，让我到达那只猪！ '
      K-1 Maze 11: 沿着道路，带我到那只猪那里。躲开炸药，否则我的羽毛会被炸飞！提示：它在我的南边。
      K-1 Maze 2: 把我移到东边到达那只猪！
      K-1 Maze 3: 把我移到南边到达那只猪！
      K-1 Maze 4: 把我移到北边到达那只猪！
      K-1 Maze 5: 把我移到东边到达那只猪！
      K-1 Maze 6: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      K-1 Maze 7: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      K-1 Maze 8: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      K-1 Maze 9: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      K-1 Maze Assessment 1: 评估——帮我到达那只猪！
      K-1 Maze Assessment 12: 评估级别
      K-1 Maze Assessment 13: 评估级别
      K-1 Maze Assessment 2: 评估——帮我到达那只猪！
      K-1 Maze Loops 1: 帮我到达那只猪。
      K-1 Maze Loops 10: 帮我到达那只猪！用“重复”循环会更简单。
      K-1 Maze Loops 11: "带我到猪那里！\r\n使用`重复`循环会更容易。"
      K-1 Maze Loops 12: 帮我到达那只猪！“重复”循环会让它更简单。
      K-1 Maze Loops 2: 使用`重复`模块，让我到达那只猪!
      K-1 Maze Loops 3: 帮我到达那只猪！一定要用重复循环。
      K-1 Maze Loops 4: 帮我到达那只猪。
      K-1 Maze Loops 5: 帮我到达那只猪！一定要用重复循环。
      K-1 Maze Loops 6: 帮我到达那只猪！一定要用重复循环。
      K-1 Maze Loops 7: 帮我到达那只猪！一定要用重复循环。
      K-1 Maze Loops 8: 使用`重复`循环，让我到达那只猪！
      K-1 Maze Loops 9: 帮我到达那只猪。
      K-1 Maze Loops Assessment 1: 看看我们学会的！用重复循环帮我到达那只猪！
      K-1 Maze Loops Assessment 2: 用重复循环来帮我到达那只猪。
      K-1 Maze Multi 14: 评估级别
      K-1 Maze Multi 15: 评估级别
      K-1 Maze Sequence Assessment 1: "让我们看看你学会了什么！\r\n往一个方向移动，然后往另一个方向移动帮我到达那只猪！"
      K-1 Maze Sequence Assessment 2: 往一个方向移动，然后往另一个方向移动帮我到达那只猪。
      K-1 Maze debug Assessment 1: 评估——通过重新排列并添加模块来调试这一关，让我到达那只猪！
      K-1 artist 1 level 10: 用“跳”和“画”模块来画虚线。
      K-1 artist 1 level 9: 用三行画出它。
      K-1 maze debug 1: 修改代码来让我到达那只猪！
      K-1 maze debug 10: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      K-1 maze debug 11: "这是一个测试！\r\n通过重新排列并改变模块来调试这一关，让我到达那只猪。"
      K-1 maze debug 2: 想想这里缺了什么，然后添加模块让我到达那只猪！
      K-1 maze debug 3: 有些东西不是太正确。移除某些模块来帮我到达那只猪！
      K-1 maze debug 4: 通过运行这些模块来修复它们！我想我的方向可能错了。
      K-1 maze debug 5: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      K-1 maze debug 6: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      K-1 maze debug 7: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      K-1 maze debug 8: 通过重新排列并添加模块来调试这一关，让我到达那只猪！
      K-1 maze debug 9: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      K2.0 sequence 1: 修改代码来让我到达那只猪！
      K2.0 sequence 10: 挑战：移动我绕过炸药，来到达那只猪。
      K2.0 sequence 2: 修改代码来让我到达那只猪！
      K2.0 sequence 5: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      K2.0 sequence 6: 想想这里缺了什么，然后添加模块让我到达那只猪！
      K2.0 sequence 9: '绕过炸药，让我到达那只猪！ '
      K2.0 sequence pre: 使用这些模块看你能不能让我到达猪那里！
      KIKI GLJ Test Response: "认真看看下面的代码。你觉得当点击\"运行\"时，飞机会做什么？\r\n"
      KTest2: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      Kiki_StarWars_Test_3: 文本
      Kiki_StarWars_Test_4: 文本
      Kiki_StarWars_Test_5: 文本
      Kiki_StarWars_Test_5_Example: 文本
      LaurelDebugging4Video1: 任意移动月桂树以获取尽量多的金币！
      MC Agent Freeplay: "**自由游戏时间：** 是时候自行探索了！"
      MC HOC 2016 Level 10: 现在，是制作您自己的 我的世界 的时候了！生成生物，让它们做你要它们做的事。祝您玩得愉快！
      MC HOC 2016 Level 2-2: 鸡一动不动。在`当生成时`栏中放置`移动`和`转向`方格，让它动起来。
      MC HOC 2016 Level 3: 好极了，鸡动起来了！不过她又停了。在游戏中，鸡永远走来走去。使用`永远执行`循环，让这些鸡一直走动。
      MC HOC 2016 Level 4: 现在鸡都朝同一个方向走动，显得很奇怪。游戏可利用随机移动，让事物看起来真实。让鸡`随机转向`。
      MC HOC 2016 Level 5: 这些牛迷路了！在`永远执行`循环中使用`向目标移动一步`方块，带它们找到草。
      MC HOC 2016 Level 6: 现在你来做出僵尸。使用`生成`方块，在夜晚降临时做出 3 只僵尸。让它们朝您移动。坚持存活到天明。
      MC HOC 2016 Level 8: 您去羊那里的路被一面石头墙挡住了。很走运，这儿有一只爬行者。爬行者会在您碰过它们之后爆炸。让爬行者炸掉墙壁，你才能到达羊身边！
      MC HOC 2016 New Drop: 在 我的世界 中，羊会掉落羊毛。在`当使用时`方块中放置`掉落`方块，然后走过去，让羊掉落物品。
      MC HOC 2016 New Spawn: 在游戏中，生成表示添加一些事物到世界里。在`当运行时`下方放置`生成`方块，在游戏开始时生成事物。
      MC HOC 2016 New Walk: 我们来探索世界吧！用方向箭移动，按空格键或轻按游戏板使用物品。用门进入房屋。
      MC HOC 2016 SCORE LEVEL: 有的游戏会让你保留分数。跟这些铁傀儡玩捉迷藏，用`增加 1 分`方块，让您在标记它们时给自己得一分。达到五分就算赢！
      MC HOC 2016 Village Test: 哦不好！僵尸将您困在里面了！编码让铁傀儡追踪并攻击僵尸！
      MC_2017_Ryan_02: 使用循环，让特工到达压力板，帮助玩家出去。
      MC_HOC_2017 Agent Test: 单击"运行"将玩家移动到房子里的橙色方块上。
      MC_HOC_2017_01: 单击"运行"将玩家移动到房子里的橙色方块上。
      MC_HOC_2017_01_Cole: 在路上收集工具。使用方向键左右移动，取到屋里的宝箱。
      MC_HOC_2017_01_Kiki: 单击"运行"将玩家移动到房子里的橙色方块上。
      MC_HOC_2017_01_RETRY: '使代理人抵达压力板，然后按"运行"并使用方向键将玩家移出房屋以收集箱子。 '
      MC_HOC_2017_01_RETRY_2019: '使代理人抵达压力板，然后按"运行"并使用方向键将玩家移出房屋以收集箱子。 '
      MC_HOC_2017_02: 让特工到达压力板。
      MC_HOC_2017_02_Cole: '移动特工到压力板, 使{currentPlayerName} 可以到达地图。 '
      MC_HOC_2017_02_Cole_2019: '移动特工到压力板, 使{currentPlayerName} 可以到达地图。 '
      MC_HOC_2017_02_Kiki: 让特工到达压力板，并将玩家移动到橙色方块上。
      MC_HOC_2017_02_Will: 让特工到达压力板。
      MC_HOC_2017_03_Cole: '编码让特工可以打开大门 '
      MC_HOC_2017_03_Cole_2019: '编码让特工可以打开大门 '
      MC_HOC_2017_03_Kiki: 让特工到达压力板。
      MC_HOC_2017_04: 改动上一个关卡的循环，帮助特工找到过河的路。
      MC_HOC_2017_04POINT5_Cole: 让特工到达压力板。
      MC_HOC_2017_04POINT5_RYAN: 让特工到达压力板。
      MC_HOC_2017_04POINT5_RYAN_2019: 让特工到达压力板。
      MC_HOC_2017_04_Cole: 让特工到达压力板。
      MC_HOC_2017_04_Cole_2019: 让特工到达压力板。
      MC_HOC_2017_04_Kiki: 让特工到达压力板。
      MC_HOC_2017_05: 利用函数让特工到达压力板。
      MC_HOC_2017_05_Cole: 让玩家到铲子那里。
      MC_HOC_2017_05_Cole_2019: 让玩家到铲子那里。
      MC_HOC_2017_05_Josh: 让玩家到铲子那里。
      MC_HOC_2017_05_Kiki: 让玩家到橙色方块上。
      MC_HOC_2017_06_Cole: 完成代码，帮助特工造一座过河的桥。
      MC_HOC_2017_06_Cole_2019: 完成代码，帮助特工造一座过河的桥。
      MC_HOC_2017_06_Josh: 完成代码，帮助特工造一座过河的桥。
      MC_HOC_2017_06_Kiki: 完成代码，帮助特工造一座过河的桥。
      MC_HOC_2017_07_Cole: 摧毁冰块，让{currentPlayerName} 到达矿车。
      MC_HOC_2017_07_Cole_2019: 摧毁冰块，让{currentPlayerName} 到达矿车。
      MC_HOC_2017_07_Kiki: 使用函数清除前往橙色方块的路径。
      MC_HOC_2017_07a_Kiki: 清除前往橙色方块的路径。
      MC_HOC_2017_08_Cole: 更改给出的函数，给这个群落帮忙。
      MC_HOC_2017_08_Kiki: 为这个关卡更改函数。
      MC_HOC_2017_08_RY: 使用这些功能找到一种越过岩浆的办法。
      MC_HOC_2017_08_Will: 使用这些功能找到一种越过岩浆的办法。
      MC_HOC_2017_09_Cole: 给特工编程，让他清理玩家的路径。
      MC_HOC_2017_09_Kiki: 编程让特工可以清理角色的路径，并到达压力板
      MC_HOC_2017_10_Cole: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_Cole_old: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_Kiki: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_RETRY: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_RETRY_2019: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_RYAN: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_10_RYAN2: 创建一个函数以帮助您完成此矿车。
      MC_HOC_2017_13_Cole: "**自由游戏时间：** 是时候自行探索了！"
      MC_HOC_2017_4.5v2: 让特工到达压力板。
      MC_HOC_2017_Ali: 使用这些功能找到一种越过岩浆的办法。
      MC_HOC_2017_Ali_2019: 使用这些功能找到一种越过岩浆的办法。
      MC_HOC_2017_FP10x10: "**自由游戏时间：** 您能挑战自我并收集完当前关卡的所有钻石吗？ "
      MC_HOC_2017_FP10x10_RE: "**自由游戏时间：** 您能挑战自我并收集完当前关卡的所有钻石吗？ "
      MC_HOC_2017_FP20x20: "**自由游戏时间：** 是时候自行探索了！"
      MC_HOC_2017_FP20x20_2019: "**自由游戏时间：** 是时候自行探索了！"
      MC_HOC_2017_Ryan_03: 现在，使用循环来帮助代理人，以在水中放置方块的方式在河流上建造一座桥梁。
      MC_HOC_2017_Ryan_05: 摧毁这些仙人掌，以便让玩家抵达目标。
      MC_HOC_Kiki_02: 使代理人抵达压力板。
      Middle School Hackathon Pt 1: "（点击以查看完整的说明）"
      Middle School Hackathon Pt 2: "（点击以查看完整的说明）"
      Mike Test Bee Conditionals 1: 云朵挡住了我的视线！检查一下云下面是否有花，然后只从有花的地方收集花蜜。小心，它是能变化的！
      MikeTest1: 你会做出什么？！
      MikeTest2: 画点什么
      MikeTest3: 造点什么
      NEW Course 4 Artist Functions 1: 你能用重复循环，来画一个边长100像素的正方形吗？
      NEW Course 4 Artist Functions 10.1: 用前一关的函数来画这个图形。
      NEW Course 4 Artist Functions 10: 点击编辑来填写函数定义中的模块，从而画出一个边长40像素的正方形。
      NEW Course 4 Artist Functions 11: 现在，我们想创建一个叫做`draw a line of squares`（用正方形画一条线）的新函数，它能在一行画出6个正方形。你能通过已经有的`draw
        a square 20`（画一个边长20像素的正方形）函数来构造它吗？
      NEW Course 4 Artist Functions 12: |-
        用上一关中的`draw a line
        of squares`（用正方形画一条线）函数来画这个图形。
      NEW Course 4 Artist Functions 13: '你能通过`draw a line of squares`（用正方形画一条线）函数来画一个星形吗？  '
      NEW Course 4 Artist Functions 14: '自由游戏时间！ '
      NEW Course 4 Artist Functions 2: 你能画三个正方形，每个之间相隔20像素吗？提示：每个正方形的边长是100像素。
      NEW Course 4 Artist Functions 3: "这是一个新型的模块。它被称为 \"函数\"模块。单击 \"编辑\", 然后用绘制100像素边的正方形的代码来填充它。\r\n\r
        \n编辑完成后，单击 \"关闭\" 返回到程序中。"
      NEW Course 4 Artist Functions 4: 用`draw a square`（画一个正方形）函数来画这个图形。
      NEW Course 4 Artist Functions 5: "“画一个正方形”的函数是怎样知道要运行什么命令的呢？点击“画一个正方形”的函数的“编辑”按钮。这些在函数编辑器里定义的模块就是“画一个正方形”所需要的。当你看完后，点击“保存并关闭”，然后点击“运行”。"
      NEW Course 4 Artist Functions 6: "你能用“画正方形”函数来画出这个图形吗？提示：每个正方形相隔20像素。\r\n"
      NEW Course 4 Artist Functions 7: '你已经懂得怎样使用函数模块了吗？让我们改一下代码，来让它的边长是200像素。点击“画一个正方形”函数的“编辑”来改变其长度。记得点击右上角的“保存并关闭”。 '
      NEW Course 4 Artist Functions 8: 我们已为你创建了一个叫做"画一个三角形"的新函数。 你可以编辑这个函数来画一个边长 100
        像素的三角形吗?
      NEW Course 4 Artist Functions 9: 你能只添加一个模块来解决这个问题吗？
      NEW Course 4 Artist Functions inspire: 点击这里，再看一次激发灵感的图像。
      NEW Course 4 Artist Params 1: 让我们定义这个函数来画一个边长50像素的正方形。点击“编辑”来开始。
      NEW Course 4 Artist Params 10: '创建一个有“长度”参数的“画一个六边形”的函数。六边形的边长都是100像素。 '
      NEW Course 4 Artist Params 11: 你能想出怎样画这个图形吗？编辑这个函数来使用“边数”参数。
      NEW Course 4 Artist Params 12: 你能完成这个图形吗？所有形状的边长都是100像素。
      NEW Course 4 Artist Params 12a: 这个图形和上一个类似。你能用“计数循环”和你的函数一起来完成它吗？
      NEW Course 4 Artist Params 13: "让我们编辑这个“画一个多边形”函数。它已经有一个“边数”参数了。现在，再加一个“长度”参数。\r\n每个图形的周长是200像素。你还记得当多边形有不同数量的边时，如何让它们一样长的等式吗？"
      NEW Course 4 Artist Params 14: 编辑“画一个螺旋边缘”来使用“长度”和“边数”参数，然后重新画这些图形。
      NEW Course 4 Artist Params 15: 自由发挥：这里除了你写的函数，还有更多的函数让你发挥。画些令人惊叹的东西吧！用不同的笔宽度来看看你能画出什么不一样的图形！
      NEW Course 4 Artist Params 2: 从头开始创建一个 "绘制三角形" 函数，用它来绘制一个边长50像素的三角形。
      NEW Course 4 Artist Params 3: "现在让我们用函数来在一行里画5个三角形。每个三角形之间相隔30像素。\r\n"
      NEW Course 4 Artist Params 4: 你注意到这些函数模块有什么不同吗？点击“运行”来看看会发生什么。
      NEW Course 4 Artist Params 5: '将“长度”参数的输入模块中的“???”。这个五边形的边长是100像素。 '
      NEW Course 4 Artist Params 6: 将长度参数中的“???”换成正确的数字。正方形和三角形的边长是100像素，而六边形的边长是75像素。
      NEW Course 4 Artist Params 7: 你能完成这幅画吗？提示：每个三角形的边长比前一个多25像素。第一个三角形的边长是25像素。
      NEW Course 4 Artist Params 8: 这个三角形的代码被破坏了。你能修好这个函数，让它能画边长25，50，75像素的三角形吗？
      NEW Course 4 Artist Params 9: 点击“编辑”来填写这个“画一个正方形”函数的定义，并且加一个参数。它应该像三角形一样有一个长度参数。这次，画三个正方形，边长分别为25，50，75像素，每个相隔100像素。
      NEW Course 4 Artist Params inspire: '自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 '
      NEW Course 4 Artist Vars 1.5: '看一眼代码，你能想出“设置长度”模块和“长度”模块是怎样一起工作的吗？点击“运行”来看看它怎么起作用的。 '
      NEW Course 4 Artist Vars 12: 现在，重新创造上一关的算法，然后创造一个边长为150像素的五边形。
      NEW Course 4 Artist Vars 2.5: '看一眼代码，你能想出“设置长度”模块和“长度”模块是怎样一起工作的吗？点击“运行”来看看它怎么起作用的。 '
      NEW Course 4 Artist Vars 2: '拖拽一个数字模块到“设置长度”模块和“重复”模块中来画一个边长50像素的三角形。

'
      NEW Course 4 Artist Vars 4 5: 上一关棒极了，让我们这次用60像素的六边形再来一次。
      NEW Course 4 Artist Vars 4: "让我们再试一次！\r\n\r\n你能通过设置长度变量为60，来画出这个六边形？"
      NEW Course 4 Artist Vars 6: "通过将长度变量放到正确的地方，并设置正确的值来画出这个边长为100像素的五边形。\r\n\r\n看看怎么能只设置长度一次，而将它用到所有正确的地方？"
      NEW Course 4 Bee For Loops 1: 用循环从每朵花里采集花蜜。
      NEW Course 4 Bee For Loops 10: 用计数循环中的计数变量来控制水平移动多远。
      NEW Course 4 Bee For Loops 10a: 准备好挑战了吗？用你学会的关于循环的知识来解决这个问题。记住：你可能需要尝试很多次才能找到正确的解法。
      NEW Course 4 Bee For Loops 11: 你能用循环变量来控制移动并收集花蜜吗？
      NEW Course 4 Bee For Loops 2: 添加需要的代码来让蜜蜂收集到所有的花蜜。看看这一关需要多少代码！（我们会在下一关中学到一个更简单的办法。）
      NEW Course 4 Bee For Loops 3: '啊，“计数循环”让这个简单多了！你需要的代码都已经写好了，看一下是怎么放到一起的，然后点击“运行”看看它是怎么工作的。 '
      NEW Course 4 Bee For Loops 4 4: 现在我们需要往前移动“计数器”这么多次，然后收集“计数器”这么多次花蜜。你能用两个重复循环来解决这个挑战吗？
      NEW Course 4 Bee For Loops 4: '将计数循环中的??? 换成蜜蜂能收集的最大数量的花蜜。 '
      NEW Course 4 Bee For Loops 5 5: 你找到计数循环的窍门了吗？让我们帮助蜜蜂收集到剩下的花蜜。
      NEW Course 4 Bee For Loops 5: 你也能用计数循环递减。试着通过从5到1，每次减1来递减计数收集花蜜。
      NEW Course 4 Bee For Loops 6: 循环里的最后一个数字叫做“增量”。每次循环执行时，计数器变量都会改变“增量”这么多。试着用增量2来收集所有花蜜。
      NEW Course 4 Bee For Loops 7: "现在让我们将“计数器”变量和一个数学模块一起使用！怎样通过用“计数器”变量来使用最少的模块来游览花园呢？这次需要什么来收集3，6，9，12，15个花蜜呢？秘密就是“计数器”变量！\r\n\r\n记住：如果你的循环是递增计数的，增量就会每次加到计数器变量上。"
      NEW Course 4 Bee For Loops 8: 你已经明白了！应该递增多少来收集3，6，9，12，15个花蜜？
      NEW Course 4 Bee For Loops 9: 如果循环的数字是递减的，每次循环就会从计数器变量中减去增量的值。如果要收集15，然后12，9，6，3个花蜜，增量的值需要设置为多少？
      NEW Course 4 Bee For Loops 95: 看一下刚刚创建的“计数循环”的每个部分。能想出哪个部分需要加倍来解决这个问题呢？为什么这样就能工作呢？
      NEW Course 4 Play Lab Params 11: '自由游戏时间！可以使用工具箱里的所有模块，玩的开心！ '
      NEW Course 4 Play Lab Params 5 5: 让我们再试一次，但是帮助会更少。这次让演员巡逻需要改动什么？
      NEW Course 4 Play Lab Vars 4 5: 你认为这段代码会做什么呢？点击“运行”来看看会发生什么。
      NEW Course 4 Play Labs For Loops 7a: 用已经学会的，能在每次企鹅计数时，让恐龙往前走一步吗？
      NEW Course 4 Play Labs For Loops 8 Free Play: '自由游戏时间！可以使用工具箱里的所有模块，玩的开心！ '
      NEW Course 4 Play Labs For Loops 8a: '挑战：怎样才能使用“计数循环”来让每个演员都旋转，说他们的演员编号，然后从屏幕上消失？ '
      New Artist Project: 画些令人惊奇的东西吧！你的代码已经保存为一个项目了，你在任何时候都可以返回。
      New Basketball Project: 创建您自己的篮球游戏。您可以更改所有规则。单击完成，让朋友在手机上试试你的游戏。
      New Bounce Project: 创建您自己的弹跳游戏。您可以更改所有的视觉效果和规则。单击完成，让朋友在手机上试试你的游戏。
      New Course 4 Artist Functions Level 4: 用“画一个正方形”函数来画这个图形。
      New Gumball Project: 创建并分享你想的任何东西！
      New Ice Age Project: 创建并分享你想的任何东西！
      New Infinity Project: 创建并分享你想的任何东西！
      New Minecraft Hero Project: "**自由游戏时间：** 是时候自行探索了！"
      New Sports Project: 创建你自己的游戏！这里一切由你做主：你可以改变所有的规则，混合搭配运动，创造！当你完成后，点击“完成”来让你的朋友在他们的手机上尝试你的游戏。
      Overworld Avoid Monsters: 碰到苦力怕是个坏主意。小心避过苦力怕安全到家。
      Overworld Avoid Monsters_2018: 碰到苦力怕是个坏主意。小心避过苦力怕安全到家。
      Overworld Avoid Monsters_2019: 碰到苦力怕是个坏主意。小心避过苦力怕安全到家。
      Overworld Chop Tree - allthethings: 木材是非常重要的资源。很多东西都是由它制成的。走到树边, 用 "摧毁模块" 指令把它砍下来。
      Overworld Chop Tree: 木材是非常重要的资源。很多东西都是由它制成的。走到树边, 用 "摧毁模块" 指令把它砍下来。
      Overworld Chop Tree_2018: 木材是非常重要的资源。很多东西都是由它制成的。走到树边, 用 "摧毁模块" 指令把它砍下来。
      Overworld Chop Tree_2019: 木材是非常重要的资源。很多东西都是由它制成的。走到树边, 用 "摧毁模块" 指令把它砍下来。
      Overworld Chop Trees: 我们需要在太阳下山之前建一所房子。房子需要很多木头。砍掉所有的3棵树。
      Overworld Chop Trees_2018: 我们需要在太阳下山之前建一所房子。房子需要很多木头。砍掉所有的3棵树。
      Overworld Chop Trees_2019: 我们需要在太阳下山之前建一所房子。房子需要很多木头。砍掉所有的3棵树。
      Overworld Free Play 20x20: 恭喜！你完成了我们所有谜题！现在，快用你至今为止学会的知识，采矿、建造和创造一些独特的东西吧。
      Overworld Free Play 20x20_2018: 恭喜！你完成了我们所有谜题！现在，快用你至今为止学会的知识，采矿、建造和创造一些独特的东西吧。
      Overworld Free Play 20x20_2019: 恭喜！你完成了我们所有谜题！现在，快用你至今为止学会的知识，采矿、建造和创造一些独特的东西吧。
      Overworld House Frame Chosen: 用你喜欢的任何材料建造房子的其余部分。"重复" 指令将会派上用场。
      Overworld House Frame Chosen_2018: 用你喜欢的任何材料建造房子的其余部分。"重复" 指令将会派上用场。
      Overworld House Frame Chosen_2019: 用你喜欢的任何材料建造房子的其余部分。"重复" 指令将会派上用场。
      Overworld Move to Sheep: 添加第二个 `向前移动` 模块达到绵羊的位置。
      Overworld Move to Sheep_2018: 添加第二个 `向前移动` 模块达到绵羊的位置。
      Overworld Move to Sheep_2019: 添加第二个 `向前移动` 模块达到绵羊的位置。
      Overworld Place Wall: 每栋房子都是从墙开始的。在重复循环中放置 "放置"和 "向前移动" 指令来建造房子的第一部分。
      Overworld Place Wall_2018: 每栋房子都是从墙开始的。在重复循环中放置 "放置"和 "向前移动" 指令来建造房子的第一部分。
      Overworld Place Wall_2019: 每栋房子都是从墙开始的。在重复循环中放置 "放置"和 "向前移动" 指令来建造房子的第一部分。
      Overworld Plant Crops: 提前计划很好。在水的两边种庄稼, 这样你以后就不会挨饿了。
      Overworld Plant Crops_2018: 提前计划很好。在水的两边种庄稼, 这样你以后就不会挨饿了。
      Overworld Plant Crops_2019: 提前计划很好。在水的两边种庄稼, 这样你以后就不会挨饿了。
      Overworld Powered Minecart: 干得好! 你收集了大量的资源, 建造了一个合适的家。现在把铁轨从地图的边缘铺放到你家门口。
      Overworld Powered Minecart_2018: 干得好! 你收集了大量的资源, 建造了一个合适的家。现在把铁轨从地图的边缘铺放到你家门口。
      Overworld Powered Minecart_2019: 干得好! 你收集了大量的资源, 建造了一个合适的家。现在把铁轨从地图的边缘铺放到你家门口。
      Overworld Shear Sheep: 剪羊毛的时候到了！用 "剪" 指令从两只绵羊身上收集羊毛。
      Overworld Shear Sheep_2018: 剪羊毛的时候到了！用 "剪" 指令从两只绵羊身上收集羊毛。
      Overworld Shear Sheep_2019: 剪羊毛的时候到了！用 "剪" 指令从两只绵羊身上收集羊毛。
      PDK5 Conditionals 1: 紫色的花里可能会有一个花蜜，但也可能没有花蜜，而且你不知道哪些花有花蜜！请注意不要从没有花蜜的紫花里收集花蜜。你可以用“如果”模块来检查（花朵里的）花蜜是否等于1。
      PDK5 Functions 2: 函数能让你定义新的模块！我们将画正方形的模块挪到了一个叫做“画一个正方形”的函数里。你能用“画一个正方形”函数来画个眼镜吗？正方形间隔75像素。
      PS - test - pixelation: 通过键入0和1来完成图形X
      PS Log test - Define and use turnAround: 定义一个名为 "周转" 的函数。调用该函数, 然后向前移动。(点击查看完整说明)
      PS copy 2-3 Bee Conditionals 5: "小心不要从没有花蜜的紫花里收集花蜜。\r\n你必须先用“如果”模块来检查是否花蜜等于1。"
      PS predictive Applab level test: '这里有一些说明。 '
      Pixelation - AllTheThings 4: 这个像素级别演示了 "hide_encoding_controls" 选项的使用。 请注意,
        该级别以十六进制显示图像数据, 并且不允许您将其更改回二进制。
      Pixelation - AllTheThings 5: 此像素级别演示如何使用 "隐藏滑块" 选项。 请注意, "宽度" 和 "高度" 滑块不可用,
        并且 "宽度" 和 "高度" 栏不可编辑。
      Pixelation - Lesson 14 - Make the Letter A: 制作一个3x5的字母A。部件的设定尺寸是错误的。你的第一个任务是将第二个字节设置为5的8位二进制码：00000101。然后开始输入像素数据。
      Pixelation - Lesson 14 - Make the Letter A_2018: 制作一个3x5的字母A。部件的设定尺寸是错误的。你的第一个任务是将第二个字节设置为5的8位二进制码：00000101。然后开始输入像素数据。
      Pixelation - Lesson 14 - Make the Letter A_2019: 制作一个3x5的字母A。部件的设定尺寸是错误的。你的第一个任务是将第二个字节设置为5的8位二进制码：00000101。然后开始输入像素数据。
      Pixelation - Lesson 15 - Color Shades 4x4: 我们已经帮你创建了视频中曼蒂的4x4图像。你的任务是将12位字节的颜色填充到4x4像素网格中。要求如下：第1行
        - 红色系。第2行 - 绿色系。第3行 - 蓝色系。第4行 - 灰色系。
      Pixelation - Lesson 15 - Color Shades 4x4_2018: 我们已经帮你创建了视频中曼蒂的4x4图像。你的任务是将12位字节的颜色填充到4x4像素网格中。要求如下：第1行
        - 红色系。第2行 - 绿色系。第3行 - 蓝色系。第4行 - 灰色系。
      Pixelation - Lesson 15 - Color Shades 4x4_2019: 我们已经帮你创建了视频中曼蒂的4x4图像。你的任务是将12位字节的颜色填充到4x4像素网格中。要求如下：第1行
        - 红色系。第2行 - 绿色系。第3行 - 蓝色系。第4行 - 灰色系。
      Pixelation - Lesson 15 - Complete 3-bit color: 这是曼蒂创建的4x2的图像，但缺失了最后两个方块。请找出是哪两种颜色并编码完成该图形。
      Pixelation - Lesson 15 - Complete 3-bit color_2018: 这是曼蒂创建的4x2的图像，但缺失了最后两个方块。请找出是哪两种颜色并编码完成该图形。
      Pixelation - Lesson 15 - Complete 3-bit color_2019: 这是曼蒂创建的4x2的图像，但缺失了最后两个方块。请找出是哪两种颜色并编码完成该图形。
      Pizza on a Plate: 项目想法：创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！
      Planter Test: 帮我种田!
      Poorva copy U3L2 Using Simple Commands: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      Poorva-test: 这里是一个关卡的正常说明。这里没什么好看的。
      Project - Final Image Scroller: 更新图像滚动条以响应按钮和按键。(点击查看完整说明)
      Project - Final Image Scroller_2018: 更新图像滚动条以响应按钮和按键。(点击查看完整说明)
      Project - Final Image Scroller_2019: 更新图像滚动条以响应按钮和按键。(点击查看完整说明)
      Project - Finish your canvas app: 扩展其中一个效果的功能, 或创建一个全新的。(点击查看完整说明)
      Project - Make Your Own Clicker Game: 完成你的遥控器游戏 ！（点击查看完整的说明）
      Prompt Test: 随便创造一个东西。这是一个猜数游戏的例子！
      Quantum Bee - Ryan: 这些云正在打搅我！在这些云里，一部分有花，而另一部分没有花。我需要从这些有花的云里采集到蜂蜜。
      Quantum Bee: 紫色的花里可能会有一个花蜜，但也可能没有花蜜，而且你不知道哪些花有花蜜！请注意不要从没有花蜜的紫花里收集花蜜。你可以用“如果”模块来检查（花朵里的）花蜜是否等于1。
      Ram Spritelab Validation Test: 按上方向键
      Robot Doodle: 项目想法：创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！
      Robot Doodle_2018: 项目想法：创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！
      Robot Doodle_2019: 项目想法：创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！
      Robot Drawing: 项目想法：创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！
      Robot: 项目想法：创建一个真实世界中熟悉的事物的图片。这需要坚持和规划！
      Ryan - 4-5 Bee Conditionals 2: 蜜蜂现在只想要花蜜。不是所有的目标都是花，所以检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。
      Ryan - Bee Conditionals: 蜜蜂现在只想要花蜜。不是所有的目标都是花，所以检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。
      Ryan Doily Step 1: |-
        现在我们要分步骤来画一个小桌垫。
        首先，画一个正方形。
      Ryan Doily Step 2: |-
        现在你要把它重复旋转20次！
        那么每次转多少度，迭代20次以后能得到360度呢？
      Ryan Doily Step 3: |-
        现在你要把它重复旋转20次！
        那么每次转多少度，迭代20次以后能得到360度呢？
      Ryan Test Locked Blocks: 这里有个函数叫做“巡逻”。编辑它来让猫向上移动400像素，再向下移动400像素。
      RyanTest3: 这个级别已打开了形状转换功能! 刷新来查看不同的变量。
      Ryan_Demo: 让驼鹿在 4 个小节后做新动作！
      SG Add Subgoals practice: 尽量用简练的代码在乌龟的右前方绘制一个3x3 的网格。乌龟应该处在原来的位置, 保持原来的朝向。(点击查看完整说明)
      SG U3L03 Define and use turnAround: 定义一个名为 "周转" 的函数。调用该函数, 然后向前移动。(点击查看完整说明)
      SG U3L03 Draw a T using turnAround: 使用提供的turnAround() 来画一个加号。 (点击查看完整说明)
      SG U3L03 Three Steps: 定义一个名为 drawSide () 的函数，来画三步，并移动乌龟来为下一篇做准备 (单击查看完整说明)
      SG U3L03 draw diamond: 创建一个名为 drawDiamond () 的函数, 它利用您以前的工作来绘制完整的菱形。(点击查看完整说明)
      SG U3L06 - moveForwardwithParams: 使用单个命令将乌龟移到屏幕边缘。(点击查看完整说明)
      SG U3L06 Challenge 1 triangle: 使用乌龟命令模块的参数化版本，以100 像素为边长来创建一个三角形。(点击查看完整说明)
      SG U3L06 Challenge 2 purple square: 请阅读 penColor () 和 penWidth () 的文档, 然后再使用它们绘制蓝色正方形。
      SG U3L06 Challenge 3 fill pink: 用你喜欢的颜色填充屏幕的背景。(点击查看完整说明)
      SG U3L06 Challenge 5 overlapping circles: '创建这个图像时，只使用了dot() 和 penColor () 。但是,
        我们如何让这些圆圈变成透明的？ 如果你还没有得到提示: 请参照文档!'
      SG U3L06 Challenge 6 squiggles: '阅读 "arcLeft" 和 "arcRight" 命令的文档, 然后按所示画出曲线。

'
      SG U3L06 Challenge 7 smiley face: 使用 turnTo () 和 moveTo () 来帮助绘制笑脸。(点击查看完整说明)
      SG U3L07 - Free Play Loops and Random: 自由游戏! 使用你从循环和随机中学到的东西, 来制作你自己的小场景。祝您玩得愉快。
      SG U3L07 - allSeaGrass: 通过写循环drawAllSeagrass来添加50片海草到图像里。(点击查看完整说明)
      SG U3L07 - createTriangleParam: 定义一个参数的函数, 来匹配使用函数并完成图像。(点击查看完整说明)
      SG U3L07 - introSquare: 使用循环功能绘制正方形。然后添加另一个循环来绘制多个方块, 每一个方块旋转相同的角度。(点击查看完整说明)
      SG U3L07 - loopsWithRandom: 增加循环的数字，来用白色填满屏幕。(点击查看完整说明)
      SG U3L07 - randomSquare: 使用循环绘制图形。(点击查看完整说明)
      SG U3L07 - sunBeams: 通过在 drawAllSunbeams 函数中添加循环，来添加100束阳光到图片里。(点击查看完整说明)
      SG U3L07 - topDownDesign: 当你对这个程序的结构感到满意时, 继续下一个练习。(点击查看完整说明)
      SG U3L07 More Subgoals: 请阅读 penColor () 和 penWidth () 的文档, 然后再使用它们绘制蓝色正方形。
      SG U3L08 - fish: 添加一个参数到 drawFish, 来更改所画的鱼的大小。(点击查看完整说明)
      SG U3L08 - freePlay: 通过增加对新函数的参数调用来不断增加您的图像。（单击以查看完整的说明）
      SG U3L08 - introUnderTheSea - recovery: 在图片里再添加一条鱼, 海星, 以及海草。看一看, 但不要改变创建它们的函数。(点击查看完整说明)
      SG U3L08 - introUnderTheSea: 在图片里再添加一条鱼, 海星, 以及海草。看一看, 但不要改变创建它们的函数。(点击查看完整说明)
      SG U3L08 - randomInput: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      SG U3L08 - squareTwoParams: 调用 drawSquare () 画两个正方形。(点击查看完整说明)
      SG U3L08 comments: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      SG U3L08 how to add comments: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      SG U3L2 Using Simple Commands part 1: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      SG U3L2 Using Simple Commands: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      SG U3L2_Add-subgoals: 尽量用简练的代码在乌龟的右前方绘制一个3x3 的网格。乌龟应该处在原来的位置, 保持原来的朝向。(点击查看完整说明)
      SG U3L2_Turtle3by3Grid: 尽量用简练的代码在乌龟的右前方绘制一个3x3 的网格。乌龟应该处在原来的位置, 保持原来的朝向。(点击查看完整说明)
      SG U3L2_TurtleSquare_right: 在起始位置的右前方绘制一个正方形。(单击以显示完整说明)
      SpecialFrozenLevel: 你已经正式成为艺术大师！创建一个冬季仙境。
      Standalone_Artist_1: 欢迎小艺术家！首先，一起用“右转“块和”向前移“块来画一个简单的正方形。正方形每边的长度是100像素。
      Standalone_Artist_2: 用 120 度和 60 度的角度，再加上150像素的边来画个菱形。
      Standalone_Artist_3: 能够用100 像素的边和60的角度来绘制一个六边形吗？
      Standalone_Artist_4: 现在你已获得一个新的块——循环。它可以重复执行一连串的指令。如果你循环这些命令6次，看看会发生什么？
      Standalone_Artist_5.5: 注意：如何将画菱形的代码转换成“循环”块来精简代码。你可以通过循环整个事件12次来画一朵花。提示：在每个画菱形的循环结束后，你需要转30度，这样你就不会总是在一个地方画菱形了。
      Standalone_Artist_5: 你需要循环多少次菱形才能化成这朵花呢？
      Standalone_Artist_6: |-
        通过循环画六边形6次来创建一个图形。每次你需要转动多少度呢？
        提示：用一个圆周的度数除以循环的次数。
      Standalone_Artist_7: 函数是另一种帮助避免重复工作的编程工具。这个函数会画一朵花，因此你可以在任何想画一朵花的时候使用它。用这个和新的“跳”模块来画这些花。提示：花之间相隔150像素。
      Standalone_Artist_8: 这里有一个叫做“画一个形状”的函数，我们用它来画一个六边形。运行这个代码来看看它做了什么，然后试试用这个函数看看发生什么。你能用它找到一个能画出正方形，三角形，或者八边形的模式吗？
      Standalone_Artist_9: 现在制作任何你想要的图片吧！你设置可以从一个空函数开始，来做到你想的事！
      Standalone_Artist_v2: 欢迎小艺术家！首先，一起用“右转“块和”向前移“块来画一个简单的正方形。正方形每边的长度是100像素。
      Test embedded Blockly in instructions: "作为一个模块元素，我们需要包括一个用XML表达的，有效的模块或模块组。\r\n\r\n<xml>\r\n
        \ <block\ntype=\"draw_move_by_constant\">\r\n    <title name=\"DIR\">moveForward</title>\r\n
        \   <title\nname=\"VALUE\">100</title>\r\n  </block>\r\n</xml>\r\n\r\n我们也支持内嵌的模块化XML，例如：
        <xml><block type=\"draw_move_by_constant\"><title\nname=\"DIR\">moveForward</title><title
        name=\"VALUE\">100</title></block></xml>。\n不同点在于输入格式上，这个是一整段包括了所有内容，而前一个例子每段只包括了它自己。输出的不同也是类似的。"
      Test embedded K1 Blockly in instructions: 用三个`向西移动`模块和一个`采摘玉米`模块来通过这关。
      Test of comment block: 拖拽出你想用的子目标模块。
      Testing Quantum Farmer: "哇，瞧瞧这里！\r\n\r\n我不知道要多少铲土才能填满它。\r\n你能写一个程序用“填充”模块，直到它和地面一样平吗？
        \ "
      The Vigenere Cipher Widget: 说明
      The Vigenere Cipher Widget_2018: 说明
      The Vigenere Cipher Widget_2019: 说明
      The Vigenere Cipher: 说明
      Total Artist Clone Me: 自由发挥：这里除了你写的函数，还有更多的函数让你发挥。画些令人惊叹的东西吧！用不同的笔宽度来看看你能画出什么不一样的图形！
      U2 frequency caesar: 说明
      U2 frequency random sub: 说明
      U2 vigenere cipher: 说明
      U3 - Arrays - expressionsAsIndexes: 编写一个程序, 从数组中显示随机选择的颜色。（点击查看完整说明)
      U3 - Arrays - indexPractice: 按数字顺序将数组的内容写入屏幕。(点击查看完整说明)
      U3 - Canvas - freePlay: 扩展其中一个效果的功能, 或创建一个全新的。(点击查看完整说明)
      U3 - Design Mode 1: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      U3 - Keys - Final Image Scroller: 更新图像滚动条以响应按钮和按键。(点击查看完整说明)
      U3 - Simple Drawing - Comments: 这样做
      U3 - Simple Drawing - Ellipse and No Fill: 这样做
      U3 - Simple Drawing - Fill: 做这个
      U3 - Simple Drawing - No Fill: 这样做
      U3 - Simple Drawing - Order of Blocks: 这样做
      U3 - Simple Drawing - Oval: 做这个
      U3 - Simple Drawing - Personal Drawing: 做这个
      U3 - Simple Drawing - Rectangle Width and Height: 做这个
      U3 - Simple Drawing - Rectangle: 做这个
      U3 - Simple Drawing - Road Ellipse: 做这个
      U3 - Simple Drawing - Road Rects and Color: 做这个
      U3 - Simple Drawing - Simple Shape Drawing: 做这个
      U3 - Simple Drawing - Stroke and Stroke Weight: 这样做
      U3 - Simple Drawing - X and Y values: 做这个
      U3 - Simple Drawing - regular polygon: 这样做
      U3 - Simple Drawing - text: 做这个
      U3 - Sprites - Intro Sprites: 做这个
      U3 - Sprites and Mod - Create  and Draw Sprite: 做这个
      U3 - Sprites and Mod - Mouse Width and Height: 这样做
      U3 - Sprites and Mod - Mouse X and Y: 这样做
      U3 - Sprites and Mod - Rand Around Mouse: 这样做
      U3 - Sprites and Mod - Rand Shape Color: 做这个
      U3 - Sprites and Mod - Shape Color: 做这个
      U3 - Sprites and Mod - Wrap Many Squares: 做这个
      U3 - Sprites and Mod - X and Y Prop: 做这个
      U3 - Sprites and Mod - two sprites: 做这个
      U3 - images - bee free play: 这样做
      U3 Variables flower example: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      U3 Variables gray square: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      U3 Variables randomize your square: 试着调整petalSize（花瓣尺寸）的值几次，绘制的图形会如何变化呢？
      U3L03 Define and use turnAround: 定义一个名为 "周转" 的函数。调用该函数, 然后向前移动。(点击查看完整说明)
      U3L03 Define and use turnAround_2018: 定义一个名为 "周转" 的函数。调用该函数, 然后向前移动。(点击查看完整说明)
      U3L03 Define and use turnAround_2019: 定义一个名为 "周转" 的函数。调用该函数, 然后向前移动。(点击查看完整说明)
      U3L03 Draw a T using turnAround: 使用提供的turnAround() 来画一个加号。 (点击查看完整说明)
      U3L03 Draw a T using turnAround_2018: 使用提供的turnAround() 来画一个加号。 (点击查看完整说明)
      U3L03 Draw a T using turnAround_2019: 使用提供的turnAround() 来画一个加号。 (点击查看完整说明)
      U3L03 Three Steps: 定义一个名为 drawSide () 的函数，来画三步，并移动乌龟来为下一篇做准备 (单击查看完整说明)
      U3L03 Three Steps_2018: 定义一个名为 drawSide () 的函数，来画三步，并移动乌龟来为下一篇做准备 (单击查看完整说明)
      U3L03 Three Steps_2019: 定义一个名为 drawSide () 的函数，来画三步，并移动乌龟来为下一篇做准备 (单击查看完整说明)
      U3L03 draw diamond: 创建一个名为 drawDiamond () 的函数, 它利用您以前的工作来绘制完整的菱形。(点击查看完整说明)
      U3L03 draw diamond_2018: 创建一个名为 drawDiamond () 的函数, 它利用您以前的工作来绘制完整的菱形。(点击查看完整说明)
      U3L03 draw diamond_2019: 创建一个名为 drawDiamond () 的函数, 它利用您以前的工作来绘制完整的菱形。(点击查看完整说明)
      U3L06 - moveForwardwithParams: 使用单个命令将乌龟移到屏幕边缘。(点击查看完整说明)
      U3L06 - moveForwardwithParams_2018: 使用单个命令将乌龟移到屏幕边缘。(点击查看完整说明)
      U3L06 - moveForwardwithParams_2019: 使用单个命令将乌龟移到屏幕边缘。(点击查看完整说明)
      U3L06 Challenge 1 triangle: 使用乌龟命令模块的参数化版本，以100 像素为边长来创建一个三角形。(点击查看完整说明)
      U3L06 Challenge 1 triangle_2018: 使用乌龟命令模块的参数化版本，以100 像素为边长来创建一个三角形。(点击查看完整说明)
      U3L06 Challenge 1 triangle_2019: 使用乌龟命令模块的参数化版本，以100 像素为边长来创建一个三角形。(点击查看完整说明)
      U3L06 Challenge 2 purple square: 请阅读 penColor () 和 penWidth () 的文档, 然后再使用它们绘制蓝色正方形。
      U3L06 Challenge 2 purple square_2018: 请阅读 penColor () 和 penWidth () 的文档, 然后再使用它们绘制蓝色正方形。
      U3L06 Challenge 2 purple square_2019: 请阅读 penColor () 和 penWidth () 的文档, 然后再使用它们绘制蓝色正方形。
      U3L06 Challenge 3 fill pink: 用你喜欢的颜色填充屏幕的背景。(点击查看完整说明)
      U3L06 Challenge 3 fill pink_2018: 用你喜欢的颜色填充屏幕的背景。(点击查看完整说明)
      U3L06 Challenge 3 fill pink_2019: 用你喜欢的颜色填充屏幕的背景。(点击查看完整说明)
      U3L06 Challenge 5 overlapping circles: '创建这个图像时，只使用了dot() 和 penColor () 。但是,
        我们如何让这些圆圈变成透明的？ 如果你还没有得到提示: 请参照文档!'
      U3L06 Challenge 5 overlapping circles_2018: '创建这个图像时，只使用了dot() 和 penColor ()
        。但是, 我们如何让这些圆圈变成透明的？ 如果你还没有得到提示: 请参照文档!'
      U3L06 Challenge 5 overlapping circles_2019: '创建这个图像时，只使用了dot() 和 penColor ()
        。但是, 我们如何让这些圆圈变成透明的？ 如果你还没有得到提示: 请参照文档!'
      U3L06 Challenge 6 squiggles: '阅读 "arcLeft" 和 "arcRight" 命令的文档, 然后按所示画出曲线。

'
      U3L06 Challenge 6 squiggles_2018: '阅读 "arcLeft" 和 "arcRight" 命令的文档, 然后按所示画出曲线。

'
      U3L06 Challenge 6 squiggles_2019: '阅读 "arcLeft" 和 "arcRight" 命令的文档, 然后按所示画出曲线。

'
      U3L06 Challenge 7 smiley face: 使用 turnTo () 和 moveTo () 来帮助绘制笑脸。(点击查看完整说明)
      U3L06 Challenge 7 smiley face_2018: 使用 turnTo () 和 moveTo () 来帮助绘制笑脸。(点击查看完整说明)
      U3L06 Challenge 7 smiley face_2019: 使用 turnTo () 和 moveTo () 来帮助绘制笑脸。(点击查看完整说明)
      U3L07 - Free Play Loops and Random: 自由游戏! 使用你从循环和随机中学到的东西, 来制作你自己的小场景。祝您玩得愉快。
      U3L07 - Free Play Loops and Random_2018: 自由游戏! 使用你从循环和随机中学到的东西, 来制作你自己的小场景。祝您玩得愉快。
      U3L07 - Free Play Loops and Random_2019: 自由游戏! 使用你从循环和随机中学到的东西, 来制作你自己的小场景。祝您玩得愉快。
      U3L07 - allSeaGrass: 通过写循环drawAllSeagrass来添加50片海草到图像里。(点击查看完整说明)
      U3L07 - allSeaGrass_2018: 通过写循环drawAllSeagrass来添加50片海草到图像里。(点击查看完整说明)
      U3L07 - allSeaGrass_2019: 通过写循环drawAllSeagrass来添加50片海草到图像里。(点击查看完整说明)
      U3L07 - createTriangleParam: 定义一个参数的函数, 来匹配使用函数并完成图像。(点击查看完整说明)
      U3L07 - createTriangleParam_2018: 定义一个参数的函数, 来匹配使用函数并完成图像。(点击查看完整说明)
      U3L07 - createTriangleParam_2019: 定义一个参数的函数, 来匹配使用函数并完成图像。(点击查看完整说明)
      U3L07 - introSquare: 使用循环功能绘制正方形。然后添加另一个循环来绘制多个方块, 每一个方块旋转相同的角度。(点击查看完整说明)
      U3L07 - introSquare_2018: 使用循环功能绘制正方形。然后添加另一个循环来绘制多个方块, 每一个方块旋转相同的角度。(点击查看完整说明)
      U3L07 - introSquare_2019: 使用循环功能绘制正方形。然后添加另一个循环来绘制多个方块, 每一个方块旋转相同的角度。(点击查看完整说明)
      U3L07 - loopsWithRandom: 增加循环的数字，来用白色填满屏幕。(点击查看完整说明)
      U3L07 - loopsWithRandom_2018: 增加循环的数字，来用白色填满屏幕。(点击查看完整说明)
      U3L07 - loopsWithRandom_2019: 增加循环的数字，来用白色填满屏幕。(点击查看完整说明)
      U3L07 - randomSquare: 使用循环绘制图形。(点击查看完整说明)
      U3L07 - randomSquare_2018: 使用循环绘制图形。(点击查看完整说明)
      U3L07 - randomSquare_2019: 使用循环绘制图形。(点击查看完整说明)
      U3L07 - sunBeams: 通过在 drawAllSunbeams 函数中添加循环，来添加100束阳光到图片里。(点击查看完整说明)
      U3L07 - sunBeams_2018: 通过在 drawAllSunbeams 函数中添加循环，来添加100束阳光到图片里。(点击查看完整说明)
      U3L07 - sunBeams_2019: 通过在 drawAllSunbeams 函数中添加循环，来添加100束阳光到图片里。(点击查看完整说明)
      U3L07 - topDownDesign: 当你对这个程序的结构感到满意时, 继续下一个练习。(点击查看完整说明)
      U3L07 - topDownDesign_2018: 当你对这个程序的结构感到满意时, 继续下一个练习。(点击查看完整说明)
      U3L07 - topDownDesign_2019: 当你对这个程序的结构感到满意时, 继续下一个练习。(点击查看完整说明)
      U3L08 - fish: 添加一个参数到 drawFish, 来更改所画的鱼的大小。(点击查看完整说明)
      U3L08 - fish_2018: 添加一个参数到 drawFish, 来更改所画的鱼的大小。(点击查看完整说明)
      U3L08 - fish_2019: 添加一个参数到 drawFish, 来更改所画的鱼的大小。(点击查看完整说明)
      U3L08 - freePlay: 通过增加对新函数的参数调用来不断增加您的图像。（单击以查看完整的说明）
      U3L08 - freePlay_2018: 通过增加对新函数的参数调用来不断增加您的图像。（单击以查看完整的说明）
      U3L08 - freePlay_2019: 通过增加对新函数的参数调用来不断增加您的图像。（单击以查看完整的说明）
      U3L08 - introUnderTheSea with comments: 在图片里再添加一条鱼, 海星, 以及海草。看一看, 但不要改变创建它们的函数。(点击查看完整说明)
      U3L08 - introUnderTheSea: 在图片里再添加一条鱼, 海星, 以及海草。看一看, 但不要改变创建它们的函数。(点击查看完整说明)
      U3L08 - introUnderTheSea_2018: 在图片里再添加一条鱼, 海星, 以及海草。看一看, 但不要改变创建它们的函数。(点击查看完整说明)
      U3L08 - introUnderTheSea_2019: 在图片里再添加一条鱼, 海星, 以及海草。看一看, 但不要改变创建它们的函数。(点击查看完整说明)
      U3L08 - randomInput: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      U3L08 - randomInput_2018: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      U3L08 - randomInput_2019: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      U3L08 - squareTwoParams: 调用 drawSquare () 画两个正方形。(点击查看完整说明)
      U3L08 - squareTwoParams_2018: 调用 drawSquare () 画两个正方形。(点击查看完整说明)
      U3L08 - squareTwoParams_2019: 调用 drawSquare () 画两个正方形。(点击查看完整说明)
      U3L08 - starFish: 在图片里再添加一条鱼, 海星, 以及海草。看一看, 但不要改变创建它们的函数。(点击查看完整说明)
      U3L08 - triangleTwoParams: 调用 drawSquare () 画两个正方形。(点击查看完整说明)
      U3L08 how to add comments: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      U3L08 how to add comments_2018: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      U3L08 how to add comments_2019: 使用 randomNumber() 模块来测试您设计的随机输入的函数。(点击查看完整说明)
      U3L13 - Turtle move with button: 添加一个按钮，在点击时移动乌龟。（点击查看完整说明）
      U3L15 full clicker app: 完成你的遥控器游戏 ！（点击查看完整的说明）
      U3L2 Using Simple Commands (no tooltips): 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      U3L2 Using Simple Commands: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      U3L2 Using Simple Commands_2018: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      U3L2 Using Simple Commands_2019: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      U3L2_Turtle3by3Grid: 尽量用简练的代码在乌龟的右前方绘制一个3x3 的网格。乌龟应该处在原来的位置, 保持原来的朝向。(点击查看完整说明)
      U3L2_Turtle3by3Grid_2018: 尽量用简练的代码在乌龟的右前方绘制一个3x3 的网格。乌龟应该处在原来的位置, 保持原来的朝向。(点击查看完整说明)
      U3L2_Turtle3by3Grid_2019: 尽量用简练的代码在乌龟的右前方绘制一个3x3 的网格。乌龟应该处在原来的位置, 保持原来的朝向。(点击查看完整说明)
      U3L2_TurtleSquare_right: 在起始位置的右前方绘制一个正方形。(单击以显示完整说明)
      U3L2_TurtleSquare_right_2018: 在起始位置的右前方绘制一个正方形。(单击以显示完整说明)
      U3L2_TurtleSquare_right_2019: 在起始位置的右前方绘制一个正方形。(单击以显示完整说明)
      U4 Model App: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      U4 Model App_2018: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      U4 Model App_2019: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      U4 Model Design 1: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      U4 Model Design 1_2018: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      U4 Model Design 1_2019: 使用设计模式在屏幕上添加一个大的红色按钮。(单击以获取完整说明。）
      U4 vigenere cipher 2: 说明
      U4L02 - Objects - Template1: 模板
      U4L02 - Objects - Template1_2018: 模板
      U4L02 - Objects - Template1_2019: 模板
      Underground Avoiding Lava: 熔岩隐藏在这些模块的下面, 你需要在前进之前把它掩盖起来。"如果"指令将在这里派上用场。在正确的位置添加
        "向前移动"指令来挖掘这些模块。
      Underground Avoiding Lava_2018: 熔岩隐藏在这些模块的下面, 你需要在前进之前把它掩盖起来。"如果"指令将在这里派上用场。在正确的位置添加
        "向前移动"指令来挖掘这些模块。
      Underground Avoiding Lava_2019: 熔岩隐藏在这些模块的下面, 你需要在前进之前把它掩盖起来。"如果"指令将在这里派上用场。在正确的位置添加
        "向前移动"指令来挖掘这些模块。
      Underground If Statements: 现在事情变得越来越棘手了。挖掘3块红石, 但不要落入熔岩。使用 "如果" 指令将圆石放置在任何未掩盖的熔岩上。
      Underground If Statements_2018: 现在事情变得越来越棘手了。挖掘3块红石, 但不要落入熔岩。使用 "如果" 指令将圆石放置在任何未掩盖的熔岩上。
      Underground If Statements_2019: 现在事情变得越来越棘手了。挖掘3块红石, 但不要落入熔岩。使用 "如果" 指令将圆石放置在任何未掩盖的熔岩上。
      Underground Iron: 走进熔岩是个坏主意。放置圆石来创建一座桥梁, 然后挖掘至少两个铁模块。
      Underground Iron_2018: 走进熔岩是个坏主意。放置圆石来创建一座桥梁, 然后挖掘至少两个铁模块。
      Underground Iron_2019: 走进熔岩是个坏主意。放置圆石来创建一座桥梁, 然后挖掘至少两个铁模块。
      Underground Mining Coal: 你可以在地底下找到最宝贵的资源，但下面很暗。请至少放上 2 根火把，并开采至少 2 块煤炭。
      Underground Mining Coal_2018: 你可以在地底下找到最宝贵的资源，但下面很暗。请至少放上 2 根火把，并开采至少 2 块煤炭。
      Underground Mining Coal_2019: 你可以在地底下找到最宝贵的资源，但下面很暗。请至少放上 2 根火把，并开采至少 2 块煤炭。
      Unicorn Tag: 仔细瞧瞧这个项目，你知道它是怎么做出来的了吗？
      Valentine_artist2_01: 编辑程序让艺术家为可爱的小虫画一些草。
      Valentine_artist_01: 帮助艺术家完成大羊驼的心。
      Valentine_playlab_01: '编辑程序让Kiki（演员1）在左右箭头被按下的时候向左和向右移动。当Kiki被点击时, 她应该把心投向她的朋友们。 '
      Virtual Pet 1 Predict: '当点击这个外星人的时候, 你认为会发生什么？  '
      Virtual Pet 1 Predict_2019: '当点击这个外星人的时候, 你认为会发生什么？  '
      Virtual Pet 1 Predict_simple: '当点击这个外星人的时候, 你认为会发生什么？  '
      Virtual Pet 1 fix: 你觉得如果你按下 "运行" 然后点击她，会发生什么？
      Virtual Pet 1: 你觉得如果你按下 "运行" 然后点击她，会发生什么？
      Virtual Pet 1_simple: 你觉得如果你按下 "运行" 然后点击她，会发生什么？
      Virtual Pet 2 - Validated (Ram): 创建 **事件** 使杰拉尔丁掉到泥坑时，她的颜色变成褐色。
      Virtual Pet 2 - Validated: 创建 **事件** 使杰拉尔丁掉到泥坑时，她的颜色变成褐色。
      Virtual Pet 2: 创建 **事件** 使杰拉尔丁掉到泥坑时，她的颜色变成褐色。
      Virtual Pet 2_2019: 创建 **事件** 使杰拉尔丁掉到泥坑时，她的颜色变成褐色。
      Virtual Pet 2_simple: 创建 **事件** 使杰拉尔丁接触到土尘时, 她的颜色变成褐色。
      Virtual Pet 2_simple_clone: 创建 **事件** 使杰拉尔丁接触到土尘时, 她的颜色变成褐色。
      Virtual Pet 3: 在屏幕上添加一个肥皂。 是否能实现当长颈鹿和肥皂接触时，长颈鹿变回原有的颜色？
      Virtual Pet 3_2019: 在屏幕上添加一个肥皂。 是否能实现当长颈鹿和肥皂接触时，长颈鹿变回原有的颜色？
      Virtual Pet 3_simple: 在屏幕上添加一个肥皂。 是否能实现当长颈鹿和肥皂接触时，长颈鹿变回原有的颜色？
      Virtual Pet 4: 为肥皂添加行为使其变得可拖动，完成后拖动它来清洁长颈鹿。
      Virtual Pet 4_2019: 为肥皂添加行为使其变得可拖动，完成后拖动它来清洁长颈鹿。
      Virtual Pet 4_simple: 为肥皂添加行为使其变得可拖动，完成后拖动它来清洁长颈鹿。
      Virtual Pet 5 - Validated: 向每个事件添加动作, 使长颈鹿与每个精灵碰撞时, 它的尺寸会收缩5。
      Virtual Pet 5: 向每个事件添加动作, 使长颈鹿与每个精灵碰撞时, 它的尺寸会收缩5。
      Virtual Pet 5_2019: 向每个事件添加动作, 使长颈鹿与每个精灵碰撞时, 它的尺寸会收缩5。
      Virtual Pet 5_simple: 向每个事件添加动作, 使长颈鹿与每个精灵碰撞时, 它的尺寸会收缩5。
      Virtual Pet 6: 添加一个苹果，这个苹果可以在与长颈鹿相碰时使长颈鹿回到原来的尺寸。
      Virtual Pet 6_2019: 添加一个苹果，这个苹果可以在与长颈鹿相碰时使长颈鹿回到原来的尺寸。
      Virtual Pet 6_simple: 添加一个苹果，这个苹果可以在与长颈鹿相碰时使长颈鹿回到原来的尺寸。
      Virtual Pet Freeplay: '自由发挥：你的长颈鹿还能做些什么呢？ '
      Virtual Pet Freeplay_2019: '自由发挥：你的长颈鹿还能做些什么呢？ '
      Virtual Pet Freeplay_simple: '自由发挥：你的长颈鹿还能做些什么呢？ '
      aE3alternate: 交替
      aE3alternateB: 交替
      aE4: 交替
      aE7: "如果你创建一个和这个很像的循环，但是往左转，而不是往右转，会怎样呢？\r\n\r\n你能重复它来画出波浪吗？"
      aE8: "现在，让我们把所有东西重复4次来画出这个画框。小心转角 -- 你不能只转90度！\r\n\r\n如果转60次3度，就会创建出一个半圆，什么样的代码能创建出1/4圆的转角？"
      allHallows2017: 通过绘制一个正方形320像素的边, 在蜡笔框中框住 Code.org 员工!
      allthethings data blocks test: 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/*通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦*/)。
      allthethings design mode elements: 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/*通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦*/)。
      allthethings level dataTables: 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/*通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦*/)。
      allthethings_U3 - Simple Drawing - Rectangle Width and Height: 做这个
      allthethings_template_backed1: '备份模板#1. 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/*通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦*/)。 '
      allthethings_template_backed2: 备份模板#2. 测试应用实验室制作应用前请登录(应用实验室被设计为仅在登陆后可用。/*通常我们可以让人们自动登录，但是这个实现必须要让所有脚本都变成可强制执行的，显然对所有脚本都做一次这样的更改会很麻烦*/)。
      allthethings_ttscsf contained: 摘下所有的莴苣(只在有莴苣的时候)。
      artistDebugVideo1: 使用 "重复" 循环在水中添加波浪。
      artistFunctionsVideo1: 按照说明来做出你自己的函数
      artistLoopsK1: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      artistLoopsK2: 现在, 使用 `重复`循环来绘制这条线五次!
      artistLoopsK2gradek_artist_loops3: 现在, 使用 `重复`循环来绘制这条线五次!
      asteroids: 柯基犬是个好孩子！作为特殊的款待，拖出这个胡萝卜给它。
      beeDebugVideo1: 用一个“重复”循环来收集所有花蜜。
      behavior bash mary: 克隆这一关，并制作自己的模块！
      behaviors clone me 2: 克隆这一关，并制作自己的模块！
      behaviors clone me Ram: 克隆这一关，并制作自己的模块！
      behaviors clone me joshl: 克隆这一关，并制作自己的模块！
      behaviors clone me nk: 克隆这一关，并制作自己的模块！
      behaviors clone me tanya: 克隆这一关，并制作自己的模块！
      behaviors clone me: 克隆这一关，并制作自己的模块！
      behaviors pet test 123 copy: |-
        当黛西获得了一个胡萝卜，她会很兴奋。
        用**"当碰到"**事件和"添加行为"模块来让黛西在得到胡萝卜时做一些有趣的事情。
      behaviors pet test 123: |-
        当黛西获得了一个胡萝卜，她会很兴奋。
        用**"当碰到"**事件和"添加行为"模块来让黛西在得到胡萝卜时做一些有趣的事情。
      behaviors pet test 2: |-
        当黛西获得了一个胡萝卜，她会很兴奋。
        用**"当碰到"**事件和"添加行为"模块来让黛西在得到胡萝卜时做一些有趣的事情。
      behaviors pet test 3: "**是时候做你自己的虚拟宠物了！**\n你能为自己的宠物改变任何代码。这是一些主意：\r\n* 你能在点击宠物时，让它开始一个新行为吗？\r\n*\n你能在将吸尘器拖动到宠物那里时，让它跑掉吗？\r\n*
        你能给宠物增加别的动物朋友吗？ "
      behaviors pet test: "上次你练习了如何用\"行为\"来让精灵永远做一些事情。这次，我们会用行为来制作一个虚拟宠物。 \r\n\r\n这条狗的名字叫黛西。黛西非常喜欢胡萝卜电信。将\"拖动并放下\"行为加到胡萝卜上，这样你能将胡萝卜移动到黛西那里。"
      behaviors_caley: 克隆这一关，并制作自己的模块！
      ben's first level: 克隆这一关，并制作自己的模块！
      birdsDebugVideo1: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      bounce_1: 在“当按左方向键时”模块下面添加模块，然后按“运行”。使用左方向键来移动挡板来到达终点目标。
      bounce_10: 顶部有一个目标。添加 "得分点" 和 "得分对手点" 方块到"当球在球门" 和 "当球错过桨" 方块，来做一个游戏。看看你能在对手得分两次之前得分多少分。
      bounce_10_2018: 顶部有一个目标。添加 "得分点" 和 "得分对手点" 方块到"当球在球门" 和 "当球错过桨" 方块，来做一个游戏。看看你能在对手得分两次之前得分多少分。
      bounce_10_basketball: 现在，目标在顶部！将"得分"和"对手得分"模块附加到到“当进球得分”和"当球未命中手"块来制作游戏。看看在对手获得两分前，你可以获得多少分。
      bounce_10_sports: 现在，目标在顶部！将"得分"和"对手得分"模块附加到到“当进球得分”和"当球未命中手"模块来制作游戏。看看在对手获得两分前，你可以获得多少分。
      bounce_11: 现在，你可以在"运行时"模块下附加模块了. 你必须在多个地方附加新的"启动新球"模块. 此外，试着改变场景或球拍和球的速度，看看在你对手得两分之前你能得多少分.
      bounce_11_2018: 现在，你可以在"运行时"模块下附加模块了. 你必须在多个地方附加新的"启动新球"模块. 此外，试着改变场景或球拍和球的速度，看看在你对手得两分之前你能得多少分.
      bounce_11_basketball: 现在，你可以在"运行时"模块下附加模块了. 你必须在多个地方附加新的"扔新球"模块. 此外，试着改变场景或手和球的速度，看看在你对手得两分之前你能得多少分.
      bounce_11_sports: 现在，你可以在"运行时"模块下附加模块了. 你必须在多个地方附加新的"扔新球"模块. 此外，试着改变场景或手和球的速度，看看在你对手得两分之前你能得多少分.
      bounce_12: 创建您自己的弹跳游戏。您可以更改所有的视觉效果和规则。单击完成，让朋友在手机上试试你的游戏。
      bounce_12_2018: 创建您自己的弹跳游戏。您可以更改所有的视觉效果和规则。单击完成，让朋友在手机上试试你的游戏。
      bounce_12_basketball: 创建您自己的篮球游戏。您可以更改所有规则。单击完成，让朋友在手机上试试你的游戏。
      bounce_12_sports: 创建你自己的游戏！这里一切由你做主：你可以改变所有的规则，混合搭配运动，创造！当你完成后，点击“完成”来让你的朋友在他们的手机上尝试你的游戏。
      bounce_1_2018: 在“当按左方向键时”模块下面添加模块，然后按“运行”。使用左方向键来移动挡板来到达终点目标。
      bounce_1_basketball: 在“当按左方向键时”模块下面添加模块，然后按“运行”。使用左方向键移动手来到达终点目标。
      bounce_1_sports: 到旗帜那儿！将一个模块附加到“当按左方向键时”模块，并点按“运行”以将玩家移动到旗帜那里。
      bounce_2: 在"当按左方向键时"块和“当按右方向键时”块下面添加块，然后按"运行程序"。移动球拍到达两边的目标。
      bounce_2_2018: 在"当按左方向键时"块和“当按右方向键时”块下面添加块，然后按"运行程序"。移动球拍到达两边的目标。
      bounce_2_basketball: 在"当按左方向键时"块和“当按右方向键时”块下面添加块，然后按"运行"。移动手到达两边的目标。
      bounce_2_sports: 现在有两个旗帜了！将一个模块附加到“当按左方向键时”模块和“当按右方向键时”模块来让你的玩家向两个方向移动。
      bounce_3: 现在，尝试类似的做法用"当按上键时"块，来移动球拍到顶部目标。
      bounce_3_2018: 现在，尝试类似的做法用"当按上键时"块，来移动球拍到顶部目标。
      bounce_4: 这次你需要添加四个块。移动到所有四个球拍完成目标，以完成这个关卡。
      bounce_4_2018: 这次你需要添加四个块。移动到所有四个球拍完成目标，以完成这个关卡。
      bounce_5: 我们要将球发向球拍。将一个模块附加到"当球击中桨"模块以确保球能到达目标。
      bounce_5_2018: 我们要将球发向球拍。将一个模块附加到"当球击中桨"模块以确保球能到达目标。
      bounce_5_basketball: 我们要将球发向手。将一个模块附加到"当球击中手"模块以确保球能到达旗帜。
      bounce_5_sports: 冰球将至上而下地飞到玩家！将一个模块附加到“当球击中玩家”模块后来击中旗帜。
      bounce_6: 现在完成的目标是在顶上。您需要将模块附加到这两个"当球击中"模块中以通过这关。
      bounce_6_2018: 现在完成的目标是在顶上。您需要将模块附加到这两个"当球击中"模块中以通过这关。
      bounce_6_basketball: 现在旗帜是在顶上。您需要将模块附加到这两个"当球击中"模块中以通过这关。
      bounce_6_sports: 现在旗帜是在顶上。您需要将模块附加到这两个"当球击中"模块中以通过这关。
      bounce_7: 将模块附加到每个"当.... 时"中模块。弹起球，直到它击中目标。
      bounce_7_2018: 将模块附加到每个"当.... 时"中模块。弹起球，直到它击中目标。
      bounce_7_basketball: 将模块附加到每个"当"模块。弹起球，直到它击中旗帜。
      bounce_7_sports: 将模块附加到每个"当"模块。弹起球，直到它击中旗帜。
      brendan behaviors clone: 克隆这一关，并制作自己的模块！
      clone me mary: 克隆这一关，并制作自己的模块！
      collector example: 将这些模块正确的排列起来，收集所有的黄金来过关。
      collectorDebugVideo2: 将这些模块正确的排列起来，收集所有的黄金来过关。
      collectorSkinVideo1: 收集所有四个土堆以通过这个关卡。
      collectorSkinVideo2: 收集一堆黄金以通过这个关卡。
      comment_intro_maze_2018: 用新的`注释`模块来给自己一个快速提醒。
      comment_intro_maze_2018_2019: 用新的`注释`模块来给自己一个快速提醒。
      conditionals_forvideo_harvester: 收集所有的玉米和莴苣，然后捡起南瓜。
      conditionals_forvideo_playlab: 尽可能多的得分！
      course1_artist_loops_challenge1: "您可以使用循环来在一行中画多条线. \r\n\r\n你能画一所房子吗？让它看起来就像你喜欢的样子!
        尝试寻找重复的模式!"
      course1_artist_loops_challenge2: 让我们玩游戏吧! 尽可能多地画 X。你能一排放3个吗？
      course1_artist_loops_challenge3: '"你能帮我做两个鸟舍吗？"'
      course1_artist_loops_challenge4: '"是时候掷骰子了! 你能帮我画这些吗？"'
      course1_collector_loops_challenge1: '"你能帮我找出一些错误吗？我知道我想的路, 但我不确定要走多少步。"'
      course1_collector_loops_challenge2: '这一次您只能每个箭头使用一次。去拿所有的宝藏吧! '
      course1_collector_loops_challenge3: '这一次您只能每个箭头使用一次。去拿所有的宝藏吧! '
      course1_collector_loops_challenge4: 让我们去拿宝藏吧! 帮助我越过每一行, 然后回来开始下一行。你能找到规律吗？
      course1_maze_debugging_challenge1: 调试本关卡。去掉多余的模块并添加缺少的块。把鸟给猪!
      course1_maze_debugging_challenge2: 调试本关卡。这些模块是正确的, 但他们的顺序错了!
      course1_maze_seq_challenge1: '"沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！"'
      course1_maze_seq_challenge2: 在每个方向上最多只能移动四次。在你用完所有模块之前, 你能找到一条路吗？
      course1_playlab_events_challenge1: '"我的朋友躲在哪里？你能写代码, 以显示我的其他朋友吗？"'
      course1_playlab_events_challenge2: '"让我们开狂欢晚会吧! 在你点击或碰他们的时候，让他们做点事情。"'
      course2_artist_nestedLoops_challenge1: 你能想出怎么制作出这样的照片吗？
      course2_artist_nestedLoops_challenge2: 你能想出怎么制作出这样的照片吗？
      course2_artist_prog_challenge1: |-
        为每一个动物绘制房间。
        有许多不同的方法来解决这个关卡。所以让我们有一些乐趣。最短的解决方案是6块, 但是你可以按你的想法尽可能多地使用!
      course2_artist_prog_challenge2: "* 帮我在这条路上涂上黄线!*"
      course2_bee_conditionals_challenge1: 收集所有的花蜜或制作蜂蜜。
      course2_bee_conditionals_challenge2: 收集所有的花蜜或制作蜂蜜。
      course2_collector_loops_challenge2: 得到所有的宝藏!
      course2_collector_prog_challenge1: 仔细看! 你能收集所有 *10* 块宝藏吗？
      course2_collector_prog_challenge2: 有20件宝藏要找。收集至少一半完成这一挑战!
      course2_harvester_loops_challenge1: 收集所有的玉米。
      course2_harvester_loops_challenge2: 收集所有的莴苣。避开树木和田野!
      course2_maze_loops_challenge1: '现在, 斯奎特想尝试使用循环来找到他的橡子! '
      course2_maze_programming_challenge1: '*"猪藏起来了! 你能帮我找到一条路吗？"*'
      course2_maze_programming_challenge2: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      course2_maze_seq_challenge1: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      course2_maze_seq_challenge2: 在每个方向上最多只能移动四次。在你用完所有模块之前, 你能找到一条路吗？
      course2_playlab_stage17_1: 你能尝试让乔治（演员1）说“嗨！”吗？
      course2_playlab_stage17_10: "添加模块到“当运行时”事件中来改变背景和企鹅的速度\r\n\r\n玩一玩，让企鹅按箭头移动，直到得分。"
      course2_playlab_stage17_11: 创建你自己的故事。当你完成后，单击完成，让朋友在他们手机上试试你的故事.
      course2_playlab_stage17_2: 你可以让乔治（演员1）说些什么，接着让奥丽芙（演员2）说些什么吗？
      course2_playlab_stage17_3: 你可以写一个程序来将乔治（演员1）移动到奥丽芙猫那里吗？
      course2_playlab_stage17_4: 你能否写一个程序，将乔治（演员以）移动到奥丽芙猫的位置，并在乔治到达时，让奥丽芙对他说“你好”？
      course2_playlab_stage17_5: 你能否写一个程序，让章鱼被点击时说“你好”吗？
      course2_playlab_stage17_6: 现在，写一个程序，用上/下/左/右按键使企鹅到达所有目标！
      course2_playlab_stage17_7: 利用"一直重复"块，你就可以重复不断地执行代码。您可以再连接一些块来使恐龙迪诺（演员2）反复向上向下移动吗？
      course2_playlab_stage17_8: "你能否让企鹅撞到恐龙时，让它说\"哎哟!\" 同时播放一个“命中”的声音？\r\n\r\n完成后玩一下，用箭头移动企鹅来试试。"
      course2_playlab_stage17_9: "添加一个模块，在企鹅碰到奥克塔维亚（演员3）时得1分？\r然​​后试玩一下，用箭头移动企鹅直到得分！"
      course3_artist_concept_challenge1: 随意的反复试试。不指望你第一次就能得到完美的图像。  想看更多的提示吗？ 点击这里!
      course3_artist_functions_challenge1: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码, 看看它是如何工作的,
        然后改变它, 让您自己的设计更出色！
      course3_artist_functions_challenge2: 试试此代码, 看看它是如何工作的, 然后试着自己编程!
      course3_bee_debugging_challenge1: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂酿造所有的蜂蜜吗？
      course3_bee_functions_challenge1: 你得独立接受这个挑战。这可能比看起来更难!
      course3_bee_functions_challenge2: 你得自己独立面对这个挑战。
      course3_bee_functions_challenge3: 创建一个新的函数, 当前方有路的时候，收集所有的花蜜和蜂蜜。用它来完成关卡!
      course3_bee_functions_challenge4: 用你所学的来解决这个关卡。
      course3_collector_debugging_challenge2: 您是嵌套循环的专家吗？使用你所学到的收集所有的宝藏!
      course3_farmer_condLoops_challenge1: 在南瓜处向右转。收集所有的一切来过这关。每个隐藏的作物只有一个玉米或莴苣。
      course3_farmer_condLoops_challenge2: 收集一切作物来通过这关。
      course3_farmer_until_challenge2: 使用如果/否则模块来跟随这条曲线的路。在每个转角处，用循环里的`移除一个`来清理土堆。
      course3_maze_debugging_challenge1: '*"我只是绕圈子走吗？"*'
      course3_maze_debugging_challenge2: '*"如果我转得太频繁, 我可能会头晕! 帮助我只通过四个`转向`命令来拿到橡子。"*'
      course3_maze_until_challenge1: 没有提示，只有挑战。把僵尸带到向日葵那里。
      course3_playLab_challenge1: "当你有足够的分数，或者分数不够时，应该有一些后果。添加一些代码到`游戏胜利`和`游戏失败`函数中来确保游戏按照它y应该的方式进行。\n\r\n点击提示来获得一些主意！"
      course3_playlab_challenge2: 你能想出这个 "算命先生" 应用程序是如何工作的吗？单击 "更多" 以查看您的挑战。
      course3_playlab_stage16_1: 你可以让这个狗说"你好世界"吗？
      course3_playlab_stage16_2: 你可以让狗说些什么，接着让猫说些什么吗？
      course3_playlab_stage16_3: 你可以写一个程序来将这只狗移动到猫那里吗？
      course3_playlab_stage16_4: 你可以写一个程序来将这只狗移动到那只猫处, 当狗到达时, 让猫对他说“你好”?
      course3_playlab_stage16_5: 你能添加一个模块，让章鱼变得快乐吗？
      course3_playlab_stage16_6: 创建你自己的故事。当你完成后，单击完成，让朋友在他们手机上试试你的故事.
      course3_playlab_stage17_1: 你能否写一个程序，让章鱼被点击时说“你好”吗？
      course3_playlab_stage17_2: 你能否写一个程序，用上/下/左/右按键使企鹅到达所有目标？
      course3_playlab_stage17_3: '"一直重复"模块允许你永远重复执行一段代码。你能再连接一些块来使这只恐龙反复向上向下移动吗？'
      course3_playlab_stage17_4: 你能否编程让企鹅撞到恐龙时，让它说"哎哟!" 同时播放一个“命中”的声音？然后试玩一下，用箭头移动企鹅来使这种情况发生。
      course3_playlab_stage17_5: 你能添加一个模块，在企鹅碰到章鱼时得1分吗？然​​后试玩一下，用箭头移动企鹅直到得分。
      course3_playlab_stage17_6: 你能否通过添加模块来改变背景和企鹅的速度，然后将它按箭头移动而最终得分？
      course3_playlab_stage17_7: 创建你自己的故事。当你完成后，单击完成，让朋友在他们手机上试试你的故事.
      course4_artist_binary_challenge1: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      course4_artist_binary_challenge2: 你是否有足够的毅力让这个标志回到正常状态？
      course4_artist_concept_challenge2: 使用下面的代码创建五个风车的设计。
      course4_artist_functions_challenge2: 试试此代码, 看看它是如何工作的, 然后试着自己编程!
      course4_artist_fwp_challenge1: 请尝试运行此程序，并进行更改，看看会发生什么。你能弄清楚它是如何工作的吗？（或者你可以把这段程序删掉并且重写成其他任何你想要的程序）
      course4_artist_variables_challenge1: 现在你已经学到了做这个模样需要的所有东西! 这个关卡本来就很困难。 你能坚持下去直到你找到解决办法吗？
      course4_artist_variables_challenge2: 现在你已经学到了做这个模样需要的所有东西! 这个关卡本来就很困难。 你能坚持下去直到你找到解决办法吗？
      course4_bee_for_challenge1: 用这个循环来收集所有的花蜜。有几个动作, 你需要重复 ' 计数器 ' 次。
      course4_bee_fwp_challenge1: 在函数中使用一个`计数循环`来收集所有的玉米。通过使用`length`（长度）参数，同样的`计数循环`可以数到不同的最大值。
      course4_bee_fwp_challenge2: 在函数中使用一个`计数循环`来收集所有的蔬菜。通过使用`length`（长度）参数，使这个`计数循环`数到不同的最大值。通过在函数外部再加一个`计数循环`，来让你的程序写得更短。
      course4_collector_nested_loops_challenge2: 帮助收藏家只使用你工具箱里的块来拿到至少两堆宝藏。这里可能收集到所有4堆。
      course4_harvester_nested_loops_challenge1: '"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"'
      course4_playlab_variables_challenge1: 使用这些模块使演员分享一个敲门问答的笑话。改变设置和警句来讲你自己的笑话!
      course4_playlab_variables_challenge3: 你能想出这个 "算命先生" 应用程序是如何工作的吗？单击 "更多" 以查看您的挑战。
      courseA_artist_loops1: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseA_artist_loops10: 帮我放下石头, 免得我掉下去!
      courseA_artist_loops10_2018: 帮我放下石头, 免得我掉下去!
      courseA_artist_loops10_2019: 帮我放下石头, 免得我掉下去!
      courseA_artist_loops11: 帮助我建楼梯, 让我可以看着船驶离。
      courseA_artist_loops11_2018: 帮助我建楼梯, 让我可以看着船驶离。
      courseA_artist_loops11_2019: 帮助我建楼梯, 让我可以看着船驶离。
      courseA_artist_loops12: 艺术家在远处看到了一些有趣的东西。 画出你认为他看到的东西。
      courseA_artist_loops12_2018: 艺术家在远处看到了一些有趣的东西。 画出你认为他看到的东西。
      courseA_artist_loops12_2019: 艺术家在远处看到了一些有趣的东西。 画出你认为他看到的东西。
      courseA_artist_loops1_2018: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseA_artist_loops1_2019: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseA_artist_loops2: 帮助艺术家两次向前来画这条线。
      courseA_artist_loops2_2018: 帮助艺术家两次向前来画这条线。
      courseA_artist_loops2_2019: 帮助艺术家两次向前来画这条线。
      courseA_artist_loops3: 往前画一条线五次。
      courseA_artist_loops3_2018: 往前画一条线五次。
      courseA_artist_loops3_2019: 往前画一条线五次。
      courseA_artist_loops4: 现在, 使用 `重复`循环来绘制这条线五次!
      courseA_artist_loops4_2018: 现在, 使用 `重复`循环来绘制这条线五次!
      courseA_artist_loops4_2019: 现在, 使用 `重复`循环来绘制这条线五次!
      courseA_artist_loops5: 画一条七步长的线。这将成为我们的地平线。
      courseA_artist_loops5_2018: 画一条七步长的线。这将成为我们的地平线。
      courseA_artist_loops5_2019: 画一条七步长的线。这将成为我们的地平线。
      courseA_artist_loops6: 让我们在后面放一座漂亮的小山。
      courseA_artist_loops6_2018: 让我们在后面放一座漂亮的小山。
      courseA_artist_loops6_2019: 让我们在后面放一座漂亮的小山。
      courseA_artist_loops7: 使用 "重复" 循环在水中添加波浪。
      courseA_artist_loops7_2018: 使用 "重复" 循环在水中添加波浪。
      courseA_artist_loops7_2019: 使用 "重复" 循环在水中添加波浪。
      courseA_artist_loops7_forVideo: 使用 "重复" 循环在水中添加波浪。
      courseA_artist_loops8: 我们需要一个梯子到船上去。
      courseA_artist_loops8_2018: 我们需要一个梯子到船上去。
      courseA_artist_loops8_2019: 我们需要一个梯子到船上去。
      courseA_artist_loops9: '挑战: 修楼梯。'
      courseA_artist_loops9_2018: '挑战: 修楼梯。'
      courseA_artist_loops9_2019: '挑战: 修楼梯。'
      courseA_artist_loops_challenge1: 你能画房子吗？让它看起来和你喜欢的一样!
      courseA_artist_loops_challenge1_2018: 你能画房子吗？让它看起来和你喜欢的一样!
      courseA_artist_loops_challenge1_2019: 你能画房子吗？让它看起来和你喜欢的一样!
      courseA_artist_loops_challenge2: '"你能帮我做两个鸟舍吗？"'
      courseA_artist_loops_challenge2a: '*"帮我把这三个帐篷搭建起来!"*'
      courseA_artist_loops_challenge2a_2018: '*"帮我把这三个帐篷搭建起来!"*'
      courseA_artist_loops_challenge2a_2019: '*"帮我把这三个帐篷搭建起来!"*'
      courseA_artist_loops_challenge3: 让我们玩游戏吧! 尽可能多地画 X。你能一排放3个吗？
      courseA_bee_seq1: 摆弄这些模块来帮助蜜蜂获得*一个*花蜜。
      courseA_bee_seq10: 自己试试吧！采集所有花蜜。
      courseA_bee_seq11: 获得所有花蜜。
      courseA_bee_seq12: 摆弄这些模块来帮助蜜蜂获得*一个*花蜜。
      courseA_bee_seq13: 用三个`向西移动`模块和一个`采花蜜`模块。
      courseA_bee_seq14: 用三个`向西移动`模块和一个`采花蜜`模块。
      courseA_bee_seq2: 帮助蜜蜂采花蜜！
      courseA_bee_seq3: 找到缺陷，并修复它！
      courseA_bee_seq4: 自己试一试！
      courseA_bee_seq5: 自己试一试！
      courseA_bee_seq6: 现在，蜜蜂需要从两朵花里采花蜜！
      courseA_bee_seq7: 添加两个模块来完成这个关卡！
      courseA_bee_seq8: 确保从每朵花里采花蜜！
      courseA_bee_seq9: 确保从每朵花里采花蜜！
      courseA_collector_loops1: 四处移动罗瑞尔, 得到尽可能多的宝藏!
      courseA_collector_loops10: 帮助罗瑞尔沿着这条道路得到所有的宝藏。
      courseA_collector_loops10_2018: 帮助罗瑞尔沿着这条道路得到所有的宝藏。
      courseA_collector_loops10_2019: 帮助罗瑞尔沿着这条道路得到所有的宝藏。
      courseA_collector_loops11: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseA_collector_loops11_2018: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseA_collector_loops11_2019: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseA_collector_loops12: '*"发现宝藏了! 得到尽可能多的财富!"*'
      courseA_collector_loops12_2018: '*"发现宝藏了! 得到尽可能多的财富!"*'
      courseA_collector_loops12_2019: '*"发现宝藏了! 得到尽可能多的财富!"*'
      courseA_collector_loops1_2018: 四处移动罗瑞尔, 得到尽可能多的宝藏!
      courseA_collector_loops1_2019: 四处移动罗瑞尔, 得到尽可能多的宝藏!
      courseA_collector_loops2: 收集所有三个土堆来通关。
      courseA_collector_loops2_2018: 收集所有三个土堆来通关。
      courseA_collector_loops2_2019: 收集所有三个土堆来通关。
      courseA_collector_loops4: 修复罗瑞尔的路径得到所有这些宝藏。
      courseA_collector_loops4_2018: 修复罗瑞尔的路径得到所有这些宝藏。
      courseA_collector_loops4_2019: 修复罗瑞尔的路径得到所有这些宝藏。
      courseA_collector_loops5: 用你学到的东西来获取所有的宝藏。
      courseA_collector_loops5_2018: 用你学到的东西来获取所有的宝藏。
      courseA_collector_loops5_2019: 用你学到的东西来获取所有的宝藏。
      courseA_collector_loops6: 在此代码中添加块以获取所有的宝藏。
      courseA_collector_loops6_2018: 在此代码中添加块以获取所有的宝藏。
      courseA_collector_loops6_2019: 在此代码中添加块以获取所有的宝藏。
      courseA_collector_loops7: 你应该添加什么到这个代码来获得所有的宝藏？
      courseA_collector_loops7_2018: 你应该添加什么到这个代码来获得所有的宝藏？
      courseA_collector_loops7_2019: 你应该添加什么到这个代码来获得所有的宝藏？
      courseA_collector_loops8: 编写代码来获取所有这些宝藏。
      courseA_collector_loops8_2018: 编写代码来获取所有这些宝藏。
      courseA_collector_loops8_2019: 编写代码来获取所有这些宝藏。
      courseA_collector_loops9: "** 挑战: ** 宝藏在楼梯最上面! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseA_collector_loops9_2018: "** 挑战: ** 宝藏在楼梯最上面! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseA_collector_loops9_2019: "** 挑战: ** 宝藏在楼梯最上面! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseA_collector_loops_challenge1: '*"你能帮我找出一些错误吗？"*'
      courseA_collector_loops_challenge1_2018: '*"你能帮我找出一些错误吗？"*'
      courseA_collector_loops_challenge1_2019: '*"你能帮我找出一些错误吗？"*'
      courseA_collector_loops_challenge2: '得到所有的宝藏! '
      courseA_collector_loops_challenge2kp: 收集至少 **3** 件的宝藏通过这个关。
      courseA_collector_loops_challenge2kp_2018: 收集至少 **3** 件的宝藏通过这个关。
      courseA_collector_loops_challenge2kp_2019: 收集至少 **3** 件的宝藏通过这个关。
      courseA_collector_preLoops1: "这是冒险家罗瑞尔!\r\n\r\n按 \"运行\", 看到她走到宝藏, 并拿到它。"
      courseA_collector_preLoops2: "太好了! 现在你可以自己添加代码了! \r \n\r \n把\"获取宝藏\" 块拉倒程序的底部,
        然后单击 \"运行\"。"
      courseA_collector_preLoops3: 将两个 "向东" 块和一个 "获取宝藏" 块放到程序的底部, 然后单击 "运行"。
      courseA_collector_preLoops4: 你能想出解决这个关卡的办法吗？
      courseA_collector_preLoops5: 得到这两块宝石的中的1块来过关。
      courseA_collector_preLoops6: 得到这两件宝物来过关。
      courseA_collector_preLoops7: 收集所有三个土堆来通关。
      courseA_forVideoTest_artist: 使用 "重复" 循环在水中添加波浪。
      courseA_harvester_forVideo: 你能只用**一个**移动模块来采摘所有玉米吗？
      courseA_harvester_loops1: 帮助收割者采摘所有的玉米！
      courseA_harvester_loops10: 帮助收割者捡起所有5束玉米！
      courseA_harvester_loops10_2019: 帮助收割者捡起所有5束玉米！
      courseA_harvester_loops11: '试试自己做一个！

'
      courseA_harvester_loops11_2019: '试试自己做一个！

'
      courseA_harvester_loops1_2019: 帮助收割者采摘所有的玉米！
      courseA_harvester_loops2: 确保采摘了所有的玉米！
      courseA_harvester_loops2_2019: 确保采摘了所有的玉米！
      courseA_harvester_loops3: 你能只用**一个**移动模块来采摘所有玉米吗？
      courseA_harvester_loops3_2019: 你能只用**一个**移动模块来采摘所有玉米吗？
      courseA_harvester_loops4: 你能帮助收割者找到她代码里的缺陷吗?
      courseA_harvester_loops4_2019: 你能帮助收割者找到她代码里的缺陷吗?
      courseA_harvester_loops5: 自己试一试！你能也采摘最后的玉米吗？
      courseA_harvester_loops5_2019: 自己试一试！你能也采摘最后的玉米吗？
      courseA_harvester_loops5a: 看看所有的玉米！你能自己采摘它们吗？
      courseA_harvester_loops5a_2019: 看看所有的玉米！你能自己采摘它们吗？
      courseA_harvester_loops5b: 你能改变代码来让收割者采摘所有玉米吗？
      courseA_harvester_loops5b_2019: 你能改变代码来让收割者采摘所有玉米吗？
      courseA_harvester_loops6: 你要用**一个**`向南移动`模块和**一个**`向西移动`模块。
      courseA_harvester_loops6_2019: 你要用**一个**`向南移动`模块和**一个**`向西移动`模块。
      courseA_harvester_loops7: '自己试试吧！ '
      courseA_harvester_loops7_2019: '自己试试吧！ '
      courseA_harvester_loops8: 这是同一关，但现在你需要重复**三次**！
      courseA_harvester_loops9: 你能想出如何收集所有玉米吗？
      courseA_harvester_loops9_2019: 你能想出如何收集所有玉米吗？
      courseA_harvester_seq1: 摆弄这些模块来帮助收割者收获这个玉米。
      courseA_harvester_seq10: 确保采摘了所有的玉米！
      courseA_harvester_seq10_2019: 确保采摘了所有的玉米！
      courseA_harvester_seq11: 自己试试吧！采摘所有玉米。
      courseA_harvester_seq11_2019: 自己试试吧！采摘所有玉米。
      courseA_harvester_seq12: 捡起所有玉米。
      courseA_harvester_seq12_2019: 捡起所有玉米。
      courseA_harvester_seq13: 摆弄这些模块来帮助收割者收获玉米。
      courseA_harvester_seq13_2019: 摆弄这些模块来帮助收割者收获玉米。
      courseA_harvester_seq1_2019: 摆弄这些模块来帮助收割者收获这个玉米。
      courseA_harvester_seq2: 用三个`向西移动`模块和一个`采摘玉米`模块来通过这关。
      courseA_harvester_seq2_2019: 用三个`向西移动`模块和一个`采摘玉米`模块来通过这关。
      courseA_harvester_seq3: 用三个`向西移动`模块和一个`采摘玉米`模块。
      courseA_harvester_seq3_2019: 用三个`向西移动`模块和一个`采摘玉米`模块。
      courseA_harvester_seq4: 添加一个模块来帮助收割者采摘玉米。
      courseA_harvester_seq4_2019: 添加一个模块来帮助收割者采摘玉米。
      courseA_harvester_seq5: 找到缺陷，并修复它！
      courseA_harvester_seq5_2019: 找到缺陷，并修复它！
      courseA_harvester_seq6: 自己试一试！
      courseA_harvester_seq6_2019: 自己试一试！
      courseA_harvester_seq7: 自己试一试！
      courseA_harvester_seq7_2019: 自己试一试！
      courseA_harvester_seq8: 现在收割者需要采摘玉米两次！
      courseA_harvester_seq8_2019: 现在收割者需要采摘玉米两次！
      courseA_harvester_seq9: 添加两个模块来完成这个关卡！
      courseA_harvester_seq9_2019: 添加两个模块来完成这个关卡！
      courseA_maze_ramp2_2018: 将所有模块接到一起来完成你的代码，然后点击"运行"。
      courseA_maze_ramp2_2019: 将所有模块接到一起来完成你的代码，然后点击"运行"。
      courseA_maze_ramp2a_2018: 将所有模块接到一起来完成你的代码，然后点击"运行"。
      courseA_maze_ramp3_2018: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseA_maze_ramp3a_2018: 在其它模块下面添加一个`向北`模块来完成代码，然后点击"▶运行"。
      courseA_maze_ramp3a_2019: 在其它模块下面添加一个`向北`模块来完成代码，然后点击"▶运行"。
      courseA_maze_ramp3b_2018: 在其它模块下面添加一个`向北`模块来完成代码，然后点击"运行"。
      courseA_maze_ramp3b_2019: 在其它模块下面添加一个`向北`模块来完成代码，然后点击"运行"。
      courseA_maze_ramp4_2018: 躲开TNT炸药，否则羽毛会被炸飞！
      courseA_maze_ramp4a_2018: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseA_maze_ramp4a_2019: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseA_maze_ramp5_2018: 躲开TNT炸药！
      courseA_maze_ramp5a_2018: 帮小鸟到达那只猪！
      courseA_maze_ramp5a_2019: 帮小鸟到达那只猪！
      courseA_maze_seq1: 帮小鸟到达那只坏猪！
      courseA_maze_seq10: '挑战: 绕开TNT炸药, 把鸟撞到猪身上。 '
      courseA_maze_seq10_2018: '挑战: 绕开TNT炸药, 让鸟到达猪那里！ '
      courseA_maze_seq10_2019: '挑战: 绕开TNT炸药, 让鸟到达猪那里！ '
      courseA_maze_seq11: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseA_maze_seq11_2018: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseA_maze_seq11_2019: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseA_maze_seq12: '去找那头猪! '
      courseA_maze_seq12_2018: '去找那头猪! '
      courseA_maze_seq12_2019: '去找那头猪! '
      courseA_maze_seq13: 用各种方法把那头猪抓来!
      courseA_maze_seq13_2018: 用各种方法把那头猪抓来!
      courseA_maze_seq13_2019: 用各种方法把那头猪抓来!
      courseA_maze_seq1_2018: 帮小鸟到达那只坏猪！
      courseA_maze_seq1_2019: 帮小鸟到达那只坏猪！
      courseA_maze_seq2: 修改代码来让我到达那只猪！
      courseA_maze_seq2_2018: 修改代码来让我到达那只猪！
      courseA_maze_seq3: 修复代码, 让鸟到猪那!
      courseA_maze_seq3_2018: 修复代码, 让鸟到猪那!
      courseA_maze_seq4: 移除一个模块, 让鸟到猪那!
      courseA_maze_seq4_2018: 移除一个模块, 让鸟到猪那!
      courseA_maze_seq4a: 用尽可能少的块模块把鸟带到猪那里。
      courseA_maze_seq5: 从头开始尝试这一个。
      courseA_maze_seq5_2018: 尝试一下。
      courseA_maze_seq5_2019: 尝试一下。
      courseA_maze_seq5a_2018: 你能在代码最后加上什么来让小鸟到达猪那里？
      courseA_maze_seq5a_2019: 你能在代码最后加上什么来让小鸟到达猪那里？
      courseA_maze_seq6: 往一条路走，然后走另一条把鸟带到猪那里！
      courseA_maze_seq6_2018: 往一条路走，然后走另一条把鸟带到猪那里！
      courseA_maze_seq6_2019: 往一条路走，然后走另一条把鸟带到猪那里！
      courseA_maze_seq7: 想想这里缺了什么，然后添加模块让鸟到达那只猪那！
      courseA_maze_seq7_2018: 想想这里缺了什么，然后添加模块让鸟到达那只猪那！
      courseA_maze_seq8: 通过这关，把鸟带到猪那！
      courseA_maze_seq8_2018: 通过这关，把鸟带到猪那！
      courseA_maze_seq8_2019: 通过这关，把鸟带到猪那！
      courseA_maze_seq9: 通过添加块来调试这关，让鸟到达猪那里!
      courseA_maze_seq9_2018: 通过添加块来调试这关，让鸟到达猪那里!
      courseA_maze_seq_challenge1: 这里出了点问题。帮助修复代码, 让鸟到达猪那里!
      courseA_maze_seq_challenge1_2018: 这里出了点问题。帮助修复代码, 让鸟到达猪那里!
      courseA_maze_seq_challenge1_2019: 这里出了点问题。帮助修复代码, 让鸟到达猪那里!
      courseA_maze_seq_challenge2: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseA_maze_seq_challenge2_2018: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseA_maze_seq_challenge2_2019: 沿着这条路带我去找那只笨猪。躲开 TNT 炸药，不然我的羽毛就要被炸飞了！
      courseA_playLab_events1: 这是一个游戏实验室关卡。 把模块移到工作区看会发生什么!
      courseA_playLab_events1_2018: 这是一个游戏实验室关卡。 把模块移到工作区看会发生什么!
      courseA_playLab_events1_2019: 这是一个游戏实验室关卡。 把模块移到工作区看会发生什么!
      courseA_playLab_events2: 乔治狗想说“大家好”。你可以帮它吗？
      courseA_playLab_events2_2018: 乔治狗想说“大家好”。你可以帮它吗？
      courseA_playLab_events2_2019: 乔治狗想说“大家好”。你可以帮它吗？
      courseA_playLab_events3: 将`向左移动`模块连接到工作区中的`当点击向左时`的事件模块下。
      courseA_playLab_events3_2018: 将`向左移动`模块连接到工作区中的`当点击向左时`的事件模块下。
      courseA_playLab_events3_2019: 将`向左移动`模块连接到工作区中的`当点击向左时`的事件模块下。
      courseA_playLab_events4: 添加模块，在点击`右`按钮时向右移动。
      courseA_playLab_events4_2018: 添加另一个时间模块，在按下`右`按钮时，让乔治向右移动。
      courseA_playLab_events4_2019: 添加另一个时间模块，在按下`右`按钮时，让乔治向右移动。
      courseA_playLab_events5: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events5_2018: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events5_2019: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      courseA_playLab_events6: 当乔治被点击的时候，改变背景和播放随机声音来添加一些乐趣。
      courseA_playLab_events6_2018: 当乔治被点击的时候，改变背景和播放随机声音来添加一些乐趣。
      courseA_playLab_events6_2019: 当乔治被点击的时候，改变背景和播放随机声音来添加一些乐趣。
      courseA_playLab_events7: 添加任何你想要的到此游戏中。你能否让恐龙在乔治碰上它时消失？
      courseA_playLab_events7_2018: "*自由发挥*：把觉得好玩的东西添加到游戏里。"
      courseA_playLab_events7_2019: "*自由发挥*：把觉得好玩的东西添加到游戏里。"
      courseA_playlab_events_challenge1: 你能写代码, 以显示我的其他朋友吗？提示能够一步一步的帮助你完成这个项目。
      courseA_playlab_events_challenge1_2018: 你能写代码, 以显示我的其他朋友吗？提示能够一步一步的帮助你完成这个项目。
      courseA_playlab_events_challenge1_2019: 你能写代码, 以显示我的其他朋友吗？提示能够一步一步的帮助你完成这个项目。
      courseA_playlab_events_challenge2: 当你点击它们时，让每个人做点什么。
      courseA_playlab_events_challenge2_2018: 当你点击它们时，让每个人做点什么。
      courseA_playlab_events_challenge2_2019: 当你点击它们时，让每个人做点什么。
      courseA_playlab_events_challengeClone: 我的朋友躲在哪里？你能写代码, 以显示我的其他朋友吗？
      courseA_toMakeLoopsVideo_Collector: 循环能让里面的代码不断的重复执行!
      courseA_video_events: 需要更好的游戏实验室/事件组合
      courseA_video_events_2018: 需要更好的游戏实验室/事件组合
      courseA_video_events_2019: 需要更好的游戏实验室/事件组合
      courseB_Scrat_ramp1_2018: 在这一关中，将所有模块拼到一起，并点击"▶运行"！
      courseB_Scrat_ramp1_2019: 在这一关中，将所有模块拼到一起，并点击"▶运行"！
      courseB_Scrat_ramp2_2018: 将所有模块接到一起来完成你的代码，然后点击"运行"。
      courseB_Scrat_ramp2_2019: 将所有模块接到一起来完成你的代码，然后点击"运行"。
      courseB_Scrat_ramp3a_2018: 在其它模块下面添加一个`向北`模块来完成代码，然后点击"▶运行"。
      courseB_Scrat_ramp3a_2019: 在其它模块下面添加一个`向北`模块来完成代码，然后点击"▶运行"。
      courseB_Scrat_ramp3b_2018: "将多余的块拖回工具箱即可将其删除。\n\n"
      courseB_Scrat_ramp3b_2019: "将多余的块拖回工具箱即可将其删除。\n\n"
      courseB_Scrat_ramp4a_2018: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseB_Scrat_ramp4a_2019: 你能想出要在这些模块下面增加什么模块来完成这段代码吗？
      courseB_Scrat_ramp5a_2018: 试试自己完成它！
      courseB_Scrat_ramp5a_2019: 试试自己完成它！
      courseB_artist_loops1: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseB_artist_loops10: 用你已经学到的画一副你想让艺术家回到家里看到的画。
      courseB_artist_loops10_2018: 用你已经学到的画一副你想让艺术家回到家里看到的画。
      courseB_artist_loops10_2019: 用你已经学到的画一副你想让艺术家回到家里看到的画。
      courseB_artist_loops1_2018: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseB_artist_loops1_2019: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      courseB_artist_loops2: 艺术家试图画一条线 ** 6 ** 次, 但还没画好。 你能帮忙吗？
      courseB_artist_loops2_2018: 艺术家试图画一条线 ** 6 ** 次, 但还没画好。 你能帮忙吗？
      courseB_artist_loops2_2019: 艺术家试图画一条线 ** 6 ** 次, 但还没画好。 你能帮忙吗？
      courseB_artist_loops3: 帮助艺术家画一条线7次, 来做花园墙。
      courseB_artist_loops3_2018: 帮助艺术家画一条线7次, 来做花园墙。
      courseB_artist_loops3_2019: 帮助艺术家画一条线7次, 来做花园墙。
      courseB_artist_loops4: '现在我们要准备好种植用的土壤。在代码中寻找缺陷并帮助艺术家准备好地面。

'
      courseB_artist_loops4_2018: '现在我们要准备好种植用的土壤。在代码中寻找缺陷并帮助艺术家准备好地面。

'
      courseB_artist_loops4_2019: '现在我们要准备好种植用的土壤。在代码中寻找缺陷并帮助艺术家准备好地面。

'
      courseB_artist_loops5: 该去修楼梯了! 重复这个图案 ** 5** 次, 这样艺术家就可以到达灌木丛的顶端。
      courseB_artist_loops5_2018: 该去修楼梯了! 重复这个图案 ** 5** 次, 这样艺术家就可以到达灌木丛的顶端。
      courseB_artist_loops5_2019: 该去修楼梯了! 重复这个图案 ** 5** 次, 这样艺术家就可以到达灌木丛的顶端。
      courseB_artist_loops6: 爬上藤蔓, 看看它延到哪里？
      courseB_artist_loops6_2018: 爬上藤蔓, 看看它延到哪里？
      courseB_artist_loops6_2019: 爬上藤蔓, 看看它延到哪里？
      courseB_artist_loops7: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      courseB_artist_loops7_2018: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      courseB_artist_loops7_2019: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      courseB_artist_loops8: 该回家了。你可以只用一个模块就能修好这个梯子让艺术家下来吗？
      courseB_artist_loops8_2018: 该回家了。你可以只用一个模块就能修好这个梯子让艺术家下来吗？
      courseB_artist_loops8_2019: 该回家了。你可以只用一个模块就能修好这个梯子让艺术家下来吗？
      courseB_artist_loops9: 让我们走捷径回家，越过池塘。你能帮助艺术家待在石头上吗？
      courseB_artist_loops9_2018: 让我们走捷径回家，越过池塘。你能帮助艺术家待在石头上吗？
      courseB_artist_loops9_2019: 让我们走捷径回家，越过池塘。你能帮助艺术家待在石头上吗？
      courseB_artist_loops_challenge1: '"是时候掷骰子了! 你能帮我画这些吗？"'
      courseB_artist_loops_challenge1_2018: '"是时候掷骰子了! 你能帮我画这些吗？"'
      courseB_artist_loops_challenge1_2019: '"是时候掷骰子了! 你能帮我画这些吗？"'
      courseB_artist_loops_challenge2: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_artist_loops_challenge2_2018: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_artist_loops_challenge2_2019: |-
        让我们玩游戏吧! 尽可能多地画 X。
        你可以做到一排放3 个吗？
      courseB_collector_loops1: 这是冒险家罗瑞尔! 你能把她带到附近去找宝藏吗？
      courseB_collector_loops10: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseB_collector_loops10_2018: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseB_collector_loops10_2019: 帮助罗瑞尔从这个洞穴得到所有的宝藏。
      courseB_collector_loops11: 发现宝藏了! 得到尽可能多的财富!
      courseB_collector_loops11_2018: 发现宝藏了! 得到尽可能多的财富!
      courseB_collector_loops11_2019: 发现宝藏了! 得到尽可能多的财富!
      courseB_collector_loops1_2018: 这是冒险家罗瑞尔! 你能把她带到附近去找宝藏吗？
      courseB_collector_loops1_2019: 这是冒险家罗瑞尔! 你能把她带到附近去找宝藏吗？
      courseB_collector_loops2: 收集所有四个土堆来通关。
      courseB_collector_loops2_2018: 收集所有四个土堆来通关。
      courseB_collector_loops2_2019: 收集所有四个土堆来通关。
      courseB_collector_loops3: 罗瑞尔怎么能只用一个 "向东" 模块来得到五堆财宝呢？
      courseB_collector_loops3_2018: 罗瑞尔怎么能只用一个 "向东" 模块来得到五堆财宝呢？
      courseB_collector_loops3_2019: 罗瑞尔怎么能只用一个 "向东" 模块来得到五堆财宝呢？
      courseB_collector_loops3_predict1: 罗瑞尔怎样只用`E -->`模块来收集所有5堆金子？
      courseB_collector_loops4: 修复罗瑞尔的路径得到所有这些宝藏！
      courseB_collector_loops4_2018: 修复罗瑞尔的路径得到所有这些宝藏！
      courseB_collector_loops4_2019: 修复罗瑞尔的路径得到所有这些宝藏！
      courseB_collector_loops5: '添加代码到最后的关卡，得到所有的宝藏。 '
      courseB_collector_loops5_2018: '添加代码到最后的关卡，得到所有的宝藏。 '
      courseB_collector_loops5_2019: '添加代码到最后的关卡，得到所有的宝藏。 '
      courseB_collector_loops6: 写出代码, 帮助罗瑞尔得到所有的宝藏!
      courseB_collector_loops6_2018: 写出代码, 帮助罗瑞尔得到所有的宝藏!
      courseB_collector_loops6_2019: 写出代码, 帮助罗瑞尔得到所有的宝藏!
      courseB_collector_loops7: 编写代码来获取所有这些宝藏。
      courseB_collector_loops7_2018: 编写代码来获取所有这些宝藏。
      courseB_collector_loops7_2019: 编写代码来获取所有这些宝藏。
      courseB_collector_loops8: "** 挑战: ** 宝藏在楼梯最底下! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseB_collector_loops8_2018: "** 挑战: ** 宝藏在楼梯最底下! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseB_collector_loops8_2019: "** 挑战: ** 宝藏在楼梯最底下! 编写代码来帮助罗瑞尔得到所有宝藏。"
      courseB_collector_loops9: '"帮我从这个深谷里得到宝藏"*'
      courseB_collector_loops9_2018: '"帮我从这个深谷里得到宝藏"*'
      courseB_collector_loops9_2019: '"帮我从这个深谷里得到宝藏"*'
      courseB_collector_loops_challenge1: '这次你的模块有限。得到所有的宝藏! '
      courseB_collector_loops_challenge1_2018: '这次你的模块有限。得到所有的宝藏! '
      courseB_collector_loops_challenge1_2019: '这次你的模块有限。得到所有的宝藏! '
      courseB_collector_loops_challenge2: 让我们去拿宝藏吧! 帮助我越过每一行, 然后回来开始下一行。你能找到规律吗？
      courseB_collector_loops_challenge2_2018: 让我们去拿宝藏吧! 帮助我越过每一行, 然后回来开始下一行。你能找到规律吗？
      courseB_collector_loops_challenge2a: 帮助罗瑞尔获得至少**5**份财宝来通过这关。
      courseB_collector_loops_challenge2a_2018: 帮助罗瑞尔获得至少**5**份财宝来通过这关。
      courseB_collector_loops_challenge2a_2019: 帮助罗瑞尔获得至少**5**份财宝来通过这关。
      courseB_collector_loops_challenge`: '这一次您只能每个箭头使用一次。去拿所有的宝藏吧! '
      courseB_collector_prog1: 这是冒险家罗瑞尔! 你能把她带到附近去找黄金吗？
      courseB_collector_prog2: 4堆金子！收集所有4堆。
      courseB_collector_prog3: 罗瑞尔怎样只用`E -->`模块来收集所有5堆金子？
      courseB_iceage_loops1: 帮助斯奎特穿过冰去拿到橡子！
      courseB_iceage_loops10: 帮助斯奎特走过去拿到橡子！
      courseB_iceage_loops10_2019: 帮助斯奎特走过去拿到橡子！
      courseB_iceage_loops11: 帮助斯奎特得到橡子！
      courseB_iceage_loops11_2019: 帮助斯奎特得到橡子！
      courseB_iceage_loops11_forVideo: 帮助斯奎特得到橡子！
      courseB_iceage_loops12: 用各种方法来拿到橡子！
      courseB_iceage_loops12_2019: 用各种方法来拿到橡子！
      courseB_iceage_loops1_2019: 帮助斯奎特穿过冰去拿到橡子！
      courseB_iceage_loops2: 用两个不同的移动模块来获得橡子！
      courseB_iceage_loops2_2019: 用两个不同的移动模块来获得橡子！
      courseB_iceage_loops3: 你能只用一个`W`模块来得到橡子吗？
      courseB_iceage_loops3_2019: 你能只用一个`W`模块来得到橡子吗？
      courseB_iceage_loops4: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseB_iceage_loops4_2019: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseB_iceage_loops5: 你能再增加一个循环来获得橡子吗？
      courseB_iceage_loops6: 你能增加一个循环到达橡子吗？
      courseB_iceage_loops6_2019: 你能增加一个循环到达橡子吗？
      courseB_iceage_loops7: '斯奎特真的想要那个橡子！

'
      courseB_iceage_loops7_2019: '斯奎特真的想要那个橡子！

'
      courseB_iceage_loops8: '你能修好这段代码吗？ '
      courseB_iceage_loops8_2019: '你能修好这段代码吗？ '
      courseB_iceage_loops9: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseB_iceage_loops9_2019: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseB_maze_seq1: "玩一玩这些模块, 看看他们能让小鸟做什么吧! \r\n\r\n把鸟送到猪那里来完成这关。"
      courseB_maze_seq10: 修复缺陷，让鸟到猪那。
      courseB_maze_seq10_2018: 修复缺陷，来帮助斯奎特到达橡子。
      courseB_maze_seq10_2019: 修复缺陷，来帮助斯奎特到达橡子。
      courseB_maze_seq11: 都靠你了！让小鸟到达猪那里。
      courseB_maze_seq11_2018: 都靠你了！让斯奎特得到橡子。
      courseB_maze_seq11_2019: 都靠你了！让斯奎特得到橡子。
      courseB_maze_seq12: 现在不管用什么办法，抓到那头猪!
      courseB_maze_seq12_2018: 现在不管用什么办法，抓到那头猪!
      courseB_maze_seq12_2019: 现在不管用什么办法，抓到那头猪!
      courseB_maze_seq1_2018: "玩一玩这些模块, 看看他们能让斯奎特做什么吧! \r\n\r\n把斯奎特送到橡子那里来完成这关。"
      courseB_maze_seq1_2019: "玩一玩这些模块, 看看他们能让斯奎特做什么吧! \r\n\r\n把斯奎特送到橡子那里来完成这关。"
      courseB_maze_seq2: "\"有错误! 修复代码把我带到猪那里。*"
      courseB_maze_seq2_2018: 有错误! 修复代码把斯奎特带到橡子那里！
      courseB_maze_seq3: '"修复代码来让我到达那只猪！"'
      courseB_maze_seq4: 添加两个模块, 让鸟到猪那。
      courseB_maze_seq4_2018: 添加**两个**移动模块, 让斯奎特到达橡子那里。
      courseB_maze_seq4_2019: 添加**两个**移动模块, 让斯奎特到达橡子那里。
      courseB_maze_seq5: 现在从开始试试这一关！
      courseB_maze_seq5_2018: 这一关有点棘手！
      courseB_maze_seq5_2019: 这一关有点棘手！
      courseB_maze_seq6: 往一条路走，然后走另一条把鸟带到猪那里！
      courseB_maze_seq6_2018: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseB_maze_seq6_2019: 向一个方向移动，然后往另一个方向移动来帮鸟到达猪那里！
      courseB_maze_seq7: 想想这里缺了什么，然后添加模块让鸟到达那只猪那！
      courseB_maze_seq7_2018: 想想这里缺了什么，然后添加模块让鸟到达那只猪那！
      courseB_maze_seq7_2019: 想想这里缺了什么，然后添加模块让鸟到达那只猪那！
      courseB_maze_seq8: 该你了！ 你要怎么做才能把鸟送到猪那里？
      courseB_maze_seq8_2018: 该你了！ 你要怎么做才能把斯奎特送到橡子那里？
      courseB_maze_seq8_2019: 该你了！ 你要怎么做才能把斯奎特送到橡子那里？
      courseB_maze_seq9: '挑战: 绕开TNT炸药, 让鸟到达猪那里。'
      courseB_maze_seq9_2018: '挑战: 绕开破冰，让斯奎特到达橡子那里。'
      courseB_maze_seq9_2019: '挑战: 绕开破冰，让斯奎特到达橡子那里。'
      courseB_maze_seq9_challenge1: 那只猪现在藏在哪里？
      courseB_maze_seqCold: 挑战：通过添加模块来调试这关, 让鸟到达猪那里!
      courseB_maze_seqOld: '绕过 TNT炸药, 让鸟到达猪那里! '
      courseB_maze_seq_challenge1: 在你用完所有模块之前, 你能找到一条路吗？
      courseB_maze_seq_challenge1_2018: 在你用完所有模块之前, 你能找到一条路吗？
      courseB_maze_seq_challenge1_2019: 在你用完所有模块之前, 你能找到一条路吗？
      courseB_maze_seq_challenge2: 调试本关卡。这些模块是正确的, 但他们的顺序错了!
      courseB_maze_seq_challenge2_2018: 调试本关卡。这些模块是正确的, 但他们的顺序错了!
      courseB_maze_seq_challenge2_2019: 调试本关卡。这些模块是正确的, 但他们的顺序错了!
      courseB_playLab_events1: 看看你是否明白每个方块是做什么的。
      courseB_playLab_events1_2018: 看看你是否明白每个方块是做什么的。
      courseB_playLab_events1_2019: 看看你是否明白每个方块是做什么的。
      courseB_playlab_events2: 当你点击"运行"时，让黛西龙说点什么。
      courseB_playlab_events2_2018: 当你点击"运行"时，让黛西龙说点什么。
      courseB_playlab_events2_2019: 当你点击"运行"时，让黛西龙说点什么。
      courseB_playlab_events3: 使用事件在你点击她的时候，让黛西龙切换到随机的心情。
      courseB_playlab_events3_2018: 使用事件在你点击她的时候，让黛西龙切换到随机的心情。
      courseB_playlab_events3_2019: 使用事件在你点击她的时候，让黛西龙切换到随机的心情。
      courseB_playlab_events4: 骑士时间到了！添加一个事件, 当左箭头被点击的时候让骑士移向龙。
      courseB_playlab_events4_2018: 让龙完成这一关！
      courseB_playlab_events4_2019: 让龙完成这一关！
      courseB_playlab_events5: 现在添加一个事件，当你按下右箭头时，让骑士跑离龙。
      courseB_playlab_events5_2018: 添加一个事件，当你按下右箭头时，让骑士跑离龙。
      courseB_playlab_events5_2019: 添加一个事件，当你按下右箭头时，让骑士跑离龙。
      courseB_playlab_events6: "帮助你的骑士得到所有的旗帜！\r\n\r\n要做到这个，你需要添加事件来帮助骑士上下左右移动。"
      courseB_playlab_events6_2018: "帮助你的骑士得到所有的旗帜！\r\n\r\n要做到这个，你需要添加事件来帮助骑士上下左右移动。"
      courseB_playlab_events6_2019: "帮助你的骑士得到所有的旗帜！\r\n\r\n要做到这个，你需要添加事件来帮助骑士上下左右移动。"
      courseB_playlab_events7: 让这个游戏有趣，设置骑士在去往旗子的路上碰到龙的时候消失！当他们碰撞时播放声音使感觉更真实。
      courseB_playlab_events7_2018: "1) 设置骑士，让他碰到龙时消失。 \n2) 当他们碰撞时播放声音，这样感觉更真实。  "
      courseB_playlab_events7_2019: "1) 设置骑士，让他碰到龙时消失。 \n2) 当他们碰撞时播放声音，这样感觉更真实。  "
      courseB_playlab_events8: 运用你的想象力。你能做些什么让这个游戏更有趣？
      courseB_playlab_eventsFP: 运用你的想象力。你能做些什么让这个游戏更有趣？
      courseB_playlab_eventsFP_2018: "**自由发挥：** 运用你的想象力。你能做些什么让这个游戏更有趣？"
      courseB_playlab_eventsFP_2019: "**自由发挥：** 运用你的想象力。你能做些什么让这个游戏更有趣？"
      courseB_playlab_eventsToolbox: 在骑士碰到龙的时候，播放声音并让骑士消失！
      courseB_playlab_events_challenge1: '当你按下时, 让动物们往下移动。 '
      courseB_playlab_events_challenge1_2018: '当你按下时, 让动物们往下移动。 '
      courseB_playlab_events_challenge1_2019: '当你按下时, 让动物们往下移动。 '
      courseB_playlab_events_challenge2: 当点击动物时，让它们消失。
      courseB_playlab_events_challenge2_2018: 当点击动物时，让它们消失。
      courseB_playlab_events_challenge2_2019: 当点击动物时，让它们消失。
      courseB_playlab_events_challenge2_embed: 这是你完成的游戏!
      courseB_playlab_events_challenge2_template: 点击来使动物们消失！你也可以添加声音和得分点, 创建一个有趣的动物标签游戏!
      courseB_playlab_events_challenge2_template_2018: 点击来使动物们消失！你也可以添加声音和得分点, 创建一个有趣的动物标签游戏!
      courseB_playlab_events_challenge2_template_2019: 点击来使动物们消失！你也可以添加声音和得分点, 创建一个有趣的动物标签游戏!
      courseB_scrat_forVideo: 拿到橡子！
      courseB_starWars_prog1: "\"去收集废金属, BB-8!”"
      courseB_starWars_prog10: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog10_2018: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog10_2019: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog11: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog11_2018: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog11_2019: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog1_2018: "\"去收集废金属, BB-8!”"
      courseB_starWars_prog1_2019: "\"去收集废金属, BB-8!”"
      courseB_starWars_prog2: 把所有的金属都收集起来。
      courseB_starWars_prog2_2018: 把所有的金属都收集起来。
      courseB_starWars_prog2_2019: 把所有的金属都收集起来。
      courseB_starWars_prog3: 得到所有的废金属
      courseB_starWars_prog3_2018: 得到所有的废金属
      courseB_starWars_prog3_2019: 得到所有的废金属
      courseB_starWars_prog4: 得到所有的废金属
      courseB_starWars_prog4_2018: 得到所有的废金属
      courseB_starWars_prog4_2019: 得到所有的废金属
      courseB_starWars_prog5: 获取废旧金属
      courseB_starWars_prog5_2018: 获取废旧金属
      courseB_starWars_prog5_2019: 获取废旧金属
      courseB_starWars_prog6: 得到所有的废金属
      courseB_starWars_prog6_2018: 得到所有的废金属
      courseB_starWars_prog6_2019: 得到所有的废金属
      courseB_starWars_prog7: 去拿!
      courseB_starWars_prog7_2018: 去拿!
      courseB_starWars_prog7_2019: 去拿!
      courseB_starWars_prog8: "** 挑战: ** 帮助 BB-8 收集发光的废旧金属"
      courseB_starWars_prog8_2018: "** 挑战: ** 帮助 BB-8 收集发光的废旧金属"
      courseB_starWars_prog8_2019: "** 挑战: ** 帮助 BB-8 收集发光的废旧金属"
      courseB_starWars_prog9: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog9_2018: 帮助 BB-8 收集发光的废旧金属
      courseB_starWars_prog9_2019: 帮助 BB-8 收集发光的废旧金属
      courseC19_playLab_EOC1: 选择一个背景和地图，然后选择一个演员来作为你的游戏里的英雄。
      courseC19_playLab_EOC2: 用事件处理函数和行动来帮助你的英雄移动。
      courseC19_playLab_EOC3: 添加两个或更多的演员到你的游戏中，并让它们移动。
      courseC19_playLab_EOC4: 找一些有趣的方法来改变游戏的分数。让分数不为零，然后再继续。
      courseC19_playLab_EOC5: 现在，花一些时间来让游戏按照你想的方式运行。包括游戏失败或胜利的方法，然后玩游戏，直到某个条件达成。
      courseC19_playLab_EOC6: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      courseC_PlayLab_events1: 让乔治狗 (演员 1) 说 "大家好。“
      courseC_PlayLab_events1_2018: 让乔治狗 (演员 1) 说 "大家好。“
      courseC_PlayLab_events1_2019: 让乔治狗 (演员 1) 说 "大家好。“
      courseC_PlayLab_events2: 你能让乔治狗 (演员 1) 说点什么, 然后让奥丽芙 (演员 2) 接着说些什么吗？
      courseC_PlayLab_events2_2018: 你能让乔治狗 (演员 1) 说点什么, 然后让奥丽芙 (演员 2) 接着说些什么吗？
      courseC_PlayLab_events2_2019: 你能让乔治狗 (演员 1) 说点什么, 然后让奥丽芙 (演员 2) 接着说些什么吗？
      courseC_PlayLab_events3: 你可以写一个程序来将乔治（演员1）移动到奥丽芙猫那里吗？
      courseC_PlayLab_events3_2018: 你可以写一个程序来将乔治（演员1）移动到奥丽芙猫那里吗？
      courseC_PlayLab_events3_2019: 你可以写一个程序来将乔治（演员1）移动到奥丽芙猫那里吗？
      courseC_PlayLab_events4: 你能写一个程序让乔治 (演员 1) 移到奥丽芙猫那里, 并在乔治到的时候让奥丽芙说 "你好"？
      courseC_PlayLab_events4_2018: 你能写一个程序让乔治 (演员 1) 移到奥丽芙猫那里, 并在乔治到的时候让奥丽芙说 "你好"？
      courseC_PlayLab_events4_2019: 你能写一个程序让乔治 (演员 1) 移到奥丽芙猫那里, 并在乔治到的时候让奥丽芙说 "你好"？
      courseC_PlayLab_events5: 你能写一个程序让章鱼奥克塔维亚在被点击的时候说 "有什么新鲜事吗？"？
      courseC_PlayLab_events5_2018: 你能写一个程序让章鱼奥克塔维亚在被点击的时候说 "有什么新鲜事吗？"？
      courseC_PlayLab_events5_2019: 你能写一个程序让章鱼奥克塔维亚在被点击的时候说 "有什么新鲜事吗？"？
      courseC_PlayLab_events6: 现在，写一个程序让企鹅四处移动，使用上/下/左/右键命中所有目标！
      courseC_PlayLab_events6_2018: 现在，写一个程序让企鹅四处移动，使用上/下/左/右键命中所有目标！
      courseC_PlayLab_events6_2019: 现在，写一个程序让企鹅四处移动，使用上/下/左/右键命中所有目标！
      courseC_PlayLab_events7: "`一直重复` 模块允许你一次又一次一直运行代码。使用这个模块让恐龙迪诺 (演员 2) 一直上下移动400像素。"
      courseC_PlayLab_events7_2018: "`一直重复` 模块允许你一次又一次一直运行代码。使用这个模块让恐龙迪诺 (演员 2) 一直上下移动400像素。"
      courseC_PlayLab_events7_2019: "`一直重复` 模块允许你一次又一次一直运行代码。使用这个模块让恐龙迪诺 (演员 2) 一直上下移动400像素。"
      courseC_PlayLab_events8: "你能让企鹅 (演员 1) 在碰到恐龙时播放 \"命中\" 的声音并说 \"哎呀!”吗？\r\n当你完成的时候，玩游戏来试试。"
      courseC_PlayLab_events8_2018: "你能让企鹅 (演员 1) 在碰到恐龙时播放 \"命中\" 的声音并说 \"哎呀!”吗？\r\n当你完成的时候，玩游戏来试试。"
      courseC_PlayLab_events8_2019: "你能让企鹅 (演员 1) 在碰到恐龙时播放 \"命中\" 的声音并说 \"哎呀!”吗？\r\n当你完成的时候，玩游戏来试试。"
      courseC_PlayLab_events9: "你可以添加一个模块让企鹅（演员1）在碰到章鱼奥克塔维亚（演员3）的时候得一分吗？\r\n玩此游戏，用箭头移动企鹅直到得分！"
      courseC_PlayLab_events9_2018: "你可以添加一个模块让企鹅（演员1）在碰到章鱼奥克塔维亚（演员3）的时候得一分吗？\r\n玩此游戏，用箭头移动企鹅直到得分！"
      courseC_PlayLab_events9_2019: "你可以添加一个模块让企鹅（演员1）在碰到章鱼奥克塔维亚（演员3）的时候得一分吗？\r\n玩此游戏，用箭头移动企鹅直到得分！"
      courseC_PlayLab_eventsA: "添加模块到`当运行时`事件来更改背景场面以及企鹅的速度。\r\n\r\n玩此游戏，用箭头移动企鹅直到得分。"
      courseC_PlayLab_eventsA_2018: "添加模块到`当运行时`事件来更改背景场面以及企鹅的速度。\r\n\r\n玩此游戏，用箭头移动企鹅直到得分。"
      courseC_PlayLab_eventsA_2019: "添加模块到`当运行时`事件来更改背景场面以及企鹅的速度。\r\n\r\n玩此游戏，用箭头移动企鹅直到得分。"
      courseC_PlayLab_eventsFP: 创造你自己的故事。完成后, 单击 "完成" 以与朋友共享。在提示中有故事的想法。
      courseC_PlayLab_eventsFP_2018: 创造你自己的故事。完成后, 单击 "完成" 以与朋友共享。在提示中有故事的想法。
      courseC_PlayLab_eventsFP_2019: 创造你自己的故事。完成后, 单击 "完成" 以与朋友共享。在提示中有故事的想法。
      courseC_PlayLab_events_challenge1: "用一块新模块，让企鹅在碰到恐龙和得分的时候能自动回到原点。\r\n玩这个游戏，并用箭头移动企鹅，直到你得到足够的分数。"
      courseC_PlayLab_events_challenge1_2018: "用一块新模块，让企鹅在碰到恐龙和得分的时候能自动回到原点。\r\n玩这个游戏，并用箭头移动企鹅，直到你得到足够的分数。"
      courseC_PlayLab_events_challenge1_2019: "用一块新模块，让企鹅在碰到恐龙和得分的时候能自动回到原点。\r\n玩这个游戏，并用箭头移动企鹅，直到你得到足够的分数。"
      courseC_PlayLab_events_challenge1_xy_blocks: "这里是一个有点复杂的新模块。用来让企鹅在遇到恐龙和得分的时候回到原点。这将使你的游戏更具挑战性和有趣!
        \r\n\r\n玩游戏和用箭头移动企鹅, 直到你得分足够的分数。"
      courseC_artist_loop1: 让我们添加一些活泼的东西!
      courseC_artist_loop1_2018: 让我们添加一些活泼的东西!
      courseC_artist_loop1_2019: 让我们添加一些活泼的东西!
      courseC_artist_loops1: "\"僵尸。 画图!\"\r\n\r\n僵尸想画一条线，从它这里到花园向日葵的线。 你能帮他吗？ \r \n*
        (花园在250像素以外) *  "
      courseC_artist_loops1a: '把艺术家带到游戏区的中心, 然后用贴纸画一只鸟。 '
      courseC_artist_loops1a_2018: '把艺术家带到游戏区的中心, 然后用贴纸画一只鸟。 '
      courseC_artist_loops1a_2019: '把艺术家带到游戏区的中心, 然后用贴纸画一只鸟。 '
      courseC_artist_loops2: 现在, 僵尸知道他的路线, 帮助他沿路挖洞种植更多的花朵!
      courseC_artist_loops2a: 现在, 用一个循环旋转你的鸟大约12次, 每次转30度。
      courseC_artist_loops2a_2018: 现在, 用一个循环旋转你的鸟大约12次, 每次转30度。
      courseC_artist_loops3: 非常好！ 现在, 花朵已经发芽, 帮助僵尸每隔50像素安置一个朋友来保护花朵, 直到他们长大。
      courseC_artist_loops3a: 现在添加一只蝙蝠!
      courseC_artist_loops3a_2018: 现在添加一只蝙蝠!
      courseC_artist_loops3a_2019: 现在添加一只蝙蝠!
      courseC_artist_loops4: 僵尸发现了一个空农场! 你能帮他把沿着边缘每100 像素贴上动物贴来让农场变热闹/活跃起来吗？
      courseC_artist_loops4a: 尝试向前跳跃75像素。
      courseC_artist_loops4a_2018: 尝试向前跳跃75像素。
      courseC_artist_loops4a_2019: 尝试向前跳跃75像素。
      courseC_artist_loops5: "很好! 现在是时候做一个围栏, 以防止动物跑出去。  \r\n\r\n"
      courseC_artist_loops5a: 尝试新的贴纸!
      courseC_artist_loops5a_2018: 尝试新的贴纸!
      courseC_artist_loops5a_2019: 尝试新的贴纸!
      courseC_artist_loops5b: 尝试添加线条!
      courseC_artist_loops5b_2018: 尝试添加线条!
      courseC_artist_loops5b_2019: 尝试添加线条!
      courseC_artist_loops6: "僵尸应该放在花园里什么？ \r\n\r\n\r\n"
      courseC_artist_loops6a: 添加另一个标签!
      courseC_artist_loops6a_2018: 添加另一个标签!
      courseC_artist_loops6a_2019: 添加另一个标签!
      courseC_artist_loops7a: 操练循环和角度。
      courseC_artist_loops7a_2018: 操练循环和角度。
      courseC_artist_loops7a_2019: 操练循环和角度。
      courseC_artist_loops8a: 现在尝试自己练习!
      courseC_artist_loops8a_2018: 现在尝试自己练习!
      courseC_artist_loops8a_2019: 现在尝试自己练习!
      courseC_artist_loopsPre1a: 是时候把那条线转过来了!
      courseC_artist_loopsPre1a_2018: 是时候把那条线转过来了!
      courseC_artist_loopsPre1a_2019: 是时候把那条线转过来了!
      courseC_artist_loopsPrePre1a: '把艺术家带到游戏区的中心, 然后画一条线。 '
      courseC_artist_loopsPrePre1a_2018: '把艺术家带到游戏区的中心, 然后画一条线。 '
      courseC_artist_loopsPrePre1a_2019: '把艺术家带到游戏区的中心, 然后画一条线。 '
      courseC_artist_loopsTemplate: 非常好！ 现在, 花朵已经发芽, 帮助僵尸每隔50像素安置一个朋友来保护花朵, 直到他们长大。
      courseC_artist_loopsTemplateA: '把艺术家带到游戏区的中心, 然后用贴纸画一只鸟。 '
      courseC_artist_loopsTemplateA_2018: '把艺术家带到游戏区的中心, 然后用贴纸画一只鸟。 '
      courseC_artist_loopsTemplateA_2019: '把艺术家带到游戏区的中心, 然后用贴纸画一只鸟。 '
      courseC_artist_prog1: 试试工具箱里的模块看他们能做什么！
      courseC_artist_prog1_2018: 试试工具箱里的模块看他们能做什么！
      courseC_artist_prog1_2019: 试试工具箱里的模块看他们能做什么！
      courseC_artist_prog2: 将模块拖到屏幕上，让艺术家在图中灰色线上画线。(每行100像素长)
      courseC_artist_prog2_2018: 将模块拖到屏幕上，让艺术家在图中灰色线上画线。(每行100像素长)
      courseC_artist_prog2_2019: 将模块拖到屏幕上，让艺术家在图中灰色线上画线。(每行100像素长)
      courseC_artist_prog3: 内部的正方形每条边是100像素，所有的角都是90度。
      courseC_artist_prog3_2018: 内部的正方形每条边是100像素，所有的角都是90度。
      courseC_artist_prog3_2019: 内部的正方形每条边是100像素，所有的角都是90度。
      courseC_artist_prog4: 完成斯黛拉的火箭, 这样她就可以追逐她的宠物。
      courseC_artist_prog4_2018: 完成斯黛拉的火箭, 这样她就可以追逐她的宠物。
      courseC_artist_prog4_2019: 完成斯黛拉的火箭, 这样她就可以追逐她的宠物。
      courseC_artist_prog5: "沿外部绘制一个矩形来完成此捉人游戏。\r\n（长边200像素，短边100像素）"
      courseC_artist_prog5_2018: "沿外部绘制一个矩形来完成此捉人游戏。\r\n（长边200像素，短边100像素）"
      courseC_artist_prog5_2019: "沿外部绘制一个矩形来完成此捉人游戏。\r\n（长边200像素，短边100像素）"
      courseC_artist_prog6: 绘制200像素边的菱形。
      courseC_artist_prog6_2018: 绘制200像素边的菱形。
      courseC_artist_prog6_2019: 绘制200像素边的菱形。
      courseC_artist_prog7: "** 挑战: ** 这个捉人游戏很特别! 你能想出如何画边框吗？"
      courseC_artist_prog7_2018: "** 挑战: ** 这个捉人游戏很特别! 你能想出如何画边框吗？"
      courseC_artist_prog7_2019: "** 挑战: ** 这个捉人游戏很特别! 你能想出如何画边框吗？"
      courseC_artist_prog8: "再来一个捉人游戏。这是一个派的三角形。\r\n（每边为150像素）"
      courseC_artist_prog8_2018: "再来一个捉人游戏。这是一个派的三角形。\r\n（每边为150像素）"
      courseC_artist_prog8_2019: "再来一个捉人游戏。这是一个派的三角形。\r\n（每边为150像素）"
      courseC_artist_prog_challenge1-doghouse: 让我们为乔治建个狗屋吧!
      courseC_artist_prog_challenge1: '为每种动物绘制房间。 '
      courseC_artist_prog_challenge1_2018: '为每种动物绘制房间。 '
      courseC_artist_prog_challenge1_2019: '为每种动物绘制房间。 '
      courseC_artist_prog_challenge2: "* 帮我在这条路上涂上黄线!*"
      courseC_artist_prog_challenge2a: '*"帮我在这条路上画黄线!"*'
      courseC_artist_prog_challenge2a_2018: '*"帮我在这条路上画黄线!"*'
      courseC_artist_prog_challenge2a_2019: '*"帮我在这条路上画黄线!"*'
      courseC_collector_loops_challenge2: 得到至少**5**个宝藏!
      courseC_collector_loops_challenge2_2018: 得到至少**5**个宝藏!
      courseC_collector_loops_challenge2_2019: 得到至少**5**个宝藏!
      courseC_collector_prog1: 试试这些模块，看看你能不能帮助罗瑞尔收集一些宝藏。
      courseC_collector_prog1_2018: 试试这些模块，看看你能不能帮助罗瑞尔收集一些宝藏。
      courseC_collector_prog1_2019: 试试这些模块，看看你能不能帮助罗瑞尔收集一些宝藏。
      courseC_collector_prog2: 把罗瑞尔移到宝藏上, 然后用 "收藏" 来捡起来。
      courseC_collector_prog2_2018: 把罗瑞尔移到宝藏上, 然后用 "收藏" 来捡起来。
      courseC_collector_prog2_2019: 把罗瑞尔移到宝藏上, 然后用 "收藏" 来捡起来。
      courseC_collector_prog3: 排列这些模块收集宝藏并通过此关卡。
      courseC_collector_prog3_2018: 排列这些模块收集宝藏并通过此关卡。
      courseC_collector_prog3_2019: 排列这些模块收集宝藏并通过此关卡。
      courseC_collector_prog4: 排列这些模块来收集所有的宝藏并通过此关卡。
      courseC_collector_prog4_2018: 排列这些模块来收集所有的宝藏并通过此关卡。
      courseC_collector_prog4_2019: 排列这些模块来收集所有的宝藏并通过此关卡。
      courseC_collector_prog5: 这些模块的顺序不对。你能修好它们吗？
      courseC_collector_prog5_2018: 这些模块的顺序不对。你能修好它们吗？
      courseC_collector_prog5_2019: 这些模块的顺序不对。你能修好它们吗？
      courseC_collector_prog6: 重新排列模块来收集所有的宝藏。
      courseC_collector_prog6_2018: 重新排列模块来收集所有的宝藏。
      courseC_collector_prog6_2019: 重新排列模块来收集所有的宝藏。
      courseC_collector_prog7: 使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog7_2018: 使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog7_2019: 使用工具箱中的模块来收集所有的宝藏。
      courseC_collector_prog8: '*"继续保持良好的工作! 帮我收集所有的宝藏。“*'
      courseC_collector_prog8_2018: '*"继续保持良好的工作! 帮我收集所有的宝藏。“*'
      courseC_collector_prog8_2019: '*"继续保持良好的工作! 帮我收集所有的宝藏。“*'
      courseC_collector_prog9: '*"让我们得到所有的宝藏!*'
      courseC_collector_prog9_2018: '*"让我们得到所有的宝藏!*'
      courseC_collector_prog9_2019: '*"让我们得到所有的宝藏!*'
      courseC_collector_progA: 帮助罗瑞尔收集所有的宝藏。
      courseC_collector_progB: 收集尽可能多的硬币来完成此关!
      courseC_collector_prog_challenge1: 仔细看! 你能收集所有 **10** 块宝藏吗？
      courseC_collector_prog_challenge1_2018: 仔细看! 你能收集所有 **10** 块宝藏吗？
      courseC_collector_prog_challenge1_2019: 仔细看! 你能收集所有 **10** 块宝藏吗？
      courseC_collector_prog_challenge2: 收集至少**10**个宝藏完成这一挑战!
      courseC_collector_prog_challenge2_2018: 收集至少**10**个宝藏完成这一挑战!
      courseC_collector_prog_challenge2_2019: 收集至少**10**个宝藏完成这一挑战!
      courseC_flappy_embed_events: 这里有一个游戏的例子, 你要自己来创造! 通过一两次游戏来想想自己要做什么。
      courseC_flappy_events1: 将 "拍打正常数量" 块附加到 "单击时" 情景, 然后按 "运行"。单击或点击播放空间, 将像素鸟移动到目的地。
      courseC_flappy_events10: '创建自己的像素鸟游戏! '
      courseC_flappy_events10_2018: '创建自己的像素鸟游戏! '
      courseC_flappy_events10_2019: '创建自己的像素鸟游戏! '
      courseC_flappy_events1_2018: 将 "拍打正常数量" 块附加到 "单击时" 情景, 然后按 "运行"。单击或点击播放空间, 将像素鸟移动到目的地。
      courseC_flappy_events1_2019: 将 "拍打正常数量" 块附加到 "单击时" 情景, 然后按 "运行"。单击或点击播放空间, 将像素鸟移动到目的地。
      courseC_flappy_events2: 在按下 "运行" 按钮时, 尝试添加一个设置速度级别的模块。 玩游戏并飞到目的地来继续。
      courseC_flappy_events2_2018: 在按下 "运行" 按钮时, 尝试添加一个设置速度级别的模块。 玩游戏并飞到目的地来继续。
      courseC_flappy_events2_2019: 在按下 "运行" 按钮时, 尝试添加一个设置速度级别的模块。 玩游戏并飞到目的地来继续。
      courseC_flappy_events3: 附加 ' 结束游戏 ' 块到 ' 当击中地面 ' 时的下面。  玩游戏, 把小鸟撞向地面来继续。
      courseC_flappy_events3_2018: 附加 ' 结束游戏 ' 块到 ' 当击中地面 ' 时的下面。  玩游戏, 把小鸟撞向地面来继续。
      courseC_flappy_events3_2019: 附加 ' 结束游戏 ' 块到 ' 当击中地面 ' 时的下面。  玩游戏, 把小鸟撞向地面来继续。
      courseC_flappy_events4: 附加一个块到 ' 当击中障碍 ' 事件中，以便在像素鸟撞到第一条管道时，游戏结束。
      courseC_flappy_events4_2018: 附加一个块到 ' 当击中障碍 ' 事件中，以便在像素鸟撞到第一条管道时，游戏结束。
      courseC_flappy_events4_2019: 附加一个块到 ' 当击中障碍 ' 事件中，以便在像素鸟撞到第一条管道时，游戏结束。
      courseC_flappy_events5: 在 "通过障碍" 情况时添加一个块, 然后等像素鸟飞过第一组管道的时候，按 "运行" 得一分。
      courseC_flappy_events5_2018: 在 "通过障碍" 情况时添加一个块, 然后等像素鸟飞过第一组管道的时候，按 "运行" 得一分。
      courseC_flappy_events5_2019: 在 "通过障碍" 情况时添加一个块, 然后等像素鸟飞过第一组管道的时候，按 "运行" 得一分。
      courseC_flappy_events6: 看你是否可以在每次你点击的时候，让像素鸟拍打更大或更小的距离，来得分。
      courseC_flappy_events6_2018: 看你是否可以在每次你点击的时候，让像素鸟拍打更大或更小的距离，来得分。
      courseC_flappy_events6_2019: 看你是否可以在每次你点击的时候，让像素鸟拍打更大或更小的距离，来得分。
      courseC_flappy_events7: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events7_2018: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events7_2019: 接下来, 尝试通过将一个模块附加到 "运行时" 事件来更改场景。
      courseC_flappy_events8: 当其他事件发生时, 尝试设置一个 **随机** 场景.....比如，当通过一个障碍物时。
      courseC_flappy_events8_2018: 当其他事件发生时, 尝试设置一个 **随机** 场景.....比如，当通过一个障碍物时。
      courseC_flappy_events8_2019: 当其他事件发生时, 尝试设置一个 **随机** 场景.....比如，当通过一个障碍物时。
      courseC_flappy_events9: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_flappy_events9_2018: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_flappy_events9_2019: 把事情混合起来, 在像素鸟击倒障碍物的时候不是让游戏停止，试着把分数归零。
      courseC_harvester_loops1: 使用循环来捡起所有的南瓜。
      courseC_harvester_loops10: 收集所有玉米和南瓜。
      courseC_harvester_loops10_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops10_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops11: 收集所有玉米和南瓜。
      courseC_harvester_loops11_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops11_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops1_2018: 使用循环来捡起所有的南瓜。
      courseC_harvester_loops1_2019: 使用循环来捡起所有的南瓜。
      courseC_harvester_loops2: 你能混合两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops2_2018: 你能混合两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops2_2019: 你能混合两个不同的循环来朝着南瓜移动，并收集它们吗？
      courseC_harvester_loops3: 收集所有南瓜。
      courseC_harvester_loops3_2018: 收集所有南瓜。
      courseC_harvester_loops3_2019: 收集所有南瓜。
      courseC_harvester_loops4: 收集所有玉米和南瓜。
      courseC_harvester_loops4_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops4_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops5: 收集所有玉米和南瓜。
      courseC_harvester_loops5_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops5_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops6: 收集所有玉米和南瓜。
      courseC_harvester_loops6_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops6_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops7: 收集所有玉米和南瓜。
      courseC_harvester_loops7_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops7_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops8: "**挑战：**收集所有玉米和南瓜。"
      courseC_harvester_loops8_2018: "**挑战：**收集所有玉米和南瓜。"
      courseC_harvester_loops8_2019: "**挑战：**收集所有玉米和南瓜。"
      courseC_harvester_loops9: 收集所有玉米和南瓜。
      courseC_harvester_loops9_2018: 收集所有玉米和南瓜。
      courseC_harvester_loops9_2019: 收集所有玉米和南瓜。
      courseC_harvester_loops_challenge1: 收集所有的玉米。
      courseC_harvester_loops_challenge1a: 收集所有的玉米。
      courseC_harvester_loops_challenge1a_2018: 收集所有的玉米。
      courseC_harvester_loops_challenge1a_2019: 收集所有的玉米。
      courseC_harvester_loops_challenge2: 收集所有的莴苣。避开树木和田野!
      courseC_harvester_loops_challenge2_2018: 收集所有的莴苣。避开树木和田野!
      courseC_harvester_loops_challenge2_2019: 收集所有的莴苣。避开树木和田野!
      courseC_harvester_loops_forVid: 收集所有玉米，莴苣和南瓜。
      courseC_maze_debugging1: 修好代码，来帮助斯奎特到达橡子。
      courseC_maze_debugging10: 通过重新排列并改变模块来调试这一关，让我到达那只猪！
      courseC_maze_debugging1_2018: 修好代码，来帮助斯奎特到达橡子。
      courseC_maze_debugging1_2019: 修好代码，来帮助斯奎特到达橡子。
      courseC_maze_debugging2: 用你的调试技能来帮助斯奎特到达橡子。
      courseC_maze_debugging2_2018: 用你的调试技能来帮助斯奎特到达橡子。
      courseC_maze_debugging2_2019: 用你的调试技能来帮助斯奎特到达橡子。
      courseC_maze_debugging3: 移除模块来帮助斯奎特到达橡子！
      courseC_maze_debugging3_2018: 移除模块来帮助斯奎特到达橡子！
      courseC_maze_debugging3_2019: 移除模块来帮助斯奎特到达橡子！
      courseC_maze_debugging4: 某些人的方向搞混了！你能帮忙吗？
      courseC_maze_debugging4_2018: 某些人的方向搞混了！你能帮忙吗？
      courseC_maze_debugging4_2019: 某些人的方向搞混了！你能帮忙吗？
      courseC_maze_debugging5: 通过重新排列和改动模块来调试这一关。
      courseC_maze_debugging5_2018: 通过重新排列和改动模块来调试这一关。
      courseC_maze_debugging5_2019: 通过重新排列和改动模块来调试这一关。
      courseC_maze_debugging6: 找出什么地方错了，并让斯奎特到达橡子。
      courseC_maze_debugging6_2018: 找出什么地方错了，并让斯奎特到达橡子。
      courseC_maze_debugging6_2019: 找出什么地方错了，并让斯奎特到达橡子。
      courseC_maze_debugging7: "** 挑战: ** 通过重新排列，添加和删除模块来调试这关。"
      courseC_maze_debugging7_2018: "** 挑战: ** 通过重新排列，添加和删除模块来调试这关。"
      courseC_maze_debugging7_2019: "** 挑战: ** 通过重新排列，添加和删除模块来调试这关。"
      courseC_maze_debugging8: 调试这一关，让斯奎特到达橡子。
      courseC_maze_debugging9: 调试这一关，让斯奎特到达橡子。
      courseC_maze_debugging9_2018: 调试这一关，让斯奎特到达橡子。
      courseC_maze_debugging9_2019: 调试这一关，让斯奎特到达橡子。
      courseC_maze_debugging_challenge1: 帮助斯奎特决定往哪条路转，才能得到橡子。
      courseC_maze_debugging_challenge1_2018: 帮助斯奎特决定往哪条路转，才能得到橡子。
      courseC_maze_debugging_challenge1_2019: 帮助斯奎特决定往哪条路转，才能得到橡子。
      courseC_maze_debugging_challenge2: 帮助斯奎特只用4次`转向`命令来获得橡子。
      courseC_maze_debugging_challenge2_2018: 帮助斯奎特只用4次`转向`命令来获得橡子。
      courseC_maze_debugging_challenge2_2019: 帮助斯奎特只用4次`转向`命令来获得橡子。
      courseC_maze_loops1: 你能把鸟带到猪那里吗？
      courseC_maze_loops10: 你做得很好! 继续!
      courseC_maze_loops11: 快要成功了！这次，选择你喜欢的路！
      courseC_maze_loops2: 你能通过创建一个只有`向前移动`的`重复`循环来让小鸟到达猪那里吗？
      courseC_maze_loops3: 通过创建一个循环来通过此关卡！
      courseC_maze_loops4: 在这一关中，两个`重复`循环会用最少的模块帮你将小鸟带到猪那里！
      courseC_maze_loops5: '*"让我用最快的方法到达猪那里！"*'
      courseC_maze_loops6: 循环里能放多于一个模块！你能循环这个序列吗？
      courseC_maze_loops7: 用你在其它关学到的知识！
      courseC_maze_loops8: 挑战：将从前几关的主意组合起来，完成这一关。
      courseC_maze_loops9: 你做得很好! 继续!
      courseC_maze_loops_challenge1: '现在, 斯奎特想尝试使用循环来找到他的橡子! '
      courseC_maze_loops_challenge1a: '现在, 斯奎特想尝试使用循环来找到他的橡子! '
      courseC_maze_loops_challenge1a_2018: '现在, 斯奎特想尝试使用循环来找到他的橡子! '
      courseC_maze_loops_challenge1a_2019: '现在, 斯奎特想尝试使用循环来找到他的橡子! '
      courseC_maze_loops_challenge2: 让我们使用循环来寻找宝藏! 通过找出此代码错误来帮助收集者得到所有的宝藏!
      courseC_maze_programming1: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseC_maze_programming1_2018: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseC_maze_programming1_2019: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseC_maze_programming2: 从工具箱中拖出另一个`向前移动`模块来完成代码。
      courseC_maze_programming2_2018: 从工具箱中拖出另一个`向前移动`模块来完成代码。
      courseC_maze_programming2_2019: 从工具箱中拖出另一个`向前移动`模块来完成代码。
      courseC_maze_programming3: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseC_maze_programming3_2018: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseC_maze_programming3_2019: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseC_maze_programming4: 躲开TNT炸药，否则羽毛会被炸飞！
      courseC_maze_programming4_2018: 躲开TNT炸药，否则羽毛会被炸飞！
      courseC_maze_programming4_2019: 躲开TNT炸药，否则羽毛会被炸飞！
      courseC_maze_programming5: 躲开TNT炸药！
      courseC_maze_programming5_2018: 躲开TNT炸药！
      courseC_maze_programming5_2019: 躲开TNT炸药！
      courseC_maze_programming6: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseC_maze_programming6_2018: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseC_maze_programming6_2019: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseC_maze_programming7: "**挑战：**这个代码有很多雪线。你需要移除一些模块，然后再加上另一些。"
      courseC_maze_programming7_2018: "**挑战：**这个代码有很多雪线。你需要移除一些模块，然后再加上另一些。"
      courseC_maze_programming7_2019: "**挑战：**这个代码有很多雪线。你需要移除一些模块，然后再加上另一些。"
      courseC_maze_programming8: '*"保持冷静，帮我找到那只坏猪。"*'
      courseC_maze_programming8_2018: '*"保持冷静，帮我找到那只坏猪。"*'
      courseC_maze_programming8_2019: '*"保持冷静，帮我找到那只坏猪。"*'
      courseC_maze_programming8_predict1: '*"保持冷静，帮我找到那只坏猪。"*'
      courseC_maze_programming8_predict1_2018: '*"保持冷静，帮我找到那只坏猪。"*'
      courseC_maze_programming8_predict1_2019: '*"保持冷静，帮我找到那只坏猪。"*'
      courseC_maze_programming9: '*"现在，用任何方法让我偷偷到达猪那里！"*'
      courseC_maze_programming9_2018: '*"现在，用任何方法让我偷偷到达猪那里！"*'
      courseC_maze_programming9_2019: '*"现在，用任何方法让我偷偷到达猪那里！"*'
      courseC_maze_programming_challenge1: '猪藏起来了，目标是找到它。 '
      courseC_maze_programming_challenge1_2018: '猪藏起来了，目标是找到它。 '
      courseC_maze_programming_challenge1_2019: '猪藏起来了，目标是找到它。 '
      courseC_maze_programming_challenge2: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_maze_programming_challenge2_2018: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_maze_programming_challenge2_2019: 有时, 解决同一问题的方法不止一种。有时候向后走比前进快!
      courseC_playLab_embedded: "这里有一个游戏给你玩! 要赢的话, 用你的方向键让企鹅遇到章鱼. \n\r\n一旦你完成了, 你将学会如何做这个游戏!"
      courseC_puppy_loops10: 你做得很好! 继续!
      courseC_puppy_loops11: 快要成功了！这次，选择你喜欢的路！
      courseC_puppy_loops8: 挑战：将从前几关的主意组合起来，完成这一关。
      courseC_puppy_loops8courseC_maze_loops8: 挑战：将从前几关的主意组合起来，完成这一关。
      courseC_puppy_loops9: 你做得很好! 继续!
      courseC_starWars_loops1: BB-8 会在他通过的地方捡起任何金属废料。用同一个模块5次, 让 BB-8 捡起场地中所有的废旧金属。
      courseC_starWars_loops10: 你做得很好! 继续!
      courseC_starWars_loops10_2018: 你做得很好! 继续!
      courseC_starWars_loops10_2019: 你做得很好! 继续!
      courseC_starWars_loops10_predict2: 你做得很好! 继续!
      courseC_starWars_loops10_predict2_2018: 你做得很好! 继续!
      courseC_starWars_loops10_predict2_2019: 你做得很好! 继续!
      courseC_starWars_loops11: 快要成功了！这次，选择你喜欢的路！
      courseC_starWars_loops11_2018: 快要成功了！这次，选择你喜欢的路！
      courseC_starWars_loops11_2019: 快要成功了！这次，选择你喜欢的路！
      courseC_starWars_loops1_2018: BB-8 会在他通过的地方捡起任何金属废料。用同一个模块5次, 让 BB-8 捡起场地中所有的废旧金属。
      courseC_starWars_loops1_2019: BB-8 会在他通过的地方捡起任何金属废料。用同一个模块5次, 让 BB-8 捡起场地中所有的废旧金属。
      courseC_starWars_loops1_predict1: BB-8 会在他通过的地方捡起任何金属废料。用同一个模块5次, 让 BB-8 捡起场地中所有的废旧金属。
      courseC_starWars_loops1_predict1_2018: BB-8 会在他通过的地方捡起任何金属废料。用同一个模块5次, 让 BB-8
        捡起场地中所有的废旧金属。
      courseC_starWars_loops1_predict1_2019: BB-8 会在他通过的地方捡起任何金属废料。用同一个模块5次, 让 BB-8
        捡起场地中所有的废旧金属。
      courseC_starWars_loops2: 要获取所有的废金属, 请尝试创建一个在 "重复"模块内只有一个模块的循环。
      courseC_starWars_loops2_2018: 要获取所有的废金属, 请尝试创建一个在 "重复"模块内只有一个模块的循环。
      courseC_starWars_loops2_2019: 要获取所有的废金属, 请尝试创建一个在 "重复"模块内只有一个模块的循环。
      courseC_starWars_loops4: 在这个关卡中, 两个`重复`循环将帮你用最少的模块获得 BB-8 的所有金属废料。
      courseC_starWars_loops4_2018: 在这个关卡中, 两个`重复`循环将帮你用最少的模块获得 BB-8 的所有金属废料。
      courseC_starWars_loops4_2019: 在这个关卡中, 两个`重复`循环将帮你用最少的模块获得 BB-8 的所有金属废料。
      courseC_starWars_loops5: 让 BB-8 尽快拿起所有的废金属!
      courseC_starWars_loops5_2018: 让 BB-8 尽快拿起所有的废金属!
      courseC_starWars_loops5_2019: 让 BB-8 尽快拿起所有的废金属!
      courseC_starWars_loops6: 循环里能放多于一个模块！你能循环这个序列吗？
      courseC_starWars_loops6_2018: 循环里能放多于一个模块！你能循环这个序列吗？
      courseC_starWars_loops6_2019: 循环里能放多于一个模块！你能循环这个序列吗？
      courseC_starWars_loops7: 你能试着只用一个循环就能得到所有的废金属吗？尝试先把所有代码写出来出来, 然后找到重复的代码放入循环中。
      courseC_starWars_loops7_2018: 你能试着只用一个循环就能得到所有的废金属吗？尝试先把所有代码写出来出来, 然后找到重复的代码放入循环中。
      courseC_starWars_loops7_2019: 你能试着只用一个循环就能得到所有的废金属吗？尝试先把所有代码写出来出来, 然后找到重复的代码放入循环中。
      courseC_starWars_loops9: 用你所学的东西来捡起所有的废铁!
      courseC_starWars_loops9_2018: 用你所学的东西来捡起所有的废铁!
      courseC_starWars_loops9_2019: 用你所学的东西来捡起所有的废铁!
      courseD_Frozen_nested1: '绘制一个小形状, 介于 ** 20 和50 **像素宽之间。 它可以是任何你喜欢的形状。  '
      courseD_Frozen_nested2: 现在用你选的形状连续画两或三个！
      courseD_Frozen_nested3: 让我们旋转那个形状的线吧!
      courseD_Frozen_nested4: 是时候把这些形状分层了!
      courseD_Frozen_nested5: 玩一玩雪花功能!
      courseD_Frozen_nested6: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      courseD_Frozen_nested7: 现在，转180度，再次绘制楼梯图案!
      courseD_Frozen_nested8: 在一个圆圈内旋转该形状大约5或6次。
      courseD_Frozen_nested9: "试着改动一下你所创造的东西。画任何你喜欢的东西! \r\n- 如果你在台阶上使用两个不同的角度, 会发生什么？\r\n-
        如果你把你的钻石图案变长或变短, 会发生什么？\r\n- 如果把两片雪花叠起来是什么样的？"
      courseD_artist_1_2018: "画一个**50**像素边长的六边形。\r\n"
      courseD_artist_1_2018_2019: "画一个**50**像素边长的六边形。\r\n"
      courseD_artist_2_2018: "现在，向右转**60**度，然后画一条**150**像素长的直线，并跳回到区域中心。\r\n"
      courseD_artist_2_2018_2019: "现在，向右转**60**度，然后画一条**150**像素长的直线，并跳回到区域中心。\r\n"
      courseD_artist_3_2018: '将所有代码嵌入到另一个`重复`循环中，并运行**6**次。 '
      courseD_artist_3_2018_2019: '将所有代码嵌入到另一个`重复`循环中，并运行**6**次。 '
      courseD_artist_4_2018: 在线的末尾增加一个小形状！
      courseD_artist_4_2018_2019: 在线的末尾增加一个小形状！
      courseD_artist_5_2018: 玩一玩雪花功能!
      courseD_artist_5_2018_2019: 玩一玩雪花功能!
      courseD_artist_6_2018: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      courseD_artist_6_2018_2019: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      courseD_artist_7_2018: 现在，转180度，再次绘制楼梯图案!
      courseD_artist_8_2018: 在一个圆圈内旋转该形状大约5或6次。
      courseD_artist_9_2018: "试着改动一下你所创造的东西。画任何你喜欢的东西! \r\n- 如果你在台阶上使用两个不同的角度, 会发生什么？\r\n-
        如果你把你的钻石图案变长或变短, 会发生什么？\r\n- 如果把两片雪花叠起来是什么样的？"
      courseD_artist_binary1: 用下面的模块来让小画家在第一行画出二进制字符串“01010101”。
      courseD_artist_binary1_2018: 用下面的模块来让小画家在第一行画出二进制字符串“01010101”。
      courseD_artist_binary1_2019: 用下面的模块来让小画家在第一行画出二进制字符串“01010101”。
      courseD_artist_binary2: 运行代码来看看小艺术家如何用二进制画出这幅图案。
      courseD_artist_binary2_2018: 运行代码来看看小艺术家如何用二进制画出这幅图案。
      courseD_artist_binary2_2019: 运行代码来看看小艺术家如何用二进制画出这幅图案。
      courseD_artist_binary3: 哪个二进制字符串能让你循环8次来画出这个图像？
      courseD_artist_binary3_2018: 哪个二进制字符串能让你循环8次来画出这个图像？
      courseD_artist_binary3_2019: 哪个二进制字符串能让你循环8次来画出这个图像？
      courseD_artist_binary4: 你能通过循环3个二进制位（0和1）来画出这个图形吗？
      courseD_artist_binary4_2018: 你能通过循环3个二进制位（0和1）来画出这个图形吗？
      courseD_artist_binary4_2019: 你能通过循环3个二进制位（0和1）来画出这个图形吗？
      courseD_artist_binary5: "下面的每个二进制字符串表达了这个图片的一行。\r\n\r\n你能重新排列它们，用笑脸代替皱眉吗？"
      courseD_artist_binary5_2018: "下面的每个二进制字符串表达了这个图片的一行。\r\n\r\n你能重新排列它们，用笑脸代替皱眉吗？"
      courseD_artist_binary5_2019: "下面的每个二进制字符串表达了这个图片的一行。\r\n\r\n你能重新排列它们，用笑脸代替皱眉吗？"
      courseD_artist_binary6: 哪个6位的二进制字符串重复11次后能够画出这个图形?
      courseD_artist_binary6_2018: 哪个6位的二进制字符串重复11次后能够画出这个图形?
      courseD_artist_binary6_2019: 哪个6位的二进制字符串重复11次后能够画出这个图形?
      courseD_artist_binary7: 能让你重复并画出这个图形的最短的二进制字符串是什么?
      courseD_artist_binary7_2018: 能让你重复并画出这个图形的最短的二进制字符串是什么?
      courseD_artist_binary7_2019: 能让你重复并画出这个图形的最短的二进制字符串是什么?
      courseD_artist_binary8: 完成代码来创建此图。
      courseD_artist_binary8_2018: 完成代码来创建此图。
      courseD_artist_binary8_2019: 完成代码来创建此图。
      courseD_artist_binary8_predict1: 完成代码来创建此图。
      courseD_artist_binary8_predict1_2018: 完成代码来创建此图。
      courseD_artist_binary8_predict1_2019: 完成代码来创建此图。
      courseD_artist_binaryFP: "这是更高分辨率的画布 - 16像素乘以16像素！\r\n\r\n看看你用二进制位能创造出什么？"
      courseD_artist_binaryFP8: "**自由发挥：**用二进制画出任何你想的！ "
      courseD_artist_binaryFP_2018: "这是更高分辨率的画布 - 16像素乘以16像素！\r\n\r\n看看你用二进制位能创造出什么？"
      courseD_artist_binaryFP_2019: "这是更高分辨率的画布 - 16像素乘以16像素！\r\n\r\n看看你用二进制位能创造出什么？"
      courseD_artist_binary_challenge0: 请尝试使用嵌套循环来完成此图。
      courseD_artist_binary_challenge1: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      courseD_artist_binary_challenge1_2018: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      courseD_artist_binary_challenge1_2019: 在这个谜题中，您只能使用每个二进制值 (0或1) 一次。请尝试使用嵌套循环来画这幅图。
      courseD_artist_binary_challenge2: 你是否有足够的毅力让这个标志回到正常状态？
      courseD_artist_binary_challenge2_2018: 你是否有足够的毅力让这个标志回到正常状态？
      courseD_artist_binary_challenge2_2019: 你是否有足够的毅力让这个标志回到正常状态？
      courseD_artist_binary_challenge3: 你是否有足够的毅力让这个标志回到正常状态？
      courseD_artist_embed_frozen: 按下运行键来看看雪花设计!
      courseD_artist_embed_frozen2: 按下运行键来看看雪花设计!
      courseD_artist_functions10: 这次，用8个（25像素边长的）六边形的线。
      courseD_artist_functions2: "这一次, 使用`draw a square`（画一个正方形）函数来创建眼镜。 \r\n"
      courseD_artist_functions3: 可以通过添加重复模块来绘制此画。
      courseD_artist_functions4: 现在你能画一个星星了，试试画4个星星！
      courseD_artist_functions5: 只画3个星星来完成这关。
      courseD_artist_functions6: 通过画一个正方形来制作这个窗口，然后在画另一个前转90度，等等。
      courseD_artist_functions7: 创建`画一个窗口`，然后调用它5次来通过这一关。小心门！
      courseD_artist_functions8: 挑战：创建你能想到的尽可能多的函数来画出这个50像素的正方形的图案。
      courseD_artist_functions9: 只用提供的模块来画出这个图。
      courseD_artist_nestedLoops1: "画一个三角形来开始这个阶段。\r\n（每条边是100像素长，你需要在每个外角转120度。）"
      courseD_artist_nestedLoops10: 从以前的代码里活动的正方形，但这次只需要7个，并将它们排成一行。
      courseD_artist_nestedLoops10_2018: 从以前的代码里活动的正方形，但这次只需要7个，并将它们排成一行。
      courseD_artist_nestedLoops10_2019: 从以前的代码里活动的正方形，但这次只需要7个，并将它们排成一行。
      courseD_artist_nestedLoops1_2018: "画一个三角形来开始这个阶段。\r\n（每条边是100像素长，你需要在每个外角转120度。）"
      courseD_artist_nestedLoops1_2019: "画一个三角形来开始这个阶段。\r\n（每条边是100像素长，你需要在每个外角转120度。）"
      courseD_artist_nestedLoops1a: '现在循环6次三角形。

'
      courseD_artist_nestedLoops1a_2018: '现在循环6次三角形。

'
      courseD_artist_nestedLoops1a_2019: '现在循环6次三角形。

'
      courseD_artist_nestedLoops2: 这次，用尽可能少的模块完成这关。
      courseD_artist_nestedLoops2_2018: 这次，用尽可能少的模块完成这关。
      courseD_artist_nestedLoops2_2019: 这次，用尽可能少的模块完成这关。
      courseD_artist_nestedLoops3: "用你的新技能来快速的画出这个建筑物的最后一行窗户。\r\n\r\n窗户是20像素的正方形，每个之间相隔20像素。"
      courseD_artist_nestedLoops3_2018: "用你的新技能来快速的画出这个建筑物的最后一行窗户。\r\n\r\n窗户是20像素的正方形，每个之间相隔20像素。"
      courseD_artist_nestedLoops3_2019: "用你的新技能来快速的画出这个建筑物的最后一行窗户。\r\n\r\n窗户是20像素的正方形，每个之间相隔20像素。"
      courseD_artist_nestedLoops4: 太好了！用这些圆圈做同样的事情。
      courseD_artist_nestedLoops4_2018: 太好了！用这些圆圈做同样的事情。
      courseD_artist_nestedLoops4_2019: 太好了！用这些圆圈做同样的事情。
      courseD_artist_nestedLoops5: 如果在圆圈之间你也转90度，会如何？
      courseD_artist_nestedLoops5_2018: 如果在圆圈之间你也转90度，会如何？
      courseD_artist_nestedLoops5_2019: 如果在圆圈之间你也转90度，会如何？
      courseD_artist_nestedLoops6: 在已有的代码里编辑模块来创建这幅图。
      courseD_artist_nestedLoops7: 用你学到的知识来创建这幅图。
      courseD_artist_nestedLoops7_2018: 用你学到的知识来创建这幅图。
      courseD_artist_nestedLoops7_2019: 用你学到的知识来创建这幅图。
      courseD_artist_nestedLoops8: 用你在前几关学到的，从头创建这幅图。
      courseD_artist_nestedLoops8_2018: 用你在前几关学到的，从头创建这幅图。
      courseD_artist_nestedLoops8_2019: 用你在前几关学到的，从头创建这幅图。
      courseD_artist_nestedLoops9: "** 挑战: ** 你能想出如何制作这样的照片吗？"
      courseD_artist_nestedLoops9_2018: "** 挑战: ** 你能想出如何制作这样的照片吗？"
      courseD_artist_nestedLoops9_2019: "** 挑战: ** 你能想出如何制作这样的照片吗？"
      courseD_artist_nestedLoops9_predict1: "** 挑战: ** 你能想出如何制作这样的照片吗？"
      courseD_artist_nestedLoops9_predict1_2018: "** 挑战: ** 你能想出如何制作这样的照片吗？"
      courseD_artist_nestedLoops9_predict1_2019: "** 挑战: ** 你能想出如何制作这样的照片吗？"
      courseD_artist_nestedLoopsFP: 现在到你了。用你学到的技能，创造一些自己喜欢的东西吧！
      courseD_artist_nestedLoopsFP_2018: 现在到你了。用你学到的技能，创造一些自己喜欢的东西吧！
      courseD_artist_nestedLoopsFP_2019: 现在到你了。用你学到的技能，创造一些自己喜欢的东西吧！
      courseD_artist_nestedLoopsPre1: 创建一个三角形来开始这个阶段。
      courseD_artist_nestedLoops_challenge1: 你能想出怎么制作出这样的照片吗？
      courseD_artist_nestedLoops_challenge1_2018: 你能想出怎么制作出这样的照片吗？
      courseD_artist_nestedLoops_challenge1_2019: 你能想出怎么制作出这样的照片吗？
      courseD_artist_nestedLoops_challenge2: 修复代码来制作这张图！
      courseD_artist_nestedLoops_challenge2_2018: 修复代码来制作这张图！
      courseD_artist_nestedLoops_challenge2_2019: 修复代码来制作这张图！
      courseD_artist_project1: '绘制一个小形状, 介于 ** 20 和50 **像素宽之间。 它可以是任何你喜欢的形状。  '
      courseD_artist_project1_2018: '绘制一个小形状, 介于 ** 20 和50 **像素宽之间。 它可以是任何你喜欢的形状。  '
      courseD_artist_project1_2019: '绘制一个小形状, 介于 ** 20 和50 **像素宽之间。 它可以是任何你喜欢的形状。  '
      courseD_artist_project1a: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      courseD_artist_project1a_2018: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      courseD_artist_project1a_2019: 画一个阶梯楼梯模式, 使用75和105度之间的角度来转弯。
      courseD_artist_project2: 现在用你选的形状连续画两或三个！
      courseD_artist_project2_2018: 现在用你选的形状连续画两或三个！
      courseD_artist_project2_2019: 现在用你选的形状连续画两或三个！
      courseD_artist_project2a: 现在，转180度，再次绘制楼梯图案!
      courseD_artist_project2a_2018: 现在，转180度，再次绘制楼梯图案!
      courseD_artist_project2a_2019: 现在，转180度，再次绘制楼梯图案!
      courseD_artist_project3: 让我们旋转那个形状的线吧!
      courseD_artist_project3_2018: 让我们旋转那个形状的线吧!
      courseD_artist_project3_2019: 让我们旋转那个形状的线吧!
      courseD_artist_project3a: 在一个圆圈内旋转该形状大约5或6次。
      courseD_artist_project3a_2018: 在一个圆圈内旋转该形状大约5或6次。
      courseD_artist_project3a_2019: 在一个圆圈内旋转该形状大约5或6次。
      courseD_artist_project4: 是时候把这些形状分层了!
      courseD_artist_project4_2018: 是时候把这些形状分层了!
      courseD_artist_project4_2019: 是时候把这些形状分层了!
      courseD_artist_project4a: "试着改动一下你所创造的东西。画任何你喜欢的东西! \r\n- 如果你在台阶上使用两个不同的角度,
        会发生什么？\r\n- 如果你把你的钻石图案变长或变短, 会发生什么？\r\n- 如果把两片雪花叠起来是什么样的？"
      courseD_artist_project4a_2018: "试着改动一下你所创造的东西。画任何你喜欢的东西! \r\n- 如果你在台阶上使用两个不同的角度,
        会发生什么？\r\n- 如果你把你的钻石图案变长或变短, 会发生什么？\r\n- 如果把两片雪花叠起来是什么样的？"
      courseD_artist_project4a_2019: "试着改动一下你所创造的东西。画任何你喜欢的东西! \r\n- 如果你在台阶上使用两个不同的角度,
        会发生什么？\r\n- 如果你把你的钻石图案变长或变短, 会发生什么？\r\n- 如果把两片雪花叠起来是什么样的？"
      courseD_artist_project5: 玩一玩雪花功能!
      courseD_artist_project5_2018: 玩一玩雪花功能!
      courseD_artist_project5_2019: 玩一玩雪花功能!
      courseD_artist_project_embedded: 这是你即将要做的！
      courseD_artist_ramp11: 现在用艺术家做一个正方形!
      courseD_artist_ramp12: 用你学过的东西在正方形里面画这个三角形。
      courseD_autorun_binary2_2019: 运行代码来看看小艺术家如何用二进制画出这幅图案。
      courseD_autorun_binary3_2019: 哪个二进制字符串能让你循环8次来画出这个图像？
      courseD_autorun_binary4_2019: 你能通过循环3个二进制位（0和1）来画出这个图形吗？
      courseD_autorun_binary5_2019: "下面的每个二进制字符串表达了这个图片的一行。\r\n\r\n你能重新排列它们，用笑脸代替皱眉吗？"
      courseD_autorun_binary6_2019: 哪个6位的二进制字符串重复11次后能够画出这个图形?
      courseD_autorun_binary7_2019: 能让你重复并画出这个图形的最短的二进制字符串是什么?
      courseD_autorun_binary8_2019: 完成代码来创建此图。
      courseD_autorun_binary8_predict1_2019: 完成代码来创建此图。
      courseD_bee_conditionals1: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      courseD_bee_conditionals10: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals10_2018: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals10_2019: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals1_predict1: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      courseD_bee_conditionals1_predict1_2018: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      courseD_bee_conditionals1_predict1_2019: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      courseD_bee_conditionals2: '在采集花蜜前，检查每朵云下面是不是有花。  '
      courseD_bee_conditionals2_2018: '在采集花蜜前，检查每朵云下面是不是有花。  '
      courseD_bee_conditionals2_2019: '在采集花蜜前，检查每朵云下面是不是有花。  '
      courseD_bee_conditionals2_test: '在采集花蜜前，检查每朵云下面是不是有花。  '
      courseD_bee_conditionals3: "帮助蜜蜂采集所有的花蜜。\n\r\n\r\n只能从花中采到花蜜，但可以查看任何地方看那里是不是有朵花。"
      courseD_bee_conditionals3_2018: "帮助蜜蜂采集所有的花蜜。\n\r\n\r\n只能从花中采到花蜜，但可以查看任何地方看那里是不是有朵花。"
      courseD_bee_conditionals3_2019: "帮助蜜蜂采集所有的花蜜。\n\r\n\r\n只能从花中采到花蜜，但可以查看任何地方看那里是不是有朵花。"
      courseD_bee_conditionals4: 使用尽可能少的模块来收集所有的花蜜。
      courseD_bee_conditionals4_2018: 使用尽可能少的模块来收集所有的花蜜。
      courseD_bee_conditionals4_2019: 使用尽可能少的模块来收集所有的花蜜。
      courseD_bee_conditionals5: 使用尽可能少的模块来收集所有的花蜜。
      courseD_bee_conditionals5_2018: 使用尽可能少的模块来收集所有的花蜜。
      courseD_bee_conditionals5_2019: 使用尽可能少的模块来收集所有的花蜜。
      courseD_bee_conditionals6: 有些云下面可能有蜂窝。 一定要检查是否有蜂窝藏在每朵云后面!
      courseD_bee_conditionals6_2018: 有些云下面可能有蜂窝。 一定要检查是否有蜂窝藏在每朵云后面!
      courseD_bee_conditionals6_2019: 有些云下面可能有蜂窝。 一定要检查是否有蜂窝藏在每朵云后面!
      courseD_bee_conditionals7: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseD_bee_conditionals7_2018: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseD_bee_conditionals7_2019: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseD_bee_conditionals7_predict2: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseD_bee_conditionals7_predict2_2018: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseD_bee_conditionals7_predict2_2019: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseD_bee_conditionals8: "如果有花，收集花蜜。\r\n否则, 酿蜂蜜（因为那里有蜂窝）。"
      courseD_bee_conditionals8_2018: "如果有花，收集花蜜。\r\n否则, 酿蜂蜜（因为那里有蜂窝）。"
      courseD_bee_conditionals8_2019: "如果有花，收集花蜜。\r\n否则, 酿蜂蜜（因为那里有蜂窝）。"
      courseD_bee_conditionals9: 收集所有的花蜜或制作蜂蜜。
      courseD_bee_conditionals9_2018: 收集所有的花蜜或制作蜂蜜。
      courseD_bee_conditionals9_2019: 收集所有的花蜜或制作蜂蜜。
      courseD_bee_conditionals_challenge1: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals_challenge1_2018: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals_challenge1_2019: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals_challenge2: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals_challenge2_2018: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals_challenge2_2019: 收集所有的花蜜并制作蜂蜜。
      courseD_bee_conditionals_challenge3: 收集所有的花蜜或制作蜂蜜。
      courseD_bee_debugging1: 修复错误来收集所有的花蜜。
      courseD_bee_debugging2: 修复错误来收集所有的花蜜。
      courseD_bee_debugging3: 修复错误来收集所有的花蜜并酿蜂蜜。
      courseD_bee_debugging4: 修复错误来酿蜂蜜。
      courseD_bee_debugging5: 挑战：所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_bee_debugging6: '挑战: 修复错误来收集所有的花蜜并酿蜂蜜。'
      courseD_bee_debugging9: 帮助蜜蜂修复代码, 获得所有的花蜜。
      courseD_bee_debugging_challenge1: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_debugging_challenge1_2018: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_debugging_challenge1a: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_debugging_challenge2: 看蜜蜂如何得到花蜜。你能用同一种图案来帮助蜜蜂制造所有的蜂蜜吗？
      courseD_bee_nestedLoops1: 帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops1_2018: 帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops1_2019: 帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops1a: 帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops1a_2018: 帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops1a_2019: 帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_2018: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_2019: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1_2018: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops2_predict1_2019: 这一次, 使用尽可能少的模块帮助蜜蜂收集所有的花蜜。
      courseD_bee_nestedLoops3: 收集每朵花的花蜜。
      courseD_bee_nestedLoops5: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops6: 酿花蜜。
      courseD_bee_nestedLoops6_2018: 只使用已有的模块把僵尸带到向日葵那里。
      courseD_bee_nestedLoops7: '挑战: 找出如何只用现有的模块得到所有的花蜜。'
      courseD_bee_nestedLoops7_2018: '挑战: 找出如何只用现有的模块得到所有的花蜜。'
      courseD_bee_nestedLoops7_2019: '挑战: 找出如何只用现有的模块得到所有的花蜜。'
      courseD_bee_nestedLoops8: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops8_2018: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops8_2019: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      courseD_bee_nestedLoops9: 酿蜂蜜。
      courseD_bee_nestedLoops9_2018: 酿蜂蜜。
      courseD_bee_nestedLoops9_2019: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2_2018: 酿蜂蜜。
      courseD_bee_nestedLoops9_predict2_2019: 酿蜂蜜。
      courseD_bee_nested_loops_challenge1: |-
        让我们寻找宝藏
        - 使用循环！帮助收集器只使用工具箱中的模块来得到至少两堆宝藏。
      courseD_bee_nested_loops_challenge2: |-
        让我们寻找宝藏
        - 使用循环！帮助收集器只使用工具箱中的模块来得到至少两堆宝藏。
      courseD_bounce_embed_endgame: 使用左右箭头移动乒乓球拍。看看你的对手两次得分之前你能得到多少分!
      courseD_bounce_embedded: 在此处编写说明
      courseD_bounce_events1: 将一个模块附加到 "当按左键" 块中, 然后按 "运行" 将播放机移动到旗帜上。
      courseD_bounce_events10: 顶部有一个目标。添加 "得分点" 和 "得分对手点" 方块到"当球在球门" 和 "当球错过桨" 方块，来做一个游戏。看看你能在对手得分两次之前得分多少分。
      courseD_bounce_events10s: '把 "得分点" 块加到“当球击中”的事件上。将 '' 对手得分点 '' 模块加到“球错过球拍”的事件上。这样来创建这个游戏。 '
      courseD_bounce_events10s_2018: '把 "得分点" 块加到“当球击中”的事件上。将 '' 对手得分点 '' 模块加到“球错过球拍”的事件上。这样来创建这个游戏。 '
      courseD_bounce_events10s_2019: '把 "得分点" 块加到“当球击中”的事件上。将 '' 对手得分点 '' 模块加到“球错过球拍”的事件上。这样来创建这个游戏。 '
      courseD_bounce_events11: 现在，你可以在"运行时"模块下附加模块了. 你必须在多个地方附加新的"启动新球"模块. 此外，试着改变场景或球拍和球的速度，看看在你对手得两分之前你能得多少分.
      courseD_bounce_events11s: '在所有需要新球的游戏里面加上"扔出新球" 模块。 '
      courseD_bounce_events11s_2018: '在所有需要新球的游戏里面加上"扔出新球" 模块。 '
      courseD_bounce_events11s_2019: '在所有需要新球的游戏里面加上"扔出新球" 模块。 '
      courseD_bounce_events12: 创建您自己的弹跳游戏。您可以更改所有的视觉效果和规则。单击完成，让朋友在手机上试试你的游戏。
      courseD_bounce_events12s: 让这个游戏成为你自己的。你可以改变所有的视觉效果和规则。完成后, 单击 "完成", 让朋友在手机上试用您的游戏。
      courseD_bounce_events12s_2018: 让这个游戏成为你自己的。你可以改变所有的视觉效果和规则。完成后, 单击 "完成", 让朋友在手机上试用您的游戏。
      courseD_bounce_events12s_2019: 让这个游戏成为你自己的。你可以改变所有的视觉效果和规则。完成后, 单击 "完成", 让朋友在手机上试用您的游戏。
      courseD_bounce_events1s: 将一个模块加到 "当按下左键时"模块下，并按 "运行" 将播放机移动到网上。
      courseD_bounce_events1s_2018: 将一个模块加到 "当按下左键时"模块下，并按 "运行" 将播放机移动到网上。
      courseD_bounce_events1s_2019: 将一个模块加到 "当按下左键时"模块下，并按 "运行" 将播放机移动到网上。
      courseD_bounce_events2: 在"当按左方向键时"块和“当按右方向键时”块下面添加块，然后按"运行程序"。移动球拍到达两边的目标。
      courseD_bounce_events2s: 现在, 在 "当向右时" 中附加一个方块, 这样手就可以够到两个篮子。
      courseD_bounce_events2s_2018: 现在, 在 "当向右时" 中附加一个方块, 这样手就可以够到两个篮子。
      courseD_bounce_events2s_2019: 现在, 在 "当向右时" 中附加一个方块, 这样手就可以够到两个篮子。
      courseD_bounce_events3: 现在，尝试类似的做法用"当按上键时"块，来移动球拍到顶部目标。
      courseD_bounce_events3s: 现在，尝试类似的做法用"当按上键时"块，来移动球拍到顶部目标。
      courseD_bounce_events4: 这次你需要添加四个块。移动到所有四个球拍完成目标，以完成这个关卡。
      courseD_bounce_events4s: 这次你需要添加四个块。移动到所有四个球拍完成目标，以完成这个关卡。
      courseD_bounce_events5: 我们要将球发向球拍。将一个模块附加到"当球击中桨"模块以确保球能到达目标。
      courseD_bounce_events5s: 将一个方块连接到 ' 当球击中手 ' 情景, 以确保球到达篮框。
      courseD_bounce_events5s_2018: 将一个方块连接到 ' 当球击中手 ' 情景, 以确保球到达篮框。
      courseD_bounce_events5s_2019: 将一个方块连接到 ' 当球击中手 ' 情景, 以确保球到达篮框。
      courseD_bounce_events6: 现在完成的目标是在顶上。您需要将模块附加到这两个"当球击中"模块中以通过这关。
      courseD_bounce_events6s: 添加代码, 使球弹跳时, 可以击中墙壁, 这样你才可以通关。
      courseD_bounce_events6s_2018: 添加代码, 使球弹跳时, 可以击中墙壁, 这样你才可以通关。
      courseD_bounce_events6s_2019: 添加代码, 使球弹跳时, 可以击中墙壁, 这样你才可以通关。
      courseD_bounce_events7: 将模块附加到每个"当.... 时"中模块。弹起球，直到它击中目标。
      courseD_bounce_events7s: 加入声音模块，当你击中篮筐时, 网会发出沙沙声。当球没碰到你的手时, 哨子会响。弹起球, 直到它击中完成目标。
      courseD_bounce_events7s_2018: 加入声音模块，当你击中篮筐时, 网会发出沙沙声。当球没碰到你的手时, 哨子会响。弹起球, 直到它击中完成目标。
      courseD_bounce_events7s_2019: 加入声音模块，当你击中篮筐时, 网会发出沙沙声。当球没碰到你的手时, 哨子会响。弹起球, 直到它击中完成目标。
      courseD_collector_debugging1: 修复错误来收集所有的宝藏。
      courseD_collector_debugging1_2018: 修复错误来收集所有的宝藏。
      courseD_collector_debugging1a: 修复错误来收集所有的宝藏。
      courseD_collector_debugging1a_2018: 修复错误来收集所有的宝藏。
      courseD_collector_debugging1a_2019: 修复错误来收集所有的宝藏。
      courseD_collector_debugging2: 修复错误来收集所有的宝藏。
      courseD_collector_debugging2_2018: 修复错误来收集所有的宝藏。
      courseD_collector_debugging2a: 修复错误来收集所有的宝藏。
      courseD_collector_debugging2a_2018: 修复错误来收集所有的宝藏。
      courseD_collector_debugging2a_2019: 修复错误来收集所有的宝藏。
      courseD_collector_debugging3: 修复错误来收集所有的宝藏。
      courseD_collector_debugging3_2018: 修复错误来收集所有的宝藏。
      courseD_collector_debugging3a: 修复错误来收集所有的宝藏。
      courseD_collector_debugging3a_2018: 修复错误来收集所有的宝藏。
      courseD_collector_debugging3a_2019: 修复错误来收集所有的宝藏。
      courseD_collector_debugging4: 修复错误来收集所有的宝藏。
      courseD_collector_debugging4_2018: 修复错误来收集所有的宝藏。
      courseD_collector_debugging4a: 修复错误来收集所有的宝藏。
      courseD_collector_debugging4a_2018: 修复错误来收集所有的宝藏。
      courseD_collector_debugging4a_2019: 修复错误来收集所有的宝藏。
      courseD_collector_debugging5: 所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_collector_debugging5_2018: 所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_collector_debugging5a: 所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_collector_debugging5a_2018: 所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_collector_debugging5a_2019: 所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_collector_debugging6: '挑战: 使用调试技巧来修复错误并收集所有的宝藏。'
      courseD_collector_debugging6_2018: '挑战: 使用调试技巧来修复错误并收集所有的宝藏。'
      courseD_collector_debugging6a: '挑战: 使用工作区的代码得到至少 ** 6 ** 块宝藏!'
      courseD_collector_debugging6a_2018: '挑战: 使用工作区的代码得到至少 ** 6 ** 块宝藏!'
      courseD_collector_debugging6a_2019: '挑战: 使用工作区的代码得到至少 ** 6 ** 块宝藏!'
      courseD_collector_debugging7: 挑战：所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_collector_debugging_challenge2: 您是嵌套循环的专家吗？使用你所学到的收集所有的宝藏!
      courseD_collector_debugging_challenge2_2018: 您是嵌套循环的专家吗？使用你所学到的收集所有的宝藏!
      courseD_collector_nested_loops_challenge2: 帮助收藏家只使用你工具箱里的块来拿到至少两堆宝藏。这里可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2_2018: 帮助收藏家只使用你工具箱里的块来拿到至少两堆宝藏。这里可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2_2019: 帮助收藏家只使用你工具箱里的块来拿到至少两堆宝藏。这里可能收集到所有4堆。
      courseD_collector_nested_loops_challenge2a: 帮助收藏家只使用你工具箱里的块来拿到至少两堆宝藏。这里可能收集到所有4堆。
      courseD_collector_ramp10: 帮助罗瑞尔收集所有的宝藏。
      courseD_collector_ramp8: 帮助罗瑞尔收集所有的宝藏。
      courseD_collector_ramp9: 帮助罗瑞尔收集所有的宝藏。
      courseD_collector_until_challenge1: 您是嵌套循环的专家吗？使用你所学到的收集所有的宝藏!
      courseD_debugging_1: 修复错误来收集所有的花蜜。
      courseD_debugging_2: 修复错误来收集所有的花蜜。
      courseD_debugging_3: 修复错误来收集所有的花蜜并酿蜂蜜。
      courseD_debugging_4: 修复错误来酿蜂蜜。
      courseD_debugging_5: 挑战：所有你需要的指令已经在这里了... 现在, 运用你的调试技巧来找出如何过关。
      courseD_debugging_6: '挑战: 修复错误来收集所有的花蜜并酿蜂蜜。'
      courseD_farmer_condLoops1: 用条件来确保只有某处有玉米时，才捡起它。
      courseD_farmer_condLoops1_2018: 用条件来确保只有某处有玉米时，才捡起它。
      courseD_farmer_condLoops1_2019: 用条件来确保只有某处有玉米时，才捡起它。
      courseD_farmer_condLoops2: 帮助收割者从田里收集玉米和莴苣。
      courseD_farmer_condLoops2_2018: 帮助收割者从田里收集玉米和莴苣。
      courseD_farmer_condLoops2_2019: 帮助收割者从田里收集玉米和莴苣。
      courseD_farmer_condLoops3: '*"玉米、莴苣和南瓜！帮我全收集起来。"*'
      courseD_farmer_condLoops3_2018: '*"玉米、莴苣和南瓜！帮我全收集起来。"*'
      courseD_farmer_condLoops3_2019: '*"玉米、莴苣和南瓜！帮我全收集起来。"*'
      courseD_farmer_condLoops4: 在移动到下一捆之前，帮收割者先收集所有的莴苣。
      courseD_farmer_condLoops4_2018: 在移动到下一捆之前，帮收割者先收集所有的莴苣。
      courseD_farmer_condLoops4_2019: 在移动到下一捆之前，帮收割者先收集所有的莴苣。
      courseD_farmer_condLoops4a: 在移动到下一捆之前，帮农夫先收集所有的莴苣。
      courseD_farmer_condLoops5: 收集所有的玉米和莴苣，然后最后去拿南瓜。
      courseD_farmer_condLoops5_2018: 收集所有的玉米和莴苣，然后最后去拿南瓜。
      courseD_farmer_condLoops5_2019: 收集所有的玉米和莴苣，然后最后去拿南瓜。
      courseD_farmer_condLoops6: 你能找出如何捡起所有的南瓜吗？确保沿着路收集所有的玉米！
      courseD_farmer_condLoops6_2018: 你能找出如何捡起所有的南瓜吗？确保沿着路收集所有的玉米！
      courseD_farmer_condLoops6_2019: 你能找出如何捡起所有的南瓜吗？确保沿着路收集所有的玉米！
      courseD_farmer_condLoops7: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops7_2018: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops7_2019: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops8: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops8_2018: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops8_2019: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_2018: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_2019: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1_2018: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops9_predict1_2019: 收集所有的玉米和莴苣，然后捡起南瓜。
      courseD_farmer_condLoops_challenge1: 收集所有的一切来过这关。每个隐藏的作物只有一个玉米或莴苣。
      courseD_farmer_condLoops_challenge1_2018: 收集所有的一切来过这关。每个隐藏的作物只有一个玉米或莴苣。
      courseD_farmer_condLoops_challenge1_2019: 收集所有的一切来过这关。每个隐藏的作物只有一个玉米或莴苣。
      courseD_farmer_condLoops_challenge2: 收集一切作物来通过这关。
      courseD_farmer_condLoops_challenge2_2018: 收集一切作物来通过这关。
      courseD_farmer_condLoops_challenge2_2019: 收集一切作物来通过这关。
      courseD_farmer_condLoops_challenge2_clone: 收集一切作物来通过这关。
      courseD_farmer_conditionals1: 向土堆移动，并用`移除`模块来移除它。
      courseD_farmer_conditionals10: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_conditionals2: 向土堆移动，并用`填满`模块来用6铲土填平它。
      courseD_farmer_conditionals3: 用尽可能少的模块来通过这关。
      courseD_farmer_conditionals4: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_conditionals5: '帮我移除所有的土。 '
      courseD_farmer_conditionals6: 使用`当`循环能够很容易的填满所有的洞。
      courseD_farmer_conditionals7: 填满每条路尽头的洞。
      courseD_farmer_conditionals8: '挑战：用尽可能少的模块来填满这些洞。 '
      courseD_farmer_conditionals9: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_until_challenge2: 使用如果/否则模块来跟随这条曲线的路。在每个转角处，用循环里的`移除一个`来清理土堆。
      courseD_farmer_until_challenge2_2018: 使用如果/否则模块来跟随这条曲线的路。在每个转角处，用循环里的`移除一个`来清理土堆。
      courseD_farmer_while1: 向土堆移动，并用`移除`模块来移除它。
      courseD_farmer_while10: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while10_2018: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while10_2019: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while10_predict2: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while10_predict2_2018: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while10_predict2_2019: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while1_2018: 向土堆移动，并用`移除`模块来移除它。
      courseD_farmer_while1_2019: 向土堆移动，并用`移除`模块来移除它。
      courseD_farmer_while2: 向土堆移动，并用`填满`模块来用6铲土填平它。
      courseD_farmer_while2_2018: 向土堆移动，并用`填满`模块来用6铲土填平它。
      courseD_farmer_while2_2019: 向土堆移动，并用`填满`模块来用6铲土填平它。
      courseD_farmer_while3: 用尽可能少的模块来通过这关。
      courseD_farmer_while3_2018: 用尽可能少的模块来通过这关。
      courseD_farmer_while3_2019: 用尽可能少的模块来通过这关。
      courseD_farmer_while4: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_while4_2018: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_while4_2019: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_while4_predict1: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_while4_predict1_2018: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_while4_predict1_2019: 用`当`循环来帮助农夫移除整个土堆。
      courseD_farmer_while5: '帮我移除所有的土。 '
      courseD_farmer_while5_2018: '帮我移除所有的土。 '
      courseD_farmer_while5_2019: '帮我移除所有的土。 '
      courseD_farmer_while6: 使用`当`循环能够很容易的填满所有的洞。
      courseD_farmer_while6_2018: 使用`当`循环能够很容易的填满所有的洞。
      courseD_farmer_while6_2019: 使用`当`循环能够很容易的填满所有的洞。
      courseD_farmer_while7: 填满每条路尽头的洞。
      courseD_farmer_while7_2018: 填满每条路尽头的洞。
      courseD_farmer_while7_2019: 填满每条路尽头的洞。
      courseD_farmer_while8: '挑战：用尽可能少的模块来填满这些洞。 '
      courseD_farmer_while8_2018: '挑战：用尽可能少的模块来填满这些洞。 '
      courseD_farmer_while8_2019: '挑战：用尽可能少的模块来填满这些洞。 '
      courseD_farmer_while9: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while9_2018: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while9_2019: '用尽可能少的模块来弄平所有土堆。 '
      courseD_farmer_while_challenge1: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge1_2018: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge1_2019: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge2: 填补所有的洞, 并移走所有的土堆。
      courseD_farmer_while_challenge2_2018: 填补所有的洞, 并移走所有的土堆。
      courseD_harvester_nested_loops_challenge1-broken: '"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"'
      courseD_harvester_nested_loops_challenge1: '"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"'
      courseD_harvester_nested_loops_challenge1_2018: '"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"'
      courseD_harvester_nested_loops_challenge1_2019: '"在农场上，我需要一些帮助！只用工具箱里的模块来帮我收获玉米。"'
      courseD_iceage_loops1: 帮助斯奎特穿过冰去拿到橡子！
      courseD_iceage_loops10: 帮助斯奎特走过去拿到橡子！
      courseD_iceage_loops10_2019: 帮助斯奎特走过去拿到橡子！
      courseD_iceage_loops11: 帮助斯奎特得到橡子！
      courseD_iceage_loops11_2019: 帮助斯奎特得到橡子！
      courseD_iceage_loops12: 用各种方法来拿到橡子！
      courseD_iceage_loops12_2019: 用各种方法来拿到橡子！
      courseD_iceage_loops1_2019: 帮助斯奎特穿过冰去拿到橡子！
      courseD_iceage_loops2: 使用一个`向左转`模块来到达橡子！
      courseD_iceage_loops2_2019: 使用一个`向左转`模块来到达橡子！
      courseD_iceage_loops3: 你能只用一个`向前移动`模块来得到橡子吗？
      courseD_iceage_loops3_2019: 你能只用一个`向前移动`模块来得到橡子吗？
      courseD_iceage_loops4: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseD_iceage_loops4_2019: 再添加一个模块来让斯奎特用各种方法到达橡子！
      courseD_iceage_loops6: 你能增加一个循环到达橡子吗？
      courseD_iceage_loops6_2019: 你能增加一个循环到达橡子吗？
      courseD_iceage_loops7: '斯奎特真的想要那个橡子！

'
      courseD_iceage_loops7_2019: '斯奎特真的想要那个橡子！

'
      courseD_iceage_loops8: '你能修好这段代码吗？ '
      courseD_iceage_loops8_2019: '你能修好这段代码吗？ '
      courseD_iceage_loops9: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseD_iceage_loops9_2019: 橡子太远了！你能用循环帮助斯奎特到达那里吗？
      courseD_maze_intro5a_2019: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_intro5c_2019: 小心TNT炸药！帮助小鸟到达猪的位置。
      courseD_maze_loops_challenge1: |-
        让我们寻找宝藏
        - 使用循环！帮助收集器只使用工具箱中的模块来得到至少两堆宝藏。
      courseD_maze_nestedLoops3: 用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops3_2018: 用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops3_2019: 用尽可能少的模块让僵尸到达向日葵。
      courseD_maze_nestedLoops4: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops4_2018: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops4_2019: '用尽可能少的模块让僵尸到达向日葵！  '
      courseD_maze_nestedLoops5: 用尽可能少的模块让僵尸到达向日葵！
      courseD_maze_nestedLoops5_2018: 用尽可能少的模块让僵尸到达向日葵！
      courseD_maze_nestedLoops5_2019: 用尽可能少的模块让僵尸到达向日葵！
      courseD_maze_nestedLoops6: 只使用已有的模块把僵尸带到向日葵那里。
      courseD_maze_nestedLoops6_2018: 只使用已有的模块把僵尸带到向日葵那里。
      courseD_maze_nestedLoops6_2019: 只使用已有的模块把僵尸带到向日葵那里。
      courseD_maze_ramp1: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp1_2018: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp1_2019: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_maze_ramp2: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_maze_ramp2_2018: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_maze_ramp2_2019: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_maze_ramp3: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseD_maze_ramp3_2018: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseD_maze_ramp3_2019: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseD_maze_ramp4: 躲开TNT炸药，否则羽毛会被炸飞！
      courseD_maze_ramp4_2018: 躲开TNT炸药，否则羽毛会被炸飞！
      courseD_maze_ramp4_2019: 躲开TNT炸药，否则羽毛会被炸飞！
      courseD_maze_ramp5: 躲开TNT炸药！
      courseD_maze_ramp5_2018: 躲开TNT炸药！
      courseD_maze_ramp5_2019: 躲开TNT炸药！
      courseD_maze_ramp5a: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5a_2018: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5a_2019: 注意顺序，看看你能否找出如何到达那头猪！
      courseD_maze_ramp5b: 在这个迷宫中领航，帮助小鸟找到猪！
      courseD_maze_ramp5b_2018: 在这个迷宫中领航，帮助小鸟找到猪！
      courseD_maze_ramp5b_2019: 在这个迷宫中领航，帮助小鸟找到猪！
      courseD_maze_ramp5c: 帮小鸟到达猪那里。
      courseD_maze_ramp5c_2018: 帮小鸟到达猪那里。
      courseD_maze_ramp5d: 帮小鸟到达那只猪。
      courseD_maze_ramp5d_2018: 帮小鸟到达那只猪。
      courseD_maze_ramp5d_2019: 帮小鸟到达那只猪。
      courseD_maze_ramp6: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseD_maze_ramp6a: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseD_maze_ramp7: 帮小鸟到达那只猪！
      courseD_maze_until1: 帮愤怒的小鸟到达那只猪。
      courseD_maze_until10: 帮助僵尸到达向日葵。
      courseD_maze_until10_2018: 帮助僵尸到达向日葵。
      courseD_maze_until10_2019: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2_2018: 帮助僵尸到达向日葵。
      courseD_maze_until10_predict2_2019: 帮助僵尸到达向日葵。
      courseD_maze_until1_2018: 帮愤怒的小鸟到达那只猪。
      courseD_maze_until1_2019: 帮愤怒的小鸟到达那只猪。
      courseD_maze_until2: 现在，用`重复直到`循环来做同样的事情，而不用指定需要多少次向前移动和转向。
      courseD_maze_until3: 帮小鸟到达那只猪。
      courseD_maze_until3_2018: 帮小鸟到达那只猪。
      courseD_maze_until3_2019: 帮小鸟到达那只猪。
      courseD_maze_until4: 你能只使用已有的模块把僵尸带到向日葵那里吗？
      courseD_maze_until4_2018: 你能只使用已有的模块把僵尸带到向日葵那里吗？
      courseD_maze_until4_2019: 你能只使用已有的模块把僵尸带到向日葵那里吗？
      courseD_maze_until5: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until5_2018: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until5_2019: 用`如果`模块来帮助僵尸决定何时转弯，然后让僵尸到达向日葵那里。
      courseD_maze_until6: 帮助僵尸到达向日葵。
      courseD_maze_until6_2018: 帮助僵尸到达向日葵。
      courseD_maze_until6_2019: 帮助僵尸到达向日葵。
      courseD_maze_until7: 帮助僵尸到达向日葵。
      courseD_maze_until7_2018: 帮助僵尸到达向日葵。
      courseD_maze_until7_2019: 帮助僵尸到达向日葵。
      courseD_maze_until8: 帮助僵尸到达向日葵。
      courseD_maze_until8_2018: 帮助僵尸到达向日葵。
      courseD_maze_until9: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until9_2018: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until9_2019: "**挑战：** 躲开食人花，让僵尸到达向日葵那里。"
      courseD_maze_until_challenge: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_maze_until_challenge1-delete-this-copy: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_maze_until_challenge1: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_maze_until_challenge1_2018: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_maze_until_challenge2: 没有提示，只有挑战。把僵尸带到向日葵那里。
      courseD_pixelation: 用二进制来编码任何你喜欢的图形。二进制语言只用'0'和'1'来代表。
      courseD_playLab_cond1: 让海盗得到旗帜来通过这关。
      courseD_playLab_cond1_2018: 让海盗得到旗帜来通过这关。
      courseD_playLab_cond1_2019: 让海盗得到旗帜来通过这关。
      courseD_playLab_cond2: '每次海盗到龙那里的时候得一分。 '
      courseD_playLab_cond2_2018: '每次海盗到龙那里的时候得一分。 '
      courseD_playLab_cond2_2019: '每次海盗到龙那里的时候得一分。 '
      courseD_playLab_cond3: '让龙的情绪每秒随机改变一次。  '
      courseD_playLab_cond3_2018: '让龙的情绪每秒随机改变一次。  '
      courseD_playLab_cond3_2019: '让龙的情绪每秒随机改变一次。  '
      courseD_playLab_cond3a: 当Pegleg到达龙那里时, 如果龙是快乐的，得到2分, 否则1分。
      courseD_playLab_cond3a_2018: 当Pegleg到达龙那里时, 如果龙是快乐的，得到2分, 否则1分。
      courseD_playLab_cond3a_2019: 当Pegleg到达龙那里时, 如果龙是快乐的，得到2分, 否则1分。
      courseD_playLab_cond3b: "1) 让龙在每一秒的随机情绪之间变化。 \r \n2) 当 Pegleg 到达龙那里时, 如果龙是快乐的，得到2分,
        否则1分。"
      courseD_playLab_cond4: 添加一些代码，让忍者 (演员 3) 在游戏一开始就开始追逐海盗。 如果忍者抓住了海盗，游戏就以失败告终。
      courseD_playLab_cond4_2018: 添加一些代码，让忍者 (演员 3) 在游戏一开始就开始追逐海盗。 如果忍者抓住了海盗，游戏就以失败告终。
      courseD_playLab_cond4_2019: 添加一些代码，让忍者 (演员 3) 在游戏一开始就开始追逐海盗。 如果忍者抓住了海盗，游戏就以失败告终。
      courseD_playLab_cond5: 添加一个`一直重复`循环, 让它不断检查, 如果比分大于 5, 就以胜利结束此游戏。
      courseD_playLab_cond5_2018: 添加一个`一直重复`循环, 让它不断检查, 如果比分大于 5, 就以胜利结束此游戏。
      courseD_playLab_cond5_2019: 添加一个`一直重复`循环, 让它不断检查, 如果比分大于 5, 就以胜利结束此游戏。
      courseD_playLab_cond6: "1) 在设置忍者 (演员 3) 追逐海盗前，让他先慢下来。 \r\n2) 如果海盗大于225像素时，设置忍者**逃离**海盗。否则,
        设置忍者 *追逐**海盗。  "
      courseD_playLab_cond6_2018: "1) 在设置忍者 (演员 3) 追逐海盗前，让他先慢下来。 \r\n2) 如果海盗大于225像素时，设置忍者**逃离**海盗。否则,
        设置忍者 *追逐**海盗。  "
      courseD_playLab_cond6_2019: "1) 在设置忍者 (演员 3) 追逐海盗前，让他先慢下来。 \r\n2) 如果海盗大于225像素时，设置忍者**逃离**海盗。否则,
        设置忍者 *追逐**海盗。  "
      courseD_playLab_cond6a: 如果海盗在安全区, 等一秒钟，如果他还停留在章鱼线之下，就扣除一分。
      courseD_playLab_cond6a_2018: 如果海盗在安全区, 等一秒钟，如果他还停留在章鱼线之下，就扣除一分。
      courseD_playLab_cond6a_2019: 如果海盗在安全区, 等一秒钟，如果他还停留在章鱼线之下，就扣除一分。
      courseD_playLab_cond6cloneForTest: 正在测试
      courseD_playLab_condFP: 现在，创建你自己的游戏，给朋友们看看吧！
      courseD_playLab_condFP_2018: 现在，创建你自己的游戏，给朋友们看看吧！
      courseD_playLab_condFP_2019: 现在，创建你自己的游戏，给朋友们看看吧！
      courseD_playLab_condFP_a: 现在，创建你自己的游戏，给朋友们看看吧！
      courseD_playLab_condForVideo: 现在，创建你自己的游戏，给朋友们看看吧！
      courseD_playLab_embedded: "用箭头键移动海盗Pegleg。到达龙得分, 但要躲开忍者！站在章鱼线下面会使忍者停止追逐你, 但要当心!
        你呆在那里的时间越长, 你失去的分数就越多。\r \r\n得到5分就能赢!"
      courseD_scrat_ramp1: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_scrat_ramp1_2018: 对于这个关卡，把所有的块都拼在一起，并点击"运行"来看看！
      courseD_scrat_ramp2: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_scrat_ramp2_2018: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseD_scrat_ramp3: 这儿有一个多余的模块将导致斯奎特崩溃。将其拖回工具箱扔掉。
      courseD_scrat_ramp3_2018: 这儿有一个多余的模块将导致斯奎特崩溃。将其拖回工具箱扔掉。
      courseD_scrat_ramp4: 绕开裂纹的冰来保持斯奎特的安全!
      courseD_scrat_ramp4_2018: 绕开裂纹的冰来保持斯奎特的安全!
      courseD_scrat_ramp5: 绕开破冰。
      courseD_scrat_ramp5_2018: 绕开破冰。
      courseD_scrat_ramp6: 使用循环帮助斯奎特得到橡子!
      courseD_scrat_ramp6_2018: 使用循环帮助斯奎特得到橡子!
      courseD_scrat_ramp7: 帮助斯奎特得到橡子！
      courseD_scrat_ramp7_2018: 帮助斯奎特得到橡子！
      courseD_scrat_ramp8: 用你学到的东西让斯奎特得到橡子!
      courseD_scrat_ramp8_2018: 用你学到的东西让斯奎特得到橡子!
      courseE_artist_concept1: '重新创建这幅图。 '
      courseE_artist_concept1_2018: '重新创建这幅图。 '
      courseE_artist_concept1_2019: '重新创建这幅图。 '
      courseE_artist_concept4: 重新创建这幅图。
      courseE_artist_concept4_2018: 重新创建这幅图。
      courseE_artist_concept4_2019: 重新创建这幅图。
      courseE_artist_concept_challenge1: '帮助小艺术家画出这副独特的图。 '
      courseE_artist_concept_challenge1_2018: '帮助小艺术家画出这副独特的图。 '
      courseE_artist_concept_challenge1_2019: '帮助小艺术家画出这副独特的图。 '
      courseE_artist_concept_challenge2: 使用下面的代码创建五个风车的设计。
      courseE_artist_concept_challenge2_2018: 使用下面的代码创建五个风车的设计。
      courseE_artist_concept_challenge2_2019: 使用下面的代码创建五个风车的设计。
      courseE_artist_embed_functions8: 仔细看这个关卡。要创建这样的设计，你看看需要什么样的函数。你很快就会自己动手做, 所以如果你需要帮助就回到这里吧。
      courseE_artist_functions1: "帮助僵尸艺术家画一个边长为100像素的眼镜。\r\n眼镜之间的桥梁长75像素。"
      courseE_artist_functions10: 这次，用8个（25像素边长的）六边形的线。
      courseE_artist_functions10_2018: 这次，用8个（25像素边长的）六边形的线。
      courseE_artist_functions10_2019: 这次，用8个（25像素边长的）六边形的线。
      courseE_artist_functions1_2018: "帮助僵尸艺术家画一个边长为100像素的眼镜。\r\n眼镜之间的桥梁长75像素。"
      courseE_artist_functions2: '这一次, 使用`draw a square`（画一个正方形）函数来创建眼镜。 '
      courseE_artist_functions2_2018: '这一次, 使用`draw a square`（画一个正方形）函数来创建眼镜。 '
      courseE_artist_functions2_2019: '这一次, 使用`draw a square`（画一个正方形）函数来创建眼镜。 '
      courseE_artist_functions3: 可以通过添加重复模块来绘制此画。
      courseE_artist_functions3_2018: 构建一个能创造这个星星的函数。
      courseE_artist_functions3_2019: 构建一个能创造这个星星的函数。
      courseE_artist_functions4: 现在你能画一个星星了，试试画4个星星！
      courseE_artist_functions4_2018: 现在你能画一个星星了，试试画4个星星！
      courseE_artist_functions5: 只画3个星星来完成这关。
      courseE_artist_functions5_2018: 只画3个星星来完成这关。
      courseE_artist_functions5_2019: 只画3个星星来完成这关。
      courseE_artist_functions6: 通过画一个正方形来制作这个窗口，然后在画另一个前转90度，等等。
      courseE_artist_functions6_2018: 通过画一个正方形来制作这个窗口，然后在画另一个前转90度，等等。
      courseE_artist_functions7: 创建`画一个窗口`，然后调用它5次来通过这一关。小心门！
      courseE_artist_functions7_2018: 创建`画一个窗口`，然后调用它5次来通过这一关。小心门！
      courseE_artist_functions7_2019: 创建`画一个窗口`，然后调用它5次来通过这一关。小心门！
      courseE_artist_functions8: 挑战：创建你能想到的尽可能多的函数来画出这个50像素的正方形的图案。
      courseE_artist_functions8_2018: 挑战：创建你能想到的尽可能多的函数来画出这个50像素的正方形的图案。
      courseE_artist_functions8_2019: 挑战：创建你能想到的尽可能多的函数来画出这个50像素的正方形的图案。
      courseE_artist_functions8a_2018: 为单个正方形创建函数
      courseE_artist_functions8a_2019: 为单个正方形创建函数
      courseE_artist_functions8b_2018: 在`draw a line of squares`（用正方形画一条线）函数里调用`draw
        a square`（画一个正方形）函数，来让它变得更容易！
      courseE_artist_functions8b_2019: 在`draw a line of squares`（用正方形画一条线）函数里调用`draw
        a square`（画一个正方形）函数，来让它变得更容易！
      courseE_artist_functions8c_2018: 再添加一个函数来创建交错的正方形堆栈。
      courseE_artist_functions8c_2019: 再添加一个函数来创建交错的正方形堆栈。
      courseE_artist_functions9: 只用提供的模块来画出这个图。
      courseE_artist_functions9_2018: "**挑战：**只用提供的模块来画出这个图。"
      courseE_artist_functions9_2019: "**挑战：**只用提供的模块来画出这个图。"
      courseE_artist_functionsProj_2018: "**灵感：**用你学会的做想做的事情！"
      courseE_artist_functionsProj_2019: "**灵感：**用你学会的做想做的事情！"
      courseE_artist_functions_challenge: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码, 看看它是如何工作的,
        然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge1: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码, 看看它是如何工作的,
        然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge1_2018: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码,
        看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge1_2019: 一旦你定义了一个函数, 你可以随心所欲一次又一次地调用它! 尝试此代码,
        看看它是如何工作的, 然后改变它, 让您自己的设计更出色！
      courseE_artist_functions_challenge2: 试试此代码, 看看它是如何工作的, 然后试着自己编程!
      courseE_artist_functions_challenge2_2018: 试试此代码, 看看它是如何工作的, 然后试着自己编程!
      courseE_artist_functions_challenge2_2019: 试试此代码, 看看它是如何工作的, 然后试着自己编程!
      courseE_artist_ramp10: 现在, 将最后一个三角形的代码拖动到一个新的循环中, 将其旋转并制作一个雪花!
      courseE_artist_ramp11: 现在用艺术家做一个正方形!
      courseE_artist_ramp12: 用你学过的东西在正方形里面画这个三角形。
      courseE_artist_ramp8: 现在用艺术家做一个正方形!
      courseE_artist_ramp8_2: 现在用艺术家做一个正方形!
      courseE_artist_ramp8_2018: 现在用艺术家做一个正方形!
      courseE_artist_ramp8_2_2018: 现在用艺术家做一个正方形!
      courseE_artist_ramp9: 用你学过的画这个三角形。
      courseE_artist_ramp9_2: 用你学过的画这个三角形。
      courseE_artist_ramp9_2018: 用你学过的画这个三角形。
      courseE_artist_ramp9_2_2018: 用你学过的画这个三角形。
      courseE_bee_concept1: 收集每朵花的花蜜。
      courseE_bee_concept1_2018: 收集每朵花的花蜜。
      courseE_bee_concept1_2019: 收集每朵花的花蜜。
      courseE_bee_concept2: '帮助蜜蜂酿制所有的蜂蜜。

'
      courseE_bee_concept2_2018: '帮助蜜蜂酿制所有的蜂蜜。

'
      courseE_bee_concept2_2019: '帮助蜜蜂酿制所有的蜂蜜。

'
      courseE_bee_concept3: 使用尽可能少的模块来收集所有的花蜜。
      courseE_bee_concept3_2018: 使用尽可能少的模块来收集所有的花蜜。
      courseE_bee_concept3_2019: 使用尽可能少的模块来收集所有的花蜜。
      courseE_bee_concept4: 啊哦! 蜜蜂不确定它应该收集花蜜或还是酿制蜂蜜。你能帮它吗？
      courseE_bee_concept4_2018: 啊哦! 蜜蜂不确定它应该收集花蜜或还是酿制蜂蜜。你能帮它吗？
      courseE_bee_concept4_2019: 啊哦! 蜜蜂不确定它应该收集花蜜或还是酿制蜂蜜。你能帮它吗？
      courseE_bee_concept5: 你能帮助蜜蜂从花朵收集花蜜吗？
      courseE_bee_concept5_2018: 你能帮助蜜蜂从花朵收集花蜜吗？
      courseE_bee_concept5_2019: 你能帮助蜜蜂从花朵收集花蜜吗？
      courseE_bee_functions1: 收集每朵花的花蜜。
      courseE_bee_functions10: 创建一个函数帮助蜜蜂在回到主路前得到所有的蜂蜜来过此关。
      courseE_bee_functions10_2018: 创建一个函数帮助蜜蜂在回到主路前得到所有的蜂蜜来过此关。
      courseE_bee_functions1_2018: 收集每朵花的花蜜。
      courseE_bee_functions2: 使用`收集2个花蜜`函数来收集每朵花的花蜜。
      courseE_bee_functions2_2018: 使用`收集2个花蜜`函数来收集每朵花的花蜜。
      courseE_bee_functions3: 构建`获取5个`函数, 以便在这个关卡中使用。
      courseE_bee_functions3_2018: 构建`获取5个`函数, 以便在这个关卡中使用。
      courseE_bee_functions4: "“移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r\n\r\n用这个函数收集所有的花蜜。"
      courseE_bee_functions4_2018: "“移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r\n\r\n用这个函数收集所有的花蜜。"
      courseE_bee_functions5: 现在编写函数来采花蜜。
      courseE_bee_functions5_2018: 现在编写函数来采花蜜。
      courseE_bee_functions6: 创建一个函数, 并调用它来收集每朵花的花蜜, 并在每个蜂窝酿制蜂蜜。
      courseE_bee_functions6_2018: 创建一个函数, 并调用它来收集每朵花的花蜜, 并在每个蜂窝酿制蜂蜜。
      courseE_bee_functions6test: 创建一个函数, 并调用它来收集每朵花的花蜜, 并在每个蜂窝酿制蜂蜜。
      courseE_bee_functions7: 创建自己的函数，沿着路径往下走, 采集花蜜, 酿蜂蜜, 然后让蜜蜂返回到路径的顶端。收集所有的花蜜并酿制所有的蜂蜜!
      courseE_bee_functions7_2018: 创建自己的函数，沿着路径往下走, 采集花蜜, 酿蜂蜜, 然后让蜜蜂返回到路径的顶端。收集所有的花蜜并酿制所有的蜂蜜!
      courseE_bee_functions8: 创建一个函数, 收集每朵花的所有花蜜。
      courseE_bee_functions8_2018: 创建一个函数, 收集每朵花的所有花蜜。
      courseE_bee_functions9: 创建一个函数, 收集每朵花的所有花蜜。
      courseE_bee_functions9_2018: 创建一个函数, 收集每朵花的所有花蜜。
      courseE_bee_functions9b: 现在试试!
      courseE_bee_functions_challenge1: 你得独立接受这个挑战。这可能比看起来更难!
      courseE_bee_functions_challenge1_2018: 你得独立接受这个挑战。这可能比看起来更难!
      courseE_bee_functions_challenge2: 你得独立接受这个挑战。酷毙了！
      courseE_bee_functions_challenge2_2018: 你得独立接受这个挑战。酷毙了！
      courseE_bee_ramp14: 帮助蜜蜂沿着小路, 收集所有的蜂蜜和所有的花蜜。
      courseE_bee_ramp14_2018: 帮助蜜蜂沿着小路, 收集所有的蜂蜜和所有的花蜜。
      courseE_bee_ramp17: 用你所学的来解决这个关卡。
      courseE_collector_ramp10: 帮助罗瑞尔收集所有的宝藏。
      courseE_collector_ramp8: 帮助罗瑞尔收集所有的宝藏。
      courseE_collector_ramp9: 帮助罗瑞尔收集所有的宝藏。
      courseE_farmer_concept1: 你能写一个程序来填补这些洞直到地面平了吗？
      courseE_farmer_concept1_2018: 你能写一个程序来填补这些洞直到地面平了吗？
      courseE_farmer_concept1_2019: 你能写一个程序来填补这些洞直到地面平了吗？
      courseE_farmer_concept2: 收集所有南瓜。
      courseE_farmer_concept2_2018: 收集所有南瓜。
      courseE_farmer_concept2_2019: 收集所有南瓜。
      courseE_farmer_concept3: 填满每条路尽头的洞。
      courseE_farmer_concept3_2018: 填满每条路尽头的洞。
      courseE_farmer_concept3_2019: 填满每条路尽头的洞。
      courseE_farmer_concept4: 现在，让我们增加难度！我们已经将所有模块嵌套到另一个循环里了，但是你需要让小艺术家回来画下一行。哪些代码模块能放在最外层循环的下面来画出整个网格？
      courseE_farmer_elseif_test: 填满每条路尽头的洞。
      courseE_farmer_functions1: 帮助收割者到达南瓜那里并采摘它。
      courseE_farmer_functions10: '没人知道这些芽会变成什么样子。 使用`如果`语句编写代码来检查和收割每一个庄稼。   '
      courseE_farmer_functions10a1_2018: 用你学到的知识来解决难题！
      courseE_farmer_functions10a1_2019: 用你学到的知识来解决难题！
      courseE_farmer_functions10b: 用新函数两次来过关。
      courseE_farmer_functions10b_2018: 用新函数两次来过关。
      courseE_farmer_functions13_2018: 用23个或更少的模块来解决这个难题。
      courseE_farmer_functions13_2019: 用23个或更少的模块来解决这个难题。
      courseE_farmer_functions1_2018: 帮助收割者到达南瓜那里并采摘它。
      courseE_farmer_functions1_2019: 帮助收割者到达南瓜那里并采摘它。
      courseE_farmer_functions1a: 现在帮收割者采摘玉米，莴苣，**和** 南瓜。
      courseE_farmer_functions1a_2018: 帮收割者采摘所有玉米，和南瓜。
      courseE_farmer_functions1a_2019: 帮收割者采摘所有玉米，和南瓜。
      courseE_farmer_functions2: "现在, 每次运行该程序都会有不同数量的南瓜。\r\n\r\n使用 `当`模块只采集你需要的尽可能多的南瓜。"
      courseE_farmer_functions2a: 在接下来的几个关卡中, 我们将检查大量的农作物方格。让我们把所有的东西都移到函数内使它更容易。
      courseE_farmer_functions2aALT: 在接下来的几个关卡中, 我们将检查大量的农作物方格。让我们把所有的东西都移到函数内使它更容易。
      courseE_farmer_functions2b: 帮助收割者采摘玉米和南瓜。
      courseE_farmer_functions2b_2018: 帮助收割者采摘玉米和南瓜。
      courseE_farmer_functions2b_2019: 帮助收割者采摘玉米和南瓜。
      courseE_farmer_functions2ba: 帮助农民用`玉米和南瓜`函数来采摘玉米和南瓜。
      courseE_farmer_functions2ba_2018: 帮助农民用`玉米和南瓜`函数来采摘玉米和南瓜。
      courseE_farmer_functions2ba_2019: 帮助农民用`玉米和南瓜`函数来采摘玉米和南瓜。
      courseE_farmer_functions3: "当去南瓜的路径是不同长度时会发生什么？ \r\n\r\n用尽可能少的模块来得到全部南瓜。"
      courseE_farmer_functions3b: 现在帮农民采摘玉米，莴苣，**和** 南瓜。
      courseE_farmer_functions3c: 现在, 从代码中拉出模块并将它们放到 ** 函数定义 ** 中来填充函数。
      courseE_farmer_functions3c1_2018: 这个函数调用了其它函数！
      courseE_farmer_functions3c1_2019: 这个函数调用了其它函数！
      courseE_farmer_functions3c_2018: 现在, 从代码中拉出模块并将它们放到 ** 函数定义 ** 中来填充函数。
      courseE_farmer_functions3c_2019: 现在, 从代码中拉出模块并将它们放到 ** 函数定义 ** 中来填充函数。
      courseE_farmer_functions4: "很好！现在你有代码可以从任何大小的路径采摘南瓜。\r\n\r\n把代码拉进函数，这样可以让我们用不同的方法使用它...但首先让我们用它来再次过此关。"
      courseE_farmer_functions4b: 使用你的新函数来通关。
      courseE_farmer_functions4b_2018: 使用你的新函数来通关。
      courseE_farmer_functions5: 你应该如何改动程序，来让这个函数能够用在每条路上？
      courseE_farmer_functions5a: 你应该如何改动程序，来让这个函数能够用在每条路上？
      courseE_farmer_functions5b: 这些庄稼都长成堆了。添加一些新的`当`循环到你的函数里，来确保能收集到所有的作物。
      courseE_farmer_functions5c: 你的函数能在这里派上用场。
      courseE_farmer_functions5c_2018: 你的函数能在这里派上用场。
      courseE_farmer_functions6: "*\"莴苣，试试一些新东西！\"*\r\n\r\n这里有些代码来收集所有的莴苣。将它移动到一个函数里，一会儿再使用。"
      courseE_farmer_functions6b: 捡起所有的作物。
      courseE_farmer_functions6c: 你需要添加什么样的程序来检查一个新芽是玉米还是莴苣？
      courseE_farmer_functions6c_2018: 你需要添加什么样的程序来检查一个新芽是玉米还是莴苣？
      courseE_farmer_functions7: 用你的函数来通过这一关。
      courseE_farmer_functions7a1_2018: 创建函数来让收割者走到正方形路径上，从每行的中间采摘单个莴苣。
      courseE_farmer_functions7a1_2019: 创建函数来让收割者走到正方形路径上，从每行的中间采摘单个莴苣。
      courseE_farmer_functions7b: 帮助收割者找到她的路，这些混乱的路径中左转右转能到达南瓜、玉米和莴苣。
      courseE_farmer_functions7b_2018: 帮助收割者找到她的路，这些混乱的路径中左转右转能到达南瓜、玉米和莴苣。
      courseE_farmer_functions8: "**挑战：** 用尽可能少的模块通过这关。"
      courseE_farmer_functions8a1_2018: 你的函数还有用吗？
      courseE_farmer_functions8a1_2019: 你的函数还有用吗？
      courseE_farmer_functions8b: "**挑战：** 用上一关中学到的方法收集所有的南瓜。 "
      courseE_farmer_functions8b_2018: "**挑战：** 用上一关中学到的方法收集所有的南瓜。 "
      courseE_farmer_functions9: 用条件来简化你的程序。
      courseE_farmer_functions9a1_2018: 你的函数还有用吗？
      courseE_farmer_functions9a1_2019: 你的函数还有用吗？
      courseE_farmer_functions9b: 你能找出解决这个关卡所需的规律吗？
      courseE_farmer_functions9b_2018: 你能找出解决这个关卡所需的规律吗？
      courseE_farmer_functions9b_clone: 你能找出解决这个关卡所需的规律吗？
      courseE_farmer_predict1: 摘下所有的莴苣(只在有莴苣的时候)。
      courseE_farmer_predict1_2018: 摘下所有的莴苣(只在有莴苣的时候)。
      courseE_farmer_ramp11: 这个关卡也使用嵌套循环。 你知道是什么吗？
      courseE_farmer_ramp11a: 当有一堆土，移走它。
      courseE_farmer_ramp11a_2018: 当有一堆土，移走它。
      courseE_farmer_ramp11a_2019: 当有一堆土，移走它。
      courseE_farmer_ramp11b: 当有一堆土，移走它。
      courseE_farmer_ramp11b_2018: 当有一堆土，移走它。
      courseE_farmer_ramp11b_2019: 当有一堆土，移走它。
      courseE_farmer_ramp12: 现在，使用嵌套循环来通过这关。
      courseE_farmer_ramp12_2018: 现在，使用嵌套循环来通过这关。
      courseE_farmer_ramp12_forswap: 现在，使用嵌套循环来通过这关。
      courseE_farmer_ramp12_forswap_2018: 现在，使用嵌套循环来通过这关。
      courseE_farmer_ramp12_forswap_2019: 现在，使用嵌套循环来通过这关。
      courseE_farmer_ramp12a: 帮助农民正确地行走在道路上, 收集所有的莴苣。
      courseE_farmer_ramp12a_2018: 帮助农民正确地行走在道路上, 收集所有的莴苣。
      courseE_farmer_ramp12b: 当有莴苣的时候,，捡起莴苣！
      courseE_farmer_ramp12b_2018: 当有莴苣的时候,，捡起莴苣！
      courseE_farmer_ramp12b_2019: 当有莴苣的时候,，捡起莴苣！
      courseE_farmer_ramp12c: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12c_2018: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12c_2019: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12d: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12d_2018: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12d_2019: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12e: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12e_2018: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12e_2019: 向前移动直到到达莴苣，然后用一个`当`循环来捡起所有的莴苣。
      courseE_farmer_ramp12f: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12f_2018: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12f_2019: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12g: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12g_2018: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp12g_2019: 向前走, 直到你到达莴苣，然后**如果** 有一条路径向左，就左转。否则就右拐。
      courseE_farmer_ramp13: 如果有玉米, 摘玉米, 在有莴苣的时候摘莴苣。
      courseE_farmer_ramp13_2018: 如果有玉米, 摘玉米, 在有莴苣的时候摘莴苣。
      courseE_farmer_ramp15: 仅使用可用的模块来解决此关卡。
      courseE_farmer_ramp15_2018: 仅使用可用的模块来解决此关卡。
      courseE_farmer_ramp16: "** 挑战: ** 用最少的块数解决这个关卡。"
      courseE_maze_predict1: 此代码包含一个新模块。如果你按下 "运行" 块, 你认为会发生什么？
      courseE_maze_predict1_2018: 此代码包含一个新模块。如果你按下 "运行" 块, 你认为会发生什么？
      courseE_maze_ramp1: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseE_maze_ramp13: 是时候解决最后一个关卡!
      courseE_maze_ramp1_2018: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      courseE_maze_ramp2: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseE_maze_ramp2_2018: 将额外的`向前移动`块拖出工具箱, 然后将所有块附加到`当运行时`以完成代码。
      courseE_maze_ramp3: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseE_maze_ramp3_2018: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      courseE_maze_ramp4: 躲开TNT炸药，否则羽毛会被炸飞！
      courseE_maze_ramp4_2018: 躲开TNT炸药，否则羽毛会被炸飞！
      courseE_maze_ramp5: 躲开TNT炸药！
      courseE_maze_ramp5_2018: 躲开TNT炸药！
      courseE_maze_ramp6: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseE_maze_ramp6_2018: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseE_maze_ramp7: 使用你学会的，让小鸟飞到猪那里！
      courseE_maze_ramp7_2018: 使用你学会的，让小鸟飞到猪那里！
      courseE_maze_ramp_predict1: 此代码包含一个新模块。如果你按下 "运行" 块, 你认为会发生什么？
      courseE_multi_maze_ramp5: 躲开TNT炸药！
      courseE_playLab_challenge1: "当你有足够的分数，或者分数不够时，应该有一些后果。添加一些代码到`游戏胜利`和`游戏失败`函数中来确保游戏按照它y应该的方式进行。\n\r\n点击提示来获得一些主意！"
      courseE_playLab_challenge1_2018: "当你有足够的分数，或者分数不够时，应该有一些后果。添加一些代码到`游戏胜利`和`游戏失败`函数中来确保游戏按照它y应该的方式进行。\n\r\n点击提示来获得一些主意！"
      courseE_playLab_embedded: 这是一个你可以玩的例子游戏 。用你的方向键移动狗。当狗碰到一只猫时, 他得一分! 得5分来赢得比赛!
      courseE_playLab_exampleProject2: 这是你用来选择卡片的代码 - 试试添加一些别的有趣的功能！
      courseE_playLab_scaffold1: 选择一个背景和地图，然后选择一个演员来作为你的游戏里的英雄。
      courseE_playLab_scaffold1_2018: 选择一个背景和地图，然后选择一个演员来作为你的游戏里的英雄。
      courseE_playLab_scaffold2: 用事件处理函数和行动来帮助你的英雄移动。
      courseE_playLab_scaffold2_2018: 用事件处理函数和行动来帮助你的英雄移动。
      courseE_playLab_scaffold3: 添加两个或更多的演员到你的游戏中，并让它们移动。
      courseE_playLab_scaffold3_2018: 添加两个或更多的演员到你的游戏中，并让它们移动。
      courseE_playLab_scaffold4: 找一些有趣的方法来改变游戏的分数。让分数不为零，然后再继续。
      courseE_playLab_scaffold4_2018: 找一些有趣的方法来改变游戏的分数。让分数不为零，然后再继续。
      courseE_playLab_scaffold5: 现在，花一些时间来让游戏按照你想的方式运行。包括游戏失败或胜利的方法，然后玩游戏，直到某个条件达成。
      courseE_playLab_scaffold5_2018: 现在，花一些时间来让游戏按照你想的方式运行。包括游戏失败或胜利的方法，然后玩游戏，直到某个条件达成。
      courseE_playLab_scaffold6: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      courseE_playLab_scaffold6_2018: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      courseE_playlab_challenge2: 你能想出这个 "算命先生" 应用程序是如何工作的吗？单击 "更多" 以查看您的挑战。
      courseE_playlab_variables_challenge2: 你能想出这个 "算命先生" 应用程序是如何工作的吗？单击 "更多" 以查看您的挑战。
      courseE_video_createFunctions: 我们还没有创建函数的视频。这是一个占位符。。。
      courseE_video_createFunctions2: 我们还没有创建函数的视频。这是一个占位符。。。
      courseE_video_createFunctions2_2018: 我们还没有创建函数的视频。这是一个占位符。。。
      courseE_video_createFunctions2_2019: 我们还没有创建函数的视频。这是一个占位符。。。
      courseE_video_createFunctions_2018: 我们还没有创建函数的视频。这是一个占位符。。。
      courseF_IceAge_1: 通过把 "演员1说"模块拽出来并连接到 "当运行时" 事件的底部帮助 喜得 说 "你好!",
      courseF_IceAge_10: 使用 "演员 __ 抛出" 命令让 喜得 (演员 1) 把心扔向格瑞尼 (演员 2), 并设置格瑞尼的心情, 让她在被击中时高兴。
      courseF_IceAge_11: '是时候创造你自己的游戏或故事了！

'
      courseF_IceAge_2: 使用`演员___ 说`模块两次来帮助曼尼和喜得相互打招呼。
      courseF_IceAge_3: 斯奎特 在找他的橡子! 你能帮他移动最后200像素吗？
      courseF_IceAge_4: 当迭戈发现曼尼时, 通过将一个方块连接到`当演员触碰`事件下来播放声音。
      courseF_IceAge_5: 重复左右移动来帮助格瑞尼做锻炼。
      courseF_IceAge_6: '你能帮助喜得，在点击他的时候呼叫他的朋友们吗？ '
      courseF_IceAge_7: 写代码, 帮助 斯奎特 得到所有的橡子!
      courseF_IceAge_8: '你可以完成这个程序，使它在喜得和格瑞尼相撞的时候同时**发出声音**并**得一分**吗？ '
      courseF_IceAge_9: 把场景切换到一个冰雪的背景，并且设定喜得 (演员1) 的速度为快速。
      courseF_IceAge_template: 写代码, 帮助 斯奎特 得到所有的橡子!
      courseF_artist_embed_for7: 请按 "运行" 以查看程序如何执行的! 这个用计数循环。
      courseF_artist_embed_variables9: 点击“运行”来看程序如何运行
      courseF_artist_for1: 试验`计数循环`，并试试`counter`（计数器）变量。
      courseF_artist_for10: 自由发挥：试试用`counter`（计数器）变量和其它画图元素来画出这样的神奇的图画。
      courseF_artist_for10_2018: 自由发挥：试试用`counter`（计数器）变量和其它画图元素来画出这样的神奇的图画。
      courseF_artist_for10_2019: 自由发挥：试试用`counter`（计数器）变量和其它画图元素来画出这样的神奇的图画。
      courseF_artist_for1_2018: 试验`计数循环`，并试试`counter`（计数器）变量。
      courseF_artist_for1_2019: 试验`计数循环`，并试试`counter`（计数器）变量。
      courseF_artist_for2: 创建这堆边长从50到100像素的三角形。
      courseF_artist_for2_2018: 创建这堆边长从50到100像素的三角形。
      courseF_artist_for2_2019: 创建这堆边长从50到100像素的三角形。
      courseF_artist_for3: '这些三角形的边长从20像素到200像素，并且每个三角形比上一个大20像素。 '
      courseF_artist_for3_2018: '这些三角形的边长从20像素到200像素，并且每个三角形比上一个大20像素。 '
      courseF_artist_for3_2019: '这些三角形的边长从20像素到200像素，并且每个三角形比上一个大20像素。 '
      courseF_artist_for4: '这些正方形从15像素长开始。最大的是300像素长，每个都比上一个大15像素。 '
      courseF_artist_for4_2018: '这些正方形从15像素长开始。最大的是300像素长，每个都比上一个大15像素。 '
      courseF_artist_for4_2019: '这些正方形从15像素长开始。最大的是300像素长，每个都比上一个大15像素。 '
      courseF_artist_for5: 只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？
      courseF_artist_for5_2018: 只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？
      courseF_artist_for5_2019: 只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？
      courseF_artist_for6: 从上一关的代码开始重新创建，但需要转89度来让正方形产生一点螺旋。
      courseF_artist_for6_2018: 从上一关的代码开始重新创建，但需要转89度来让正方形产生一点螺旋。
      courseF_artist_for6_2019: 从上一关的代码开始重新创建，但需要转89度来让正方形产生一点螺旋。
      courseF_artist_for7: 将上一关的代码做三个小小的改动来画出这个！
      courseF_artist_for7_2018: 将上一关的代码做三个小小的改动来画出这个！
      courseF_artist_for7_2019: 将上一关的代码做三个小小的改动来画出这个！
      courseF_artist_for8: 将角度改小为72度来得到一个螺旋状的五边形。
      courseF_artist_for8_2018: 将角度改小为72度来得到一个螺旋状的五边形。
      courseF_artist_for8_2019: 将角度改小为72度来得到一个螺旋状的五边形。
      courseF_artist_for9: |-
        **灵感：** 用 Use the counter inside
        the `set alpha` block to get this faded center.`set alpha`（设置透明度）模块中的计数器来获得淡出的中心。
      courseF_artist_for9_2018: |-
        **灵感：** 用 Use the counter inside
        the `set alpha` block to get this faded center.`set alpha`（设置透明度）模块中的计数器来获得淡出的中心。
      courseF_artist_for9_2019: |-
        **灵感：** 用 Use the counter inside
        the `set alpha` block to get this faded center.`set alpha`（设置透明度）模块中的计数器来获得淡出的中心。
      courseF_artist_for_Template: 尝试使用上一关卡的一些代码，但转向89度来创建这个扭曲的方形螺旋。
      courseF_artist_for_Template_2018: 尝试使用上一关卡的一些代码，但转向89度来创建这个扭曲的方形螺旋。
      courseF_artist_for_Template_2019: 尝试使用上一关卡的一些代码，但转向89度来创建这个扭曲的方形螺旋。
      courseF_artist_for_challenge1: 你能想出如何重新创建这幅画吗？
      courseF_artist_for_challenge1_2018: 你能想出如何重新创建这幅画吗？
      courseF_artist_for_challenge1_2019: 你能想出如何重新创建这幅画吗？
      courseF_artist_for_challenge2: 你能想出如何使用一个简单的循环来重新创建这幅画吗？
      courseF_artist_for_challenge2_2018: 你能想出如何使用一个简单的循环来重新创建这幅画吗？
      courseF_artist_for_challenge2_2019: 你能想出如何使用一个简单的循环来重新创建这幅画吗？
      courseF_artist_fwp1: 编辑函数`draw a square`（画一个正方形）来查找缺陷。
      courseF_artist_fwp1_2018: 编辑函数`draw a square`（画一个正方形）来查找缺陷。
      courseF_artist_fwp2: 编辑函数以接收一个叫做 "长度" 的参数。
      courseF_artist_fwp2_2018: 编辑函数以接收一个叫做 "长度" 的参数。
      courseF_artist_fwp2_predict1: 编辑函数以接收一个叫做 "长度" 的参数。
      courseF_artist_fwp2_predict1_2018: 编辑函数以接收一个叫做 "长度" 的参数。
      courseF_artist_fwp3: 创建一个名为 "绘制正方形" 的函数, 并使用它用参数来来描这四个盒子。
      courseF_artist_fwp3_2018: 创建一个名为 "绘制正方形" 的函数, 并使用它用参数来来描这四个盒子。
      courseF_artist_fwp4: 编辑此函数，添加一个多边形边数的参数。
      courseF_artist_fwp4_2018: 编辑此函数，添加一个多边形边数的参数。
      courseF_artist_fwp5: '使用最后一个关卡中的函数来绘制这一系列形状。  '
      courseF_artist_fwp5_2018: '使用最后一个关卡中的函数来绘制这一系列形状。  '
      courseF_artist_fwp6: '挑战: 用`length`（长度）和`sides`（边长）参数来编辑`画一个螺旋边缘`函数, 然后重新创建这些形状。'
      courseF_artist_fwp6_2018: '挑战: 用`length`（长度）和`sides`（边长）参数来编辑`画一个螺旋边缘`函数, 然后重新创建这些形状。'
      courseF_artist_fwp7: 完成`画一个螺旋边缘`的函数来要求螺旋的中心也需要一个最小长度。
      courseF_artist_fwp7_2018: 完成`画一个螺旋边缘`的函数来要求螺旋的中心也需要一个最小长度。
      courseF_artist_fwp8: 你能想出如何使用刚才创建的函数来绘制这个图吗？
      courseF_artist_fwp8_2018: 你能想出如何使用刚才创建的函数来绘制这个图吗？
      courseF_artist_fwp9: '自由发挥: 画一些很棒的东西！ 调整笔的宽度来看看画出来的图像有什么不同！'
      courseF_artist_fwp9_2018: '自由发挥: 画一些很棒的东西！ 调整笔的宽度来看看画出来的图像有什么不同！'
      courseF_artist_fwp_challenge1: 你能弄清楚这个程序是如何工作的吗？
      courseF_artist_fwp_challenge1_2018: 你能弄清楚这个程序是如何工作的吗？
      courseF_artist_fwp_challenge2: 用你在上一关卡中学到的东西来画这样的图像。
      courseF_artist_fwp_challenge2_2018: 用你在上一关卡中学到的东西来画这样的图像。
      courseF_artist_ramp10: 现在, 将最后一个三角形的代码拖动到一个新的循环中, 将其旋转并制作一个雪花!
      courseF_artist_ramp10_2018: 现在, 将最后一个三角形的代码拖动到一个新的循环中, 将其旋转并制作一个雪花!
      courseF_artist_ramp8: 现在用艺术家做一个正方形!
      courseF_artist_ramp8_2018: 现在用艺术家做一个正方形!
      courseF_artist_ramp9: 用你学过的画这个三角形。
      courseF_artist_ramp9_2018: 用你学过的画这个三角形。
      courseF_artist_variables1: 让我们画一个等边三角形, 每边长刚好是50个像素。
      courseF_artist_variables10: '这是最后一个关卡中的代码。请尝试以其他方式编辑该变量。  '
      courseF_artist_variables10_2018: '这是最后一个关卡中的代码。请尝试以其他方式编辑该变量。  '
      courseF_artist_variables10_2019: '这是最后一个关卡中的代码。请尝试以其他方式编辑该变量。  '
      courseF_artist_variables2: '现在画出三个三角形, 让它们彼此挨着。   '
      courseF_artist_variables2_2018: '现在画出三个三角形, 让它们彼此挨着。   '
      courseF_artist_variables2_2019: '现在画出三个三角形, 让它们彼此挨着。   '
      courseF_artist_variables3: 将长度50移动到一个变量中，这样我们能在下面几关用到它。
      courseF_artist_variables3_2018: 将长度50移动到一个变量中，这样我们能在下面几关用到它。
      courseF_artist_variables3_2019: 将长度50移动到一个变量中，这样我们能在下面几关用到它。
      courseF_artist_variables4: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables4_2018: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables4_2019: 现在，用`length`（长度）变量来让小艺术家在三角形之间向前跳`length`（长度）像素。
      courseF_artist_variables5: 在代码的末尾添加另一组循环来再增加三个三角形。这次，向前移动，并向上！
      courseF_artist_variables5_2018: 在代码的末尾添加另一组循环来再增加三个三角形。这次，向前移动，并向上！
      courseF_artist_variables5_2019: 在代码的末尾添加另一组循环来再增加三个三角形。这次，向前移动，并向上！
      courseF_artist_variables6: '现在，让三角形是60像素宽，并跳60像素。  '
      courseF_artist_variables6_2018: '现在，让三角形是60像素宽，并跳60像素。  '
      courseF_artist_variables6_2019: '现在，让三角形是60像素宽，并跳60像素。  '
      courseF_artist_variables6a: 用80像素边长的正方形来制作这个图案，并且在每个之间，让小艺术家跳过80像素。
      courseF_artist_variables6a_2018: 用80像素边长的正方形来制作这个图案，并且在每个之间，让小艺术家跳过80像素。
      courseF_artist_variables6a_2019: 用80像素边长的正方形来制作这个图案，并且在每个之间，让小艺术家跳过80像素。
      courseF_artist_variables7: '画一个150像素边长的三角形。 '
      courseF_artist_variables7_2018: '画一个150像素边长的三角形。 '
      courseF_artist_variables7_2019: '画一个150像素边长的三角形。 '
      courseF_artist_variables8: 用上一关的来重建这个三角形的代码，但这次用`设置长度为`模块，来在循环的末尾处重置`length`（长度）变量为`length`+10。
      courseF_artist_variables8_2018: 用上一关的来重建这个三角形的代码，但这次用`设置长度为`模块，来在循环的末尾处重置`length`（长度）变量为`length`+10。
      courseF_artist_variables8_2019: 用上一关的来重建这个三角形的代码，但这次用`设置长度为`模块，来在循环的末尾处重置`length`（长度）变量为`length`+10。
      courseF_artist_variables9: 看看当你重复最后一个关卡的代码30次, 而不是3次会是什么结果! 你可以选择任何颜色的线条或图案，
      courseF_artist_variables9_2018: 看看当你重复最后一个关卡的代码30次, 而不是3次会是什么结果! 你可以选择任何颜色的线条或图案，
      courseF_artist_variables9_2019: 看看当你重复最后一个关卡的代码30次, 而不是3次会是什么结果! 你可以选择任何颜色的线条或图案，
      courseF_artist_variablesFP: "**自由发挥：** 用你学到的知识来创建自己的图画。 "
      courseF_artist_variablesFP_2018: "**自由发挥：** 用你学到的知识来创建自己的图画。 "
      courseF_artist_variablesFP_2019: "**自由发挥：** 用你学到的知识来创建自己的图画。 "
      courseF_artist_variables_10: '这是最后一个关卡中的代码。请尝试以其他方式编辑该变量。  '
      courseF_artist_variables_2: "现在用另一个循环来画这相邻的三个三角形。\r\n你可以嵌套上一关的代码。\r\n"
      courseF_artist_variables_5: 在代码的末尾添加另一组循环来再增加三个三角形。这次，向前移动，并向上！
      courseF_artist_variables_6: "不好！我们实际上需要三角形是60像素宽，并且跳50像素。\r\n你不想使用一个变量吗？"
      courseF_artist_variables_6a: 用80像素边长的正方形来制作这个图案，并且在每个之间，让小艺术家跳过80像素。
      courseF_artist_variables_9: "看看当你重复上一关的代码30次, 而不是3次会是什么结果！\r\n\r\n你可以选择任何颜色的线条或图案。"
      courseF_artist_variables_FP: "**自由发挥：** 用你学会的知识来创建自己的图画。 \r\n\r\n怎样使用变量来创建正方形，五边形或六边形？"
      courseF_artist_variables_challenge1: 你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge1_2018: 你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge1_2019: 你能创建一个`length`（长度）变量，并用它来创建这个图案吗？
      courseF_artist_variables_challenge1a: 现在你已经学到了做这个模样需要的所有东西! 这个关卡本来就很困难。 你能坚持下去直到你找到解决办法吗？
      courseF_artist_variables_challenge2: 现在你已经学到了做这个图案需要的所有东西！
      courseF_artist_variables_challenge2_2018: 现在你已经学到了做这个图案需要的所有东西！
      courseF_artist_variables_challenge2_2019: 现在你已经学到了做这个图案需要的所有东西！
      courseF_artistembed_variables9: 看看当你重复最后一个关卡的代码30次, 而不是3次会是什么结果! 你可以选择任何颜色的线条或图案，
      courseF_bee_conditionals10: 收集所有的花蜜并制作蜂蜜。
      courseF_bee_conditionals10_2018: 收集所有的花蜜并制作蜂蜜。
      courseF_bee_conditionals1_predict1: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      courseF_bee_conditionals1_predict1_2018: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      courseF_bee_conditionals2: '在采集花蜜前，检查每朵云下面是不是有花。  '
      courseF_bee_conditionals2_2018: '在采集花蜜前，检查每朵云下面是不是有花。  '
      courseF_bee_conditionals3: '帮助蜜蜂收集所有的花蜜。 '
      courseF_bee_conditionals3_2018: '帮助蜜蜂收集所有的花蜜。 '
      courseF_bee_conditionals4: 使用尽可能少的模块来收集所有的花蜜。
      courseF_bee_conditionals4_2018: 使用尽可能少的模块来收集所有的花蜜。
      courseF_bee_conditionals5: 使用尽可能少的模块来收集所有的花蜜。
      courseF_bee_conditionals5_2018: 使用尽可能少的模块来收集所有的花蜜。
      courseF_bee_conditionals7_predict2: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseF_bee_conditionals7_predict2_2018: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      courseF_bee_conditionals8: "如果有花，收集花蜜。\r\n否则, 酿蜂蜜（因为那里有蜂窝）。"
      courseF_bee_conditionals8_2018: "如果有花，收集花蜜。\r\n否则, 酿蜂蜜（因为那里有蜂窝）。"
      courseF_bee_for1: 用尽可能少的模块来从每朵花里收集花蜜。
      courseF_bee_for10: "**挑战：** 用你学会的关于`计数循环`循环的知识来试着解决这个问题。 "
      courseF_bee_for10_2018: "**挑战：** 用你学会的关于`计数循环`循环的知识来试着解决这个问题。 "
      courseF_bee_for10_2019: "**挑战：** 用你学会的关于`计数循环`循环的知识来试着解决这个问题。 "
      courseF_bee_for11: 你应该增加多少来收集15，然后12，然后9，6，3个花蜜？
      courseF_bee_for11_2018: 你应该增加多少来收集15，然后12，然后9，6，3个花蜜？
      courseF_bee_for11_2019: 你应该增加多少来收集15，然后12，然后9，6，3个花蜜？
      courseF_bee_for1_2018: 用尽可能少的模块来从每朵花里收集花蜜。
      courseF_bee_for1_2019: 用尽可能少的模块来从每朵花里收集花蜜。
      courseF_bee_for2: 写出代码来帮助蜜蜂收集所有的花蜜。
      courseF_bee_for2_2018: 写出代码来帮助蜜蜂收集所有的花蜜。
      courseF_bee_for2_2019: 写出代码来帮助蜜蜂收集所有的花蜜。
      courseF_bee_for3: 用`计数循环`循环和`counter`（计数器）变量来通过这关，看看你的代码能写多短。
      courseF_bee_for4: 帮助蜜蜂收集所有的花蜜。
      courseF_bee_for4_2018: 帮助蜜蜂收集所有的花蜜。
      courseF_bee_for4_2019: 帮助蜜蜂收集所有的花蜜。
      courseF_bee_for5: 使用`counter`（计数器）变量两次来通过这关。
      courseF_bee_for5_2018: 使用`counter`（计数器）变量两次来通过这关。
      courseF_bee_for5_2019: 使用`counter`（计数器）变量两次来通过这关。
      courseF_bee_for6: 通过从5到1每次减1，来收集花蜜。
      courseF_bee_for6_2018: 通过从5到1每次减1，来收集花蜜。
      courseF_bee_for6_2019: 通过从5到1每次减1，来收集花蜜。
      courseF_bee_for7: 通过每次增加2来收集所有的花。
      courseF_bee_for7_2018: 通过每次增加2来收集所有的花。
      courseF_bee_for7_2019: 通过每次增加2来收集所有的花。
      courseF_bee_for8: 你已经明白了！应该递增多少来收集3，6，9，12，15个花蜜？
      courseF_bee_for8_2018: 你已经明白了！应该递增多少来收集3，6，9，12，15个花蜜？
      courseF_bee_for8_2019: 你已经明白了！应该递增多少来收集3，6，9，12，15个花蜜？
      courseF_bee_for9: 用`counter`（计数器）变量来用尽可能少的模块来走过这个花园。
      courseF_bee_for9_2018: 用`counter`（计数器）变量来用尽可能少的模块来走过这个花园。
      courseF_bee_for9_2019: 用`counter`（计数器）变量来用尽可能少的模块来走过这个花园。
      courseF_bee_for_challenge1: '用`计数循环`来收集所有的花蜜。 '
      courseF_bee_for_challenge1_2018: '用`计数循环`来收集所有的花蜜。 '
      courseF_bee_for_challenge1_2019: '用`计数循环`来收集所有的花蜜。 '
      courseF_bee_for_challenge2: 使用尽可能少的模块来解决这个关卡。
      courseF_bee_for_challenge2_2018: 使用尽可能少的模块来解决这个关卡。
      courseF_bee_for_challenge2_2019: 使用尽可能少的模块来解决这个关卡。
      courseF_bee_for_challenge3: 使用尽可能少的模块来解决这个关卡。
      courseF_bee_functions2: 使用`只收集花蜜`函数来收集每朵花的花蜜。
      courseF_bee_functions2_2018: 使用`只收集花蜜`函数来收集每朵花的花蜜。
      courseF_bee_functions3: 点击 "编辑" 把代码放入`只酿蜂蜜`函数，然后用它来通过这个关卡。
      courseF_bee_functions3_2018: 点击 "编辑" 把代码放入`只酿蜂蜜`函数，然后用它来通过这个关卡。
      courseF_bee_functions3a: 写一个函数，如果蜜蜂在一朵花上就采花蜜，否则就酿蜂蜜。用函数来通过这关！
      courseF_bee_functions3a_2018: 写一个函数，如果蜜蜂在一朵花上就采花蜜，否则就酿蜂蜜。用函数来通过这关！
      courseF_bee_functions4: "“移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r\n\r\n用这个函数收集所有的花蜜。"
      courseF_bee_functions4_2018: "“移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r\n\r\n用这个函数收集所有的花蜜。"
      courseF_bee_functions5: 现在编写函数来采花蜜。
      courseF_bee_functions5a: 使用`移动和检查`函数来收集所有的花蜜。
      courseF_bee_functions5a_2018: 使用`移动和检查`函数来收集所有的花蜜。
      courseF_bee_functions6: 帮助蜜蜂通过在花那里左转，并在蜂窝那里右转来穿过迷宫。
      courseF_bee_functions6_2018: 帮助蜜蜂通过在花那里左转，并在蜂窝那里右转来穿过迷宫。
      courseF_bee_functions7: 从最后一个关卡重建你的函数, 来通过这个迷宫。
      courseF_bee_functions7_2018: 从最后一个关卡重建你的函数, 来通过这个迷宫。
      courseF_bee_functions8a: 收集所有的花蜜或酿造所有的蜂蜜!
      courseF_bee_functions8a_2018: 收集所有的花蜜或酿造所有的蜂蜜!
      courseF_bee_functionsPre7: 现在尝试构建一个函数来通过这个迷宫。 这和上次有什么不同？
      courseF_bee_functionsPre7_2018: 现在尝试构建一个函数来通过这个迷宫。 这和上次有什么不同？
      courseF_bee_functions_1_2018: 完成代码，让蜜蜂能够收集所有蜂蜜和花蜜。
      courseF_bee_functions_2_2018: 在一处编辑代码，让蜜蜂能收集所有的蜂蜜和花蜜。
      courseF_bee_functions_3_2018: 如果想用同样的函数来通过这关，要在每次循环时从这个变量上减一。
      courseF_bee_functions_challenge1: 创建一个新的函数，当前方有路的时候，收集所有的花蜜和蜂蜜。
      courseF_bee_functions_challenge1_2018: 创建一个新的函数，当前方有路的时候，收集所有的花蜜和蜂蜜。
      courseF_bee_functions_challenge2: 用你所学的来解决这个关卡。
      courseF_bee_functions_challenge2_2018: 用你所学的来解决这个关卡。
      courseF_bee_functions_challenge2_recursion: 收集所有的花蜜或酿造所有的蜂蜜!
      courseF_bee_fwp2: 将此代码拉入一个函数, 然后调用该函数以检查此行是否有花蜜。
      courseF_bee_fwp2_2018: 将此代码拉入一个函数, 然后调用该函数以检查此行是否有花蜜。
      courseF_bee_fwp3: 让我们看看这个函数是否能使收集这三行花蜜变得更加容易。
      courseF_bee_fwp3_2018: 让我们看看这个函数是否能使收集这三行花蜜变得更加容易。
      courseF_bee_fwp4: 向函数中添加一个`length`（长度）参数, 以便它在该行的长度不同时仍能正常工作。
      courseF_bee_fwp4_2018: 向函数中添加一个`length`（长度）参数, 以便它在该行的长度不同时仍能正常工作。
      courseF_bee_fwp5: 使用此函数收集花蜜。
      courseF_bee_fwp5_2018: 使用此函数收集花蜜。
      courseF_bee_fwp6: 为这个关卡建立一个简短而优美的解决方案。
      courseF_bee_fwp6_2018: 为这个关卡建立一个简短而优美的解决方案。
      courseF_bee_fwp7: "** 挑战: ** 修改你的函数也能酿蜂蜜。"
      courseF_bee_fwp7_2018: "** 挑战: ** 修改你的函数也能酿蜂蜜。"
      courseF_bee_fwp8: 使用你的新函数来解决这个螺旋。
      courseF_bee_fwp8_2018: 使用你的新函数来解决这个螺旋。
      courseF_bee_fwp9: 使用你的新函数来通关。
      courseF_bee_fwp9_predict1: 使用你的新函数来通关。
      courseF_bee_fwp9_predict1_2018: 使用你的新函数来通关。
      courseF_bee_fwp_challenge1: 使用一个有`length`（长度）参数的函数，并在里面使用`计数循环`来收集所有玉米。
      courseF_bee_fwp_challenge1_2018: 使用一个有`length`（长度）参数的函数，并在里面使用`计数循环`来收集所有玉米。
      courseF_bee_fwp_challenge2: '使用一个有`length`（长度）参数的函数，并在里面使用`计数循环`来收集每一行的蔬菜。 '
      courseF_bee_fwp_challenge2_2018: '使用一个有`length`（长度）参数的函数，并在里面使用`计数循环`来收集每一行的蔬菜。 '
      courseF_bee_variables_1_2018: 完成代码，让蜜蜂能够收集所有蜂蜜和花蜜。
      courseF_bee_variables_1_2019: 完成代码，让蜜蜂能够收集所有蜂蜜和花蜜。
      courseF_bee_variables_2_2018: 在一处编辑代码，让蜜蜂能收集所有的蜂蜜和花蜜。
      courseF_bee_variables_2_2019: 在一处编辑代码，让蜜蜂能收集所有的蜂蜜和花蜜。
      courseF_bee_variables_3_2018: 如果想用同样的函数来通过这关，要在每次循环时从这个变量上减一。
      courseF_bee_variables_3_2019: 如果想用同样的函数来通过这关，要在每次循环时从这个变量上减一。
      courseF_bee_variables_4_2018: 为这一关编辑代码。
      courseF_bee_variables_4_2019: 为这一关编辑代码。
      courseF_bee_variables_5_2018: 创建自己的代码来解决这个难题。
      courseF_bee_variables_5_2019: 创建自己的代码来解决这个难题。
      courseF_bee_variables_6_2018: "**挑战** 现在试试这个难题！"
      courseF_bee_variables_6_2019: "**挑战** 现在试试这个难题！"
      courseF_bee_variables_7_2018: 这个难题有点不同。需要什么来解决它？
      courseF_bee_variables_7_2019: 这个难题有点不同。需要什么来解决它？
      courseF_bee_variables_8_2018: 蜜蜂会从这朵花中收集多少花蜜？
      courseF_bee_variables_8_2019: 蜜蜂会从这朵花中收集多少花蜜？
      courseF_farmer_ramp11: 这个关卡也使用嵌套循环。 你知道是什么吗？
      courseF_farmer_ramp11_2018: 这个关卡也使用嵌套循环。 你知道是什么吗？
      courseF_maze_predict1: 此代码包含一个新模块。如果你按下 "运行" 块, 你认为会发生什么？
      courseF_maze_ramp13: 是时候把它都放在一起，来玩一关新的愤怒的小鸟了！
      courseF_maze_ramp15: 使用你学会的，让小鸟飞到猪那里！
      courseF_maze_ramp4: 躲开TNT炸药，否则羽毛会被炸飞！
      courseF_maze_ramp4_2018: 躲开TNT炸药，否则羽毛会被炸飞！
      courseF_maze_ramp5: 躲开TNT炸药！
      courseF_maze_ramp5_2018: 躲开TNT炸药！
      courseF_maze_ramp6: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseF_maze_ramp6_2018: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      courseF_maze_ramp7: 使用你学会的，让小鸟飞到猪那里！
      courseF_playlab_brokenText: 在这一阶段的剩余部分，我们要建立一个由你来控制的游戏！
      courseF_playlab_embed_vars: 回答 Pegleg 海盗的问题。如果输入代号 "密码" 会发生什么情况？或者其他的代码名称呢？
      courseF_playlab_variables0: 这是一个海盗。近来，他非常难以理解！
      courseF_playlab_variables1: 这是一个海盗。近来，他非常难以理解！
      courseF_playlab_variables1a: 变量能够用来存放晚一些想用的文本。通过将这个文本赋值给`shout`（喊叫）变量，让足球运动员琪琪喊出："进球了！"
      courseF_playlab_variables1a_2018: 变量能够用来存放晚一些想用的文本。通过将这个文本赋值给`shout`（喊叫）变量，让足球运动员琪琪喊出："进球了！"
      courseF_playlab_variables2: "现在，通过只在两处改变这些变量的值，就能解码海盗的语言！\r\n"
      courseF_playlab_variables2a: "现在，通过只在两处改变这些变量的值，就能解码海盗的语言！\r\n"
      courseF_playlab_variables2b RYAN CLONE: 把变量“color”（颜色）放在“join”（加入）模块的空插槽中来把它放到这句话的中间。
      courseF_playlab_variables2b: 把变量“color”（颜色）放在“join”（加入）模块的空插槽中来把它放到这句话的中间。
      courseF_playlab_variables2b_2018: 把变量“color”（颜色）放在“join”（加入）模块的空插槽中来把它放到这句话的中间。
      courseF_playlab_variables3: 这个`问`模块会自动的将用户的答案存放到你选择的变量中。
      courseF_playlab_variables3b: '帮助琪琪和布赖恩对话，使用变量`age`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables3bEdit: '帮助琪琪和布赖恩对话，使用变量`A1`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables3b_josh: '帮助琪琪和布赖恩对话，使用变量`age`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables3b_josh_2018: '帮助琪琪和布赖恩对话，使用变量`age`来放到所有需要使用年龄`12`的地方。 '
      courseF_playlab_variables4: 你能在工具箱中找到正确的变量放到这个空位中吗？
      courseF_playlab_variables4b: 将变量放到正确的位置来创建这个对话。
      courseF_playlab_variables4b_2018: 将变量放到正确的位置来创建这个对话。
      courseF_playlab_variables5: 你能在工具箱中找到正确的变量放到这个空位中吗？
      courseF_playlab_variables5b: 将所有的变量放到正确的位置来让海盗的故事合乎情理。
      courseF_playlab_variables5c RYAN Copy: 让我们把`问`模块和一个`如果/否则`语句组合起来做一个游戏！
      courseF_playlab_variables5c: 让我们把`问`模块和一个`如果/否则`语句组合起来来做一些有趣的事情！
      courseF_playlab_variables5c_2018: 让我们把`问`模块和一个`如果/否则`语句组合起来来做一些有趣的事情！
      courseF_playlab_variables6b: 将变量连接起来，制作一个有多个对话泡泡的有趣的故事。
      courseF_playlab_variables6c: 在这一阶段的剩余部分，我们要建立一个由你来控制的游戏！
      courseF_playlab_variables6c_2018: 在这一阶段的剩余部分，我们要建立一个由你来控制的游戏！
      courseF_playlab_variables7b: 创建一些问题，并将答案编织在一起做成你自己的故事。
      courseF_playlab_variables7b_2018: 创建一些问题，并将答案编织在一起做成你自己的故事。
      courseF_playlab_variables7c: 通过让用户来猜颜色，来让这个游戏做点什么。
      courseF_playlab_variables7c_2018: 通过让用户来猜颜色，来让这个游戏做点什么。
      courseF_playlab_variables8b: 用你学会的知识，来创建一个演员之间的即兴表演。
      courseF_playlab_variables8c: 使用变量来使你的游戏更个性化。
      courseF_playlab_variables8c_2018: 使用变量来使你的游戏更个性化。
      courseF_playlab_variables_challenge1: '使用这些模块使演员分享一个敲门问答的笑话。 '
      courseF_playlab_variables_challenge1_2018: '使用这些模块使演员分享一个敲门问答的笑话。 '
      courseF_playlab_variables_challenge2: 这个游戏将使用变量来保存得分。捉住小猫得2分。捉住企鹅得3分。当小猫和企鹅碰到时，分数就没了。正好得到10分时就赢了！
      courseF_playlab_variables_challenge2_2018: 这个游戏将使用变量来保存得分。捉住小猫得2分。捉住企鹅得3分。当小猫和企鹅碰到时，分数就没了。正好得到10分时就赢了！
      courseF_playlab_variables_challenge3: 你能想出这个 "算命先生" 应用程序是如何工作的吗？单击 "更多" 以查看您的挑战。
      courseF_video_createFunctions: 我们还没有创建函数的视频。这是一个占位符。。。
      courseF_video_createFunctions_2018: 我们还没有创建函数的视频。这是一个占位符。。。
      course_playlab_variables1: 这是一个海盗。近来，他非常难以理解！
      course_playlab_variables2: "现在，通过只在两处改变这些变量的值，就能解码海盗的语言！\r\n"
      course_playlab_variables3: "现在，通过只在两处改变这些变量的值，就能解码海盗的语言！\r\n"
      coursea_maze_ramp1_2018: 在这一关中，将所有模块拼到一起，并点击"▶运行"！
      coursea_maze_ramp1_2019: 在这一关中，将所有模块拼到一起，并点击"▶运行"！
      coursef_explore_CYOA_Witch: 你可以在游戏实验室做任何你想做的事! 下面是一个在游戏实验室中选择自己的冒险故事的例子。
      coursef_explore_playlab2: 你可以在剧本实验室做任何你想做的事! 下面是一个在剧本实验室中故事的例子。
      coursef_explore_playlab_cat_game: 你可以在剧本实验室做任何你想做的事! 下面是一个在剧本实验室里游戏的例子。
      coursef_maze_ramp3: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      coursef_maze_ramp3_2018: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      eventsIntro: 需要更好的游戏实验室/事件组合
      flappy_1: 将一个模块附加到"单击时"模块上，然后按"运行"。单击或点击屏幕去移动像素鸟到目标.
      flappy_11: 创建你自己的像素鸟游戏。你可以改变所有的有视效果，所有的规则，甚至重力。当你完成后，单击完成，让朋友在他们手机上试试你的手机游戏。
      flappy_11_2018: 创建你自己的像素鸟游戏。你可以改变所有的有视效果，所有的规则，甚至重力。当你完成后，单击完成，让朋友在他们手机上试试你的手机游戏。
      flappy_1_2018: 将一个模块附加到"单击时"模块上，然后按"运行"。单击或点击屏幕去移动像素鸟到目标.
      flappy_2: 现在我们已经添加了一些地面。将一个块附加到"撞到地面时"块。当像素鸟撞地时，您的代码需要 ' 结束游戏 '。
      flappy_2_2018: 现在我们已经添加了一些地面。将一个块附加到"撞到地面时"块。当像素鸟撞地时，您的代码需要 ' 结束游戏 '。
      flappy_3: "“运行时”块允许你在游戏开始时运行你的代码. 尝试设置水平速度和扑向目标。"
      flappy_3_2018: "“运行时”块允许你在游戏开始时运行你的代码. 尝试设置水平速度和扑向目标。"
      flappy_4: Flappy将会穿越障碍，除非你编写代码使他碰撞上。将一个模块附加到"当击中一个障碍"块。当Flappy 撞上到第一组管道时，您的代码需要
        ' 结束游戏 '。
      flappy_4_2018: Flappy将会穿越障碍，除非你编写代码使他碰撞上。将一个模块附加到"当击中一个障碍"块。当Flappy 撞上到第一组管道时，您的代码需要
        ' 结束游戏 '。
      flappy_5: 让我们添加一个记分牌。当 Flappy 穿过障碍计分数。将添加到"当通过一个障碍"块，然后当像素鸟通过第一个管道后得分。
      flappy_5_2018: 让我们添加一个记分牌。当 Flappy 穿过障碍计分数。将添加到"当通过一个障碍"块，然后当像素鸟通过第一个管道后得分。
      flappy_6: 在使得像素鸟飞的距离更小或更大之后，看看是否你仍然能得分。
      flappy_6_2018: 在使得像素鸟飞的距离更小或更大之后，看看是否你仍然能得分。
      flappy_7: 接下来, 请尝试将另一个块附加到"运行时"块来更改场景.
      flappy_7_2018: 接下来, 请尝试将另一个块附加到"运行时"块来更改场景.
      flappy_8: 不只是在游戏开始时，您可以随时设置的视觉效果。请尝试在其他事件发生时设置一个随机场景，例如，在通过障碍时。
      flappy_8_2018: 不只是在游戏开始时，您可以随时设置的视觉效果。请尝试在其他事件发生时设置一个随机场景，例如，在通过障碍时。
      flappy_9: 现在我们要把前面学的全部混在一起啦，当击中一个障碍物，请尝试把分数设置回0分，而不是将游戏结束。
      flappy_9_2018: 现在我们要把前面学的全部混在一起啦，当击中一个障碍物，请尝试把分数设置回0分，而不是将游戏结束。
      frozen circle function in circle: 现在让我们创建20个交叠的圆圈，在每圆圈之间转18度。
      frozen circle function with parameter: 这里有一个“创建圆圈”的模块，可以画不同大小的圆圈。你可以用它来创建一个5像素的小圆圈和10像素的大圆圈吗?
      frozen circle function: 使用新的"创建一个圆"块来创建 10 个相互重叠的圆圈。画圈之间别忘了跳一下哦。
      frozen circle: 圆形是一种特殊的形. 你可以计算出什么号码能取代问号来画圆形吗?
      frozen cross rotate dense: 让我们重复90次！ 90进入360是多少次？提示：这是一个非常小的数目。
      frozen cross rotate dense_b: 让我们重复这行 **90** 次!
      frozen cross rotate dense_test: 让我们重复这行 **90** 次!
      frozen cross rotate: 现在请尝试重复 10 次。每个行之间你需要转多少度？
      frozen cross: 将这些命令放到“重复”模块里来画一个加号。你注意到爱莎可以前后移动了吗？
      frozen diamond mini snowflake: 你知道每个雪花的形状都不同吗？让我们用另一个循环来重复平行四边形4次来创建一个新的雪花。在每个平行四边形之间转90度。
      frozen diamond snowflake: 現在，让我们创建一个新的雪花, 使用“重复”块来重复一个平行四边形10次，把每一个平行四边形之间转右36度
      frozen diamond: 将这些模块放到一个重复模块里来创建一个平行四边形。它和长方形很像，但是角度不同。这个平行四边形的角是60度和120度，而正方形的所有角度都是90度。
      frozen freeplay: 你已经正式成为艺术大师！创建一个冬季仙境。
      frozen line: 你好！我是艾伦代尔的艾莎公主。请你帮我画一条直线。
      frozen perpendicular: 现在让我们看看我们是否可以画两条直线，前提是彼此必须存着90度角的相位关系。您将需要使用“转向”块和“移动”块。
      frozen snowflake branch: 试试用“创建雪花分支”模块来创建三个分支，来让它看起来像一片雪花。
      frozen snowflake branch_test: 尝试使用`创建雪花分支`块来创建雪花的三个末端。
      frozen snowflake full: 现在，让我们重复8次，做一个漂亮的雪花!
      frozen snowflower: 错综复杂的雪花模式可以用非常简单的形状来创建。 你可以重复5个大小为5的圆圈和5个大小为10的圆圈来做成一个模式吗?
      frozen square iterative: 我们好像已经成功地绘制了半个正方形。来，我们一起把四行条线组合起来绘制一个完整的正方形。
      frozen square loop 3x: 让我们绘制三个正方形，每绘制一个正方形后，别忘了先转120度后再继续绘制下一个正方形。
      frozen square loop: 你好！我是艾伦代尔的安娜公主！我们一起应用“重复“块绘制一个正方形。这样一来，我们可以减少必须使用的代码块。你觉得“重复”块必须循环多少次（???）才能让里面的代码块绘制出一个正方形呢？
      frozen square snowflake: 你可以试试绘制一朵雪花。用“重复”块绘制10个正方形，而且记得在绘制成每个正方形移之后，先把它移转36度后才开始画下一个正方形。
      grade1_adventurer_loops1: 4堆金子！收集所有4堆。
      grade1_adventurer_loops2: 罗瑞尔怎样只用`E -->`模块来收集所有5堆金子？
      grade1_adventurer_loopsPre: 这是冒险家罗瑞尔! 你能把她带到附近去找黄金吗？
      grade1_artist_loops2: 帮助艺术家画一条线7次, 来做花园墙。
      grade1_artist_loops3: '现在我们要准备好种植用的土壤。在代码中寻找缺陷并帮助艺术家准备好地面。

'
      grade1_artist_loops5: 在灌木丛后面是一条开满美丽花朵的藤。你能够爬上藤看它延到哪里吗？
      grade1_artist_loops6: "**挑战：**这是一个隐藏的花园！让我们四处走一走。"
      grade1_artist_loops8: 让我们走捷径回家，越过池塘。你能帮助艺术家待在石头上吗？
      grade1_artist_loopsFP: 用你已经学到的画一副你想让艺术家回到家里看到的画。
      grade1_maze_sequence1: 修改代码来让我到达那只猪！
      grade1_maze_sequence10: 移动我绕过炸药，来到达那只猪。
      grade1_maze_sequence2: 修改代码来让我到达那只猪！
      grade1_maze_sequence3: 添加两个模块, 让鸟到猪那。
      grade1_maze_sequence4: 现在从开始试试这一关！
      grade1_maze_sequence5: 向一个方向移动，然后往另一个方向移动来帮我到达猪那里！
      grade1_maze_sequence6: 想想这里缺了什么，然后添加模块让我到达那只猪！
      grade1_maze_sequence7: 该你了！ 你要怎么做才能把鸟送到猪那里？
      grade1_maze_sequence9: '绕过炸药，让我到达那只猪！ '
      grade1_maze_sequenceA: 挑战：移动我绕过炸药，来到达那只猪。
      grade1_maze_sequenceB: 修复缺陷，让鸟到猪那。
      grade1_maze_sequenceC: 都靠你了！让小鸟到达猪那里。
      grade1_playlab_eventsFP: 运用你的想象力。你能做些什么让这个游戏更有趣？
      grade2_CaringForNewPet_0: 对于这个关卡, 把所有的方块拖在一起, 并点击 "运行" 开始!
      grade2_CaringForNewPet_1: 从工具箱中拖出另一个`向前移动`模块来完成代码。
      grade2_CaringForNewPet_10: 帮我到达那只猪。
      grade2_CaringForNewPet_2courseC_maze_programming3: 有一个额外的块将导致鸟坠落。将其拖回工具箱中扔掉它。
      grade2_CaringForNewPet_4: "\"保持冷静, 帮助我找到那只坏猪。否则我会生气的!“"
      grade2_CaringForNewPet_5: 帮我到达那只猪。
      grade2_MakeDogTag_1: 将模块拖到屏幕上，让艺术家在图中灰色线上画线。(每行100像素长)
      grade2_MakeDogTag_10: 现在，随便画你喜欢的东西吧！
      grade2_MakeDogTag_3: 帮我为小猫盖好房子
      grade2_MakeDogTag_4: "沿外部绘制一个矩形来完成此捉人游戏。\r\n（长边200像素，短边100像素）"
      grade2_MakeDogTag_6: 自己玩吧！想画什么就画什么。
      grade2_MakeDogTag_7: "再来一个捉人游戏。这是一个派的三角形。\r\n（每边为150像素）"
      grade2_MakeDogTag_8: 现在，让我们把这一堆V用循环连在一起。
      grade2_MakeDogTag_9: 重构刚刚那一关的代码，但是这次，加一个左转30度到循环里。现在，重复24次，而不是8次。
      grade2_PuppyLoops_1: 能用5个同样的模块来帮我到达猪那里吗？
      grade2_PuppyLoops_10: "我的老师说应该有始有终！\r\n\r\n帮我完成我的风车。你能找出哪里错了吗？"
      grade2_PuppyLoops_2: 你能通过创建一个只有`向前移动`的`重复`循环来到达猪那里吗？
      grade2_PuppyLoops_4: 在这道题里，两个“重复”循环能够让你用最少数量的模块来到达猪那里！
      grade2_PuppyLoops_5: 你能找到最快的路来帮我到那只猪那里吗？
      grade2_PuppyLoops_7: 用你学会的知识让我到达向日葵那里！
      grade2_PuppyLoops_8: "这只猫的三条胡须的代码是错误的。\n\r\n\r\n修改代码来画出一样长的胡须。"
      grade2_PuppyLoops_9: "代码里面的这个“C”看起来像是画反了！\r\n\r\n你能把它再改成“C”吗？"
      grade2_collector_10: 快要完成了！收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_10_2018: 快要完成了！收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_10_2019: 快要完成了！收集尽可能多的宝藏来完成这个阶段！
      grade2_collector_2: 把罗瑞尔移到宝藏上, 然后用`收集`来捡起来。
      grade2_collector_3: 将这些模块正确的排列起来，收集所有的黄金来过关。
      grade2_collector_4: 顺序很重要！你需要的模块已经在工作区了，但还没有连起来。将这些模块按顺序连接起来，来收集所有的金子并通过这关。
      grade2_collector_5: 这些模块的顺序不对。你能修好它们吗？
      grade2_collector_6: 重新排列模块来收集所有的宝藏。
      grade2_collector_7: 挑战关！用工具箱的模块来收集所有的宝藏。
      grade2_collector_8: '"继续保持良好的工作! 帮我收集所有的金币。"'
      grade2_collector_9: '*"让我们得到所有的金币！*'
      grade2_collector_9a: "** 挑战: ** 收集所有的硬币。"
      grade2_collector_A: 帮助罗瑞尔收集所有的宝藏。
      grade2_collector_A_2018: 帮助罗瑞尔收集所有的宝藏。
      grade2_collector_A_2019: 帮助罗瑞尔收集所有的宝藏。
      grade2_collector_pre1: "\"嗨，我是罗瑞尔。今天，我到狗公园里寻宝！\" \r\n\r\n试试这些模块来看看是否你能帮助罗瑞尔收集一些金子。"
      grade2_playlab_project_1: 现在，写一个程序，用上/下/左/右按键使企鹅到达所有目标！
      grade2_playlab_project_2: 利用"一直重复"块，你就可以重复不断地执行代码。您可以再连接一些块来使恐龙迪诺（演员2）反复向上向下移动吗？
      grade2_playlab_project_3: "你能否让企鹅撞到恐龙时，让它说\"哎哟!\" 同时播放一个“命中”的声音？\r\n\r\n完成后玩一下，用箭头移动企鹅来试试。"
      grade2_playlab_project_4: "添加一个模块，在企鹅碰到奥克塔维亚（演员3）时得1分？\r然​​后试玩一下，用箭头移动企鹅直到得分！"
      grade2_playlab_project_5: "添加模块到“当运行时”事件中来改变背景和企鹅的速度\r\n\r\n玩一玩，让企鹅按箭头移动，直到得分。"
      grade2_puppy_loops2: 你能通过创建一个只有`向前移动`的`重复`循环来到达猪那里吗？
      grade2_puppy_loops4: 在这道题里，两个“重复”循环能够让你用最少数量的模块来到达猪那里！
      grade3_ConditionalsElse_1: 云朵挡住了我的视线！检查一下云下面是否有花，然后只从有花的地方收集花蜜。小心，它是能变化的！
      grade3_ConditionalsElse_2: "更多的云！\r\n\r\n检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。\r\n\r\n记住：\n不是所有云下面都是一样的东西！"
      grade3_ConditionalsElse_3: 现在，我只想酿蜂蜜。有些云下面有蜂蜜。确保检查了每一朵云！
      grade3_ConditionalsElse_4: 有时云下面是花，有时云下面是蜂蜜！用“如果/否则”模块来收集花里的花蜜，否则酿蜂蜜（因为它是蜂巢）。
      grade3_ConditionalsElse_5: "在云底下要么是花，要么是蜂巢！\r\n\r\n如果是花，用“如果/否则”模块来收集花蜜。\r\n否则酿蜂蜜（因为它是蜂巢）。"
      grade3_ConditionalsElse_6: "我不确定这朵花有多少花蜜， 但我知道它可能有1个，两个或3个花蜜。\r\n\r\n将一个“如果/否则”模块和另一个“如果/否则”模块混合在一起，成为了一个“如果，否则如果，否则”模块，来采集花里的所有花蜜。\r\n\r\n记住，每次你运行谜题时，花蜜的数量都会变化的！"
      grade3_ConditionalsElse_7: "这些花里可能有一个，两个或三个花蜜。\n\r\n\r\n完成“检查紫色花朵”的函数，然后用它来从所有花里收集花蜜。"
      grade3_ConditionalsElse_8: "完成“检查花朵，酿造蜂蜜”的函数。\r\n\r\n你的函数应该检查紫色的花是否有3个，2个或1个花蜜，然后收集所有的花蜜。\r\n然后，往前移动并酿造蜂蜜。"
      grade3_ConditionalsElse_9: "评估：这朵云要么藏着一朵有一个花蜜的花，或者有一个蜂蜜的蜂蜜罐。\n\r\n\r\n完成这个“采集花蜜或酿造蜂蜜”的函数，然后调用它来采集所有花蜜，并且酿蜂蜜。\r\n"
      grade3_ConditionalsElse_TeacherIDo: "在云底下要么是花，要么是蜂巢！\r\n\r\n如果是花，用“如果/否则”模块来收集花蜜。\r\n否则酿蜂蜜（因为它是蜂巢）。"
      grade3_Conditionals_1 BAD: 用循环来收集所有的花蜜。
      grade3_Conditionals_1: "我是一只饥饿的蜜蜂！\r\n帮我用最少的模块从花朵中采集花蜜。"
      grade3_Conditionals_10 BAD: 用嵌套循环从每行的所有花里收集花蜜。
      grade3_Conditionals_10: "这里有好多！\r\n\r\n用你学到的知识来收集所有的花蜜，并制作蜂蜜。"
      grade3_Conditionals_11 BAD: 评估 - 用当循环来收集所有花蜜。
      grade3_Conditionals_11: "让我们把东西都放到一起！\r\n\r\n用你学到的知识只从有花蜜的花里收集，用的模块越少越好。别忘了最后制作蜂蜜。"
      grade3_Conditionals_12: "这个像阶梯一样的图形看起来很熟悉。\r\n\r\n你能用尽量少的模块从花里收集一些花蜜吗？"
      grade3_Conditionals_13: 评估：收集所有的花蜜。小心，不要采集没有花蜜的紫花。
      grade3_Conditionals_2: "查看所有的花蜜！\r\n\r\n帮我用尽可能少的模块来收集花蜜并酿成蜂蜜。  "
      grade3_Conditionals_3: "小心不要从没有花蜜的紫花里收集花蜜。\r\n你必须先用“如果”模块来检查是否花蜜等于1。"
      grade3_Conditionals_4: 用“如果”模块来检查是否花里面有花蜜。
      grade3_Conditionals_5: 从每一朵花中采集花蜜（如果有的话）。
      grade3_Conditionals_6: 这块地里有红色和紫色的花。你能看到红色的花里有多少花蜜，但不知道紫色的有多少。收集所有的花蜜。
      grade3_Conditionals_7: 收集每朵花的花蜜。
      grade3_Conditionals_8: "我想知道那里有什么！\r\n\r\n帮我飞到院子里，只从有花蜜的花里收集花蜜。 "
      grade3_Conditionals_9: 帮我用尽可能少的模块找到所有的花蜜！
      grade3_Conditionals_TeacherIDo: 用“如果”模块来检查是否花里面有花蜜。
      grade3_Debugging_1: 这些模块真的让我很困扰。改正错误，从而能够采集所有花蜜。
      grade3_Debugging_5: "那朵花看起来很好吃！\r\n\r\n改正错误，从而能够采集所有花蜜。你可以用“运行”和“下一步”了。"
      grade3_Debugging_6: "真是一个甜蜜的挑战！\r\n\r\n改正错误，从而能够采集所有花蜜。"
      grade3_Debugging_7: 修复错误来收集所有的花蜜并酿蜂蜜。
      grade3_Debugging_9: "有点耐心！\r\n\r\n你需要修复这个程序的一些问题，，从而能够采集所有花蜜，并酿成蜂蜜。"
      grade3_Debugging_TeacherIDo: 这些模块真的让我很困扰。改正错误，从而能够采集所有花蜜，并酿成蜂蜜。
      grade3_Loops_10: "忙碌的蜜蜂！\r\n\r\n帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。"
      grade3_Loops_11: "这条路的形状和其它的不一样。\r\n\r\n你能用尽量少的模块来收集所有花蜜吗？"
      grade3_Loops_12: 你能为蜜蜂找到最快的路，收集所有花蜜并酿造蜂蜜吗？
      grade3_Loops_2: 这次，用循环来收集所有花蜜。
      grade3_Loops_3: 用一个“重复”循环来收集所有花蜜。
      grade3_Loops_4: 现在，用“重复”模块来收集花蜜，并酿造蜂蜜。
      grade3_Loops_5: 多美的花园啊！帮助蜜蜂访问每一朵。你能找到只用7个模块就实现的方法吗？
      grade3_Loops_6: "这个谜题中的循环应该进行多少次？\r\n\r\n循环是你的朋友！用一些循环来减少模块，并完成这道谜题。"
      grade3_Loops_7: "这些花看上去很好吃！\r\n\r\n用尽可能少的模块，从每朵花里收集蜂蜜。"
      grade3_Loops_8: 用尽可能少的模块来收集花蜜，并酿造蜂蜜。
      grade3_Loops_9: 用最少的模块来收集花蜜，并在蜂窝那里酿造蜂蜜。
      grade3_Loops_TeacherIDo: "这些花看上去很好吃！\r\n\r\n用尽可能少的模块，从每朵花里收集蜂蜜。"
      grade3_RunningFarm_10: 收集所有的玉米和莴苣，然后捡起南瓜。
      grade3_RunningFarm_11a: 收集所有的玉米和莴苣，然后捡起南瓜。
      grade3_RunningFarm_3: '*"玉米、莴苣和南瓜！帮我全收集起来。"*'
      grade3_RunningFarm_4: 在移动到下一捆之前，帮农夫先收集所有的莴苣。
      grade3_RunningFarm_6: 你能找出如何捡起所有的南瓜吗？确保沿着路收集所有的玉米！
      grade3_RunningFarm_7: "**挑战：**收集所有的玉米和莴苣，然后捡起南瓜。"
      grade3_bee_conditionals_new1a: "帮助蜜蜂采集所有的花蜜。\n\r\n\r\n只能从花中采到花蜜，但可以查看任何地方看那里是不是有朵花。"
      grade3_bee_conditionals_new1b: |-
        帮助蜜蜂采集所有的花蜜。
        你只能从花中采到花蜜，但你可以查看任何地方以确定哪里有花。
      grade3_bee_conditionals_new2: 使用尽可能少的模块来收集所有的花蜜。
      grade3_bee_conditionals_new2a: 使用尽可能少的模块来收集所有的花蜜。
      grade3_bee_conditionals_new3a: 搜集所有的花蜜或酿造所有的蜂蜜。你只能从花搜集花蜜，并只能从蜂窝里酿蜂蜜。检查任何空间来看看那里是否有花或者蜂窝。
      grade3_bee_conditionals_new3b: 收集所有的花蜜并制作蜂蜜。
      grade3_bee_conditionals_quantum1: 看看云下是否有朵花。如果有一朵花, 就采集花蜜。
      grade3_bee_conditionals_quantum2: "在采集花蜜前，检查每朵云下面是不是有花。\r\n"
      grade3_bee_conditionals_quantum3: 有些云下面可能有蜂窝。 一定要检查是否有蜂窝藏在每朵云后面!
      grade3_bee_conditionals_quantum4: 使用 "如果/否则" 模块收集花朵的花蜜, 在蜂窝里制作蜂蜜。
      grade3_maze_Loop1: '评估：只用5个模块帮我到达向日葵！ '
      grade3_maze_loops2: '用尽可能少的模块让僵尸到达向日葵！  '
      grade3_maze_loops2a: 用尽可能少的模块让僵尸到达向日葵。
      grade3_maze_loops3: 只使用已有的模块把僵尸带到向日葵那里。
      grade3_maze_loops4: 用尽可能少的模块来帮我到达向日葵！
      grade3_maze_loops5: 用尽可能少的模块来帮我到达向日葵！
      grade3_maze_nestedLoops1: 能用5个同样的模块来帮我到达猪那里吗？
      grade3_maze_nestedLoops2: 你能通过创建一个只有`向前移动`的`重复`循环来到达猪那里吗？
      grade3_maze_nestedLoops3: 帮我到达猪那里！这次只能用一个“向前移动”模块。
      grade3_maze_nestedLoops4: 在这道题里，两个“重复”循环能够让你用最少数量的模块来到达猪那里！
      grade3_playLab_buildGame_final2: 这是你用来选择卡片的代码 - 试试添加一些别的有趣的功能！
      grade3_robotFarmer_ConditionalsIntro4: 用`当`循环来帮助农夫移除整个土堆。
      grade3_robotFarmer_ConditionalsIntro_1: "*\"你好，我是一个农夫。我需要你帮我把一块地翻平来为种植做准备！\"*\r\n\r\n移动到那堆土上面，并使用`移除`模块来移除它。"
      grade3_robotFarmer_ConditionalsIntro_10: 我工作的太晚了，外面天都黑了。我没办法知道那些土堆有多大了。所以”当“块上的某些选项消失了。把我挪到田地的另一头，如果遇到一个土堆，就移除它。
      grade3_robotFarmer_ConditionalsIntro_10a: '用尽可能少的模块来弄平所有土堆。 '
      grade3_robotFarmer_ConditionalsIntro_11: 外面还是一片漆黑。让我移动到田地的另一边。如果遇到一个土堆，就移除它。相对的，如果遇到一个洞，就填平他。提示：你可以使用”如果“块的下拉菜单中的选项。
      grade3_robotFarmer_ConditionalsIntro_11a: '用尽可能少的模块来弄平所有土堆。 '
      grade3_robotFarmer_ConditionalsIntro_4: "*\"我不知道这堆有多少土！\"*\r\n\r\n帮助农夫用`当`循环来移除整堆土。"
      grade3_robotFarmer_ConditionalsIntro_5: '帮我移除所有的土。 '
      grade3_robotFarmer_ConditionalsIntro_6: 移走所有的土堆，尽可能使用尽量少的块。在”当“块的下拉菜单中有新的选项，它能告诉我现在是否站在一个土堆或一个洞上。
      grade3_robotFarmer_ConditionalsIntro_7: "看看这些洞！每个都需要不同数量的土。 \r\n\r\n你能很容易的用`当`循环来填满它们！"
      grade3_robotFarmer_ConditionalsIntro_8: 填满每条路尽头的洞。
      grade3_robotFarmer_ConditionalsIntro_9: "**挑战：** 用尽可能少的模块填满这些洞。 "
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo1: 帮我用五铲子的土来填充这些洞。提示： 你可以把"重复"块放在"当"块里面试试。
      grade3_robotFarmer_ConditionalsIntro_TeacherIDo2: 我工作的太晚了，外面天都黑了。我没办法知道那些土堆有多大了。所以”当“块上的某些选项消失了。把我挪到田地的另一头，如果遇到一个土堆，就移除它。
      grade4_arist_nested_loop_circles1: 评估：用嵌套循环来完成这幅画。
      grade4_arist_nested_loop_flags1: 循环下面的代码来创建一个风车。
      grade4_arist_nested_loop_polygons1: "循环这个图形10次。\r\n\r\n你的循环里每次需要转多少度呢？"
      grade4_arist_nested_loop_polygons2: "循环这个图形6次。\r\n\r\n你的循环里每次需要转多少度呢？ "
      grade4_arist_nested_loop_squares1: 你能用嵌套循环画出人行道上的十个正方形吗？每个正方形是30像素。
      grade4_arist_nested_loop_triangles2: '现在，把这个循环放到另一个循环里，来画出10个三角形。这就叫做嵌套循环。  '
      grade4_arist_nested_loop_triangles3: 你可以通过循环三角形代码来画一个六边形吗?
      grade4_arist_nested_loop_triangles4: 在鳄鱼嘴里画上牙齿！
      grade4_arist_nested_loop_triangles5: "通过将开始的代码嵌套到另一个循环中来画一个太阳。\r\n\r\n如果要画出这个很酷的中空设计，你需要在转弯前往前跳三角形长度那么多。"
      grade4_arist_nested_loop_triangles6: 你能用嵌套循环画出36个三角形吗？
      grade4_artist_functions1: "帮助僵尸艺术家画一个边长为100像素的眼镜。\r\n眼镜之间的桥梁长75像素。"
      grade4_artist_functions2: "函数能让你定义新的模块。\r\n\r\n我们将画正方形的模块挪到了一个叫做“画一个正方形”的函数里。这次，用“画一个正方形”函数来画个眼镜吗。\n\r\n\r\n正方形间隔75像素。"
      grade4_artist_functions2a: 只用提供的模块来画出这个图。
      grade4_artist_functions3a: 只用提供的模块来画出这个图。
      grade4_artist_functions3b: 这次，用8个（25像素边长的）六边形的线。
      grade4_artist_functionsChallenge0: "**挑战：**创建你能想到的尽可能多的函数来画出这个50像素的正方形的图案。"
      grade4_artist_functions_challenge: 用提供的函数来画四行六边形。要注意是怎样让偶数行转移到右边的？
      grade4_artist_functions_challenge2: 用提供的函数来画四行六边形。要注意是怎样让偶数行转移到右边的？
      grade4_artist_functions_stars0: 可以通过添加重复模块来绘制此画。
      grade4_artist_functions_stars1: 现在你能画一个星星了，试试画4个星星！
      grade4_artist_functions_stars2: 只画3个星星来完成这关。
      grade4_artist_functions_windows0: 通过画一个正方形来制作这个窗口，然后在画另一个前转90度，等等。
      grade4_artist_nestedLoops_challenge: "点击这里再看一遍提示！\r\n\r\n这里是这个有趣的图形的代码。当你重复多次，在每次转动之间会发生什么？这样会让图形转动最多420度。这也表示当小艺术家画完后，就和刚开始时面朝不一样的方向了。新的方向正好是向右转了60度。"
      grade4_artist_nestedLoops_challenge2: 挑战来了！多试验，多试错，不要指望第一次就能完全正确。想看看更多的提示？点击这里！
      grade4_artist_nested_loop_circles1: 评估：用嵌套循环来完成这幅画。
      grade4_artist_nested_loop_flags1: 循环下面的代码来创建一个风车。
      grade4_artist_nested_loop_polygons1: "循环这个图形10次。\r\n\r\n你的循环里每次需要转多少度呢？"
      grade4_artist_nested_loop_squares1: 你能用嵌套循环画出人行道上的十个正方形吗？每个正方形是30像素。
      grade4_artist_nested_loop_triangles1: 完成代码来画出这些三角形。第一个三角形已经帮你画好了。提示：三个三角形一共旋转了360度。
      grade4_artist_nested_loop_triangles5: "通过将开始的代码嵌套到另一个循环中来画一个太阳。\r\n\r\n如果要画出这个很酷的中空设计，你需要在转弯前往前跳三角形长度那么多。"
      grade4_artist_nested_loop_triangles6: 你能用嵌套循环画出36个三角形吗？
      grade4_artist_parameters_squares1: 点击“编辑”来填写这个“画一个正方形”函数的定义，并且加一个参数。它应该像三角形一样有一个长度参数。这次，画三个正方形，边长分别为25，50，75像素，每个相隔100像素。
      grade4_artist_parameters_triangles2: 你注意到这些函数模块有什么不同吗？点击“运行”来看看会发生什么。
      grade4_artist_parameters_triangles2b: 你能完成这幅画吗？提示：每个三角形的边长比前一个多25像素。第一个三角形的边长是25像素。
      grade4_artist_parameters_triangles3: 你能完成这幅画吗？提示：每个三角形的边长比前一个多25像素。第一个三角形的边长是25像素。
      grade4_artist_parameters_triangles4: 这个三角形的代码被破坏了。你能修好这个函数，让它能画边长25，50，75像素的三角形吗？
      grade4_artist_parameters_trianglesx: 你能完成这幅画吗？提示：每个三角形的边长比前一个多25像素。第一个三角形的边长是25像素。
      grade4_bee_conditionals_new3a: 搜集所有的花蜜或酿造所有的蜂蜜。你只能从花搜集花蜜，并只能从蜂窝里酿蜂蜜。检查任何空间来看看那里是否有花或者蜂窝。
      grade4_bee_conditionals_new3b: 啊哦! 蜜蜂不确定它应该收集花蜜或还是酿制蜂蜜。你能帮它吗？
      grade4_bee_conditionals_quantum1: 云朵挡住了我的视线！检查一下云下面是否有花，然后只从有花的地方收集花蜜。小心，它是能变化的！
      grade4_bee_conditionals_quantum2: "更多的云！\r\n\r\n检查每朵云下面是不是藏着花。如果是的话，再采集花蜜。\r\n\r\n记住：\n不是所有云下面都是一样的东西！"
      grade4_bee_conditionals_quantum4: 有时云下面是花，有时云下面是蜂蜜！用“如果/否则”模块来收集花里的花蜜，否则酿蜂蜜（因为它是蜂巢）。
      grade4_bee_conditionals_quantum5: "在云底下要么是花，要么是蜂巢！\r\n\r\n如果是花，用“如果/否则”模块来收集花蜜。\r\n否则酿蜂蜜（因为它是蜂巢）。"
      grade4_bee_functions1: 收集每朵花的花蜜。
      grade4_bee_functions10: 创建一个函数, 收集每朵花的所有花蜜。
      grade4_bee_functions2: 函数能执行多个模块来完成一个任务。使用“采2份花蜜”方程来采集花蜜。
      grade4_bee_functions3: 构建`获取5个`函数, 以便在这个关卡中使用。
      grade4_bee_functions4: "“移动并获得花蜜”函数会让蜜蜂转身并收集花蜜，然后会让蜜蜂返回出发的地方。\r\n\r\n用这个函数收集所有的花蜜。"
      grade4_bee_functions6: 现在编写函数来采花蜜。
      grade4_bee_functions7: 创建一个函数, 并调用它来收集每朵花的花蜜, 并在每个蜂窝酿制蜂蜜。
      grade4_bee_functions9: 创建一个函数, 收集每朵花的所有花蜜。
      grade4_bee_nestedLoops0: 用循环来收集所有的花蜜。
      grade4_bee_nestedLoops1: 收集每朵花的花蜜。
      grade4_bee_nestedLoops2: "**挑战：** 找出如何只使用现有模块得到所有的花蜜。"
      grade4_bee_nestedLoops2a: 使用尽可能少的模块来收集所有的花蜜。
      grade4_bee_nestedLoops3: 创建一个嵌套循环来收集所有花蜜。
      grade4_bee_nestedLoops4: '从所有的花里收集花蜜，然后在蜂窝那里酿花蜜。 '
      grade4_frozen_freeplay: 你已经正式成为艺术大师！创建一个冬季仙境。
      grade4_frozen_functions0: 如果要画一个圆，你知道应该在画问号的地方填上什么数字么？
      grade4_frozen_functions1a: 使用新的"创建一个圆"块来创建 10 个相互重叠的圆圈。画圈之间别忘了跳一下哦。
      grade4_frozen_functions2: 现在让我们创建20个交叠的圆圈，在每圆圈之间转18度。
      grade4_frozen_functions3: 这里有一个“创建圆圈”的模块，可以画不同大小的圆圈。你可以用它来创建一个5像素的小圆圈和10像素的大圆圈吗?
      grade4_frozen_functions4: 错综复杂的雪花模式可以用非常简单的形状来创建。 你可以重复5个大小为5的圆圈和5个大小为10的圆圈来做成一个模式吗?
      grade4_frozen_nested_loop_diamonds2: 你知道每个雪花的形状都不同吗？让我们用另一个循环来重复平行四边形4次来创建一个新的雪花。在每个平行四边形之间转90度。
      grade4_frozen_nested_loop_diamonds3: 現在，让我们创建一个新的雪花, 使用“重复”块来重复一个平行四边形10次，把每一个平行四边形之间转右36度
      grade4_frozen_square: 你好！我是艾伦代尔的安娜公主！我们一起应用“重复“块绘制一个正方形。这样一来，我们可以减少必须使用的代码块。你觉得“重复”块必须循环多少次（???）才能让里面的代码块绘制出一个正方形呢？
      grade4_frozen_square_loop1: 你好！我是艾伦代尔的安娜公主！我们一起应用“重复“块绘制一个正方形。这样一来，我们可以减少必须使用的代码块。你觉得“重复”块必须循环多少次（???）才能让里面的代码块绘制出一个正方形呢？
      grade4_frozen_square_loop2: 让我们绘制三个正方形，每绘制一个正方形后，别忘了先转120度后再继续绘制下一个正方形。
      grade4_frozen_square_loop3: 你可以试试绘制一朵雪花。用“重复”块绘制10个正方形，而且记得在绘制成每个正方形移之后，先把它移转36度后才开始画下一个正方形。
      grade4_playLab_proj_example1a: 仔细瞧瞧这个项目，你知道它是怎么做出来的了吗？
      grade4_playLab_proj_example2a: 仔细瞧瞧这个项目，你知道它是怎么做出来的了吗？
      grade4_playlab_freeplay: '自由游戏时间！可以使用工具箱里的所有模块，玩的开心！ '
      grade4_playlab_test: "用右方向键来发射馅饼。\r\n\r\n在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用\"points
        = points + 1\"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。"
      grade4_playlab_test2: 这里有个叫做“跳”的函数，它能让你的演员跳100像素。运行程序，用方向箭头来移动小狗，用“跳”函数来收集所有的旗帜。
      grade4_review_artist1: 您好，我是一个艺术家。你写的代码可以让我画任何的东西。 用几个程序模块来让我画一些灰色线条吧。 (每一行是100个像素长)
      grade4_review_artist2: 这个房子需要一个屋顶！提示：所有三面都具有相同的长度。
      grade4_review_artist3: |-
        “跳”模块会移动艺术家但不画线。通过使用“向前跳”块和“向前移动”块来画出虚线。
        每行是50像素长。
      grade4_review_bee1: 现在，用“重复”模块来收集花蜜，并酿造蜂蜜。
      grade4_review_bee2: 用最少的模块来收集花蜜，并在蜂窝那里酿造蜂蜜。
      grade4_review_bee3: "忙碌的蜜蜂！\r\n\r\n帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。"
      grade4_scaffolded_project6: 完成了！现在你可以玩自己的游戏，或者分享给你的朋友或同学了！
      grade5_artist_binary1: "二进制是只用两个选择来表达信息的方法。这里，我们会使用选项“关”（通过数字0来表达）和“开”（通过数字1来表达）。\r\n\r\n我们给你提供了一个“像素”的网格，你能穿过并将某些正方形像素设置为“开”。你能让小画家在第一行画出二进制字符串“01010101”吗？"
      grade5_artist_binary10: 单击此处查看提示。
      grade5_artist_binary11: 自由发挥：这是一张空白的画布。尽情画吧！
      grade5_artist_binary2: "这个函数从一个二进制的字符串里面获得1和0，然后指导小艺术家根据它们来从左到右，从上到下。当小艺术家看到1时，就会填满正方形，当看到0时，则什么也不做。\r\n\r\n运行一下代码，看看小艺术家是怎样用二进制来画出这个图形的。"
      grade5_artist_binary3: 哪个二进制字符串能让你循环8次来画出这个图像？
      grade5_artist_binary4: 你能通过循环3个二进制位（0和1）来画出这个图形吗？
      grade5_artist_binary5: 每个二进制字符串表达这个图形中的一行。你能重新排列他们，从而能够画出一张笑脸，而不是皱眉的脸吗？
      grade5_artist_binary6: 哪个6位的二进制字符串重复11次后能够画出这个图形?
      grade5_artist_binary7: 能让你重复并画出这个图形的最短的二进制字符串是什么?
      grade5_artist_binary8: 完成这幅画。
      grade5_artist_binary9: "这是更高分辨率的画布 - 16像素乘以16像素！\r\n\r\n看看你用二进制位能创造出什么？"
      grade5_artist_for_loops1: 用一个计数循环来画这个边长50的三角形。如果你从1数到3，每次增加1，这就像一个“重复”循环模块。
      grade5_artist_for_loops10: "你能想出怎样用所有你学到的知识来创建出这幅图象吗？\r\n\r\n需要提示？点击这里。"
      grade5_artist_for_loops1b: 试验`计数循环`，并试试`counter`（计数器）变量。
      grade5_artist_for_loops3: '这些三角形的边长从20像素到200像素，并且每个三角形比上一个大20像素。 '
      grade5_artist_for_loops5: "只从上一关的代码中改动一处就能创建出这幅图像。你能找到什么需要改动吗？\r\n\r\n提示：你需要移除某项！"
      grade5_artist_for_loops6: 如果每次都多转或少转一些角度，那么你可以创造出来一个有规律的效果。试着重用上一关的一些代码，但是转89度来创造螺旋的正方形出来。
      grade5_artist_for_loops7: 将上一关的代码做三个小小的改动来画出这个！
      grade5_artist_for_loops7a: 将角度改小为72度来得到一个螺旋状的五边形。
      grade5_artist_for_loops8: '还记得在前一阶段中，我们用变量来控制形状中边的数量吗？现在，我们要用“计数器”变量来做同样的事情了。这个图形从一个三角形开始，并且每次加一条边直到画出一个十边形。每条边应该是100像素长。 '
      grade5_artist_for_loops9: "让我们总结一下吧！用你的“计数循环”和“计数器”的知识，来创造出每个形状都比上一个多两条边的画。确保每条边的长度都是这个多边形边的数量的10倍。\r\n\r\n这里有非常少的一些代码。"
      grade5_artist_for_loopsfreeplay11: "自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。\r\n\r\n需要提示？点击这里。"
      grade5_artist_for_loopsfreeplay12: 自由发挥：试试用`counter`（计数器）变量和其它画图元素来画出这样的神奇的图画。
      grade5_artist_functionparameters10: '自由发挥灵感：你已经学会了所有需要创建这个模式的知识了！如果这个图形引起了你的联想，试试画出一些类似的图像。要不然，就画画你想画的一些东西。 '
      grade5_artist_functionparameters11: 自由发挥：这是除了你写的函数，还有更多的函数让你发挥。画些令人惊叹的东西吧！用不同的笔宽度来看看你能画出什么不一样的图形！
      grade5_artist_functionparameters7: 这个图形和上一个类似。你能用“计数循环”和你的函数一起来完成它吗？
      grade5_artist_functionparameters8: 这个三角形的边长是21像素，每条边比上一个长7像素。用“乘法”模块来只用一个函数来画出图形。记得在每个多边形间跳跃100像素。
      grade5_artist_functionparameters9: '挑战: 用`length`（长度）和`sides`（边长）参数来编辑`画一个螺旋边缘`函数,
        然后重新创建这些形状。'
      grade5_artist_functionparameters9a: 完成`画一个螺旋边缘`的函数来要求螺旋的中心也需要一个最小长度。
      grade5_artist_functionparameters9b: 你能想出如何使用刚才创建的函数来绘制这个图吗？
      grade5_artist_functionparameters_6: 你能完成这个图形吗？所有形状的边长都是100像素。
      grade5_artist_parameters_squares1: 点击“编辑”来填写这个“画一个正方形”函数的定义，并且加一个参数。它应该像三角形一样有一个长度参数。这次，画三个正方形，边长分别为25，50，75像素，每个相隔100像素。
      grade5_artist_parameters_squares2a: 编辑函数以接收一个叫做 "长度" 的参数。
      grade5_artist_parameters_triangles2a: 你注意到这些函数模块有什么不同吗？点击“运行”来看看会发生什么。
      grade5_artist_parameters_triangles4: 这个三角形的代码被破坏了。你能修好这个函数，让它能画边长25，50，75像素的三角形吗？
      grade5_artist_variables_freeplay10: 自由发挥：尝试改变这个图形的边数。你能改变算法，不管边数是多少，都让这个图形的大小基本不变吗？提示：如果你用长度除以边数，这样当边数变多的时候，每条边长会变短。
      grade5_artist_variables_freeplay14: "自由发挥！现在你的算法嵌套到了又一个循环中。试着改变这两个变量的值来画出很酷的图形。\r\n\r\n如果想看到更好的效果，试试使用颜色模块！在循环里面使用随机颜色，看看效果如何。"
      grade5_artist_variables_freeplay15: "想再看一次启发人的设计或者提示吗？点击这里！\r\n\r\n除此之外，你也可以设计自己的图形！"
      grade5_artist_variables_freeplay16: 还想玩？这是空白的画布。想画什么就画什么吧！
      grade5_artist_variables_hexagons1: "让我们再试一次！\r\n\r\n你能通过设置长度变量为60，来画出这个六边形？"
      grade5_artist_variables_letterT11: 这里有一些更复杂的代码，它也使用了一些上一关的概念 —— 你需要将“边数”变量设置成什么来画出这里的正方形？
      grade5_artist_variables_octagons13: "当一个图形有很多条边时，为了让它能显示在屏幕中，要让每条边都短一些。\n\r\n让我们重新创建这个算法来得到这个神奇的图形。为了不手动输入“长度”变量，让我们将“边数”变量放到一个“数学”模块中，来确保每个图形都能显示完整。每个多边形的边长都是300像素。\r\n需要提示吗？点击这里。"
      grade5_artist_variables_pentagon8: "用你在上一关中学到的来用边数变量创建这个六边形。\r\n\r\n看看如何就改一个值来画出一个三角形、正方形、五边形或者八边形？"
      grade5_artist_variables_pentagon9: 现在，重新创造上一关的算法，然后创造一个边长为150像素的五边形。
      grade5_artist_variables_pentagons1: "通过将长度变量放到正确的地方，并设置正确的值来画出这个边长为100像素的五边形。\r\n\r\n看看怎么能只设置长度一次，而将它用到所有正确的地方？"
      grade5_artist_variables_pentagons12: 让我们将“边数”变量设置为5. 我们会加更多的边到这个算法中，边数越大，就越能明白整个模式！注意，这里有另一个叫做长度的变量。我们能在任何“向前移动”模块中使用它，并且将长度变量设置为75。
      grade5_artist_variables_rectangle6: 现在，我们来画一个高度是宽度两倍的长方形。这里有一个叫做“宽度”的变量需要设置为100。你能用“数学”模块来完成代码吗？
      grade5_artist_variables_square7: 这些代码能画任何规则的多边形。这里有个叫做“边数”的变量设置为4。不管边数是多少，你都能用“边数”变量与数学模块一起来转正确的度数吗？
      grade5_artist_variables_triangles2: 改进“向前移动150像素”，让移动模块使用一个叫做“长度”的变量。你能将长度设置为150来重新画这个三角形吗？
      grade5_artist_variables_triangles3: '拖拽一个数字模块到“设置长度”模块和“重复”模块中来画一个边长50像素的三角形。

'
      grade5_bee_for_loops1: 用循环从每朵花里采集花蜜。
      grade5_bee_for_loops10: 你应该增加多少来收集15，然后12，然后9，6，3个花蜜？
      grade5_bee_for_loops11: "**挑战：** 用你学会的关于`计数循环`循环的知识来试着解决这个问题。 "
      grade5_bee_for_loops2: 添加需要的代码来让蜜蜂收集到所有的花蜜。看看这一关需要多少代码！（我们会在下一关中学到一个更简单的办法。）
      grade5_bee_for_loops4: 帮助蜜蜂收集所有的花蜜。
      grade5_bee_for_loops6: 你也能用计数循环递减。试着通过从5到1，每次减1来递减计数收集花蜜。
      grade5_bee_for_loops7: 通过每次增加2来收集所有的花。
      grade5_bee_for_loops8: 你已经明白了！应该递增多少来收集3，6，9，12，15个花蜜？
      grade5_bee_for_loops9: 用`counter`（计数器）变量来用尽可能少的模块来走过这个花园。
      grade5_pixelation: 用二进制来编码任何你喜欢的图形。二进制语言只用'0'和'1'来代表。
      grade5_playlab_freeplay: '自由游戏时间！可以使用工具箱里的所有模块，玩的开心！ '
      grade5_playlab_variables1: 这次你不需要写任何代码，点击“运行”来玩游戏吧！在这个游戏里，你会扮演小狗，要比小猫收集到更多的旗帜。用下方向键来控制小狗。当你玩完以后，点击“完成”。
      grade5_playlab_variables10: 编辑“巡逻”函数来添加一个“演员”参数，由此调用它时，能让屏幕上每个演员都动起来。记住，演员对应到数字1和2，3上。
      grade5_playlab_variables11: 添加另一个叫做“速度”的参数到“巡逻”函数里。试着在“设置速度”模块中使用新的“速度”参数，来帮助企鹅在别的小动物之前得到所有旗帜。
      grade5_playlab_variables12: "来点好玩的！看看这里的代码，是否你能明白每个模块都做了什么。\r\n\r\n看完以后，用方向键来让小狗收集到所有旗帜。\r\n注意：你不必改动代码。"
      grade5_playlab_variables13: 在小狗碰到任何一个演员时，用“当演员碰到”模块来把小狗送回左上角。
      grade5_playlab_variables14: '自由游戏时间！可以使用工具箱里的所有模块，玩的开心！ '
      grade5_playlab_variables2: 最后关卡中的比赛不是很公平! 更改`dog_speed`（狗_速度）变量以确保你可以收集比猫更多的旗子。第一个收集到10面旗子的赢！
      grade5_playlab_variables3: 用左右方向键来移动，上方向键跳跃。看看你能否收集到所有的旗帜。
      grade5_playlab_variables4: 现在，我们用一个叫做“高度”的变量来控制小狗能跳多高。修改“高度”变量，让小狗能跳足够高，得到所有旗帜。
      grade5_playlab_variables6: "用右方向键来发射馅饼。\r\n\r\n在游戏中，怎么才能得分呢？每次小狗用馅饼击中小猫时，往“points”（分数）变量上加1。用“当演员2碰到任何东西”来触发分数的更新。通过使用\"points
        = points + 1\"来增加分数。将分数增加到10分（每次只加1分！）来通过这一关。"
      grade5_playlab_variables7: 很好, 现在让我们来确保这个游戏不是太容易。任何时间狗 (演员 1) 被从猫（演员2）的三明治击中,
        将失去一分。从10分开始那样就不难了。让你的分数从10下降到 0来通过此关卡。
      grade5_playlab_variables71: "这是一个早先的游戏，但是大部分代码都隐藏了。这里有个新函数叫做“score_points”（得分）。\r\n\r\n编辑这个函数，使得“points”（分数）参数能加到“player_score”（玩家分数）变量上。\n\r\n\r\n“player_score”（玩家分数）变量会在每次小狗的馅饼碰到小猫时增加，在小猫的三明治碰到小狗时减少。\r\n\r\n注意：当你完成后，点击“运行”来玩玩。当小狗得到6分时，就可以进入下一关。 "
      grade5_playlab_variables81: "我们已为你添加了上一关的函数。\r\n\r\n用“如果”模块来编写你的游戏，当play_score(玩家分数)
        大于某个值时，调用level_up(升级) 函数。\r\n\r\n例如：“play_score” > 6\r\n\r\n玩游戏，并且达到第3级来到达下一关。 "
      grade5_playlab_variables9: "这里有个函数叫做`巡逻`。\r\n\r\n编辑`巡逻`来让猫向上移动400像素，再向下移动400像素。"
      grade5_playlab_variables_freeplay: "自由发挥时间! 下面是我们在这个阶段所玩过的所有变量, 以及一些你可能需要的额外变量。\r\n\r\n注意到我们的工具箱中现在有这么多的模块,
        它们需要整理! 在这里, 我们把每一块放到一个合适的类别中。花些时间去探索所有可用的东西。完成浏览后, 使用重复，变量和事件来制作游戏或故事。 \r\n\r\n提示:
        向下滚动来查看工作区中的所有指令。"
      gradeK_sequence_4: 从头开始尝试这一个。
      gradek_artist_loops1: 帮助艺术家两次向前来画这条线。
      gradek_artist_loops3: 现在, 使用 `重复`循环来绘制这条线五次!
      gradek_artist_loops4: 画一条七步长的线。这将成为我们的地平线。
      gradek_artist_loops5: 让我们在后面放一座漂亮的小山。
      gradek_artist_loops6: 使用 "重复" 循环在水中添加波浪。
      gradek_artist_loops7: 我们需要一个梯子到船上去。
      gradek_artist_loopsA: 帮助我建楼梯, 让我可以看着船驶离。
      gradek_artist_loopsFP: 艺术家在远处看到了一些有趣的东西。 画出你认为他看到的东西。
      gradek_artist_loopsPre: 这是一种叫"小艺术家" 的新类型关卡。试试各关卡并画些有趣的东西。
      gradek_playlab_events1c: 乔治狗想说“大家好”。你可以帮它吗？
      gradek_playlab_events4c: 添加事件让乔治在`上`和`下`按钮被点击时，向上和下移动。
      gradek_playlab_events5c: 当乔治被点击的时候，改变背景和播放随机声音来添加一些乐趣。
      gradek_playlab_eventsFP: 添加任何你想要的到此游戏中。你能否让恐龙在乔治碰上它时消失？
      gradek_playlab_eventsPre: 这是一个游戏实验室关卡。 把模块移到工作区看会发生什么!
      group test: 制作游戏
      harvester_Kahoot: 现在帮农民采摘玉米，莴苣，**和** 南瓜。
      harvey_pixelation: 用二进制来编码任何你喜欢的图形。二进制语言只用'0'和'1'来代表。
      harvey_snowflake_artist1: 让你的雪花准备好可以进行3d 打印!
      harvey_snowflake_artist2: 让你的雪花准备好可以进行3d 打印!
      harvey_tictactoe: 让我们玩游戏吧! 尽可能多地画 X。你能一排放3个吗？
      iceAgeLoopsforVideo: 你能只用一个`向前移动`模块来得到橡子吗？
      iceage_click_hello: '你能帮助喜得，在点击他的时候呼叫他的朋友们吗？ '
      iceage_click_hello_2018: '你能帮助喜得，在点击他的时候呼叫他的朋友们吗？ '
      iceage_free_play: '是时候创造你自己的游戏或故事了！

'
      iceage_free_play_2018: '是时候创造你自己的游戏或故事了！

'
      iceage_free_playcourseF_IceAge_11: '是时候创造你自己的游戏或故事了！

'
      iceage_hello1: 通过拖拽`说`模块出来，并连接`当运行时`事件下来帮助喜得说“你好！”
      iceage_hello1_2018: 通过拖拽`说`模块出来，并连接`当运行时`事件下来帮助喜得说“你好！”
      iceage_hello2: 使用`演员___ 说`模块两次来帮助曼尼和喜得相互打招呼。
      iceage_hello2_2018: 使用`演员___ 说`模块两次来帮助曼尼和喜得相互打招呼。
      iceage_move_events: 写代码, 帮助 斯奎特 得到所有的橡子!
      iceage_move_events_2018: 写代码, 帮助 斯奎特 得到所有的橡子!
      iceage_move_to_actor: 当迭戈发现曼尼时, 通过将一个方块连接到`当演员触碰`事件下来播放声音。
      iceage_move_to_actor_2018: 当迭戈发现曼尼时, 通过将一个方块连接到`当演员触碰`事件下来播放声音。
      iceage_move_to_flag: 斯奎特 在找他的橡子! 你能帮他移动最后200像素吗？
      iceage_move_to_flag_2018: 斯奎特 在找他的橡子! 你能帮他移动最后200像素吗？
      iceage_repeat: 重复左右移动来帮助格瑞尼做锻炼。
      iceage_repeat_2018: 重复左右移动来帮助格瑞尼做锻炼。
      iceage_sound_and_points: '你可以完成这个程序，使它在喜得和格瑞尼相撞的时候同时**发出声音**并**得一分**吗？ '
      iceage_sound_and_points_2018: '你可以完成这个程序，使它在喜得和格瑞尼相撞的时候同时**发出声音**并**得一分**吗？ '
      iceage_throw_hearts: 使用 "演员 __ 抛出" 命令让 喜得 (演员 1) 把心扔向格瑞尼 (演员 2), 并设置格瑞尼的心情,
        让她在被击中时高兴。
      iceage_throw_hearts_2018: 使用 "演员 __ 抛出" 命令让 喜得 (演员 1) 把心扔向格瑞尼 (演员 2), 并设置格瑞尼的心情,
        让她在被击中时高兴。
      iceage_warn_ice_age: 把场景切换到一个冰雪的背景，并且设定喜得 (演员1) 的速度为快速。
      iceage_warn_ice_age_2018: 把场景切换到一个冰雪的背景，并且设定喜得 (演员1) 的速度为快速。
      k-1 maze 1: 你能将我移到西边到达那只猪吗？
      k1stickerfreeplay: 艺术家在远处看到了一些有趣的东西。 画出你认为他看到的东西。
      kikiTesta: |-
        我们的冒险家想要收集硬币。但她只能使用4个模块来获取它们。

        你能在最多使用 4 个模块的情况下帮她收集到最多的硬币吗？
      level 'grade3_Loops_10: "忙碌的蜜蜂！\r\n\r\n帮助蜜蜂用尽可能少的模块来收集花蜜并酿蜂蜜。"
      level 'grade3_Loops_11: "这条路的形状和其它的不一样。\r\n\r\n你能用尽量少的模块来收集所有花蜜吗？"
      level 'grade3_Loops_12: 你能为蜜蜂找到最快的路，收集所有花蜜并酿造蜂蜜吗？
      level 'grade3_Loops_2: 这次，用循环来收集所有花蜜。
      level 'grade3_Loops_3: 用一个“重复”循环来收集所有花蜜。
      level 'grade3_Loops_4: 现在，用“重复”模块来收集花蜜，并酿造蜂蜜。
      level 'grade3_Loops_5: 多美的花园啊！帮助蜜蜂访问每一朵。你能找到只用7个模块就实现的方法吗？
      level 'grade3_Loops_6: "这个谜题中的循环应该进行多少次？\r\n\r\n循环是你的朋友！用一些循环来减少模块，并完成这道谜题。"
      level 'grade3_Loops_7: "这些花看上去很好吃！\r\n\r\n用尽可能少的模块，从每朵花里收集蜂蜜。"
      level 'grade3_Loops_8: 用尽可能少的模块来收集花蜜，并酿造蜂蜜。
      level 'grade3_Loops_9: 用最少的模块来收集花蜜，并在蜂窝那里酿造蜂蜜。
      level grade3_Loops_2: 这次，用循环来收集所有花蜜。
      loop pet test: "上次你练习了如何用\"一直重复\"来让精灵永远做一些事情。这次，我们会用它来制作一个虚拟宠物。 \r\n\r\n这条狗的名字叫黛西。黛西非常喜欢胡萝卜点心。用\"拖动并放下\"模块将胡萝卜移动到黛西那里。"
      loops_forvideo_angrybirds_ab: 用循环让鸟到猪那里！
      loops_forvideo_angrybirds_cf: 用循环让鸟到猪那里！
      loops_forvideo_bee_cf: 用循环帮助蜜蜂从所有花朵里采花蜜！
      loops_forvideo_collector_ab: 用循环帮助收集者拿到所有的宝石！
      loops_forvideo_collector_cf: 用循环帮助罗瑞尔收集宝石！
      loops_forvideo_harvester_ab: 用循环帮助收割者采摘玉米！
      loops_forvideo_harvester_cf: 用循环帮助收割者采摘所有作物！
      loops_forvideo_iceage_ab: 用循环帮助斯奎特得到橡子！
      loops_forvideo_iceage_cf: 用循环帮助斯奎特得到橡子！
      marina_gameLab_play: 克隆这一关，并制作自己的模块！
      pet game 1: 用"制作一个新精灵"模块来制作自己的宠物！
      pet game 2: 你的宠物需要练习！用"增加行为"模块来让它们移动。
      pet game 3: 宠物喜爱玩具！用另一个"制作精灵"模块来给你的宠物一个玩具，然后用"向前移动"行为来让宠物跑向它们的新玩具。
      pet game 4: "当你的宠物到达它们的玩具时，它们会跟高兴！\n用\"当碰到时\"模块来检测是否宠物到达了玩具。\r\n\r\n当发生时，用\"移除行为\"模块来让它们停止走动，并用\"增加行为\"模块来让他们来个舞会！"
      pet game 5: 你能为宠物增加大量的行为来交互！摆弄一下"设置精灵"模块，自己试试吧！
      pet game 6: 让宠物学会跟随命令很重要。用"当点击时"模块来教宠物只在你点击了它们后才开始闲逛。
      pet game 7: 宠物还需要学会停止！用"当点击时"模块来在你点击了它们后，让它们停止闲逛。
      pet game 8: 你的宠物现在有两个玩具了！用"当点击时"模块来让它们移动到你点击的玩具上。
      pet game 9: 你的宠物已经很棒了，它们需要款待。用"增加行为"模块来制作一个可以拖动的骨头，然后将它拖动到宠物那里。
      playLabDebugVideo1: 乔治狗想说“大家好”。你可以帮它吗？
      ramp_artist_loops1: 向前移动60像素, 来完成这个关卡。
      ramp_artist_loops1_2018: 向前移动60像素, 来完成这个关卡。
      ramp_artist_loops1_2019: 向前移动60像素, 来完成这个关卡。
      ramp_artist_loops2: 向前移动五次, 画这条彩色线。
      ramp_artist_loops2_2018: 向前移动五次, 画这条彩色线。
      ramp_artist_loops2_2019: 向前移动五次, 画这条彩色线。
      ramp_artist_loops3: 使用 "重复" 循环绘制五色虚线。
      ramp_artist_loops3_2018: 使用 "重复" 循环绘制五色虚线。
      ramp_artist_loops3_2019: 使用 "重复" 循环绘制五色虚线。
      ramp_artist_loops4: 当您在循环的最后添加了右转72度后, 会发生什么？
      ramp_artist_loops4_2018: 当您在循环的最后添加了右转72度后, 会发生什么？
      ramp_artist_loops5: 使用循环来绘制这个楼梯。
      ramp_artist_loops5_2018: 使用循环来绘制这个楼梯。
      ramp_artist_loops5_2019: 使用循环来绘制这个楼梯。
      ramp_artist_loops6: 编辑您的循环来绘制此楼梯。
      ramp_artist_loops6_2018: 编辑您的循环来绘制此楼梯。
      ramp_artist_loops6_2019: 编辑您的循环来绘制此楼梯。
      ramp_artist_loops7: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops7_2018: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops7_2019: 寻找规律，使用循环使此代码更短！
      ramp_artist_loops8: 寻找规律，使用循环使此代码更短。
      ramp_artist_loops8_2018: 寻找规律，使用循环使此代码更短。
      ramp_artist_loops8_2019: 寻找规律，使用循环使此代码更短。
      ramp_artist_loops8_clone: 寻找规律，使用循环使此代码更短。
      ramp_artist_loops9: 通过绘制正方形来解决这个关卡。
      ramp_artist_loops9_2018: 通过绘制正方形来解决这个关卡。
      ramp_artist_loops9_2019: 通过绘制正方形来解决这个关卡。
      sample1: |-
        我们的冒险家想要收集硬币。但她只能使用4个模块来获取它们。

        你能在最多使用 4 个模块的情况下帮她收集到最多的硬币吗？
      scrat 16 (copy 1): 橡子！橡子！橡子！使用“如果”的代码块让我到哪里，最好用最少的代码块。
      scrat 16: 橡子！橡子！橡子！使用“如果”的代码块让我到哪里，最好用最少的代码块。
      scrat 17: 好吧，我们再做一遍吧-这个与上一个差不多，但是小心墙壁！
      scrat 18 (copy 1): 这个“如果-否则”代码块检查这个条件是否成立，然后做一件事或另一件事。如果想让我得到橡子的活，你需要尝试使用这个“如果-否则”代码块。
      scrat 18: 这个“如果-否则”代码块检查这个条件是否成立，然后做一件事或另一件事。如果想让我得到橡子的活，你需要尝试使用这个“如果-否则”代码块。
      scrat 19 (copy 1): 让我们来再练习一次使用“如果/否则”块，你能第一次就成功么？
      scrat 19: 让我们来再练习一次使用“如果/否则”块，你能第一次就成功么？
      scrat 20: 你可以只添加3个代码块就帮我解决一个更复杂的迷宫吗？如果你做对了，我能走任何长度的曲线了。快一点！冰在融化！
      skratDebugVideo1: 让斯奎特到橡子那里。
      subgoal U3 L4 introducing subgoal labels: 介绍东方龟并移动龟。
      subgoal U3L2 Using Simple Commands: 在龟的起始位置上方和左侧绘制一个1x1的正方形。单击以查看完整说明。
      subgoalU3L2_TurtleSquare_right: 在起始位置的右前方绘制一个正方形。(单击以显示完整说明)
      testArtistForTestK: 艺术家试图画一条线 五 次, 但还没画好。 你能帮忙吗？
      u3-old-drawing-view: 做这个
      valentine_artist_03: 现在尝试自己练习!
