"bg":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: "Добре дошли в първия си час на кода! Нека да се потопим в първото си
          предизвикателство."
      2:
        image: notes/hoc1_2.jpg
        text: "Ние ще  използваме Blockly. Това е визуален език за програмиране, където
          трябва само да плъзнете и пуснете блоковете за да напишете код."
      3:
        image: notes/hoc1_3.jpg
        text: Кодът се пише, но Blockly е визуален език. Всеки блок, обаче, отговаря
          на един ред от "истински" код.
      4:
        image: notes/hoc1_4.jpg
        text: "Ще научите основите на компютърните науки, концепции, които се използват
          навсякъде дори за създаването на приложения за контролиране на марсоходът
          на Марс."
      5:
        image: notes/hoc1_5.jpg
        text: "Програмата е набор от инструкции за вашия компютър, които  да следва."
      6:
        image: notes/hoc1_6.jpg
        text: "Целта на вашата първа програма е да посочите на ядосаната птица пътят,
          по който да достигне и удари зеленото прасе."
      7:
        image: notes/hoc1_7.jpg
        text: "От лявата страна е лабиринтът, където се изпълнява вашата програма.
          Инструкциите за всеки пъзел са под лабиринта."
      8:
        image: notes/hoc1_8.jpg
        text: "В средата на кутията с инструменти има команди за ядосаната птица.
          Използвайте ги,  за да изградите вашия код."
      9:
        image: notes/hoc1_9.jpg
        text: "Вдясно е вашата работна област, където ще можете да плъзгате блокове
          от кутията с инструменти. За да изтриете блок просто го плъзнете в кошчето."
      10:
        image: notes/hoc1_10.jpg
        text: Всеки блок е една инструкция. Ако плъзнете "продължи напред" блок във
          вашата работна област и натиснете "Старт", птицата ще се премести едно квадратче  напред
          в лабиринта.
      11:
        image: notes/hoc1_11.jpg
        text: "За да направите повече от едно действие, можете да плъзнете много блокове
          във вашата работна област и да ги прикрепите заедно. Птицата ще извърши
          командите отгоре надолу."
      12:
        image: notes/hoc1_12.jpg
        text: Ако стартирате програмата и искате да поправите кода си за да опитате
          отново, натиснете бутона "Начално състояние".
      13:
        image: notes/hoc1_13.jpg
        text: "Да вървим да хванем тези прасета!"
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: "Здравейте аз съм младши! На всеки състезателен екип са му  необходими
          компютърни учени, за да спечели. Те анализират данни от колата за да може
          тя да се подобри."
      2:
        image: notes/stage5_2.jpg
        text: "В тези пъзели вие ще бъдете художник, който чертае линия зад себе си,
          където и да отиде."
      3:
        image: notes/stage5_3.jpg
        text: Този блок се казва "премества напред със 100 пиксела." Пикселите са
          много малки точки на вашия екран.
      4:
        image: notes/stage5_4.jpg
        text: Този блок се казва, "завърта надясно на 90 градуса." Той ще завърти
          вашия художник във определената посока както "обърни" блоковете при ядосаните
          птици.
      5:
        image: notes/stage5_5.jpg
        text: "Кликнете върху стрелката в някой от тези блокове, за да промените броя
          на движенията на художника напред или при въртене. Поиграйте си с блоковете,
          за да се запознаете с техните възможности."
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: "Здравейте аз съм Паола! В тези пъзели Вие сте фермер, който трябва
          да заравни нивата си за да започне засаждане на семена."
      2:
        image: notes/stage9_2.jpg
        text: "Трябва да премахнете всички купчинки и запълните всички дупки."
      3:
        image: notes/stage9_3.jpg
        text: "Новите блокове премахват една лопата мръсотия от купчината и запълват
          с една лопата дупката."
      4:
        image: notes/stage9_4.jpg
        text: "Купчинките и дупките са с различни размери, така че вие трябва да кажете
          на фермера колко лопати да използва."
    flappy_intro:
      1:
        image: "бележки/flappy01.jpg"
        text: "Здравейте, аз съм Кейти! Едно от най-вълнуващите неща в компютърните
          науки е, че компютърните програми може да бъдат интерактивни."
      2:
        image: "бележки/flappy02.jpg"
        text: "Всеки път, когато някой кликне, докосне, или пише на компютър или на
          телефон - това действие създава СЪБИТИЕ, а определен програмен код (МАНИПУЛАТОР
          НА СЪБИТИЕ) решава какво да се случи, когато СЪБИТИЕТО възникне."
      3:
        image: "бележки/flappy03.jpg"
        text: 'Например, може да използваш МАНИПУЛАТОР НА СЪБИТИЕ, който казва "при
          кликване с мишката, изпълни звук" '
      4:
        image: "бележки/flappy04.jpg"
        text: "Чувал ли си за играта FlappyBird? С помощта на манипулатори на събития,
          ще се научим как да програмираме наша собствена версия на FlappyBird!"
      5:
        image: "бележки/flappy05.jpg"
        text: "Програмите, които ще създадеш, ще се състоят от блокове, които ще приплъзнеш
          и присъединиш. Тези блокове представляват команди за компютъра и зад всеки
          от тях стои истински програмен код."
      6:
        image: "бележки/flappy06.jpg"
        text: Ако огледаш работната площ (в дясната част на екрата), ще забележиш
          няколко зелени блока, които сме попълнили за теб - това са "манипулатори
          на събития".
      7:
        image: "бележки/flappy07.jpg"
        text: Ако искаш птицата да ПЛЕСНЕ с крила при КЛИКВАНЕ с мишката, ще трябва
          да присъединиш блока "плесни с крила" към манипулатора на съответното събитие.
          Така всеки път, когато кликнеш с мишката по време на игра, птица ще плесне
          с криле.
      8:
        image: "бележки/flappy08.jpg"
        text: "При всеки пъзел от тази поредица, ние ще добавим нови събития като
          зелени блокове на работния плот, а ти ще решиш какви други блокове да добавиш
          в отговор на тези събития."
      9:
        image: "бележки/flappy09.jpg"
        text: "Когато видиш стрелка за падащо меню като тази, това означава, че можеш
          да промениш настройките - като например какъв звук да се изпълни, когато
          птицата удари земята."
      10:
        image: "бележки/flappy10.jpg"
        text: "Във финалния пъзел ще успееш да създадеш своя собствена игра и да я
          споделиш със своите приятели. Забавлявай се!"
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: "Здравейте аз съм Марк! Нека да обясня какво представляват командите
          за повторения. Тези команди казват на компютъра да повтаря отново и отново
          набор от действия, хиляди или дори милиони пъти."
      2:
        image: notes/hoc2_2.jpg
        text: "В този пъзел ние трябва да накараме птицата да се придвижи напред с
          5 квадратчета, за да стигне до прасето."
      3:
        image: notes/hoc2_3.jpg
        text: "Можем да използваме новите блокове за повторение за да си помогнем."
      4:
        image: notes/hoc2_4.jpg
        text: Вместо да плъзгаме 5 "върви напред" блокове...
      5:
        image: notes/hoc2_5.jpg
        text: Ние ще поставим "върви напред" блока вътре в блока  за повторение и
          ще напишем число, за да кажем колко пъти да се повтори действието.
      6:
        image: notes/hoc2_6.jpg
        text: "това е важно: можете да поставите повече от една команда в блока за
          повторене."
      7:
        image: notes/hoc2_7.jpg
        text: "Насладете се на използването на вашия нов блок за повторение!"
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Здравейте аз съм Крис. Преди да постъпя в Маями Хийт, бях в Джорджия
          Tech за да уча компютърни науки. Нека опитаме нашия нов " повтаряй докато"
          блок.
      2:
        image: notes/hoc3_2.jpg
        text: "Какво става, ако ние не знаем колко далеч птицата трябва да се премести
          за да стигне до прасето?"
      3:
        image: notes/hoc3_3.jpg
        text: Ако сложим "върви напред" блок вътре в блока, "повтаряй докато", птицата
          ще продължи напред, докато достигне прасето (или ще се блъсне в стената).
      4:
        image: notes/hoc3_4.jpg
        text: 'И това е важно: както преди, можем да сложим няколко блока вътре в
          блока, "повтори докато", и всички те ще бъдат повтаряни.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Здравейте аз съм Бил! Нека да научим нова основна концепция: "Ако".
          С нея ние учим компютрите да вземат решения.'
      2:
        image: notes/hoc4_2.jpg
        text: Вие използвате "ако" концепцията всеки ден. Преди да отидете навън всяка
          сутрин, вие си казвате, ако навън вали, трябва да си взема яке.
      3:
        image: notes/hoc4_3.jpg
        text: "Ние можем да кажем на зомбито да провери дали има път наляво, и ако
          то открие път, да се придвижи в тази посока."
      4:
        image: notes/hoc4_4.jpg
        text: За да напишем код за това, нека да поставим "Ако" блок и в него да вмъкнем
          "Завий наляво".
      5:
        image: notes/hoc4_5.jpg
        text: Сега ако сложим "върви напред" блок над него и блок за повторение около
          всичко, всеки път, когато зомбито се движи, то ще проверява дали има път
          наляво. Командата за повторение е от решаващо значение, за да проверите
          за завой на всяка стъпка.
      6:
        image: notes/hoc4_6.jpg
        text: '"Ако" твърденията са много важни за компютърните науки. Една от първите
          програми, която съм написал е игра на кръстчета и нули, и съдържаше "ако"
          твърдение: ако другият човек е на път да победи, компютърът трябва да блокира
          мястото, което му позволило да спечели.'
      7:
        image: notes/hoc4_7.jpg
        text: Забавлявайте се с помощта на "Ако" блока!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Здравейте моето име е Салони. Използвам компютърни науки, за да помогна
          за решаването на проблемите в здравеопазването и медицината. Нека да сe
          научим  да използваме "ако иначе" блока. Той изглежда като блокът "Ако",
          но има допълнителна част в края, която казва "иначе".
      2:
        image: notes/hoc5_2.jpg
        text: Ако сложим блок за предвижване в мястото, където пише "ако"  и "завърти
          наляво" блок където пише "друго" това означава, че зомбито ще избира между
          две опции. Ако има път напред, зомбито ще се движи напред, или (ако липса
          такава възможност)- зомбито ще завие наляво.
      3:
        image: notes/hoc5_3.jpg
        text: Точно като при "Ако" блока, можем да сложим "ако иначе" блокира вътре
          в блокове за повторение, така че зомбито ще продължава да се движи и "ако
          иначе" блокът ще прави проверка, ако има някъде да се завие.
      4:
        image: notes/hoc5_4.jpg
        text: "Сега, преведете зомбитата до местата, където те трябва да стигнат!"
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: '"Ако иначе" твърдението е решение между две неща. Нека видим как можем
          да използваме "ако иначе" с нашия приятел Scrat катерицата.'
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Този блок изглежда по същия начин като "Ако" блока, но е добавена допълнителна
          част накрая, която казва "иначе". Ако поставите блок за движение, където
          се казва "ако" и блок за завиване наляво, където се казва "иначе", това
          означава, че Scrat катерицата ще се движи напред ако е има път напред. Ако
          няма път напред, Scrat ще завие наляво.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Това е вземане на решение за правене на едно от двете действия въз основа
          на това решение. И точно като "Ако" блоковете, можете да поставите "Ако
          иначе" блоковете в  блокове за повторение.
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "Сега, нека да помогнем на Scrat катерицата да вземе жълъда!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: "Здравейте аз съм Брина, инженер от Instagram. Функция е няколко реда
          с код, които искаме да използваме отново и отново, така че вместо да повтаряме
          изписването на кода, ние използваме само един блок."
      2:
        image: notes/stage13_2.jpg
        text: "Ще научите как да дефинирате функции. Дефинициите имат звезда в ъгъла
          на блока си. Името на функцията е написано на най-горния ред."
      3:
        image: notes/stage13_3.jpg
        text: Блоковете, които влизат вътре в дефиницията ни казват какво прави тя.
          Дефиницията, която ще използваме се нарича "запълни 5" и тя се състои от
          блок за повторение и блок за запълване.
      4:
        image: notes/stage13_4.jpg
        text: Дефиницията се намира на работната област, но нашият фермер няма да
          изпълни функцията, докато ние не поставим блок за функция "запълва 5" от
          категорията функции.
      5:
        image: notes/stage13_5.jpg
        text: 'Нека върнем "fun" обратно във "FUNкцията!" '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: Здравейте аз съм Макинде! Нека да научим за "докато" блока.
      2:
        image: notes/stage9_6.jpg
        text: '"Докато блокът" ще повтаря действие, докато се отчете, че действието
          е извършено.'
      3:
        image: notes/stage9_7.jpg
        text: "Например ако фермерът е стъпил върху купчина, той ще продължи да я
          премахва с по 1 лопата, докато все още има купчина под него."
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: "Здравейте аз съм Трина, и работя за Pixar. Работила съм в няколко филми,
          включително и в Шрек."
      2:
        image: notes/stage11_2.jpg
        text: Това е нашият нов "брояч" за цикли. Той ще извършва действия отново
          и отново, а вие можете да направите така, че действията да се променят леко
          всеки път.
      3:
        image: notes/stage11_3.jpg
        text: В този пример, нашият "брояч" на цикли  казва "ще броя с брояч от 50
          до 90  през 10" и вътре в него, ние имаме нашият "начертай квадрат" блок.
          Плъзнете блока "брояч" от раздела "Променливи" в мястото за "дължина".
      4:
        image: notes/stage11_4.jpg
        text: "Това означава, че художникът ще начертае квадрат, който има 50 пиксела
          дължина на страните, тогава той ще добави 10, и ще начертае квадрат с дължина
          на страните 60 пиксела. Тогава ще продължи докато начертае квадрат със страни
          90. Така ще имаме квадрати със страни 50, 60, 70, 80 и 90 пиксела."
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: "Здравейте аз съм Джанет и съм инженер в Zynga."
      2:
        image: notes/stage15_2.jpg
        text: "Как ще начертаете куп триъгълници  със различни размери на страните
          им?"
      3:
        image: notes/stage15_3.jpg
        text: "Можем да напишем целия този код на ръка или можем да използваме функция
          с параметри."
      4:
        image: notes/stage15_4.jpg
        text: За да добавите параметър на функцията, щракнете върху синята звезда.
          След това плъзнете "въведете име" във "вмъкни" блока.
      5:
        image: notes/stage15_5.jpg
        text: Тогава, ако  напишете "дължина" на мястото на "х" и натиснете "Enter",
          вие ще създадете нов параметър "дължина" за вашата функция.
      6:
        image: notes/stage15_6.jpg
        text: След това кликнете върху звездата. Сега кликнете върху категорията "променливи"
          и плъзнете блок "дължина" в "премества напред" блок във вашата дефиниция
          на функция. Плъзнете стария блок за номер от външната страна.
      7:
        image: notes/stage15_7.jpg
        text: За да използвате вашата функция с параметри, щракнете върху категорията
          функции и изберете "Начертай триъгълник с дължина" функция.
      8:
        image: notes/stage15_8.jpg
        text: "Сега можете да използвате математически блок за да въведете различни
          числа и да начертаете триъгълници с различни размери."
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: "Поздравления! С последната загадка, която разгадахте, вие просто написахте
          код, който може да каже на всеки робот как да си придвижи, без да се губи
          в лабиринта или тунела. Това можете да повторите и със зомбито, птицата,
          марсохода или дори самоуправляващ се автомобил."
      2:
        image: notes/hoc6_2.jpg
        text: Основните понятия, които използвахте са в основата на всяка програма
          или приложение, които сте ползвали. Изучихме циклите на "повтори няколко
          пъти" и "повторение, докато" и  командите "ако" и "ако / иначе".
      3:
        image: notes/hoc6_3.jpg
        text: "Ако ви харесва  първия час на кодиране, посетете code.org за да продължите
          образованието си в компютърните науки! След като завършите нашият 20 часов
          курс, вие ще сте усвоили основите на програмирането и може да се научите
          как да създавате програми за телефони, инструкции за роботи, игри, и др."
      4:
        image: notes/hoc6_4.jpg
        text: "Технологията променя всичко, което правим и няма значение, ако сте
          млад или стар: програмирането е забавно, това е творчество  и всеки може
          да се научи!"
    20_wrapup:
      1:
        image: notes/bird.png
        text: "Очаквайте скоро показването на бележки!"
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Здравейте моето име е Линдзи. Модел съм, създавам и пиша мои собствени
          приложения. Нека да използваме кода, за да се присъединим към Анна и Елза,
          докато те опознават магията и красотата на леда."
      2:
        image: notes/frozen1_2.jpg
        text: "Вие ще създадете снежинки и десени от следите на зимните кънки и ще
          направите зимна приказка, която след това можете да споделите с приятелите
          си."
      3:
        image: notes/frozen1_3.jpg
        text: "В следващия час ще се научите на основите на кодирането. Традиционното
          програмиране обикновено е текстово, но ние ще използваме Blockly, който
          използва визуални блокове, които можете да плъзнете и пуснете, за да пишете
          програми. Така дори студентите изучават основите. Под капака, Вие все още
          създавате код."
      4:
        image: notes/frozen1_4.jpg
        text: "Програмата е набор от инструкции, които казват на компютъра какво да
          прави. Нека построим код, или програма, която ще помогне на Елза да създаде
          проста линия или отсечка. Ще използваме това по-късно, за да създадем по-сложни
          модели."
      5:
        image: notes/frozen1_5.jpg
        text: "Екрана е разделен на три основни части. В ляво е повърхността на леда,
          където ще изпълнявате вашата програма. Инструкциите за всяко ниво са написани
          точно под повърхността."
      6:
        image: notes/frozen1_6.jpg
        text: "Тази средна област е кутията с инструменти, и всеки от тези блокове
          е действие, което Елза и Анна могат да извършат."
      7:
        image: notes/frozen1_7.jpg
        text: "Празно пространство вдясно се нарича работната област, и това е мястото,
          където ние ще изградим нашата програма. За да се местите по повърхността
          на леда, ще използвате блок за преметване."
      8:
        image: notes/frozen1_8.jpg
        text: Тук, блокът за преместване казва, "премества напред със 100 пиксела."
          Когато натиснете "Старт", какво се случва? Елза се придвижва напред на екрана,
          точно 100 пиксела в действителност! Пикселите са много малки квадратчета
          на екрана на компютъра.
      9:
        image: notes/frozen1_9.jpg
        text: Друг блок, който имаме в този пъзел казва "завърти надясно на 90 градуса."
          И когато ние използваме този блок, караме Елза да се завърта на определени
          градуси. Можете да опитате блока и да  завъртите Елза на колкото искате
          градуси. Ъгълът се измерва от пътя пред Elsa. Така че това е завой на 90
          градуса. И това е завой на 120 градуса.
      10:
        image: notes/frozen1_10.jpg
        text: "Не забравяйте, че можете да промените броя на пикселите и градусите
          чрез натискане на стрелките до тях."
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Здравейте аз съм Паола! Компютрите са наистина добри в повтарянето
          на действия. Можете да броите от 10, 20 или 100. Но един компютър може да
          брои до един милиард или трилиони. Той няма да се отегчи и ще му отнеме
          само няколко секунди. Дали това е броене, или чертеж, или нещо подобно--компютрите
          могат да повтарят неща стотици или дори милиарди пъти."
      2:
        image: notes/frozen2_2.jpg
        text: "В програмирането, ние наричаме това цикъл. Цикъл е, когато се повтаря
          код отново и отново. За следващия пъзел целта ви е да помогнете на Анна
          да създаде квадрат с блок за повторение."
      3:
        image: notes/frozen2_3.jpg
        text: "Всички блокове с код, които поставяте вътре в блока за повторение,
          ще се повтарят последователно, толкова пъти, колкото искате."
      4:
        image: notes/frozen2_4.jpg
        text: За да нарисувате квадрат, можете да използвате "премества напред" и
          "завърта надясно" блок 4 пъти. Но по-лесен начин е да кажете на компютъра
          да "премества напред" и "завърта надясно на 90 градуса" веднъж и след това
          той да повтаря тази двойка действия 4 пъти. За да направите това, трябва
          да поставите двойката действия в блок за повторение.
      5:
        image: notes/frozen2_5.jpg
        text: Не забравяйте, че можете да промените номера в "Повтори" блока  и той
          ще  повтаря това, което е вътре в него много пъти.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: "Здравейте аз съм Крис Бош. Аз съм професионален баскетболист, и се
          учех да кодирам в колежа."
      2:
        image: notes/frozen3_2.jpg
        text: "Едно от най-важните понятия по компютърни науки е как да се дефинират
          нови команди. Повечето компютърни езици имат само около 100 думи или команди.
          И наистина, изкуството и магията е в определянето на собствени нови думи,
          създадени на основата на тези градивни блокове."
      3:
        image: notes/frozen3_3.jpg
        text: "След като сте научили компютъра как да направи едно действие, с помощта
          на тази последователност от команди, можете да дадете собствено име за това
          действие, така че е лесно да го повторите по-късно. Когато дефинирате своя
          собствена команда и й давате име, вие създавате функция."
      4:
        image: notes/frozen3_4.jpg
        text: "Здравейте аз съм Джес. При програмирането с блокове, трябва да използвате
          функции за набор от действия, които искате да използвате много пъти. Например
          ако сте написали код, за да създадете квадрат."
      5:
        image: notes/frozen3_5.jpg
        text: 'Можете да дефинирате това като функция, наречена "чертае квадрат." '
      6:
        image: notes/frozen3_6.jpg
        text: "Сега имате нов блок, който можете да използвате няколко пъти за да
          създадете няколко квадратчета."
      7:
        image: notes/frozen3_7.jpg
        text: "Много от простите форми може да се използват за създаване на по-сложни
          модели. В следващия пъзел кода, който наскоро написахме да  направи един
          кръг е достъпен за вас като нова функция, която може да направи кръгове
          с различни размери. Можете ли да използвате това, за да помогнете на Елза
          да създаде сложен и красив модел в снега?"
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "Ние ще създаваме игри като използваме Игрална Лаборатория. Добрите
          игри имат история, а всяка история си има герои. Ще се научим как да караме
          нашите герои като вещици, извънземни и животни да говорят, да се движат
          и да комуникират едни с други. До края на този урок, ще можеш да създаваш
          игра от подръчни средства и ще я споделяш със твоите приятели."
      2:
        image: notes/playlab_intro_2.png
        text: "Екрана е разделен на 3 основни части. Вляво е игралното поле, където
          вашата програма ще се изпълни. Инструкции за всяко ниво са дадени под него."
      3:
        image: notes/playlab_intro_3.png
        text: "Средната зона е кутията с инструменти, и всеки от тези блокове е част
          от код. Празното пространство вдясно се нарича работната област и това е
          мястото, където ние ще изградим нашата програма."
      4:
        image: notes/playlab_intro_4.png
        text: За начало, присъединете вашите блокове към оранжевия "при стартиране"
          блок. Можете да свържете множество блокове заедно като ги приплъзнете един
          към друг, докато не видите жълтата линия; след това ги пуснете и те ще се
          присъединят заедно.
      5:
        image: notes/playlab_intro_5.png
        text: В този първи пъзел, нашият актьор е пингвин и ние ще го накараме да
          казва "Здравей!" като плъзнем "казва" блок, и го свържем към "при стартиране"  блока.
          Ще напишем в него "Здравей." Ние можем да движим пингвина с помощта на блоковете
          за движение. След като сте поставили блоковете на място, натиснете бутона
          Старт, за да видите какво сте програмирали.
      6:
        image: notes/playlab_intro_6.png
        text: "Започнете и до края, ще можете да създадете своя собствена игра с всички
          видове герои, които могат да си взаимодействат, щастливи или тъжни, да печелят
          точки, или да хвърлят огнени топки, или дори да изчезват от полето. Това
          е всичко е за вас и играта, която искате да направите."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Време е да научим неща, които всички програмисти на игри използват
          всеки ден. Те се наричат манипулатори на събития. Манипулаторът на събитие
          казва на програмата ви да слуша за събитие, което може да се случи. Когато
          събитието се случи, програмата ви отговаря на събитието като извършва дадено
          действие."
      2:
        image: notes/playlab_events_2.png
        text: "Някои примери на събития слушат за щракване с мишката, бутон със стрелка
          или натискане на екрана."
      3:
        image: notes/playlab_events_3.png
        text: Тук ние ще да се накараме космическия робот да каже "Поздрави, земляни!",
          когато играчът кликне върху него. Ние ще използваме "когато е кликнато върху"
          блок и "казва" блока, които ще прикрепим към "при стартиране" блока. Когато
          играчът кликне върху робота, всичко, прикрепено към "когато е кликнато върху"
          събитийния блок ще се извърши. Какво ли би казало вашето извънземно?
      4:
        image: notes/playlab_events_4.png
        text: Има и "когато стрелка" блокове. Ако свържете блокове "премести" с тях,
          можете да движите актьорите нагоре, надолу, наляво, или надясно. Стъпка
          по стъпка играта става по-интерактивна.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Това е "повтаря завинаги" блокът. Ако поставите друг блок вътре в него,
          той ще се повтаря завинаги в играта.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Ако искаме актьора да  направи нещо няколко пъти, се налага да поставим
          тези блокове вътре в блока, "повтаря завинаги".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: "В този пъзел нашата цел е да помогнем на магьосника да патрулира по
          границите на кралството, наляво и надясно. Научете как  работят командите
          за повторение, това ще ви спести един тон време по-късно, когато създавате
          своя собствена игра."
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: "Това са блокове за чертане. Използвайте правилните, за да преместите
          художника, където нужно, за да потъмни сивите линии."
      2:
        image: notes/C1_artist_intro_2.png
        text: "Това са блокове за скачане. Когато ги използвате, Вашият художник се
          премества, но без да рисува. Използвайте ги, за преминаване към следващата
          сива линия."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Не са ли пчелите супер готини? В този набор от пъзели, целта Ви е да
          помогнете на пчелата да стигне до цветята и да получи нектар от тях, а след
          това да отлети до кошера и да направи мед. Трябва да използвате "вземи нектар"
          и "прави мед" блокове за това упражнение.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: "Всяко цвете има различен брой нектар: 1, 2, 3 или повече. Ние знаем
          колко е нектара в червените цветя, изписан под тях. Така че не забравяйте
          да вземете всичкия нектар от цветето, преди да продължите напред. Също така,
          всяка пита може да поеме само: 1, 2, 3 или повече мед. Не забравяйте да
          направите толкова мед, колкото медената пита може да побере."
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Ако сте в състояние да получите всичкия нектар и направите всичкия мед,
          ще успеете да преминете към следващото ниво. В противен случай трябва да
          опитате този пъзел отново. Играйте известно време и вижте какво е чувството
          да си "пчела" програмист!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "Цикълът е повторение на дейността. Така, когато трябва да свърша нещо,
          поглеждам рамката и това, което е сложено вътре, така аз ще го повтарям
          няколко пъти. Направете няколко цикъла, които извършват дейност няколко
          пъти."
      2:
        image: notes/C1_bee_loops_2.png
        text: В това ниво ние искаме пчелата да събере три нектара от цветето. Вместо
          да използвате три "вземи нектар" блокове, използвайте блок за повторение,
          за да получите нектар три пъти. Натиснете "Старт" и вижте дали нещата ще
          се получат. Хубаво!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: "Този урок се нарича голямото събитие. Тук става въпрос за това, как
          можем да контролираме нашите програми и всъщност променя начина, по който
          програмата се изпълнява с помощта на събития, като натискане на бутон или
          клик на мишката."
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "За този урок, Вие ще бъдете контролирани с хартиено дистанционно управление.
          Това е точно като жива видео игра."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "Събитието е действие, което предизвиква нещо да се случи. Това е като,
          когато щракнете върху бутона на мишката и уеб страницата се зарежда. Това
          е събитие. Когато докоснете екрана на таблета, за да превъртите, това е
          събитие, също. Събитията са чудесен начин потребителя директно да си взаимодейства
          с Вашата програма всеки път."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: "Нещата се случват, когато ние ги предизвикаме. Ако се чувстваме гладни
          -отиваме до хладилника. Ние чуваме когато пощальонът дойде и ни остави писма
          в пощенската кутия и отиваме да ги вземем от там. Това е точно като събитията
          от натискане на бутон или преместване на джойстик. Те са нещо, което се
          случва и  кара да се направи нещо."
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: Във видео игрите има събитие, което се нарича "Update". То се случва
          30 или 60 пъти в секунда. За програмистите на видеоигри, това е почти толкова
          важно колкото събитието от бутоните или джойстика.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Основното събитие, за което ще следим дали ще се случи, се нарича "Update".
          Ако се случи, ние ще проверим за движение с джойстика "Оо, дали някой не
          е тласнал джойстика? Да или не?" Без събития играчът не може да се движи,
          не може да скочи, а Вие не бихте могли да контролирате какво се случва,
          а видеоигрите нямаше да интересни.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "В пясъчната скулптура, вие трябва да знаете, че провалът е част от
          програмата. Но ако продължите да опитвате, нещата ще се получават по-добре
          и по-вълнуващо. Постоянството е името на играта. Опитайте и ще се влюбите
          в него."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: "Този урок се нарича изграждане на основа. В този урок ние ще работим
          за решаване на трудна задача. Вие ще трябва да разберете как да се направите
          основа с определена височина, колкото чаша за кафе и да трябва да е достатъчно
          стабилна, за да задържи теглото на една книга."
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "Може да има моменти, в които нашите основи няма да издържат. Може да
          има моменти, в които ние ще сме на път да се откажем. Може да има много
          от тези моменти. Но ако ние продължаваме да се опитваме отново и отново,
          тогава ще успеем."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "Постоянството е това, което ни спира да се откажем. Ако искате да създадете
          нещо ново и различно, по пътя ще има много неуспехи."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: "Номерът за постигане на устойчивост е да продължавате и да се учите
          от своите грешки и да не се отказвате, ако сте разочаровани. Wooo!"
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Здравейте моето име е Miral Kotb и аз съм създател на Iluminate. В
          моята работа има нещо, което ние използваме в танците и програмирането на
          светещи костюми. И това са циклите! Циклите повтарят едно действие отново
          и отново."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "Когато се повтаря нещо няколко пъти, като моите действия да запазя
          обръча да се върти, аз използвам цикъл за това действие. Това е един цикъл.
          Това е един цикъл. И това е един цикъл."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Днес ние ще имаме денс парти. Ние ще повтаряме и разучаваме нов танц.
          Повторение. Ние ще научим за циклите, които се използват в танците. Ще научим
          няколко лесни стъпки и ще ги повтаряме отново и отново до края на танца."
      4:
        image: notes/C1_getting_loopy_4.png
        text: "Тук са стъпките, които трябва да научите. Ръкопляскане с ръцете. Поставете
          ръцете зад главата си. Поставете ръцете си на кръста. Вдигнете лявата ръка
          нагоре. Повдигнете дясната ръка. Доста лесно, нали? Вие ще откриете, че
          можете да съкратите указанията от поставянето на някои танцови стъпки в
          цикли."
      5:
        image: notes/C1_getting_loopy_5.png
        text: "Ние действително използваме повторения в нашите танци. Танцьорите,
          както и компютрите, са свързани в мрежа. Аз може да повтарям светлините
          през дрехите на танцьорите отново и отново. В цикъла, в рамките на едно
          повторение, аз бих могъл да накарам едни и същи елементи да преминават през
          танцьорите отново и отново и след това, в рамките на цикъла, да поискам
          да увелича скоростта на светлината. И всичко това се създава чрез цикли.
          Циклите са важни за програмирането, защото те правят работата ни по-лесна."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "Този урок се нарича щастливи карти. Днес ние ще помогнем на нашия малък
          приятел Flurb се да си намери плодове."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Накарай Flurb да отиде до плода. За да направите това трябва да разберете
          накъде Flurb трябва да отиде и да го упътвате със стрелките. Например: за
          да стигне Flurb до ябълката, в каква посока Flurb трябва да тръгне."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: "За да го заведете там, очертайте в кръг посоката, в която трябва да
          си отиде."
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Създайте свой алгоритъм като залепите стрелките до картата, която се
          опитвате да разрешите. Втората е подобна, но посоката ще е надолу."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "Това е като програмиране с хартия!"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Дебъгване е намиране и отстраняване на проблеми. Има много начини да
          се търсят проблеми. Един от най-лесните е да се движите стъпка по стъпка
          до там, където нещо се е объркало. Тук аз се опитвам да направя кълбо назад
          на греда, но без да падам."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "Аз преминах през всяка част стъпка по стъпка и разбрах къде е моята
          грешка. Аз не пускам ръцете си от гредата правилно. Така че, аз опитах друго
          кълбо назад на греда с моята нова позиция на ръцете и аз го направих. Бях
          наистина радостна, отстраних грешките си в правенето на кълбо назад."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "За да научим повече за отстраняване на грешките, ние ще започнем с
          набор от блокове вече в сцената. Ще забележите, че с тези блокове няма да
          се стигнете до целта. Ние трябва да ги проследите блоковете и да ги оправите.
          Какво се е объркало? Ще забележите, че имате нужда да продължите на запад
          с един блок повече."
      4:
        image: notes/C1_maze_debugging_4.png
        text: Нека да се определим това чрез добавяне на друг блок на запад и натиснете
          "Старт,, за да видим дали е правилно. Уау, направил си го!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: "За този пъзел трябва да доведете птицата до прасето. Погледнете пъзела
          и вижте какви посоки трябва да се поставят."
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Трябва да плъзнете блоковете от кутията с инструменти към работната
          област. Уверете се, че са под "при стартиране" блока и когато прецените,
          че сте готови с правилното решение - щракнете върху бутона "Старт" и вижте
          дали птица стига до прасето.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "Едно от нещата, в които компютрите са наистина добри е повтарянето
          на команди. Като човек, за Вас е наистина скучно, ако трябва да направите
          едно и също нещо много и много пъти. Но компютърът може да прави едно и
          също нещо милиони или дори милиарди пъти и да не се отегчава, а дори ще
          изпълнява това винаги наистина добре."
      2:
        image: notes/C1_maze_loops_2.png
        text: Например, ако исках да пожелая на всички рожденици от Facebook "Честит
          рожден ден" като им изпратя имейл, това можеше да ми отнеме повече от век,
          ако пишех всички тези имейли по отделно. Но само с няколко линии код, може
          да имам система, която ще изпрати имейл до всички във Facebook, които имат
          рожден ден днес.
      3:
        image: notes/C1_maze_loops_3.png
        text: За да придвижим птицата към прасето в това ниво..., вместо да плъзнете
          три "С" блокове към работната област, ще използвате "повтори" блок. Плъзнете
          "повтори" блок към работната област и въведете 3 на мястото на???. След
          това плъзнете С блок в "повтори" блока и натиснете "Старт. Честито! Готово!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: "Този урок се нарича премести го, премести го. Заедно, ние ще напишем
          програма, за да преведем съучениците си от компаса до усмихнатия емотикон."
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: "Но усмихнатия емотикон е с лицето надолу и само един човек знае как
          се стига до него. Нека да стартираме програмата."
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "Програма е алгоритъм, който е кодиран в нещо, което може да се стартира
          от една машина. Повечето от нас мислят за програма като нещо, което пишем
          за компютър. Програми са наистина добри за това, но те също са полезни и
          в други места. Можете да направите своя собствена програма, игра или дори
          да програмирате робот да прави неща за Вас."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Моето име е Джеремая. Здравей! Аз съм на седем години. Обичам да играя
          на компютъра на майка ми, но аз винаги първо я питам. "Мамо, може ли да
          отида на компютъра? Разбира се скъпи!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: "Обичам компютъра на майка ми, защото мога да вляза в интернет. Интернет
          е като вашия квартал. Можете да посетите готини места, можете да говорите
          със семейство и приятели и можете да научите много нови неща."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Вчера посетих една зоологическа градина, която е близо до къщата ми.
          Видях бебе зебра. Аз ѝ направих снимка и ѝ промених цвета на ивиците, след
          това добавих шапка и добавих снимката към моята колекция на чалнати животни.
          Жестоко! По-късно отидох на място, много далеч. Посетих Кения. Това е държава
          в Африка. Много зебри живеят там."
      4:
        image: notes/C1_going_places_safely_4.png
        text: Понякога в интернет аз говоря с хора, които познавам, като баба ми,
          която живее в друг град. Здравей, бабо! Тя ми прави "бисквитки", които ще
          ми изпрати за моя рожден ден. "Сладко, искам интернет да има миризмограф!"
          Мога да говоря с различни хора в интернет, като братовчед ми, но говоря
          само с хора, които познавам.
      5:
        image: notes/C1_going_places_safely_5.png
        text: "Това, което ми харесва най-много в Интернет е, че могат да се играят
          Забавни игри. Да събирам точки! Също така, обичам да рисувам и създавам
          нови неща и да ги споделям с приятелите си. Готино! Понякога посещавам уеб
          сайтове, където да науча нови неща, но винаги се придържам към уеб сайтове,
          които са подходящи за мен. Уау динозаври!"
      6:
        image: notes/C1_going_places_safely_6.png
        text: "Интернет е супер забавно място. Но точно както когато пресичате улица
          във вашия квартал, вие трябва да бъдете внимателни, когато сте онлайн. Това
          са три правила за запомняне. Правило №1: Винаги питам първо родителите си.
          Правило №2: Говорим само с хора, които познаваме. Правило №3: Да посещаваме
          места, които са точно за нашата възраст."
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Уау, това беше забавно! Време е за вечеря. Аз излизам сега. Не мога
          да дочакам да влезна отново, за да видя къде ще ме заведе интернет следващия
          път."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Днес, Вие ще научите за програмирането по двойки. Тук работите в екип.
          Защо двама души трябва да използват един компютър? Тъй като две глави мислят
          по-добре от една. В програмирането по двойки, Вие и вашият партньор ще седите
          заедно пред един компютър и двамата ще да работите върху един проект."
      2:
        image: notes/C1_pair_programming_2.png
        text: В програмирането по двойки едното лице е водачът и другият е навигатор,
          просто като да караш кола на рали. Водачът е пред компютъра и използва клавиатурата
          и мишката или сензорен екран и контролира основните действия на компютъра.
          Другият човек е навигатор. "Навигаторът" помага на водача, отговаряйки на
          въпроси му и посочва потенциални проблеми или грешки.
      3:
        image: notes/C1_pair_programming_3.png
        text: "Комуникацията е ключът към успешното програмиране по двойки. Без обиди!
          Трябва да сте съобразителни, да не бъдете деспотичен навигатор, защото никой
          не обича втори шофьор на задната седалка. Вие и вашият партньор винаги трябва
          да се говори. Водачът може да обясни какво тя или той има като идея. А навигаторът
          може да предложи какво да правят по-нататък."
      4:
        image: notes/C1_pair_programming_4.png
        text: "Навигаторът трябва да се мисли за по- голямата картина, а водача се
          фокусира върху детайлите. Двете роли са важни. Програмирането по двойки
          е възможност да работите заедно като отбор."
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "Този урок се нарича засаждане на семена и това ще ни помогне да разберем
          алгоритмите. Те са специфични инструкции, които обясняват реда, в който
          да се направи нещо. Дори ежедневните неща като ядене на закуска или миене
          на зъби са алгоритми, които изискват малки стъпки, за да постигнете правилен
          резултат."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Компютрите могат да бъдат наистина умни, но те могат да ви разбират,
          ако им кажете точно какво искате стъпка по стъпка. Голямото нещо за алгоритмите
          е, че ако следвате инструкциите в правилния ред, можете да направите нещо,
          което не сте знаели как се прави преди време. Това е като рецепта."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Днес, ние ще посадим наши собствени семена, като за това ще използваме
          алгоритъм. Създайте свой собствен алгоритъм като изрежите снимките. Изберете
          снимките, които показват стъпките в засаждане на семена и подредете тези
          снимки в правилния ред."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Сега е време да видите дали вашият алгоритъм работи. Следвайте стъпките
          в алгоритъма много внимателно. Те в правилния ред ли са? Успяхте ли да засадите
          семенатакато следвахте алгоритъма? Това е като програмиране със снимки!"
      5:
        image: notes/C1_planting_seed_5.png
        text: "Когато искаме да направим шоколад, трябва да следваме много големи
          стъпки в този процес и всяка една от тези големи стъпки има набор от по-малки
          стъпки, а и има различни рецепти или алгоритми в зависимост от това какъв
          искаме шоколада да е на вкус. Всяка стъпка е важна, дори малките, така че
          без една стъпка, останалата част от тях не може да бъде завършена. Създаването
          на алгоритми, които другите могат да разберат е наистина важно. Ето защо,
          всяка стъпка трябва да бъде написана, така че без значение кой го прави,
          резултатът да е същият."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: "Време е да бъдете креативни и да използвате уменията си, за да разкажете
          една история. Вашата история ще има актьори, а вие ще накарате тези участници
          да говорят и общуват помежду си. Започнахте ли да мислите какъв вид история
          искате да разкажете?"
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Котката винаги се е страхувала от кучето, но ако котката прецени, че
          кучето се опитва да бъде мило с нея? "при стартиране" блока започва всичко.
          "Премества" блока ще премести вашия герой, а "казва" блока ще направи вашия
          герой да говори, каквото му пишете.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Това е "когато актьорите се докоснат" блок, който можете да свържете
          с други блокове.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Направих кучето да дойде и да каже "Здрасти", но тогава котката от страх
          избяга. "Ааа" Ако имаше повече време, щеше да е щастлив края. Край!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: "Това е нивото на правопис. Използвайте пъзел парчета, за да преместите
          пчелата. Докато се движи, тя ще събира букви за магията от думи."
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: "Вижте, дали ще можете да изпишете думата, която ви е дадена в полето
          под сцената. Но бъдете внимателни! Преместването в грешна посока ще добави
          букви, които не са нужни."
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "Едно от нещата, в които компютрите са наистина добри е повтарянето
          на команди. Като човек, за Вас е наистина скучно, ако трябва да направите
          едно и също нещо много и много пъти. Но компютърът може да прави едно и
          също нещо милиони или дори милиарди пъти и да не се отегчава, а дори ще
          изпълнява това винаги наистина добре."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Например, ако исках да пожелая на всички рожденици от Facebook "Честит
          рожден ден" като им изпратя имейл, това можеше да ми отнеме повече от век,
          ако пишех всички тези имейли по отделно. Но само с няколко линии код, може
          да имам система, която ще изпрати имейл до всички във Facebook, които имат
          рожден ден днес.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "В този пример Вашата цел ще бъде да преместите птицата, така че да
          хване прасето. Вече можем да използваме блок за повторение, за да може да
          направим това много по-лесно. Кажете на компютъра да върви стъпка напред
          веднъж а след това му кажете да я повтаря пет пъти."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: "За да направите това, можете да плъзнете напред командата и след това
          да я сложите вътре в блок за повторение. После щракнете върху него и му
          кажете, колко пъти да повторя блока, за да се придвижи птицата небходимите
          стъпки напред."
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "Още едно нещо - можете да поставите неоходимите команди вътре в блока
          за повторение. Така че в този пример, Вие трябва да се движите напред, да
          завиете наляво и това трябва да де направи пет пъти. Забавлявайте се!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "Вие дори няма да се класирате за състезанието, ако не сте хора, които
          са вещи в компютърните науки, защото колите събират много данни и е необходимо
          да има хора, които да са в състояние да пишат програми, за да се разбере
          как да се подобри производителността."
      2:
        image: notes/C2_artist_intro_2.png
        text: "В тези пъзели Вие ще бъдете художник, който използва молив за рисуване
          на различни форми. Където и да отива художникът, той ще нарисува линия зад
          себе си."
      3:
        image: notes/C2_artist_intro_3.png
        text: За да премествате около платното, ще използвате върви напред блок. Тук
          този ход придвижва напред със 100 пиксела. Когато натиснем "Старт", какво
          се случва? Художникът се движи напред определено разстояние, което е равно
          на 100 пиксела. Пикселите са много малки квадратчета на екрана на компютъра.
      4:
        image: notes/C2_artist_intro_4.png
        text: "Друг блок, който ще използваме в този пъзел, задава завой надясно на
          90 градуса. И когато това е изпълнено, художникът се завърта на определени
          градуси. Така че, можете да пробвате докъде искате художникът да се завърта.
          Това е завой на 90 градуса."
      5:
        image: notes/C2_artist_intro_5.png
        text: "А това е завой на 120 градуса. И не забравяйте, че можете да промените
          тези стойности чрез натискане на стрелките до номерата на пикселите и градусите.
          Насладете се на рисуването си с художника!"
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: "Това е блок условие. Той казва, ако има нектар или мед, който е по-малък,
          равен или по-голям от посочения, тогава да се направи нещо."
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "Това е полезно, когато не знаем колко е нектара или меда, за да го
          вземем и виждаме само този въпросителен знак."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "В този пример, ние ще трябва да кажем Ако лилавото цвете има нектар
          по-голям от 0, вземи нектар. Това ще кажем на нашата пчела, за да събираме
          нектар, докато има. TA-даа!"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: "Това е урок за бинарни гривни. Ние ще създадем код с нашите инициали
          на гривна, която можем да носим и показваме на всички наши приятели!"
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary е начин на представяне на информация, използвайки само две опции.
          Понякога хора мислят за това като само 1-ци и 0-ли. Но Вие може да си представите
          комбинациите от включено/изключено, нагоре/надолу и навън/навътре или всеки
          набор от противоположности.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: "Здравейте аз съм Орион и програмирам роботи тук в Play-im. Всички компютърни
          и роботски мозъци на базово ниво са малки електронни порти. Когато вратата
          е отворена, може свободно да преминава ток, а когато тя е затворена, електричество
          не преминава."
      4:
        image: notes/C2_binary_bracelets_4.png
        text: "Пример за бинарност са очите на робота. Очите на робота са светодиоди
          и светят, те са включени или изключени. Това е бинарна система-едно нещо
          или друго. Можем да използваме осветлението, за да представяме двоични числа.
          Ако имаме набор от роботи, първият робот ще е на първо място, вторият робот
          на второ място и така нататък. Ето как вие можете да представите двоично
          число. Роботите ще го направят с очите си и ще преброят за вас."
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: "Този урок се нарича условия с карти. Всеки ден Вие взимате решения
          въз основа на това, което виждате и чувате."
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "Искам да отида в парка, но първо трябва да реша дали трябва да взема
          чадър или не. Така че, аз поглеждам през прозореца. Ако е облачно, ще взема
          моя чадър. Иначе ще си взема очила. Мисля, че ще взема чадър. Това, което
          виждате и чувате определя какво ще вземете в парка."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Условията се използват и в игрите. Днес ние започваме да се упражняваме
          в условията с игра на карти. В тази игра картата, която вадиш определя това,
          което моите приятели ще направят. Ако извадя седмица, всеки пляска. Иначе
          всеки казва "о." Нека да го опитате! "aw" "Наздраве"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: "Обзалагам се, че можете да направите игри, които са още по-забавни
          с условията. Да пробваме! Условията са тези, които правят компютрите да
          изглеждат умни. Компютърна програма, която включва условия може да реагира
          на потребителя и промени курса си на действие."
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: "Помислете за вашите любими видео игри. Вие печелите ли повече точки
          за някои действия, а за други по-малко? Това се случва, защото компютърът
          използва условия. Това е начина, по който компютърът прави решение. Какво
          ще кажете ако ударите целта, печелите десет точки. Иначе губите три. Когато
          знаете как условията работят, можете да създадете всички видове вълнуващи
          игри."
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: "Тук вече имаме някои блокове, поставени в работното място. Но нещо
          не е наред."
      2:
        image: notes/C2_artist_debugging_2.png
        text: "Нека да проследим този код като забавим скоростта и гледаме как работи
          всеки блок - стъпка по стъпка."
      3:
        image: notes/C2_artist_debugging_3.png
        text: "О, там е проблемът! Котешките мустаци са 75 пиксела дълги, не 25."
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: "Чувал ли си някога за дебъгване на програма? Това е начина, по който
          да разбереш какво не работи. Когато поправяш код, ти идентифицираш и премахваш
          грешки."
      2:
        image: notes/C2_bee_debugging_2.png
        text: Тук, ние сме поставили няколко блока в работното поле. Ние ще да използваме
          "стъпка" бутона, за да проследим действието на блокове, стъпка по стъпка,
          за да разберем дали това е правилното решение и къде може да се наложи да
          го поправим.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Изглежда, че там е нашият проблем! Имаме нужда от още един "напред"
          блок. Бутона "стъпка" ни помага да поправим нашия проблем чрез откриване
          и поправяне на грешките.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: "На главата си поставете шапка и умът Ви ще Ви отведе в зоологическата
          градина и ще реши дали да кимате за Здравей на някого! Използвайте главата
          си, когато сте онлайн, за да запазите какво е Ваше вътре в ума си, за да
          бъдете в безопасност и така да си дадете лично пространство! От главата
          до пръстите на краката, спрете и помислете за това. От краката до носа спрете
          и помислете когато сте онлайн!"
      2:
        image: notes/C2_digital_footprint_2.png
        text: "Направете сърцето Ви да расте и расте, а след това да заблести и да
          стане страхотна валентинка, с която да кажете на някого че го обичате! Използвайте
          сърцето, когато сте онлайн, за да решите какво е правилно и винаги бъдете
          любезни и показвайте на вашите приятели уважение, бъдете справедливи и добри
          в интернет. От главата до пръстите на краката си, спете и помислете за това.
          От краката си до носа спрете и помислете онлайн!"
      3:
        image: notes/C2_digital_footprint_3.png
        text: "Използвате ръцете си за прегръдка на Вашия домашен любимец, но трябва
          да пазите дрехите си сухи и да носят любимите си ръкави и да ви помогне
          да летят и да повярват. Използвайте ръцете си, когато сте онлайн, за да
          си починете за определено време, оставете Вашите технологични играчки и
          се разходете сред природата. От главата до пръстите на краката пауза, мисля
          за това. От краката си до носа спрете и да мислете за онлайн!"
      4:
        image: notes/C2_digital_footprint_4.png
        text: "В коремчето спокойно \nсъбирай си храната \nи вслувай се как весело
          бълбукат ти червата \nдокато мислиш колко е газирана водата.\n\nВ коремчето
          се вслушвай \nи когато влезнеш в нета, \nвнимавай и недей пропускай знаците
          които \nще ти покажат правата пътека. \n\nСкоремчето си ще усетиш още\nако
          изгубиш пътя нощем\nи нещо грубо, лошо, непознато \nте дебне скрито зад
          бутончето крилато\n\nТогава от главата до петите потръпни\nи спри се и се
          замисли, \nи от петичките до връхчето намалкото носле \nпоспри се и мисли
          добре,\nзащото в нета дебнат опасности и страхове!"
      5:
        image: notes/C2_digital_footprint_5.png
        text: И така, мисли с главата си и чувствай със сърцето си, балансирай с ръцете
          и слушай с интуицията си - онлайн. Използвай краката си за да тичаш и риташ,
          и да скачаш, и подскачаш с "пого стик", и да танцуваш около блока, и да
          си подскачаш с миризливите чорапи. Използвай краката си докато си онлайн,
          за да се изправиш срещу побойниците, които прекаляват. И запомни бъди горд
          и бъди дружелюбен със създания малки и създания големи.
      6:
        image: notes/C2_digital_footprint_6.png
        text: "От главата до пръстите на краката, пауза, мисли за това. От краката
          си до носа, спри и мисли онлайн! Така че, помисли с главата си и почувствай
          със сърцето си, балансирай с ръце, вслушай се в червата, изправи се на крака.
          От главата до пръстите на краката, пауза, мисли за това. От краката си до
          носа, спри и помисли онлайн!"
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: "Всеки път, когато сте онлайн, ви оставяте отпечатък, който може да
          бъде открит, копиран, споделен, излъчен и е постоянен. Какъв вид дигитални
          отпечатъци оставяш ти? Какъв вид цифрови отпечатъци не трябва да оставяш?"
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Този урок се нарича "Програмиране на милиметрова хартия" и става въпрос
          за алгоритми. Днес, ние ще се научим как да пишем програми, чрез които ще
          пресъздадем простички черно-бели изображения, използвайки само ръчно изписани
          стрели.
      2:
        image: notes/C2_graph_paper_2.png
        text: "Алгоритъм е списък с инструкции за изпълнение на задача. Ние ще следваме
          този набор от инструкции, за да направим купа. Алгоритмите са наистина полезни,
          когато трябва някой да разбере как да се направи нещо."
      3:
        image: notes/C2_graph_paper_3.png
        text: "Ако пишем алгоритъм за компютър, трябва да го разделяме до много малки
          стъпки. Попълнете този ред и преминете към следващия, после следващия и
          ще го направите."
      4:
        image: notes/C2_graph_paper_4.png
        text: "Аз използвам алгоритми в моята работа. Ако опиша всички стъпки ще мога
          да пресъздам същото парче отново, или мога да науча някой друг да го направи.
          Сложете стъклото в пещ, докато парчетата се слеят, следвайте останалата
          част от инструкциите, за да направите купа. Алгоритмите ще Ви дадат пътна
          карта, за да направите нещо."
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: "Тук, ние ще използваме блок за повторение, за да ни помогне да запишем
          стъпки, с които да програмиране художника. Вече имаме някои блокове на нашата
          сцена, но те са само началото на кода, който трябва да напишем."
      2:
        image: notes/C2_artist_loops_2.png
        text: За да повторите тези блокове четири пъти и да нарисувате целия квадрат,
          вие просто плъзнете блок за повторение и сложете "върви напред" и блок за
          обръщане вдясно вътре. Когато щракнете на Старт, художникът ще повтаря тези
          стъпки четири пъти, за да завърши квадрата.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: "Цикълът е повторение на дейността. Така, когато трябва да свърша нещо
          поглеждам рамката и това, което е сложено вътре и го повтарям няколко пъти.
          Направете няколко цикъла, които извършват дейност няколко пъти."
      2:
        image: notes/C2_bee_loops_2.png
        text: "Това е блок за повторение. Каквото и да сложиш вътре в блока за повторение,
          той ще повтаря тези действия определен брой пъти, които си посочил. Например,
          в това ниво е необходимо да се движиш напред и да вземеш нектар три пъти,
          ние обаче ще плъзнем един блок, а блокът за повторение ще го повтори три
          пъти. Това прави нещата по-лесни!"
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: "Обикновено, програмирането се извършва с писане на текст, но ние ще
          използваме Blockly, който използва визуални блокове, които да плъзнете и
          пуснете, за да пишете програми. Под капака ние все още създаваме код. За
          да започнем, ние ще изградим код за програма, която ще помогне на ядосаната
          птица да се движи през лабиринта, за да стигне до злото прасе, което открадна
          яйцата ѝ."
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly е разделен на три основни части. В ляво е птичия лабиринт, където
          вашата програма ще се изпълни. Инструкции за всяко ниво са дадени под лабиринта.
          Тази средна област е кутията с инструменти и всеки от тези блокове е команда,
          която птицата може да разбере. Празното пространство отдясно се нарича работна
          област и това е мястото, където ние ще изградим нашата програма.
      3:
        image: notes/C2_maze_intro_3.png
        text: Ако плъзнете блок за движение в работно поле и натиснете "Старт", какво
          ще се случи? Птицата ще се придвижи напред една кутийка. Ако искам птица
          да направи нещо, след като тя се движи напред една кутия? Мога да добавя
          още един блок в нашата програма.
      4:
        image: notes/C2_maze_intro_4.png
        text: Аз ще използвам "завърти надясно" блок и ще го плъзна под моя блок за
          движение, докато се появи жълта стрелка. Тогава, аз ще го пусна и двата
          блока ще се съединят заедно. Когато натисна "Старт" отново, птицата ще изпълнява
          командите, които са подредени от първата до последната в нашето работно
          поле.
      5:
        image: notes/C2_maze_intro_5.png
        text: "Ако някога искате да изтриете блок, просто го премахнете от съединените
          и го плъзнете в кошчето. След като натиснете Старт, винаги можете да натиснете
          бутона за нулиране, за да върнете птица обратно към началото. Сега, да хванем
          прасетата!"
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: "Този урок се нарича Алгоритми от реалния живот. С алгоритми можем да
          опишем нещата, които хората правят всеки ден. Рецепта за бисквитки и указания
          за изграждане на къщичка за птици са пример за алгоритми от реалния живот."
      2:
        image: notes/C2_paper_airplanes_2.png
        text: "Днес, ние ще направим и тестваме алгоритъм за хартиен самолет. Но първо,
          ще трябва да накъсаме този голям проект на лесни за следване малки стъпки.
          За направата на хартиен самолет, ние трябва да решим какви стъпки да предприемем
          и в какъв ред да ги следваме."
      3:
        image: notes/C2_paper_airplanes_3.png
        text: "Вие ще създадете вашия алгоритъм като първо ще изрежете картинките.
          След това трябва да изберете 6, които показват необходимите стъпки, за да
          се направи хартиен самолет. Подредете тези картинки в правилния ред. След
          като сте подредили всико в правилния ред, ще трябва да размените алгоритмите
          си с други ученици от отбора, за да тествате алгоритъма и да видите дали
          той работи. Добре проектирания алгоритъм е супер важен за направата на най-добрия
          хартиен самолет."
      4:
        image: notes/C2_paper_airplanes_4.png
        text: "Когато искаме да направим шоколад, трябва да следваме много големи
          стъпки в този процес и всяка една от тези големи стъпки има набор от по-малки
          стъпки. Има различни рецепти или алгоритми в зависимост от това какъв искаме
          да бъде шоколада на вкус. Всяка стъпка е важна, дори малките, така че без
          една стъпка, останалата част от тях не може да бъде завършена. Създаването
          на алгоритми, които другите могат да разберат е наистина важно. Ето защо,
          всяка стъпка трябва да бъде написана, така че без значение кой го прави,
          резултатът да е същият."
    C2_playlab_createstory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: "Досега сте създавали анимация или история, която прави точно същото
          нещо всеки път, когато го стартирате. Сега можете да направите една интерактивна
          игра, която да играете."
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Там е "когато стрелка" блок и блок "премести актьор". Можете да поставите
          тези блокове заедно, за да движите актьорите с клавишите със стрелки.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: "Днес ние ще правим щафетно програмиране. Става въпрос за програмиране
          под натиск и дебъгване на грешките, които понякога се случват когато работите
          наистина бързо или в отбор. Ние ще използваме програмиране на милиметрова
          хартия, за да симулираме кодиране и ще използваме щафетно състезание, за
          да симулирате наличие на краен срок."
      2:
        image: notes/C2_relay_programming_2.png
        text: "В щафетното програмиране отборите ще се състезават, за да завършат
          програма на милиметрова хартия. Вие трябва да проверите работата на съотборника
          си и да поправите грешките ако има такива, да добавите нова стрелка и да
          се върнете и предадете щафетата на съотборник."
      3:
        image: notes/C2_relay_programming_3.png
        text: "Програмистите използват много дебъгването за намиране и отстраняване
          на проблеми в техните алгоритми или код. Има много начини да се трасират
          проблемите. Един от най-лесните начини е да проследите стъпка по стъпка,
          докато намерите кога нещо се объркало, а след това го поправяте."
      4:
        image: notes/C2_relay_programming_4.png
        text: "Тук аз  се опитвам да направя задно кълбо, но без да падам. Ще премина
          през всяка част, стъпка по стъпка, за да осъзная къде е моята грешка. Моят
          треньор ми показа, че не поставям  ръцете си на гредата правилно. Така аз
          опитах отново задно кълбо на гредата, но с новата позиция на ръцете, и го
          заковах! Наистина се радвам, че отстраних грешките ми в задното кълбо. Отстраняването
          на грешки е намиране и отстраняване на проблеми. Страхотно, добра работа!"
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: "Едно от нещата, в които компютрите са наистина добри е повтарянето
          на команди. Като хора, за нас е наистина скучно, ако трябва да направим
          едно и също нещо много, много пъти. Но компютърът може да прави едно и също
          нещо милиони или дори милиарди пъти и да не се отегчава, а дори ще изпълнява
          това винаги перфектно."
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Така например, ако исках да пожелая на всички във Facebook "Честит рожден
          ден" като им изпратя имейл, може да ми отнеме повече от един век, ако пиша
          единичен имейл за всеки. Но със само няколко линии код ще имам система,
          която да изпрати имейл до всички във Facebook с поздрав за рождения ден.
          За това се използват циклите. Те са ценни и са нещо, което компютрите могат
          да правят много добре.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: В този пример вашата цел ще бъде да преместите птицата, за да стигнете
          прасето.  Сега, ние ще използваме блок за повторение, за да може да направим
          кода много по- лесно. Или можете да направите това, като дадете на компютъра
          "върви напред" командата пет пъти, за да преместите птицата стъпка по стъпка
          към прасето.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Или можете просто да кажете на компютъра да "върви напред" веднъж, а
          след това да му кажете да го "повтори" 5 пъти, а той ще направи точно това.
          Така че, за тази цел можете да плъзнете вашата "върви напред" команда, а
          след това да я сложите вътре в блока "повтори". И можете да щракнете върху
          него и да въведете колко пъти искате да се повтаря командата и птицата да
          върви напред.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Сега, още нещо - можете да поставяте колкото искате команди вътре в
          блока, "повтори". Така че, в този пример вие ще кажете на птицата да върви
          напред и да се завърти наляво и да повтори тези команди 5 пъти. Добре! Добра
          работа и се забавлявайте!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: "Едно от големите неща в компютърното програмиране е, че след като сте
          казали на компютъра как да извърши едно действие, можете да извикате тази
          функция отново. Дайте ѝ име и след това можете да я извикате. Това е като
          разширяване на езика."
      2:
        image: notes/C3_artist_functions_2.png
        text: В програмата, която ние изградихме, се научихме как да нарисуваме квадрат
          чрез преместване и завъртане четири пъти. Ние може да вземем тази функция
          и да ѝ дадем име- "начертай квадрат", така че всеки път, когато искаме да
          направим квадрат ще извикваме тази функция, този код. Той ще направи за
          нас квадрат. Добавихме това понятие за нашия език за програмиране.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: "Вие дори няма да се класирате за състезанието, ако не сте хора, които
          са вещи в компютърните науки, защото колите събират много данни и е необходимо
          да има хора, които да са в състояние да пишат програми, за да се разбере
          как да се подобри производителността."
      2:
        image: notes/C3_artist_intro_2.png
        text: "В тези пъзели Вие ще бъдете художник, който използва молив за рисуване
          на различни форми. Където и да отива художникът, той ще нарисува линия зад
          себе си."
      3:
        image: notes/C3_artist_intro_3.png
        text: За да премествате около платното, ще използвате върви напред блок. Тук
          този ход придвижва напред със 100 пиксела. Когато натиснем "Старт", какво
          се случва? Художникът се движи напред определено разстояние, което е равно
          на 100 пиксела. Пикселите са много малки квадратчета на екрана на компютъра.
      4:
        image: notes/C3_artist_intro_4.png
        text: "Друг блок, който ще използваме в този пъзел, задава завой надясно на
          90 градуса. И когато това е изпълнено, художникът се завърта на определени
          градуси. Така че, можете да пробвате докъде искате художникът да се завърта.
          Това е завой на 90 градуса."
      5:
        image: notes/C3_artist_intro_5.png
        text: "А това е завой на 120 градуса. И не забравяйте, че можете да промените
          тези стойности чрез натискане на стрелките до номерата на пикселите и градусите.
          Насладете се на рисуването си с художника!"
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: "Когато поставите цикъл в друг цикъл, ние наричаме това вложен цикъл.
          За пример, тук ние сме дали кода на вече изготвения триъгълник със страни,
          дълги 100 пиксела, като използвате блок за повторение и го настроите на
          3, по веднъж за всяка страна на триъгълника."
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: "Но ние искаме да начертаем шест триъгълника. За да направим това, трябва
          да вземем този цикъл и да го поставим в друг. Много готино!"
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: "Това е блок условие. Той казва, ако има нектар или мед, който е по-малък,
          равен или по-голям от посочения, тогава да се направи нещо."
      2:
        image: notes/C3_bee_conditionals_2.png
        text: "Това е полезно, когато не знаем колко е нектара или меда, за да го
          вземем и виждаме само този въпросителен знак."
      3:
        image: notes/C3_bee_conditionals_3.png
        text: "В този пример, ние ще трябва да кажем Ако лилавото цвете има нектар
          по-голям от 0, вземи нектар. Това ще кажем на нашата пчела, за да събираме
          нектар, докато има. TA-даа!"
    C3_bee_debugging:
      1:
        image: "бележки/C3_debugging_bee_1.png"
        text: "Чувал ли си някога за дебъгване на програма? Това е начина, по който
          да разбереш какво не работи. Когато поправяш код, ти идентифицираш и премахваш
          грешки."
      2:
        image: "бележки/C3_debugging_bee_2.png"
        text: Тук, ние сме поставили няколко блока в работното поле. Ние ще да използваме
          "стъпка" бутона, за да проследим действието на блокове, стъпка по стъпка,
          за да разберем дали това е правилното решение и къде може да се наложи да
          го поправим.
      3:
        image: "бележки/C3_debugging_bee_3.png"
        text: Изглежда, че там е нашият проблем! Имаме нужда от още един "напред"
          блок. Бутона "стъпка" ни помага да поправим нашия проблем чрез откриване
          и поправяне на грешките.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: "Едно от най-важните понятия в информатиката е как да се дефинират нови
          команди, как да добавите свои собствени думи на компютърен език. Повечето
          компютърни езици имат само около сто думи или команди. Изкуството и магията
          е в определянето на собствени нови думи от тези градивни блокове."
      2:
        image: notes/C3_bee_functions_2.png
        text: "Ние правим това през цялото време в спорта. Например, в баскетбола,
          започваме от обучение как да дриблираме, как да вкарваме кош, как да отскочим.
          След като сте научили тези наистина основни движения, можете да научите
          нови движения и да свържете заедно тези блокове, като хващане, завъртане
          или подаване и др.. След това можете да опитате да направите по-сложни ходове.
          Веднъж научите ли тези ходове и им дадете име, всички от отбора ще знаят
          как да ги направят."
      3:
        image: notes/C3_bee_functions_3.png
        text: "По същия начин веднъж ти преподаваш на компютъра как да се направи
          едно действие с помощта на тези последователности от команди. Можете да
          дадете свое име за това действие, така че да е лесно да го повторите по-късно.
          Когато дефинирате своя собствена команда и ѝ дадете име, това се нарича
          функция. Сега, ние ще използваме функции, за да помогнем на пчелата."
      4:
        image: notes/C3_bee_functions_4.png
        text: "В този пример нашата функция се извиква, за да вземете 2 нектар, този
          зелен блок тук. Ние знаем как да получим 2 нектар като потърсим в тази сива
          кутия, която представлява дефиницията на функцията. Ако погледнем вътре
          има 2 команди вземи нектар. Винаги поглеждайте какво има вътре в сивото
          поле, така ще знаете какво могат да правят тези зелени функционални блокове."
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: "Сега ние ще да използваме вложени цикли с пчелата. Дали сме първоначален
          код, който казва на Пчелата да върви напред и да вземе нектар три пъти и
          след това да завива надясно. Нека вземем това цяло парче код и да го поставим
          вътре в друг блок-цикъл, който да го повтаря три пъти. Готово!"
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: "Вие ще създадете ваша собствена bounce игра, която ще можете да споделите
          с приятелите си! Колко готино!"
      2:
        image: notes/C3_bounce_2.png
        text: "За да започнете, трябва да се свържат контролите на платформата с клавишите
          със стрелки на клавиатурата."
      3:
        image: notes/C3_bounce_3.png
        text: Можем да направим това чрез свързване на "когато е натисната стрелка
          наляво" блок с "премести наляво" блока и "когато е натисната стрелка надясно"
          блока с "премести надясно". Отидете и си програмирайте собствена bounce
          игра за нула време!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: "Този урок е за изчислителното мислене. Понякога изучаването на нова
          игра може да бъде трудно, нали? Отначало може да изглежда наистина объркващо
          и понякога, няма кой да Ви научи на правилата, така че трябва да го разберете
          сами."
      2:
        image: notes/C3_computational_thinking_2.png
        text: "Добрата новина е, че можете да станете по-добри когато подреждате нещата
          по своему, когато знаете няколко трика на мислене. Тези трикове са уникални
          начини за разглеждане и решаване на проблеми. В този урок ще научите за
          четири трика и как да ги практикувате с приятелите си, за да разберете правилата
          на играта."
      3:
        image: notes/C3_computational_thinking_3.png
        text: "Когато разделяте голям проблем на по-малки парчета, използвате мозъка
          си да се разгадае големия проблем. След като ние разделим големия проблем
          на няколко по-малки проблема, ние може да преминем към следващия трик, който
          се нарича модел на съвпаденията."
      4:
        image: notes/C3_computational_thinking_4.png
        text: "Това е, когато ние откриваме приликите между нещата. След като намерим
          нещата, които са едни и същи, можем да разберем какви неща са различни.
          Когато се премахнат тези различия, това се нарича абстракция."
      5:
        image: notes/C3_computational_thinking_5.png
        text: "След като съм разбрал стъпките за решаване на проблема, мога да сложа
          тези стъпки в определен ред, наречен алгоритъм, така че всеки да може да
          използва указанията ми за решаване на този проблем. Ние ще използвате тези
          четири стъпки, за да разберем как да играем игра без правила. До края на
          играта ще можете да играете нещо, което изглежда като това!"
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: "Този урок се нарича crowdsourcing. В този урок ще използваме тесте
          карти, за да научим колко по-лесно някои неща може да бъдат направени в
          група, а не да се опитваме да ги правим сами. Така че, вземете няколко приятели
          и направете нещо страхотно. Crowdsourcing е получаване на помощ от една
          голяма група от хора за да се довърши нещо по-бързо."
      2:
        image: notes/C3_crowdsourcing_2.png
        text: "В компютърните науки ние използваме crowdsourcing през цялото време.
          Хиляди самодейци и професионалисти се свързват чрез компютрите си заедно,
          за да търсят в милиарди и милиарди парчета от информация. Търсенето на неща
          като следващото Marsenne едноцифрено число, или дори е възможно комуникация
          с извънземни."
      3:
        image: notes/C3_crowdsourcing_3.png
        text: "Когато гледаме филм, всяка секунда от филма е 24 отделни снимки, които
          ние наричаме кадри. Така че, всяка една от тези снимки трябва да бъде създадена
          и поставена и пусната заедно с другите. Моят екип и аз, сме разработчици
          на софтуер. Ние всички работим заедно, за да се създадем парче от софтуер,
          който създава изображение, създава крайното изображение, които виждате на
          екрана. Това е инструмент, който артисти и други разработчици могат да използват
          като част от тяхната работа в екип и процеса, за да могат да създават изображения,
          които искат на екрана."
      4:
        image: notes/C3_crowdsourcing_4.png
        text: "Например, в търсенето на Немо, когато Краш и Скърт и всичките им приятели
          плуват през източния австралийски риф. Вие виждате изображения на падаща
          вода, вие виждате цветовете на гърба на костенурка, виждате двете страни
          на рибата. Всички тези неща са генерирани чрез математически и компютърни
          програми, които сме написали. Ние след това ги даваме на художниците и те
          създават крайното изображение, украсяват го, за да изглежда красиво и забавно."
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: "Този урок се нарича сазтезание с зарове. Почти всеки обича да играе
          компютърни игри. Замисляли ли сте се за това как компютърни програмисти
          превращат стъпките на игра в една програма? Първата стъпка в създаване на
          компютърни игри и при решаването на всеки проблем изисква мислене и планиране."
      2:
        image: notes/C3_dice_race_2.png
        text: "Когато мислиш за решаването на даден проблем, ти създаваш алгоритъм,
          който е стъпка по стъпка план за решаване на подобни проблеми или завършване
          на задача. В този урок вие ще създадете алгоритъм за игра на зарове. Когато
          сте готови, изпробвайте го с вашите приятели, за да видите дали те могат
          да следват стъпките, за да играят играта. Когато програмиста е сигурен,
          че стъпките са правилни, е време да се преведе алгоритъма на програмен език,
          така че компютърът да може да го разбере."
      3:
        image: notes/C3_dice_race_3.png
        text: "Почти всичко, което правим всеки ден изисква алгоритъм, списък от стъпки,
          който можете да следвате за да завършиет дадена задача. Помислете за оправянето
          за училище или планиране на забавен ден с вашите приятели или фиксиране
          на лека закуска. За да изпълните някоя от тези задачи, ще трябва да го раздобите
          на по-малки стъпки и понякога стъпките трябва да бъдат в определен ред."
      4:
        image: notes/C3_dice_race_4.png
        text: "Помислете за правенето на един сандвич. Няма значение коя съставка
          сйставка извадите от шкафа първа. Но не може да намажете фъстъченото масло,
          докато не сте отворили буркана. Компютрите използват алгоритми и програми,
          за да им покажете какво да направя дори прости неща, които ние можем да
          направим и без да мислим за тях."
      5:
        image: notes/C3_dice_race_5.png
        text: Алгоритъмът - това е мисълта за това какво трябва да се случи, докато
          програмата са конкретните инструкции дадени на компютъра, за да го направят
          да се случи. Алгоритмите трябва да бъдат "преведени" в програма, преди компютъра
          да може да ги изпълни. Разделянето на дадена задача на малки стъпки, наречени
          алгоритъм понякога е трудна задача. Но като всяко ново умение, с практиката
          става все по-лесно.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: '"Докато" циклите са доста подобни на това, което правиш в ежедневния
          живот. Представи си че миеш колата, и трябва да я търкаш до пълно почистване.
          Докато не е чисто, ти трябва да продължиш да търкаш. Ти преценяваш това
          през цялото време.'
      2:
        image: notes/C3_farmer_while_2.png
        text: "Трябва ни нов поглед, за да помогнем на фермера. Той се нарича докато-блок.
          Всъщност е доста лесно. Докато твърдението в горната част е вярно, трябва
          да се направи нещо. Например, докато има купчина извършвай действие премахване.
          Давай напред и да го пробваме с фермера."
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: "Този урок е за функционални слънцеотразители. Вие ще създавате много
          такива с помощта на функции. Има няколко стъпки в създаването на един слънцеотразител.
          Някои от стъпките, които правите, трябва да се повтарят много пъти."
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: "Първата стъпка в опростяване на процеса на правене на suncatcher е
          да разберем какво се повтаря отново и отново. Ние може да групирате тези
          стъпки в това, което ние наричаме функция."
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: "Но има нещо повече за създаването на красиви suncatcher отколкото следване
          на точните стъпки. Понякога искаме да бъдем креативни и ще използваме промяна
          на цвета на мънистата. Можем да направим всеки suncatcher уникален, ако
          използваме различни цветни мъниста."
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: "Вашият слънцеотрозител ще бъде уникален, когато се научите да мислите
          за мънистата като за променливи, които са контейнери за информация, която
          може да променяме. Забавлявайте се докато създавате красиви слънцеотразители,
          използвайки функции и променливи!"
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: "В този урок става въпрос за интернет. Интернет е много оживено място
          и наподобява на този оживен път. Съобщенията са като автомобилите, които
          се стремят да стигнат до техните дестинации. Съобщенията се движат през
          интернет много бързо."
      2:
        image: notes/C3_internet_2.png
        text: "Представата как работи интернет ще ви помогне да разберете какво се
          случва, когато го използвате. Ще научите как съобщенията от вашия компютър
          достигат до любимите уеб сайтове или до приятел по електронната поща. Точно
          както е по-лесно да избягвате задръстванията, когато знаете пътищата, така
          и пътуването в интернет не е толкова сложно, когато знаете какво се случва
          зад кулисите."
      3:
        image: notes/C3_internet_3.png
        text: "Изпращането на съобщения по интернет наподобява изпращане на писмо
          по пощата, но с няколко различия. Аз съм тук в Google.com. IP адресът за
          този сайт е този номер. Може да мислите за IP адреса като обратен адрес
          по пощата. Представете си, че аз искам да изпратя съобщение по пощата някой
          в офиса там долу. Виждате ли URL и IP адреса на тази врата? Аз съм пиша
          съобщението и натискам Изпрати."
      4:
        image: notes/C3_internet_4.png
        text: "За разлика от пощенските услуги първото нещо, което се случва е, че
          интернет накъсва съобщението по-малки части, така че то да може да бъде
          изпратено по-лесно. Тези малки части се наричат пакети. Всеки пакет на съобщението
          се доставя до местоназначението, един по един. Тези пакети, всички, се събират
          заедно в правилния ред, така че приемникът може да прочете съобщението правилно.
          Разбира се има още много неща, свързани с това как работи интернет, но това
          е едно чудесно начало. Вие сте на път да станете знаещ интернет потребител!
          Не забравяйте да кажете на семейството и приятелите си какво сте научили!"
      5:
        image: notes/C3_internet_5.png
        text: "Моето име е Аманда Камп и съм софтуерен инженер в Google. Работя в
          екипа, отговарящ за сървъра, на който съхраняват профили и контакти. В моята
          работа се налага да се обмислят варианти за прехвърляне на контакти от едно
          на друго устройство, като телефона. Повечето хора имат много контакти, понякога
          дори 1000 и ние не искаме да изпратите всички тези контакти наведнъж в телефона
          си, защото се получава твърде голямо съобщение. Подобно на начина, по който
          интернет се разпада големи съобщения на пакети, ние използваме концепция,
          която се нарича страниране където може да изпратите до телефона само 100
          контакта наведнъж, а след това телефона ви да поиска следващите 100."
      6:
        image: notes/C3_internet_6.png
        text: "Най-вълнуващото нещо за софтуера е фактът, че той може да повлияе на
          целия свят. Научих се да програмирам, когато бях на деветнадесет. Мисля,
          че вече бях второкурсник или първокурсник в колежа. Спомням си, че първата
          програма която написах превръщаше градусите от Целзий към Фаренхайт. Аз
          обичам програмирането, тъй като то помага на хората. Мога да пиша програми
          в Google, които помагат на хората по целия свят и това е наистина изумително
          и вълнуващо."
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: Хората вземат решения всеки ден. Например, преди да излезнете навън,
          имате "ако" оператор, който казва, че ако вали, тогава трябва да си вземете
          яке. Компютрите са невероятни във взимането на подобни решения с оператори.
          Те могат надеждно да ги изпълнят с невероятна скорост. Такава програма представлява
          малко математика и няколко "ако" оператора, които са нужни на компютъра
          за да взима решения.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: '"Ако" блока помага на зомбито да направи решение. Той проверява нещо.
          Например, нека да използваме блок, който казва "ако има път наляво" и ще
          го поставим "завърти наляво" команда вътре в него. Ние казваме на зомбито
          да провери наоколо дали има път наляво и ако е така, да се обърне в тази
          посока.'
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Тогава ние използваме "върви напред" блок вътре в повторението, за да
          продължи да се движи напред, докато той трябва да отидете направо. Тогава,
          когато трябва да се завърти, блокът "ако" ще му каже да направи завой вляво.
          Можете да видите, че ако направим това, когато е необходимо, ние ще завиваме
          наляво, а иначе ще се движим напред, за да постигнем целта си.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: Това е пример за използване на "ако" оператор, който е наистина основна
          концепция в компютърното програмиране. Едно от първите неща, които научих,
          е как да се напише програма, която представлява игра tic-tac-toe. Имах "ако"
          оператори, които да взимат решение ако другият човек е на път да спечели,
          да блокират мястото. Забавлявайте се, научите как да използвате "ако" оператори,
          защото те се ключова концепция.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: В този пример целта ви е да завесете зомбито до слънчогледа. Бихме могли
          да използваме пет "върви напред" блокове или може да кажем на компютъра
          да "върви напред" веднъж и да повтори пет пъти блока за действие.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Това спестява време и е по-лесно. За да го използвате, просто поставете
          "върви напред" блок вътре в блока за повторение. Натиснете "Старт" и зомбито
          ще се премести напред пет пъти до вкусния слънчоглед.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "Досега сте създавали анимация или история, която прави точно същото
          нещо всеки път, когато го стартирате. Сега можете да направите една интерактивна
          игра, която да играете."
      2:
        image: notes/playlab_2.png
        text: Там е "когато стрелка" блок и блок "премести актьор". Можете да поставите
          тези блокове заедно, за да движите актьорите с клавишите със стрелки.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Това е урок за писане на песен. Музиката много прилича на компютърна
          програма. Написаните ноти и думи "казват" на певеца точно какво да прави.
          Някои части от музиката и текста се използват отново и отново.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Ние наричаме това припев. В компютърната програма частите, които се
          използват отново и отново се наричат функции. Когато четеш текстове на песните
          и там е написано думата "припев", пееш ли и тази дума? Не, поглеждаш в горната
          част на страницата, за да видиш кои думи съставляват припева.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: "В този урок ще научите една малка песничка, наречена малко зайче foo
          foo. Песента има припев, който се пее няколко пъти отново и отново. Функцията
          е част от код, който можете да използвате отново и отново. Това прави програмирането,
          по-лесно и по-ефективно! Така не е нужно да пишеш стъпките на функцията
          отново и отново. Просто да ги пишеш веднъж!"
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: "Това е условен блок. Той казва, че ако сте в цветето или медената пита,
          тогава трябва да направите нещо. Това е полезно, в случаите когато не знаем
          колко мед да направим или колко нектар да съберем и виждаме само този въпросителен
          знак."
      2:
        image: notes/C4_bee_conditional_2.png
        text: "В този пример, ние ще да се кажем, ако е цвете, ще вземем всичкия нектар
          и след това ще използваме друг за да каже, ако е медена пита, да се направи
          мед. Ta-Да!"
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Имаме нов блок, който се нарича "ако/друго" блок. Това е условен оператор
          точно като блока "ако", който сте използвали в пъзелите преди. Но сега има
          нова част накрая, която се казва "иначе". "Ако/иначе" блока позволява на
          пчелата да направи решение между два набора от действия. Ако пчелата е на
          цвете, пчелата ще направи набор от действия, които поставяте в първата част,
          където се казва "ако". Ако пчелата не е цвете, пчелата ще направи друг набор
          от действия, които ще поставим в частта, където се казва "друго".
      2:
        image: notes/C4_conditionals_2.png
        text: '"Ако" операторите са начинът, по който компютрите могат да вземат решения.
          Хората създават условия за компютъра, които казват, какво да направи компютърът
          "ако" е в определена ситуация. "Иначе" означава какво той да прани в противен
          случай. Горната част на нашия ако/иначе блок оказва действие ако пчелата
          е на цвете. Но в началото на нашия блок може да се кажат и други неща, като
          колко нектар да се вземе или ако има път напред, нашият блок ще се държи
          по същия начин. Ако се случи събитие, което да включи "Ако" оператора, то
          ще се направи първия набор от действия. Но ако това не се случи, пчелата
          ще направи вторият набор от действия.'
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: "Когато използвате блок за повторение за да повторите кода си, как компютърът
          знае колко пъти да повтаря? Под Блокът за повторение се крие по-сложно парче
          от код, наречен брояч, който брои от началната до крайната стойност с нарастване
          с определена стъпка."
      2:
        image: notes/C4_for_loops_2.png
        text: На пример, "повтори 3" блока брои от 1 до 3 през 1. Всеки път, когато
          отброява, той изпълнява кода, поставен в цикъла. Блокът знае колко пъти
          да повтаря с помощта на брояч, на който е зададена началната стойност в
          началото на цикъла и има нарастване, което се добавя към него всеки път
          когато цикъла се изпълнява. Веднага щом стойността на брояча стане по-голяма
          от крайната стойност, цикъла спира да работи.
      3:
        image: notes/C4_for_loops_3.png
        text: Ползата от използването на "за" цикъла вместо блок за повторение е,
          че всъщност можете да видите брояча и да го използвате във вашият цикъл.
          Например, ако аз имам една серия от цветя и първото има 1 нектар, второто
          има 2 нектара, а третото има три, мога да използваме "за" цикъла "да каже"
          на пчелите да събират като броят нектарите всеки път, които са един в първото
          цвете, две във второто и три на трето.
      4:
        image: notes/C4_for_loops_4.png
        text: Също в "за" цикъл може да увеличавате стойността на брояча с номер,
          различен от едно всеки път. Потенциално може да се брои през 2s, 4s или
          дори сума, която да се променя всеки път.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: "Когато използвате блок за повторение за да повторите кода си, как компютърът
          знае колко пъти да повтаря? Под Блокът за повторение се крие по-сложно парче
          от код, наречен брояч, който брои от началната до крайната стойност с нарастване
          с определена стъпка."
      2:
        image: notes/C4_for_loops_bee_2.png
        text: На пример, "повтори 3" блока брои от 1 до 3 през 1. Всеки път, когато
          отброява, той изпълнява кода, поставен в цикъла. Блокът знае колко пъти
          да повтаря с помощта на брояч, на който е зададена началната стойност в
          началото на цикъла и има нарастване, което се добавя към него всеки път
          когато цикъла се изпълнява. Веднага щом стойността на брояча стане по-голяма
          от крайната стойност, цикъла спира да работи.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: Ползата от използването на "за" цикъла вместо блок за повторение е,
          че всъщност можете да видите брояча и да го използвате във вашият цикъл.
          Например, ако аз имам една серия от цветя и първото има 1 нектар, второто
          има 2 нектара, а третото има три, мога да използваме "за" цикъла "да каже"
          на пчелите да събират като броят нектарите всеки път, които са един в първото
          цвете, две във второто и три на трето.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Също в "за" цикъл може да увеличавате стойността на брояча с номер,
          различен от едно всеки път. Потенциално може да се брои през 2s, 4s или
          дори сума, която да се променя всеки път.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: "Когато използвате блок за повторение за да повторите кода си, как компютърът
          знае колко пъти да повтаря? Под Блокът за повторение се крие по-сложно парче
          от код, наречен брояч, който брои от началната до крайната стойност с нарастване
          с определена стъпка."
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: На пример, "повтори 3" блока брои от 1 до 3 през 1. Всеки път, когато
          отброява, той изпълнява кода, поставен в цикъла. Блокът знае колко пъти
          да повтаря с помощта на брояч, на който е зададена началната стойност в
          началото на цикъла и има нарастване, което се добавя към него всеки път
          когато цикъла се изпълнява. Веднага щом стойността на брояча стане по-голяма
          от крайната стойност, цикъла спира да работи. Ползата от използването на
          "за" цикъла вместо блок за повторение е, че всъщност можете да видите брояча
          и да го използвате във вашият цикъл.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Now that you've edited function blocks, it's time to create a new function
          block from scratch. It's really simple. You'll see the toolbox has a category
          called functions. If you click on this, you'll see an orange button called
          create a function. Clicking on this brings up the function editor that you've
          already used to edit existing function blocks.
      2:
        image: notes/C4_function_create_2.png
        text: "Точно както преди, започвате да наименовате функция си като написвате
          описание за това каква функция се предполага да извършва. Например, предполага
          се, че чертае квадрат или чертае триъгълник и после да приплъзне блокове
          от кутията с инструменти към бялото работно пространство отдолу. Запомнете
          да приплъзнете тези блокове в зеления обвиващ блок за тази функция."
      3:
        image: notes/C4_function_create_3.png
        text: |-
          След като сте готови, натиснете бутона запази и излезте. Това ще ви отведе обратно в основното работно пространство с пъзели.
          Новата функция, която сте създали ще се появи като зелен блок в категорията с функции във Вашата кутия с инструменти. Провлачете и пуснете в основното работно пространство и я използвайте като всеки друг блок, за да решите пъзела.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: "Едно от големите неща в компютърното програмиране е, че след като сте
          казали на компютъра как да извърши едно действие, можете да извикате тази
          функция отново. Дайте ѝ име и след това можете да я извикате. Това е като
          разширяване на езика."
      2:
        image: notes/C4_function_edit_2.png
        text: В програмата, която ние изградихме, се научихме как да начертаем квадрат
          чрез преместване и завъртане четири пъти. Ние нарекохме тази функция "начертай
          квадрат", така че всеки път когато искаме да направим квадрат ще извикваме
          тази функция с код, който ще направи за нас квадрат. Добавихме тази концепция
          в нашия език за програмиране.
      3:
        image: notes/C4_function_edit_3.png
        text: В този пъзел ние вече сме създали "начертай квадрат" функция за вас.
          Вие ще я видите в кутията с инструменти като зелен блок. Това, което трябва
          да направите е да напишете същия код, с който преди изчертавахте квадрат
          и да го сложите в тази функция. За да направите това, щракнете върху опцията
          редактиране в зеления блок. Така ще се отвори редактора на функцията. Тук
          имате три части. Място, където се дава име на функцията. То ще се появи
          в зеления блок. След това се пише кратко описание на това, което вашата
          функция трябва да прави.
      4:
        image: notes/C4_function_edit_4.png
        text: In this case, it's supposed to draw a square. The white space below
          this is the work space and works just like the work space you've already
          been using. Drag and drop blocks from the toolbox into this work space.
          Remember to put the blocks that create a square inside the green wrapping
          block for the function. Once you're done, click on save and exit. This will
          take you back to the main puzzle work space. Now you can use the draw the
          square function block just like any other block to solve the puzzle.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: "Тук е функция, която изчертава квадрат с 50 пиксела дълги страни. Това
          е страхотно, но ако искаме да начертаем квадрат със страни 50 пиксела и
          друг квадрат със страни от 100 пиксела? Ние не трябва да правим две отделни
          функции, които правят почти същото нещо. Вместо това можем да използваме
          една функция с параметър."
      2:
        image: notes/C4_function_parameters_2.png
        text: "Параметрите ни позволяват да поставяме стойности в една функция, които
          се използват като променливи вътре във функцията. Нека опитаме да добавим
          параметър, който ще се задейства с извикване на тази функция, така ще може
          да го използвате за да създадем квадрати с различни размери. В редактора
          на функцията можете да редактирате името и описанието, както преди но сега
          можете да добавите и параметър. Напишете името на вашия параметър в пространството
          и щракнете върху добави параметър. Така ще се създаде червен блок с името
          на параметъра, който току що създадохте. Сега можем да заменим блокът за
          движение напред с параметъра за дължина, така че ще се извърши движение
          напред по дължина."
      3:
        image: notes/C4_function_parameters_3.png
        text: Click save and close and drag out your new create a square block from
          the functions category in the toolbox. You'll notice there's an empty space
          next to length because the function wants to know what value the parameter
          Length should have. Drag a number block from the Math category and place
          it in this space. See how you can use the function again and again with
          different lengths to make squares of different sizes? Try it for yourself!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: "Обикновено, програмирането се извършва с писане на текст, но ние ще
          използваме Blockly, който използва визуални блокове, които да плъзнете и
          пуснете, за да пишете програми. Под капака ние все още създаваме код. За
          да започнем, ние ще изградим код за програма, която ще помогне на ядосаната
          птица да се движи през лабиринта, за да стигне до злото прасе, което открадна
          яйцата ѝ."
      2:
        image: notes/C4_intro_2.png
        text: Blockly е разделен на три основни части. В ляво е птичия лабиринт, където
          вашата програма ще се изпълни. Инструкции за всяко ниво са дадени под лабиринта.
          Тази средна област е кутията с инструменти и всеки от тези блокове е команда,
          която птицата може да разбере. Празното пространство отдясно се нарича работна
          област и това е мястото, където ние ще изградим нашата програма.
      3:
        image: notes/C4_intro_3.png
        text: Ако плъзнете блок за движение в работно поле и натиснете "Старт", какво
          ще се случи? Птицата се придвижи напред една кутийка. Ако искам птицата
          да направи нещо, след като се е придвижила напред една кутия? Тогава ще
          добавя още един блок в нашата програма.
      4:
        image: notes/C4_intro_4.png
        text: Аз ще използвам "завърти надясно" блок и ще го плъзна под моя блок за
          движение, докато се появи жълта стрелка. Тогава, ще го пусна и двата блока
          ще се съединят заедно. Когато натисна "Старт" отново, птицата ще изпълнява
          командите, които са подредени от първата до последната в нашето работно
          поле.
      5:
        image: notes/C4_intro_5.png
        text: "Ако някога искате да изтриете блок, просто го премахнете от съединените
          и го плъзнете в кошчето. След като натиснете Старт, винаги можете да натиснете
          бутона за нулиране, за да върнете птица обратно към началото. Сега, да хванем
          прасетата!"
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: If I want to draw a rectangle 50 pixels tall and that is twice as wide
          as it is tall, how would I program the computer to do that? Well, I could
          tell the artist to go up fifty, turn right, and then go over 100 and move
          the whole thing twice. But then I'm doing the math for the computer.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers
          are really good at doing math so we should leave it to them whenever possible.
          If I just used a variable called height instead, then I could easily change
          height to fifty and then change my algorithm to tell the artist to go up
          by height, turn right and then go over by height times 2, which gives us
          a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: "Първите групи ще имат за задача да направят план на игра. След това
          те ще търсят модели между всички чудовища в каталога. Когато намерят разлики
          между чудовищата, те ще трябва да ги отделят. Например едно чудовище в каталога
          има vegitas очи и друго е с spritem очи. Но те и двете имат очи, така че
          ние можем да напишем, че чудовището има празни очи."
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: "Здравейте! Аз съм Катлийн Кенеди и съм продуцент на Междузвездни Войни:
          Силата се Пробужда. Днес ще работите с една от нашите звезди, ББ-8, който
          е сферичен дроид. Всичко, което прави и всяко негово движение се контролира
          от софтуер. Компютърните науки оказват влияние във всяка една сфера от маркетинг
          до медицина и филмово производство. Всъщност, хиляди инженери работят заедно,
          за да създадават филми като Силата се Пробужда."
      2:
        image: notes/starwars_intro_2.JPG
        text: "Здравейте, аз съм Рейчъл Роуз, глaвен инженер в отдела за Разработки
          в Ай Ел Ем. Аз ръководя групата за създаване на анимираните ефекти. В Силата
          се Пробужда отговарям за ефектите, които карат героя да извършва движения
          като че ли е наистина от далечно съзвездие."
      3:
        image: notes/starwars_intro_3.JPG
        text: "В следващият час ще създадем наша собствена игра Междузвездни Войни,
          която ще ви научи на основните методи в програмирането. Обикновено програмирането
          представлява текст, но ние ще използваме блокове, за да можем да ги влачим
          и оставяме. Но въпреки това, вие създавате код. След като пробвате основните
          методи с блокове, ще преминем на JavaScript- един от най-известните езици
          за програмиране в интернет."
      4:
        image: notes/starwars_intro_4.JPG
        text: "За начало, ще работим с Рей, който ще програмира ББ-8 да ходи и събира
          скрап. Монитора е разделен на три части. Отляво е игровото пространство,
          където играта се извършва. Инструкциите са написани под него."
      5:
        image: notes/starwars_intro_5.JPG
        text: "Пространството по средата е кутията с инструменти, и всеки блок е команда,
          която ББ-8 може да разбере."
      6:
        image: notes/starwars_intro_6.JPG
        text: "Бялото пространство вдясно е работното поле, където ще създадем играта."
      7:
        image: notes/starwars_intro_7.JPG
        text: "Какво ще стане, ако завлека блока moveLeft(); в работното пространство
          и натисна Старт? ББ-8 ще се премести наляво с една стъпка."
      8:
        image: notes/starwars_intro_8.JPG
        text: "А ако поискам ББ-8 да направи още нещо след блока moveLeft();? Мога
          да добавя друг блок към нашата програма. Ще избера блока moveUp(); и ще
          го завлека под блока moveLeft(); докато очертанията не се появят. Тогава
          ще го пусна и двата блока ще се свържат."
      9:
        image: notes/starwars_intro_9.JPG
        text: "Когато натисна Старт отново, ББ-8 ще изпълни командите отгоре до долу
          от работното пространство. Ако искате да изтриете блок, просто го извадете
          от работното поле и го завлечете обратно в кутията с инструментите."
      10:
        image: notes/starwars_intro_10.JPG
        text: След като натиснете Старт, винаги може да натиснете бутона "стартиране
          отначало", за да накарате ББ-8 да започне отново. Да започваме!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: "Вътре в блока ние изпозваме JavaScript. Това е един от най-използваните
          езици за програмиране. Блоковете са прекрасен начин за начинаещи да навлязат
          в програмирането, а дори някои университети като Харвард и Бъркли започнаха
          да въвеждат Блоково програмиране. Но веднъж научили основите, инженерите
          пишат кода, защото е по- бързо."
      2:
        image: notes/starwars_typing_2.JPG
        text: "Можем да напишем хиляди команди без да търсим и измъкваме от кутията
          с инструментите. Може в началото да сте по бавни в писането, но все пак
          пробвайте."
      3:
        image: notes/starwars_typing_3.JPG
        text: "В горният десен ъгъл на работното пространство се намира бутона, с
          който преминавате от текстово в блоково програмиране."
      4:
        image: notes/starwars_typing_4.JPG
        text: Следващия урок ще започнем в текстови режим. Ще можете да избирате блокове
          или текстови команди. Възможни команди ще се появяват след като започнете
          да пишете, така вместо да изписвате цялата команда ще може да избирате и
          завършите по бързо. В моята работа използвам инструмента "завършване по
          подразбиране" когато пиша код.
      5:
        image: notes/starwars_typing_5.JPG
        text: "Когато пишете код, трябва да сте много внимателни. Нужно е да изписвате
          правилно командите, главните букви, включително скобите и двоеточието. Дори
          незначителни грешки могат да попречат на ББ-8 да разбере кода и няма да
          може да извърши действието."
      6:
        image: notes/starwars_typing_6.JPG
        text: "Когато направите грешка редактора ще я подчертае, така че ще може да
          я поправите."
      7:
        image: notes/starwars_typing_7.JPG
        text: Ако се затрудните, винаги може да започнете отначало с бутона "стартиране
          отначало" и да изберете режим Блокове, като натиснете в горния десен ъгъл.
          Хайде да пробваме! Ако направите грешка не се отчайвайте. Всеки пробва по
          няколко пъти докато го направи правилно.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: "Здравейте, казвам се Шарита Картер. Аз съм главен творчески директор
          в Уолт Дисни, Отдел за Инженерно Моделиране. Отговарям за групата, която
          създава атракциите които нашите гости могат да пробват. Винаги се опитваме
          да подобрим и направим нашите атракции по впечатляващи за гостите ни, а
          технологиите са в основата на това."
      2:
        image: notes/starwars_events_2.JPG
        text: "Поздравления! Вие програмирахте ББ-8. Мисля, че вече сте готови за
          нещо по-сложно. След като научихте основите на програмирането, нека да се
          върнем във времето и направим собствена игра с участието на R2-D2 и C-3PO."
      3:
        image: notes/starwars_events_3.JPG
        text: "За да създадем игра, трябва да научим нещо което всеки програмист използва
          всекидневно: наричат се събития. Събитията казват на програмата да слуша
          или чака нещо да се случи и тогава да изпълни действието."
      4:
        image: notes/starwars_events_4.JPG
        text: "Примери за събития са слушане за щракване с мишката, натискане на бутона
          със стрелка или натискане на екрана."
      5:
        image: notes/starwars_events_5.JPG
        text: "Ще накараме R2-D2 да се премести нагоре и после надолу, за да предаде
          съобщение до пилотите на бунтовниците. Ще използваме Събития, за да го накараме
          да се движи. Това ще се случва, когато играча използва стрелките нагоре/надолу
          или бутоните нагоре/надолу."
      6:
        image: notes/starwars_events_6.JPG
        text: "Използваме whenUp() събитийния блок и ще добавим блок goUp(). Когато
          играчът натисне клавиша със стрелка нагоре кода от блока goUp() ще се извърши.
          Ще направим същото, за да преместим Р2-Д2 надолу."
      7:
        image: notes/starwars_events_7.JPG
        text: "За да постигнем това, ще използваме командата whenUp(). Когато я извлечете
          от кутията с инструменти, ще видите че тя започва и завършва с кръгли скоби
          вместо с двоеточие. Това ни позволява да добавим команди по средата. Когато
          играчът натисне клавиша със стрелката нагоре, тези вмъкнати команди ще се
          изпълнят."
      8:
        image: notes/starwars_events_8.JPG
        text: "Искаме Р2-Д2 да отиде нагоре, за това ще вмъкнем блока goUp(); в командата.
          Ще направим същото, за да накараме Р2-Д2 да отиде надолу."
      9:
        image: notes/starwars_events_9.JPG
        text: "Вместо да пишем кода предварително, можем да направим Р2-Д2 да реагира
          на събитие, свързано с натискане, което ще го движи по монитора. Стъпка,
          по стъпка играта става по интерактивна."
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: "Здравейте, аз съм Алис и отговарям за инженерния отдел в Code.org,
          също работех и върху ръководството, което сега използвате."
      2:
        image: notes/starwars_congrats_2.JPG
        text: "Достигнахте до последното ниво. Поздравления! Вече научихте всичко,
          което трябва, за да направите собствена игра Междузвездни войни. Няма повече
          инструкции и пъзели за решаване. Може да направите собствена игра със собствени
          правила. Още нещо, отключихте нови звукове и команди, с които да подобрите
          играта."
      3:
        image: notes/starwars_congrats_3.JPG
        text: "[students speaking]Значи направихме игра, в която печелите точки като
          вземете пафър прасета. Уловката е, че всеки път когато вземете прасе се
          появява войник от империята. Постепенно целият екран ще се изпълни с прасета
          и като достигнат 10,000 печелите."
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[students speaking] Направихме игра, в която не можете да губите точки
          и всичко, което убиете, ще ви носи точки. В моята програма обърнах бутоните,
          когато натиснете нагоре, вашият герой отива надолу, когато натиснете надясно,
          той отива наляво. Трудно е! Понякога това е предимство, ако сте създателя
          на играта. Правилно ли го разбрах? Уау!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: "След като сте направили играта, изберете сподели, за да я споделите
          с приятели или да я играете на телефон. Забавлявайте се!"
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: "Здравейте! Аз съм Катлийн Кенеди Продуцент на Междузвездни Войни: Силата
          се Пробужда. Днес ще работите с една от нашите звезди, ББ-8, който е сферичен
          дроид. Всичко което прави и всяко негово движение се контролира от софтуер.
          Компютърните науки оказват влияние във всяка една сфера от маркетинг до
          медицина и филмо-производство. Всъщност хиляди Инженери работят заедно за
          да създадават филми като Силата се Пробужда."
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: "Здравейте, Аз съм Рейчъл Роуз Глaвен Инженер в отдела за Разработки
          в Ай Ел Ем, аз ръководя групата за създаване на анимираните ефекти. В Силата
          се Пробужда аз отговарям за ефектите които карат героя да извършва движения
          като че ли е наистина от далечно съзвездие."
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: "В следващият час ще създадем наша собствена игра Междузвездни Войни,
          която ще ви научи на основните концепции в програмирането. Обикновенно програмирането
          представлява текст но ние ще използваме блокове, за да можем да ги влачим
          и оставяме. За начало ще работим с Рей, за да програмираме ББ-8 да върви
          и събира металните остатъци."
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: "Екрана ви е разделен на три части. Вляво е пространството, където кода
          на играта Междузвездни войни ще се извърши. Инструкциите за всяко ниво са
          написани под игровото пространство."
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: "Пространството по средата е кутията с инструменти, и всеки блок е команда,
          която ББ-8 може да разбере."
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: "Бялото пространство вдясно е работното пространство където ще създадем
          кода."
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: "Какво ще стане ако завлечем блока moveLeft(); до работното пространство?
          ББ-8 ще се премести наляво по мрежата."
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: "А ако искам ББ-8 да направи още нещо след като изпълни командата от
          блок moveLeft(); Мога да добавя блок. Ще избера блока moveUp(); и ще го
          завлека под блока moveLeft(); докато не се появят очертанията. Тогава ще
          го пусна и двата ще се споят. ББ-8 ще изпълни комадите по ред отгоре до
          долу."
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: "Ако изкате да изтриете блок, просто го преместете от купчината и го
          завлечете обратно в кутията с инструменти."
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: "След като натиснете Тръгни, винаги може да натиснете бутона върни обратно
          за да накарете ББ-8 да започне отначало. Да започваме!"
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: "Здравейте, казвам се Шарита Картер. Аз съм главен творчески директор
          в Уолт Дисни, Отдел за Инженерно Моделиране. Отговарям за групата, която
          създава атракциите които нашите гости могат да пробват. Винаги се опитваме
          да подобрим и направим нашите атракции по впечатляващи за гостите ни, а
          технологиите са в основата на това."
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: "Поздравления! Вие програмирахте ББ-8. Мисля, че вече сте готови за
          нещо по-сложно. След като научихте основите на програмирането, нека да се
          върнем във времето и направим собствена игра с участието на R2-D2 и C-3PO."
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: "За да създадем игра, трябва да научим нещо което всеки програмист използва
          всекидневно: наричат се събития. Събитията казват на програмата да слуша
          или чака нещо да се случи и тогава да изпълни действието."
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: "Примери за събития са слушане за щракване с мишката, натискане на бутона
          със стрелка или натискане на екрана."
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: "Ще накараме R2-D2 да се премести нагоре и после надолу, за да предаде
          съобщение до пилотите на бунтовниците. Ще използваме Събития, за да го накараме
          да се движи. Това ще се случва, когато играча използва стрелките нагоре/надолу
          или бутоните нагоре/надолу."
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: "Използваме блокът Събитие КогатоНагоре() с добавен блок ОтидиНагоре().
          Когато играчът натисне клавиша със стрелка нагоре кода от блока КогатоНагоре()
          ще се извърши. Ще направим същото за да преместим Р2-Д2 надолу. Обаче, вместо
          да пишем кода предварително, да направим Р2-Д2 да реагира на бутона натисни
          събития който го движи из екрана."
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: "Стъпка по стъпка играта става по-интерактивна."
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: "Здравейте, аз съм Алис и отговарям за инженерния отдел в Code.org,
          също работех и върху ръководството, което сега използвате."
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: "Достигнахте до последното ниво. Поздравления! Вече научихте всичко,
          което трябва, за да направите собствена игра Междузвездни войни. Няма повече
          инструкции и пъзели за решаване. Може да направите собствена игра със собствени
          правила. Още нещо, отключихте нови звукове и команди, с които да подобрите
          играта."
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: "[students speaking]Значи направихме игра, в която печелите точки като
          вземете пафър прасета. Уловката е, че всеки път когато вземете прасе се
          появява войник от империята. Постепенно целият екран ще се изпълни с прасета
          и като достигнат 10,000 печелите."
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[students speaking] Направихме игра, в която не можете да губите точки
          и всичко, което убиете, ще ви носи точки. В моята програма обърнах бутоните,
          когато натиснете нагоре, вашият герой отива надолу, когато натиснете надясно,
          той отива наляво. Трудно е! Понякога това е предимство, ако сте създателя
          на играта. Правилно ли го разбрах? Уау!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: "След като сте направили играта, изберете сподели, за да я споделите
          с приятели или да я играете на телефон. Забавлявайте се!"
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: "Казвам се Йенс Бергенстен, но съм по известен като Джеб. Аз съм главният
          разработчик в Minecraft, в студио Моянг в Стокхолм. Мисля, че бях единадесет
          или дванадесет годишен, когато започнах да програмирам защото изках да създавам
          игри. Един от приятелите на моя баща ми каза, че трябва да се науча да програмирам
          ако искам да правя игри. Така започнах. Обичам да проектирам структурата
          на играта. Това е нещото, което харесвам в Minecraft."
      2:
        image: notes/mc_intro_2.JPG
        text: "В следващият час ще се запознаете с основите на компютърните науки
          като програмирате Алекс или Стив да преминат през симулираната част от света
          на Minecraft."
      3:
        image: notes/mc_intro_3.JPG
        text: "Програмирането представлява текст, но ние ще използваме Blockly. Това
          е система от блокове, които може да влачите и пускате, за да напишете програмата.
          В действителност се използва Javascript код."
      4:
        image: notes/mc_intro_4.JPG
        text: "Концепциите, които ще научите, са същите които програмистите използват
          всеки ден. Те са в основата на програмирането. В Моянг използваме същите
          концепции, за да накараме Minecraft да проработи."
      5:
        image: notes/mc_intro_5.JPG
        text: "Преди да започнете, трябва да изберете герой. Аз ще избера Алекс. Хайде
          да напишем код за програма, която ще ѝ помогне да се мести по екрана."
      6:
        image: notes/mc_intro_6.JPG
        text: "Вашият екран е разделен на три основни части. Вляво е Minecraft игровото
          пространство, където вашата програма ще се изпълни. Инструкции за всяко
          ниво са дадени под него."
      7:
        image: notes/mc_intro_7.JPG
        text: "Тази средна област е кутията с инструменти, а всеки от тези блокове
          е команда, която насочва действията на Алекс."
      8:
        image: notes/mc_intro_8.JPG
        text: "Бялото пространство вдясно, се нарича работно пространство и това е
          мястото, където ние ще изградим нашата програма."
      9:
        image: notes/mc_intro_9.JPG
        text: "Какво ще стане ако завлечете блока moveForward(); в работното пространство
          и после натиснете Старт? Алекс ще се премести напред с едно място."
      10:
        image: notes/mc_intro_10.JPG
        text: "А ако искаме тя да направи още нещо след като се премести напред? Трябва
          да добавим друг блок в програмата. Ще избера блока turnRight(); и ще го
          плъзна под блока moveForward(); докато не се появят оранжеви линии. Тогава
          ще го пусна и двата блока ще се споят. Като натисна Старт, Алекс ще изпълни
          командите, които са съединени, отгоре до долу."
      11:
        image: notes/mc_intro_11.JPG
        text: "Ако някога искате да изтриете блок, просто го плъзнете обратно към
          кутията с инструменти."
      12:
        image: notes/mc_intro_12.JPG
        text: "За да отмените промените и отидете обратно в началото на нивото, използвайте
          бутона Стартиране отначало в горния десен ъгъл. Още нещо: виждате ли малкият
          триъгълник на блока Завърти? Всеки път като видите триъгълник, означава
          че може да изберете друга опция. Хайде да започваме да кодираме!"
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: "Аз съм Лидия Уинтерс, Директор в Моянг, където направихме игра, наречена
          Minecraft."
      2:
        image: notes/mc_repeat_2.JPG
        text: "Любимото ми нещо в Minecraft е опознаването. Обичам приключенията,
          защото мога да намеря нещо. Аз не съм програмист и съм много развълнувана
          да чета уроците на Minecraft и действително да науча някои програмни кодове."
      3:
        image: notes/mc_repeat_3.JPG
        text: "Последното ниво се нуждае от много moveForward(); блокове. Ще бъде
          по-лесно, ако ние просто може да кажем на компютъра да изпълнява moveForward();
          командата четири или пет пъти. За щастие, компютрите са наистина добри в
          повтарянето на команди чрез цикли."
      4:
        image: notes/mc_repeat_4.JPG
        text: "Когато изграждаме Minecraft, ние използваме цикли за повторение, за
          да поставим всички първоначални материали за създаване на нов свят. Това
          са хиляди, хиляди блокове. Ние също използваме циклите по малко начини,
          например да накараме краката на Alex да се движат назад и напред, когато
          тя ходи. Циклите за повторение са мощна част от програмирането."
      5:
        image: notes/mc_repeat_5.JPG
        text: "Спуска се нощ, така че в следващите няколко нива, ние ще си построим
          къща, за да сме в безопасност. Ние ще използваме блок за повторение, за
          да направим това много по- лесно."
      6:
        image: notes/mc_repeat_6.JPG
        text: "За да изградим стената на къщата ни, ще кажем на Alex да постави дъски
          четири пъти. Това става като се постави тази команда в блок за повторение,
          който да извърши действието многократно. Сега ние ще кликнем на блока за
          повторение и ще изберем колко пъти искаме той да извършва това действие.
          Сега, нека построим къщата ни преди да падне нощта! Забавлявайте се."
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: Сега ще научите за "ако" отчетите. Те са основна част от обучението
          по програмиране. Те помагат компютърът да взима решения.
      2:
        image: notes/mc_if_statements_2.JPG
        text: Всички компютри използват "ако" отчети, включително моя телефон. Например,
          когато аз отключвам телефона се изпълнява код, който казва, че ако въведете
          паролата правилно, тогава ще се отключи телефона. В противен случай ще се
          покаже съобщение за грешка.
      3:
        image: notes/mc_if_statements_3.JPG
        text: Можете да използвате "ако" отчети в кода си, за да накарате Стив и Алис
          да реагират на това, което виждат в света. Например, ако има камък пред
          тях, да могат да се завъртят наляво. Или да завият надясно, ако има опасност
          да се блъснат в дърво.
      4:
        image: notes/mc_if_statements_4.JPG
        text: "В този случай, ние не искаме да паднем в лавата. Лесно е да проверяваме
          за лава. Можем да го видим на екрана. Но, ако лавата е скрита под камък?"
      5:
        image: notes/mc_if_statements_5.JPG
        text: След като изкопаем камък, ние ще трябва да проверим дали има някаква
          лава на това място, преди да тръгнем напред. Ако има лава там, ние трябва
          да поставим камък пред нашия герой, преди да върви напред. По този начин,
          можем спокойно да преминем. Време е за повече добив! И не забравяйте да
          използвате "ако", за да следите пътя си.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: "Поздравления! Ти научи основните градивни елементи на компютърните
          науки."
      2:
        image: notes/mc_congrats_share_2.JPG
        text: "Сега можете да използвате тези блокове, за да изградите своя собствена
          творба. Няма повече инструкции и пъзели за решаване. Можете да създадете
          всичко, което искате. Вие решавате."
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[ученически разговор] За да придобиете реална представа. Остригване.
          Направих L от факли. Направих А от брезови дъски. Работи, работи. Ние изградихме
          къща от вълна!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Когато приключите, изберете "сподели", за да получите връзка за споделяне
          с вашите приятели. Забавлявайте се!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: "Поздравления! Ти научи основните градивни елементи на компютърните
          науки."
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: "Сега можете да използвате тези блокове, за да изградите своя собствена
          творба. Няма повече инструкции и пъзели за решаване. Можете да създадете
          всичко, което искате. Вие решавате."
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[ученически разговор] За да придобиете реална представа. Остригване.
          Направих L от факли. Направих А от брезови дъски. Работи, работи. Ние изградихме
          къща от вълна!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: "Можете да създадете каквото си искате. Забавлявайте се!"
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/gumball_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/gumball_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: "Бялото пространство вдясно, се нарича работно пространство и това е
          мястото, където ние ще изградим нашата програма."
      7:
        image: notes/gumball_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/gumball_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/iceage_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/iceage_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: "Бялото пространство вдясно, се нарича работно пространство и това е
          мястото, където ние ще изградим нашата програма."
      7:
        image: notes/iceage_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/iceage_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    mc_2016_intro:
      1:
        image: notes/mc_2016_intro_1.jpg
        text: "Здравейте моето име е Йенс и съм главен дизайнер на Minecraft. В следващия
          час вие ще направите своя собствена Minecraft игра. Това изглежда като Minecraft,
          но светът е замръзнал. Овцете не се движат, пилетата не снасят яйца, а зомбитата
          са неподвижни. Вие трябва да добавите код, за да заработи Minecraft света."
      2:
        image: notes/mc_2016_intro_2.jpg
        text: "Моето име е Мелиса. Аз изследвам потребителите на Minecraft. Това,
          от което наистина се интересувам  е как хората мислят и си взаимодействат
          с технологиите. Това е добър начин да обединя компютърното инженерство с
          психологията: как хората мислят и се държат."
      3:
        image: notes/mc_2016_intro_3.jpg
        text: "Както виждате, вашия екран е разделен на три основни части. 1) вляво
          е игралното поле на Minecraft. Сега светът е замръзнал, но ние ще поправим
          това с код."
      4:
        image: notes/mc_2016_intro_4.jpg
        text: 2) тази средна област е кутията с инструменти. Всички тези блокове са
          команди, които пилетата, овцете и другите същества в Minecraft разбират.
      5:
        image: notes/mc_2016_intro_5.jpg
        text: 3) The space on the right is called the workspace and this is where
          we'll build our program.
      6:
        image: notes/mc_2016_intro_6.jpg
        text: If you forget what to do, the instructions for each level are at the
          top.
      7:
        image: notes/mc_2016_intro_7.jpg
        text: To start off, we're going to program a chicken. Let's drag the "move
          forward" command to the workspace. When I hit "Run" the chicken moves forward
          one step. To go further, I'll drag another "move forward" block underneath
          the first "move forward" block until the highlight appears. Then I'll drop
          it and the two blocks snap together. If I hit "Run" again, the chicken walks
          two steps.
      8:
        image: notes/mc_2016_intro_8.jpg
        text: If you ever want to delete a block, just remove it from the stack and
          drag it back to the toolbox.
      9:
        image: notes/mc_2016_intro_9.jpg
        text: След като сте натиснали "Старт" и нещо в кода не е правилно, винаги
          можете да натиснете бутона "стартиране отначало", за да рестартирате играта.
          Сега е ваш ред да направите своя собствена версия на Minecraft. Забавлявайте
          се!
    mc_2016_loops:
      1:
        image: notes/mc_2016_loops_1.jpg
        text: "Здравейте аз съм Лиза. Софтуерен разработчик съм в Minecraft. Работя
          върху някои от животните и враговете в играта. Едно от животните, върху
          които съм работила е оцелота. Работила съм върху тази част, където можете
          да го нахраните с риба, да го укротите и опитомите."
      2:
        image: notes/mc_2016_loops_2.jpg
        text: "Като хора, на нас ни е наистина скучно ако трябва да правим едно и
          също нещо отново и отново и отново и отново. Но готиното при компютрите
          е, че те могат да направят същото нещо милиони или дори милиарди пъти, без
          да се отегчават. Тези повторения се наричат цикли и всяко създание в Minecraft
          ги използва."
      3:
        image: notes/mc_2016_loops_3.jpg
        text: По-рано трябваше да задвижим пилето по екрана, но след това то сприраше.
          В Minecraft пилетата се скитат наоколо постоянно. Нека използваме "завинаги
          прави" цикъл от нашия инструментариум, за да накараме нашите пилета дъ се
          движат също непрекъснато. Силата на циклите ще ви спести тонове от време
          и ще ви отвори различни възможности когато създавате своя версия на Minecraft.
    mc_2016_events:
      1:
        image: notes/mc_2016_events_1.jpg
        text: On this next level, you can pick to be either Steve or Alex. Press the
          arrow buttons on your keyboard to move up, down, left, and right. Now you
          can move around a level wherever you want. To use a creature, just walk
          towards it, turn to face it, and press the spacebar.
      2:
        image: notes/mc_2016_events_2.jpg
        text: If you're using a touch screen, swipe up, down, left, and right to move
          around. Then tap the game to use the item in front of you.
      3:
        image: notes/mc_2016_events_3.jpg
        text: "Но какво се случва, когато го използвате? В Minecraft овцете дават
          вълна, когато ги срижете, кравите бягат, когато ги ударите, а шиповете на
          пълзящите ръстения експлодират, когато сте близо до тях. Тези реакции се
          случват благодарение на неща, наречени събития. Те казват на програмата
          да слуша или да чака да се случи нещо. И когато това стане- извършва действие."
      4:
        image: notes/mc_2016_events_4.jpg
        text: So far, you've used one event. Code you put in the "when spawned" slot
          runs when your creature is created or when the game starts. Over the next
          few levels you'll have new slots for events such as "when touched" that
          runs when you touch the creature, or "when used" for when you use the creature.
          Or, if you want your zombie to disappear when the sun comes up, put that
          in the "when day" slot
    mc_2016_spawn:
      1:
        image: notes/mc_2016_spawn_1.jpg
        text: In games, spawn means the same thing as create. In this level, let's
          make zombies spawn when the sun goes down. To do this, we'll use the "when
          night" block.
      2:
        image: notes/mc_2016_spawn_2.jpg
        text: Since we want the zombies to spawn at night we'll add the "spawn zombie"
          block under the "when night" block. As soon as they're spawned, each zombie
          will run the code that you put in their "when spawned" event slot. Have
          fun spawning zombies!
    mc_2016_congrats:
      1:
        image: notes/mc_2016_congrats_1.jpg
        text: "Поздравления! Вие сте се научили да използвате прогламни команди, за
          да вдъхнете живот на Minecraft света. Сега сте разработчик. Вие сте отключили
          всички команди и всички същества. Можете да изберете какво ще се случва."
      2:
        image: notes/mc_2016_congrats_2.jpg
        text: "Когато приключите с правенето на вашата игра, споделете я и ще получите
          връзка, която да дадете на вашите приятели или да играете на вашия телефон.
          Забавлявайте се! Очаквам с нетърпение вашите версии на Minecraft."
    applab_intro_welcome:
      1:
        image: notes/applab_intro_welcome_1.png
        text: My name is Mei'lani. I'm an intern at code.org and I'm also a computer
          science student. I like computer science because it's really creative. I
          get to be the problem solver. I get to make everything function how I want
          it to. But I also get to be the designer. I get to be the artist and choose
          everything on the creative side of it.
      2:
        image: notes/applab_intro_welcome_2.png
        text: Making your own apps is easy with App Lab! Whether you're new to coding
          or have some experience. App Lab is a great tool for building new apps and
          sharing them with your friends.
      3:
        image: notes/applab_intro_welcome_3.png
        text: This is a App Lab. On the left side is your app. On the right side is
          the code that will make it run. You build your program by dragging in blocks
          from the toolbox. To start you'll just have one block called 'setProperty'.
      4:
        image: notes/applab_intro_welcome_4.png
        text: The set property block changes the look of the elements on your screen.
          Like the buttons, labels, or even the screen itself. First you need to decide
          which element you want to change. If you hover over an element in your app
          you can see the name or ID here. Then go select that ID from the first drop
          down.
      5:
        image: notes/applab_intro_welcome_5.png
        text: Elements have lots of properties you can change like their text color,
          background color or font size. You can see the full list and choose which
          property you want to change in the second drop down.
      6:
        image: notes/applab_intro_welcome_6.png
        text: The last drop down is where you'll write the value you want to use value
          you want to use. The block will make a suggestion for you. But you can always
          type in different colors or numbers yourself.
      7:
        image: notes/applab_intro_welcome_7.png
        text: Once you're done, the block reads a bit like a sentence:'Set button1's
          background color to green.' Hit run to see the changes you're building in
          code. If you reset you can drag in more blocks to change other things about
          your app. Like the text!
      8:
        image: notes/applab_intro_welcome_8.png
        text: For this tutorial we'll be working in block mode but App Lab also supports
          working in text.
      9:
        image: notes/applab_intro_welcome_9.png
        text: Either way you'll be programming in JavaScript, the language of the
          web. Each level has a goal, instructions and an image of what you're aiming
          to create.
      10:
        image: notes/applab_intro_welcome_10.png
        text: If you're ever stuck, click on this picture and it will show you exactly
          how to complete the level. But see if you can do it on your own first.
      11:
        image: notes/applab_intro_welcome_11.png
        text: Once you've completed the goal for this level click Finish to move on.
          That's all there is to it! Hit the orange "continue" button to go to the
          next level and start your adventure with an App Lab!
    applab_intro_events:
      1:
        image: notes/applab_intro_events_1.png
        text: Apps are really cool because it's kind of like starting your own business
          I mean, you get to design everything from the ground up, you get to manage
          everything, and you're the owner of this piece of work that you just created
          with code.
      2:
        image: notes/applab_intro_events_2.png
        text: Now that you can change the look of your app let's make it interactive
          by responding to events! Events are user actions like clicking a button,
          scrolling through a menu, or hovering over a picture. Interactive apps need
          ways to respond to events, like playing a sound when I click this button.
          To do this in App Lab you need to use a new block called 'onEvent'.
      3:
        image: notes/applab_intro_events_3.png
        text: This program sets the screen to blue. I want the screen to turn green
          when I click this button. First I'll need to drag in an onEvent block. By
          hovering I know the button's ID is "bigButton" so I'll select that in the
          first drop-down.
      4:
        image: notes/applab_intro_events_4.png
        text: Next I'll choose the type of event. There's lots of options you can
          pick from but right now I'll leave it as a regular old click.
      5:
        image: notes/applab_intro_events_5.png
        text: 'Finally I''ll add code inside the on event that will change the background
          color of the screen. You can read this block like a sentence: "On the event
          that the button is clicked run all this code."'
      6:
        image: notes/applab_intro_events_6.png
        text: Let's test it. Blocks outside an onEvent still run right away so the
          screen starts blue.
      7:
        image: notes/applab_intro_events_7.png
        text: And when I click the big button the code inside my onEvent runs and
          my screen turns green.
      8:
        image: notes/applab_intro_events_8.png
        text: If you want to change more things after the event, like the text on
          the screen just add more code to the onEvent
      9:
        image: notes/applab_intro_events_9.png
        text: To make your program respond to more events add more onEvent blocks.
          Just make sure not to put them inside of each other. Now it's time to try
          it out for yourself. Have fun!
    applab_intro_sounds:
      1:
        image: notes/applab_intro_sounds_1.png
        text: Next you'll learn about adding images and sounds to your app. Let's
          start by checking out the sound options.
      2:
        image: notes/applab_intro_sounds_2.png
        text: In the tool box you'll find a new block called "playSound". Drag it
          into the workspace. You can pick a sound to play by clicking the drop-down
          then clicking "Choose".
      3:
        image: notes/applab_intro_sounds_3.png
        text: From here you can either upload a sound file from your computer, or
          search for a sound from the sound library. The sound library has lots of
          different categories like instruments, background music or animals.
      4:
        image: notes/applab_intro_sounds_4.png
        text: Once you've got the sound you want, click "Choose". When this block
          runs, it will play the sound you chose.
      5:
        image: notes/applab_intro_sounds_5.png
        text: To add images to your elements you can just use the setProperty block.
          Select the image property in the second drop-down
      6:
        image: notes/applab_intro_sounds_6.png
        text: Then select "Choose" from the third drop down.
      7:
        image: notes/applab_intro_sounds_7.png
        text: From here you can upload an image from your computer or you can look
          through a huge library of icons in the icon library.
      8:
        image: notes/applab_intro_sounds_8.png
        text: Back in code mode you can use the "setProperty" block to change the
          icon color of your icon. Once you've picked what image your icon to use
          click "Run" to see how it looks.
      9:
        image: notes/applab_intro_sounds_9.png
        text: That's all there is to it! Now you can start adding images and sounds
          to make your apps even more fun and dynamic.
    applab_intro_designmode:
      1:
        image: notes/applab_intro_designmode_1.png
        text: To build your own apps you're going to need to start designing screens
          and elements from scratch. App Lab makes this easy to do with Design Mode.
      2:
        image: notes/applab_intro_designmode_2.png
        text: Use the switch on top of your app to go into Design Mode.
      3:
        image: notes/applab_intro_designmode_3.png
        text: You can add new elements by dragging them onto the screen. You can move
          them around to different locations and change their size by dragging the
          bottom right corner.
      4:
        image: notes/applab_intro_designmode_4.png
        text: To change an element's properties use the controls on the right. For
          example, it's really easy to change this button's text, color, and font
          size.
      5:
        image: notes/applab_intro_designmode_5.png
        text: When you add a new element to your screen it'll get a generic ID like
          button1. It's a good idea to change this button's ID to something more meaningful
          like "rightButton". So that you'll know which one it is when you go to the
          program.
      6:
        image: notes/applab_intro_designmode_6.png
        text: If you add an element to your app by mistake, just drag it out or hit
          the delete.
      7:
        image: notes/applab_intro_designmode_7.png
        text: You can add entirely new screens to your app by dragging in a screen
          element
      8:
        image: notes/applab_intro_designmode_8.png
        text: From the drop-down at the top you can quickly switch back and forth
          between the screens you create.
      9:
        image: notes/applab_intro_designmode_9.png
        text: Inside your app, you'll need a way to switch between all of these screens,
          so the setScreen block has been added to the toolbox. Use "setScreen" inside
          the "onEvent" block to change screens at the click of a button.
      10:
        image: notes/applab_intro_designmode_10.png
        text: In the next few levels you'll be working on a single project. First
          you'll add a button then you'll add a new screen and finally you'll write
          code so that the button switches to the new screen.
    applab_intro_share:
      1:
        image: notes/applab_intro_share_1.png
        text: Now that you've learned some of the basics of App Lab like adding buttons,
          sounds, images, text and new screens you can make all sorts of apps.
      2:
        image: notes/applab_intro_share_2.png
        text: In the next level you'll find the app you just finished building. With
          a little creativity, you can turn this into a personality quiz for your
          friends, a greeting card that you can share with your family or a choose-your-own-adventure
          game. All of these apps are just a combination of the skills you've already
          learned, and I bet you can come up with even more.
      3:
        image: notes/applab_intro_share_3.png
        text: Once you're done with your app you can easily send it to your phone
          to see how it looks. Just click "Share" and enter your phone number here.
      4:
        image: notes/applab_intro_share_4.png
        text: You'll receive a text message that'll let you open up your app instantly.
      5:
        image: notes/applab_intro_share_5.png
        text: You can also share a link to your app over social media or post it to
          the code.org public gallery for other people to play and share.
      6:
        image: notes/applab_intro_share_6.png
        text: You've just scratched the surface of what App Lab can do. Full App Lab
          features more advanced user interactions, new screen elements and even a
          built-in database so you can quickly build full featured apps. At "code.org/applab"
          you'll find the full tool and lots of ideas if you want to keep going.
      7:
        image: notes/applab_intro_share_7.png
        text: Thanks for coming along the ride. Now go build and share your first
          app, and keep on building apps with App Lab!
    mc_2017_agent_intro:
      1:
        image: notes/mc_2017_agent_intro_1.png
        text: 'Stacy: Stampy, Lizzy, Preston - thank you for coming with me. What
          I want to show you is just over this mesa plateau. I think you''re going
          to love it!'
      2:
        image: notes/mc_2017_agent_intro_2.png
        text: Wait a minute - there's a hole in the track! (screaming)
      3:
        image: notes/mc_2017_agent_intro_3.png
        text: 'Is everyone okay? Stampy: Ah, I see the problem. Look! There was a
          hole in the track. Stacy: Really, Stampy? Lizzy: Maybe we should gather
          blocks to fix it. Preston: Let''s make it a race. First one back to the
          top wins. Stacy: Ok, on your mark, get set, GO! Ok, I''m just gonna gather
          some of this terracotta. Wait. Guys, I can''t mine! Preston: Same. Lizzy:
          I can''t either. Stacy: Ok, that is really strange. Stampy, can you mine?
          Stampy: I can''t mine! Stacy: Ok, everyone stay calm. Stampy: Is the game
          broken? Stacy: If it is, how do we fix it? Lizzy: I don''t know. Stampy:
          Does anyone know how to write Minecraft code?'
      4:
        image: notes/mc_2017_agent_intro_4.png
        text: "(poof) Preston: What is that? Stampy: I've never seen one of these
          before. Lizzy: It's so adorable! Stacy: Is it...is it tameable? Preston:
          Okay, what is going on? Someone needs to go back to the real world and fix
          this.  All: Not it! Stacy: Not i- (Sigh.) Ok, I'll go."
      5:
        image: notes/mc_2017_agent_intro_5.png
        text: Oh, okay, hey, so I'm in the real world now. I'm going to go try to
          find the Minecraft offices.
      6:
        image: notes/mc_2017_agent_intro_6.png
        text: But, I'm going to need your help. Start doing the tutorial, start learning
          how to code, and I'll catch up with you guys after a few levels, okay? Wish
          me luck! I think it's this way. Ow! Cactus! I'm okay!
      7:
        image: notes/mc_2017_agent_intro_7.png
        text: To complete the Hour of Code challenge, you'll need to write code to
          program the agent. You'll work together with The Agent to clear any obstacles
          in your path, so you can pick up the items you'll need for your journey.
          Only the Agent can place and break blocks, and only you can collect items.
          Your screen is split into three main parts. On the left is Minecraft.
      8:
        image: notes/mc_2017_agent_intro_8.png
        text: The middle area is the toolbox with commands that the Agent can understand.
      9:
        image: notes/mc_2017_agent_intro_9.png
        text: And on the right, is the workspace. That's where you stack the commands
          to build your program to control the Agent.
      10:
        image: notes/mc_2017_agent_intro_10.png
        text: The Agent can walk, turn, and activate pressure plates. It can also
          destroy blocks and place blocks. When it places the block like these minecart
          rails, it places it underneath itself.
      11:
        image: notes/mc_2017_agent_intro_11.png
        text: If you forget what to do, the instructions for each level are at the
          top.
      12:
        image: notes/mc_2017_agent_intro_12.png
        text: If you want to try again, you can hit the blue reset button to reset
          everything to where it started. And if you need to delete a block of code,
          drag it from your workspace to the toolbox. Remember to hit run to get the
          Agent moving. Okay, go ahead and try out the first few levels. Good luck!
    mc_2017_repeat:
      1:
        image: notes/mc_2017_repeat_1.png
        text: 'Stampy: I wonder what Stacy is up to?'
      2:
        image: notes/mc_2017_repeat_2.png
        text: 'Stacy: Woah, I think I''m in the right place. This is amazing!'
      3:
        image: notes/mc_2017_repeat_3.png
        text: I feel like I'm back in Minecraft! Hello. How are you? Hello?
      4:
        image: notes/mc_2017_repeat_4.png
        text: 'Oh, there''s a creeper. You don''t do anything, do you? Katie: Stacy?
          Stacy:Hi, Katie? Katie: Yes, welcome to Minecraft!'
      5:
        image: notes/mc_2017_repeat_5.png
        text: 'Stacy: This is amazing. So you work here every day as a developer,
          right? Katie: Yeah, it''s pretty awesome. I''m a developer on the Minecraft
          marketplace team. Stacy: How many coding languages do you know? Katie: In
          my career I''ve probably worked with over a dozen. Stacy: A dozen? Katie:
          Yeah. Stacy: So now, you wouldn''t happen to know anything about this little
          golem guy that calls himself the Agent? Katie: We use the Agent to do things
          that Steve or Alex can''t, like go across lava. Stacy: Well, I want to learn
          how to code, and they want to learn how to code, so what is one of the first
          things that you need to know when you''re learning?'
      6:
        image: notes/mc_2017_repeat_6.png
        text: 'Katie: Well, you need to learn how to use loops. Loops are things that
          developers write to give commands to a computer that can be run over and
          over again. Stacy: Got it, so I think there''s actually some of that coming
          up in the levels ahead, so go ahead and give loops a try.'
      7:
        image: notes/mc_2017_repeat_7.png
        text: In the next level, you can use a loop to move the Agent along the path.
          Drag the repeat block into the workspace and place the move forward block
          inside the repeat block. This tells the computer to do the same thing many
          times in a row without having to drag a whole bunch of blocks into the workspace.
          You can choose how many times to repeat by putting a number in the repeat
          block.
      8:
        image: notes/mc_2017_repeat_8.png
        text: You can put turns and multiple commands in the repeat block too, but
          for now try using a repeat to move the Agent forward a few steps. Remember,
          if you get stuck on a puzzle you can always hit the blue reset button and
          try again.
      9:
        image: notes/mc_2017_repeat_9.png
        text: 'If you are thinking about having a cool job like Katie''s, go ahead
          and click the show code button when you finish every level. That''s going
          to actually show you the Javascript code that someone like Katie uses when
          she''s actually programming Minecraft. Katie: Yeah, good luck everyone!'
    mc_2017_functions:
      1:
        image: notes/mc_2017_functions_1.png
        text: 'Preston: I''m not trying to brag, but I''m pretty good at parkour.
          Lizzy: Let''s sleep so it''s day when Stacy comes back.'
      2:
        image: notes/mc_2017_functions_2.png
        text: 'Stacy: Ok guys, I am back from the Minecraft offices, and I think I
          know how to solve the problem I''m having in my game. I think I can use
          a function. Let me just open this.'
      3:
        image: notes/mc_2017_functions_3.png
        text: So a function is a specific set of instructions to accomplish a certain
          task, kind of like a recipe. In the next few levels, you'll have access
          to functions that you can use to solve the puzzles.
      4:
        image: notes/mc_2017_functions_4.png
        text: Look at the code in the function when it's in the workspace to see what
          it does.
      5:
        image: notes/mc_2017_functions_5.png
        text: Then, find the block with that name in the toolbox and drag it from
          the toolbox to the when run block.
      6:
        image: notes/mc_2017_functions_6.png
        text: Remember, you can use the same function every time you need to run the
          same set of instructions to do something, like build a bridge. Good luck,
          I know you can do it!
    mc_2017_congratulations:
      1:
        image: notes/mc_2017_congratulations_1.png
        text: 'Preston: Congratulations!'
      2:
        image: notes/mc_2017_congratulations_2.png
        text: 'Lizzy: Congratulations!'
      3:
        image: notes/mc_2017_congratulations_3.png
        text: 'Stampy: Congratulations, you did it!'
      4:
        image: notes/mc_2017_congratulations_4.png
        text: 'Stacy: Congratulations guys, you totally rocked that! And now that
          you''ve completed the Hour of Code, you can start coding in Minecraft. You''ve
          learned about loops, functions, and what a software Agent does.'
      5:
        image: notes/mc_2017_congratulations_5.png
        text: Now, it's time for the free play level, where you are the developer.
          Use any remaining time to write your own functions to explore, mine, and
          build.
      6:
        image: notes/mc_2017_congratulations_6.png
        text: 'You can take the code that you write in this level into your Minecraft
          world on Minecraft: Education Edition. Just click ''Finish'' and follow
          the instructions for getting the link to use in your world. to continue
          coding with the Agent. Have fun, and good job!'
      7:
        image: notes/mc_2017_congratulations_7.png
        text: 'Stacy: And I''m back! Okay, you guys, this is the Agent! Let me show
          you what it can do. Look, it''s doing it! I told it to build a staircase
          out of these terra cotta blocks, now we can just use this to get out of
          here. And you guys, it''s not just staircases. I can tell the Agent to do
          anything I want, and it will do it for me.'
      8:
        image: notes/mc_2017_congratulations_8.png
        text: 'Stampy: How did you do that? Stacy: It was easy, actually. I just used
          code!'
    csd_concept_how_computers_work:
      1:
        image: notes/csd_concept_how_computers_work_1.png
        text: 'Everywhere you look, computers are changing the world. Whether they''re
          on our desktops, in our homes, our pockets, or just about anywhere else.
          But while most of us use this revolutionary technology daily, we don''t
          often ask: "How do computers work?" In this series, you''re going to learn
          how computers really work, starting with what makes a computer a computer.
          Then, you''ll look at how information is represented inside the computer
          using tiny electrical signals going on and off at mind-boggling speeds.'
      2:
        image: notes/csd_concept_how_computers_work_2.png
        text: After that, you'll learn how computers use circuits to do everything
          from simple math to simulating entire virtual worlds. Next, you'll zoom
          out and look at the different parts of a computer that actually input, output,
          and store all that information. Finally, you'll take a look at what code
          actually is and how software controls hardware. So whether you're just curious
          about the devices you use every day or you want to design the innovations
          of the future, the first step is learning how computers work.
    csd_concept_computer:
      1:
        image: notes/csd_concept_computer_1.png
        text: My name is May-Li Khoe and I'm a designer and an inventor. So some of
          the things I've designed have been at Apple, and now I design products for
          kids to use so that they can have an easier time in school. My other jobs
          include DJ-ing and dancing.
      2:
        image: notes/csd_concept_computer_2.png
        text: Computers are everywhere! They're in people's pockets, they're in people's
          cars, people have them on their wrists. They might be in your backpack right
          now. But what makes a computer a computer? What does make a computer a computer
          anyway? And how does it even work?
      3:
        image: notes/csd_concept_computer_3.png
        text: Hi I'm Nat! I was one of the original designers of the Xbox. I've been
          working with computers since I was maybe seven years old and now I work
          on virtual reality. As humans, we've always built tools to help us solve
          problems. Tools like a wheelbarrow, a hammer, or a printing press, or a
          tractor-trailer.
      4:
        image: notes/csd_concept_computer_4.png
        text: All of these inventions helped us with manual work. Over time, people
          began to wonder if a machine could be designed and built to help us with
          the thinking work we do, like solving equations or tracking the stars in
          the sky. Rather than moving or manipulating physical things like dirt and
          stone, these machines would need to be designed to manipulate information.
          As the pioneers of computer science explored how to design a thinking machine,
          they realized that it had to perform four different tasks.
      5:
        image: notes/csd_concept_computer_5.png
        text: It would need to take input, store information process it and then output
          the results. Now this might sound simple, but these four things are common
          to all computers. That's what makes a computer a computer.
      6:
        image: notes/csd_concept_computer_6.png
        text: Computers started out as basic calculators, which was already really
          awesome at the time, and they were only manipulating numbers back then.
          But now we can use them to talk to each other, we can use them to play games,
          control robots, and do any crazy thing that you could probably imagine.
          Modern computers look nothing like those clunky old machines but they still
          do these same four things.
      7:
        image: notes/csd_concept_computer_7.png
        text: First, we're going to talk about input. You can tell computers what
          to do with the keyboard, you can tell them what to do with the mouse, the
          microphone, the camera. All these different inputs give a computer information,
          which is then stored in memory.
      8:
        image: notes/csd_concept_computer_8.png
        text: A computer's processor takes information from memory. It manipulates
          it or changes it using an algorithm, which is just a series of commands.
          And then it sends the processed information back to be stored in memory
          again. This continues until the processed information is ready to be output.
      9:
        image: notes/csd_concept_computer_9.png
        text: How a computer outputs information depends on what the computer is designed
          to do. A computer display can show text, photos, videos, or interactive
          games -- even virtual reality! The output of a computer may even include
          signals to control a robot.
      10:
        image: notes/csd_concept_computer_10.png
        text: And who knows what the computers of tomorrow will be like? My hope is
          that you get to help decide what you want the computers of tomorrow to look
          like. But across all computers, regardless of the different types of technology
          they use, they're always doing those same four things. They take in information,
          they store it as data, they process it, and then they output the results.
    csd_concept_binary_data:
      1:
        image: notes/csd_concept_binary_data_1.png
        text: Hi! My name is Limor Fried, and I'm an engineer here at Adafruit Industries.
          And this is where I do engineering and design, and I design circuits for
          fashion and music and technology.
      2:
        image: notes/csd_concept_binary_data_2.png
        text: My name is Federico Gomez Suarez, and I'm a software developer with
          Microsoft Hack for Good. And I look into using technology to help us solve
          some of the big social problems of our times.
      3:
        image: notes/csd_concept_binary_data_3.png
        text: You may have heard that computers work on ones and zeros. But almost
          nobody today actually deals directly with these ones and zeros. But ones
          and zeroes do play a big role in how computers work on the inside.
      4:
        image: notes/csd_concept_binary_data_4.png
        text: Inside a computer are electric wires and circuits that carry all the
          information in a computer. How do you store or represent information using
          electricity?
      5:
        image: notes/csd_concept_binary_data_5.png
        text: Well, if you have a single wire with electricity flowing through it,
          the signal could either be on or off. That's not a lot of choices, but it's
          a really important start. With one wire, we can represent a yes or no, true
          or false, a one or zero, or anything else with only two options. This on/off
          state of a single wire is called a bit, and it's the smallest piece of information
          a computer can store.
      6:
        image: notes/csd_concept_binary_data_6.png
        text: 'If you use more wires you get more bits: more ones and zeros. With
          more bits you can represent more complex information. But to understand
          that, we need to learn about something called the binary number system.'
      7:
        image: notes/csd_concept_binary_data_7.png
        text: 'In the decimal number system, we have ten digits from zero to nine,
          and that''s how we''ve all learned to count. In the binary number system,
          we only have two digits: zero and one. With these two digits, we can count
          up to any number.'
      8:
        image: notes/csd_concept_binary_data_8.png
        text: Here's how this works. In a decimal number system we're all used to,
          each position in a number has a different value. There's a 1 position, the
          10 position, the 100 position, and so on. For example, a 9 in the 100 position
          is a 900. In binary, each position also carries a value. But instead of
          multiplying by 10 each time, we multiply by 2. So there's the 1 position,
          the 2 position, the 4 position, the 8 position, and so on. For example,
          the number 9 in binary is 1001. To calculate the value, we add 1 times 8,
          plus 0 times 4, plus 0 times 2, plus 1 times 1. Almost nobody does this
          math because computers do it for us. What's important is that any number
          can be represented with only ones and zeros, or by a bunch of wires that
          are on or off. The more wires you use, the larger the numbers you can store.
          With 8 wires, you can store numbers between 0 and 255. That's 8 ones. With
          just 32 wires, you can store all the way from 0 to over 4 billion. Using
          the binary number system, you can represent any number you like.
      9:
        image: notes/csd_concept_binary_data_9.png
        text: But what about other types of information? Like text, images, or sound?
          It turns out that all these things can also be represented with numbers.
          Think of all the letters in the alphabet. You could assign a number to each
          letter. A could be 1, B could be 2, and so on. You can then represent any
          word or paragraph as a sequence of numbers. And as we saw, these numbers
          can be stored as on or off electrical signals. Every word you see on every
          webpage or your phone is represented using a system like this.
      10:
        image: notes/csd_concept_binary_data_10.png
        text: Now, let's consider photos, videos, and all the graphics you see on
          a screen.
      11:
        image: notes/csd_concept_binary_data_11.png
        text: All of these images are made out of teeny dots called pixels, and each
          pixel has a color. Each of the colors can be represented with numbers. When
          you consider the typical image has millions of these pixels, and the typical
          video shows 30 images per second now we're talking about a lot of data here.
      12:
        image: notes/csd_concept_binary_data_12.png
        text: Every sound is basically a series of vibrations in the air. Vibrations
          can be represented graphically as a waveform. Any point on this waveform
          can be represented by a number. And this way, any sound can be broken down
          into a series of numbers. If you want higher quality sound, you will pick
          32-bit audio or an 8-bit audio. More bits means a higher range of numbers.
      13:
        image: notes/csd_concept_binary_data_13.png
        text: When you use a computer to write code or make your own app, you're not
          dealing directly with these ones and zeros. But you will be dealing with
          images or sound or video. So if you want to understand how computers work
          on the inside, it all comes down these simple ones and zeros and the electrical
          signals in the circuits behind them.
    csd_concept_circuits_logic:
      1:
        image: notes/csd_concept_circuits_logic_1.png
        text: One of the coolest things I've discovered about circuits is circuitry
          can be an art form like if I have a creative idea, I can get that creative
          idea out using circuits. So if you have ideas, you can use technology to
          make those ideas come to life.
      2:
        image: notes/csd_concept_circuits_logic_2.png
        text: Every input or output of a computer is effectively a type of information,
          which can be represented by on or off electrical signals or ones and zeros.
      3:
        image: notes/csd_concept_circuits_logic_3.png
        text: In order to process the information that comes in as input, and to make
          the information that is output, a computer needs to modify and combine the
          input signals. To do this, a computer uses millions of teeny electronic
          components, which come together to form circuits.
      4:
        image: notes/csd_concept_circuits_logic_4.png
        text: Let's take a closer look at how circuits can modify and process information
          that's represented in ones and zeros. This is an incredibly simple circuit.
          It takes an electrical signal, on or off, and it flips it. So if the signal
          you give it is a 1, the circuit gives you a 0, and if you give the circuit
          a 0, it gives you a 1. The signal that goes in is not the same as the signal
          that comes out, and so we call this circuit NOT.
      5:
        image: notes/csd_concept_circuits_logic_5.png
        text: More complicated circuits can take multiple signals and combine them,
          and give you a different result. In this example, a circuit will take two
          electrical signals, now each one might be a 1 or a 0. If either of the signals
          coming in is a 0, then the result is also a 0. This circuit will only give
          you a 1, if the first signal and the second signal are both a 1, and so
          we call the circuit AND.
      6:
        image: notes/csd_concept_circuits_logic_6.png
        text: There are many small circuits like this that perform simple logical
          calculations. By connecting these circuits together, we can make more complex
          circuits that perform more complex calculations.
      7:
        image: notes/csd_concept_circuits_logic_7.png
        text: For example, you can make a circuit that adds 2 bits together called
          an adder. This circuit takes in 2 individual bits, each one a 1 or a 0,
          and adds them together to calculate the sum. The sum can be 0 plus 0 equals
          0, 0 plus 1 equals 1, or 1 plus 1 equals 2. You need two wires coming out
          because it can take up to two binary digits to represent the sum. Once you
          have a single adder for adding two bits of information, you can put together
          multiples of these adder circuits side-by-side to add together much larger
          numbers.
      8:
        image: notes/csd_concept_circuits_logic_8.png
        text: For example, here's how an 8-bit adder adds the numbers 25 and 50. Each
          number is represented using 8 bits, resulting in 16 different electrical
          signals that go into the circuit. The circuit for an 8-bit adder has lots
          of little adders inside of it, which together, calculate the sum.
      9:
        image: notes/csd_concept_circuits_logic_9.png
        text: Different electrical circuits can perform other simple calculations
          like subtraction or multiplication. In fact, all the information processing
          your computer does is just lots and lots of small simple operations put
          together. Each individual operation done by a computer is so, so simple
          it could be done by a human, but these circuits inside computers are way
          way faster.
      10:
        image: notes/csd_concept_circuits_logic_10.png
        text: Back in the day, these circuits were big and clunky, and an 8-bit adder
          could be as big as a fridge, and it would take minutes for them to perform
          a simple calculation. Today, computer circuits are microscopic in size,
          and way way faster. Why are smaller computers also faster? Well, because
          the smaller the circuit is, the less distance the electrical signal has
          to go. Electricity moves at just about the speed of light, which is why
          modern circuits can perform billions of calculations per second.
      11:
        image: notes/csd_concept_circuits_logic_11.png
        text: So whether you're playing a game, recording a video, or exploring the
          cosmos, everything you could possibly do with technology requires lots of
          information to be processed extremely quickly. Underneath all this complexity
          is just lots of teeny little circuits that turn binary signals into websites,
          videos, music, and games. These circuits can even help us decode DNA to
          diagnose and cure disease. So what would you like to do with all these circuits?
    csd_concept_memory_cpu_input_output:
      1:
        image: notes/csd_concept_memory_cpu_input_output_1.png
        text: Hi, my name is Madison Maxey. I have a company called Loomia, and we
          focus on making smart fabrics for smart clothing and smart soft good products.
          The sky's the limit when it comes to textiles.
      2:
        image: notes/csd_concept_memory_cpu_input_output_2.png
        text: My name is Danielle Applestone, and I'm CEO of Othermachine Company.
          We build a desktop milling machine. A milling machine takes a rotating cutting
          tool and moves it through material to create a 3D object.
      3:
        image: notes/csd_concept_memory_cpu_input_output_3.png
        text: Under the hood, all computers do the same four basic things. They input
          information, store and process the information, and then, output information.
          Each of these things is done by a different part of the computer.
      4:
        image: notes/csd_concept_memory_cpu_input_output_4.png
        text: There are input devices that take input from the outside world and convert
          it into binary information. There is memory to store this information. There's
          a central processing unit or CPU, where all the calculations are done. And,
          finally, there are output devices that take information and convert it into
          a physical output.
      5:
        image: notes/csd_concept_memory_cpu_input_output_5.png
        text: Let's talk about input first. Computers can take many different types
          of input, like the keyboard of a computer, the touchpad of a phone, a camera,
          a microphone, or a GPS. But even the sensors on a car, a thermostat, or
          a drone are also different input devices.
      6:
        image: notes/csd_concept_memory_cpu_input_output_6.png
        text: Now, let's look at a simple example of how input travels through a computer
          and becomes output. When you press a key on your keyboard - let's say the
          letter "B". The keyboard converts the letter to a number. That number is
          sent as binary, ones and zeros, into the computer.
      7:
        image: notes/csd_concept_memory_cpu_input_output_7.png
        text: Starting from this number, the CPU calculates how to display the letter
          "B" pixel by pixel. The CPU requests step-by-step instructions from memory,
          which tell it how to draw the letter "B". The CPU runs these instructions
          and stores the results as pixels in memory.
      8:
        image: notes/csd_concept_memory_cpu_input_output_8.png
        text: Finally, this pixel information is sent in binary to the screen. The
          screen is an output device, which converts the binary signals into the tiny
          lights and colors that make up what you see.
      9:
        image: notes/csd_concept_memory_cpu_input_output_9.png
        text: This all happens so quickly it feels instantaneous, but to display each
          letter a computer runs thousands of instructions, starting from the moment
          your finger presses the key point.
      10:
        image: notes/csd_concept_memory_cpu_input_output_10.png
        text: In that example, the output device was the screen, but there are many
          different types of output which take a binary signal from the computer and
          do something in the physical world. For example, a speaker will play sound,
          and a 3D printer will print an object. Output devices can also control physical
          motion like a robotic arm, the motor of a car, or the cutting tool of the
          milling machine that my company makes. New types of inputs and outputs let
          computers interact with the world in entirely new ways. This has been helped
          out by improvements to the speed and size of the memory and CPU.
      11:
        image: notes/csd_concept_memory_cpu_input_output_11.png
        text: The more complicated a task is and the more information that is input
          or output, the more processing power and memory a computer needs. Typing
          letters on a screen may be easy but to do complicated 3d graphics or record
          a high-definition movie, modern computers often have multiple CPUs to process
          all that information and many gigabytes of memory to store it.
      12:
        image: notes/csd_concept_memory_cpu_input_output_12.png
        text: 'No matter what it is you want to do with the computer, every single
          action is about: inputting information from the physical world, storing
          and processing that information, and getting some output back into the physical
          world.'
    csd_concept_hardware_software:
      1:
        image: notes/csd_concept_hardware_software_1.png
        text: Hi, my name is Erica Gomez and I'm an engineering manager at Amazon.com.
          One of the best things about working in tech, and at Amazon in particular,
          is that I get to bring my dog with me to work every day. My job is to help
          make sure software gets out the door and her job is to nap under my desk
          and snore very loudly.
      2:
        image: notes/csd_concept_hardware_software_2.png
        text: 'My name is Jerome Holman, and I''m a Program Manager on Team Xbox and
          I have a really fun job: Basically bringing the hardware and the software
          together to give you all the games that you love on your Xbox.'
      3:
        image: notes/csd_concept_hardware_software_3.png
        text: When you look inside a computing device you see a bunch of circuits,
          chips, wires, speakers, plugs, and all sorts of other stuff. This is the
          hardware.
      4:
        image: notes/csd_concept_hardware_software_4.png
        text: But what you don't see is the software. Software is all of the computer
          programs, or code, running on this machine. Software can be anything from
          apps and games to webpages and the data science software that me and my
          teams use at Amazon to understand how customers behave.
      5:
        image: notes/csd_concept_hardware_software_5.png
        text: But how do the hardware and the software interact with one another?
          Let's start at looking at a computer's central processing unit, or CPU.
      6:
        image: notes/csd_concept_hardware_software_6.png
        text: The CPU is the master chip that controls all the other parts of the
          computer. A CPU needs to do different things so inside it has smaller, simpler
          parts that handle specific tasks. It has circuits to do simple math and
          logic. It has other circuits to send and receive information to and from
          different parts of the computer.
      7:
        image: notes/csd_concept_hardware_software_7.png
        text: The real magic of the CPU is how it knows which circuits to use and
          when to use them. The CPU receives simple commands that tell it which circuit
          to use to do a specific job. For example, an "add" command tells the CPU
          to use its outer circuit to calculate a new number. And then the "store"
          command tells the CPU to use a different circuit to save that result into
          memory.
      8:
        image: notes/csd_concept_hardware_software_8.png
        text: Just like numbers, all of these simple commands can be represented in
          binary ones and zeros or on and off electrical signals. The binary commands
          are stored in memory and the CPU fetches and executes them in sequence one
          after the other. This sequence of commands is, in fact, a very simple computer
          program.
      9:
        image: notes/csd_concept_hardware_software_9.png
        text: Binary code is the most basic form of software and it controls all the
          hardware of a computer. These days, nobody writes software in binary. It
          would take forever!
      10:
        image: notes/csd_concept_hardware_software_10.png
        text: Today, the software we write looks more like this (Python), or this
          (Ruby), or even this (Blockly). Programming languages like these let you
          type in commands in something that looks a lot like English.
      11:
        image: notes/csd_concept_hardware_software_11.png
        text: To draw a rectangle on the screen, you just need a single command. This
          high-level command is converted into hundreds, or thousands, of simpler
          binary commands that the CPU understands. Software tells the CPU what to
          do, but when you're listening to music, and browsing the web, and chatting
          with a friend, your computer is running multiple pieces of software all
          at once.
      12:
        image: notes/csd_concept_hardware_software_12.png
        text: So, how do all of these programs get on the computer in the first place,
          and how can the CPU run them all at once? To find out we'll have to take
          a look at the operating system.
      13:
        image: notes/csd_concept_hardware_software_13.png
        text: The operating system of the computer is the master program that manages
          how software gets to use the hardware of the computer. For example, I helped
          create the Windows operating system that runs on most personal computers.
      14:
        image: notes/csd_concept_hardware_software_14.png
        text: The operating system is a program with special abilities that let it
          control the other software on the computer. It lets you install new programs
          by loading them into your computer's memory. It decides when a program is
          run by the central processing unit, and whether that program can access
          the computer's input and output devices. And when you think your computer
          is running many programs at once, in reality, it's the operating system
          that's quickly switching between programs sharing that CPU for fractions
          of a second.
      15:
        image: notes/csd_concept_hardware_software_15.png
        text: Inside every computer is an operating system managing software that
          controls the computer's hardware.
      16:
        image: notes/csd_concept_hardware_software_16.png
        text: The software is a series of commands made of simple binary code, and
          that binary code is just electrical signals flowing through billions of
          tiny circuits.
      17:
        image: notes/csd_concept_hardware_software_17.png
        text: Computers have the potential to do all kinds of amazing things. But
          the only thing that makes the computer smart, or useful, is you. When you
          learn to code you get to define the problem you want to solve, and write
          the software that turns those ideas into reality.
