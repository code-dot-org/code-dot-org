"uk":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Ласкаво просимо до вашої першої години коду! Нумо, не зволікаючи, зробімо
          першу спробу в програмуванні.
      2:
        image: notes/hoc1_2.jpg
        text: Ми будемо використовувати Блоклі - візуальну мову програмування, де
          код програми не пишуть, а перетягують команди-блоки.
      3:
        image: notes/hoc1_3.jpg
        text: Більшість програмного коду потрібно набирати, але Blocky є візуальним
          середовищем. Кожен блок відповідає одному рядку коду.
      4:
        image: notes/hoc1_4.jpg
        text: Ви дізнаєтесь основи інформатики та поняття, які використовуються всюди,
          від програмування до контролю марсохода.
      5:
        image: notes/hoc1_5.jpg
        text: Програма - це набір інструкцій, які має виконати комп'ютер.
      6:
        image: notes/hoc1_6.jpg
        text: Метою вашої першої програми є перевести Злого Птаха через лабіринт до
          Зеленої Свині.
      7:
        image: notes/hoc1_7.jpg
        text: Ліворуч розміщено лабіринт, у якому виконуватиметься програма. Вказівки
          для кожного завдання знаходяться під лабіринтом.
      8:
        image: notes/hoc1_8.jpg
        text: Середня секція містить команди для Злого Птаха. Ви їх використаєте для
          побудови коду.
      9:
        image: notes/hoc1_9.jpg
        text: Праворуч міститься робоча область, в яку перетягуються блоки з панелі
          інструментів для побудови програми. Щоб видалити блок, його потрібно перетягнути
          у смітник в кутку.
      10:
        image: notes/hoc1_10.jpg
        text: Кожен блок - це одна команда. Якщо ви перетягнете блок "рухатись вперед"
          на робочу область і натиснете "Запуск програми", птах переміститься на одну
          позицію в лабіринті.
      11:
        image: notes/hoc1_11.jpg
        text: Щоб виконати більше однієї дії, перетягни кілька блоків на робочу область
          та з'єднай їх. Птах виконуватиме команди згори донизу.
      12:
        image: notes/hoc1_12.jpg
        text: Якщо програму запущено і бажаєш ще щось виправити та повторити спробу
          - натисни кнопку "Скидання".
      13:
        image: notes/hoc1_13.jpg
        text: Нумо, дістанемо цих свиней!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Привіт, я JR! Для перемоги кожна команда потребує фахівців з комп'ютерних
          наук. Вони аналізують дані, отримані від автомобіля, щоб він рухався швидше.
      2:
        image: notes/stage5_2.jpg
        text: У цих завданнях ви будете художником, який повсюди малює за собою лінію.
      3:
        image: notes/stage5_3.jpg
        text: Цей блок вказує "рухатись вперед на 100 пікселів". Пікселі - це маленькі
          крапки на екрані.
      4:
        image: notes/stage5_4.jpg
        text: Цей блок вказує "повернути праворуч на 90 градусів". Це дозволить повернути
          художника на вказаний кут, так само як блок "поворот" у завданнях лабіринту.
      5:
        image: notes/stage5_5.jpg
        text: Клацни на стрілці у будь-якому з цих блоків для того, щоб змінити те,
          наскільки художник переміщується вперед чи повертає. Поекспериментуй з цими
          новими блоками.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Привіт, я Паола! У цих завданнях ти допоможеш фермерці очистити поле
          для посадки рослин.
      2:
        image: notes/stage9_2.jpg
        text: Вам потрібно допомогти видалити всі купи землі та заповнити всі ямки.
      3:
        image: notes/stage9_3.jpg
        text: Нові блоки видаляють 1 відро землі з купи і засипають в ямку 1 відро
          землі.
      4:
        image: notes/stage9_4.jpg
        text: Купи та ямки різного розміру, тому потрібно вказати фермерці, скільки
          використати відер.
    flappy_intro:
      1:
        image: примітки/flappy01.jpg
        text: Привіт, Я Кеті! Одна із найбільш захопливих речей в інформатиці - це
          те, що комп'ютерна програма може бути інтерактивною.
      2:
        image: примітки/flappy02.jpg
        text: Щоразу коли хтось клацає чи торкається екрану комп'ютера чи телефону,
          це утворює ПОДІЮ, і існує код, який вказує, що робити при настанні певної
          ПОДІЇ.
      3:
        image: примітки/flappy03.jpg
        text: 'Наприклад, можна мати ОБРОБНИК ПОДІЇ, який вказує "коли клацнули мишкою,
          грай звук" '
      4:
        image: примітки/flappy04.jpg
        text: Ви коли-небудь чули про пташка Пурха (його ще знають як FlappyBird)?
          Використовуючи обробники подій, ми навчимось програмувати нашого власного
          Пурха!
      5:
        image: примітки/flappy05.jpg
        text: Код, який ви створите, передбачає перетягування блоків, які утворюють
          команди для комп'ютера. Всередині кожен з цих блоків складається зі справжнього
          коду.
      6:
        image: примітки/flappy06.jpg
        text: 'Якщо ви поглянете на робочу область, на ній вже розміщені деякі зелені
          блоки - це "обробники подій" '
      7:
        image: примітки/flappy07.jpg
        text: Якщо ви хочете, щоб птах змахував крилами при Клацанні мишкою, можна
          додати блок "махати" до відповідного обробника події, і тепер щоразу при
          клацанні мишкою птах змахуватиме крилами.
      8:
        image: примітки/flappy08.jpg
        text: У кожному завданні ми додаватимемо нові типи подій у вигляді зелених
          блоків на робочій області, і ви можете вирішувати, які саме блоки додавати
          для реакції на ці події.
      9:
        image: примітки/flappy09.jpg
        text: Коли ви побачите подібну стрілку вниз, це означає, що можна змінювати
          налаштування - наприклад, який саме звук грати, коли Пурх вдаряється об
          змелю.
      10:
        image: примітки/flappy10.jpg
        text: В останньому завданні ви зможете створити власну гру і поділитися нею
          з друзями. Успіхів!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Привіт, я Марк! Дізнаємось про цикли. Використання циклів вказує комп'ютеру
          повторити будь-який набір команд знову і знову, сотні, або й мільйони разів.
      2:
        image: notes/hoc2_2.jpg
        text: У цьому завданні ми хочемо змусити птаха рухатись вперед на 5 позицій,
          щоб дістатись до свині.
      3:
        image: notes/hoc2_3.jpg
        text: Ми можемо використати новий блок "повторити".
      4:
        image: notes/hoc2_4.jpg
        text: Замість того, щоб перетягувати 5 блоків "рухатись вперед"...
      5:
        image: notes/hoc2_5.jpg
        text: Ми можемо поставити блок "рухатись вперед" всередину блоку "повтори"
          і записати число всередині блоку, щоб вказати скільки разів слід повторити
          цю дію.
      6:
        image: notes/hoc2_6.jpg
        text: 'І це важливо: можна розмістити кілька команд всередині блоку "повтори".'
      7:
        image: notes/hoc2_7.jpg
        text: Розважайтесь зі своїм новим блоком "повторити"!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Привіт, я Кріс. Перед тим, як приєднатись до команди Miami Heat, я вивчав
          комп'ютерні науки в Технічному інституті Джорджиї. Спробуймо новий блок
          - "повторити до".
      2:
        image: notes/hoc3_2.jpg
        text: А якщо ми не знаємо, як далеко потрібно переміститись птахові, щоб дістатись
          до свині?
      3:
        image: notes/hoc3_3.jpg
        text: Якщо ми розмістимо блок "рухатись вперед" всередині блоку "повторювати
          до", птах рухатиметься вперед доти, доки не дістанеться свині (або доки
          не вріжеться в стіну).
      4:
        image: notes/hoc3_4.jpg
        text: 'І це важливо: так само, як і раніше, ми можемо розмістити кілька блоків
          всередині блоку "повторювати до", і вони будуть повторюватись.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Привіт, я Білл! Вивчимо нове базове поняття: команду галуження, яка
          допомагає комп''ютеру приймати рішення.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Ви самі використовуєте команду галуження щодня. Перед виходом з дому
          щоранку ви аналізуєте: ЯКЩО йде дощ, то треба одягнути плащ.'
      3:
        image: notes/hoc4_3.jpg
        text: Ми можемо вказати зомбі перевіряти, чи є шлях ліворуч, і ЯКЩО є шлях
          ліворуч, ми вкажемо йому повернути в цьому напрямку.
      4:
        image: notes/hoc4_4.jpg
        text: Щоб створити цей код, перетягнемо блок "якщо" і поставимо блок "повернути
          ліворуч" всередину.
      5:
        image: notes/hoc4_5.jpg
        text: Тепер, коли ми вгорі поставили блок "рухатись вперед" і навколо всього
          блок "повтори", щоразу коли зомбі рухається, він перевірятиме наявність
          шляху ліворуч та повертатиме. Команда "повторити" є критичною, щоб перевіряти
          можливість повороту на кожному кроці.
      6:
        image: notes/hoc4_6.jpg
        text: 'Команда розгалуження є дуже важливою в інформатиці. Одна з перших,
          створених мною програм, була гра хрестики-нулики, і в галуженні я перевіряв:
          ЯКЩО другий гравець може виграти, слід заблокувати цю виграшну позицію.'
      7:
        image: notes/hoc4_7.jpg
        text: Розважайтесь з блоком „якщо“!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Привіт, мене звуть Салоні. Я використовую програмування, щоб вирішувати
          задачі в охороні здоров'я та медицині. Зараз ми дізнаємось про блок "якщо-то-інакше".
          Він виглядає схоже на блок "якщо", але має додаткову частинку "інакше".
      2:
        image: notes/hoc5_2.jpg
        text: Якщо я поставлю блок "рухатись вперед" в область "робити", і "повернути
          ліворуч" в область "інакше", це означає, що зомбі буде вибирати між двома
          варіантами. ЯКЩО попереду є шлях, то він рухатиметься вперед, ІНАКШЕ (якщо
          шляху попереду немає), зомбі поверне ліворуч.
      3:
        image: notes/hoc5_3.jpg
        text: Так само, як із блоком "якщо", ми можемо розмістити блок "якщо-інакше"
          всередині блоку "повторити", щоб зомбі продовжував рухатися, а блок "якщо-інакше"
          допоможе перевірити чи потрібно повертати.
      4:
        image: notes/hoc5_4.jpg
        text: Отож, відправимо зомбі на місця!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Команда "якщо-інакше" є прийняттям рішення з-поміж двох варіантів. Подивимося,
          як можна використати команду "якщо-інакше", щоб допомогти нашому другу Скрету.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Цей блок виглядає так само, як блок "якщо", але має додаткову частину
          внизу, що відповідає за дії "інакше". Якщо я поставлю блок "рухатися вперед"
          в область "робити", а блок "повернути ліворуч" в область "інакше", це означає,
          що Скрет буде рухатися вперед, якщо попереду є шлях. Якщо шляху вперед немає,
          Скрет поверне ліворуч.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Це прийняття рішення і виконання однієї з двох дій на основі цього рішення.
          І точно так само, як із блоком "якщо", ви можете розмістити блок "якщо-інакше"
          всередині блоку "повторити".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: А тепер допоможемо Скрету дістатись до свого жолудя!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Привіт, я Бріна, інженер в Інстаграмі. Функція - це певні рядки коду,
          які ви хочете використати багато разів, тож замість того, щоб щоразу повністю
          писати цей код, можна використати один блок.
      2:
        image: notes/stage13_2.jpg
        text: Ми дізнаємось, як визначати функції. Визначення функції починається
          із зірочки в кутку. Назва функції записується у верхньому рядку.
      3:
        image: notes/stage13_3.jpg
        text: Блоки, розміщені всередині визначення, вказують, що робити. Наприклад,
          це визначення функції називається "заповнити 5" і складається з блоку "повторити"
          та блоку "заповнити".
      4:
        image: notes/stage13_4.jpg
        text: Визначення на потрібному місці, але наша фермерка не зможе виконати
          функцію, поки ми не перетягнемо блок "заповнити 5" з  категорії функцій.
      5:
        image: notes/stage13_5.jpg
        text: 'Зробимо функцію цікавішою! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Привіт, я Макінд! Я розповім про блок "поки". '
      2:
        image: notes/stage9_6.jpg
        text: Блок "поки" виконуватиме дії, розміщені всередині нього, ДО ТИХ ПІР,
          ПОКИ умова на початку блоку залишається ІСТИНОЮ.
      3:
        image: notes/stage9_7.jpg
        text: Наприклад, якщо фермерка стоїть на купі, вона продовжуватиме видаляти
          по 1 відру землі, ПОКИ є ця купа.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Привіт, я Тріна, я працюю в Піксар. Я працювала над різними фільмами,
          включаючи Шрека.
      2:
        image: notes/stage11_2.jpg
        text: Це наш новий цикл "лічильник". Він виконуватиме дії знову і знову, і
          можна щоразу дещо змінювати ці дії.
      3:
        image: notes/stage11_3.jpg
        text: У цьому прикладі наш цикл "лічильник" вказує "рахувати лічильником від
          50 до 90 через 10", а всередині ми маємо блок "малювати квадрат". Перетягни
          блок "лічильник" з розділу змінних на місце "довжина".
      4:
        image: notes/stage11_4.jpg
        text: Це означає, що художник малюватиме квадрат, стороною 50 пікселів, тоді
          додаватиме до них 10 і малюватиме квадрат, стороною 60 пікселів. Він продовжуватиме
          додавати 10 та малювати відповідний квадрат, поки не дійде до 90. Так, ми
          матимемо квадрати зі сторонами 50, 60, 70, 80 та 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Привіт, я Жанет, і я інженер у Зинга.
      2:
        image: notes/stage15_2.jpg
        text: А якщо нам потрібно намалювати кілька трикутників зі сторонами різної
          довжини?
      3:
        image: notes/stage15_3.jpg
        text: Ми могли б написати код вручну, або використаємо функцію з параметрами.
      4:
        image: notes/stage15_4.jpg
        text: Щоб зробити це, клацни блакитну зірочку на визначенні функції "намалювати
          трикутник". Тоді перетягни "назву параметра" до блоку "вхід".
      5:
        image: notes/stage15_5.jpg
        text: Тепер, якщо ви напишете "довжина" в тому місці, де вказано "х" і натиснете
          "Enter", ви створите вхідну довжину для своєї функції.
      6:
        image: notes/stage15_6.jpg
        text: Потім клацни зірочку. Тепер потрібно клацнути в категорії змінних і
          перетягнути блок "довжина" у блок "рухатись вперед" визначення функції.
          Забери старий блок з числом.
      7:
        image: notes/stage15_7.jpg
        text: Щоб використати функцію з параметрами, клацни на категорії функцій та
          перетягни функцію "намалювати трикутник з довжиною".
      8:
        image: notes/stage15_8.jpg
        text: Тепер можна використати математичний блок, щоб вводити різні числа для
          побудови трикутників різних розмірів.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: Вітання! Розв'язавши останнє завдання, ми щойно сформували код, за яким
          БУДЬ-ЯКИЙ робот може знайти дорогу через лінійний лабіринт чи тунель будь-якого
          розміру, чи це буде зомбі, птах, марсохід, чи навіть автомобіль на автоматичному
          керуванні без водія.
      2:
        image: notes/hoc6_2.jpg
        text: Основні поняття, які ви використали, лежать в основі кожної програми,
          якою ви коли-небудь користувались. Ми познайомились з циклами на певну кількість
          повторів та умовними повторами, а також із розгалуженнями "якщо" та "якщо-то-інакше".
      3:
        image: notes/hoc6_3.jpg
        text: Якщо вам сподобалась ця перша година коду, відвідайте code.org, щоб
          продовжити вивчення інформатики! У нашому 20-и годинному курсі ви опануєте
          основи програмування і зможете писати програми для телефонів чи роботів,
          ігри - та все, що завгодно.
      4:
        image: notes/hoc6_4.jpg
        text: 'Технології змінюють все, чим ми займаємось, і не важливо, якого ви
          віку: програмування - це весело та творчо, і кожен може його опанувати!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: Примітки показу скоро будуть!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Привіт, мене звуть Ліндсі. Я модель, актриса і пишу свої власні програми.
          Допоможемо Анні та Ельзі досліджувати магічну красу льодяних узорів за допомогою
          програмування.
      2:
        image: notes/frozen1_2.jpg
        text: Ви намалюєте сніжинки та крижані візерунки, покатаєтеся на ковзанах
          і створите зимову казку, якою зможете поділитися зі своїми друзями.
      3:
        image: notes/frozen1_3.jpg
        text: Протягом наступної години ви навчитеся основам програмування. Традиційне
          програмування, як правило, відбувається у тексті, але ми використаємо мову
          Blockly, на основі візуальних блоків, котрі можна перетягувати, щоб створити
          програму. Так вчаться програмувати навіть студенти університетів. Всередині,
          ви все-ж створюєте код.
      4:
        image: notes/frozen1_4.jpg
        text: Програма являє собою набір інструкцій, які вказують комп'ютеру, що робити.
          Створимо код, або програму, які допоможуть Ельзі намалювати просту лінію.
          Ми використаємо це пізніше для створення складніших узорів.
      5:
        image: notes/frozen1_5.jpg
        text: Екран розділено на три основні частини. Ліворуч розміщена крижана поверхня,
          на якій виконуватиметься програма. Інструкції для кожного рівня написані
          внизу цією області.
      6:
        image: notes/frozen1_6.jpg
        text: Область посередині - це панель інструментів, і кожен з цих блоків є
          командою, котру можуть виконати Ельза та Анна.
      7:
        image: notes/frozen1_7.jpg
        text: Білий простір праворуч називається робочою областю, і саме тут ми створимо
          свою програму. Щоб рухатися по крижаній поверхні, використаємо блок "рухатися
          вперед".
      8:
        image: notes/frozen1_8.jpg
        text: Ось, блок "рухатися вперед" вказує рухатися вперед на 100 пікселів.
          Що буде, коли ми натиснемо "Запустити"? Ельза переміститься на певну відстань,
          а точніше на 100 пікселів! Пікселі - це маленькі квадратики на екрані комп'ютера.
      9:
        image: notes/frozen1_9.jpg
        text: Інший блок цього завдання вказує "повернути на 90 градусів". І коли
          ми використаємо цей блок, Ельза виконає поворот. Можеш поекспериментувати,
          на скільки градусів Ельзі потрібно повертати. Кут вимірюється відносно шляху
          попереду Ельзи. Так виглядає поворот на 90 градусів. А так - на 120 градусів.
      10:
        image: notes/frozen1_10.jpg
        text: Пам'ятай, можна змінити кількість пікселів і градусів, натиснувши стрілочки
          поруч із числами.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Привіт, я Паола! Комп'ютери добре вміють повторювати дії. Ти можеш порахувати
          до 10, 20 або 100. А комп'ютер може рахувати мільярдами або трильйонами.
          Для нього це не буде нудно, і займе всього кілька секунд. Чи у підрахунку,
          чи малюванні або будь-чому іншому - комп'ютери можуть повторювати дії сотні
          або навіть мільярди разів.
      2:
        image: notes/frozen2_2.jpg
        text: У програмуванні ми називаємо це циклом. Цикл— це повторення виконання
          коду знову і знову. У наступному завданні ваша мета полягає у тому, щоб
          допомогти Анні створити квадрат, використавши блок "повторити".
      3:
        image: notes/frozen2_3.jpg
        text: Кожен блок, розміщений всередині блоку "повторити" буде повторювати
          послідовність дій вказану кількість разів.
      4:
        image: notes/frozen2_4.jpg
        text: 'Щоб намалювати квадрат, використайте блоки "рухатися вперед" і "повернути
          праворуч" 4 рази. Але існує простіший спосіб: вказати комп''ютеру "рухатися
          вперед" і "повернути праворуч на 90 градусів" один раз, а потім вказати
          повторити цю пару дій 4 рази. Для цього потрібно розмістити блоки "рухатися
          вперед" і "повернути праворуч" всередині блоку "повторити".'
      5:
        image: notes/frozen2_5.jpg
        text: Пам'ятайте, що можна змінити число у блоці «повторити», і дії всередині
          блоку будуть повторюватися вказану кількість разів.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Привіт, я Кріс Бош. Я професійний гравець у баскетбол, і я програмував
          у коледжі.
      2:
        image: notes/frozen3_2.jpg
        text: Одна з найважливіших концепцій інформатики полягає в тому, як створювати
          нові команди. Більшість комп'ютерних мов мають лише близько 100 слів або
          команди. І справді, мистецтво та майстерність програмування лежить у визначенні
          своїх власних команд із цих стандартних блоків.
      3:
        image: notes/frozen3_3.jpg
        text: Після того, як ви навчили комп'ютер, як виконати дію один раз за допомогою
          певної послідовності команд, ви може вказати свою власну назву для цієї
          дії, і легко повторити її пізніше. Коли ви визначаєте свою власну команду
          і надаєте їй назву - ви створюєте функцію.
      4:
        image: notes/frozen3_4.jpg
        text: Привіт, я Джесс. У програмуванні за допомогою блоків, ви можете скористатись
          функціями, якщо є набір дій, які ви хотіли б використовувати кілька разів.
          Наприклад, ви написали код, щоб створити квадрат.
      5:
        image: notes/frozen3_5.jpg
        text: 'Це можна визначити як функцію під назвою "створити квадрат." '
      6:
        image: notes/frozen3_6.jpg
        text: Тепер у вас є новий блок, що дає змогу створювати квадрати багато разів.
      7:
        image: notes/frozen3_7.jpg
        text: Прості фігури можуть використовуватися для створення складніших узорів.
          У наступному завданні, нещодавно створений код малювання кола, доступний
          у вигляді функції, яку можна використати для малювання кіл різних розмірів.
          Можеш, використавши її, допомогти Ельзі створити складні та красиві візерунки
          на снігу?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Ми збираємося створити гру за допомогою Ігрової лабораторії. У хорошої
          гри є певний сюжет, із певними персонажами. Ми дізнаємося, як зробити так,
          щоб персонажі виглядали як відьми, інопланетяни чи тваринки, вміли говорити,
          рухатися і взаємодіяти один з одним. До кінця цього підручника ви зможете
          створити гру з самого початку і поділитися нею з друзями.
      2:
        image: notes/playlab_intro_2.png
        text: Ваш екран поділено на 3 основних частини. Ліворуч - ігровий простір,
          де буде працювати ваша програма. Інструкції для кожного рівня написані внизу.
      3:
        image: notes/playlab_intro_3.png
        text: Середня область містить панель інструментів, де кожен з блоків являє
          собою певну команду коду. Білий простір праворуч - це робоча область, де
          ми будемо складати програму.
      4:
        image: notes/playlab_intro_4.png
        text: Для початку, потрібно зв'язати блоки і помаранчевий блок "при запуску".
          Можна прикріпити кілька блоків разом, і перетягувати їх, поки не побачите
          жовту мітку, після відпускання вони автоматично розташуються поряд.
      5:
        image: notes/playlab_intro_5.png
        text: У цьому першому завданні, нашим персонажем є пінгвін і ми допоможемо
          йому сказати "Привіт!, перетягнувши блок "говорити" до блоку "при запуску"
          і надрукувавши "Привіт". Ми можемо також перемістити пінгвіна за допомогою
          блоків "рухатися вправо" і "рухатися вліво". Після того як всі блоки розставлено
          на місця, натисніть кнопку запуску, щоб побачити те, що ви запрограмували.
      6:
        image: notes/playlab_intro_6.png
        text: Розпочинай роботу, і в кінці створиш власну гру з різними персонажами,
          котрі зможуть взаємодіяти, сумувати чи веселитись, заробляти бали, кидати
          вогняні кулі чи навіть застосовувати магію зникнення. Все залежить від тебе,
          і того, що ти хочеш створити.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Тож зараз ми дізнаємося про те, що всі програмісти ігор використовують
          щодня. Це називаються подіями. Подія вказує програмі очікувати, поки щось
          не відбудеться. Коли це станеться, буде виконана певна дія.
      2:
        image: notes/playlab_events_2.png
        text: Прикладами подій є очікування клацання мишкою, натиснення клавіші зі
          стрілкою чи торкання сенсорного екрану.
      3:
        image: notes/playlab_events_3.png
        text: Отож, ми створимо космонавта, котрий привітається із землянами, коли
          на ньому клацнуть. Використаємо блок «коли клацнули» та вкладемо у нього
          блок "говорити". Коли гравець натискає на космонавта, буде виконано все,
          що вказано в області "коли клацнули". Що скаже ваш прибулець?
      4:
        image: notes/playlab_events_4.png
        text: Існують також блоки "коли натиснено стрілку". Якщо всередині розмістити
          блоки "рухатися", можна переміщувати персонажів вгору, вниз, вліво або вправо.
          Крок за кроком, наша гра стає все більш інтерактивною.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Це блок "повторювати завжди". Розміщене у цьому блоці виконуватиметься
          у грі постійно і завжди.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Якщо ми хочемо, щоб персонаж виконував дію кілька разів, без додаткових
          вказівок від гравця, розмістимо відповідну дію всередині блоку "повторювати
          завжди".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: У наступному завданні наша мета полягає у тому, щоб допомогти чарівникові
          охороняти кордони володінь, безперервно рухаючись вліво і вправо. Вивчення
          команди повторення збереже море часу в майбутньому, коли ви створюватимете
          власну гру.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Ось твої блоки для малювання. Скористайся одним з них, щоб перемістити
          художника у потрібне для заповнення сірих ліній місце.
      2:
        image: notes/C1_artist_intro_2.png
        text: Ось блоки стрибання. При використанні них, художник буде рухатися, але
          не малювати, тож використовуй їх для перескакування до наступної сірої лінії.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Хіба ж бджоли не супер-круті? У наступному наборі задачок твоєю метою
          є допомогти бджілці дістатись до квітів та зібрати нектар, а тоді полетіти
          до стільника і зробити мед. Для виконання вправи тобі знадобляться блоки
          "отримати нектар" і "зробити мед".
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Кожна квітка має різну кількість нектарів: 1, 2, 3 або більше. Ми знаємо,
          скільки нектару в червоній квітці - це число в кутку. Так що постарайся
          отримати весь нектар з квітки, перш ніж рухатися далі. Крім того, кожен
          стільник може утримувати певну кількість меду: 1, 2, 3 або більше. Тому
          намагайся зробити якомога більше меду, наскільки може вмістити стільник.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Якщо зможеш зібрати весь нектар і зробити весь мед, то перейдеш до наступного
          рівня. У протилежному випадку, доведеться виконувати завдання знову. Пограйся
          трохи і побачиш, як це - бути бджілкою-програмістом!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Цикл - це повторення дій. Тож перевіряючи вулик, я розглядаю рамку,
          ставлю її на місце, і повторюю ці дії кілька разів. Це повторення у циклі,
          кількаразове виконання дій.
      2:
        image: notes/C1_bee_loops_2.png
        text: На цьому рівні нам потрібно, щоб бджілка зібрала з квітки три нектари.
          Замість використання трьох блоків "отримати нектар", ми скористаємось блоком
          повторення, щоб отримати нектар тричі. Натисни "Виконати" і перевір, чи
          все вийшло. Чудово!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Цей урок називається "велика подія". Він про те, як ми можемо керувати
          програмами і змінювати їх роботу на ходу, використовуючи події, такі як
          натискання кнопки чи клацання мишки.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: На цьому уроці ми керуватимемо людьми за допомогою паперового дистанційного
          пульта. Це ніби відео-гра в реальності.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Подія - це дія, яка спричиняє певні дії. Наприклад, коли клацнути кнопку
          миші, завантажиться веб-сторінка. Це і є подія. Коли ми торкаємось до екрану
          планшета - це теж подія. Події - це чудовий засіб користувача для передавання
          вказівок у програму, коли ми хочемо, щоб вона виконала якусь дію.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Своїми діями ми реагуємо на навколишні події. Коли ми голодні, ми йдемо
          до холодильника. Ми чуємо, що поштар прийшов і поклав пошту в скриньку,
          і можемо її забрати. Це такі ж події, як натиснення кнопки чи переміщення
          джойстика. Це те, що відбувається і спричиняє подальші дії.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: У відео-іграх є подія, котра називається "Оновити" і вона трапляється
          кожні 30 або 60 секунд. Для програмістів відео-ігор це майже так само важливо,
          як і події кнопок чи джойстика.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Основна подія, за якою ми слідкуємо - це "Оновлення". А тоді ми перевіряємо
          джойстик. Тож ми кажемо, "Хтось натиснув кнопку на цьому кадрі? Так чи ні?"
          Без подій гравець не міг би рухатись, стрибати, і не можна було би ним керувати.
          У відео-грі не можна би було нічого анімувати.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: Маючи досвід будування піщаних скульптур, ми знаємо, що невдачі є частиною
          норми. Але наполегливість приносить результат, все кращий та захопливіший.
          Наполегливість - це частина гри. Продовжуй, і тобі сподобається.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Цей урок називається побудовою основ. Ми працюватимемо над завданням,
          яке має бути дуже складним. Спробуємо розібратися, як створити структуру
          принаймні такої ж висоти, як ці чашки, і настільки міцну, щоб витримати
          вагу книги.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Бувають моменти, коли наше творіння не спрацьовує. Бувають моменти,
          коли ми дратуємось і хочемо здатись. Таких моментів може бути багато. Але
          якщо продовжувати пробувати, намагатись зробити якомога краще знову і знову,
          то рано чи пізно все вийде.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Наполегливість - це продовжувати робити навіть тоді, коли хочеться здаватись.
          Якщо хочеш створити щось нове і оригінальне, на цьому шляху буде багато
          невдач.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: Основою наполегливості є продовжувати спроби і вчитись на помилках замість
          того, щоб здатись через розчарування. Розчарування насправді означає, що
          за рогом нас чекає щось прекрасне. Тож не здавайся, поки не дістанешся до
          нього! Давай!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Привіт, мене звуть Мірал Котб, і я створив Iluminate. У моїй роботи
          є те, що ми використовуємо і в танцях, і в програмуванні світлових костюмів.
          І це цикли! Цикли означають багаторазове повторення дій.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Коли ми повторюємо щось багато разів, наприклад мої дії з крутіння обруча,
          відбувається повторення тієї ж дії. Це цикл. І це цикл. І ще один цикл.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Сьогодні у нас дискотека. Ми розберемо цикли і нові рухи. Ітерація.
          Ми дізнаємося про цикли за допомогою танців. Вивчимо кілька простих рухів
          і повторимо їх багато разів, щоб завершити танець.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Ось рухи, які потрібно вивчити. Плесніть у долоні. Покладіть руки за
          голову. Тепер покладіть руки на талію. Підніміть ліву руку. Підніміть праву
          руку. Просто, правда ж? Виявляється можна скоротити вказівки, розміщуючи
          етапи танцю в циклі.
      5:
        image: notes/C1_getting_loopy_5.png
        text: Насправді у танці ми використовуємо цикли. Одяг танцюристів має комп'ютери,
          під'єднані до єдиної мережі. Можна проходити по циклу лампочок до того ж
          танцюриста знову і знову. В циклі можна виконувати повторення, коли я вказую
          що потрібно пройти через шістьох танцюристів знову і знову, а тоді збільшити
          швидкість світла у цьому циклі. І все це робиться за допомогою циклів. Цикли
          важливі у програмуванні, бо вони роблять нашу роботу коротшою та легшою.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Цей урок називається Щасливі карти. Сьогодні ми допоможемо маленькій
          пухнастій подрузі Флурб дістатись до фруктів.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Допоможи Флурбі дістатись до фрукта. Щоб це зробити, потрібно визначити,
          яким шляхом має рухатись Флурб і скерувати її за допомогою стрілок. Щоб
          Флурб дісталась до яблука, у якому напрямку потрібно рухатись? Скеруй її
          вгору.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Щоб скерувати її, обведи напрямок, в якому потрібно рухатись.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Створи алгоритм, з'єднуючи стрілки поряд з картою, яку намагаєшся пройти.
          Друга така ж, тільки повернута вниз.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Це як програмування на папері. І все!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Debugging is finding and fixing problems. There are lots of ways to
          debug problems. One of the easiest is to move step by step until where you
          find where something goes wrong. Here I'm trying to do a back handspring
          on the beam but I keep falling off.
      2:
        image: notes/C1_maze_debugging_2.png
        text: I walked through each part step by step and realized where my mistake
          was. I wasn't putting my hands on the beam correctly. So I tried another
          back handspring on the beam with my new hand position and I got it. I was
          really glad I debugged my back handspring.
      3:
        image: notes/C1_maze_debugging_3.png
        text: To learn about debugging, we start with a set of blocks already on the
          stage. You'll notice that these blocks won't get you to the goal. We need
          to debug the solution and fix it. What went wrong? You'll notice that you
          needed to keep going west one more block.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Let's fix this by adding another west block and hitting run to see if
          you got it right. Yay, you got it!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: For this puzzle, you need to get the bird to the pig. Look at the puzzle
          and see what directions it needs to take.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: You need to drag the blocks over from the toolbox to the workspace.
          Make sure it's under the "when run" block and when you think you've got
          the right solution, then you can click "Run" and watch the bird go to the
          pig.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_maze_loops_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_maze_loops_3.png
        text: To get the bird to the pig in this level... rather than drag three North
          blocks on to the workspace, you will use the "repeat" block. Drag the "repeat"
          block on to the workspace and enter the number 3. Then drag the "move North"
          block into the "repeat" block and hit "Run" to see if you got it right.
          Congratulations, you got it!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: This lesson is called move it, move it. Together we're going to write
          a program to get our friends from the starting with the compass rose to
          the smiley face goal.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: But the smiley is face down and only one person knows how to get there.
          Let's get this program started.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: A program is an algorithm that has been coded into something that can
          be run by a machine. Most of us think of a program as something that we
          write for a computer. Programs are really good for that but they're also
          helpful in other places. You can make your own game or even program a robot
          to do things for you.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: My name is Jeremiah. Hi! I am seven years old. I love playing on my
          mom's computer but I always get permission first. "Mom, can I go on the
          computer? Sure honey!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: I love my mom's computer because I can go on the internet. The internet
          is kind of like your neighborhood. You can visit cool places, you can talk
          to family and friends and you can learn lots of new things.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Yesterday, I visited a zoo that's near my house. I saw a baby zebra.
          I took her picture and changed the color of her stripes, then added a hat
          and added it to my collection of wacky animals. Awesome! Later, I went to
          a place far far away. I visited Kenya. That's a country in Africa. Lots
          of zebras live there.
      4:
        image: notes/C1_going_places_safely_4.png
        text: Sometimes on the internet I talk to peeople I know, like my grandma
          who lives in another state. Hi grandma! She's making me cookies that she'll
          send me for my birthday. "Yummy, I wish the internet had smellorama!" I
          can talk to different people on the internet, like my cousin but I only
          talk to people I know.
      5:
        image: notes/C1_going_places_safely_5.png
        text: What I like most on the interent is that I get to play fun games. Score!
          I also like to draw and create new things and share it with my friends.
          Cool! Sometimes I visit websites where I learn new things but I always stick
          to websites that are just right for me. Wow, dinosaurs!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'The internet is a super fun place. But just like when you cross a street
          in your neighborhood, you also have to be careful when you go online. Here
          are three rules to remember. Rule number 1: Always ask your parents first.
          Rule number 2: Only talk to people you know. Rule number 3: Stick to places
          that are just right for you.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, that was fun! Dinnertime. I'm logging off now. I can't wait to
          log on again to see where I can visit next.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Today we're going to learn about Pair Programming. In pair programming
          you work as a team. Why should two people use one computer? Because two
          heads are better than one. In pair programming you and your partner are
          going to sit down together at one computer and you are both going to work
          on the same project.
      2:
        image: notes/C1_pair_programming_2.png
        text: In pair programming, one person is the driver and the other person is
          the navigator, just like driving a car. The driver sits at the computer
          and is the one using the keyboard and mouse or touchscreen and controlling
          the main actions of the computer. The other person is the navigator. The
          navigator helps the driver by answering the driver's questions and pointing
          out potential problems or mistakes.
      3:
        image: notes/C1_pair_programming_3.png
        text: Communication is key to successful pair programming. No insults, be
          respectful, don't be a bossy navigator, because nobody likes a backseat
          driver. You and your partner should always be talking. The driver can explain
          what she or he is doing. And the navigator can help suggest what to do next.
      4:
        image: notes/C1_pair_programming_4.png
        text: The navigator should be thinking about the big picture and the driver
          focuses on the details. Both roles are important. Pair programming is all
          about working together as a team.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: This lesson is called planting a seed and it's going to help us understand
          algorithms. Algorithms are specific instructions that explain the order
          in which to do something. Even everyday things like eating breakfast or
          brushing your teeth are algorithms that require small steps to get a job
          done.
      2:
        image: notes/C1_planting_seed_2.png
        text: Computers can be really smart but they can only understand you if you
          tell them exactly what you want step by step. The great thing about algorithms
          is that if you follow the instructions in order, you can do something that
          you didn't know how to do ahead of time. It's like following a recipe.
      3:
        image: notes/C1_planting_seed_3.png
        text: Today we're going to plant our own seeds using an algorithm. Create
          your own algorithm by cutting apart the pictures. Select the pictures that
          show steps in planting a seed and arrange those pictures in the correct
          order.
      4:
        image: notes/C1_planting_seed_4.png
        text: Now, it's time for you to see if your algorithm works. Follow the steps
          in the algorithm very carefully. Are they in the correct order? Did you
          succeed in planting a seed by following the algorithm? It's like programming
          with pictures!
      5:
        image: notes/C1_planting_seed_5.png
        text: When we want to make chocolate, there are many big steps to that process
          and each of those big steps has a set of smaller steps and there are different
          recipes or algorithms depending on how we want the chocolate to taste. Each
          step is important, even the small ones, so that without one step, the rest
          of them cannot be completed. Creating algorithms that others can understand
          is really important. That's why each step has to be written down so that
          no matter who does it, the result is the same.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Time to get creative and use your coding skills to tell a story. Your
          story will have actors and you will be able to make these actors talk and
          interact with each other. Start thinking of what kind of story you want
          to tell.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: The cat's always been afraid of the dog and what if the cat figures
          out that the dog is trying to be nice? The "when run" block starts everything.
          The "move" block will move your character and the "say" block will make
          your character say whatever you type.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: This is the "when actors collide" block which you can link up to the
          other blocks.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: I was making the dog come over and say "Hi" but then the cat got scared
          so it ran away. "Ahh" If there was more time, it would have been a happy
          ending. The end!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: This is the spelling bee level. Use the puzzle pieces to move the bee.
          As it moves, it will collect letters to spell words.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: See if you can spell the word they give you in the box below the stage.
          But bee careful! Moving the wrong direction will add letters you don't want.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: One that computers are really good at is repeating commands. As a person,
          you'd get really bored if you had to do the same thing lots and lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times and not get bored and be able to carry that out really well.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: For example, if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than century to actually
          write out all those emails to everyone. But with just a few lines of code,
          I can have a system send an email to everyone on Facebook wishing them a
          happy birthday.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: In this example, your goal is going to be to move the bird to get the
          pig. Now, we're going to be able to use the repeat block in order to be
          able to do this very easily. You can either do this by giving the computer
          a move forward command five times in order to advance the bird one step
          each time to the pig or you can just tell the computer to move forward once,
          and then tell it to repeat that five times and it'll do the same thing.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: In order to do this, you drag your move forward command and then you
          put it inside the repeat block. And you can click on it and tell it how
          many times you  to repeat the block to tell it how many steps you want it
          to take forward.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: One more thing is you can put as many commands as you want inside the
          repeat block. So in this example, you're telling it to move forward and
          turn left, which it'll do five times. Have fun!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C2_artist_intro_2.png
        text: In these puzzles, you'll be an artist that uses a pencil to draw different
          shapes. Wherever your artist goes, it will draw a line behind you.
      3:
        image: notes/C2_artist_intro_3.png
        text: To move around the canvas, you'll use the move forward block. Here the
          move forward block says move forward by 100 pixels. When we hit run, what
          happens? The artist moves forward a certain amount and that amount is 100
          pixels. Pixels are basically very tiny squares on your computer screen.
      4:
        image: notes/C2_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees.
          And when we drag that out that makes our artist turn a certain amount. So
          you can play around with how far you want the artist to turn. This is a
          90 degree turn.
      5:
        image: notes/C2_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values
          by clicking the arrows next to the numbers for pixels and degrees. Enjoy
          drawing with your artist!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials
          on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options.
          Sometimes people think of this as only 1s and 0s. But you can represent
          binary with combinations of on or off, up and down, in and out or really
          any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hi, I'm Orion and I program robots here at Play-im. All computer and
          robot brains at their most fundamental level are little electronic gates.
          When the gate is open, electricity can flow through and when it's closed,
          electricity can't.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: An example of binary on the robot is the robot's eyes. The robot's eyes
          are LEDs and those are lights that are either on or off. It's a binary system,
          one or the other. We can use the lights to represent binary numbers. If
          we have a set of robots, we can say that the first robot is the 1s place
          and the second robot is the 2s place, the third robot is the 4s place and
          so on. That's how you represent a binary number. The robots will do it with
          their binary eyes and count it out for you.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions
          based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: I want to walk to the park but first I have to decide whether I should
          bring an umbrella or not. So I look out the window. If it's cloudy, I'm
          going to take my umbrella. Else, I'll take some sunglasses. I think I'd
          better take the umbrella. What I see and hear determines what I take to
          the park.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Conditionals are used in games too. Today we're going to practice using
          conditionals with a card game. In this game, the card that I draw determines
          what my friends are going to do. If I draw a seven, everyone claps. Else,
          everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals.
          Give it a try! Conditionals are what make computers seem smart. A computer
          program that includes conditionals can react to the user and change its
          course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Think about your favorite video game. Do you earn more points for some
          actions than you do for others? This occurs because the computer is using
          conditionals. It's the way a computer makes a decision. How about, if you
          hit the target, you earn ten points. Else, you lose three. When you know
          how conditionals work, you can create all kinds of exciting games.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is
          something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Let's debug this code by slowing down the speed and watching it as it
          goes through each block step by step.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh, there's the problem! The cat's whiskers are 75 pixels long, not
          25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: On your head you hold your hat and your smarts will tell you where you're
          at and to think about the zoo, and to nod hello to you and you! Use your
          head when you're online to keep what's yours inside your mind and to know
          how to be safe, how to give your life some private space! From your head
          down to your toes, pause, think about it. From your feet up to your nose,
          pause and think online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use your heart to grow and grow, and to give yourself a healthy glow,
          and to make a valentine, tell someone that you'll be mine! Use your heart
          when you're online, feel what's right and always kind, and show your friends
          respect, to be fair and nice on the internet. From your head down to your
          toes, pause, think about it. From your feet up to your nose, pause and think
          online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use your arms to hug your pet, to keep your clothes from getting wet,
          and to wear your favorite sleeves and to help you fly and make believe.
          Use your arms when you're online, to take break and balance time and leave
          your tech behind and to find yourself a tree to climb. From your head down
          to your toes, pause, think about it. From your feet up to your nose, pause
          and think online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use your gut to store your food, and to listen to its growling mood,
          to make a belly flop, and to feel the gas in soda pop. Use your gut when
          you're online, to know to watch for certain signs, and to let it guide the
          way and tell you when it's not ok. From your head down to your toes, pause,
          think about it. From your feet up to your nose, pause and think online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: So think with your head, and feel with your heart, balance with your
          arms, listen to your gut, online. Use your legs to run and kick, and to
          jump and bounce on a pogo stick, and to dance around the block, and to skip
          along in your smelly socks. Use your legs when you're online, to stand up
          to bullies who cross the line, and remember to stand tall, be nice to creatures
          great and small.
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet
          up to your nose, pause and think online! So think with your head, and feel
          with your heart, balance with your arms, listen to your gut, stand up with
          your legs. From your head down to your toes, pause, think about it. From
          your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched,
          copied, shared, broadcast and is permanent. What kind of digital footprint
          are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: This lesson is called "Graph Paper Programming" and it's all about algorithms.
          Today we're going to learn how to write programs that show each other how
          to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: An algorithm is a list of instructions for completing a task. We'll
          follow this set of instructions to make the bowl. Algorithms are really
          helpful when you need someone else to understand how to do something.
      3:
        image: notes/C2_graph_paper_3.png
        text: If you're writing an algorithm for a computer, you have to break it
          down to little tiny steps. So finish this row and go to the next, then the
          next one, and you'll be done.
      4:
        image: notes/C2_graph_paper_4.png
        text: I use algorithms in my work. If I write down all of the steps I can
          recreate that same piece again, or I can teach someone else to do it. Put
          the glass in the kiln, fuse it together, follow the rest of the instructions
          to make the bowl. Algorithms give you a road map for getting something done.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when
          we are programming our artist. We already have some blocks out on our stage
          but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag
          out the repeat block and put the moveforward and turn right blocks inside
          the repeat block. When we hit run, the artist will repeat those steps four
          times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: A loop is a repetition of activity. Going into a hive to inspect, I
          look at a frame, and then I put it back. I repeat that same activity multiple
          times. It's looping around, doing the same activity multiple times.
      2:
        image: notes/C2_bee_loops_2.png
        text: This is the repeat block. Whatever you put inside the repeat block will
          repeat those actions the number of times that you tell it to. For example,
          in this level, rather than drag out move forward and get nectar three times,
          we're going to just drag them out once each and repeat the action three
          times. That made it easy!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C2_maze_intro_3.png
        text: If I drag the move block to our work space and press "Run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C2_maze_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "Run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: If you ever want to delete a block, just remove it from the stack and
          drag it to the trash can. After you've hit run, you can always hit the reset
          button to get the bird back to the start. Now let's get those pigs!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things
          that people do everyday. Cookie recipes and directions for building a birdhouse
          are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Today we're gonna make, create, and test an algorithm for a paper airplane.
          But first, we need to break this big project into easy to follow small steps.
          For making a paper airplane, we need to decide what steps to take and in
          what order to take them.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: You'll create your algorithm by first cutting apart the pictures. Next,
          you'll select the 6 pictures that show the steps needed to make a paper
          airplane and arrange those pictures in the correct order. After you have
          everything in order, you will trade algorithms with another student team
          to test out the algorithm to see if the algorithm works. A well designed
          algorithm is super important to making the best paper airplane.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: When we want to make chocolate, there are many big steps to that process.
          And each of those big steps has its own set of smaller steps. And there
          are different recipes, or algorithms, depending on how we want the chocolate
          to taste. Each step is important, even the small ones. So without one step,
          the rest of them cannot be completed. Creating algorithms that others can
          understand is really important. That's why each step has to be written down,
          so no matter who does it, the result is the same.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: До цього часу ми створювали анімації або складали історію, у якій щоразу
          при запуску проекту виконувались точно однакові команди. Тепер можна створити
          інтерактивну гру, в яку насправді можна пограти.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Існують блоки "коли натиснено стрілку" та "перемістити персонажа". Можна
          розмістити ці блоки поряд, щоб переміщувати персонажів за допомогою клавіш
          зі стрілками.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Today we're going to do relay programming. It's all about programming
          under pressure and debugging the mistakes that sometimes happen when you
          work really quickly or in teams. We'll use graph paper programming to simulate
          coding, and use relay races to simulate having a deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: In relay programming, teams will be racing to finish a graph paper program.
          You have to check your teammate's work, or debug it, fix it if there's a
          mistake, add your arrow, and run back and tag your teammate.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms
          or code. There are lots of ways to debug problems. One of the easiest is
          to move step by step until you find where something goes wrong, then fix
          it.
      4:
        image: notes/C2_relay_programming_4.png
        text: Here, I'm trying to do a back handspring, but I keep falling off. I
          walk through each part, step by step, and realize where my mistake was.
          My coach showed me I wasn't putting my hands on the beam correctly. So I
          tried another back handspring on the beam with my new hand position, and
          I stuck it! I was really glad I debugged my back  handspring. We figured
          it out! Debugging is finding and fixing problems. Nice, good job!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: One thing that computers are really good at is repeating commands. As
          a person, you'd get really bored if you had to do the same thing lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times, and not get bored and be able to carry that out really well.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: So for example if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than a century to actually
          write out all of those emails to everyone. But with just a few lines of
          code, I can have a system send an email to everyone on Facebook wishing
          them a happy birthday. So that's what loops are, and why they're valuable,
          and something that computers can do very well.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: In this example your goal is going to be to move the bird to get the
          pig.  Now we're gonna be able to use the "repeat" block in order to be able
          to do this very easily. You can either do this by giving the computer a
          "move forward" command five times in order to advance the bird one step
          each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Or you can just tell the computer to "move forward" once, and then tell
          it to "repeat" that 5 times, and it will do the same thing. So in order
          to do this you drag your "move forward" command, and then you put it inside
          the "repeat" block.And you can click on it and tell it how many times you
          want to repeat the block to tell it how many steps you want it to take forward.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Now one more thing is you can put as many commands as you want inside
          the "repeat" block. So in this example you're telling it to move forward
          and turn left, which it will do five times. All right good job and have
          fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C3_artist_functions_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square, so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code. It will get done
          for us. We've added that concept to our programming language.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: You wouldn't even qualify for the race if you don't have people who
          are proficient in computer science because of how much data the cars collect
          and the necessity to be able to have people that can write programs to figure
          out how you continue to figure out how to build performance.
      2:
        image: notes/C3_artist_intro_2.png
        text: In these puzzles, you'll be an artist that uses a pencil to draw different
          shapes. Wherever your artist goes, it will draw a line behind you.
      3:
        image: notes/C3_artist_intro_3.png
        text: To move around the canvas, you'll use the move forward block. Here the
          move forward block says move forward by 100 pixels. When we hit run, what
          happens? The artist moves forward a certain amount and that amount is 100
          pixels. Pixels are basically very tiny squares on your computer screen.
      4:
        image: notes/C3_artist_intro_4.png
        text: The other block we have in this puzzle says turn right by 90 degrees.
          And when we drag that out that makes our artist turn a certain amount. So
          you can play around with how far you want the artist to turn. This is a
          90 degree turn.
      5:
        image: notes/C3_artist_intro_5.png
        text: And this is a 120 degree turn. And remember, you can change these values
          by clicking the arrows next to the numbers for pixels and degrees. Enjoy
          drawing with your artist!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: When you put a loop inside of another loop, we call that a nested loop.
          For example, here we're given the code already to draw one triangle with
          sides of length 100 pixels using the repeat times block set to three, once
          for each side of a triangle.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: But we want to draw six triangles. In order to do that, we're going
          to take that loop and place it inside of another repeat times block. Pretty
          cool!
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: This is the conditional block. It says IF there is nectar or honey that
          is less than, equal to or greater than a number, THEN do something.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: This is useful when we don't know how much nectar or honey to get, as
          we see here with this question mark.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: In this example, we're going to say IF the purple flower has nectar
          greater than 0, get nectar. That will tell our bee to keep getting nectar
          as long as it's there. Ta-dah!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define
          new commands, how to add your own words to a computer language. Most computer
          languages have only about one hundred words or commands. The art and magic
          is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: We do this all the time in sports. For example, in basketball, you start
          by learning how to dribble, how to do a lay-up, how to rebound. Once you've
          learned these really basic moves, you learn new moves and put together these
          building blocks, like a pick and roll or give and go. You can then go from
          there to do more complex plays. Once you learn that play and give it a name,
          everybody on the team knows how to do it.
      3:
        image: notes/C3_bee_functions_3.png
        text: Similarly once you've taught a computer how to do an action once using
          these sequences of commands, you can make up your own name for that action
          so it's easy to repeat it later. When you define your own command and give
          it a name, that's called a function. Now we're going to use functions to
          help the bee.
      4:
        image: notes/C3_bee_functions_4.png
        text: In this example, our function is called get 2 nectar, this green block
          right here. We know what get 2 nectar does by looking at this grey box which
          is the function definition. If we look inside there, the get 2 nectar is
          going to get nectar and then get nectar again. Always look at what's inside
          the grey box so that you know what these green function blocks can do.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Now we're going to use nested loops with the bee. We're given some starter
          code which tells the bee to move forward and get nectar three times and
          then turn right. Let's take that whole piece of code and nest it inside
          another repeat block and set to repeat three times. Done!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: You're going to be creating your very own bounce game that you'll be
          able to share with your friends! How cool!
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow
          keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: We can do this by linking the when left arrow block to the move left
          block and the when right arrow block to the move right block. Give it a
          go and you'll be programming your own bounce game in no time!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: This lesson is computational thinking. Sometimes learning a new game
          can be tough, right? At first it might seem really confusing and sometimes,
          there's no one there to teach you the rules, so you have to figure it out
          on your own.
      2:
        image: notes/C3_computational_thinking_2.png
        text: The good news is that you can get better at figuring things out on your
          own when you know a few thinking tricks. These tricks are unique ways for
          looking at and solving problems. In this lesson, you'll learn about four
          tricks and practice them with your friends to figure out the rules to a
          game.
      3:
        image: notes/C3_computational_thinking_3.png
        text: When you break down a big problem into smaller pieces, you're using
          your brain to decompose the big problem. Once we've decomposed the big problem
          into several smaller problems, we can go on to our next trick, which is
          called pattern match.
      4:
        image: notes/C3_computational_thinking_4.png
        text: That's when we look for similarities between things. Once I find the
          things that are the same, I can figure out what things are different. When
          I remove those differences, that's called abstraction.
      5:
        image: notes/C3_computational_thinking_5.png
        text: After I have figured out the steps to solving a problem, I can put those
          steps in a specific order called an algorithm so that anyone can use my
          directions to solve that problem. We're going to use these four steps to
          figure out how to play the game with no rules. By the end of the game, you'll
          be able to play something that looks like this!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: This lesson is called crowdsourcing. In this lesson we'll use a deck
          of cards to learn about how much easier some things can be to do in groups
          instead of trying to do them all alone. So grab some friends and make something
          awesome. Crowdsourcing is getting help from a large group of people to finish
          something faster.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: When you see a movie, each second of the movie is 24 individual pictures,
          we call those frames. So every one of those pictures needs to be created
          and rendered and put all together. My team and I, we're all software developers.
          We all work together to create a piece of software that actually creates
          an image, creates the final image that you see on screen. That's a tool
          that artists and other developers can use as part of their teamwork and
          their process to be able to create the images that they want on screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: While loops are pretty similar to what you do in everyday life. Imagine
          you are washing your car, you'll keep scrubbing until it's clean. While
          it's not clean, continue to scrub. You're evaluating these things all the
          time.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: Unlike the Postal Service, the first thing that happens is that the
          internet breaks the message into smaller parts so it can be sent more easily.
          These small parts are called packets. Each packet of the message is delivered
          to the destination one at a time. These packets are all put together in
          the right order so that the receiver can read the message correctly. Of
          course, there are many more things to learn about how the internet works
          but this is a great start. You're on your way to becoming a savvy internet
          user! Be sure to tell your family and friends what you've learned!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: The if block helps the zombie make a decision. It checks something.
          For example, let's use the block that says if there's a path to the left,
          and put a turn left command inside it. We're telling the zombie to check
          its surroundings, see if there's a path on the left and if so, make that
          turn.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Then we use the move forward block inside this repeat to get it to keep
          moving forward as long as it just wants to go straight. Then when there's
          a turn, the if block will tell it to make that turn to the left. You can
          see that if we do that, if we take the turn to the left and otherwise moving
          forward, we'll achieve our goal.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: It's an example of using an if statement which is really a fundamental
          concept in computer programming. One of the first things I learned was how
          to write a program that played tic-tac-toe. I had if statements to say,
          ok, if the other person is about to win, go ahead and block that spot. Have
          fun learning how to use if statements, it's a key concept.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could
          use five move forward blocks or we could tell the computer to move forward
          and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move
          forward block inside the repeat block. Hit run and the zombie will move
          forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: До цього часу ми створювали анімації або складали історію, у якій щоразу
          при запуску проекту виконувались точно однакові команди. Тепер можна створити
          інтерактивну гру, в яку насправді можна пограти.
      2:
        image: notes/playlab_2.png
        text: Існують блоки "коли натиснено стрілку" та "перемістити персонажа". Можна
          розмістити ці блоки поряд, щоб переміщувати персонажів за допомогою клавіш
          зі стрілками.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program.
          The written notes and words tell the singer exactly what to do. Some parts
          of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program
          that are used over and over again are called functions. When you read song
          lyrics and it says the word chorus, do you sing the word chorus? No, you
          look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: In this lesson, you'll learn a silly little song called little bunny
          foo foo. The song has a chorus that you will sing several times over and
          over again. A function is a piece of code that you can call and use over
          and over again. It makes programming easier and more efficient so you don't
          have to write out the steps of your function over and over again. You can
          just write it once!
