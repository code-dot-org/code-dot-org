"uk":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: "Ласкаво просимо до вашої першої години коду! Нумо, не зволікаючи, зробімо
          першу спробу в програмуванні."
      2:
        image: notes/hoc1_2.jpg
        text: "Ми будемо використовувати Блоклі - візуальну мову програмування, де
          код програми не пишуть, а перетягують команди-блоки."
      3:
        image: notes/hoc1_3.jpg
        text: "Більшість програмного коду потрібно набирати, але Blocky є візуальним
          середовищем. Кожен блок відповідає одному рядку коду."
      4:
        image: notes/hoc1_4.jpg
        text: "Ви дізнаєтесь основи інформатики та поняття, які використовуються всюди,
          від програмування до контролю марсохода."
      5:
        image: notes/hoc1_5.jpg
        text: "Програма - це набір інструкцій, які має виконати комп'ютер."
      6:
        image: notes/hoc1_6.jpg
        text: "Метою вашої першої програми є перевести Злого Птаха через лабіринт
          до Зеленої Свині."
      7:
        image: notes/hoc1_7.jpg
        text: "Ліворуч розміщено лабіринт, у якому виконуватиметься програма. Вказівки
          для кожного завдання знаходяться під лабіринтом."
      8:
        image: notes/hoc1_8.jpg
        text: "Середня секція містить команди для Злого Птаха. Ви їх використаєте
          для побудови коду."
      9:
        image: notes/hoc1_9.jpg
        text: "Праворуч міститься робоча область, в яку перетягуються блоки з панелі
          інструментів для побудови програми. Щоб видалити блок, його потрібно перетягнути
          у смітник в кутку."
      10:
        image: notes/hoc1_10.jpg
        text: Кожен блок - це одна команда. Якщо ви перетягнете блок "рухатись вперед"
          на робочу область і натиснете "Запуск програми", птах переміститься на одну
          позицію в лабіринті.
      11:
        image: notes/hoc1_11.jpg
        text: "Щоб виконати більше однієї дії, перетягни кілька блоків на робочу область
          та з'єднай їх. Птах виконуватиме команди згори донизу."
      12:
        image: notes/hoc1_12.jpg
        text: Якщо програму запущено і бажаєш ще щось виправити та повторити спробу
          - натисни кнопку "Скидання".
      13:
        image: notes/hoc1_13.jpg
        text: "Нумо, дістанемо цих свиней!"
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: "Привіт, я JR! Для перемоги кожна команда потребує фахівців з комп'ютерних
          наук. Вони аналізують дані, отримані від автомобіля, щоб він рухався швидше."
      2:
        image: notes/stage5_2.jpg
        text: "У цих завданнях ви будете художником, який повсюди малює за собою лінію."
      3:
        image: notes/stage5_3.jpg
        text: Цей блок вказує "рухатись вперед на 100 пікселів". Пікселі - це маленькі
          крапки на екрані.
      4:
        image: notes/stage5_4.jpg
        text: Цей блок вказує "повернути праворуч на 90 градусів". Це дозволить повернути
          художника на вказаний кут, так само як блок "поворот" у завданнях лабіринту.
      5:
        image: notes/stage5_5.jpg
        text: "Клацни на стрілці у будь-якому з цих блоків для того, щоб змінити те,
          наскільки художник переміщується вперед чи повертає. Поекспериментуй з цими
          новими блоками."
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: "Привіт, я Паола! У цих завданнях ти допоможеш фермерці очистити поле
          для посадки рослин."
      2:
        image: notes/stage9_2.jpg
        text: "Вам потрібно допомогти видалити всі купи землі та заповнити всі ямки."
      3:
        image: notes/stage9_3.jpg
        text: "Нові блоки видаляють 1 відро землі з купи і засипають в ямку 1 відро
          землі."
      4:
        image: notes/stage9_4.jpg
        text: "Купи та ямки різного розміру, тому потрібно вказати фермерці, скільки
          використати відер."
    flappy_intro:
      1:
        image: "примітки/flappy01.jpg"
        text: "Привіт, Я Кеті! Одна із найбільш захопливих речей в інформатиці - це
          те, що комп'ютерна програма може бути інтерактивною."
      2:
        image: "примітки/flappy02.jpg"
        text: "Щоразу коли хтось клацає чи торкається екрану комп'ютера чи телефону,
          це утворює ПОДІЮ, і існує код, який вказує, що робити при настанні певної
          ПОДІЇ."
      3:
        image: "примітки/flappy03.jpg"
        text: 'Наприклад, можна мати ОБРОБНИК ПОДІЇ, який вказує "коли клацнули мишкою,
          грай звук" '
      4:
        image: "примітки/flappy04.jpg"
        text: "Ви коли-небудь чули про пташка Пурха (його ще знають як FlappyBird)?
          Використовуючи обробники подій, ми навчимось програмувати нашого власного
          Пурха!"
      5:
        image: "примітки/flappy05.jpg"
        text: "Код, який ви створите, передбачає перетягування блоків, які утворюють
          команди для комп'ютера. Всередині кожен з цих блоків складається зі справжнього
          коду."
      6:
        image: "примітки/flappy06.jpg"
        text: 'Якщо ви поглянете на робочу область, на ній вже розміщені деякі зелені
          блоки - це "обробники подій" '
      7:
        image: "примітки/flappy07.jpg"
        text: Якщо ви хочете, щоб птах змахував крилами при Клацанні мишкою, можна
          додати блок "махати" до відповідного обробника події, і тепер щоразу при
          клацанні мишкою птах змахуватиме крилами.
      8:
        image: "примітки/flappy08.jpg"
        text: "У кожному завданні ми додаватимемо нові типи подій у вигляді зелених
          блоків на робочій області, і ви можете вирішувати, які саме блоки додавати
          для реакції на ці події."
      9:
        image: "примітки/flappy09.jpg"
        text: "Коли ви побачите подібну стрілку вниз, це означає, що можна змінювати
          налаштування - наприклад, який саме звук грати, коли Пурх вдаряється об
          змелю."
      10:
        image: "примітки/flappy10.jpg"
        text: "В останньому завданні ви зможете створити власну гру і поділитися нею
          з друзями. Успіхів!"
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: "Привіт, я Марк! Дізнаємось про цикли. Використання циклів вказує комп'ютеру
          повторити будь-який набір команд знову і знову, сотні, або й мільйони разів."
      2:
        image: notes/hoc2_2.jpg
        text: "У цьому завданні ми хочемо змусити птаха рухатись вперед на 5 позицій,
          щоб дістатись до свині."
      3:
        image: notes/hoc2_3.jpg
        text: Ми можемо використати новий блок "повторити".
      4:
        image: notes/hoc2_4.jpg
        text: Замість того, щоб перетягувати 5 блоків "рухатись вперед"...
      5:
        image: notes/hoc2_5.jpg
        text: Ми можемо поставити блок "рухатись вперед" всередину блоку "повтори"
          і записати число всередині блоку, щоб вказати скільки разів слід повторити
          цю дію.
      6:
        image: notes/hoc2_6.jpg
        text: 'І це важливо: можна розмістити кілька команд всередині блоку "повтори".'
      7:
        image: notes/hoc2_7.jpg
        text: Розважайтесь зі своїм новим блоком "повторити"!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Привіт, я Кріс. Перед тим, як приєднатись до команди Miami Heat, я вивчав
          комп'ютерні науки в Технічному інституті Джорджиї. Спробуймо новий блок
          - "повторити до".
      2:
        image: notes/hoc3_2.jpg
        text: "А якщо ми не знаємо, як далеко потрібно переміститись птахові, щоб
          дістатись до свині?"
      3:
        image: notes/hoc3_3.jpg
        text: Якщо ми розмістимо блок "рухатись вперед" всередині блоку "повторювати
          до", птах рухатиметься вперед доти, доки не дістанеться свині (або доки
          не вріжеться в стіну).
      4:
        image: notes/hoc3_4.jpg
        text: 'І це важливо: так само, як і раніше, ми можемо розмістити кілька блоків
          всередині блоку "повторювати до", і вони будуть повторюватись.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: "Привіт, я Білл! Вивчимо нове базове поняття: команду галуження, яка
          допомагає комп'ютеру приймати рішення."
      2:
        image: notes/hoc4_2.jpg
        text: "Ви самі використовуєте команду галуження щодня. Перед виходом з дому
          щоранку ви аналізуєте: ЯКЩО йде дощ, то треба одягнути плащ."
      3:
        image: notes/hoc4_3.jpg
        text: "Ми можемо вказати зомбі перевіряти, чи є шлях ліворуч, і ЯКЩО є шлях
          ліворуч, ми вкажемо йому повернути в цьому напрямку."
      4:
        image: notes/hoc4_4.jpg
        text: Щоб створити цей код, перетягнемо блок "якщо" і поставимо блок "повернути
          ліворуч" всередину.
      5:
        image: notes/hoc4_5.jpg
        text: Тепер, коли ми вгорі поставили блок "рухатись вперед" і навколо всього
          блок "повтори", щоразу коли зомбі рухається, він перевірятиме наявність
          шляху ліворуч та повертатиме. Команда "повторити" є критичною, щоб перевіряти
          можливість повороту на кожному кроці.
      6:
        image: notes/hoc4_6.jpg
        text: "Команда розгалуження є дуже важливою в інформатиці. Одна з перших,
          створених мною програм, була гра хрестики-нулики, і в галуженні я перевіряв:
          ЯКЩО другий гравець може виграти, слід заблокувати цю виграшну позицію."
      7:
        image: notes/hoc4_7.jpg
        text: "Розважайтесь з блоком „якщо“!"
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Привіт, мене звуть Салоні. Я використовую програмування, щоб вирішувати
          задачі в охороні здоров'я та медицині. Зараз ми дізнаємось про блок "якщо-то-інакше".
          Він виглядає схоже на блок "якщо", але має додаткову частинку "інакше".
      2:
        image: notes/hoc5_2.jpg
        text: Якщо я поставлю блок "рухатись вперед" в область "робити", і "повернути
          ліворуч" в область "інакше", це означає, що зомбі буде вибирати між двома
          варіантами. ЯКЩО попереду є шлях, то він рухатиметься вперед, ІНАКШЕ (якщо
          шляху попереду немає), зомбі поверне ліворуч.
      3:
        image: notes/hoc5_3.jpg
        text: Так само, як із блоком "якщо", ми можемо розмістити блок "якщо-інакше"
          всередині блоку "повторити", щоб зомбі продовжував рухатися, а блок "якщо-інакше"
          допоможе перевірити чи потрібно повертати.
      4:
        image: notes/hoc5_4.jpg
        text: "Отож, відправимо зомбі на місця!"
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Команда "якщо-інакше" є прийняттям рішення з-поміж двох варіантів. Подивимося,
          як можна використати команду "якщо-інакше", щоб допомогти нашому другу Скрету.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Цей блок виглядає так само, як блок "якщо", але має додаткову частину
          внизу, що відповідає за дії "інакше". Якщо я поставлю блок "рухатися вперед"
          в область "робити", а блок "повернути ліворуч" в область "інакше", це означає,
          що Скрет буде рухатися вперед, якщо попереду є шлях. Якщо шляху вперед немає,
          Скрет поверне ліворуч.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Це прийняття рішення і виконання однієї з двох дій на основі цього рішення.
          І точно так само, як із блоком "якщо", ви можете розмістити блок "якщо-інакше"
          всередині блоку "повторити".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: "А тепер допоможемо Скрету дістатись до свого жолудя!"
    function:
      1:
        image: notes/stage13_1.jpg
        text: "Привіт, я Бріна, інженер в Інстаграмі. Функція - це певні рядки коду,
          які ви хочете використати багато разів, тож замість того, щоб щоразу повністю
          писати цей код, можна використати один блок."
      2:
        image: notes/stage13_2.jpg
        text: "Ми дізнаємось, як визначати функції. Визначення функції починається
          із зірочки в кутку. Назва функції записується у верхньому рядку."
      3:
        image: notes/stage13_3.jpg
        text: Блоки, розміщені всередині визначення, вказують, що робити. Наприклад,
          це визначення функції називається "заповнити 5" і складається з блоку "повторити"
          та блоку "заповнити".
      4:
        image: notes/stage13_4.jpg
        text: Визначення на потрібному місці, але наша фермерка не зможе виконати
          функцію, поки ми не перетягнемо блок "заповнити 5" з  категорії функцій.
      5:
        image: notes/stage13_5.jpg
        text: "Зробимо функцію цікавішою! "
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Привіт, я Макінд! Я розповім про блок "поки". '
      2:
        image: notes/stage9_6.jpg
        text: Блок "поки" виконуватиме дії, розміщені всередині нього, ДО ТИХ ПІР,
          ПОКИ умова на початку блоку залишається ІСТИНОЮ.
      3:
        image: notes/stage9_7.jpg
        text: "Наприклад, якщо фермерка стоїть на купі, вона продовжуватиме видаляти
          по 1 відру землі, ПОКИ є ця купа."
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: "Привіт, я Тріна, я працюю в Піксар. Я працювала над різними фільмами,
          включаючи Шрека."
      2:
        image: notes/stage11_2.jpg
        text: Це наш новий цикл "лічильник". Він виконуватиме дії знову і знову, і
          можна щоразу дещо змінювати ці дії.
      3:
        image: notes/stage11_3.jpg
        text: У цьому прикладі наш цикл "лічильник" вказує "рахувати лічильником від
          50 до 90 через 10", а всередині ми маємо блок "малювати квадрат". Перетягни
          блок "лічильник" з розділу змінних на місце "довжина".
      4:
        image: notes/stage11_4.jpg
        text: "Це означає, що художник малюватиме квадрат, стороною 50 пікселів, тоді
          додаватиме до них 10 і малюватиме квадрат, стороною 60 пікселів. Він продовжуватиме
          додавати 10 та малювати відповідний квадрат, поки не дійде до 90. Так, ми
          матимемо квадрати зі сторонами 50, 60, 70, 80 та 90."
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: "Привіт, я Жанет, і я інженер у Зинга."
      2:
        image: notes/stage15_2.jpg
        text: "А якщо нам потрібно намалювати кілька трикутників зі сторонами різної
          довжини?"
      3:
        image: notes/stage15_3.jpg
        text: "Ми могли б написати код вручну, або використаємо функцію з параметрами."
      4:
        image: notes/stage15_4.jpg
        text: Щоб зробити це, клацни блакитну зірочку на визначенні функції "намалювати
          трикутник". Тоді перетягни "назву параметра" до блоку "вхід".
      5:
        image: notes/stage15_5.jpg
        text: Тепер, якщо ви напишете "довжина" в тому місці, де вказано "х" і натиснете
          "Enter", ви створите вхідну довжину для своєї функції.
      6:
        image: notes/stage15_6.jpg
        text: Потім клацни зірочку. Тепер потрібно клацнути в категорії змінних і
          перетягнути блок "довжина" у блок "рухатись вперед" визначення функції.
          Забери старий блок з числом.
      7:
        image: notes/stage15_7.jpg
        text: Щоб використати функцію з параметрами, клацни на категорії функцій та
          перетягни функцію "намалювати трикутник з довжиною".
      8:
        image: notes/stage15_8.jpg
        text: "Тепер можна використати математичний блок, щоб вводити різні числа
          для побудови трикутників різних розмірів."
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: "Вітання! Розв'язавши останнє завдання, ми щойно сформували код, за
          яким БУДЬ-ЯКИЙ робот може знайти дорогу через лінійний лабіринт чи тунель
          будь-якого розміру, чи це буде зомбі, птах, марсохід, чи навіть автомобіль
          на автоматичному керуванні без водія."
      2:
        image: notes/hoc6_2.jpg
        text: Основні поняття, які ви використали, лежать в основі кожної програми,
          якою ви коли-небудь користувались. Ми познайомились з циклами на певну кількість
          повторів та умовними повторами, а також із розгалуженнями "якщо" та "якщо-то-інакше".
      3:
        image: notes/hoc6_3.jpg
        text: "Якщо вам сподобалась ця перша година коду, відвідайте code.org, щоб
          продовжити вивчення інформатики! У нашому 20-и годинному курсі ви опануєте
          основи програмування і зможете писати програми для телефонів чи роботів,
          ігри - та все, що завгодно."
      4:
        image: notes/hoc6_4.jpg
        text: "Технології змінюють все, чим ми займаємось, і не важливо, якого ви
          віку: програмування - це весело та творчо, і кожен може його опанувати!"
    20_wrapup:
      1:
        image: notes/bird.png
        text: "Примітки показу скоро будуть!"
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: "Привіт, мене звуть Ліндсі. Я модель, актриса і пишу свої власні програми.
          Допоможемо Анні та Ельзі досліджувати магічну красу льодяних узорів за допомогою
          програмування."
      2:
        image: notes/frozen1_2.jpg
        text: "Ви намалюєте сніжинки та крижані візерунки, покатаєтеся на ковзанах
          і створите зимову казку, якою зможете поділитися зі своїми друзями."
      3:
        image: notes/frozen1_3.jpg
        text: "Протягом наступної години ви навчитеся основам програмування. Традиційне
          програмування, як правило, відбувається у тексті, але ми використаємо мову
          Blockly, на основі візуальних блоків, котрі можна перетягувати, щоб створити
          програму. Так вчаться програмувати навіть студенти університетів. Всередині,
          ви все-ж створюєте код."
      4:
        image: notes/frozen1_4.jpg
        text: "Програма являє собою набір інструкцій, які вказують комп'ютеру, що
          робити. Створимо код, або програму, які допоможуть Ельзі намалювати просту
          лінію. Ми використаємо це пізніше для створення складніших узорів."
      5:
        image: notes/frozen1_5.jpg
        text: "Екран розділено на три основні частини. Ліворуч розміщена крижана поверхня,
          на якій виконуватиметься програма. Інструкції для кожного рівня написані
          внизу цією області."
      6:
        image: notes/frozen1_6.jpg
        text: "Область посередині - це панель інструментів, і кожен з цих блоків є
          командою, котру можуть виконати Ельза та Анна."
      7:
        image: notes/frozen1_7.jpg
        text: Білий простір праворуч називається робочою областю, і саме тут ми створимо
          свою програму. Щоб рухатися по крижаній поверхні, використаємо блок "рухатися
          вперед".
      8:
        image: notes/frozen1_8.jpg
        text: Ось, блок "рухатися вперед" вказує рухатися вперед на 100 пікселів.
          Що буде, коли ми натиснемо "Запустити"? Ельза переміститься на певну відстань,
          а точніше на 100 пікселів! Пікселі - це маленькі квадратики на екрані комп'ютера.
      9:
        image: notes/frozen1_9.jpg
        text: Інший блок цього завдання вказує "повернути на 90 градусів". І коли
          ми використаємо цей блок, Ельза виконає поворот. Можеш поекспериментувати,
          на скільки градусів Ельзі потрібно повертати. Кут вимірюється відносно шляху
          попереду Ельзи. Так виглядає поворот на 90 градусів. А так - на 120 градусів.
      10:
        image: notes/frozen1_10.jpg
        text: "Пам'ятай, можна змінити кількість пікселів і градусів, натиснувши стрілочки
          поруч із числами."
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: "Привіт, я Паола! Комп'ютери добре вміють повторювати дії. Ти можеш
          порахувати до 10, 20 або 100. А комп'ютер може рахувати мільярдами або трильйонами.
          Для нього це не буде нудно, і займе всього кілька секунд. Чи у підрахунку,
          чи малюванні або будь-чому іншому - комп'ютери можуть повторювати дії сотні
          або навіть мільярди разів."
      2:
        image: notes/frozen2_2.jpg
        text: У програмуванні ми називаємо це циклом. Цикл— це повторення виконання
          коду знову і знову. У наступному завданні ваша мета полягає у тому, щоб
          допомогти Анні створити квадрат, використавши блок "повторити".
      3:
        image: notes/frozen2_3.jpg
        text: Кожен блок, розміщений всередині блоку "повторити" буде повторювати
          послідовність дій вказану кількість разів.
      4:
        image: notes/frozen2_4.jpg
        text: 'Щоб намалювати квадрат, використайте блоки "рухатися вперед" і "повернути
          праворуч" 4 рази. Але існує простіший спосіб: вказати комп''ютеру "рухатися
          вперед" і "повернути праворуч на 90 градусів" один раз, а потім вказати
          повторити цю пару дій 4 рази. Для цього потрібно розмістити блоки "рухатися
          вперед" і "повернути праворуч" всередині блоку "повторити".'
      5:
        image: notes/frozen2_5.jpg
        text: "Пам'ятайте, що можна змінити число у блоці «повторити», і дії всередині
          блоку будуть повторюватися вказану кількість разів."
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: "Привіт, я Кріс Бош. Я професійний гравець у баскетбол, і я програмував
          у коледжі."
      2:
        image: notes/frozen3_2.jpg
        text: "Одна з найважливіших концепцій інформатики полягає в тому, як створювати
          нові команди. Більшість комп'ютерних мов мають лише близько 100 слів або
          команди. І справді, мистецтво та майстерність програмування лежить у визначенні
          своїх власних команд із цих стандартних блоків."
      3:
        image: notes/frozen3_3.jpg
        text: "Після того, як ви навчили комп'ютер, як виконати дію один раз за допомогою
          певної послідовності команд, ви може вказати свою власну назву для цієї
          дії, і легко повторити її пізніше. Коли ви визначаєте свою власну команду
          і надаєте їй назву - ви створюєте функцію."
      4:
        image: notes/frozen3_4.jpg
        text: "Привіт, я Джесс. У програмуванні за допомогою блоків, ви можете скористатись
          функціями, якщо є набір дій, які ви хотіли б використовувати кілька разів.
          Наприклад, ви написали код, щоб створити квадрат."
      5:
        image: notes/frozen3_5.jpg
        text: 'Це можна визначити як функцію під назвою "створити квадрат." '
      6:
        image: notes/frozen3_6.jpg
        text: "Тепер у вас є новий блок, що дає змогу створювати квадрати багато разів."
      7:
        image: notes/frozen3_7.jpg
        text: "Прості фігури можуть використовуватися для створення складніших узорів.
          У наступному завданні, нещодавно створений код малювання кола, доступний
          у вигляді функції, яку можна використати для малювання кіл різних розмірів.
          Можеш, використавши її, допомогти Ельзі створити складні та красиві візерунки
          на снігу?"
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: "Ми збираємося створити гру за допомогою Ігрової лабораторії. У хорошої
          гри є певний сюжет, із певними персонажами. Ми дізнаємося, як зробити так,
          щоб персонажі виглядали як відьми, інопланетяни чи тваринки, вміли говорити,
          рухатися і взаємодіяти один з одним. До кінця цього підручника ви зможете
          створити гру з самого початку і поділитися нею з друзями."
      2:
        image: notes/playlab_intro_2.png
        text: "Ваш екран поділено на 3 основних частини. Ліворуч - ігровий простір,
          де буде працювати ваша програма. Інструкції для кожного рівня написані внизу."
      3:
        image: notes/playlab_intro_3.png
        text: "Середня область містить панель інструментів, де кожен з блоків являє
          собою певну команду коду. Білий простір праворуч - це робоча область, де
          ми будемо складати програму."
      4:
        image: notes/playlab_intro_4.png
        text: Для початку, потрібно зв'язати блоки і помаранчевий блок "при запуску".
          Можна прикріпити кілька блоків разом, і перетягувати їх, поки не побачите
          жовту мітку, після відпускання вони автоматично розташуються поряд.
      5:
        image: notes/playlab_intro_5.png
        text: У цьому першому завданні, нашим персонажем є пінгвін і ми допоможемо
          йому сказати "Привіт!, перетягнувши блок "говорити" до блоку "при запуску"
          і надрукувавши "Привіт". Ми можемо також перемістити пінгвіна за допомогою
          блоків "рухатися вправо" і "рухатися вліво". Після того як всі блоки розставлено
          на місця, натисніть кнопку запуску, щоб побачити те, що ви запрограмували.
      6:
        image: notes/playlab_intro_6.png
        text: "Розпочинай роботу, і в кінці створиш власну гру з різними персонажами,
          котрі зможуть взаємодіяти, сумувати чи веселитись, заробляти бали, кидати
          вогняні кулі чи навіть застосовувати магію зникнення. Все залежить від тебе,
          і того, що ти хочеш створити."
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: "Тож зараз ми дізнаємося про те, що всі програмісти ігор використовують
          щодня. Це називаються подіями. Подія вказує програмі очікувати, поки щось
          не відбудеться. Коли це станеться, буде виконана певна дія."
      2:
        image: notes/playlab_events_2.png
        text: "Прикладами подій є очікування клацання мишкою, натиснення клавіші зі
          стрілкою чи торкання сенсорного екрану."
      3:
        image: notes/playlab_events_3.png
        text: Отож, ми створимо космонавта, котрий привітається із землянами, коли
          на ньому клацнуть. Використаємо блок «коли клацнули» та вкладемо у нього
          блок "говорити". Коли гравець натискає на космонавта, буде виконано все,
          що вказано в області "коли клацнули". Що скаже ваш прибулець?
      4:
        image: notes/playlab_events_4.png
        text: Існують також блоки "коли натиснено стрілку". Якщо всередині розмістити
          блоки "рухатися", можна переміщувати персонажів вгору, вниз, вліво або вправо.
          Крок за кроком, наша гра стає все більш інтерактивною.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Це блок "повторювати завжди". Розміщене у цьому блоці виконуватиметься
          у грі постійно і завжди.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Якщо ми хочемо, щоб персонаж виконував дію кілька разів, без додаткових
          вказівок від гравця, розмістимо відповідну дію всередині блоку "повторювати
          завжди".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: "У наступному завданні наша мета полягає у тому, щоб допомогти чарівникові
          охороняти кордони володінь, безперервно рухаючись вліво і вправо. Вивчення
          команди повторення збереже море часу в майбутньому, коли ви створюватимете
          власну гру."
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: "Ось твої блоки для малювання. Скористайся одним з них, щоб перемістити
          художника у потрібне для заповнення сірих ліній місце."
      2:
        image: notes/C1_artist_intro_2.png
        text: "Ось блоки стрибання. При використанні них, художник буде рухатися,
          але не малювати, тож використовуй їх для перескакування до наступної сірої
          лінії."
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: Хіба ж бджоли не супер-круті? У наступному наборі задачок твоєю метою
          є допомогти бджілці дістатись до квітів та зібрати нектар, а тоді полетіти
          до стільника і зробити мед. Для виконання вправи тобі знадобляться блоки
          "отримати нектар" і "зробити мед".
      2:
        image: notes/C1_bee_level_intro_2.png
        text: "Кожна квітка має різну кількість нектарів: 1, 2, 3 або більше. Ми знаємо,
          скільки нектару в червоній квітці - це число в кутку. Так що постарайся
          отримати весь нектар з квітки, перш ніж рухатися далі. Крім того, кожен
          стільник може утримувати певну кількість меду: 1, 2, 3 або більше. Тому
          намагайся зробити якомога більше меду, наскільки може вмістити стільник."
      3:
        image: notes/C1_bee_level_intro_3.png
        text: "Якщо зможеш зібрати весь нектар і зробити весь мед, то перейдеш до
          наступного рівня. У протилежному випадку, доведеться виконувати завдання
          знову. Пограйся трохи і побачиш, як це - бути бджілкою-програмістом!"
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: "Цикл - це повторення дій. Тож перевіряючи вулик, я розглядаю рамку,
          ставлю її на місце, і повторюю ці дії кілька разів. Це повторення у циклі,
          кількаразове виконання дій."
      2:
        image: notes/C1_bee_loops_2.png
        text: На цьому рівні нам потрібно, щоб бджілка зібрала з квітки три нектари.
          Замість використання трьох блоків "отримати нектар", ми скористаємось блоком
          повторення, щоб отримати нектар тричі. Натисни "Виконати" і перевір, чи
          все вийшло. Чудово!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Цей урок називається "велика подія". Він про те, як ми можемо керувати
          програмами і змінювати їх роботу на ходу, використовуючи події, такі як
          натискання кнопки чи клацання мишки.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: "На цьому уроці ми керуватимемо людьми за допомогою паперового дистанційного
          пульта. Це ніби відео-гра в реальності."
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: "Подія - це дія, яка спричиняє певні дії. Наприклад, коли клацнути кнопку
          миші, завантажиться веб-сторінка. Це і є подія. Коли ми торкаємось до екрану
          планшета - це теж подія. Події - це чудовий засіб користувача для передавання
          вказівок у програму, коли ми хочемо, щоб вона виконала якусь дію."
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: "Своїми діями ми реагуємо на навколишні події. Коли ми голодні, ми йдемо
          до холодильника. Ми чуємо, що поштар прийшов і поклав пошту в скриньку,
          і можемо її забрати. Це такі ж події, як натиснення кнопки чи переміщення
          джойстика. Це те, що відбувається і спричиняє подальші дії."
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: У відео-іграх є подія, котра називається "Оновити" і вона трапляється
          кожні 30 або 60 секунд. Для програмістів відео-ігор це майже так само важливо,
          як і події кнопок чи джойстика.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: Основна подія, за якою ми слідкуємо - це "Оновлення". А тоді ми перевіряємо
          джойстик. Тож ми кажемо, "Хтось натиснув кнопку на цьому кадрі? Так чи ні?"
          Без подій гравець не міг би рухатись, стрибати, і не можна було би ним керувати.
          У відео-грі не можна би було нічого анімувати.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: "Маючи досвід будування піщаних скульптур, ми знаємо, що невдачі є частиною
          норми. Але наполегливість приносить результат, все кращий та захопливіший.
          Наполегливість - це частина гри. Продовжуй, і тобі сподобається."
      2:
        image: notes/C1_building_foundation_2.jpg
        text: "Цей урок називається побудовою основ. Ми працюватимемо над завданням,
          яке має бути дуже складним. Спробуємо розібратися, як створити структуру
          принаймні такої ж висоти, як ці чашки, і настільки міцну, щоб витримати
          вагу книги."
      3:
        image: notes/C1_building_foundation_3.jpg
        text: "Бувають моменти, коли наше творіння не спрацьовує. Бувають моменти,
          коли ми дратуємось і хочемо здатись. Таких моментів може бути багато. Але
          якщо продовжувати пробувати, намагатись зробити якомога краще знову і знову,
          то рано чи пізно все вийде."
      4:
        image: notes/C1_building_foundation_4.jpg
        text: "Наполегливість - це продовжувати робити навіть тоді, коли хочеться
          здаватись. Якщо хочеш створити щось нове і оригінальне, на цьому шляху буде
          багато невдач."
      5:
        image: notes/C1_building_foundation_5.jpg
        text: "Основою наполегливості є продовжувати спроби і вчитись на помилках
          замість того, щоб здатись через розчарування. Розчарування насправді означає,
          що за рогом нас чекає щось прекрасне. Тож не здавайся, поки не дістанешся
          до нього! Давай!"
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: "Привіт, мене звуть Мірал Котб, і я створив Iluminate. У моїй роботи
          є те, що ми використовуємо і в танцях, і в програмуванні світлових костюмів.
          І це цикли! Цикли означають багаторазове повторення дій."
      2:
        image: notes/C1_getting_loopy_2.png
        text: "Коли ми повторюємо щось багато разів, наприклад мої дії з крутіння
          обруча, відбувається повторення тієї ж дії. Це цикл. І це цикл. І ще один
          цикл."
      3:
        image: notes/C1_getting_loopy_3.png
        text: "Сьогодні у нас дискотека. Ми розберемо цикли і нові рухи. Ітерація.
          Ми дізнаємося про цикли за допомогою танців. Вивчимо кілька простих рухів
          і повторимо їх багато разів, щоб завершити танець."
      4:
        image: notes/C1_getting_loopy_4.png
        text: "Ось рухи, які потрібно вивчити. Плесніть у долоні. Покладіть руки за
          голову. Тепер покладіть руки на талію. Підніміть ліву руку. Підніміть праву
          руку. Просто, правда ж? Виявляється можна скоротити вказівки, розміщуючи
          етапи танцю в циклі."
      5:
        image: notes/C1_getting_loopy_5.png
        text: "Насправді у танці ми використовуємо цикли. Одяг танцюристів має комп'ютери,
          під'єднані до єдиної мережі. Можна проходити по циклу лампочок до того ж
          танцюриста знову і знову. В циклі можна виконувати повторення, коли я вказую
          що потрібно пройти через шістьох танцюристів знову і знову, а тоді збільшити
          швидкість світла у цьому циклі. І все це робиться за допомогою циклів. Цикли
          важливі у програмуванні, бо вони роблять нашу роботу коротшою та легшою."
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: "Цей урок називається Щасливі карти. Сьогодні ми допоможемо маленькій
          пухнастій подрузі Флурб дістатись до фруктів."
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: "Допоможи Флурбі дістатись до фрукта. Щоб це зробити, потрібно визначити,
          яким шляхом має рухатись Флурб і скерувати її за допомогою стрілок. Щоб
          Флурб дісталась до яблука, у якому напрямку потрібно рухатись? Скеруй її
          вгору."
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: "Щоб скерувати її, обведи напрямок, в якому потрібно рухатись."
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: "Створи алгоритм, з'єднуючи стрілки поряд з картою, яку намагаєшся пройти.
          Друга така ж, тільки повернута вниз."
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: "Це як програмування на папері. І все!"
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: "Налагодження - це процес пошуку та виправлення помилок. Існує багато
          способів проводити налагодження. Один із найпростіших - рухатись покроково,
          поки не знайдемо моменту, коли з'являється помилка. Ось тут я намагаюсь
          зробити колесо назад на колоді, але постійно падаю."
      2:
        image: notes/C1_maze_debugging_2.png
        text: "Я проходжу кожен етап покроково, і усвідомлюю, де моя помилка. Я не
          правильно ставлю руки на колоду. Тож я ще раз пробую зробити зворотнє колесо
          на колоді вже по-іншому ставлячи руки - і все виходить! Я дуже задоволений,
          що налагодив своє зворотнє колесо."
      3:
        image: notes/C1_maze_debugging_3.png
        text: "Щоб розглянути налагодження, почнемо з набору блоків, котрі вже є на
          сцені. Можеш зауважити, що ці блоки не дозволять дістатися цілі. Нам потрібно
          налагодити проект і виправити його. Що ж пішло не так? Можеш зауважити,
          що потрібно було пройти на один блок далі на Захід."
      4:
        image: notes/C1_maze_debugging_4.png
        text: "Спробуємо виправити це, додавши ще один блок руху на Захід, і натиснувши
          Запустити, щоб перевірити, що все правильно. Так, все вдалося!"
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: "У цьому завданні потрібно провести пташку до свині. Розглянь завдання
          і подумай, які напрямки потрібно вказати."
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Потрібно перетягнути блоки з панелі інструментів на робочу область.
          Переконайся, що вони розміщені під блоком "коли гра починається", і коли
          вважатимеш, що складено правильне рішення, можна клацнути "Запустити" і
          подивитись, як пташка рухається до свині.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: "В чому комп'ютери дуже успішні - це у повторенні команд. Для людини
          стане нудно повторювати одне і те ж багато разів підряд. А комп'ютер можна
          виконати одну і ту ж дію мільйони, чи навіть мільярди разів, не нудьгуватиме,
          і не втомиться, і робитиме це дуже вправно."
      2:
        image: notes/C1_maze_loops_2.png
        text: "Наприклад, якби я захотів привітати усіх користувачів Фейсбуку з днем
          народження, надсилаючи їм електронні листи, у мене на це пішло би близько
          століття. А за допомогою кількох рядків коду я можу створити систему розсилки
          електронних листів користувачам Фейсбук з вітаннями до дня народження."
      3:
        image: notes/C1_maze_loops_3.png
        text: Щоб провести птаха до свині на цьому рівні... замість того, щоб перетягувати
          на робочу область три блоки Північ, скористаємось блоком "повторити". Перетягуй
          блок "повторити" і надрукуй число 3. Тепер перетягни блок "рухатись на Північ"
          всередину блоку "повторити" і клацни "Запустити" для перевірки. Вітаю, все
          вийшло!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Цей урок називається "Рухом-рухом". Ми напишемо програму, яка допоможе
          нашим друзям дістатися від початкового аркуша із компасом до кінцевого пункту
          зі смайликом.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: "Але смайлик обернено донизу, і лише одна людина знає, як до нього дістатися.
          Запустимо програму."
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: "Програма - це алгоритм, який записано так, що його може виконати машина.
          Більшість із нас сприймає програму як щось, що ми пишемо для комп'ютера.
          Програми дуже корисні для цього, але і для інших цілей також. Можна створити
          власну гру, чи навіть програму для робота, щоб він робив щось для нас."
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: 'Мене звати Єремія. Привіт! Мені сім років. Я дуже люблю бавитись на
          маминому комп''ютері, але я завжди питаю дозволу: "Мамо, можна за комп''ютер?
          Звісно, любий!"'
      2:
        image: notes/C1_going_places_safely_2.png
        text: "Я люблю мамин комп'ютер, бо можна зайти в Інтернет. Інтернет це ніби
          як твій район. Можна зайти в різні цікаві місця, поспілкуватись з родичами
          та друзями і дізнатись різні речі."
      3:
        image: notes/C1_going_places_safely_3.png
        text: "Вчора я ходив у зоопарк поряд із домом. Я бачив маленьку зебру і сфотографував
          її. Потім я поміняв колір смужок, додав капелюха і поповнив колекцію дивних
          тварин. Круто! А потім я відправився у далеке-далеке місце - в Кенію. Це
          країна в Африці. Там живе багато зебр."
      4:
        image: notes/C1_going_places_safely_4.png
        text: Іноді по Інтернету я спілкуюсь з людьми, яких я знаю, наприклад з бабусею,
          яка живе в іншому штаті. Привіт, бабусю! Вона пече печиво, і надсилає його
          мені на день народження. "Смакота, добре би було передавати запах по Інтернету!"
          Я можу спілкуватись і з іншими людьми, наприклад двоюрідною сестрою, але
          лише зі знайомими.
      5:
        image: notes/C1_going_places_safely_5.png
        text: "Що мені найбільше подобається в Інтернеті - це те, що можна грати в
          ігри. От і очко! Мені також подобається малювати і створювати нові речі
          і ділитися ними з друзями. Круто! Іноді я захожу на сайти, де дізнаюсь щось
          нове, але я завжди дотримуюсь сайтів, створених для мене. О, динозаври!"
      6:
        image: notes/C1_going_places_safely_6.png
        text: "Інтернет - це дуже цікаве місце. Але так само, як коли ти гуляєш по
          своєму району, потрібно бути обачним і в онлайні. Є три правила. Правило
          1: спочатку спитай батьків. Правило 2: спілкуйся лише зі знайомими. Правило
          3: притримуйся місць, створених саме для тебе."
      7:
        image: notes/C1_going_places_safely_7.png
        text: "Вау, це було весело! Але вже час обіду. Я вимикаюсь. І вже чекаю, коли
          включусь знову і помандрую ще кудись."
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: "Сьогодні ми збираємося дізнатися про парне програмування. Парне програмування
          - це коли ви працюєте як команда. Чому дві людини повинні використовувати
          один комп'ютер. Тому що дві голови краще, ніж одна. Під час парного програмування
          ви і ваш партнер разом сідаєте за один комп'ютер та працюєте над одним проектом."
      2:
        image: notes/C1_pair_programming_2.png
        text: "Парне програмування, як водіння автомобіля - одна людина водій, а інша
          людина навігатор. Водій сидить за комп'ютером, використовує клавіатуру,
          мишу або сенсорний екран, і контролює головні дії на комп'ютері. Інша людина
          є навігатор. Навігатор допомагає водієві, відповідаючи на питання водія
          і вказуючи на різні проблеми та помилки."
      3:
        image: notes/C1_pair_programming_3.png
        text: "Спілкування є ключем до успішного програмування в парах. Не зневажай,
          а шануй партнера. Будь ввічливим, не роби із себе владного командира, тому
          що ніхто не любить заднє сидіння. Ви і ваш партнер завжди повинні говорити.
          Водій може пояснити, що робить. І штурман може допомогти, запропонувати,
          що робити далі."
      4:
        image: notes/C1_pair_programming_4.png
        text: "Навігатор зобов'язаний думати про велику картинку, а водій про деталі.
          Обидві ролі дуже важливі. Парне программування - це робота у команді."
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: "Цей урок називаеться садіння насіння і він допоможе нам зрозуміти алгоритми.
          Алгоритми це конкретні вказівки, які пояснюють порядок, у якому потрібно
          щось зробити. Навіть повсякденні речі, такі як сніданок чи чищення зубів
          є алгоритмами, які потребують маленьких кроків, щоб виконати певну задачу."
      2:
        image: notes/C1_planting_seed_2.png
        text: "Комп'ютери можуть бути дуже розумними, але вони можуть зрозуміти вас
          тількти у тому випадку, якщо ви їм послідовно кажете, чого саме ви хочете.
          Штука алгоритмів у тому, що якщо ви будете виконувати інструкції за порядком,
          ви зможете зробити те, чого не вміли до цього. Це як слідувати рецепту."
      3:
        image: notes/C1_planting_seed_3.png
        text: "Сьогодні ми висаджуємо насіння використовуючи алгоритм. Створити свій
          власний алгоритм шляхом розрізання фотографій на частини. Вибрати фотографії,
          які показують етапи в посадці насіння та організувати ці картинки в правильному
          порядку."
      4:
        image: notes/C1_planting_seed_4.png
        text: "Тепер настав час для того, щоб побачити, чи ваш алгоритм працює. Виконуйте
          алгоритм поступово і дуже ретельно. Ви на вірному шляху? Ви досягли успіху
          в посадці насіння, дотримуючись алгоритму? Це як програмування з фотографіями!"
      5:
        image: notes/C1_planting_seed_5.png
        text: "Коли ми хочемо зробити шоколад, ми маємо здійснити багато великих кроків
          на шляху до цього, і кожен з цих кроків має набір менших кроків, і також
          існують різні рецепти або алгоритми залежно від того, як ми хочемо, щоб
          смакував шоколад. Кожен крок є важливим, навіть найменший, бо без нього
          не буде здійснено процесу. Створення алгоритмів, які можуть бути зрозумілими
          для інших - це дійсно важливо. Ось чому кожен крок повинен бути прописаний
          так, що незалежно від того, хто його робить, результат залишається тим самим."
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Час "спіймати" творчість і використати свої навички кодування, щоб розповісти
          історію. Ваша історія буде мати акторів, і можна заставити цих акторів говорити
          і взаємодіяти один з одним. Почніть думати, яку саме історію ви хочете розказати.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: Кіт завжди боїться собаку, але що буде, якщо кіт з'ясує, що собака намагається
          сподобатись? "Коли запустити" блок починається все. Блок "руху" приведе
          вашого персонажа до руху і блок "говоріння" спонукає вашого персонажа сказати
          все, що ви введете.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Цей блок називається "коли персонажі стикаються", його можна прикріпити
          до інших блоків.
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: "\t\nЯ зробив так щоб, собака підійшов до мене і сказав \"Привіт\",
          але кіт налякався і утік. \"Ахх\", якби було трошки більше часу, можна було
          би отримати щасливе завершення. Кінець!"
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: "Це рівень бджоли. Використовуйте шматочки головоломки, щоб перемістити
          бджолу. Коли вона рухається, вона буде збирати листи заклинання сама."
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: "Подивіться, чи можете Ви вимовити слово по буквах, вони дають Вам в
          полі нижче етапи. Але будьте обережні! Переміщення неправильного напрямку
          додасть літери, які Ви не хочете."
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: "В чому комп'ютери дуже успішні - це у повторенні команд. Для людини
          стане нудно повторювати одне і те ж багато разів підряд. А комп'ютер можна
          виконати одну і ту ж дію мільйони, чи навіть мільярди разів, не нудьгуватиме,
          і не втомиться, і робитиме це дуже вправно."
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: "Наприклад, якби я захотів привітати усіх користувачів Фейсбуку з днем
          народження, надсилаючи їм електронні листи, у мене на це пішло би близько
          століття. А за допомогою кількох рядків коду я можу створити систему розсилки
          електронних листів користувачам Фейсбук з вітаннями до дня народження."
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: "У цьому прикладі Вашою метою буд рухати птаха для отримання свині.
          Зараз ми готуємося використовувати блок повтор , щоб зробити це легко. Це
          можна зробити даючи команду комп’ютеру команду рухатися уперед п’ять  разів
          для просування птаха на один крок кожного разу або можете вибрати блок рухатися
          вперед один раз та повторити його п’ять разів."
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: "Для того, щоб зробити це, перетягніть команду «Хід вперед» у блок повтору.
          Ви можете натиснути на нього та вказати скільки разів повторювати хід вперед."
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: "Ще одна річ, що ви можете поставити стільки команд, скільки ви хочете
          всередині повторення блоку. Таким чином, у цьому прикладі,  Ви кажете рухатися
          вперед і повернути ліворуч, що він буде робити п'ять разів. Успіху!"
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: "Ви навіть не буде кваліфікуватися в перегонах, якщо ви не маєте людей,
          які є експертами в галузі комп'ютерних наук із-за кількості даних зібраних
          пошуковими системами і необхідності мати людей, які можуть писати програми,
          щоб з'ясувати, як ти продовжуєш розуміти, як побудувати продуктивності."
      2:
        image: notes/C2_artist_intro_2.png
        text: "У цьому завданні ви будете художником, який малює фігури за допомогою
          олівця. Коли художник крокує позаду нього ведется лінія."
      3:
        image: notes/C2_artist_intro_3.png
        text: "Щоб переміститися на полотні, ви будете використовувати перемістити
          вперед блок. Тут перемістити вперед блок говорить рухатися вперед на 100
          пікселів. Коли ми запустимо, що відбудеться? Художник рухається вперед на
          певну величину, і ця величина буде 100 пікселів. Пікселі це дуже маленькі
          квадрати на екрані комп'ютера."
      4:
        image: notes/C2_artist_intro_4.png
        text: "Інший блок, який є у цій головоломці вказує на поворот праворуч на
          90 градусів. І коли ми перетягуємо його наш художник повертається на задану
          величину. Тож ви можете грати так як захочете щоб художник повернувся. Це
          поворот на 90 градусів."
      5:
        image: notes/C2_artist_intro_5.png
        text: "А це поворот на 120 градусів. І запам'ятайте, ви можете змінити ці
          величини натискаючи на стрілки поруч з номерами для пікселів і градусів.
          Насолоджуйтеся малюнками з вашим художником!"
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: "Це умовний блок. Він показує що вам потрібно щось робити лише в тому
          випадку, якщо нектару або меду менше, порівну чи більше ніж певне число."
      2:
        image: notes/C2_bee_conditionals_2.png
        text: "Це корисно у тому випадку, коли ми не знаємо як багато меду чи нектару
          виробити, коли ми бачимо знак питання."
      3:
        image: notes/C2_bee_conditionals_3.png
        text: "У цьому прикладі ми збираємося сказати, що ЯКЩО рожева квітка має нектару
          більше, ніж 0, то взяти нектар. Це скаже нашій бджолі продовжувати брати
          нектар, поки він там є. Та-дам!"
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: This is the binary bracelets lesson. We are going to code our initials
          on a bracelet we can wear and show all our friends!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: Binary is a way of representing information using only two options.
          Sometimes people think of this as only 1s and 0s. But you can represent
          binary with combinations of on or off, up and down, in and out or really
          any set of opposites.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hi, I'm Orion and I program robots here at Play-im. All computer and
          robot brains at their most fundamental level are little electronic gates.
          When the gate is open, electricity can flow through and when it's closed,
          electricity can't.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: An example of binary on the robot is the robot's eyes. The robot's eyes
          are LEDs and those are lights that are either on or off. It's a binary system,
          one or the other. We can use the lights to represent binary numbers. If
          we have a set of robots, we can say that the first robot is the 1s place
          and the second robot is the 2s place, the third robot is the 4s place and
          so on. That's how you represent a binary number. The robots will do it with
          their binary eyes and count it out for you.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: This lesson is called conditionals with cards. Every day you make decisions
          based on what you see and hear.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: "я хочу прогулятися у парку, але спершу я повинен вирішити чи потрібно
          мені брати парасолю. Тож, я подивився у вікно. Якщо на вулиці хмарно, то
          я візьму парасолю. Якщо ж ні, то візьму сонце захисні окуляри. Думаю краще
          взяти парасолю. Те, що я бачу та чую визнатає що саме я візьму у парк."
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Conditionals are used in games too. Today we're going to practice using
          conditionals with a card game. In this game, the card that I draw determines
          what my friends are going to do. If I draw a seven, everyone claps. Else,
          everyone says "awww." Let's try it! "Awww" "cheers"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: I bet you can make up games that are even more fun with conditionals.
          Give it a try! Conditionals are what make computers seem smart. A computer
          program that includes conditionals can react to the user and change its
          course of action.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Think about your favorite video game. Do you earn more points for some
          actions than you do for others? This occurs because the computer is using
          conditionals. It's the way a computer makes a decision. How about, if you
          hit the target, you earn ten points. Else, you lose three. When you know
          how conditionals work, you can create all kinds of exciting games.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Here we already have some blocks out in our work space. But there is
          something wrong.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Let's debug this code by slowing down the speed and watching it as it
          goes through each block step by step.
      3:
        image: notes/C2_artist_debugging_3.png
        text: Oh, there's the problem! The cat's whiskers are 75 pixels long, not
          25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: On your head you hold your hat and your smarts will tell you where you're
          at and to think about the zoo, and to nod hello to you and you! Use your
          head when you're online to keep what's yours inside your mind and to know
          how to be safe, how to give your life some private space! From your head
          down to your toes, pause, think about it. From your feet up to your nose,
          pause and think online!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Use your heart to grow and grow, and to give yourself a healthy glow,
          and to make a valentine, tell someone that you'll be mine! Use your heart
          when you're online, feel what's right and always kind, and show your friends
          respect, to be fair and nice on the internet. From your head down to your
          toes, pause, think about it. From your feet up to your nose, pause and think
          online!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Use your arms to hug your pet, to keep your clothes from getting wet,
          and to wear your favorite sleeves and to help you fly and make believe.
          Use your arms when you're online, to take break and balance time and leave
          your tech behind and to find yourself a tree to climb. From your head down
          to your toes, pause, think about it. From your feet up to your nose, pause
          and think online!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Use your gut to store your food, and to listen to its growling mood,
          to make a belly flop, and to feel the gas in soda pop. Use your gut when
          you're online, to know to watch for certain signs, and to let it guide the
          way and tell you when it's not ok. From your head down to your toes, pause,
          think about it. From your feet up to your nose, pause and think online!
      5:
        image: notes/C2_digital_footprint_5.png
        text: So think with your head, and feel with your heart, balance with your
          arms, listen to your gut, online. Use your legs to run and kick, and to
          jump and bounce on a pogo stick, and to dance around the block, and to skip
          along in your smelly socks. Use your legs when you're online, to stand up
          to bullies who cross the line, and remember to stand tall, be nice to creatures
          great and small.
      6:
        image: notes/C2_digital_footprint_6.png
        text: From your head down to your toes, pause, think about it. From your feet
          up to your nose, pause and think online! So think with your head, and feel
          with your heart, balance with your arms, listen to your gut, stand up with
          your legs. From your head down to your toes, pause, think about it. From
          your feet up to your nose, pause and think online!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Everytime you go online, you leave a footprint that can be searched,
          copied, shared, broadcast and is permanent. What kind of digital footprint
          are you leaving? What kind of digital footprint do you want to leave?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: This lesson is called "Graph Paper Programming" and it's all about algorithms.
          Today we're going to learn how to write programs that show each other how
          to recreate simple black and white images, using only hand drawn arrows.
      2:
        image: notes/C2_graph_paper_2.png
        text: "Алгоритм це список інструкцій для виконання завдання. Ми будемо слідувати
          даному набору інструкцій, щоб зробити чашу. Алгоритми, дійсно корисні, коли
          ви потребуєте ще когось, щоб зрозуміти, як щось зробити."
      3:
        image: notes/C2_graph_paper_3.png
        text: If you're writing an algorithm for a computer, you have to break it
          down to little tiny steps. So finish this row and go to the next, then the
          next one, and you'll be done.
      4:
        image: notes/C2_graph_paper_4.png
        text: "Я використовую алгоритми у моїй роботі. Якщо я записую всі кроки то
          можу відтворити цей же шматок знову, або я можу навчити когось зробити це.
          Покладіть скло в печі, з'єднайте його разом, виконуйте подальші вказівки
          щоб зробити чашу. Алгоритми дають вам дорожню карту для виконання чого небудь."
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Here we are going to use the repeat block to help us save steps when
          we are programming our artist. We already have some blocks out on our stage
          but they are just there to get us started.
      2:
        image: notes/C2_artist_loops_2.png
        text: To loop those blocks four times to draw the whole square, we just drag
          out the repeat block and put the moveforward and turn right blocks inside
          the repeat block. When we hit run, the artist will repeat those steps four
          times to complete the square.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: A loop is a repetition of activity. Going into a hive to inspect, I
          look at a frame, and then I put it back. I repeat that same activity multiple
          times. It's looping around, doing the same activity multiple times.
      2:
        image: notes/C2_bee_loops_2.png
        text: This is the repeat block. Whatever you put inside the repeat block will
          repeat those actions the number of times that you tell it to. For example,
          in this level, rather than drag out move forward and get nectar three times,
          we're going to just drag them out once each and repeat the action three
          times. That made it easy!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C2_maze_intro_3.png
        text: If I drag the move block to our work space and press "Run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C2_maze_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "Run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C2_maze_intro_5.png
        text: If you ever want to delete a block, just remove it from the stack and
          drag it to the trash can. After you've hit run, you can always hit the reset
          button to get the bird back to the start. Now let's get those pigs!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: This lesson is called Real Life Algorithms. Algorithms describe things
          that people do everyday. Cookie recipes and directions for building a birdhouse
          are both everyday algorithms.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Today we're gonna make, create, and test an algorithm for a paper airplane.
          But first, we need to break this big project into easy to follow small steps.
          For making a paper airplane, we need to decide what steps to take and in
          what order to take them.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: You'll create your algorithm by first cutting apart the pictures. Next,
          you'll select the 6 pictures that show the steps needed to make a paper
          airplane and arrange those pictures in the correct order. After you have
          everything in order, you will trade algorithms with another student team
          to test out the algorithm to see if the algorithm works. A well designed
          algorithm is super important to making the best paper airplane.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: When we want to make chocolate, there are many big steps to that process.
          And each of those big steps has its own set of smaller steps. And there
          are different recipes, or algorithms, depending on how we want the chocolate
          to taste. Each step is important, even the small ones. So without one step,
          the rest of them cannot be completed. Creating algorithms that others can
          understand is really important. That's why each step has to be written down,
          so no matter who does it, the result is the same.
    C2_playlab_createstory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: "До цього часу ми створювали анімації або складали історію, у якій щоразу
          при запуску проекту виконувались точно однакові команди. Тепер можна створити
          інтерактивну гру, в яку насправді можна пограти."
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Існують блоки "коли натиснено стрілку" та "перемістити персонажа". Можна
          розмістити ці блоки поряд, щоб переміщувати персонажів за допомогою клавіш
          зі стрілками.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Today we're going to do relay programming. It's all about programming
          under pressure and debugging the mistakes that sometimes happen when you
          work really quickly or in teams. We'll use graph paper programming to simulate
          coding, and use relay races to simulate having a deadline.
      2:
        image: notes/C2_relay_programming_2.png
        text: In relay programming, teams will be racing to finish a graph paper program.
          You have to check your teammate's work, or debug it, fix it if there's a
          mistake, add your arrow, and run back and tag your teammate.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programmers use debugging a lot to find and fix problems in their algorithms
          or code. There are lots of ways to debug problems. One of the easiest is
          to move step by step until you find where something goes wrong, then fix
          it.
      4:
        image: notes/C2_relay_programming_4.png
        text: Here, I'm trying to do a back handspring, but I keep falling off. I
          walk through each part, step by step, and realize where my mistake was.
          My coach showed me I wasn't putting my hands on the beam correctly. So I
          tried another back handspring on the beam with my new hand position, and
          I stuck it! I was really glad I debugged my back  handspring. We figured
          it out! Debugging is finding and fixing problems. Nice, good job!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: One thing that computers are really good at is repeating commands. As
          a person, you'd get really bored if you had to do the same thing lots of
          times in a row. But a computer can do the same thing millions or even billions
          of times, and not get bored and be able to carry that out really well.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: So for example if I wanted to wish everyone on Facebook a happy birthday
          by sending them an email, it might take me more than a century to actually
          write out all of those emails to everyone. But with just a few lines of
          code, I can have a system send an email to everyone on Facebook wishing
          them a happy birthday. So that's what loops are, and why they're valuable,
          and something that computers can do very well.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: In this example your goal is going to be to move the bird to get the
          pig.  Now we're gonna be able to use the "repeat" block in order to be able
          to do this very easily. You can either do this by giving the computer a
          "move forward" command five times in order to advance the bird one step
          each time to the pig.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: Or you can just tell the computer to "move forward" once, and then tell
          it to "repeat" that 5 times, and it will do the same thing. So in order
          to do this you drag your "move forward" command, and then you put it inside
          the "repeat" block.And you can click on it and tell it how many times you
          want to repeat the block to tell it how many steps you want it to take forward.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: Now one more thing is you can put as many commands as you want inside
          the "repeat" block. So in this example you're telling it to move forward
          and turn left, which it will do five times. All right good job and have
          fun!
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C3_artist_functions_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square, so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code. It will get done
          for us. We've added that concept to our programming language.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: "Ви навіть не буде кваліфікуватися в перегонах, якщо ви не маєте людей,
          які є експертами в галузі комп'ютерних наук із-за кількості даних зібраних
          пошуковими системами і необхідності мати людей, які можуть писати програми,
          щоб з'ясувати, як ти продовжуєш розуміти, як побудувати продуктивності."
      2:
        image: notes/C3_artist_intro_2.png
        text: "У цьому завданні ви будете художником, який малює фігури за допомогою
          олівця. Коли художник крокує позаду нього ведется лінія."
      3:
        image: notes/C3_artist_intro_3.png
        text: "Щоб переміститися на полотні, ви будете використовувати перемістити
          вперед блок. Тут перемістити вперед блок говорить рухатися вперед на 100
          пікселів. Коли ми запустимо, що відбудеться? Художник рухається вперед на
          певну величину, і ця величина буде 100 пікселів. Пікселі це дуже маленькі
          квадрати на екрані комп'ютера."
      4:
        image: notes/C3_artist_intro_4.png
        text: "Інший блок, який є у цій головоломці вказує на поворот праворуч на
          90 градусів. І коли ми перетягуємо його наш художник повертається на задану
          величину. Тож ви можете грати так як захочете щоб художник повернувся. Це
          поворот на 90 градусів."
      5:
        image: notes/C3_artist_intro_5.png
        text: "А це поворот на 120 градусів. І запам'ятайте, ви можете змінити ці
          величини натискаючи на стрілки поруч з номерами для пікселів і градусів.
          Насолоджуйтеся малюнками з вашим художником!"
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: When you put a loop inside of another loop, we call that a nested loop.
          For example, here we're given the code already to draw one triangle with
          sides of length 100 pixels using the repeat times block set to three, once
          for each side of a triangle.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: "Але ми хочемо намалювати шість трикутників. Для того, щоб зробити це,
          ми візьмемо цей цикл і помістимо його всередину іншого блоку повторення
          певну кількість разів. Дуже круто!"
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: "Це умовний блок. Він показує що вам потрібно щось робити лише в тому
          випадку, якщо нектару або меду менше, порівну чи більше ніж певне число."
      2:
        image: notes/C3_bee_conditionals_2.png
        text: "Це корисно у тому випадку, коли ми не знаємо як багато меду чи нектару
          виробити, коли ми бачимо знак питання."
      3:
        image: notes/C3_bee_conditionals_3.png
        text: "У цьому прикладі ми збираємося сказати, що ЯКЩО рожева квітка має нектару
          більше, ніж 0, то взяти нектар. Це скаже нашій бджолі продовжувати брати
          нектар, поки він там є. Та-дам!"
    C3_bee_debugging:
      1:
        image: notes/C3_debugging_bee_1.png
        text: Have you ever heard of debugging a program? This is the way you figure
          out what's not working. When you debug code, you identify and remove errors.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Here we're given a few blocks already in our workplace. We're going
          to use the step button to walk through the blocks, step by step, to see
          if this is the right solution and where we may need to fix it.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Looks like there's our problem! We need one more move forward block.
          The step button helps us debug our problem by identifying where the error
          is so we can fix it.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: One of the most important concepts in computer science is how to define
          new commands, how to add your own words to a computer language. Most computer
          languages have only about one hundred words or commands. The art and magic
          is in defining your own new words out of these building blocks.
      2:
        image: notes/C3_bee_functions_2.png
        text: We do this all the time in sports. For example, in basketball, you start
          by learning how to dribble, how to do a lay-up, how to rebound. Once you've
          learned these really basic moves, you learn new moves and put together these
          building blocks, like a pick and roll or give and go. You can then go from
          there to do more complex plays. Once you learn that play and give it a name,
          everybody on the team knows how to do it.
      3:
        image: notes/C3_bee_functions_3.png
        text: Similarly once you've taught a computer how to do an action once using
          these sequences of commands, you can make up your own name for that action
          so it's easy to repeat it later. When you define your own command and give
          it a name, that's called a function. Now we're going to use functions to
          help the bee.
      4:
        image: notes/C3_bee_functions_4.png
        text: In this example, our function is called get 2 nectar, this green block
          right here. We know what get 2 nectar does by looking at this grey box which
          is the function definition. If we look inside there, the get 2 nectar is
          going to get nectar and then get nectar again. Always look at what's inside
          the grey box so that you know what these green function blocks can do.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Now we're going to use nested loops with the bee. We're given some starter
          code which tells the bee to move forward and get nectar three times and
          then turn right. Let's take that whole piece of code and nest it inside
          another repeat block and set to repeat three times. Done!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: You're going to be creating your very own bounce game that you'll be
          able to share with your friends! How cool!
      2:
        image: notes/C3_bounce_2.png
        text: To get started, we have to link up the paddle controls to the arrow
          keys on our keyboard.
      3:
        image: notes/C3_bounce_3.png
        text: We can do this by linking the when left arrow block to the move left
          block and the when right arrow block to the move right block. Give it a
          go and you'll be programming your own bounce game in no time!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: This lesson is computational thinking. Sometimes learning a new game
          can be tough, right? At first it might seem really confusing and sometimes,
          there's no one there to teach you the rules, so you have to figure it out
          on your own.
      2:
        image: notes/C3_computational_thinking_2.png
        text: The good news is that you can get better at figuring things out on your
          own when you know a few thinking tricks. These tricks are unique ways for
          looking at and solving problems. In this lesson, you'll learn about four
          tricks and practice them with your friends to figure out the rules to a
          game.
      3:
        image: notes/C3_computational_thinking_3.png
        text: When you break down a big problem into smaller pieces, you're using
          your brain to decompose the big problem. Once we've decomposed the big problem
          into several smaller problems, we can go on to our next trick, which is
          called pattern match.
      4:
        image: notes/C3_computational_thinking_4.png
        text: That's when we look for similarities between things. Once I find the
          things that are the same, I can figure out what things are different. When
          I remove those differences, that's called abstraction.
      5:
        image: notes/C3_computational_thinking_5.png
        text: After I have figured out the steps to solving a problem, I can put those
          steps in a specific order called an algorithm so that anyone can use my
          directions to solve that problem. We're going to use these four steps to
          figure out how to play the game with no rules. By the end of the game, you'll
          be able to play something that looks like this!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: This lesson is called crowdsourcing. In this lesson we'll use a deck
          of cards to learn about how much easier some things can be to do in groups
          instead of trying to do them all alone. So grab some friends and make something
          awesome. Crowdsourcing is getting help from a large group of people to finish
          something faster.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: In computer science, we use crowdsourcing all the time. Thousands of
          amateurs and professionals link their computers together to search through
          billions and billions of pieces of information. Looking for things like
          the next Marsenne prime number, or even possible alien communications.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: When you see a movie, each second of the movie is 24 individual pictures,
          we call those frames. So every one of those pictures needs to be created
          and rendered and put all together. My team and I, we're all software developers.
          We all work together to create a piece of software that actually creates
          an image, creates the final image that you see on screen. That's a tool
          that artists and other developers can use as part of their teamwork and
          their process to be able to create the images that they want on screen.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: For example, in Finding Nemo, when Crush and Squirt and all their friends
          are flying through the East Australian Current. You're seeing images of
          water flowing by, you're seeing the colors on the back of the turtle, you're
          seeing the sides of the fish. All of those things are generated through
          math and computer programs that we write, that we then give to the artist
          and they take that to create that final image and tweak it and make it look
          beautiful and look fun.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: This lesson is called dice race. Almost everyone likes to play computer
          games. Have you ever thought about how computer programmers turn the steps
          of a game into a program? The first step in creating computer games and
          in solving any problem requires thinking and planning.
      2:
        image: notes/C3_dice_race_2.png
        text: The thinking step of problem solving produces an algorithm, which is
          a step by step plan for solving a problem or finishing a task. In this lesson,
          you'll create an algorithm for a dice race game. Then you'll ask your friends
          to try out your plan to see if they can follow the steps to play the game.
          After the programmer is sure the steps are correct, it's time to translate
          the algorithm into a program with language that the computer can understand.
      3:
        image: notes/C3_dice_race_3.png
        text: Almost everything we do every day requires an algorithm, a list of steps
          you can follow to finish a task. Think about getting ready for school or
          planning a fun day with your friends or fixing a snack. To complete any
          of those tasks, you'll need to break it down into smaller steps and sometimes
          the steps must be in a specific order.
      4:
        image: notes/C3_dice_race_4.png
        text: Think about making a sandwich. It doesn't matter which ingredient you
          get out of the cabinet first. But you can't spread the peanut butter until
          you open the jar. Computers need algorithms and programs to show them how
          to do even simple things that we can do without thinking about it.
      5:
        image: notes/C3_dice_race_5.png
        text: An algorithm is the thinking behind what needs to happen while the program
          is the actual instructions given to the computer to make it happen. An algorithm
          has to be translated into a program before a computer can run it. Breaking
          a task into steps called an algorithm is sometimes difficult. But like any
          new skill, it gets easier and easier with practice.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: While loops are pretty similar to what you do in everyday life. Imagine
          you are washing your car, you'll keep scrubbing until it's clean. While
          it's not clean, continue to scrub. You're evaluating these things all the
          time.
      2:
        image: notes/C3_farmer_while_2.png
        text: We've got a new look to help your farmer out. It's called a while-block.
          It's pretty simple actually. While a statement at the top is true, do something.
          For example, while there's a pile move one hayful. Go ahead and give it
          a try with your farmer.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: This lesson is functional suncatchers. You'll be creating these pretty
          suncatchers using functions. There are several steps in creating one of
          these suncatchers. Some of the steps you have to repeat many times.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: The first step in simplifying the process of making a suncatcher is
          figure out what we have to repeat over and over again. We can group these
          steps into what we call a function.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: But there is more to creating a beautiful suncatcher than following
          precise steps. Sometimes we want to be creative and change the color of
          the beads we're using. We can make every suncatcher unique if we use different
          colored beads.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Your suncatcher will be uniquely yours when you learn to think of the
          beads as variables which is a word that means a placeholder for information
          that can change. Have fun creating beautiful suncatchers using functions
          and variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: This lesson is all about the internet. The internet is a very busy place
          and similar to this busy road. Messages like cars are zooming along to get
          to their destinations. Messages move through the internet very quickly.
      2:
        image: notes/C3_internet_2.png
        text: Acting out how the internet works will help you understand what's happening
          when you use the internet. You'll learn how messages get from your computer
          to a favorite website or from a friend to an email inbox. Just like it's
          easier to navigate busy roads when you know the roads and can read the signs,
          traveling the internet is not so complicated when you know what goes on
          behind the scenes.
      3:
        image: notes/C3_internet_3.png
        text: Sending messages on the internet is a little bit like sending messages
          in the mail but with a few differences. I'm here at Google.com. The IP address
          for this website is this number. You can think of an IP address as your
          return address in the mail. Let's imagine that I want to send a message
          in the mail to someone in the office down the there. Do you see URL and
          the IP address on that door? I've written this message and hit send.
      4:
        image: notes/C3_internet_4.png
        text: Unlike the Postal Service, the first thing that happens is that the
          internet breaks the message into smaller parts so it can be sent more easily.
          These small parts are called packets. Each packet of the message is delivered
          to the destination one at a time. These packets are all put together in
          the right order so that the receiver can read the message correctly. Of
          course, there are many more things to learn about how the internet works
          but this is a great start. You're on your way to becoming a savvy internet
          user! Be sure to tell your family and friends what you've learned!
      5:
        image: notes/C3_internet_5.png
        text: My name is Amanda Camp and I'm a software engineer at Google. I work
          on a team that works on a backend server that stores profiles and contacts.
          In my job, we think a lot about how contacts can be sent to other devices,
          such as your phone. Most people have a lot of contacts, you might have say,
          1000 contacts and we don't want to send all of those contacts at once to
          your phone because it's too large of a message. Similar to the way the internet
          breaks large messages down into packets, we use a concept called paging
          where we might only send your phone 100 contacts at a time and let your
          phone respond to us and ask for the next 100.
      6:
        image: notes/C3_internet_6.png
        text: The most exciting thing about software is the fact that it can impact
          the entire world. I first learned to program when I was about nineteen.
          I think I was already a sophomore or a junior in college. The first program
          I remember writing is something that converted Celsius to Fahrenheit. I
          like programming because I like helping people. I can write programs at
          Google that help people all over the world and that's really mind-boggling
          and exciting.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: People make decisions everyday. For example, before you go outside,
          you have an if statement that says if it's raining, then I need to get my
          jacket. Computers are amazing once you decide those kinds of statements
          that they can reliably execute those things and unbelievable speed. A computer
          program really is a little bit of math and some if statements where the
          decision gets made.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: The if block helps the zombie make a decision. It checks something.
          For example, let's use the block that says if there's a path to the left,
          and put a turn left command inside it. We're telling the zombie to check
          its surroundings, see if there's a path on the left and if so, make that
          turn.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Then we use the move forward block inside this repeat to get it to keep
          moving forward as long as it just wants to go straight. Then when there's
          a turn, the if block will tell it to make that turn to the left. You can
          see that if we do that, if we take the turn to the left and otherwise moving
          forward, we'll achieve our goal.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: It's an example of using an if statement which is really a fundamental
          concept in computer programming. One of the first things I learned was how
          to write a program that played tic-tac-toe. I had if statements to say,
          ok, if the other person is about to win, go ahead and block that spot. Have
          fun learning how to use if statements, it's a key concept.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: In this example, your goal is to get zombie to the sunflower. We could
          use five move forward blocks or we could tell the computer to move forward
          and repeat five times using the one repeat block.
      2:
        image: notes/C3_maze_level_4_2.png
        text: This saves time and makes it way easier. To use it, just put the move
          forward block inside the repeat block. Hit run and the zombie will move
          forward five times to the yummy sunflower.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: "До цього часу ми створювали анімації або складали історію, у якій щоразу
          при запуску проекту виконувались точно однакові команди. Тепер можна створити
          інтерактивну гру, в яку насправді можна пограти."
      2:
        image: notes/playlab_2.png
        text: Існують блоки "коли натиснено стрілку" та "перемістити персонажа". Можна
          розмістити ці блоки поряд, щоб переміщувати персонажів за допомогою клавіш
          зі стрілками.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: This is the song writing lesson. Music is a lot like a computer program.
          The written notes and words tell the singer exactly what to do. Some parts
          of music are used over and over again.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: We call this the chorus. In a computer program, the parts of the program
          that are used over and over again are called functions. When you read song
          lyrics and it says the word chorus, do you sing the word chorus? No, you
          look at the top of the page to see what words make up the chorus.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: In this lesson, you'll learn a silly little song called little bunny
          foo foo. The song has a chorus that you will sing several times over and
          over again. A function is a piece of code that you can call and use over
          and over again. It makes programming easier and more efficient so you don't
          have to write out the steps of your function over and over again. You can
          just write it once!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: This is the conditional block. It says if you're at the flower or the
          honeycomb, then do something. This is useful when we don't know how much
          honey or nectar to get as we see here with this question mark.
      2:
        image: notes/C4_bee_conditional_2.png
        text: In this example, we're going to say, if it's a flower, get all the nectar
          and then use another one to say, if it's a honeycomb, make honey. Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: We have a new block that's called the if/else block. It's a conditional
          statement just like the if block you've used in the puzzles before. But
          now there's a new part at the bottom that says else. The if/else block lets
          the bee make a decision between two sets of actions. If the bee is at a
          flower, the bee will do the set of actions you put in the first part where
          it says do. If the bee is not at a flower, the bee will do the set of actions
          you put in the slot where it says else.
      2:
        image: notes/C4_conditionals_2.png
        text: If statements are how computers are able to make decisions. Humans set
          up conditions for the computer that say if the computer is presented with
          a certain situation do this. Else, which just means otherwise, do that.
          The top of our if/else block says if at flower. But the top of our block
          could say other things, like if nectar equals 2 or if there's a path ahead,
          our block will behave in the same way. That if the statement at the top
          is true it will do the first set of actions. But if the statement at the
          top is false, it will do the second set of actions.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: The benefit of using a real for loop instead of the repeat block is
          that you can actually see the counter variable and use it in your loop.
          For example, if I have a series of flowers and the first one has one nectar,
          the second one has two nectars and the third one has three, I can use the
          for loop to tell the bee to collect 'counter' nectars each time, which would
          one at the first flower, two at the second and three at the third.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: Also in a for loop, you can increment the counter by a number other
          than one each time. You can potentially count by 2s, 4s or even an amount
          that changes every time through.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: When you use a repeat block to loop your code, how does the computer
          know when it's repeated enough times? The repeat block is actually hiding
          a more sophisticated piece of code called a for loop which counts from a
          starting value up to an ending value by a specific increment.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: For example, a repeat three block counts from 1 to 3 by 1. Every time
          it counts, it runs the code inside the loop. The for loop knows how many
          times it has run by using a counter variable which is set to the starting
          value at the beginning of the loop and has the increment added to it each
          time the loop is run. As soon as the counter variable is greater than the
          ending value, the loop stops running. The benefit of using a real for loop
          instead of the repeat block is that you can actually see the counter variable
          and use it in your loop.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Now that you've edited function blocks, it's time to create a new function
          block from scratch. It's really simple. You'll see the toolbox has a category
          called functions. If you click on this, you'll see an orange button called
          create a function. Clicking on this brings up the function editor that you've
          already used to edit existing function blocks.
      2:
        image: notes/C4_function_create_2.png
        text: Just like before, you started by naming your function, writing down
          a description for what the function is supposed to do. For instance, it's
          supposed to draw a square or draw a triangle and then drag blocks from the
          toolbox into the white work space below. Remember to drag these blocks inside
          the green wrapping block for the function.
      3:
        image: notes/C4_function_create_3.png
        text: Once you're done, click on save and exit. This will take you back to
          the main puzzle work space. The new function you created will show up as
          a green block in the function category in your toolbox. Drag and drop this
          into the main work space and use it like any other block to solve the puzzle.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: One of the great things in computer programming is once you've taught
          a computer how to do an action, you can call that function again. You give
          it a name and then you can call it. That's really like extending the language.
      2:
        image: notes/C4_function_edit_2.png
        text: In the program we built, we learned how to draw a square by moving and
          turning four times. We can take that function and give it a name, draw a
          square so that any time we want to do that, we simply say draw a square
          and it will go back and invoke that function, that code and it will get
          done for us. We've added that concept to our programming language.
      3:
        image: notes/C4_function_edit_3.png
        text: In this puzzle, we have already created a draw a square function for
          you. You'll see it in the toolbox as a green block. What you'll need to
          do is write the same code you wrote before to draw a square and put it in
          this function. To do that, click on the edit option in the green draw a
          square block. This will open up the function editor. The function editor
          has three parts. A place where you name your function. This will appear
          on the green block before that function. Then write out a short description
          of what your function is supposed to do.
      4:
        image: notes/C4_function_edit_4.png
        text: In this case, it's supposed to draw a square. The white space below
          this is the work space and works just like the work space you've already
          been using. Drag and drop blocks from the toolbox into this work space.
          Remember to put the blocks that create a square inside the green wrapping
          block for the function. Once you're done, click on save and exit. This will
          take you back to the main puzzle work space. Now you can use the draw the
          square function block just like any other block to solve the puzzle.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Here's a function that draws a square with 50 pixel sides. That's great
          but what if I wanted to draw a square with sides 50 pixels and another square
          with sides of 100 pixels? We shouldn't have to make two separate functions
          that do almost the same thing. Instead, we can use one function with a parameter.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parameters allow us to pass values into a function that get used as
          variables inside the function. Let's try adding a parameter called like
          to this function so we can use it to create squares of different sizes.
          In the function editor, you can edit the name and description like before
          but now you can also add a parameter. Write the name of your parameter in
          the space and click Add Parameter. This will create a red block with the
          name of the parameter you just created. Now we can replace the move forward
          by 100 block with the parameter Length so it will move forward by Length.
      3:
        image: notes/C4_function_parameters_3.png
        text: Click save and close and drag out your new create a square block from
          the functions category in the toolbox. You'll notice there's an empty space
          next to length because the function wants to know what value the parameter
          Length should have. Drag a number block from the Math category and place
          it in this space. See how you can use the function again and again with
          different lengths to make squares of different sizes? Try it for yourself!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Usually programming is all in text but we'll use Blockly which uses
          visual blocks that you drag and drop to write programs. Under the hood,
          you're still creating code. To start off, we're going to build code for
          a program that will help this Angry Bird move through a maze to get to the
          evil pigs that stole its eggs.
      2:
        image: notes/C4_intro_2.png
        text: Blockly is split into three main parts. On the left is the bird's maze,
          where your program will run. The instructions for each level are written
          below the maze. This middle area is the toolbox and each of these blocks
          is a command that the bird can understand. The white space on the right
          is called the workspace and this is where we'll build our program.
      3:
        image: notes/C4_intro_3.png
        text: If I drag the move block to our work space and press "run", what happens?
          The bird moves forward one box on the grid. And what if I want the bird
          to do something after it moves forward one box? I can add another block
          to our program.
      4:
        image: notes/C4_intro_4.png
        text: I'm going to choose the "turn right" block and I'll drag it under my
          move block until the yellow arrow appears. Then I'll drop it and the two
          blocks will snap together. When I press "run" again,  the bird will perform
          the commands that are stacked from top to bottom on our work space.
      5:
        image: notes/C4_intro_5.png
        text: If you ever want to delete a block, just remove it from the stack and
          drag it to the trash can. After you've hit run, you can always hit the reset
          button to get the bird back to the start. Now let's get those pigs!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: If I want to draw a rectangle 50 pixels tall and that is twice as wide
          as it is tall, how would I program the computer to do that? Well, I could
          tell the artist to go up fifty, turn right, and then go over 100 and move
          the whole thing twice. But then I'm doing the math for the computer.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplying fifty by two in your head may not that hard but computers
          are really good at doing math so we should leave it to them whenever possible.
          If I just used a variable called height instead, then I could easily change
          height to fifty and then change my algorithm to tell the artist to go up
          by height, turn right and then go over by height times 2, which gives us
          a rectangle that is twice as wide as it is tall.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: This lesson is called Tangram Algorithms. A tangram is a puzzle with
          seven pieces that can be put together to make other shapes. You'll be using
          an algorithm to explain to your partner how to put the puzzle together.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: An algorithm is just a of list steps that you can take to complete a
          task. We use them every day with things like shopping lists and recipes.
          If you keep an algorithm simple, there are lots of ways to interpret it
          and whoever performs that algorithm might not get exactly what you wanted.
          If you want to make sure that everyone ends up with the exact same thing,
          then your algorithm will need to be detailed and very specific.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: I'm using an algorithm today to complete a painting. I wanted to try
          doing a painting of some wolves but I'm not the most amazing painter. Luckily
          for people by me, there is paint by numbers. There are forty colors and
          it has little letters and numbers that tell you which color to paint each
          section. Paint by numbers tells me exactly what color to use and where.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: It's very specific so I'm able to follow directions and the painting
          will come out looking awesome. It's a great algorithm. If the instructions
          weren't specific enough, my wolves wouldn't look as good. When you really
          want something to turn out exactly the way that you planned it, it's best
          to be extremely precise.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Each team, the person who's instructing that's the person who's holding
          the paper, has to figure out what their off symbol is going to be and what
          their on symbol is going to be. In binary, it's kind of like an alphabet
          with two letters. Like having A and B be your entire alphabet but you've
          got a 0 and a 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: The most common way you use binary is in an if statement. It's a classic
          thing from programming. The program runs along and it says if something
          is true, then do this. Or it's not true and you do something else. What
          if you want to do something maybe a little more complicated. Instead an
          if statement, you want to work with something like an image or a sound in
          a computer.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'A computer only knows binary but an image, it''s not binary, it''s
          not ones and zeros so how do you do that? Here''s an example: You have this
          beautiful picture. Now a picture is basically a form of information. All
          information can be encoded in binary one way or another, you just have to
          figure out how to do it.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: You imagine that we're going to put a grid over this panda bear and
          for each square, we're going to decide whether that square is more black
          or more white. And then we're going to color it that way. Now each cell
          on the grid is either black or white and then the black squares we say those
          are zeros (binary digit) and the white squares are ones, the other binary
          digit. At the end, you're left with just a bunch of ones and zeros. That's
          how you represent this image in binary.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: This lesson is called for loop fun. In this lesson, we'll use a number
          line to play a dice game. Each player will roll three times to assign a
          starting value, a stopping value, and our interval. During each turn, we
          circle our starting value, and every value that is the same number of steps
          forward as our interval value. We stop circling when we get to our stopping
          value. The person with the highest score wins!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: For loops can come in handy a lot of places and if you were to become
          a meteorologist, you would use for loops all the time. Hi, I'm Becky. I
          work at EverPower Renewables as a wind meteorologist. I forecast wind speeds
          for the Columbia River Gorge area where the company owns wind farms.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: We're trying to understand how much wind is going to be there so that
          we know how much power is going to be outputted. We give that information
          to real time energy traders. They buy and sell power based on how much power
          we tell them is going to be there in order to make sure the power grid is
          balanced, your lights stay on, and that we maximize the amount of energy
          we get out of our farms.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: We're at the national control center for EverPower Renewables here in
          Portland and this is where we have information coming in from all our farms
          across the country. Even the highest power computers today can't simulate
          the atmosphere everywhere. In computer forecasting models, we have what
          we call a grid. Each grid point is a latitude, longitude. We have to calculate
          the physics and try and figure out the wind speed, temperature,  pressure,
          that sort of thing.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Since these are fairly big grids and we're doing this in a lot of points
          we're looping over these things millions and millions of times. Everything
          I do I'll use for loops. Here for example is a for loop right there. When
          you're forecasting wind, there's so many different parameters that go into
          it it would be impossible for a human to sit down and do all those calculations.
          There's so many different aspects to what's going to be affecting what's
          happening to the wind that we need a computer model in order to forecast
          it.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: In this lesson, we'll be playing with some fill in the blank stories.
          You have a template that you can fill in to create similar stories that
          have very amusing differences.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: In this lesson, we also learned how to make an abstracted template from
          two stories that have already been created. Abstraction is the art of removing
          differences and details so that you can see how one solution might work
          for many different problems. It's very helpful in computer science because
          it allows us to create functions that may be useful in several different
          situations.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: This lesson is called songwriting with parameters. We're going to be
          writing some songs here. Sometimes the chorus is just a little bit different
          each time you sing it. Do you remember Old Macdonald Had a Farm? The chorus
          is slightly different for each animal. And on that farm, he had a cow, e-i-e-i-o.
          The small change in each chorus can be shown using something we call parameters.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: Sometimes a function needs a parameter. A parameter is an extra piece
          of information you can pass to a function to customize it for a special
          need. When you make ice cream sundaes with your friends, you are using a
          process similar to parameters in a computer program.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: The disk of vanilla ice cream might be the same for every sundae but
          when you ask your friends which two toppings they'd like, you could get
          lots of different combinations. Topping is the function name but each type
          of topping is a parameter. Functions and parameters work together to make
          great computer programs and great sundaes too.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: This lesson is called variables in envelopes. We're going to learn how
          we can build sentences when we're still missing pieces of information. Most
          of us are already familiar with the idea of filling in a blank. We do it
          when we're putting our name on our homework. Sometimes there's more than
          one word that needs to be filled out and in that case, we give that blank
          a label so that we know which piece of information goes where.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Variables are placeholders for pieces of information that can change.
          By using a variable for the missing information, we can continue working
          on whatever we were doing and let someone else fill in the missing information
          later. In software, we use variables a lot. We use variables as placeholders
          for name, email address, and even username. That way we can let the program
          know where those details will appear after the user fills them in. We use
          variables all the time in our work.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Any time you need to store a piece of information for later, we use
          a variable. Let's say we need to count the number of times the user has
          tweeted. Every time that user tweets, we'll add one to that number and every
          time the user deletes a tweet, we'll decrease that number by one. Anytime
          we need to know how many times that user has tweeted, we'll just look at
          that variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: A variable is a container you can store a value in. When you use that
          variable in an algorithm, it opens up the container and looks at the value
          inside. This lets you write smarter algorithms that behave differently depending
          on the value stored in the variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: For example, if you wanted to write an algorithm to say Happy birthday,
          you're turning 10! to my little brother, that's great now but when I run
          it next year I'd want it to say, Happy birthday, you're turning 11! I could
          create a variable called age to store my brother's age and write my algorithm
          to say Happy birthday, you're turning 'age' instead. Because variable can
          change, every year I can update the variable 'age' to equal 'age' plus 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: In this puzzle, we're going to be using a variable that will set the
          length of the line our artist draws. Later on in our code, the move forward
          block will look at that length variable to see what value you've set it
          to.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: A variable is a container that you can store a value in. When you use
          that variable in an algorithm, it opens up the container and looks at the
          value inside. This lets you write smarter algorithms that behave differently
          depending on the value stored in the variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Now you're going to try playlab where you are given different games
          and you can change the values of variables like speed, height, score, in
          order to change the game. You won't have to change the algorithm of the
          game to change how it plays, just the variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: In my work for Kindle and on X-ray for books, we apply variables in
          many different ways. One way that you can use a variable is to store page
          numbers of a book. A user can increase and decrease the size of the font
          on a page. Based on the font size, the number of pages in the book can change.
          We can adjust it by storing the number of pages in the variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Now we're going to learn about something that all game programmers use
          everyday. They're called events. An event tells your program to listen for
          when something happens. And then when it does, it performs an action. Some
          examples of events are listening for a mouse click, an arrow button, or
          a tap on the screen.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Here, we're going to make Baymax move up to touch Hiro and move down
          to touch Rapunzel when the player uses the up/down arrow keys or the up/down
          buttons. We'll use the when up arrow block and attach the move actor up
          block to it, so when the player presses the up arrow key, everything attached
          to the "when up arrow" block is run. We'll do the same thing to make Baymax
          move down. Step by step your game is getting more interactive.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: So what grade are you in? Second. Tenth grade. First grade. I was in
          eighth grade when I learned to program. I got my first computer when I was
          in sixth grade. What gets me excited is being able to fix people's problems.
          You can express yourself, you can build things from an idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: Computer science is the basis for a lot of the things that college students
          and professionals will do for the next twenty or thirty years. I like programming
          because I like helping people. I get the opportunity to build something
          that's gonna make people's lives easier. I think it's the closest thing
          we have to a superpower. Getting started is the most important part. I'm
          a beginner myself and I want you to learn with me.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: I'm John Vechey, I'm one of the co-founders of PopCap Games. We make
          games like Plants vs. Zombies, Bejeweled, and Peggle. A lot about games
          isn't how perfect your code is, it's not how perfect your art is, it's about
          how does it feel and how much fun it is. You can only get that sense by
          trying it, by doing it, by learning and adapting and iterating your own
          skills of making games.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: Do you have a favorite video game? Well, we're going to take one step
          towards creating games just like that using Play Lab. Good games have a
          story and every story has actors. Actors do things like speak, move, and
          interact with each other. Maybe even score points based on the rules of
          the game. Today we'll be learning how to do all these things, one by one,
          with Disney's characters like Anna, Elsa, Hiro, Baymax, and Rapunzel. We'll
          build a game from scratch that can be shared and played on a phone.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: Your screen is split into three main parts. On the left is the gamespace,
          where your program will run. The instructions for each level are written
          below. This middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace, and this
          is where we'll build our program.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow outline, and then they'll snap together. In this first
          puzzle, Hiro is Actor 1 and Baymax is Actor 2. We need to move Hiro to get
          to Baymax by dragging the "move right" block out and linking it to the "when
          run" block. Once you have your blocks in place, hit the "Run" button to
          see what you've programmed.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Get started and by the end you'll be able to create your own game with
          these amazing actors that can interact, score points, throw microbots, cherries,
          saucepans, sparkles, and ice.. and vanish each other. It's all up to you!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you'll never have to because computers are really good at repeating things.
          This is the repeat forever block. Anything inside this block will happen
          forever in the game.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: So if we wanted an actor to do something repeatedly without the player
          having to do anything, we'll put those blocks inside the repeat forever
          block. In this next puzzle, our goal is to help Anna walk up and down continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: What do you want to be when you grow up Olivia? An astronaut. Do you
          happen to know what a computer programmer is? Yeah um no. Ummm wait what?
          I'm not really sure how to explain it computer programming is pretty simple.
          It's a set of instructions like a recipe, you have to follow them step-by-step
          to get the end result you want.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: I can change the number of pixels, the length of the line, using this
          dropdown. How long was it again? You can see the instructions again by looking
          under the run button. Here I used the move forward block and I'm going to
          select 100 pixels. I can delete a block by dragging it into the toolbox
          or the trash can. Let's put it back.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Run the code by pressing run. Well that didn't work! I'll press reset
          and figure out what's wrong. You can try a puzzle as many times as you'd
          like and skip puzzles and come back to them. Just make sure to try your
          best and don't give up. Let's add another move forward. That still didn't
          work. I can place a block between other blocks.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Let's take a turn block and place it in between the move forwards. Turn
          left 45 degrees. Let's run it again. Reset, run, awesome! Here's another
          puzzle. Sometimes you are given starter code to complete. Here I need to
          add the appropriate lengths and degrees.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: You may sometimes accidentally trash the starter code. What do you do
          then? You can press clear puzzle and start all over again. I'm going to
          drag this number block into the different pixel areas. Select 100 for pixels,
          45 for degrees and 100 for pixels again. Awesome! Here is the Code Studio
          bee. I need to move the bee to each flower and get nectar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: The first flower is three blocks away so I need three move forwards.
          1, 2, 3. Then a get nectar, then another get nectar. Well that didn't work!
          I'll place another move forward between the get nectars and run it again.
          Yay, it works! You just learned how to use the Code Studio artist and bee
          puzzles. Good luck on the Code Studio puzzle challenge.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: What do you want to be when you grow up Olivia? Umm, an astronaut! Do
          you happen to know what a computer programmer is? Yeahh, umm, no. Umm, what
          what? I'm not really sure how to explain it. Computer programming is pretty
          simple. It's a set of instructions, like a recipe. You have to follow them
          step by step to get the end result you want.
      2:
        image: notes/unplug1_2.png
        text: Computer science is a way to impact the world. It can be music videos,
          it can be games, detect whether or not someone is related to someone else.
          Find you know, people's friends. You can do all sorts of other crazy things
          that actually save lives. You do have to have a drive I think. It is to
          me like a paintbrush. I think great programming is not all that dissimilar
          from great art.
      3:
        image: notes/unplug1_3.png
        text: When I finally learned a little bit of programming, that blank wall
          resolved into a bunch of doors and you open them and of course then you
          find behind them is another hallway filled with a bunch of doors. Programming
          is fun and easy. You can do anything your mind wants to do. Finally you
          start to open enough doors the light comes in. To me a finished program
          is like a structure filled with light. All the corners are illuminated.
          The number of people that you can touch and interact with is something the
          world has never seen before.
      4:
        image: notes/unplug1_4.png
        text: Our first lesson in this series is all about what computer science is,
          what a computer scientist does and how you can be more responsible in your
          use of technology. It's a very important lesson but it is a little text-heavy.
          At the end, you get to make your very own customized encoding using your
          initials. It's a fun activity and it's very empowering because binary is
          one of those things that feels very technical but once you understand it,
          it's like you speak a secret language.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: The lesson on computational thinking is intended to teach you how to
          take a big difficult problem and break it down into several simpler problems.
          The goal of this lesson is to write a set of instructions that someone can
          follow to draw one of the monsters included in the lesson plan.
      2:
        image: notes/unplug2_2.png
        text: 'Students will break into groups to write instructions and then they''ll
          switch them with another group that will have to draw the monster. Groups
          will write instructions using the four steps of computational thinking:
          decomposition, pattern location, abstraction and algorithms.'
      3:
        image: notes/unplug2_3.png
        text: First groups will decompose the task which means make a game plan. Then
          they'll look for patterns between all the monsters in the catalog. When
          they come across differences between the monsters, they'll abstract or remove
          those details. For instance, one monster in the catalog has vegitas eyes
          and another has spritem eyes. But they both have eyes so we can write a
          line that says the monster has blank eyes.
      4:
        image: notes/unplug2_4.png
        text: So students will be able to write a set of instructions, called an algorithm,
          that list the monsters' parts with blanks for what the styles should be.
          This is the set of instructions they'll pass to other students to recreate
          their very own monster.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug3_2.png
        text: 'In this activity, the only symbols you can use are these: move one
          square forward, one square backward, move one square up, move one square
          down, change to next color, and fill in your square with color. Once we
          have that coded up, we can hand it off to another person who can read the
          code and try and recreate the picture.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug4_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: In graph paper programming, we help explain how coding works by trying
          to help people recreate drawings using only arrows and scribbles. One person
          is given a small drawing on graph paper and they need to go through using
          only specific arrows and try to describe how to recreate that drawing.
      2:
        image: notes/unplug5_2.png
        text: In the second half of the activity, we ask students how many different
          ways they can fold a piece of paper to create sixteen identical rectangles.
          Then you'll discuss how multiple solutions can lead to the same end result
          and why some solutions are better in certain situations.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: This activity is called coding with cards and it's great for any age.
          Like you learned with the if statements in earlier lessons,  during Blockly,
          if statements have a piece about them you have to evaluate to find out if
          it's true or false. That's the conditional and it can be used in lots of
          different ways.
      2:
        image: notes/unplug6_2.png
        text: We take advantage of that by creating programs on paper that you run
          using a random draw of playing cards. You might have an if statement that
          says something like if the card you draw is greater than 8, you get a point.
          Otherwise, your opponent gets a point. You can make it as simple or as complicated
          as you feel comfortable.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: You know how when you look up the lyrics for a song and they define
          the chorus at the very beginning and then for the rest of the song, they
          just refer you back to the chorus? That's how you call a function.
      2:
        image: notes/unplug7_2.png
        text: In this lesson, we define the chorus at the beginning of our song and
          then we sing through our song and go back and we notice that the class doesn't
          sing the word chorus, they automatically go up to the top where we define
          the chorus and sing through that. We use that as a great introduction to
          how to understand what a program is doing when it defines and calls a function.
      3:
        image: notes/unplug7_3.png
        text: We use familiar songs including Old Macdonald to talk about how a chorus
          is called over and over and how sometimes a chorus can change. When you
          have a song like Old Macdonald, where certain words change, that's a great
          place to introduce the idea of parameters. Passing certain words through
          so that you can send extra information to your function. Once we're sure
          everybody gets it, you can take your own familiar songs and break them up
          yourself. See if you can figure it out together.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Our lesson on abstraction uses the familiar concept of madlibs, where
          you basically insert a blank in a story that can be filled with lots of
          different words. We take that idea, challenge kids to come up with their
          own words for their own stories, and really explain the concept of abstraction.
      2:
        image: notes/unplug8_2.png
        text: It's all about functions and how you can have a function, like in Old
          Macdonald, where you have a structure for your chorus but you have something
          little that changes and you abstract out that little thing that changes
          and you can fill it in with your own word every time through. But sometimes
          you have three words that change and so you fill those in with three parameters,
          that's still pretty helpful.
      3:
        image: notes/unplug8_3.png
        text: You can have one function that handles lots of different problems. Lots
          of times people will write separate functions for all those problems, not
          realizing there's only one little difference. If they could just find a
          way to handle that one little difference, they could just reuse one function
          over and over again, instead of having 14 different functions.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Relay programming is an extremely fun lesson that gets across way more
          than computer science. Sometimes everybody is getting a little bit antsy
          and you want to get them up on their feet. This is a great way to add some
          excitement to computer science.
      2:
        image: notes/unplug9_2.png
        text: You break everyone up into two groups where they stand in a line and
          run relay style. The first person in each group runs to the other side of
          the room where you have a graph paper drawing and a blank piece of paper
          waiting for them. They write down the first step to creating that image,
          run back to their line, tag the next player who goes back up to write the
          next step.
      3:
        image: notes/unplug9_3.png
        text: This is a great way to get across the idea of debugging, needing to
          proofread your own work, and needing to check the work of the people done
          before you. You'll quickly understand how important it is that you be careful
          in your coding when a whole team is depending on you.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: This activity explains in an easy-to-understand way how the internet
          works. We explain all the terminology you'll need in simple terms so that
          students can simulate transmitting messages, like an email.
      2:
        image: notes/unplug10_2.png
        text: Students will transmit messages while pretending to be one of three
          transmission methods. Wireless internet, DSL or fiber optic. The students
          who represent wi-fi will have to wear the message they're transmitting on
          their head because wifi is the most likely to drop some information.
      3:
        image: notes/unplug10_3.png
        text: The students pretending to be DSL or cable will carry the message on
          the back of their hand, where they're slightly less likely to drop information.
          And the students representing fiber optic will get to carry them with both
          hands. This activity is a great way to understand something that many of
          us use every day.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: So now it's time to step back and take a birds eye view of everything
          you've done in these past nineteen lessons. This is a great time to call
          out to students that what they've just done is a huge achievement. They've
          learned more over these lessons than most adults know about computer science.
      2:
        image: notes/unplug11_2.png
        text: Discuss as a class or in small groups about their favorite lessons.
          Once you take a look back at everything you've learned, this is where your
          students' creativity can shine. Split them into groups and have them create
          an unplugged lesson of their own. Assign each group a key concept, like
          functions or algorithms and have lots of craft materials on hand for them
          to use. Have each group present their new unplugged activity or even set
          aside another day to do a few of the student created activities.
      3:
        image: notes/unplug11_3.png
        text: From everyone here at Code.org, we hope you've had a TON of fun during
          this course. And whether your dream is to create the best new app, use programming
          to help cure diseases, or you just want to be a stellar problem-solver,
          this course was the first step in achieving those dreams.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: "Привіт! Я Кейтлін Кенеді, продюсер фільму «Зоряні війни: Пробудження
          сили». Сьогодні ви працюватимете з однією з наших зірок, BB-8. BB-8 — це
          сферичний дроїд. Кожною його дією і кожним рухом керує комп'ютерна програма.
          Інформатика має вплив на всі галузі, від маркетингу до охорони здоров'я
          та кінематографу. Дійсно, для створення такого фільму, як «Пробудження сили»,
          потрібна праця сотень комп'ютерних фахівців."
      2:
        image: notes/starwars_intro_2.JPG
        text: "Привіт, я Рейчел Роуз. Я старший інженер дослідник в ILM, я керую командою
          створення анімації та розробки створінь. У Пробудженні сили я відповідаю
          за те, щоб допомагати художникам з розробкою агрегатів, котрі допомагають
          рухомим персонажам виглядати природньо у далекій-далекій галактиці."
      3:
        image: notes/starwars_intro_3.JPG
        text: |-
          Протягом наступної години ми створимо власну гру Зоряні війни, яка навчить основним поняттям програмування.
          Зазвичай програмування - це написання тексту, але ми використаємо рухомі блоки для створення програми. Всередині ж, ми створюємо код. Після ознайомлення з основами через блоки, ми перемкнемось на JavaScript, одну із найбільш популярних мов програмування в Інтернеті.
      4:
        image: notes/starwars_intro_4.JPG
        text: "Для початку ми попрацюємо з Рей, щоби запрограмувати BB-8 пройти та
          зібрати весь металобрухт. Ваш екран поділено на три частини. На лівій знаходиться
          ігровий простір Зоряних воєн, де виконуватиметься код. Вказівки для кожного
          рівня написано нижче ігрового простору."
      5:
        image: notes/starwars_intro_5.JPG
        text: "Ця середня область є інструментарієм, і кожен із цих блоків є командою,
          яку може розуміти BB-8."
      6:
        image: notes/starwars_intro_6.JPG
        text: "Вільний простір праворуч називається робочим простором, і саме тут
          ми будуватимемо нашу програму."
      7:
        image: notes/starwars_intro_7.JPG
        text: "Якщо я перетягну блок «рухатись ліворуч» до нашого робочого простору,
          і потім натисну «Запустити», що станеться? BB-8 переміститься ліворуч на
          одне поле сітки."
      8:
        image: notes/starwars_intro_8.JPG
        text: "А що як я хочу, щоби BB-8 зробив щось після блоку «рухатись ліворуч»?
          Я можу додати ще один блок до програми. Я оберу блок «рухатись вгору», і
          перетягну його під мій блок «рухатись ліворуч», поки не з'явиться підсвітлення.
          Тоді я відпущу його, і ці два блоки зліпляться."
      9:
        image: notes/starwars_intro_9.JPG
        text: "Коли я натисну «Запустити» знову, BB-8 виконає команди, складені в
          нашому робочому просторі, згори донизу. А якщо вам захочеться видалити блок,
          то просто відтягніть його зі стопки назад до інструментарію."
      10:
        image: notes/starwars_intro_10.JPG
        text: "Після того, як ви натиснули «Запустити», ви завжди можете натиснути
          «Скидання», щоби повернути BB-8 назад до початку. Що ж, котімося!"
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: "Всередині блоків ми використовували команди JavaScript. JavaScript
          наразі є найпопулярнішою мовою програмування для фахових розробників. Блоки
          є чудовим шляхом почати навчання кодуванню, і, насправді, такі провідні
          університети, як Гарвард та Берклі, починають вчити таким чином. Але після
          вивчення основ фахівці пишуть код, набираючи текст, оскільки це дозволяє
          просуватися швидше."
      2:
        image: notes/starwars_typing_2.JPG
        text: "Ми можемо набирати сотні команд, уникаючи потреби шукати їх в інструментарії,
          та перетягувати. Оскільки ви лише вчитеся, набирання тексту може бути спершу
          повільнішим, але ми би хотіли, щоби ви спробували."
      3:
        image: notes/starwars_typing_3.JPG
        text: "У правому верхньому куті свого робочого простору на кожній із задач
          ви можете натиснути кнопку «Показати код», щоби перемкнутися з блоків до
          набирання коду як тексту."
      4:
        image: notes/starwars_typing_4.JPG
        text: "В наступному уроці ми дамо вам почати в текстовому режимі. Тут ви все
          ще можете перетягувати блоки з інструментарію, а можете й набирати назву
          команди. Щойно ви починатимете набирати, ви бачитимете назви можливих команд,
          показані під тим місцем, де ви набираєте. Щоби просуватися швидше, ви можете
          обирати одну з них, замість набирати назви команд повністю. В моїй праці
          я використовую цю функцію автодоповнення завжди, коли пишу код."
      5:
        image: notes/starwars_typing_5.JPG
        text: "Коли ви набираєте код, комп'ютерові треба, щоби ви були дуже точними.
          Вам потрібно використовувати точно правильне написання та великі й малі
          літери, включно з дужками та крапкою з комою. Навіть за маленької помилки
          набирання BB-8 не зрозуміє код, і не зможе рухатися."
      6:
        image: notes/starwars_typing_6.JPG
        text: "Якщо ви зробите помилку на якомусь рядкові, то редактор підсвітить
          її, щоби ви могли спробувати змінити свій текст для виправлення помилки."
      7:
        image: notes/starwars_typing_7.JPG
        text: "Якщо ви застрягли, ви завжди можете почати з початку за допомогою кнопки
          «Почати знову», а також можете в будь-який час перемкнутися до блокового
          режиму, натиснувши у правому верхньому куті. Гаразд, спробуймо набирати!
          І якщо ви робитимете помилки, не засмучуйтеся. Всім потрібно декілька спроб,
          щоби отримати зробити це правильно."
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: "Ну, привіт, мене звуть Чаріта Картер. Я — старший творчий продюсер
          тут у Walt Disney Imagineering. Я відповідаю за керування командами, які
          власне й розробляють ті атракціони, що ними насолоджуються наші гості. Ми
          постійно шукаємо шляхи вдосконалення та покращення вражень для наших гостей,
          і в серці цього лежить технологія."
      2:
        image: notes/starwars_events_2.JPG
        text: "Вітаю, ви це зробили! Ви запрограмували BB-8. Тепер, на мою думку,
          ми готові до чогось складнішого. Берімося за нього. Тепер, коли ви навчилися
          основ програмування, ми повернемося назад у часі, щоби побудувати вашу власну
          гру із R2-D2 та C-3PO у ролях."
      3:
        image: notes/starwars_events_3.JPG
        text: "Щоби зробити гру, нам треба дізнатися про дещо, що програмісти ігор
          використовують щодня: це називається подіями. Події вказують вашій програми
          слухати, або очікувати, коли дещо станеться, і коли воно стається, програма
          виконує якусь дію."
      4:
        image: notes/starwars_events_4.JPG
        text: "Деякими з прикладів подій є очікування натискання кнопки миші, клавіші
          стрілки на клавіатурі, або торкання екрану."
      5:
        image: notes/starwars_events_5.JPG
        text: "Тут ми збираємося зробити так, щоби R2-D2 перемістився вгору, щоби
          доставити повідомлення пілотові повстанців, а потім перемістився вниз до
          іншого пілоту повстанців. Щоби зробити так, щоби він рухався, ми будемо
          використовувати події. Коли гравець використовує клавіші стрілок вгору/вниз,
          або екранні кнопки вгору/вниз."
      6:
        image: notes/starwars_events_6.JPG
        text: "Ми використовуємо блок «коли стрілка Вгору», і чіпляємо до нього блок
          «йти вгору». Коли гравець натискає клавішу стрілки вгору, виконується код,
          прикріплений до блоку «коли стрілка Вгору». І так само ми зробимо, щоби
          R2-D2 рухався донизу."
      7:
        image: notes/starwars_events_7.JPG
        text: "Для цього ми скористаємося командою whenUp(). При перетягуванні цієї
          команди з інструментарію ви побачите, що вона починається та закінчується
          фігурною дужкою замість крапки з комою. І вони дають нам простір для розміщення
          інших команд між ними. Кожна команда, яку ми розмістимо всередині цих дужок,
          виконуватиметься, коли гравець натискатиме стрілку вгору."
      8:
        image: notes/starwars_events_8.JPG
        text: "Ми хочемо, щоби R2-D2 йшов угору, тож розмістімо всередині цієї команди
          блок goUp();. І зробімо те саме для того, щоби R2-D2 йшов донизу."
      9:
        image: notes/starwars_events_9.JPG
        text: "Тепер, замість написання всього коду для керування нашим дроїдом наперед,
          ми можемо дати R2-D2 реагувати на події натискання кнопок, які рухають його
          екраном. Крок за кроком у нашій грі стає все більше взаємодії."
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: "Привіт, мене звуть Аліса, я веду команди розробки та інженерії тут,
          в Code.org, і я працювала над цим підручником, з яким ви наразі граєте."
      2:
        image: notes/starwars_congrats_2.JPG
        text: "Ви щойно дійшли до останнього рівня. Вітаю! Ви щойно навчилися всього,
          що потрібно вам знати для створення власної гри «Зоряні війни». Тепер вже
          немає ані вказівок, ані головоломок для розгадування. Ви можете зробити
          власну гру, і ви самі обираєте як вона працюватиме. Ще одна річ, ви відкрили
          нові звуки та команди, щоби робити ще більше."
      3:
        image: notes/starwars_congrats_3.JPG
        text: |-
          [розмовляють учні] Отже, ми зробили гру, де по суті ви отримуєте бали, коли збираєте компресійних свиней. Головна перешкода — кожного разу, як ви берете компресійну свиню, з'являється штурмовик.
          Практично весь екран заповнено компресійними свинями, і коли ви торкаєтеся 10 000 з них, ви перемагаєте.
      4:
        image: notes/starwars_congrats_4.JPG
        text: "[розмовляють учні] Ми зробили гру, в якій ви не можете програти, і
          все, що ви вбиваєте, дає вам бали. У своїй програмі я обернула клавіші так,
          що коли ви натискаєте вгору, ваш персонаж іде донизу, а коли ви йдете праворуч,
          ваш персонаж іде ліворуч. Це дійсно складно! Іноді ви отримуєте перевагу,
          нечесну перевагу, якщо ви розробник гри. В мене вийшло? Так!"
      5:
        image: notes/starwars_congrats_5.JPG
        text: "Коли ви завершили створення своєї гри, ви можете поділитися посиланням
          на неї з друзями, або грати в неї на своєму телефоні. Насолоджуйтесь!"
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: "Привіт! Я Кейтлін Кенеді, продюсер фільму «Зоряні війни: Пробудження
          сили». Сьогодні ви працюватимете з однією з наших зірок, BB-8. BB-8 — це
          сферичний дроїд. Кожною його дією і кожним рухом керує комп'ютерна програма.
          Інформатика має вплив на всі галузі, від маркетингу до охорони здоров'я
          та кінематографу. Дійсно, для створення такого фільму, як «Пробудження сили»,
          потрібна праця сотень комп'ютерних фахівців."
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: "Привіт, я — Рейчел Роуз. Я — провідний інженер-дослідниця в ILM, і
          я керую командою анімації та розробки істот. У «Пробудженні сили» я відповідаю
          за допомогу художникам у створенні спорядження, яке є частиною персонажів,
          що рухаються, що дозволяє персонажеві виглядати в далекій-далекій галактиці
          дуже правдоподібно."
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: "Протягом наступної години ми збираємося побудувати нашу власну гру
          «Зоряні війни», що навчить вас основних понять програмування. Зазвичай програмування
          є повністю текстовим, але ми збираємося використовувати такі блоки, які
          ви можете перетягувати й відпускати, щоби писати програми. Для початку ми
          попрацюємо з Рей, щоби запрограмувати BB-8 пройти та зібрати весь металобрухт."
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: "Ваш екран поділено на три частини. Ліворуч знаходиться ігровий простір
          Зоряних воєн, де виконуватиметься код. Вказівки для кожного рівня знаходяться
          нижче ігрового простору."
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: "Ця середня область є інструментарієм, і кожен із цих блоків є командою,
          яку може розуміти BB-8."
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: "Вільний простір праворуч називається робочим простором, і саме тут
          ми будуватимемо нашу програму."
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: "Якщо я перетягну блок «рухатись ліворуч» до нашого робочого простору,
          що станеться? BB-8 переміститься ліворуч на одне поле сітки."
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: "А що як я хочу, щоби BB-8 зробив щось після блоку «рухатись ліворуч»?
          Я можу додати до нашої програми ще один блок. Я оберу блок «рухатись вгору»,
          і перетягну його під мій блок «рухатись ліворуч», поки не з'явиться підсвітлення.
          Тоді я відпущу його, і ці два блоки зліпляться. Коли я натисну «Запустити»
          знову, BB-8 виконає команди, складені в нашому робочому просторі, згори
          донизу."
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: "Якщо вам треба видалити блок, просто виберіть його у схемі та перетягніть
          назад у палітру інструментів."
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: "Після того, як ви натиснули «Запустити», ви завжди можете натиснути
          «Скидання», щоби повернути BB-8 назад до початку. Що ж, котімося!"
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: "Ну, привіт, мене звуть Чаріта Картер. Я — старший творчий продюсер
          тут у Walt Disney Imagineering. Я відповідаю за керування командами, які
          власне й розробляють ті атракціони, що ними насолоджуються наші гості. Ми
          постійно шукаємо шляхи вдосконалення та покращення вражень для наших гостей,
          і в серці цього лежить технологія."
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: "Вітаю, ви це зробили! Ви запрограмували BB-8. Тепер, на мою думку,
          ми готові до чогось складнішого. Берімося за нього. Тепер, коли ви навчилися
          основ програмування, ми повернемося назад у часі, щоби побудувати вашу власну
          гру із R2-D2 та C-3PO у ролях."
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: "Щоби зробити гру, нам треба дізнатися про дещо, що програмісти ігор
          використовують щодня: це називається подіями. Події вказують вашій програми
          слухати, або очікувати, коли дещо станеться, і коли воно стається, програма
          виконує якусь дію."
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: "Деякими з прикладів подій є очікування натискання кнопки миші, клавіші
          стрілки на клавіатурі, або торкання екрану."
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: "Тут ми збираємося зробити так, щоби R2-D2 перемістився вгору, щоби
          доставити повідомлення пілотові повстанців, а потім перемістився вниз до
          іншого пілоту повстанців. Щоби зробити так, щоби він рухався, ми будемо
          використовувати події. Коли гравець використовує клавіші стрілок вгору/вниз,
          або екранні кнопки вгору/вниз."
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: "Ми використовуємо блок «коли стрілка Вгору», і чіпляємо до нього блок
          «йти вгору». Коли гравець натискає клавішу стрілки вгору, виконується код,
          прикріплений до блоку «коли стрілка Вгору». І так само ми зробимо, щоби
          R2-D2 рухався донизу. Тепер, замість написання всього коду для керування
          нашим дроїдом наперед, ми можемо дати R2-D2 реагувати на події натискання
          кнопок, які рухають його екраном."
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: "Крок за кроком у нашій грі стає все більше взаємодії."
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: "Привіт, мене звуть Аліса, я веду команди розробки та інженерії тут,
          в Code.org, і я працювала над цим підручником, з яким ви наразі граєте."
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: "Ви щойно дійшли до останнього рівня. Вітаю! Ви щойно навчилися всього,
          що потрібно вам знати для створення власної гри «Зоряні війни». Тепер вже
          немає ані вказівок, ані головоломок для розгадування. Ви можете зробити
          власну гру, і ви самі обираєте як вона працюватиме. Ще одна річ, ви відкрили
          нові звуки та команди, щоби робити ще більше."
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: |-
          [розмовляють учні] Отже, ми зробили гру, де по суті ви отримуєте бали, коли збираєте компресійних свиней. Головна перешкода — кожного разу, як ви берете компресійну свиню, з'являється штурмовик.
          Практично весь екран заповнено компресійними свинями, і коли ви торкаєтеся 10 000 з них, ви перемагаєте.
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: "[розмовляють учні] Ми зробили гру, в якій ви не можете програти, і
          все, що ви вбиваєте, дає вам бали. У своїй програмі я обернула клавіші так,
          що коли ви натискаєте вгору, ваш персонаж іде донизу, а коли ви йдете праворуч,
          ваш персонаж іде ліворуч. Це дійсно складно! Іноді ви отримуєте перевагу,
          нечесну перевагу, якщо ви розробник гри. В мене вийшло? Так!"
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: "Коли ви завершили створення своєї гри, ви можете поділитися посиланням
          на неї з друзями, або грати в неї на своєму телефоні. Насолоджуйтесь!"
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: "Мене звуть Йенс Бергенстен, але я більш відомий як Джеб. Я - головний
          розробник Майнкрафт, тут в Mojang у Стокгольмі. Здається, мені було одинадцять
          або дванадцять, коли я почав програмувати, бо хотів робити ігри. Один з
          друзів батька сказав, що для цього треба програмувати. Так я і почав. Мені
          подобається розробляти й з'ясовувати архітектуру гри. Це те, чим мені дійсно
          подобається Майнкрафт."
      2:
        image: notes/mc_intro_2.JPG
        text: "Протягом наступної години ви навчитеся основам інформатики, програмуючи
          Алекс або Стіва рухатися імітацією частини світу Майнкрафту."
      3:
        image: notes/mc_intro_3.JPG
        text: "Традиційне програмування зазвичай є текстовим, але сьогодні ми будемо
          використовувати Блоклі: систему, що використовує блоки, які ви можете перетягувати
          й кидати, щоби писати програми. Під капотом ви створюєте код JavaScript."
      4:
        image: notes/mc_intro_4.JPG
        text: "Поняття, що ви будете вивчати, програмісти використовують щодня, і
          вони є основою інформатики. Тут у Mojang ми використовуємо ці самі поняття,
          щоби змусити Майнкрафт працювати."
      5:
        image: notes/mc_intro_5.JPG
        text: "Перш ніж ви почнете, ви оберете свого персонажа. Я оберу Алекс. Побудуймо
          код для програми, яка допоможе їй рухатися екраном."
      6:
        image: notes/mc_intro_6.JPG
        text: "Ваш екран поділено на три основні частини. Ліворуч знаходиться простір
          гри Майнкрафт, де виконуватиметься ваша програма. Вказівки для кожного рівня
          написано внизу."
      7:
        image: notes/mc_intro_7.JPG
        text: "Ця середня область є інструментарієм, і кожен із цих блоків є командою,
          яка спрямовує дії Алекс."
      8:
        image: notes/mc_intro_8.JPG
        text: "Чистий простір праворуч називається робочим простором, і саме тут ми
          будуватимемо нашу програму."
      9:
        image: notes/mc_intro_9.JPG
        text: "Якщо ми перетягнемо блок «рухатись вперед» до нашого робочого простору,
          і потім натиснемо «Запустити», що станеться? Алекс переміститься вперед
          на одне поле сітки."
      10:
        image: notes/mc_intro_10.JPG
        text: "А що як ми хотіли зробити щось після того, як вона перемістилася вперед
          на одне поле? Ми можемо додати до нашої програми ще один блок. Я хочу обрати
          блок «повернути праворуч», і перетягну його під мій блок «рухатись вперед»,
          поки не з'явиться ця помаранчева лінія. Тоді я відпущу його, і ці два блоки
          зліпляться. Коли ми знову натиснемо «Запустити», Алекс виконає команди,
          які складено в нашому робочому просторі, згори донизу."
      11:
        image: notes/mc_intro_11.JPG
        text: "А якщо вам захочеться видалити блок, то просто відтягніть його зі стопки
          назад до інструментарію."
      12:
        image: notes/mc_intro_12.JPG
        text: "Щоби скасувати свої зміни, і повернутися до початку рівня, скористайтеся
          кнопкою «Почати знову» в правому верхньому куті робочого простору. Ще одна
          річ, ви бачите маленький трикутник у блоках повороту? Де б ви не бачили
          ці трикутники, це означає, що можна обрати інший варіант. Почнімо кодувати!"
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: "Мене звуть Лідія Уінтерс, я — бренд-директор Mojang. Ми зробили невеличку
          гру, яка називається Майнкрафт."
      2:
        image: notes/mc_repeat_2.JPG
        text: "Що мені подобається робити в Майнкрафті найбільше, то це досліджувати.
          Я люблю пригоди в печерах, і дивитися, що я можу знайти. Як не програмістку,
          мене дуже зворушує проходження уроків Майнкрафту, і те, що я справді сама
          навчаюся якогось кодування."
      3:
        image: notes/mc_repeat_3.JPG
        text: "Попередній рівень потребував багато блоків «рухатись вперед». Було
          би простіше, якби ми могли просто сказати комп'ютерові виконати команду
          «рухатись вперед» чотири або п'ять разів. На щастя для нас, комп'ютери дуже
          добре повторюють команди за допомогою циклів повторювання."
      4:
        image: notes/mc_repeat_4.JPG
        text: "При побудові Майнкрафту ми застосовуємо цикли повторювання для розміщення
          всіх початкових матеріалів для створення нового світу. Це тисячі й тисячі
          блоків. Ми також застосовуємо цикли помаленьку, наприклад, щоби ноги Алекс
          рухалися вперед і назад, коли вона йде. Цикли повторювання є потужною частиною
          програмування."
      5:
        image: notes/mc_repeat_5.JPG
        text: "Наближається ніч, тож протягом наступної пари рівнів ми збираємося
          побудувати будинок, щоби бути в безпеці. Ми збираємося застосовувати блоки
          повторювання, щоби робити це дуже просто."
      6:
        image: notes/mc_repeat_6.JPG
        text: "Щоби збудувати стіну будинку, ми можемо або сказати Алекс «рухатись
          вперед» та ставити дошки чотири рази, або сказати їй «рухатись вперед» та
          поставити одну дошку, а потім взяти цю команду, і скористатися блоком «повторити»,
          щоби вона виконала цю дію декілька разів. А тепер ми клацнемо на блоку «повторити»,
          і скажемо їй, скільки разів ми би хотіли, щоби вона виконала цю дію. Тепер
          збудуймо наш дім, поки не настала ніч. Насолоджуйтесь!"
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: "Тепер ми дізнаємося про вирази «якщо». Вирази «якщо» є фундаментальною
          частиною навчання програмуванню. Вони допомагають комп'ютерові ухвалювати
          рішення."
      2:
        image: notes/mc_if_statements_2.JPG
        text: "Вирази «якщо» використовують всі комп'ютери, включно з моїм телефоном.
          Наприклад, коли я розблоковую свій телефон, він виконує певний код, який
          каже: якщо я ввела пароль правильно, то розблокувати телефон. Інакше він
          показує повідомлення про помилку."
      3:
        image: notes/mc_if_statements_3.JPG
        text: "Ви можете використовувати вирази «якщо» у своєму коді, щоби Стів та
          Алекс реагували на те, що вони бачать у світі. Наприклад, якщо перед ними
          скеля, вони можуть повернути ліворуч. Або повернути праворуч, якщо вони
          наштовхнулися на дерево."
      4:
        image: notes/mc_if_statements_4.JPG
        text: "В цьому випадку ми не хочемо впасти до лави. Скласти для лави план
          не складно. Ми бачимо її на екрані. Але що стосовно лави, яку ми не бачимо
          під каменем?"
      5:
        image: notes/mc_if_statements_5.JPG
        text: "Після того, як ми добудемо камінь, нам треба буде перевірити, чи є
          на цьому місці лава, перш ніж ми рушимо вперед. Якщо там є лава, то ми хочемо
          поставити бруківку перед нашим персонажем, перш ніж ми зможемо рухатися
          вперед. Таким чином ми можемо рухатися безпечно. Час добувати ще! І не забувайте
          використовувати вираз «якщо», щоби дивитися, куди стаєте."
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: "Вітаємо! Ви тільки що вивчили основні блоки компьютерної науки."
      2:
        image: notes/mc_congrats_share_2.JPG
        text: "Тепер ви можете використовувати ці блоки для побудови свого власного
          творіння. Більше немає інструкцій та головоломок для розгадування. Ви можете
          будувати, що захочете. Обирати вам."
      3:
        image: notes/mc_congrats_share_3.JPG
        text: "[розмовляють учні] Зараз вийде. Стригти. Я зробив «L» з факелів. Я
          зробила «A» з березових дощок. Ми збудували дім з вовни. Спрацювало, спрацювало.
          Ми збудували дім з вовни!"
      4:
        image: notes/mc_congrats_share_4.JPG
        text: "Коли ви завершили побудову свого творіння, оберіть «Поділитись», щоби
          отримати посилання, і поділитися ним зі своїми друзями. Насолоджуйтесь!"
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: "Вітаємо! Ви тільки що вивчили основні блоки компьютерної науки."
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: "Тепер ви можете використовувати ці блоки для побудови свого власного
          творіння. Більше немає інструкцій та головоломок для розгадування. Ви можете
          будувати, що захочете. Обирати вам."
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: "[розмовляють учні] Зараз вийде. Стригти. Я зробив «L» з факелів. Я
          зробила «A» з березових дощок. Ми збудували дім з вовни. Спрацювало, спрацювало.
          Ми збудували дім з вовни!"
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: "Тепер ви можете побудувати все, що хочете. Розважайтеся!"
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/gumball_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/gumball_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/gumball_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/gumball_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/gumball_intro_6.JPG
        text: "Чистий простір праворуч називається робочим простором, і саме тут ми
          будуватимемо нашу програму."
      7:
        image: notes/gumball_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/gumball_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/gumball_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/gumball_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/gumball_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/gumball_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/gumball_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/gumball_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/iceage_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/iceage_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: "Чистий простір праворуч називається робочим простором, і саме тут ми
          будуватимемо нашу програму."
      7:
        image: notes/iceage_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/iceage_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
    mc_2016_intro:
      1:
        image: notes/mc_2016_intro_1.jpg
        text: "Привіт, мене звуть Єнс, я — провідний творчий розробник Майнкрафту.
          Протягом наступної години ви зробите свою власну гру Майнкрафт. Вона виглядає
          як Майнкрафт, але цей світ зупинено. Вівця не рухається, курка не несе яйця,
          а зомбі просто стоять. Це ваша задача додати код, щоби світ Майнкрафту запрацював."
      2:
        image: notes/mc_2016_intro_2.jpg
        text: "Мене звуть Меліса, я — дослідниця користувачів Майнкрафту. Мене дуже
          цікавить, як люди думають і взаємодіють із технологією, і тому ця праця
          є ідеальною для мене для поєднання комп'ютерної розробки та психології:
          як люди думають та поводяться."
      3:
        image: notes/mc_2016_intro_3.jpg
        text: "Ви побачите, що ваш екран розділено на три основні частини. 1) Ліворуч
          знаходиться гра Майнкрафт. Зараз цей світ заморожено, але ми збираємося
          виправити це за допомогою коду."
      4:
        image: notes/mc_2016_intro_4.jpg
        text: 2) Ця середня область є набором інструментів. Кожен із цих блоків є
          командою, яку можуть розуміти курка, вівця та інші істоти Майнкрафту.
      5:
        image: notes/mc_2016_intro_5.jpg
        text: 3) Простір праворуч називається робочим простором, і саме тут ми будуватимемо
          нашу програму.
      6:
        image: notes/mc_2016_intro_6.jpg
        text: "Якщо ви забудете, що робити, то вказівки для кожного рівня знаходяться
          вгорі."
      7:
        image: notes/mc_2016_intro_7.jpg
        text: "Для початку ми запрограмуємо курку. Перетягнімо команду «рухатись вперед»
          до робочого простору. Коли я натискаю «Запустити», курка рухається вперед
          на один крок. Для продовження я перетягну ще один блок «рухатись вперед»
          під перший блок «рухатись вперед», поки не з'явиться підсвітлення. Потім
          я відпущу його, і ці два блоки зліпляться. Якщо я натисну «Запустити» знову,
          курка пройде на два кроки."
      8:
        image: notes/mc_2016_intro_8.jpg
        text: "Якщо вам захочеться видалити блок, то просто вилучіть його зі стопки
          та відтягніть назад до набору інструментів."
      9:
        image: notes/mc_2016_intro_9.jpg
        text: "Після того, як ви натиснули «Запустити», ви завжди можете натиснути
          «Скидання», щоби скинути гру й почати знову. Тепер ваш хід, зробити свою
          особисту версію Майнкрафту. Насолоджуйтесь!"
    mc_2016_loops:
      1:
        image: notes/mc_2016_loops_1.jpg
        text: "Привіт, мене звуть Ліза. Я — програмістка Майнкрафту, я працюю над
          деякими з тварин та ворогів у цій грі. Однією з тварин, над якими я працювала,
          є оцелот, я працювала над тією частиною, в якій коли ви тримаєте рибу, оцелот
          підкрадатиметься до вас. І якщо ви нагодуєте його рибою, ви приручите його,
          й оцелот стане вашим власним котом."
      2:
        image: notes/mc_2016_loops_2.jpg
        text: "Як людям, нам дуже набридає, якщо нам доводиться робити одне й те саме
          знову й знову. Але що круто з комп'ютерами, що вони можуть робити одне й
          те саме мільйони, або навіть мільярди разів підряд, і їм це не набридає.
          Це повторювання називається циклом. Кожна істота в Майнкрафті використовує
          цикли."
      3:
        image: notes/mc_2016_loops_3.jpg
        text: "Раніше ми зробили, щоби курка рухалася екраном, але потім вона зупинилася.
          У Майнкрафті кури бродять постійно. Скористаймося циклом «постійно робити»
          з нашого набору інструментів, щоби наші кури також рухалися постійно. Сила
          циклів заощадить вам купу часу і відкриє всі види витончених варіантів при
          побудові вашої власної версії Майнкрафту."
    mc_2016_events:
      1:
        image: notes/mc_2016_events_1.jpg
        text: "На цьому наступному рівні ви можете обрати, бути Стівом, чи Алекс.
          Натискайте клавіші зі стрілками на своїй клавіатурі, щоби рухатися догори,
          донизу, ліворуч та праворуч. Тепер ви можете рухатися рівнем, де вам заманеться.
          Щоби використати істоту, просто підійдіть до неї, поверніться до неї обличчям,
          і натисніть пропуск."
      2:
        image: notes/mc_2016_events_2.jpg
        text: "Якщо ви використовуєте дотикочутливий екран, то проводьте пальцем вгору,
          вниз, ліворуч та праворуч, щоби рухатися. Потім торкніться гри, щоби використати
          предмет перед собою."
      3:
        image: notes/mc_2016_events_3.jpg
        text: "Але що відбувається, коли ви використовуєте його? У Майнкрафті вівці
          скидають вовну, коли ви стрижете їх, корови тікають, коли ви б'єте їх, а
          кріпери вибухають, коли ви опиняєтеся біля них. Ці реакції відбуваються
          завдяки дечому, що називається подіями. Події кажуть вашій програмі слухати,
          або чекати, коли щось станеться. І коли це станеться, виконати дію."
      4:
        image: notes/mc_2016_events_4.jpg
        text: Наразі ми використали одну подію. Код, розміщений у розділі "коли створено",
          виконується, коли створюється істота, або розпочинається гра. На наступних
          кількох рівнях будуть нові розділи для таких подій, як "коли торкається"
          - запускається, коли ми торкаємось істоти, або "коли використовується",
          коли ми використовуємо об'єкт. Або, якщо хочеш, щоб зомбі зник зі сходом
          сонця, розмісти цю дію в розділі "коли настає день"
    mc_2016_spawn:
      1:
        image: notes/mc_2016_spawn_1.jpg
        text: В іграх створення ще називають породженням. На цьому рівні будемо створювати
          зомбі після заходу сонця. Щоб це зробити, використаємо блок "коли настає
          ніч".
      2:
        image: notes/mc_2016_spawn_2.jpg
        text: Оскільки ми хочемо створити зомбі вночі, ми додаємо блок "створити зомбі"
          під блок "коли настає ніч". Як тільки вони будуть створені, кожен зомбі
          виконає код, який ти розмістиш у їхньому розділі подій "коли створено".
          Розважайся, створюючи зомбі!
    mc_2016_congrats:
      1:
        image: notes/mc_2016_congrats_1.jpg
        text: "Вітаємо! Ви вивчили, як застосовувати команди інформатики, щоби оживити
          світ Майнкрафту. Ви тепер — розробник. Ви розкрили всі ці команди, та всі
          істоти. Ви вибираєте, що відбувається."
      2:
        image: notes/mc_2016_congrats_2.jpg
        text: "Коли ви завершили створення своєї гри, можете поділитися посиланням
          на свою гру з друзями, або грати у свою гру на своєму телефоні. Насолоджуйтесь!
          Я з нетерпінням чекаю можливості пограти у вашу версію Майнкрафту."
    applab_intro_welcome:
      1:
        image: notes/applab_intro_welcome_1.png
        text: My name is Mei'lani. I'm an intern at code.org and I'm also a computer
          science student. I like computer science because it's really creative. I
          get to be the problem solver. I get to make everything function how I want
          it to. But I also get to be the designer. I get to be the artist and choose
          everything on the creative side of it.
      2:
        image: notes/applab_intro_welcome_2.png
        text: Making your own apps is easy with App Lab! Whether you're new to coding
          or have some experience. App Lab is a great tool for building new apps and
          sharing them with your friends.
      3:
        image: notes/applab_intro_welcome_3.png
        text: This is a App Lab. On the left side is your app. On the right side is
          the code that will make it run. You build your program by dragging in blocks
          from the toolbox. To start you'll just have one block called 'setProperty'.
      4:
        image: notes/applab_intro_welcome_4.png
        text: The set property block changes the look of the elements on your screen.
          Like the buttons, labels, or even the screen itself. First you need to decide
          which element you want to change. If you hover over an element in your app
          you can see the name or ID here. Then go select that ID from the first drop
          down.
      5:
        image: notes/applab_intro_welcome_5.png
        text: Elements have lots of properties you can change like their text color,
          background color or font size. You can see the full list and choose which
          property you want to change in the second drop down.
      6:
        image: notes/applab_intro_welcome_6.png
        text: The last drop down is where you'll write the value you want to use value
          you want to use. The block will make a suggestion for you. But you can always
          type in different colors or numbers yourself.
      7:
        image: notes/applab_intro_welcome_7.png
        text: Once you're done, the block reads a bit like a sentence:'Set button1's
          background color to green.' Hit run to see the changes you're building in
          code. If you reset you can drag in more blocks to change other things about
          your app. Like the text!
      8:
        image: notes/applab_intro_welcome_8.png
        text: For this tutorial we'll be working in block mode but App Lab also supports
          working in text.
      9:
        image: notes/applab_intro_welcome_9.png
        text: Either way you'll be programming in JavaScript, the language of the
          web. Each level has a goal, instructions and an image of what you're aiming
          to create.
      10:
        image: notes/applab_intro_welcome_10.png
        text: If you're ever stuck, click on this picture and it will show you exactly
          how to complete the level. But see if you can do it on your own first.
      11:
        image: notes/applab_intro_welcome_11.png
        text: Once you've completed the goal for this level click Finish to move on.
          That's all there is to it! Hit the orange "continue" button to go to the
          next level and start your adventure with an App Lab!
    applab_intro_events:
      1:
        image: notes/applab_intro_events_1.png
        text: Apps are really cool because it's kind of like starting your own business
          I mean, you get to design everything from the ground up, you get to manage
          everything, and you're the owner of this piece of work that you just created
          with code.
      2:
        image: notes/applab_intro_events_2.png
        text: Now that you can change the look of your app let's make it interactive
          by responding to events! Events are user actions like clicking a button,
          scrolling through a menu, or hovering over a picture. Interactive apps need
          ways to respond to events, like playing a sound when I click this button.
          To do this in App Lab you need to use a new block called 'onEvent'.
      3:
        image: notes/applab_intro_events_3.png
        text: This program sets the screen to blue. I want the screen to turn green
          when I click this button. First I'll need to drag in an onEvent block. By
          hovering I know the button's ID is "bigButton" so I'll select that in the
          first drop-down.
      4:
        image: notes/applab_intro_events_4.png
        text: Next I'll choose the type of event. There's lots of options you can
          pick from but right now I'll leave it as a regular old click.
      5:
        image: notes/applab_intro_events_5.png
        text: 'Finally I''ll add code inside the on event that will change the background
          color of the screen. You can read this block like a sentence: "On the event
          that the button is clicked run all this code."'
      6:
        image: notes/applab_intro_events_6.png
        text: Let's test it. Blocks outside an onEvent still run right away so the
          screen starts blue.
      7:
        image: notes/applab_intro_events_7.png
        text: And when I click the big button the code inside my onEvent runs and
          my screen turns green.
      8:
        image: notes/applab_intro_events_8.png
        text: If you want to change more things after the event, like the text on
          the screen just add more code to the onEvent
      9:
        image: notes/applab_intro_events_9.png
        text: To make your program respond to more events add more onEvent blocks.
          Just make sure not to put them inside of each other. Now it's time to try
          it out for yourself. Have fun!
    applab_intro_sounds:
      1:
        image: notes/applab_intro_sounds_1.png
        text: Next you'll learn about adding images and sounds to your app. Let's
          start by checking out the sound options.
      2:
        image: notes/applab_intro_sounds_2.png
        text: In the tool box you'll find a new block called "playSound". Drag it
          into the workspace. You can pick a sound to play by clicking the drop-down
          then clicking "Choose".
      3:
        image: notes/applab_intro_sounds_3.png
        text: From here you can either upload a sound file from your computer, or
          search for a sound from the sound library. The sound library has lots of
          different categories like instruments, background music or animals.
      4:
        image: notes/applab_intro_sounds_4.png
        text: Once you've got the sound you want, click "Choose". When this block
          runs, it will play the sound you chose.
      5:
        image: notes/applab_intro_sounds_5.png
        text: To add images to your elements you can just use the setProperty block.
          Select the image property in the second drop-down
      6:
        image: notes/applab_intro_sounds_6.png
        text: Then select "Choose" from the third drop down.
      7:
        image: notes/applab_intro_sounds_7.png
        text: From here you can upload an image from your computer or you can look
          through a huge library of icons in the icon library.
      8:
        image: notes/applab_intro_sounds_8.png
        text: Back in code mode you can use the "setProperty" block to change the
          icon color of your icon. Once you've picked what image your icon to use
          click "Run" to see how it looks.
      9:
        image: notes/applab_intro_sounds_9.png
        text: That's all there is to it! Now you can start adding images and sounds
          to make your apps even more fun and dynamic.
    applab_intro_designmode:
      1:
        image: notes/applab_intro_designmode_1.png
        text: To build your own apps you're going to need to start designing screens
          and elements from scratch. App Lab makes this easy to do with Design Mode.
      2:
        image: notes/applab_intro_designmode_2.png
        text: Use the switch on top of your app to go into Design Mode.
      3:
        image: notes/applab_intro_designmode_3.png
        text: You can add new elements by dragging them onto the screen. You can move
          them around to different locations and change their size by dragging the
          bottom right corner.
      4:
        image: notes/applab_intro_designmode_4.png
        text: To change an element's properties use the controls on the right. For
          example, it's really easy to change this button's text, color, and font
          size.
      5:
        image: notes/applab_intro_designmode_5.png
        text: When you add a new element to your screen it'll get a generic ID like
          button1. It's a good idea to change this button's ID to something more meaningful
          like "rightButton". So that you'll know which one it is when you go to the
          program.
      6:
        image: notes/applab_intro_designmode_6.png
        text: If you add an element to your app by mistake, just drag it out or hit
          the delete.
      7:
        image: notes/applab_intro_designmode_7.png
        text: You can add entirely new screens to your app by dragging in a screen
          element
      8:
        image: notes/applab_intro_designmode_8.png
        text: From the drop-down at the top you can quickly switch back and forth
          between the screens you create.
      9:
        image: notes/applab_intro_designmode_9.png
        text: Inside your app, you'll need a way to switch between all of these screens,
          so the setScreen block has been added to the toolbox. Use "setScreen" inside
          the "onEvent" block to change screens at the click of a button.
      10:
        image: notes/applab_intro_designmode_10.png
        text: In the next few levels you'll be working on a single project. First
          you'll add a button then you'll add a new screen and finally you'll write
          code so that the button switches to the new screen.
    applab_intro_share:
      1:
        image: notes/applab_intro_share_1.png
        text: Now that you've learned some of the basics of App Lab like adding buttons,
          sounds, images, text and new screens you can make all sorts of apps.
      2:
        image: notes/applab_intro_share_2.png
        text: In the next level you'll find the app you just finished building. With
          a little creativity, you can turn this into a personality quiz for your
          friends, a greeting card that you can share with your family or a choose-your-own-adventure
          game. All of these apps are just a combination of the skills you've already
          learned, and I bet you can come up with even more.
      3:
        image: notes/applab_intro_share_3.png
        text: Once you're done with your app you can easily send it to your phone
          to see how it looks. Just click "Share" and enter your phone number here.
      4:
        image: notes/applab_intro_share_4.png
        text: You'll receive a text message that'll let you open up your app instantly.
      5:
        image: notes/applab_intro_share_5.png
        text: You can also share a link to your app over social media or post it to
          the code.org public gallery for other people to play and share.
      6:
        image: notes/applab_intro_share_6.png
        text: You've just scratched the surface of what App Lab can do. Full App Lab
          features more advanced user interactions, new screen elements and even a
          built-in database so you can quickly build full featured apps. At "code.org/applab"
          you'll find the full tool and lots of ideas if you want to keep going.
      7:
        image: notes/applab_intro_share_7.png
        text: Thanks for coming along the ride. Now go build and share your first
          app, and keep on building apps with App Lab!
    mc_2017_agent_intro:
      1:
        image: notes/mc_2017_agent_intro_1.png
        text: 'Stacy: Stampy, Lizzy, Preston - thank you for coming with me. What
          I want to show you is just over this mesa plateau. I think you''re going
          to love it!'
      2:
        image: notes/mc_2017_agent_intro_2.png
        text: Wait a minute - there's a hole in the track! (screaming)
      3:
        image: notes/mc_2017_agent_intro_3.png
        text: 'Is everyone okay? Stampy: Ah, I see the problem. Look! There was a
          hole in the track. Stacy: Really, Stampy? Lizzy: Maybe we should gather
          blocks to fix it. Preston: Let''s make it a race. First one back to the
          top wins. Stacy: Ok, on your mark, get set, GO! Ok, I''m just gonna gather
          some of this terracotta. Wait. Guys, I can''t mine! Preston: Same. Lizzy:
          I can''t either. Stacy: Ok, that is really strange. Stampy, can you mine?
          Stampy: I can''t mine! Stacy: Ok, everyone stay calm. Stampy: Is the game
          broken? Stacy: If it is, how do we fix it? Lizzy: I don''t know. Stampy:
          Does anyone know how to write Minecraft code?'
      4:
        image: notes/mc_2017_agent_intro_4.png
        text: "(poof) Preston: What is that? Stampy: I've never seen one of these
          before. Lizzy: It's so adorable! Stacy: Is it...is it tameable? Preston:
          Okay, what is going on? Someone needs to go back to the real world and fix
          this.  All: Not it! Stacy: Not i- (Sigh.) Ok, I'll go."
      5:
        image: notes/mc_2017_agent_intro_5.png
        text: Oh, okay, hey, so I'm in the real world now. I'm going to go try to
          find the Minecraft offices.
      6:
        image: notes/mc_2017_agent_intro_6.png
        text: But, I'm going to need your help. Start doing the tutorial, start learning
          how to code, and I'll catch up with you guys after a few levels, okay? Wish
          me luck! I think it's this way. Ow! Cactus! I'm okay!
      7:
        image: notes/mc_2017_agent_intro_7.png
        text: To complete the Hour of Code challenge, you'll need to write code to
          program the agent. You'll work together with The Agent to clear any obstacles
          in your path, so you can pick up the items you'll need for your journey.
          Only the Agent can place and break blocks, and only you can collect items.
          Your screen is split into three main parts. On the left is Minecraft.
      8:
        image: notes/mc_2017_agent_intro_8.png
        text: The middle area is the toolbox with commands that the Agent can understand.
      9:
        image: notes/mc_2017_agent_intro_9.png
        text: And on the right, is the workspace. That's where you stack the commands
          to build your program to control the Agent.
      10:
        image: notes/mc_2017_agent_intro_10.png
        text: The Agent can walk, turn, and activate pressure plates. It can also
          destroy blocks and place blocks. When it places the block like these minecart
          rails, it places it underneath itself.
      11:
        image: notes/mc_2017_agent_intro_11.png
        text: "Якщо ви забудете, що робити, то вказівки для кожного рівня знаходяться
          вгорі."
      12:
        image: notes/mc_2017_agent_intro_12.png
        text: If you want to try again, you can hit the blue reset button to reset
          everything to where it started. And if you need to delete a block of code,
          drag it from your workspace to the toolbox. Remember to hit run to get the
          Agent moving. Okay, go ahead and try out the first few levels. Good luck!
    mc_2017_repeat:
      1:
        image: notes/mc_2017_repeat_1.png
        text: 'Stampy: I wonder what Stacy is up to?'
      2:
        image: notes/mc_2017_repeat_2.png
        text: 'Stacy: Woah, I think I''m in the right place. This is amazing!'
      3:
        image: notes/mc_2017_repeat_3.png
        text: I feel like I'm back in Minecraft! Hello. How are you? Hello?
      4:
        image: notes/mc_2017_repeat_4.png
        text: 'Oh, there''s a creeper. You don''t do anything, do you? Katie: Stacy?
          Stacy:Hi, Katie? Katie: Yes, welcome to Minecraft!'
      5:
        image: notes/mc_2017_repeat_5.png
        text: 'Stacy: This is amazing. So you work here every day as a developer,
          right? Katie: Yeah, it''s pretty awesome. I''m a developer on the Minecraft
          marketplace team. Stacy: How many coding languages do you know? Katie: In
          my career I''ve probably worked with over a dozen. Stacy: A dozen? Katie:
          Yeah. Stacy: So now, you wouldn''t happen to know anything about this little
          golem guy that calls himself the Agent? Katie: We use the Agent to do things
          that Steve or Alex can''t, like go across lava. Stacy: Well, I want to learn
          how to code, and they want to learn how to code, so what is one of the first
          things that you need to know when you''re learning?'
      6:
        image: notes/mc_2017_repeat_6.png
        text: 'Katie: Well, you need to learn how to use loops. Loops are things that
          developers write to give commands to a computer that can be run over and
          over again. Stacy: Got it, so I think there''s actually some of that coming
          up in the levels ahead, so go ahead and give loops a try.'
      7:
        image: notes/mc_2017_repeat_7.png
        text: In the next level, you can use a loop to move the Agent along the path.
          Drag the repeat block into the workspace and place the move forward block
          inside the repeat block. This tells the computer to do the same thing many
          times in a row without having to drag a whole bunch of blocks into the workspace.
          You can choose how many times to repeat by putting a number in the repeat
          block.
      8:
        image: notes/mc_2017_repeat_8.png
        text: You can put turns and multiple commands in the repeat block too, but
          for now try using a repeat to move the Agent forward a few steps. Remember,
          if you get stuck on a puzzle you can always hit the blue reset button and
          try again.
      9:
        image: notes/mc_2017_repeat_9.png
        text: 'If you are thinking about having a cool job like Katie''s, go ahead
          and click the show code button when you finish every level. That''s going
          to actually show you the Javascript code that someone like Katie uses when
          she''s actually programming Minecraft. Katie: Yeah, good luck everyone!'
    mc_2017_functions:
      1:
        image: notes/mc_2017_functions_1.png
        text: 'Preston: I''m not trying to brag, but I''m pretty good at parkour.
          Lizzy: Let''s sleep so it''s day when Stacy comes back.'
      2:
        image: notes/mc_2017_functions_2.png
        text: 'Stacy: Ok guys, I am back from the Minecraft offices, and I think I
          know how to solve the problem I''m having in my game. I think I can use
          a function. Let me just open this.'
      3:
        image: notes/mc_2017_functions_3.png
        text: So a function is a specific set of instructions to accomplish a certain
          task, kind of like a recipe. In the next few levels, you'll have access
          to functions that you can use to solve the puzzles.
      4:
        image: notes/mc_2017_functions_4.png
        text: Look at the code in the function when it's in the workspace to see what
          it does.
      5:
        image: notes/mc_2017_functions_5.png
        text: Then, find the block with that name in the toolbox and drag it from
          the toolbox to the when run block.
      6:
        image: notes/mc_2017_functions_6.png
        text: Remember, you can use the same function every time you need to run the
          same set of instructions to do something, like build a bridge. Good luck,
          I know you can do it!
    mc_2017_congratulations:
      1:
        image: notes/mc_2017_congratulations_1.png
        text: 'Preston: Congratulations!'
      2:
        image: notes/mc_2017_congratulations_2.png
        text: 'Lizzy: Congratulations!'
      3:
        image: notes/mc_2017_congratulations_3.png
        text: 'Stampy: Congratulations, you did it!'
      4:
        image: notes/mc_2017_congratulations_4.png
        text: 'Stacy: Congratulations guys, you totally rocked that! And now that
          you''ve completed the Hour of Code, you can start coding in Minecraft. You''ve
          learned about loops, functions, and what a software Agent does.'
      5:
        image: notes/mc_2017_congratulations_5.png
        text: Now, it's time for the free play level, where you are the developer.
          Use any remaining time to write your own functions to explore, mine, and
          build.
      6:
        image: notes/mc_2017_congratulations_6.png
        text: 'You can take the code that you write in this level into your Minecraft
          world on Minecraft: Education Edition. Just click ''Finish'' and follow
          the instructions for getting the link to use in your world. to continue
          coding with the Agent. Have fun, and good job!'
      7:
        image: notes/mc_2017_congratulations_7.png
        text: 'Stacy: And I''m back! Okay, you guys, this is the Agent! Let me show
          you what it can do. Look, it''s doing it! I told it to build a staircase
          out of these terra cotta blocks, now we can just use this to get out of
          here. And you guys, it''s not just staircases. I can tell the Agent to do
          anything I want, and it will do it for me.'
      8:
        image: notes/mc_2017_congratulations_8.png
        text: 'Stampy: How did you do that? Stacy: It was easy, actually. I just used
          code!'
    csd_concept_how_computers_work:
      1:
        image: notes/csd_concept_how_computers_work_1.png
        text: 'Everywhere you look, computers are changing the world. Whether they''re
          on our desktops, in our homes, our pockets, or just about anywhere else.
          But while most of us use this revolutionary technology daily, we don''t
          often ask: "How do computers work?" In this series, you''re going to learn
          how computers really work, starting with what makes a computer a computer.
          Then, you''ll look at how information is represented inside the computer
          using tiny electrical signals going on and off at mind-boggling speeds.'
      2:
        image: notes/csd_concept_how_computers_work_2.png
        text: After that, you'll learn how computers use circuits to do everything
          from simple math to simulating entire virtual worlds. Next, you'll zoom
          out and look at the different parts of a computer that actually input, output,
          and store all that information. Finally, you'll take a look at what code
          actually is and how software controls hardware. So whether you're just curious
          about the devices you use every day or you want to design the innovations
          of the future, the first step is learning how computers work.
    csd_concept_computer:
      1:
        image: notes/csd_concept_computer_1.png
        text: My name is May-Li Khoe and I'm a designer and an inventor. So some of
          the things I've designed have been at Apple, and now I design products for
          kids to use so that they can have an easier time in school. My other jobs
          include DJ-ing and dancing.
      2:
        image: notes/csd_concept_computer_2.png
        text: Computers are everywhere! They're in people's pockets, they're in people's
          cars, people have them on their wrists. They might be in your backpack right
          now. But what makes a computer a computer? What does make a computer a computer
          anyway? And how does it even work?
      3:
        image: notes/csd_concept_computer_3.png
        text: Hi I'm Nat! I was one of the original designers of the Xbox. I've been
          working with computers since I was maybe seven years old and now I work
          on virtual reality. As humans, we've always built tools to help us solve
          problems. Tools like a wheelbarrow, a hammer, or a printing press, or a
          tractor-trailer.
      4:
        image: notes/csd_concept_computer_4.png
        text: All of these inventions helped us with manual work. Over time, people
          began to wonder if a machine could be designed and built to help us with
          the thinking work we do, like solving equations or tracking the stars in
          the sky. Rather than moving or manipulating physical things like dirt and
          stone, these machines would need to be designed to manipulate information.
          As the pioneers of computer science explored how to design a thinking machine,
          they realized that it had to perform four different tasks.
      5:
        image: notes/csd_concept_computer_5.png
        text: It would need to take input, store information process it and then output
          the results. Now this might sound simple, but these four things are common
          to all computers. That's what makes a computer a computer.
      6:
        image: notes/csd_concept_computer_6.png
        text: Computers started out as basic calculators, which was already really
          awesome at the time, and they were only manipulating numbers back then.
          But now we can use them to talk to each other, we can use them to play games,
          control robots, and do any crazy thing that you could probably imagine.
          Modern computers look nothing like those clunky old machines but they still
          do these same four things.
      7:
        image: notes/csd_concept_computer_7.png
        text: First, we're going to talk about input. You can tell computers what
          to do with the keyboard, you can tell them what to do with the mouse, the
          microphone, the camera. All these different inputs give a computer information,
          which is then stored in memory.
      8:
        image: notes/csd_concept_computer_8.png
        text: A computer's processor takes information from memory. It manipulates
          it or changes it using an algorithm, which is just a series of commands.
          And then it sends the processed information back to be stored in memory
          again. This continues until the processed information is ready to be output.
      9:
        image: notes/csd_concept_computer_9.png
        text: How a computer outputs information depends on what the computer is designed
          to do. A computer display can show text, photos, videos, or interactive
          games -- even virtual reality! The output of a computer may even include
          signals to control a robot.
      10:
        image: notes/csd_concept_computer_10.png
        text: And who knows what the computers of tomorrow will be like? My hope is
          that you get to help decide what you want the computers of tomorrow to look
          like. But across all computers, regardless of the different types of technology
          they use, they're always doing those same four things. They take in information,
          they store it as data, they process it, and then they output the results.
    csd_concept_binary_data:
      1:
        image: notes/csd_concept_binary_data_1.png
        text: Hi! My name is Limor Fried, and I'm an engineer here at Adafruit Industries.
          And this is where I do engineering and design, and I design circuits for
          fashion and music and technology.
      2:
        image: notes/csd_concept_binary_data_2.png
        text: My name is Federico Gomez Suarez, and I'm a software developer with
          Microsoft Hack for Good. And I look into using technology to help us solve
          some of the big social problems of our times.
      3:
        image: notes/csd_concept_binary_data_3.png
        text: You may have heard that computers work on ones and zeros. But almost
          nobody today actually deals directly with these ones and zeros. But ones
          and zeroes do play a big role in how computers work on the inside.
      4:
        image: notes/csd_concept_binary_data_4.png
        text: Inside a computer are electric wires and circuits that carry all the
          information in a computer. How do you store or represent information using
          electricity?
      5:
        image: notes/csd_concept_binary_data_5.png
        text: Well, if you have a single wire with electricity flowing through it,
          the signal could either be on or off. That's not a lot of choices, but it's
          a really important start. With one wire, we can represent a yes or no, true
          or false, a one or zero, or anything else with only two options. This on/off
          state of a single wire is called a bit, and it's the smallest piece of information
          a computer can store.
      6:
        image: notes/csd_concept_binary_data_6.png
        text: 'If you use more wires you get more bits: more ones and zeros. With
          more bits you can represent more complex information. But to understand
          that, we need to learn about something called the binary number system.'
      7:
        image: notes/csd_concept_binary_data_7.png
        text: 'In the decimal number system, we have ten digits from zero to nine,
          and that''s how we''ve all learned to count. In the binary number system,
          we only have two digits: zero and one. With these two digits, we can count
          up to any number.'
      8:
        image: notes/csd_concept_binary_data_8.png
        text: Here's how this works. In a decimal number system we're all used to,
          each position in a number has a different value. There's a 1 position, the
          10 position, the 100 position, and so on. For example, a 9 in the 100 position
          is a 900. In binary, each position also carries a value. But instead of
          multiplying by 10 each time, we multiply by 2. So there's the 1 position,
          the 2 position, the 4 position, the 8 position, and so on. For example,
          the number 9 in binary is 1001. To calculate the value, we add 1 times 8,
          plus 0 times 4, plus 0 times 2, plus 1 times 1. Almost nobody does this
          math because computers do it for us. What's important is that any number
          can be represented with only ones and zeros, or by a bunch of wires that
          are on or off. The more wires you use, the larger the numbers you can store.
          With 8 wires, you can store numbers between 0 and 255. That's 8 ones. With
          just 32 wires, you can store all the way from 0 to over 4 billion. Using
          the binary number system, you can represent any number you like.
      9:
        image: notes/csd_concept_binary_data_9.png
        text: But what about other types of information? Like text, images, or sound?
          It turns out that all these things can also be represented with numbers.
          Think of all the letters in the alphabet. You could assign a number to each
          letter. A could be 1, B could be 2, and so on. You can then represent any
          word or paragraph as a sequence of numbers. And as we saw, these numbers
          can be stored as on or off electrical signals. Every word you see on every
          webpage or your phone is represented using a system like this.
      10:
        image: notes/csd_concept_binary_data_10.png
        text: Now, let's consider photos, videos, and all the graphics you see on
          a screen.
      11:
        image: notes/csd_concept_binary_data_11.png
        text: All of these images are made out of teeny dots called pixels, and each
          pixel has a color. Each of the colors can be represented with numbers. When
          you consider the typical image has millions of these pixels, and the typical
          video shows 30 images per second now we're talking about a lot of data here.
      12:
        image: notes/csd_concept_binary_data_12.png
        text: Every sound is basically a series of vibrations in the air. Vibrations
          can be represented graphically as a waveform. Any point on this waveform
          can be represented by a number. And this way, any sound can be broken down
          into a series of numbers. If you want higher quality sound, you will pick
          32-bit audio or an 8-bit audio. More bits means a higher range of numbers.
      13:
        image: notes/csd_concept_binary_data_13.png
        text: When you use a computer to write code or make your own app, you're not
          dealing directly with these ones and zeros. But you will be dealing with
          images or sound or video. So if you want to understand how computers work
          on the inside, it all comes down these simple ones and zeros and the electrical
          signals in the circuits behind them.
    csd_concept_circuits_logic:
      1:
        image: notes/csd_concept_circuits_logic_1.png
        text: One of the coolest things I've discovered about circuits is circuitry
          can be an art form like if I have a creative idea, I can get that creative
          idea out using circuits. So if you have ideas, you can use technology to
          make those ideas come to life.
      2:
        image: notes/csd_concept_circuits_logic_2.png
        text: Every input or output of a computer is effectively a type of information,
          which can be represented by on or off electrical signals or ones and zeros.
      3:
        image: notes/csd_concept_circuits_logic_3.png
        text: In order to process the information that comes in as input, and to make
          the information that is output, a computer needs to modify and combine the
          input signals. To do this, a computer uses millions of teeny electronic
          components, which come together to form circuits.
      4:
        image: notes/csd_concept_circuits_logic_4.png
        text: Let's take a closer look at how circuits can modify and process information
          that's represented in ones and zeros. This is an incredibly simple circuit.
          It takes an electrical signal, on or off, and it flips it. So if the signal
          you give it is a 1, the circuit gives you a 0, and if you give the circuit
          a 0, it gives you a 1. The signal that goes in is not the same as the signal
          that comes out, and so we call this circuit NOT.
      5:
        image: notes/csd_concept_circuits_logic_5.png
        text: More complicated circuits can take multiple signals and combine them,
          and give you a different result. In this example, a circuit will take two
          electrical signals, now each one might be a 1 or a 0. If either of the signals
          coming in is a 0, then the result is also a 0. This circuit will only give
          you a 1, if the first signal and the second signal are both a 1, and so
          we call the circuit AND.
      6:
        image: notes/csd_concept_circuits_logic_6.png
        text: There are many small circuits like this that perform simple logical
          calculations. By connecting these circuits together, we can make more complex
          circuits that perform more complex calculations.
      7:
        image: notes/csd_concept_circuits_logic_7.png
        text: For example, you can make a circuit that adds 2 bits together called
          an adder. This circuit takes in 2 individual bits, each one a 1 or a 0,
          and adds them together to calculate the sum. The sum can be 0 plus 0 equals
          0, 0 plus 1 equals 1, or 1 plus 1 equals 2. You need two wires coming out
          because it can take up to two binary digits to represent the sum. Once you
          have a single adder for adding two bits of information, you can put together
          multiples of these adder circuits side-by-side to add together much larger
          numbers.
      8:
        image: notes/csd_concept_circuits_logic_8.png
        text: For example, here's how an 8-bit adder adds the numbers 25 and 50. Each
          number is represented using 8 bits, resulting in 16 different electrical
          signals that go into the circuit. The circuit for an 8-bit adder has lots
          of little adders inside of it, which together, calculate the sum.
      9:
        image: notes/csd_concept_circuits_logic_9.png
        text: Different electrical circuits can perform other simple calculations
          like subtraction or multiplication. In fact, all the information processing
          your computer does is just lots and lots of small simple operations put
          together. Each individual operation done by a computer is so, so simple
          it could be done by a human, but these circuits inside computers are way
          way faster.
      10:
        image: notes/csd_concept_circuits_logic_10.png
        text: Back in the day, these circuits were big and clunky, and an 8-bit adder
          could be as big as a fridge, and it would take minutes for them to perform
          a simple calculation. Today, computer circuits are microscopic in size,
          and way way faster. Why are smaller computers also faster? Well, because
          the smaller the circuit is, the less distance the electrical signal has
          to go. Electricity moves at just about the speed of light, which is why
          modern circuits can perform billions of calculations per second.
      11:
        image: notes/csd_concept_circuits_logic_11.png
        text: So whether you're playing a game, recording a video, or exploring the
          cosmos, everything you could possibly do with technology requires lots of
          information to be processed extremely quickly. Underneath all this complexity
          is just lots of teeny little circuits that turn binary signals into websites,
          videos, music, and games. These circuits can even help us decode DNA to
          diagnose and cure disease. So what would you like to do with all these circuits?
    csd_concept_memory_cpu_input_output:
      1:
        image: notes/csd_concept_memory_cpu_input_output_1.png
        text: Hi, my name is Madison Maxey. I have a company called Loomia, and we
          focus on making smart fabrics for smart clothing and smart soft good products.
          The sky's the limit when it comes to textiles.
      2:
        image: notes/csd_concept_memory_cpu_input_output_2.png
        text: My name is Danielle Applestone, and I'm CEO of Othermachine Company.
          We build a desktop milling machine. A milling machine takes a rotating cutting
          tool and moves it through material to create a 3D object.
      3:
        image: notes/csd_concept_memory_cpu_input_output_3.png
        text: Under the hood, all computers do the same four basic things. They input
          information, store and process the information, and then, output information.
          Each of these things is done by a different part of the computer.
      4:
        image: notes/csd_concept_memory_cpu_input_output_4.png
        text: There are input devices that take input from the outside world and convert
          it into binary information. There is memory to store this information. There's
          a central processing unit or CPU, where all the calculations are done. And,
          finally, there are output devices that take information and convert it into
          a physical output.
      5:
        image: notes/csd_concept_memory_cpu_input_output_5.png
        text: Let's talk about input first. Computers can take many different types
          of input, like the keyboard of a computer, the touchpad of a phone, a camera,
          a microphone, or a GPS. But even the sensors on a car, a thermostat, or
          a drone are also different input devices.
      6:
        image: notes/csd_concept_memory_cpu_input_output_6.png
        text: Now, let's look at a simple example of how input travels through a computer
          and becomes output. When you press a key on your keyboard - let's say the
          letter "B". The keyboard converts the letter to a number. That number is
          sent as binary, ones and zeros, into the computer.
      7:
        image: notes/csd_concept_memory_cpu_input_output_7.png
        text: Starting from this number, the CPU calculates how to display the letter
          "B" pixel by pixel. The CPU requests step-by-step instructions from memory,
          which tell it how to draw the letter "B". The CPU runs these instructions
          and stores the results as pixels in memory.
      8:
        image: notes/csd_concept_memory_cpu_input_output_8.png
        text: Finally, this pixel information is sent in binary to the screen. The
          screen is an output device, which converts the binary signals into the tiny
          lights and colors that make up what you see.
      9:
        image: notes/csd_concept_memory_cpu_input_output_9.png
        text: This all happens so quickly it feels instantaneous, but to display each
          letter a computer runs thousands of instructions, starting from the moment
          your finger presses the key point.
      10:
        image: notes/csd_concept_memory_cpu_input_output_10.png
        text: In that example, the output device was the screen, but there are many
          different types of output which take a binary signal from the computer and
          do something in the physical world. For example, a speaker will play sound,
          and a 3D printer will print an object. Output devices can also control physical
          motion like a robotic arm, the motor of a car, or the cutting tool of the
          milling machine that my company makes. New types of inputs and outputs let
          computers interact with the world in entirely new ways. This has been helped
          out by improvements to the speed and size of the memory and CPU.
      11:
        image: notes/csd_concept_memory_cpu_input_output_11.png
        text: The more complicated a task is and the more information that is input
          or output, the more processing power and memory a computer needs. Typing
          letters on a screen may be easy but to do complicated 3d graphics or record
          a high-definition movie, modern computers often have multiple CPUs to process
          all that information and many gigabytes of memory to store it.
      12:
        image: notes/csd_concept_memory_cpu_input_output_12.png
        text: 'No matter what it is you want to do with the computer, every single
          action is about: inputting information from the physical world, storing
          and processing that information, and getting some output back into the physical
          world.'
    csd_concept_hardware_software:
      1:
        image: notes/csd_concept_hardware_software_1.png
        text: Hi, my name is Erica Gomez and I'm an engineering manager at Amazon.com.
          One of the best things about working in tech, and at Amazon in particular,
          is that I get to bring my dog with me to work every day. My job is to help
          make sure software gets out the door and her job is to nap under my desk
          and snore very loudly.
      2:
        image: notes/csd_concept_hardware_software_2.png
        text: 'My name is Jerome Holman, and I''m a Program Manager on Team Xbox and
          I have a really fun job: Basically bringing the hardware and the software
          together to give you all the games that you love on your Xbox.'
      3:
        image: notes/csd_concept_hardware_software_3.png
        text: When you look inside a computing device you see a bunch of circuits,
          chips, wires, speakers, plugs, and all sorts of other stuff. This is the
          hardware.
      4:
        image: notes/csd_concept_hardware_software_4.png
        text: But what you don't see is the software. Software is all of the computer
          programs, or code, running on this machine. Software can be anything from
          apps and games to webpages and the data science software that me and my
          teams use at Amazon to understand how customers behave.
      5:
        image: notes/csd_concept_hardware_software_5.png
        text: But how do the hardware and the software interact with one another?
          Let's start at looking at a computer's central processing unit, or CPU.
      6:
        image: notes/csd_concept_hardware_software_6.png
        text: The CPU is the master chip that controls all the other parts of the
          computer. A CPU needs to do different things so inside it has smaller, simpler
          parts that handle specific tasks. It has circuits to do simple math and
          logic. It has other circuits to send and receive information to and from
          different parts of the computer.
      7:
        image: notes/csd_concept_hardware_software_7.png
        text: The real magic of the CPU is how it knows which circuits to use and
          when to use them. The CPU receives simple commands that tell it which circuit
          to use to do a specific job. For example, an "add" command tells the CPU
          to use its outer circuit to calculate a new number. And then the "store"
          command tells the CPU to use a different circuit to save that result into
          memory.
      8:
        image: notes/csd_concept_hardware_software_8.png
        text: Just like numbers, all of these simple commands can be represented in
          binary ones and zeros or on and off electrical signals. The binary commands
          are stored in memory and the CPU fetches and executes them in sequence one
          after the other. This sequence of commands is, in fact, a very simple computer
          program.
      9:
        image: notes/csd_concept_hardware_software_9.png
        text: Binary code is the most basic form of software and it controls all the
          hardware of a computer. These days, nobody writes software in binary. It
          would take forever!
      10:
        image: notes/csd_concept_hardware_software_10.png
        text: Today, the software we write looks more like this (Python), or this
          (Ruby), or even this (Blockly). Programming languages like these let you
          type in commands in something that looks a lot like English.
      11:
        image: notes/csd_concept_hardware_software_11.png
        text: To draw a rectangle on the screen, you just need a single command. This
          high-level command is converted into hundreds, or thousands, of simpler
          binary commands that the CPU understands. Software tells the CPU what to
          do, but when you're listening to music, and browsing the web, and chatting
          with a friend, your computer is running multiple pieces of software all
          at once.
      12:
        image: notes/csd_concept_hardware_software_12.png
        text: So, how do all of these programs get on the computer in the first place,
          and how can the CPU run them all at once? To find out we'll have to take
          a look at the operating system.
      13:
        image: notes/csd_concept_hardware_software_13.png
        text: The operating system of the computer is the master program that manages
          how software gets to use the hardware of the computer. For example, I helped
          create the Windows operating system that runs on most personal computers.
      14:
        image: notes/csd_concept_hardware_software_14.png
        text: The operating system is a program with special abilities that let it
          control the other software on the computer. It lets you install new programs
          by loading them into your computer's memory. It decides when a program is
          run by the central processing unit, and whether that program can access
          the computer's input and output devices. And when you think your computer
          is running many programs at once, in reality, it's the operating system
          that's quickly switching between programs sharing that CPU for fractions
          of a second.
      15:
        image: notes/csd_concept_hardware_software_15.png
        text: Inside every computer is an operating system managing software that
          controls the computer's hardware.
      16:
        image: notes/csd_concept_hardware_software_16.png
        text: The software is a series of commands made of simple binary code, and
          that binary code is just electrical signals flowing through billions of
          tiny circuits.
      17:
        image: notes/csd_concept_hardware_software_17.png
        text: Computers have the potential to do all kinds of amazing things. But
          the only thing that makes the computer smart, or useful, is you. When you
          learn to code you get to define the problem you want to solve, and write
          the software that turns those ideas into reality.
