"es-MX":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Bienvenido a tu primera hora de código!, Vamos a sumergirnos en tu primera
          experiencia de programación.
      2:
        image: notes/hoc1_2.jpg
        text: Usaremos Blockly, un lenguaje de programación visual donde puedes arrastrar
          y soltar bloques para escribir código.
      3:
        image: notes/hoc1_3.jpg
        text: La mayoría del código está escrito a mano, en cambio Blockly es visual.
          Cada bloque corresponde a una línea de código "real".
      4:
        image: notes/hoc1_4.jpg
        text: Aprenderás los fundamentos de las ciencias de la computación, conceptos
          que se utilizan en cualquier lugar, desde hacer aplicaciones móviles hasta
          controlar el explorador de Marte.
      5:
        image: notes/hoc1_5.jpg
        text: Un programa es un conjunto de instrucciones que ejecuta tu computadora.
      6:
        image: notes/hoc1_6.jpg
        text: El objetivo de tu primer programa es guiar un Angry Bird a través de
          un laberinto para alcanzar al cerdo verde.
      7:
        image: notes/hoc1_7.jpg
        text: El lado izquierdo es el laberinto donde se ejecuta tu programa. Las
          instrucciones para cada rompecabezas están debajo del laberinto.
      8:
        image: notes/hoc1_8.jpg
        text: La barra de herramientas de en medio contiene los comandos para el Angry
          Bird. Los usarás para construir tu código.
      9:
        image: notes/hoc1_9.jpg
        text: A la derecha está tu área de trabajo donde podrás arrastrar los bloques
          del cuadro de herramientas para construir tu programa. Para eliminar un
          bloque, arrástralo a la basura que se encuentra en la esquina.
      10:
        image: notes/hoc1_10.jpg
        text: Cada bloque es una instrucción. Si arrastras el bloque "avanzar" a tu
          espacio de trabajo y oprimes el botón "Ejecutar Programa", el pájaro se
          mueve una casilla en el laberinto.
      11:
        image: notes/hoc1_11.jpg
        text: Para hacer más de una acción, puedes arrastrar muchos bloques en tu
          espacio de trabajo y adjuntarlos. El pájaro hará las acciones de arriba
          hacia abajo.
      12:
        image: notes/hoc1_12.jpg
        text: Si ejecutas un programa y quieres arreglarlo e intentar de nuevo, presiona
          el botón "Reiniciar".
      13:
        image: notes/hoc1_13.jpg
        text: ¡Vamos por esos cerdos!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Hola! Me llamo JR. Cada equipo de coches de carreras necesita programadores
          para ganar. Ellos analizan los datos del coche para hacerlo correr más rápido.
      2:
        image: notes/stage5_2.jpg
        text: En estos rompecabezas, serás un artista que dibuja una línea detrás
          de ellos dondequiera que vayan.
      3:
        image: notes/stage5_3.jpg
        text: Este bloque dice "avanzar 100 pixeles". Los pixeles son solamente puntos
          pequeñitos en tu pantalla.
      4:
        image: notes/stage5_4.jpg
        text: Este bloque dice "girar a la derecha 90 grados". Esto girará a tu artista
          la misma cantidad que los bloques "girar" en el laberinto.
      5:
        image: notes/stage5_5.jpg
        text: Haga clic en la flecha en cualquiera de estos bloques para cambiar la
          cantidad que el artista se mueve hacia adelante o gira. Juega con ellos
          para familiarizarte con estos nuevos bloques.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Hola, soy Paola! En estos rompecabezas, tu eres una granjera que tiene
          que aplanar completamente su campo para iniciar la siembra de cultivos.
      2:
        image: notes/stage9_2.jpg
        text: Tienes que ayudarla a quitar todos los montones de tierra y rellenar
          todos los huecos.
      3:
        image: notes/stage9_3.jpg
        text: Los nuevos bloques eliminan una pala de tierra de un montón y rellenan
          una pala de tierra un hueco.
      4:
        image: notes/stage9_4.jpg
        text: Los montones y los huecos son de diferente tamaño, así que tienes que
          decirle al granjero cuántas palas debe usar.
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: ¡Hola, soy Katie! Una de las cosas más emocionantes de las Ciencias
          de la computación es que un programa de computadora puede ser interactivo.
      2:
        image: notes/flappy02.jpg
        text: Cada vez que alguien hace click, toca o teclea en una computadora o
          teléfono genera un EVENTO y hay cierto código que decide qué hacer cuando
          ocurre un EVENTO.
      3:
        image: notes/flappy03.jpg
        text: 'Por ejemplo, tienes un CONTROLADOR DE EVENTOS que dice "cuando se hace
          clic en el ratón, reproduce un sonido" '
      4:
        image: notes/flappy04.jpg
        text: ¿Has oído del juego FlappyBird? Mediante el uso de controladores de
          eventos, vamos a aprender a programar nuestra propia versión de FlappyBird!
      5:
        image: notes/flappy05.jpg
        text: El código que vas a escribir involucra arrastrar y soltar bloques que
          representan instrucciones para la computadora. Por dentro, cada uno de estos
          bloques está representado por código real.
      6:
        image: notes/flappy06.jpg
        text: 'Si echas un vistazo en el espacio de trabajo, hay algunos bloques verdes
          que ya fueron rellenados para ti - estos son los "controladores de eventos" '
      7:
        image: notes/flappy07.jpg
        text: Si quieres que el pájaro ALETEE cuando haces CLIC en el ratón, puedes
          hacerlo uniendo el bloque "ALETEAR" al manejador de eventos adecuado, y
          así en tu juego cada vez que haces clic en el ratón, el pájaro aleteará.
      8:
        image: notes/flappy08.jpg
        text: En cada rompecabezas de esta actividad te presentaremos nuevos tipos
          de eventos en forma de bloques verdes en el espacio de trabajo y tu puedes
          decidir los bloques apropiados para agregar en respuesta a esos eventos.
      9:
        image: notes/flappy09.jpg
        text: Cuando ves una flecha hacia abajo como esta, significa que puedes cambiar
          los ajustes - como qué sonido usar cuando flappy caiga al suelo.
      10:
        image: notes/flappy10.jpg
        text: En el rompecabezas final podrás crear tu propio juego y compartirlo
          con tus amigos. ¡Que te diviertas!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Hola, soy Mark! Aprendamos acerca de las iteraciones. Usando iteraciones
          puedes decirle a una computadora que repita una y otra vez cualquier conjunto
          de acciones, miles o incluso millones de veces.
      2:
        image: notes/hoc2_2.jpg
        text: En este rompecabezas, queremos que el pájaro se mueva hacia adelante
          5 espacios para llegar al puerquito.
      3:
        image: notes/hoc2_3.jpg
        text: Podemos usar el nuevo bloque "repetir" para que nos ayude.
      4:
        image: notes/hoc2_4.jpg
        text: En lugar arrastrar 5 bloques "avanzar"...
      5:
        image: notes/hoc2_5.jpg
        text: Podemos poner el bloque "avanzar" dentro del bloque "repetir" y escribir
          un número en el bloque para decirle cuántas veces repetirlo.
      6:
        image: notes/hoc2_6.jpg
        text: 'Y esto es importante: puedes poner más de un comando dentro de un bloque
          "repetir".'
      7:
        image: notes/hoc2_7.jpg
        text: ¡Disfruta usando tu nuevo bloque "repetir"!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Hola, soy Chris. Antes de unirme a los Miami Heat, fui a Georgia Tech
          a estudiar Ciencias de la Computación. Vamos a probar nuestro nuevo bloque,
          el bloque "repetir hasta".
      2:
        image: notes/hoc3_2.jpg
        text: ¿Qué sucedería si no supiéramos cuanto debería moverse el pájaro para
          llegar al cerdo?
      3:
        image: notes/hoc3_3.jpg
        text: Si ponemos un bloque "avanzar" dentro del bloque "repetir hasta", el
          pájaro avanzará HASTA que alcance al cerdo (o choque con una pared).
      4:
        image: notes/hoc3_4.jpg
        text: 'Y esto es importante: igual que antes, podemos poner varios bloques
          dentro del bloque "repetir hasta", y todos estos serán repetidos.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: '¡Hola, soy Bill! Aprendamos un nuevo concepto fundamental: las declaraciones
          "si". Esta es la forma en la que las computadoras toman decisiones.'
      2:
        image: notes/hoc4_2.jpg
        text: Tú utilizas sentencias "if" todos los días. Antes de salir cada mañana
          dices IF (si) está lloviendo afuera, debo utilizar mi chamarra.
      3:
        image: notes/hoc4_3.jpg
        text: Podemos decirle al zombie que verifique IF (si) existe un camino hacia
          la izquierda, y si encuentra un camino a la izauiqerda, podemos pedirle
          que de vuelta en esa dirección.
      4:
        image: notes/hoc4_4.jpg
        text: Para escribir este código para esto arrastremos nuestro bloque "if"
          y pongamos un bloque "turn left" adentro de él.
      5:
        image: notes/hoc4_5.jpg
        text: Ahora, si ponemos un bloque "move forward" encima de él y un bloque
          "repeat" alrededor de todo, cada vez que el zombie se mueva, verificará
          si existe un camino hacia la izquierda y dará la vuelta. El comando "repeat"
          es crítico para poder verificar si hay vuelta en cada paso.
      6:
        image: notes/hoc4_6.jpg
        text: Las sentencias "if" son realmente importantes en computación. Uno de
          los primeros programas que escribí fue un juego de gato, y había una sentencia
          "if" que decía, IF (si) la otra persona está a punto de ganar, bloquea el
          espacio que le permitiría ganar.
      7:
        image: notes/hoc4_7.jpg
        text: ¡Diviértete usando el bloque "if" (si)!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Hola, mi nombre es Saloni. Yo utilizó la ciencia de la computación para
          resolver problemas en medicina y salud. Aprendamos acerca del bloque "if
          else". Se parece a un bloque "if", pero tiene una parte adicional al final
          que dice "else" (si no).
      2:
        image: notes/hoc5_2.jpg
        text: Si coloco un bloque "move forward" (avanza hacia adelante) en el lugar
          dónde dice "do" (hacer) y un bloque "turn left" (giro izquierda) en dónde
          dice "else" (si no) esto quiere decir que el zombie eligirá una de las dos
          opciones. IF (si) existe un camino hacia adelante, el zombie se moverá adelante,
          de otra manera (no existe un camino hacia adelante), el zombie girará hacia
          la izquierda.
      3:
        image: notes/hoc5_3.jpg
        text: Al igual que el bloque "si", podemos poner el bloque "si sino" dentro
          de un bloque "repetir" para que el zombie siga moviéndose y el bloque "si
          sino" seguirá comprobando si hay espacio para girar.
      4:
        image: notes/hoc5_4.jpg
        text: ¡Ahora llevemos a esos zombies a donde pertenecen!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Una instrucción si-sino es una decisión entre dos cosas. Vamos a ver
          cómo podemos utilizar una instrucción si-sino con nuestro amigo Scrat la
          ardilla.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Este bloque se ve igual que el bloque "si", pero hay una pieza extra
          en la parte inferior que dice "sino". Si ponemos un bloque "avanzar" donde
          dice "hacer" y un bloque "girar a la izquierda" donde dice "sino", eso significa
          que la ardilla Scrat avanzará si hay un camino delante. Si no hay un camino
          a seguir, Scrat girará a la izquierda.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Es tomar una decisión y hacer una de las dos acciones en base a esa
          decisión. Y al igual que los bloques "si", puedes poner bloques "si-sino"
          dentro de bloques "repetir".
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: ¡Ahora vamos a ayudar a la ardilla Scrat a conseguir esa bellota!
    function:
      1:
        image: notes/stage13_1.jpg
        text: '!Hola! soy Brina, una ingeniera de Instagram. Una función es un conjunto
          de líneas de código que quieres usar una y otra vez, así que en vez de escribir
          ese código cada vez, puedes usar solo un bloque.'
      2:
        image: notes/stage13_2.jpg
        text: Vamos a aprender cómo definir funciones. Las definiciones de funciones
          tienen una estrella en la esquina. El nombre de la función está escrito
          en la línea superior.
      3:
        image: notes/stage13_3.jpg
        text: Los bloques que se encuentran dentro de la definición nos dicen qué
          hace. Así que esta definición de función se llama "rellena 5" y está formada
          por un bloque "repetir" y un bloque "rellenar".
      4:
        image: notes/stage13_4.jpg
        text: La definición se encuentra en el espacio de trabajo, pero nuestro agricultor
          no ejecutará la función hasta que arrastremos el bloque "llenar 5" desde
          la categoría de funciones.
      5:
        image: notes/stage13_5.jpg
        text: '¡Volvamos a hacer divertidas las funciones! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: '¡Hola! soy Makinde. Vamos a aprender acerca del bloque "mientras". '
      2:
        image: notes/stage9_6.jpg
        text: El "bloque mientras que (While)" hará todo lo que pones en su interior
          mientras la declaración en la parte superior es verdadera.
      3:
        image: notes/stage9_7.jpg
        text: Por ejemplo, si la granjera está sobre un montón, continuará eliminando
          una palada llena mientras(WHILE) quede tierra debajo de ella.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: '!Hola! soy Trina y trabajo para Pixar. He trabajado en un montón de
          películas incluyendo Shrek.'
      2:
        image: notes/stage11_2.jpg
        text: Esta es nuestra nueva iteración "contador". Realizará acciones una y
          otra ves y puedes hacer que las acciones cambien un poco cada vez.
      3:
        image: notes/stage11_3.jpg
        text: En este ejemplo, nuestra iteración "contador" dice "cuenta con un contador
          de 50 a 90 de 10 en 10" y dentro de ella tenemos un bloque "dibuja un cuadrado".
          Arrastra el bloque "contador" desde la sección "Variables" al sitio "longitud".
      4:
        image: notes/stage11_4.jpg
        text: Esto significa que nuestro artista dibujará un cuadrado que tiene lados
          de 50 píxeles de longitud, luego agregará 10 para dibujar un cuadrado con
          lados de 60 píxeles de longitud, Después continuará agregando 10 para dibujar
          cuadrados hasta que alcance 90. Así que tendremos cuadrados de 50, 60, 70,
          80 y 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Hola, yo soy Janete y yo soy una ingeniera en Zynga.
      2:
        image: notes/stage15_2.jpg
        text: ¿Qué pasa si queremos dibujar un montón de triángulos y sus lados tienen
          que ser de longitudes diferentes?
      3:
        image: notes/stage15_3.jpg
        text: Podemos escribir a mano ese código o podemos usar una función con parámetros.
      4:
        image: notes/stage15_4.jpg
        text: Para hacer esto, haz clic en la estrella azul sobre la definición de
          la función "dibuja un triángulo". Después arrastra "nombre de entrada" en
          el bloque "entrada".
      5:
        image: notes/stage15_5.jpg
        text: Después si escribes "longitud" en el lugar que dice "x" y presionas
          "Enter" crearás una entrada longitud para tu función.
      6:
        image: notes/stage15_6.jpg
        text: Después haz clic en la estrella. Ahora, haz clic en la categoría de
          las variables y arrastrar el bloque "longitud" dentro del bloque "avanzar"
          de la definición de tu función. Y arrastra hacia afuera el antiguo bloque
          número.
      7:
        image: notes/stage15_7.jpg
        text: Para usar tu función con parámetros, haz clic en la categoría funciones
          y arrastra tu función "dibuja un triángulo con longitud".
      8:
        image: notes/stage15_8.jpg
        text: Ahora puedes usar el bloque matemáticas para introducir diferentes números
          para dibujar triángulos de diferente tamaño.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: ¡Felicidades! Con el último puzzle resuelto, acabas de escribir código
          que puede decir a cualquier robot cómo encontrar su camino a través de un
          laberinto sin ramificación o túnel de cualquier longitud, no importa si
          es un zombie, un pájaro, un rover de Marte o incluso un coche sin conductor.
      2:
        image: notes/hoc6_2.jpg
        text: Los conceptos básicos que utilizaste son el corazón de cualquier programa
          o aplicación que encuentres.  Aprendimos acerca de iteraciones, las declaraciones
          "repetir hasta", las declaraciones "si" y las "si sí no".
      3:
        image: notes/hoc6_3.jpg
        text: Si te gustó tu primera hora del código, visita code.org para continuar
          tu educación en Ciencias de la Computación. Una vez que completes nuestro
          curso de 20 horas, habrás dominado los fundamentos de la programación y
          podrás empezar a aprender cómo escribir aplicaciones para teléfonos, instrucciones
          para robots, juegos, o lo que quieras.
      4:
        image: notes/hoc6_4.jpg
        text: 'La tecnología está cambiando todo lo que hacemos y no importa si eres
          joven o viejo: la programación es divertida, es creativa, y cualquier persona
          puede aprenderla!'
    20_wrapup:
      1:
        image: notes/bird.png
        text: ¡Mostrar notas estará disponible pronto!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Hola, mi nombre es Lindsey. Modelo, actúo y escribo mis propias aplicaciones.
          Vamos a usar código para unirnos a Ana y Elsa en la exploración de la magia
          y la belleza del hielo.
      2:
        image: notes/frozen1_2.jpg
        text: Vas a crear copos de nieve y patrones mientras patinas sobre hielo y
          realizas un paisaje invernal que luego puedes compartir con tus amigos.
      3:
        image: notes/frozen1_3.jpg
        text: En la próxima hora, vas a aprender lo básico para poder programar. La
          programación tradicional es generalmente en texto escrito, pero usaremos
          Blockly, que utiliza bloques visuales que puedes arrastrar y soltar para
          escribir programas. De esta forma incluso aprenden las bases los estudiantes
          universitarios. Pero en realidad, todavía estás generando código.
      4:
        image: notes/frozen1_4.jpg
        text: Un programa es un conjunto de instrucciones que le dice una computadora
          qué hacer. Vamos a construir un código o un programa que ayudará a Elsa
          a crear una línea simple. Más tarde utilizaremos esto para crear patrones
          más complejos.
      5:
        image: notes/frozen1_5.jpg
        text: La pantalla se divide en tres partes principales. A la izquierda, está
          la superficie de hielo donde se ejecutará tu programa. Las instrucciones
          para cada nivel se escriben justo debajo de la superficie.
      6:
        image: notes/frozen1_6.jpg
        text: Esta zona media es la caja de herramientas, y cada uno de estos bloques
          es una acción que pueden hacer Elsa y Anna.
      7:
        image: notes/frozen1_7.jpg
        text: El espacio en blanco a la derecha se conoce como "área de trabajo",
          y es ahí dónde crearemos nuestro programa. Para poder movernos alrededor
          de la superficie de hielo necesitarás utilizar el bloque de "Mover hacia
          adelante".
      8:
        image: notes/frozen1_8.jpg
        text: 'Aquí, el bloque de "Moverse hacia adelante" dice: "Moverse hacia adelante
          100 pixeles". Cuando oprimimos el botón "Ejecutar/Run". ¿Qué ocurre? Elsa
          se mueve hacia adelante una cierta distancia en la pantalla. ¡De hecho se
          mueve 100 pixeles! Los pixeles son básicamente cuadros muy pequeños que
          se encuentran en la pantalla de la computadora.'
      9:
        image: notes/frozen1_9.jpg
        text: El otro bloque que tenemos en este rompecabezas dice "girar a la derecha
          de 90 grados". Y cuando usamos este bloque "girar a la derecha", hace girar
          a Elsa una cierta cantidad de grados. Puedes probar cuánto quieres hacer
          girar a Elsa. El ángulo se mide desde el camino delante de Elsa. Entonces,
          esto es un giro de 90 grados. Y esto es un giro de 120 grados.
      10:
        image: notes/frozen1_10.jpg
        text: Recuerda, puedes cambiar el número de píxeles y grados haciendo clic
          en las flechas junto a ellos.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: ¡Hola, soy Paola! Las computadoras son muy buenas repitiendo acciones.
          Tu puedes contar hasta 10, 20 o 100. Pero una computadora puede contar hasta
          1 billón o 1 trillón. No se aburrirá y sólo le costará unos pocos segundos.
          Ya sea contando, o dibujando, o haciendo cualquier otra cosa -- las computadoras
          pueden repetir acciones cientos o incluso miles de millones de veces.
      2:
        image: notes/frozen2_2.jpg
        text: En programación, esto se llama bucle. Un bucle es la forma en la que
          repites una y otra vez tu código. Para el siguiente desafío, tu objetivo
          es ayudar a Anna a crear un cuadrado con el bloque "repetir".
      3:
        image: notes/frozen2_3.jpg
        text: Cualquier bloque de código que pones dentro del bloque "repetir" se
          repetirá en secuencia, tantas veces como quieras.
      4:
        image: notes/frozen2_4.jpg
        text: Para dibujar un cuadrado, puedes utilizar el bloque de "mover hacia
          adelante" y "girar a la derecha" 4 veces. Pero la forma más fácil es decirle
          a la computadora "mover hacia adelante" y "girar a la derecha 90 grados"
          una sola vez y luego repetir este par de acciones 4 veces. Para hacer eso,
          tienes que poner el bloque "mover hacia adelante" y el bloque "girar a la
          derecha" dentro de un bloque "repetir".
      5:
        image: notes/frozen2_5.jpg
        text: Recuerda que puedes cambiar el número del bloque "repetir" por cualquier
          otro, y va a repetir lo que está dentro del bloque cuantas veces le hayas
          indicado.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Hola, soy Chris Bosh. Soy un jugador de baloncesto profesional, y programé
          en la Universidad.
      2:
        image: notes/frozen3_2.jpg
        text: Uno de los conceptos más importantes en Ciencias de la computación trata
          sobre cómo definir nuevos comandos. La mayoría de lenguajes de programación
          tienen solamente cerca de 100 palabras o comandos. Y en realidad, el arte
          y la magia está en definir tus propias nuevas palabras utilizando estos
          bloques de construcción.
      3:
        image: notes/frozen3_3.jpg
        text: Una vez que has enseñado una computadora cómo realizar una acción una
          vez, con esta secuencia de comandos, puedes ponerle un nombre para que la
          acción sea fácil de repetir más adelante. Definir tu propio comando y darle
          un nombre, se conoce como definir una función.
      4:
        image: notes/frozen3_4.jpg
        text: Hola, soy Jess. Cuando programars con bloques, utilizarías funciones
          cuando hay un conjunto de acciones que te gustaría hacer muchas veces. Por
          ejemplo, has escrito código para crear un cuadrado.
      5:
        image: notes/frozen3_5.jpg
        text: 'Usted puede definir esto como una función llamada "crear un cuadrado" '
      6:
        image: notes/frozen3_6.jpg
        text: Ahora tienes un nuevo bloque que puedes utilizar varias veces para crear
          múltiples cuadrados.
      7:
        image: notes/frozen3_7.jpg
        text: Un montón de figuras sencillas pueden utilizarse para crear patrones
          más complejos. En el siguiente desafío, el código que has escrito recientemente
          para hacer un círculo está disponible como una nueva función que puede hacer
          círculos de diferentes tamaños. ¿Lo puedes usar para ayudar a Elsa crear
          patrones intrincados y hermosos en la nieve?
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: Vamos a crear juegos usando Play Lab. Los buenos juegos tienen una historia
          y cada historia tiene actores. Aprenderemos cómo hacer que nuestros actores
          sean como brujas, alienígenas, y animales que hablan, se mueven e interactúan
          con los demás. Al final de este tutorial, puedes crear un juego desde cero
          y compartirlo con tus amigos.
      2:
        image: notes/playlab_intro_2.png
        text: La pantalla se divide en tres partes principales. A la izquierda es
          el espacio de juego donde se ejecutará el programa. Las instrucciones para
          cada nivel están escritas abajo.
      3:
        image: notes/playlab_intro_3.png
        text: La zona media es la caja de herramientas, y cada uno de estos bloques
          es un fragmento de código. El espacio en blanco a la derecha se llama el
          espacio de trabajo y es donde construiremos nuestro programa.
      4:
        image: notes/playlab_intro_4.png
        text: Para empezar, necesitarás unir tus bloques al bloque naranja llamado
          "cuando se ejecuta". Puedes unir múltiples bloques arrastrándolos hacia
          fuera hasta que veas la línea amarilla, y luego encajarán todos a la vez.
      5:
        image: notes/playlab_intro_5.png
        text: En este primer rompecabezas, el actor es un pingüino y haremos que diga
          "¡Hola!" arrastrando el bloque "decir", uniéndolo al bloque "cuando se ejecuta"
          y escribiendo dentro "Hola". También podemos hacer que el pingüino se mueva
          mediante los bloques mover a la derecha y mover a la izquierda. Una vez
          que tienes puestos tus bloques, presiona el botón ejecutar para ver lo que
          has programado.
      6:
        image: notes/playlab_intro_6.png
        text: Comienza, y al final podrás crear tu propio juego con toda clase de
          jugadores, que pueden interactuar, volverse felices o tristes, aumentar
          la puntuación, o lanzar bolas de fuego, o incluso desaparecer unos a otros.
          Es cuestión de ti y del juego que quieres hacer.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Ahora vamos a aprender acerca de algo que todos los programadores de
          juegos usan todos los días. Se llaman eventos. Un evento indica a tu programa
          que atienda cuando algo ocurra. Cuando eso sucede, se realiza una acción.
      2:
        image: notes/playlab_events_2.png
        text: Algunos ejemplos de eventos son esperar a un clic en el ratón, un botón
          de flecha o pulsar en la pantalla.
      3:
        image: notes/playlab_events_3.png
        text: Aquí vamos a hacer que el robot espacial salude a los terrícolas cuando
          un jugador haga clic en él. Utilizaremos el bloque "cuando hace clic en"
          y únele el bloque "decir". Cuando el jugador hace clic en el robot espacial,
          todo lo que esté unido al bloque de evento "cuando hace clic en" se ejecutará.
          ¿Qué dice tu alienígena?
      4:
        image: notes/playlab_events_4.png
        text: También hay bloques "cuando tecla de flecha". Si se unen con los bloques
          "mover", puedes empezar a mover tus actores para arriba, abajo, izquierda
          o derecha. Paso a paso, tu juego se está volviendo más interactivo.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: Este es el bloque "repetir para siempre". Todo lo que haya dentro de
          este bloque se repetirá para siempre en el juego.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: Si queremos que un actor haga algo en varias ocasiones, sin que el jugador
          tenga que hacer nada, pondremos esos bloques dentro del bloque "repetir
          para siempre".
      3:
        image: notes/playlab_repeat_forever_3.png
        text: En el siguiente rompecabezas, nuestro objetivo es ayudar a que el asistente
          patrulle continuamente los límites del reino, a izquierda y derecha. Aprender
          cómo funciona el comando repetir, te ahorrará mucho tiempo después cuando
          construyas tu propio juego.
    C1_artist_intro:
      1:
        image: notes/C1_artist_intro_1.png
        text: Estos son tus bloques de dibujo. Usa el correcto para mover al artistas
          donde necesita ir para completar las lineas grises.
      2:
        image: notes/C1_artist_intro_2.png
        text: Estos son bloques tu de salto. Cuando los usas, tu artista se mueve
          pero no dibuja, asi que usalos para saltar a la siguiente línea gris.
    C1_bee_level_intro:
      1:
        image: notes/C1_bee_level_intro_1.png
        text: ¿No son las abejas genial? En el siguiente grupo de puzzles. Tu objetivo
          es ayudar a la abeja para llegar a las flores, tomar el nectar de las flores
          y volar a la colmena para hacer miel. Vas a tener que usar los bloques "obtener
          nectar" y "hacer miel" para estos ejercicios.
      2:
        image: notes/C1_bee_level_intro_2.png
        text: 'Cada flor tiene un número diferente de néctares: 1, 2, 3 o más. Sabemos
          cuánto néctar está en las flores rojas, por el número pequeño en la esquina.
          Así que asegúrese de obtener todo el néctar de la flor antes de seguir adelante.
          Además, cada panal sólo puede contener cierta miel: 1, 2, 3 o más. Así que
          asegúrate de hacer tanta miel como la abeja pueda sostener.'
      3:
        image: notes/C1_bee_level_intro_3.png
        text: Si eres capaz de obtener todo el néctar y toda la miel, tuviste éxito
          y pasa al siguiente nivel. De lo contrario, tienes que probar este acertijo
          otra vez. Juga un rato mientras y ve lo que se siente ser "abeja" un programador!
    C1_bee_loops:
      1:
        image: notes/C1_bee_loops_1.png
        text: Un bucle es una repetición de una actividad. Para entrar en una colmena
          a inspeccionar, miro un cuadro y luego lo pongo, luego repito esta actividad
          varias veces. Hacer un bucle, es hacer la misma actividad varias veces.
      2:
        image: notes/C1_bee_loops_2.png
        text: En este nivel, queremos que la abeja colecte tres néctares de la flor.
          En lugar de utilizar tres "obtener néctar", vas a utilizar el bloque de
          repetición para obtener néctar tres veces. Pulse "Run" y ve si lo tienes
          correcto. ¡ Agradable!
    C1_bigevent_unplugged:
      1:
        image: notes/C1_bigevent_unplugged_1.png
        text: Esta lección se llama el gran evento. Es acerca de cómo podemos controlar
          nuestros programas y cambiar la forma de que un programa se ejecuta sobre
          la marcha usando eventos, como el pulsar de un botón o el clic de un ratón.
      2:
        image: notes/C1_bigevent_unplugged_2.png
        text: Para esta lección, serás controlado con un remoto de papel. Es como
          un juego de video real en vivo.
      3:
        image: notes/C1_bigevent_unplugged_3.png
        text: Un evento es una acción que hace que algo pase. Es como cuando haces
          clic al botón de un ratón y se carga un sitio web. Eso es un evento. Cuando
          tocas la pantalla de una tablet para deslizarla, también es un evento. Los
          eventos son una forma grandiosa de permitir al usuario manipular tu programa
          cuando quiera o lo necesite.
      4:
        image: notes/C1_bigevent_unplugged_4.png
        text: Suceden cosas a las que todos respondemos. Sentimos hambre y nos vamos
          a la nevera. Escuchamos que el cartero viene y pone nuestro correo en el
          buzón y luego vamos a obtener nuestro correo. Lo mismo pasa con los eventos
          de pulsar un botón o mover una palanca de mando. Son algo que pasa que provocan
          que hagamos algo.
      5:
        image: notes/C1_bigevent_unplugged_5.png
        text: En los videojuegos, hay un evento llamado "Actualizar" y pasa 30 o 60
          veces por segundo. Para los programadores de videojuegos eso es casi más
          importante como un evento, que los botones o la palanca de mando.
      6:
        image: notes/C1_bigevent_unplugged_6.png
        text: |
          Lo principal que buscamos es que pase el tick de "Actualizar". Entonces comprobamos el mando en el tick. Y decimos, "Oh, ¿alguien ha pulsado el botón en este marco? ¿Sí o no?"
          Sin eventos, el jugador no podría moverse, no podrías saltar, no serías capaz de controlar lo que pase. El videojuego no sería capaz de animar nada.
    C1_building_foundation:
      1:
        image: notes/C1_building_foundation_1.jpg
        text: En la escultura en arena tienes que saber que el fracaso es parte del
          programa. Pero si usted persiste, no conseguirá nada mejor y más emocionante
          para usted. La persistencia es el nombre del juego. Quédate, te va a encantar.
      2:
        image: notes/C1_building_foundation_2.jpg
        text: Esta lección se llama construir una base. En esta lección, vamos a trabajar
          en una tarea que va a ser realmente difícil. Debes encontrar la manera de
          hacer una estructura tan alta como uno de estos vasos y tiene que ser lo
          suficientemente fuerte como para soportar el peso de un libro.
      3:
        image: notes/C1_building_foundation_3.jpg
        text: Podría haber momentos en los que nuestra creación no funcione. Podría
          haber momentos en los que nos frustremos y querramos dejarlo. Podría haber
          muchos de esos momentos. Pero si seguimos intentándolo, y lo hacemos lo
          mejor que podemos una y otra vez, entonces seguro que lo conseguiremos enseguida.
      4:
        image: notes/C1_building_foundation_4.jpg
        text: Persistencia es mantenerse firme cuando se quiere realmente renunciar.
          Si quieres crear algo nuevo y diferente, van a existir un montón de fracasos
          en el camino.
      5:
        image: notes/C1_building_foundation_5.jpg
        text: El truco para persistir es elegir seguir adelante y aprender de los
          fracasos en lugar de dejar de renunciar porque estás frustrado. La frustración
          sólo significa que hay algo maravilloso al doblar la esquina. Por lo que
          no renuncies antes de llegar a él. Wooo!
    C1_getting_loopy:
      1:
        image: notes/C1_getting_loopy_1.png
        text: Hola, mi nombre es Miral Kotb y soy el creador de Iluminado. En mi trabajo,
          hay algo que usamos en ambas cosas, en bailes y  en    programación. !Y
          eso son los bucles! Los bucles repiten acciones una y otra vez.
      2:
        image: notes/C1_getting_loopy_2.png
        text: Cuando repites algo muchas veces, como mis acciones para que el hula
          hoop siga girando, estoy haciendo un bucle de esa acción. Esto es un bucle.
          Esto es un bucle. Y esto es un bucle.
      3:
        image: notes/C1_getting_loopy_3.png
        text: Hoy vamos a dar una fiesta de baile. Haremos bucles con un nuevo baile.
          La iteración. Vamos a aprender acerca de los bucles utilizando un baile.
          Aprenderás un par de pasos fáciles y los repetirás una y otra vez para completar
          el baile.
      4:
        image: notes/C1_getting_loopy_4.png
        text: Estos son los pasos que necesitas aprender. Da las palmas. Pon tus manos
          detrás de tu cabeza. Pon tus manos en tu cintura. Sube la mano izquierda.
          Sube la mano derecha. Bastante fácil, ¿verdad? Descubrirás que puedes hacer
          más cortas las instrucciones poniendo algunos pasos de baile dentro de bucles.
      5:
        image: notes/C1_getting_loopy_5.png
        text: De hecho utilizamos bucles en nuestros bailes. Los bailarines llevan
          ordenadores, todos en la misma red. Podría hacer un bucle poniendo las luces
          sobre los bailarines una y otra vez. En el bucle podría tener una iteración
          donde digamos que quieres hacer un bucle sobre esos seis bailarines una
          y otra vez, y entonces dentro del bucle incrementar la velocidad de la luz,
          Y todo eso está hecho mediante bucles. Los bucles son importantes en informática
          porque abrevian y simplifican nuestro trabajo.
    C1_happy_maps_unplugged:
      1:
        image: notes/C1_happy_maps_unplugged_1.png
        text: Esta lección se llama Mapas Felices. Hoy vamos a ayudar a nuestro pequeño
          amigo peludo Flurb a llegar a su fruta.
      2:
        image: notes/C1_happy_maps_unplugged_2.png
        text: Consigue que tu Flurb llegue a tu fruta. Para hacer eso necesitarás
          descubrir en qué dirección tiene que ir el Flurb, y dirigirla con las flechas.
          Para que el Flurb llegue a la manzana, ¿en qué dirección tiene que ir el
          Flurb? Línea para hacer que vaya arriba.
      3:
        image: notes/C1_happy_maps_unplugged_3.png
        text: Para llegar ahí, haces un círculo en la dirección que tiene que ir.
      4:
        image: notes/C1_happy_maps_unplugged_4.png
        text: Construye tu algoritmo pegando las flechas junto al mapa que estás intentando
          resolver. El segundo es igual, pero hacia abajo.
      5:
        image: notes/C1_happy_maps_unplugged_5.png
        text: Es como programar con papel. Y eso es todo!
    C1_maze_debugging:
      1:
        image: notes/C1_maze_debugging_1.png
        text: Depurar es encontrar y arreglar problemas. Hay muchas formas de depurar
          problemas. Una de las más fáciles es ir paso a paso hasta que encuentras
          que algo sale mal. Aquí estoy intentando hacer una voltereta hacia atrás
          sobre la barra de equilibrios, pero me caigo una y otra vez.
      2:
        image: notes/C1_maze_debugging_2.png
        text: Revisé cada parte paso a paso y me di cuenta de donde estaba mi error.
          No estaba poniendo mis manos correctamente en la barra. de equilibrios.
          Así que intenté otra voltereta hacia atrás sobre la barra con una nueva
          posición de manos y lo conseguí. Estaba realmente contenta de haber depurado
          mi voltereta hacia atrás.
      3:
        image: notes/C1_maze_debugging_3.png
        text: Para aprender a depurar, empezamos con un conjunto de bloques ya puestos
          en la fase. Como verás esos bloques no te conducirán al objetivo. Necesitamos
          depurar la solución y arreglarla. ¿Qué falló? Te darás cuenta de que necesitabas
          seguir yendo al oeste una casilla más.
      4:
        image: notes/C1_maze_debugging_4.png
        text: Vamos a arreglarlo añadiendo otro bloque de ir al oeste y dando a ejecutar
          para ver si has acertado. ¡Sí, has acertado!
    C1_maze_intro_sequencing:
      1:
        image: notes/C1_maze_intro_sequencing_1.png
        text: Para este rompecabezas necesitarás llevar el pájaro al cerdo. Mira el
          rompecabezas y averigua que instrucciones necesita.
      2:
        image: notes/C1_maze_intro_sequencing_2.png
        text: Necesitas arrastrar los bloques desde la caja de herramientas al espacio
          de trabajo. Asegúrate de dejarlos debajo del bloque "cuando se ejecuta",
          y cuando creas que tienes la solución correcta pulsa en "ejecutar" y observa
          como el pájaro va hacia el cerdo.
    C1_maze_loops:
      1:
        image: notes/C1_maze_loops_1.png
        text: Una cosa en la que los ordenadores son muy buenas es la de repetir instrucciones.
          Como persona, te aburrirías mucho si tuvieras que hacer lo mismo un montón
          de veces seguidas. Pero un ordenador puede hacer lo mismo millones o incluso
          miles de millones de veces sin aburrirse, y llevarlo a cabo perfectamente.
      2:
        image: notes/C1_maze_loops_2.png
        text: Por ejemplo, si yo quisiera felicitar a todo el mundo en Facebook por
          su cumpleaños enviándoles un mensaje de correo electrónico, me podría llevar
          más de un siglo para poder escribir todos esos mensajes a todo el mundo.
          Pero con unas pocas líneas de código puedo hacer que una máquina envíe un
          mensaje de correo electrónico a todo el mundo en Facebook felicitándoles
          por su cumpleaños.
      3:
        image: notes/C1_maze_loops_3.png
        text: Para llevar el pájaro al cerdo en este nivel, en lugar de arrastrar
          tres bloques norte al espacio de trabajo, utilizarás el bloque "repetir".
          Arrastra el bloque "repetir" al espacio de trabajo e introduce el número
          3. Entonces arrastra el bloque "mover al norte" dentro de bloque "repetir"
          y pulsa "ejecutar" para ver si has acertado. Enhorabuena, ¡lo conseguiste!
    C1_moveitmoveit_unplugged:
      1:
        image: notes/C1_moveitmoveit_unplugged_1.png
        text: Esta lección se llama muévelo, muévelo, Juntos vamos a escribir un programa
          para llevar a nuestros amigos desde la salida con la brújula hasta la meta
          con la cara sonriente.
      2:
        image: notes/C1_moveitmoveit_unplugged_2.png
        text: Pero la cara sonriente está boca abajo, y sólo una persona sabe como
          llegar hasta ella. Vamos a empezar este programa.
      3:
        image: notes/C1_moveitmoveit_unplugged_3.png
        text: Un programa es un algoritmo que ha sido codificado en algo que se puede
          ejecutar en una máquina. La mayoría de nosotros piensa en un programa como
          algo que escribimos para una computadora. Los programas son muy buenos para
          eso pero también son útiles en otros lugares. Usted puede hacer su propio
          programa de juego o incluso un robot para hacer las cosas para usted.
    C1_going_places_safely:
      1:
        image: notes/C1_going_places_safely_1.png
        text: Me llamo Jeremiah. Hola, tengo siete años. Me encanta jugar con el ordenador
          de mamá, pero siempre le pido permiso primero. "Mami, ¿puedo ponerme con
          el ordenador? ¡Claro que sí, cielo!"
      2:
        image: notes/C1_going_places_safely_2.png
        text: Me encanta el ordenador de mamá porque me puedo meter en Internet. Internet
          es un poco como tu barrio. Puedes visitar sitios chulos, puedes hablar con
          tu familia y amigos, y puedes aprender un montón de cosas nuevas.
      3:
        image: notes/C1_going_places_safely_3.png
        text: Ayer, visité un parque zoológico que es cerca de mi casa. Vi una cebra
          bebé. Le tomé una fotografía y cambié el color de sus rayas, luego le puse
          un sombrero y la agregué a mi colección de animales locos. ¡Impresionante!
          Más tarde, fui a un lugar lejano. Visité Kenia. Es un país en África. Allí
          vive un montón de cebras.
      4:
        image: notes/C1_going_places_safely_4.png
        text: A veces en Internet conozco y hablo con las personas, como mi abuela
          que vive en otro Estado. ¡Hola abuela! Ella me está haciendo galletas que
          me enviará para mi cumpleaños. "Delicioso, ojalá que Internet tuviera smellrama!"
          Yo puedo hablar con diferentes personas en Internet, como mi prima, pero
          solamente hablo con la gente que conozco.
      5:
        image: notes/C1_going_places_safely_5.png
        text: Lo que más me gusta en la Internet es obtengo juegos divertidos. ¡Puntos!
          También me gusta dibujar y crear cosas nuevas y compartir con mis amigos.
          ¡Genial! A veces visito sitios donde aprendo cosas nuevas pero siempre sitios
          web que son adecuados para mí. ¡Oh, dinosaurios!
      6:
        image: notes/C1_going_places_safely_6.png
        text: 'Internet es un lugar super divertido. Pero al igual que cruzar la calle
          en tu barrio, también debes tener cuidado cuando estés en línea. Aquí hay
          tres reglas para recordar. Regla número 1: siempre pregunta a tus padres
          primero. Regla número 2: sólo hablar con gente que conozcas. Regla número
          3: Visita lugares que son adecuados para ti.'
      7:
        image: notes/C1_going_places_safely_7.png
        text: Wow, ¡eso fue divertido! Hora de la cena. Ahora estoy cerrando sesión.
          No puedo esperar para iniciar sesión otra vez para ver que puedo visitar
          a continuación.
    C1_pair_programming:
      1:
        image: notes/C1_pair_programming_1.png
        text: Hoy vamos a aprender sobre la programación en par. En la programación
          en par se trabaja como un equipo. ¿Por qué dos personas usan una computadora?
          Porque dos cabezas son mejores que una. En la Programación en par tú y tu
          pareja van a sentarse juntos en una computadora y ambos van a trabajar en
          el mismo proyecto.
      2:
        image: notes/C1_pair_programming_2.png
        text: En la programación en par, una persona es el conductor y la otra persona
          es el navegador, al igual que conducir un coche. El conductor se sienta
          en la computadora y es que utilizando el teclado y ratón o pantalla táctil
          y control de las principales acciones de la computadora. La otra persona
          es el navegante. El navegador ayuda al conductor contestando sus preguntas
          y señala posibles problemas o errores.
      3:
        image: notes/C1_pair_programming_3.png
        text: La comunicación es la clave para éxito en la programación en par. Sin
          insultos, debes ser respetuoso, no seas un navegador mandon, porque a nadie
          le gusta un conductor en el asiento trasero. Siempre se deben hablar tú
          y tu compañero. El conductor puede explicar lo que él o ella está haciendo.
          Y el navegador puede ayudar sugeriendo qué hacer a continuación.
      4:
        image: notes/C1_pair_programming_4.png
        text: El navegador debe estar pensando en el panorama y el conductor se centra
          en los detalles. Ambos roles son importantes. Programación en par es trabajar
          juntos como un equipo.
    C1_planting_seed:
      1:
        image: notes/C1_planting_seed_1.png
        text: Esta lección se llama plantar una semilla y va a ayudarnos a entender
          los algoritmos. Los algoritmos son instrucciones específicas que explican
          el orden en el que se hace algo. Incluso lo de todos los días, cosas como
          desayunar o el cepillado de los dientes son algoritmos que requieren pequeños
          pasos para hacer un trabajo.
      2:
        image: notes/C1_planting_seed_2.png
        text: Los computadores pueden ser muy inteligentes pero sólo pueden entender
          si les dices exactamente lo que quieres paso a paso. Lo bueno de los algoritmos
          es que si sigues las instrucciones en orden, puedes hacer algo que no sabías
          cómo hacer antes. Es como una receta.
      3:
        image: notes/C1_planting_seed_3.png
        text: Hoy vamos a sembrar nuestras propias semillas utilizando un algoritmo.
          Crea tus propios algoritmos para apartar las fotos. Seleccione las imágenes
          que muestran los pasos para plantar una semilla y organiza las fotografías
          en el orden correcto.
      4:
        image: notes/C1_planting_seed_4.png
        text: Ahora, es el momento para ver si el algoritmo funciona. Siga atentamente
          los pasos en el algoritmo. ¿Están en el orden correcto? ¿Has tenido éxito
          en plantar una semilla siguiendo el algoritmo? ¡Es como la programación
          con imágenes!
      5:
        image: notes/C1_planting_seed_5.png
        text: Cuando queremos hacer el chocolate, hay muchos grandes pasos de ese
          proceso y cada uno de esos grandes pasos tiene un conjunto de pequeños pasos
          y hay diferentes recetas o algoritmos dependiendo de cómo queremos que el
          chocolate al gusto. Cada paso es importante, incluso los pequeños, así que
          sin un solo paso, no se puede completar el resto de ellos. Es muy importante
          crear algoritmos que otros puedan entender. Es por ello que cada paso tiene
          que ser escrito para que no importando quien lo hace, el resultado sea el
          mismo.
    C1_playlab_storytelling:
      1:
        image: notes/C1_playlab_storytelling_1.png
        text: Tiempo para ser creativo y utilizar tus habilidades de codificación
          para contar una historia. Tu historia contará con actores y tu serás capaz
          de hacer que estos actores hablen e interactúen con los demás. Comienza
          a pensar qué tipo de historia quieres contar.
      2:
        image: notes/C1_playlab_storytelling_2.png
        text: El gato siempre ha tenido miedo del perro y ¿qué pasa si el perro quiere
          ser amable con el gato? El bloque "cuando se ejecuta" comienza todo. El
          bloque "mover" moverá tu personaje y el bloque de «decir» hará que tu personaje
          diga todo lo que escribes.
      3:
        image: notes/C1_playlab_storytelling_3.png
        text: Esto es un bloque "cuando los actores colisionan" que puedes enlazar
          con otros bloques
      4:
        image: notes/C1_playlab_storytelling_4.png
        text: Estaba haciendo que el perro viniera y dijera "Hola", pero cuando el
          gato se asustó se fue. "Ahhh". Si hubiera más tiempo, Habría sido un final
          feliz. !El final!
    C1_spelling_bee_intro:
      1:
        image: notes/C1_spelling_bee_intro_1.png
        text: Este es el nivel de ortografía. Utilice las piezas del puzzle para mover
          la abeja. Al moverse, recogerá las letras para deletrear la palabra.
      2:
        image: notes/C1_spelling_bee_intro_2.png
        text: Vea si puede deletrear la palabra que se da en el cuadro debajo de la
          etapa. ¡Pero cuidado con la abeja! Mover en la dirección equivocada agrega
          cartas que no quieres.
    C1_zuck_repeat_loop:
      1:
        image: notes/C1_zuck_repeat_loop_1.png
        text: Una cosa en la que los ordenadores son muy buenas es la de repetir instrucciones.
          Como persona, te aburrirías mucho si tuvieras que hacer lo mismo un montón
          de veces seguidas. Pero un ordenador puede hacer lo mismo millones o incluso
          miles de millones de veces sin aburrirse, y llevarlo a cabo perfectamente.
      2:
        image: notes/C1_zuck_repeat_loop_2.png
        text: Por ejemplo, si yo quisiera felicitar a todo el mundo en Facebook por
          su cumpleaños enviándoles un mensaje de correo electrónico, me podría llevar
          más de un siglo para poder escribir todos esos mensajes a todo el mundo.
          Pero con unas pocas líneas de código puedo hacer que una máquina envíe un
          mensaje de correo electrónico a todo el mundo en Facebook felicitándoles
          por su cumpleaños.
      3:
        image: notes/C1_zuck_repeat_loop_3.png
        text: En este ejemplo, debes conseguir mover el pájaro para coger el cerdo.
          Ahora vamos a poder usar el bloque Repetir para poder hacer esto más fácil.
          Lo puedes hacer diciendo al ordenador la instrucción mover adelante 5 veces
          para que el pájaro avance un paso cada vez hacia el cerdo, o puedes directamente
          decir al ordenador que se mueva adelante una vez y decirle que lo repita
          5 veces, y hará la misma cosa.
      4:
        image: notes/C1_zuck_repeat_loop_4.png
        text: La orden de esto es, arrastrar el comando avanzar y luego insertarlo
          dentro del bloque de repetición. Puedes hacer clic en él y decir cuantas
          veces quieres que se repita el bloque, para repetir la cantidad de pasos
          que deseas que avance.
      5:
        image: notes/C1_zuck_repeat_loop_5.png
        text: Una cosa más, puedes insertar tantos comandos como quieras dentro del
          bloque de repetición. Así que en este ejemplo, está diciendo que seguir
          adelante y girar a la izquierda, que va a hacer cinco veces. ¡Que te diviertas!
    C2_artist_intro:
      1:
        image: notes/C2_artist_intro_1.png
        text: Nisiquiera calificas para la carrera si tu no tienes personas que son
          competentes en ciencias de la computación debido a tantos datos que colectan
          los carros y la necesidad de poder tener personas que puedan escribir programas
          que encuentren la manera de cómo construir rendimiento.
      2:
        image: notes/C2_artist_intro_2.png
        text: En estos puzzles, tu serás un artista que usa un lápiz para dibujar
          distintas formas. Donde sea que tu artista vaya, el dibujará una linea detrás
          de él.
      3:
        image: notes/C2_artist_intro_3.png
        text: Para moverte por canvas, necesitarás usar el bloque de mover hacia delante.
          Aquí el bloque de mover dice que te muevas 100 pixeles hacia delante. Cuando
          pulsamos ejecutar, ¿Qué pasa? El artista se mueve hacia delante una cierta
          cantidad de pixeles y esa cantidad son 100px. Los pixeles son básicamente
          diminutos recuadros en la pantalla de tu ordenador.
      4:
        image: notes/C2_artist_intro_4.png
        text: El otro bloque que tenemos en este puzzle dice Girar a la derecha 90
          grados. Y cuando lo arrastramos, eso hace que nuestro artista gire una cierta
          cantidad. Así que puedes jugar con cuanto quieres que tu artista gire. Este
          es un giro de 90 grados.
      5:
        image: notes/C2_artist_intro_5.png
        text: Y esto es un giro de 120 grados. Y recuerda, tu puedes cambiar estos
          valores haciendo clic en las flechas junto a los números de píxeles y grados.
          ¡Disfruta dibujando con tu artista!
    C2_bee_conditionals:
      1:
        image: notes/C2_bee_conditionals_1.png
        text: Este es un bloque condicional. Este dice SI hay un nectar O miel que
          sea menor, igual o mayor que un número, ENTONCES haz algo.
      2:
        image: notes/C2_bee_conditionals_2.png
        text: Esto es útil cuando no sabemos cuanto néctar o miel obtener, como vemos
          acá con este signo de interrogación.
      3:
        image: notes/C2_bee_conditionals_3.png
        text: En este ejemplo, vamos a decir SI la flor purpura tiene néctar mayor
          que 0, obtiene néctar. Eso le dice a nuestra abeja que continúe obteniendo
          néctar mientra haya. Ta-dah!
    C2_binary_bracelets:
      1:
        image: notes/C2_binary_bracelets_1.png
        text: Esta es la lección de brazaletes binarios. ¡Vamos a codificar nuestras
          iniciales en un brazalete que podemos usar y mostrar a todos nuestros amigos!
      2:
        image: notes/C2_binary_bracelets_2.png
        text: El binario es una forma de representar información utilizando sólo dos
          opciones. A veces la gente piensa solo en unos y ceros. Pero tú puedes representar
          el binario con combinaciones de encendido ó apagado, arriba ó abajo, dentro
          ó fuera o cualquier combinación de posibilidades.
      3:
        image: notes/C2_binary_bracelets_3.png
        text: Hola, soy Orion y programo robots aquí en Play-im. Todos los cerebros
          de los computadores y los robots, en su nivel más fundamental, son compuertas
          electrónicas. Cuando una compuerta está abierta la electricidad puede fluir,
          y cuando esta está cerrada, la electricidad no fluye.
      4:
        image: notes/C2_binary_bracelets_4.png
        text: Un ejemplo "binario" en el robot, son los ojos. Los ojos del robot son
          LED y estas son luces que están encendidas o apagadas. Es un sistema binario
          de un estado u otro. Podemos utilizar las luces para representar números
          binarios. Si tenemos un conjunto de robots, podemos decir que el primer
          robot es la primera posición y el segundo robot es la segunda posición,
          el tercer robot es la cuarta y así sucesivamente. Así es cómo se representa
          un número binario. Los robots lo hacen los ojos (leds) binarios y cuentan
          asi para usted.
    C2_conditionals_with_cards:
      1:
        image: notes/C2_conditionals_with_cards_1.png
        text: Esta lección se llama condicionales con cartas. Cada dia haces decisiones
          basadas en lo que ves o en lo que oyes.
      2:
        image: notes/C2_conditionals_with_cards_2.png
        text: Quiero caminar por el parque pero primero debo decidir si debo llevar
          un paraguas o no. Por lo que miro por la ventana. Si está nublado, voy a
          llevar mi paraguas. Si no, llevaré mis anteojos de sol. Creo que debería
          llevar mi paraguas. Lo que veo y escucho determina mi decisión sobre qué
          llevar al parque.
      3:
        image: notes/C2_conditionals_with_cards_3.png
        text: Condicionales se utilizan en juegos tambien. Hoy vamos a practicar usando
          condicionales con un juego de cartas. En este juego, la carta que saque
          determina que mis amigos van a hacer. Si yo saco un siete, todos aplauden.
          Sino, todos dicen "awww". Vamos a intentarlo! "Awww" "Aplausos"
      4:
        image: notes/C2_conditionals_with_cards_4.png
        text: Te apuesto a que puedes hacer juegos mucho más entretenidos usando condicionales.
          Inténtalo! Las condicionales son lo que hacen que los computadores parezcan
          inteligentes. Un programa de computador que incluye condicionales puede
          reaccionar frente al usuario y cambiar su curso de acción.
      5:
        image: notes/C2_conditionals_with_cards_5.png
        text: Pikirkan tentang permainan kesukaan kamu. Apakah kamu mendapatkan poin
          karena melakukan suatu hal dibandingkan melakukan hal lainnya? Ini terjadi
          karena komputer menggunakan persyaratan. Inilah cara komputer membuat keputusan.
          Bagaimana kalau kamu mendapatkan sepuluh poin jika kamu mengenai target.
          Lain daripada itu, kamu kehilangan tiga. Apabila kamu tahu cara persyaratan
          bekerja, kamu bisa menciptakan berbagai permainan yang menarik.
    C2_artist_debugging:
      1:
        image: notes/C2_artist_debugging_1.png
        text: Ya tenemos algunos bloques en nuestro espacio de trabajo. Sin embargo
          algo está mal.
      2:
        image: notes/C2_artist_debugging_2.png
        text: Vamos a depurar éste código ralentizando la velocidad y observando a
          medida que avanza bloque a bloque.
      3:
        image: notes/C2_artist_debugging_3.png
        text: ¡Oh, ahi está el problema! Los bigotes del gato tienen 75 pixeles de
          largo, no 25.
    C2_bee_debugging:
      1:
        image: notes/C2_bee_debugging_1.png
        text: ¿Alguna vez has escuchado lo que es depurar un programa? Esta es la
          manera en la que te das cuenta qué es lo que no está funcionando. Cuando
          depuras un código, identificas y arreglas errores.
      2:
        image: notes/C2_bee_debugging_2.png
        text: Aquí estamos dando unos pocos bloques ya en nuestro lugar de trabajo.
          Vamos a utilizar el botón de paso para caminar a través de los bloques,
          paso a paso, a ver si esta es la solución correcta y donde necesitemos repararlo.
      3:
        image: notes/C2_bee_debugging_3.png
        text: Al parecer ahi está nuestro problema! Necesitamos un bloque más de mover
          adelante. El botón de paso nos ayuda a depurar nuestro problema al identificar
          dónde está el error y cómo podemos arreglarlo.
    C2_digital_footprint:
      1:
        image: notes/C2_digital_footprint_1.png
        text: En tu cabeza sostienes tu sombrero y tu inteligencia te dirá dónde estás
          y pensar acerca en el zoológico y asentir Hola a ti y a ti! Usa la cabeza
          cuando estás en línea para mantener lo que es tuyo dentro de tu mente y
          saber cómo estar a salvo, cómo darle a tu vida un espacio privado! De tu
          cabeza hasta los dedos de tu pie, pausa, pensar en ello. Desde tus pies
          hasta tu nariz, pausa y piensa en línea!
      2:
        image: notes/C2_digital_footprint_2.png
        text: Usa tu corazón para crecer y crecer y date a ti mismo un brillo saludable
          y para hacer un San Valentín, Dile a alguien que tu seras mío! Usa tu corazón
          cuando estás en línea, siente lo que es correcto y siempre amable y muestra
          a tus amigos respeto, para ser justo y agradable en el Internet. Desde tu
          cabeza a los dedos de tu pie, pausa, piensa en ello. Desde tus pies arriba
          a la nariz, pausa y piensa en línea!
      3:
        image: notes/C2_digital_footprint_3.png
        text: Utiliza tus brazos para abrazar a tu mascota, maten tu ropa sin que
          se moje y lleva tus mangas favoritas y ayudate a volar y hacerte creer.
          Utiliza tus brazos cuando estés en línea, tomate tiempo de descanso y equilibra
          el tiempo y deja tu tecnología y encuentrate a ti mismo un árbol para trepar.
          Desde tu cabeza hasta los dedos de tu pie, pausa, piensa en ello. Desde
          tus pies hasta la nariz, pausa y piensa en línea!
      4:
        image: notes/C2_digital_footprint_4.png
        text: Utiliza tus tripas para almacenar tus alimentos y escucha su rugido
          estado de ánimo, as descansar tu vientre y siente el gas de la soda. Utiliza
          tus instintos cuando estás en línea, para saber, observar ciertos signos
          y dejar que guíe el camino y te diga cuando no está bien. De la cabeza hasta
          los dedos de tu pie, pausa, piensa en ello. Desde los pies hasta la nariz,
          pausa y piensa en línea!
      5:
        image: notes/C2_digital_footprint_5.png
        text: Entonces piensa con tu cabeza y siente con tu corazón, equilibra tus
          brazos, escucha tus presentimiento. en línea. Utiliza tus piernas para correr
          y patear, salta y rebotar en un palo de pogo y baila alrededor de la cuadra
          y salta a lo largo de tus calcetines malolientes. Utiliza tus piernas cuando
          estás en línea, para enfrentar a los peleoneros que cruzan la línea y recuerda
          pararte alto, se agradable a las criaturas grandes y pequeñas.
      6:
        image: notes/C2_digital_footprint_6.png
        text: Desde la cabeza hasta los dedos de los piés, para, piensa en ello. Desde
          tus pies hasta tu nariz, ¡para y piensa conectado! Así que piensa con la
          cabeza, y siente con el corazón, equilibrate con tus brazos, escucha a tus
          entrañas, levantate con tus piernas. Desde tu cabeza hasta los dedos de
          los piés, para, piensa en ello. Desde tus piés hasta la nariz, ¡para y piensa
          conectado!
    C2_digital_footprint_v2:
      1:
        image: notes/C2_digital_footprint_v2_1.png
        text: Siempre que te conectas, dejas una huella que puede ser buscada, copiada,
          transmitida y es permanente. ¿Que clase de huella digital estás dejando?
          ¿Que clase de huella digital quieres dejar?
    C2_graph_paper:
      1:
        image: notes/C2_graph_paper_1.png
        text: Esta lección se llama "Papel gráfico Programación" y se trata de algoritmos.
          Hoy vamos a aprender como escribir programas que muestran entre sí cómo
          recrear simples imágenes en blanco y negro, usando sólo flechas dibujadas
          a mano.
      2:
        image: notes/C2_graph_paper_2.png
        text: Un algoritmo es una lista de instrucciones necesarias para completar
          una tarea. Vamos a seguir este set de instrucciones para hacer el tazón.
          Los algoritmos son muy útiles cuando necesitas que otra personas entienda
          como hacer algo.
      3:
        image: notes/C2_graph_paper_3.png
        text: Si estás escribiendo un algoritmo para un computador, tienes que dividir
          el problema en pequeños pasos. Por lo tanto, termina esta fila y luego pasa
          a la siguiente, luego a la siguiente, y estarás listo.
      4:
        image: notes/C2_graph_paper_4.png
        text: Yo Utilizó algoritmos en mi trabajo. Si yo escribo todos los pasos puedo
          recrear esa misma pieza otra vez, o puedo enseñar a alguien que lo haga.
          Pon el vaso en el horno, lo funden, sige el resto de las instrucciones para
          hacer el tazón. Algoritmos te darán una ruta para conseguir que se haga
          algo.
    C2_artist_loops:
      1:
        image: notes/C2_artist_loops_1.png
        text: Aquí vamos a utilizar el bloque de repetición que nos ayuda a ahorrar
          pasos cuando estemos programando nuestro artista. Ya tenemos algunos bloques
          fuera en nuestro escenario pero están ahi sólo para que comencemos.
      2:
        image: notes/C2_artist_loops_2.png
        text: Para ciclar los bloques cuatro veces y dibujar to un cuadro, sólo arrastra
          el bloque de repetir y pon el bloques de avanzar y gira a la derecha dentro
          del bloque de repetición. Cuando damos clic en ejecutar, el artista repetirá
          los pasos cuatro veces para completar el cuadrado.
    C2_bee_loops:
      1:
        image: notes/C2_bee_loops_1.png
        text: Un bucle es una repetición de una actividad. Para entrar en una colmena
          a inspeccionar, miro un cuadro y luego lo pongo, luego repito esta actividad
          varias veces. Hacer un bucle, es hacer la misma actividad varias veces.
      2:
        image: notes/C2_bee_loops_2.png
        text: Este es el bloque de repetición. Lo que pongas dentro el bloque de repetición
          repetirá las acciones el numero de veces que le digas. Por ejemplo, en éste
          nivel, algo que arrastre hacia fuera mueva hacia adelante y obtengas el
          néctar tres veces, vamos a hacer simplemente que los arrastre hacia fuera
          cada uno y repetir la acción tres veces. Ha sido fácil!
    C2_maze_intro:
      1:
        image: notes/C2_maze_intro_1.png
        text: Normalmente la programación es en texto pero nosotros usaremos Blockly
          que usa bloques visuales que puedes arrastrar y soltar para escribir programas.
          Bajo la cubierta, sigues creando el código. Para empezar, vamos a crear
          el código para el programa que ayudará a éste Angry Bird a moverse entre
          el laberinto para llegar a los cerdos malvados que robaron sus huevos.
      2:
        image: notes/C2_maze_intro_2.png
        text: Blockly se divide en tres partes principales. A la izquierda está el
          laberinto de los pájaros, donde tu programa se ejecutará. Las instrucciones
          de cada nivel se escriben debajo del laberinto. Esta zona media es la caja
          de herramientas y cada uno de estos bloques es un comando que el pájaro
          puede entender. El espacio blanco en la derecha es el espacio de trabajo
          y es donde compilaremos nuestro programa.
      3:
        image: notes/C2_maze_intro_3.png
        text: Si arrastro un bloque "mover" al área de trabajo y presiono "Ejecutar",
          ¿qué sucede? El págaro se mueve hacia adelante un bloque del terreno. ¿Y
          si quiero que el pájaro haga algo más después de moverse adelante? Puedo
          añadir otro bloque al programa.
      4:
        image: notes/C2_maze_intro_4.png
        text: Voy a elegir el bloque "girar a la derecha" y a arrastrarlo debajo de
          mi bloque de mover hasta que aparezca la flecha amarilla. Después la voy
          a soltar y los dos bloques se quedarán pegados. Cuando presione "Ejecutar"
          otra vez, el pájaro realizará los comandos que están apilados en nuestra
          area de trabajo en orden desde arriba hacia abajo.
      5:
        image: notes/C2_maze_intro_5.png
        text: Si deseas eliminar un bloque, solo sácalo de la pila y arrástralo a
          la papelera. Después de ejecutar el programa, siempre puedes apretar el
          botón de reinicio para que el pájaro vuelva al punto de inicio. ¡Ahora vamos
          por esos cerdos!
    C2_paper_airplanes:
      1:
        image: notes/C2_paper_airplanes_1.png
        text: Esta lição é designada de Real Life Algorithms. Algorismos descrevem
          coisas que as pessoas fazem todos os dias. Receitas de bolachas e instruções
          de como construir uma casa para passáros são ambos algorismos usados no
          quotidiano.
      2:
        image: notes/C2_paper_airplanes_2.png
        text: Hoje, vamos fazer, criar e testar um algorismo para um avião de papel.
          Mas primeiro, necessitamos de separar este grande projecto em passos mais
          facéis de seguir. Para fazer um avião de papel, necessitamos de decidir
          que passos seguir e em que ordem devemos seguí-los.
      3:
        image: notes/C2_paper_airplanes_3.png
        text: Crearás tu algoritmo con primero cortando aparte las fotos. Luego, selecciorás
          las 6 fotos que muestran los pasos necesarios para hacer un avión de papel
          y arregla esas fotos en el orden correcto. Después de tener todo en orden,
          cambiarás algoritmos con otro equipo de estudiantes para probar el algoritmo
          y ver si el algoritmo funciona. Es super importante un algoritmo bien diseñado
          para hacer el mejor aeroplano de papel.
      4:
        image: notes/C2_paper_airplanes_4.png
        text: Cuando queremos hacer chocolate, hay muchos grandes pasos para ese proceso
          y cada uno de esos grandes pasos tiene un conjunto de pequeños pasos. Y
          hay diferentes recetas o algoritmos, dependiendo de cómo queremos que el
          sepa el chocolate. Cada paso es importante, incluso los pequeños. Así que
          sin un solo paso, el resto de ellos no podran ser completados. Es muy importante
          crear algoritmos que otros puedan entender. Es por ello que cada paso tiene
          que ser escrito no importando quien lo hace, el resultado es el mismo.
    C2_playlab_createastory:
      1:
        image: notes/C2_playlab_createastory_1.png
        text: Hasta ahora has hecho una animación o una historia que hace exactamente
          lo mismo cada vez que ejecutas el programa. Ahora puedes hacer un juego
          interactivo con el que de verdad puedes jugar.
      2:
        image: notes/C2_playlab_createastory_2.png
        text: Están el bloque "cuando flecha" y el bloque "mover actor". Puedes poner
          estos bloques juntos  para mover a los actores con las teclas de flecha.
    C2_relay_programming:
      1:
        image: notes/C2_relay_programming_1.png
        text: Hoy vamos hacer programación retransmitida. Es todo sobre programación
          bajo presión y depurando los errores que a veces ocurren cuando se trabaja
          muy rápido o en equipos. Utilizaremos papel gráfico programando para simular
          la codificación y utiizaremos carreras retransmitiendo para simular que
          se tiene una fecha límite.
      2:
        image: notes/C2_relay_programming_2.png
        text: En programación retransmitida, equipos estarán compitiendo para terminar
          un programa de papel grafico. Tienes que comprobar el trabajo de su compañero
          de equipo, o depurarlo, arreglarlo si hay un error, agrega tu flecha y ejecutalo
          denuevo y etiqueta a tu compañero.
      3:
        image: notes/C2_relay_programming_3.png
        text: Programadores utilizan mucho la depuración para encontrar y solucionar
          problemas en su código o sus algoritmos. Hay muchas maneras de depurar problemas.
          Uno de lo más fáciles es seguir paso a paso hasta encontrar algo donde sale
          mal, entonces arreglarlo.
      4:
        image: notes/C2_relay_programming_4.png
        text: Aquí, estoy tratando de hacer un salto hacia atras, pero me sigo callendo.
          Veo cada parte, paso a paso y trato de darme cuenta en donde estababa mi
          error. Mi entrenador me demostró que no estaba poniendo mis manos sobre
          la viga correctamente. Así que probé otro salto hacia atras en la viga con
          mi nueva posición de la mano, y me quedé! Realmente me alegró haber depurado
          mi salto hacia atras. Hemos averiguado! que la Depuración es encontrar y
          resolver problemas. Que bueno, buen trabajo!
    C2_zuck_repeat_loop:
      1:
        image: notes/C2_zuck_repeat_loop_1.png
        text: Una cosa que a los ordenadores se les da muy bien es la de repetir instrucciones.
          Como persona, te aburrirías mucho si tuvieras que hacer lo mismo un montón
          de veces seguidas. Pero un ordenador puede hacer lo mismo millones o incluso
          miles de millones de veces sin aburrirse, y llevarlo a cabo perfectamente.
      2:
        image: notes/C2_zuck_repeat_loop_2.png
        text: Asi que por ejemplo si yo quisiera desearle a todos un feliz cumpleaños
          en Facebook enviandoles un correo electrónico, me tardaría más de un siglo
          para realmente escribir todos los mensajes de correo electrónico a todos.
          Pero con sólo unas pocas líneas de código, puedo tener un sistema envia
          un correo electrónico a todos en Facebook deseándoles un feliz cumpleaños.
          Entonces eso es lo que un ciclo es, y por qué son valiosos, y es algo que
          las computadoras pueden hacer muy bien.
      3:
        image: notes/C2_zuck_repeat_loop_3.png
        text: En este ejemplo tu objetivo va a ser el mover el pájaro para obtener
          el cerdo.  Ahora vamos a ser capaces de utilizar el bloque "repetir" para
          poder hacer esto muy fácilmente. Tu puedes hacer esto dando al equipo un
          comando de "seguir adelante" cinco veces en orden para avanzar el pájaro
          un paso a la vez hacia el cerdo.
      4:
        image: notes/C2_zuck_repeat_loop_4.png
        text: O sólo puedes decirle a la computadora "avanzar" una vez y luego dile
          "repetir" 5 veces, y hará lo mismo. Así que para hacer esto arrastra el
          comando "avanzar", y ponlo dentro del bloque "repetir". Puedes hacer clic
          en él y dile cuantas veces deseas que repita el bloque para indicarle cuántos
          pasos quieres que avance.
      5:
        image: notes/C2_zuck_repeat_loop_5.png
        text: 'Una cosa más: puedes poner todos los comandos que desees dentro de
          un bloque "repetir". En este ejemplo le estás diciendo que se mueva adelante
          y gire a la izquierda, y lo hará cinco veces. Bien, buen trabajo y a divertirse!'
    C3_artist_functions:
      1:
        image: notes/C3_artist_functions_1.png
        text: Una de las grandes cosas programando computadoras es que una vez que
          ya le dijiste a la computadora cómo realizar una acción, puedes llamar a
          esa función denuevo. le das un nombre y entonces asi le puedes llamar. En
          realidad es como ampliando el idioma.
      2:
        image: notes/C3_artist_functions_2.png
        text: En el programa que construimos, aprendimos a dibujar un cuadrado moviéndose
          y girando cuatro veces. Podemos tomar esa función y darle un nombre, dibujar
          un cuadrado, para cada vez que quieramos hacerlo, simplemente decimos dibuja
          un cuadrado y volvera a invocar esa función, ese código. Se hará pora nosotros.
          Hemos añadido ese concepto a nuestro lenguaje de programación.
    C3_artist_intro:
      1:
        image: notes/C3_artist_intro_1.png
        text: Nisiquiera calificas para la carrera si tu no tienes personas que son
          competentes en ciencias de la computación debido a tantos datos que colectan
          los carros y la necesidad de poder tener personas que puedan escribir programas
          que encuentren la manera de cómo construir rendimiento.
      2:
        image: notes/C3_artist_intro_2.png
        text: En estos puzzles, tu serás un artista que usa un lápiz para dibujar
          distintas formas. Donde sea que tu artista vaya, el dibujará una linea detrás
          de él.
      3:
        image: notes/C3_artist_intro_3.png
        text: Para moverte por canvas, necesitarás usar el bloque de mover hacia delante.
          Aquí el bloque de mover dice que te muevas 100 pixeles hacia delante. Cuando
          pulsamos ejecutar, ¿Qué pasa? El artista se mueve hacia delante una cierta
          cantidad de pixeles y esa cantidad son 100px. Los pixeles son básicamente
          diminutos recuadros en la pantalla de tu ordenador.
      4:
        image: notes/C3_artist_intro_4.png
        text: El otro bloque que tenemos en este puzzle dice Girar a la derecha 90
          grados. Y cuando lo arrastramos, eso hace que nuestro artista gire una cierta
          cantidad. Así que puedes jugar con cuanto quieres que tu artista gire. Este
          es un giro de 90 grados.
      5:
        image: notes/C3_artist_intro_5.png
        text: Y esto es un giro de 120 grados. Y recuerda, tu puedes cambiar estos
          valores haciendo clic en las flechas junto a los números de píxeles y grados.
          ¡Disfruta dibujando con tu artista!
    C3_artist_nested_loops:
      1:
        image: notes/C3_artist_nested_loops_1.png
        text: Cuando pones un ciclo dentro de otro ciclo, nosotros llamamos eso un
          ciclo anidado. Por ejemplo, aquí nosotros dadomos ya el código para dibujar
          un triángulo con lados de 100 píxeles de longitud usando el bloque de repetición
          tres veces, una para cada lado del triángulo.
      2:
        image: notes/C3_artist_nested_loops_2.png
        text: Pero queremos dibujar seis triángulos. Para hacer eso, vamos a tomar
          ese bucle y lo pondremos dentro de otro bloque repetir. ¡Genial!, ¿No?
    C3_bee_conditionals:
      1:
        image: notes/C3_bee_conditionals_1.png
        text: Este es un bloque condicional. Este dice SI hay un nectar O miel que
          sea menor, igual o mayor que un número, ENTONCES haz algo.
      2:
        image: notes/C3_bee_conditionals_2.png
        text: Esto es útil cuando no sabemos cuanto néctar o miel obtener, como vemos
          acá con este signo de interrogación.
      3:
        image: notes/C3_bee_conditionals_3.png
        text: En este ejemplo, vamos a decir SI la flor purpura tiene néctar mayor
          que 0, obtiene néctar. Eso le dice a nuestra abeja que continúe obteniendo
          néctar mientra haya. Ta-dah!
    C3_debugging_bee:
      1:
        image: notes/C3_debugging_bee_1.png
        text: ¿Alguna vez has escuchado lo que es depurar un programa? Esta es la
          manera en la que te das cuenta qué es lo que no está funcionando. Cuando
          depuras un código, identificas y arreglas errores.
      2:
        image: notes/C3_debugging_bee_2.png
        text: Aquí estamos dando unos pocos bloques ya en nuestro lugar de trabajo.
          Vamos a utilizar el botón de paso para caminar a través de los bloques,
          paso a paso, a ver si esta es la solución correcta y donde necesitemos repararlo.
      3:
        image: notes/C3_debugging_bee_3.png
        text: Al parecer ahi está nuestro problema! Necesitamos un bloque más de mover
          adelante. El botón de paso nos ayuda a depurar nuestro problema al identificar
          dónde está el error y cómo podemos arreglarlo.
    C3_bee_functions:
      1:
        image: notes/C3_bee_functions_1.png
        text: Uno de los conceptos más importantes en Ciencias de la computación es
          cómo definir nuevos comandos, cómo agregar tus propias palabras a un lenguaje
          para la computadora. La mayoría de los lenguajes de programación tienen
          sólo alrededor de cien palabras o comandos. El arte y la magia está definiendo
          tus propias nuevas palabras fuera de bloques de construcción.
      2:
        image: notes/C3_bee_functions_2.png
        text: Hacemos esto todo el tiempo en el deporte. Por ejemplo, en baloncesto,
          tu empiezas aprendindo a como regatear el balón, como hacer un lanzamiento,
          como rebote. Una vez que aprendimos estos movimientos muy básicos, aprendes
          nuevos movimientos y juntas estos bloques, como agarra y rola o da y muevete.
          Entonces puedes ir desde allí a hacer juegos más complejos. Una vez que
          aprendiste ese juego y le das un nombre, todos en el equipo saben cómo hacerlo.
      3:
        image: notes/C3_bee_functions_3.png
        text: Del mismo modo una vez que le enseñaste a la computadora cómo realizar
          una acción y una vez usando estas secuencias de comandos, puedes darle un
          nombre a esa acción para que sea fácil repetirla más tarde. Cuando defines
          tu propio comando y le das un nombre, A eso se le llama función. Ahora vamos
          a usar funciones para ayudar a la abeja.
      4:
        image: notes/C3_bee_functions_4.png
        text: En este ejemplo, nuestra función se llama obten 2 néctares, este bloque
          verde de aquí. Sabemos qué es lo que hace obten 2 néctares, Viendo la caja
          gris que es la definición de función. Si vemos en el interior, va a obtener
          2 néctares y luego va a obter 2 néctares otra vez. Entonces siempre mira
          lo que está dentro de la caja gris para que sepas que es lo que pueden hacer
          estas funciones de bloques verdes.
    C3_bee_nested_loops:
      1:
        image: notes/C3_bee_nested_loops_1.png
        text: Ahora vamos a utilizar ciclos anidados con la abeja. Estamos dado un
          código de arranque que le dice a la abeja a avanzar y oten néctar tres veces
          y luego girar a la derecha. Tomemos la piesa completa de código y anidola
          dentro de otro bloque de repetir y establece a repetir tres veces. Hecho!
    C3_bounce:
      1:
        image: notes/C3_bounce_1.png
        text: Vas a crear tu propio juego de rebotar la pelota que podrás compartir
          con tus amigos, Genial, ¿No?
      2:
        image: notes/C3_bounce_2.png
        text: Para empezar, tenemos que enlazar los controles de paleta a las flechas
          de nuestro teclado.
      3:
        image: notes/C3_bounce_3.png
        text: Podemos hacer esto mediante la vinculación cuando el bloque de flecha
          izquierda mover el bloque izquierdo y cuando el bloque de la flecha derecha
          mover el boque derecho. Pruébalo y estaras programando tu propio juejo al
          instante!
    C3_computational_thinking:
      1:
        image: notes/C3_computational_thinking_1.png
        text: Esta lección es pensamiento computacional. A veces aprender un nuevo
          juego puede ser difícil ¿Verdad? Al principio puede parecer muy confuso
          y aveces, no hay nadie allí para enseñarle las reglas, entonces tienes que
          averiguarlo tu mismo.
      2:
        image: notes/C3_computational_thinking_2.png
        text: La buena noticia es que puedes mejorar averiguando cosas por tu cuenta
          cuando sabes algunos trucos del pensamiento. Estos trucos son formas únicas
          identificando y resolviendo problemas. En esta lección, aprenderas cuatro
          formas de trucos y practicarlos con tus amigos para encontrar las reglas
          para un juego.
      3:
        image: notes/C3_computational_thinking_3.png
        text: Cuando desglosas un gran problema en secciones pequeños, estas utilizando
          tu cerebro para descomponer el problema. Una vez que hemos descompuesto
          el problema en varios problemas más pequeños, podemos pasar a nuestro siguiente
          truco, que se llama coincidencia de patrón.
      4:
        image: notes/C3_computational_thinking_4.png
        text: Esto es cuando buscamos semejanzas entre las cosas. Una vez que encuentre
          las cosas que son iguales, puedo averiguar qué cosas son diferentes. Cuando
          elimino esas diferencias, a eso se le llama abstracción.
      5:
        image: notes/C3_computational_thinking_5.png
        text: Después que me he di cuenta los pasos para resolver un problema, puedo
          poner esos pasos en un orden específico llamado algoritmo para que cualquiera
          pueda utilizar mis instrucciones para resolver el problema. Vamos a utilizar
          estos cuatro pasos para encontrar la manera de jugar el juego sin reglas.
          Al final del juego, podrás jugar algo que se ve así!
    C3_crowdsourcing:
      1:
        image: notes/C3_crowdsourcing_1.png
        text: Esta lección se llama crowdsourcing. En esta lección vamos a usar una
          baraja de cartas para aprender cuanto mas fácil algunas cosas pueden ser
          si se hacer en grupos en lugar de intentar hacerlo todo solo. Así que ve
          por algunos amigos y haz algo impresionante. Crowdsourcing es conseguir
          ayuda de un grupo grande de personas para terminar algo más rápido.
      2:
        image: notes/C3_crowdsourcing_2.png
        text: En ciencias de la computación, utilizamos crowdsourcing todo el tiempo.
          Miles de aficionados y profesionales enlazan sus equipos conjuntamente para
          buscar a través de miles de millones y miles de millones de piezas de información.
          Buscando por cosas como el siguiente número primo de Mersenne, o incluso
          posibles comunicaciones de extraterrestres.
      3:
        image: notes/C3_crowdsourcing_3.png
        text: Cuando ves una película, cada segundo de la película son 24 cuadros
          individuales, llamamos a esos fotogramas. Asi que cada una de esas fotos
          debe ser creado y renderizado y se junta todo. Mi equipo y yo, somos todos
          desarrolladores de software. Todos trabajamos juntos para crear una pieza
          de software que crea una imagen, crea la imagen final que ves en pantalla.
          Es una herramienta que artistas y otros desarrolladores pueden utilizar
          como parte de su trabajo en equipo y su proceso para ser capaces de crear
          las imágenes que quieren en pantalla.
      4:
        image: notes/C3_crowdsourcing_4.png
        text: Por ejemplo, en buscando a Nemo, cuando Crush y Squirt y todos sus amigos
          están volando a través de la corriente Australiana del Este. Estás viendo
          imágenes de agua que fluyen, estas viendo los colores en la parte posterior
          de la tortuga, estás viendo los lados de los pescados. Todas esas cosas
          se generan a través de programas de matemáticas y programas de computación
          que nosotros escribimos, que luego le damos al artista y ellos toman eso
          para crear la imagen final y retocarlo para que se vea hermoso y se vea
          divertido.
    C3_dice_race:
      1:
        image: notes/C3_dice_race_1.png
        text: Esta lección se llama carrera de dados. A casi todos les gusta jugar
          juegos de computadoras. ¿Alguna vez as pensado cómo los programas de computadoras
          convertir los pasos de un juego en un programa? El primer paso en la creación
          de juegos de computadora y resoviendo cualquier problema requiere de pensamiento
          y planificación.
      2:
        image: notes/C3_dice_race_2.png
        text: El paso del pensamiento en resolución de problemas produce un algoritmo,
          el cual es un plan de paso a paso para solucionar un problema o terminar
          una tarea. tu crearás un algoritmo para un juego de carreras de dados. Luego
          le pediras a tus amigos que prueben tu plan para ver si ellos pueden seguir
          los pasos para jugar al juego. Después de que el programador esta seguro
          de que los pasos son correctos, es tiempo de traducir el algoritmo a un
          programa con el lenguaje que la computadora pueda entender.
      3:
        image: notes/C3_dice_race_3.png
        text: Casi todo lo que hacemos todos los días requiere un algoritmo, una lista
          de pasos que puedes seguir para terminar una tarea. Piensa en la rutina
          de estar listo para la escuela o la planificación de un día divertido con
          tus amigos o la preparación de un bocado. Para completar cualquiera de estas
          tareas, Tendrás que desglosarlo en pasos más pequeños y algunas veces los
          pasos deben ser en un orden específico.
      4:
        image: notes/C3_dice_race_4.png
        text: Pensa en hacer un sandwich. No importa que ingrediente saques primero
          de la alacena. Pero tu no puedes poner mantequilla de maní hasta que abras
          el tarro. Computadoras necesitan algoritmos y programas que le muestren
          cómo hacer incluso simples cosas que podemos hacer sin pensarlo.
      5:
        image: notes/C3_dice_race_5.png
        text: Un algoritmo es el pensamiento detrás de lo que debe ocurrir mientras
          que el programa son las instrucciones reales dadas a la computadora para
          que algo ocurra. Un algoritmo tiene que traducirse en un programa antes
          de que una computadora puede ejecutarlo. Desglosando una tarea en pasos
          llamado algoritmo aveces es dificil. Pero como cualquier nueva habilidad,
          se hace más fácil y más fácil con la práctica.
    C3_farmer_while:
      1:
        image: notes/C3_farmer_while_1.png
        text: Mientras que los ciclos son muy similares a lo que haces en la vida
          cotidiana. Imagina que estás lavando tu coche, estaras tallando hasta que
          quede limpio. Mientras que no este limpio, seguirás tallando. Estás evaluando
          estas cosas todo el tiempo.
      2:
        image: notes/C3_farmer_while_2.png
        text: Tenemos un nuevo ciclo para ayudar a tu granjero. Se llama mientras-bloque.
          Es muy simple en realidad. Mientras que la declaración de la parte superior
          es verdadera, haz algo. Por ejemplo, mientras que haya un montón de tierra
          mueve una pala completa. Sigue adelante y dale una oportunidad a tu granjero.
    C3_functional_suncatchers:
      1:
        image: notes/C3_functional_suncatchers_1.png
        text: Esta lección es funcional vitrales. Crearás bonitos vitrales usando
          funciones. Hay varios pasos en la creación de uno de estos vitrales. Algunos
          de los pasos tienes que repetilo varias veces.
      2:
        image: notes/C3_functional_suncatchers_2.png
        text: El primer paso para simplificar el proceso de hacer un vitral es averiguado
          lo que tenemos que repetir una y otra vez. Podemos agrupar estos pasos en
          lo que llamamos función.
      3:
        image: notes/C3_functional_suncatchers_3.png
        text: Pero hay más que crear en un hermoso vitral que siguiendo pasos exactos.
          A veces queremos ser creativos y cambiar el color de los vidrios que estamos
          utilizando. Podemos hacer cada vitral único si utilizamos diferentes coloreados
          vidrios.
      4:
        image: notes/C3_functional_suncatchers_4.png
        text: Tu vitral será únicamente tuyo cuando aprendas a pensar en los vidrios
          como las variables que es una palabra que significa un marcador de la información
          que puede ser cambiada. Diviértete creando hermosos vitrales usando funciones
          y variables!
    C3_internet:
      1:
        image: notes/C3_internet_1.png
        text: Esta lección se trata del internet. Internet es un lugar muy ocupado
          y similar a este camino concurrido. Mensajes como los coches son enfocados
          a lo largo para llegar a sus destinos. Los mensajes se mueven a través de
          internet muy rápidamente.
      2:
        image: notes/C3_internet_2.png
        text: Actuando cómo funciona el internet te ayudará a entender lo que sucede
          cuando usas internet. Aprenderás cómo los mensajes van de tu computador
          a un sitio de web favorito o de un amigo a un buzón de correo electrónico.
          Al igual que es más fácil navegar por caminos ocupados cuando conoces los
          caminos y puedes leer las señales, viajando el internet no es tan complicado
          cuando sabes lo que esta pasando detrás de la escena.
      3:
        image: notes/C3_internet_3.png
        text: Envío de mensajes en internet es un poco como enviar mensajes por correo
          pero con algunas diferencias. Estoy aquí en Google.com. La dirección IP
          para este sitio web es este número. Puedes pensar de una dirección IP como
          la dirección del remitente en el correo. Imaginemos que quiero enviar un
          mensaje en el correo a alguien en la oficina de alla. ¿Aparece el URL y
          la dirección IP en esa puerta? He escrito este mensaje y pulse enviar.
      4:
        image: notes/C3_internet_4.png
        text: A diferencia de los servicios postales, lo primero que ocurre es que
          internet separa el mensaje en partes más pequeñas, par que se pueda enviar
          más fácilmente. Estas partes pequeñas se llaman paquetes. Cada paquete del
          mensaje se entrega al destino uno a la vez. Estos paquetes son reunidos
          en el orden correcto para que el receptor pueda leer el mensaje correctamente.
          Por supuesto, hay muchas cosas más que aprender sobre cómo funciona el internet
          pero esto es un gran comienzo. Estás en el camino a convertirte en un experto
          usuario de internet! No olvides decirle a tu familia y amigos lo que has
          aprendido!
      5:
        image: notes/C3_internet_5.png
        text: Mi nombre es Amanda Camp y soy un ingeniero de software en Google. Trabajo
          en un equipo que trabaja en el servidor final que almacena perfiles y contactos.
          En mi trabajo, pensamos mucho en cómo se pueden enviar contactos a otros
          dispositivos, como teléfono. La mayoría de la gente tiene un muchos contactos,
          es posible que tu tengas por decir, 1000 contactos y no queremos enviar
          a todos los contactos a la vez a tu teléfono porque es demasiado grande
          el mensaje. Similar a la manera que el internet separa grandes mensajes
          en paquetes, utilizamos un concepto llamado paginación donde solo mandaremos
          a tu teléfono 100 contactos a la vez y dejar que tu teléfono nos responda
          y pregunte por los próximos 100.
      6:
        image: notes/C3_internet_6.png
        text: Lo más emocionante del software es el hecho de que puede afectar a todo
          el mundo. Primero aprendí a programar cuando tenía cerca de diecinueve años.
          Creo que ya era un estudiante de segundo año o un junior en la Universidad.
          El primer programa que recuerdo haber escrito fue algo que convertía Celsius
          a Fahrenheit. Me gusta programar porque me gusta ayudar a la gente. Puedo
          escribir programas en Google para ayudar a las personas en todo el mundo
          y eso es realmente alucinante y emocionante.
    C3_maze_conditionals:
      1:
        image: notes/C3_maze_conditionals_1.png
        text: Las personas toman decisiones todos los días. Por ejemplo, antes de
          salir al exterior, tienes una instrucción "Si..." que dice si está lloviendo,
          entonces necesito ponerme mi chaqueta. Las computadoras son sorprendentes
          una vez que se definen ese tipo de declaraciones ya que pueden ejecutar
          dichas sentencias de una forma efectiva y a gran velocidad. Un programa
          de computadora es realmente un poco de matemáticas y algunas declaraciones
          donde se toman decisiones.
      2:
        image: notes/C3_maze_conditionals_2.png
        text: El bloque "Si..." ayuda a los zombies a tomar una decisión. Comprueba
          algo. Por ejemplo, vamos a utilizar el bloque que dice que si hay un camino
          a la izquierda y poner un comando de doblar a la izquierda en su interior.
          Estamos diciendo a los zombis que controlen su entorno, que vean si hay
          un camino a la izquierda y si es así, que doblen.
      3:
        image: notes/C3_maze_conditionals_3.png
        text: Luego usamos el bloque Avanzar dentro de esta repetición para continuar
          moviéndonos hacia adelante mientras se quiera. Entonces cuando hay un giro,
          el bloque "Si..." te indicará que hagas el giro a la izquierda. Se puede
          ver que si lo hacemos, si nos tomamos el giro a la izquierda y en otro caso
          seguimos adelante, te alcanzamos nuestro objetivo.
      4:
        image: notes/C3_maze_conditionals_4.png
        text: Es un ejemplo el uso de una sentencia "Si" que es en realidad un concepto
          fundamental en programación. Una de las primeras cosas que aprendí fue cómo
          escribir un programa que juega tic-tac-toe. Tuve sentencias "Si" para decir,
          ok, "Si" la otra persona está a punto de ganar, adelantate y bloquea a ese
          lugar. Diviértete aprendiendo a utilizar las sentencias "Si", es un concepto
          clave.
    C3_maze_level_4:
      1:
        image: notes/C3_maze_level_4_1.png
        text: En este ejemplo, su meta es llevar el zombie el girasol. Podríamos utilizar
          cinco bloques de movimiento hacia Adelante o podríamos decir a la computadora
          que avance 5 veces en un bloque de repetición.
      2:
        image: notes/C3_maze_level_4_2.png
        text: Esto ahorra tiempo y lo hace mucho más fácil. Para usarlo, sólo hay
          que poner el bloque de avanza dentro del bloque de repetición. Pulsa ejecutar
          y el zombie avanzará cinco veces para el delicioso girasol.
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: Hasta ahora has hecho una animación o una historia que hace exactamente
          lo mismo cada vez que ejecutas el programa. Ahora puedes hacer un juego
          interactivo con el que de verdad puedes jugar.
      2:
        image: notes/playlab_2.png
        text: Están el bloque "cuando flecha" y el bloque "mover actor". Puedes poner
          estos bloques juntos  para mover a los actores con las teclas de flecha.
    C3_songwriting_with_parameters:
      1:
        image: notes/C3_songwriting_with_parameters_1.png
        text: Esta es la lección de escritura de la canción. La música es como un
          programa de computadora. Las notas escritas y las palabras le dicen al cantante
          exactamente qué hacer. Algunas partes de la música se utilizan una y otra
          vez.
      2:
        image: notes/C3_songwriting_with_parameters_2.png
        text: Llamamos a esto el coro. En un programa de computadora, las partes del
          programa que se utilizan una y otra vez se llaman funciones. Cuando lees
          la letra de la canción y dice la palabra "Coro", ¿Cantas la palabra "Coro"?
          No, nos fijamos en la parte superior de la página para ver qué palabras
          forman el coro.
      3:
        image: notes/C3_songwriting_with_parameters_3.png
        text: En esta lección, aprenderás una canción poco tonta llamada conejito
          foo foo. La canción tiene un coro que cantarás varias veces una y otra vez.
          Una función es un pedazo de código que puedes llamar y usar una y otra vez.
          Hace la programación más fácil y eficiente para que no tengas que escribir
          una y otra vez los pasos de tu función. Puede escribirlo solo una vez!
    C4_bee_conditional:
      1:
        image: notes/C4_bee_conditional_1.png
        text: Este es el bloque condicional. Dice que "Si" estas en la flor o el panal,
          entonces haz algo. Esto es útil cuando no sabemos la cantidad de miel o
          néctar para conseguir como vemos aquí con este signo de interrogación.
      2:
        image: notes/C4_bee_conditional_2.png
        text: En este ejemplo, vamos a decir, "Si" esuna flor, obten todo el néctar
          y luego use otro para decir, Si es un panal de abejas, hacer miel. Ta-dah!
    C4_conditionals:
      1:
        image: notes/C4_conditionals_1.png
        text: Tenemos un nuevo bloque llamado el bloque Si/de oto modo. Es una sentencia
          condicional, al igual que Si el bloque que has usado en el rompecabezas
          antes. Pero ahora hay una nueva pieza en la parte inferior que dice de otro
          modo. El bloque Si/de otor modo permite a la abeja tomar una decisión entre
          las dos acciones. Si la abeja esta el la flor, la abeja hará el conjunto
          de acciones que pusiste en la primera parte donde dice hacer. Si la abeja
          no esta en la flor, la abeja hará el conjunto de acciones que pusiste en
          la ranura donde dice de otro modo.
      2:
        image: notes/C4_conditionals_2.png
        text: Sentencias "Si" son cómo las computadoras son capaces de tomar decisiones.
          Los seres humanos definen condiciones para las computdaoras que dicen "Si"
          la computadora se presenta con cierta situación haz esto. De otra modo,
          sólo significa lo contrario, haz eso. La parte superior de nuestro bloque
          Si/de otro modo dice Si en la flor. Pero la parte superior de nuestro bloque
          podría decir otras cosas, como Si el néctar es igual a 2 o si existe un
          camino adelante, nuestro bloque se comportara de la misma manera. Que la
          sentencia Si y en la parte superior es verdadera hará el primer conjunto
          de acciones. Pero si la sentencia en la parte superior es falsa, hará el
          segundo conjunto de acciones.
    C4_for_loops:
      1:
        image: notes/C4_for_loops_1.png
        text: Cuando se utilizas un bloque de repetición para un ciclo en tu código,
          ¿cómo la computadora sabe cuando es repetido suficientes veces? El bloque
          de repetición actualmente esconde en realidad una pieza más sofisticada
          de código llamado desde un ciclo que cuenta de un valor inicial hasta un
          valor final de un incremento específico.
      2:
        image: notes/C4_for_loops_2.png
        text: Por ejemplo, una repetición de bloque tres cuentas del 1 al 3 por 1.
          Cada vez que cuenta, se ejecuta el código dentro del ciclo. El dede el ciclo
          sabe cuántas veces se ha ejecutado mediante el uso de una variable contador
          el cual se establece en el valor inicial al principio del ciclo y tiene
          el incremento agregado a él cada vez que el ciclo se ejecuta. En cuanto
          a la variable contador es mayor que el valor final, el ciclo deja de ejecutarse.
      3:
        image: notes/C4_for_loops_3.png
        text: La ventaja de utilizar un verdadero desde ciclo en lugar del bloque
          de repetición es que realmente puedes ver la variable contador y utilizarla
          en tu ciclo. Por ejemplo, Si tengo una serie de flores y la primera de ellas
          tiene un néctar, la segunda tiene dos néctares y la tercera tiene tres,
          puedo usar el desde ciclo para decirle a la abeja que colcte 'contador'
          néctares cada vez, que sería en la primera flor, dos en la segunda y tres
          en el tercero.
      4:
        image: notes/C4_for_loops_4.png
        text: También en desde ciclo, puedes incrementar el contador por un número
          distinto de uno cada vez. Potencialmente puedes contar por 2s, 4s o incluso
          atravez de una cantidad que cambia cada vez.
    C4_for_loops_bee:
      1:
        image: notes/C4_for_loops_bee_1.png
        text: Cuando se utilizas un bloque de repetición para un ciclo en tu código,
          ¿cómo la computadora sabe cuando es repetido suficientes veces? El bloque
          de repetición actualmente esconde en realidad una pieza más sofisticada
          de código llamado desde un ciclo que cuenta de un valor inicial hasta un
          valor final de un incremento específico.
      2:
        image: notes/C4_for_loops_bee_2.png
        text: Por ejemplo, una repetición de bloque tres cuentas del 1 al 3 por 1.
          Cada vez que cuenta, se ejecuta el código dentro del ciclo. El dede el ciclo
          sabe cuántas veces se ha ejecutado mediante el uso de una variable contador
          el cual se establece en el valor inicial al principio del ciclo y tiene
          el incremento agregado a él cada vez que el ciclo se ejecuta. En cuanto
          a la variable contador es mayor que el valor final, el ciclo deja de ejecutarse.
      3:
        image: notes/C4_for_loops_bee_3.png
        text: La ventaja de utilizar un verdadero desde ciclo en lugar del bloque
          de repetición es que realmente puedes ver la variable contador y utilizarla
          en tu ciclo. Por ejemplo, Si tengo una serie de flores y la primera de ellas
          tiene un néctar, la segunda tiene dos néctares y la tercera tiene tres,
          puedo usar el desde ciclo para decirle a la abeja que colcte 'contador'
          néctares cada vez, que sería en la primera flor, dos en la segunda y tres
          en el tercero.
      4:
        image: notes/C4_for_loops_bee_4.png
        text: También en desde ciclo, puedes incrementar el contador por un número
          distinto de uno cada vez. Potencialmente puedes contar por 2s, 4s o incluso
          atravez de una cantidad que cambia cada vez.
    C4_for_loops_no_bee:
      1:
        image: notes/C4_for_loops_no_bee_1.png
        text: Cuando se utilizas un bloque de repetición para un ciclo en tu código,
          ¿cómo la computadora sabe cuando es repetido suficientes veces? El bloque
          de repetición actualmente esconde en realidad una pieza más sofisticada
          de código llamado desde un ciclo que cuenta de un valor inicial hasta un
          valor final de un incremento específico.
      2:
        image: notes/C4_for_loops_no_bee_2.png
        text: Por ejemplo, un bloque de repetición de tres cuentas de 1 al 3 por 1.
          Cada vez que cuenta, se ejecuta el código dentro del ciclo. El desde ciclo
          sabe cuántas veces se ha ejecutado mediante el uso de una variable contador
          en que se establece el valor inicial al principio del ciclo y tiene el incremento
          agregado de cada vez que el ciclo se ejecuta. En cuanto la variable contador
          es mayor que el valor final, el ciclo deja de ejecutarse. La ventaja de
          utilizar un verdadero bucle en lugar de un bloque de repetición es que realmente
          puedes ver la variable contador y utilizar en tu ciclo.
    C4_function_create:
      1:
        image: notes/C4_function_create_1.png
        text: Ahora que has editado bloques de función, es tiempo de crear un nuevo
          bloque de función desde cero. Es muy simple. Usted verá que el cuadro de
          herramientas tiene una categoría llamada funciones. Si haces clic en esto,
          usted verá un botón naranja que se llama crear una función. Haciendo clic
          en él, aparecerá el editor de función que ya has usado para editar bloques
          de función existentes.
      2:
        image: notes/C4_function_create_2.png
        text: Al igual que antes, usted comenzó nombrando su función y escribiendo
          una descripción de lo que se supone dicha función debe hacer. Por ejemplo,
          se supone que debe dibujar un cuadrado o dibujar un triángulo y luego arrastrar
          bloques de la caja de herramientas en el espacio blanco de abajo. Recuerda
          arrastrar estos bloques dentro del bloque verde que recubre la función.
      3:
        image: notes/C4_function_create_3.png
        text: Una vez que terminaste, haga clic en guardar y salir. Esto te llevará
          al romprecabezas principal. La nueva función que creaste aparecerá como
          un bloque verde en la categoría de función en tu caja de herramientas. Arrastrala
          y suelta esto en el espacio de trabajo principal y utilizarlo como cualquier
          otro bloque para resolver el rompecabezas.
    C4_function_edit:
      1:
        image: notes/C4_function_edit_1.png
        text: Una de las grandes cosas programando computadoras es que una vez que
          ya le dijiste a la computadora cómo realizar una acción, puedes llamar a
          esa función denuevo. le das un nombre y entonces asi le puedes llamar. En
          realidad es como ampliando el idioma.
      2:
        image: notes/C4_function_edit_2.png
        text: En el programa construimos, aprendimos a dibujar un cuadrado moviéndose
          y girando cuatro veces. Podemos tomar esa función y darle un nombre, dibuja
          un cuadrado, para cada vez que quieramos hacerlo, simplemente decimos dibuja
          un cuadrado y volvera a invocar esa función, ese código. y lo hará por nosotros.
          Hemos añadido ese concepto a nuestro lenguaje de programación.
      3:
        image: notes/C4_function_edit_3.png
        text: En este rompecabezas, hemos ya creado una función de dibuja un cuadrado
          para ti. Lo verás en la caja de herramientas como un bloque verde. Lo que
          debes hacer es escribir el mismo código que escribiste antes de dibujar
          un cuadrado y pon esta función. Para ello, haga clic en la opción de editar
          en el bloque cuadrado verde. Esto abrirá el editor de funciones. El editor
          de función tiene tres partes. Un lugar donde nombraste tu función. Ésta
          aparecerá en el bloque verde antes de esa función. Entonces escribe una
          breve descripción de lo que tu función se supone que hace.
      4:
        image: notes/C4_function_edit_4.png
        text: En este caso, se supone que para dibujar un cuadrado. El espacio blanco
          de abajo este es el espacio de trabajo y obras como la obra de espacio que
          has estado usando. Arrastra y suelta bloques de la caja de herramientas
          en este espacio de trabajo. Recuerda en poner los bloques que creaste dentro
          de la cuadrado verde envolviendo el bloque para la función. Una vez que
          terminaste, da clic en guardar y salir. Esto te llevará al rompecabezas
          principal. Ahora puede utilizar la funcion bloque que dibuja el cuadrado
          al igual que cualquier otro bloque para resolver el rompecabezas.
    C4_function_parameters:
      1:
        image: notes/C4_function_parameters_1.png
        text: Aqui hay una función que dibuja un cuadrado con lados de 50 pixeles.
          ¿Eso es genial pero que tal si quiero dibujar un cuadrado con lados de 50
          pixeles y otro cuadrado con lados de 100 píxeles? No tenemos que hacer dos
          funciones separadas que hacen casi lo mismo. Por el contrario, podemos usar
          una función con un parámetro.
      2:
        image: notes/C4_function_parameters_2.png
        text: Parámetros nos permiten pasar valores a una función que utilice como
          variables dentro de la función. Vamos a intentar añadir un parámetro llamado
          como a esta función para que podamos usarla para crear cuadrados de diferentes
          tamaños. En el editor de función, pueded editar el nombre y descripción
          como antes pero ahora también puedes agregar un parámetro. Escribe el nombre
          de tu parámetro en el espacio y da clic en Agregar Parámetro. Esto crea
          un bloque rojo con el nombre del parámetro que acabas de crear. Ahora podemos
          reemplazar el movimiento hacia adelante por el bloque de 100 con el parámetro
          longitud pora que lo mueva hacia adelante por longitud.
      3:
        image: notes/C4_function_parameters_3.png
        text: Da clic en guardar y cerrar y arrastra hacia fuera tu nuevo crear un
          bloque cuadrado de la categoría de las funciones de la caja de herramientas.
          Notarás que hay un espacio vacío al lado de longitud porque la función quiere
          saber cuál es el valor del parámetro que longitud debe tener. Arrastrar
          un bloque del número de la categoría matemáticas y colocalo en este espacio.
          ¿Ve cómo puedes utilizar la función una y otra vez con diferentes longitudes
          para hacer cuadrados de diferentes tamaños? ¡ Pruébalo tu mismo!
    C4_intro:
      1:
        image: notes/C4_intro_1.png
        text: Normalmente la programación es en texto pero nosotros usaremos Blockly
          que usa bloques visuales que puedes arrastrar y soltar para escribir programas.
          Bajo la cubierta, sigues creando el código. Para empezar, vamos a crear
          el código para el programa que ayudará a éste Angry Bird a moverse entre
          el laberinto para llegar a los cerdos malvados que robaron sus huevos.
      2:
        image: notes/C4_intro_2.png
        text: Blockly se divide en tres partes principales. A la izquierda está el
          laberinto de los pájaros, donde tu programa se ejecutará. Las instrucciones
          de cada nivel se escriben debajo del laberinto. Esta zona media es la caja
          de herramientas y cada uno de estos bloques es un comando que el pájaro
          puede entender. El espacio blanco en la derecha es el espacio de trabajo
          y es donde compilaremos nuestro programa.
      3:
        image: notes/C4_intro_3.png
        text: Si arrastro un bloque "mover" al área de trabajo y presiono "Ejecutar",
          ¿qué sucede? El págaro avanza una caja en la parrilla. ¿Y que tal si quiero
          que el pájaro haga algo más despues de qeu avanza una caja? Puedo agregar
          otro bloque a nuestro programa.
      4:
        image: notes/C4_intro_4.png
        text: Voy a elegir el bloque "girar a la derecha" y lo arrastrare debajo de
          mi bloque de mover hasta que aparezca la flecha amarilla. Después la voy
          a soltar y los dos bloques se quedarán pegados. Cuando presione "Ejecutar"
          otra vez, el pájaro realizará los comandos que están apilados en nuestra
          area de trabajo en orden desde arriba hacia abajo.
      5:
        image: notes/C4_intro_5.png
        text: Si deseas eliminar un bloque, solo sácalo de la pila y arrástralo a
          la papelera. Después de ejecutar el programa, siempre puedes apretar el
          botón de reinicio para que el pájaro vuelva al punto de inicio. ¡Ahora vamos
          por esos cerdos!
    C4_math_artist:
      1:
        image: notes/C4_math_artist_1.png
        text: Si quiero dibujar un rectángulo de 50 píxeles de alto y eso es dos veces
          mas ancho que de alto, ¿cómo programare la computadora para hacer eso? Bueno,
          Podrian decirle la artista que suba cincuenta, girar a la derecha y luego
          ir mas de 100 y mover todo eso dos veces. Pero entonces estoy haciendo los
          cálculos para la computadora.
      2:
        image: notes/C4_math_artist_2.png
        text: Multiplicar cincuenta por dos en tu cabeza puede no decir mucho pero
          computadoras son realmente buenos en matemáticas, entonces debemos dejarcela
          a ellos siempre que sea posible. Si solo llamo a la variable altura en su
          lugar, entonces podría cambiar fácilmente la altura a los cincuenta y luego
          cambiar mi algoritmo para decirle al artista que suba por la altura, gire
          a la derecha y luego vaya más que la altura 2 veces, lo que nos da un rectángulo
          que es dos veces más ancho como lo es de alto.
    C4_unplugged_algorithms:
      1:
        image: notes/C4_unplugged_algorithms_1.png
        text: Esta lección es llamada Tangram algoritmos. Un tangram es un rompecabezas
          con siete piezas que se pueden poner juntos a hacer otras formas. Utilizarás
          un algoritmo para explicar a tu compañero cómo armar el rompecabezas.
      2:
        image: notes/C4_unplugged_algorithms_2.png
        text: Un algoritmo es uno de los pasos de la lista que tu puedes tomar para
          completar una tarea. Los utilizamos todos los días con cosas como recetas
          y listas de compras. Si mantienes un algoritmo simple, hay muchas maneras
          de interpretarlo y quien realiza ese algoritmo no puede conseguir exactamente
          lo que querías. Si quieres asegurarte de que todos terminen exactamente
          con lo mismo, entonces su algoritmo tendrá que ser detallado y específico.
      3:
        image: notes/C4_unplugged_algorithms_3.png
        text: Estoy usando un algoritmo el dia de hoy para completar una pintura.
          Quería intentar hacer una pintura de algunos lobos pero no soy el mejor
          pintor. Por suerte para la gente como yo. hay pintura por números. Hay 40
          colores y tiene pocas letras y números que te dicen de qué color pintar
          cada sección. Pinturar por números me dice exactamente qué color usar y
          dónde.
      4:
        image: notes/C4_unplugged_algorithms_4.png
        text: Es muy específico por lo que soy capaz de seguir indicaciones y la pintura
          va a quedar impresionante. Es un gran algoritmo. Si las instrucciones no
          fueron lo suficientemente específicas, mis lobos no se veran tan bien. Cuando
          realmente quieres que salga algo exactamente de la manera en que lo planeaste,
          es mejor ser extremadamente preciso.
    C4_unplugged_binary:
      1:
        image: notes/C4_unplugged_binary_1.png
        text: Cada equipo, la persona que está dando instrucciones es la persona que
          sostiene el papel, tiene que averiguar cual es el símbolo que va a ser y
          lo que su símbolo puesto es lo que va a ser. En binario, es como un alfabeto
          con dos letras. Como tener A y B es tu alfabeto completo pero tienes un
          0 y un 1.
      2:
        image: notes/C4_unplugged_binary_2.png
        text: Es la forma más común qu utilizas binario en una sentencia de "Si".
          Es un clásico de la programación. El programa se ejecuta a lo largo y dice
          Si algo es verdadero, entonces haz esto. O no es verdadero y haces otra
          cosa. Qué pasa Si tu quieres hacer algo tal vez un poco más complicado.
          En su lugar una sentecia Si, deseas trabajar con algo como una imagen o
          un sonido en una computadora.
      3:
        image: notes/C4_unplugged_binary_3.png
        text: 'Una computadora sólo sabe binario pero una imagen, no es binario, no
          son unos y ceros entonces ¿Cómo haces esto? Aquí está un ejemplo: tienes
          este hermosa foto. Ahora una foto es básicamente una forma de información.
          Toda la información puede ser codificada en binario de una u otra forma,
          sólo tienes que encontrar la manera de hacerlo.'
      4:
        image: notes/C4_unplugged_binary_4.png
        text: Te imaginas que vamos a poner cuadros sobre este oso panda y para cada
          cuadro, vamos a decidir si esa cuadro es más negro o más blanco. Y luego
          vamos a colorearlo de esa manera. Ahora cada celda del cuadrodo es ya negro
          o blanco y luego los cuadrados negros vamos a decir que son ceros (dígito
          binario) y los cuadros blancos son unos, los otros dígitos binarios. Al
          final, te queda sólo un montón de unos y ceros. Asi es como representas
          esta imagen en binario.
    C4_unplugged_forloops:
      1:
        image: notes/C4_unplugged_forloops_1.png
        text: Esta lección es llamada para bucles divertido. En esta lección, usaremos
          una recta numérica para jugar el juego del dado. Cada jugador rodará tres
          veces para asignar un valor inicial, un valor para parar y nuestro intervalo.
          Durante cada turno, rodeamos nuestro valor inicial y cada valor es el mismo
          número de pasos adelante que nuestro valor de intervalo. Dejamos que circunda
          al llegar a nuestro valor de parada. La persona con la mayor puntuación
          gana!
      2:
        image: notes/C4_unplugged_forloops_2.png
        text: Para bucles pueden ser útiles mucho de lugares y si llegaras a ser un
          meteorólogo, utilizarás desde ciclos todo el tiempo. Hola, soy Becky. Trabajo
          en EverPower Renewables como un meteorólogo de viento. Pronóstico la velocidad
          del viento para el Río Columbia Gorge área donde la empresa es propietaria
          de parques eólicos.
      3:
        image: notes/C4_unplugged_forloops_3.png
        text: Estamos tratando de entender cuánto viento va a estar ahí para que sepamos
          cuánta energía va a ser emitida. Damos esta información a proveedores de
          energía en tiempo real. Ellos compran y venden energía basado en cuanta
          energía les decimos va a estar ahí para asegurarse de que la rejilla de
          energía está equilibrada, su luz se queda prendida, y aprovechamos al máximo
          la cantidad de energía que obtenemos de nuestras granjas.
      4:
        image: notes/C4_unplugged_forloops_4.png
        text: Estamos en el centro de control nacional de EverPower Renewables aquí
          en Portland y es donde tenemos información proveniente de nuestras fincas
          en todo el país. Incluso los equipos de potencia más alto hoy en día no
          pueden simular la atmósfera por todas partes. En computadoras de modelos
          de previsión, tenemos lo que llamamos una cuadrícula. Cada punto de la cuadricula
          es una latitud, longitud. Tenemos que calcular la física y tratar de averiguar
          la velocidad del viento, temperatura, presión, ese tipo de cosas.
      5:
        image: notes/C4_unplugged_forloops_5.png
        text: Ya que estas son redes bastante grandes y estamos haciendo esto en un
          varios puntos estamos haciendo bucles sobre estas cosas millones y millones
          de veces. En todo lo que hago Se que usaré para bucles. Aquí por ejemplo
          hay un para bucle ahí. Cuando haces la previsión del viento, hay muchos
          parámetros diferentes que van a él sería imposible para un ser humano sentarse
          y hacer todos esos cálculos. Hay muchos aspectos diferentes a lo que va
          a afectando lo que está sucediendo al viento que necesitamos un modelo de
          computadora para poder preverlo.
    C4_unplugged_madlibs:
      1:
        image: notes/C4_unplugged_madlibs_1.png
        text: En esta lección, jugaremos con algún relleno en las historias en blanco.
          Tienes una plantilla que puedes completar para crear historias similares
          que tienen diferencias muy divertidas.
      2:
        image: notes/C4_unplugged_madlibs_2.png
        text: En esta lección, también aprendimos cómo hacer una plantilla abstraída
          de dos historias que ya se han creado. Abstracción es el arte de la eliminación
          de las diferencias y detalles para que puedas ver cómo una solución puede
          funcionar para muchos problemas diferentes. Es muy útil en Ciencias de la
          computación por que nos permite crear funciones que pueden ser útiles en
          varias situaciones diferentes.
    C4_unplugged_parameters:
      1:
        image: notes/C4_unplugged_parameters_1.png
        text: Esta lección se llama escribiendoCanción con parámetros. Vamos a escribir
          algunas canciones aquí. A veces el coro es un poco diferente cada vez que
          canta. ¿Te acuerdas del viejo Macdonald tenía una granja? El coro es ligeramente
          diferente para cada animal. Y en esa granja tenía una vaca, 1-a-i-a-o. El
          pequeño cambio en cada coro se puede demostrar con algo que llamamos parámetros.
      2:
        image: notes/C4_unplugged_parameters_2.png
        text: A veces una función necesita un parámetro. Un parámetro es una pieza
          adicional de información que puedes pasar a una función para personalizarlo
          para una necesidad especial. Cuando haces helados con tus amigos, utilizas
          un proceso similar a los parámetros en un programa de computadora.
      3:
        image: notes/C4_unplugged_parameters_3.png
        text: El disco de helado de vainilla puede ser el mismo para cada helado pero
          cuando pides a tus amigos que agreguen dos coberturas, usted podría conseguir
          un montón de combinaciones diferentes. Cobertura es el nombre de función
          pero cada tipo de cobertura es un parámetro. Funciones y parámetros trabajan
          juntos para hacer grandes programas de computación y grandes copas heladas
          también.
    C4_unplugged_variables:
      1:
        image: notes/C4_unplugged_variables_1.png
        text: Esta lección se llama variables en sobres. Vamos a aprender cómo podemos
          construir oraciones cuando todavía nos faltan pedazos de información. La
          mayoría de nosotros ya está familiarizado con la idea de rellenar un espacio
          en blanco. Lo hacemos cuando estamos poniendo nuestro nombre en nuestra
          tarea. A veces hay más de una palabra que necesitas llenar y en ese caso,
          le damos un espacio en blanco para saber cual pieza de informacion va ahi.
      2:
        image: notes/C4_unplugged_variables_2.png
        text: Las variables son marcadores de posición para piezas de información
          que puede cambiar. Usando una variable para la información que falta, podemos
          seguir trabajando en lo que estabamos haciendo y dejar a que otra persona
          complete la información que falta más adelante. En software, utilizamos
          mucho las variables. Utilizamos variables como marcadores de posición para
          nombre, dirección de correo electrónico e incluso nombre de usuario. De
          esa manera le damos saber al programa donde esos detalles aparecerán después
          de que el usuario los rellene. Utilizamos variables todo el tiempo en nuestro
          trabajo.
      3:
        image: notes/C4_unplugged_variables_3.png
        text: Cualquier momento que necesites almacenar un dato para después, utilizamos
          una variable. Supongamos que tenemos que contar el número de veces que el
          usuario a puesto un mensaje en Tweeter. Cada vez que el usuario tweets,
          agregaremos uno para ese número y cada vez que el usuario elimina un tweet,
          disminuiremos ese número de uno. Cualquier momento que necesitemos saber
          la cantidad de veces que el usuario a mandado un Twitte, sólo veremos en
          esa variable.
    C4_variables_artist:
      1:
        image: notes/C4_variables_artist_1.png
        text: Una variable es un contenedor que puede almacenar un valor. Cuando utilizas
          esa variable en un algoritmo, abre el contenedor y mira el valor dentro.
          Esto te permite escribir algoritmos inteligentes que se comportan diferentemente
          dependiendo del valor almacenado en la variable.
      2:
        image: notes/C4_variables_artist_2.png
        text: Por ejemplo, si querias escribir un algoritmo para decir Feliz cumpleaños,
          ya tienes 10 años! a mi hermanito, eso es grandioso pero cuando lo ejecute
          el año que viene quiero decir, Feliz cumpleaños, ya tienes 11 años! Podría
          crear una variable llamada edad para que guarde la edad de mi hermano y
          escribir mi algoritmo para decir Feliz cumpleaños, ya tienes 'edad'. Porque
          la variable puede cambiar, cada año puedo actualizar la variable 'edad'
          para igualar 'edad' más 1.
      3:
        image: notes/C4_variables_artist_3.png
        text: En este rompecabezas, vamos a utilizar una variable que pondrá la longitud
          de la línea que dibuja nuestro artista. Más tarde en nuestro código, el
          bloque de avanza verá en esa variable de longitud para ver qué valor se
          ha establecido en.
    C4_variables_playlab:
      1:
        image: notes/C4_variables_playlab_1.png
        text: Una variable es un contenedor que puede almacenar un valor. Cuando utilizas
          esa variable en un algoritmo, abre el contenedor y mira el valor dentro.
          Esto te permite escribir algoritmos inteligentes que se comportan diferentemente
          dependiendo del valor almacenado en la variable.
      2:
        image: notes/C4_variables_playlab_2.png
        text: Ahora vas a probar playlab donde te dan diferentes juegos y puedes cambiar
          los valores de las variables como velocidad, altura, puntuación, con el
          fin de cambiar el juego. No tienes que cambiar el algoritmo del juego para
          cambiar cómo juega, sólo la variable.
      3:
        image: notes/C4_variables_playlab_3.png
        text: En mi trabajo para Kindle y en X-ray para libros, aplicamos las variables
          de diversas maneras. Una forma que puedes utilizar una variable es almacenar
          los números de página de un libro. Un usuario puede aumentar y disminuir
          el tamaño de la fuente en una página. Basado en el tamaño de fuente, puede
          cambiar el número de páginas en el libro. Podemos ajustarlo con el almacenamiento
          de número de páginas en la variable.
    infinity_playlab_events:
      1:
        image: notes/infinity_playlab_events_1.png
        text: Ahora vamos a aprender de algo que todos los programadores del juego
          utilizan cada día. Se llaman eventos. Un evento le indica a tu programa
          a escuchar cuando algo sucede. Y luego cuando lo hace, realiza una acción.
          Algunos ejemplos de eventos se escuchan por clic del ratón, un botón de
          flecha o un toque en la pantalla.
      2:
        image: notes/infinity_playlab_events_2.png
        text: Aquí, vamos a hacer Baymax moverse hasta tocar Hiro y bajar para tocar
          Rapunzel cuando el jugador utiliza las teclas de fechas de arriba/abajo
          o los botones de arriba/abajo. utilizaremos el bloque de flecha arriba y
          agregar el bloque de movimiento del actor arriba a el, cuando el jugador
          presiona la tecla de flecha hacia arriba, todo unido al bloque "cuando arriba
          la flecha" se ejecuta. Haremos lo mismo para hacer que Baymax se mueva hacia
          abajo. Paso a paso, tu juego es cada vez más interactivo.
    infinity_playlab_intro:
      1:
        image: notes/infinity_playlab_intro_1.png
        text: Entonces ¿en qué grado estás? Segundo. Décimo grado. Primer grado. Yo
          estaba en octavo grado cuando aprendí a programar. Obtuve mi primera computadora
          cuando estaba en sexto grado. Lo que me facina es ser capaz de solucionar
          los problemas de la gente. Puedes expresarte, puedes construir cosas de
          una idea.
      2:
        image: notes/infinity_playlab_intro_2.png
        text: La ciencia de la computación es la base para muchas de las cosas que
          profesionales y estudiantes universitarios harán en los próximos veinte
          o treinta años. Me gusta la programación porque me gusta ayudar a la gente.
          Tengo la oportunidad de construir algo que va a facilitar la vida de las
          personas. Creo que es lo más cercano que tenemos a un superpoder. Empezar
          es la parte más importante. Yo soy un principiante y quiero que aprendas
          conmigo.
      3:
        image: notes/infinity_playlab_intro_3.png
        text: Soy John Vechey, y soy uno de los co-fundadores de PopCap Games. Hacemos
          Juegos como Plants vs Zombies, Bejeweled y Peggle. Mucho sobre los juegos
          no es lo perfecto de su código, no es lo perfecto su arte, se trata de cómo
          se siente y qué divertido es. Sólo puede obtener esa sensación al probarlo,
          aprendiendo y adaptando e iterando en sus propias habilidades de hacer juegos.
      4:
        image: notes/infinity_playlab_intro_4.png
        text: ¿Tienes un juego de video favorito? Bueno, vamos a dar un paso hacia
          la creación de juegos usando Play Lab. Los buenos juegos tienen una historia
          y cada historia tiene actores. Actores hacen cosas como hablar, moverse
          e interactuar con los demás. Tal vez incluso anotan puntos basado en las
          reglas del juego. Hoy vamos a aprender cómo hacer todas estas cosas, una
          por una, con personajes de Disney como Ana, Elsa, Hiro, Baymax y Rapunzel.
          Construiremos un juego desde cero que puedes compartir y reproducir en un
          teléfono.
      5:
        image: notes/infinity_playlab_intro_5.png
        text: La pantalla se divide en tres partes principales. Sobre la izquierda
          está el espacio del juego, donde se ejecutará el programa. Las instrucciones
          para cada nivel se escriben a continuación. Esta área central es la caja
          de herramientas, y cada uno de estos bloques es un pedazo de código. El
          espacio en blanco a la derecha se llama el espacio de trabajo, y esto es
          donde construimos nuestro programa.
      6:
        image: notes/infinity_playlab_intro_6.png
        text: Para empezar, necesitarás vincular tus bloques en el bloque naranja
          "cuando se ejecuta". Puedes vincular varios bloques juntos arrastrándolos
          hacia fuera hasta que veas el contorno amarillo, y luego se juntarán. En
          este primer rompecabezas, Hiro es Actor 1 y Baymax es Actor 2. Necesitamos
          mover a Hiro para llegar a Baymax arrastrando el bloque "mover a la derecha"
          fuera y vinculándolo al bloque "cuando se ejecuta". Una vez que tengas tus
          bloques en lugar, presione el botón "Ejecutar" para ver lo que programaste.
      7:
        image: notes/infinity_playlab_intro_7.png
        text: Cominza y al final podrás crear tu propio juego con estos increíbles
          actores que pueden interactuar, obtener puntos, tiro de microbots, cerezas,
          ollas, destellos y hielo... y se desvanecen entre sí. Todo depende de ti!
    infinity_playlab_repeat_forever:
      1:
        image: notes/infinity_playlab_repeat_forever_1.png
        text: ¿Te imaginas si tuvieras que repetir algo por siempre y para siempre?
          Esperemos que nunca tengas que porque los equipos son realmente buenos en
          repetir cosas. Este es el bloque de repetición por siempre. Cualquier cosa
          dentro de este bloque pasará por siempre en el juego.
      2:
        image: notes/infinity_playlab_repeat_forever_2.png
        text: Así que si queríamos un actor que haga algo repetidamente sin el jugador
          teniendo que hacer nada, pondremos esos bloques dentro del bloque de repetición
          por siempre. En el siguiente rompecabezas, nuestro objetivo es ayudar Anna
          a caminar hacia arriba y hacia abajo continuamente. Aprendiendo cómo funcionan
          los comandos de repetición te ahorrarán mucho tiempo despues que construyas
          tu propio juego.
    tutorial_puzzle_challenge:
      1:
        image: notes/tutorial_puzzle_challenge_1.png
        text: ¿Qué quieres ser cuando crezcas Olivia? Un astronauta. ¿Sabes qué es
          un programador de computadoras? Sí umm no. ¿Umm espera qué? No estoy realmente
          segura cómo explicar programación de computadoras es bastante simple. Es
          un conjunto de instrucciones como una receta, tienes que seguirlas paso
          a paso para obtener el resultado final que deseas.
      2:
        image: notes/tutorial_puzzle_challenge_2.png
        text: Puedo cambiar el número de píxeles, la longitud de la línea, utilizando
          este desplegable. ¿Cuánto de largo era otra vez? Puedes ver las instrucciones
          otra vez mirando abajo del boton de ejecutar. Aquí he usado el bloque de
          movimiento hacia adelante y voy a seleccionar 100 píxeles. Puedo borrar
          un bloque arrastrando a la caja de herramientas o al bote de basura. Regresemoslo.
      3:
        image: notes/tutorial_puzzle_challenge_3.png
        text: Ejecuta el código pulsando ejecutar. Bueno, eso no funcionó! Presionare
          reiniciar y averiguar que está mal. Puedes tratar un rompecabezas tantas
          veces como quieras y omitir rompecabezas y volver a ellos. Sólo asegúreate
          de hacer el mejor esfuerzo y no te rindas. Vamos a agregar otro movimiento
          hacia adelante. Todavía no funciona. Puedo colocar un bloque entre otros
          bloques.
      4:
        image: notes/tutorial_puzzle_challenge_4.png
        text: Tomemos un bloque de vuelta y colóquelo entre el movimiento avanza.
          Gire a la izquierda 45 grados. Vamos a ejecutarlo otra vez. Reiniciar, ejecutar,
          impresionante! Aquí hay otro rompecabezas. A veces te dan código de comienzo
          para completar. Aquí tengo que agregar las longitudes y grados correspondientes.
      5:
        image: notes/tutorial_puzzle_challenge_5.png
        text: A veces accidentalmente puede tirar a la basura el código de arranque.
          ¿Qué hacer entonces? Puede presionar limpiar rompecabezas y empezar de nuevo.
          Voy a arrastrar este bloque del número en las diferentes áreas de píxeles.
          Selecciona 100 píxeles, 45 para grados y 100 píxeles de nuevo. Impresionante!
          Aquí esta el código Studio de abeja. Necesito mover la abeja a cada flor
          y obtener el néctar.
      6:
        image: notes/tutorial_puzzle_challenge_6.png
        text: La primera flor es tres bloques lejos así que necesito tres movimiento
          hacia adelante. 1, 2, 3. Luego un obten néctar, después otro otener néctar.
          Bueno, eso no funcionó! Colocare otro avanzar entre los obtener néctares
          y ejecútarlo de nuevo. Yay, ¡ funciona! Acabas de aprender como usar el
          rompecabezas artista y abeja de código studio. Buena suerte en el reto de
          rompecabezas de código studio.
    unplug1:
      1:
        image: notes/unplug1_1.png
        text: ¿Qué quieres ser cuando crezcas Olivia? Un astronauta. ¿Sabes qué es
          un programador de computadoras? Sí umm no. ¿Umm espera qué? No estoy realmente
          segura cómo explicar programación de computadoras es bastante simple. Es
          un conjunto de instrucciones como una receta, tienes que seguirlas paso
          a paso para obtener el resultado final que deseas.
      2:
        image: notes/unplug1_2.png
        text: Ciencias de la computación es una manera de impactar el mundo. Puede
          ser videos de música, puede ser juegos, detectar si o no alguien se relaciona
          con otra persona. Encontrar ya saber, amigos de las personas. Puedes hacer
          todo tipo de otras cosas locas que realmente salvan vidas. Tienes que tener
          un disco creo. Para mí es como un pincel. Yo creo que una gran programación
          no es tan diferencte de un gran arte.
      3:
        image: notes/unplug1_3.png
        text: Cuando por fin aprendí un poco de programación, esa pared en blanco
          resulto un montón de puertas y las abres y por supuesto entonces encontras
          que detrás de ellas hay otro pasillo lleno de un montón de puertas. La programación
          es fácil y divertida. Puede hacer cualquier cosa que tu mente quiera hacer.
          Finalmente comienzas abrir suficientes puertas que la luz entra. Para mí
          un programa acabado es como una estructura llena de luz. Todos los rincones
          estan iluminados. Un numero de personas que puedes tocar y con las que puedes
          interactuar es algo que el mundo nunca antes habia visto.
      4:
        image: notes/unplug1_4.png
        text: Nuestra primera lección de estas series es acerca de Ciencias de la
          computación, lo que hace un informático y cómo puedes ser más responsable
          en el uso de tecnología. Es una lección muy importante pero es mucho texto.
          Al final, llegas a hacer tu propia codificación modificada usando tus iniciales.
          Es una divertida actividad y es muy enriquesida ya que binario es una de
          esas cosas que se siente muy técnica pero una vez que lo entiendas, es como
          si tu hablaras un idioma secreto.
    unplug2:
      1:
        image: notes/unplug2_1.png
        text: La lección de pensamiento computacional pretende enseñarte a llevar
          un problema difícil y desglosarlo en varios problemas más simples. El objetivo
          de esta lección es escribir un conjunto de instrucciones para que alguien
          pueda las pueda seguir y dibujar uno de los monstruos incluidos en el plan
          de la lección.
      2:
        image: notes/unplug2_2.png
        text: 'Los estudiantes formarán grupos para escribir instrucciones y luego
          las cambiarán con otro grupo que tendrá que dibujar el monstruo. Grupos
          escribirán las instrucciones usando los cuatro pasos del pensamiento computacional:
          descomposición, patrón de ubicación, abstracción y algoritmos.'
      3:
        image: notes/unplug2_3.png
        text: Primeros grupos descomponen la tarea que significa hacer un plan de
          juego. Entonces buscaran patrones entre todos los monstruos en el catálogo.
          Cuando se encuentren diferencias entre los monstruos, le quitarán o eliminarán
          esos datos. Por ejemplo, un monstruo en el catálogo tiene ojos de vegitas
          y otro tiene ojos spritem. Pero ambos tienen ojos entonces podemos escribir
          una línea que diga el monstruo que tiene los ojos en blanco.
      4:
        image: notes/unplug2_4.png
        text: Asi los estudiantes serán capaces de escribir un conjunto de instrucciones,
          llamar a un algoritmo, que enliste las partes de los monstruos con espacios
          en blanco para lo que los estilos deberían ser. Este es el conjunto de instrucciones
          que pasarán a otros estudiantes para crear su propio monstruo.
    unplug3:
      1:
        image: notes/unplug3_1.png
        text: En papel gráfico programación, ayudamos a explicar cómo trabaja la codificación
          tratando de ayudar a las personas a recrear dibujos usando únicamente flechas
          y garabatos. Una persona se le da un pequeño dibujo en papel gráfico y necesitan
          ir a través usando sólo flechas específicas y tratar de describir cómo recrear
          ese dibujo.
      2:
        image: notes/unplug3_2.png
        text: 'En esta actividad, símbolos que sólo se pueden utilizar son estos:
          mueve un cuadrado hacia delante, un cuadrado atrás, mueve un cuadrado hacia
          arriba, mueve un cuadrado hacia abajo, cambia al siguiente color y rellena
          tu cuadrado con color. Una vez que tenemos eso codificado, podemos entregarlo
          a otra persona que pueda leer el código y probar y recrear la imagen.'
    unplug4:
      1:
        image: notes/unplug4_1.png
        text: En papel gráfico programación, ayudamos a explicar cómo trabaja la codificación
          tratando de ayudar a las personas a recrear dibujos usando únicamente flechas
          y garabatos. Una persona se le da un pequeño dibujo en papel gráfico y necesitan
          ir a través usando sólo flechas específicas y tratar de describir cómo recrear
          ese dibujo.
      2:
        image: notes/unplug4_2.png
        text: En la segunda mitad de la actividad, le pedimos a los estudiantes de
          cuántas maneras diferentes puede doblar un pedazo de papel para crear dieciséis
          rectángulos idénticos. Luego comentaras cuantas múltiples soluciones pueden
          conducir al mismo resultado final y por qué algunas soluciones son mejores
          en ciertas situaciones.
    unplug5:
      1:
        image: notes/unplug5_1.png
        text: En papel gráfico programación, ayudamos a explicar cómo trabaja la codificación
          tratando de ayudar a las personas a recrear dibujos usando únicamente flechas
          y garabatos. Una persona se le da un pequeño dibujo en papel gráfico y necesitan
          ir a través usando sólo flechas específicas y tratar de describir cómo recrear
          ese dibujo.
      2:
        image: notes/unplug5_2.png
        text: En la segunda mitad de la actividad, le pedimos a los estudiantes de
          cuántas maneras diferentes puede doblar un pedazo de papel para crear dieciséis
          rectángulos idénticos. Luego comentaras cuantas múltiples soluciones pueden
          conducir al mismo resultado final y por qué algunas soluciones son mejores
          en ciertas situaciones.
    unplug6:
      1:
        image: notes/unplug6_1.png
        text: Esta actividad se llama codificación con tarjetas y es ideal para cualquier
          edad. Como aprendiste con la sentencia "Si" en lecciones anteriores, durante
          Blockly, sentencias "Si" tienen algo de ellos tienes que evaluar para saber
          si es verdadero o falso. Esa es la condicional y puede ser utilizada de
          muchas maneras diferentes.
      2:
        image: notes/unplug6_2.png
        text: Tomamos ventaja de que mediante la creación de programas en papel que
          ejecutas toman aleatorios cartas de juego. Podrías tener una sentencia de
          "Si" que dice algo como "Si" la carta que tomas es mayor que 8, obtendrás
          un punto. De lo contrario, tu oponente obtiene un punto. Puedes hacerlo
          tan simple o tan complicado como tu quieras.
    unplug7:
      1:
        image: notes/unplug7_1.png
        text: ¿Sabes cómo cuando buscas la letra de una canción y definen el coro
          al principio y luego por el resto de la canción, solo te regresan al coro?
          Asi es cómo llamas a una función.
      2:
        image: notes/unplug7_2.png
        text: En esta lección, definimos el coro al principio de nuestra canción y
          luego cantamos nuestra canción y regresamos y notamos que la clase no canta
          la palabra del coro, automáticamente va a la cima donde definimos el coro
          y cantar eso. Utilizamos eso como una gran introducción a cómo entender
          lo que está haciendo un programa cuando se define y llama a una función.
      3:
        image: notes/unplug7_3.png
        text: Utilizamos canciones conocidas como Old Macdonald para hablar de cómo
          un coro se llama una y otra vez y cómo a veces un coro puede cambiar. Cuando
          tienes una canción como Old Macdonald, donde cambian ciertas palabras, es
          un gran lugar para introducir la idea de los parámetros. Pasando ciertas
          palabras para que puedas enviar información adicional a tu función. Una
          vez que estamos seguros de que todos lo entienden, Puedes tomar tus propias
          canciones familiares y separarlas tu mismo. Ve si pueden descubrirlo juntos.
    unplug8:
      1:
        image: notes/unplug8_1.png
        text: Nuestra lección de abstracción utiliza un concepto familiar de madlibs,
          donde básicamente inserta un espacio en blanco en una historia que puede
          ser llenada con muchas palabras diferentes. Tomamos esa idea, desafiando
          niños que hagan sus propias palabras para sus propias historias y realmente
          explicar el concepto de abstracción.
      2:
        image: notes/unplug8_2.png
        text: Se trata de funciones y cómo puedes tener una función, como en Old Macdonald,
          donde tienes una estructura para tu coro pero tienes algo pequeño que cambia
          y quitas esa cosita que cambia y puede llenarlo con tu propia palabra cada
          vez. Pero a veces tienes tres palabras que cambian y entonces los rellenanas
          con tres parámetros, eso es todavía aun bastante útil.
      3:
        image: notes/unplug8_3.png
        text: Puedes tener una función que se encarga de un montón de problemas diferentes.
          Muchas veces la gente escribirá funciones separadas para todos los problemas,
          sin darse cuenta que hay sólo una pequeña diferencia. Si sólo podrían encontrar
          una forma de manejar esa pequeña diferencia, podría simplemente reutilizar
          una función una y otra vez, en lugar de tener 14 funciones diferentes.
    unplug9:
      1:
        image: notes/unplug9_1.png
        text: Programación Relay es una lección muy divertida que tiene más que sólo
          ciencias de la computación. Alguas veces todos se sienten un poquito impacientes
          y quieres mantenerlos en pie. Esta es una gran manera de agregar algo de
          aliento a las ciencias de computación.
      2:
        image: notes/unplug9_2.png
        text: Separas a todos en dos grupos donde esten parados en una línea y ejecuten
          estilo de transmisión. La primera persona de cada grupo corre al otro lado
          de la habitación donde tienes un dibujo en papel graficó y un pedazo en
          blanco de papel esperandolos. Ellos escriben el primer paso para crear esa
          imagen, regresan a su línea, y etiquetan al siguiente jugador quien va a
          escribir el siguiente paso.
      3:
        image: notes/unplug9_3.png
        text: Esta es una gran manera de entender la idea de depuración, necesidad
          de corregir tu propio trabajo y necesidad de revisar el trabajo que la gente
          hace antes de ti. Rápidamente entenderás lo importante que es tener cuidado
          en tu codificación cuando todo el equipo está dependiendo de ti.
    unplug10:
      1:
        image: notes/unplug10_1.png
        text: Esta actividad explica de una manera fácil de entender cómo trabaja
          el internet. Explicamos en términos simples toda la terminología que necesitarás
          para que los estudiantes pueden simular mensajes que se transmiten, como
          un correo electrónico.
      2:
        image: notes/unplug10_2.png
        text: Estudiantes transmitirán mensajes mientras que pretenden ser uno de
          los tres métodos de transmisión. Conexión inalámbrica a internet, DSL o
          fibra óptica. Los estudiantes que representan el wi-fi tendrán que llevar
          el mensaje que están transmitiendo en su cabeza porque wi-fi es más probable
          que deje caer alguna información.
      3:
        image: notes/unplug10_3.png
        text: Los estudiantes pretendiendo ser DSL o cable llevarán el mensaje en
          la parte posterior de su mano, donde son ligeramente menos propensas a soltar
          información. Y los estudiantes que representan a fibra óptica lo llevarán
          con ambas manos. Esta actividad es una gran manera de entender algo que
          muchos de nosotros usamos todos los días.
    unplug11:
      1:
        image: notes/unplug11_1.png
        text: Así que ya es tiempo de dar un paso atrás y tomar una vistaso a todo
          lo que has hecho en los últimas diecinueve lecciones. Este es un buen momento
          de nombrar a los estudiantes que lo que han hecho es un gran logro. Que
          han aprendido más sobre las lecciones que la mayoría de los adultos sabe
          sobre ciencias de la computación.
      2:
        image: notes/unplug11_2.png
        text: Comenta en clase o en pequeños grupos acerca de sus lecciones favoritas.
          Una vez que viste todo lo que has aprendido, esto es donde la creatividad
          de sus estudiantes puede brillar. Dividelos en grupos y que hagan una lección
          sin internet por si mismos. Asignar a cada grupo un concepto clave como
          funciones o algoritmos y tenen a mano un mucho material de arte para que
          lo usen. Que cada grupo presente su nueva actividad sin internet o incluso
          establece otro día para hacer algunas de las actividades que el estudiante
          creo.
      3:
        image: notes/unplug11_3.png
        text: Desde todos lados aquí en Code.org, esperamos que hayas tenido MUCHA
          diversión durante este curso. Y si tu sueño es crear la mejor aplicación,
          utiliza la programación para ayudar a curar enfermedades, o sólo deseas
          ser un solucionador de problemas estelar, este curso fue el primer paso
          para lograr esos sueños.
    starwars_intro:
      1:
        image: notes/starwars_intro_1.JPG
        text: Hola, soy Kathleen Kennedy, la productora de Star Wars, El Despertar
          de La Fuerza. Hoy trabajarás con una de nuestras estrellas, el BB-8. BB-8
          es un androide esférico. Todo lo que hace, cada movimiento que ejecuta,
          es controlado por un programa de ordenador. La informática tiene impacto
          en cualquier industria, desde el marketing hasta la atención sanitaria,
          o en una película. De hecho, cientos de ingenieros informáticos trabajaron
          conjuntamente para hacer una película como El Despertar de La Fuerza.
      2:
        image: notes/starwars_intro_2.JPG
        text: Hola, soy Rachel Rose. Soy una ingeniera de I+D en ILM y lidero el equipo
          de desarrollo de criaturas y animación. En El Despertar de la Fuerza, soy
          la responsable de ayudar a los actistas a desarrollar plataformas, que son
          las partes de lso personajes que se mueves y que permiten que parezcan muy
          creibles en una galaxia lejana, muy lejana.
      3:
        image: notes/starwars_intro_3.JPG
        text: En la siguiente hora, vamos a construir nuestro propio juego de Star
          Wars que te enseñará los conceptos basicos de la programación. Normalmente,
          la programación es totalmente textual, pero nosotros utilizaremos boques
          de tal manera que podremos arrastrarlos y soltarlos para escribir programas.
          Bajo esta apariencia, nosotros también estaremos creando código. Despues
          de que pruebes los conceptos básicos, cambiaremos a JavaScript, uno de los
          lenguajes de programación más populares en la web.
      4:
        image: notes/starwars_intro_4.JPG
        text: Para empezar, vamos a trabajar con Rey para programar a BB-8 para que
          se mueva para recoger todos los trozos de chatarra. Tu pantalla esta dividida
          en tres partes. La de la izquierda es el espacio del juego Star Wars donde
          se ejecutará el código. Las instrucciones para cada nivel se escriben debajo
          del espacio de juego.
      5:
        image: notes/starwars_intro_5.JPG
        text: La parte intermedia es la caja de herramientas y cada uno de estos bloques
          es un comando que BB-8 puede entender.
      6:
        image: notes/starwars_intro_6.JPG
        text: El espacio blanco de la derecha se llama espacio de trabajo y es donde
          vamos a construir nuestro programa.
      7:
        image: notes/starwars_intro_7.JPG
        text: Si arrastro el bloque moveLeft(); a nuestro espacio de trabajo y pulso
          ejecutar, qué pasa? BB-8 se mueve un bloque en la cuadrícula.
      8:
        image: notes/starwars_intro_8.JPG
        text: Y que pasa si quiero que BB-8 haga algo después del bloque moveLeft();?
          Puedo añadir otro bloque a nuestro programa. Voy a elegir el bloque moveUp();
          y lo arrastraré bajo mi bloque moveLeft(); hasta que se destaque. Entonces
          lo soltaré y los dos bloques se engancharán juntos.
      9:
        image: notes/starwars_intro_9.JPG
        text: Cuando pulse ejecutar otra vez, BB-8 realizará las acciones que he apilado
          de arriba a abajo en nuestro espacio de trabajo. Si quieres eliminar un
          bloque en algún momento, simplemente elimínalo del montón y devuelvelo arrastrándolo
          a la caja de herramientas.
      10:
        image: notes/starwars_intro_10.JPG
        text: Después de pulsar ejecutar, siempre puedes pulsar el botón de reiniciar
          para devolver a BB-8 al principio. Ahora, vamos a probar!
    starwars_typing:
      1:
        image: notes/starwars_typing_1.JPG
        text: Dentro de los boques que hemos estado utilizando hay comandos JavaScript.
          JavaScript es hoy en día el lenguaje de programación más popular para los
          desarrolladores profesionales. Los bloques son una magnífica forma de empezar
          a aprender a escribir código y de hecho, las mejore universidades como Harvard
          y Berkeley empiezan a enseñar de esta forma. Pero una vez que aprendemos
          los conceptos básicos, los ingenieros escribimos código teclenado texto
          ya que de esta forma programamos más rápido.
      2:
        image: notes/starwars_typing_2.JPG
        text: Podemos teclear cientos de comandos sin tener que encontrarlos en la
          caja d eherramientas y arrastrarlos Dado que estás aprendiendo, escribir
          texto puede ser más lento al principio, pero queremos que lo intentes.
      3:
        image: notes/starwars_typing_3.JPG
        text: En la esquina superior derecha de tu espacio de trbajo, puedes pulsar
          el boton de mostrar texto de cualquier puzzle para cambiar de mostrar bloques
          a introducir código como texto.
      4:
        image: notes/starwars_typing_4.JPG
        text: En la próxima lección, empezaremos en modo de teclear texto. Aún podrás
          arrastrar el bloque desde la caja de herramientas o bien podrás teclear
          el nombre del comando. Cuando empiezas a teclear, verás que los nombres
          de los posibles comandos aparecen debajo de dónde estés tecleando. En vez
          de teclear el nombre completo del comando, puedes seleccionar uno de ellos
          para ir más rápido. En mi trabajo, uso esta característica de autocompletar
          continuamente cuando escribo código.
      5:
        image: notes/starwars_typing_5.JPG
        text: Cuando escribas código, el ordenador necesita que seas muy preciso.
          Deberás teclear y usar las mayúsculas en el nombre del comando exactamente,
          incluyendo los paréntesis y el punto y coma. Aunque sólo cometas un pequeño
          error, BB-8 no podrá entender el código y no será capaz de moverse.
      6:
        image: notes/starwars_typing_6.JPG
        text: Cuando cometas un error en la línea, el editor lo marcará para que puedas
          intentar cambiar el texto para corregirlo.
      7:
        image: notes/starwars_typing_7.JPG
        text: Si te atascas, siempre podrás comenzar de nuevo con el botón de recomenzar
          y también podrás volver al modo de bloques en cualquier momento pulsando
          en la esquina superior derecha. Ok, vamos a probar a escribir! Y si cometes
          errores, no te preocupes. Todo el mundo necesita varios intentos para hacerlo
          correctamente.
    starwars_events:
      1:
        image: notes/starwars_events_1.JPG
        text: Hola, me llamo Charita Carter. Soy una productora creativa en Wlat Disney
          Imagineering. Mi trabajo es liderar los equipos que crean las atracciones
          que nuestros visitantes disfrutan. Siempre estamos buscanfo formas de mejorar
          y proponer mejores experiencias a nuestros visitantes y la tecnología está
          el centro de todo ello.
      2:
        image: notes/starwars_events_2.JPG
        text: Enhorabuena, lo conseguiste! Has programado a BB-8. Ahora creo que estmaos
          listos para un trabajo más duro. Vamos a ello. Ahora que has aprendido los
          fundamentos de la programación, vamos a volver atrás para construir tu propio
          juego, protagonizado por R2-D2 y C3PO.
      3:
        image: notes/starwars_events_3.JPG
        text: 'Para hacer un juego, necesitamos aprender algunas cosas sobre algo
          que los programadores de juegos utilizan a diario: los eventos. Los eventos
          le indican a tu programa que escuche o espere hasta el momento en que pase
          algo y que cuando ésto ocurre, realice una acción.'
      4:
        image: notes/starwars_events_4.JPG
        text: Algunos ejemplos de eventos son esperar una pulsación del ratón, de
          una tecla de flecha o un toque en la pantalla.
      5:
        image: notes/starwars_events_5.JPG
        text: Aquí vamos a hacer que R2-D2 se mueva para entregar un mensaje a un
          piloto rebelde y después se mueva hacia abajo a donde está el otro piloto
          rebelde. Utilizaremos eventos para hacer que se mueva. Cuando el jugador
          use las teclas de flecha attiba/abajo, o los botones assiba/abajo.
      6:
        image: notes/starwars_events_6.JPG
        text: Usamos el bloque de evento whenUp() y le añadimos el bloque goUp().
          Cuando el jugador pulse la tecla de flecha hacia arriba, el código asociado
          al bloque whenUp() se ejecuta. Y haremos lo mismo para para mover a R2-D2
          hacia abajo.
      7:
        image: notes/starwars_events_7.JPG
        text: Para conseguirlo utilizaremos un commando que se llama whenUp(). Cuando
          arrastramos el comando desde la caja de herramientas, verás que empieza
          y acaba con una llave en vez de un punto y coma. Esto nos proporciona espacio
          para poner comandos dentro. Cada comando que pongamos entre las llaves se
          ejecutará cuando el jugador apriete la flecha arriba.
      8:
        image: notes/starwars_events_8.JPG
        text: Queremos que R2-D2 vaya hacia arriba, por lo que pondremos el bloque
          goUp(); dentro del comando. Y haremos lo mismo para hacer que R2-D2 vaya
          hacia abajo.
      9:
        image: notes/starwars_events_9.JPG
        text: Ahora, en vez de escribir todo el código para controlar nuestro androide
          a priori, podemos dejar que R2-D2 reaccione a los eventos de pulsación de
          botón que lo mueven por la pantalla. Paso a paso, tu juego se va haciendo
          cada vez más interactivo.
    starwars_congrats:
      1:
        image: notes/starwars_congrats_1.JPG
        text: Hola, mi nombre es Alice y me encargo de los equipos de producto e ingenería
          aquí en Code.org y he trabajado en este tutorial que estás siguiendo ahora.
      2:
        image: notes/starwars_congrats_2.JPG
        text: Acabas de terminar el último nivel. Enhorabuena! Has aprendido todo
          lo que necesitas saber para hacer tu propio juego de Star Wars. Ya no hay
          más instrucciones, ni puzzles que resolver. Puedes hacer tu propio juego
          y elegir lo que hará. Una cosa más, has desbloqueado sonidos nuevos y nuevos
          comandos para hacer aún más cosas.
      3:
        image: notes/starwars_congrats_3.JPG
        text: '[alumnos hablando] Así que nosotors hicimos un juego en el que obtienes
          puntos cuando obtienes cerdos inflables. La idea es que cada vez que obtienes
          un cerdo inflable aparece un soldado de asalto. En realidad toda la pantalla
          está mmena de cerdos inflables y cuando tocas 10.000, ganas.'
      4:
        image: notes/starwars_congrats_4.JPG
        text: Направихме игра в която неможете да губите печелите точки от всичко.
          В моята програма обърнах бутоните, когато натиснете горе, вашият герой отива
          долу, като натиснете дясно, той отива на ляво. Трудно е! Понякога това е
          предимство ако сте създателя на играта. Правилно ли го разбрах? Уау!
      5:
        image: notes/starwars_congrats_5.JPG
        text: След като сте направите играта, изберете сподели за да я споделите с
          приятели или да играете на телефон. Забавлявайте се!
    starwars_blocks_intro:
      1:
        image: notes/starwars_blocks_intro_1.JPG
        text: 'Здравейте! Аз съм Катлийн Кенеди Продуцент на Междузвездни Войни: Силата
          се Пробужда. Днес ще работите с една от нашите звезди, ББ-8, който е сферичен
          дроид. Всичко което прави и всяко негово движение се контролира от софтуер.
          Компютърните науки оказват влияние във всяка една сфера от маркетинг до
          медицина и филмо-производство. Всъщност хиляди Инженери работят заедно за
          да създадават филми като Силата се Пробужда.'
      2:
        image: notes/starwars_blocks_intro_2.JPG
        text: Hola, soy Rachel Rose. Soy una ingeniera de I+D en ILM y lidero el equipo
          de desarrollo de criaturas y animación. En El Despertar de la Fuerza, soy
          la responsable de ayudar a los actistas a desarrollar plataformas, que son
          las partes de lso personajes que se mueves y que permiten que parezcan muy
          creibles en una galaxia lejana, muy lejana.
      3:
        image: notes/starwars_blocks_intro_3.JPG
        text: En la siguiente hora, vamos a construir nuestro propio juego de Star
          Wars que te enseñará los conceptos basicos de la programación. Normalmente,
          la programación es totalmente textual, pero nosotros utilizaremos boques
          de tal manera que podremos arrastrarlos y soltarlos para escribir programas.
          Para empezar, vamos a trabajar con Rey para programar que BB-8 se mueva
          para recoger todos los trozos de chatarra.
      4:
        image: notes/starwars_blocks_intro_4.JPG
        text: Tu pantalla esta dividida en tres partes. La de la izquierda es el espacio
          del juego Star Wars donde se ejecutará el código. Las instrucciones para
          cada nivel se escriben debajo del espacio de juego.
      5:
        image: notes/starwars_blocks_intro_5.JPG
        text: La parte intermedia es la caja de herramientas y cada uno de estos bloques
          es un comando que BB-8 puede entender.
      6:
        image: notes/starwars_blocks_intro_6.JPG
        text: El espacio blanco de la derecha se llama espacio de trabajo y ahí es
          donde construiremos nuestro programa.
      7:
        image: notes/starwars_blocks_intro_7.JPG
        text: Si arrastro el bloque moveLeft(); a nuestro espacio de trabajo, qué
          pasará? BB-8 se mueve un bloque a la izquierda en la cuadrícula.
      8:
        image: notes/starwars_blocks_intro_8.JPG
        text: Y que pasa si quiero que BB-8 haga algo después del bloque moveLeft();?
          Puedo añadir otro bloque a nuestro programa. Voy a elegir el bloque moveUp();
          y lo arrastraré bajo mi bloque moveLeft(); hasta que se destaque. Entonces
          lo soltaré y los dos bloques se engancharán juntos. Cuando pulse ejecutar
          otra vez, BB-8 realizará las acciones que he apilado de arriba a abajo en
          nuestro espacio de trabajo.
      9:
        image: notes/starwars_blocks_intro_9.JPG
        text: Si quieres eliminar un bloque en algún momento, simplemente elimínalo
          del montón y devuelvelo arrastrándolo a la caja de herramientas.
      10:
        image: notes/starwars_blocks_intro_10.JPG
        text: Después de pulsar ejecutar, siempre puedes pulsar el botón de reiniciar
          para devolver a BB-8 al principio. Ahora, vamos a probar!
    starwars_blocks_events:
      1:
        image: notes/starwars_blocks_events_1.JPG
        text: Hola, me llamo Charita Carter. Soy una productora creativa en Wlat Disney
          Imagineering. Mi trabajo es liderar los equipos que crean las atracciones
          que nuestros visitantes disfrutan. Siempre estamos buscanfo formas de mejorar
          y proponer mejores experiencias a nuestros visitantes y la tecnología está
          el centro de todo ello.
      2:
        image: notes/starwars_blocks_events_2.JPG
        text: Enhorabuena, lo conseguiste! Has programado a BB-8. Ahora creo que estmaos
          listos para un trabajo más duro. Vamos a ello. Ahora que has aprendido los
          fundamentos de la programación, vamos a volver atrás para construir tu propio
          juego, protagonizado por R2-D2 y C3PO.
      3:
        image: notes/starwars_blocks_events_3.JPG
        text: 'Para hacer un juego, necesitamos aprender algunas cosas sobre algo
          que los programadores de juegos utilizan a diario: los eventos. Los eventos
          le indican a tu programa que escuche o espere hasta el momento en que pase
          algo y que cuando ésto ocurre, realice una acción.'
      4:
        image: notes/starwars_blocks_events_4.JPG
        text: Algunos ejemplos de eventos son esperar una pulsación del ratón, de
          una tecla de flecha o un toque en la pantalla.
      5:
        image: notes/starwars_blocks_events_5.JPG
        text: Aquí vamos a hacer que R2-D2 se mueva para entregar un mensaje a un
          piloto rebelde y después se mueva hacia abajo a donde está el otro piloto
          rebelde. Utilizaremos eventos para hacer que se mueva. Cuando el jugador
          use las teclas de flecha attiba/abajo, o los botones assiba/abajo.
      6:
        image: notes/starwars_blocks_events_6.JPG
        text: Usamos el bloque de evento whenUp() y le añadimos el bloque goUp().
          Cuando el jugador pulse la tecla de flecha hacia arriba, el código asociado
          al bloque whenUp() se ejecuta. Y haremos lo mismo para para mover a R2-D2
          hacia abajo. Ahora, en vez de escribir todo el código para controlar nuestro
          androide a priori, podemos dejar que R2-D2 reaccione a los eventos de pulsación
          de botón que lo mueven por la pantalla.
      7:
        image: notes/starwars_blocks_events_7.JPG
        text: Paso a paso, tu juego se va haciendo cada vez más interactivo.
    starwars_blocks_congrats:
      1:
        image: notes/starwars_blocks_congrats_1.JPG
        text: Hola, mi nombre es Alice y me encargo de los equipos de producto e ingenería
          aquí en Code.org y he trabajado en este tutorial que estás siguiendo ahora.
      2:
        image: notes/starwars_blocks_congrats_2.JPG
        text: Acabas de terminar el último nivel. Enhorabuena! Has aprendido todo
          lo que necesitas saber para hacer tu propio juego de Star Wars. Ya no hay
          más instrucciones, ni puzzles que resolver. Puedes hacer tu propio juego
          y elegir lo que hará. Una cosa más, has desbloqueado sonidos nuevos y nuevos
          comandos para hacer aún más cosas.
      3:
        image: notes/starwars_blocks_congrats_3.JPG
        text: '[alumnos hablando] Así que nosotors hicimos un juego en el que obtienes
          puntos cuando obtienes cerdos inflables. La idea es que cada vez que obtienes
          un cerdo inflable aparece un soldado de asalto. En realidad toda la pantalla
          está mmena de cerdos inflables y cuando tocas 10.000, ganas.'
      4:
        image: notes/starwars_blocks_congrats_4.JPG
        text: Направихме игра в която неможете да губите печелите точки от всичко.
          В моята програма обърнах бутоните, когато натиснете горе, вашият герой отива
          долу, като натиснете дясно, той отива на ляво. Трудно е! Понякога това е
          предимство ако сте създателя на играта. Правилно ли го разбрах? Уау!
      5:
        image: notes/starwars_blocks_congrats_5.JPG
        text: След като сте направите играта, изберете сподели за да я споделите с
          приятели или да играете на телефон. Забавлявайте се!
    mc_intro:
      1:
        image: notes/mc_intro_1.JPG
        text: 'Mi nombre es Jens Bergensten, pero todos me dicen Jeb. Soy el desarrollador
          principal en Minecraft aquí en Mojang, en Estocolmo. Comencé a programar
          a los 11 o 12 años porque quería hacer juegos. Un amigo de mi papá me dijo
          que para hacer juegos tenía que saber programar, de modo que así comencé.
          Me gusta diseñar y entender la arquitectura de las cosas. Eso es lo que
          más me gusta de Minecraft. '
      2:
        image: notes/mc_intro_2.JPG
        text: En la próxima hora, aprenderás los básicos de la ciencia de la computación
          programando a Alex o Steve para que se muevan en una pieza simulada de un
          mundo de Minecraft.
      3:
        image: notes/mc_intro_3.JPG
        text: 'La programación tradicional usa texto, pero hoy usaremos Blockly, un
          sistema que usa bloques que puedes arrastrar y colocar para escribir programas.
          En realidad, estarás creando código de JavaScript. '
      4:
        image: notes/mc_intro_4.JPG
        text: Los conceptos que aprenderás son los que usan los programadores a diario
          y son la base de la ciencia de la computación. En Mojang usamos estos mismos
          conceptos para Minecraft.
      5:
        image: notes/mc_intro_5.JPG
        text: Antes de comenzar, elegirás un personaje. Yo elegiré a Alex. Escribamos
          código para un programa que la ayude a moverse por la pantalla.
      6:
        image: notes/mc_intro_6.JPG
        text: 'La pantalla está dividida en tres partes. A la izquierda está el espacio
          de juego de Minecraft, donde se ejecutará tu programa. Las instrucciones
          para cada nivel están escritas más abajo. '
      7:
        image: notes/mc_intro_7.JPG
        text: 'Esta área en el medio es el cuadro de herramientas y cada uno de esos
          bloques es un comando que dirige las acciones de Alex. '
      8:
        image: notes/mc_intro_8.JPG
        text: 'El espacio blanco a la derecha se llama área de trabajo y es ahí donde
          construiremos el programa. '
      9:
        image: notes/mc_intro_9.JPG
        text: 'Si arrastras el bloque "ir hacia adelante" hacia el área de trabajo
          y haces clic en Ejecutar, ¿qué pasará? Alex irá hacia adelante un espacio
          en el recuadro. '
      10:
        image: notes/mc_intro_10.JPG
        text: '¿Y si quisiéramos que hiciera algo más luego de avanzar un espacio?
          Pues agregamos otro bloque al programa. Yo voy a elegir el bloque "girar
          a la derecha" y lo arrastraré debajo del bloque "ir hacia adelante" hasta
          que aparezca la línea anaranjada. Luego lo colocaré y los dos bloques encajarán.
          Si volvemos a pulsar Ejecutar, Alex realizará los comandos que están apilados
          de arriba hacia abajo en el espacio de trabajo. '
      11:
        image: notes/mc_intro_11.JPG
        text: 'Y si alguna vez quieres eliminar un bloque, arrástralo desde la pila
          hacia el cuadro de herramientas. '
      12:
        image: notes/mc_intro_12.JPG
        text: Para deshacer los cambios y volver al comienzo del nivel, usa el botón
          Comenzar de nuevo que está en la esquina superior derecha del área de trabajo.
          Y algo más, ¿ves el pequeño triángulo en algunos bloques? Si ves ese triángulo,
          significa que puedes elegir una opción diferente. ¡Comencemos a crear código!
    mc_repeat:
      1:
        image: notes/mc_repeat_1.JPG
        text: 'Soy Lydia Winters, la directora de marca de Mojang, donde hicimos un
          pequeño juego llamado Minecraft. '
      2:
        image: notes/mc_repeat_2.JPG
        text: 'Lo que más me gusta hacer en Minecraft es explorar. Me encanta aventurarme
          en cuevas y ver qué encuentro. No soy programadora, así que me entusiasman
          mucho las lecciones de Minecraft y la posibilidad de aprender a hacer código. '
      3:
        image: notes/mc_repeat_3.JPG
        text: 'El último nivel necesita muchos bloques de "ir hacia adelante". Sería
          más fácil si pudiéramos decirle a la computadora que ejecute el comando
          cuatro o cinco veces. Por suerte, las computadoras saben repetir comandos
          con bucles de repetición. '
      4:
        image: notes/mc_repeat_4.JPG
        text: 'Al construir Minecraft, usamos bucles de repetición para colocar todos
          los materiales iniciales que construirán un mundo nuevo. Son miles y miles
          de bloques. También usamos bucles para cosas más pequeñas, como para hacer
          que los pies de Alex vayan hacia atrás y adelante cuando camina. Los bucles
          de repetición son un instrumento poderoso en la programación. '
      5:
        image: notes/mc_repeat_5.JPG
        text: 'Se acerca la noche, de modo que en los próximos niveles construiremos
          una casa para estar seguros. Usaremos los bloques de repetición para facilitar
          la tarea. '
      6:
        image: notes/mc_repeat_6.JPG
        text: Para construir una pared, podemos decirle a Alex que se mueva hacia
          adelante y coloque un tablón cuatro veces o podemos decirle que vaya hacia
          adelante y coloque un tablón, y luego tomar este comando y usar el bloque
          de repetición para que lo haga varias veces. Ahora haremos clic en el bloque
          de repetición y le diremos cuántas veces queremos que realice la acción.
          Construyamos nuestra casa antes de que se haga de noche. ¡Diviértete!
    mc_if_statements:
      1:
        image: notes/mc_if_statements_1.JPG
        text: 'Ahora aprenderemos a usar declaraciones condicionales (con "si"), que
          son una parte fundamental para aprender a programar. Ayudan a la computadora
          a tomar decisiones. '
      2:
        image: notes/mc_if_statements_2.JPG
        text: Todas las omputadoras usan estas declaraciones, hasta mi teléfono. Por
          ejemplo, si desbloqueo mi teléfono, se ejecuta un código que dice que si
          introduzco la contraseña correcta, se puede desbloquear. De otro modo, mostrará
          un mensaje de error.
      3:
        image: notes/mc_if_statements_3.JPG
        text: 'Puedes usar declaraciones condicionales en tu código para que Steve
          y Alice reaccionen a lo que ven en el mundo. Por ejemplo, si tienen una
          roca adelante, pueden girar a la izquierda. O girar a la derecha si se encuentran
          con un árbol. '
      4:
        image: notes/mc_if_statements_4.JPG
        text: 'En este caso, no queremos que caigan en la lava. Es fácil planear con
          lava porque la vemos en la pantalla. ¿Pero qué hay de la lava que está debajo
          de la piedra? '
      5:
        image: notes/mc_if_statements_5.JPG
        text: Luego de minar una piedra, deberemos verificar que no hay lava para
          poder ir hacia adelante. Si hay lava, debemos colocar una piedra enfrente
          del personaje antes de ir hacia adelante para no sufrir daños. ¡Es hora
          de minar! Y recuerda usar declaraciones condicionales para mantenerte a
          salvo.
    mc_congrats_share:
      1:
        image: notes/mc_congrats_share_1.JPG
        text: '¡Felicitaciones! Aprendiste los bloques de construcción básicos de
          la ciencia de la informática. '
      2:
        image: notes/mc_congrats_share_2.JPG
        text: 'Ahora puedes usar estos bloques para construir tu propia creación.
          No hay más instrucciones que seguir ni puzles por resolver. Puedes construir
          lo que quieras, ya puedes elegir. '
      3:
        image: notes/mc_congrats_share_3.JPG
        text: '[estudiantes charlando] ¡Ahora es en serio! Tijera. Hice una L con
          antorchas. Yo hice una A con tablones de abedul. ¡Funcionó! ¡Funcionó! ¡Construimos
          una casa con lana! '
      4:
        image: notes/mc_congrats_share_4.JPG
        text: Cuando termines de construir tu creación, elige "compartir" para compartirla
          con tus amigos. ¡Diviértete!
    mc_congrats_no_share:
      1:
        image: notes/mc_congrats_no_share_1.JPG
        text: '¡Felicitaciones! Aprendiste los bloques de construcción básicos de
          la ciencia de la informática. '
      2:
        image: notes/mc_congrats_no_share_2.JPG
        text: 'Ahora puedes usar estos bloques para construir tu propia creación.
          No hay más instrucciones que seguir ni puzles por resolver. Puedes construir
          lo que quieras, ya puedes elegir. '
      3:
        image: notes/mc_congrats_no_share_3.JPG
        text: '[estudiantes charlando] ¡Ahora es en serio! Tijera. Hice una L con
          antorchas. Yo hice una A con tablones de abedul. ¡Funcionó! ¡Funcionó! ¡Construimos
          una casa con lana! '
      4:
        image: notes/mc_congrats_no_share_4.JPG
        text: Ahora puedes construir todo lo que quieras. ¡Diviértete!
    gumball_intro:
      1:
        image: notes/gumball_intro_1.JPG
        text: Si deseas hacer su propio juego, es muy fácil. Todo lo que necesita
          son unos pocos conceptos básicos de programación y puede empezar a jugar
          un juego que tu creaste.
      2:
        image: notes/gumball_intro_2.JPG
        text: ¿Tienes un video juego favorito? Vamos a dar un paso hacia la creación
          de juegos sólo asi en el LabDeJuego. Buenos juegos tienen una historia y
          cada historia tiene actores. Actores que hacen cosas como hablar, mover
          e interactúar con los demás. Tal vez incluso marcan puntos basado en las
          reglas del juego. Hoy aprenderemos cómo hacer todas estas cosas uno por
          uno con divertidos actores y luego construiremos un juego desde cero que
          puede compartir y reproducir en un teléfono.
      3:
        image: notes/gumball_intro_3.JPG
        text: Hoy aprenderemos cómo hacer todas estas cosas uno por uno con divertidos
          actores y luego construiremos un juego desde cero que puede ser compartido
          y reproducir en un teléfono.
      4:
        image: notes/gumball_intro_4.JPG
        text: La pantalla se divide en tres partes principales. A la izquierda es
          el espacio de juego donde se ejecutará el programa. Las instrucciones para
          cada nivel están escritas abajo.
      5:
        image: notes/gumball_intro_5.JPG
        text: En el área de en medio es de la caja de herramientas y cada uno de estos
          bloques es un pedazo de código.
      6:
        image: notes/gumball_intro_6.JPG
        text: El espacio en blanco a la derecha se llama espacio de trabajo y es aqui
          donde construimos nuestro programa.
      7:
        image: notes/gumball_intro_7.JPG
        text: Para empezar, necesitarás unir tus bloques al bloque naranja llamado
          "cuando se ejecuta". Puedes unir múltiples bloques arrastrándolos hacia
          fuera hasta que veas la línea amarilla, y luego encajarán todos a la vez.
      8:
        image: notes/gumball_intro_8.JPG
        text: En este primer rompecabezas, haremos que los actores digan algo poniendo
          el bloque de "decir" para cuando se ejecute el bloque y escribiendo tu mensaje.
          Una vez que tus bloques esten en lugar, da clic en el botón de ejecutar
          para ver lo que programaste.
      9:
        image: notes/gumball_intro_9.JPG
        text: Comienza y al final podrás crear tu propio juego con todo tipo de jugadores
          que puedan interactuar, tener puntos, tirar cosas y desaparece unos a otros.
          Todo depende de ti!
    gumball_events:
      1:
        image: notes/gumball_events_1.JPG
        text: Ahora aprenderemos algo que todos los programadores de juego usan cada
          día. Son llamados eventos. Un evento le indica a tu programa escuchar para
          cuando algo sucede y entonces cuando lo hace, el juego realiza una acción.
      2:
        image: notes/gumball_events_2.JPG
        text: Algunos ejemplos de eventos estan escuchando por un clic del ratón o
          un teclado de la flecha de arriba o abajo en la pantalla.
      3:
        image: notes/gumball_events_3.JPG
        text: Aquí, vamos a hacer al actor decir algo cuando el jugador haga clic
          en él. Usaremos el cuando haga clic en el bloque y agregar el bloque de
          "decir" a éste. Cuando el jugador haga clic en todos los bloques agregados,
          a este bloque se realizarán.
      4:
        image: notes/gumball_events_4.JPG
        text: También hay cuando bloques de flecha. Si tu enlace mueve bloques a esos,
          puedes comenzar a mover tus actores para arriba, abajo, izquierda, derecha,
          con las teclas de flecha. Poco a poco, tu juego es cada vez más interactivo.
    gumball_repeat:
      1:
        image: notes/gumball_repeat_1.JPG
        text: ¿Te imaginas si tuvieras que repetir algo por siempre y para siempre?
          Esperemos que nunca tengas orque los equipos son realmente buenos en repetir
          cosas.
      2:
        image: notes/gumball_repeat_2.JPG
        text: Este es el bloque de repetición por siempre. Cualquier cosa dentro de
          este bloque pasara por siempre en el juego. Si queremos que un actor haga
          algo repetidamente sin el jugador haga nada, pondremos eso bloques dentro
          del bloque de repetición por siempre.
      3:
        image: notes/gumball_repeat_3.JPG
        text: En el sigueinte rompecabezas, nuestro objetivo es ayudar al actor a
          que haga un trabajo continuamente. Aprendiendo cómo el comando de repetición
          trabaja te ahorrará mucho tiempo más tarde cuando construyas tu propio juego.
    iceage_intro:
      1:
        image: notes/iceage_intro_1.JPG
        text: If you'd like to make your own game, it's really easy. All you need
          are just a few basics of programming and you can start playing a game that
          you created.
      2:
        image: notes/iceage_intro_2.JPG
        text: Do you have a favorite video game? We're going to take one step toward
          creating games just like that in PlayLab. Good games have a story and every
          story has actors. Actors that do things like speak, move and interact with
          each other. Maybe even score points based on the rules of the game. Today,
          we'll be learning how to do all these things one by one with fun actors
          and then build a game from scratch that can be shared and played on a phone.
      3:
        image: notes/iceage_intro_3.JPG
        text: Today, we'll be learning how to do all these things one by one with
          fun actors and then build a game from scratch that can be shared and played
          on a phone.
      4:
        image: notes/iceage_intro_4.JPG
        text: Your screen is split into three main parts. On the left is the gamespace
          where your program will run. The instructions for each level are written
          below.
      5:
        image: notes/iceage_intro_5.JPG
        text: This middle area is the tool box and each of these blocks is a piece
          of code.
      6:
        image: notes/iceage_intro_6.JPG
        text: The white space on the right is called the work space and this is where
          we'll build our program.
      7:
        image: notes/iceage_intro_7.JPG
        text: To start off, you'll need to link your blocks to the orange when run
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line and then they'll snap together.
      8:
        image: notes/iceage_intro_8.JPG
        text: In this first puzzle, we'll make the actors say something by linking
          the "say" block to the when run block and typing in your message. Once you
          have your blocks in place, hit the run button to see what you programmed.
      9:
        image: notes/iceage_intro_9.JPG
        text: Get started and by the end you'll be able to create your own game with
          all kinds of players that can interact, score points, throw things, and
          vanish each other. It's all up to you!
    iceage_events:
      1:
        image: notes/iceage_events_1.JPG
        text: Now we're going to learn about something all game programmers use everyday.
          They're called events. An event tells your program to listen for when something
          happens and then when it does, the game performs an action.
      2:
        image: notes/iceage_events_2.JPG
        text: Some examples of events are listening for a mouse click or an up or
          down arrow key or even a tap on the screen.
      3:
        image: notes/iceage_events_3.JPG
        text: Here, we're going to make the actor say something when the player clicks
          on it. We will use the when clicked block and attach the "say" block to
          it. When the player clicks, all the blocks attached to this block will be
          performed.
      4:
        image: notes/iceage_events_4.JPG
        text: There are also when arrow blocks. If you link move blocks to those,
          you can start to move your actors up, down, left, right, with the arrow
          keys. Little by little your game is getting more interactive.
    iceage_repeat:
      1:
        image: notes/iceage_repeat_1.JPG
        text: Can you imagine if you had to repeat something forever and ever? Hopefully
          you never have to because computers are really good at repeating things.
      2:
        image: notes/iceage_repeat_2.JPG
        text: This is the repeat forever block. Anything inside this block will happen
          forever in the game. If we want an actor to do something repeatedly without
          the player having to do anything, we'll put those blocks inside the repeat
          forever block.
      3:
        image: notes/iceage_repeat_3.JPG
        text: In this next puzzle, our goal is to help the actor do a job continuously.
          Learning how the repeat commands work will save you a ton of time later
          when you build your own game.
