{
  "pt-BR": {
    "data": {
      "reference_guides": {
        "csd-2022/accelerometer-events": {
          "display_name": "Eventos do Acelerômetro",
          "content": "Assim como os outros sensores, o acelerômetro tem os eventos `dados` e `alteração`. Eles são particularmente úteis porque permitem que você acompanhe constantemente os valores atualizados do acelerômetro, como a orientação. \n\n| Evento | Descrição |\n| ------ | --------- |\n\nIsso verifica se os dados atuais do sensor são os mesmos de 100 ms atrás. Se for esse o caso, o evento não será acionado. Caso contrário, o evento será acionado. |\n\\| `sacudida` | Dispara sempre que o tabuleiro é sacudido. |\n\nÀs vezes, não nos importamos com a orientação do tabuleiro, apenas nos importamos com o fato de ele se mover. É aqui que eventos como `change` e `shake` entram."
        },
        "csd-2022/animation-tab": {
          "display_name": "Aba de Animação",
          "content": "No Game Lab, _Animações_ são desenhos ou outras imagens que você pode usar para mudar a aparência de seus sprites. Você pode usar o bloco `sprite.setAnimation ()`para alterar as animações do seu sprite para qualquer uma das animações que você adicionou na _Guia Animação_.\n\n## Usando a guia Animação\n\nClicar no botão **Animação** acima da área de exibição levará você para a _Guia Animação_, onde você pode importar ou desenhar animações para serem usadas por seus sprites.\n\n\\[] [1]\n\n\\[] [0]\n\n1.  Use esses botões para alternar entre a guia de animação e a guia de código.\n2.  Essa coluna mostra todas as animações que você criou. Clique em uma animação aqui para editá-la.\n3.  Clique no sinal de mais para adicionar uma nova animação. Você pode selecionar uma animação da biblioteca, importar uma imagem do seu computador ou desenhar uma do zero.\n4.  As ferramentas de desenho desta coluna permitem que você desenhe ou modifique animações.\n5.  Desenhe ou edite sua imagem nessa tela.\n6.  Abra esta gaveta para alterar o tamanho geral da sua imagem ou tela.\n\n[/] [0]"
        },
        "csd-2022/app-lab": {
          "display_name": "Laboratório de Aplicativo",
          "content": "O App Lab é uma ferramenta criada com [JavaScript] [0] que pode ser usada para criar aplicativos. Leia mais sobre os comandos do App Lab na [documentação do App Lab] [1]."
        },
        "csd-2022/applab-overview": {
          "display_name": "Visão Geral",
          "content": "O App Lab é uma ferramenta criada com [JavaScript] [0] que pode ser usada para criar aplicativos. Leia mais sobre os comandos do App Lab na [documentação do App Lab] [1]."
        },
        "csd-2022/arrays": {
          "display_name": "Vetores",
          "content": "Uma _matriz_ é um grupo de valores armazenados em uma ordem específica. Normalmente, esses valores são todos do mesmo tipo (como todos os números, todos os textos ou até mesmo todos os sprites), mas em JavaScript, as matrizes também podem conter diferentes tipos de elementos. Você pode usar matrizes para criar uma lista de itens que você armazena em uma única variável.\n\n## Criando e Usando Matrizes\n\nAs matrizes parecem listas dentro de colchetes. Cada valor na matriz deve ser separado por vírgulas.\n\n`[1,5,7,2]`\n\nToda vez que você criar uma matriz, você precisará armazená-la em uma variável imediatamente para poder acessar os valores posteriormente. Como isso é muito importante, o bloco para criar uma matriz armazena automaticamente a matriz em uma variável.\n\n\\[] [0]\n\nVocê pode acessar um valor dentro de sua matriz usando seu número de índice. Os números do índice começam em 0 e contam até chegarem ao final da matriz. Por exemplo, na matriz acima, “a” está no índice 0, “b” está no índice 1 e “c” está no índice 2."
        },
        "csd-2022/board-events": {
          "display_name": "Eventos de Diretoria",
          "content": "O bloco [`OneEvent` (#fff176)] [0] ajuda seu aplicativo a saber quando algo acontece, como quando alguém clica em um botão ou move o mouse. O Circuit Playground tem um bloco similar chamado [`OnboardEvent ()f78183`(#] [1] que observa as coisas que acontecem no tabuleiro.\n\nNa programação orientada por eventos, lembre-se de que:\n\n-   **As pessoas fazem os eventos acontecer** - Os eventos acontecem quando alguém usa os botões, interruptores ou outras partes do quadro.\n-   **Os eventos fazem o código ser executado** - Quando um evento acontece, ele pode fazer com que uma determinada função funcione.\n\n## OnboardEvent\n\nO bloco [`OnboardEvent ()f78183`(#] [2] é um tipo especial de função chamado Event Listener. Isso facilita a configuração do tratamento de eventos com apenas um comando. Aqui está um exemplo com rótulos:\n\n\\[] [3]\n\n1.  Quando o botão esquerdo, `botãoL`, for clicado, a palavra “clique” aparecerá na tela. Usamos a variável `buttonL` (sem aspas), que é diferente de onEvent que usa uma string para nomear um elemento de design.\n\n2.  Essa função não tem nome e é chamada de função de retorno de chamada. É um pouco estranho porque você não o usa diretamente no seu código. Em vez disso, o sistema chama a função de retorno de chamada quando o evento escolhido acontece. As funções de retorno de chamada são muito usadas na programação orientada a eventos.\n\n## Button Events\n\n⚠️ Uma palavra de cautela! Os botões Circuit Playground e micro:bit podem parecer semelhantes, mas seus nomes são um pouco diferentes:\n\n-   Os botões **Circuit Playground** são chamados de `ButtonL` e `ButtonR`\n-   Os botões**BBC micro:bit** são chamados de `ButtonA` e `ButtonB`"
        },
        "csd-2022/booleans-and-comparison-operators": {
          "display_name": "Operadores de Comparação e Valores Booleanos",
          "content": "## Sopa de Palavras: Condicional, Booleanos, Expressões, Instruções\n\n<div style=\"width: 33%; float: right; border: solid 1px #00adbc; padding: 10px; margin: 10px;\">\n<Strong>Notas Históricas sobre Booleanos</Strong><br>\n<li> Nomeados em homenagem ao matemático George Boole \n<li> Ele inventou uma área da matemática agora chamada de \"Álgebra Booleana\"\n<li> Álgebra Booleana é uma matemática que opera apenas com valores verdadeiro/falso.\n<li> Este é um trabalho importante para a ciência da computação, pois verdadeiro/falso traduz-se facilmente para binário.\n</div>\nComo visto no vídeo, existem vários termos que geralmente se referem à mesma coisa.\n\nBooleano, Valores Booleanos, Expressões Booleanas:\n\nUm Valor Booleano é simplesmente um termo de ciência da computação que significa um valor verdadeiro/falso.\nUma Expressão Booleana é uma declaração que avalia para um Valor Booleano (um único verdadeiro/falso).\n\nCondição, Condicionais, Instruções Condicionais:\n\n\"Condicional\" é simplesmente um termo genérico para código que altera o fluxo do programa com base em valores verdadeiro/falso (como uma instrução [if(#64d5ff)](/docs/spritelab/codestudio_ifStatement/)).\nExemplos: Condição, Condicionais, Instruções Condicionais, Execução Condicional.\n\nOperadores de Comparação\n\n<img src=\"https://images.code.org/79f2ae7d27a3fa434138aeeb17146cab-image-1479413755076.png\" style=\"float: left; margin-left: 20px; margin-right: 20px\">\nUm tipo comum de condição a ser verificada é uma comparação entre dois valores. Aqui estão 6 operadores de comparação comuns. Cada um compara um valor à esquerda com um valor à direita e retorna um Valor Booleano - verdadeiro ou falso. A maioria deles faz o que você esperaria.\n\nPor que esses símbolos: ==, !=, \\<=, e >=?\n\nUsamos == porque o único sinal de igual <code>=</code> é o operador de atribuição. Precisamos de algo diferente para indicar que queremos comparar dois valores em vez de atribuir um ao outro.\n\nErro comum: escrever algo como [if(age = 18)(#64d5ff)](/docs/spritelab/codestudio_ifStatement/) em vez de [if(age == 18)(#64d5ff)](/docs/spritelab/codestudio_ifStatement/). Vamos garantir que entendamos isso mais tarde.\n\nUsamos !=, \\<= e >= porque eles exigem apenas símbolos ASCII. Historicamente, os símbolos matemáticos <code>≠</code>, <code>≤</code> e <code>≥</code> eram difíceis ou impossíveis de produzir em alguns sistemas. O ! é universalmente lido como \"não\". \n\n<div style=\"clear: both\">&nbsp;</div>\n\nReferência: Exemplos\n\nAbaixo estão vários exemplos de como você pode ver comparações em código. Revise-os se desejar ou continue e volte se precisar de referência.\n\n<hr>\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/ea8cf41d0e06e6ddee31086fbb9ea2b9-image-1479232029068.png\" style=\"float: left; margin-left: 50px; margin-right: 50px\">\n\nCompara dois valores - números, strings ou outros booleanos - e retorna verdadeiro se forem iguais, caso contrário, falso.\n\n\"Hello\" == \"hello\" retorna falso -- porque as strings são capitalizadas de maneira diferente.\n\"3\" == 3 retorna verdadeiro -- porque == tenta ser flexível. Se puder \"coagir\" uma string em um número, fará isso para comparar. <sup>1</sup>\n(2+1) == 3 retorna verdadeiro -- porque a expressão aritmética avalia para 3.\nx == 7 retorna verdadeiro -- quando a variável x tem o valor 7.\n\n<sup>1.</sup> Embora seja uma característica útil que == coagirá uma string em um número, é considerado TRAIÇOEIRO porque a string \"3\" não é o mesmo que o inteiro 3. Há momentos em que você acreditaria que eles não são iguais. Há um operador de igualdade \"estrita\" - o \"triplo igual\" ===, que garante que tanto o tipo de dados quanto o valor sejam iguais. Portanto, \"3\" === 3 é falso.\n\n<div style=\"clear:both\"> </div>\n<hr>\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/67fc10f1dec4f129c64c62d583ebf7ee-image-1479232142029.png\" style=\"float: left; margin-left: 50px; margin-right: 50px\">\n\nCompara dois valores - números, strings ou outros booleanos - e retorna verdadeiro se eles não forem iguais, caso contrário, falso.\n\n\"Hello\" != \"hello\" retorna verdadeiro -- porque as strings são ligeiramente diferentes.\n\"3\" != 3 retorna falso -- porque a string 3 pode ser coagida em um número antes de comparar com 3. (veja as notas acima sobre o == flexível).\n(2+1) != 3 retorna falso -- porque a expressão aritmética avalia para 3.\nx != 7 retorna verdadeiro -- quando a variável x for qualquer valor que não seja 7.\n\n<div style=\"clear:both\"> </div>\n<hr>\n<img style=\"float: left; margin-left: 50px; margin-right:50px; margin-bottom: 20px;\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/536aed5657843fca3b52a044f2f3bdc7-image-1479242736018.png\">\n\nCompara dois valores para ver se o número à esquerda é <em>maior do que</em> o número à direita.\n\n3 >= 4 retorna falso\n4 >= 3 retorna verdadeiro\nidade >= 18 retorna verdadeiro -- quando o valor da variável \"idade\" é 18 ou maior.\n\n<div style=\"clear:both\"> </div>\n<hr>"
        },
        "csd-2022/changing-screens": {
          "display_name": "Mudando Telas",
          "content": "## Usando o comando _setScreen_ para mudar de tela com o código\n\nO comando [`setScreen` (#fff176)] [1] altera a tela para mostrar a tela que você quiser. Você especifica a tela por seu ID.\n\n\\[] [2]\n\n\\[] [0]\n\n1.  Encontre [`setScreen` (#fff176)] [3] na caixa de ferramentas UI Elements e arraste-o para a área de trabalho do código.\n2.  Na maioria das vezes, você muda a tela em resposta a algum evento do usuário. Nesse caso, [`setScreen` (#fff176)] [4] está sendo adicionado a um manipulador de eventos de “clique” para a imagem com a ID “SmileyFace”\n3.  Selecione o ID da tela para a qual você deseja mudar. Nesse caso, quando o rosto sorridente é clicado na tela que diz “olá”, queremos mudar para a tela que diz “adeus”.\n4.  **Ideia-chave: várias telas - um espaço de trabalho de codificação.** Esse é o código que manipula um evento de “clique” para uma _imagem que está em uma tela diferente_ - a “GoodbyScreen”. Você não pode ver essa imagem agora, ou aquela tela, porque a tela não está selecionada. No entanto, o código para isso ainda está aqui.\n\n[/] [0]"
        },
        "csd-2022/changing-sensor-scale": {
          "display_name": "Alterando a Escala do Sensor",
          "content": "Por padrão, cada um dos sensores do Circuit Playground e dos dispositivos micro:bit converte seus dados detectados em um intervalo específico.\n\n-   O Circuit Playground converte seus dados em um intervalo com um valor mínimo de 0 e máximo de 1023.\n-   O micro:bit converte seus dados em um intervalo com um valor mínimo de 0 e um valor máximo de 255.\n\nPara alguns programas, talvez você queira ajustar esses intervalos de acordo com suas necessidades.\n\n## Definir escala\n\nO método _setScale_ permite que você substitua o alcance padrão de um sensor. Por exemplo, chamar [`LightSensor.setScale (0, 100)f78183`(#] [0] mudará a escala do [`LightSensor.value` (#f78183)] [1] para que o valor mais baixo (completamente escuro) seja 0 e o maior (totalmente claro) seja 100."
        },
        "csd-2022/circuit-playground": {
          "display_name": "Visão geral do Circuit Playground",
          "content": "O Circuit Playground é um computador simples de placa única com muitas entradas e saídas integradas para explorarmos. No entanto, antes de nos aprofundarmos demais, vamos começar com o básico.\n\n### O Diodo Emissor de Luz (LED)\n\nQuando um computador só precisa comunicar informações simples, geralmente uma luz piscando é a maneira mais rápida e fácil de fazer isso. Os LEDs, ou diodos emissores de luz, são dispositivos pequenos, de baixo consumo e fáceis de usar para se comunicar com a luz. Dê uma olhada na imagem do Circuit Playground à direita.\n\n<img src=\"//curriculum.code.org/images/circuitplayground/cp_leds.png\" style=\"float: right; width: 400px; margin-left: 10px;\">\n\n1.  A porta USB permite que você conecte o Circuit Playground. Conectá-lo permite que você se comunique com a placa no App Lab, mas também fornece eletricidade à placa para que ela possa fazer coisas como acender os LEDs.\n2.  O **LED de alimentação verde** não pode ser controlado por meio de código, mas permite saber se a placa está recebendo eletricidade. Se o LED estiver desligado, não espere que nada em sua placa funcione.\n3.  O **LED** vermelho pode ser controlado no App Lab usando os blocos [`led` (#f78183)] [0]. Ele também pode ser usado para ajudar a depurar sua placa - toda vez que você conecta a placa, você deve ver esse LED piscar por alguns segundos.\n\n### Conecte\n\nConecte sua placa ao computador usando um cabo USB e observe como esses dois LEDs respondem. De que outra forma você poderia usar uma única luz para comunicar informações úteis a um usuário?"
        },
        "csd-2022/classes": {
          "display_name": "Classes",
          "content": "Às vezes, você só quer estilizar alguns elementos específicos de um tipo em vez de todos os elementos de um tipo. **As classes permitem que um grupo de elementos tenha seu próprio estilo único.** Isso se aplica a elementos na mesma página ou em páginas separadas, desde que todas as páginas estejam vinculadas à mesma folha de estilo.\n\nPara estilizar usando classes:\n\n1.  Primeiro, você precisa marcar os elementos em HTML que estarão nessa classe.\n2.  Segundo, você precisa escrever um conjunto de regras de estilo para essa classe. Para escrever uma regra para uma classe de elementos, o seletor do conjunto de regras tem um `.` antes do nome da classe.\n\nPor exemplo, o código abaixo estilizaria a classe sofisticada que foi configurada para um elemento de parágrafo:\n\n| Arquivo HTML | Arquivo CSS | Resultado |\n\\|n\n <pre> \\<p class=\"fancy\">Good Day\\</p> <br> \\<p>Bad Day\\</p></pre> | <pre>.fancy {<br>  color: blue dark;<br>  font-family: cursive;<br>} </pre> | <img src=\"https://images.code.org/27181e31f4e697a85f1794f28070ba14-image-1481648310560.58.03 AM.png\" alt=\"result image\"> |\n\n<br>\n\n## Perguntas Frequentes\n\n1.  **Por que um desenvolvedor web usaria classes?**\n2.  Um desenvolvedor web usa classes quando alguns elementos devem ter um estilo diferente de outros, mesmo que tenham a mesma tag. As classes também podem ser usadas para dar o mesmo estilo a elementos com tags diferentes.\n\n**Links escolares do W3**\n\n-   [Sintaxe CSS (classes)] [0]"
        },
        "csd-2022/collision-detection": {
          "display_name": "Detecção de Colisão",
          "content": "Às vezes, você vai querer saber quando dois sprites estão se tocando. O Game Lab usa o método [`isTouching` (#f78183)] [0] para verificar se um sprite está tocando outro sprite (o alvo).\n\n<img src=\"http://curriculum.code.org/media/uploads/istouching.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`isTouching` (#f78183)] [1] retorna um booleano, então ele pode ser usado dentro de uma condicional para fazer com que algo aconteça somente quando os dois sprites se tocam. Por exemplo, o código abaixo altera a animação da melancia quando o sprite da faca a toca.\n\n<pre>\n\nfunction draw () {\n  if (knife.isTouching (watermelon)) {\n    watermelon.setAnimation (“slice”);\n  }\n  background (“burlywood”);\n  drawSprites ();\n}\n\n</pre>\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n### Colliders\n\nQuando o Game Lab verifica se duas coisas estão se tocando, ele não sabe quais partes da imagem estão visíveis. Em vez disso, ele verifica se os colisores estão se tocando. O tamanho dos aceleradores é determinado pelo tamanho da animação que você está usando, até mesmo pelas partes dela que você não consegue ver. Você pode ver os aceleradores definindo a propriedade [`debug` (#f78183)] [2] do sprite como 'verdadeiro'.\n\nNos dois exemplos à direita, [`debug` (#f78183)] [3] foi definido como 'verdadeiro', então você pode ver o contorno verde dos aceleradores e que a animação muda quando eles se tocam, mesmo que as fotos da faca e da melancia não estejam se tocando.\n\nNo segundo exemplo, os aceleradores são muito grandes, então a melancia muda muito antes de ser tocada pela faca.\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders2.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n<pre>\nwatermelon.debug = true;\nknife.debug = true;\n\nfunction draw () {\n  if (knife.isTouching (melancia)) {\n    watermelon.setAnimation (“slice”);\n  }\n  background (” burlywood”);\n  drawSprites ();\n}\n</pre>\n\nVocê também pode alterar a forma dos aceleradores usando o método [`setCollider` (#f78183)] [4]. Esse método transforma o colisor num círculo ou num retângulo.\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders3.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n<pre>\nwatermelon.debug = true;\nknife.debug = true;\nwatermelon.setCollider (“circle”);\nknife.setCollider (“círculo”);\n\nfunction draw () {\n  if (knife.isTouching (melancia)) {\n    watermelon.setAnimation (“slice”);\n  }\n  fundo (“burlywood”);\n  drawSprites ();\n}\n</pre>"
        },
        "csd-2022/creative-commons-search": {
          "display_name": "Busca Creative Commons",
          "content": "Como o Creative Commons fornece uma maneira tão simples de saber quais mídias você pode ou não usar, muitos mecanismos de pesquisa integraram a filtragem Creative Commons para garantir que eles forneçam apenas resultados que você pode usar. Ao usar um mecanismo de pesquisa que suporte a filtragem Creative Commons, geralmente você só precisa marcar algumas caixas para garantir que a mídia encontrada esteja licenciada para seu uso.\n\n## Configurações de pesquisa\n\nAo usar um mecanismo de pesquisa amigável da Creative Commons, você deve procurar uma configuração que controle a **licença** dos resultados da pesquisa. Por exemplo, a pesquisa de imagens do Google tem uma lista suspensa que permite selecionar entre várias licenças Creative Commons diferentes.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-05-02-11.43.56.png\" alt=\"Google CC Image Search\" class=\"center\" style=\"max-width: 400px;\">\n\nEm geral, você deve procurar mídias licenciadas para uso **não comercial**. Se você planeja fazer alguma alteração na mídia que encontrar (como adicionar texto a uma imagem), também precisará garantir que tenha o direito de **modificar, adaptar ou basear** os resultados da pesquisa.\n\n## Dando crédito\n\nAo encontrar uma imagem ou outro arquivo de mídia de que goste, certifique-se de não apenas obter uma cópia do arquivo, mas também de acompanhar as informações necessárias para dar crédito ao criador. Para cada arquivo que você quiser usar, siga estas etapas:\n\n-   Baixe uma cópia para o seu computador (para que você possa enviá-la para o seu site na próxima etapa)\n-   Anote todas as informações que você puder encontrar sobre o autor, como\n    -   Nome ou nome de tela\n    -   URL do site (não URL da imagem em si)\n    -   Título da imagem"
        },
        "csd-2022/css-overview": {
          "display_name": "Visão Geral",
          "content": "CSS (Cascading Style Sheets) é a linguagem usada para definir o estilo e o layout das páginas da web. Você pode encontrar mais informações sobre as regras de CSS na página [Documentação do Web Lab] [0]."
        },
        "csd-2022/debugging-with-watchers": {
          "display_name": "Depurando com Observadores",
          "content": "Ao tentar depurar um programa, é útil acompanhar o valor atual de uma variável ou propriedade do sprite enquanto o programa é executado. Às vezes, você pode usar `console.log ()`para relatar rapidamente o valor de uma variável, mas isso não é muito útil quando você deseja rastrear várias variáveis ou variáveis que mudam com frequência durante o programa.\n\nUm _watcher_ é uma ferramenta de depuração que, como o próprio nome indica, _observa_ suas variáveis enquanto o programa é executado, facilitando a visualização do que elas estão fazendo.\n\n## Usando Watchers\n\nOs Watchers estão localizados na seção Watch da janela de depuração, talvez seja necessário abrir a janela para vê-la.\n\n\\[] [1]\n\n\\[] [0]\n\n1.  Aqui criamos uma variável `watch_me` com um valor inicial de 0. Você também pode usar observadores para rastrear as propriedades dos sprites.\n2.  Toda vez que o loop de desenho é executado, estamos incrementando `watch_me` em 1. Isso fará com que ele mude _30 vezes por segundo_.\n3.  Este é o painel do observador. Na parte superior estão todos os observadores adicionados atualmente, e abaixo está uma área para adicionar novos observadores.\n4.  Conforme o programa é executado, esta seção é atualizada continuamente para mostrar o valor atual da variável monitorada `watch_me`.\n\n[/] [0]\n\n## Adicionando uma variável ao Watch\n\n\\[] [2]\n\nVocê pode adicionar observadores para qualquer variável ou propriedade do objeto digitando o nome de uma variável na caixa e clicando no botão azul “adicionar”. Se seu programa não estiver em execução ou se a variável ainda não tiver recebido um valor, o observador reportará um valor de `undefined`. Isso não é um erro, significa apenas que a variável ainda não recebeu um valor."
        },
        "csd-2022/design-mode": {
          "display_name": "Modo de Design",
          "content": "No App Lab, o “Modo de design” permite arrastar e soltar elementos da interface do usuário no aplicativo. Assim como você criou protótipos de papel desenhando todos os elementos da interface no papel, o Modo Design permite criar protótipos digitais arrastando e soltando diferentes elementos na tela.\n\n## Tour do Modo de Design\n\n\\[] [1]\n\n\\[] [0]\n\n1.  Você verá um novo conjunto de opções acima da área do aplicativo que permite alternar entre “Modo de design” e “Modo de código”.\n2.  Adicionar um elemento é tão fácil quanto arrastá-lo e soltá-lo no aplicativo onde quiser. Quando estiver na tela do aplicativo, você pode reposicioná-lo, redimensioná-lo e alterar muitas outras propriedades sobre ele.\n3.  A guia **Propriedades** mostra tudo o que você pode mudar na aparência de um elemento da interface do usuário.\n4.  O **ID do elemento** é importante porque é como você se refere ao elemento em seu código. Discutiremos os IDs dos elementos posteriormente.\n5.  Você pode fazer com que o texto que o usuário vê no botão seja o que você quiser.\n6.  Role para baixo para ver se outras propriedades de um elemento da interface do usuário podem estar “escondidas” abaixo.\n\n[/] [0]"
        },
        "csd-2022/design-mode-elements": {
          "display_name": "Modo de Design de Elementos",
          "content": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/elements.png\" style=\"float:right; margin-left: 20px; max-width: 200px\"/>\n\nO Modo de Design permite que você coloque vários tipos diferentes de elementos da interface do usuário (ou UI) na tela. Muitos desses elementos podem ser usados para receber informações do usuário.\n\n## Escolhendo boas IDs\n\nCada elemento da interface do usuário em seu aplicativo precisa de uma ID que você possa consultar posteriormente. Bons IDs são **significativos, descritivos e únicos**.\n\nPor exemplo, se você tiver muitos botões em seu programa, forneça a cada um deles uma ID que descreva o que o botão faz.\n\nEntão, em vez disso:\n\n-   “botão1\" e “botão2\"\n\nVocê pode criar IDs que digam não apenas que é um botão, mas para que você pretende que o botão seja usado, como:\n\n-   “HomeButton” e “SaveButton” ou\n-   “ButtonHome” e “ButtonSave” ou\n-   “home\\\\ \\_button” e “save\\\\ \\_button”\n\n## Regras Sobre IDs\n\nAo criar IDs descritivos e significativos, **existem algumas regras sobre IDs** que você precisa conhecer. Identidades...\n\n-   fazem distinção entre maiúsculas e minúsculas.\n-   não pode conter espaços.\n-   _deve_ começar com uma letra (A-Z ou a-z) e pode ser seguida por qualquer número de dígitos e letras.\n-   pode conter hífens (“-”), sublinhados (“\\\\ \\_”), dois pontos (“:”) ou pontos (“.”).\n\n**Diferencia maiúsculas de minúsculas?**\n\nIsso significa que há uma diferença entre “HomeButton” e “HomeButton” (observe o H maiúsculo no primeiro).\n\nEssas diferenças parecem irritantes no começo, mas você se acostuma e, na verdade, aprecia o fato de o computador exigir tanta precisão.\n\nExistem alguns estilos comuns para capitalizar e soletrar IDs de várias palavras:\n\n-   **Capitalização (conhecida como “camelCase”)** -- “acamelCaseNameMightLookLikeThis”\n-   **Underscores (conhecido como “snake\\\\ \\_case”)** -- “some\\\\ \\_people\\\\ \\_like\\\\ \\_to\\\\ \\_use\\\\ \\_underscores\\\\ \\_to\\\\ \\_separate\\\\ \\_words”\n-   **Traços (conhecidos como “estojo de kebab-case”)** -- “outros gostam de usar hífens ou traços”\n\nTudo o que você escolher depende de você. É o seu estilo. Só ajuda ser consistente."
        },
        "csd-2022/designing-screens-with-code": {
          "display_name": "Criando Telas com Código",
          "content": "Na Unidade 4, você viu que é possível criar um aplicativo no App Lab usando **elementos** no **Modo de Design**. Essa abordagem de arrastar e soltar é rápida e fácil, mas você só pode criar uma página como essa antes de executar o programa. Às vezes, você quer que os elementos do seu aplicativo mudem enquanto ele está em execução e, para isso, precisaremos usar código.\n\nCada elemento tem várias **propriedades**, como a posição x e y, a cor e o texto. O bloco [`setProperty` (#fff176)] [1] permite definir as propriedades dos elementos da interface do usuário enquanto o programa está em execução. Qualquer propriedade que você possa definir no Modo Design também pode ser definida em código usando [`setProperty` (#fff176)] [2].\n\n## Definindo propriedades\n\n<img src=\"https://images.code.org/b7736bdcbde48f7951ebdc87135dd46c-image-1480536740764.png\" style=\"margin: auto\">\n\n\\[] [0]\n\n1.  No Modo de Código, você pode encontrar [`setProperty` (#fff176)] [3] na caixa de ferramentas UI Controls.\n2.  Escolha o ID do elemento da interface do usuário do qual você deseja alterar uma propriedade\n3.  O menu suspenso mostra uma lista de propriedades que você pode definir para esse elemento. Ele corresponde à lista de propriedades que você vê para um elemento no **Modo de Design**\n4.  O último parâmetro é o valor que você deseja definir para essa propriedade. Estamos interessados na cor de fundo, que tem uma variedade de valores que você pode atribuir.\n\n[/] [0]"
        },
        "csd-2022/drawing-shapes": {
          "display_name": "Desenhando Formas",
          "content": "Há muitas opções diferentes para desenhar no Game Lab. Você já viu três blocos: [`rect` (#f78183)] [0], `ellipse` e `fill`. Eles permitem que você faça círculos e quadrados de cores diferentes.\n\n## Rect\n\nO bloco [`rect` (#f78183)] [1] traçará um quadrado nas coordenadas x e y fornecidas. As coordenadas x e y indicam onde fica o canto superior esquerdo do quadrado na área de exibição.\n\n## Elipse\n\nO bloco `elipse` traçará um círculo nas coordenadas x e y fornecidas. As coordenadas x e y indicam onde fica o centro do círculo na área de exibição.\n\n## Coordenadas no Game Lab\n\nPara traçar as coisas na tela do Game Lab, você precisará usar as coordenadas x e y. A coordenada x indica a que distância algo está do lado esquerdo da área de exibição. A coordenada y indica a que distância algo está do topo da área de exibição.\n\n## Preenchimento\n\nO bloco `preenchimento` muda a cor que o Game Lab usa para colorir as formas que você desenha. Depois de usar o bloco `preenchimento`, todas as novas formas que você desenhar serão preenchidas com essa cor, até que você use o bloco `preenchimento` para alterar a cor novamente.\n\n## Cores no Game Lab\n\nO Game Lab entende os nomes de cores mais comuns, como “vermelho”, “verde” e “marrom”. Ele também compreende todos os nomes de cores HTML listados em <a href=\"https://www.w3schools.com/colors/colors_names.asp\" target=\"blank\">W3 Schools - HTML Color Names</a>."
        },
        "csd-2022/editing-images": {
          "display_name": "Editando Imagens",
          "content": "Além de carregar e desenhar imagens, a guia Animação inclui várias ferramentas para ajudar a editar suas imagens de animação.\n\n## Copiar, virar e girar\n\nTrês ferramentas úteis para criar várias animações para usar com o mesmo sprite são _Copy_, _Flip_ e _Rotate_\n\n\\[] [1]\n\n\\[] [0]\n\n1.  O botão **copiar** cria uma duplicata da animação atual. Isso é útil para criar várias versões de uma animação para um único sprite, como apontar em direções diferentes ou animações de pular e caminhar.\n2.  O botão **flip** inverte a imagem atual no eixo vertical. Se você mantiver pressionada a tecla _Alt_ (ou _Option_ em um Mac) enquanto clica, poderá virar o eixo horizontal.\n3.  O botão **girar** gira a imagem atual 90 graus no sentido anti-horário. Se você mantiver pressionada a tecla _Alt_ (ou a tecla _Option_ em um Mac) enquanto clica, poderá girar no sentido horário.\n\n[/] [0]"
        },
        "csd-2022/for-loops": {
          "display_name": "Loops For",
          "content": "É comum querer repetir um conjunto de comandos um determinado número de vezes. O loop [`for` (#f98bd0)] [0] foi criado para agrupar todos esses componentes relacionados à contagem de loops em uma única linha de código.\n\n<img src=\"https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png\" style=\"width: 450px;\">\n\nOs programadores normalmente lêem um loop [`for (var i = 0; i < 10; i++)f98bd0`(#] [1] assim: <br>\n\n**\"para a variável i começando em 0, enquanto i é menor que 10, incremente i em 1\"**\n\n## Três partes do For Loop\n\n### Inicialize a variável\n\nSempre que você estiver contando, você precisa de um variável para acompanhar a contagem. A primeira parte do loop for configura a variável, geralmente chamada de `i`, que será usada para contar o número de vezes que o loop será executado. Isso também configura o valor inicial no qual começar a contar. A variável é configurada antes da execução do loop e, em seguida, esse código não é retornado nas execuções subsequentes por meio do loop for.\n\n### Condição\n\nA condição determina por quanto tempo o loop dura. Deve depender da variável que você inicializou na parte 1 do loop. A condição é verificada antes de entrar sempre no loop for, incluindo o primeiro. O loop **para** assim que essa condição não for mais verdadeira.\n\n### Incremento\n\nA última parte do For Loop é o incremento. É a parte de atualização do loop. Para que o valor inicial da variável mude, precisamos atualizá-lo a cada vez por meio do loop. É para isso que o incremento é usado. O incremento é executado no final de cada execução pelo loop for. `i++` é apenas uma abreviação de `i = i + 1`, que você pode reconhecer como o padrão do contador.\n\n## Exemplo\n\nUm loop for é semelhante a escrever várias declarações-if e contar à medida que você passa por cada declaração-if. Vamos dar uma olhada:\n\n### For Loop\n\n    for (var i = 0; i < 3; i++) {\n    \tconsole.log (“Olá!”) ;\n    }\n\n### If Statements\n\nEste exemplo faz a mesma coisa:\n\n    var i = 0;\n    if (i < 3) {\n    \tconsole.log (“Oi!”) ;\n        i++;\n    }\n    if (i < 3) {\n    \tconsole.log (“Olá!”) ;\n        i++;\n    }\n    if (i < 3) {\n    \tconsole.log (“Olá!”) ;\n        i++;\n    }\n    if (i < 3) {\n    \tconsole.log (“Olá!”) ;\n        i++;\n    }\n\nA quarta instrução if aqui nem será executada. Na verdade, você poderia ter declarações que durariam para sempre. Ele só executaria o `console.log ()`dentro da instrução if 3 vezes. Quando verifica a quarta se a condição falhará."
        },
        "csd-2022/formatting-html": {
          "display_name": "Formatando HTML",
          "content": "Ao escrever sua página da web, você deve organizar seu código de uma forma que facilite a leitura. Isso é chamado de **formatação**. Ao formatar seu código, você terá mais facilidade em encontrar e corrigir bugs.\n\n## Espaço em branco\n\nEspaço em branco se refere a qualquer caractere que aparece como um espaço em branco na tela, como um espaço, uma guia ou uma nova linha. O espaço em branco ajuda a separar diferentes partes do documento para facilitar a leitura. Por exemplo, no código HTML, novos elementos geralmente são colocados em uma nova linha, mesmo que isso não faça nenhuma diferença na forma como a página é exibida.\n\nPor exemplo, compare o código nas duas caixas abaixo.\n\n<pre >\n&lt;body&gt;\n   &lt;h1&gt;Aqui está minha lista&lt;/h1&gt;\n   &lt;ol&gt;\n      &lt;li&gt;Item 1&lt;/li&gt;\n      &lt;li&gt;Item 2&lt;/li&gt;\n   &lt;/ol&gt;\n&lt;/body&gt;\n</pre>\n\n<pre>\n&lt;body&gt;&lt;h1&gt;Aqui está minha lista&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;/ol&gt;&lt;/body&gt;\n</pre>\n\nAmbos exibirão a mesma página da web, mas o código na caixa superior é muito mais fácil de ler. É melhor começar com novos elementos em uma nova linha.\n\n## Recuo\n\nUm tipo muito comum de formatação em HTML é **indentação**. Recuo é o posicionamento do texto mais à direita ou à esquerda para separá-lo do texto ao redor. A indentação ajuda a transmitir a estrutura do programa. Em HTML, elementos que estão dentro de outros elementos geralmente são recuados. \n\nAqui está um exemplo:\n\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;Este parágrafo está dentro do elemento “corpo”.&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n\nA indentação pode ajudar você a lembrar se você fechou ou não uma tag, além de deixar claro quais tags estão dentro de outras. \n\n## Comentando\n\nÀ medida que suas páginas da web ficam mais complicadas, você vai querer usar **comentários**. Os comentários explicam as diferentes partes do código e o que ele deve criar. Os comentários podem ajudar você a depurar e também ajudar outras pessoas que estão tentando entender seu código.\n\n<pre>\n&lt;! -- este é um comentário --&gt;\n</pre>"
        },
        "csd-2022/functions": {
          "display_name": "Funções",
          "content": "Uma função é um grupo de comandos (blocos) aos quais você dá um nome para poder usá-la repetidamente.\n\n### **Criando (nomeando) uma função**\n\nPara criar uma função, você precisa colocar todos os comandos dentro de um bloco de funções e digitar o nome da função no espaço na parte superior do bloco de funções. Esse código está criando uma nova função chamada “ResetDrawing” que contém 4 comandos.\n\n\\[] [0]\n\n### **Chamando (usando) uma função**\n\nSempre que quiser usar sua função, você precisa chamá-la pelo nome. Para fazer isso, basta escrever o nome da sua função seguido por parênteses. Isso executará todos os comandos que você colocou em sua função quando a criou.\n\n\\[] [1]\n\n### \\*\\*Por que usar funções? \\*\\*\n\n1.  **Mantendo seu código organizado** As funções podem ser criadas em qualquer lugar do seu programa. Se você tiver grandes blocos de código que não usará com frequência, poderá criar uma função na parte inferior do código e chamá-la em uma única linha acima.\n\n2.  **Mantendo seu código legível** Ao dar um nome a um grupo de comandos, você está ajudando a explicar como seu código funciona. Escolher bons nomes ajuda você e outras pessoas que leem seu código a entender o que ele está fazendo.\n\n3.  **Removendo a repetição** Depois de criar uma função, você pode chamá-la quantas vezes quiser em seu programa. Se você estiver usando o mesmo código em vários lugares do seu programa, você pode criar uma função com esse código que você pode chamar em vez disso. Isso também facilita a alteração do código em vários lugares."
        },
        "csd-2022/game-lab": {
          "display_name": "Game Lab",
          "content": "O Game Lab é uma ferramenta criada com [JavaScript] [0] que pode ser usada para criar arte, jogos e animações. Leia mais sobre os comandos do Game Lab na [documentação do Game Lab] [1]."
        },
        "csd-2022/game-lab-overview": {
          "display_name": "Visão Geral",
          "content": "O Game Lab é uma ferramenta criada com [JavaScript] [0] que pode ser usada para criar arte, jogos e animações. Leia mais sobre os comandos do Game Lab na [documentação do Game Lab] [1]."
        },
        "csd-2022/headings-and-paragraphs": {
          "display_name": "Cabeçalhos e Parágrafos",
          "content": "Quase todas as páginas que você criar terão cabeçalhos e parágrafos.\n\n## Cabeçalhos\n\nOs cabeçalhos são títulos de seções de tamanhos diferentes em uma página da web. Os cabeçalhos adicionam estrutura à sua página da web ao dividi-la para que seja mais fácil para o usuário ler.\n\n## Criando cabeçalhos\n\nExistem seis tags de cabeçalho diferentes: `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>` e `<h6>`. O tipo de título mais comum é `<h1>`. Para usá-lo, você coloca o texto que deseja exibir entre a tag de abertura (`<h1>`) e a tag de fechamento (`</h1>`).\n\nO código de um título será parecido com `<h1>Meu texto de cabeçalho</h1>`.\n\n## Tamanho dos cabeçalhos\n\nExistem cabeçalhos de tamanhos diferentes que são marcados pelo número ao lado do h na tag do título. Eles vão de `<h1>` a `<h6>`.\n\n<table markdown=1>\n<thead>\n<tr>\n<th>Exemplo</th>\n<th>Resultado</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n\n    <h1>Ombros</h1>\n    <h2>Joelhos</h2>\n    <h3>Dedos</h3>\n\n</td>\n<td><img src=\"https://images.code.org/4f252e3dce84a14e1bfdab373d3edbad-image-1473432674187.50.43 AM.png\" style=\"width: 200px;\"></td>\n</tr>\n</tbody>\n</table>\n\n## Parágrafos\n\nOs parágrafos agrupam conjuntos de frases e colocam algum espaço entre esse grupo de texto e o próximo grupo de texto.\n\n## Criação de parágrafos\n\nOs parágrafos são marcados com tags de abertura (`<p>`) e fechamento (`</p>`). Para criar mais de um parágrafo, você precisará de vários conjuntos de tags de abertura e fechamento `<p>`. Por exemplo\n\n    <p>\n    \tIsso é um parágrafo.\n    </p>\n    <p>\n    \tEsse é outro parágrafo.\n    </p>\n\n**Links escolares do W3**\n\n-   [\\<h1> -\\<h6>] [0]\n-   [\\<p>] [1]"
        },
        "csd-2022/html": {
          "display_name": "HTML",
          "content": "HTML (Hypertext Markup Language) é a linguagem usada para definir o conteúdo das páginas da web. Você pode encontrar mais informações sobre as tags e atributos do HTML na página [Documentação do Web Lab] [0]. "
        },
        "csd-2022/html-overview": {
          "display_name": "Visão Geral",
          "content": "HTML (Hypertext Markup Language) é a linguagem usada para definir o conteúdo das páginas da web. Você pode encontrar mais informações sobre as tags e atributos do HTML na página [Documentação do Web Lab] [0]. "
        },
        "csd-2022/html-tags": {
          "display_name": "Tags HTML",
          "content": "O que é HTML?\n\nPara exibir uma página da web, um computador precisa saber muito mais do que apenas quais palavras ou imagens devem aparecer na tela. Ele precisa saber onde colocar o conteúdo, qual tamanho dar a ele, quais fontes e cores usar, e muitas outras informações que transformam texto e imagens comuns em uma página da web completa.\n\nPara resolver esse problema, os cientistas da computação criaram linguagens que comunicam essas informações adicionais. HTML, abreviação de Hipertexto Markup Language (Linguagem de Marcação de Hipertexto), é uma dessas linguagens que ajuda a resolver esse problema. Usando um sistema de tags, o HTML permite que um programador indique o propósito de diferentes partes de uma página da web. Isso permite que o computador saiba como deve exibir esses elementos diferentes.\n\nTags HTML\nO HTML indica o propósito de diferentes partes de uma página da web cercando-as com pares de tags de abertura e fechamento, como no exemplo abaixo.\n\n<img alt=\"Elemento HTML\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/html_element.png\" class=\"center\" style=\"max-width: 400px; margin: 20px auto;\">\nTag HTML\tNome da Tag\tO que ela faz\n<p>\tTag de Abertura de Parágrafo\tInício de um parágrafo. Parágrafos são apenas blocos de texto na sua página da web.\n</p>\tTag de Fechamento de Parágrafo\tMarca o final de um parágrafo. A tag de fechamento é sempre igual à tag de abertura com um / no início.\n<br>\nTags Padrão\nTodas as páginas HTML incluem um conjunto comum de tags. Elas são tão comuns que todos os projetos Web Lab começarão com elas já adicionadas.\n\nTag HTML\tO que ela faz\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-04-26-at-2.19.39-PM.png\">\tEste código inicial é incluído em cada projeto Web Lab. As diferentes tags são explicadas abaixo.\n\n<!DOCTYPE html>\tInforma ao computador que este é um documento escrito em HTML\n\n<html>\tIndica o início do seu código escrito em HTML\n<head>\tContém informações (às vezes chamadas de \"metadados\") sobre sua página da web\n<body>\tContém todo o conteúdo principal da sua página da web\n<br>\nMais Tags HTML\nTag HTML\tNome da Tag\tO que ela faz\n<br>\tQuebra de Linha\tIsso move seu texto para a próxima linha, semelhante a pressionar \"Enter\" no teclado.\n<hr>\tRégua Horizontal\tInsere uma régua ou linha horizontal em uma página HTML para dividir ou separar seções do documento.\nObservação: As tags listadas na tabela acima não requerem uma tag de fechamento, pois são ambos elementos \"vazios\" que não necessariamente dão formato ao próprio texto.\n\n<br>\nPerguntas Frequentes (FAQ)\nO que é um elemento HTML?\nUm elemento HTML é uma parte de um site marcada por uma tag de início e, às vezes, fechada com uma tag de fim. O elemento também inclui o conteúdo dentro das tags. Por exemplo:\n<img src=\"https://images.code.org/fb4df62aa4d879f7021c567be2e28eea-image-1481135855001.png\" style=\"width:500px\">\nO que faz a tag head?\nAs tags <head> </head> contêm informações, chamadas metadados, sobre sua página da web. Metadados não são exibidos na sua página da web, e o conteúdo que você deseja na sua página real não deve ir aqui.\nO que faz a tag body?\nEntre as tags <body> </body> é onde você quer colocar o conteúdo da sua página da web. Deve conter o corpo da página da web, incluindo todo o texto, mídia, links, etc. que você deseja que as pessoas vejam na sua página.\n<br>\n<br>\nW3 Schools\nExistem muitos recursos excelentes para aprender sobre tags HTML online, mas um dos mais comumente usados é o [w3schools.com][0]. Este site inclui muitas informações úteis sobre como as tags funcionam, bem como links para novas tags que você pode querer ler. Nos Níveis de Mapa nesta unidade, você sempre encontrará um link para as tags no W3 Schools, e você deve explorar outras tags se estiver interessado em aprender mais.\n\nLinks da W3 Schools\n\n[\\<p>](https://www.w3schools.com/html/html_paragraphs.asp)\n[\\<!DOCTYPE>](https://www.w3schools.com/tags/tag_doctype.asp)\n[\\<html>](https://www.w3schools.com/tags/tag_html.asp)\n[\\<head>](https://www.w3schools.com/tags/tag_head.asp)\n[\\<body>](https://www.w3schools.com/tags/tag_body.asp)"
        },
        "csd-2022/hyperlinks": {
          "display_name": "Hiperlinks",
          "content": "Os hiperlinks podem se conectar a páginas da web locais ou externas. Para adicionar navegação ao seu site, você precisará adicionar hiperlinks que conectem suas páginas da web individuais. Você pode **adicionar hiperlinks à sua página da web usando o elemento `<a>`**. O texto que você deseja exibir como hiperlink fica entre as tags de abertura e fechamento do hiperlink. O elemento `<a>` tem um atributo `href` que é o local ao qual se vincular. A localização de uma página local é apenas o caminho do arquivo dessa página.\n\n## Usando hiperlinks\n\nSupondo que você tenha um site que inclui uma segunda página com o nome de arquivo `houses.html`, você pode criar um link para essa página como este:\n\n<img alt=\"Link to houses html\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/a_tag.png\" class=\"center\" style=\"max-width: 600px; margin: 20px auto;\">\n\n\\[] [0]\n\n1.  A tag `<a>` envolve o texto que você deseja transformar em um link clicável. _A_ é a abreviação de _anchor_.\n2.  O atributo `href`, abreviação de _referência de hipertexto_, determina para onde seu link deve ir. Nesse caso, `houses.html`.\n3.  A tag de fechamento encerra seu link.\n\n[/] [0]\n\n## Perguntas frequentes\n\n1.  **Quais são as boas regras para nomear links?**\n\n2.  Os nomes dos links devem facilitar que o usuário saiba para onde está indo. Algumas boas regras são:\n\n3.  Dê ao link uma boa descrição que faça sentido mesmo sem ler todo o texto ao redor dele. Por exemplo, “vá aqui” ou “saiba mais” não dizem para onde você está indo ou o que está aprendendo.\n\n4.  Forneça um nome de link em texto normal, em vez de apenas repetir o URL no nome do link. Por exemplo, “Página inicial” ou “Página inicial” é mais fácil de ler do que \"index.html”.\n\n5.  Não vincule muito texto. Os leitores não entenderão especificamente do que trata o link.\n\n6.  **Como faço links externos?**\n\n7.  Coloque o URL inteiro (incluindo \"<http://\">) no atributo**href** da tag `<a>`, assim:\n    <a href=\"https://www.google.com\">Clique em mim para acessar o Google</a>\n\n8.  **Como faço para encontrar o URL de um site?**\n\n9.  Acesse qualquer site para o qual você deseja criar um link e copie o texto na barra de endereço (por exemplo, \"<https://www.google.com>\" para o Google). Então você pode usar esse endereço para seus próprios links.\n\n**Link para escolas W3**\n\n-   [\\<a>] [1]"
        },
        "csd-2022/if-else-statements": {
          "display_name": "Declarações Se-Senão (If-Else)",
          "content": "## Como as Declarações Se-Senão (If-Else) funcionam\n\n<img src=\"https://images.code.org/73eb353de3b62582617e66bfcf4208a7-image-1479490636331.png\" style=\"float: right\">\n\nCom uma instrução _if-else_, você está fornecendo um comando**either-ou**:\n\n**either** as linhas de código dentro do _if_ serão executadas **ou** as linhas dentro do _else_ serão executadas. Essas são as opções.\n\nVocê viu no vídeo como adicionar uma cláusula _else_ a uma declaração if -- clique no pequeno símbolo `+` no final da declaração _if_.\n\nDentro das chaves curvas da cláusula _else_, você coloca as linhas de código que deseja executar se a condição booleana da instrução _if_ for _false_.\n\nAlgumas notas importantes sobre a cláusula else:\n\n-   O `else` deve vir _imediatamente_ após o fechamento de uma declaração _if_\n-   O `else` também tem seu próprio conjunto de chaves curvas de abertura e fechamento para encapsular linhas de código\n\n<br><br>\n\n<img src=\"https://images.code.org/b7711c7851e5cc9bd08fa53500d692ce-image-1479495721089.png\" style=\"float: right; width: 275px\">\n\nConsiderando nosso fluxograma anterior, até agora não tínhamos como fazer o programa fazer algo diferente se a condição fosse _falsa_. Com uma declaração `if-else`, fazemos isso.\n\nAgora podemos escrever um programa que “ramifica” em um determinado ponto, executando uma das duas seções possíveis do código.\n\n<div style=\"clear: both\">&nbsp;</div>\n\n## Um exemplo prático\n\n<div style=\"clear: both\">&nbsp;</div>\n\n<img src=\"https://images.code.org/2e05fc16d828eda2cc4ef5db036d635a-image-1479496055965.png\" style=\"float: right;margin: 10px;\">\n\n\\[] [0]\n\n1.  As linhas de código são executadas sequencialmente, como de costume. Solicite que o usuário insira sua idade.\n2.  A instrução _if_ e a expressão booleana também são as mesmas de antes. A expressão é avaliada como `verdadeiro` ou `falso`.\n3.  Com uma instrução _if-else_, você garante que exatamente uma dessas duas seções do código \\*\\*será executada. Se a condição for `verdadeira` (a idade é 18 anos ou mais), as linhas de código dentro das chaves curvas da instrução if serão executadas. Se a condição for `falsa`, ela salta para a cláusula else e executa todas as linhas de código que encontrar entre as chaves curvas da cláusula else.\n4.  Finalmente, o programa inicia a execução normal logo após o bloco _if-else_. Neste ponto do programa, sabemos que _ou_ o código no bloco if-ou\\_ o bloco else foi executado.\n\n[/] [0]"
        },
        "csd-2022/if-statements": {
          "display_name": "Declarações If",
          "content": "## Entendendo o fluxo do programa\n\nDiz-se que os programas têm um “fluxo de execução”. Você começa executando uma linha de código, depois a próxima, depois a próxima e assim por diante.\n\n<img src=\"https://images.code.org/9475539704f7fc8d13092a5706fb3bba-image-1479311514103.png\" style=\"float: right; margin: 10px;\">\n\nUm fluxograma é um visual comum usado para representar os vários caminhos de execução que seu programa pode seguir. Muitas pessoas os usam para ajudar a planejar programas.  \n\n\\[] [0]\n\n1.  Esse fluxograma mostra um programa executando uma linha após a outra até chegar a um ponto em que precisa tomar uma decisão.\n2.  Para determinar qual caminho seguir, você declara alguma **condição**. Deve ser uma **expressão booleana** - algo que seja avaliado como **verdadeiro** ou **falso**. Aqui temos uma **comparação** simples de dois valores: a idade da pessoa e o número 18.\n3.  O programa faz uma coisa se a condição for verdadeira e outra se a condição for falsa.\n4.  O programa também pode continuar uma única sequência de execução após a condição.\n\n[/] [0]\n\n## Como as declarações IF funcionam\n\n<img src=\"https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png\" style=\"float: right; margin-left: 20px; margin-right: 20px;\">\n\n_if_ são as linhas de código que você usa para alterar o fluxo de um programa enquanto ele está em execução. Você pode escrever um código que determine quais linhas de código devem ser executadas a seguir.\n\nÀ direita está um diagrama que mostra os elementos de uma declaração _if_ básica em JavaScript.\n\nHá duas partes básicas em uma declaração if.\n\n1.  Uma condição a ser avaliada (uma expressão booleana avaliada como **verdadeiro** ou **falso**)\n2.  Código que deveria ser executado _se_ a expressão fosse verdadeira - entre colchetes\n\n\\<! -- Refaça isso para o Game Lab\n\n## Um exemplo prático\n\n<img src=\"https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png\" style=\"display: block; margin: auto; float: right\">\n\n[diagram_nums]\n\n1.  O programa é executado linha por linha conforme esperado. Ele exibe uma mensagem e solicita que o usuário insira um número. O que quer que o usuário digite será armazenado na variável `age<` e depois prossegue para a próxima linha...\n2.  Quando a instrução _if_ é encontrada, a _primeira_ coisa que ela faz é avaliar a condição em o parênteses. Ele verifica se, neste ponto do programa, o valor em uma variável `age` é maior ou igual a 18. Se for, dizemos que a expressão “**retorna verdade**”. Caso contrário, ela retorna false.\n3.  Essas instruções `console.log` serão _somente_ executadas se a expressão for verdadeira. As chaves curvas cercam todo o código que deve ser executado se, e somente if, a expressão era verdadeira. Caso contrário, toda a seção do código encapsulada na instrução if é _ignorada_. 4. A execução pega h\n    Aqui, na primeira linha após o fechamento das chaves curvas da instrução if. Essa linha _sempre_ será executada, mas observe que se o usuário inserisse uma idade menor que 18 anos, toda a instrução if seria ignorada e diria apenas “Obrigado pela verificação”. [/diagram_nums] -->"
        },
        "csd-2022/if-statements-2": {
          "display_name": "Declarações If",
          "content": "## Entendendo o fluxo do programa\n\nDiz-se que os programas têm um “fluxo de execução”. Você começa executando uma linha de código e depois a próxima e assim por diante.\n\n<img src=\"https://images.code.org/9475539704f7fc8d13092a5706fb3bba-image-1479311514103.png\" style=\"float: right\">\n\nUm fluxograma é um visual comum usado para representar os vários caminhos de execução que seu programa pode seguir. Muitas pessoas os usam para ajudar a planejar.\n\n<span style=\"color: #00adbc; font-size: 150%\">1.</span>\nEsse fluxograma mostra um programa executando uma linha após a outra até chegar a um ponto em que precisa tomar uma decisão.\n\n<span style=\"color: #00adbc; font-size: 150%\">2.</span>\nPara determinar qual caminho seguir, você indica alguma **condição**. Deve ser uma **expressão booleana** - algo que seja avaliado como **verdadeiro** ou **falso**. Aqui temos uma **comparação** simples de dois valores: a idade da pessoa e o número 18.\n\n<span style=\"color: #00adbc; font-size: 150%\">3.</span> O programa faz uma coisa se a condição for verdadeira e outra se a condição for falsa.\n\n<span style=\"color: #00adbc; font-size: 150%\">4.</span> As instruções pr\n\n## Como as instruções IF funcionam\n\n<img src=\"https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png\" style=\"float: right; margin-left: 20px; margin-right: 20px\">\n\n[`if` (#64d5ff)] [0] são as linhas de código necessárias para alterar o fluxo enquanto o programa está em execução. Você pode escrever um código que _toma uma decisão que determina quais linhas de código devem ser executadas a seguir._\n\nÀ direita está um diagrama que mostra os elementos de uma instrução básica [`if` (#64d5ff)] [1] em JavaScript.\n\nHá duas partes básicas em uma declaração if.\n\n1.  Uma condição a ser avaliada (uma expressão booleana avaliada como **verdadeiro** ou **falso**)\n\n2.  Código que deveria ser executado _se_ a expressão fosse verdadeira - entre colchetes\n\n## Um exemplo prático\n\n<img src=\"https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png\" style=\"display: block; margin: auto; float: right\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">1.</span>\nO programa é executado linha por linha conforme o esperado. Ele exibe uma mensagem e solicita que o usuário insira um número. Quaisquer que sejam os tipos de usuário, serão armazenados na variável <code>age</code> e depois passarão para a próxima linha...\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">2.</span>\nQuando a declaração <code>if</code> é encontrada, a primeira coisa que ela faz é avaliar a condição entre parênteses. <em></em> Ele verifica se, nesse ponto do programa, o valor em uma variável <code>age</code> é maior ou igual a 18. Se for, dizemos que a expressão \"<strong>retorna true</strong>”. Caso contrário, ele retornará falso.\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">3.</span>\nEssas instruções console.log serão executadas somente</em> se a expressão for verdadeira. <em>Os colchetes cercam todo o código que deve ser executado se, e somente se, a expressão for verdadeira. Caso contrário, toda a seção do código encapsulada na declaração if é <em>ignorada</em>.\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">4.</span>\nA execução começa aqui, na primeira linha após a chave curva de fechamento da declaração if. Essa linha sempre será executada em</em> , mas observe que se o usuário inserisse uma idade menor que 18 anos, toda a instrução if seria ignorada e diria apenas “Obrigado pela verificação”. <em>(Vamos corrigir esse constrangimento em breve).\n\n</p>\n\n<div style=\"clear: both\">&nbsp;</div>O programa também pode continuar uma única sequência de execução após a condição."
        },
        "csd-2022/images-in-html": {
          "display_name": "Imagens em HTML",
          "content": "A tag _image_ permite que você adicione imagens à sua página. Você pode notar que essa tag parece um pouco diferente das que você viu antes. Ao contrário das tags de parágrafo, cabeçalho ou lista, a tag de imagem _não requer uma tag de fechamento_. Todas as informações necessárias para exibir sua imagem estão contidas na própria tag.\n\n## Fonte da imagem e texto alternativo\n\nPara informar ao navegador qual arquivo usar, informações extras, chamadas de atributo, são adicionadas à tag da imagem dentro dos colchetes. O atributo **src** significa source e informa o nome da imagem, e o atributo **alt** descreve a imagem.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/img_tag.png\" class=\"center\" style=\"max-width: 500px; margin-top: 20px; margin-bottom: 20px;\"/>\n\n\\[] [0]\n\n1.  Crie uma tag de imagem usando a abreviatura **img**. Isso é considerado uma tag _self closing_, pois não precisa encapsular texto como muitas outras tags.\n2.  O atributo **src** é a abreviação de **source**. Isso informa à tag qual imagem carregar. Nesse caso, a página procurará uma imagem com o nome de arquivo `dog.jpg` no mesmo diretório da página. Os nomes dos arquivos de imagem incluem extensões que informam ao computador com qual tipo de imagem eles estão trabalhando. As extensões comuns são `.jpg`, `.jpeg` e `.png`. Certifique-se de colocar aspas ao redor do nome do arquivo de imagem.\n3.  O atributo **alt** é a abreviação de **texto alternativo**. Embora você não veja esse texto em sua página da web, ele fornece um backup caso sua imagem não seja baixada corretamente ou para usuários com deficiência visual. Neste exemplo, se seu navegador falhar ao carregar a imagem, você verá <img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/broken_image.png\" style=\"height: 50px;\">\n\n[/] [0]\n\n## FAQ\n\n1.  **Por que uma tag de imagem não tem uma tag de fechamento?**\n2.  Uma tag de imagem não precisa de uma tag de fechamento porque não há conteúdo de texto que deva ser encapsulado em tags. O conteúdo exibido na tela é especificado por meio dos atributos da tag.\n3.  **O que é um atributo?**\n4.  Os atributos são informações extras incluídas em uma tag. Os atributos têm **nomes** e **valores**. O **nome** informa que tipo de informação está sendo fornecida e, em seguida, o **valor** fornece as informações específicas para essa tag.\n5.  Por exemplo, as tags `<img>` têm dois atributos, **src** e **alt**. O atributo **src** especifica o nome do arquivo de imagem e **alt** informa ao navegador em texto legível qual é a imagem.\n\n**Links escolares do W3**\n\n-   [\\<img>] [1]"
        },
        "csd-2022/importing-screens": {
          "display_name": "Importando Telas",
          "content": "O App Lab permite que você importe telas de outro aplicativo! No menu suspenso de telas acima da área do aplicativo, selecione “Importar tela” e siga as instruções (você precisará do código de compartilhamento do aplicativo do qual está importando telas).\n\n\\[] [0]\n\n# Cuidado com os conflitos!\n\nPara se proteger contra erros de conflito de ID (usando o mesmo ID para vários elementos), o App Lab impedirá que você importe telas que usam IDs de elementos que já estão no seu aplicativo. Algumas coisas a serem verificadas ao importar:\n\n-   As telas que você está importando precisam ter IDs exclusivos que ainda não foram usados pelas telas do aplicativo\n-   Se você tentar importar uma tela com uma ID que já existe, você terá a opção de substituir a tela existente pela nova.\n\n<img src=\"https://images.code.org/d5d197be3a75eeb624e3a1312ab786ce-image-1477346707529.49.02.png\" style=\"max-width: 300px;\">\n\n-   Os IDs usados na tela importada ainda não são usados em seu aplicativo\n\n<img src=\"https://images.code.org/affd44c38c108ae5e3693d3187ea67e0-image-1477346796569.48.10.png\" style=\"max-width: 300px;\">"
        },
        "csd-2022/introduction-to-ai-lab": {
          "display_name": "Introdução ao IA Lab",
          "content": "<h1 style=\"text-align: center\">\nBem-vindo ao IA Lab!\n</h1>\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/f6438df7e9ddba9343861fe5635e7eec-image-1616511376606.png\" width=\"50%\" />\n<p>\nO IA Lab é uma ferramenta que permite criar <strong>Modelos de Aprendizado de Máquina</strong> para resolver problemas, tomar decisões ou criar previsões. Modelos de aprendizado de máquina são apenas programas de computador projetados para tomar uma decisão. Às vezes, a decisão pode ser aleatória ou baseada em um conjunto de regras, como ao jogar um jogo de tabuleiro.\n</p>\n<p>\nNeste widget, criamos modelos que usam padrões nos dados para tomar decisões. Você ajudará a treinar o IA Bot para tomar decisões com base em dados e, em seguida, poderá salvar o modelo de tomada de decisão do IA Bot para usar em um projeto do App Lab.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img src=\"https://images.code.org/4c16f69d655ab1782124a6d46a07c2fc-image-1616511395871.png\" width=\"50%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<h2>\nEtapa 1: Escolha um rótulo\n</h2>\n<p>\nUm <strong>Label</strong> é o que você está tentando ajudar um bot de IA a prever ou decidir. O rótulo geralmente está relacionado a um problema que você está tentando resolver, ou pode ser algo sobre o qual você <em>se pergunta</em> ou sobre o qual <em>está curioso</em> . Às vezes, os dados são coletados com o rótulo em mente, mas nem sempre.\n</p>\n<p>\nVocê pode explorar seus dados no painel esquerdo e tomar decisões no painel direito.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/9c106a4d860168fe3564709f15aea329-image-1616511405390.png\" width=\"50%\" />\n<h2>\nEtapa 2: escolha os recursos\n</h2>\n<p>\nOs <strong>Features</strong> são o fundamento de suas previsões do IA Bot. Você pode escolher quantos recursos quiser, mas alguns podem não ser tão úteis para fazer previsões quanto outros. O IA Lab tem diferentes visualizações de dados que podem ajudar você a decidir quais recursos são mais úteis do que outros.\n</p>\n<p>\nVocê pode explorar seus dados no painel esquerdo e tomar decisões no painel direito.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img src=\"https://images.code.org/9de79f238a091e2c6482d89a39e84c25-image-1616511415607.png\" width=\"50%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<h2>\nEtapa 3: Treine IA Bot\n</h2>\n<p>\nCom base em suas decisões, o IA Bot analisará os dados e encontrará padrões para ajudá-los a tomar decisões.\n\n<br />\n\nO IA Bot retém automaticamente alguns dos dados para que ele possa se testar e ver se está indo bem. É como estudar para um teste: você pode analisar a maioria das questões práticas para estudar, mas depois guardar várias para o final para se questionar e ver se está se saindo bem.\n\n</p>\n</div>\n\n<div style=\"height: 300px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/533b0a019b50e9410bca4ff73e118310-image-1616511430805.png\" width=\"50%\" />\n<h2>\nEtapa 4: Avalie e teste\n</h2>\n<p>\nNesta tela, você pode ver algumas das decisões que o IA Bot está tomando com base nos dados. Você também pode ver a precisão com base nos dados de teste que o IA Bot reteve.\n</p>\n<p>\nSe o IA Bot não estiver tomando decisões muito boas, você sempre poderá retornar à tela anterior e escolher recursos diferentes ou um novo rótulo.\n</p>\n</div>\n\n<div style=\"height: 350px\">\n<img src=\"https://images.code.org/ab441a75cf50d92f1da344ff96d93d3a-image-1616511439816.png\" width=\"30%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<p>\nVocê também pode testar o modelo do IA Bot. Experimente valores diferentes e veja quais decisões o IA Bot toma. Testar o modelo é importante para evitar o viés <strong></strong>, que ocorre quando as decisões favorecem algumas coisas e despriorizam outras. Se você descobrir preconceitos em seu modelo, sempre poderá voltar e escolher novos recursos ou uma nova etiqueta.\n</p>\n</div>\n\n<div style=\"height: 300px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/cf56f4bbe4fad787e00019cb3c6bf11e-image-1616511449679.png\" width=\"50%\" />\n<h2>\nEtapa 5: salve seu modelo\n</h2>\n<p>\nNessa tela, você pode salvar seu modelo para usar em um projeto do App Lab. Salvar o modelo é como pegar o cérebro do IA Bot e usá-lo para tomar as mesmas decisões em lugares diferentes. O código do seu projeto solicitará apenas que seu modelo faça uma previsão.\n</p>\n<p>\nAntes de salvar, você precisa responder algumas perguntas que foram salvas com seu modelo. É como documentar seu código: em vez de escrever comentários para descrever como um programa funciona, estamos adicionando notas sobre como treinamos nosso modelo para tomar suas decisões.\n</p>\n</div>"
        },
        "csd-2022/javascript": {
          "display_name": "JavaScript",
          "content": "JavaScript é uma linguagem de programação usada em toda a Internet e como a principal linguagem de programação em muitas das ferramentas e currículos da Code.org, como [App Lab] [0], [Game Lab] [1] e [Maker Toolkit] [2]."
        },
        "csd-2022/javascript-overview": {
          "display_name": "Visão Geral",
          "content": "JavaScript é uma linguagem de programação usada em toda a Internet e como a principal linguagem de programação em muitas das ferramentas e currículos da Code.org, como [App Lab] [0], [Game Lab] [1] e [Maker Toolkit] [2]."
        },
        "csd-2022/layout-properties": {
          "display_name": "Propriedades do Layout",
          "content": "Há muitas propriedades que ajudam a definir os estilos de suas páginas da web.\n\n| Propriedade                        | Descrição                                 | Link do W3 Schools |\n| ---------------------------------- | ----------------------------------------- | ------------------ |\n| [`background-color` (#d3e965)] [0] | Define a cor de fundo do elemento         | [W3 Schools] [1]   |\n| [`border-color` (#d3e965)] [2]     | Define a cor da borda                     | [W3 Schools] [3]   |\n| [`border-width` (#d3e965)] [4]     | Muda a largura da borda de um elemento    | [W3 Schools] [5]   |\n| [`border-style` (#d3e965)] [6]     | Muda o estilo da borda                    | [W3 Schools] [7]   |\n| [`Width` (#d3e965)] [8]            | Define a largura de um elemento           | [W3 Schools] [9]   |\n| [`Height` (#d3e965)] [10]          | Define a altura de um elemento            | [W3 Schools] [11]  |\n| [`Float` (#d3e965)] [12]           | Flutua um elemento para um lado da página | [W3 Schools] [13]  |\n| [`Margin` (#d3 e965)] [14]         | Gera espaço ao redor de um elemento       | [W3 Schools] [15]  |\n\n## FAQ\n\n1.  **O que a propriedade border-radius faz?**\n    -   A propriedade `border-radius` determina o raio das curvas nos cantos do elemento. Um raio maior cria uma curva maior e mais suave, e um raio menor cria uma curva menor e mais nítida. Um raio de zero forma uma curva regular. Você pode ler mais sobre essa propriedade em [W3Schools - CSS3 border-radius property] [16].\n2.  **E se um elemento dentro da página tiver uma cor de fundo diferente do corpo?**\n    -   Você pode ver a resposta para essa pergunta adicionando uma regra `background-color` à tag `p`. Os parágrafos terão a cor de fundo na regra para a tag `p`, e o resto da página seguirá a regra para a tag `body`.\n3.  **Por que usar uma propriedade de largura e altura ao mesmo tempo às vezes estende a imagem?**\n    -   Quando a largura de uma imagem muda, a altura deve mudar na mesma porcentagem, caso contrário, a imagem se estenderá. Por exemplo, se você dobrar a largura de uma imagem, também deverá dobrar a altura, ou a imagem será esticada horizontalmente. Quando você define apenas a largura ou a altura, o computador altera automaticamente a outra propriedade para que a imagem tenha a mesma aparência."
        },
        "csd-2022/lists": {
          "display_name": "Listas",
          "content": "O HTML tem dois tipos de listas, ordenadas e não ordenadas.\n\n## Listas ordenadas\n\nUma lista ordenada é um conjunto de itens numerados.\n\n<table border=\"1\" style=\"float:right; margin-left: 20px;\">\n<tr>\n<td>Exemplo</td>\n<td>Resultado</td>\n</tr>\n<tr>\n<td>\n<pre>\n&lt;ol&gt;\n    &lt;li&gt;Etapa 1 &lt;/li&gt;\n    &lt;li&gt;Etapa 2 &lt;/li&gt;\n    &lt;li&gt;Etapa 3 &lt;/li&gt;\n&lt;/ol&gt;\n</pre></td>\n<td><img src=\"https://images.code.org/3ef357cfad8ac98a8b30beb229ebcb78-image-1473446360428.39.04 PM.png\" style=\"width:150px\"></td>\n</tr>\n</table>\n\nUm elemento de lista ordenada tem a tag `<ol>`. Esta é uma abreviatura de <strong>O</strong>Ordered <strong>L</strong>ist. Cada item na lista é marcado por um elemento de item de lista `<li>`. Esta é uma abreviatura de <strong>L</strong>ist <strong>I</strong>tem. O elemento do item da lista é um elemento filho, o que significa que ele entra em seu elemento pai, a lista ordenada (`<ol>`).\n\nFazer uma lista ordenada tem duas etapas: criar a lista e adicionar os itens da lista. Para criar a lista ordenada, escreva as tags da lista ordenada `<ol> </ol>`. Em seguida, adicione os itens da sua lista **dentro** das tags da lista ordenada. Para criar cada item da lista, use as tags `<li> </li>` e escreva o item da lista dentro das tags.\n\nPode ser útil recuar suas tags`<li>`para que fique claro que elas estão contidas na tag`<ol>`.\n\n## Listas não ordenadas\n\nUma lista não ordenada é um conjunto de itens com marcadores.\n\n<table border=\"1\" style=\"float: right; margin-left: 20px;\">\n<tr>\n<td>Exemplo</td>\n<td>Resultado</td>\n</tr>\n<tr>\n<td>\n<pre>\n&lt;ul&gt;\n    &lt;li&gt;Vermelho &lt;/li&gt;\n    &lt;li&gt;Verde &lt;/li&gt;\n    &lt;li&gt;Azul&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n</td>\n<td><img src=\"https://images.code.org/25d4dfc9b6c448d0da305df66aa1dfb7-image-1473444368948.05.32 PM.png\" style=\"width:150px\"></td>\n</tr>\n</table>\n\nUm elemento de lista não ordenado tem a tag `<ul>`. Esta é uma abreviatura de <strong>U</strong>nordered <strong>L</strong>ist. Cada item na lista é marcado por um elemento de item de lista `<li>`. Esta é uma abreviatura de <strong>L</strong>ist <strong>I</strong>tem. O elemento do item da lista é um elemento filho, o que significa que ele entra em seu elemento pai, a lista não ordenada (`<ul>`).\n\nFazer uma lista não ordenada tem duas etapas: criar a lista e adicionar os itens da lista. Para criar uma lista não ordenada, escreva as tags da lista não ordenada `<ul> </ul>`. Em seguida, adicione os itens da sua lista **dentro** das tags de lista não ordenadas. Para criar cada item da lista, use as tags `<li> </li>` e escreva o item da lista dentro das tags.\n\nPode ser útil recuar suas tags `</li>` para que fique claro que elas estão contidas na tag `<ul>`.\n\n## Informações adicionais sobre a estrutura\n\n<img src=\"https://images.code.org/d9b5053f9b13286dad2714f6416c0a09-image-1664558778316.jpg\" style=\"width:500px\">\n\n## Conteúdo do item da lista\n\n<img src=\"https://images.code.org/a00a4377aa5b6688e8b0f554008e6210-image-1664558975676.jpg\" style=\"width:500px \">\n\n**W3 Schools Links**\n\n-   [\\<li>] [0]\n-   [\\<ul>] [1]\n-   [\\<ol>] [2]"
        },
        "csd-2022/maker-toolkit": {
          "display_name": "Conjunto de Ferramentas Maker",
          "content": "O Maker Toolkit é uma ferramenta criada com [JavaScript] [0] que permite escrever programas que se comunicam com o [Adafruit Circuit Playground] [1]. Leia mais sobre os comandos do Maker Toolkits na [documentação do App Lab] [2]."
        },
        "csd-2022/maker-toolkit-overview": {
          "display_name": "Visão Geral",
          "content": "O Maker Toolkit é uma ferramenta criada com [JavaScript] [0] que permite escrever programas que se comunicam com o [Adafruit Circuit Playground] [1] ou [BBC micro:bit] [2]. Leia mais sobre os comandos do Maker Toolkits na [documentação do App Lab] [3]."
        },
        "csd-2022/model-cards-in-ai-lab": {
          "display_name": "Cartões Modelo no IA Lab",
          "content": "## Vídeo\n\n(Abre o YouTube em uma nova guia)\n\n\\[[Model Cards in AI Lab] [1]] [0]"
        },
        "csd-2022/modifying-arrays": {
          "display_name": "Modificando Matrizes",
          "content": "As matrizes podem ser modificadas de algumas maneiras. Alterar os valores do que está dentro da matriz é uma forma de modificação, mas remover itens ou adicionar novos itens à matriz é outra forma de modificação.\n\nVocê pode usar as setas esquerda e direita no bloco de matriz para adicionar novos itens ou excluir os existentes. Isso sempre criará ou excluirá um item no final da sua matriz. \n\n\\[] [0]\n\n## Criando uma matriz\n\nAs matrizes têm muitos recursos que as tornam diferentes das variáveis, mas **a maior parte do que você aprendeu sobre variáveis também se aplica às matriz**. Por exemplo, assim como uma variável:\n\n-   As matrizes devem receber um nome **descritivo e significativo**.\n-   As matrizes são criadas usando `var`.\n-   As matrizes podem ser inicializadas/definidas usando `=`.\n\nOs comandos de matriz podem ser encontrados na caixa de ferramentas Variáveis. \n\n<img src=\"https://images.code.org/b21cdf00a2c673437c786aef3476734b-image-1486668653247.29.06 PM.png\" style=\"width: 150px;\">\n\nO comando de matriz tem a seguinte aparência:\n\n\\[] [1]\n\n## Exemplo\n\n\\[] [2]\n\nEssa matriz contém 3 valores: 100, 250, 500. Observe que os valores são separados por vírgulas `,` e que toda a matriz está entre colchetes `[]`. Podemos usar `console.log` para exibir o conteúdo de uma matriz da mesma forma que faríamos com uma variável.\n\n\\[] [3]\n\nIsso imprimirá [100, 250, 500] na área do console."
        },
        "csd-2022/multi-screen-apps": {
          "display_name": "Aplicativos Multi-Telas",
          "content": "Você pode imaginar que um aplicativo típico tenha várias “telas” ou visualizações pelas quais um usuário passa como parte do uso do seu aplicativo. Abaixo está um exemplo típico com uma tela de boas-vindas, uma tela que reproduz um jogo e uma tela de jogo sobre tela.\n\n\\[] [2]\n\n## O que é uma tela, afinal?\n\nUma tela é apenas um elemento de interface do usuário, como qualquer outro no Modo Design. Mas tem algumas propriedades especiais:\n\n-   Uma tela é um elemento de interface que contém outros elementos de interface do usuário.\n-   Somente uma tela pode ser visível por vez\n-   Somente elementos que “pertencem” a uma tela são visíveis quando essa tela está ativa.\n-   Mesmo que seus _elementos de design_ possam estar espalhados por várias telas, seu código está em um só lugar.\n\n## Como criar uma nova tela\n\n<img src=\"https://images.code.org/ed8f45d70a65329597c1623ddd756249-image-1477165123570.png\" style=\"float: right;\">\n\nHá duas maneiras de adicionar uma tela ao seu aplicativo. Primeiro, verifique se você está no <em>Design Mode</em>.\n\n\\[] [0]\n\n1.  Escolha \\_Nova tela... \\_ no menu suspenso na parte superior da área de exibição. **Nota:** você também usa esse menu suspenso para alternar entre as telas no modo de design.\n2.  Ou arraste e solte um elemento da interface de usuário da tela da caixa de ferramentas. **Prompt:** Assim que você liberar o elemento da tela, o aplicativo mostrará uma **nova tela em branco.** Você pode voltar para outras telas usando o menu suspenso na parte superior.\n\n[/] [0]\n\n## Defina as propriedades de uma tela\n\n\\[] [1]\n\n1.  Use esse menu suspenso para selecionar a tela na qual você deseja trabalhar. A lista conterá os IDs de todas as telas que você criou.\n2.  Clique em uma área em branco do plano de fundo para selecionar a tela e definir suas propriedades.\n3.  As telas também têm IDs. Como outros elementos da interface do usuário, é uma boa ideia _fornecer IDs descritivos e significativos_ às suas telas. Isso torna a escrita de código muito mais fácil.\n4.  Se sua tela estiver cheia de elementos da interface do usuário e não houver uma área em branco para clicar para selecioná-la, use esse menu suspenso. Ele lista todos os elementos da interface do usuário que fazem parte dessa tela, incluindo a própria tela.\n5.  Clique neste botão para tornar essa tela a “tela padrão”, o que significa a tela que será exibida primeiro quando o aplicativo for executado.\n6.  As telas não têm muitas propriedades, mas você pode definir o plano de fundo da tela para uma cor ou uma imagem. As imagens são esticadas ou comprimidas para caber na tela.\n\n[/] [1]\n\n\\[] [3]"
        },
        "csd-2022/naming-variables": {
          "display_name": "Nomeando Variáveis",
          "content": "Os rótulos variáveis devem ser significativos, mas você pode escolher praticamente qualquer rótulo que desejar. Existem apenas algumas regras e diretrizes que você deve conhecer.\n\n## Regras de nomenclatura\n\nExistem **algumas regras** ao escolher rótulos:\n\n-   Os rótulos **não podem incluir espaços**. Por exemplo, `largura do retângulo` geraria um erro.\n-   Os rótulos **não podem começar com um número**. `4sides` e `2morrow` gerarão erros.\n-   Tenha muito cuidado com **ortografia**. Se os rótulos não forem escritos exatamente da mesma maneira, o computador não perceberá que eles se referem à mesma variável.\n-   Os rótulos diferenciam maiúsculas de minúsculas. `size` não é o mesmo que `Size` ou `SIZE`.\n\n## Usando rótulos significativos\n\nAo ver uma variável em seu programa, você vai querer saber exatamente o que está nela sem precisar pesquisar. Certifique-se de rotular sua variável como algo significativo. `score` e `lives` são ótimos rótulos que dizem exatamente para que essa variável é usada. [`number` (#bbb3ce)] [0] e `a` não são tão úteis.\n\n## CamelCase\n\nEtiquetas com várias palavras podem ser mais fáceis de ler em **CamelCase**. Um rótulo CamelCase se parece com `SizeOfRectangle` ou `AreallyLongLabelName`. A primeira letra do nome da variável geralmente é minúscula, cada nova palavra começa com uma letra maiúscula. Isso ajuda você a ver o início de novas palavras sem usar espaços, que não são permitidos em nomes de variáveis.\n\n## usando\\\\ \\_underscores\n\nOutra forma comum de colocar várias palavras em um rótulo de variável é usar sublinhados entre as palavras. Ao usar sublinhados, os programadores geralmente não usam letras maiúsculas. Esses tipos de variáveis se parecem com `size_of_rectangle` ou `my_frog_sprite`.\n\n## Consistência\n\nA coisa mais importante quando você escolhe como rotular suas variáveis é usar um estilo consistente para que seja fácil lembrar a ortografia e a capitalização exatas de suas variáveis."
        },
        "csd-2022/other": {
          "display_name": "Outros",
          "content": "Essa categoria inclui outros conceitos úteis que podem não se encaixar em outras categorias."
        },
        "csd-2022/other-overview": {
          "display_name": "Visão Geral",
          "content": "Essa categoria inclui outros conceitos úteis que podem não se encaixar em outras categorias."
        },
        "csd-2022/patterns-overview": {
          "display_name": "Visão Geral",
          "content": "Esta página é a página inicial dos padrões de programação no desenvolvimento de aplicativos e, por si só, não contém nenhum conteúdo. Para ver diferentes padrões de programação, use a navegação à esquerda. Para perguntas sobre esta página, escreva para support@code.org."
        },
        "csd-2022/playing-notes": {
          "display_name": "Tocando Notas",
          "content": "Na música ocidental, representamos as “notas” na música com letras de A a G. Essas notas correspondem a frequências de tons específicas - na verdade, as mesmas frequências que usamos com a campainha. Você pode recriar suas músicas favoritas usando apenas as frequências apropriadas, mas o Maker Toolkit inclui um comando [`buzzer.note ()f78183`(#] [0] que procura os valores apropriados para você.\n\n## Frequências para notas\n\n<div style=\"float: right; margin: 20px;\" markdown=\"1\">\n\n| Frequência | Note que mapeia para |\n| ---------- | -------------------- |\n| 261        | C4                   |\n| 277        | C #4                 |\n| 293        | D4                   |\n| 311        | D #4                 |\n| 329        | E4                   |\n| 349        | F4                   |\n| 369        | F #4                 |\n| 392        | G4                   |\n| 415        | G #4                 |\n| 440        | A4                   |\n| 466        | A #4                 |\n| 493        | B4                   |\n| 523        | C5                   |\n\n</div>\n\nO gráfico à direita mostra um conjunto de notas começando com C4, também conhecido como C “médio”, e cada uma das frequências correspondentes das notas.\n\n## Notes\n\n[`buzzer.note ()f78183`(#] [1] simplifica isso. Em vez de passar uma frequência para tocar, como [`buzzer.frequency` (#f78183)] [2], basta dar a nota que você quer que seja tocada. Isso também pode incluir notas nítidas, desde que você inclua o “#” após a nota.\n\n## Oitavas\n\nA campainha pode tocar cada nota em uma das oito oitavas. Ao passar qualquer nota para o método [`buzzer.note ()f78183`(#] [3], você também incluirá a oitava em que deseja que a nota esteja. “C4\", por exemplo, se você quiser tocar a nota C média, “C1\" se quiser a nota C mais baixa possível e “C8\" se quiser a nota C mais alta possível. Se você não especificar isso, as notas serão reproduzidas automaticamente na 4ª oitava.\n\nPara obter o melhor som possível, você deve ficar na oitava 4. Qualquer coisa abaixo da 4ª ou maior que a 6ª oitava tende a soar distorcida na campainha."
        },
        "csd-2022/problem-solving-process": {
          "display_name": "O Processo de Resolução de Problemas",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nTer uma estratégia para abordar os problemas pode ajudar você a desenvolver novos insights e encontrar soluções novas e melhores. Esse é um processo iterativo que é amplamente útil para resolver todos os tipos de problemas.\n\n## Defina\n\n-   Determine o problema que você está tentando resolver\n-   Identifique suas restrições\n-   Descreva como será o sucesso\n\n## Prepare\n\n-   Faça um brainstorm/pesquise possíveis soluções\n-   Compare prós e contras\n-   Faça um plano\n\n## Experimente\n\n-   Coloque seu plano em ação\n\n## Reflita\n\n-   Compare seus resultados com as metas que você definiu ao definir o problema\n-   Decida o que você pode aprender com isso ou fazer melhor na próxima vez\n-   Identifique quaisquer novos problemas que você tenha descoberto"
        },
        "csd-2022/problem-solving-process-general": {
          "display_name": "O Processo de Resolução de Problemas",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nTer uma estratégia para abordar os problemas pode ajudar você a desenvolver novos insights e encontrar soluções novas e melhores. Esse é um processo iterativo que é amplamente útil para resolver todos os tipos de problemas.\n\n## Defina\n\n-   Determine o problema que você está tentando resolver\n-   Identifique suas restrições\n-   Descreva como será o sucesso\n\n## Prepare\n\n-   Faça um brainstorm/pesquise possíveis soluções\n-   Compare prós e contras\n-   Faça um plano\n\n## Tente\n\n-   Coloque seu plano em ação\n\n## Reflita\n\n-   Compare seus resultados com as metas que você definiu ao definir o problema\n-   Decida o que você pode aprender com isso ou fazer melhor na próxima vez\n-   Identifique quaisquer novos problemas que você tenha descoberto"
        },
        "csd-2022/random-numbers": {
          "display_name": "Números Aleatórios",
          "content": "## Usando Números Aleatórios\n\nO bloco `randomNumber ()`pode ser usado para gerar números aleatórios em seus programas. Os parâmetros definem os valores mínimo e máximo que podem ser gerados. Você pode usar esse bloco em qualquer lugar onde possa escrever um número.\n\n\\[] [0]\n\n_Este exemplo é como um dado que pode gerar aleatoriamente qualquer número de 1 a 6_\n\n## Desenho e Números Aleatórios\n\nVocê pode usar `randomNumber ()`como parâmetro nos comandos de desenho para criar desenhos aleatórios. Com o comando a seguir, seu programa pode gerar desenhos diferentes sempre que for executado.\n\n\\[] [1]\n\n| Corrida 1 | Corrida 2 | Corrida 3 |\n\\|n\\| <img src=\"https://images.code.org/246e7ac850015aa830d469b7eeb5f00e-image-1491523022253.50.04 PM.png\" style=\"float:left;width:150px\"> \\| <img src=\"https://images.code.org/01b10dc034475fd5a90bd3c7bd0c51b8-image-1491523025607.50.17 PM.png\" style=\"float:left;width:150px\"> \\| <img src=\"https://images.code.org/0f0c3cc4d42923dc4321809daf189053-image-1491523028093.50.49 PM.png\" style=\"float:left;width:150px\"> \\|\n\n## Vários Números Aleatórios\n\nSe você usar `randomNumber ()`várias vezes em seu programa, ele gerará novos números aleatórios a cada vez. Você pode pensar em cada `randomNumber ()`como um novo lançamento de um dado.\n\n\\[] [2]\n\n| Corrida 1 | Corrida 2 | Corrida 3 |\n\\|n\\| <img src=\"https://images.code.org/3ff0345b3ffdf3373e34053e696f7068-image-1491708429815.22.05 PM.png\" style=\"float: left; height: 150px;\"> \\| <img src=\"https://images.code.org/5721e766b1b85fbe817cf65f635f3d27-image-1491862776557.17.17 PM.png\" style=\"float: left; height: 150px;\"> \\| <img src=\"https://images.code.org/1fe406c05feb8bc2c135dac45152f881-image-1491862780106.18.05 PM.png\" style=\"float: left; height: 150px;\">\\|"
        },
        "csd-2022/responding-to-user-input": {
          "display_name": "Respondendo a Entradas de Usuário",
          "content": "O Modo Design facilita muito o layout da interface do usuário do seu aplicativo, mas precisaremos nos aprofundar no Modo de Código para que ele realmente responda aos usuários.\n\nNo Game Lab, o loop Draw apenas executava código constantemente, usando condicionais para verificar as interações do usuário. O App Lab, por outro lado, espera para responder a determinados **eventos** que ocorrem em um programa. É a maneira do App Lab de dizer “Ei! Algo acabou de acontecer!”. Isso significa que não precisa haver nenhum código em execução quando você não está interagindo diretamente com um aplicativo, e seu código pode responder a cada um desses eventos à medida que eles acontecem.\n\nNo App Lab, todo tratamento de eventos começa com a adição de um bloco especial de código chamado [`onEvent` (#fff176)] [1]. Veja como fazer isso:\n\n<img src=\"https://images.code.org/9b506faaaadf61338dc738a4eafb66b2-image-1476740205599.png\" />\n\n\\[] [0]\n\n1.  Mude para o Modo de Código\n2.  Arraste um bloco [`OnEvent` (#fff176)] [2] da caixa de ferramentas para a área de trabalho.\n3.  Use o menu suspenso para selecionar o _ID_ do elemento de interface do usuário que você deseja configurar para responder a algum evento. As IDs de todos os elementos da interface do usuário adicionados no modo de design serão listadas aqui.\n4.  Use o menu suspenso para selecionar o _tipo_ de evento ao qual você deseja responder. (Basta usar “clique” por enquanto).\n5.  Adicione código dentro da função que você deseja executar _quando_ o evento acontecer. A função será executada uma vez toda vez que o evento ocorrer.\n\n[/] [0]"
        },
        "csd-2022/shapes-and-parameters": {
          "display_name": "Formas e Parâmetros",
          "content": "Alguns blocos no Game Lab têm entradas, ou **parâmetros**, que não são usadas sempre.\n\n## Rect\n\nQuando você usou pela primeira vez o bloco [`rect` (#f78183)] [0], ele sempre criou um quadrado com lados iguais. Ele tinha duas entradas que você podia usar para especificar suas coordenadas x e y. [`rect` (#f78183)] [1] também tem mais dois **parâmetros opcionais**. Esses parâmetros são usados para especificar sua largura e altura. Você pode usar as setas no lado direito do bloco para mostrar ou ocultar esses parâmetros opcionais.\n\n## Ellipse\n\nA elipse também tem parâmetros opcionais para sua largura e altura após os parâmetros x e y. Você pode mostrar ou ocultar esses parâmetros opcionais com a seta no lado direito do bloco, assim como no bloco [`rect` (#f78183)] [2]."
        },
        "csd-2022/sprite-interactions": {
          "display_name": "Interações com Sprites",
          "content": "A maioria dos jogos envolverá sprites colidindo uns com os outros. Há quatro tipos de colisões disponíveis no Game Lab: [`displace` (#f78183)] [0], [`collide` (#f78183)] [1], [`bounce` (#f78183)] [2] e [`BounceOff` (#f78183)] [3]. Esses blocos causarão um certo tipo de interação entre o sprite e seu alvo e devem ser usados dentro da função [`draw` (#fff176)] [4].\n\n### Displace\n\n<img src=\"http://curriculum.code.org/media/uploads/displace2.gif\" style=\"width: 200px; float:right; margin: 10px 50px;\">\n\n[`displace` (#f78183)] [5] faz com que um sprite empurre outro sprite (o _target_), contanto que eles estejam se tocando.\n\n<pre>\nfunction draw () {\n\nbackground (“skyblue”);\nbunny.displace (cenoura);\ndrawSprites ();\n\n}\n\n</pre>\n\n### Collide\n\n<img src=\"http://curriculum.code.org/media/uploads/collide.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`collide` (#f78183)] [6] faz um sprite parar quando se depara com coisas. Você pode usá-lo quando quiser que seu sprite seja bloqueado por obstáculos.\n\n<pre>\nfunction draw () {\n\nbackground (“black”);\nalien.collide (monster);\ndrawSprites ();\n\n}\n\n</pre>\n\n### Bounce\n\n<img src=\"http://curriculum.code.org/media/uploads/bounce.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`bounce` (#f78183)] [7] faz o sprite e o alvo saltarem quando se tocam. Tanto o sprite quanto o alvo mudam a forma como eles se movem.\n\n<pre>\nfunction draw () {\n\nbackground (“lightgreen”);\ngiraffe.bounce (hipopótamo);\nelephant.bounce (porco);\nsnake.bounce (macaco);\ndrawSprites ();\n}\n\n</pre>\n\n### BounceOff\n\n<img src=\"http://curriculum.code.org/media/uploads/bounceoff.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[`BounceOff` (#f78183)] [8] faz o sprite ricochetear no alvo quando eles se tocam. O alvo continua se movendo como antes.\n\n<pre>\nfunction draw () {\n\nbackground (“pink”);\nNote.bounceOff (guitarra);\ndrawSprites ();\n\n}\n\n</pre>"
        },
        "csd-2022/sprite-properties": {
          "display_name": "Propriedades do Sprite",
          "content": "Se você pensa em um _sprite_ como uma coleção de valores que representa um objeto no mundo real, então as _propriedades_ de um sprite são como variáveis que contêm todos esses valores. Algumas das propriedades de sprite mais comuns incluem:\n\n\\[] [0]\n\n\\[] [1]\n\n\\[] [2]\n\n\\[] [3]\n\n\\[] [4]\n\n## Notação de Pontos\n\nObserve que todos os exemplos acima seguem um padrão comum de **sprite label. sprite property**. Chamamos esse formato de _notação de pontos_. A primeira parte será _sempre_ exclusiva do sprite que você deseja modificar, e a segunda parte será _sempre_ uma das propriedades comuns a todos os sprites.\n\n## Propriedades de Leitura e Escrita\n\nAs propriedades do Sprite, como variáveis, são valores que às vezes queremos apenas ler e às vezes queremos escrever. Quando você arrasta uma propriedade de sprite, ela assume uma forma diferente, dependendo se você está _lendo_ seu valor ou _escrevendo_.\n\n\\[] [5]\n\nNa primeira imagem acima, o bloco [`sprite.x` (#f78183)] [6] está sendo arrastado para um local onde está sendo lido, então ele mantém sua forma normal.\n\nNa segunda imagem, o bloco [`sprite.y` (#f78183)] [7] está sendo arrastado para uma nova linha na qual será gravado, então ele é alterado para o formato `sprite.y = ___`."
        },
        "csd-2022/sprites": {
          "display_name": "Sprites",
          "content": "Um _sprite_ é o nome que damos a uma coleção de valores no Game Lab que representa um personagem em uma história, animação ou jogo. Um _sprite_ pode ser armazenado em uma variável com um rótulo, mas diferentemente dos valores que você armazenou em variáveis antes, como números, um _sprite_ permite armazenar muitos valores relacionados sob o mesmo rótulo\n\n# Criando um Sprite\n\nVocê pode criar um novo _sprite_ usando o bloco [`createSprite ()f78183`(#] [1].\n\n\\[] [2]\n\n\\[] [0]\n\n1.  O _sprite_ conforme desenhado na tela. Nesse caso, nosso _sprite_ está localizado em (200, 200), no centro da tela, e recebeu a animação “bunny”\n2.  O bloco [`createSprite ()f78183`(#] [3], que cria um novo _sprite_ em (200, 200) e o atribui ao rótulo da variável `my_bunny`. Observe que apenas criar o _sprite_ **não** ainda o desenha na tela. Isso acontecerá mais tarde.\n3.  O bloco `sprite.setAnimation ()`atribui uma animação (ou imagem) ao _sprite_. Nesse caso, estamos usando uma animação chamada “coelho”, que foi adicionada na guia de animação. Observe que, em vez do nome de variável padrão `sprite`, nós o atualizamos para `my_bunny.setAnimation ()`para que ele altere a animação do `my_bunny` _sprite_.\n4.  Como _sprites_ são apenas valores armazenados como variáveis, eles não são desenhados automaticamente na tela. O bloco [`drawSprites ()fff176`(#] [4] diz ao Game Lab que desenhe todos os _sprites_ que foram criados na tela.\n\n[/] [0]"
        },
        "csd-2022/the-accelerometer": {
          "display_name": "O Acelerômetro",
          "content": "<img src=\"https://curriculum.code.org/media/uploads/cp_accel.png\" style=\"float: right; margin: 20px; width: 300px;\">\n\nA maioria das entradas fornecidas pelo Circuit Playground ou micro:bit são dispositivos relativamente simples, que fornecem um único valor. O acelerômetro é um tipo de sensor mais complexo, que mede várias coisas diferentes ao mesmo tempo e, portanto, fornece informações mais complexas ao usuário.\n\nUm acelerômetro é comumente usado para detectar movimento e posição em dispositivos como laptops, telefones, controladores de realidade virtual e rastreadores de saúde. Por exemplo, os pedômetros usam o movimento dos acelerômetros para rastrear quantos passos você dá.\n\n## Orientação de medição\n\nO acelerômetro pode determinar a _orientação_ da placa para descobrir como ela está posicionada.\n\n| Orientação     | Tipo de movimento que está sendo monitorado | Faixa de valores |\n| -------------- | ------------------------------------------- | ---------------- |\n| **Inclinação** | Movimento para frente e para trás           | -90 a 90         |\n| **Roll**       | Movimento lateral                           | -90 a 90         |\n| **Inclinação** | Movimento rotacional                        | -180 a 180       |\n\n<br>\n\nUsando o bloco [`Accelerometer.getOrientation ()f78183`(#] [0], escrevemos programas que respondem às mudanças de inclinação, rotação e inclinação. Esse bloco retorna um número para cada uma dessas orientações, o que indica em que direção a prancha está inclinada. Por exemplo, o tom é positivo quando está sendo inclinado para trás e negativo quando está inclinado para frente.\n\n<div style=\"clear:both;\"></div>\n\n<img src=\"https://images.code.org/1f7f2429d4994c541d3cfea784bf6eb8-Micro_bit Accelerometer.png\" style=\"float: right; margin: 20px; width: 300px;\">\n\n## Eventos do acelerômetro\n\nAssim como os outros sensores, o acelerômetro tem os eventos `dados` e `alteração`. Eles são particularmente úteis porque permitem que você acompanhe constantemente os valores atualizados do acelerômetro, como a orientação.\n\n| Evento | Descrição |\n| ------ | --------- |\n\nIsso verifica se os dados atuais do sensor são os mesmos de 100 ms atrás. Se for esse o caso, o evento não será acionado. Caso contrário, o evento será acionado. |\n\\| `sacudida` | Dispara sempre que o tabuleiro é sacudido. |\n\nÀs vezes, não nos importamos com a orientação do tabuleiro, apenas nos importamos com o fato de ele se mover. É aqui que eventos como `change` e `shake` entram."
        },
        "csd-2022/the-counter-pattern": {
          "display_name": "O Counter Pattern",
          "content": "No Game Lab, contamos com o _counter pattern_ para atualizar continuamente as propriedades do sprite e criar animações. Embora os elementos no App Lab não tenham os mesmos tipos de propriedades que os sprites, ainda podemos aplicar o padrão de contador para criar algumas animações simples.\n\n\\[] [0]\n\nComo o loop de desenho no Game Lab, eventos de “dados” executam um único bloco de código repetidamente. Como esses eventos executam código repetidamente, você pode usar o padrão do contador dentro de um evento de “dados” para trazer um movimento simples ao seu programa. Você está usando o evento de dados para rastrear o próprio acelerômetro, mas para criar programas mais complexos, precisará atualizar valores adicionais fora do acelerômetro.\n\n## Movendo elementos de design com o padrão de contador\n\n<img src=\"https://curriculum.code.org/media/uploads/anchor.gif\" style=\"float: right; width: 300px; margin-left: 20px;\">\n<img src=\"https://curriculum.code.org/media/uploads/counter_pattern.png\" style=\"max-width: 500px;\">\n\nO código acima usa o padrão do contador em um evento de “dados” para mover um elemento de design pela tela. Para tornar nosso código mais legível, salvamos a posição atual do valor “y” de “âncora” em uma variável antes de usá-la no padrão do contador, mas você também pode escrever o padrão como:\n\n`setProperty (“anchor”, “y”, getProperty (“anchor”, “y”) + 1);`"
        },
        "csd-2022/the-counter-pattern-2": {
          "display_name": "O Counter Pattern",
          "content": "Aumentar ou diminuir números é um padrão comum e incrivelmente útil na programação. Esse “counter pattern” pode ser usado para fazer uma imagem voar pela tela, para fazer uma contagem regressiva de um cronômetro ou para acompanhar os cliques. Usado com uma variável [`x` (#f78183)] [1] para contar até um, o Counter Pattern pode ter a seguinte aparência:\n\n\\[] [2]\n\nToda vez que esse código for executado, ele pegará o valor atual de x, adicionará 1 e o salvará como o novo valor de x. Embora essa instância específica do Counter Pattern use adição, você também pode usar a subtração para fazer a contagem regressiva.\n\n## Movimento com o Counter Pattern\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_code.png\" style=\"float: left;\">\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_pattern.gif\" style=\"float: right;\">\n\n\\[] [0]\n\nO código acima usa o counter pattern no loop de desenho para mover três sprites. Observe que cada um dos três sprites se move de forma diferente dependendo se você atualiza o [`x` (#f78183)] [3], [`y` (#f78183)] [4] do sprite ou ambos.\n\n[/] [0]\n\n## Outros usos do counter pattern\n\nQualquer bloco que receba um número como entrada pode ser animado usando o counter pattern no loop de desenho. Veja os três exemplos a seguir, cada um dos quais usa o counter patternr para animar um aspecto diferente da imagem. Abaixo de cada imagem está um exemplo do código que foi usado _dentro do Draw Loop_ para produzir a animação.\n\n<div markdown=1 style=\"float: left; margin: 10px; width: 30%\">\n\n\\[] [5]\n\n    sprite.rotation = sprite.rotation - 1;\n\n</div>\n\n<div markdown=1 style=\"float: left; margin: 10px; width: 30%\">\n\n\\[] [6]\n\n    sprite.scale = sprite.scale + 0.1;\n\n</div>\n\n<div markdown=1 style=\"float: left; margin: 10px; width: 30%\">\n\n\\[] [7]\n\n    largura = largura + 1;\n    altura = altura - 1;\n    elipse (200, largura, altura);\n\n</div>"
        },
        "csd-2022/the-draw-loop": {
          "display_name": "O Draw Loop",
          "content": "## Animações\n\n\\[] [0]\n\nUma animação usa uma série de imagens para criar a ilusão de um movimento suave. Cada imagem individual é chamada de moldura. Normalmente, você precisará ver pelo menos vários quadros por segundo para que o movimento pareça suave.\n\n## O Draw Loop\n\n\\[] [1]\n\nPara criar animações, você precisará de uma maneira de continuar desenhando quadro após quadro. No Game Lab, isso é feito usando a função [`draw` (#fff176)] [2]. A forma como os programas são executados no Game Lab é\n\n1.  Execute cada parte do código fora de [`draw` (#fff176)] [3]\n2.  Continue executando o código dentro de [`draw` (#fff176)] [4] repetidamente, 30 vezes por segundo\n\nCada vez que o código dentro de [`draw` (#fff176)] [5] é executado como uma nova página em um flipbook. Ao fazer pequenas alterações no que é desenhado a cada vez, você pode usar o Game Lab para criar animações.\n\n## Desenhe um loop com formas\n\n| Código | Animação |\n| ------ | -------- |\n\n <img src=\"https://images.code.org/4fb785c73362acbcad5639fb74706b38-image-1492194379719.gif\" style=\"float:right;height:150px\">\n\n# fff176 O programa continuará desenhando pontos em locais aleatórios para sempre.\n\n## Desenhe um loop com Sprites\n\n| Código | Animação |\n| ------ | -------- |\n\n <img src=\"https://images.code.org/b2c4dc68aa90fc1b56421ec69a66fa77-image-1492196934112.gif\" style=\"height:150px\">\n\nEm seguida, ele dá repetidamente ao sprite uma nova localização x e redesenha o fundo laranja e o sprite para fazê-lo se mover."
        },
        "csd-2022/variables": {
          "display_name": "Variáveis",
          "content": "Uma variável permite armazenar um único valor na memória do seu computador com um nome descritivo. O uso de variáveis permite que você se refira facilmente ao mesmo valor várias vezes em seu programa ou salve um número ao qual gostaria de se referir posteriormente.\n\n## Criando variáveis\n\n\\[] [0]\n\nO comando `var` criará uma nova variável com o rótulo que você deu a ela. Essa variável tem o rótulo `size`.\n\n## Atribuindo valores\n\n\\[] [1]\n\nO operador de atribuição `=` atribuirá um novo valor à sua variável. Esse comando atribuiu 100 à variável `size`. A variável deve estar sempre no lado esquerdo. Você leria esse comando como “size gets 100\", já que size está recebendo um novo valor de 100. Quaisquer valores antigos que possam ter sido atribuídos são perdidos para sempre.\n\n## Usando um valor\n\n\\[] [2]\n\nPara usar o valor de uma variável, coloque seu rótulo no local do código em que você deseja usá-lo. Esse comando usa o valor em `size` para definir a largura e a altura da elipse.\n\n## Inicializando\n\n\\[] [3]\n\nNormalmente, você deve dar a uma variável seu primeiro valor (ou “inicial”) imediatamente. Você pode inicializar uma variável em um único comando combinando os comandos `var` e `=`.\n\nDepois de inicializar uma variável, você não precisa usar o comando `var` para atribuir um novo valor. Basta usar o `=` normalmente.\n\n\\[] [4]"
        },
        "csd-2022/velocity": {
          "display_name": "Velocidade",
          "content": "Os blocos de velocidade ([`VelocityX` (#f78183)] [1] e [`VelocityY` (#f78183)] [2]) indicam aos sprites o quão rápido devem se mover em uma direção específica, assim como o padrão do contador fazia antes. Ao ocultar o código padrão do contador dentro de um bloco, você pode criar programas ainda mais complexos.\n\n# Movimento com velocidade\n\nO código que usa o padrão do contador está à esquerda e o código que usa os blocos de velocidade está à direita.\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_code.png\" style=\"float: left;\">\n<img src=\"https://curriculum.code.org/media/uploads/velocity.png\" style=\"width: 350px; float: right;\">\n\n\\[] [0]\n\nCom [`VelocityX` (#f78183)] [3] e [`VelocityY` (#f78183)] [4], você pode definir as velocidades dos sprites ao criá-los pela primeira vez, mas ambos os programas farão com que os sprites se movam como na figura abaixo.\n\n[/] [0]\n\n<img src=\"https://curriculum.code.org/media/uploads/counter_pattern.gif\" style=\"float: left;\">"
        },
        "csd-2022/velocity-and-the-counter-pattern": {
          "display_name": "Velocidade e o Counter Pattern",
          "content": "Você pode usar as propriedades de velocidade de um sprite com o padrão do contador para alterar a velocidade de um sprite durante o programa. Isso faz com que o sprite acelere ou diminua.\n\n## Acelerando\n\nPara acelerar um sprite que tem uma velocidade **positiva**, você precisa **adicionar** à velocidade dentro do padrão do contador. Para acelerar um sprite com uma velocidade **negativa**, você precisa **subtrair** da velocidade dentro do padrão do contador.\n\n### Indo para Cima\n\n<img src=\"http://curriculum.code.org/media/uploads/accup.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nflybot.velocityY = -1;\n\nfunction draw () {\n  background (“black”);\n  flybot.velocityY = flybot.velocityY - 1;\n  drawSprites (); \n}\n\n</pre>\n\n### Indo para Baixo\n\n<img src=\"http://curriculum.code.org/media/uploads/accdown.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nbone.velocityY = 1;\n\nfunction draw () {\n  background (“black”);\n  bone.velocityY = bone.velocityY + 1;\n  DrawSprites ();\n}\n\n</pre>\n\n### Indo para Esquerda\n\n<img src=\"http://curriculum.code.org/media/uploads/accleft.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nCart.velocityX = -1;\n\nfunction draw () {\n  background (“black”);\n  cart.velocityX = carrinho. VelocityX - 1;\n  drawSprites ();\n}\n\n</pre>\n\n### Indo para Direita\n\n<img src=\"http://curriculum.code.org/media/uploads/accright.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nrobot.velocityX = 1;\n\nfunction draw () {\n  background (“black”);\n  Robot.velocityX = robot.velocityX + 1;\n  drawSprites ();\n}\n\n</pre>\n\n## Desacelerando\n\nPara desacelerar um sprite que tem uma velocidade **positiva**, você precisa **subtrair** da velocidade dentro do padrão do contador. Para desacelerar um sprite com uma velocidade **negativa**, você precisa **adicionar** à velocidade dentro do padrão do contador. Depois que um sprite diminuir a velocidade até parar, ele começará a acelerar na outra direção. Isso pode fazer com que pareça que seu sprite está pulando ou foi jogado no ar.\n\n### Indo para Cima\n\n<img src=\"http://curriculum.code.org/media/uploads/decup.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nbone.velocityY = -25;\n\nfunction draw () {\n  background (“black”);\n  bone.velocityY = bone.velocityY + 1;\n  drawSprites ();\n}\n\n</pre>\n\n### Indo para Direita\n\n<img src=\"http://curriculum.code.org/media/uploads/decright.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\ncart.velocityX = 25;\n\nfunction draw () {\n  background (“black”);\n  cart.velocityX = cart.velocityX - 1;\n  drawSprites ();\n}\n\n</pre>\n\n## Parando seu sprite\n\nSe você quiser que seu sprite pare, em vez de começar a se mover na outra direção, você precisará usar uma condicional para verificar se o sprite está se movendo na direção correta antes de usar o padrão de contador e parar o sprite se não estiver.\n\n<img src=\"http://curriculum.code.org/media/uploads/decdown.gif\" style=\"float: right; width: 200px; margin: -10px 10px;\">\n\n<pre>\n\nPlane.velocityY = 25;\n\nfunction draw () {\n  background (“black”);\n  if (plane.VelocityY > 0) {\n    plane.VelocityY = plane.VelocityY - 1;\n  }\n  drawSprites ();\n}\n\n</pre>"
        },
        "csd-2022/web-lab": {
          "display_name": "Web Lab",
          "content": "# Web Lab\n\nPara ajudá-lo a ter sucesso ao usar nossa ferramenta, você encontrará algumas perguntas comuns que os usuários tiveram com o Web Lab.\n\n## Informações gerais\n\n### The Inspector Tool\n\nA Inspector Tool é uma ótima maneira de aprender mais sobre códigos desconhecidos no Web Lab. Para ativar a Ferramenta Inspector, clique em <img src=\"https://images.code.org/188579d7c6e7645d0d2edd203a33bd63-image-1480361561351.31.56 PM.png\" style=\"width:100px\">. Você saberá que a Ferramenta Inspetora está ativada porque o botão ficará branco e dirá “Inspetor: Ativado”. Depois de ativar a Ferramenta Inspector, você pode passar o mouse sobre qualquer coisa na área de visualização e o Web Lab destacará o código que está fazendo essa parte da página aparecer.\n\n\\[] [0]\n\n### Organização do arquivo\n\nVocê notará que os arquivos são codificados por cores de acordo com o tipo e têm novos ícones. Espero que isso torne mais fácil diferenciar rapidamente um arquivo CSS, um arquivo HTML ou uma imagem.\n\n<img src=\"https://images.code.org/64255c7e081f479a042e9e23e5bb1cf2-fileOrg.png\" style=\"width:100px\">\n\n### Seletor de código\n\nAo adicionar cores em um arquivo CSS, você notará um ícone roxo que aparece quando você clica no nome de uma cor. Esse ícone abre um widget seletor de cores, o que facilita a seleção de novas cores para o seu site. Veja isso em ação abaixo!\n\n<img src=\"https://images.code.org/c54abfd05f80fee79cfd9489bd1bcb59-filter.gif\" style=\"width:400px\">\n\n### Metadados e filtros de imagem\n\nDepois de fazer o upload de uma imagem, você pode ver informações adicionais sobre a imagem, como suas dimensões, código inicial para usar a imagem em seu projeto e cores proeminentes que aparecem na imagem. Também há um recurso interessante para aplicar filtros à imagem diretamente no Web Lab. Veja-os em ação abaixo!\n\n<img src=\"https://images.code.org/0aae6fadac85f866dbf88c7beca6f541-Image.gif\" style=\"width:400px\">\n\n### Limites de tamanho do projeto\n\nO Web Lab agora tem um limite para o tamanho dos projetos - no máximo 20 MB. Você pode acompanhar o tamanho dos seus projetos usando o medidor de progresso na parte superior de cada projeto. A maioria dos projetos permanecerá abaixo desse limite, a menos que você esteja usando muitas imagens. Nesse caso, talvez você queira usar um programa externo de hospedagem de imagens.\n\n<img src=\"https://images.code.org/8e88dc0ed5bdab512f7a02a39c7ac7cf-projectSize.png\" style=\"width:200px\">\n\n## Perguntas frequentes\n\n1.  **Por que o HTML parece funcionar mesmo quando está quebrado?**\n    -   O HTML é lido pelo seu navegador para gerar páginas da web. Como as pessoas geralmente cometem pequenos erros ao escrever suas páginas da web, os navegadores são programados para fazer uma “melhor suposição” do que você pretendia fazer. Às vezes, navegadores diferentes são até programados para fazer suposições diferentes! A única maneira de garantir que seu código tenha a aparência pretendida é garantir que você esteja sempre usando as tags corretamente.\n2.  **Por que o código às vezes fica rosa?**\n    -   O Web Lab está programado para detectar automaticamente alguns erros em HTML. Quando ele percebe um erro, ele transforma o código em rosa. O erro pode estar em rosa ou em algum lugar antes do código rosa. Você precisará depurar cuidadosamente para encontrar seu erro.\n3.  **Como faço para alternar entre arquivos?**\n    -   Clique no nome do arquivo que você deseja ver no menu no lado esquerdo da tela.\n4.  **Como faço para renomear um arquivo?**\n    -   Para renomear um arquivo, você pode clicar com o botão direito do mouse (ou clicar pressionando a tecla Control) no nome do arquivo e escolher a opção “Renomear”. Isso permitirá que você digite um novo nome de arquivo. Clicar no nome de um arquivo depois que ele já estiver destacado também permitirá que você renomeie o arquivo"
        },
        "csd-2022/which-type-of-chart": {
          "content": "![](https://curriculum.code.org/media/uploads/Screenshot-2020-02-27-at-10.56.17-PM.png)",
          "display_name": "Que tipo de gráfico?"
        },
        "csd-2022/accuracy-in-ai-lab": {
          "display_name": "Precisão no IA Lab",
          "content": "## Precisão no IA Lab\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/03-Evaluating-Accuracy---Categorical---a.png\"/>\n\n\\[] [0]\n\n1.  A linha superior é a pontuação de precisão do seu modelo mais recente no IA Lab. Veja abaixo mais informações sobre como a precisão é calculada.\n2.  Você também pode ver os modelos anteriores que você treinou no IA Lab. Isso pode ajudar você a perceber padrões e lembrar quais recursos resultaram em modelos mais precisos.\n3.  Clique no botão Detalhes para ver mais informações sobre o desempenho do seu modelo\n\n[/] [0]\n\n## Como a precisão é calculada?\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/image_81IyXga.png\" width=\"50%\" />\n<p>\nDepois de selecionar seus rótulos e recursos, os dados são automaticamente divididos em duas seções: <strong>Training Data</strong> e <strong>Testing Data</strong>.\n</p>\n<p>\nO <strong>Training Data</strong> é o que o IA Bot usa para procurar padrões que o ajudem a tomar decisões. Como o AI Bot precisa de muitos dados para tomar decisões, ele usa 90% do conjunto de dados original para treinar. Os dados de teste <strong></strong> são mantidos ocultos do IA Bot até que todo o treinamento termine.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:right; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/image_EygFTNF.png\" width=\"50%\" />\n<p>\nQuando o IA Bot termina o treinamento, ele examina os dados de teste <strong></strong> para poder comparar suas previsões com os dados originais. É como estudar para um teste analisando questões práticas nas quais você sabe as respostas: você mesmo tenta as perguntas e verifica suas respostas para ver se você se saiu bem.\n</p>\n<p>\nÉ assim que obtemos nossa pontuação de precisão - é o desempenho das previsões do IA Bot quando as comparamos com os dados do conjunto de dados original. Se o IA Bot acertou a maioria das respostas, podemos ter certeza de que o IA Bot encontrou os padrões que correspondem aos nossos dados originais.\n</p>\n</div>\n\n## Qual a importância da precisão?\n\nA precisão pode fazer um bom trabalho ao verificar se seu modelo de aprendizado de máquina foi bem-sucedido em encontrar padrões em seus dados, mas isso nem sempre significa que seu modelo está pronto para começar a resolver problemas no mundo real. Uma alta pontuação de precisão não significa que seu modelo fará um bom trabalho no mundo real com usuários reais - significa apenas que ele fez um bom trabalho <em>com os dados que você já tinha</em>. Se houver problemas com seus dados, ainda haverá problemas com seu modelo.\n\n## Vídeo\n\n(abre o YouTube em uma nova guia)\n\n\\[[Treinamento e teste no laboratório de IA] [2]] [1]"
        },
        "csd-2022/ai-lab": {
          "display_name": "Laboratório de IA"
        },
        "csd-2022/analog-sensors": {
          "display_name": "Sensores Circuit Playground",
          "content": "## Luz, som e Temperatura\n\nO Circuit Playground tem três sensores analógicos básicos, cada um dos quais pega uma entrada analógica e a converte em um valor que pode ser usado pelo computador.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp_sensors.png\" alt=\"analog sensors\" class=\"center\" style=\"width: 500px;\">\n\n1.  O [`LightSensor` (#f78183)] [0] mede o quão claro ou escuro ele é. Quando está muito escuro, [`lightSensor.value` (#f78183)] [1] é 0, e quando está muito claro, o valor é 1023. \n2.  O [`TempSensor` (#f78183)] [2] verifica a temperatura e a mostra em Fahrenheit ([`TempSensor` (#f78183)] [3]) ou Celsius ([`TempSensor.c` (#f78183)] [4]). \n3.  O [`SoundSensor` (#f78183)] [5] mede a intensidade dos ruídos, mas não consegue gravar sons como um microfone. Também fornece um valor de 0 a 1023.\n\n## Lendo dados do sensor\n\nPara ler os dados dos sensores de som e luz, você pode usar a propriedade “value” (como [`SoundSensor.value` (#f78183)] [6]). Se o intervalo de 0 a 1023 não for o que você precisa, você pode alterar o intervalo usando o método setScale (). Por exemplo, [`SoundSensor.setScale (-50, 50)f78183`(#] [7] faz com que o sensor de som mostre valores entre -50 e 50. O sensor de temperatura já mostra a temperatura de uma forma fácil de entender.\n\n## Sensibilidade do sensor\n\nOs sensores em suas placas não são perfeitos e podem fornecer leituras ligeiramente diferentes em placas diferentes. Se você precisar que seu programa funcione bem com placas diferentes, você pode escrever um código que permite ajustar os sensores. Se seu aplicativo executa código quando a leitura de um sensor ultrapassa um determinado valor, transforme esse valor em uma variável que possa ser alterada pelo usuário. Dessa forma, o usuário pode alterar a variável para que o aplicativo funcione melhor com sua placa."
        },
        "csd-2022/body-styling": {
          "display_name": "Estilo Corporal",
          "content": "O elemento `<body>` é um elemento especial que envolve todo o conteúdo visível em uma página da web. Como tudo o que você vê está dentro dessa tag, qualquer conjunto de regras que você criar para o elemento body será aplicado a cada elemento na página, a menos que o próprio elemento tenha uma regra que a contradiga. Isso é útil para estabelecer um estilo básico para tudo na sua página.\n\n## Exemplo\n\nEsse conjunto de regras deixaria todo o texto em sua página da web azul e centralizado.\n\n    body {\n        text-align: center;\n        color: azul;\n    }\n\n## FAQ\n\n1.  \\*\\*O que o seletor corporal faz? \\*\\*\n    -   Como o conteúdo da página da web está todo dentro da tag `body`, o **seletor de corpo** fornece regras de estilo para _tudo_ na página da web."
        },
        "csd-2022/checking-multiple-conditions-with-if-else-if": {
          "display_name": "Verificando Várias Condições com If-Else-If",
          "content": "| Nome                                        | Código (bloco) | Código (texto) |\n| ------------------------------------------- | -------------- | -------------- |\n| Verificando várias condições com If-Else-If | \\[] [0]        | \\[] [1]        |\n\n## Como funciona?\n\nO comando 'if-else-if' permite verificar várias condições booleanas. O computador verificará as condições na ordem em que foram escritas até que uma das expressões booleanas seja avaliada como 'verdadeira'. O código associado a essa expressão booleana será executado, mas todos os outros serão ignorados. Se nenhuma das expressões for avaliada como 'verdadeira', o código dentro do comando 'else' será executado.\n\n## Os Casos Mais Específicos em Primeiro Lugar\n\nAo escrever uma declaração if-else-if, você deseja colocar os casos mais específicos em primeiro lugar. No exemplo de temperatura acima, você deve primeiro verificar se há temperaturas acima de 100 graus. Depois, o código verifica se há temperaturas acima de 90 graus, mas devido à ordem em que o código foi escrito, você sabe que nenhuma das temperaturas que encontrará vai estar acima de 100 graus. Afinal, você os teria detectado na declaração if anterior. Isso significa que você pode ter certeza de que qualquer temperatura que você atingir estará entre 90 e 100 graus. Ao continuar com a instrução if-else-if, você usa a mesma lógica para verificar diferentes faixas de temperatura.\n\n## Um Exemplo Incorreto: A Maioria dos Casos Específicos em Último Lugar\n\nEste é um exemplo incorreto que mostra o que acontece se você começar a verificar as temperaturas na ordem inversa e a maioria dos casos específicos por último.\n\n\\[] [2]\n\nPense no que aconteceria quando esse código funcionasse para a temperatura de 82 graus. O esperado é que a saída dissesse \"Está quente\". No entanto, se você observar a primeira expressão booleana, notará que 82 é maior que 60 graus, fazendo com que essa expressão booleana seja avaliada como 'verdadeira'. Como resultado, o código exibirá \"It's cool\". Isso ocorre porque a primeira expressão não é de fato a mais específica."
        },
        "csd-2022/circuit-playground-parent": {
          "display_name": "Parque Infantil Adafruit Circuit",
          "content": "Esses recursos fazem referência a recursos apresentados especificamente no [Circuit Playground] [0]."
        },
        "csd-2022/circuits-and-buttons": {
          "display_name": "Botões externos no Circuit Playground",
          "content": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png\" alt=\"Button Up and Down\" style=\"width:300px; float: right; margin: 0 20px;\">\n\nPara criar um botão ou um interruptor, você só precisa de um circuito que possa ser facilmente conectado e desconectado. Como um circuito de LED, um circuito de botão pode ser criado conectando um fio a um pino de dados e outro fio a um pino de aterramento. Para “fechar” o circuito (que é como pressionar um botão), você conecta os dois fios, tocando-os um no outro ou conectando-os a um hardware (como um botão ou interruptor) que pode ser usado para abrir e fechar o circuito. Um botão “aberto” é equivalente ao evento “up” do botão, enquanto um circuito “fechado” é como o evento “down” do botão.\n\nCom uma placa Circuit Playground Express, você pode criar um circuito de botões em qualquer um dos pinos **\"A6\"**, **\"A5\"**, **\"A4\"**, **\"A0\"** ou **\"A1\"**\n\nCom uma placa Circuit Playground Classic, você pode criar um circuito de botões em qualquer um dos pinos **0**, **2**, **3**, **6** e **12**.\n\n<div style=\"clear: both\"></div>\n\n## Criando circuitos de botões\n\nPara criar um circuito de botões, você precisará de um pino de dados, dois fios e um pino de aterramento.\n\n-   Conecte um fio ao seu pino de dados numerado.\n-   Conecte um fio diferente a um pino de aterramento.\n\n## Codificando um circuito de botões (Circuit Playground Express)\n\n    \\\\ Crie um pino conectado ao botão A5\n    var myButton = createButton (“A5\");\n\n    \\\\ Adicione um manipulador de eventos ao novo botão\n    OnboardEvent (myButton, “down”, function () {\n    \tconsole.log (“button pressed”);\n    });\n\n## Codificando um botão Circuit (Circuit Playground Classic)\n\n    \\\\ Crie um botão conectado ao pino 0\n    var myButton = createButton (0);\n\n    \\\\ Adicione um manipulador de eventos ao novo botão\n    OnboardEvent (myButton, “down”, function () {\n    \tconsole.log (“button pressed”);\n    });"
        },
        "csd-2022/circuits-and-leds": {
          "display_name": "LEDs Externos no Circuit Playground",
          "content": "<img alt=\"Circuit Playground Data Pins\" src=\"https://images.code.org/6821153181b10ce9d5fdc1459beb4445-image-1643339359352.png\" style=\"width:400px; float: right; margin: 0 20px\">\n\nUsando os pads numerados no Circuit Playground, você pode criar seus próprios circuitos que incluem componentes externos, como LEDs e botões. As especificidades de como um circuito é conectado dependem do hardware específico que você está tentando adicionar, mas todos os circuitos usarão algumas combinações de pinos de alimentação (que fornecem energia), pinos de aterramento (que são o ponto final de um circuito) e pinos de dados numerados (que podem enviar um sinal de saída ou ler uma entrada). \\_Atenção: \\_ Alguns dos pinos de dados são reservados para funções especiais na placa, portanto, ao criar seus próprios circuitos, certifique-se de usar apenas os seguintes pinos:\n\nCom uma placa Circuit Playground Express, use apenas os pinos **\"A6\"**, **\"A5\"**, **\"A4\"**, **\"A0\"** ou **\"A1\"**\n\nCom uma placa Circuit Playground Classic, use apenas pinos **0**, **2**, **3**, **6** e **12**.\n\n## Criando circuitos de LED\n\nUm dos circuitos mais simples que você pode fazer com o Circuit Playground é adicionar um LED. Para criar esse circuito, você precisará de um pino de dados, dois fios e um pino de aterramento.\n\n-   Conecte um fio do pino de dados ao lado positivo (**+**) do LED.\n-   Conecte um fio diferente do lado negativo (**-**) do LED a qualquer pino de aterramento.\n-   Usando o código, defina o pino escolhido para “saída” e ligue-o:\n\n## Codificando um circuito de LED (Circuit Playground Express)\n\n    //Crie um LED conectado ao pino A5\n    var myLED = createLED (“A5\");\n\n    //Blink myLED\n    myLED.blink (200);\n\n## Codificando um circuito de LED (Circuit Playground Classic)\n\n    //Crie um LED conectado ao pino 2\n    var myLED = createLED (2);\n\n    //Blink myLED\n    myLED.blink (200);\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/alligator.png\" style=\"float: left; width: 30%; margin: 10px 5% 10px 0;\">\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp-wire.png\" style=\"float: left; width: 30%; margin: 10px 5% 10px 0;\">\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp-foil.png\" style=\"float: left; width: 30%; margin: 10px 0;\">\n\nVocê não precisa usar nada sofisticado para criar um simples circuito como este - praticamente qualquer coisa que conduza bem a eletricidade serve. Você pode recuperar fios de luzes antigas de Natal ou usar papel alumínio, mas também pode comprar fios condutores que permitem montar seus circuitos ou usar fita de cobre para fazer circuitos dobráveis em papel.\n\n## Depuração de LED\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/sequin.png\" style=\"width: 500px;\" class=\"center\">\n\nOs LEDs são bem simples de usar, mas há alguns truques a serem lembrados:\n\n-   Você precisa prestar atenção em qual direção a eletricidade está fluindo, porque os LEDs funcionam apenas em uma direção. Sempre conecte o lado positivo do LED à fonte de alimentação e o lado negativo à terra.\n-   Os LEDs precisam de um componente chamado _resistor_ para garantir que estejam recebendo (e consumindo) a quantidade certa de eletricidade. As lantejoulas de LED (como na imagem acima) têm um resistor embutido, mas se você quiser usar um LED simples, precisará adicionar um resistor em ambos os lados para evitar danificar a placa ou o LED."
        },
        "csd-2022/color-lights": {
          "display_name": "Luzes Coloridas",
          "content": "<img src=\"//curriculum.code.org/images/circuitplayground/cp_colorleds.png\" style=\"float: right; width: 400px; margin-left: 25px;\">\n\nAo redor da borda da placa, você percebe que há dez LEDs adicionais. Esses LEDs são um pouco diferentes dos que vimos antes; são LEDs multicoloridos.\n\n### LEDs RGB\n\nOs LEDs coloridos são, na verdade, compostos por três LEDs menores - um vermelho, um verde e um azul. Por causa disso, costumamos chamar esses LEDs RGB.\n\nComo existem muitos desses LEDs, nós os armazenamos em uma lista chamada [`ColorLEDS` (#f78183)] [0]. O primeiro LED RGB da lista (posição 0) está localizado próximo ao LED de alimentação verde, e o restante segue em ordem anti-horária ao redor da placa, terminando no 10º LED RGB (posição 9) próximo ao LED vermelho.\n\n### Escolhendo uma cor\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/colorLeds_color.png\" style=\"float: right; margin-left: 10px;\">\n\nPor padrão, todos os LEDs coloridos serão brancos quando você os ligar. Você pode definir a cor de um LED RGB de várias maneiras, inclusive usando o nome de uma cor (como “vermelho”), uma string hexadecimal (como \"#FF0000 “) ou usando o comando `rgb ()`(por exemplo, `rgb (255, 0, 0)`).\n\nSe um LED colorido estiver apagado, `colorLEDS [i] .color ()`definirá a cor e a ativará."
        },
        "csd-2022/counter-patterns-with-event": {
          "display_name": "Padrões de Contador com Evento",
          "content": "## Análise de Variáveis\n\nAs variáveis armazenam informações. A variável é definida no lado esquerdo da expressão e o valor é definido no lado direito.\n\n\\[] [0]\n\nLeríamos essa expressão da seguinte forma:\n\n\\\\ \\*A variável 'score' obtém o valor 3\n\n## Counter Pattern with Event\n\n| Nome | Código (Bloco) | Código (Texto) |\n\\|n| Padrão de contador com evento | \\[] [1] \\| <div>`var myVar = 0;` <br><br> `onEvent (“id”, “click”, function () {` <br>`myVar = myVar + 1;` <br> `});`</div> \\|\n\nO modelo pode ser lido assim:\n\n_A variável `myVar` obtém o valor 0. Quando o OnEvent é acionado por um clique, a variável é atualizada. `MyVar` agora obtém o valor atual de `MyVar` e adiciona um a ele. O novo valor é então armazenado em `MyVar`._\n\n### Como funciona?\n\nQuando o evento é acionado, a variável é atualizada. O valor atual da variável é aumentado ou diminuído em um valor definido. O novo valor é armazenado na variável.\n\n### Exemplos\n\n\\[] [2]\n<br>\n_A variável `score` obtém o valor 0. Quando o OnEvent é acionado por um clique no botão, a variável é atualizada. `score` agora obtém o valor atual de `score` e adiciona um a ele. O novo valor é então armazenado em `score`. A pontuação é então exibida na tela._\n\n\\[] [3]\n<br>\n\\_A variável `score` obtém o valor 50. Quando o OnEvent é acionado por um clique no botão, a variável é atualizada. `score` agora obtém o valor atual de `score` e subtrai três dele. O novo valor é então armazenado em `score`. A pontuação é então exibida na tela. \\_"
        },
        "csd-2022/creating-a-survey": {
          "display_name": "Criação de uma Pesquisa de Opinião",
          "content": "Você pode usar um formulário on-line para coletar dados que podem ser importados para o AI Lab. Isso pode ser feito no App Lab, no Google Forms, no Microsoft Forms ou em qualquer outro aplicativo de formulário que permita exportar seus dados como um arquivo CSV.\n\n## Usando um modelo de formulário do Google\n\nCriamos um modelo de formulário do Google que você pode usar para criar uma pesquisa - [clique aqui para fazer uma cópia do modelo] [2]. Depois de criar uma cópia, você pode editar as perguntas modelo para atender às suas necessidades:\n\n### Perguntas categóricas\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/Categorical-Questions.png\"/>\n\n\\[] [0]\n\n1.  Para dados categóricos, verifique se a pergunta está listada como pergunta de múltipla escolha.\n2.  Digite sua pergunta. Opcionalmente, você pode adicionar uma descrição com mais informações.\n3.  Insira cada resposta como sua própria escolha. _não_ adicione uma opção Outro, pois isso permitirá que os usuários digitem suas próprias respostas, o que pode causar problemas no AI Lab.\n4.  Certifique-se de que a pergunta esteja definida como Obrigatória.\n\n[/] [0]\n\n### Perguntas numéricas\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/Numerical-Questions.png\"/>\n\n\\[] [1]\n\n1.  Para dados numéricos, verifique se a pergunta está listada como uma pergunta de resposta curta.\n2.  Digite sua pergunta. Opcionalmente, você pode adicionar uma descrição com mais informações.\n3.  Certifique-se de selecionar Validação de resposta no menu de três pontos no canto inferior direito. Em seguida, escolha “Número” e “É número” nas opções de validação. Isso garante que o usuário só possa inserir números nesse campo.\n4.  Certifique-se de que a pergunta esteja definida como Obrigatória.\n\n[/] [1]\n\n## Vídeo\n\n(Abre o YouTube em uma nova guia)\n\n\\[[Criando uma pesquisa] [4]] [3]"
        },
        "csd-2022/css": {
          "display_name": "CSS",
          "content": "CSS (Cascading Style Sheets) é a linguagem usada para definir o estilo e o layout das páginas da web. Você pode encontrar mais informações sobre as regras de CSS na página [Documentação do Web Lab] [0]."
        },
        "csd-2022/data-and-change-events": {
          "display_name": "Eventos de Dados e Mudanças",
          "content": "Ao usar sensores, é mais comum verificar as alterações o tempo todo, em vez de verificar apenas quando alguém clica em um botão. Existem eventos especiais para isso que continuam acontecendo.\n\n## O Evento de Dados\n\n[evento de dados] [0]\n\nO evento “dados” acontece toda vez que seu programa recebe informações do conselho. Isso acontece o tempo todo enquanto seu programa está funcionando. Quando você configura um manipulador [`OnboardEvent ()f78183`(#] [1] para o evento “data”, seu código será executado a cada 50 milissegundos.\n\nLembre-se de que, mesmo que o evento “data” esteja conectado a um sensor específico, você pode verificar se há novas informações em vários sensores no manipulador de eventos.\n\n## O evento de mudança\n\n[evento de mudança] [2]\n\nComo o evento “dados”, o evento de “mudança” continua acontecendo, permitindo que você obtenha informações dos sensores o tempo todo. Porém, o evento de “mudança” só acontece se o valor do sensor mudar o suficiente. Cada sensor tem uma quantidade padrão de alteração necessária para acionar um evento de “mudança” (geralmente, a quantidade é 1).\n\nO evento “change” é útil porque ele só reage a uma nova entrada e não perde tempo repetindo a mesma entrada. Isso significa que você provavelmente desejará um evento de “mudança” separado."
        },
        "csd-2022/debugging-html": {
          "display_name": "Depuração em HTML",
          "content": "## Depurando em HTML\n\n**O que é um bug?**\n\nBugs são erros no código que fazem com que ele não funcione conforme o planejado.\n\n**O que é depuração?**\n\nA depuração é o processo de encontrar e corrigir bugs. A depuração é um processo de solução de problemas, portanto, use suas etapas de solução de problemas ao tentar depurar.\n\n**Quais são alguns exemplos de bugs?**\n\nBugs podem ser qualquer coisa que faça com que o código não funcione conforme o planejado. Alguns exemplos são erros de ortografia, colocação de código no lugar errado, uso da tag errada ou esquecimento de fechar uma tag."
        },
        "csd-2022/debugging-variable-scope-functions": {
          "display_name": "Escopo da Variável de Depuração: Funções",
          "content": "# Crie variáveis uma vez, na parte superior, fora de funções ou onEvent ()\n\nAo criar variáveis, você deve:\n\n-   **Usar `var` apenas uma vez.** Você não precisa criar variáveis duas vezes e isso pode causar erros.\n-   **Crie suas variáveis na parte superior do seu programa.** Isso mantém seu código organizado e fácil de ler para você e outras pessoas.\n-   **Crie suas variáveis fora de qualquer `função` ou [`OneEvent` (#fff176)] [0] blocos.** Continue lendo para entender o porquê.\n\n# Variáveis globais versus variáveis locais\n\nHá dois tipos de variáveis, globais e locais, e até agora usamos apenas variáveis globais. Aqui está a principal diferença entre variáveis globais e locais.\n\n| Tipo de variável | Como funciona | Como foi criada | Imagem |\n\\|nPode ser usado em qualquer lugar do seu código | `var` usado fora de um [`OneEvent` (#fff176)] [1] | \\[] [2] \\|\n\\| **Local** | Temporário. Pode ser usado somente na parte do código em que foi criado, como dentro de um [`OneEvent` (#fff176)] [3]. Excluído quando o [`ONEvent` (#fff176)] [4] termina de ser executado. | `var` usado dentro de um [`ONEvent` (#fff176)] [5] | \\[] [6] \\|\n\n# Evitar variáveis locais e depurar\n\nVariáveis locais acabará sendo útil, mas, por enquanto, é mais provável que sejam confusas. O maior problema que você enfrentará agora com variáveis locais é usar acidentalmente `var` dentro de um [`onEvent` (#fff176)] [7] ou `função`. Aqui está a aparência geral do código:\n\n<img src=\"https://images.code.org/7dc2b13d85ea17e39639d15488d07f8f-image-1549944350460.png\" style=\"width: 400px\">\n\nEsse código é bem confuso. Embora pareça que há apenas uma variável sendo usada, na verdade ela tem duas variáveis, uma local e uma global, e ambas são chamadas de `count`! Alterar o valor de um não terá impacto no outro. Isso pode causar um comportamento inesperado em seu código e pode ser difícil de depurar.\n\nA melhor maneira de evitar esses problemas é **certificar-se, por enquanto, de que você não está usando `var` dentro de um [`onEvent` (#fff176)] [8] ou `function`.** Se você se deparar com um problema de depuração complicado, verifique se está criando acidentalmente uma variável local."
        },
        "csd-2022/importing-a-model-in-app-lab": {
          "display_name": "Importando um Modelo no App Lab",
          "content": "<img style=\"margin-right: 10px; margin-left: 10px; margin-bottom: 15px; border: 2px solid black; width: 200px; float: left\" src=\"https://images.code.org/e81c7cead7d106ee5b32f850791c7de8-image-1616919161803.png\"/>\n\nPara importar um modelo para o App Lab, pressione o ícone de engrenagem no canto superior esquerdo da caixa de ferramentas do App Lab e selecione Gerenciar modelos de IA\n\n<hr style=\"clear:both\">\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/Import-AI-Models_2l1FmrZ.png\"/>\n\n\\[] [0]\n\n1.  Você pode selecionar qual modelo importar usando o menu suspenso\n2.  Pressione o botão Importar para importar seu modelo para o App Lab\n3.  Pressione o botão Excluir para excluir o modelo da sua conta\n4.  O cartão de modelo de cada modelo aparecerá no lado direito. Você pode usar isso para ajudar a decidir se deseja ou não usar esse modelo em seu aplicativo.\n\n[/] [0]\n\n## Vídeo\n\n(abre o YouTube em uma nova guia)\n\n\\[[Model Cards in AI Lab] [2]] [1]"
        },
        "csd-2022/list-filter-pattern": {
          "display_name": "Padrão de Filtro de Lista",
          "content": "## Filtrando uma lista\n\nEsse padrão permite que o usuário filtre uma lista em uma nova lista limitando as informações adicionadas à nova lista. Por exemplo, você pode filtrar uma lista de palavras para que somente palavras de um determinado tamanho ou palavras que comecem com uma letra específica apareçam na nova lista.\n\n| Nome                                    | Código  |\n| --------------------------------------- | ------- |\n| Filtro de lista - letra inicial (bloco) | \\[] [0] |\n\n-   \\*\n\n| Filtro de lista - letra inicial (texto) | \\[] [1]\\\\ |\n\n| Nome                                  | Código  |\n| ------------------------------------- | ------- |\n| Filtro de lista - comprimento (bloco) | \\[] 2 ] |\n\n* * *\n\n| Filtro de lista - comprimento (texto) | \\[] [3]\\\\ |\n\n### Como funciona?\n\n-   Crie uma variável e armazene uma lista nela\n-   Crie uma lista em branco para armazenar a lista filtrada\n-   Em uma função, use um loop for para acessar cada elemento na lista original\n-   Se esse elemento atender a uma determinada condição, anexe-o à lista filtrada\n\n## Filtrando várias listas\n\nE se você tiver várias listas, mas quiser filtrar todas as listas com base nas informações em uma única lista?\n\n| Nome                               | Código  |\n| ---------------------------------- | ------- |\n| Filtro de listas múltiplas (bloco) | \\[] [4] |\n\n* * *\n\n| Filtro de listas múltiplas (texto) | \\[] [5]\\\\ |\n\n-   Todas as listas devem ter o mesmo tamanho para esse padrão - o ideal é que sejam colunas retiradas de uma tabela\n\n### Como funciona?\n\n-   Crie uma variável para cada lista\n-   Crie listas em branco para armazenar as listas filtradas\n-   Em uma função, primeiro redefina todas as listas filtradas para listas em branco. Sempre que a função for chamada, as listas filtradas serão redefinidas.\n-   Use um loop for para acessar cada item na lista que contém o elemento que você está filtrando\n-   Se o elemento for encontrado, anexe a cada lista filtrada o elemento no índice nas listas originais em que o elemento foi encontrado"
        },
        "csd-2022/list-reduce-pattern": {
          "display_name": "Padrão de Redução de Lista",
          "content": "Esse padrão é usado quando você deseja reduzir as informações em uma lista a um único número. Por exemplo, talvez você queira encontrar a média de uma lista de números ou o menor número.\n\n| Nome                | Código (bloco) | Código (texto) |\n| ------------------- | -------------- | -------------- |\n| List Reduce - média | \\[] [0]        | \\[] [1]        |\n\n### Como funciona\n\n-   Crie uma lista de números\n-   Crie uma variável em branco para armazenar a média\n-   Em uma função, crie uma variável local para armazenar o valor total de todos elementos na lista\n-   Use um loop for para acessar cada elemento na lista e adicionar seu valor ao total\n-   Após o loop for, calcule a média dividindo o total pelo comprimento da lista\n\n| Nome                | Código (bloco) | Código (texto) |\n| ------------------- | -------------- | -------------- |\n| List Reduce - menor | \\[] [2]        | \\[] [3]        |\n\n### Como funciona\n\n-   Crie uma lista de números\n-   Crie uma variável em branco para armazenar o menor número\n-   Em uma função, crie uma variável local para armazenar um valor temporário\n-   Use um loop for para acessar cada elemento na lista\n-   Se esse elemento for menor que o valor armazenado em temp, defina o valor de temp para o elemento atual\n-   Após o loop for, defina o valor do menor para o valor armazenado em temperatura"
        },
        "csd-2022/list-scrolling-pattern": {
          "display_name": "Padrão de Rolagem da Lista",
          "content": "| Nome                       | Código (bloco) | Código (texto) |\n| -------------------------- | -------------- | -------------- |\n| Padrão de rolagem da lista | \\[] [0]        | \\[] [1]        |\n\n## Como funciona?\n\nMuitos projetos do App Lab são executados da seguinte forma.\n\n1.  O usuário está interessado em ver itens em uma lista, como uma lista de comidas favoritas ou uma lista de lembretes.\n2.  O aplicativo mostra ao usuário um item da lista por vez.\n3.  Ao clicar nos botões (ou interagir de outra forma com o aplicativo), o usuário pode ir e voltar pela lista, um item por vez, para ver cada item.\n\nEsse padrão permite que o usuário “percorra” todos os itens da lista. Para que isso funcione, crie uma variável de índice e uma lista. Em seguida, use o padrão “Counter Pattern with Boundary” para criar manipuladores de eventos para alterar o valor do índice.\n\nFaz sentido usar esse padrão com o padrão `UpdateScreen`, pois você precisará de pelo menos dois botões para rolar para a esquerda e para a direita pela lista, mas depois usará o mesmo código para atualizar a tela."
        },
        "csd-2022/microbit-circuits-buttons": {
          "display_name": "Botões externos em um micro:bit",
          "content": "<img src=\"https://images.code.org/766895a5debf8fcb1e2552ff47f94c18-Micro_bit Circuits and LEDs.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\nNa borda inferior do micro:bit há 5 tiras douradas chamadas pinos. Esses pinos permitem criar circuitos ou conectar coisas externas, como LEDs ou botões.\n\n-   Os **Pinos de entrada/Saída** no micro:bit são “0”, “1” e “2”. Eles permitem que você conecte LEDs ou botões.\n-   O pino\\*\\*\"3V” \\*\\* é o pino de alimentação de 3 volts que você pode usar para alimentar LEDs externos e outros componentes eletrônicos.\n-   O **pino GND** é o pino de aterramento. Ele é usado para completar circuitos elétricos quando você conecta fones de ouvido, LEDs ou comutadores externos ao micro:bit.\n\n<div style=\"clear: both;\" ></div>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png\" alt=\"Button Up and Down\" style=\"width:250px; float: right; margin: 0 20px;\">\n\nPara criar um botão ou um interruptor, você só precisa de um circuito que possa ser facilmente conectado e desconectado. Um circuito de botão pode ser criado conectando um fio a um pino de dados e outro fio a um pino de aterramento.\n\nPara “fechar” o circuito (que é como pressionar um botão), você conecta os dois fios, tocando-os um no outro ou conectando-os a um hardware (como um botão ou interruptor) que pode ser usado para abrir e fechar o circuito.\n\nUm botão “abrir” é equivalente ao evento “para cima” do botão, enquanto um circuito “fechado” é como o evento “para baixo” do botão.\n\n## Criando circuitos de botões\n\nPara criar um circuito de botões, você precisará de um pino de dados, dois fios e um pino de aterramento.\n\n1.  Conecte um fio ao seu pino de dados numerado.\n2.  Conecte um fio diferente a um pino de aterramento.\n3.  Use um dos seguintes blocos de em seu código:\n    -   [`pinMode ()4dd0e1`(#] [0] informa ao micro:bit que você deseja usar um dos pads externos para entrada ou saída. “Pin” é o termo genérico para os pads no micro:bit, e os pinos podem ter uma aparência diferente em outros dispositivos.\n    -   [`digitalWrite ()4dd0e1`(#] [1] diz ao seu micro:bit para iniciar ou parar de enviar eletricidade para o dispositivo nesse pino. 1 significa “ligado” e 0 significa “desligado”\n    -   o bloco [`createButton ()` (#4dd0e1)] [2] permite atribuir um botão externo a uma variável\n    -   [`OnboardEvent ()f78183`(#] [3] bloco que permite atribuir um botão externo a uma variável - [`OnboardEvent ()` ()] [3] bloco que permite atribuir um botão externo a uma variável - [`OnboardEvent ()] [3] bloco que permite atribuir um botão externo a uma variável - [`OnboardEvent ()` ()] [3] bloco que mesmo nome de variável para responder à entrada"
        },
        "csd-2022/microbit-circuits-leds": {
          "display_name": "LEDs externos em um micro:bit",
          "content": "<img src=\"https://images.code.org/766895a5debf8fcb1e2552ff47f94c18-Micro_bit Circuits and LEDs.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\nNa borda inferior do micro:bit há 5 tiras douradas chamadas pinos. Esses pinos permitem criar circuitos ou conectar coisas externas, como LEDs ou botões.\n\n-   Os **Pinos de entrada/Saída** no micro:bit são “0”, “1” e “2”. Eles permitem que você conecte LEDs ou botões.\n-   O pino \\*\\*\"3V” \\*\\* é o pino de alimentação de 3 volts que você pode usar para alimentar LEDs externos e outros componentes eletrônicos.\n-   O **pino GND** é o pino de aterramento. Ele é usado para completar circuitos elétricos quando você conecta fones de ouvido, LEDs ou comutadores externos ao micro:bit.\n\nUsando os pinos numerados no micro:bit, você pode criar seus próprios circuitos que incluem componentes externos, como LEDs e botões. As especificidades de como um circuito é conectado dependem do hardware específico que você está tentando adicionar, mas todos os circuitos usarão algumas combinações de um pino de alimentação de 3 volts (que fornece energia), um pino de aterramento (que é o ponto final de um circuito) e pinos de dados numerados (que podem enviar um sinal de saída ou ler uma entrada).\n\n<div style=\"clear:both;\"></div>\n\n<img src=\"https://images.code.org/be63617cd479aabe4351a8d07abe1d00-microbit-led.png\" style=\"width: 300px; float: right; margin: 10px\" />\n\n## Criando circuitos de LED\n\nUm dos circuitos mais simples que você pode fazer com seu micro:bit é adicionar um LED. Para criar esse circuito, você precisará de um pino numerado, dois fios, um LED e um pino de aterramento.\n\n1.  Certifique-se de que seu micro:bit esteja desconectado do computador. Isso ajuda a garantir que não haja eletricidade acidental que possa danificar sua prancha.\n2.  Conecte um fio de forma que uma extremidade seja conectada ao teclado 0 no micro:bit e a outra extremidade seja conectada à extremidade positiva de um LED\n3.  Conecte um fio para que uma extremidade seja conectada ao teclado GND no micro:bit e a outra extremidade seja conectada à extremidade negativa de um LED\n\n<div style=\"clear:both;\"></div>\n\n## LED Debugging\n\nOs LEDs são bem simples de usar, mas há alguns truques a serem lembrados. Você precisa prestar atenção em qual direção a eletricidade está fluindo, porque os LEDs funcionam apenas em uma direção. Sempre conecte o lado positivo do LED à fonte de alimentação e o lado negativo à terra."
        },
        "csd-2022/microbit-display": {
          "display_name": "O display LED micro:bit",
          "content": "<img src=\"https://images.code.org/126cab46e3188fc496d4c618e8cfee03-image-1676328086265.png\" style=\"width: 300px; float: right; margin: 10px\" />\n\nO LED é provavelmente a forma mais simples de saída disponível e o micro:bit tem uma tela de 25 LEDs vermelhos para você programar. Os LEDs são organizados em uma grade de 5x5, permitindo exibir padrões, imagens, letras ou números.\n\n<div style=\"clear:both;\"></div>\n\nO `LEDScreen` pode ajudá-lo...\n\n<table>\n  <tr>\n    <td><img src=\"https://images.code.org/77c51c63b972d81ad9defdbd5f2d1769-mb1.png\" style=\"width: 210px\" /></td>\n    <td>Expresse como você se sente!</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://images.code.org/f416ae03dbad5755997196ac09b2f8b1-mb2.gif\" style=\"width: 210px\" /></td>\n    <td>Faça animais!</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://images.code.org/f5b22c147aeefd7c49908fd352c3fd89-mb3.gif\" style=\"width: 210px\" /></td>\n    <td>Faça um crachá!</td>\n  </tr>\n</table>\n\n## Comandos úteis com a tela de LED\n\n-   [`LedScreen.on ()f78183`(#] [0]\n-   [`LEDScreen.off ()` (#f78183)] [1]\n-   [`LEDScreen.toggle ()f78183`(#] [2]\n-   [`LEDscreen.clear ()` (#f78183)] [3]\n-   [`LedScreen.display ()f78183`(#] [4]\n-   [`LEDscreen.scrollString ()` (#f78183)] [5]\n-   [`LEDscreen.scrollNumber ()f78183`(#] [6]"
        },
        "csd-2022/microbit-overview": {
          "display_name": "Visão geral do micro:bit",
          "content": "O BBC micro:bit é um computador de bolso que mostra como o software e o hardware funcionam juntos. No entanto, antes de nos aprofundarmos demais, vamos começar com o básico.\n\n## A tela de diodo emissor de luz (LED)\n\nQuando um computador só precisa comunicar informações simples, geralmente uma luz piscando é a maneira mais rápida e fácil de fazer isso. Os LEDs, ou diodos emissores de luz, são dispositivos pequenos, de baixo consumo e fáceis de usar para se comunicar com a luz. Dê uma olhada na imagem micro:bit à direita.\n\n<img src=\"https://images.code.org/211f377fb4e4c1addb2cc33d53bca6f6-Micro_bit Overview.png\" style=\"width: 400px; float: right;\" />\n\n1.  O **conector USB** permite que você conecte o micro:bit. Conectá-lo permite que você se comunique com a placa no App Lab, mas também fornece eletricidade à placa para que ela possa fazer coisas como ligar a tela de LED.\n2.  O **LED amarelo único** não pode ser controlado por meio de código, mas permite saber se a placa está recebendo eletricidade. Se o LED estiver desligado, não espere que nada em sua placa funcione. O LED pisca quando você está baixando um programa para o micro:bit.\n3.  O **botão de reinicialização** permite que você reinicie seus programas micro:bit.\n4.  O **soquete de bateria** permite que você alimente seu micro:bit a partir da bateria em vez de um computador. Isso é muito útil se você quiser levar o micro:bit para fora, usá-lo ou jogar com ele. Ele pode funcionar por muito tempo usando apenas duas pilhas AAA.\n\n## Conecte\n\nConecte sua placa ao computador usando um cabo USB e observe como o único LED amarelo responde e como a tela de LED responde. Como você pode usar o display LED para comunicar informações úteis a um usuário?"
        },
        "csd-2022/microbit-parent": {
          "display_name": "O micro:bit da BBC",
          "content": "Esses recursos fazem referência a recursos específicos do [BBC micro:bit] [0]"
        },
        "csd-2022/microbit-physical-input": {
          "display_name": "Entrada física micro:bit",
          "content": "<img src=\"https://images.code.org/3d9ce06038db75ad3ae8a7b03259a048-Micro_bit Physical Input.png\" style=\"width: 350px; float: right; margin: 10px\" />\n\n## Identificando as entradas\n\n1.  Os botões A (esquerda) e B (direita) estão disponíveis em código como `ButtonA` e `buttonB`, respectivamente. Esses botões são idênticos entre si, exceto pela localização no quadro.\n2.  O **Botão de redefinição** não está realmente disponível para você usar em seu programa. Clicar nesse botão faz com que o micro:bit se reinicie, portanto, evite clicar nele durante a execução de um programa. No entanto, é útil se sua placa não estiver funcionando da maneira que você espera.\n\n## Eventos e tipos de eventos\n\n| Tipo de evento | Descrição                                                     |\n| -------------- | ------------------------------------------------------------- |\n| `down`         | Aciona quando o botão é pressionado.                          |\n| `up`           | Aciona quando o botão aparece novamente após ser pressionado. |\n\n## Estados do botão\n\nAmbos os botões e o interruptor têm apenas dois estados. Os botões geralmente estão desligados (falsos) e ativados (verdadeiros) quando pressionados. Você pode ver se um botão está sendo pressionado com [`buttonL.isPressed` (#f78183)] [0]."
        },
        "csd-2022/microbit-sensors": {
          "display_name": "Sensores micro:bit",
          "content": "O micro:bit tem dois sensores básicos, cada um dos quais pega uma entrada e a converte em um valor que pode ser usado pelo computador.\n\n<img src=\"https://images.code.org/48dea3f6d0c5933eb639fbcb1292d51f-Micro_bit Sensors.png\" style=\"width: 500px; display: block; margin-left: auto; margin-right: auto; margin-bottom: 10px\" />\n\n1.  O [`LightSensor` (#f78183)] [0] mede o quão claro ou escuro ele é. Quando está muito escuro, [`lightSensor.value` (#f78183)] [1] é 0, e quando está muito claro, o valor é 255.\n2.  O [`TempSensor` (#f78183)] [2] verifica a temperatura e a mostra em Fahrenheit ([`TempSensor` (#f78183)] [3]) ou Celsius ([`TempSensor.c` (#f78183)] [4]).\n\n## Lendo dados do sensor\n\nPara ler os dados dos sensores de som e luz, você pode usar a propriedade “value” (como [`lightSensor.value` (#f78183)] [5]). Se o intervalo de 0 a 255 não for o que você precisa, você pode alterar o intervalo usando o método setScale (). Por exemplo, [`LightSensor.setScale (-50, 50)f78183`(#] [6] faz com que o sensor de luz mostre valores entre -50 e 50. O sensor de temperatura já mostra a temperatura de uma forma fácil de entender.\n\n## Sensibilidade do sensor\n\nOs sensores em suas placas não são perfeitos e podem fornecer leituras ligeiramente diferentes em placas diferentes. Se precisar que seu programa funcione bem com placas diferentes, você pode escrever um código que permite ajustar os sensores. Se seu aplicativo executa código quando a leitura de um sensor ultrapassa um determinado valor, transforme esse valor em uma variável que possa ser alterada pelo usuário. Dessa forma, o usuário pode alterar a variável para que o aplicativo funcione melhor com sua placa."
        },
        "csd-2022/multi-frame-animations": {
          "display_name": "Animações com Multi-Telas",
          "content": "Algumas animações incluem vários quadros. Isso funciona de forma semelhante a um flip-book, em que cada “quadro” da imagem é rapidamente desenhado repetidamente em um loop para criar a ilusão de movimento. A guia Animação inclui ferramentas para permitir que você edite animações com vários quadros.\n\n## Criando e editando animações com vários quadros\n\nEssas ferramentas ajudarão você a criar e editar suas animações com vários quadros\n\n\\[] [1]\n\n\\[] [0]\n\n1.  O botão **Adicionar novo quadro** adiciona um quadro em branco à sua animação, no qual você pode desenhar. Se você quiser fazer uma cópia do seu quadro atual para fazer pequenas edições, use (3)\n2.  O ícone **Lixeira** excluirá o quadro atual\n3.  O ícone **Copiar** criará uma cópia do quadro atual, que você poderá editar.\n4.  O ícone **Mover** permite reorganizar a ordem das molduras\n5.  O ícone **Cebola** mostra uma sobreposição transparente do quadro anterior e do quadro seguinte. Isso é útil se você quiser fazer pequenas alterações em um quadro para criar uma animação mais suave e garantir que ela esteja alinhada com os quadros ao redor.\n6.  O **Slider** altera a velocidade da animação. Mover-se para a direita acelera a animação; mover para a esquerda reduz a velocidade da animação. Você pode ver uma prévia da animação ao passar o mouse sobre ela nesta coluna.\n\n[/] [0]"
        },
        "csd-2022/patterns": {
          "display_name": "Padrões",
          "content": "Esta página ainda está em desenvolvimento. Esta página é a página inicial dos padrões de programação no desenvolvimento de aplicativos e, por si só, não contém nenhum conteúdo. Para ver diferentes padrões de programação, use a navegação à esquerda. Para perguntas sobre esta página, escreva para support@code.org."
        },
        "csd-2022/patterns-2": {
          "display_name": "Padrões",
          "content": "Padrões de programação úteis"
        },
        "csd-2022/physical-input": {
          "display_name": "Entrada física do Circuit Playground",
          "content": "## Identificando as entradas\n\n<img alt=\"buttons\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp_buttonswitch.png\" style=\"float: right; margin-left: 10px; width: 400px;\">\n\n1.  O **Botão de redefinição** não pode ser usado em seu programa. Clicar nele faz com que a placa se reinicie sozinha, então não a pressione enquanto o programa estiver em execução. Mas você pode usá-lo se sua placa não estiver funcionando corretamente.\n\n2.  Os botões esquerdo e direito no tabuleiro são chamados de `ButtonL` e `ButtonR`. Eles são os mesmos, exceto onde estão no tabuleiro. Ao olhar para a placa com a porta USB na parte superior, o botão esquerdo é `ButtonL` e o botão direito é `ButtonR`.\n\n3.  O **Toggle Switch** está disponível em código como [`ToggleSwitch` (#f78183)] [0].\n\n## Eventos e tipos de eventos\n\n### Botões esquerdo e direito:\n\n| Tipo de evento | Descrição |\n\\|n\n| Tipo de evento | Descrição                                                |\n| -------------- | -------------------------------------------------------- |\n| `open`         | Quando o ToggleSwitch é virado para abrir (ou `verdade`) |\n| `close`        | Quando o ToggleSwitch é virado para fechado (ou `false`) |\n| `change`       | Quando o ToggleSwitch é invertido                        |\n\n## Estado\n\nTanto os botões quanto o switch têm apenas dois estados.\n\nOs botões geralmente estão desligados (falsos) e ativados (verdadeiros) quando pressionados. Você pode ver se um botão está sendo pressionado com [`buttonL.isPressed` (#f78183)] [1].\n\nO interruptor permanece na posição em que você o colocou. Quando está à esquerda, está aberto (verdadeiro) e, à direita, está fechado (falso).\n\nHá sinais de mais e menos perto do interruptor para ajudar você a se lembrar. Você pode verificar a posição do switch com o bloco [`toggleSwitch.isOpen` (#f78183)] [2]."
        },
        "csd-2022/problem-solving-process-design": {
          "display_name": "O processo de resolução de problemas com design",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nO **Processo de resolução de problemas** é útil ao tentar criar um novo produto para alguém, como um novo site, aplicativo ou dispositivo. Esse processo o ajudará a esclarecer e dividir um problema em etapas gerenciáveis para que você possa criar algo que atenda às necessidades do usuário.\n\n## Defina\n\n-   Identifique indivíduos ou grupos de pessoas que poderiam se beneficiar do seu produto\n-   Identifique as necessidades e desejos das pessoas que usariam seu produto\n-   Imagine que você é um dos seus usuários. Anote o que um usuário pode ver, ouvir ou sentir ao sentir sua necessidade ou desejo.\n-   Se possível, entreviste usuários em potencial para saber mais sobre o que eles querem\n-   Considere criar frases como “**\\*\\***\\\\ \\_**\\*\\*** precisa de uma maneira de **\\*\\***\\\\ \\_**\\*\\*** para \\***\\*\\\\ \\_\\*\\***. Deveria **\\*\\*\\*\\***\\\\ \\_\\\\ \\_\\\\ \\_**\\*\\*\\*\\***”\n\n## Prepare\n\n-   Deixe de lado suas próprias crenças ou suposições pessoais para que você possa simpatizar com os usuários.\n-   Pense em possíveis soluções que atendam às necessidades e desejos de seus usuários\n-   Pesquise o que existe e como outras pessoas lidaram com problemas semelhantes e veja o que você pode aprender\n-   Crie uma lista de “prós” e “contras” de possíveis soluções para ajudar a decidir qual delas criar\n-   Você não poderá criar tudo de uma vez - decida o “mínimo” que precisa criar para começar a testar e aprender o que funciona e o que não funciona \n\n## Experimente\n\n-   Esboce sua ideia no papel ou com uma ferramenta digital\n-   Crie um protótipo do seu produto, que é uma versão rápida e de baixo risco da sua ideia que você pode testar\n-   Identifique um aspecto específico do seu protótipo que você deseja testar e receba feedback \n-   Compartilhe seu protótipo com outras pessoas e receba feedback, depois agrupe esse feedback em categorias\n\n## Reflita\n\n1.  Quais categorias de feedback você recebeu do seu design? Quais melhorias você pode fazer com base nesse feedback?\n2.  Qual foi a reação ao seu protótipo quando você o compartilhou com outras pessoas? Como você pode aproveitar as reações positivas? Como você pode fazer alterações para evitar reações negativas?\n3.  De qual aspecto do seu protótipo você mais se orgulha? Qual parte precisa ser melhorada?\n4.  Com base em seus testes, se você reiniciasse o processo de solução de problemas na etapa Definir, quais novos problemas você tentaria identificar? Como você pode repetir o que você tem para torná-lo mais útil para seus usuários?"
        },
        "csd-2022/problem-solving-process-programming": {
          "display_name": "O processo de resolução de problemas com programação",
          "content": "<img src=\"https://images.code.org/82447a908c849fb0b3dc8184912416b7-PSP-0.png\" style=\"float: right; margin: 10px; width: 300px\" />\n\nO **Processo de resolução de problemas** é útil ao escrever código para um programa desafiador. Esse processo ajudará você a esclarecer e dividir um problema em etapas gerenciáveis para que você possa identificar facilmente o código que precisa escrever para cada etapa.\n\n## Defina\n\n-   Leia atentamente as instruções para ter certeza de que compreende as metas e os resultados pretendidos do programa.\n-   Se houver um programa de amostra, execute-o para garantir que você entenda o que ele faz.\n-   Se houver um código inicial, leia-o para entender o que ele faz.\n-   Reformule o problema com suas próprias palavras.\n-   Identifique todas as habilidades que você está sendo solicitado a aplicar.\n-   Decida qual aspecto do problema você deseja resolver primeiro.\n\n## Prepare\n\n-   Pense no máximo de ideias sobre as diferentes maneiras pelas quais você pode programar o problema para resolver todas as suas partes.\n-   Escreva em inglês simples ou pseudocódigo suas ideias de como resolver o problema para que o programa faça o que deveria fazer.\n-   Liste o que você já sabe fazer e o que ainda não sabe.\n-   Descreva suas ideias para um colega\n-   Revise programas similares que você pode ter escrito no passado.\n-   Esboce sua ideia no papel, se necessário\n\n## Experimente\n\n-   Escolha uma ideia da etapa anterior e documente por que você escolheu essa ideia. \n-   Implemente a ideia escolhida e escreva um pequeno trecho de código por vez.\n-   Teste seu programa com frequência.\n-   Use comentários para documentar e acompanhar o que seu código faz.\n-   Volte para a etapa anterior para analisar suas outras ideias para resolver o problema se você ficar preso\n-   Aplique as estratégias de depuração apropriadas\n\n## Reflect\n\n1.  Compare seu programa com o problema definido … Você conseguiu resolver todos os aspectos do problema? Como você sabe?\n2.  Peça a um colega de classe que experimente seu programa … Há lugares onde eles têm dificuldades ou mostram confusão?\n3.  Peça a um colega de classe que leia seu código … Seu código e documentação são claros e precisos?\n4.  Tente “quebrar” seu programa … Você encontrou tipos de interação ou entrada com os quais poderia lidar melhor?\n5.  Há alguma alteração ou melhoria que você possa fazer neste programa ou em outro semelhante no futuro?"
        },
        "csd-2022/producing-output": {
          "display_name": "Campainha de campo de jogos do Circuit",
          "content": "<img src=\"//curriculum.code.org/images/circuitplayground/cp_buzzer.png\" style=\"float: right; width: 300px; margin-left: 10px;\">\n\nO LED é provavelmente a forma mais simples de saída disponível e, embora haja muitas coisas úteis que uma luz simples possa comunicar, às vezes precisamos de uma forma diferente de saída. Usamos luz como saída, mas e o som? Seu tabuleiro tem um objeto [`buzzer` (#f78183)] [0] que pode reproduzir sons simples.\n\n### The Buzzer\n\nNão espere que o [`buzzer` (#f78183)] [1] faça uma música bonita - é uma ferramenta simples para uma saída simples!\n\n1.  Esse cubo contém uma campainha simples (também conhecida como campainha _piezo_ ou _piezoelétrica_). Quando a eletricidade é enviada para a campainha, ela vibra e faz barulho.\n\n<div style=\"clear: both;\"></div>\n\n### Fazendo sons diferentes\n\n<img src=\"//curriculum.code.org/images/circuitplayground/cp_buzzer_pwm.png\" style=\"float: left; width: 200px; margin-right: 10px;\">\n\nAo usar o LED, nossa escolha de saída era bem simples; ela estava ligada ou desligada. A campainha pode realmente tocar uma variedade de sons diferentes. Podemos fazer isso enviando pulsos de eletricidade para a campainha em velocidades diferentes. É como acender e desligar uma luz repetidamente - quanto mais rápido apertarmos o botão, maior será o som que ela produzirá.\n\n<div style=\"clear: both;\"></div"
        },
        "csd-2022/random-list-access": {
          "display_name": "Padrão Aleatório de Acesso à Lista ",
          "content": "| Nome                               | Código (bloco) | Código (texto) |\n| ---------------------------------- | -------------- | -------------- |\n| Padrão de acesso à lista aleatória | \\[] [0]        | \\[] [1]        |\n\n## Como funciona?\n\nMuitos projetos do App Lab são executados da seguinte forma.\n\n1.  O usuário está interessado em ver itens em uma lista, como uma lista de comidas favoritas ou uma lista de lembretes.\n2.  O aplicativo mostra ao usuário um item da lista por vez.\n3.  Ao clicar nos botões (ou interagir de outra forma com o aplicativo), um novo item aleatório na lista é mostrado ao usuário.\n\nEsse padrão permite que um usuário veja elementos aleatórios em uma lista. Para que isso funcione, crie uma variável de índice e uma lista. Em seguida, gere um número aleatório entre 0 e o tamanho da lista menos um e defina o índice com esse valor. Em seguida, atualize a tela."
        },
        "csd-2022/saving-and-uploading-csv-files": {
          "display_name": "Salvando e Carregando Arquivos CSV",
          "content": "## Vídeo\n\n(Abre o YouTube em uma nova guia)\n\n\\[[Exibir e baixar dados da pesquisa] [1]] [0]"
        },
        "csd-2022/selecting-a-label": {
          "display_name": "Selecionando um Rótulo",
          "content": "<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/01-Selecting-a-Label-Drawing.png\"/>\n\n\\[] [0]\n\n1.  Clique em uma coluna para ver mais informações sobre ela\n2.  Essa é uma descrição da coluna que você selecionou. Ele pode fornecer mais informações sobre os dados nesta coluna. Se os dados vierem de uma pesquisa, geralmente conterão a pergunta feita na pesquisa\n3.  Um gráfico **Bar** mostra quantas vezes um determinado valor aparece no gráfico. Para rótulos, é importante ter uma representação equilibrada de seus dados. Se certos valores estiverem super-representados ou sub-representados, isso pode levar a um modelo de aprendizado de máquina _tendencioso_.\n4.  Pressione o botão “Adicionar rótulo” para usar essa coluna como saída do seu modelo de aprendizado de máquina. Isso é o que o AI Bot tentará prever.\n\n[/] [0]\n\n## Vídeo\n\n(Abre o YouTube em uma nova guia)\n\n\\[[Introdução ao AI Lab] [2]] [1]"
        },
        "csd-2022/selecting-features": {
          "display_name": "Seleção de Recursos",
          "content": "<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/02-Selecting-Features-a.png\"/>\n\n\\[] [0]\n\n1.  Clique em uma coluna para ver mais informações sobre ela\n2.  Essa é uma descrição da coluna que você selecionou. Ele pode fornecer mais informações sobre os dados nesta coluna. Se os dados vierem de uma pesquisa, geralmente conterão a pergunta feita na pesquisa\n3.  Gráficos e visualizações de dados diferentes podem ajudar você a decidir se essa coluna será um recurso útil para o AI Bot procurar padrões. Você pode aprender mais sobre como selecionar recursos nestes artigos: [Usando dados com recursos categóricos] [1] ou [Usando dados com recursos numéricos] [2]\n4.  Pressione o botão “Adicionar recurso” para usar essa coluna como uma das entradas em seu modelo de aprendizado de máquina\n5.  Se você quiser remover um recurso do seu modelo, pressione o X acima do recurso na parte superior da tela\n\n[/] [0]\n\n## Vídeo\n\n(abre o YouTube em uma nova guia)\n\n\\[[Introdução ao AI Lab] [4]] [3]"
        },
        "csd-2022/style-sheets": {
          "display_name": "Folhas de Estilo",
          "content": "Os desenvolvedores web intencionalmente separam o conteúdo e o estilo para tornar seu código mais fácil de manter. HTML é a linguagem usada para estruturar o conteúdo de uma página da web, e CSS, que significa Folhas de Estilo em Cascata, é uma linguagem que adiciona estilo a uma página da web.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/CS-Discoveries---Semester-1.png\" style=\"float: right; height: 300px;\">\n\n## Separando conteúdo, estrutura e estilo.\n\nConforme os programadores desenvolvem páginas da web, é importante para eles distinguir entre o conteúdo, a estrutura e o estilo da página. Os desenvolvedores usam HTML para organizar os diferentes tipos de conteúdo na página, indicando como ele deve ser estruturado. Isso permite que eles comuniquem qual é o papel de cada parte do conteúdo na página, como título, lista, tabelas ou outros tipos de conteúdo. Se você não usar CSS (Folhas de Estilo em Cascata) para estilizar esse conteúdo, o navegador da web aplicará estilos padrão com base na forma como o HTML o estruturou. À medida que você aprende as regras de estilo do CSS, terá mais controle sobre o estilo aplicado a diferentes tipos de conteúdo na página.\n\n## Adicionando uma folha de estilo\n\n<img alt=\"Web Lab Stylesheet\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/weblab_stylesheet.png\" class=\"center\" style=\"max-width: 600px;\">\n\n[][0]\n\n1.  Para adicionar regras de estilo CSS a uma página HTML, você precisa criar um documento de folha de estilo.\n2.  Esta é a folha de estilo.\n3.  Vincule sua folha de estilo. O link fica dentro da tag Head e se parece com isso:\n\n<link rel=\"stylesheet\" href=\"style.css\">\n\n## Conjuntos de regras CSS\n\nConjuntos de regras CSS consistem em duas partes principais: o seletor e as regras.\n\n## Seletores\n\nOs seletores podem ser qualquer parte da página da web que você deseja estilizar. Uma maneira de identificar partes da página da web é usar os nomes dos tipos de elementos. Selecionar um tipo de elemento fará com que todos os elementos desse tipo tenham o estilo fornecido. O nome do seletor para tipos de elementos HTML é o nome da tag sem os colchetes. No exemplo abaixo, o seletor é h1 e ele estilizará todos os elementos h1 com as regras dentro das chaves ({ }).\n\n## Regras\n\nAs regras descrevem como os elementos identificados pelo seletor devem ser alterados. Cada regra consiste em um nome de propriedade e um valor, separados por dois pontos (:). O nome da propriedade descreve sobre o que é a regra, como cor ou tamanho, e o valor descreve como a propriedade deve mudar. Por exemplo, o conjunto de regras abaixo fará com que todos os cabeçalhos h1 na página tenham texto azul sublinhado.\n\n    h1{\n      color:blue;\n      text-decoration: underline;\n    }\n\nA pontuação no conjunto de regras é muito importante, porque é assim que o computador sabe onde cada regra começa e termina.\n\n## FAQ\n\n1.  O que é CSS?\n    CSS é uma linguagem que controla a aparência do conteúdo em um site. Ele utiliza conjuntos de regras para alterar o visual de uma página. Cada conjunto de regras possui um seletor, que especifica quais elementos na página serão afetados, e as regras, que explicam como exibir os elementos. Cada regra é composta por uma propriedade e um valor para essa propriedade.\n    Aqui está um exemplo de um conjunto de regras que torna o texto em uma tag h2 azul e em itálico:\n    css\n    Copy code\n    h2 {\n    color: azul;\n    font-family: cursiva;\n    }\n    Neste exemplo, h2 é o seletor, color e font-family são propriedades, e azul e cursiva são os valores para essas propriedades.\n2.  O que é uma folha de estilo?\n    Uma folha de estilo é um documento que controla como uma página da web será exibida. Folhas de estilo externas são arquivos separados que são vinculados à página HTML.\n3.  Como devo nomear minha folha de estilo?\n    Você pode nomear sua folha de estilo como quiser, mas é melhor escolher um nome relevante, como \"style.css\" ou \"estilosobre.css\", para que fique claro o que é o arquivo. Seu arquivo deve sempre ter a extensão \".css\".\n4.  Por que eu preciso de toda essa pontuação?\n    A pontuação, como as chaves {}, os dois pontos : e o ponto e vírgula ;, ajuda o computador a entender as regras na folha de estilo. As chaves abrigam todas as regras para um determinado seletor. Cada regra deve terminar com um ponto e vírgula, e as propriedades e valores são sempre separados por dois pontos.\n5.  Como funciona o código?\n    Aqui está o código que torna o título h1 vermelho:\n    css\n    Copy code\n    h1 {\n    color: vermelho;\n    }\n    h1 é o seletor. Ele especifica quais elementos devem seguir as regras dentro das chaves.\n    color: vermelho; é a regra que torna o texto dentro das tags h1 vermelho.\n    color é a propriedade. Ela explica sobre o que é a regra, neste caso, a cor do texto.\n    vermelho é o valor. Ele explica como a regra deve ser aplicada, neste caso, tornando o texto vermelho.\n6.  Como faço para criar um novo conjunto de regras?\n    Para criar um novo conjunto de regras, você precisará de um seletor e de uma lista de regras. O seletor é o nome da tag para a qual você deseja que as regras sejam aplicadas. As regras são uma lista de pares de propriedade e valor. Você também precisará prestar atenção à pontuação no conjunto de regras. Veja o código abaixo para um exemplo de como o código deve parecer. Você precisará alterar os detalhes para a sua página.\n    css\n    Copy code\n    p {\n    color: azul;\n    }\n    p é o seletor. Ele especifica quais elementos devem seguir as regras dentro das chaves.\n    color: azul; é a regra que torna o texto dentro das tags p azul.\n    color é a propriedade. Ela explica sobre o que é a regra, neste caso, a cor do texto.\n    azul é o valor. Ele explica como a regra deve ser aplicada, neste caso, tornando o texto azul.\n7.  Quais regras podem ser adicionadas a um conjunto de regras de classe?\n    Um conjunto de regras de classe pode ter as mesmas regras que qualquer outro tipo de seletor. Se uma regra não se aplicar ao conteúdo da classe (por exemplo, usando font-size em um elemento sem texto), o computador ignorará essa regra, mas ainda usará as regras que funcionam.\n8.  Por que o seletor tem um ponto na frente?\n    No CSS, um ponto na frente de um seletor significa que o seletor é o nome de uma classe (veja a página sobre Classes CSS). Se não houver um ponto, significa que o seletor é o nome de uma tag HTML.\n\n**W3 Schools Links**\n\n-   [CSS Syntax](https://www.w3schools.com/css/css_syntax.asp)"
        },
        "csd-2022/tableDataStorage": {
          "display_name": "Armazenamento de dados em tabelas do App Lab",
          "content": "### Visão Geral\n\nO armazenamento de dados em tabelas do App Lab permite o armazenamento persistente de dados para um aplicativo. Enquanto [setKeyValue ()] [0] e [getKeyValue ()] [1] podem ser usados para armazenar vários pares independentes de chave/valor, o armazenamento de dados da tabela permite que você armazene dados semelhantes juntos em um formato de tabela.\n\nComo um exemplo simples, digamos que você esteja criando um aplicativo que coleta informações sobre o nome, a idade e a comida favorita de uma pessoa para que você possa descobrir se as preferências alimentares estão correlacionadas com a idade.\n\nSe você estivesse armazenando esses dados em um pedaço de papel ou com um aplicativo de planilha, você poderia formatar os dados assim:\n\n| Nome   | Idade | Comida  |\n| ------ | ----- | ------- |\n| Abby   | 17    | Ravioli |\n| Kamara | 15    | Sushi   |\n| Rachel | 16    | Salada  |\n\nA tabela tem uma linha de colunas nomes e, em seguida, cada linha adicionada à tabela preenche uma ou mais das colunas. O armazenamento de dados em tabelas do App Lab permite armazenar dados com formatação semelhante e fornece funções simples para [ler] [2], [criar] [3], [excluir] [4] e [atualizar] [5] registros (linhas) em uma tabela, diretamente do seu aplicativo.\n\n### Definições\n\n_Table:_ Uma coleção de registros com nomes de colunas compartilhados\n_Record:_ Uma “linha” da tabela\n_Armazenamento de dados persistente:_ Dados armazenados “na nuvem” separadamente do código em execução no seu aplicativo. Os dados podem ser acessados por meio de várias atualizações de aplicativos ou usuários do aplicativo.\n\n### Visualizando dados\n\nVisualize os dados da tabela do seu aplicativo clicando na guia 'Dados' no App Lab e clicando no nome da tabela que você deseja visualizar.\n\n### Lendo e criando registros de tabela do seu aplicativo\n\nPara criar, ler, atualizar e excluir registros de tabela do seu aplicativo, use as seguintes funções do App Lab Data:\n\n-   Para criar uma linha em uma tabela: [CreateRecord] [6]\n-   Para ler uma ou várias linhas em uma tabela: [ReadRecords] [7]\n-   Para atualizar uma linha existente em uma tabela: [UpdateRecord] [8]\n-   Para atualizar uma linha existente em uma tabela: [UpdateRecord] [8] - Para atualizar uma linha existente em uma tabela: [UpdateRecord] [8] - Para atualizar uma linha existente em uma tabela: [UpdateRecord] [8] - Para atualizar uma linha existente em uma tabela: [UpdateRecord] [8] - Para atualizar uma linha existente em uma tabela: [UpdateRecord] excluir um linha existente de uma tabela: [DeleteRecord] [9]\n\n### Importação em massa de dados de tabela de um arquivo\n\nSe você tiver dados existentes em uma planilha que deseja que seu aplicativo possa acessar, você pode usar o recurso Importar para preencher rapidamente uma tabela com registros da planilha. Para importar dados:\n\n_Etapa 1._ **Formatar a planilha**\nEm um editor de planilhas de sua escolha, verifique se os dados estão formatados com os nomes das colunas na primeira linha e os dados da tabela abaixo. Os dados da sua planilha devem ser formatados assim, mas com valores de sua escolha (como nosso exemplo de comida favorito):\n\n| coluna 1              | coluna 2              | ... coluna N          |                |                |                |                |                |\n| --------------------- | --------------------- | --------------------- | -------------- | -------------- | -------------- | -------------- | -------------- |\n| dados row1 col1       | row1 col2 data        | row1 colN data        | row2 colN data | row2 colN data | row2 colN data | row2 colN data | row2 colN data |\n| dados da linha 3 col1 | dados da linha 3 col2 | dados da linha 3 colN |                |                |                |                |                |\n\n_Etapa 2._ **Salve a planilha como um arquivo csv**\nUm arquivo separado por vírgula, ou arquivo csv, é um formato de arquivo simples no qual a maioria dos editores de planilhas deve suportar o salvamento do arquivo. Salve o arquivo como csv e baixe-o para o seu computador.\n\n_Etapa 3._ **Importe o arquivo para o armazenamento de dados da tabela do App Lab**\nPara importar o arquivo em uma tabela no App Lab:\n\n1.  Clique no botão “Visualizar dados” no App Lab enquanto visualiza seu código no “Modo de código”.\n2.  Clique no nome de uma tabela existente ou adicione uma nova tabela ao seu aplicativo.\n3.  Clique no botão Importar e selecione o arquivo csv da Etapa 2.\n4.  Clique em “Substituir e importar” para que os dados da planilha substituam os dados da tabela atual.\n    **Nota:** Os dados existentes _serão_ substituídos, então certifique-se de que você não pretendia manter os dados atuais!\n\n_Etapa 4._ **Revise os dados importados**\nSe seus dados foram importados com sucesso, revise a tabela para garantir que tudo esteja correto. Você pode fazer ajustes rápidos nas linhas\nclicando no botão “Editar” dessa linha e editando os valores em linha.\n\nSe os dados não foram importados corretamente, verifique se o arquivo csv original foi formatado corretamente com nomes de colunas e linhas válidas.\n\nAgora que você tem dados em sua tabela, você pode usar as funções de dados do App Lab vinculadas acima para ler, atualizar, excluir ou criar novas linhas em sua tabela."
        },
        "csd-2022/taking-input-with-getproperty": {
          "display_name": "Recebendo Entrada com getProperty",
          "content": "O comando [`getProperty ()fff176`(#] [0] permite que você obtenha o valor atual das propriedades do elemento de design. Como [`setProperty ()fff176`(#] [1], sua primeira entrada é o ID de um elemento de design e a segunda é uma propriedade desse elemento. Ao contrário de [`setProperty ()fff176`(#] [2], o comando [`getProperty ()` (#fff176)] [3] não tem uma terceira entrada.\n\nVocê pode usar esse comando em qualquer elemento de design, mas é particularmente útil quando usado com os elementos de entrada de texto, menu suspenso, caixa de seleção, botão de rádio e controle deslizante. Esses elementos permitem que o usuário altere seu valor e, usando [`getProperty ()fff176`(#] [4], você pode escrever programas que aproveitam a entrada do usuário.\n\n## Exemplo de getProperty\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/getProperty_crop.png\" style=\"margin: 20px auto\" />\n\nNeste exemplo, estamos usando [`getProperty ()fff176`(#] [5] para receber a entrada de uma entrada de texto, uma lista suspensa e uma caixa de seleção. Embora esse exemplo registre esses valores no console, você também pode salvá-los em variáveis ou usar [`setProperty ()fff176`(#] [6] para alterar outros elementos de design com base nesses valores."
        },
        "csd-2022/text-properties": {
          "display_name": "Propriedades do Texto",
          "content": "Há muitas propriedades CSS disponíveis que permitem estilizar o texto em sua página. Aqui está uma análise de algumas das mais comuns\n\n| Propriedade     | O que muda                 | Exemplo                 |     |                         |                  |                                   |\n| --------------- | -------------------------- | ----------------------- | --- | ----------------------- | ---------------- | --------------------------------- |\n| **color**       | A cor do seu texto         | `color: maroon;`        |     |                         |                  |                                   |\n| **text-align**  | O alinhamento do seu texto | `text-align: center;`   |     |                         |                  |                                   |\n| **text-align**  | **text-align**             | `text-align: center;`   |     | **text-align** ação\\*\\* | Estilo adicional | `decoração de texto: sublinhado;` |\n| **font-family** | Qual fonte usar            | `font-family: fantasy;` |     |                         |                  |                                   |\n| **font-size**   | O tamanho do seu texto     | `font-size: 20px;`      |     |                         |                  |                                   |\n\n## Exemplo de texto estilizado\n\nSe juntarmos tudo isso, você poderá obter um texto como este:\n\n    p {\n      color: maroon;\n      text-align: center;\n      text- decoração: underline;\n      font-family: fantasy;\n      font-size: 20px;\n    }\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-05-03-09.38.04.png\" style=\"max-width: 300px; margin: 10px auto;\" class=\"center\">\n\n## Especificando fontes\n\nVocê pode notar ao usar CSS como `font-family: fantasy;`que seu texto parece diferente em computadores diferentes. Isso ocorre porque estamos apenas dizendo ao navegador qual _tipo_ de fonte usar, não qual fonte _especifica_.\n\n## Perguntas frequentes\n\n1.  **Quais cores posso usar no CSS?**\n    -   O CSS inclui os nomes de cores mais comuns (vermelho, azul, verde etc.) e muitos nomes incomuns. Você pode ver uma lista completa de nomes de cores CSS em [W3Schools - HTML Color Names] [0]. Você ainda pode usar cores que não estão incluídas na lista nomeada, mas precisará usar seus valores RGB. Você pode ler mais sobre o uso de cores em CSS em [W3Schools - CSS Legal Color Values] [1].\n2.  **Usei valores RGB diferentes, mas o meu também funciona**\n    -   Como o RGB cria milhões de cores diferentes, algumas são tão parecidas que as pessoas têm dificuldade em diferenciá-las. Isso significa que há vários valores de RGB próximos o suficiente para funcionar em nossa cor vermelha escura.\n3.  **Quais são os valores possíveis para font-family?**\n    -   Você pode escolher entre “serif”, “sans-serif”, “cursive”, “fantasy” e “monospace”. Você também pode experimentar fontes mais específicas, conforme descrito em [W3Schools - CSS Web Safe Font Combinations] [2].\n4.  **Quais são os valores possíveis para decoração de texto?**\n    -   Você pode escolher entre “sublinhado”, “overline” e “line-through”. Você pode ler mais sobre a propriedade de decoração de texto em [W3Schools - CSS text-decoration Property] [3].\n5.  **Por que `text-align: left` não faz nada?**\n    -   A maioria das propriedades tem valores padrão. Os valores padrão são os estilos que um elemento terá automaticamente antes de você adicionar sua folha de estilos. O valor padrão para alinhamento de texto é esquerdo, portanto, não muda em relação à aparência anterior.\n6.  **Quais são os valores possíveis para alinhamento de texto?**\n    -   Você pode escolher entre “esquerda”, “direita” e “centro”. Você pode ler mais sobre a propriedade text-align em [W3Schools - CSS text-align Property] [4].\n7.  **Por que o `espaçamento entre letras: 0px;`não faz nada?**\n    -   A maioria das propriedades tem valores padrão. Os valores padrão são os estilos que um elemento terá automaticamente antes de você adicionar sua folha de estilos. O valor padrão para espaçamento entre letras é 0, portanto, ele não muda em relação à aparência anterior.\n8.  **Quais são os valores possíveis para o espaçamento entre letras?**\n    -   Você pode escolher entre números negativos e positivos. Números negativos colocam as letras mais próximas umas das outras, enquanto números positivos afastam ainda mais as letras.\n9.  **O que significa `px`/O que é um pixel?**\n    -   Pixel, que é abreviado como `px`, é como os elementos são medidos em CSS. É do tamanho de um único ponto de luz na tela.\n10. **Por que `text-shadow: 0px 0px;`não faz nada?**\n    -   A maioria das propriedades tem valores padrão. Os valores padrão são os estilos que um elemento terá automaticamente antes de você adicionar sua folha de estilos. O valor padrão para text-shadow é 0px 0px, portanto, ele não muda em relação à aparência anterior.\n11. **Quais são os valores possíveis para text-shadow?**\n    -   Você pode escolher entre números negativos e positivos. Números negativos movem a sombra para a esquerda ou para cima, enquanto números positivos movem a sombra para a direita ou para baixo.\n\n**Links escolares do W3**\n\n-   [Propriedades do texto CSS] [5]"
        },
        "csd-2022/timed-for-loop": {
          "display_name": "Loop For Cronometrado",
          "content": "O `for loop` é uma construção útil com alguns atalhos realmente úteis para tornar a contagem com um loop muito mais fácil. Especificamente, a sintaxe de um _for loop_ permite que você faça facilmente:\n\n1.  Crie uma variável contadora (geralmente chamada de `i`)\n2.  Especifique a condição que determina se deve ou não continuar fazendo o loop\n3.  Dite como o contador deve ser incrementado\n\nAo usar um _loop temporizado_ no lugar de um _for loop_, você precisará cuidar dessas três tarefas sozinho.\n\n### Usando um loop temporizado como um loop For\n\nAqui está uma comparação de como você pode replicar o comportamento de um _loop temporizado_ com um _loop temporizado_. Ambos os exemplos se repetirão quatro vezes, imprima o seguinte no console:\n\n    loop #0\n    loop #1\n    loop #2\n    loop #3\n\n[For Loop Loop Comparison] [1]\n\n\\[] [0]\n\n1.  A variável do contador. Observe que ao usar um _loop temporizado_, a variável deve ser criada antes do loop.\n2.  A condição de saída. Assim que essa condição for `falsa`, o loop deixará de se repetir. Uma diferença fundamental aqui é que o _for loop_ verifica sua condição de saída **antes** de cada repetição do loop, e o _loop temporizado_ verifica a condição **durante** cada repetição.\n3.  O padrão do contador. Isso move o contador para cima a cada repetição. Outra diferença aqui é que o _for loop_ executa seu padrão de contador **após** cada repetição, e o _loop temporizado_ executa o padrão de contador **durante** cada repetição.\n4.  O código a ser repetido. No exemplo de _timed loop_, colocamos isso em uma instrução _if/else_ para que possamos verificar se devemos executar o código ou não da mesma forma que o loop for.\n\n[/] [0]\n\n### Outras abordagens\n\nO exemplo oferecido acima é a combinação mais próxima de como um _for loop_ funciona, mas você tem a liberdade de estruturar seu _loop temporizado_ da maneira que quiser. Cada um dos três exemplos a seguir executará as mesmas quatro repetições do anterior, mas cada um usa uma **condição de saída diferente**.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_1.png\" style=\"width: 30%; padding: 10px; float: left;\">\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_2.png\" style=\"width: 30%; padding: 10px; float: left;\">\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop_3.png\" style=\"width: 30%; padding: 10px; float: left;\">"
        },
        "csd-2022/timed-loop": {
          "display_name": "Loop cronometrado",
          "content": "O `for loop` é uma estrutura muito útil para repetir algo muitas vezes rapidamente ou iterar sobre uma lista de coisas, mas não adianta muito se você quiser repetir algo mais lentamente. Para casos em que você deseja controlar a rapidez com que a repetição acontece, você vai querer um **Loop Cronometrado**.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedLoop.png\" alt=\"timedLoop\" class=\"center\" style=\"width: 600px; margin: 25px auto;\">\n\n### A estrutura de um loop cronometrado\n\nNa verdade, um \\_loop cronometrado é composto por dois blocos:\n\n-   O bloco [`TimedLoop ()64B5F6`(#] [1], que recebe duas entradas:\n    -   A entrada _ms_ determina quantos milissegundos esperar antes de repetir o loop. O valor padrão é 1000 milissegundos ou 1 segundo.\n    -   A entrada _callback_ é a função que será executada sempre que o loop se repetir.\n\n-   O bloco [`stopTimedLoop ()64B5F6`(#] [2] que interrompe _todos_ os loops cronometrados em execução.\n\n### Como funciona\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/timedloop_diagram.png\" alt=\"timedLoop diagram\" class=\"center\">\n\n\\[] [0]\n\n1.  Todo esse bloco é o Timed Loop\n2.  Número de milissegundos a serem esperados após cada repetição do loop. 1000 milissegundos = 1 segundo.\n3.  A seção verde é nossa _função de retorno de chamada_ - o código que executamos toda vez que o loop se repete.\n4.  O bloco [`stopTimedLoop ()64B5F6`(#] [3] diz a todos os _Timed Loops_ em execução que parem de funcionar. Observe que quando [`stopTimedLoop ()64B5F6`(#] [4] é chamado, o loop cronometrado não necessariamente será encerrado imediatamente, mas não se repetirá na próxima vez.\n\n[/] [0]"
        },
        "csd-2022/update-screen-pattern": {
          "display_name": "O padrão updateScreen ()",
          "content": "| Nome                     | Código (bloco) | Código (texto) |\n| ------------------------ | -------------- | -------------- |\n| O padrão UpdateScreen () | \\[] [0]        | \\[] [1]        |\n\n## Como funciona?\n\nMuitos projetos do App Lab são executados da seguinte forma.\n\n1.  O usuário interage com um elemento da tela (como clicar em um botão ou digitar em uma caixa de texto). Isso aciona um manipulador de eventos.\n2.  O manipulador de eventos altera os valores armazenados nas variáveis.\n3.  As informações na tela são atualizadas para refletir a alteração na variável.\n\nNormalmente, cada um dos seus manipuladores de eventos (blocos [`OnEvent` (#fff176)] [2]) incluirá código idêntico para a etapa 3, atualizando a tela. Para evitar esse problema, crie uma única função chamada `UpdateScreen` que inclua o código para alterar cada elemento na tela depois que as variáveis forem atualizadas.\n\nÉ recomendado que você use o `UpdateScreen` dentro de cada manipulador de eventos e também uma vez no início do programa. Isso garante que o mesmo código esteja sempre sendo usado para atualizar as informações que aparecem na tela."
        },
        "csd-2022/using-data-with-categorical-features": {
          "display_name": "Usando Dados com Recursos Categóricos",
          "content": "## Analisando dados categóricos\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/CatFeature_1.png\" width=\"75%\" />\n<p>\nAo clicar em uma coluna com dados categóricos, você pode ver mais informações no painel à direita do IALab\n</p>\n\n\\[] [0]\n\n1.  Esse é o nome da coluna que você selecionou\n2.  Essa é uma descrição da coluna que você selecionou. Ele pode fornecer mais informações sobre os dados nesta coluna. Se os dados vierem de uma pesquisa, geralmente conterão a pergunta feita na pesquisa\n3.  Um gráfico **Cross-Tab** mostra como essa coluna está relacionada ao rótulo que você está tentando prever.\n4.  Um gráfico **Bar** mostra quantas vezes um determinado valor aparece no gráfico\n5.  Pressione o botão “Adicionar recurso” para usar essa coluna como uma das entradas em seu modelo de aprendizado de máquina\n\n[/] [0]\n\n## Lendo gráficos de tabulação cruzada\n\nNo gráfico de tabulação cruzada, verifique se o recurso escolhido tem uma forte relação com seu rótulo. A coloração e as porcentagens ajudarão você: quanto mais os dados estiverem agrupados em torno de um valor específico, mais útil será para o IA Bot tomar sua decisão.\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px;\" src=\"https://curriculum.code.org/media/uploads/image_xbg0lmF.png\" width=\"30%\" />\n<p>\nEste gráfico mostra uma forte relação entre o recurso e o rótulo. 90% das pessoas que disseram não ao molho italiano também disseram que não gostaram da salada, que é um padrão que o IA Bot pode notar. Da mesma forma, 89% das pessoas que disseram sim ao molho italiano também disseram que gostaram da salada.</p>\n<p>\nIsso significa que se o IA Bot perguntar “Você comeu molho italiano na salada?”, há uma forte mudança de prever se você gostou ou não da salada com base na sua resposta.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:right; margin-right: 10px; margin-left: 10px;\" src=\"https://curriculum.code.org/media/uploads/image_6FVwl65.png\" width=\"30%\" />\n<p>\nEste gráfico não mostra uma forte relação entre o recurso e o <strong></strong> rótulo. Os dados mostram que quando as pessoas colocavam frango na salada, cerca de 50% delas não gostavam da salada e os outros 50% gostavam da salada. Isso é basicamente o mesmo que jogar uma moeda! Esse tipo de relacionamento pode confundir o IA Bot, já que nenhuma das respostas mostra uma forte conexão entre si.</p>\n<p>\nIsso significa que se o IA Bot perguntar “Você comeu frango na salada?”, as chances de que ele também preveja se você gosta ou não da salada são as mesmas que jogar uma moeda.\n</p>\n</div>\n\n## Vídeo\n\n(Abre o YouTube em uma nova guia)\n\n\\[[Introdução ao IA Lab] [2]] [1]"
        },
        "csd-2022/using-data-with-numerical-features": {
          "display_name": "Usando Dados com Recursos Numéricos",
          "content": "## Analisando dados numéricos\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/NumFeature_1.png\" width=\"75%\" />\n<p>\nAo clicar em uma coluna com dados numéricos, você pode ver mais informações no painel à direita do IA Lab\n</p>\n\n\\[] [0]\n\n1.  Esse é o nome da coluna que você selecionou\n2.  Essa é uma descrição da coluna que você selecionou. Ele pode fornecer mais informações sobre os dados nesta coluna. Se os dados vierem de uma pesquisa, geralmente conterão a pergunta feita na pesquisa\n3.  Um **Gráfico de dispersão** mostra como essa coluna está relacionada ao rótulo que você está tentando prever.\n4.  Um gráfico **Intervalo** mostra os valores mínimo e máximo nessa coluna e o intervalo entre eles. Isso pode ser útil para identificar se há um erro em seus dados, como um valor acidentalmente muito grande ou muito pequeno.\n5.  Pressione o botão “Adicionar recurso” para usar essa coluna como uma das entradas em seu modelo de aprendizado de máquina\n\n[/] [0]\n\n## Lendo gráficos de dispersão\n\nNo gráfico de dispersão, verifique se o recurso escolhido tem uma forte relação com seu rótulo. Você pode ver se os pontos seguem um padrão que permite fazer uma declaração “Quando o recurso é... isso significa que o rótulo é...”. Por exemplo:\n\n-   Quando a temperatura é _menor_, o número de morcegos no céu é _maior_\n-   Quando o custo dos ingressos é _maior_, a participação nos jogos é _menor_\n\nEsses tipos de padrões facilitam que o IA Bot faça previsões.\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: solid 2px black\" src=\"https://curriculum.code.org/media/uploads/image_PxfTjEs.png\" width=\"50%\" />\n<p>\nEsse gráfico mostra uma forte relação entre o recurso na parte inferior do gráfico e o rótulo na lateral do gráfico.\n- Quando há um número baixo de antílopes, também há um número baixo de leões\n- Quando há um número alto de antílopes, também há um número alto de leões.\n<p>\nIsso significa que se o IA Bot sabe quantos antílopes estão na natureza, ele tem uma forte mudança de prever quantos leões também estão na natureza.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:right; margin-right: 10px; margin-left: 10px; border: solid 2px black\" src=\"https://curriculum.code.org/media/uploads/image_LtrzSMX.png\" width=\"50%\" />\n<p>\nEste gráfico não mostra uma forte relação entre o recurso e o <strong></strong> rótulo. Ao observar em que dia do mês é, há uma grande variedade no número de leões que você pode ver naquele dia específico. Um gráfico melhor teria todos os pontos agrupados mais próximos em um determinado dia do mês.\n<p>\nIsso significa que se o IA Bot sabe em que dia do mês é, isso não ajuda a determinar quantos leões podem ter estado na natureza naquele dia.\n</p>\n</div>\n\n## Vídeo\n\n(Abre o YouTube em uma nova guia)\n\n\\[[Dados numéricos no laboratório de IA] [2]] [1]"
        },
        "csd-2022/variable-with-string-concatenation-pattern": {
          "display_name": "Variável com padrão de concatenação de cadeias",
          "content": "| Nome | Código (bloco) | Código (texto) |\n| ----------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------String + \"e\" + myOtherString; \\`|\n <br> <br><br>\n\nO modelo pode ser lido da seguinte forma:\n\n_A variável `myString` recebe o valor `\"rock\"`. A variável `myOtherString` recebe o valor `\"roll\"`. A variável `MyStory` avalia a expressão `myString + \"e\" + myOtherString` como `\"rock and roll\"`. `\"rock and roll\"` agora está armazenado em `MyStory`._\n\n## Como funciona?\n\nAs cadeias de caracteres são quaisquer caracteres, símbolos ou números contidos entre aspas.\n\n`\"Meu melhor amigo\"`\n<br>\n`\"243\"`\n<br>\n`\"Uau!”`\n\nA concatenação é usada para combinar uma string com outra string ou número. Essas sequências ou números podem até ser armazenados em variáveis!\n\nPara concatenar, use o `+` entre os valores.\n\n`\"Up” + \"e\" + “down\"`\n\nPara usar a **Variável com padrão de concatenação de string**, é definida uma variável que armazena o valor de uma string combinada com outra string ou número.\n\n## Exemplos\n\n\\[] [1]\n\n_A variável `MyName` recebe o valor `\"Randy\"`. A variável `MyAge` recebe o valor `16`. A variável `statement` avalia se a expressão `MyName + \"tem\" + MyAge + \"anos. “`a `\"Randy tem 16 anos. “`. `\"Randy tem 16 anos. “`é armazenado na variável `statement` que é então impressa no console._\n\n\\[] [2]\n\n_A variável `score` obtém o valor `0`. A variável `lives` recebe o valor `3`. A variável `stats` avalia a expressão `\"Pontuação: \"+ pontuação +\" Vidas: \"+ vidas` como `\"Pontuação: 0 Vidas: 3\"`. `\"Score: 0 Lives: 3\"` é armazenado na variável `stats` que é então impressa no console._\n\n\\[] [3]\n\n\\_As variáveis são atualizadas sempre que os botões são clicados usando o [Counter Pattern with Event] [4]. A variável `stats` obtém os valores das variáveis `score` e `lives` e os concatena com `\"Score: “`e `\"Lives: “` antes de atualizar a exibição na tela. \\_"
        },
        "csd-2022/when-to-make-a-function": {
          "display_name": "Quando criar uma função",
          "content": "Uma pergunta importante para novos programadores é “Quando devo decidir criar uma função”. Em geral, quanto mais cedo você perceber que precisa de uma função, melhor. Essa é uma habilidade na qual você vai melhorar com a prática. **Ao final deste curso, você deve procurar estar nas linhas Durante ou Antes.**\n\n| Quando você cria funções | Descrição                                                                                                                                                                                                               | Comentários                                                                                                                                                                                                                                                                    |\n| :----------------------: | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n|           Nunca          | Você nunca cria funções.                                                                                                                                                                                                | Seu código será difícil de ler e depurar e terá muitos códigos repetidos. Procure passar pelo menos para a etapa “Depois”.                                                                                                                                                     |\n|          Depois          | Você escreve seu programa inteiro sem funções. Depois de terminar, você procura códigos repetidos e os move para uma função.                                                                                            | Seu código está muito mais fácil de ler e depurar agora. Você também está melhorando em ver como seu programa está organizado. À medida que você se sentir mais confortável, tente passar para “Durante” ou “Antes”.                                                           |\n|          Durante         | Ao escrever seu código, você percebe que quando está prestes a reescrever um código que você já escreveu em outro lugar do seu programa. Antes de prosseguir, você declara uma função e chama essa função em vez disso. | Você tem uma boa compreensão do seu programa e é capaz de mantê-lo organizado à medida que o desenvolve. Veja se às vezes você consegue passar para “Antes”.                                                                                                                   |\n|           Antes          | Antes de escrever seu programa, você faz um plano e identifica lugares onde é provável que você use código repetido. Você cria sua função no início.                                                                    | Esse nível reflete uma forte compreensão de como seu programa será projetado. Você quase pode “ver isso na sua cabeça” antes de começar a escrever. Dito isso, tudo bem se às vezes você perceber que precisa de uma função enquanto programa e trabalha no estágio “Durante”. |"
        }
      }
    }
  }
}