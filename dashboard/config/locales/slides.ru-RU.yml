"ru":
  slides:
    maze_intro:
      1:
        image: notes/hoc1_1.jpg
        text: Добро пожаловать на Ваш первый час кода! Ощутите вкус программирования!
      2:
        image: notes/hoc1_2.jpg
        text: Мы будем использовать Блокли  - визуальный язык программирования, в
          котором программа создаётся собиранием необходимых блоков.
      3:
        image: notes/hoc1_3.jpg
        text: Большинство программ состоят из строк кода, но Блокли - визуальный язык
          программирования. Каждый блок - это строка «реального» кода.
      4:
        image: notes/hoc1_4.jpg
        text: Вы получите знания об основах компьютерных технологий, понятий, которые
          используются и для создания простых программ, и для управления  марсоходом.
      5:
        image: notes/hoc1_5.jpg
        text: Программа - это набор команд, по которым должен работать компьютер.
      6:
        image: notes/hoc1_6.jpg
        text: 'Цель первой программы: Сердитая Птица идёт по лабиринту, чтобы разобраться
          с Зелёной Хрюшкой.'
      7:
        image: notes/hoc1_7.jpg
        text: Левая часть экрана - это лабиринт, в котором  программа будет работать.
          Инструкции для каждой головоломки написаны ниже лабиринта.
      8:
        image: notes/hoc1_8.jpg
        text: Средняя часть экрана - это панель с командами для управления Сердитой
          Птицей. Эти команды вы будете использовать для создания вашего кода.
      9:
        image: notes/hoc1_9.jpg
        text: Справа на экране — рабочее пространство, куда вы будете переносить блоки
          из средней панели для создания программы. Чтобы удалить блок, перенесите
          его в корзину в углу.
      10:
        image: notes/hoc1_10.jpg
        text: Каждый блок - это одна инструкция. Если вы перенесёте блок «двигаться
          вперед» в рабочую область и нажмете кнопку «Запустить программу», птица
          продвинется в лабиринте на одну клетку  вперед.
      11:
        image: notes/hoc1_11.jpg
        text: Чтобы совершить несколько действий, можно перетащить много блоков в
          рабочую область и соединить их. Птица будет выполнять команды, начиная с
          самой верхней.
      12:
        image: notes/hoc1_12.jpg
        text: Если вы запустили программу, а затем хотите что-то исправить и снова
          ее запустить, нажмите кнопку «Сброс».
      13:
        image: notes/hoc1_13.jpg
        text: Давай зададим этим хрюшкам!
    artist_intro:
      1:
        image: notes/stage5_1.jpg
        text: Привет, меня зовут Джей Ар! Каждой гоночной команде для победы нужны
          компьютерные специалисты. Они анализируют информацию с машин, чтобы сделать
          их ещё быстрее.
      2:
        image: notes/stage5_2.jpg
        text: В этой серии задач ты станешь художником, который рисует линию на пути
          своего движения, куда бы он ни направлялся.
      3:
        image: notes/stage5_3.jpg
        text: В этом блоке написано "двигаться вперед на 100 пикселей". Пиксели -
          это маленькие точки, из которых состоит изображение на твоем мониторе.
      4:
        image: notes/stage5_4.jpg
        text: В этом блоке говорится «повернуть вправо на 90 градусов.» Блок позволит
          повернуть художника так же, как блок "повернуть" в головоломке "Лабиринт".
      5:
        image: notes/stage5_5.jpg
        text: Нажмите на стрелку в любом из этих блоков, чтобы изменить расстояние,
          на которое движется художник, или угол поворота. Поиграйтесь с этими новыми
          блоками, чтобы лучше с ними познакомиться.
    farmer_intro:
      1:
        image: notes/stage9_1.jpg
        text: Привет, я Паола! В этой головоломке ты станешь фермером, который должен
          выровнять свое поле, чтобы начать сажать растения.
      2:
        image: notes/stage9_2.jpg
        text: Ты должен помочь ей раскидать все кучи земли и засыпать все ямы.
      3:
        image: notes/stage9_3.jpg
        text: Новые блоки могут раскидывать одну лопату земли из кучи или засыпать
          одну лопату земли в яму.
      4:
        image: notes/stage9_4.jpg
        text: Ямы и кучи имеют различные размеры, так что тебе надо будет указать
          фермеру, сколько раз махать лопатой.
    flappy_intro:
      1:
        image: Примечания/flappy01.jpg
        text: Привет меня зовут Кэти! Одна из самых интересных вещей в изучении компьютера
          то, что компьютерная программа может быть интерактивна.
      2:
        image: Примечания/flappy02.jpg
        text: Каждый раз, когда кто-то щёлкает мышью, касается экрана или печатает
          на компьютере или телефоне, это запускает СОБЫТИЕ и определённый код, который
          решает, что делать, когда происходит СОБЫТИЕ.
      3:
        image: Примечания/flappy03.jpg
        text: 'Например, у вас может быть ОБРАБОТЧИК СОБЫТИЙ, который звучит так :
          «по щелчку мыши воспроизвести звук» '
      4:
        image: Примечания/flappy04.jpg
        text: Вы когда-нибудь слышали о игре "Порхающая птичка"? С помощью обработчиков
          событий, мы будем учиться программировать нашу собственную версию игры "Порхающая
          птичка"!
      5:
        image: Примечания/flappy05.jpg
        text: Код, который вы будете писать включает перетаскивание блоков, которые
          представляют команды для компьютера. Под скрытой частью каждого из этих
          блоков представлен  настоящий код.
      6:
        image: Примечания/flappy06.jpg
        text: 'Если вы посмотрите на рабочую область, там есть некоторые зеленые блоки,
          которые заполняются для вас - это «обработчики событий» '
      7:
        image: Примечания/flappy07.jpg
        text: Если вы хотите чтобы птица взлетела при НАЖАТИИ кнопки мыши, вы можете
          сделать это путем присоединения блока «взлет» в соответствующем обработчике
          событий, и теперь в игре при нажатии кнопки мыши, птица будет взлетать.
      8:
        image: Примечания/flappy08.jpg
        text: В каждой головоломке этой деятельности мы познакомимся с новыми типами
          событий, такими как зеленые блоки на рабочей области, и вы можете решить
          соответствующие блоки для добавления в ответ на эти события.
      9:
        image: Примечания/flappy09.jpg
        text: Если вы видите стрелки выпадающего меню, как эти, это значит, что можно
          изменить настройки - например, какой будет звук, когда Птичка падает на
          землю.
      10:
        image: Примечания/flappy10.jpg
        text: В последней головоломке у вас будет возможность создать свою собственную
          игру и поделиться ей с друзьями. Веселитесь!
    loop_times:
      1:
        image: notes/hoc2_1.jpg
        text: Привет, меня зовут Марк! Давайте узнаем, что такое циклы в программировании.
          С помощью цикла вы можете сказать компьютеру, чтобы он повторил любой набор
          команд снова и снова, тысячи или даже миллиарды раз.
      2:
        image: notes/hoc2_2.jpg
        text: В этой головоломке мы хотим добиться того, чтобы птичка продвинулась
          вперед на 5 клеток и добралась до хрюшки.
      3:
        image: notes/hoc2_3.jpg
        text: Мы можем использовать новый блок «повторить», чтобы упростить создание
          программы.
      4:
        image: notes/hoc2_4.jpg
        text: Вместо перетаскивания 5-ти блоков «двигаться вперед»...
      5:
        image: notes/hoc2_5.jpg
        text: Мы можем поместить блок «двигаться вперед» внутрь блока «повторить»
          и написать число в блоке - сколько раз повторять.
      6:
        image: notes/hoc2_6.jpg
        text: 'Важно отметить: вы можете вставить более одной команды внутрь блока
          «повторить».'
      7:
        image: notes/hoc2_7.jpg
        text: Приятного использования нового блока «повторить»!
    loop_until:
      1:
        image: notes/hoc3_1.jpg
        text: Привет, я Крис. Прежде, чем я вошёл в команду Майами Хит, я изучал компьютерные
          науки. Давайте опробуем наш новый блок под названием "повторять пока".
      2:
        image: notes/hoc3_2.jpg
        text: А если мы не знаем, какое расстояние должна преодолеть птица, чтобы
          добраться до хрюшки?
      3:
        image: notes/hoc3_3.jpg
        text: Если мы поместим блок "двигаться вперед" внутрь блока "повторять пока",
          птица будет двигаться вперед ПОКА она не достигнет хрюшки (или пока не врежется
          в препятствие).
      4:
        image: notes/hoc3_4.jpg
        text: 'Вот что важно: как и раньше, мы можем помещать различное количество
          блоков внутрь блока "повторять пока", и они все будут повторены.'
    if:
      1:
        image: notes/hoc4_1.jpg
        text: 'Привет! Меня зовут Билл. Давайте познакомимся с новым фундаментальным
          понятием: командой «Если». Эта команда принятия решения компьютером.'
      2:
        image: notes/hoc4_2.jpg
        text: 'Мы используем "Если" постоянно. Перед выходом на улицу каждое утро
          ты действуешь по принципу: "ЕСЛИ на улице дождь, то мне следует надеть куртку".'
      3:
        image: notes/hoc4_3.jpg
        text: Мы можем сделать так, чтобы зомби проверял, есть ли путь налево, и ЕСЛИ
          он найдет путь налево, мы можем повернуть его туда.
      4:
        image: notes/hoc4_4.jpg
        text: Чтобы написать код для этого случая, понадобится перенести блок "повернуть
          налево" внутрь блока "если".
      5:
        image: notes/hoc4_5.jpg
        text: Если теперь мы поставим  блок «двигаться вперед» над ним и блок «повторить»
          вокруг всех блоков, зомби на каждом шагу будет проверять , есть ли путь
          налево и повернёт, когда поворот будет.  Команда «повторить» необходима
          для проверки поворота на каждом шагу.
      6:
        image: notes/hoc4_6.jpg
        text: 'Понятие "если" очень важно в программировании. Одной из первых написанных
          мною программ была игра "крестики-нолики", и она была построена на таком
          "если":  ЕСЛИ противник близок к победе, займи нужную ему для победы клетку.'
      7:
        image: notes/hoc4_7.jpg
        text: Удачи с использованием блока «Если»!
    if_else:
      1:
        image: notes/hoc5_1.jpg
        text: Привет, меня зовут Салони. С помощью информатики я пытаюсь решить проблемы
          здоровья и медицины. Давайте изучим блок "if else" ("если иначе"). Он похож
          на блок "if" ("если"), но в конце у него есть дополнительная часть - "else"
          ("иначе").
      2:
        image: notes/hoc5_2.jpg
        text: Если я поставлю блок "двигаться вперед" в область, где сказано "выполнить",
          и поставлю блок "повернуть налево" туда, где сказано "иначе", это будет
          означать, что зомби будет выбирать между двумя вариантами. Если путь впереди
          свободен, зомби пройдет вперед, а ИНАЧЕ (то есть если вперед никак не пройти)
          зомби повернется налево.
      3:
        image: notes/hoc5_3.jpg
        text: Так же, как блок "если", блок "если/иначе" можно поместить внутрь блоков
          "повторять", чтобы зомби с помощью блока "если/иначе" постоянно проверял
          во время движения возможность повернуть.
      4:
        image: notes/hoc5_4.jpg
        text: Теперь отправьте этих зомби туда, где им положено быть!
    if_else_scrat:
      1:
        image: notes/saloni_ifelse_scrat1.jpg
        text: Утверждение "если/иначе" (if/else) - выбор между двумя действиями. Давайте
          посмотрим, как можно использовать "если/иначе" вместе с нашим другом белкой
          Скратом.
      2:
        image: notes/saloni_ifelse_scrat2.jpg
        text: Этот блок такой же как блок "если" ("if"), но у него внизу есть дополнительная
          часть "иначе" ("else"). Если я помещу блок "двигаться вперёд" ("move forward")
          туда, где написано "выполнить" ("do"), а блок "повернуть вправо" ("turn
          left") туда, где написано "иначе" ("else"), это значит, что Скрат будет
          двигаться вперёд, если перед ним есть дорога. Если пути вперёд нет, Скрат
          повернёт влево.
      3:
        image: notes/saloni_ifelse_scrat3.jpg
        text: Это и есть принятие решения и совершение одного из двух возможных действии
          на основании такого решения. И точно так же, как и блоки "если", блоки "если-иначе"
          можно поместить внутрь блока "повторить" ("repeat").
      4:
        image: notes/saloni_ifelse_scrat4.jpg
        text: А теперь давай поможем Скрату добыть этот жёлудь!
    function:
      1:
        image: notes/stage13_1.jpg
        text: Привет, я Брина, инженер в Instagram. Процедура это определённые строки
          кода, который вы хотите использовать многократно, в результате, вместо написания
          этого кода каждый раз, вы можете просто использовать один блок.
      2:
        image: notes/stage13_2.jpg
        text: Теперь мы научимся создавать процедуры. У процедур есть звездочка в
          уголке, а имя процедуры  написано сверху.
      3:
        image: notes/stage13_3.jpg
        text: Блоки внутри процедуры описывают, что процедура делает. Эта процедура
          называется "засыпать 5" и содержит блоки "повторить" и "засыпать".
      4:
        image: notes/stage13_4.jpg
        text: Процедура находится в рабочей области, но наш фермер не может выполнять
          процедуру, пока мы не достанем блок "засыпать 5" из группы Процедуры.
      5:
        image: notes/stage13_5.jpg
        text: 'Пусть ваша работа с процедурами будет приятной процедурой! '
    loop_while:
      1:
        image: notes/stage9_5.jpg
        text: 'Привет, меня зовут Макинде. Давайте изучим блок "пока". '
      2:
        image: notes/stage9_6.jpg
        text: Блок «пока» будет делать всё, что вы поместите внутрь него, ПОКА условие,
          написанное  наверху, ВЕРНО.
      3:
        image: notes/stage9_7.jpg
        text: Например, если фермер стоит на куче, она будет продолжать разбрасывать
          по одной лопате земли, ПОКА под ней ещё есть куча.
    loop_for:
      1:
        image: notes/stage11_1.jpg
        text: Привет, я Трина, я работаю в Pixar. Я работала над многими фильмами,
          в том числе "Шрек".
      2:
        image: notes/stage11_2.jpg
        text: Это наш новый «цикл по». Он будет выполнять действия снова и снова,
          и вы можете каждый раз немного менять действия.
      3:
        image: notes/stage11_3.jpg
        text: 'В этом примере в нашем «цикле по» сказано: «цикл по счётчику от 50
          до 90 с шагом 10», и внутри него есть наш блок «нарисуйте квадрат». Перенесите
          блок «счётчик» из группы  «Переменные» на место параметра «длина».'
      4:
        image: notes/stage11_4.jpg
        text: Это означает, что наш художник собирается рисовать квадрат со стороной
          50. Потом он добавит 10 к длине стороны и нарисует квадрат размером 60.
          ...Так он будет продолжать добавление 10 к длине стороны квадрата до тех
          пор, пока не достигнет 90. В результате мы получим квадраты размером 50,
          60, 70, 80 и 90.
    parameters:
      1:
        image: notes/stage15_1.jpg
        text: Привет, меня зовут Жанет, я работаю инженером в Zynga.
      2:
        image: notes/stage15_2.jpg
        text: Что надо делать, если мы хотим нарисовать несколько правильных треугольников
          разных размеров?
      3:
        image: notes/stage15_3.jpg
        text: Мы могли бы написать этот код вручную или вместо этого использовать
          процедуру "нарисовать треугольник" с параметрами.
      4:
        image: notes/stage15_4.jpg
        text: Для добавления параметра к процедуре, нажмите на голубую звёздочку на
          определении процедуры «нарисовать треугольник». Затем перенесите «имя параметра»
          в блок «параметры».
      5:
        image: notes/stage15_5.jpg
        text: Теперь если вы напишете «длина» в том месте, где указано «x» и нажмёте
          «Ввод» - вы создадите параметр длины для процедуры.
      6:
        image: notes/stage15_6.jpg
        text: Затем нажмите на звездочку. Теперь откройте группу Переменные и перенесите
          блок «длина» в блок «двигаться вперед» из вашего определения процедуры на
          место числа. Прежнее число перенесите в мусорную корзину.
      7:
        image: notes/stage15_7.jpg
        text: Чтобы использовать процедуры с параметрами, откройте группу «Процедуры»
          и перенесите  вашу процедуру «нарисовать треугольник с длиной» .
      8:
        image: notes/stage15_8.jpg
        text: Теперь вы можете использовать процедуру с параметром, блок параметра
          нужно брать из группы Математика и задавать в блоке нужное значение длины
          для рисования треугольников разного размера.
    hoc_wrapup:
      1:
        image: notes/hoc6_1.jpg
        text: "Поздравляю! \nПо созданному в последнем задании коду ЛЮБОЙ робот может
          найти дорогу через линейный лабиринт или туннель любого размера. \nЭто может
          быть зомби, птица, луноход или даже самоуправляемый автомобиль.\n"
      2:
        image: notes/hoc6_2.jpg
        text: "Основные понятия, использованные вами, являются центром любой программы,
          которую вы когда-либо использовали. \nМы изучили  циклы \"повторить несколько
          раз\" и \"повторять пока\", а также \nкоманды выбора \"если\" и \"если/иначе\".\n"
      3:
        image: notes/hoc6_3.jpg
        text: Если вам понравился ваш первый час кода, посетите code.org, чтобы продолжить
          ваше образование в области компьютерных наук! Завершив наш 20-тичасовой
          курс, вы освоите основы программирования и можете начать учиться писать
          приложения для телефонов, инструкции для роботов, игры и много чего ещё.
      4:
        image: notes/hoc6_4.jpg
        text: Технологии изменяют всё, чем мы занимаемся, и не важно, молод ты или
          зрел, программирование - это творческое и занимательное занятие, и ему может
          обучиться каждый!
    20_wrapup:
      1:
        image: notes/bird.png
        text: Показать заметки, которые скоро будут!
    frozen_intro:
      1:
        image: notes/frozen1_1.jpg
        text: Привет! Меня зовут Линдси. Я придумываю, моделирую и пишу приложения.
          Давайте использовать код и присоединимся к Анне и Эльзе в их исследовании
          магии и красоты льда.
      2:
        image: notes/frozen1_2.jpg
        text: Будем кататься на коньках и рисовать на льду снежинки и узоры, создавать
          зимнюю страну чудес и делиться этим с друзьями.
      3:
        image: notes/frozen1_3.jpg
        text: В течение следующего часа ты узнаешь основное о том, как создавать код.
          Традиционное программирование - это обычно текст, но мы будем пользоваться
          языком Блокли, использующим наглядные блоки, которые можно перетаскивать,
          чтобы писать программы. Таким образом изучают основы даже студенты университетов.
          Но под прикрытием блоков ты всё равно создаёшь код.
      4:
        image: notes/frozen1_4.jpg
        text: Программа - это набор инструкций, говорящих компьютеру, что делать.
          Давай построим код, или программу, которая поможет Эльзе провести простую
          линию. Это позже пригодится нам для создания более сложных узоров.
      5:
        image: notes/frozen1_5.jpg
        text: Экран поделён на три основные части. Слева - лёд, на котором будет запущена
          твоя программа. Ниже льда находится инструкция к каждому уровню.
      6:
        image: notes/frozen1_6.jpg
        text: Эта часть посередине - панель инструментов, и каждый из этих блоков
          - действие, которое Эльза и Анна могут совершить.
      7:
        image: notes/frozen1_7.jpg
        text: Белое пространство справа называется рабочим пространством. Это то место,
          где мы будем строить программу. Чтобы двигаться по льду, ты будешь использовать
          блок "двигаться вперёд".
      8:
        image: notes/frozen1_8.jpg
        text: Здесь в блоке "двигаться вперёд" указано "двигаться вперёд на 100 точек".
          Что произойдёт, когда мы нажмём кнопку "Выполнить"? Эльза передвинется вперёд
          на определённое расстояние, а именно на 100 точек! Точки - это пиксели,
          крохотные квадратики на экране компьютера.
      9:
        image: notes/frozen1_9.jpg
        text: В другом блоке из этой задачи написано "повернуть вправо на 90 градусов".
          И когда мы используем такой  блок "повернуть вправо", он заставляет Эльзу
          повернуть на определённое количество градусов. Можно поиграться, разворачивая
          Эльзу настолько широко, насколько ты хочешь. Угол откладывается от линии
          пути впереди Эльзы. Это - поворот на 90 градусов. А это - поворот на 120
          градусов.
      10:
        image: notes/frozen1_10.jpg
        text: Помни, что можно менять количество точек и градусов, нажимая на стрелки
          рядом с ними.
    frozen_loops:
      1:
        image: notes/frozen2_1.jpg
        text: Привет, я - Паула! Компьютеры хорошо выполняют повторяющиеся действия.
          Ты можешь сосчитать до 10, 20 или 100. А компьютер может сосчитать до миллиарда
          и биллиона. И это совершенно не наскучит ему и займёт буквально несколько
          секунд. Что бы компьютер ни делал - считал, рисовал или делал что-то другие
          - он может повторять это сотни и даже миллиарды раз.
      2:
        image: notes/frozen2_2.jpg
        text: В программировании мы называем это циклами. Цикл - это когда ты повторяешь
          свой код снова и снова. В следующей головоломке твоя цель помочь Анне сделать
          квадрат, используя блок "повторить".
      3:
        image: notes/frozen2_3.jpg
        text: Любой блок кода, который ты поместишь внутрь блока "повторить", будет
          повторён последовательно столько раз, сколько ты пожелаешь.
      4:
        image: notes/frozen2_4.jpg
        text: Чтобы нарисовать квадрат, можно использовать блоки "двигаться вперёд"
          и "повернуть вправо" по 4 раза. Но проще сказать компьютеру один раз "двигаться
          вперёд" и "повернуть вправо на 90 градусов", а потом сказать повторить эти
          два действия 4 раза. Чтобы это сделать, нужно поместить блоки "двигаться
          вперёд" и "повернуть вправо" внутрь блока "повторить".
      5:
        image: notes/frozen2_5.jpg
        text: Помни, ты можешь поменять число внутри блока "повторить" на любое другое,
          и то, что находится внутри этого блока, повторится указанное число раз.
    frozen_functions:
      1:
        image: notes/frozen3_1.jpg
        text: Привет, я - Крис Бош. Я - профессиональный баскетболист и я программировал
          в колледже.
      2:
        image: notes/frozen3_2.jpg
        text: В информатике очень важно понимать, как сформулировать новую команду.
          Большинство языков программирования содержат около 100 слов или команд.
          И это настоящее искусство и волшебство - собрать свои собственные новые
          слова из этих строительных блоков.
      3:
        image: notes/frozen3_3.jpg
        text: Как только ты научишь компьютер, как совершать действие, используя такую
          последовательность команд, можно придумать этому действию название, и так
          потом будет проще повторять его. Когда ты определяешь свою команду и называешь
          её, это называется функция.
      4:
        image: notes/frozen3_4.jpg
        text: Привет, я - Джесс. Если при программировании с помощью блоков появляется
          необходимость использовать какой-то набор действий несколько раз, следует
          использовать функции. Например, тобой написан код для создания квадрата.
      5:
        image: notes/frozen3_5.jpg
        text: 'Можно определить это как функцию и назвать её "создать квадрат" '
      6:
        image: notes/frozen3_6.jpg
        text: Теперь у тебя есть новый блок, который можно использовать множество
          раз, что бы создать множество квадратов.
      7:
        image: notes/frozen3_7.jpg
        text: Многие из простых фигур можно использовать для создания более сложных
          узоров. В следующей головоломке написанный тобой код для создания круга
          можно будет использовать в виде новой функции, которая позволит рисовать
          круги разных размеров. Поможешь Эльзе создать сложные и красивы узоры из
          снега?
    C3_playlab_create_game:
      1:
        image: notes/playlab_1.png
        text: So far you've been making an animation or a story that does the exact
          same thing every time you run it. Now you can make an interactive game that
          you can actually play.
      2:
        image: notes/playlab_2.png
        text: There's the "when arrow" block and the "move actor" block. You can put
          these blocks together to move the actors around with the arrow keys.
      3:
        image: notes/playlab_3.png
        text: And there are some blocks that do stuff when actors collide or are clicked.
          Check them out and have fun!
    playlab_intro:
      1:
        image: notes/playlab_intro_1.png
        text: We're going to create games using Play Lab. Good games have a story,
          and every story has actors. We'll learn how to make our actors like witches,
          alinens, and animals speak, move, and interact with each other. By the end
          of this tutorial, you can build a game from scratch and share it with your
          friends.
      2:
        image: notes/playlab_intro_2.png
        text: Your screen is split into 3 main parts. On the left is the game space
          where your program will run. The instructions for each level are written
          below.
      3:
        image: notes/playlab_intro_3.png
        text: The middle area is the toolbox, and each of these blocks is a piece
          of code. The white space on the right is called the workspace and this is
          where we'll build our program.
      4:
        image: notes/playlab_intro_4.png
        text: To start off, you'll need to link your blocks to the orange "when run"
          block. You can link multiple blocks together by dragging them out until
          you see the yellow line, and then they'll snap together.
      5:
        image: notes/playlab_intro_5.png
        text: In this first puzzle, our actor is a penguin and we'll be making it
          say "Hello!" by dragging the say block out, linking it to the when run block,
          and typing in "Hello." We can also make the penguin move by using the move
          right and move left blocks. Once you have your blocks in place, hit the
          run button to see what you've programmed.
      6:
        image: notes/playlab_intro_6.png
        text: Get started and by the end, you'll be able to create your own game with
          all kinds of players that can interact, turn happy or sad, score points,
          or throw fireballs, or even vanish each other. It's all up to you and the
          game you want to make.
    playlab_events:
      1:
        image: notes/playlab_events_1.png
        text: Now, we're going to learn about something that all game programmers
          use everyday. They're called events. An event tells your program to listen
          for when something happens. When that thing happens, it performs an action.
      2:
        image: notes/playlab_events_2.png
        text: Some examples of events are listening for a mouse click, an arrow button,
          or a tap on the screen.
      3:
        image: notes/playlab_events_3.png
        text: Here, we're going to make the space bot greet the earthlings when a
          player clicks on him. We'll use the "when clicked" block and attach the
          "say" block to it. When the player clicks on the space bot, everything attached
          to this "when clicked" event block will be performed. What does your alien
          say?
      4:
        image: notes/playlab_events_4.png
        text: There are also "when arrow" blocks. If you link the "move" blocks to
          these, you can start to move your actors up, down, left, or right. Step
          by step, your game is getting more interactive.
    playlab_repeat_forever:
      1:
        image: notes/playlab_repeat_forever_1.png
        text: This is the "repeat forever" block. Anything inside this block will
          happen forever in the game.
      2:
        image: notes/playlab_repeat_forever_2.png
        text: If we want an actor to do something repeatedly, without the player having
          to do anything, we'll put those blocks inside the "repeat forever" block.
      3:
        image: notes/playlab_repeat_forever_3.png
        text: In this next puzzle, our goal is to help the wizard patrol the boundaries
          of the kingdom, left and right continuously. Learning how the repeat commands
          works, will save you a ton of time later when you build your own game.
