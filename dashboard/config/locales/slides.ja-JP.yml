---
ja:
  slides:
    maze_intro:
      1:
        text: 初めての「1時間コース」へようこそ！プログラミングを今すぐ体験してみましょう。
      2:
        text: ブロックをドラッグ&ドロップしてコードを記述するビジュアルプログラミング言語ブロッキーを使っています。
      3:
        text: ほとんどのコードは文字で書かれますが、ブロッキーは絵でできています。それぞれのブロックは「本物の」コードの１行に対応します。
      4:
        text: アプリを作ることから火星探査車をコントロールすることまで、いろいろなところで使われるコンピューター科学の基礎を学習します。
      5:
        text: プログラムはあなたのコンピュータを動かす命令の集まりです。
      6:
        text: あなたの最初のプログラムの目標は、アングリーバードに迷路を通り抜けて緑のブタにぶつけさせることです。
      7:
        text: 左側はプログラムを実行させる迷路です。それぞれのパズルの説明は迷路の下にあります。
      8:
        text: 真ん中のツールボックスにはアングリーバードのコマンドがあります。これはコードを組み立てるのに使います。
      9:
        text: 右には、ブロックをツールボックスからドラッグしてプログラムを組み立てるためのワークスペースがあります。ブロックを削除するには、隅にあるゴミ箱へドラッグします。
      10:
        text: ブロックはそれぞれ、1つの命令を表します。「前に進む」ブロックをワークスペースにドラッグして「プログラムの実行」をクリックすると、鳥は迷路の中を1マス進みます。
      11:
        text: いくつかのアクションをするには、たくさんのブロックをワークスペースにドラッグして引っ張ってきて一つにくっつけます。アングリーバードは上から下へコマンドを実行します。
      12:
        text: プログラムを実行後、修正してやり直したいときは、「リセット」ボタンをクリックします。
      13:
        text: ブタを捕まえに行こう！
    artist_intro:
      1:
        text: やあ、私はJR！レーシングカーのチームにはコンピュータ科学者が必要です。彼らは車をより速く走らせるためにデータを分析します。
      2:
        text: これらのパズルでは、あなたは芸術家になってどこでも行った後ろに線を描きます。
      3:
        text: このブロックは「100ピクセル前方に移動」です。ピクセルとは、あなたの画面の本当に小さな点のことです。
      4:
        text: このブロックは「右に90度回転」です。これは、迷路パズルでの回転ブロックと同じように、あなたの芸術家が回ります。
      5:
        text: 芸術家が前に行く距離や回る角度を変えるために、これらのブロックの矢印をクリックしてください。新しいブロックに慣れるために遊んでみよう。
    farmer_intro:
      1:
        text: こんにちは、私はパオラです！これらのパズルでは、あなたは農家になって作物を植えるために畑を平らにしなければなりません。
      2:
        text: あなたは彼女がすべての土の山を取り除いて、すべての穴を埋めるのを手伝わなければなりません。
      3:
        text: 新しいブロックは山から土をシャベル1杯分だけ取り除いたり、穴に土をシャベル1杯分だけ埋めたりできます。
      4:
        text: 泥山や穴は大きさが違うので、あなたは農民にシャベルを何回使えばいいか教えなければなりません。
    flappy_intro:
      1:
        image: notes/flappy01.jpg
        text: こんにちは、私はケイティ です！コンピューター サイエンスについて最もエキサイティングな点の 1 つは、コンピューター プログラムの双方向性です。
      2:
        image: notes/flappy02.jpg
        text: 誰かがPCや携帯電話上をクリック、タップまたはタイプした時はいつでも、イベントが発生します。そしてイベントが発生したときに何をするかを決めるコードがあります。
      3:
        image: notes/flappy03.jpg
        text: '例えば、EVENT-HANDLERを使うと「マウスをクリックしたとき、音を再生する」という命令ができます。 '
      4:
        image: notes/flappy04.jpg
        text: フラッピーバードというゲームは聞いたことがありますか？イベントハンドラー(Event handlers)を使用することで、独自のカスタマイズしたフラッピーバードのプログラムを学ぶことができます。
      5:
        image: notes/flappy05.jpg
        text: コンピュータに指示を与えるブロックをドラッグ&ドロップした、あなたのコード（プログラム）はコンピュータの中でブロックそれぞれが実際のコード（プログラム）に書き表されます。
      6:
        image: notes/flappy06.jpg
        text: 'ワークスペースを見ると、いくつかの緑色のブロックがあります。それが「イベントハンドラー（event handlers）」なのです。 '
      7:
        image: notes/flappy07.jpg
        text: マウスをクリックしたときにバードを飛ばしたいなら、「飛ぶ(flap)」ブロックを適切なイベントハンドラー(event handler)に接続しましょう。するとゲームでマウスをクリックすると、バードが飛びます。
      8:
        image: notes/flappy08.jpg
        text: アクティビティの一つ一つのパズルで、新しいイベントを紹介していきます。そこであなたはイベントに応じて適切なブロックを追加していくのです。
      9:
        image: notes/flappy09.jpg
        text: 次のようにドロップダウンの矢印が表示されたら、設定を変えることができます。たとえば、フラッピーが地面にヒットしたときの再生音などです。
      10:
        image: notes/flappy10.jpg
        text: 最終的なパズルでは、あなた自身のゲームを作成して、友人と共有することができます。ぜひ楽しんで！
    loop_times:
      1:
        text: こんにちは、私はマーク！繰り返しについて学びましょう。繰り返しを使うと、操作の集まりを何度も何度も、何千回でも何億回でも繰り返すようにコンピュータに伝えることができます。
      2:
        text: このパズルでは、鳥がブタのところに行くように鳥を5だけ前に移動させましょう。
      3:
        text: 私たちの助けになる新しい「繰り返し」ブロックを使うことができます。
      4:
        text: 5回「前方に移動する」ブロックをドラッグしてくる代わりに・・・
      5:
        text: "「前方に移動する」ブロックを「繰り返し」ブロックの中に置いて、何回繰り返すのかブロックに数を書くことができます。"
      6:
        text: 重要なこと：「繰り返し」ブロックの内には1つ以上の命令を置くことができます。
      7:
        text: 新しい「繰り返し」ブロックを使って楽しもう！
    loop_until:
      1:
        text: こんにちは、私はクリスです。マイアミ・ヒートに参加する前は、ジョージア工科大学へコンピュータサイエンスを勉強しに行ってました。私たちの新しいブロック「まで繰り返し」ブロックを試してみましょう。
      2:
        text: 鳥がブタのところまで移動するのにどれだけ遠いかわからなかったらどうしましょうか？
      3:
        text: "「まで繰り返し」ブロックの中に「前方に移動する」ブロックを置けば、鳥はブタのところへ行く（または壁に当たってしまう）まで前に進みます。"
      4:
        text: 重要なこと：これまでのように、「まで繰り返し」ブロック内に複数のブロックを置くことができて、すべて繰り返されます。
    if:
      1:
        text: こんにちは、私はビルです。新しい基本的な概念「もし」の文を学びましょう。これは、コンピューターが何かを決めるときに使われます。
      2:
        text: "「もし」の文は日常生活でも使います。朝外に出る前、「もし」外が雨なら、ジャケットを着る必要がある、という風に。"
      3:
        text: 左側に道があるかをゾンビに聞いて、もし(If)左側に道があれば、その方向に曲がるようゾンビに指示します。
      4:
        text: このコードを書くには、「もし」のブロックを引き出した後、「左に曲がれ」のブロックをその中に入れます。
      5:
        text: では、「前に進め」ブロックをその上に置き、「くり返す」ブロックをすべての周りに置いてみましょう。ゾンビが前に進むたびに左側に道があるかをチェックし、そして曲がります。「くり返す」の命令は重要で、一歩進むごとに曲がるかどうかをチェックします。
      6:
        text: "「もし」の文はコンピュータサイエンスではとても重要です。私が最初に作ったプログラムは「三目並べ」ですが、その中に、「もし相手が勝ちそうになったら、相手のマークが３つ並ばないようブロックせよ」、という「もし」の文がありました。"
      7:
        text: "「もし」ブロックを使って遊んでみましょう。"
    if_else:
      1:
        text: こんにちは、私の名前はサローニです。私は健康や薬についての問題を解決するため、コンピュータサイエンスを使います。「もし～でなければ」ブロックを勉強しましょう。「もし」ブロックに似ていますが、「でなければ」というのがついています。
      2:
        text: "「せよ」と書かれたところに「前に進め」ブロックを置き、「でなければ」と書かれたところに「左に曲がれ」を置くと、ゾンビは２つどちらかを選ぶことになります。前方に道があればゾンビは前に進み、でなければ（前方に道がなければ）ゾンビは左に曲がります。"
      3:
        text: '"if"ブロックと同じように"if else"ブロックを"くり返し"ブロックの中におくことができます。そうすると、ゾンビは動き続けて"if
          else"ブロックはどこか曲がるところがないかを調べ続けます。'
      4:
        text: では、ゾンビを元の場所に戻してやりましょう。
    if_else_scrat:
      1:
        text: If else 文は二つのどちらをするかを決めるためのものです。私たちの親友のリスのスクラットといっしょに、どうやって if else
          文を使うか見てみましょう。
      2:
        text: このブロックは"if"ブロックとまったく同じに見えますが、"else"という部分が一番下にあります。「前に進め」のブロックを「せよ」のところにおいて、「左へ曲がれ」を「でなければ」のところにおくと、リスのスクラットは前に道があれば前に進み、道がなければ左に曲がります。
      3:
        text: そこで、何かを決めてそれにしたがって二つのアクションのどちらかを実行します。"if"ブロックのように、"if else"ブロックも"繰り返し"
          ブロックの中に入れることができます。
      4:
        text: 今度は、リスのスクラットがドングリをひろうのを手伝ってあげましょう ！
    function:
      1:
        text: こんにちは、私はブリナ。インスタグラムで働くエンジニアです。「関数」とは、繰り返し使うコードの塊のことで、毎回同じコードを書く代わりに、一つのブロックとして使うことができます。
      2:
        text: 関数をどのように定義するか勉強しましょう。関数の定義には、角に星印がついています。関数の名前は一番上に書かれています。
      3:
        text: ブロックの定義は、何をするかを私たちに教えてくれます。この関数の定義は「5つ埋める」(fill 5) と呼ばれ、これは「繰り返し」ブロックと「塗りつぶし」ブロックで成り立っています。
      4:
        text: ワークスペースに定義がついていますが、この農夫は、関数カテゴリーから「5つ埋める」関数をドラッグしないとその関数は実行しません。
      5:
        text: '関数 (FUNction) に楽しく (Fun) 取り組みましょう！ '
    loop_while:
      1:
        text: 'こんにちは、マキンデといいます！"while" ブロックについて勉強してみましょう。 '
      2:
        text: "「～の間」(while) ブロックは、上部の文が TRUE である限り、その中に入れたものは何でも実行します。"
      3:
        text: たとえば、農夫が積山に立っていると、その農夫の下に山がある「間」、農夫は1シャベル分かき続けます。
    loop_for:
      1:
        text: こんにちは、私の名前はトリーナで、ピクサーで働いています。シュレックを含むたくさんの映画作りに携わってきました。
      2:
        text: これは私たちの新しい「カウンター」ループです。アクションが何度も繰り返し実行され、アクションを毎回少しずつ変更を行うことができます。
      3:
        text: |-
          この例では、「カウンター」(counter) ループは「50から90までを10
          ずつ数える」と記述されています、その中に、「正方形を描く」ブロックがあります。「変数」セクションの「カウンター」ブロックを「長さ」(length) スポットにドラッグします。
      4:
        text: |-
          つまり、私たちのアーティストは50ピクセルの辺を持つ正方形を描くという事です。そして更に10を加えて60ピクセルのへんを持つ正方形を描きます。そしてその後90ピクセルになるまで10
          ずつ加えて、正方形を作っていきます。そうすると私たちは50, 60, 70, 80, そして90の正方形が出来上がります。
    parameters:
      1:
        text: こんにちは、私は ジャネッテです。私は Zynga のエンジニアです。
      2:
        text: "もしたくさんの三角形を描きたい、長さが違うサイズにしたかったらどうすればよいでしょうか？\n\n"
      3:
        text: コードを一から書くこともできるし、パラメータを持つ関数を使用することもできます。
      4:
        text: これを行うには、「三角形を描く」関数の定義の上の青い星をクリックします。次に、「名前を入力」を「入力」ブロックにドラッグします。
      5:
        text: その際、[x] とあるスポットに「長さ」を記述し、[Enter] キーを押すと、長さを入力する関数を作成できます。
      6:
        text: |-
          次に星をクリックします。次に変数カテゴリーの上をクリックして、関数定義の「前へ進む」(move forward) ブロックの中に「長さ」ブロックをドラッグします。そして
          古い数字ブロックをドラッグして削除します。
      7:
        text: "パラメータを持つ関数を使用するには、関数カテゴリーをクリックし、「長さの違う三角形を描く」(draw a triangle with
          length) 関数をドラッグして引き出します。\n\n"
      8:
        text: これで、数学ブロックを使ってさまざまな数字を入力して、大きさの違う三角形を描くことができるようになりました。
    hoc_wrapup:
      1:
        text: おめでとうございます！最後のパズルを解決したことで、それがゾンビだろうと、トリだろうと火星無人探知機だろうと、はたまた自動運転車だろうと、どんなロボットにも分岐点のない迷路や任意の長さのトンネルを進む道を見つけるにはどうしたらよいかを教えるコードを書き上げました。
      2:
        text: ここで用いた基本概念は、すべてのプログラミングやこれからトライするアプリの核になります。ここまでで、繰り返しループ、まで繰り返す文、if文、if/else文について学びました。
      3:
        text: 最初のHour of Codeが気に入ったら、code.org にアクセスしてコンピューター サイエンスの学習を続けましょう！20時間コースを終わる頃には、プログラミングの基本をマスターしていることでしょう。そしてもっと難しい携帯アプリやロボット操作、ゲームなどの作り方を学ぶことができます。
      4:
        text: テクノロジーは私たちがやることすべてを変えています。年齢は関係ありません。プログラミングは楽しくクリエイティブでで、誰でも学べます！
    20_wrapup:
      1:
        text: ノートの表示は近日公開予定！
    frozen_intro:
      1:
        text: こんにちは、リンジーといいます。私はモデルをし、お芝居をし、自分のアプリを作成しています。プログラムを使いながら、アナとエルサと一緒に氷の世界の美しさと魔法を体験してみましょう。
      2:
        text: アイススケートをしながら雪の結晶やパターンを作り、でき上がった雪の王国を友だちと共有することができます。
      3:
        text: 次の1時間で、プログラミングの基本を学びます。プログラミングは文章で書くことが多いのですが、ここでは、ブロックを引っぱる (ドラッグ・アンド・ドロップ)
          ことでプログラムを書くことができる Blocklyを使います。これは基礎を学ぶのに大学生も採用している方法です。簡単に見えても、プログラミングを立派にやっていることになります。
      4:
        text: プログラムというのはコンピューターが何をしたらいいかを教えるための指示の集まりです。さあ、プログラムを作ってエルサが 簡単な線を作るのを助けてあげましょう。この方法は後でもっと難しいパターンを作るのに使われます。
      5:
        text: 画面は3分割されています。左には氷の表面があってあなたのプログラムが実行される部分です。右下には各レベルの指示が書かれています。
      6:
        text: この真ん中の部分はツールボックスで、ここにあるそれぞれのブロックはエルサとアナが行うことができるアクションです。
      7:
        text: 右側の空間はワークスペースと呼ばれていて、プログラムを作るところです。氷の表面を動き回るために、「前に進め」ブロックを使います。
      8:
        text: ここでは、「前に進め」ブロックは、「100 ピクセル前に進め」と言っています。「実行」を押すと、どうなりますか？エルサはちょうど100
          ピクセル分前に進みます。ピクセルというのは、コンピューター画面上のとても小さな四角形のことです。
      9:
        text: このパズルの中で、手元にあるブロックは「右に 90 度曲がる」と言います。そしてこの「右折」ブロックを使うと、エルサを回すことができます。これで、エルサをどれだけ回転させられるかで遊ぶことができます。角度についてはエルサの前にある道から図ることができます。たとえば、これが90度の回転、そしてこれは120度の回転という具合に。
      10:
        text: ピクセルと角度はとなりの矢印をクリックすれば変えられますよ。
    frozen_loops:
      1:
        text: こんにちは、パオラです！ アクションを繰り返すのがとても得意なのがコンピューターの特徴です。あなたも10や20、または100までなら数えられるでしょう。でもコンピューターなら10億とか100京までだって数えられるんです。途中で退屈もしないし、一瞬で数えちゃいます。数えることでも、絵を描くことでも、コンピューターならなんでも数百回でも、何十億回だって繰り返せます。
      2:
        text: プログラミングでは、これをループと呼びます。ループとはコードを繰り返す処理です。次のパズルでは、この「繰り返し」(Repeat) を使ってアナが正方形を作るのを目指します。
      3:
        text: "「繰り返し」ブロックに配置されたコードは、指定された回数だけ繰り返し実行されます。"
      4:
        text: "「前に進む」(Move Forward) ブロックと「右に回転」(Turn Right) ブロックを4回繰り返すことで、正方形を描くことができます。もっと簡単な方法は、「前に進む」と「右に90度回転」の組み合わせを作り、それを4回繰り返すよう命令することです。これは、「前に進む」と「右に回転」のブロックを「繰り返し」ブロックの中に入れることで実現できます。"
      5:
        text: "「繰り返し」の回数は何回にでも設定でき、その数と同じだけ「繰り返し」の中のブロックも実行されることを覚えておいてください。"
    frozen_functions:
      1:
        text: こんにちは、クリス・ボッシュです。私はバスケットボールのプロ選手で、大学ではプログラミングを専攻しました。
      2:
        text: コンピューター サイエンスの最も重要な考え方の 1 つは、どのように新しいコマンドを定義するかです。ほとんどのコンピューター言語は、たった
          100 くらいの言葉やコマンドしかありません。これを組み合わせてあなた自身のコマンドを定義することが、本当にアートや魔法なのです。
      3:
        text: この一連のコマンドを使ってアクションを実行する方法をコンピューターに一度伝え、そのアクションに好きな名前をつけると、後でそれを簡単に繰り返せるようになります。独自のコマンドを定義して名前を付けることを「関数」と呼びます。
      4:
        text: こんにちは、ジェスです。ブロックを使ってプログラミングするときに、何度も使いたいアクションの組み合わせがあったら、関数を使うことができます。たとえば、正方形を作成するためのコードを書いたとします。
      5:
        text: "「正方形を作成」という関数として定義することができます。"
      6:
        text: これで四角がたくさんつくれる新しいブロックを何回でも使えます。
      7:
        text: たくさんの簡単な図形で、複雑な模様を作ることができます。次のパズルでは、円を作るために書いたばかりのコードが、様々な大きさの円を作る新たな関数として利用できます。あなたはそれで、エルサの綺麗で緻密な雪の模様を作ることができますか？
    playlab_intro:
      1:
        text: これからプレイラボを使ってゲームを作成します。よいゲームは物語があり、全ての物語にはキャラクターがいます。魔女、エイリアン、動物といったキャラクターをどうしたら話し、動き、やり取りできるようになるかを学びます。このチュートリアルが終了する頃までに、ゲームを一から構築し、友だちと共有できるようになっていることでしょう。
      2:
        text: 画面が3分割されています。左は、あなたが書いたプログラムが実行されるゲームの画面です。その下に、各レベルの説明が書いてあります。
      3:
        text: 真ん中はツールボックスで、それぞれのブロックにコードが書かれています。右側の空白はワークスペースと呼ばれ、そこでプログラムを構築します。
      4:
        text: 'まず最初に、オレンジ色の「実行したとき」(when run) ブロックに他のブロックをつなげる必要があります。黄色い線が見えるまでブロックをドラッグすることによって、たくさんの種類のブロックを一緒につなげることができます。

'
      5:
        text: "「言う」(say) ブロックをドラッグして「実行したとき」ブロックにくっつけて、「こんにちは」と入力することによって「こんにちは」と話すペンギンになります。また「右へ動く」と「左へ動く」ブロックを使うことによってペンギンを動かすこともできます。ブロックを配置したら
          [実行] ボタンを押すとプログラミングした結果が見られます。"
      6:
        text: では、始めてみましょう。これが終わる頃までに、色々なキャラクターでやり取りしたり、楽しくなったり、悲しくなったり、ポイントをためたり、火の玉を投げたり、お互いを消したりして遊べるオリジナルゲームを作ることができるようになっていることでしょう。
    playlab_events:
      1:
        text: |-
          これから、どのゲームプログラマーも毎日使っていることを学んでいきます。
          それは「イベント」と呼ばれるもので、イベントは何かが起こったときのためにリッスンするようにプログラムに伝達します。そしてその何かが起こったときに、アクションを実行します。
      2:
        text: イベントの例としては、マウスをクリックしたり、矢印ボタンやスクリーンを軽くタッチしたりするのをリッスンすることが挙げられます
      3:
        text: ここでは、プレイヤーがクリックしたときにスペースボットが地球人に挨拶するようにします。 「クリックしたとき」(when clicked)
          ブロックを使い、それに「言う」ブロックをくっつけます。プレイヤーがスペースボットをクリックすると、この「クリックしたとき」イベントブロックにくっつけられていることすべてが実行されます。エイリアンは何と言うでしょうか？
      4:
        text: また「～したとき」（when arrow）というブロックがあります。これに「動く」ブロックをつなげれば、キャラは上下左右自由に動けるようになります。このようにして一歩一歩、ゲームはさらにいろんなことができるようになります。
    playlab_repeat_forever:
      1:
        text: これは「ずっと繰り返す」ブロックです。このブロックの中にあるものは、プログラムが終わるまでずっと繰り返されます。
      2:
        text: プレイヤーは何もしなくてもしキャラに何かを繰り返し行わせたいとき、「永遠に繰り返す」(repeat forever) ブロックの中にそのブロックを置きます。
      3:
        text: この次のパズルでは、魔法使いが王国中を常に右へ左へパトロールできるように助けることが目標です。繰り返しコマンドを学ぶことで、後で自分のゲームを作る時に役に立つでしょう。
    C1_artist_intro:
      1:
        text: こちらは描画ブロックです。アーティストが灰色の線を埋めるのに必要な場所に行けるように適切なブロックを使ってアーティストを動かしてください。
      2:
        text: こちらはジャンプブロックです。これを使うとアーティストは動くけれども線を描きません。そこで、次の灰色の線にジャンプさせるためにこのブロックを使います。
    C1_bee_level_intro:
      1:
        text: みつばちってかっこいいでしょ？次のパズルでは、みつばちが花からミツをとって、巣 (す) でハチミツを作るように動かします。クリアするには「ハチミツを作る」と「ミツを取得」のブロックを使ってね。
      2:
        text: どの花も、1、2、3など、持ってるミツの数が異なります。隅にある小さな数字から、赤い花にどれくらいミツがあるかがわかります。先に進む前に、必ず花からすべてのミツを手に入れるようにしてください。また、ハチの巣は、1、2、3といった数のハチミツしかもてません。そのため、ハチの巣に置いておけるだけの量のハチミツを作るようにしましょう。
      3:
        text: すべてのミツを取り、すべてのハチミツを作ることができたら、次のレベルに進めます。全部取ったり作れなかったときは、このパズルをもう一度やり直してください。しばらく遊んで、プログラマーになるのはどんな感じか体験してみましょう！
    C1_bee_loops:
      1:
        text: ループはあるアクティビティの繰り返しです。そこで、ハチの巣を調べて、フレームを確認してから元に戻します。そのため、同じアクティビティを複数回繰り返します。ループして、同じアクティビティを何度も実行してみましょう。
      2:
        text: このレベルでは、みつばちに花から3つのミツを集めさせます。 3つの「ミツを取得」ブロックを使う代わりに、「繰り返し」ブロックを用いてミツを3回取ってね。
          「実行」をクリックして、正しく実行されたかどうかを確認しましょう。いいですね！
    C1_bigevent_unplugged:
      1:
        text: このレッスンはビッグイベントと呼ばれます。ここでは、プログラムを制御し、実際にプログラムを実行する方法を、ボタンを押したり、マウスをクリックしたりするイベントを使って臨機応変に変更する方法を学びます。
      2:
        text: このレッスンでは、紙のリモコンで操作します。まるで本物のビデオゲームのようです。
      3:
        text: イベントとは、何かを引き起こすアクションです。イベントは、マウスのボタンをクリックするとウェブページが読み込まれるようなものです。タブレットで画面をタッチしてスクロールすると、それもイベントになります。イベントは、ユーザーが必要に応じていつでもプログラムを指示できる優れた方法です。
      4:
        text: 誰もが反応するようなことが起こります。空腹を感じると、冷蔵庫に向かいます。郵便配達員が来る音がしたら、郵便局員は郵便物を郵便受けに入れ、私たちはそれを取りに行きます。これらは、ボタンを押したり、ジョイスティックを動かしたりするイベントに似ています。それは、私たちに何かをするように働きかけるきっかけとなります。
      5:
        text: ビデオゲームでは、「更新」というイベントがあり、1秒間に30～60回更新が発生しています。ビデオゲームのプログラマーにとって、更新の方がボタンやジョイスティックの動作よりもイベントとしての重要性は上です。
      6:
        text: 注目の主なイベントは、「更新」ティックの発生です。そしてティック中にジョイスティックを確認します。そこで、「誰かこのフレームでボタンを押しましたか？はい/いいえ」と問います。イベントがなければ、プレイヤーは移動できず、ジャンプもできず、起こっていることを制御できません。ビデオゲームは何の動作も起こせません。
    C1_building_foundation:
      1:
        text: 砂の彫刻では、失敗はプログラムの一部であることを頭に入れておく必要があります。けれどもやり続ければ、改善していき、よりワクワクするようなものになります。パーシステンス
          (粘り強さ) がこのゲームの名前です。プレイし続ければ、きっと気に入ることでしょう。
      2:
        text: これは「基礎の構築」というレッスンです。このレッスンでは、本当に難しいタスクに取り組みます。少なくともコップの1つと同じくらいの高さの構造を作成する方法を考えます。構造は、本の重さに堪えられるような強度がなければなりません。
      3:
        text: うまく閃かないときもあるかもしれません。イライラして、あきらめたいときもあるかもしれません。そのような瞬間が数多く訪れるかもしれません。けれどもチャレンジし続け、何度も何度もがんばれば、やがて道が開かれることでしょう。
      4:
        text: 粘り強さとは、本当にあきらめたいときにこらえてそこに留まることです。新しくて他と違うものを作成しようとする際、失敗はつきものです。
      5:
        text: 粘り強さの秘訣は、イライラしたからやめるのではなく、やり続けて失敗から学ぶことにあります。イライラするのは、実際、すぐそこに何か素晴らしいものがあることを意味します。そこで、やり遂げる前に投げ出さないでください。
    C1_getting_loopy:
      1:
        text: こんにちは、ミラル・コブです。私はIluminateを作成しました。私の作品では、ダンスとライトスーツのどちらのプログラミングにも使っているものがあります。それは、ループです。ループはアクションを繰り返すことをいいます。
      2:
        text: フラフープを回転させ続けるアクションなど、何かを複数回繰り返すとき、そのアクションのループを実行しています。これが、ループです。
      3:
        text: 今日はダンスパーティーを開催します。新しいダンスでループを使い、これを反復 (イテレーション) していきます。これからダンスでループを学びます。簡単なステップをいくつか学習し、それらを繰り返してダンスを完成させましょう。
      4:
        text: 学ぶ必要がある手順を説明します。拍手して、手を頭の後ろに回して、腰に手を当てて、左手を挙げて、右手を挙げる。とっても簡単ですね。複数のダンスステップをループに入れると、指示を短くできますよ。
      5:
        text: ダンスする際、実際にループを使っています。ダンサーはすべて同じネットワーク内にあるコンピューターをまとっているようなものです。同じダンサーに何度もライトの動きをループさせてみましょう。ループでは、6人のダンサーを通じて何度もループしてから、ループ内でライトの動きの速度を上げるというイテレーションを行いましょう。それらはすべて、ループを使って作成されます。ループは、作業をより短く簡単にしてくれるため、コンピューター
          サイエンスでは重要です。
    C1_happy_maps_unplugged:
      1:
        text: このレッスンは「ハッピーマップ」といいます。今日は、モフモフした小さな友だち、フルブの果物の収穫を手伝います。
      2:
        text: フルブを果物に向かわせましょう。そうするには、フルブがどちらの方向に進むかを考え、矢印で方向を示してあげる必要があります。フルブがリンゴにたどりつくにはどの方向に向かわなければならないでしょうか？線を引いて前へ進めるようにしてあげましょう。
      3:
        text: そこに行けるようにするには、進むべき方向を丸で囲みます。
      4:
        text: 対象のマップの横にある矢印をくっつけてアルゴリズムを作成しましょう。 2つ目も同じですが、下降します。
      5:
        text: 紙でプログラミングを書くようなものです。やり方は以上です！
    C1_maze_debugging:
      1:
        text: 問題を見つけて修正することを「デバッグ」といいます。デバッグにはたくさんのやり方があります。なかでも簡単なのは、問題が発生するまでひとつずつ順を追っていくやり方です。ここでは、平均台でバク転に挑戦していますが、なかなかうまくいきません。
      2:
        text: 手順をひとつひとつ確認したことで、ようやくどこが問題なのかがわかりました。手のつき方が良くなかったのです。手をつく位置を変えてもう一度試したところ、ようやくうまくいきました。こうしてバク転のデバッグに成功しました。うまくいってとてもうれしかったです。
      3:
        text: まずはあらかじめ用意されたブロックを使ってデバッグについて学びましょう。今置かれているブロックではゴールに到達できないようです。デバッグして答えを修正しなければなりません。どこがおかしいのでしょうか？
          どうやらもう一つさらに西に進む必要があったみたいです。
      4:
        text: "「西」ブロックをもうひとつ足して問題を修正します。うまくいくか、 [実行] を押して確かめてみましょう。やった、うまくいきましたね！"
    C1_maze_intro_sequencing:
      1:
        text: このパズルではトリをブタに近づけます。パズルを見てどちらの向きに持っていくとよいか考えてください。
      2:
        text: ブロックをツールボックスからワークスペースにドラッグします。「実行した時」ブロックの下にあることを確認して、正しい答えがわかったと思ったら「実行する」をクリックして、トリがブタへと進むのを見ていてください。
    C1_maze_loops:
      1:
        text: コンピューターが本当に得意なのは、コマンドを繰り返すことです。人として、同じことを何度も何度も続けなければならないのは本当に退屈です。けれどもコンピューターは同じことを数百万回、場合によっては数十億回行うことができ、飽きることなくそれを本当にうまく実行できます。
      2:
        text: たとえば、Facebookの登録者全員にメールを送信してお誕生日おめでとうと言いたい場合、実際にメールを全員に送信するには1世紀以上かかる可能性があります。けれどもほんの数行のコードで、システムからFacebookの登録者全員に誕生祝いのメールを送信することができます。
      3:
        text: このレベルでトリをブタに移動するには... 3つの北ブロックをワークスペースにドラッグするのではなく、「繰り返し」ブロックを使用します。
          「繰り返し」ブロックをワークスペースにドラッグし、数値3を入力します。次に、「北へ移動」(move North) ブロックを「繰り返し」ブロックにドラッグし、「実行」をクリックして、それが正しいかどうかを確認します。コツをつかんだようですね。その調子です！
    C1_moveitmoveit_unplugged:
      1:
        text: このレッスンは「動かせ！動かせ！」といいます。一緒にプログラムを作成して、友だちを羅針図上のスタート地点からスマイリーのゴールに向かわせましょう。
      2:
        text: けれどもスマイリーは顔を伏せていて、そこへどう行けばいいのかを知っているのはたった一人です。さあこのプログラムを始めましょう。
      3:
        text: |-
          プログラムは機械で実行することができるコードを符号化したアルゴリズムです。
          ほとんどの人はプログラムはコンピューターのために書く何かだと考えています。そうではありますが、プログラムは他の場面でも役に立つ素晴らしいものです。自分でゲームを作ることができるし、ロボットをプログラムして何かさせることもできます。
    C1_going_places_safely:
      1:
        text: エレミヤといいます。年は 7 歳です。お母さんのコンピューターで遊ぶことが大好きです。もちろんいつも最初に遊んでいいかどうか聞いています。「お母さん、コンピューター使っていい？」、「もっちろん！」ってね。
      2:
        text: お母さんのコンピューターでインターネットをやるのが大好きです。インターネットは近所のようなもので、いい所をたくさん回れます。家族や友だちと
          (コンピューターで) 話せるし、新しいことをたくさん教わることができます。
      3:
        text: 昨日、家の近くの動物園に遊びにいったの。赤ちゃんのシマウマをみたよ。写真を撮って、画像のしま模様の色を変えて、帽子をかぶせてあげて、ゆかいな動物コレクションに加えたの。すごいでしょ？そして、とっても遠いところへも行ったのよ。ケニアに行ったの。ケニアはアフリカにあって、シマウマがいっぱいいるの。
      4:
        text: 時々、インターネットでおばあちゃんとか遠いところに住んでる親せきや知り合いと話すわ。こんにちは、おばあちゃん！ってね。おばあちゃんは私にクッキーを焼いてくれて、私の誕生日に送ってくれるの。「おいしい！インターネットで香りも伝わればいいのに」。インターネットで他の人と話すこともできるけど、いとことか、知っている人とだけ話すわ。
      5:
        text: インターネットで一番好きなのはゲームで遊ぶこと。ゴー――ル！あと何か新しいものを描いたり作ったりすることや、それを友だちと共有することも好き。いいでしょ！ウェブサイトを訪れて新しい何かを教わることもあるけど、いつもお気に入りのウェブサイトにはまってしまうの。うわー、恐竜、ってね！
      6:
        text: 'インターネットはとても楽しい所よ。けれども、近所の通りを横断するときと同じように、インターネットにアクセスするときも注意する必要があるの。覚えておくべきルールが3つあるわ。ルール1:
          常に最初に親に尋ねること。ルール2: 知っている人とだけ話すこと。ルール3: お気に入りのウェブサイトにとどまること。'
      7:
        text: うわー、楽しかった！夕食の時間。これからログオフします。もう一度ログオンして、ネットサーフィンするのが待ちきれません。
    C1_pair_programming:
      1:
        text: 今日はペアプログラミングについて学びます。ペアプログラミングでは、チームとして作業します。 2人で1台のコンピューターを使用する理由は、1人で考えるよりも2人で考えた方が優れているからです。ペアプログラミングでは、あなたとあなたのパートナーが1台のコンピューターを一緒に使い、二人で同じプロジェクトに取り組みます。
      2:
        text: ペアプログラミングでは、車を運転するのと同じように、一人が運転手でもう一人がナビゲーターです。ドライバーは、コンピューターの前に座り、キーボードとマウスまたはタッチスクリーンを使用してコンピューターの主な動作を制御します。ナビゲーターは、ドライバーの質問に答え、潜在的な問題やミスを指摘することで、ドライバーを助けます。
      3:
        text: コミュニケーションはペアプログラミングを成功させる鍵です。ナビゲーターは相手に敬意を払い、相手を悪く言ったり、偉そうにしたりしないでください。バックシートでふんぞり返っているナビゲーターを好きな人は誰もいません。パートナーと常にコミュニケーションを取ってください。運転手は何をしているかを説明し、ナビゲーターは次に何をすべきかを提案して助けます。
      4:
        text: ナビゲーターは全体像を考える必要があり、運転手は細かい点に気を使います。両者の役割が重要です。ペアプログラミングは、チームとして協力することがポイントです。
    C1_planting_seed:
      1:
        text: このレッスンは「種をまこう」といい、アルゴリズムを理解するのに役立ちます。アルゴリズムは、何かを実行する順序を説明する特定の命令です。朝食を食べたり、歯を磨いたりするような日常のことでさえ、完了するために小さなステップを必要とするアルゴリズムです。
      2:
        text: コンピューターは本当に賢いかもしれませんが、ステップ・バイ・ステップであなたが望んでいることを正確に伝えなければ、コンピューターは理解することができません。アルゴリズムが優れていのは、手順を順番どおりに実行すると、以前は行う方法がわからなかったようなことができるという点にあります。それはレシピに従うようなものです。
      3:
        text: 今日は、アルゴリズムを使って種をまいていきます。写真を切り離して独自のアルゴリズムを作成しましょう。種をまく手順を示す写真を選択し、写真を正しい順序で並べてください。
      4:
        text: ここで、自分のアルゴリズムが機能するかどうかを確認します。アルゴリズムの手順に注意深く従ってください。正しい順序になっていますか？アルゴリズムに従って種を植えることができましたか？これは、写真を使ったプログラミングのようなものです。
      5:
        text: チョコレートを作るとき、そのプロセスには大きな手順がたくさんあり、そのような大きな手順のそれぞれに一連の小さな手順があります。そしてチョコレートの味わいに応じて異なるレシピまたはアルゴリズムがあります。小さなものも含めて、手順それぞれが重要なので、何か手順が1つ欠ければ、残りの手順は完了できません。他の人が理解できるアルゴリズムを作成することが本当に重要です。そのため、各手順を書き留めて、誰が行っても結果が同じになるようにする必要があります。
    C1_playlab_storytelling:
      1:
        text: クリエイティブになり、プログラミングスキルを使ってストーリーを伝えましょう。あなたのストーリーにはキャラクターがいて、キャラクターに話をさせたり、互いに交流させたりすることができます。どのようなストーリーを伝えたいかを考えてみましょう。
      2:
        text: 猫は常に犬を恐れていますが、もし猫が、犬が優しくなろうとしていることがわかったらどうでしょう？ 「実行するとき」ブロックからすべてが始まります。「動く」ブロックでキャラクターは動き、「言う」ブロックでキャラクターはタイプした文字を言います。
      3:
        text: これは、「キャラクターが衝突したとき」ブロックで、他のブロックとつなげられます。
      4:
        text: 犬にこちらに来させて「こんにちは」と言うようにさせましたが、猫は怖がって逃げてしまいました。 「あーあ」。もっと時間があったらハッピーエンドになっていたのに。終わり！
    C1_spelling_bee_intro:
      1:
        text: これは「つづりみつばち」のレベルです。パズルのピースを使ってみつばちを動かします。みつばちが動くにつれて、文字を集めて単語をつづります。
      2:
        text: ステージの下のボックスで、与えられた言葉をつづることができるかどうか見てみましょう。けれども注意してください！間違った方向に移動すると、いらない文字がくっついてしまいます。
    C1_zuck_repeat_loop:
      1:
        text: コンピューターが本当に得意なのは、コマンドを繰り返すことです。人として、同じことを何度も何度も続けなければならないのは本当に退屈です。けれどもコンピューターは同じことを数百万回、場合によっては数十億回行うことができ、飽きることなくそれを本当にうまく実行できます。
      2:
        text: たとえば、Facebookの登録者全員にメールを送信してお誕生日おめでとうと言いたい場合、実際にメールを全員に送信するには1世紀以上かかる可能性があります。けれどもほんの数行のコードで、システムからFacebookの登録者全員に誕生祝いのメールを送信することができます。
      3:
        text: この例では、目標はトリを動かしてブタをつかまえることです。簡単に行えるように「繰り返し」ブロックを使います。これを行うには、コンピューターに「前へ進め」コマンドを5回与えて、トリをブタに1歩ずつ進めるか、コンピューターに1回前へ進むように指示してから、それを5回繰り返すように指示します。これは1歩ずつ進むのと同じことをしています。
      4:
        text: これを行うには、「前へ進め」コマンドをドラッグしてから、それを「繰り返し」ブロック内に配置します。そしてそれをクリックして、ブロックを繰り返す回数と何歩前へ進ませたいかを伝えます。
      5:
        text: もう1つは、「繰り返し」ブロックの中に必要なだけコマンドを配置できることです。そのため、この例では、前へ進んで左に曲がるように指示していて、これを5回行います。
    C2_artist_intro:
      1:
        text: コンピューター サイエンスに精通している人がいなければ、レースに出る資格すらありません。車がどれだけのデータを収集するか、また、プログラムを書ける人がいてどのようにして性能を構築するかを考え続けられるようにする必要があるからです。
      2:
        text: このパズルでは、鉛筆を使ってさまざまな形を描くアーティストになります。アーティストが移動すると、後ろに線を引きます。
      3:
        text: キャンバス内を移動するには、「前へ進む」ブロックを使います。ここで、「前へ進む」ブロックは100ピクセル前進することを示しています。実行すると、どうなるでしょうか？アーティストは一定量前へ進み、その量は100ピクセルです。ピクセルとは、基本的にコンピューター画面上の非常に小さな正方形です。
      4:
        text: このパズルにあるもう1つのブロックは、「右に90度曲がる」といいます。これをドラッグすると、アーティストは一定量回転します。そのため、アーティストをどこまで回転させたいかを試すことができます。これは90度の回転です。
      5:
        text: そしてこれは120度の回転です。また、ピクセルと度の数値の横にある矢印をクリックすると、値を変更できます。アーティストと一緒に絵を描いて楽しんでください！
    C2_bee_conditionals:
      1:
        text: これは条件ブロックです。ある数よりも少ないか、等しいか、または大きいミツまたはハチミツがあった場合、何をするかを説明します。
      2:
        text: これは、このクエスチョンマークで見てとれるように、ミツやハチミツの量がわからない場合に便利です。
      3:
        text: この例では、紫色の花のミツが0より大きい場合は、ミツを取ります。それにより、ミツがある限りミツを取り続けるようにハチに伝えます。
    C2_binary_bracelets:
      1:
        text: これは「バイナリブレスレット」のレッスンです。ブレスレットにプログラミングでイニシャルを刻印して、身につけて友だちたちに見せてあげましょう！
      2:
        text: バイナリは、2つのオプションのみを使って情報を表現する方法です。これは1と0だけだと考えている人も時々いますが、オン/オフ、アップ/ダウン、イン/アウト、またはあらゆる反対の組み合わせでバイナリを表すことができます。
      3:
        text: こんにちは、オリオンです。Play-imでロボットをプログラミングしています。最も基本的なレベルでは、どのコンピューターとロボットの脳も小さな電子ゲートです。ゲートが開いているときは電気が流れ、閉じているときは流れません。
      4:
        text: ロボットのバイナリの例は、ロボットの目です。ロボットの目はLEDで、LEDは点灯または消灯しています。それはどちらか一方のみのバイナリシステムです。ライトを使用して2進数を表すことができます。一連のロボットがある場合、最初のロボットは1に位置し、2番目のロボットは2に位置し、3番目のロボットは4に位置し、4番目は・・・と続けて言うことができます。これが2進数を表す方法です。ロボットはバイナリの目で、あなたのために2進数を数えます。
    C2_conditionals_with_cards:
      1:
        text: このレッスンは、「条件文とカード」と呼ばれます。あなたは毎日、見たり聞いたりすることに基づいて決定を下しています。
      2:
        text: 公園まで歩いて行くのに、まず傘を持っていくかどうかを決めなければなりません。そのため、窓の外に目をやります。曇っていたら傘を持っていくし、そうでない場合はサングラスを手に取ります。今日は傘を持っていった方がよさそうです。自分が見たり聞いたりしたことに基づいて、公園に持っていくものが決まります。
      3:
        text: 条件文はゲームでも使います。今日は、カードゲームで条件文を使う練習をします。このゲームでは、カードを引くことで友だちの行動が決まります。私が7を引くと、みんな拍手します。それ以外の場合、皆で「オー」と言います。では、試してみましょう！「オー」、「ワオ―」
      4:
        text: 条件文でもっと楽しいゲームを作れるのではと思います。試してみましょう！条件文のおかげで、コンピューターはスマートに見えます。条件文を含むコンピューター
          プログラムは、ユーザーに反応し、それに合わせて実行するアクションをスイッチします。
      5:
        text: お気に入りのビデオゲームについて考えてみてください。あるアクションは、他のアクションよりも多くのポイントを獲得できませんか？これは、コンピューターが条件文を使用しているために発生します。コンピューターはこうして決定を下します。ある対象を打つと10ポイント獲得し、外れると3ポイント失う、というのはどうでしょう。条件文がどのように機能するかを知っていると、あらゆる種類の面白いゲームを制作できます。
    C2_artist_debugging:
      1:
        text: ここでは、ワークスペースにすでにいくつかのブロックがあります。けれども、何か問題があります。
      2:
        text: 速度を落としてこのコードをデバッグして、それが各ブロックを段階的に進むのを見てみましょう。
      3:
        text: あ、問題がありますね！猫のひげは25ピクセルではなく75ピクセルです。
    C2_bee_debugging:
      1:
        text: プログラムのデバッグについて聞いたことがありますか？これは、何がうまくいっていないかを理解するために行います。コードをデバッグするときは、エラーを特定して取り除きます。
      2:
        text: ここでは、ワークスペースにすでにいくつかのブロックが置かれています。[ステップ] ボタンを使用して、ブロックを1つずつ順番に見ていきます。こうして、これが適切なソリューションであるかどうかと、修正が必要な箇所があるかを確認します。
      3:
        text: 問題があるようですね！もう1つ前へ進むブロックが必要です。[ステップ] ボタンを押すと、エラーの場所を特定して問題をデバッグし、修正することができます。
    C2_digital_footprint:
      1:
        text: 頭では帽子をかぶり、知能はあなたがどこにいるのか、動物園について考え、人に挨拶することを教えてくれます！オンラインのときは頭を使って思考を巡らし、安全を確保する方法、生活のプライバシーを保つ方法を考えてみましょう。頭からつま先まで、一時停止して考えてください。足元から鼻先まで、一時停止してオンラインで考えましょう。
      2:
        text: ハートを使って成長し続け、健全な輝きをまとい、バレンタインの日はあなたは私のものよと人に伝えましょう！オンラインのときはハートを使い、何が正しいのか、親切かを考え、友だちにリスペクトする気持ちを示しましょう。インターネット上では公平で親切になりましょう。頭からつま先まで、一時停止して考えてください。足元から鼻先まで、一時停止してオンラインで考えましょう。
      3:
        text: 腕を使ってペットを抱きしめたり、衣服が濡れないようにしたり、お気に入りの服を着たりしましょう。また腕は飛んだり信じたりするのも支えます。オンラインのときは腕を使い、休憩を取って時間のバランスを取り、技術のことは置いておいて、登る木を見つけましょう。頭からつま先まで、一時停止して考えてください。足元から鼻先まで、一時停止してオンラインで考えましょう。
      4:
        text: お腹を使って食べ物を蓄え、そのうなり声に耳を傾け、腹打ちの飛び込みをして、ソーダポップのガスを感じ取りましょう。オンラインのときは直観を使い、ある兆候を見定めて、道をたどり、問題に気付かせてもらいましょう。頭からつま先まで、一時停止して考えてください。足元から鼻先まで、一時停止してオンラインで考えましょう。
      5:
        text: そこで、オンライン上で、頭で考え、ハートで感じ、腕でバランスを取り、直観に耳を傾けましょう。足を使って走ったりキックしたり、ポゴスティック(ホッピング)で飛び跳ねたり、ブロックの周りを踊ったり、臭い靴下でスキップしたりしましょう。オンラインのときは足を使い、一線をこえたいじめっ子に立ち向かいましょう。そして胸を張り、生き物には大小を問わず優しくすることを忘れずに。
      6:
        text: 頭からつま先まで、一時停止して考えてください。足元から鼻先まで、一時停止してオンラインで考えましょう。そこで、頭で考え、ハートで感じ、腕でバランスを取り、直観に耳を傾け、足で立ち上がりましょう。頭からつま先まで、一時停止して考えてください。足元から鼻先まで、一時停止してオンラインで考えましょう。
    C2_digital_footprint_v2:
      1:
        text: インターネットに接続するたびに、検索、コピー、共有、配信などのフットプリントが永遠に残ります。あなたはどのようなデジタルフットプリントを残しているでしょうか？そしてどのようなデジタルフットプリントを残したいと思いますか？
    C2_graph_paper:
      1:
        text: このレッスンは「グラフ用紙のプログラミング」と呼ばれ、アルゴリズムについて学びます。今日は、手描きの矢印だけを使ってシンプルな白黒画像を再作成するプログラムを記述する方法を学びます。
      2:
        text: アルゴリズムは、タスクを完了するための指示のリストです。この一連の指示に従って、ボウルを作ります。アルゴリズムは、他の人に何かを行う方法を理解してもらう必要がある場合にとても役立ちます。
      3:
        text: コンピューター用のアルゴリズムを作成する場合は、アルゴリズムを小さなステップに分解する必要があります。そのため、この行を完了して次の行に移り、さらにその次に移り・・とすれば完結します。
      4:
        text: 私は仕事でアルゴリズムを使用しています。すべての手順を書き留めておけば、同じ作品を再作成したり、他の人に教えたりすることができます。ボウルを作るには、ガラスを窯に入れ、溶かし、さらに残りの指示に従います。アルゴリズムは、何かを成し遂げるためのロードマップを提供します。
    C2_artist_loops:
      1:
        text: ここでは、「繰り返し」ブロックを使用して、アーティストをプログラミングするときの手順を減らします。ステージにはすでにいくつかのブロックがあり、すぐに始められるようになっています。
      2:
        text: これらのブロックを4回ループして四角形全体を描画するには、「繰り返し」ブロックをドラッグして移かし、「繰り返し」ブロックに「前へ進む」ブロックと「右に曲がる」ブロックを入れます。[実行]
          を押すと、アーティストはこれらの手順を4回繰り返して、正方形を完成させます。
    C2_bee_loops:
      1:
        text: ループは、あるアクティビティの繰り返しです。ハチの巣に入って調べ、フレームを見て、元に戻しました。同じアクティビティを何度も繰り返しています。それはいわばループして、同じアクティビティを何度も行っていることになります。
      2:
        text: これは「繰り返し」ブロックです。「繰り返し」ブロック内に何を置いても、指示した回数だけアクションが繰り返されます。たとえば、このレベルでは、「前へ進む」を3回ドラッグして引き出してミツを取るのではなく、それぞれ1回ドラッグして3回アクションを繰り返すようにします。すると楽になります！
    C2_maze_intro:
      1:
        text: 通常、プログラミングはすべてテキストで行われますが、ここではBlocklyを使い、ビジュアルブロックをドラッグ＆ドロップしてプログラムを書きます。内部では、プログラムを書いているのと同じことです。まず、このアングリーバードが迷路を進んで、卵を盗んだ悪いブタにたどり着けるようにするプログラム用のコードを作成します。
      2:
        text: Blocklyは主に3つの部分に分かれています。左側はトリの迷路で、作成したプログラムを実行します。各レベルの説明は迷路の下に書かれています。この中央の領域はツールボックスで、各ブロックはトリが理解できるようになっているコマンドです。右側の空白はワークスペースと呼ばれ、ここでプログラムを作成します。
      3:
        text: "「動く」ブロックをワークスペースにドラッグして [実行] を押すと、どうなるでしょうか？トリはグリッド上で1ボックス前に移動します。そして、トリが1ボックス前に進んだ後でトリに何かをさせたい場合はどうすればよいでしょうか？プログラムに別のブロックを追加しましょう。"
      4:
        text: "「右に曲がる」ブロックを選択して、「動く」ブロックの下にドラッグすると、黄色の矢印が表示されます。次に、それをドロップすると、2つのブロックがくっつきます。もう一度
          [実行] を押すと、トリはワークスペースで上から下に積み上げられたコマンドを実行します。"
      5:
        text: ブロックを削除したい場合は、くっついているところから引き離してゴミ箱にドラッグします。[実行] を押した後、いつでもリセットボタンを押してトリをスタート地点に戻すことができます。では、ブタをつかまえましょう！
    C2_paper_airplanes:
      1:
        text: このレッスンは、実生活アルゴリズムと呼ばれます。アルゴリズムは、人々が毎日行うことを記述します。クッキーのレシピと巣箱を作るための指示は、どちらも日常的なアルゴリズムです。
      2:
        text: 今日は、紙飛行機のアルゴリズムを作成、作成、テストします。けれども、最初に、この大きなプロジェクトを簡単な小さな手順に分解する必要があります。紙飛行機を作るためには、どのような手順を踏むか、どのような順番で勧めるかを決める必要があります。
      3:
        text: 最初に画像を切り離してアルゴリズムを作成します。次に、紙飛行機を作成するために必要な手順を示した6つの画像を選択し、それらの画像を正しい順序で並べます。すべての準備が整ったら、アルゴリズムを別の生徒チームと渡しあって、アルゴリズムをテストし、それが機能するかどうかを確認します。すばらしい紙飛行機を作るためには、適切に設計されたアルゴリズムが決め手になります。
      4:
        text: チョコレートを作るとき、そのプロセスには大きな手順がたくさんあり、そのような大きな手順のそれぞれに一連の小さな手順があります。そしてチョコレートの味わいに応じて異なるレシピまたはアルゴリズムがあります。小さなものも含めて、手順それぞれが重要なので、何か手順が1つ欠ければ、残りの手順は完了できません。他の人が理解できるアルゴリズムを作成することが本当に重要です。そのため、各手順を書き留めて、誰が行っても結果が同じになるようにする必要があります。
    C2_playlab_createstory:
      1:
        text: これまでは、実行するたびにまったく同じことを行うアニメーションまたはストーリーを作成してきました。これで、インタラクティブなゲームを作成して実際にプレイできます。
      2:
        text: 新しいブロックをいくつか試してみましょう。「～したとき」(when arrow) ブロックと「キャラクターを動かす」(move actor)
          ブロックがあります。 これらのブロックを組み合わせて、矢印キーでキャラクターを移動させられます。 また、キャラクターがぶつかったり、クリックしたりしたときに何かを行うブロックもいくつかあります。
          チェックしてみて、お楽しみください！
    C2_relay_programming:
      1:
        text: 今日はリレープログラミングをします。プレッシャーのもとでのプログラミングと、非常に迅速に作業しているとき、またはチームで作業しているときに発生することがあるエラーをデバッグすることを学びます。グラフ用紙のプログラミングを使ってプログラムをシミュレートし、リレーレースを使って締め切りをシミュレートします。
      2:
        text: リレープログラミングでは、チームがグラフ用紙のプログラムを完成させるために競い合います。チームメイトの作業を確認し、デバッグして、間違いがある場合は修正し、矢印を加えて、実行し直して、チームメイトにバトンを渡してください。
      3:
        text: プログラマーは多くのデバッグを使用して、アルゴリズムまたはコードの問題を見つけて修正します。問題をデバッグする方法はたくさんあります。最も簡単な方法の1つは、問題が発生した場所が見つかるまで段階的に探し、それを修正することです。
      4:
        text: ここでは、バク転をしようとしていますが、失敗し続けています。私は各部分を順に調べて、間違いがどこにあったのかがわかりました。コーチは、平均台に正しく手をついていなかったことを示してくれました。そこで、平均台上で手の位置を変えてバク転を再度試み、今度は着地がうまくいきました！バク転をデバッグできて本当に良かったです。どうすればいいのか考え抜くことができました！デバッグとは、問題を見つけて修正することです。よくできました！
    C2_zuck_repeat_loop:
      1:
        text: コンピューターが本当に得意なのは、コマンドを繰り返すことです。人として、同じことを何度も何度も続けなければならないのは、本当に退屈です。けれどもコンピューターは同じことを数百万回、場合によっては数十億回行うことができ、飽きることなくそれを本当にうまく実行することができます。
      2:
        text: たとえば、Facebookの登録者全員にメールを送信してお誕生日おめでとうと言いたい場合、実際にメールを全員に送信するには1世紀以上かかる可能性があります。けれどもほんの数行のコードで、システムからFacebookの登録者全員に誕生祝いのメールを送信することができます。それがループの機能で、ループが大事な理由です。コンピューターはループが非常に得意なのです。
      3:
        text: この例では、目標はトリを動かしてブタをつかまえることです。簡単に行えるように「繰り返し」ブロックを使います。これを行うには、コンピューターに「前へ進め」コマンドを5回与えて、トリをブタに1歩ずつ進めます。
      4:
        text: または、コンピューターに1回前へ進むように指示してから、それを5回繰り返すように指示します。これは1歩ずつ進むのと同じことをしています。したがって、これを行うには、「前へ進め」コマンドをドラッグして、「繰り返し」ブロックの中に配置します。そしてそれをクリックして、ブロックを繰り返す回数と何歩前へ進ませたいかを伝えます。
      5:
        text: もう1つは、「繰り返し」ブロックの中に必要なだけコマンドを配置できることです。そのため、この例では、前へ進んで左に曲がるように指示していて、これを5回行います。
    C3_artist_functions:
      1:
        text: コンピューター プログラミングの優れている点の1つは、アクションを実行する方法をコンピューターに教えたら、その関数を再度呼び出すことができることです。名前を付ければ、それを呼び出すことができます。それは本当に言葉を広げるようなものです。
      2:
        text: 作成したプログラムでは、4回進んで曲がることで正方形を描く方法を学びました。それを関数にして「正方形を描く」という名前を付けます。そうすることで、正方形を描きたいときはいつでも、単に「正方形を描く」と言うだけで、その関数（つまりそのコード）を呼び出すことができます。便利ですよね。その概念をプログラミング言語に加えました。
    C3_artist_intro:
      1:
        text: コンピューター サイエンスに精通している人がいなければ、レースに出る資格すらありません。車がどれだけのデータを収集するか、また、プログラムを書ける人がいてどのようにして性能を構築するかを考え続けられるようにする必要があるからです。
      2:
        text: このパズルでは、鉛筆を使ってさまざまな形を描くアーティストになります。アーティストが移動すると、後ろに線を引きます。
      3:
        text: キャンバス内を移動するには、「前へ進む」ブロックを使います。ここで、「前へ進む」ブロックは100ピクセル前進することを示しています。実行すると、どうなるでしょうか？アーティストは一定量前へ進み、その量は100ピクセルです。ピクセルとは、基本的にコンピューター画面上の非常に小さな正方形です。
      4:
        text: このパズルにあるもう1つのブロックは、「右に90度曲がる」といいます。これをドラッグすると、アーティストは一定量回転します。そのため、アーティストをどこまで回転させたいかを試すことができます。これは90度の回転です。
      5:
        text: そしてこれは120度の回転です。また、ピクセルと度の数値の横にある矢印をクリックすると、値を変更できます。アーティストと一緒に絵を描いて楽しんでください！
    C3_artist_nested_loops:
      1:
        text: ループを別のループの内側に置くことを、「入れ子のループ」と呼びます。たとえばここに、長さが100ピクセルの辺を持つ1つの三角形を描くコードがあります。「～回繰り返す」ブロックを使ってそれを3回に設定し、三角形の各辺を描きます（各辺1回）。
      2:
        text: けれども、6つの三角形を描きたい場合は、そのループを別の「～回繰り返す」ブロックの中に配置します。非常にスマートですね！
    C3_bee_conditionals:
      1:
        text: これは条件ブロックです。ある数よりも少ないか、等しいか、または大きいミツまたはハチミツがあった場合、何をするかを説明します。
      2:
        text: これは、このクエスチョンマークで見てとれるように、ミツやハチミツの量がわからない場合に便利です。
      3:
        text: この例では、紫色の花のミツが0より大きい場合は、ミツを取ります。それにより、ミツがある限りミツを取り続けるようにハチに伝えます。
    C3_bee_debugging:
      1:
        text: プログラムのデバッグについて聞いたことがありますか？これは、何がうまくいっていないかを理解するために行います。コードをデバッグするときは、エラーを特定して取り除きます。
      2:
        text: ここでは、ワークスペースにすでにいくつかのブロックが置かれています。[ステップ] ボタンを使用して、ブロックを1つずつ順番に見ていきます。こうして、これが適切なソリューションであるかどうかと、修正が必要な箇所があるかを確認します。
      3:
        text: 問題があるようですね！もう1つ前へ進むブロックが必要です。[ステップ] ボタンを押すと、エラーの場所を特定して問題をデバッグし、修正することができます。
    C3_bee_functions:
      1:
        text: コンピューター サイエンスの最も重要な考え方の 1 つは、どのように新しいコマンドを定義するか、そして独自の言葉をコンピューター言語にどう加えるかにあります。ほとんどのコンピューター言語は、たった
          100 くらいの言葉やコマンドしかありません。これを組み合わせてあなた自身のコマンドを定義することが、アートや魔法なのです。
      2:
        text: これはスポーツでは普通に行っていることです。たとえば、バスケットボールでは、ドリブルの仕方、レイアップの仕方、リバウンドの仕方を学ぶことから始めます。これらの基本的な動きを身につけたら、ピックアンドロールやギブアンドゴーなどの新しい動きを学び、組み合わせます。次に、それをさらに発展させて複雑なプレイができるようになります。そのプレーを習得し、それに名前を付けると、チームの誰もがそれを行う方法を学べます。
      3:
        text: それと同じように、この一連のコマンドを使用してアクションを実行する方法をコンピューターに一度伝えると、後でそれを簡単に繰り返せるように、アクションにあなたの好きな名前をつけることができます。独自のコマンドを定義して名前を付けることを「関数」と呼びます。では、関数を使ってハチを助けましょう。
      4:
        text: この例では、関数は「ミツを2つ取る」と呼ばれ、ここにある緑色のブロックがそれです。「ミツを2つ取る」で何をするかは、関数の定義であるこの灰色のボックスを見ることでわかります。その中を見ると、「ミツを2つ取る」はミツを取ってから、再びミツを取ります。緑の関数ブロックが何を実行できるかを理解できるように、常に灰色のボックスの中にあるものに注目しましょう。
    C3_bee_nested_loops:
      1:
        text: 次に、みつばちに入れ子のループを使います。みつばちに前へ進んでミツを3回取ってから右に曲がるように指示するスターターコードが用意されています。そのコード全体を、別の「繰り返し」ブロックの中に入れて、3回繰り返すように設定しましょう。できました！
    C3_bounce:
      1:
        text: オリジナルのバウンスゲームをこれから作ります。できたゲームは友だちと共有することができます。
      2:
        text: 開始するには、ラケットの操作をキーボードの矢印キーにリンクする必要があります。
      3:
        text: "「左矢じるしのとき」(when left arrow) ブロックを「左に動かす」(move left) ブロックに、「右矢じるしのとき」(when
          right arrow) ブロックを「右に動かす」(move right) ブロックにリンクすることでこれを行えます。試してみると、すぐにオリジナルのバウンスゲームをプログラミングできます。"
    C3_computational_thinking:
      1:
        text: これは「コンピュテーショナル・シンキング（コンピューターの様に考える）」についてのレッスンです。新しいゲームを学ぶのは難しいこともありますよね？最初は本当にわけがわからず、ルールを教えてくれる人もいないので、自分でそれを考えなければなりません。
      2:
        text: 良い点は、考え方のコツを知っていれば、自分で物事を考えるのが上手くなるということです。コツは、問題を見て解決するためのユニークな方法です。このレッスンでは、4つのコツについて学び、友だちと一緒に練習して、ゲームのルールをつかみます。
      3:
        text: 大きな問題を小さな部分に小分けするとき、あなたは頭を使って大きな問題を分解しています。大きな問題をいくつかの小さな問題に分解したら、パターンマッチと呼ばれる次のコツに進むことができます。
      4:
        text: それは、物事の類似点を探すときのコツです。同じものが見つかったら、何が違うのかを考えることができます。このような違いを取り除くことを抽象化と呼びます。
      5:
        text: 問題を解決するための手順がわかったら、手順をアルゴリズムと呼ばれる特定の順序に並べることで、誰でも自分の指示に従ってその問題を解決できるようになります。これら4つの手順を使用して、ルールなしでゲームをプレイする方法をつかみます。ゲームが終了する頃までに、このようなものをプレイできるようになっていることでしょう！
    C3_crowdsourcing:
      1:
        text: このレッスンは「クラウドソーシング」といいます。このレッスンでは、一連のカードを使って、すべてを1人でやるのではなく、グループで行うとどれほど簡単になるかを学びます。そのため、何人かの友人と一緒に、素晴らしいものを作ってください。大規模なグループの人たちから助けを借りて、何かを早く完成させるのがクラウドソーシングです。
      2:
        text: コンピューター サイエンスでは、常にクラウドソーシングを使用しています。何千人ものアマチュアや専門家がコンピューターをつなげて、何千何億という情報を検索しています。次のメルセンヌ素数のようなもの、またはもしかするとエイリアンとの通信内容さえも探し出します。
      3:
        text: 私たちが鑑賞している映画は、毎秒24枚の写真で成り立っています。それを、フレームといいます。そのため、写真はすべて作成してレンダリングし、すべてを組み合わせる必要があります。チームと私は全員ソフトウェア開発者で、皆で協力してソフトウェアを開発しています。そのソフトウェアで、実際に画像を作成し、画面に表示される最終的な画像を作成しています。ソフトウェアは、アーティストや他の開発者がチームワークとプロセスの一環として使用して、画面上に欲しい画像を作成できるツールです。
      4:
        text: たとえば、ファインディング・ニモで、クラッシュとスクワート、およびそのすべての友だちが東オーストラリア海流を流れているとき、水の流れの画像を見ていて、亀の甲羅の色を見ていて、さらに魚の横顔を見ています。これらはすべて、私たちが作成した数学とコンピューター
          プログラムを介して生成され、アーティストに渡して、最終的なイメージを作成して微調整し、美しく楽しく見せています。
    C3_dice_race:
      1:
        text: このレッスンは「サイコロレース」といいます。コンピューター ゲームをプレイするのが好きな人は数多くいます。けれども、コンピューター プログラマーがゲームの手順をプログラムに変換している方法について考えたことはありますか？コンピューター
          ゲームを作成し、問題を解決するには、まず熟考と計画が必要です。
      2:
        text: 問題解決の思考手順は、アルゴリズムを生み出します。これは、問題を解決するか、タスクを完了するための段階的な計画です。このレッスンでは、サイコロレースゲームのアルゴリズムを作成します。次に、友だちに立てた計画を試してもらい、友だちがゲームをプレイするための手順に従うことができるかどうかを確認してもらいます。プログラマーが手順が正しいことを確認したら、アルゴリズムをコンピューターが理解できる言語のプログラムに変換します。
      3:
        text: 私たちが毎日行うほぼすべてのことには、アルゴリズム、つまりタスクを完了するために実行する手順のリストが必要です。学校へ行く準備をしたり、友だちと楽しい一日を計画したり、軽食を用意したりする場面を考えてください。これらのタスクを完了するには、より小さな手順に分割する必要があります。手順は、特定の順序に従う必要があることもあります。
      4:
        text: サンドイッチを作る場面を考えてみてください。棚から最初にどの材料を取り出すかは関係ありません。けれども、瓶を開けないと、ピーナッツバターを塗ることはできません。コンピューターは、私たちが何気なく行うことができる単純なことでさえも実行する方法を示すためのアルゴリズムとプログラムを必要とします。
      5:
        text: アルゴリズムとは、何が起こる必要があるのかについての考え方である一方、プログラムがそれを実現するためにコンピューターに与える実際の命令です。アルゴリズムは、コンピューターで実行する前にプログラムに変換する必要があります。タスクをアルゴリズムと呼ばれる手順に分割するのは難しいこともあるでしょう。けれども、新しいスキルを学ぶときと同じように、練習することでどんどん簡単になります。
    C3_farmer_while:
      1:
        text: "「～の間」(while) ループは、日常生活で行うこととよく似ています。車を洗っているところを想像してみてください、車がきれいになるまで磨き続けます。汚れがある間、磨き続けます。このように、汚れがあるかないかをその間ずっと評価しています。"
      2:
        text: 農夫を助けるために新しいツールを用意しました。それは「以下の間」ブロックと呼ばれるもので、実際、これはいたってシンプルです。条件が成立している間、あることを繰り返し行います。たとえば、積山がある間、草の束を1つ移動させます。さあ、あなたの農夫で試してみてください。
    C3_functional_suncatchers:
      1:
        text: このレッスンは、関数サンキャッチャーです。関数を使って、きれいなサンキャッチャーを作成します。サンキャッチャーを作るには、いくつかの手順があります。手順の中には、何度も繰り返さなければならないものもあります。
      2:
        text: サンキャッチャーを作成するプロセスを簡略化するための最初のステップは、何回も繰り返す必要があることは何かを考えることです。これらの手順は関数と呼ばれるものにグループ化できます。
      3:
        text: けれども、美しいサンキャッチャーを作るには、正確な手順に従っているだけではできません。私たちはクリエイティブになり、使用しているビーズの色を変えたいと思うこともあるでしょう。異なる色のビーズを使えば、すべてのサンキャッチャーを個性あるものにすることができます。
      4:
        text: ビーズを変数として考えることを学ぶと、サンキャッチャーはあなたオリジナルのものになります。変数は、変化する可能性のある情報のプレースホルダーを意味する言葉です。関数と変数を用いて、美しいサンキャッチャーを作って楽しんでください！
    C3_internet:
      1:
        text: これはインターネットについてのレッスンです。インターネットは非常に忙しい場所で、せわしなく車が行き来する道路に似ています。車のようなメッセージが目的地に到達するためにビュンビュン走っています。メッセージはインターネットを介して非常に速く移動しているのです。
      2:
        text: インターネットがどのように機能するかを実際に体験してみると、インターネットを使用するときに何が起こっているかを理解するのに役立ちます。コンピューターからお気に入りのウェブサイトに、または友だちからメールの受信トレイにメッセージが届く方法を学習します。道路を知っていて標識を読むことができれば、混雑した道路を簡単に運転できるのと同じように、舞台裏で何が起こっているかを知っていれば、インターネットの世界をナビゲートすることはそれほど難しくはありません。
      3:
        text: インターネットでメッセージを送信することは、メールでメッセージを送信するのと少し似ていますが、いくつかの違いがあります。私はGoogle.comのページにいて、このウェブサイトのIPアドレスはこの番号です。IPアドレスは、メールの返信アドレスと考えることができます。オフィスの誰かにメールでメッセージを送りたいとしましょう。そのドアにあるURLとIPアドレスが見えますか？このメッセージを書いて、[送信]
          を押しました。
      4:
        text: 郵便とは異なり、最初に起こることは、インターネットがメッセージをより小さな部分に分割して、より簡単に送信できるようにすることです。この小さな部分は「パケット」と呼ばれます。メッセージの各パケットは、一度に1つずつ宛先に配信されます。パケットはすべて正しい順序でまとめられているため、受信者はメッセージを正しく読み取ることができます。もちろん、インターネットの仕組みについて学ぶべきことは他にもたくさんありますが、これは素晴らしい出発点です。あなたは玄人インターネットユーザーになる道を進んでいます！学んだことを家族や友だちに伝えましょう！
      5:
        text: 私はアマンダ・キャンプといい、Googleのソフトウェアエンジニアをしています。プロファイルと連絡先を格納するバックエンドサーバーで作業するチームで仕事をしています。携帯電話などの他のデバイスに連絡先を送信する方法について色々考えるのが私の仕事です。ほとんどの人はたくさんの連絡先を持っています。たとえば1000件の連絡先があるかもしれませんが、メッセージが大きすぎるため、それらすべての連絡先を一度に携帯電話に送信したくはありません。インターネットが大きなメッセージをパケットに分割するのと同様に、「ページング」と呼ばれる概念を用います。ページングでは、一度に100件の連絡先のみを携帯電話に送信し、電話が応答して次の100件の連絡先をリクエストします。
      6:
        text: ソフトウェアについて最も興味深いことは、それが全世界に影響を与える可能性があるという点です。私は19歳の頃にプログラミングを学びました。当時、私は大学の2年生か3年生だったと思います。私が書いた最初のプログラムは、摂氏を華氏に変換するというものです。人を助けるのが好きなので、プログラミングが好きです。私はGoogleで世界中の人々を助けるプログラムを書くことができます。それは本当に心が躍り、ワクワクするようなことです。
    C3_maze_conditionals:
      1:
        text: 人は毎日決断を下しています。たとえば、外に出る前に、雨が降っているかどうかを評価するif文があり、降っている場合はジャケットを羽織る必要があります。コンピューターは、これらのことを確実に実行できるような文を決定すると、信じられないほどの速度で処理し、すばらしいものになります。コンピューター
          プログラムは、実際に少し数学に似ていて、決定が下されるif文も中にはあります。
      2:
        text: "「もし (if)」ブロックは、ゾンビが決定を下すのに役立ち、何かをチェックします。たとえば、左への道があるかどうかを問うブロックの中に、「左に曲がる」コマンドを置きましょう。ゾンビに周囲を見回して、左側に道があるかどうかを確認させ、あれば曲がるように指示します。"
      3:
        text: 次に、この繰り返し内で「前へ進む」ブロックを使って、まっすぐ進みたい限り、前進を続けるようにします。次に、曲がるところがある場合、「もし」ブロックは左に曲がるように指示します。そうして左に曲がって前進すれば、目標を達成できます。
      4:
        text: これは、コンピューター プログラミングの基本的な概念である「もし」文の使用例です。私が最初に学んだことの1つは、三目並べ (〇×ゲーム)
          をプレイするプログラムの書き方でした。私はif文で、もし相手が勝ちそうなら、その勝敗を決する場所をブロックするようにしました。if文の使い方を楽しく学んでください。これは重要な概念です。
    C3_maze_level_4:
      1:
        text: この例では、目標はゾンビをヒマワリまでたどりつかせることです。 5つの「前へ進む」ブロックを使用することもできますし、1つの「繰り返し」ブロックを使って、コンピューターに1度前へ進んでそれを5回繰り返すように指示することもできます。
      2:
        text: これは時間を節約し、プログラムを非常に簡単にします。それを使用するには、「繰り返し」ブロック内に「前へ進む」ブロックを置くだけです。[実行]
          を押すと、ゾンビがおいしいヒマワリまで5回前へ進みます。
    C3_playlab_create_game:
      1:
        text: これまでは、実行するたびにまったく同じことを行うアニメーションまたはストーリーを作成してきました。これで、インタラクティブなゲームを作成して実際にプレイできます。
      2:
        text: 新しいブロックをいくつか試してみましょう。「～したとき」(when arrow) ブロックと「キャラクターを動かす」(move actor)
          ブロックがあります。 これらのブロックを組み合わせて、矢印キーでキャラクターを移動させられます。 また、キャラクターがぶつかったり、クリックしたりしたときに何かを行うブロックもいくつかあります。
          チェックしてみて、お楽しみください！
    C3_songwriting_with_parameters:
      1:
        text: これは、「作曲」レッスンです。音楽はコンピューター プログラムによく似ています。書かれたメモや言葉は、歌手に正確に何をすべきかを伝えます。楽曲の一部は何度も何度も使われます。
      2:
        text: これを歌の「繰り返し部分 (コーラス)」と呼びます。コンピューター プログラムでは、何度も何度も使用するプログラムの部分を「関数」と呼びます。歌の歌詞を読んで「繰り返し部分」と書かれていたら、繰り返し部分と発声しますか？しませんね。ページの上部を見て、どの部分を繰り返すのかを確認します。
      3:
        text: このレッスンでは、「ちいさな うさぎの フーフー」というおかしな歌を学びます。この歌には何度も何度も歌う繰り返し部分部があります。関数とは、呼び出して繰り返し使用できるコードのことです。これにより、プログラミングがより簡単で効率的になるため、関数の手順を何度も書き直す必要がありません。一度だけ書けばそれですみます！
    C4_bee_conditional:
      1:
        text: これは「条件」ブロックです。花かハチの巣にいるなら、どうするかと指示します。これは、このクエスチョンマークが付いているのが見えるように、ハチミツやミツがどれだけ必要かわからない場合に便利です。
      2:
        text: この例では、花の場合はすべてのミツを手に入れる指示し、さらに別の「条件」ブロックを使ってハチの巣の場合はハチミツを作ると指示します。できましたね！
    C4_conditionals:
      2:
        text: コンピューターは条件文によって決定を下します。人間は、コンピューターに対して、特定の状況になった場合はこれを行い、そうならなければ (else)、これを行うという条件をコンピューターに設定します。「もし/でなければ」ブロックの一番上には「花のところにいる場合」と書かれています。けれども、ブロックの上部で他のことを言うこともできます。たとえば、もしミツが2に等しい場合や、もし前に道がある場合などです。その場合も、ブロックは同じように動作します。一番上の文が真
          (true) の場合、最初の行動セットが実行されます。けれども、一番上の文が偽 (false) の場合、2番目の行動セットが実行されます。
    C4_for_loops:
      1:
        text: "「繰り返し」ブロックを使ってコードをループする場合、十分な回数繰り返されたことをコンピューターはどのようにして知るのでしょうか。「繰り返し」ブロックには、開始値から終了値まで特定の増分でカウントするforループ
          (for文) と呼ばれるより洗練されたコードが隠されています。"
      2:
        text: たとえば、3つのブロックを繰り返して、1から3まで1ずつまでカウントします。カウントするたびに、ループ内でコードを実行します。 forループは、ループの開始時に開始値に設定され、ループが実行されるたびに増分が追加されるカウンタ変数を使用して、ループが何回実行されたかを認識します。カウンタ変数が終了値より大きいとすぐに、ループは実行を停止します。
      3:
        text: "「繰り返し」ブロックの代わりに実際のforループを使用する利点は、カウンタ変数を実際に確認してループで使用できることにあります。たとえば、一連の花があり、最初の花にミツが1つのあり、2番目にミツが2つ、3番目にミツが3つある場合、forループを使って、ハチに毎回「カウンタ」のミツを集めるように指示できます。ここでは、最初の花に1つ、2番目に2つ、3番目に3つです。"
      4:
        text: また、forループでは、毎回1以外の数でカウンタを増分できます。 2秒、4秒、または毎回変化する量でカウントすることもできます。
    C4_for_loops_bee:
      1:
        text: "「繰り返し」ブロックを使ってコードをループする場合、十分な回数繰り返されたことをコンピューターはどのようにして知るのでしょうか。「繰り返し」ブロックには、開始値から終了値まで特定の増分でカウントするforループ
          (for文) と呼ばれるより洗練されたコードが隠されています。"
      2:
        text: たとえば、3つのブロックを繰り返して、1から3まで1ずつまでカウントします。カウントするたびに、ループ内でコードを実行します。 forループは、ループの開始時に開始値に設定され、ループが実行されるたびに増分が追加されるカウンタ変数を使用して、ループが何回実行されたかを認識します。カウンタ変数が終了値より大きいとすぐに、ループは実行を停止します。
      3:
        text: "「繰り返し」ブロックの代わりに実際のforループを使用する利点は、カウンタ変数を実際に確認してループで使用できることにあります。たとえば、一連の花があり、最初の花にミツが1つのあり、2番目にミツが2つ、3番目にミツが3つある場合、forループを使って、ハチに毎回「カウンタ」のミツを集めるように指示できます。ここでは、最初の花に1つ、2番目に2つ、3番目に3つです。"
      4:
        text: また、forループでは、毎回1以外の数でカウンタを増分できます。 2秒、4秒、または毎回変化する量でカウントすることもできます。
    C4_for_loops_no_bee:
      1:
        text: "「繰り返し」ブロックを使ってコードをループする場合、十分な回数繰り返されたことをコンピューターはどのようにして知るのでしょうか。「繰り返し」ブロックには、開始値から終了値まで特定の増分でカウントするforループ
          (for文) と呼ばれるより洗練されたコードが隠されています。"
      2:
        text: たとえば、3つのブロックを繰り返して、1から3まで1ずつまでカウントします。カウントするたびに、ループ内でコードを実行します。 forループは、ループの開始時に開始値に設定され、ループが実行されるたびに増分が追加されるカウンタ変数を使用して、ループが何回実行されたかを認識します。カウンタ変数が終了値より大きいとすぐに、ループは実行を停止します。「繰り返し」ブロックの代わりに実際のforループを使用する利点は、カウンタ変数を実際に確認してループで使用できることにあります。
    C4_function_create:
      1:
        text: 関数ブロックを編集できたので、今度は新しい関数ブロックを一から作成してみましょう。とても簡単です。ツールボックスに関数と呼ばれるカテゴリがあります。これをクリックすると、[関数の作成]
          というオレンジ色のボタンが表示されます。そのボタンをクリックすると、既存の関数ブロックの編集に使用した関数エディターが表示されます。
      2:
        text: 前と同じように、関数に名前を付け、その関数が実行することが想定されている指示の説明を書き留めることから始めます。たとえば、正方形または三角形を描画し、ブロックをツールボックスから下の白いワークスペースにドラッグすることが想定されています。これらのブロックを関数の緑のラッピングブロックの中にドラッグすることを忘れないでください。
      3:
        text: 完了したら、[保存] をクリックして終了します。これでメインのパズルのワークスペースに戻ります。作成した新しい関数は、ツールボックスの関数カテゴリに緑色のブロックとして表示されます。これをメインのワークスペースにドラッグ・アンド・ドロップして、他のブロックと同じように用いてパズルを解きましょう。
    C4_function_edit:
      1:
        text: コンピューター プログラミングの優れている点の1つは、アクションを実行する方法をコンピューターに教えたら、その関数を再度呼び出すことができることです。名前を付ければ、それを呼び出すことができます。それは本当に言葉を広げるようなものです。
      2:
        text: 作成したプログラムでは、4回進んで曲がることで正方形を描く方法を学びました。それを関数にして「正方形を描く」という名前を付けます。そうすることで、正方形を描きたいときはいつでも、単に「正方形を描く」と言うだけで、その関数（つまりそのコード）を呼び出すことができます。便利ですよね。その概念をプログラミング言語に加えました。
      3:
        text: このパズルでは、正方形を描く関数がすでに作成されています。ツールボックスに緑色のブロックとして表示されます。ここで行うことは、正方形を描くために前に書いたのと同じコードを書いて、この関数に入れることです。そのためには、緑色の編集オプションをクリックすると、関数エディターが開きます。関数エディターには3つの部分があります。1つは関数に名前を付ける場所で、これはその関数の前の緑のブロックにあります。次に、関数が行うことが想定されていることの簡単な説明を書きます。
      4:
        text: この場合、正方形を描くことになっています。この下の空白はワークスペースで、すでに使用しているワークスペースと同じように機能します。ツールボックスからこのワークスペースにブロックをドラッグ・アンド・ドロップします。関数の緑のラッピングブロックの中に正方形を作成するブロックを配置することを忘れないでください。完了したら、[保存]
          をクリックして終了します。これでメインのパズルワークスペースに戻ります。これで、他のブロックと同じように四角形を描く関数ブロックを使ってパズルを解くことができます。
    C4_function_parameters:
      1:
        text: これは、50ピクセルの辺を持つ正方形を描く関数です。これはこれでいいのですが、辺が50ピクセルの正方形と辺が100ピクセルの正方形を描きたい場合はどうでしょうか。ほぼ同じことを行う2つの個別の関数を作成する必要はありません。代わりに、パラメータを持つ1つの関数を用いることができます。
      2:
        text: パラメータを使用すると、関数内の変数として使用される関数に値を渡すことができます。 likeと呼ばれるパラメータをこの関数に追加して、異なるサイズの正方形を作成できるようにしましょう。関数エディターでは、以前と同じように名前と説明を編集できますが、パラメータを追加することもできます。スペースにパラメータの名前を入力し、[パラメータの追加]
          をクリックします。これにより、作成したパラメータの名前で赤いブロックが作成されます。これで、「100ピクセル前へ進む」ブロックをパラメータLengthに置き換えることができるので、Length分だけ前へ進むようになります。
      3:
        text: "[保存] をクリックして閉じ、ツールボックスの関数カテゴリから新しい「正方形を作成」ブロックを引き出します。lengthの横に空のスペースがあることに気づくでしょう。このスペースがあるのは、関数はパラメータLengthの値を知りたいからです。数学カテゴリから数値ブロックをドラッグして、このスペースに配置します。さまざまな長さの関数を繰り返し使用して、さまざまなサイズの正方形を作成する方法を見てみたいと思いませんか？ぜひご自身でお試しください！"
    C4_intro:
      1:
        text: 通常、プログラミングはすべてテキストで行われますが、ここではBlocklyを使い、ビジュアルブロックをドラッグ＆ドロップしてプログラムを書きます。内部では、プログラムを書いているのと同じことです。まず、このアングリーバードが迷路を進んで、卵を盗んだ悪いブタにたどり着けるようにするプログラム用のコードを作成します。
      2:
        text: Blocklyは主に3つの部分に分かれています。左側はトリの迷路で、作成したプログラムを実行します。各レベルの説明は迷路の下に書かれています。この中央の領域はツールボックスで、各ブロックはトリが理解できるようになっているコマンドです。右側の空白はワークスペースと呼ばれ、ここでプログラムを作成します。
      3:
        text: "「動く」ブロックをワークスペースにドラッグして [実行] を押すと、どうなるでしょうか？トリはグリッド上で1ボックス前に移動します。そして、トリが1ボックス前に進んだ後でトリに何かをさせたい場合はどうすればよいでしょうか？プログラムに別のブロックを追加しましょう。"
      4:
        text: "「右に曲がる」ブロックを選択して、「動く」ブロックの下にドラッグすると、黄色の矢印が表示されます。次に、それをドロップすると、2つのブロックがくっつきます。もう一度
          [実行] を押すと、トリはワークスペースで上から下に積み上げられたコマンドを実行します。"
      5:
        text: ブロックを削除したい場合は、くっついているところから引き離してゴミ箱にドラッグします。[実行] を押した後、いつでもリセットボタンを押してトリをスタート地点に戻すことができます。では、ブタをつかまえましょう！
    C4_math_artist:
      1:
        text: 50ピクセルの高さとその2倍の長さの幅がある長方形を描きたい場合、それを行うにはコンピューターをどのようにプログラムしたらよいでしょうか？まあ、私はアーティストに50ピクセル上がって右に曲がり、100ピクセル進み、同じことを2回繰り返すように指示することができるでしょう。けれどもそれでは、コンピューターのために計算をしてあげていることになってしまいます。
      2:
        text: 頭の中で50を2倍にしても、それほど難しくはないかもしれませんが、コンピューターは計算するのが本当に上手なので、可能な限りコンピューターに任せるべきです。代わりに高さという変数を使用した場合、高さをちゃちゃっと50に変更してから、アルゴリズムを変更して、アーティストに高さ分上に移動し、右に曲がってから高さに2を掛けた分進むように指示することで、高さの2倍の幅を持った長方形を描けます。
    C4_unplugged_algorithms:
      1:
        text: これは「タングラム アルゴリズム」というレッスンです。タングラムとは、7つのピースを組み合わせて色々な形を作るパズルです。ここではアルゴリズムを使って、パズルを組み立てる方法をパートナーに説明します。
      2:
        text: アルゴリズムは、タスクを完了するために実行する手順集のほんの一部です。買い物リストやレシピなどで、私たちは毎日使っています。アルゴリズムを単純にしておくと、アルゴリズムを解釈する方法がたくさんあり、そのアルゴリズムを実行した人が得られたものはあなたが望んでいたものと正確には一致しないかもしれません。全員がまったく同じものになるようにしたい場合は、アルゴリズムを詳細かつ非常に具体的にする必要があります。
      3:
        text: 私は今日、アルゴリズムを使って絵を描いています。オオカミの絵を描きたかったのですが、素晴らしい画才があるわけではありません。幸い、数字でペイントすることができます。40の色が用意され、各部分をペイントする色を示す小さな文字と数字があります。数字でペイントすると、使う色とどこに塗るかが正確にわかります。
      4:
        text: アルゴリズムは非常に具体的なので、指示に従うことができ、絵は素晴らしい出来栄えです。素晴らしいアルゴリズムです。指示が十分に具体的でなければ、私のオオカミはそれほどよく見えなかったでしょう。何かを計画したとおりにきっちり結果を出したい場合、正確を期すのがベストです。
    C4_unplugged_binary:
      1:
        text: 各チームで指示する人が紙を持っている人で、オフシンボルをどうするか、オンシンボルをどうするかを考える必要があります。バイナリは2文字のアルファベットのようなものです。
          アルファベットにAとBしかないように、0と1しかありません。
      2:
        text: バイナリの最も一般的な方法はif文で、プログラミングに昔からあるものです。プログラムを実行すると、もし何かが真ならこれを行い、偽なら別のことを行いなさいと指示します。もしもう少し複雑なことをしたいなら、どうしたらいいでしょうか。if文の代わりに、コンピューターで画像やサウンドなどを扱いたいとします。
      3:
        text: コンピューターはバイナリのみを認識しますが、イメージはバイナリではなく、1と0ではありません。ではどのように行えばよいのでしょうか？ここに例があります。美しい画像を持っているとします。画像は基本的に情報の一形式です。すべての情報は何らかの方法でバイナリにエンコードでき、必要なのはその方法を理解することです。
      4:
        text: このパンダの上にグリッドを配置すると想像してください。各四角形について、その四角形がより黒か白かを決定します。そして、それをそのように着色します。これで、グリッドの各セルは黒または白になり、黒の四角形はゼロ
          (2進数) 、白の四角形は1で、これはもう1つの2進数です。最後に、1と0の束だけが残ります。このイメージはこのようにしてバイナリで表現します。
    C4_unplugged_forloops:
      1:
        text: これは「Forループを楽しむ」というレッスンです。このレッスンでは、数の直線を使用してサイコロゲームをプレイします。各プレイヤーは3回サイコロを転がして、開始値、停止値、および間隔値を割り当てます。各ターンの間、開始値と、間隔値と同じ前進数であるすべての値を丸で囲みます。停止値に到達したら、丸で囲むのを停止します。最高得点の人が勝ちます！
      2:
        text: forループは多くの場所で役に立ちます。気象学者になった場合は、常にforループを使用します。こんにちは、私はベッキーです。私は風力気象学者としてEverPower
          Renewablesで働いています。会社の風力発電所があるコロンビア・リバー・ゴージ・エリアの風速を予測しています。
      3:
        text: どのくらいの電力が出力されるかを知るために、そこにはどのくらいの風が来るかを理解しようとしています。当社はその情報をリアルタイムのエネルギートレーダーに提供しています。彼らは、当社がそこに届ける予定の電力量に基づいて電力を売買しています。それにより、送電網のバランスが取れ、照明が継続的に点灯するようにし、さらに発電所から送電するエネルギーの量を最大化しているのです。
      4:
        text: 当社はポートランドにあるEverPower Renewablesの国家管理センターに拠点を置いています。ここには、全国のすべての発電所から情報が集まってきます。今日の最も高性能なコンピューターでも、場所を問わず気象をシミュレートできるわけではありません。コンピューター予測モデルには、「グリッド」と呼ばれるものがあります。各グリッドポイントは緯度、経度です。私たちは自然の摂理を計算し、風速、温度、圧力などを極力理解する必要があります。
      5:
        text: これらはかなり大きなグリッドで、多くのポイントでこれを実行しているため、何百万回もループしています。すべてのことにforループを使用しています。たとえば、ここにforループがあります。風を予測するとき、そこには膨大な数のさまざまなパラメータが入るのですが、人間が腰をおろしてすべての計算を行うことは不可能です。風に何が影響しているのかについては、非常に多くの異なる側面があるため、それを予測するにはコンピューター
          モデルが必要です。
    C4_unplugged_madlibs:
      1:
        text: このレッスンでは、空白を埋めて作るタイプのストーリーを使ってプレイします。テンプレートが用意されているので、それに記入することで非常に面白い違いがあるよく似たストーリーを作成することができます。
      2:
        text: このレッスンでは、すでに作成されている2つのストーリーから抽象化されたテンプレートを作成する方法も学びました。抽象化とは、差異と詳細を取り除くことで、1つのソリューションが多くの異なる問題に対してどのように機能するかを確認できるようにする技術です。抽象化により複数の異なる状況で役立つ関数を作成できるため、コンピューター
          サイエンスでは重宝します。
    C4_unplugged_parameters:
      1:
        text: これは、「パラメータを使った作詞作曲」と呼ばれるレッスンです。ここでは作曲を行ってもらいます。歌の繰り返し部分は歌うたびに少しだけ変化することがあります。「ゆかいな牧場」という曲はご存知ですか？繰り返し部分は動物ごとに少し異なります。牧場でウシさんがイーアイ　イーアイ　オーと歌うあの曲です。各繰り返し部分の小さな変化は、パラメータと呼ばれるものを使用して示すことができます。
      2:
        text: 関数にはパラメータが必要な場合があります。パラメータは関数に渡すことができる追加情報で、特別なニーズに合わせてカスタマイズすることができます。友だちとアイスクリームサンデーを作るときは、コンピューター
          プログラムのパラメータに似たプロセスを使用しています。
      3:
        text: グラスの底のバニラアイスクリームはどのサンデーでも同じかもしれませんが、友だちにどのトッピングを希望するか尋ねると、さまざまな組み合わせができます。トッピングは関数名ですが、トッピングの各タイプはパラメータです。関数とパラメータが連携して、優れたコンピューター
          プログラムが作成でき、おいしいサンデーもできあがります。
    C4_unplugged_variables:
      1:
        text: これは、「封筒内の変数」というレッスンです。まだ情報が不足している中で、文章を作成する方法を学習します。私たちのほぼ誰もが、空白を埋めることに慣れています。宿題に名前を書くときに、空白に名前を記入しませんでしたか？場合によっては、複数の単語を入力する必要がある場合があります。その場合は、空白のラベルを付けて、どの情報がどこに入るかがわかるようにします。
      2:
        text: 変数は、変更される可能性のある情報のプレースホルダーです。欠落している情報に変数を使用することで、私たちは何をしていても作業を続け、後で誰かに欠落している情報を記入させることができます。ソフトウェアでは、変数をよく使用します。変数は、名前、メールアドレス、さらにはユーザー名のプレースホルダーとして使われます。このようにして、ユーザーが入力した後で詳細がどこに表示されるかをプログラムに知らせることができます。この作業では常に変数を用います。
      3:
        text: 後で使用するために情報を保存する必要があるときはいつでも、変数を使用します。ユーザーがツイートした回数を数える必要があるとしましょう。ユーザーがツイートするたびにその数に1を加え、ユーザーがツイートを削除するたびにその数を1つ減らします。そのユーザーが何回ツイートしたかを知る必要があるときはいつでも、その変数を調べます。
    C4_variables_artist:
      1:
        text: 変数は、値を格納できるコンテナです。その変数をアルゴリズムで使用すると、コンテナが開き、内部の値を確認します。これにより、変数に格納された値に応じて異なる動作をする、よりスマートなアルゴリズムを作成できます。
      2:
        text: たとえば、弟のために「10歳のお誕生日おめでとう！」と言うアルゴリズムを作成したい場合、今年はそれでいいでしょうが、来年それを実行するときは、「11歳のお誕生日おめでとう！」にしたいでしょう。弟の年齢を保存するためにageという変数を作成し、「'age'歳のお誕生日おめでとう！」と言うアルゴリズムを書くことができます。変数は変化できるため、毎年変数「age」を「age」に1を加えた値に更新できます。
      3:
        text: このパズルでは、アーティストが描く線の長さを設定する変数を使用します。プログラムの後半で、「前へ進む」ブロックはその線の長さの変数を調べて、何の値が設定されたかを確認します。
    C4_variables_playlab:
      1:
        text: 変数は、値を格納できるコンテナです。その変数をアルゴリズムで使用すると、コンテナが開き、内部の値を確認します。これにより、変数に格納された値に応じて異なる動作をする、よりスマートなアルゴリズムを作成できます。
      2:
        text: では、プレイラボを試してみましょう。ここでは、さまざまなゲームが用意されていて、ゲーム内の速度、高さ、スコアなどの変数の値を変更して、ゲームを作り変えられます。ゲームのアルゴリズムを変更してゲームのプレイ方法を変える必要はありません。変更するのは変数だけです。
      3:
        text: Kindleに掲載した作品と本のX-rayでは、さまざまな方法で変数を適用しています。変数を使用する1つの方法は、本のページ番号を格納することです。ユーザーは、ページ上のフォントのサイズを増減できます。フォントサイズに基づいて、本内のページ数が変化します。これは、変数にページ数を格納することで調整できます。
    infinity_playlab_events:
      1:
        text: |-
          これから、どのゲームプログラマーも毎日使っていることを学んでいきます。
          それら「イベント」と呼ばれるもので、イベントは何かが起こったときのためにリッスンするようにプログラムに伝達します。イベントの例としては、マウスをクリックしたり、矢印ボタンやスクリーンを軽くタッチしたりするのをリッスンすることが挙げられます。
      2:
        text: ここでは、プレイヤーが上/下矢印キーまたは上/下ボタンを使用して、ベイマックスを上に動かしてヒロにタッチし、下に動かしてラプンツェルにタッチさせます。
          「上矢印のとき」ブロックを使用し、それに「キャラを上に動かす」ブロックをアタッチするので、プレイヤーが上矢印キーを押すと、「上矢印のとき」ブロックにアタッチされているすべてのコマンドが実行されます。同じことを行って、ベイマックスを下げます。こうして、あなたのゲームはどんどんインタラクティブになっていきます。
    infinity_playlab_intro:
      1:
        text: いま何年生ですか？小学生ですか、それとも高校生？わたしがプログラミングをはじめたのは中学生のときでした。6年生のときにパソコンを買ってもらって、皆の問題をなおすことができることに興奮しました。アイディアから実際にものをつくることができるんです。
      2:
        text: コンピューター サイエンスは、大学生やプロが今後20～30年間に行う多くのことの基礎になります。私がプログラミングが好きなのは、人を助けるのが好きだからです。人々の生活を楽にするようなものを作る機会が得られます。すごい力を身につけられるとしたら、プログラミングがそれに一番近いものだと思います。一番大事なのは、始めてみることです。私自身も初心者なので、一緒に学んでいきましょう。
      3:
        text: 私はジョン・ビシェイといいます。PopCapGamesの共同創設者の1人です。 Plants vs. Zombies、Bejeweled、Peggleなどのゲームを制作しました。ゲームで大事なのは、プログラムがどれほど完璧であるかではなく、技術がどれほど完璧であるかでもなく、どのように感じ、どれだけ楽しいかということにあります。その感覚は、自分自身でゲームを作成してみて、行動に移し、ゲームの作成スキル学び、適応させ、繰り返すことによってのみ得ることができます。
      4:
        text: 好きなビデオゲームはありますか？これからプレイラボを使って、そのようなゲームを作るための第一歩を踏み出します。良いゲームにはストーリーがあり、すべてのストーリーにはキャラクターがいます。キャラクターは、話したり、動いたり、相互にやり取りしたりします。ゲームのルールに基づいてポイントを獲得することもできます。今日は、アナ、エルサ、ヒロ、ベイマックス、ラプンツェルなどのディズニーのキャラクターを使って、そうするにはどうしたらいいかを1つずつ学びます。携帯電話で共有してプレイできるゲームを一から作っていきましょう。
      5:
        text: 画面は主に3つの部分に分かれています。左側はゲームスペースで、作成したプログラムを実行します。各レベルの説明は下に書かれています。この中央の領域はツールボックスで、各ブロックは1つのコードです。右側の空白はワークスペースと呼ばれ、ここでプログラムを作成します。
      6:
        text: まず最初に、オレンジ色の「実行したとき」ブロックに他のブロックをつなげる必要があります。黄色い線が見えるまでブロックをドラッグすることによって、たくさんの種類のブロックを一緒につなげることができます。この最初のパズルでは、ヒロはアクター1で、ベイマックスはアクター2です。ヒロをベイマックスまで移動させるには、「右に動く」ブロックをドラッグして「実行したとき」ブロックにつなげる必要があります。ブロックを配置したら、[実行]
          ボタンをクリックして、プログラムした内容を確認しましょう。
      7:
        text: では始めましょう。このアクティビティが完了する頃までに、これらの素晴らしいキャラクターを使って自分オリジナルのゲームを作成できるようになっていることでしょう。そのゲーム内ではし、相互にやり取りしたり、ポイントを獲得したり、マイクロボット、チェリー、ソースパン、火の粉やアイスを投げたり、お互いを倒しあったりすることができます。どのようなゲームを作るかは、あなた次第です！
    infinity_playlab_repeat_forever:
      1:
        text: 何かを永遠に繰り返す必要がある場面を想像できますか？うまくいけば、コンピューターは繰り返す作業が本当に得意なので、あなたの代わりに行ってくれます。これは「ずっと繰り返す」(repeat
          forever) ブロックです。このブロックの中にあるものは、プログラムが終わるまでずっと繰り返されます。
      2:
        text: したがって、プレイヤーが何もすることなくキャラクターに何かを繰り返し実行させたい場合は、その動作ブロックを「ずっと繰り返す」ブロック内に配置します。この次のパズルの目標は、アナが上下に歩き続けるのを助けることです。繰り返しのコマンドがどのように機能するかを学習することで、後で独自のゲームを構築するときに時間を大幅に節約できます。
    tutorial_puzzle_challenge:
      1:
        text: オリビア、大人になったら何になりたい？宇宙飛行士。コンピューター プログラマーは何をしている人か知っているかい？うーん、えーっと。どう説明したらいいのかわからないわ。コンピューター
          プログラミングは非常にシンプルです。それはレシピのような一連の指示で、希望する最終結果を得るためにステップ・バイ・ステップでプログラムを組み立てていかなければなりません。
      2:
        text: このドロップダウンを使用して、ピクセル数、線の長さを変更できます。どれくらいの長さにするんでしたっけ？実行ボタンの下を見ると、手順を再度確認できます。ここでは、「前へ進む」ブロックを使い、100ピクセルを選択します。ブロックをツールボックスまたはゴミ箱にドラッグすると、削除できます。では、元に戻してみましょう。
      3:
        text: "[実行] を押してコードを実行します。うまくいきませんでした！[リセット] を押して、何が問題かを見てみます。パズルは何度でも試すことができ、またパズルをスキップして後で戻ってくることもできます。やってみて、途中で諦めないようにしましょう。別の「前へ進む」ブロックを追加してみましょう。今回もうまくいきませんでした。ブロックを他のブロックの間に置くこともできます。"
      4:
        text: "「曲がる」ブロックを取り、「前へ進む」ブロックの間に置いてみましょう。左に45度曲がります。もう一度実行してみましょう。リセットして、実行。できました！別のパズルもやってみましょう。中にはスターターコードが用意され、それを使って完了するものもあります。ここでは、適切な長さと度を加えることが必要です。"
      5:
        text: スターターコードを誤って捨ててしまうこともあるでしょう。そうなった場合、どうしたらよいでしょうか？[パズルをクリア] を押して、最初からやり直すことができます。この数値ブロックを別のピクセル領域にドラッグします。ピクセルに100、度に45、そしてもう一度ピクセルに100を選択します。すばらしい！ここに、コードスタジオのみつばちがいます。みつばちをそれぞれの花に移動させて、ミツを手に入れなければなりません。
      6:
        text: 最初の花は3ブロック離れているので、3つの「前へ進む」が必要です。 1、2、3と。次にミツを取って、また別のミツを取ります。うーん、うまくいきませんでした！「ミツ取る」の間に別の「前へ進む」ブロックを入れて、もう一度実行します。やったー、うまくいきました！コードスタジオのアーティストとみつばちのパズルの使い方を学びました。
          コードスタジオ パズルチャレンジ、がんばってください。
    unplug1:
      1:
        text: オリビア、大人になったら何になりたい？うーん、宇宙飛行士！コンピューター プログラマーは何をしている人か知っているかい？うーん、えーっと。どう説明したらいいのかわからないわ。コンピューター
          プログラミングは非常にシンプルです。それはレシピのような一連の指示で、希望する最終結果を得るためにステップ・バイ・ステップでプログラムを組み立てていかなければなりません。
      2:
        text: コンピューター サイエンスにより、世界に影響を与えることができます。ミュージックビデオやゲームで使われ、また人と人との関係を検出できます。知り合いの友だちも見つけられます。人の命だって救える突拍子もないこともできるんです。そうするには根気が必要だと思います。私にとって、プログラミングは絵筆のようなものです。優れたプログラミングは、優れた芸術と大差ないと思っています。
      3:
        text: プログラミングを少しかじると、白い壁に見えたものにたくさんのドアがついており、そのドアを開けると無数の扉が並んだ廊下につながっていることがわかりました。プログラミングは楽しいもので、難しくありません。頭でやりたいと思ったことは何でもでき、光明が差すのに十分な数の扉を開け始めます。私にとって完成したプログラムは、光で満たされた建物のようなものです。角という角が光で照らされています。触れたり交流したりできる人の数は、世界がこれまでに見たことのないものです。
      4:
        text: このシリーズの最初のレッスンでは、コンピューター サイエンスとは何か、コンピューター サイエンティストの仕事、そして責任ある形でテクノロジーを使用する方法について学びます。これは非常に重要なレッスンですが、情報量が少々多めです。最後に、自分のイニシャルを使って独自のカスタムプログラムを作成します。これは楽しいアクティビティで、力がみなぎる思いがするでしょう。バイナリは非常にテクニカルに感じられるかもしれませんが、一度理解すると、秘密の言語を話せるようになったのも同じです。
    unplug2:
      1:
        text: コンピュテーショナル・シンキングのレッスンは、大きな困難な問題をより単純な問題に分解する方法を教えることを目的としています。このレッスンの目標は、レッスンプランにあるモンスターの1つを描けるように一連の指示を記述することです。
      2:
        text: 生徒はグループに分かれて、指示を書いたら、モンスターを描く担当の別のグループと入れ替わります。グループは、分解、パターン配置、抽象化、アルゴリズムという4つのコンピュテーショナル・シンキング手順を用いて指示を記述します。
      3:
        text: 最初のグループはタスクを分解します。つまり、ゲームプランを作成します。次に、カタログ内のすべてのモンスター間のパターンを探します。モンスター間の違いに気づいたら、抽象化するか、詳細を削除します。たとえば、カタログ内の1つのモンスターには緑色の目があり、別のモンスターには青色の目がある、というように。けれども、どちらのモンスターにも目があるので、モンスターは中が空白の目を持っているという行を書くことができます。
      4:
        text: したがって、生徒は、アルゴリズムと呼ばれる一連の指示を書くことができるようになります。アルゴリズムは空白のあるモンスターのパーツをリストするもので、スタイルがどうあるべきか未定のため空白にしておきます。これは他の生徒に渡す一連の指示で、それを使って自分オリジナルのモンスターを再現します。
    unplug3:
      1:
        text: グラフ用紙のプログラミングでは、矢印と落書きのみを使って図面を再現できるようにすることで、プログラミングの仕組みを説明します。一人は小さな絵がついたグラフ用紙を与えられ、特定の矢印だけを使ってプログラムを書き、その絵を再現する方法を説明します。
      2:
        text: このアクティビティで使用できる記号は、「正方形を1つ前に移動」、「1つ後ろに移動」、「1つ上に移動」、「1つ下に移動」、「次の色に変更」、「四角形に色を塗りつぶす」だけです。プログラムを作成したら、それを読める他の人に渡して、画像を再作成してもらいましょう。
    unplug4:
      1:
        text: グラフ用紙のプログラミングでは、矢印と落書きのみを使って図面を再現できるようにすることで、プログラミングの仕組みを説明します。一人は小さな絵がついたグラフ用紙を与えられ、特定の矢印だけを使ってプログラムを書き、その絵を再現する方法を説明します。
      2:
        text: アクティビティの後半では、さまざまな方法で折り紙をおりたたんで、16の長方形を作成してもらいます。その後、色々なソリューションがどのようにして同じ結果につながるか、そして特定の状況下ではソリューションの中により優れたソリューションがある理由について話し合います。
    unplug5:
      1:
        text: グラフ用紙のプログラミングでは、矢印と落書きのみを使って図面を再現できるようにすることで、プログラミングの仕組みを説明します。一人は小さな絵がついたグラフ用紙を与えられ、特定の矢印だけを使ってプログラムを書き、その絵を再現する方法を説明します。
      2:
        text: アクティビティの後半では、さまざまな方法で折り紙をおりたたんで、16の長方形を作成してもらいます。その後、色々なソリューションがどのようにして同じ結果につながるか、そして特定の状況下ではソリューションの中により優れたソリューションがある理由について話し合います。
    unplug6:
      1:
        text: このアクティビティは「カードを使ったプログラミング」と呼ばれ、年代を問わず楽しめます。前のレッスンでif文を学習しましたが、Blocklyを使うときは、if文には真か偽かを調べるために評価する必要がある部分があります。これは条件文で、さまざまな方法で使用できます。
      2:
        text: トランプのカードをランダムに引いて実行するプログラムを紙上で作成することで、その条件文を活用していきます。引いたカードが8よりも大きい場合はポイントをゲットするといったif文にもできるでしょう。8以下なら、対戦相手がポイントを獲得します。必要に応じて、シンプルにすることも複雑にすることもできます。
    unplug7:
      1:
        text: 曲の歌詞を見ると、最初の部分で繰り返し（サビ）の部分を定め、曲の中盤や後半でその繰り返しの部分を参照しているところを見たことはありませんか？これが、関数を呼び出す方法です。
      2:
        text: このレッスンでは、曲の最初に繰り返し部分を定めます。次にその歌を歌うと、繰り返し部分は単に「繰り返し」という文字を発声する代わりに、繰り返しと定めた部分に自動的に戻って、その部分を歌うことに気づきます。これを使って、プログラミングで関数を定義して呼び出すときの仕組みを理解する一助にします。
      3:
        text: "「ゆかいな牧場」といったおなじみの曲を使って、繰り返し部分が何度も何度も呼び出されながら、その部分がどのように変化するかについて見ていきます。「ゆかいな牧場」のように特定の単語が変わる曲は、パラメータのアイデアを紹介するのにうってつけでしょう。ある単語を組み込むことで、関数に追加情報を送り込むことができます。クラスの皆がそれを理解したら、自身のお気に入りの曲を取り上げて、それを部分部分に分けて、どの部分が繰り返し（関数）でどの部分がパラメータかを考えてみましょう。"
    unplug8:
      1:
        text: 抽象化に関するレッスンでは、空白穴埋めゲームのMad Libsの概念を用います。Mad Libsでは、ストーリーに空白を挿入し、さまざまなバリエーションの単語を埋めて文章を完成させます。その考えをここでは取り入れ、自分のストーリーに入れる言葉を思いつくように生徒に促し、抽象化の概念をわかりやすく説明します。
      2:
        text: "「ゆかいな牧場」のように、関数とその作成方法が物を言います。繰り返し部分の構造を用意し、ちょっとずつ変化する部分を設けます。その少し変化する部分を抽象化して、毎回自分の言葉で埋めるようにします。変化する単語が3つもある場合もありますが、その3つのパラメータに言葉を入れればうまくいきます。"
      3:
        text: 関数を1つ用意して、さまざまな問題を処理できるようにすることもできます。すべての問題に対して個別の関数を作成してしまい、それらの関数間の違いは1か所しかないことに気付いていない、というのはよくあることです。その1つの小さな違いを扱う方法を見つけることができれば、たとえば14の異なる関数を用意する代わりに、1つの関数を繰り返し再利用できます。
    unplug9:
      1:
        text: リレープログラミングは、コンピューター サイエンスの範囲を越えた非常に楽しいレッスンです。みんなが浮足立っていて、しっかり落ち着くように発破をかけようと考えます。これは、コンピューター
          サイエンスでワクワクする素晴らしい方法です。
      2:
        text: 全員を2つのグループに分け、一列に並んでリレー形式で走ります。各グループの最初の人が部屋の反対側に走ると、グラフ用紙の絵と白紙が用意されています。その画像を作成するための最初の手順を書き留め、グループに戻って次のプレイヤーにバトンを渡し、その次のプレイヤーが部屋の反対側に走って次の手順を書きます。
      3:
        text: これは、デバッグのアイデアを理解するのに最適な方法です。自分の作品を校正し、さらに自分の前に作業した人の作品をチェックする必要があるからです。チーム全体の命運が自分の肩にかかっている状況の中で、自分のプログラムに注意することがいかに重要であるかがすぐにわかるでしょう。
    unplug10:
      1:
        text: このアクティビティでは、インターネットの仕組みをわかりやすく説明します。必要なすべての用語を簡単な言葉で説明して、生徒がメールのようなメッセージの送信をシミュレートできるようにします。
      2:
        text: 生徒は、無線インターネット、DSLまたは光ファイバー3つの送信方法の1つになりすましてメッセージを送信します。 Wi-Fiは情報が抜け落ちる可能性が最も高いため、Wi-Fiを代表する生徒は、送信しているメッセージを頭にかぶる必要があります。
      3:
        text: DSLやケーブルになりすましている生徒は、メッセージを自分の手の甲で運びます。すると、情報を落とす可能性が少し低くなります。そして、光ファイバーを代表する生徒は両手でメッセージを運びます。このアクティビティは、私たちが毎日使用しているものを理解するのに最適な方法です。
    unplug11:
      1:
        text: さて、ここで一歩下がって、過去19回のレッスンで行ったことをおさらいしてみましょう。これは、生徒たちが今までやった成果をたたえる格好の機会です。生徒は、大人がコンピューター
          サイエンスについて知っていることよりも多くのことをこれらのレッスンを通じて学びました。
      2:
        text: クラスとして、または小グループで、お気に入りのレッスンについて話し合います。学んだことをすべて振り返ったら、生徒に創造力を発揮してもらいます。生徒をグループ分けして、独自のオフラインレッスンを作成してもらいましょう。各グループに、機能やアルゴリズムなどの重要な概念を割り当て、クラフト材料をたくさん用意して使えるようにしてあげます。各グループに新しいオフラインアクティビティを発表してもらうか、別の日に生徒が作成したアクティビティを行ってみてもいいでしょう。
      3:
        text: Code.org一同、皆さんが本コースを楽しんでいただけたことを願っています。そして、あなたの夢が最高の新しいアプリを作成することであるか、プログラミングを使って病気を治すことであるか、または単に優れた問題解決者になりたいかを問わず、このコースがその夢を実現する第一歩になれば幸いです。
    starwars_intro:
      1:
        text: こんにちは、キャスリーン・ケネディです。私は「スター・ウォーズ/フォースの覚醒」のプロデューサーです。今日はスター・ウォーズのメインキャラクタ―であるBB-8と一緒に作業をやっていきます。BB-8は球型ドロイドです。BB-8の動きややるこはすべて、コンピューターのソフトウェアによって作られています。コンピューター
          サイエンスは、広告から、医療、映画などあらゆる業界に影響を与えています。事実、何百ものコンピューター エンジニアの力によって、「フォースの覚醒」のような映画も作られています。
      2:
        text: こんにちは、レイチェル・ローズです。私はILMでシニア研究開発エンジニアとして、アニメーションとキャラクターの開発チームをリードしています。「フォースの覚醒」では、アーティストがキャラクターのパーツのリグを開発して、はるか遠くの銀河でも本物そっくりの動きができるようにするのを監修しています。
      3:
        text: 次の一時間で、自分のスター・ウォーズ ゲームを作ります。プログラミングの考え方は、私たちが教えます。普通、プログラミングはテキストで書きますが、ここではブロックをドラッグ・アンド・ドロップしてプログラムを書きます。内部ではプログラムを作成するのです。ブロックで基本を覚えたら、JavaScriptとよばれる、インターネットで一番使われているプログラミング言語の一つに切りかえます。
      4:
        text: 初めに、レイと一緒にBB-8を落ちている部品をひろいながら歩くようプログラムします。表示画面は3つに分かれています。左側はスター・ウォーズのゲームスペースでコードが実行される場所です。各レベルの指示はゲームスペースの下に書かれています。
      5:
        text: 真ん中はツールボックスになっていて、それぞれのブロックはBB-8が理解できるコマンドになります。
      6:
        text: 右側にある白いスペースはワークスペースと呼ばれ、ここがプログラムを作るところです。
      7:
        text: たとえば、私が「左に動かす」（moveLeft();）ブロックをワークスペースにドラッグして [実行] を押したら、どうなるでしょう？BB-8はグリッド上を左に1ブロック分移動します。
      8:
        text: "「左に動かす」ブロックの後に、BB-8に何かしてほしい場合は、プログラムに別のブロックを加えることができます。「上に動かす」（MoveUp();）を選んで、ハイライトが現れるまでそれを「左に動かす」ブロックの下にドラッグします。そしてそこにそれを落とすと、2つのブロックがくっつきます。"
      9:
        text: もう一度 [実行] を押すと、BB-8はワークスペースで上下に重なっているコマンドに従います。もしブロックを削除したいと思ったら、くっついているところから引き離してツールボックスに戻せばいいだけです。
      10:
        text: 実行をした後に、[リセット] ボタンを押せばBB-8 をスタート地点に戻せます。それでは一緒にやってみましょう！
    starwars_typing:
      1:
        text: ブロック内ではJavaScriptが使われています。JavaScriptはプロのプログラマーによって今日までで一番使われているプログラミング言語です。ブロックはコードを学ぶのに適しています。事実、ハーバード大学やカリフォルニア大学バークレー校などのトップレベルの大学でもこのように教えています。ただし、一度基本を身につけたらエンジニアは早さを優先するためにコードを書きます。
      2:
        text: ツールボックスの中をのぞいて探したり、外にドラッグしたりせずに、何百ものコマンドを書くことができます。今は学習中のため一から書くと遅くなるかもしれませんが、ぜひチャレンジしてみてください。
      3:
        text: ワークスペースの右上の角で、どのパズルも、ブロックからコードをテキストに変換できるボタンをクリックしてテキストを見ることができます。
      4:
        text: 次のレッスンでは、タイピングモードに切り替えてもらいます。ここではまだツールボックスからブロックをドラッグしたり、コマンドの名前をタイプしたりできます。タイプし始めると、タイプしている下に潜在的なコマンド名が表示されます。コマンド名を全部タイプする代わりに、これらのうちの一つを選択することで、速く進めることができます。私は自分が仕事をする際、コードを書くときはこのオートコンプリートの機能をいつも使っています。
      5:
        text: コードを入力する際は、正確にタイプすることが求められます。コマンド名のセミコロンやカッコを含む、スペルや小文字/大文字の区別は正確に行う必要があります。ささいな間違いでも、BB-8はコードを理解できなくなり、動くことができません。
      6:
        text: ラインの上で間違いを犯すと、修正しやすいようにエディターがそれをハイライトしてくれます。
      7:
        text: もし行き詰ったりしたら、[やり直し] ボタンを押すことでいつでもやり直すことができます。また、右上の角をクリックすればいつでもブロックモードに戻れます。ではタイプしてみましょう！もし間違ってもイライラしないでくださいね。成功するのに何度も試すのは皆同じです。
    starwars_events:
      1:
        text: こんにちは、チャリ―タ・カーターです。ウォルトディズニー・イメージニアリングでシニア・クリエイティブ・プロデューサーをしています。私はゲストのみなさんが体験するアトラクションを実際に生み出すチームで指揮を取っています。いつも心の中ではゲストのみなさんにより良い体験をしてもらうにはどう改善していくべきかを考えています。
      2:
        text: やったね、おめでとうございます！BB-8をプログラムできました。次はもっと難しいチャレンジをしてみましょう。もうプログラミングの基礎について勉強したので、時代を遡ってR2-D2-とC3POを使って自分のゲームを作ってみましょう。
      3:
        text: ゲームを作るのに、ゲームプログラマーが毎日使うものを覚えましょう。それは、「イベント」と呼ばれるものです。イベントはあなたのプログラムに何かあるときまで指示を待つように伝えて、実際にそれが発生したらアクションを実行します。
      4:
        text: イベントの例としては、マウスや矢印ボタンをクリックしたり、スクリーンを軽くタッチしたりすることを待つことが挙げられます。
      5:
        text: それではここで、R2-D2を上に動かして、反ぎゃく者にメッセージを伝えます。次にR2-D2を下に動かして、他の反ぎゃく者に向かわせます。プレイヤーがup(上)/down(下)
          矢印を使うか、up(上)/down(下) ボタンを使ったときがイベントで、イベントを使ってR2-D2を動かします。
      6:
        text: 私たちは whenUp() のイベントブロックを使い、goUp() ブロックをくっつけます。プレイヤーが上矢印キーを押すと、whenUp()
          ブロックにくっついているコードが実行されます。そして同じ操作をしてR2-D2を下に動かします。
      7:
        text: これをやるには、whenUp() と呼ばれるコマンドを使います。ツールボックスからそのコマンドをドラッグすると、最初と最後にセミコロン
          ( ; ) ではなく、中かっこ (｛｝) が使われているのがわかります。これにより、中かっこの中に他のコマンドを配置するスペースができます。かっこの中に置くコマンドはすべて、プレイヤーが上矢印を押すと、実行されるようになっています。
      8:
        text: R2-D2 を上に動かしたいので、コマンドの中に「上に動かす」（goUp();）ブロックをいれてみましょう。そしてR2-D2を下に動かすには、同じ操作を行います。
      9:
        text: そして今、ドロイドを操作するのに、事前にすべてのコードを書かなくても、イベントボタンを押すことでR2-D2にスクリーンの周りを動かせることができます。一歩一歩、あなたのゲームはよりインタラクティブになってきましたね。
    starwars_congrats:
      1:
        text: アリスです。Code.orgで製品とエンジニアリングチームのリーダーを務めています。今あなたがプレイしているこのチュートリアルを作りました。
      2:
        text: 最後のレベルに達しました。おめでとうございます！スター・ウォーズのゲームを自分で作るのに必要なことを全部勉強しました。もうこれ以上指示はなく、解くパズルもありません。どう動かすかを決めて自分のゲームを作れます。最後にもうひとつ、新しい音と、新しいコマンドをアンロックしたので、できることが増えました。
      3:
        text: "[生徒が話している] これで、ブタをつかまえてポイントを取るゲームを作ったんだね。パファー・ピッグをつかまえるたびにストームトルーパーが現れるんだね。実際、スクリーンいっぱいにパファー・ピッグがいるので、10,000回タッチすると、君の勝ちだよ。"
      4:
        text: "[生徒が話している]どれをやっつけてもポイントがもらえて、負けがないゲームを作ったよ。僕のプログラムでは、キーを逆にしたんだ。上にクリックすると、君のキャラクターが下に動き、右にクリックすると、君のキャラクターは左に動くよ。すごく難しいんだよ！自分でゲームを作ると自分に不利なことも有利にできるんだ。あれできたかな？やったぁ！"
      5:
        text: 自分のゲームが作れたら、共有を選択すると友だちに見せられるリンクをコピーできたり、自分の携帯で遊んだりすることもできるよ。楽しんでね！
    starwars_blocks_intro:
      1:
        text: こんにちは、キャスリーン・ケネディです。私は「スター・ウォーズ/フォースの覚醒」のプロデューサーです。今日はスター・ウォーズのメインキャラクタ―であるBB-8と一緒に作業をやっていきます。BB-8は球型ドロイドです。BB-8の動きややるこはすべて、コンピューターのソフトウェアによって作られています。コンピューター
          サイエンスは、広告から、医療、映画などあらゆる業界に影響を与えています。事実、何百ものコンピューター エンジニアの力によって、「フォースの覚醒」のような映画も作られています。
      2:
        text: こんにちは、レイチェル・ローズです。私はILMでシニア研究開発エンジニアとして、アニメーションとキャラクターの開発チームをリードしています。「フォースの覚醒」では、アーティストがキャラクターのパーツのリグを開発して、はるか遠くの銀河でも本物そっくりの動きができるようにするのを監修しています。
      3:
        text: 次の一時間で、自分のスター・ウォーズ ゲームを作ります。プログラミングの考え方は、私たちが教えます。普通、プログラミングはテキストで書きますが、ここではブロックをドラッグ・アンド・ドロップしてプログラムを書きます。まずはレイと協力して、BB-8をプログラムして歩かせて、廃品パーツをすべて集めていきます。
      4:
        text: 画面は、3 つの部分に分割されます。左はスター・ウォーズのゲームスペースでプログラムが実行されます。各レベルの指示は、ゲームスペースの下に書かれています。
      5:
        text: 真ん中はツールボックスになっていて、それぞれのブロックはBB-8が理解できるコマンドになります。
      6:
        text: 右側にある白いスペースはワークスペースと呼ばれ、ここでプログラムを作ります。
      7:
        text: たとえば、私が「左に動かす」（moveLeft();）ブロックをワークスペースにドラッグすると、どうなるでしょう？BB-8はグリッド上を左に1ブロック分移動します。
      8:
        text: "「左に動かす」ブロックの後に、BB-8に何かしてほしい場合は、プログラムに別のブロックを加えることができます。「上に動かす」（MoveUp();）を選んで、ハイライトが現れるまでそれを「左に動かす」ブロックの下にドラッグします。そしてそこにそれを落とすと、2つのブロックがくっつきます。[実行]
          をもう一度押すと、BB-8がワークスペースの上から下につながったコマンドを実行します。"
      9:
        text: ブロックを削除するには、重なっている場所からツールボックスまでドラッグします。
      10:
        text: 実行をした後に、[リセット] ボタンを押せばBB-8 をスタート地点に戻せます。それでは一緒にやってみましょう！
    starwars_blocks_events:
      1:
        text: こんにちは、チャリ―タ・カーターです。ウォルトディズニー・イメージニアリングでシニア・クリエイティブ・プロデューサーをしています。私はゲストのみなさんが体験するアトラクションを実際に生み出すチームで指揮を取っています。いつも心の中ではゲストのみなさんにより良い体験をしてもらうにはどう改善していくべきかを考えています。
      2:
        text: やったね、おめでとうございます！BB-8をプログラムできました。次はもっと難しいチャレンジをしてみましょう。もうプログラミングの基礎について勉強したので、時代を遡ってR2-D2-とC3POを使って自分のゲームを作ってみましょう。
      3:
        text: ゲームを作るのに、ゲームプログラマーが毎日使うものを覚えましょう。それは、「イベント」と呼ばれるものです。イベントはあなたのプログラムに何かあるときまで指示を待つように伝えて、実際にそれが発生したらアクションを実行します。
      4:
        text: イベントの例としては、マウスや矢印ボタンをクリックしたり、スクリーンを軽くタッチしたりすることを待つことが挙げられます。
      5:
        text: それではここで、R2-D2を上に動かして、反ぎゃく者にメッセージを伝えます。次にR2-D2を下に動かして、他の反ぎゃく者に向かわせます。プレイヤーがup(上)/down(下)
          矢印を使うか、up(上)/down(下) ボタンを使ったときがイベントで、イベントを使ってR2-D2を動かします。
      6:
        text: whenUp() のイベントブロックを使い、goUp() ブロックをくっつけます。プレイヤーが上矢印キーを押すと、whenUp() ブロックにくっついているコードが実行されます。そして同じ操作をしてR2-D2を下に動かします。これで、ドロイドを操作するのに、事前にすべてのコードを書かなくても、イベントボタンを押すことでR2-D2をスクリーン上で動かすことができます。
      7:
        text: 一歩一歩、あなたのゲームはよりインタラクティブになってきましたね。
    starwars_blocks_congrats:
      1:
        text: アリスです。Code.orgで製品とエンジニアリングチームのリーダーを務めています。今あなたがプレイしているこのチュートリアルを作りました。
      2:
        text: 最後のレベルに達しました。おめでとうございます！スター・ウォーズのゲームを自分で作るのに必要なことを全部勉強しました。もうこれ以上指示はなく、解くパズルもありません。どう動かすかを決めて自分のゲームを作れます。最後にもうひとつ、新しい音と、新しいコマンドをアンロックしたので、できることが増えました。
      3:
        text: "[生徒が話している] これで、ブタをつかまえてポイントを取るゲームを作ったんだね。パファー・ピッグをつかまえるたびにストームトルーパーが現れるんだね。実際、スクリーンいっぱいにパファー・ピッグがいるので、10,000回タッチすると、君の勝ちだよ。"
      4:
        text: "[生徒が話している]どれをやっつけてもポイントがもらえて、負けがないゲームを作ったよ。僕のプログラムでは、キーを逆にしたんだ。上にクリックすると、君のキャラクターが下に動き、右にクリックすると、君のキャラクターは左に動くよ。すごく難しいんだよ！自分でゲームを作ると自分に不利なことも有利にできるんだ。あれできたかな？やったぁ！"
      5:
        text: 自分のゲームが作れたら、共有を選択すると友だちに見せられるリンクをコピーできたり、自分の携帯で遊んだりすることもできるよ。楽しんでね！
    mc_intro:
      1:
        text: イエンスです。ストックホルムのMojangでMinecraftの開発主任を務めています。11才ごろにゲームを作りたくてプログラミングを始めました。父の友人が「ならプログラミングを学べ」と言ったんです。何かを作ったり、構造を調べたりするのが好きで、Minecraftもそこが気に入っています。
      2:
        text: では、Minecraftの世界でキャラクターを動かして、プログラミングの基本を学びましょう。
      3:
        text: 既存のプログラミングとは違い、我々は「ブロックリー」という、ブロックのドラッグ＆ドロップでプログラムするシステムを使っています。そうすることでJavaScriptのコードができるんです。
      4:
        text: これから学ぶのはプログラミングの基本要素とコンピューターサイエンスの基礎概念です。Minecraftにも同じ概念が用いられています。
      5:
        text: まずキャラクターを選びます。アレックスにしましょう。最初に彼女を動かすプログラムのコードを組みます。
      6:
        text: 画面は3分割されています。プログラムは左で実行され、下には個々のレベルの指示が書かれています。
      7:
        text: 中央のツールボックスのブロックは、キャラクターの行動を制御するコマンドです。
      8:
        text: 右のワークスペースでプログラムを組みます。
      9:
        text: ここに「前進();」ブロックをドラッグして、「実行」をクリックすると、キャラクターが1スペース前進します。
      10:
        text: 続けて何かをさせるには、別のブロックを追加します。たとえば「右回転();」ブロックを選び、「前進();」ブロックの下にドラッグすると、オレンジの線が現れます。ドロップすると、2つのブロックが結合します。もう一度「実行」を押すと、ワークスペースのコマンドが上から実行されます。
      11:
        text: ブロックの削除はツールボックスに戻すだけです。
      12:
        text: 最初に戻るには、右上の「やり直し」ボタンを使います。回転ブロックの上に小さな三角が見えます。これが現れるときは別のオプションを選択できます。さあ、プログラミングを始めましょう。
    mc_repeat:
      1:
        text: Mojangブランドディレクターのリディアです。
      2:
        text: Minecraftでは洞窟を探検し、何かを発見するのが好きです。私はプログラマーではありませんが、こうしてプログラムを学べるのはうれしいことです。
      3:
        text: 前のレベルではたくさんの「前進();」ブロックを使いました。そんな場合、コンピューターがコマンドを連続で実行してくれれば楽ですよね。コンピューターはコマンドを繰り返すのが得意なんです。
      4:
        text: Minecraftでもゲーム世界の生成にリピートループを使います。他にも、たとえばキャラの足の動きにもリピートループを使っています。リピートループはプログラミングの強みの1つです。
      5:
        text: もうすぐ夜が訪れます。身を守るための家を作りましょう。リピートブロックで簡単に家を作れます。
      6:
        text: 家の壁を作るには、「前進();」と材木の配置を4回実行するか、リピートブロックで同じ動作を繰り返させればいいのです。ここでは、リピートブロックで実行回数を指示しましょう。夜が更ける前に家を完成させましょうね！
    mc_if_statements:
      1:
        text: 次はif文について学びましょう。if文はプログラムの重要な要素です。
      2:
        text: if文は「こういう場合はこうする」という判断に使われます。スマホの場合、パスワードが正しく入力された場合はロックを解除、そうでない場合はエラーになります。
      3:
        text: if文を使えば、ゲーム世界で出会うものに対してキャラクターを反応させられます。たとえば、目の前に石や木があれば、それを避けることができます。
      4:
        text: ここでは溶岩を避けましょう。溶岩が見えるときは難しくはありません。でも、石の下の溶岩はどうでしょう？
      5:
        text: 石を掘った後、前進する前に、そこに溶岩がないか調べるべきです。溶岩があったら、前方に石を置いてから、キャラクターを前に進ませれば安全です。if文で足元に注意しながら、採掘を楽しみましょう。
    mc_congrats_share:
      1:
        text: ブロック構築の基礎はおわかりいただけましたか？
      2:
        text: では、自分の作品を作りましょう。この先は指示や謎解きはありません。好きなものを作ってください。
      3:
        text: "[生徒の声] もうすぐ完成。松明でLを描きました。樺の材木でAができたよ。できたわ。羊毛で家を作ったの！"
      4:
        text: 作品は友達に見せることができます。どうぞお楽しみください！
    mc_congrats_no_share:
      1:
        text: ブロック構築の基礎はおわかりいただけましたか？
      2:
        text: では、自分の作品を作りましょう。この先は指示や謎解きはありません。好きなものを作ってください。
      3:
        text: "[生徒の声] もうすぐ完成。松明でLを描きました。樺の材木でAができたよ。できたわ。羊毛で家を作ったの！"
      4:
        text: 何を作るかはあなた次第です。どうぞお楽しみください！
    gumball_intro:
      1:
        text: 自分自身のゲームを作るのは、それほど難しいことではありません。必要なのはプログラミングのイロハのみで、できたゲームをプレイすることができます。
      2:
        text: 好きなビデオゲームはありますか？これからプレイラボでそのようなゲームを作るための第一歩を踏み出します。良いゲームにはストーリーがあり、すべてのストーリーにはキャラクターがいます。キャラクターは、話したり、動いたり、相互にやり取りしたりします。ゲームのルールに基づいてポイントを獲得することもできます。今日は、楽しいキャラクターを使って、そうするにはどうしたらいいかを1つずつ学びます。携帯電話で共有してプレイできるゲームを一から作っていきましょう。
      3:
        text: 今日は、楽しいキャラクターを使って、そうするにはどうしたらいいかを1つずつ学びます。携帯電話で共有してプレイできるゲームを一から作っていきましょう。
      4:
        text: 画面が3分割されています。左は、あなたが書いたプログラムが実行されるゲームの画面です。その下に、各レベルの説明が書いてあります。
      5:
        text: 真ん中はツールボックスになっていて、それぞれのブロックはプログラムのパーツです。
      6:
        text: 右のワークスペースでプログラムを組みます。
      7:
        text: 'まず最初に、オレンジ色の「実行したとき」(when run) ブロックに他のブロックをつなげる必要があります。黄色い線が見えるまでブロックをドラッグすることによって、たくさんの種類のブロックを一緒につなげることができます。

'
      8:
        text: この最初のパズルでは、「言う」(say) ブロックを「実行したとき」ブロックにリンクし、メッセージを入力することで、キャラクターに何かを言わせます。ブロックを配置したら、[実行]
          ボタンを押して、プログラムした内容を見てみましょう。
      9:
        text: では始めましょう。最後に、あらゆる種類のプレイヤーを使用して独自のゲームを作成し、やり取りしたり、ポイントを獲得したり、物を投げたり、お互いを消したりできるようになります。それはすべてあなた次第です！
    gumball_events:
      1:
        text: |-
          これから、どのゲームプログラマーも毎日使っていることを学んでいきます。
          それら「イベント」と呼ばれるもので、イベントは何かが起こったときのためにリッスンするようにプログラムに伝達します。そして何かが起こったとき、アクションが実行されます。
      2:
        text: イベントの例としては、マウスのクリック、上下の矢印キー、または画面のタップを待つことが挙げられます。
      3:
        text: ここでは、プレイヤーがクリックしたときに俳優に何かを言わせるようにします。「クリックしたとき」ブロックを使い、それに「言う」ブロックをくっつけます。プレイヤーがクリックすると、このブロックにくっつけられているすべてのブロックが実行されます。
      4:
        text: また「～したとき」(when arrow) というブロックがあります。これに「動く」ブロックをつなげて方向を指定すれば、矢印キーでキャラは上下左右自由に動けるようになります。このようにして一歩一歩、ゲームはさらにいろんなことができるようになります。
    gumball_repeat:
      1:
        text: 何かを永遠に繰り返さなくてはいけない状況を想像できますか？コンピューターは繰り返しの命令を実行することが得意なので、それを人間がやる必要はなさそうです。
      2:
        text: これは、「永遠に繰り返す」(repeat forever) ブロックです。このブロック内のすべてがゲーム内で永遠に発生します。プレイヤーが何もせずにキャラに何かを繰り返させたい場合は、「永遠に繰り返す」ブロックの中にそれらのブロックを置きます。
      3:
        text: この次のパズルの目標は、キャラクターが継続的に作業できるようにすることです。「繰り返し」コマンドがどのように機能するかを学習することで、後で独自のゲームを構築するときに時間を大幅に節約できます。
    iceage_intro:
      1:
        text: 自分自身のゲームを作るのは、それほど難しいことではありません。必要なのはプログラミングのイロハのみで、できたゲームをプレイすることができます。
      2:
        text: 好きなビデオゲームはありますか？これからプレイラボでそのようなゲームを作るための第一歩を踏み出します。良いゲームにはストーリーがあり、すべてのストーリーにはキャラクターがいます。キャラクターは、話したり、動いたり、相互にやり取りしたりします。ゲームのルールに基づいてポイントを獲得することもできます。今日は、楽しいキャラクターを使って、そうするにはどうしたらいいかを1つずつ学びます。携帯電話で共有してプレイできるゲームを一から作っていきましょう。
      3:
        text: 今日は、楽しいキャラクターを使って、そうするにはどうしたらいいかを1つずつ学びます。携帯電話で共有してプレイできるゲームを一から作っていきましょう。
      4:
        text: 画面が3分割されています。左は、あなたが書いたプログラムが実行されるゲームの画面です。その下に、各レベルの説明が書いてあります。
      5:
        text: 真ん中はツールボックスになっていて、それぞれのブロックはプログラムのパーツです。
      6:
        text: 右のワークスペースでプログラムを組みます。
      7:
        text: 'まず最初に、オレンジ色の「実行したとき」(when run) ブロックに他のブロックをつなげる必要があります。黄色い線が見えるまでブロックをドラッグすることによって、たくさんの種類のブロックを一緒につなげることができます。

'
      8:
        text: この最初のパズルでは、「言う」(say) ブロックを「実行したとき」ブロックにリンクし、メッセージを入力することで、キャラクターに何かを言わせます。ブロックを配置したら、[実行]
          ボタンを押して、プログラムした内容を見てみましょう。
      9:
        text: では始めましょう。最後に、あらゆる種類のプレイヤーを使用して独自のゲームを作成し、やり取りしたり、ポイントを獲得したり、物を投げたり、お互いを消したりできるようになります。それはすべてあなた次第です！
    iceage_events:
      1:
        text: |-
          これから、どのゲームプログラマーも毎日使っていることを学んでいきます。
          それら「イベント」と呼ばれるもので、イベントは何かが起こったときのためにリッスンするようにプログラムに伝達します。そして何かが起こったとき、アクションが実行されます。
      2:
        text: イベントの例としては、マウスのクリック、上下の矢印キー、または画面のタップを待つことが挙げられます。
      3:
        text: ここでは、プレイヤーがクリックしたときに俳優に何かを言わせるようにします。「クリックしたとき」ブロックを使い、それに「言う」ブロックをくっつけます。プレイヤーがクリックすると、このブロックにくっつけられているすべてのブロックが実行されます。
      4:
        text: また「～したとき」(when arrow) というブロックがあります。これに「動く」ブロックをつなげて方向を指定すれば、矢印キーでキャラは上下左右自由に動けるようになります。このようにして一歩一歩、ゲームはさらにいろんなことができるようになります。
    iceage_repeat:
      1:
        text: 何かを永遠に繰り返さなくてはいけない状況を想像できますか？コンピューターは繰り返しの命令を実行することが得意なので、それを人間がやる必要はなさそうです。
      2:
        text: これは、「永遠に繰り返す」(repeat forever) ブロックです。このブロック内のすべてがゲーム内で永遠に発生します。プレイヤーが何もせずにキャラに何かを繰り返させたい場合は、「永遠に繰り返す」ブロックの中にそれらのブロックを置きます。
      3:
        text: この次のパズルの目標は、キャラクターが継続的に作業できるようにすることです。「繰り返し」コマンドがどのように機能するかを学習することで、後で独自のゲームを構築するときに時間を大幅に節約できます。
    mc_2016_intro:
      1:
        text: こんにちは、Minecraft のリード クリエイティブ デザイナーの Jens です。これから 1 時間、あなたの Minecraft
          を作ってもらいます。これは Minecraft のようですが、世界は停止しています。羊は動いていませんし、ニワトリはタマゴを生みません。ゾンビは動かずにじっとしています。あなたがコードを追加して
          Minecraft の世界を動かしましょう。
      2:
        text: 'My name is Melissa and I am a user researcher at Minecraft. What I''m
          really interested in is how people think and interact with technology and
          so this job is the perfect job for me to put together the computer engineering
          with the psychology: 人々の考え方と行動を学びます。'
      3:
        text: ゲームの画面は大きく 3 つにわかれています。1) 左には Minecraft のゲームがあります。今は世界が停止しています。これをコードで直しましょう。
      4:
        text: 2) 真ん中はツールボックスです。各ブロックはニワトリ、羊、他の Minecraft の生き物たちが理解できるコマンドです。
      5:
        text: 3) 右側は作業スペースです。ここでプログラムを作ります。
      6:
        text: 何をすべきかを忘れたら、上にあるレベルの説明を見ましょう。
      7:
        text: まず始めに、ニワトリのプログラムを作ります。「前進」コマンドを作業スペースにドラッグしましょう。「実行」を押すと、ニワトリが一歩前に進みます。さらに進ませるために、「前進」ブロックの下に「前進」ブロックをもう
          1 つドラッグします。するとブロックが強調表示されます。その状態でドロップすると 2 つのブロックがくっつきます。そして「実行」を押すと、ニワトリが
          2 歩進みます。
      8:
        text: ブロックを削除するには、重なっている場所からツールボックスまでドラッグします。
      9:
        text: "「実行」を押した後でも、「リセット」ボタンを押せば、いつでもゲームを元に戻してやり直せます。さあ、今度はあなたの番です。自分だけの Minecraft
          を作りましょう。お楽しみください!"
    mc_2016_loops:
      1:
        text: こんにちは、Lisa です。Minecraft のソフトウェア デベロッパーです。ゲーム内の動物や敵を担当しました。担当した動物の 1
          つはヤマネコです。ヤマネコに魚をあげて手なずけて、自分のペットにする部分を担当しました。
      2:
        text: 人間は、何度も何度も同じことをくり返していると、飽きてしまいます。でも、コンピューターのいいところは、同じことを何百万回あるいは何十億回連続でくり返しても、飽きないところです。このくり返しはループと呼ばれ、Minecraft
          のあらゆる生き物に使われています。
      3:
        text: 先ほどは、ニワトリを画面の端まで動かしたのに、ニワトリは止まってしまいました。Minecraft では、ニワトリはずっと動き続けています。ツールボックスにある「恒久的に実行」のループを使って、あなたのニワトリもずっと動かしてみましょう。ループを使えば時間を節約できるので、自分の
          Minecraft を作る時に、他のことができるようになります。
    mc_2016_events:
      1:
        text: このレベルではスティーブかアレックスを選択します。キーボードの矢印キーを押して上、下、左、右に動かします。これでレベル内を自由に動けます。生き物を使うには近くまで歩いていって、その方を向いてスペースキーを押します。
      2:
        text: タッチ画面なら上、下、左、右にスワイプして動かしましょう。自分の前にあるアイテムを使うには、画面をタップしましょう。
      3:
        text: 使うと何が起きるのでしょうか?Minecraft では、羊を刈るとウールを落とし、牛は叩くと逃げていき、クリーパーは近づくと爆発します。このような反応が起こるのは、イベントが存在するからです。イベントはプログラムに命令を聞かせたり、何かが起こるまで待たせます。そして何かが起こると、アクションを行います。
      4:
        text: ここまでは、1 つのイベントだけを使いました。「出現した時」に入れたコードが実行されるのは、生き物が出現した時か、ゲーム開始時です。この先のレベルでは、新たなイベント
          スロットが登場します。「触れられた時」は生き物が触られると実行され、「使用された時」は生き物を使用した時に実行されます。太陽が出てきた時にゾンビを消したいなら、「日中になった時」のスロットに入れましょう。
    mc_2016_spawn:
      1:
        text: マインクラフトでは、スポーンとは生き物が出現する事を意味します。このレベルでは、太陽が沈んだらゾンビをスポーンさせましょう。「夜になった時」のブロックを使うと良いですよ。
      2:
        text: 夜になったらゾンビを出現(スポーン)させたいので、「ゾンビを出現させる」のブロックを「夜になった時」のブロックに追加します。スポーンするとすぐに、ゾンビたちは「出現した時」のイベント
          スロットに入れたコードを実行します。ゾンビで遊びましょう!
    mc_2016_congrats:
      1:
        text: おめでとうございます!コンピューター サイエンスのコマンドを学んで、Minecraft の世界を動かせるようになりました。これからは、あなたが開発者です。すべてのコマンドと生き物をアンロックしました。何が起きるかはあなた次第です。
      2:
        text: ゲームが完成したら、シェアを選択してリンクを友達とシェアしたり、自分のゲームを自分のスマホで遊びましょう。お楽しみください!あなたが作った
          Minecraft をプレイするのを楽しみにしています。
    applab_intro_welcome:
      1:
        text: メイラニです。私はCode.orgのインターンで、学校ではコンピューター サイエンスを学んでいます。コンピューター サイエンスは本当にクリエイティブだから大好きです。問題を解決する人になれます。思い通りにすべてを機能させることができて、デザイナーにだってなれます。アーティストになって、色々選んで創作しています。
      2:
        text: アプリラボを使うと、独自のアプリを簡単に作ることができます。プログラミングに慣れていない場合でも、ある程度の経験がある場合でも、アプリラボは、新しいアプリを作って友だちと共有するための優れたツールです。
      3:
        text: これはアプリラボです。左側はアプリで、右側には実行するコードがあります。ツールボックスからブロックをドラッグしてプログラムを作り上げます。始めは「setProperty」と呼ばれるブロックが1つありだけです。
      4:
        text: "「プロパティを設定」（set property）ブロックは、ボタン、ラベル、画面自体など、画面上の要素の外観を変更します。まず、変更する要素を決定する必要があります。アプリの要素にカーソルを合わせると、名前またはIDが表示されます。次に、最初のドロップダウンからそのIDを選択します。"
      5:
        text: 要素には、テキストの色、背景色、フォントサイズなど、変更可能な多くのプロパティがあります。 2番目のドロップダウンで、完全なリストを表示し、変更するプロパティを選択できます。
      6:
        text: 最後のドロップダウンは、使用したい値を使用する値を書き込む場所です。ブロックからヒントをもらえますが、いつでも自分でさまざまな色や数字を入力できます。
      7:
        text: 完了すると、ブロックは「ボタン1の背景色を緑に設定します」と文のようになります。[実行] を押すと、プログラミングで行う変更を確認できます。リセッすると、さらに多くのブロックをドラッグして、テキストのように、アプリの他の点を変更できます。
      8:
        text: このチュートリアルでは、ブロックモードで作業しますが、アプリラボはテキストでの作業もサポートしています。
      9:
        text: どちらの方法でも、ウェブの言語であるJavaScriptでプログラミングします。各レベルには、目標、指示、および作成しようとしているもののイメージがあります。
      10:
        text: 行き詰まっている場合は、この画像をクリックすると、レベルを完了する方法がバッチリ表示されます。けれども、最初は自分の力でできるかどうか、試してみてください。
      11:
        text: このレベルの目標を完了したら、[完了] をクリックして先に進みます。これでこのレベルは終わりです！オレンジ色の [続行] ボタンを押して次のレベルに進み、アプリラボで冒険を始めましょう！
    applab_intro_events:
      1:
        text: アプリは本当にかっこいいです。つまり、自分でビジネスを始めるようなものです。つまり、すべてをゼロから設計し、すべてを管理し、プログラミングで作成したこの作品の所有者になります。
      2:
        text: アプリの外観を変更できるようになったので、イベントに応答してインタラクティブにしましょう！イベントとは、ボタンのクリック、メニューのスクロール、画像へのホバーなどのユーザーアクションです。インタラクティブなアプリには、このボタンをクリックしたときにサウンドを再生するなど、イベントに応答する方法を決めることが必要です。
          アプリラボでこれを行うには、「onEvent」という新しいブロックを使用する必要があります。
      3:
        text: このプログラムは、画面を青に設定しています。このボタンをクリックすると、画面が緑色になるようにしたいと思います。まず、onEventブロックをドラッグする必要があります。ホバーすることで、ボタンのIDが「bigButton」であることが分るので、最初のドロップダウンでそれを選択します。
      4:
        text: 次に、イベントのタイプを選択します。選択できるオプションはたくさんありますが、今は通常のクリックのままにしておきます。
      5:
        text: 最後に、画面の背景色を変更するプログラムをonEvent内に追加します。このブロックは「ボタンがクリックされたときに、このプログラムをすべて実行します」と文のように読むことができます。
      6:
        text: テストしてみましょう。 onEventの外側のブロックはまだすぐに実行されるため、画面は青で始まります。
      7:
        text: 大きなボタンをクリックすると、onEvent内のコードが実行され、画面が緑色に変わります。
      8:
        text: 画面上のテキストなど、イベント後にその他の変更を行いたい場合は、onEventにプログラムを追加してください。
      9:
        text: プログラムがより多くのイベントに応答するようにするには、onEventブロックを追加します。それらをお互いの中に入れないようにしてください。それでは、自分で試してみましょう。どうか楽しんで！
    applab_intro_sounds:
      1:
        text: 次に、アプリに画像とサウンドを追加する方法を学びます。まず、サウンドのオプションを確認してみましょう。
      2:
        text: ツールボックスに「playSound」という新しいブロックがあります。それをワークスペースにドラッグします。ドロップダウンをクリックして
          [選択] をクリックすると、再生したいサウンドを選択できます。
      3:
        text: ここでは、コンピューターからサウンドファイルをアップロードするか、サウンドライブラリからサウンドを検索できます。サウンドライブラリには、楽器、バックグラウンドミュージック、動物など、さまざまなカテゴリがたくさんあります。
      4:
        text: 希望のサウンドになったら、[選択] をクリックします。このブロックが実行されると、選択したサウンドが再生されます。
      5:
        text: 要素に画像を追加するには、「プロパティを設定」(setProperty」) ブロックを使用します。 2番目のドロップダウンで画像のプロパティを選択します。
      6:
        text: 次に、3番目のドロップダウンから [選択] をクリックします。
      7:
        text: ここから、コンピューターから画像をアップロードしたり、アイコンライブラリ内のアイコンの膨大なライブラリを確認したりできます。
      8:
        text: プログラミングモードに戻ると、「プロパティを設定」ブロックを使用してアイコンの色を変更できます。アイコンに使用する色を選択したら、[実行]
          をクリックしてアイコンの外観を確認します。
      9:
        text: 以上です！これで、画像とサウンドを追加して、アプリをさらに楽しくダイナミックにすることができます。
    applab_intro_designmode:
      1:
        text: 独自のアプリを構築するには、画面と要素のデザインを一から始める必要があります。 アプリラボのデザインモードでこれを簡単に行えます。
      2:
        text: アプリの上部にあるスイッチを押して、デザインモードに切り替えます。
      3:
        text: 新しい要素を画面にドラッグして追加できます。要素の右下隅をドラッグして、別の場所に移動したり、サイズを変更したりできます。
      4:
        text: 要素のプロパティを変更するには、右側のコントロールを使用します。たとえば、このボタンのテキスト、色、フォントサイズを変更するのは非常に簡単です。
      5:
        text: 画面に新しい要素を追加すると、「button1」のような汎用IDがつけられます。このボタンのIDを「rightButton」のようなより意味のあるものに変更することをお勧めします。そうすると、プログラムでどの要素がそれだったかがわかります。
      6:
        text: 誤ってアプリに要素を追加してしまった場合は、それをドラッグするか、削除キーを押してください。
      7:
        text: 画面要素をドラッグすることで、まったく新しい画面をアプリに追加できます
      8:
        text: 上部のドロップダウンから、作成した画面間をすばやく切り替えることができます。
      9:
        text: アプリ内では、これらすべての画面を切り替える方法が必要になるため、「スクリーンを設定」(setScreen) ブロックがツールボックスに追加されています。ボタンをクリックするだけで画面を切り替えるには、「onEvent」ブロック内に「スクリーンを設定」を置いてください。
      10:
        text: 次の数レベルでは、1つのプロジェクトに取り組みます。最初にボタンを追加し、次に新しい画面を追加し、最後にボタンを押すと新しい画面に切り替わるようにプログラムを書きます。
    applab_intro_share:
      1:
        text: ボタン、サウンド、画像、テキスト、新しい画面の追加など、アプリラボのイロハをいくつかを学んだので、あらゆる種類のアプリを作成できます。
      2:
        text: 次のレベルでは、作成したアプリを見つけます。少し創造性を発揮すると、これを友だちのための適性診断クイズ、家族と共有できるグリーティングカード、または自分で道を切り拓くアドベンチャーゲームに変えることができます。これらのアプリはすべて、すでに学んだスキルを組み合わせたものにすぎません。さらに多くのことを思い付くことができるでしょう。
      3:
        text: アプリを作り終わったら、簡単にスマートフォンに送信して、アプリの印象を確認できます。 [共有] をクリックして、電話番号を入力してください。
      4:
        text: テキストメッセージを受け取り、すぐにアプリを開くことができます。
      5:
        text: ソーシャルメディアを介してアプリへのリンクを共有したり、code.orgパブリックギャラリーに投稿して、他の人がプレイして共有できるようにすることもできます。
      6:
        text: これで、アプリラボでできることのほんの一部を垣間見ることができました。フルアプリラボは、より高度なユーザーインタラクション、新しい画面要素、さらには組み込みデータベースも備えているため、フル機能のアプリをすばやく構築できます。「code.org/applab」にアクセスすると、継続して取り組みたい場合に使えるツール一式とたくさんのアイデアが見つかります。
      7:
        text: ここまでよくできました。最初のアプリを作って共有し、アプリラボでこのままアプリを作り続けましょう！
    mc_2017_agent_intro:
      1:
        text: 'ステイシー: スタンピー、リジー、プレストン - 一緒に来てくれてありがとう。お見せしたいのは、このメサ台地の真上にあります。きっと気に入ると思いますよ！'
      2:
        text: 'ちょっと待って - 道に穴があいてるよ！ (叫び声) '
      3:
        text: 'みんな大丈夫？ スタンピー: なるほど。問題がわかったよ。ほら！道に穴が開いてたんだ。ステイシー: スタンピー、それ本当なの？リジー:
          たぶんそれを直すのにブロックを集める必要があるわね。プレストン: 競争しようよ。最初に戻った人が勝ち。ステイシー: わかったわ。よーい、ドン！よし、私はこのテラコッタをいくつか集めるわ。待って、みんな。採掘できない！プレストン:
          こっちもだ。リジー: 私もできないわ。ステイシー: うーん、おかしいわね。スタンピー、あなたは採掘できる？ スタンピー: できないよ！ステイシー:
          わかったわ。みんな、落ち着いて。 スタンピー: ゲームは壊れてないかい？ステイシー: もしそうなら、どうやって直したらいいのだろう？リジー: わからないわ。スタンピー:
          マインクラフトのプログラムの書き方を知っている人はいる？'
      4:
        text: "(パッ) プレストン: あれは何だ？ スタンピー: 今まで見たことないね。リジー: 本当にかわいいわね！ステイシー: それは...飼いならせるかしら？プレストン:
          どうしたんだい？誰かが現実世界に戻ってこれを直す必要があるな。全員: 自分はいやだよ！ステイシー: 私もいや・・ (ため息)。わかったわ。私が行くわ。"
      5:
        text: よしっと。現実の世界に戻ってきたのね。マインクラフトのオフィスを探しに行こうかな。
      6:
        text: けれどもあなたの助けが必要です。チュートリアルを始めて、プログラミングの仕方を学び始めて、レベルをいくつかクリアした後、皆さんに追いつきます。がんばるわ！こっちだと思うけど。わー、サボテン！でも大丈夫よ！
      7:
        text: Hour of Codeチャレンジを完了するには、エージェントを動かすためのプログラムを書く必要があります。エージェントと協力して進路上の障害を取り除き、旅に必要なアイテムを手に入れましょう。ブロックを置いたり壊したりできるのはエージェントだけで、アイテムを集めることができるのはあなただけです。画面は3つの主要な部分に分かれています。左側はマインクラフトです。
      8:
        text: 中央エリアはツールボックスで、エージェントが理解できるコマンドがそろっています。
      9:
        text: 右側はワークスペースです。ここでコマンドを積み上げてプログラムを作成し、エージェントを動かします。
      10:
        text: エージェントは、歩行し、回転し、プレッシャープレートをアクティブ化できます。また、ブロックを破壊したり、配置したりすることができます。トロッコのレールのようにブロックを配置すると、ブロックはその下に配置されます。
      11:
        text: 何をすべきかを忘れたら、上にあるレベルの説明を見ましょう。
      12:
        text: もう一度やり直したい場合は、青色のリセットボタンを押してください。すべてを最初からやり直すことができます。プログラムのブロックを削除する必要がある場合は、ワークスペースからツールボックスにドラッグします。エージェントを動かすには、必ず
          [実行] ボタンを押してください。では、最初のいくつかのレベルを試してみましょう。がんばってください！
    mc_2017_repeat:
      1:
        text: 'スタンピー: ステイシーは何をしているんだろう？'
      2:
        text: 'ステイシー: うわー、私は正しい場所にいると思うわ。これは素晴らしい！'
      3:
        text: なんだかマインクラフトに戻ったような気分だわ！こんにちは。お元気？こんにちは？
      4:
        text: 'おお、クリーパーがいる。何もしないわよね？ケイティ: ステイシー？ステイシー: こんにちは、ケイティ？ケイティ: はい、マインクラフトへようこそ！'
      5:
        text: 'ステイシー: これは素晴らしいですね。あなたは開発者としてここで毎日働いているんですか？ケイティ: はい、本当にいいですよね。私はマインクラフトのマーケットプレイスチームの開発者です。ステイシー:
          あなたはいくつのプログラミング言語を知っていますか？ケイティ: キャリアの中で、たぶん12以上は使ってきたと思います。ステイシー: 12？ケイティ:
          はい。ステイシー: では、自称エージェントのこの小さなゴーレムの男について何か知っていますか？ケイティ: スティーブやアレックスができないこと、たとえば溶岩を渡るようなことをするためにエージェントを使います。ステイシー:
          私も彼らも、プログラミングの仕方を学びたいと思っています。学ぶ上で知っておくべきイロハは何ですか？'
      6:
        text: 'ケイティ: そうね、ループの使い方を学ぶ必要があるでしょう。ループは開発者が書くもので、繰り返し実行するようにコンピューターに指示します。ステイシー:
          わかったわ。実際にレベルが進むと出てくると思うから、先に進んでループを試してみるわ。'
      7:
        text: 次のレベルでは、ループを使って道に沿ってエージェントを動かします。「繰り返し」ブロックをワークスペースにドラッグし、「前へ進む」ブロックを「繰り返し」ブロックの中に置きます。これにより、一連のブロックをすべてワークスペースに放り込まなくても、同じことを何回も続けて行うようにコンピューターに指示できます。「繰り返し」ブロックに数値を入力することで、何回繰り返すかを選択できます。
      8:
        text: "「曲がる」コマンドや複数のコマンドを「繰り返し」ブロックに入れることもできますが、ここでは繰り返しを用いて、エージェントを数歩前に動かしましょう。パズルに行き詰まったら、いつでも青いリセットボタンをクリックして、やり直すことができます。"
      9:
        text: 'ケイティのようなスマートな仕事をしたいと考えている場合は、すべてのレベルを終えたら、[プログラムを表示] (show code) ボタンをクリックしてください。これで、ケイティのような人が実際にマインクラフトをプログラミングしているときに使用するJavascriptコードが表示されます。ケイティ:
          では、みんながんばってください！'
    mc_2017_functions:
      1:
        text: 'プレストン: 自慢するつもりはありませんが、パルクールは得意です。リジー: 寝ようよ、起きればステイシーが戻ってくるわ。'
      2:
        text: 'ステイシー: 皆、マインクラフトのオフィスから戻ってたわよ。ゲームで発生している問題を解決する方法がわかったと思うの。関数が使えるんじゃないかしら。これを開けてみましょう。'
      3:
        text: つまり、関数は、特定のタスクを実行するための特定の命令セットで、レシピのようなものです。次のいくつかのレベルでは、パズルを解くのに関数を使います。
      4:
        text: ワークスペースにある関数のプログラムを見て、それが何をするのかを確認します。
      5:
        text: 次に、ツールボックスでその名前のブロックを見つけて、ツールボックスからドラッグして「実行したとき」(when run) ブロックにくっつけます。
      6:
        text: 橋を建てるなど、何かを実行するために同じ命令セットを実行する必要があるたびに、同じ関数を用いることを覚えておいてください。では、がんばってください！あなたならきっとできるでしょう！
    mc_2017_congratulations:
      1:
        text: 'プレストン: おめでとう！'
      2:
        text: 'リジー: おめでとう！'
      3:
        text: 'スタンピー: おめでとう。やったね！'
      4:
        text: 'ステイシー: おめでとう！完璧にやり遂げましたね！Hour of Codeを完了したので、マインクラフトでプログラミングを開始できます。ループ、関数、およびソフトウェアのエージェントが何をするのかを学びました。'
      5:
        text: さて、フリープレイレベルの時間です。ここではあなたが開発者です。残りの時間を使って、探す、掘る、建てるための独自の関数を書き上げます。
      6:
        text: 'このレベルで書いたコードをマインクラフト: Education Editionのマインクラフトの世界に取り込むことができます。 [完了]
          をクリックして、リンクを取得してマインクラフトの世界で使うための手順に従い、引き続きエージェントを使ったプログラミングをしていきましょう。楽しんでください！'
      7:
        text: 'ステイシー: 戻ってきたよ！皆、これがエージェントです！何ができるか、お見せしましょう。ほら、やってるよ！テラコッタブロックから階段を建てるように言いました。これを使ってここから出ることができます。そして、建てられるのは階段だけではありません。エージェントにやりたいことを何でも伝えることができます。そしてエージェントは私のために仕事をしてくれます。'
      8:
        text: 'スタンピー: どうやってやったの？ステイシー: 実は難しくありません。ただプログラムを使っただけです！'
    csd_concept_how_computers_work:
      1:
        text: どこを見ても、コンピューターは世界を変えています。机の上でも、家の中でも、ポケットの裏側にも、どこにでもあります。けれども、多くの人がこの革新的なテクノロジーを毎日使っていますが、「コンピューターの仕組み」を疑問に思うことはあまりありません。このシリーズでは、コンピューターを実際にどのように使うかを学びます。先ずは何をもってコンピューターというのかを見ていきます。次に、驚異的な速度でオン/オフする小さな電気信号を使って、コンピューター内部で情報がどのように処理されているかを見ていきます。
      2:
        text: その後、コンピューターが回路を使用して、単純な数学から仮想世界全体のシミュレーションまですべてを行う方法を学びます。次に、ズームアウトして、実際にすべての情報を入力、出力、および保存するコンピューターのさまざまな部分を確認します。最後に、実際のコードとは何か、ソフトウェアがどのようにハードウェアを制御するかを見ていきます。したがって、毎日使用するデバイスに興味があるだけなのか、将来のイノベーションを設計したいのかに関わらず、最初の手順はコンピューターの仕組みを学ぶことです。
    csd_concept_computer:
      1:
        text: 私はメイ・リ・コーといいます。デザイナーであり、発明家でもあります。デザインしたものの一部はAppleで行ったものでしたが、今は子供たちが学校で楽に過ごせるように、子供たちが使える製品をデザインしています。他にも、DJとダンスなどの仕事もしています。
      2:
        text: コンピューターはどこにでもあります！人のポケットの中にあったり、車の中にあったり、手首につけていたり。今、あなたのリュックサックに入っているかもしれません。けれども、コンピューターをコンピューターたらしめているのは何でしょうか？そしてそれはどのようにして動いているのでしょうか？
      3:
        text: こんにちは、ナットです！私はXboxのオリジナルデザイナーの1人です。自分は多分7歳のころからコンピューターを触ってきて、今は仮想現実
          (VR) に取り組んでいます。私たち人間は、問題の解決に役立つツールを常に作ってきました。手押し車、ハンマー、コピー機、トラクタートレーラーといったツールです。
      4:
        text: これらの発明はすべて、人の手間を省くのに役立ちました。時代を経て、私たちが考えるのを助けてくれるマシンを設計して構築できないかと考え始めました。方程式を解いたり、大空の星を追跡したりするマシンです。このようなマシンは、土や石などの物理的な物体を動かしたり操作したりするのではなく、情報を操作するように設計する必要があります。コンピューター
          サイエンスの先駆者たちは、考えるマシンの設計方法を探っていたときに、4つの異なるタスクを行う必要があることに気付きました。
      5:
        text: 情報を入力し、保存し、処理して、結果を出力する必要があります。これは簡単に聞こえるかもしれませんが、そのどれもがどのコンピューターにも通じることです。それが、コンピューターをコンピューターたらしめているのです。
      6:
        text: コンピューターは、基本的な計算機として始まり、それは当時大変素晴らしいものでした。当時、数値を操作するだけだったのです。けれども今では、コンピューターを使ってお互いに会話したり、ゲームをしたり、ロボットを制御したり、想像できるあらゆるクレイジーなことをしたりすることができます。現代のコンピューターは、昔のように不格好なマシンのようには見えませんが、上記の4つの機能を果たしています。
      7:
        text: 最初に、入力について説明します。キーボード、マウス、マイク、カメラを使って、コンピューターに何をするかを伝えることができます。これらの別個の入力はすべてコンピューターに情報を与え、メモリに保存されます。
      8:
        text: コンピューターのプロセッサは、メモリから情報を取り出します。一連のコマンドであるアルゴリズムを使って操作したり、変更したりします。そして、処理した情報を送り返し、再びメモリに保存します。これは、処理した情報を出力する準備ができるまで続きます。
      9:
        text: コンピューターが情報を出力する方法は、コンピューターが何をするように設計されているかによって異なります。コンピューターの画面には、テキスト、写真、ビデオ、インタラクティブゲーム、さらには仮想現実まで表示できます。コンピューターの出力には、ロボットを制御するための信号などもあります。
      10:
        text: そして、未来のコンピューターがどのようなものになるかは誰にも分かりません。未来のコンピューターはどのようなものになるかを決める手助けをしてもらいたいと思っています。けれども、すべてのコンピューターで、使用するテクノロジーの種類に関係なく、常に同じ4つのことを行っています。情報を受け取り
          (入力)、それをデータとして保存し、処理して、結果を出力することです。
    csd_concept_binary_data:
      1:
        text: こんにちは！私の名前はリモー・フライドで、Adafruit Industriesのエンジニアをしています。そしてここでエンジニアリングと設計をてがけ、ファッションと音楽とテクノロジーのための回路を設計しています。
      2:
        text: 私はフェデリコ・ゴメス・スアレスといいます。Microsoft Hack for Goodのソフトウェア開発者をしています。私は、現代の大きな社会問題を解決するためにテクノロジーをどう活用したらいいかを検討しています。
      3:
        text: コンピューターは1と0で動作すると聞いたことがあるかもしれません。けれども実際には、このような1と0を直接扱う人はほとんどいません。しかし、1と0は、コンピューター内の仕組みで大きな役割を果たしています。
      4:
        text: コンピューターの内部には、コンピューター内のすべての情報を運ぶ線と回路があります。情報を電気的にどのように保存または表現すると思いますか？
      5:
        text: 電気が流れる1本の線があった場合、信号はオンかオフのどちらかになります。選択肢は限られていますが、それは本当に重要な出発点です。 1本の線で、「はい」か「いいえ」、「正」か「誤」、1か0、または2つのオプションのみがある別のものを表すことができます。この1本のワイヤーのオン/オフ状態はビットと呼ばれています。ビットは、コンピューターが保存できる最小の情報です。
      6:
        text: より多くの線を用いると、より多くのビットが得られます。1と0が増えます。ビット数が多いほど、より複雑な情報を表すことができます。ただし、それを理解するには、2進数システムと呼ばれるものについて学ぶ必要があります。
      7:
        text: 10進数システムでは、0から9までの10桁があり、それが誰しもが学ぶ数え方です。 2進数システムでは、0と1の2桁しかありません。この2桁で、任意の数まで数えることができます。
      8:
        text: それがどのように機能するかを説明します。私たちが慣れている10進数システムでは、1の位、10の位、100の位など、数値の各位に異なる値があります。
          たとえば、100の位に9があるのは900です。バイナリの各位にも値があります。ただし、毎回10を掛けるのではなく、2を掛けます。つまり、1の位、2の位、4の位、8の位といった具合です。たとえば、バイナリの9は1001です。値を計算するには、1を8の位に加え、0を4の位に加え、0を2の位に加え、1を1の位に加えます。ほとんど誰もこの計算を行っていないのは、コンピューターが代わりに行ってくれているからです。重要なのは、どのような数も1と0、またはオンとオフになっている一連の線だけで表すことができる点です。使用する線が多いほど、格納できる数が多くなります。
          8本の線を使用すると、0～255の数値を保存できます。255は、2進数で1を8つ並べた数字です。 32本の線で、0から40億通り以上を保存できます。
          2進数システムを使用すると、任意の数を表すことができるのです。
      9:
        text: では、テキスト、画像、またはサウンドなど、他の種類の情報についてはどうでしょうか？これらはすべて、数字で表すこともできるのです。アルファベットのすべての文字について考えてください。各文字に番号を割り当てることができます。
          Aは1、Bは2というようにです。その後、単語または段落を一連の数値として表すことができます。これまで見てきたように、これらの数値はオンまたはオフの電気信号として保存できます。すべてのウェブページや携帯電話に表示されるすべての単語は、このようなシステムを使用して表されています。
      10:
        text: それでは、画面に表示される写真、ビデオ、グラフィックについて考えてみましょう。
      11:
        text: これらの画像はすべて、ピクセルと呼ばれる小さなドットでできており、各ピクセルには色がついています。それぞれの色は数字で表すことができます。一般的な画像にはこのようなピクセルが数百万個使われています。そして一般的なビデオは毎秒30の画像を表示していることを考えると、膨大なデータになることが分かりますね。
      12:
        text: すべての音は基本的に空中での一連の振動です。振動は、波形としてグラフィカルに表すことができます。この波形のどのポイントも数値で表すことができます。そして、このようにして、あらゆる音を一連の数字に分解することができるのです。より高品質のサウンドが必要な場合は、32ビットオーディオまたは8ビットオーディオを選択します。ビット数が多いほど、数値の範囲が広くなります。
      13:
        text: コンピューターを使ってプログラムを書いたり、独自のアプリを作成したりする場合、このような1と0を直接扱うことはなく、扱うのは画像、音声、動画です。そのため、コンピューターが内部でどのように動作するかを理解したい場合は、このような単純な1と0と、その背後にある回路の電気信号に帰結します。
    csd_concept_circuits_logic:
      1:
        text: 回路について発見したすばらしいことの1つは、回路がアートの形であるということです。創造的なアイデアがあれば、回路を使ってそれを表現することができます。そこで、アイデアがあれば、テクノロジーを使ってそのようなアイデアを実現することができるのです。
      2:
        text: コンピューターのすべての入力または出力は、事実上一種の情報で、オンまたはオフの電気信号または1と0で表すことができます。
      3:
        text: 入力情報として入ってくる情報を処理し、出力される情報を作るために、コンピューターは入力信号を修正して結合する必要があります。これを行うために、コンピューターは何百万もの小さな電子部品を使って組み合わせて、回路を形成します。
      4:
        text: では、1と0で表される情報を回路がどのように変更および処理できるかを詳しく見てみましょう。これは信じられないほどシンプルな回路です。オンまたはオフの電気信号を受け取り、それを反転させています。そのため、与える信号が1の場合、回路から0を受け取り、回路を0にする場合、1を受け取ります。入る信号は、出てくる信号と同じではありません。そこで、この回路を「NOT」と呼びます。
      5:
        text: より複雑な回路では、複数の信号を受け取ってそれらを組み合わせ、異なる結果を得ることができます。この例では、回路は2つの電気信号を受け取り、ここではそれぞれが1または0になる可能性があります。入ってくる信号のいずれかが0の場合、結果も0になります。最初の信号と2番目の信号が両方とも1の場合、この回路から出力されるのは1になります。この回路を「AND」と呼びます。
      6:
        text: 単純な論理計算を実行するこのような小さな回路がたくさんあります。これらの回路をつなぎ合わせることにより、より複雑な計算を実行するより複雑な回路を作成できます。
      7:
        text: たとえば、加算器と呼ばれる2ビットを加算する回路を作成できます。この回路は、1または0の2つの個別のビットを受け取り、それらを加算して合計を計算します。合計は、0プラス0が0に等しい、0プラス1が1に等しい、または1プラス1が2に等しいになる可能性があります。合計を表すのに最大2桁の2進数を使用できるため、2本の線が必要です。
          2ビットの情報を加算するための加算器を1つ用意したら、これらの加算回路を複数を並べてまとめると、はるかに大きな数を加算できます。
      8:
        text: たとえば、8ビットの加算器が数値25と50を加算する方法を次に示します。各数値は8ビットを使用して表され、結果として16の異なる電気信号が回路に入ります。
          8ビット加算器の回路には、合計を計算する小さな加算器がたくさんあります。
      9:
        text: さまざまな電気回路が、減算や乗算といった他の単純な計算を行えます。実際、コンピューターが行うすべての情報処理は、たくさんの小さな単純な操作を組み合わせたものです。コンピューターが行う個々の操作はとても簡単なので、人間が行うこともできますが、コンピューター内部の回路は非常に高速です。
      10:
        text: 昔は、これらの回路は大きくて不格好で、8ビットの加算器は冷蔵庫と同じくらいの大きさで、簡単な計算を実行するのに数分かかりました。今日、コンピューター回路はサイズが非常に微細で、はるかに高速です。小さいコンピューターも高速なのはなぜでしょうか？回路が小さければ小さいほど、電気信号の距離が短くなります。電気はほぼ光速で移動するため、現代の回路は毎秒数十億もの計算を実行できます。
      11:
        text: そのため、ゲームをプレイしている場合でも、ビデオを録画している場合でも、宇宙を探索している場合でも、テクノロジーで行えるすべてのことには、大量の情報を非常に迅速に処理する必要があります。このような複雑さの下には、バイナリ信号をウェブサイト、ビデオ、音楽、およびゲームに変換する小さな回路がひしめいています。これらの回路は、DNAを解読して疾患を診断および治療するのにも役立ちます。では、あなたはこのような回路を使って何をしたいですか？
    csd_concept_memory_cpu_input_output:
      1:
        text: こんにちは、マディソン・マクセイです。Loomiaという会社を持っていて、スマートな服やスマートなソフトグッズの製品のためのスマートな生地を作ることに力を入れています。服飾の可能性は無限大です。
      2:
        text: 私はダニエル・アップルストーンといいます。私はOthermachine CompanyのCEOです。デスクトップフライス盤を製造しています。フライス盤は回転する切削工具を装着し、素材をカットして3Dオブジェクトを作成します。
      3:
        text: 内部では、すべてのコンピューターが同じ4つの基本的なことを行っています。情報を入力し、情報を保存および処理してから、情報を出力します。これらはそれぞれ、コンピューターの異なる部分が行っています。
      4:
        text: 外界から入力情報を受け取り、それをバイナリ情報に変換する入力デバイスがあります。この情報を保存するメモリがあります。すべての計算が行われる中央処理装置（またはCPU）があります。そして最後に、情報を取得してそれを物理的な出力に変換する出力デバイスがあります。
      5:
        text: 最初に入力について話しましょう。コンピューターは、コンピューターのキーボード、携帯のタッチパネル、カメラ、マイク、GPSなど、さまざまな種類の入力情報を受け取ることができます。また、車、サーモスタットやドローンのセンサーでさえ、ある種の入力デバイスです。
      6:
        text: ここで、入力情報がどのようにコンピューターを通過して出力情報になるかの簡単な例を見てみましょう。キーボードのキー（たとえば、「B」文字）を押すと、キーボードは文字を数字に変換します。その数値は、1と0のバイナリとしてコンピューターに送信されます。
      7:
        text: この数値から始めて、CPUは文字「B」を小さなピクセルを紡いで表示する方法を計算します。 CPUはメモリに対してステップ・バイ・ステップの指示を要求し、メモリは文字「B」の描画方法を教えます。CPUは受け取った指示を実行し、結果をピクセルとしてメモリに保存します。
      8:
        text: 最後に、このピクセル情報はバイナリで画面に送信されます。画面は出力デバイスで、バイナリ信号を小さな光と色に変換し、ユーザーの目に見えるようにしています。
      9:
        text: これはすべて非常に迅速に行われるので、一瞬で行われているように感じられますが、各文字を表示するために、指でキーを弾いた瞬間からコンピューターは何千もの指示を実行しています。
      10:
        text: この例では出力デバイスは画面でしたが、出力方法はさまざまな種類があり、コンピューターからバイナリ信号を受け取って物理的な世界で何かを行っています。たとえば、スピーカーはサウンドを再生し、3Dプリンターはオブジェクトを印刷します。出力デバイスは、ロボットアーム、車のモーター、はたまた私の会社が製造するフライス盤の切削工具などの物理的な動きも制御できます。新しいタイプの入力と出力により、コンピューターはまったく新しい方法で世界と対話できるようになります。これは、メモリとCPUの速度の向上とサイズの縮小によって助けられました。
      11:
        text: タスクが複雑になり、入力または出力される情報が増えるほど、コンピューターに必要な処理能力とメモリが増えます。画面に文字を入力するのは簡単かもしれませんが、複雑な3Dグラフィックスを作成したり、高解像度の映画を録画したりするために、最近のコンピューターは、すべての情報を処理するための複数のCPUとそれを保存するための何ギガバイトものメモリを備えていることが一般的です。
      12:
        text: コンピューターで何をしたいかに関係なく、すべてのアクションは、物理的な世界からの情報の入力、その情報の保存と処理、および物理的な世界への出力に尽きます。
    csd_concept_hardware_software:
      1:
        text: こんにちは、エリカ・ゴメスです。Amazon.comのエンジニアリングマネージャーをしています。テクノロジー、特にAmazonで働くことの最も良い点の1つは、毎日犬を連れて仕事に行くことができることです。私の仕事は、ソフトウェアがしっかりとリリースされるように手伝うことで、連れ（犬）の仕事は机の下で昼寝をして大きないびきをかくことです。
      2:
        text: ジェローム・ホルマンです。チームXboxのプログラムマネージャーをしていて、とても楽しい仕事をしています。基本的に、ハードウェアとソフトウェアを組み合わせて、ユーザーがXboxで遊びたいゲームを送り出しています。
      3:
        text: コンピューティングデバイスの内部を見ると、一連の回路、チップ、ワイヤ、スピーカー、プラグなどのあらゆる種類のものがあります。これがハードウェアです。
      4:
        text: けれどもソフトウェアは目に見えません。ソフトウェアとは、マシン上で実行されるすべてのコンピューター プログラム（またはコード）です。ソフトウェアは、アプリやゲームからウェブページ、データサイエンス
          ソフトウェア（これは、私とチームがAmazonで顧客の行動様式を理解するために使用しています）まで、何でもあります。
      5:
        text: けれども、ハードウェアとソフトウェアはどのように相互に作用しているのでしょうか？コンピューターの中央処理装置、つまりCPUから見ていきましょう。
      6:
        text: CPUは、コンピューターの他のすべての部分を制御するマスターチップです。 CPUはさまざまなことを実行する必要があるため、CPUの内部には、特定のタスクを処理する、より小さくシンプルなパーツがあります。CPUは簡単な数学と論理処理を行うための回路があり、またンピューターのさまざまな部分との間で情報を送受信するための回路もあります。
      7:
        text: CPUの本当の魔法は、どの回路をいつ使用するかという点にあります。CPUは、特定のジョブを実行するために使用する回路を指示する簡単なコマンドを受け取ります。たとえば、「add」コマンドは、CPUに外部回路を使用して新しい数値を計算するように指示します。そして、「store」コマンドは、その結果をメモリに保存するために別の回路を使用するようCPUに指示します。
      8:
        text: 数字と同じように、これらの単純なコマンドはすべて、バイナリの1と0、またはオンとオフの電気信号で表すことができます。バイナリコマンドはメモリに保存され、CPUはそれらを順番にフェッチして実行します。この一連のコマンドは、実際には非常に単純なコンピューター
          プログラムです。
      9:
        text: バイナリコードはソフトウェアの最も基本的な形式で、コンピューターのすべてのハードウェアを制御します。昨今はバイナリでソフトウェアを作成する人は誰もいません。それを始めたら永遠に時間がかかってしまうでしょう！
      10:
        text: 今日、私たちが作成するソフトウェアは、こちらの (Python)、こちらの (Ruby)、またはこちらの (Blockly) の形式を取ります。このようなプログラミング言語は、英語によく似たものでコマンドを入力します。
      11:
        text: 画面に長方形を描くには、必要なのは1つのコマンドです。この高レベルのコマンドは、CPUが理解できる数百または数千の単純なバイナリコマンドに変換されます。ソフトウェアはCPUに何をすべきかを指示しますが、音楽を聴いたり、ウェブサイトを閲覧したり、友だちとチャットしたりすると、コンピューターは複数のソフトウェアを同時に実行します。
      12:
        text: では、これらすべてのプログラムはどのようにして最初にコンピューターに搭載され、CPUはどのようにしてそれらを一度にすべて実行できるのでしょうか？調べるには、オペレーティングシステムについて触れる必要があります。
      13:
        text: コンピューターのオペレーティングシステムは、ソフトウェアがコンピューターのハードウェアを使用する方法を管理するマスタープログラムです。たとえば私は、ほとんどのパーソナルコンピューターで稼働しているWindowsオペレーティングシステムの作成を支援しました。
      14:
        text: オペレーティングシステムは、コンピューター上の他のソフトウェアを制御できる特別な機能を持つプログラムです。それを使って、新しいプログラムをコンピューターのメモリにロードしてインストールできます。これは、プログラムが中央処理装置によっていつ実行されるか、およびそのプログラムがコンピューターの入出力デバイスにアクセスできるかどうかを決定します。コンピューターが一度に多くのプログラムを実行している場面では、実際には、オペレーティングシステムがそのCPUを共有するプログラム間を瞬時に切り替えています。
      15:
        text: すべてのコンピューターの内部には、コンピューターのハードウェアを制御するソフトウェアを管理するオペレーティングシステムがあります。
      16:
        text: ソフトウェアは、単純なバイナリコードで構成される一連のコマンドで、そのバイナリコードは、何十億もの小さな回路を流れる電気信号にすぎません。
      17:
        text: コンピューターはあらゆる種類の驚くべきことを行う可能性を秘めています。けれども、コンピューターをスマートに、または便利にするのはあなた自身です。プログラミングを学ぶと、どのような問題を解決したいかを把握して、自分の頭の中で考えたことを現実にするソフトウェアを書き上げられるようになります。
    hoc_dance_warmup:
      1:
        text: 'Hour of Code | ダンスパーティー: ウォームアップ'
      2:
        text: こんにちは！私はミラル・コブです。ダンサー、ソフトウェア開発者、iLuminateの作成者です。
      3:
        text: コンピューター サイエンスは創造性とさまざまな点で関係しています。本当にそうなのです。つまり、ソフトウェアを書くことができるようになれば、アイデアを何にでも活かすことができるようになります。私はそれを難なくやっています。ソフトウェアを作成するためのツールがあればできることはたくさんあり、その可能性は本当に無限大です。
      4:
        text: 次の1時間では、独自のダンスパーティーをプログラミングするところからコンピューター サイエンスを始めます。ヒットした楽曲と素晴らしいダンサーのチームを集めたので、一緒に楽しく踊りましょう。
      5:
        text: プログラムのブロックを使用して、さまざまなダンサーを選択し、ダンスの動きを変更し、音楽に反応させ、インタラクティブにします。
      6:
        text: 画面が3つの主要部分に分割されていますね。左側はプレイスペース。ここにダンサーが現れます。
      7:
        text: この中央のエリアがツールボックスです。レッスンを進めるにつれ、このスペースで新しいコードブロックが利用できるようになります。
      8:
        text: 右側のスペースはワークスペースです。ブロックをツールボックスからワークスペースにドラッグして、プログラムを構築できます。
      9:
        text: 各レベルの説明は、画面の上部に表示されています。ヒントが必要な場合は、電球マークをクリックしてください。
      10:
        text: まず、この赤いブロックで新しいダンサーを作ってみましょう。まず、ツールボックスの外にドラッグし、このオレンジ色の「セットアップ」ブロックの下にくっつけます。このダンサーは猫で、名前は「my_first_dancer」です。ここをクリックして、名前を自由に変更できます。
      11:
        text: これで、ダンサーがプレイスペースのどこに表示されるかを変更することもできます。
      12:
        text: プレイスペースの上には、音楽を選ぶためのメニューがあります。選べる曲がたくさんあるので、お気に入りを見つけて楽しんでください。プレイスペースの下には
          [実行] ボタンがあります。[実行] を押すと、プログラムのダンサーがプレイスペースに表示され、音楽が再生されます。
      13:
        text: ぜひお試しください！行き詰まっていると感じても安心してください。体を起こして動くだけで、気付かないうちに自分だけのダンスパーティーができ上がります。では、何を作りましょうか？
    hoc_dance_events:
      1:
        text: 'Hour of Code | ダンスパーティー: イベント'
      2:
        text: アロエ・ブラックです。私はシンガー・ソングライター、エンターテイナーです。コンピューター サイエンスは未来があるので、本当に学ぶ価値があると思います。また、文字通り自分の生活をコントロールしているテクノロジーを操ることができるようになることが重要だと思います。
      3:
        text: さまざまなダンスの動きを音楽に合わせて発生させるには、「イベント」と呼ばれるものを使うことができます。イベントは、何かが起こるのを待って、すぐに反応するようにプログラムに指示します。
      4:
        text: イベントの例としては、マウスのクリック、矢印ボタン、または画面のタップを待つことが挙げられます。これから使用するイベントは、曲の変更を待ちます。曲が変わると、ダンサーは新しいダンスを開始します。
      5:
        text: プロのダンサーは、曲のビートを数えて振り付けを練習します。
      6:
        text: 音楽では、小節は特定の数のビートを指します。最も人気のある曲では、小節は4ビート長です。
      7:
        text: ダンサーを自由にするには、緑色のイベントブロックが必要です。このイベントブロックは、「4小節後」と言います。
      8:
        text: 紫色の「永久に実行」ブロックをドラッグすると、ダンサーが行うダンスを選択できます。それは「4小節後」イベントブロックの下にあるため、ダンサーは曲の4小節分待ってからダンスを開始します。
      9:
        text: 表示エリアの上部にある小節カウンターに注意してください。
      10:
        text: ダンスコードをトリガーするイベントを見て聞いてください。そして合図があり次第すぐに、ダンサーが動き始めます。
    hoc_dance_properties:
      1:
        text: 'Hour of Code | ダンスパーティー: プロパティ'
      2:
        text: 私の名前はマリアです。ワシントン大学の3年生で、Amazonのフューチャーエンジニアです。
      3:
        text: 私はコンピューター サイエンスが大好きです。問題解決と批判的思考が組み込まれていて、何時間もの作業を何かに費やした後、本当に素晴らしい感覚に浸れ、やってよかったなと思えるからです。
      4:
        text: ここまで、さまざまな種類のダンサーでプレイする機会があり、さまざまな種類のダンスの動きを行うようにプログラムしました。けれども、このような動きは実際にはどのように機能するのでしょうか？
      5:
        text: ダンスの動きはどれも、フレームと呼ばれる一連の画像で構成されています。各フレームは前のフレームとは少し異なります。プログラムが実行されると、コンピューターは次々とフレームを表示します。ダンサーが動いているように見えるほど速く表示されます。これがすべてのアニメーションの秘密です。
      6:
        text: ダンサーの動きを変更できるだけでなく、ダンサーのプロパティも変更できます。プロパティは、画面上のダンサーの位置、ダンサーのサイズ、ダンサーの色などを説明します。
      7:
        text: ダンサーのプロパティを変更するには、「設定」ブロックを使用します。「設定」ブロックを使用して、ダンサーを小さく見せましょう。まず、「設定」ブロックをプログラムにドラッグします。次に、変更するダンサーを選択して、画面に表示するサイズを入力します。
      8:
        text: フルサイズは100です。これより小さい数値を選択すると、ダンサーが小さくなります。ダンサーが小さいほど、遠くに見えます。これは、バックダンサーを作成するのにピッタリの方法です。
      9:
        text: "「設定」ブロックを使用して、ダンサーの寸法、回転、位置、色を変更することもできます。これらのプロパティをいじってみると、あらゆる種類の変更を加えて、曲のさまざまな部分にリンクすることができます。"
      10:
        text: 既に存在するダンサーのプロパティのみを設定できることを覚えておいてください。「セット」ブロックが「新しいダンサーを作成」（Make a
          new dancer）ブロックの後に来ることを確認してください。自由に創造力を発揮して、楽しんでください。
    hoc_dance_congrats:
      1:
        text: 'Hour of Code | ダンスパーティー: パーティー・オン！'
      2:
        text: おめでとうございます！コンピューター サイエンスの基本を学習しました。これで、これらのブロックを使用して独自にデザインしたダンスパーティーを作成し、友だちと共有できます。
      3:
        text: ツールボックスを見ると、これまでに見たことのない新しいブロックが見つかります。たとえば、「レイアウト」ブロックを使用して、画面上でさまざまな方法でダンサーを配置できます。
      4:
        text: 中身を見て、新しいブロックと機能を試してみてください。お気に入りの曲に合わせて入念に考えられた振り付けを行うダンスを作ってみませんか？
      5:
        text: または友だちとダンスオフで勝負をしてみても？
      6:
        text: それとも、全く違う遊び方をしてみても？
      7:
        text: チュートリアルの最後に、あなたの作品へのリンクを友だちと共有することができます。想像力をふくらませて、楽しんでください！
    mc_2018_intro:
      1:
        text: こんにちは！あなたはちょうど間に合いました。 ボヤージュ アクアティックへようこそ。これから水中に隠された宝物を見つけるための潜水を行おうとしています。手助けしてもらえてとても嬉しいです。神秘的な水路に沿って進むと何が待ち受けているか、想像できますか？このドックのどこかで最初のガイドに会うことになっています。
      2:
        text: 冒険家の皆さん、ようこそ！ ボヤージュ アクアティックを完了するには、プログラムを駆使して一連のパズルを解く必要があります。これから仕組みを説明します。画面は3つの主要な部分に分かれています。
      3:
        text: 左側にマインクラフトの世界が表示されます。
      4:
        text: 中央のエリアは、プログラミングコマンドを見つけることができるツールボックスです。
      5:
        text: そして右側の広いエリアがあなたのワークスペースです。ここでコマンドをくっつけてプログラムを構築し、動きを制御します。
      6:
        text: 各レベルの説明はページの上部にあります。プラス記号をクリックすると、長い説明と短い説明を切り替えられます。
      7:
        text: ツールボックスからワークスペースにブロックをドラッグして積み上げ、[実行] ボタンをクリックしてコマンドを実行してみてください。
      8:
        text: 正しく積み上げるのに数回試さなければならないかもしれません、そしてパズルによっては解決策が複数あるものもあるので、何がうまくいくか色々試してみてください。
      9:
        text: もう一度やり直す場合は、[リセット] ボタンをクリックして、最初の場所に戻ります。
      10:
        text: コマンドを削除する必要がある場合は、ブロックをワークスペースからツールボックスにドラッグします。[実行] をクリックして、コードの実際の動作を確認するのを忘れないでください。
      11:
        text: さて、説明はこれぐらいにして、冒険家の皆さん、海中の宝物を見つけるためのプログラミングを始めましょう。
    MC_2018_loops:
      1:
        text: すばらしい！タラを捕まえました！イルカにタラを与えると、イルカが宝物があるかもしれない難破船に案内してくれることを知っていましたか？そこまで一歩近づきましたね。次のパズルのセットはよりトリッキーになるので、プログラミングスキルを磨く方がいいでしょう。これは何しょう？洞窟？
      2:
        text: ようこそ、冒険家の皆さん！私はイカといいます。最後のパズルで同じコマンドのセットを何度も使っていることに気づきました。少し面倒だったのではないでしょうか。疲れたり退屈したりせずに、お皿を洗ったり歯磨きをしたりといったことを何度も繰り返せる方法があったらいいなと思ったことはありませんか？あったら便利でしょうね。
      3:
        text: コンピューターは、プログラミングループを使って同じことを何度も繰り返すのが本当に得意です。プログラムに同じ命令を何度も実行させたい場合は、ループが使えます。
      4:
        text: "「ループ」ブロックには、目標に到達するまで繰り返される指示が含まれています。プログラムが「ゴールまで繰り返す」ループを開始すると、ゴールに到達するまで指示を内部で繰り返し続けます。"
      5:
        text: 自分でこれを試してみましょう！繰り返したいコマンドを「ゴールまで繰り返す」ブロック内に置き、[実行] をクリックして、進む様子を見てみましょう！
      6:
        text: 今のは少し奇妙でしたね。イカがプログラミングできるなんて、知っていましたか？イカに指があるとは思わなかったです。さて、これでループについて理解しました。ループを使って、もっとお宝をゲットしましょう。
    mc_2018_conditionals:
      1:
        text: おお！もう3つのパズルを解きました！そして・・・サーモンを捕まえました。金の山を掘りあてるほど興奮することでもないでしょうが、手に入れられるものをゲットしていきましょう。そして後でオウムガイが重宝するのではないでしょうか。この遺跡には何が潜んでいるのだろう。何か別のヒントが隠されているのかもしれません！中を見てみましょう。
      2:
        text: 私はネッティといいます。私の遺跡へようこそ。私たちは状況に応じて常に判断しています。雨が降りそうなら傘を持っていくし、お腹が減ったらおやつを食べます。
      3:
        text: 毛虫がいたら、反対方向に走って逃げるでしょう。コンピューターもこの種の決定を行っていて、コードを使って実際に条件に応答できます。
      4:
        text: プログラムのコマンドを使ってこのような応答をプログラミングするには、「道がある場合」(if path) ブロックを選択します。
      5:
        text: ドロップダウンを選択してコマンドを作成します。
      6:
        text: たとえば、「右への道がある場合」というコマンドを書いて、条件文内に「右に曲がる」ブロックを置くと、スティーブが右へ開かれた場所に到達したときに常に右に曲がります。右側に開かれた場所がなければ、右に曲がりません。このような条件文のifコマンドは、水中洞窟の神秘的な遺跡といった予測できない状況でプログラムを実行するときに役立ちます。
      7:
        text: ifブロックを使って、プログラムを試してみてください。
      8:
        text: ワオ！ネッティの遺跡は本当にすばらしかった。実家から引っ越さなくちゃ。あなたはどう思いましたか？最終的なパズルを完了するための条件は整っているでしょうか？では、それを試してみましょう。
    mc_2018_closing:
      1:
        text: 'エイミー・リー33: おめでとうございます！よくできました！'
      2:
        text: 'イカ: おめでとうございます！'
      3:
        text: 'ネッティ: やったね、おめでとう！'
      4:
        text: 'トモホーク: おめでとうございます！'
      6:
        text: プログラミングについて言うと、このクエストにはもう1つのレベルがあります。冒険家の君はそれにチャレンジする準備はできていますか？
      7:
        text: これは無料のプレイレベルで、プログラミングスキルを活用して素晴らしいものを構築できます。
      8:
        text: なるほど...隠し宝物庫、水中のモニュメント、珊瑚の城を作りたいって？アイデアは尽きないですね。ループを使用して繰り返しアクションを作成し、さらに条件文を使って予測不可能なあらゆるシナリオに備えてください。
      9:
        text: これまで自身が大胆なプログラマーであることを証明してきました。何を構築するのか、見るのが楽しみです。そしてプログラミングの冒険がここで終わることがありませんように。良い旅を！
    teaching_csf_how_it_works:
      1:
        text: このコースは何段階かに分かれています。
      2:
        text: 最初のいくつかの段階では、コンピューター サイエンスとは何か、また主要な語彙を説明します。
      3:
        text: 次に、生徒と同じようにプログラミングする方法を学びます。コースの最終段階は、教室でコンピューター サイエンスを教える計画を立てるのに役立つでしょう。コース全体を通して、プラグイン
          (またはオンライン) レッスンと、コンピューターを使わずに行うオフラインのレッスンのどちらの例もご覧いただけます。
      4:
        text: 学習プラットフォームは進捗状況をトラッキングするので、いつでも中断したところから始めることができます。
    what_is_cs:
      1:
        text: プログラミングは、コンピューターに与える一連の指示です。コンピューター サイエンスは、人々がコンピューターの力を使って大きな問題を解決する分野です。コンピューター
          サイエンスにはプログラミングが含まれますが、インターネットのしくみや社会への影響、ビッグデータの扱い方、大きな問題の分解方法といった他の事柄も扱います。コンピューター
          サイエンスは、問題解決、批判的思考、そして粘り強さがポイントになります。
    writing_first_program:
      1:
        text: Code.orgでは、Blocklyと呼ばれる視覚的なドラッグ・アンド・ドロップ プログラミング言語を用いています。 Blocklyは、ブロックと呼ばれるカラフルな指示を使用してプログラムを構築し、パズルを解いていきます。
      2:
        text: 各パズルには4つの部分があります。
      3:
        text: 左側にはプレイエリアがあり、プログラムが実行されます。
      4:
        text: 中央には、必要なすべてのブロックがあるツールボックスエリアがあります。
      5:
        text: 右側はワークスペースで、ブロックをドラッグしてプログラムを構築します。
      6:
        text: ワークスペースの上には、各パズルの説明があります。
      7:
        text: ツールボックスからドラッグするブロックが多すぎる場合は、余分なブロックをツールボックスにドラッグして戻します。プログラムを試すには [実行]
          をクリックし、もう一度やり直すには [リセット] をクリックしてください。
    repeat_block:
      1:
        text: "「繰り返し」ブロックを使用すると、その中にあるコードを指示に従い何度でもループできます。"
    what_is_an_event:
      1:
        text: イベントは、発生する何かを待つようにプログラムに指示します。そのことが起こると、プログラムはアクションを実行します。コンピューターは、マウスのクリック、矢印ボタンの押下げ、または画面のタップを待ちます。
    lesson_planning:
      1:
        text: CS基礎レッスンは、レッスンの内容を説明する概要から始まります。
      2:
        text: レッスンには、ウォームアップ、アクティビティ、まとめがあります。独自のレッスンプランを作成する場合は、これらのヒントを覚えておくとよいでしょう。
      3:
        text: 1.らせん状のカリキュラム設計を用いるようにしてください。概念を一度紹介してから、その後復習しまうｓ。
      4:
        text: 2.オンラインレッスンとオフラインレッスンを組み合わせて、混合学習体験を創出します。
      5:
        text: 3.カリキュラムを小さなセクションに分割します。
      6:
        text: 4.現地の基準に合わせ、大学進学とキャリアに備えたスキルに沿うようにしてください。
    opd_closing:
      1:
        text: おめでとうございます！教職員用のコンピューター サイエンス入門オンラインコースを修了しました。これで、生徒の進学・キャリアアップを後押しする先生コミュニティの一員になれました。
      2:
        text: さらにサポートが必要な場合は、以下のリソースをご覧ください。1. forum.code.org、2. Twitterの@teachcode、3.
          studio.code.org
    hoc_dance_warmup_2019:
      1:
        text: 'Hour of Code | ダンスパーティー: ウォームアップ'
      2:
        text: こんにちは！私はミラル・コブです。ダンサー、ソフトウェア開発者、iLuminateの作成者です。
      3:
        text: コンピューター サイエンスは創造性とさまざまな点で関係しています。本当にそうなのです。つまり、ソフトウェアを書くことができるようになれば、アイデアを何にでも活かすことができるようになります。私はそれを難なくやっています。ソフトウェアを作成するためのツールがあればできることはたくさんあり、その可能性は本当に無限大です。
      4:
        text: 次の1時間では、独自のダンスパーティーをプログラミングするところからコンピューター サイエンスを始めます。ヒットした楽曲と素晴らしいダンサーのチームを集めたので、一緒に楽しく踊りましょう。
      5:
        text: プログラムのブロックを使用して、さまざまなダンサーを選択し、ダンスの動きを変更し、音楽に反応させ、インタラクティブにします。
      6:
        text: 画面が3つの主要部分に分割されていますね。左側はプレイスペース。ここにダンサーが現れます。
      7:
        text: 中央のエリアがツールボックスです。レッスンを進めるにつれ、このスペースで新しいコードブロックが利用できるようになります。
      8:
        text: 右側のスペースはワークスペースです。ブロックをツールボックスからワークスペースにドラッグして、プログラムを構築できます。
      9:
        text: 各レベルの説明は、画面の上部に表示されています。ヒントが必要な場合は、電球マークをクリックしてください。
      10:
        text: まず、この赤いブロックで新しいダンサーを作ってみましょう。まず、ツールボックスの外にドラッグし、このオレンジ色の「セットアップ」ブロックの下にくっつけます。このダンサーは猫です。
      11:
        text: これで、ダンサーがプレイスペースのどこに表示されるかを変更することもできます。
      12:
        text: プレイスペースの上には、音楽を選ぶためのメニューがあります。選べる曲がたくさんあるので、お気に入りを見つけて楽しんでください。プレイスペースの下には
          [実行] ボタンがあります。[実行] を押すと、プログラムのダンサーがプレイスペースに表示され、音楽が再生されます。
      13:
        text: ぜひお試しください！行き詰まっていると感じても安心してください。体を起こして動くだけで、気付かないうちに自分だけのダンスパーティーができ上がります。では、何を作りましょうか？
    hoc_dance_events_2019:
      1:
        text: 'Hour of Code | ダンスパーティー: イベント'
      2:
        text: 私はエリンです。Code.orgのソフトウェアエンジニアで、ダンスパーティーの構築を手伝いました。
      3:
        text: さまざまなダンスの動きを音楽に合わせて発生させるには、「イベント」と呼ばれるものを使うことができます。イベントは、何かが起こるのを待って、すぐに反応するようにプログラムに指示します。
      4:
        text: イベントの例としては、マウスをクリックしたり、矢印ボタンやスクリーンを軽くタッチしたりするのをリッスンすることが挙げられます
      5:
        text: ここでは、画面の矢印ボタンまたはキーボードのキーを押すと、ダンサーが動きを実行するようにプログラムします。
      6:
        text: "「上矢印を押したとき」(when up arrow) イベントブロックを使って、「一度行う」(do once) ブロックをそれにくっつけることができます。誰かが上矢印キーを押すと、「上矢印キー」ブロックにくっついたプログラムが実行されます。どのダンスの動きにしましょうか？"
      7:
        text: 選択するダンサーのタイプが、「設定」ブロック内で作成したダンサーの1つと一致していることを確認してください。一致していないと、何も起こりません。
      8:
        text: 最終的には、このようなイベントをさらに作成して、ダンサーに各キーで異なる動きをさせることができます。試してみてください。数行のプログラムで、独自のインタラクティブなダンスを作成できます。
    hoc_dance_measures_2019:
      1:
        text: 'Hour of Code | ダンスパーティー: 小節'
      2:
        text: アロエ・ブラックです。私はシンガー・ソングライター、エンターテイナーです。コンピューター サイエンスは未来があるので、本当に学ぶ価値があると思います。また、文字通り自分の生活をコントロールしているテクノロジーを操ることができるようになることが重要だと思います。
      3:
        text: これから使用するイベントは、曲の変更を待ちます。その変更により、ダンサーは新しいダンスをするようになります。
      4:
        text: プロのダンサーは、曲のビートを数えて振り付けを練習します。音楽では、小節は特定の数のビートを指します。最も人気のある曲では、小節は4ビート長です。
      5:
        text: ダンサーを自由にするには、緑色のイベントブロックが必要です。このイベントブロックは、「4小節後」と言います。
      6:
        text: 紫色の「永久に実行」ブロックをドラッグすると、ダンサーが行うダンスを選択できます。それは「4小節後」イベントブロックの下にあるため、ダンサーは曲の4小節分待ってからダンスを開始します。
      7:
        text: 表示エリアの上部にある小節カウンターに注意してください。
      8:
        text: ダンスコードをトリガーするイベントを見て聞いてください。そして合図があり次第すぐに、ダンサーが動き始めます。
    hoc_dance_properties_2019:
      1:
        text: 'Hour of Code | ダンスパーティー: プロパティ'
      2:
        text: 私の名前はマリアです。ワシントン大学の3年生で、Amazonのフューチャーエンジニアです。
      3:
        text: 私はコンピューター サイエンスが大好きです。問題解決と批判的思考が組み込まれていて、何時間もの作業を何かに費やした後、本当に素晴らしい感覚に浸れ、やってよかったなと思えるからです。
      4:
        text: ここまで、さまざまな種類のダンサーでプレイする機会があり、さまざまな種類のダンスの動きを行うようにプログラムしました。けれども、このような動きは実際にはどのように機能するのでしょうか？
      5:
        text: ダンスの動きはどれも、フレームと呼ばれる一連の画像で構成されています。各フレームは前のフレームとは少し異なります。プログラムが実行されると、コンピューターは次々とフレームを表示します。ダンサーが動いているように見えるほど速く表示されます。これがすべてのアニメーションの秘密です。
      6:
        text: ダンサーの動きを変更できるだけでなく、ダンサーのプロパティも変更できます。プロパティは、画面上のダンサーの位置、ダンサーのサイズ、ダンサーの色などを説明します。
      7:
        text: ダンサーのプロパティを変更するには、「設定」ブロックを使用します。「設定」ブロックを使用して、ダンサーを小さく見せましょう。まず、「設定」ブロックをプログラムにドラッグします。
      8:
        text: 次に、変更するダンサーを選択して、画面に表示するサイズを入力します。フルサイズは100です。これより小さい数値を選択すると、ダンサーが小さくなります。ダンサーが小さいほど、遠くに見えます。
      9:
        text: "「設定」ブロックを使用して、ダンサーの寸法、回転、位置、色を変更することもできます。これらのプロパティをいじってみると、あらゆる種類の変更を加えて、曲のさまざまな部分にリンクすることができます。"
      10:
        text: 既に存在するダンサーのプロパティのみを設定できることを覚えておいてください。「セット」ブロックが「新しいダンサーを作成」（Make a
          new dancer）ブロックの後に来ることを確認してください。自由に創造力を発揮して、楽しんでください。
    hoc_dance_congrats_2019:
      1:
        text: 'Hour of Code | ダンスパーティー: パーティー・オン！'
      2:
        text: おめでとうございます！コンピューター サイエンスの基本を学習しました。これで、これらのブロックを使用して独自にデザインしたダンスパーティーを作成し、友だちと共有できます。
      3:
        text: ツールボックスを見ると、これまでに見たことのない新しいブロックが見つかります。たとえば、「レイアウト」ブロックを使用して、画面上でさまざまな方法でダンサーを配置できます。
      4:
        text: 中身を見て、新しいブロックと機能を試してみてください。お気に入りの曲に合わせて入念に考えられた振り付けを行うダンスを作ってみませんか？
      5:
        text: または友だちとダンスオフで勝負をしてみても？
      6:
        text: それとも、全く違う遊び方をしてみても？
      7:
        text: チュートリアルの最後に、あなたの作品へのリンクを友だちと共有することができます。想像力をふくらませて、楽しんでください！
