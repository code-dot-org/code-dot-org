"de":
  data:
    instructions:
      2-3 Artist 1 new_instruction: Hi, ich bin ein Künstler. Du kannst Code schreiben,
        um mich fast alles zeichnen zu lassen. Nutze ein paar Bausteine, um über die
        grauen Linien im Bild zu zeichnen. (Jede Linie ist 100 Pixel lang)
      2-3 Artist 11_instruction: 'Gib dem Stoppschild einen Rahmen, indem du ein Oktagon
        mit 8 Seiten, jede 100 Pixel lang, zeichnest. Um wieviel Grad solltest du
        drehen? (Hinweis: Was ist 360 geteilt durch 8?) '
      2-3 Artist 12_instruction: Stelle den "Wiederholen"-Baustein so ein, dass es
        einen "Kreis" malt, um den Augapfel zu beenden. Wenn jede Bewegung ein Grad
        rechts dreht, wie oft musst du wiederholen, um den Kreis zu vervollständigen?
        180? 360? 500?
      2-3 Artist 2 new_instruction: 'Dieses Haus hat eine halb fertige Wand. Jede
        Seite ist 100 Pixel lang, aber die halbfertige Wand ist nur 50 Pixel lang.
        Vervollständige die Wand. '
      2-3 Artist 2_instruction: 'Dieses Haus hat eine halb fertige Wand. Jede Seite
        ist 100 pixel lang, aber die halbfertigen Wand ist nur 50 pixel lang. Beende
        die Wand. '
      2-3 Artist 3.4_instruction: Der Sprung-Block bewegt den Künstler ohne zu zeichnen.
        Zeichne die gestrichelte Linie mithilfe sowohl des Sprung- als auch des Zeichnen-Blocks.
      2-3 Artist 3_instruction: Dieser Hut ist 100 Pixel hoch. Zeichne einen Hut,
        der 70 Pixel kleiner ist.
      2-3 Artist 3new_instruction: Der rote Hut ist 100 Pixel groß.  Zeichne den schwarzen
        Hut, der 70 Pixel kleiner ist, zu Ende. Die Breite des schwarzen Hutes beträgt
        50 Pixel.
      2-3 Artist 4_instruction: Hilf mir, das Haus für diese Katze zu vervollständigen.
      2-3 Artist 5_instruction: Ersetze diesen Code mit einem "Wiederholen" Block,
        um das gleiche Haus mit nur 3 Blöcken zu zeichnen.
      2-3 Artist 6_instruction: 'Dieses Haus braucht ein Dach! Zeichne das Dreieck.  Hinweis:
        Alle drei Seiten sind gleich lang.'
      2-3 Artist 7_instruction: 'Beende die rechte Hälfte des letzten Fensters. Jedes
        Quadrat des Fensters beträgt 25 Pixel. '
      2-3 Artist 8_instruction: Beende die Räume für jedes Tier, indem du das Rechteck
        in 2 gleich große Quadrate aufteilst. Das Rechteck ist 200 Pixel breit und
        100 Pixel hoch.
      2-3 Artist 9_instruction: Vervollständige diesen Drachen
      2-3 Artist Assessment 1_instruction: 'Prüfung: Vervollstädige den letzten Zahn:
        25 Pixel breit und 25 Pixel hoch.'
      2-3 Artist Debugging 1_instruction: Kannst du diesen Hut 100 Pixel hoch zeichnen?
      2-3 Artist Debugging 10_instruction: 'Das Steuerkreuz auf meinem Spiele-Controller
        ist zu klein. Tipp: Mache es 10 Pixel größer'
      2-3 Artist Debugging 11_instruction: Hilf mir, meine schöne Schneeflocke zu
        beenden. Wie oft muss ich es "wiederholen", um es zu beenden?
      2-3 Artist Debugging 12_instruction: Ich soll zu dieser Szene eine Ozeanwelle
        hinzufügen.  Kannst du mir helfen?
      2-3 Artist Debugging 2_instruction: 'Der Code für die drei Schnurrhaare, die
        du siehst, ist falsch. Hinweis: jedes Schnurrhaar ist 75 Pixel lang. Verbessere
        diesen Code, um die Schnurrhaare zu zeichnen.'
      2-3 Artist Debugging 3_instruction: 'Mein Boot hat ein Loch! Kannst du es stopfen,
        indem du den Winkel der Linie änderst? Hinweis: der letzte Winkel weicht um
        15 Grad ab.'
      2-3 Artist Debugging 4_instruction: Was ist das für ein Bild, das wir versuchen
        zu zeichnen? Beende es,  indem du die Punkte mit den richtigen Linien und
        Winkeln verbindest.
      2-3 Artist Debugging 5_instruction: 'Der Code für das Bein und den Fuß, die
        du siehst, ist falsch. Hinweis: Der Fuß ist zu lang, wir müssen möglicherweise
        einen Schritt (Wortspiel beabsichtigt) löschen.'
      2-3 Artist Debugging 6_instruction: Es sieht so aus, als ob ich auf einem Stuhl
        sitze, dem ein Bein fehlt. Bearbeite die Blöcke, um das Bein zu zeichnen.
      2-3 Artist Debugging 7_instruction: Es sieht aus wie C ein spiegelverkehrtes
        C. Kannst du es richtig herum drehen?
      2-3 Artist Debugging 8_instruction: Mein Windrad ist noch nicht fertig. Wie
        oft muss ich den Block wiederholen, um es zu vervollständigen?
      2-3 Artist Debugging 9_instruction: 'Der Code für diese Stem ist falsch. Hinweis:
        Der Winkel ist um 60 Grad verfehlt'
      2-3 Artist Debugging Assessment 1_instruction: 'Diese Form ist zu klein. Kannst
        du sie größer machen? Hinweis: Sie sollte auf jeder Seite 75 Pixel länger
        sein.'
      2-3 Artist Free Play_instruction: Freies Spiel! Zeichne was du willst.
      2-3 Artist Functions 1_instruction: 'Hallo. Ich bin ein Zombie-Künstler. Ich
        liebe zeichnen! Hilf mir, die quadratischen Gläser zu zeichnen.  Hinweis:
        die Brücke zwischen den Gläsern ist 25 Pixel kürzer als die  Länge der Quadrate.'
      2-3 Artist Functions 10_instruction: Hier sind zwei Funktionen, um ein großes  und
        ein kleines Zahnrad zu zeichnen. Verwende sie, um das Innere einer Maschine
        zu zeichnen!
      2-3 Artist Functions 11.5_instruction: Hier ist die gleiche "Zeichne ein Sechseck"-Funktion.
        Was passiert, wenn du sie nur mit 60 Grad jedes Mal aktivierst?
      2-3 Artist Functions 11_instruction: Wir haben die Funktion "zeichne ein Quadrat",
        um "ein Sechseck zeichnen" umbenannt, aber es zeichnet immer noch Quadrate!
        Kannst du die Funktion "zeichnen ein Sechseck" ändern, um ein Sechseck mit
        50 Pixel-Seiten zu zeichnen, und  das Bild mithilfe der Funktion zeichnen?
      2-3 Artist Functions 12_instruction: 'Funktionen sind wirklich toll für das
        mehrfache Zeichnen von komplexen Dingen. Benutze die Funktion "zeichne eine
        Blume", um das restliche Feld mit Pflanzen zu füllen! (Hinweis: die Pflanzen
        haben 100 Pixel Abstand)  '
      2-3 Artist Functions 13_instruction: Wir haben dir vier Funktionen zur Verfügung
        gestellt. Verwende sie innerhalb von einer oder mehreren Schleifen, um Bilder
        zu zeichnen, die du mit deinen Freunden teilen kannst. Klicke ausführen, um
        ein Beispiel zu sehen.
      2-3 Artist Functions 2_instruction: Funktionen erlauben dir, neue Blöcke zu
        definieren! Wir haben Blöcke in eine Funktion namens "zeichne ein Quadrat"
        verschoben, um ein Quadrat zu zeichnen. Nutze die Funktion "zeichne ein Quadrat",
        um die Gläser zu erstellen? Die Quadrate sind 75 Pixel auseinander.
      2-3 Artist Functions 3_instruction: Bearbeite die Funktion, um ein Quadrat mit
        einer Seitenlänge von 115 zeichnen und zeichne die  Gläser größer. Die Quadrate
        sind jetzt 45 Pixel auseinander.
      2-3 Artist Functions 4_instruction: Verwende den "Wiederholen"-Block, um diese
        3 Quadrate zu zeichnen.
      2-3 Artist Functions 7_instruction: 'Verwende die Funktion "zeichnen ein Haus",
        um zwei Häuser mit zwei verschiedenen Parametern zu zeichnen. (Hinweis: das
        erste Haus ist 100 Pixel).'
      2-3 Artist Functions 9_instruction: Hier ist eine Schneeflocken-Funktion. Experimentiere,
        um damit eine Winterszene zu erstellen! Dies ist ein freies Spiel-Level, es
        gibt keine Aufgaben zu lösen. Viel Spass!
      2-3 Artist Loops 1_instruction: Zeichne ein Sechseck mit Seiten, die 100 Pixel
        lang sind, um das Bild zu beenden? Bedenke, das du nur 60 Grad drehen mußt!
      2-3 Artist Loops 10_instruction: Was passiert mit dem Design, wenn wir unseren
        letzten Schritt vorwärts halb so lang machen?
      2-3 Artist Loops 11_instruction: Jetzt lass uns * noch eine * Schleife um unsere
        ganze Schöpfung legen!  Vergiß nicht, einen Winkel am Ende der äußeren Schleife
        hinzuzufügen.
      2-3 Artist Loops 2_instruction: Jetzt verwende einen Wiederholen-Block, um die
        Zelle zur Muschel zu machen.
      2-3 Artist Loops 4_instruction: Möchtest du sehen, was passiert, wenn wir diese
        Form immer und immer wieder mit einer Schleife wiederholen?
      2-3 Artist Loops 5_instruction: Jetzt nehmen wir an der Schleife eine kleine
        Änderung vor und sehen, wie unterschiedlich unser Bild wird.
      2-3 Artist Loops 6_instruction: Füge eine weitere Bewegung und eine weitere
        Drehung in der Schleife hinzu und sieh, wie sich dein Design ändert.
      2-3 Artist Loops 7_instruction: Wir können Schleifen verwenden, um alle Arten
        von Vielecken zu zeichnen.  Erstelle eine Raute innerhalb dieses Sechsecks!
      2-3 Artist Loops 8_instruction: Lass uns beide Elemente in einer Schleife verwenden.
      2-3 Artist Loops 9_instruction: "Wir werden die gleichen Elemente in einer Schleife
        benutzen, aber jetzt werden wir etwas Abstand dazwischen hinzufügen. \r Verwende
        den gleichen Code wie zuvor, aber füge einen Schritt nach vorn am Ende der
        äußeren Schleife ein."
      2-3 Artist Loops New 1_instruction: Wir zeichnen diesen Roboterkopf! Schaffst
        du ein Quadrat mit Seiten, die 100 Pixel lang sind?
      2-3 Artist Loops New 10_instruction: Jetzt lass uns einen Haufen V's miteinander
        verbinden,  sie in einer Schleife zeichnend.
      2-3 Artist Loops New 11_instruction: Diesmal zeichnen wir es 24 mal. Füge eine
        Linkskurve von 30 Grad diesem Code zu und lege sie alle in einen Wiederholen-Block.
      2-3 Artist Loops New 12_instruction: Zeichne einen Diamanten mit einer Seitenlänge
        von 100 Pixel.
      2-3 Artist Loops New 13_instruction: Zeichne nun den Diamanten 3 mal in einer
        Schleife.
      2-3 Artist Loops New 14_instruction: Jetzt lass uns den Diamant 10 Mal zeichnen,
        aber mit einer  90 Grad-Drehung zwischen jedem Diamant.
      2-3 Artist Loops New 15_instruction: Zeichne etwas Lustiges.
      2-3 Artist Loops New 2_instruction: Hier ist Teil des Codes, den du verwendet
        hast, um das Quadrat zu zeichnen. Was passiert, wenn du den Wiederholen-Block
        verwendest, um diesen Code 4 Mal ausführen?
      2-3 Artist Loops New 9_instruction: Zeichne ein einfaches V, wo beide Seiten
        50 Pixel lang sind, um den Pfeil zu vervollständigen.
      2-3 Artist Match Hex Pic_instruction: 'Match: Hilf, das Sechseck zu beenden.'
      2-3 Artist Match Rho Pic_instruction: 'Match: Ergänze den fehlenden Code.'
      2-3 Artist Match Sq Pic_instruction: 'Spiel: Ergänze den fehlenden Code'
      2-3 Artist Match Tri pic_instruction: 'Passend: Füge den fehlenden Code ein.'
      2-3 Artist Nested Loops 1_instruction: "Du hast bereits Schlaufen gebraucht
        um Formen zu zeichnen.\nWusstest du, das du auch eine Schlaufe in einer anderen
        Schlaufe setzten kannst?\r\nWiederhole diesen Code-Baustein 3 mal um das Muster
        zu zeichnen."
      2-3 Artist Nested Loops 10_instruction: Wiederhole diesen Code 12 mal um das
        Muster zu zeichen.
      2-3 Artist Nested Loops 11_instruction: Wiederhole diesen Code 4 mal um das
        Muster zu vervolständigen und drehe es um 90 Grad nach jedem Kreis.
      2-3 Artist Nested Loops 12_instruction: Wiederhole diesen Code 12 mal um die
        Wirbel zu vervollständigen.
      2-3 Artist Nested Loops 2_instruction: Jetzt soll das Dreieck 6 mal durchlaufen
        werden. Nach jedem Dreiecksdurchlauf musst du eine 60 Grad- Drehung ausführen,
        bevor du das nächste zeichnest.
      2-3 Artist Nested Loops 3_instruction: Du musst das Dreieck 12 mal durchlaufen,
        um dieses Muster zu zeichnen. Teile die Gradzahl eines Kreises (360) durch
        die Zahl der Figuren, die du zeichnest (12), um herauszufinden, um wieviel
        Grad du drehen musst, nachdem eine Figur gezeichnet wurde.
      2-3 Artist Nested Loops 4_instruction: 'Durlaufe diesen Diamanten 12 mal, um
        eine Blume zu zeichnen. Hinweis: 12 Diamanten sind vergleichbar mit den 12
        Dreiecken, die du gemacht hast - wieviel Grad musste die Drehung betragen,
        die Du nach jeder Figur ausführen musstest?'
      2-3 Artist Nested Loops 5_instruction: Setze mithilfe einer verschachtelten
        Schleife Fenster in das Gebäude. Die Fenster sind 20 Pixel lang und liegen
        20 Pixel auseinander.
      2-3 Artist Nested Loops 6_instruction: Dieser Dinosaurier hat 8 Spitzen am Schwanz;
        jede Spitze ist 30 Pixel lang. Das Dreieck muss 8 mal durchlaufen werden,
        aber sorge dafür, dass es sich nach jedem Durchlauf vorwärts bewegt.
      2-3 Artist Nested Loops 7_instruction: Wiederhole dieses Dreieck 10 mal, um
        die Sonne zu zeichnen. Nach jedem Durchlauf muss eine Verschiebung und eine
        Drehung erfolgen. Du kannst herausfinden, wie groß die Drehung sein muss,
        indem du die Gradzahl eines Kreises durch die Anzahl der Figuren teilst, aus
        denen die Sonne besteht.
      2-3 Artist Nested Loops 8_instruction: Wir wollen nun etwas Gras zu unserem
        Bild hinzufügen. Die Grasbüschel liegen 50 Pixel auseinander.
      2-3 Artist Nested Loops 9_instruction: Wir vollenden das Bild, indem wir eine
        Blume hinzufügen. Wiederhole den Diamanten 12 Mal und zeichne so deine Blume.
      2-3 Artist Nested Loops Free Play_instruction: Freies Spiel, zeichne irgendetwas
        cooles mit verschachtelten Schleifen.
      2-3 Bee Conditionals 1_instruction: Hallo! Ich bin eine Biene. Hilf mir Nektar
        aus der Blüte zu holen.
      2-3 Bee Conditionals 10_instruction: "Lila Blüten können entweder 1 oder 0 Nektar
        haben. Pass auf, dass kein Nektar von einer lila Blüte gesammelt wird, wenn
        sie keinen hat.\r\n\n\n\n"
      2-3 Bee Conditionals 11_instruction: Sammle den Nektar dort, wo die Blüten Nektar
        haben.
      2-3 Bee Conditionals 12_instruction: Benutze eine Schleife, um dies zu prüfen
        und sammle den Nektar aller dieser Blüten.
      2-3 Bee Conditionals 13_instruction: "Sammle Nektar und mache Honig. Hinweis:
        \nWas passiert, wenn du die \"Wenn Necktar\"- Bedingung auf eine rote Blüte
        anwendest? Kannst du dies mit einer Schleife vervollständigen?\n"
      2-3 Bee Conditionals 14_instruction: Sammle Necktar und mache Honig. Achte darauf,
        dass du keinen Necktar aus einer lila Blüte sammelst, wenn sie keinen hat.
      2-3 Bee Conditionals 15_instruction: Sammle Nektar von allen vier Blumen.
      2-3 Bee Conditionals 2_instruction: Hallo, ich bin eine Biene. Hilf mir, den
        ganzen Necktar aus den Blüten zu sammeln. Benutze eine Schleife.
      2-3 Bee Conditionals 3_instruction: Hilf mir, den ganzen Necktar aus den Blüten
        zu sammeln. Benutze eine Schleife.
      2-3 Bee Conditionals 4_instruction: Hallo, ich bin eine Biene. Hilf mir, den
        ganzen Necktar aus den Blüten zu sammeln und den ganzen Honig zu machen.
      2-3 Bee Conditionals 5_instruction: Lila Blüten können entweder 1 oder 0 Necktar
        haben, aber du weist nicht, was zutrifft!  Pass auf, dass kein Nektar von
        einer lila Blüte gesammelt wird, wenn sie keinen hat. Prüfe, ob Necktar gleich
        1 ist, indem du den Wenn- Baustein benutzt.
      2-3 Bee Conditionals 6_instruction: Überprüfe diese Blüte mit einem "Wenn"-
        Baustein um zu erkennen, ob Necktar zur Verfügung steht.
      2-3 Bee Conditionals 7_instruction: Sammle Necktar von jeder Blüte, wenn sie
        welchen hat.
      2-3 Bee Conditionals 8_instruction: |
        Auf diesem Feld gibt es rote und lila Blüten.
        Rote Blüten haben eine bekannte Necktarmenge, während die der lila Blüten unbekannt ist. Sammle den ganzen Necktar.
      2-3 Bee Conditionals 9_instruction: Sammle den ganzen Nektar von allen Blumen.
      2-3 Bee Conditionals Assessment 1_instruction: 'Beurteilung: Sammle den ganzen
        Necktar. Achte darauf, dass du keinen Necktar aus einer Blüte sammelst, wenn
        sie keinen hat.'
      2-3 Bee Debugging 1_instruction: Diese Bausteine nerven mich wirklich. Korrigiere
        den/die Fehler, sammle den ganzen Necktar und mache den ganzen Honig.
      2-3 Bee Debugging 10_instruction: Diese Bausteine nerven mich wirklich. Korrigiere
        den/die Fehler, sammle den ganzen Necktar und mache den ganzen Honig.
      2-3 Bee Debugging 2_instruction: Diese Bausteine nerven mich wirklich. Korrigiere
        den/die Fehler, sammle den ganzen Necktar und mache den ganzen Honig.
      2-3 Bee Debugging 3_instruction: Diese Bausteine nerven mich wirklich. Korrigiere
        den/die Fehler, sammle den ganzen Necktar und mache den ganzen Honig.
      2-3 Bee Debugging 4_instruction: Diese Bausteine nerven mich wirklich. Korrigiere
        den/die Fehler, sammle den ganzen Necktar und mache den ganzen Honig.
      2-3 Bee Debugging 5_instruction: Diese Bausteine nerven mich wirklich. Korrigiere
        den/die Fehler, sammle den ganzen Necktar und mache den ganzen Honig. Du kannst
        jetzt Schritt für Schritt "Ausführen" benutzen.
      2-3 Bee Debugging 6_instruction: Diese Bausteine nerven mich wirklich. Korrigiere
        den/die Fehler, sammle den ganzen Necktar und mache den ganzen Honig.
      2-3 Bee Debugging 7_instruction: Diese Bausteine nerven mich wirklich. Korrigiere
        den/die Fehler, sammle den ganzen Necktar und mache den ganzen Honig.
      2-3 Bee Debugging 8_instruction: Diese Bausteine nerven mich wirklich. Korrigiere
        den/die Fehler, sammle den ganzen Necktar und mache den ganzen Honig.
      2-3 Bee Debugging 9_instruction: Diese Bausteine nerven mich wirklich. Korrigiere
        den/die Fehler, sammle den ganzen Necktar und mache den ganzen Honig.
      2-3 Bee Debugging Assessment 1_instruction: 'Bewertung: Diese Bausteine nerven
        mich wirklich. Korrigiere den/die Fehler, sammle den ganzen Necktar und mache
        den ganzen Honig.'
      2-3 Bee Functions 1_instruction: Funktionen sind Code- Bausteine, die einen
        Auftrag ausführen. Benutze die "Hole 2 Necktar"- Funktion, um Necktar von
        jeder Blüte zu sammeln.
      2-3 Bee Functions 10_instruction: Lila Blüten haben entweder 1 oder 0 Nektar.  Erstelle
        eine Funktion, die Nektar nur aus den lila Blüten sammelt, die Nektar haben.
      2-3 Bee Functions 2_instruction: Funktionen sind Codeblöcke, die einen Auftrag
        ausführen. Verwende die "hole 5"- Funktion, um gleichzeitig 5 mal Nektar zu
        holen. Stelle sicher, dass eine Schleife verwendet wird, die eine optimale
        Blockzählung ermöglicht.
      2-3 Bee Functions 3_instruction: Sammle den ganzen Nektar von allen Blumen.
      2-3 Bee Functions 4_instruction: Die "bewege und hole Necktar"- Funktion dreht
        die Biene, sammelt Necktar und bringt die Biene an den Ausgangsort zurück.
        Benutze die Funktion, um den ganzen Necktar zu sammeln.
      2-3 Bee Functions 5_instruction: |
        Die Blüten haben jetzt mehr Necktar.
        Bearbeite die gegebene Funktion so, dass sie 4 Portionen Necktar sammelt und benutze sie, um den ganzen Necktar von den Blüten zu sammeln.
      2-3 Bee Functions 6_instruction: Jetzt benutze dieselbe Funktion, um Necktar
        von den drei Blüten zu sammeln.
      2-3 Bee Functions 7_instruction: Die Blüten sind jetzt weiter weg. Bearbeite
        die gegebene Funktion und benutze sie, um den ganzen Necktar aus den Blüten
        zu sammeln.
      2-3 Bee Functions 8_instruction: Erzeuge deine eigene Funktion, die 7 Portionen
        Necktar holt, nach vorn geht  7 mal Honig macht. Benutze die Funktion, um
        bei jeder Blüte Necktar zu sammeln und bei jeder Wabe Honig zu machen.
      2-3 Bee Functions 9_instruction: Erzeuge deine eigene Funktion, die einen Weg
        entlanggeht, Necktar holt, Honig macht und dann die Biene zum Anfang des Weges
        zurückbringt.
      2-3 Bee Functions Assessment 1_instruction: 'Bewertung: Benutze die gegebene
        Funktion, um von jeder Blüte Necktar zu sammeln.'
      2-3 Bee Functions Assessment 2_instruction: 'Bewertung: Erzeuge eine Funktion,
        mit der man gleichzeitig 3 mal Honig machen kann.'
      2-3 Bee Loops 1_instruction: 'Jede Blüte enthält eine Einheit Necktar. Sammle
        Necktar von jeder Blüte. '
      2-3 Bee Loops 10_instruction: Kannst Du eine innerhalb zwei anderer Schleifen
        while-Schleife benutzen, um den ganzen Necktar zu sammeln?
      2-3 Bee Loops 11_instruction: Benutze while- Schleifen, um den ganzen Necktar
        aller Blumen auf diesem Feld zu sammeln.
      2-3 Bee Loops 12_instruction: Benutze while- Schleifen, um den ganzen Necktar
        aller Blumen auf diesem Feld zu sammeln.
      2-3 Bee Loops 13_instruction: 'Wissenstest: Benutze den Repeat-Block um den
        gesamten Nektar einzusammeln.'
      2-3 Bee Loops 1A_instruction: 'Hi, bin ich eine Biene. Hilfst du mir den Blütennektar
        zu sammeln? '
      2-3 Bee Loops 2_instruction: Benutze eine Schleife, um den Necktar zu sammeln
        und Honig zu machen.
      2-3 Bee Loops 2A_instruction: Kannst du diese Aufgabe mit einer Schleife vereinfachen?
      2-3 Bee Loops 3_instruction: Sammle Necktar aus jeder Blüte und mache Honig
        bei jeder Wabe.
      2-3 Bee Loops 3A_instruction: Kannst du eine Schleife verwenden um den ganzen
        Nektar einzusammeln?
      2-3 Bee Loops 3B_instruction: Verwende nun den Wiederhole-Baustein um den ganzen
        Nektar aufzusammeln und daraus Honig herzustellen.
      2-3 Bee Loops 4_instruction: Benutze eine ähnliche Schleife wie in der letzten
        Aufgabe, aber arbeite eine Drehung ein.
      2-3 Bee Loops 4A_instruction: Versuche nun diese Sequenz mit Hilfe einer Schleife
        dreimal zu wiederholen. Vergiss nicht am Schluss Honig zu erzeugen!
      2-3 Bee Loops 5_instruction: Benutze eine Schleife, um die Stufen herabzusteigen
        und den Necktar zu sammeln.
      2-3 Bee Loops 6_instruction: Benutze eine Schleife, um Necktar von jeder Blüte
        zu sammeln und Honig bei jeder Wabe zu machen.
      2-3 Bee Loops 7_instruction: Füge diese Bausteine in eine Schleife ein, um Honig
        von jeder Blüte zu sammeln.
      2-3 Bee Loops 8_instruction: 'Diese lila Blüten haben eine unbekannte Menge
        Necktar. Benutze die "while Necktar"- Schleife, um den ganzen Necktar zu sammeln.
        Diese Schleife wird solange durchlaufen, wie die Bedingung - in diesem Fall:
        Necktar > 0 - wahr ist.'
      2-3 Bee Loops 9_instruction: Die while- Schleife kann dasselbe bewirken wie
        eine if- Anweisung in einer Schleife. Füge eine while- Schleife zu dem Code
        hinzu, so dass dieselbe Aufgabe erledigt wird.
      2-3 Bee Loops Assessment 1_instruction: Bewertung - Benutze eine while- Schleife,
        um den ganzen Necktar dieser Blüte zu sammeln.
      2-3 Maze 1_instruction: 'Kannst du mir helfen, das freche Schwein zu fangen?
        Stecke ein paar "vorwärts bewegen"- Bausteine zusammen und drücke auf "ausführen". '
      2-3 Maze 10_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das
        TNT)
      2-3 Maze 11_instruction: Hol mir die Blüte, ich bin hungrig! Wie oft musst Du
        den Block wiederholen?
      2-3 Maze 12 (copy 1)_instruction: 'Kannst du die vorige Bearbeitung durch eine
        Lösung ersetzen, in der nur zwei Bausteine verwendet werden? (Hinweis: Erstelle
        eine Schleife, die einen "wiederhole ...-mal" - Baustein enthält.)'
      2-3 Maze 12 (copy 2)_instruction: 'Kannst du die vorige Bearbeitung durch eine
        Lösung ersetzen, in der nur zwei Bausteine verwendet werden? (Hinweis: Erstelle
        eine Schleife, die einen "wiederhole ...-mal" - Baustein enthält.)'
      2-3 Maze 12 (old)_instruction: Hole mir das Schwein, jetzt mit dem "wiederhole
        ... -mal"- Baustein!
      2-3 Maze 12_instruction: |
        Kannst du diese fünf Bausteine durch nur zwei Bausteine ersetzen?
        (Hinweis: Erstelle eine Schleife mit einem "wiederhole ...-mal"- Baustein.)
      2-3 Maze 13 (old)_instruction: Hole mir das Schwein, jetzt mit dem "Wiederholen
        bis"- Baustein!
      2-3 Maze 13_instruction: Hole mir das Schwein mit nur zwei Blöcken.
      2-3 Maze 14 (old)_instruction: Hole mir das Schweint mit dem "Wiederholen bis"-
        Baustein!
      2-3 Maze 14_instruction: Hole mir die Sonnenblume! (Wo ist dieser "wiederhole
        ...-mal"- Baustein, wenn ich ihn brauche?)
      2-3 Maze 15 (old)_instruction: Hole mir das Schweint mit dem "Wiederholen bis"-
        Baustein!
      2-3 Maze 15_instruction: Benutze zwei Schleifen, um das Schein zu holen; benutze
        dabei weniger Bausteine.
      2-3 Maze 16 (old)_instruction: Hole mir das Schweint mit dem "Wiederholen bis"-
        Baustein!
      2-3 Maze 16 before_instruction: Bring mich zum Schwein.
      2-3 Maze 16_instruction: Hole mir die Sonnenblume. Lass die Anweisungsfolge
        in einer Schleife laufen!
      2-3 Maze 2_instruction: Dieses Schwein zerzaust meine Federn. Hilf mir, zu ihm
        zu kommen!
      2-3 Maze 3_instruction: Finde den Weg und führe mich zu dem dummen Schwein.
        Meide das TNT, sonst fliegen die Federn!
      2-3 Maze 4_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das TNT)
      2-3 Maze 5_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das TNT)
      2-3 Maze 6_instruction: Bleib ruhig und hilf mir, das Schwein zu suchen. Sonst
        werde ich böse!
      2-3 Maze 7_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das TNT)
      2-3 Maze 8_instruction: Bring mich zum Schwein!
      2-3 Maze 9_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das TNT)
      2-3 Maze Loops 1_instruction: Kannst du mich zu dem Schwein bringen indem du
        5 Baustein benutzt?
      2-3 Maze Loops 17_instruction: Bring mich zu der Sonnenblume!
      2-3 Maze Loops 18_instruction: Bring mich zu der Sonnenblume!
      2-3 Maze Loops 19_instruction: Bring mich zu der Sonnenblume!
      2-3 Maze Loops 20_instruction: Bring mich zu der Sonnenblume!
      2-3 Maze Loops 21_instruction: Bring mich zu der Sonnenblume!
      2-3 Maze Loops Assessment 1_instruction: 'Bewertung: Hole mir die Sonnenblume
        und benutze dabei 5 Bausteine! '
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: Bring mich zum Schwein! Welche Blöcke wurden wiederholt?
      2-3 Maze sq10v2_instruction: Bring mich zum Schwein! Welche Blöcke wurden wiederholt?
      2-3 maze sq11_instruction: Bring mich zum Schwein! Welche Blöcke wurden wiederholt?
      2-3 maze sq12_instruction: Kannst du die vorige Lösung durch eine Schleife ersetzen,
        indem du einen "wiederhole ...-mal"- Baustein verwendest?
      2-3 maze sq13_instruction: |
        Lieber Mensch. Ich Zombie. Muss ... zur Sonnnenblume.
        Erstelle eine Schleife mit dem "Wiederholen bis"- Baustein.
      2-3 maze sq14_instruction: Kannst du die Sonnenblume holen und dabei nur vier
        Bausteine benutzen?
      2-3 maze sq15_instruction: Kannst du die Sonnenblume holen und dabei nur fünf
        Bausteine benutzen?
      2-3 maze sq16_instruction: Okay, das ist ähnlich, aber etwas anders. Kannst
        du das mit nur fünf Bausteinen machen?
      2-3 Maze sq2_instruction: Finde den Weg und führe mich zu dem dummen Schwein.
        Meide das TNT, sonst fliegen die Federn!
      2-3 Maze sq3_instruction: Führe mich zu dem grünen Bösewicht! (Achte auf das
        TNT)
      2-3 Maze sq4_instruction: Bleib ruhig und hilf mir, das Schwein zu suchen. Sonst
        werde ich böse!
      2-3 Maze sq5_instruction: Bringe mich zu dem Schwein! Wie oft musst du eine
        Anweisung (Baustein) wiederholen?
      2-3 Maze sq6_instruction: 'Kannst du die vorige Bearbeitung durch eine Lösung
        ersetzen, in der nur zwei Bausteine verwendet werden? (Hinweis: Erstelle eine
        Schleife, die einen "wiederhole ...-mal" - Baustein enthält.)'
      2-3 Maze sq7_instruction: Bringe mir den grünen Eindringling. Benutze nur zwei
        Bausteine.
      2-3 Maze sq8_instruction: Hole mir das Schwein! (Wo ist dieser "wiederhole ...-mal"-
        Baustein, wenn ich ihn brauche?)
      2-3 Maze sq9_instruction: Erstelle Schleifen um das Schwein zu fangen und benutze
        dabei weniger Bausteine.
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: Hilf dem Vogel, das freche Schwein zu fangen, in dem
        du es vorwärts bewegst
      4-5 Artist 1_instruction: 'Hilf mir, mein Kästchen zu Ende zu zeichnen. (Jede
        Linie ist 300 Pixel lang) '
      4-5 Artist 10_instruction: Drück auf "ausführen", um den Code auszuprobieren.
        Dann wiederhole ihn so oft, bis die Zeichnung fertig ist. Die Farben sind
        jedes Mal anders.
      4-5 Artist 11_instruction: Vervollständige die grünen Linien. Die Linien sind
        300 Pixel lang und liegen 15 Pixel auseinander.
      4-5 Artist 2_instruction: Kannst du diesen Code in eine Schleife einschließen
        und so das Quadrat vervollständigen?
      4-5 Artist 3.5_instruction: Okay, versuche herauszufinden was passiert, wenn
        du diesen Code ausführen lässt (oder drücke auf "ausführen", um es auszuprobieren).
        Anschließend wiederhole dies so lange, bis die Zeichnung fertig ist. Die Farben
        werden (höchstwahrscheinlich) jedes mal anders sein.
      4-5 Artist 3_instruction: |
        Das rechteckige Blumenbeet hat einen Umfang von 600.
        Die lange Seite hat eine Länge von 200. Zeichne das Rechteck.
      4-5 Artist 4_instruction: Wieviel Grad hat ein Kreis? Schließe die Bausteine
        in eine Schleife ein, um einen Farbenkreis zu erstellen.
      4-5 Artist 5_instruction: Welchem Winkel verwendest du?
      4-5 Artist 6_instruction: Dieses gleichseitige Dreieck hat die Winkel 60, 60,
        60 Grad. Jede Seitenlänge beträgt 200 Pixel. Vervollständige die Zeichnung.
      4-5 Artist 7_instruction: Dieses Dreieck hat die Winkel 30, 60, 90 Grad. Die
        Länge der schrägen Seite beträgt das doppelte der Höhe (100 Pixel). Vervollständige
        die Zeichnung.
      4-5 Artist 8_instruction: Die Mittellinie eines Fußballfeldes steht senkrecht
        auf den Seitenlinien. Dieses Feld hat einen Umfang von 800 Pixeln und es ist
        240 Pixel lang. Wie breit ist es? Zeiche die Begrenzungslinien und die Mittellinie.
      4-5 Artist 9_instruction: Zeiche die andere Hälfte, so dass der Entwurf symmetrisch
        ist. Die Dreiecke sind gleichseitig und 50 Pixel lang.
      4-5 Artist Assessment 1_instruction: 'Bewertung: Benutze eine Schleife, um ein
        gleichseitiges Dreieck zu zeichnen. Jede Seite hat eine Länge von 300 Pixeln.'
      4-5 Artist For Loops 1_instruction: Setze die Zahlen 1 bis 10 in die "Breite"-
        Bausteine ein und führe den Code aus.
      4-5 Artist For Loops 11_instruction: 'Vervollständige den "Für"-Baustein, sodass
        er wie folgt zählt: 0, 20, 40, 60, 80... 200.'
      4-5 Artist For Loops 12_instruction: 'Was passiert, wenn du die "Für"- und "Bis"-Zahlen
        miteinander tauscht? Vervollständige den "Für"-Baustein, sodass er wie folgt
        zählt: 200, 180, 160, 140, 120... 0. '
      4-5 Artist For Loops 13_instruction: 'Dieser Lösungsansatz beginnt ohne "for"-
        Schleife und es werden zu viele Bausteine! benötigt. Benutze einen "for"-
        Baustein, um die Spirale zu vervollständigen. Hinweis: Die Länge des letzten
        Strichs beträgt 250 Pixel.'
      4-5 Artist For Loops 14_instruction: 'Jemand hat hat bereits mit dem Code begonnen
        und dann festgestellt, dass es einen schnelleren Weg geben muss. Nutze den
        "Für"-Baustein, um die bereits vorhandenen Bausteine auszutauschen und zeichne
        die Dreiecksspirale zu Ende. (Hinweis: Die letzte Linie ist 300 Pixel lang.'
      4-5 Artist For Loops 15_instruction: 'Jemand hat hat bereits mit dem Code begonnen
        und dann festgestellt, dass es einen schnelleren Weg geben muss. Nutze den
        "Für"-Baustein, um die bereits vorhandenen Bausteine auszutauschen und zeichne
        die Sechsecksspirale zu Ende. (Hinweis: Die letzte Linie ist 200 Pixel lang.'
      4-5 Artist For Loops 3_instruction: Wie können wir von 1 bis 50 zählen? Ändere
        den "Für"-Baustein.
      4-5 Artist For Loops 4_instruction: Vervollständige den "for"- Baustein, so
        dass er in 1er- Schritten von 1 bis 10 zählt.
      4-5 Artist For Loops 6_instruction: Zeichne Quadrate mit den Seitenlängen 50,
        60, 70, 80 und 90 Pixeln. Du musst die "Zeichne ein Quadrat"- Funktion fünf
        mal benutzen.
      4-5 Artist For Loops 7_instruction: 'Zeichne dieselben Quadrate, aber benutze
        einen "count with"- Baustein um die Größe zu ändern. Positioniere den "Zähler"-
        Baustein in der "Zeichne ein Quadrat"- Funktion. Hinweis: Er gehört zur Kategorie
        "Variablen".'
      4-5 Artist For Loops 8_instruction: Kannst du das Programm vervollständigen,
        indem in eine "for"- Schleife einschließt, die in 10er - Schritten von 200
        bis 10 zählt? Du findest den "for"- Baustein in der "Schleifen"- Kategorie.
      4-5 Artist For Loops 9_instruction: |
        Diese Kreise haben die Größe 5, 10, 15, 20,
        25, 30, und 35. Zeichne die Kreise. Benutze einen "for"-Baustein.
      4-5 Artist Free Draw 1_instruction: Freies Zeichnen! Zeichne, was deine Inspiration
        dir eingibt.
      4-5 Artist Functions 1_instruction: Benutze eine "wiederholen"- Schleife, um
        dieses Dreieck zu zeichnen.
      4-5 Artist Functions 10a_instruction: Füge diesen Code in die "Zeichne eine
        Schneeflocke"- Funktion ein und ersetze die 50 durch den Parameter "Größe".
        Die Funktion ist schon einmal aufgerufen worden, um eine 100- Pixel- Schneeflocke
        zu machen.
      4-5 Artist Functions 10b_instruction: 'Benutze die "Zeichne eine Schneeflocke"-
        Funktion um Schneeflocken verschiedener Größe zu erstellen. Hinweis: die erste
        Schneeflocke hat eine Länge von 25 und jede Schneeflocke ist doppelt so groß
        wie die vorige.'
      4-5 Artist Functions 11_instruction: 'Diese "Zeichne ein Sechseck"- Funktion
        benutzt die "Zeichne ein Dreieck"- Funktion. Vervollständige die Sechseck-
        Funktion. (Hinweis: Ein Sechseck hat sechs Seiten, jede ist 100 Pixel lang)'
      4-5 Artist Functions 12_instruction: 'Vervollständige die "Zeichne Wellen"-
        Funktion. Jede Welle besteht aus einer oberen und einer unteren Welle. Hinweis:
        Zeichne 5 blaue Wellen.'
      4-5 Artist Functions 13 Free play_instruction: Hier sind einige Funktionen,
        mit denen man Planeten, Sterne, Raketen und Roboter zeichnen kann. Benutze
        sie wie du es magst für Bilder, die du mit deinen Freunden teilen kannst.
      4-5 Artist Functions 14 Free play_instruction: Wir haben dir hier einge Funktionen
        zur Verfügung gestellt. Benutze sie wie du es willst innerhalb einer oder
        mehrerer Schleifen und male Bilder, die du mit deinen Freunden teilen kannst.
        Klicke auf "Ausführen", um dir ein Beispiel anzusehen.
      4-5 Artist Functions 15 Assessment_instruction: 'Bewertung: Benutze die "Zeichne
        ein Quadrat"- Funktion, um Quadrate zu erzeugen. Die Quadrate haben 50, 100,
        und 150 Pixel.'
      4-5 Artist Functions 2a_instruction: Füge diese Bausteine jetzt in eine neue
        Funktion mit dem Namen "Zeichne ein kleines Dreieck" ein und rufe sie auf.
      4-5 Artist Functions 2b_instruction: Jetzt erzeuge eine Funktion mit dem Namen
        "Zeichne ein kleines Dreieck". Benutze dabei die vorbereiteten Bausteine.
      4-5 Artist Functions 3_instruction: "Jetzt erzeuge die Funktionen \"Zeichne
        ein mittelgroßes Dreieck\" und \"Zeichne ein großes Dreieck\". Die \"Zeichne
        ein kleines Dreieck\"- Funktion ist für dich erledigt. Die Dreiecke haben
        Seitenlängen von 50 (klein), 100 (mittelgroß),\nund 150 (groß). \n"
      4-5 Artist Functions 4_instruction: Diese neue "Zeichne ein Dreieck"- Funktion
        hat einen Parameter und kann die Arbeit von allen drei vorigen Funktionen
        übernehmen. Benutze diese neue Funktion, um die gleichen Dreiecke zu zeichnen.
      4-5 Artist Functions 5_instruction: Kannst du die "Zeichne ein Dreieck"- Funktion
        in eine "Zeichne ein Quadrat"- Funktion verwandeln und so die Zeichnung ändern?
      4-5 Artist Functions 6_instruction: 'Kannst du die  Benutze die "Zeichne ein
        Quadrat"- und "Zeichne ein Dreieck"- Funktionen um ein Haus zu zeichnen. (Hinweis:
        Die Seiten des Quadrates sind 200 Pixel lang)'
      4-5 Artist Functions 6b_instruction: Benutze die "Zeichne ein Quadrat"- und
        die Dreieck- Funktionen zugleich mit anderen Blöcken, um ein Haus zu zeichnen,
        indem du sie zur "Zeichne ein Haus"- Funktion hinzufügst und aufrufst.
      4-5 Artist Functions 7_instruction: Benutze die "Zeichne ein Haus"- Funktion,
        um Häuser der Größe 100 Pixel und 50 Pixel zu zeichnen. Beide Häuser trennen
        50 Pixel.
      4-5 Artist Functions 8_instruction: Die "Zeichne eine Blume"- Funktion hat einen
        Parameter, der es gestattet, die Länge des Stiels festzulegen. Setze sie auf
        200 und sieh dir an, was passiert.
      4-5 Artist Functions 9_instruction: Zeichne diese 3 Blumen. Die Höhe der ersten
        beträgt 100, und die der folgenden Blume beträgt immer 50 Pixel mehr als die
        der vorigen. Außerdem liegen die Blumen 100 Pixel auseinander.
      4-5 Artist Patterns 1_instruction: |
        Kannst du dieses Quadrat zeichen, indem du eine Schleife benutzt?
        Jede Seite ist 20 Pixel lang.
      4-5 Artist Patterns 10_instruction: 'Dieser Code zeichnet zwei Spalten Sechsecke
        - wiederhole das ganze 4 Mal per Schleife und zeichne das ganze Wabenwerk.
        Hinweis: Du musst in deiner äußeren Schleife 120 Pixel zurückspringen um sicherzustellen,
        dass der Künstler nicht außerhalb des Bildschirms zeichnet.'
      4-5 Artist Patterns 11_instruction: 'Wie oft muss die Schleife durchlaufen werden,
        damit ein Halbkreis gezeichnet wird? Hinweis: Wenn ein Kreis 360 Grad hat
        und jeder Schleifendurchlauf eine Verschiebung um 3 Grad bewirkt, wie oft
        muss die Schleife dann durchlaufen werden, damit ein Vollkreis gezeichnet
        wird?'
      4-5 Artist Patterns 12_instruction: Wenn du die Schleife kopierst und eine Rechtsdrehung
        anstelle einer Linksdrehung ausführst, was passiert dann? Kannst du das wiederholen,
        um eine Welle zu zeichnen?
      4-5 Artist Patterns 13_instruction: Jetzt wollen wir das ganze vier mal durchlufen
        lassen und so den Bilderrahmen machen. Pass auf die Ecken auf - du kannst
        nicht einfach eine 90- Grad- Drehung machen! Wenn eine Verschiebung um 3 Grad,
        60 mal ausgeführt, einen Halbkreis erzeugt, welcher dieser Code- Bausteine
        erzeugt dann einen Viertelkreis für die Ecken?
      4-5 Artist Patterns 2_instruction: Wenn du deine Quadratschleife in eine andere
        Schleife einschließt, nennen wir das eine verschachtelte Schleife. Was musst
        du zu deiner äußeren Schleife hinzufügen, um sicherzustellen, dass sich alle
        15 Quadrate aneinanderreihen?
      4-5 Artist Patterns 3_instruction: Wir gehen jetzt eine Ebene nach unten. Wir
        haben den ganzen Code- Baustein in eine andere Schleife geschachtelt, aber
        du musst den Künstler wieder zurückholen, damit er die nächste Zeile zeichnet.
        Welchen dieser Code- Bausteine kannst du am Schluss der äußeren Schleife einfügen,
        damit das ganze Gitternetz gezeichnet wird?
      4-5 Artist Patterns 4_instruction: Dieser Diamant hat 50 Pixel lange Seiten
        und Winkel von 120 und 60 Grad. Benutze eine Schleife, um ihn zu zeichnen.
      4-5 Artist Patterns 5.5_instruction: Wie oft musst du diesen Baustein wiederholen,
        um das ganze Diamantenraster zu zeichnen?
      4-5 Artist Patterns 5_instruction: Wir wollen das Wiederholen und so eine Zeile
        von 6 Diamanten machen. Beachte, dass wir unseren Diamantencode so verändert
        haben, dass 3 statt 2 Wiederholungen stattfinden - was glaubst du, warum?
      4-5 Artist Patterns 6_instruction: Wie oft musst du diesen Baustein wiederholen,
        damit das ganze Diamantenraster gezeichnet wird?
      4-5 Artist Patterns 7_instruction: Wir wollen den Code der letzten Aufgabe etwas
        verändern und so ein komplizierteres Muster erzeugen. Achte darauf, wie die
        Diamanten sich jetzt überdecken. Versuche es mit einer Änderung des ersten
        "springe rückwärts" Bausteins von 100 auf 50 (halb so weit). Wie weit sollte
        der Künstler beim zweiten "springe rückwärts" Baustein gehen?
      4-5 Artist Patterns 8_instruction: Benutze eine Schleife, um dieses Sechseck
        mit 40 Pixeln Seitenlänge und 60-Grad-Winkeln zu zeichnen.
      4-5 Artist Patterns 9.5_instruction: Wir wollen diesen Code in einer Schleife
        laufen lassen, um zwei Reihen Sechsecke zu zeichnen. Beachte, wie unsere zweite
        Reihe nach rechts verschoben wird.
      4-5 Artist Patterns 9_instruction: 'Wiederhole nun den Code um die ganze Zeile
        zu zeichnen. Ein kleiner Hinweis: Jedes Sechseck ist 80 Pixel breit.'
      4-5 Artist Patterns Free Play_instruction: Freies Spielen - versuche dein Glück
        beim Entwerfen deines eigenen Musters!
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: Die Biene kann nicht unterscheiden, ob das
        eine Blüte oder eine Wabe ist. Sammle den Necktar nur aus Blüten, aber prüfe
        erst, ob es sich um eine Wabe oder um eine Blüte handelt.
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: 'Die Biene will nur Necktar, und zwar sofort.
        Erinnere dich: Nicht alle Objekte sind Blüten, also prüfe, damit nur aus Blüten
        Necktar gesammelt wird.'
      4-5 Bee Conditionals 3_instruction: Jetzt will die Biene nur noch Honig machen.
        Prüfe, damit nur bei Waben Honig gemacht wird.
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: Das unbekannte Objekt ist entweder eine
        Blüte oder eine Wabe. Benutze den "wenn/ansonsten"- Baustein um Necktar zu
        machen, wenn es eine Blüte ist, "ansonsten", um Honig zu machen (weil es eine
        Wabe ist).
      4-5 Bee Conditionals 5_instruction: Vielleicht ist eine Blüte oder eine Wabe
        unter diesen Wolken. Benutze den "wenn/ansonsten"- Baustein um Necktar zu
        machen, wenn dort eine Blüte ist, "ansonsten", um Honig zu machen (weil dort
        eine Wabe ist).
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: Diese lila Blüte kann entweder  3, 2, oder
        1 Necktar haben. Hier ist ein "wenn/ansonsten"-Baustein mit einem weiteren
        "wenn/ansonsten"- Baustein kombiniert, damit ein "wenn", "ansonsten-wenn",
        "ansonsten" - Block erzeugt wird. Vervollständige die Lösung, um eine Unbekannte
        Menge Necktar zu sammeln.
      4-5 Bee Conditionals 7_instruction: Bedenke, dass lila Blüten 3, 2, oder 1 Necktar
        haben können. Vervollständige die "Prüfe lila Blüte"- Funktion und benutze
        sie, um den ganzen Necktar bei den Blüten zu sammeln.
      4-5 Bee Conditionals 8_instruction: Schreibe innerhalb des Bausteins eine Funktion
        mit dem Namen "Prüfe Blüte mache Honig". Deine Funktion soll prüfen, wieviel
        Necktar die lila Blüte hat und diesen sammeln, weitergehen, und dann Honig
        machen.
      4-5 Bee Conditionals Assessment 1_instruction: 'Bewertung: Dieser Code ist Fehlerhaft.
        Vervollständige die  "Prüfe Blüte mache Honig"- Funktion, dann rufe sie auf
        um  den ganzen Necktar und Honig zu machen. Bedenke, dass lila Blüten 3, 2,
        oder 1 Necktar haben können.'
      4-5 Bee Debugging 1_instruction: Diese Bausteine nerven mich wirklich. Kannst
        du sie in Ordnung bringen?
      4-5 Bee Debugging 10_instruction: Finde die Fehler und behebe sie.
      4-5 Bee Debugging 11_instruction: Zählt dies richtig?
      4-5 Bee Debugging 2_instruction: Hilf der Biene, Necktar zu holen und Honig
        zu machen.
      4-5 Bee Debugging 3_instruction: Finde die Fehler und behebe sie.
      4-5 Bee Debugging 4_instruction: Diese Bausteine funktionieren nicht. Wie sieht
        das Muster aus?
      4-5 Bee Debugging 5_instruction: Etwas stimmt hier nicht...
      4-5 Bee Debugging 6_instruction: Die lila Blüte hat eine unbekannte Menge Necktar.
        Bringe die Bausteine in Ordnung, so dass der ganze Necktar aus der Blüte herausgeholt
        wird.
      4-5 Bee Debugging 7_instruction: Der Funktion fehlt etwas...
      4-5 Bee Debugging 8_instruction: Die Funktion ist gut, aber sie wird nicht richtig
        benutzt.
      4-5 Bee Debugging 9_instruction: Warum macht die Biene nicht genug Honig?
      4-5 Bee Debugging Assessment 1_instruction: 'Aufgabe: Repariere das Programm.'
      4-5 Bee Nested Loops 1_instruction: Benutze eine Schleife, um den gesamten Necktar
        zu sammeln.
      4-5 Bee Nested Loops 2_instruction: 'Sammle den gesamten Necktar von jeder Blüte.
        Benutze eine geschachtelte Schleife. '
      4-5 Bee Nested Loops 3_instruction: Sammle den gesamten Necktar, indem du den
        anfangs vorhandenen Code in eine geschachtelte Schleife einschließt.
      4-5 Bee Nested Loops 4_instruction: 'Sammle den gesamten Necktar jeder Blüte
        und mache Honig an jeder Honigwabe. Benutze eine geschachtelte Schleife. '
      4-5 Bee Nested Loops 5_instruction: Sammle den gesamten Necktar, indem du eine
        geschachtelte Schleife erzeugst.
      4-5 Bee Nested Loops 6_instruction: Sammle den ganzen Nektar.
      4-5 Bee Nested Loops 7_instruction: Schließe diese Schleife in eine andere Schleife
        ein, so dass eine geschachtelte Schleife entsteht, und sammle so den gesamten
        Necktar der Blüten.
      4-5 Bee Nested Loops 8_instruction: 'Sammle den gesamten Necktar aus diesen
        Blüten, indem du eine while-Schleife schachtelst. Ersetze den inneren Wiederholen-
        Baustein durch einen while- Baustein. '
      4-5 Bee Nested Loops 9_instruction: Sammle den gesamten Necktar aus diesen Blüten,
        indem du eine while-Schleife in eine Wiederholen- Schleife schachtelst.
      4-5 Bee Nested Loops Assessment 1_instruction: Bewertung - Sammle den gesamten
        Necktar und mache den gesamten Honig, indem du Schleifen benutzt.
      4-5 Bee Nested Loops Rows_instruction: Sammle Necktar aus den Blütenzeile! Benutze
        eine geschachtelte Schleife.
      4-5 Maze 1 (copy 1)_instruction: Lieber Mensch. Ich Zombie. Muss ... zur ...
        Sonnenblume.
      4-5 Maze 1_instruction: Lieber Mensch. Ich Zombie. Muss ... zur ... Sonnenblume.
      4-5 Maze 10_instruction: Kannst du die Sonnenblume holen und dabei nur vier
        Bausteine benutzen?
      4-5 Maze 11_instruction: Kommst du zur Sonnenblume, indem du nur sechs Bausteine
        verwendest?
      4-5 Maze 12_instruction: OK, das ist ein bisschen schwierig. Kannst du das mit
        nur sechs Bausteinen machen?
      4-5 Maze 13_instruction: Bring mich zum Schwein!
      4-5 Maze 14_instruction: Bringe mir das Schwein! Benutze den "Wiederholen bis"-Baustein.
      4-5 Maze 2 (copy 1)_instruction: Bringe den Zombie zur Sonnenblume, aber weiche
        der Fleischfressenden Pflanze aus!
      4-5 Maze 2_instruction: Bringe den Zombie zur Sonnenblume, aber weiche der Fleischfressenden
        Pflanze aus!
      4-5 Maze 3 (copy 1)_instruction: Muss ... zur ... Sonnenblume.
      4-5 Maze 3_instruction: Muss ... zur ... Sonnenblume.
      4-5 Maze 4 (copy 1)_instruction: Versuche es mit dem "wiederholen"-Baustein,
        damit du weniger Bausteine benötigst...
      4-5 Maze 4_instruction: Versuche es mit dem "wiederholen"-Baustein, damit du
        weniger Bausteine benötigst...
      4-5 Maze 5 (copy 1)_instruction: Kannst du diese Aufgabe lösen und dabei die
        kleinstmögliche Anzahl an Bausteinen verwenden?
      4-5 Maze 5_instruction: Kannst du diese Aufgabe lösen und dabei die kleinstmögliche
        Anzahl an Bausteinen verwenden?
      4-5 Maze 6 (copy 1)_instruction: Kannst du diese Aufgabe lösen und dabei die
        kleinstmögliche Anzahl an Bausteinen verwenden?
      4-5 Maze 6_instruction: Kannst du diese Aufgabe lösen und dabei die kleinstmögliche
        Anzahl an Bausteinen verwenden?
      4-5 Maze 7_instruction: Lieber Mensch. Ich Zombie. Muss ... zur ... Sonnenblume.
      4-5 Maze 8_instruction: Benutze den "wiederholen"-Baustein um den Zombie  zur
        Sonnenblume zu bringen. (Weiche den Fleischfressenden Pflanzen aus!)
      4-5 Maze 9_instruction: Erzeuge eine Schleife mit dem "Wiederholen bis"-Baustein.
      4-5 Maze Assessment 1_instruction: 'Aufgabe: Erreiche die Sonnenblume.'
      4-5 Maze Conditionals 1_instruction: Benutze den "wiederholen"-Baustein um den
        Zombie  zur Sonnenblume zu bringen.
      4-5 Maze Conditionals 10_instruction: Kannst du einfach drei Bausteine hinzufügen
        und so einen komplizierteres Labyrinth bewältigen? Wenn du es richtig machst,
        kann ich jeden gekrümmten Weg gehen, unabhängig von seiner Länge.
      4-5 Maze Conditionals 2_instruction: Benutze den "wiederholen"-Baustein um den
        Zombie  zur Sonnenblume zu bringen.
      4-5 Maze Conditionals 3_instruction: 'Benutze den "wenn"-Baustein, damit ich
        entscheiden kann, wann ich mich drehe. Hinweis: du brauchst nur einen weiteren
        Baustein, aber sieh dir an, wie wir das machen, damit du es beim nächsten
        Mal alleine hinbekommst.'
      4-5 Maze Conditionals 4_instruction: Okay, das ist genauso wie bei der letzten
        Aufgabe, aber du musst dich daran erinnern, wie du den "Wenn"-Baustein zusammen
        mit dem "Wiederholen"-Baustein verwendet hast.
      4-5 Maze Conditionals 5_instruction: Ich wollen Sonnenblume! Benutze den "wenn"-
        Baustein, um mich mit möglichst wenigen Bausteinen dahin zu bringen.
      4-5 Maze Conditionals 6_instruction: Ich wollen Sonnenblume! Benutze den "wenn"-
        Baustein, um mich mit möglichst wenigen Bausteinen dahin zu bringen.
      4-5 Maze Conditionals 7_instruction: Okay, wir wollen das zur Übung wiederholen
        - es ist fast dasselbe, aber pass auf die Fleischfressenden Pflanzen auf!
      4-5 Maze Conditionals 8_instruction: Die "wenn-ansonsten"-Bausteine überprüfen
        eine Bedingung, und machen dann das eine ODER das andere. Versuche, diesen
        neuen Baustein zu benutzen, um mir die Sonnenblume zu holen.
      4-5 Maze Conditionals 9_instruction: Eine weitere Übung mit dem "Wenn-Sonst"-Baustein.
        Kriegst du das beim ersten Versuch hin?
      4-5 Maze Conditionals Assessment 1_instruction: Benutze einen "Wiederholen bis"-
        und einen "wenn-ansonsten"- Baustein und bringe mich so mit der geringstmöglichen
        Anzahl an Bausteinen zur Sonnenblume.
      4-5 Nested Loops 1_instruction: 'Vervollständige den Code um die Dreiecke zu
        zeichnen. Das erste ist bereits fertig. Hinweis: Drei Dreiecke in einer 360-
        Grad- Drehung.'
      4-5 Nested Loops 10_instruction: Zeichne die letzte Reihe Sterne auf dieser
        Flagge indem du die gegebenen Blöcke umschlingst. Die Sterne sind 50 Pixel
        auseinander, aber vergiss nicht, dass die Sterne selbst 30 Pixel breit sind.
      4-5 Nested Loops 11_instruction: Kannst du diese 10 Quadrate für den Bürgersteig
        mit einer verschachtelten Schleife zeichnen? Jedes Quadrat hat eine Seitenlänge
        von 30 Pixel.
      4-5 Nested Loops 12_instruction: Kannst du diese 36 Dreiecke mit einer verschachtelten
        Schleife zeichnen?
      4-5 Nested Loops 2_instruction: 'Jetzt verwende diese Schleife in einer anderen
        Schleife um 10 Dreiecke zu zeichnen.  Dies nennt man eine verschachtelte Schleife
        (nested loop).  Hinweis: Die 10 Dreiecke sind eine komplette 360-Grad-Drehung.  '
      4-5 Nested Loops 3_instruction: 'Male eine Sonne indem Du den Startcode in einer
        anderen Schleife benutzt. Dies nennt man eine verschachtelte Schleife (nested
        loop). '
      4-5 Nested Loops 5_instruction: Benutze den angegebenen Code in einer Schleife
        um eine Windmühle zu erstellen.
      4-5 Nested Loops 6_instruction: Kannst Du ein Sechseck zeichnen indem Du den
        Dreieck-Code in einer Schleife verwendest?
      4-5 Nested Loops 7_instruction: 'Führe das 10 mal aus. Um wie viel Grad musst
        Du Dich bei jeder Wiederholung weiterdrehen? (Hinweis: Was sind 360 Grad geteilt
        durch 10?)'
      4-5 Nested Loops 8_instruction: 'Führe das 6 mal aus. Um wie viel Grad musst
        Du Dich bei jeder Wiederholung weiterdrehen? (Hinweis: Was sind 360 Grad geteilt
        durch 6?)'
      4-5 Nested Loops 9_instruction: Zeichne die Zähne im Mund des Alligators!
      4-5 Nested Loops Assessment 1_instruction: Benutze eine verschachtelte Schleife
        (nested loop) um das Muster fertig zu stellen.
      4-5 While Loops 1_instruction: Bewege mich zu dem Loch und fülle es mit zwei
        Schaufeln voll Erde, indem du den "füllen" Block benutzt.
      4-5 While Loops 2_instruction: Bewege mich zu dem Schmutzhaufen und entferne
        ihn mit fünf Schöpfern mit der Schaufel. Benutz dazu den "entfernen"-Baustein.
      4-5 While Loops 3_instruction: 'Bewege mich zum Haufen und entferne ihn vollständig,
        dann beweg mich zum Loch und fülle es komplett auf. Tipp: Benutzz dazu so
        wenig Bausteine wie möglich.'
      4-5 While Loops 4_instruction: 'Wow, ich habe ein wirklich tiefes Loch gefunden!
        Ich weiß nicht, wie viele Schöpfer Erde ich dazu brauchen werde. Kannst du
        ein Programm schreiben, das es auffüllt, bis der Boden wieder eben ist? Tipp:
        Versuche es diesmal mit der While-Schleife.'
      4-5 While Loops 5_instruction: Wow, jetzt sind da zwei tiefe Löcher! Kannst
        du ein Programm schreiben, welches beide voll füllt bis der Boden eben ist?
      4-5 While Loops 6_instruction: Wow, jetzt ist da ein großer Haufen Erde! Kannst
        du ein Programm schreiben, welches alles entfernt, damit der Boden eben ist?
      4-5 While Loops 7_instruction: Wow, da sind jetzt drei Haufen Erde! Kannst du
        ein Programm schreiben, welches jeden entfernt bis der Boden eben ist?
      4-5 While Loops 8_instruction: ' Hier ist ein wirklich tiefes Loch und ein wirklich
        großer Haufen Erde. Wie viele Schöpfer Erde müssen bewegt werden, damit der
        Grund wieder eben ist? Tipp: Verwende die While-Schleife für beides.'
      4-5 While Loops Assessment 1_instruction: Hier sind viele Löcher und Erdhaufen.
        Hilf mir, die Löcher zu füllen und die Haufen zu entfernen und den Grund wieder
        zu ebnen.
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      App Lab test_instruction: teste
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: 'Vervollständige den Code, damit diese
        Dreiecke gezeichnet werden. Das erste hast du erledigt. Hinweis: 3 Dreiecke
        in einer 360- Grad- Drehung.'
      Artist - Nested Loops 10_instruction: Zeichne die letzte Sternenzeile dieser
        Flagge, indem du die verfügbaren Bausteine in Schleifen einschließt. Die Sterne
        liegen 50 Pixel auseinander, aber vergiss nicht, dass die Sterne selbst 30
        Pixel breit sind.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: "Create a sun by nesting the starter code\nin
        another loop. This is called a nested loop.\r\n"
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: Verwende eine verschachtelte
        Schleife (nested loop) um das Design fertigzustellen.
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click run to see what your game can currently do (not much!), update any variables
        you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click Finish to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Targer should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        Finish to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving target and danger, both of which return to the screen once
        they've left, and a player that responds to keyboard input. Click run to
        see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for Addition which
        takes two numbers and returns their sum. Use this Addition block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a multiplication block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function 'f'
        every time; create a function called 'times-ten' that should take a parameter
        'x' and return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a number return that number
        to the power of 3. Make sure to write two example cases! When you're done,
        use your new function to calculate 7 cubed.
      Calc Design Recipe 2_instruction: "Your school is holding a bake sale, and\nyou
        need to track the cost of making each cookie, the money paid, and the\ntotal
        profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r\nWrite\nthe
        function cost, which takes in the number of cookies you intend to sell,\nand
        returns the cost of making those cookies."
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: "In the last puzzle you wrote a contract\nfor
        the function \"rocket-height\" that states it has a range of Number, domain\nof
        Number, and should return the height of the rocket traveling at 15 m/s\nafter
        a given number of seconds. Let's write an example case now for the\nheight
        of the rocket at 3 seconds.\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 1_instruction: "In the last puzzle you wrote a contract for the\nfunction
        rocket-height that states it has a range of Number, domain of Number,\nand
        should return the height of the rocket traveling at 15 m/s after a given\nnumber
        of seconds. Let's write an example case now for the height of the\nrocket
        at 3 seconds.\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months - use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: Kannst du mich zu dem Schwein bringen indem
        du 5 Baustein benutzt?
      Course 4 2_instruction: Die Biene will jetzt nur Nektar. Denk daran, dass nicht
        alle Objekte Blumen sind, also achte darauf, nur Nektar von Blumen zu sammeln.
      Course 4 Artist 1_instruction: 'Hilf mir, meine Box fertig zu zeichnen. (Jede
        Linie ist 200 Pixel lang) '
      Course 4 Artist 10_instruction: 'Es ist an der Zeit, frei zu spielen! Viel Spaß
        und zeichne alles, was du möchtest. '
      Course 4 Artist 11_instruction: |
        Jetzt eine Herausforderung! Hier ist ein Design, das nur Blöcke benutzt, die Ihnen bereits gezeigt wurden! Schaffen Sie es, es ohne weitere Informationen wieder zuerstellten? Tipp:
        Zögern Sie nicht, Versuch und Fehlschlag zu versuchen. Es wird nicht erwartet, dass es beim ersten Mal perfekt wird.
      Course 4 Artist 12_instruction: "Want a second peek at the inspiration design\nor
        the hints?  Click here!\r\n\r\nOtherwise, make a design all your own!"
      Course 4 Artist 13_instruction: |
        Still playing?  Here is a blank canvas where
        you can design anything you want!
      Course 4 Artist 2_instruction: Kannst du diesen Code in einer Schleife erstellen,
        um das grau ausgeblendete Quadrat zu zeichnen?
      Course 4 Artist 20_instruction: |
        Still playing?  Here is a blank canvas where
        you can create whatever you want!
      Course 4 Artist 3_instruction: Ok, versuche herauszufinden was passiert, wenn
        du diesen Code ausführst (oder klicke "Ausführen" um es auszuprobieren). Dann
        wiederhole es oft genug um die Zeichnung zu vervollständigen.
      Course 4 Artist 4_instruction: Wie viele Grad hat ein Kreis? Trag in den Wiederholungsbaustein
        die Zahl ein, um einen Farbenkreis zu erstellen.
      Course 4 Artist 5_instruction: Zeichne die andere Hälfte dieses Designs, sodass
        es symmetrisch ist. Die Dreiecke sind gleichseitig und 50 Pixel lang.
      Course 4 Artist 6_instruction: 'Vervollständige den Code, um diese Dreiecke
        zu zeichnen. Tipp: 3 Dreiecke in einer 360-Grad-Drehung.'
      Course 4 Artist 7_instruction: 'Erstelle nun eine Schleife in einer weiteren
        Schleife um 10 Dreiecke zu zeichnen. Dies nennt man eine verschachtelte Schleife
        (engl. nested loop). Tipp: Alle 10 Dreiecke ergeben eine 360-Grad-Drehung.  '
      Course 4 Artist 8_instruction: Zeichne diese Sonne, indem du diesen ganzen Code-Baustein
        12 Mal durchlaufen lässt.
      Course 4 Artist 8a_instruction: "Remember this shape?  Now we're going to\nlet
        you build it without giving you any blocks to start!\r\nHint: There are\n3
        triangles within the 360 degree rotation...how many times does 3 go into\n360?"
      Course 4 Artist 9_instruction: 'Durchlaufe dieses Design 10 Mal und gehe dabei
        sicher, dass nach jeder gezeichneten Figur gedreht wird. Ein kleiner Tipp,
        damit du weißt, wie weit gedreht werden muss: Was ist 360 geteilt durch 10?'
      Course 4 Artist Binary 1_instruction: Hier ist eine Funktion, die einen Binärstring
        von Einsen und Nullen verwendet und den Künstler anweist, unterwegs die Quadrate
        von rechts nach links und von oben nach unten zu füllen, wenn er eine Eins
        sieht und sie zu ignorieren, wenn er eine Null sieht. Führ diesen Code aus,
        um zu sehen, wie der Künstler die Binärmethode anwendet um dieses Muster auszumalen.
      Course 4 Artist Binary 2_instruction: Welche dieser Binärfolgen könntest du
        8 Mal durchlaufen lassen, um dieses Bild zu malen?
      Course 4 Artist Binary 3_instruction: Kannst du dieses Muster zeichnen, indem
        du eine dreistellige Binärzeichenfolfe durchlaufen lässt?
      Course 4 Artist Binary 4_instruction: Jede dieser Binärzeichenfolgen steht für
        eine Reihe dieses Bildes. Kannst du sie so neu anordnen, dass ein Smiley-Gesicht,
        anstatt eines traurigen Gesichts, gezeichnet wird?
      Course 4 Artist Binary 5_instruction: Welche sechsstellige Binärzeichenfolge
        wird dieses Bild zeichnen, wenn sie 11 Mal wiederholt wird?
      Course 4 Artist Binary 6_instruction: Was ist die kürzeste binäre Zeichenfolge,
        die du wiederholen kannst, um dieses Bild zu zeichen?
      Course 4 Artist Binary 7_instruction: Stelle diese Zeichnung fertig.
      Course 4 Artist Binary Free Play 2_instruction: 'Freies Spielen: Hier ist eine
        Leinwand mit einer höheren Auflösung um darauf zu zeichnen - 16 bits mal 16
        bits!'
      Course 4 Artist Binary Free Play_instruction: 'Freies Spielen: Zeichne mit binären
        Zeichenfolgen, was auch immer du möchtest!'
      Course 4 Artist For  Functions 10_instruction: 'Gehen wir mal einen Schritt
        weiter: kannst du mit Hilfe der Funktion "Zeichne ein Quadrat" einen Stern
        zeichnen? Viel Erfolg!'
      Course 4 Artist For  Functions 11_instruction: 'Gehen wir mal einen Schritt
        weiter: kannst du mit Hilfe der Funktion "Zeichne ein Quadrat" einen Stern
        zeichnen? Viel Erfolg!'
      Course 4 Artist For Loops 1_instruction: 'Zeichne dieses Dreieck, das 50 Pixel
        groß ist. Tipp: Benutze einen Wiederholen Baustein.'
      Course 4 Artist For Loops 10_instruction: Zeit zum Freien Spielen! Zeichne,
        was auch immer du möchtest mit den Bausteinen, die du soeben gelernt hast,
        zu benutzen. Viel Spaß!
      Course 4 Artist For Loops 11_instruction: 'Weißt du noch, als wir eine Variable
        verwendet haben, um die Anzahl der Seiten einer Figur zu definieren? Dieses
        Muster beginnt mit einem Dreieck, und fügt eine weitere Seite hinzu, bis sich
        ein Dekagon (10 Seiten) ergibt. Jede Seite sollte 100 Pixel lang sein. Hinweis:
        360 geteilt durch die Anzahl an Seiten einer Figur ergibt den Rotationswinkel.'
      Course 4 Artist For Loops 11a_instruction: "Let's put it all together!  Using\nyour
        knowledge of \"for loops\" and the \"counter\", create this drawing where\neach
        shape has two more sides than the last.  Make sure that each side is\n10 times
        as long as the number of sides in the polygon.\r\n\r\nVery little\nof the
        code has been provided for you."
      Course 4 Artist For Loops 12_instruction: 'Das sah ziemlich gut aus. Aber nun
        würde ich gerne jede Form neben der letzten Form zeichnen. Dieses Mal ist
        jede Seite 20 Pixel lang. Benutze einen Sprungblock, um nach jeder Figur 40
        Pixel weiter zu springen. '
      Course 4 Artist For Loops 13_instruction: Hmm, die Figuren werden jedes Mal
        größer. Haben wir dieses Problem nicht schonmal mit Variablen gelöst? Wie
        können wir die Zähler Variable dazu einsetzen, die Seiten kürzer zu machen
        je mehr Seiten es gibt? Versuche (100 / Zähler) Pixel weiter zu springen,
        anstatt einen festen Abstand einzuhalten.
      Course 4 Artist For Loops 14_instruction: Es gibt einen hübschen Effekt, wenn
        du vom notwendigen Winkel ein wenig abweichst. Verwende mal einen Winkel von
        89 Grad um diese verdrehte Quadratspirale zu erzeugen.
      Course 4 Artist For Loops 15_instruction: "Free Play: Try making some drawings\nof
        your own using For Loops. We've added a few generic variables for you\nto
        use as well.\r\n\r\nNotice that there are now so many blocks in your toolbox\nthat
        we have to organize them into categories again.  Click around to discover\nall
        of the blocks that you can use in this level."
      Course 4 Artist For Loops 2_instruction: |
        I've put the code for drawing a
        triangle inside a for loop that counts from 50 to 100 by 10.  NOTE: Make sure
        you look at the code before you hit "Run".
      Course 4 Artist For Loops 3_instruction: |
        Use the last puzzle as a reference
        to complete this one.  The smallest triangle has 20 pixel sides, the largest
        has 200 pixel sides, and each triangle is 20 pixels larger than the last.
      Course 4 Artist For Loops 4_instruction: |
        Verwende eine Schleife, um diese Rechtecke zu zeichnen.
        Das kleinste Rechteck ist 50 Pixel lang, das größte ist 300 Pixel lang, und jedes Rechteck ist 25 Pixel länger als sein Vorgänger. Du hast fast alle Blöcke, die du brauchst, aber ein Block fehlt. Welcher ist es?
      Course 4 Artist For Loops 5_instruction: 'Gute Arbeit beim letzten Puzzle! Verwende
        den Variablen-Block "Zähler" nochmals, um dieses tolle Bild zu zeichnen. '
      Course 4 Artist For Loops 6_instruction: Spiel ein Bisschen herum! Benutze eine
        for-Schleife um eine Form Deiner Wahl immer größer werden zu lassen.
      Course 4 Artist For Loops 7_instruction: |
        What happens if you remove the "Repeat
        3" from this algorithm, keeping the "move" and "turn" blocks in the for
        loop? In this spiraling triangle, each side is 20 pixels longer than the last.
      Course 4 Artist For Loops 8_instruction: "Just one little change to the code\nfrom
        the last image can create this drawing. Can you figure out what that\nchange
        is?\r\n\r\nHint:  You need to remove something!"
      Course 4 Artist For Loops 8a_instruction: |
        Just one little change to the code
        from the last image can create this image. Can you figure out what that change
        is?
      Course 4 Artist For Loops 9_instruction: |
        Can you make a spiral? Move forward
        from 1 to 75 pixels, increasing by 1 pixel each time.
      Course 4 Artist For Loops Challenge_instruction: "Can you figure out how to\nuse
        all of the things you've learned to create this image?\r\n\r\nNeed a\nhint?
        Click here."
      Course 4 Artist For Loops inspire_instruction: "Free-Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n\r\nNeed a hint? Click here."
      Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is 100
        pixels in length, using a loop?
      Course 4 Artist Functions 10_instruction: |
        Which block do you need to add to
        get the triangle to sit on top of the square?
      Course 4 Artist Functions 11_instruction: |
        Check out this code that draws a
        cube - can you move it into a function called "Draw a Cube"
      Course 4 Artist Functions 12_instruction: Loop square function to draw a line
      Course 4 Artist Functions 13_instruction: |
        Check it out we have a new function
        called "draw a line of squares". Feel free to take a look inside the function
        block to see how we built it. Click on "Run" when your are ready for the
        next puzzle.
      Course 4 Artist Functions 14_instruction: |
        You're doing great! Let's use
        your new "Draw a line of squares" function to draw a Square shape. Remember
        each square is 40 pixels in length.
      Course 4 Artist Functions 15_instruction: |
        Let's Step it up a little, can
        you draw a star shape using the "draw a line of squares" function? Good
        luck! Hint: you may have to turn 144 degrees
      Course 4 Artist Functions 2_instruction: |
        Can you draw 3 squares 20 pixels
        apart from one another? Hint: each square is 100 pixels in size
      Course 4 Artist Functions 3_instruction: "Using the \"draw a square\" function\nblock,
        can you draw this picture? Hint: each square is 120 pixels apart.\r\n"
      Course 4 Artist Functions 4_instruction: |
        Are you ready to create your own
        "Function Block"? Click on the "Functions" block in the tool box, name
        it "draw a triangle", then create a triangle as you have done before with
        the Action and Loops blocks. Then click on the Save and Close in the upper
        right hand corner. Hint: Create a triangle that is 100 pixels in length. Good
        luck!
      Course 4 Artist Functions 5 OLD_instruction: |
        Let's try to use our two functions
        to draw a house - what needs to be fixed in this code to draw the house properly?
      Course 4 Artist Functions 5_instruction: "Using the \"draw a square\" function\nblock,
        can you draw this picture? Hint: each square is 120 pixels apart.\r\n"
      Course 4 Artist Functions 6_instruction: |
        Which block do you need to add to
        get the triangle to sit on top of the square?
      Course 4 Artist Functions 7_instruction: |
        Can you draw a line of squares using
        a Square function? Each square is 40 pixel's in length.
      Course 4 Artist Functions 8_instruction: "Are you getting the hang of how to\nuse
        function blocks? Let's modify this square so that it is 200 pixels in\nsize.
        Hint: click on \"edit\" to change the size of the \"draw a square\"\nfunction
        editor. Remember to click on \"save and close\" to get out of the\nfunction
        editor. \n"
      Course 4 Artist Functions 9_instruction: |
        We have given you most of the code
        to create a function. However there seems to be something missing. Can you
        make this function block complete?
      Course 4 Artist Inspire_instruction: "Want a second peek at the inspiration\ndesign
        or the hints?  Click here!\r\n\r\nOtherwise, make a design all your\nown!"
      Course 4 Artist Params 1_instruction: |
        Let's edit a function that draws a
        square with 50 pixel sides
      Course 4 Artist Params 10_instruction: "You can call functions from inside\nother
        functions! Using your \"shape\" function as a base, create 3 house shapes\neach
        20 pixels larger than the last starting at 50 pixels in length. Using\na counter
        loop might be helpful. \n"
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: |
        Use your "pinwheel" function to draw
        each of these shapes. The side length for each image is 50.
      Course 4 Artist Params 13_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome!
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: "Awesome, can you draw each of these\ntriangles
        with that new function? The first is 25 pixels long, the second\nis 50, and
        the third is 75. \n"
      Course 4 Artist Params 4_instruction: |
        Can you add a new function called square?
        It should also take a length parameter, just like the triangle. This time
        draw 3 squares 25, 50 and 75 pixels in length,100 pixels apart.
      Course 4 Artist Params 5_instruction: |
        Use both of your new functions to draw
        this picture. To make this easier you use a loop with a "counter" parameter.
      Course 4 Artist Params 6_instruction: "Let's edit this \"draw a shape\" function.\nIt
        already has a \"length\" parameter. Now, let's edit the function to also\nadd
        a \"sides\" parameter. Remember the angle to turn for a given shape is\n360
        divided by the sides it has. Hint: lengths for each shape are the triangle\nis
        100 pixels, the hexagon is 25 pixels and the square is 50 pixels. \n"
      Course 4 Artist Params 7_instruction: "Can you draw these shapes by filling\nin
        the \"???\" The square and triangle are 100 pixels in size while the hexagon\nis
        75 pixels in size. \n"
      Course 4 Artist Params 8_instruction: |
        Can you figure out how to draw this
        shape? Here's a hint create a new function with 6 sides called a hexagon.
      Course 4 Artist Params 9_instruction: |
        Do you remember when we used the counter
        loop but removed a loop within? Let's have some fun and use the "draw a
        shape" function with "sides" and "length" parameters. Can you re create
        these shapes? The square counter should be 5/100/5, the triangle counter should
        be 10/100/10 and the hexagon is 2/100/2.
      Course 4 Artist Var 9_instruction: |
        Here's the algorithm to draw a triangle,
        modify it so it uses the "sides" variable instead. Replace the number 3
        with the "sides" variable. Hint: remember to use the "set sides to" block.
      Course 4 Artist Vars 1_instruction: |
        Can you help me draw an equilateral triangle?
        It has to be exactly 100 pixels long on each side.
      Course 4 Artist Vars 10_instruction: |
        Here's an algorithm that draws a triangle
        out of smaller triangles. Can you modify it so that it uses the "sides"
        variable to draw each triangle? Look through the code, and every time you
        see the number 3, replace it with your "sides" variable. Remember to use
        the "set sides" block.
      Course 4 Artist Vars 11_instruction: |
        Here’s more complicated code using the
        same concepts from the last puzzle - what should you set the "sides" variable
        to in order to draw this picture made of squares?
      Course 4 Artist Vars 12_instruction: |
        Let's set the "sides" variable to
        5. The more sides we add to this algorithm, the bigger this whole pattern
        gets! Notice that there is another variable called "length". We can now
        use that wherever we have a "move forward." Set the "length" variable
        to 75 for this shape.
      Course 4 Artist Vars 13_instruction: "When a shape has lots of sides, each\nside
        needs to be shorter if you want the whole pattern to fit on the screen.\n\r\nLet's
        recreate the algorithm for this amazing pattern, but instead of\nmanually
        setting the \"length\" variable, let's use a math block with the\n\"sides\"
        variable inside to make sure that each shape fits correctly.\r\nNeed\nsome
        hints?  Click here."
      Course 4 Artist Vars 14_instruction: "Free Play: Check it out! Now your algorithm\nis
        nested within one more loop. Experiment with changing the values of your\ntwo
        variables to draw cool patterns.\r\n\r\nFor even more effect, try playing\nwith
        color!  Use random colors inside loops to see how it changes your design."
      Course 4 Artist Vars 2_instruction: |
        Instead of using "move forward by 150,"
        the "move" block is now referencing a variable called "length." Can you
        set "length" to 150 to draw this new triangle?
      Course 4 Artist Vars 3_instruction: "Here's a loop that draws a square, but\nsomething's
        missing. Can you fix it so that it uses the variable \"length\"\nto figure
        out how long each side should be? \n"
      Course 4 Artist Vars 4_instruction: |
        Now I want to make a rectangle that is
        twice as tall as it is wide. We've got a variable called "width" that needs
        to be set to 100. Can you use the math blocks to complete the code?
      Course 4 Artist Vars 5_instruction: |
        Use the variable "sides" to control
        how many times this loop gets run.
      Course 4 Artist Vars 6_instruction: "Here’s some code that can draw any regular\npolygon.
        There’s a new variable called sides that is set to 4. Can you use\nthe sides
        variable (along with the math block) to turn the right amount regardless\nof
        how many sides there are in the polygon?\r\n\r\nClick here to go back to\nthe
        hint!"
      Course 4 Artist Vars 7_instruction: "Use what you learned in the last puzzle\nto
        create this hexagon using the \"sides\" variable.\r\n\r\nSee how you could\nchange
        just one value to draw a triangle,  square, pentagon, or octagon?"
      Course 4 Artist Vars 8_instruction: |
        Free Play: Experiment with the number
        of sides this shape has. Can you change the algorithm so that the overall
        size of the shape stays the same, no matter how many sides it has? Hint: You
        might have to use your math blocks (360 divided by "sides") in two places
        this time.
      Course 4 Artist Vars 9_instruction: |
        Modify this algorithm so it uses the "sides"
        variable instead of a fixed number to draw a triangle. Don't forget to use
        the "set sides to" block.
      Course 4 Bee 1_instruction: "The bee can't tell what's under the cloud! First,\nuse
        the \"if\" block to check whether it is a flower or a honeycomb. Then\nonly
        gather nectar from it if it is a flower. \n"
      Course 4 Bee 2_instruction: |
        Use the "if/else" block to check each object
        to see if it's a flower or a honeycomb . If it's a flower, collect nectar...otherwise,
        make honey!
      Course 4 Bee 3_instruction: |
        The unknown object is either a flower or a honeycomb.
        This time, use the if/else block to collect nectar if it is a flower, else
        make honey (because then it would be a honeycomb).
      Course 4 Bee 4_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Here an if/else block is combined with another if/else block to create
        an "if/else-if/else" statement. Complete the solution to collect the unknown
        amount of nectar.
      Course 4 Bee 5_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Add an if-else block to create an if, else-if, else block. Complete
        the solution to collect the unknown amount of nectar.
      Course 4 Bee 6_instruction: |
        This purple flower may have either 3, 2, or 1
        nectar. Create an if, else-if, else block to collect the unknown amount of
        nectar.
      Course 4 Bee 7_instruction: |
        Use everything you have learned so far to collect
        all the nectar. The purple flower may have either 3, 2, or 1 nectar.
      Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar from
        each flower.
      Course 4 Bee For Loops 10_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 9, then 6, and then 3 nectar?
      Course 4 Bee For Loops 11_instruction: |
        What's wrong with this loop? See if
        you can fix it and make the bee collect all the nectar.
      Course 4 Bee For Loops 2_instruction: |
        Here's a new kind of loop, called the
        "for" loop. This particular for loop will count from 1 to 5 by 1, and run
        the contents of the loop each time it counts. Help the Bee get the nectar.
      Course 4 Bee For Loops 3_instruction: |
        You can solve this puzzle by using a
        for loop to count from 1 to 3 by 1. Now let's go get some nectar!
      Course 4 Bee For Loops 4_instruction: |
        Collect all of the nectar from these
        flowers. I wonder if there's an easier way to do this...
      Course 4 Bee For Loops 5_instruction: "Ah, the for loop makes this much easier!\nUsing
        the \"counter\" variable from the for loop to loop the \"get nectar\"\nblock
        the same number of times as the loop. Whew! That's a lot of loops.\nAll the
        code you need it there, take a look at how it is put together then\nclick
        on Run and see how it works. \n"
      Course 4 Bee For Loops 6_instruction: |
        You can also use a for loop to count
        down. Try gathering this nectar by counting down from 5 to 1 by 1.
      Course 4 Bee For Loops 7_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      Course 4 Bee For Loops 8_instruction: |
        Can you use the loop variable to control
        movement and nectar collection?
      Course 4 Bee For Loops 9_instruction: |
        The last number in your for loop is
        called the "increment,"  and each time the loop is run the counter variable
        changes by the increment. Try collecting these flowers using an increment
        of 2.
      Course 4 Bee Loops 5 NEW_instruction: |
        Here are three flowers. Can you find
        the pattern of instructions that you need to repeat 3 times to collect the
        nectar with the fewest number of blocks?
      Course 4 Bee Loops 5a NEW_instruction: |
        Now, use loops to help the bee collect
        all the nectar on it's way to the honeycomb with as few blocks as possible.  When
        you get there, don't forget to make honey!
      Course 4 Bee Params 1_instruction: |
        Use the function "get 3 nectar" which
        turns, moves to collect the nectar, and then returns to the original location.
        Write a sequence to collect all of the nectar using "get 3 nectar."
      Course 4 Bee Params 2_instruction: |
        Modify the "get 3 nectar" function so
        it makes me turn right instead of left to the flowers.
      Course 4 Bee Params 3 (copy 1)_instruction: |
        Now there are flowers on both
        sides! Maybe you can use a parameter so that the same function works for flowers
        on either side. I've added a parameter called "direction" to the function.
        If the "direction" parameter equals 0 I should turn left, if it's 1 I should
        turn right.
      Course 4 Bee Params 3_instruction: |
        Now there are flowers on both sides! I've
        added a parameter called "direction" to the function. Use the "left" and
        "right" variables to control direction. Fill in the rest of the function
        definition and then click "Save and Close."
      Course 4 Bee Params 4 (copy 1)_instruction: |
        Versuche deine neuen Funktionen auszuprobieren,
        um alle Blumen zu sammeln. Denke an: 0 = links und 1 = rechts.
      Course 4 Bee Params 4 backup_instruction: |
        Wäre es nicht schön, wenn wir das ganze Nektar mit
        einer Funktion sammeln könnten? Versuche einen neuen Paramater, namens "nectars" in deine Funktion einzubauen, um einstellen zu können, wie viel Nektar
        gesammelt werden soll. Du wirst es wahrscheinlich auch umnennen wollen.
      Course 4 Bee Params 4_instruction: |
        Try using your new function to collect
        all of the flowers. Remember to use the left and right variables.
      Course 4 Bee Params 5_instruction: |
        Let's start from scratch - can you create
        a new function called "get 5 nectar" with a direction parameter?
      Course 4 Bee Params 6 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 6_instruction: |
        Wouldn't it be nice if we could collect
        all of these nectars with the a single function? Try adding a new parameter
        to your function called "nectar units" to control the amount of nectar to
        collect. You'll probably want to rename the function too!
      Course 4 Bee Params 7 (copy 1)_instruction: |
        Try using your new function to
        collect all of this nectar.
      Course 4 Bee Params 7_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Bee Params 8_instruction: |
        Challenge: Now there's honey to deal with
        too! Rewrite your function to take in both the number of honey units and the
        number of nectar units.  How would you use those numbers to decide what you
        should do?
      Course 4 Bee Params Ex_instruction: |
        Try using your new function to collect
        all of this nectar.
      Course 4 Binary 1_instruction: |
        Here's a function that takes a binary string
        of 1's and 0's and instructs the farmer to turn on the go from left to right,
        top to bottom, turning on the squares where the number has a zero. Run the
        code provided to see how the farmers uses binary to draw an image.
      Course 4 Binary 2_instruction: |
        What binary string could you loop 8 times to
        draw this image? Hint: the number "1" fills a hole.
      Course 4 Binary 3_instruction: |
        Can you draw this pattern by looping a single
        binary string?
      Course 4 Binary 5 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 5_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 6 (copy 1)_instruction: |
        Which binary string, repeated 10 times,
        will draw this image?
      Course 4 Binary 6_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 7_instruction: |
        Which binary string, repeated 10 times, will
        draw this image?
      Course 4 Binary 8_instruction: |
        You can complete the most of this image by
        looping a 5 bit binary number - then you'll need one more 4 bit number to
        get the bottom right-hand corner.
      Course 4 Maze 1_instruction: Get the angry bird to the pig!
      Course 4 Maze 2_instruction: Vermeide das Dynamit!
      Course 4 Maze 3_instruction: 'Program the angry bird to get to the pig. '
      Course 4 Maze 4_instruction: Versuche es mit dem "wiederholen"-Baustein, damit
        du weniger Bausteine benötigst...
      Course 4 Maze 5_instruction: Kannst du diese Aufgabe lösen und dabei die kleinstmögliche
        Anzahl an Bausteinen verwenden?
      Course 4 Maze 6_instruction: Kannst du diese Aufgabe lösen und dabei die kleinstmögliche
        Anzahl an Bausteinen verwenden?
      Course 4 Play Lab For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Lab Params 1_instruction: |
        Here's a function called "jump"
        that causes your main character to jump up 100 pixels. Use the jump function
        to collect all of the flags.
      Course 4 Play Lab Params 10_instruction: "We've added one last function for\nyou
        to use. \r\n\r\nProgram your game to call the \"level_up\" function if\n\"player_points\"
        > 10.  \r\n\r\nPlay the game, and make it past level 4 to\nmove to the next
        puzzle. "
      Course 4 Play Lab Params 2_instruction: "Now we've got flags that are too\nhigh
        for our current jump! Let's use both the \"up\" and \"down\" arrows\nso that
        we can have multiple jump heights.  \r\n\r\nWe need to add a parameter\nto
        our jump function called \"height\".  The up arrow should cause the dog\nto
        jump 200 pixels and the down arrow should make it jump only 100 pixels.\n\r\n\r\nHint:
        You will need to click \"edit\" on the jump function and update\nit so that
        it uses the \"height\" parameter."
      Course 4 Play Lab Params 3_instruction: "Let's add another parameter to the\njump
        function so that we can use it with other actors. Each actor is represented\nby
        a number, starting from one. Edit the \"jump\" function so that the definition\nincludes
        the \"actor\" parameter. \n"
      Course 4 Play Lab Params 4_instruction: |
        Here's a function called "patrol."
        Edit it to move the Cat up 400 pixels and then down 400 pixels.
      Course 4 Play Lab Params 5_instruction: |
        Fill in the "actor" parameter input
        so that we can call the "patrol" function for each of the actors. Remember,
        the actors correspond to numbers 1, 2, and 3.
      Course 4 Play Lab Params 6_instruction: |
        Add another parameter called "speed"
        to the "patrol" function. Use a "set speed" block with the new "speed"
        parameter.
      Course 4 Play Lab Params 7_instruction: "Look at the code provided to see if\nyou
        can figure out what each block does.  \r\n\r\nWhen you're done, use the\narrow
        keys to control the Dog and collect all of the flags."
      Course 4 Play Lab Params 8_instruction: |
        Use a "when touching" block to send
        Dog back to the top-left ONLY if Dog touches any of the other actors.
      Course 4 Play Lab Params 9_instruction: "You may recognize this game from an\nearlier
        level. \r\n\r\nWe've added a function called \"score_points\" that\ntakes
        the parameter \"points\". \r\n\r\nEdit the function so that the \"points\"\nparameter
        is added to the \"player_points\" variable. \r\n\r\nWhen you're\ndone, click
        \"Run\" to play.  When Dog scores 10 points, you will move on\nto the next
        puzzle. "
      Course 4 Play Lab Vars 1_instruction: |
        This time you don't have to write any
        code, just hit "Run" to play the game! In this game, you're the dog who
        is trying to collect more flags than the cat. Use the down arrow to control
        the dog. Press "Finish" when you're done playing.
      Course 4 Play Lab Vars 2_instruction: |
        The race in that last puzzle wasn't
        very fair! Change the "dog_speed" variable to make sure you can collect
        more flags than Cat. The first to collect 10 flags wins!
      Course 4 Play Lab Vars 3_instruction: |
        Here's a new kind of game! Use the
        left and right arrows to move, and the up arrow to jump. See if you can collect
        all of the flags.
      Course 4 Play Lab Vars 4_instruction: |
        Now we're using a variable called "height"
        to control how high the dog can jump. Update the "height" variable so that
        the dog can jump high enough to reach all the flags.
      Course 4 Play Lab Vars 5_instruction: "Let's build a game! First we'll need\na
        score. Rebuild the code that you saw in the last level to set the score\nto
        10. \n"
      Course 4 Play Lab Vars 6 (copy 1)_instruction: |
        Cool, now we've got our score
        variable, but how are we going to make it useful? How about adding to your
        score variable each time you hit the enemy with a fireball? Use the "when
        actor 2 touches anything" event to trigger an update to your score when your
        fireballs hit the cat. You can increment the score by setting score = score
        + 1. Get your score up to 10 (going one at a time!) to pass the level.
      Course 4 Play Lab Vars 6_instruction: "Use the right arrow to shoot hearts.\r\n\r\nIn\nour
        game, how should we score points? Add 1 to your \"points\" variable each\ntime
        Dog hits Cat with a heart. Use the \"when actor 2 touches anything\"\nevent
        to trigger an update to your score. You can increment your variable\nby setting
        \"points = points + 1.\" Get your score up to 10 (going one at\na time!) to
        pass the level."
      Course 4 Play Lab Vars 7_instruction: |
        Nice, now let's make sure this game
        isn't too easy to play. Any time Dog (actor 1) gets hit by yellow hearts
        from Cat (actor 2), you should lose a point. Start with 10 points so it's
        not too hard. Let your score drop down from 10 to 0 to pass the level.
      Course 4 Play Lab Vars 8 (copy 1)_instruction: |
        Alright, one last thing for
        this game - let's set it up so the player can win (or lose). Use a forever
        loop to check the value of score - if score is ever greater that 20, make
        the enemy vanish. If the score is every less than 0, make the player vanish.
        Click "Finish" when the game works like you'd like it to.
      Course 4 Play Lab Vars 8_instruction: |
        Let's set up this game so the Dog can
        win (or lose). Use a forever loop to check the value of score - if score is
        ever greater that 20, make the enemy (the Cat) vanish. If the score is ever
        less than 0, make the player (the Dog) vanish. Click "Finish" when the game
        works like you'd like it to.
      Course 4 Play Lab Vars 9_instruction: "Free Play time! Here are all of the\nvariables
        we've played with so far in this stage, as well as a few more in\ncase you
        want them. \r\n\r\nNotice that there are now so many blocks in our\ntoolbox
        that they need to be organized!  Here, we've put each piece into\nan appropriate
        category.  Take some time to explore everything that is available.\nWhen you're
        done browsing, make a game or story using repeats, variables,\nand events.
        \ \r\n\r\nHint: scroll down to see all the commands in the workspace."
      Course 4 Play Lab Vars_instruction: |
        Alright, one last thing for this game
        - let's set it up so the player can win (or lose). Use a forever loop to
        check the value of score - if score is ever greater that 20, make the emeny
        vanish. If the score is every less than 0, make the player vanish.
      Course 4 Play Labs For Loops 1_instruction: |
        Let's make the dog speak every
        number from 1 to 100. Use a for loop and the counter block to speak the counter
        variable each time the loop is run.
      Course 4 Play Labs For Loops 2_instruction: |
        This time, let's try counting
        the odd numbers from 1 to 100.
      Course 4 Play Labs For Loops 3_instruction: |
        If we count by larger numbers,
        we count even higher in the same amount of time. Try making the dog count
        from 10 up to 1000, 10 at a time.
      Course 4 Play Labs For Loops 4_instruction: |
        Changing the increment can be
        helpful, but we're still counting linearly (each number is the same distance
        from the last) What if I wanted to count exponentially? Without changing the
        settings in this for loop, can you count 1, 4, 9 , 16, 25... (counter squared)?
      Course 4 Play Labs For Loops 5_instruction: |
        In the last stage we counted the
        square of each number. Try changing "counter ^ 2" to "counter ^ 3" to
        count the cube of each number (1, 8, 27, 64, 125, 216, 343…)
      Course 4 Play Labs For Loops 6_instruction: |
        You may recall that a prime number
        is any whole number that is only divisible by itself and 1. Use the "is_prime"
        function to speak out only the prime numbers from 1 to 100.
      Course 4 Play Labs For Loops 7_instruction: |
        Could you use a for loop to help
        me speak the sequence 1, 4, 7, 10, 13, 16, 19, 22, 25?
      Course 4 Play Labs For Loops 8_instruction: "Now, help the actors move as they\ncount.
        \ \r\n\r\nDog should move and count by adding 2 (counter + 2) each time.  Cat\nwill
        move and count by multiplying by 2 (counter * 2)  each time. Penguin\nwill
        move and count to the power of 2 (counter ^ 2) each time.  Who will reach\ntheir
        flag first?"
      Course 4 Variables Assessment_instruction: Können Sie dieses Bild mit einer
        Variablen für die Seiten erstellen? Jede Zeile sollte 50 Pixel lang sein.
      Course1BeePuzzle12_instruction: Get three nectars and then make two honey
      Course1MazeAssessment1_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig"
      Course1MazeAssessment2_instruction: "This is a test!\r\nMove one way, then\nanother
        to get me to the pig."
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: "Write a function called food-critic, which takes\nin
        the name of a food and produces a String that says how you feel about that\nfood.
        For example, (food-critic “pizza”) might evaluate to “delicious”, but\n(food-critic
        “rotten eggs”) might evaluate to “gross!”. Choose at least two\nfoods to review,
        but you can you write more if you like!  Don’t forget to\nadd an “else” clause!\r\nOne
        example - and part of the definition -  has already\nbeen done for you!"
      Eval Cond 7_instruction: "Free Play: Write a function called green-shape, which\ntakes
        in the name of a shape and produces a solid green shape. Your function\nshould
        work with at least “circle”, “star” and “rectangle”, but you can add\nother
        shapes if you like. You can choose the size of each shape. Don’t forget\nto
        add an “else” clause!\r\nOne example - and part of the definition -  has\nalready
        been done for you!\r\n"
      Eval Cond 8_instruction: "Free Play: Suppose you want to own a car at 21, or\nhave
        your own business by 30. Write a function called life-goals, which takes\nin
        an age and produces a string that describes your life goals by then. Don’t\nforget
        to add an “else” clause!\r\n"
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The design recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition. The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the design recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        _overlay_ to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay function to place a 75
        pixel radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      frozen circle function in circle_instruction: |
        Now let's create 20 overlapping
        circles, turning 18 degrees between each circle.
      frozen circle function with parameter_instruction: |
        Here's a ”Create circle”
        block that can make circles of different sizes. Can you use this to create
        a small circle of size 5 and a larger circle of size 10?
      frozen circle function_instruction: |
        Use the new “Create a circle” block to
        create 10 overlapping circles. Don't forget to jump forward between circles.
      frozen circle_instruction: |
        A circle is a special shape. Can you figure out
        what number to replace the question marks with to draw a circle?
      frozen cross rotate dense_instruction: |
        Let's repeat it 90 times! How many
        times does 90 go into 360? Hint: It's a really small number.
      frozen cross rotate_instruction: |
        Now try repeating it 10 times. How many degrees
        do you need to turn between each line?
      frozen cross_instruction: |
        Use the “Repeat” block to create a plus sign. Did
        you notice Elsa can move forward and backward?
      frozen diamond mini snowflake_instruction: |
        Did you know every snowflake is
        a different shape? Let's create a new snowflake by using the “Repeat" block
        to repeat a parallelogram 4 times, turning right by 90 degrees between each
        parallelogram.
      frozen diamond snowflake_instruction: |
        Now, let's create a new snowflake by
        using the repeat block to repeat a parallelogram 10 times, turning right by
        36 degrees between each one.
      frozen diamond_instruction: |
        Let's create a parallelogram. It's just like
        a square but has different angles: 60 and 120 degree angles instead of 90
        degree angles.
      frozen freeplay_instruction: |
        You've officially become a master artist! Create
        a winter wonderland.
      frozen line_instruction: |
        Hi! I'm Elsa of Arendelle. Help me create a single
        line.
      frozen perpendicular_instruction: |
        Now let's see if we can create two lines
        that are at a 90 degree angle to each other. You will need to use the “Turn”
        block as well as the “Move” block.
      frozen snowflake branch_instruction: |
        Try using the ”Create a snowflake branch”
        block to create three branches, which starts to look like a snowflake.
      frozen snowflake full_instruction: |
        Now let's repeat it 8 times to make a
        beautiful snowflake!
      frozen snowflower_instruction: |
        Intricate snow patterns can be created with
        very simple shapes. Can you make a pattern by repeating 5 circles of size
        5 and 5 circles of size 10?
      frozen square iterative_instruction: |
        It seems like we're halfway to making
        a square. Let's put 4 lines together to create a square.
      frozen square loop 3x_instruction: |
        Let's create three squares, turning after
        each square. Be sure to turn by 120 degrees before each new square.
      frozen square loop_instruction: |
        Hi, I’m Anna of Arendelle! Let’s make a square
        with the “Repeat” block, which uses fewer blocks. How many times (???) should
        the “Repeat” block loop the blocks inside it to make a square?
      frozen square snowflake_instruction: |
        Can you create a snowflake using the
        “Repeat” block to make a square 10 times, and the “Turn” block to turn 36
        degrees between each square?
      hoc2015_free_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_intro_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_maze_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_random_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_sandbox_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      hoc2015_square_instruction: |
        Hiro is "actor 1".  Use the Move block to move
        Hiro right to touch Baymax.
      Infinity_catch_instruction: Kannst du Elsa ("Figur 2") dazu bewegen, Anna mithilfe
        der Pfeiltasten einzufangen?
      Infinity_finale_instruction: Erstelle alles, was dir gefällt und teile es!
      Infinity_move_collide_instruction: Hiro ist "Figur 1". Bewege ihn nach rechts
        zu Baymax und spiele einen Ton ab, wenn sie sich berühren.
      Infinity_move_directions_instruction: Baymax ist "Figur 2". Füge den Baustein
        "bewegen" hinzu und verschiebe Baymax dann mit Hilfe der Pfeiltasten. Lass
        Baymax die beiden anderen Charakteren berühren.
      Infinity_move_right_instruction: Hiro ist "Figur 1". Verwende den Baustein "bewegen"
        um Hiro nach rechts zu bewegen und Baymax zu berühren.
      Infinity_repeat_instruction: Benütze den Baustein "endlos wiederholen" um Anna
        400 Pixel nach oben und unten zu verschieben.
      Infinity_say_instruction: Lass Anna "Hi there" sagen mit Hilfe des "sage"-Bausteins.
      Infinity_shoot_instruction: Baymax ist "Figur 2". Lass Baymax eine Rakete auf
        Hiro abschiessen.
      Infinity_shoot_directions_instruction: Hiro ist "Figur 3". Lass Hiro ein Geschoss
        auf alle vier Charakteren abfeuern. Warte jeweils eine Sekunde nach jedem
        Schuss.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: Berühre noch mehr Schneeflocken!
      Infinity_touch_four_instruction: Bewege Anna hoch, runter, nach links und rechts,
        damit sie alle vier Schneeflocken berührt.
      Infinity_touch_score_instruction: Anna erhält einen Punkt, sobald sie eine Schneeflocke
        berührt. Klicke danach "Abspielen" und steuere sie so, dass sie alle Schneeflocken
        genau einmal berührt.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: |
        Draw a short line up and a long one
        to the right!
      K-1 artist 1 level 10_instruction: |
        Draw the dashed line by using both the
        jump and draw blocks
      K-1 artist 1 level 9_instruction: Draw this using three lines
      K-1 Artist Loops 1_instruction: Draw this line by moving East 4 times.
      K-1 Artist Loops 2_instruction: Can you draw the same line using a loop?
      K-1 Artist Loops 3_instruction: Can you loop these blocks to draw 6 lines?
      K-1 Artist Loops 4_instruction: |
        Could a loop help us draw the top of this
        castle?
      K-1 Artist Loops 5_instruction: What can you loop 4 times to draw these stairs?
      K-1 Artist Loops 6_instruction: |
        This one needs two loops: one to go up the
        stairs and one to go down.
      K-1 Artist Loops 7_instruction: Can you finish this pattern with two loops?
      K-1 Artist Loops 8_instruction: Diese Treppe hat längere Stufen.
      K-1 Artist Loops 9_instruction: 'Assessment: Use a loop to draw the stairs'
      K-1 Artist Loops Free Play_instruction: Free play, draw something fun!
      K-1 Artist1 1_instruction: Draw the foot of the man with one line
      K-1 Artist1 10_instruction: |
        Draw and Jump to make the dashed path to the treasure
        X
      K-1 Artist1 2_instruction: Draw the whisker on the cat with two lines!
      K-1 Artist1 3_instruction: |
        Draw two lines east and two lines north to finish
        the house!
      K-1 Artist1 4_instruction: Draw lines up, over, and down to complete the castle!
      K-1 Artist1 5.5_instruction: |
        Complete the third tower of the castle using
        short lines
      K-1 Artist1 5_instruction: Draw the stem of this flower with two lines!
      K-1 Artist1 6_instruction: Finish the picture by using a jump block!
      K-1 Artist1 7_instruction: |
        Use the jump block to move without drawing. Jump
        up and draw a line.
      K-1 Artist1 8_instruction: |
        Draw the dashed line by using both the jump and
        draw blocks
      K-1 Artist1 9_instruction: Draw and Jump to make the dashed line
      K-1 Artist1 Assessment 1_instruction: Draw the short and long lines!
      K-1 Artist1 Assessment 2_instruction: Draw the short dashed lines!
      K-1 Artist2 1_instruction: Zeichne ein Quadrat unter das Dreieck.
      K-1 Artist2 2_instruction: Jump and draw a square next to the house.
      K-1 Artist2 3_instruction: Zeichne ein Quadrat neben das andere Quadrat
      K-1 Artist2 4_instruction: Zeichne ein Rechteck um die Brücke zu vervollständigen.
      K-1 Artist2 5_instruction: Draw a rectangle to complete the bridge supports
      K-1 Artist2 6_instruction: Draw two squares to make a rectangle!
      K-1 Artist2 Assessment1_instruction: |
        Assessment: Draw a square next to the
        other square.
      K-1 Artist2 Free Draw_instruction: Draw anything!
      K-1 Artist2_7_instruction: Draw a rectangle to give the dresser a top drawer!
      K-1 Bee 1_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 10_instruction: Hole 4 Nektar und mache dann 2 Honig!
      K-1 Bee 11.5_instruction: Hole 4 Nektar um 4 Honig zu machen!
      K-1 Bee 11_instruction: Hole 3 Nektar und mache dann 1 Honig
      K-1 Bee 12_instruction: Hole 3 Nektar und mache dann 2 Honig!
      K-1 Bee 13_instruction: Hole 3 Nektar und mache dann 1 Honig!
      K-1 Bee 14_instruction: |
        Get me to the nectar, pick it up, get me to the honey,
        and make honey
      K-1 Bee 15_instruction: Get two nectar to make two honey!
      K-1 Bee 2_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 3_instruction: |
        Move me to the flower, get the nectar, then move me
        to the honeycomb, and make honey
      K-1 Bee 4_instruction: Get two nectar and then make two honey!
      K-1 Bee 5_instruction: Get three nectar and then make three honey!
      K-1 Bee 6_instruction: Get two nectar and then make two honey!
      K-1 Bee 7_instruction: Hole 3 Nektar und mache dann 2 Honig!
      K-1 Bee 8_instruction: Get two nectar and then make two honey!
      K-1 Bee 9_instruction: Get two nectar and then make two honey!
      K-1 Bee Assessment 1_instruction: Get nectar to make honey!
      K-1 Bee Assessment 2_instruction: Get nectar to make honey!
      K-1 Bee Loops 1_instruction: Get the nectar to make honey!
      K-1 Bee Loops 10_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops 11_instruction: |
        Assessment: Use loops and get the nectar and
        honey!
      K-1 Bee Loops 12_instruction: |
        Assessment: Use loops to get the nectar, honey,
        and to move!
      K-1 Bee Loops 2_instruction: |
        Use a loop to move and then get the nectar and
        make honey!
      K-1 Bee Loops 3_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 4_instruction: |
        Use loops to get the nectar, make honey, and
        to move!
      K-1 Bee Loops 5_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 6_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops 7_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 8_instruction: Use loops to get the nectar and honey!
      K-1 Bee Loops 9_instruction: Use loops to get the nectar, honey, and to move!
      K-1 Bee Loops Assessment 1_instruction: |
        Get nectar to make honey and use loops
        to move!
      K-1 Bee Loops Assessment 2_instruction: Get nectar to make honey using loops!
      K-1 Bee Puzzle 12_instruction: Get three nectars and then make two honey
      K-1 Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      k-1 maze 1_instruction: Can you make me move West to get to the pig?
      K-1 Maze 10_instruction: 'Go around the TNT to get me to the pig! '
      K-1 Maze 11_instruction: |
        Trace the path and lead me to the silly pig. Avoid
        TNT or the feathers will fly! Hint: He's South of me.
      K-1 Maze 2_instruction: Move me East to get me to the pig!
      K-1 Maze 3_instruction: Move me South to get me to the pig!
      K-1 Maze 4_instruction: Move me North to get me to the pig!
      K-1 Maze 5_instruction: Move me East to get me to the pig!
      K-1 Maze 6_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 7_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 8_instruction: Move one way, then another to get me to the pig!
      K-1 Maze 9_instruction: Move one way, then another to get me to the pig!
      K-1 Maze Assessment 1_instruction: Assessment -- Get me to the pig!
      K-1 Maze Assessment 12_instruction: Assessment Level
      K-1 Maze Assessment 13_instruction: Assessment Level
      K-1 Maze Assessment 2_instruction: Assessment -- Get me to the pig!
      K-1 maze debug 1_instruction: Change the code to get me to the pig!
      K-1 maze debug 10_instruction: |
        Debug this level by rearranging and adding
        blocks to get me to the pig!
      K-1 maze debug 11_instruction: "This is a test!\r\nDebug this level by rearranging\nand
        adding blocks to get me to the pig"
      K-1 maze debug 2_instruction: |
        Figure out what is missing and then add blocks
        to get me to the pig!
      K-1 maze debug 3_instruction: |
        Figure out what is missing and then REMOVE blocks
        to get me to the pig!
      K-1 maze debug 4_instruction: |
        Run through these blocks and fix them! I think
        I might be going in the wrong direction.
      K-1 maze debug 5_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 6_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 7_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 8_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 maze debug 9_instruction: |
        Debug this level by rearranging and adding blocks
        to get me to the pig!
      K-1 Maze debug Assessment 1_instruction: |
        Assessment -- Debug this level by
        rearranging and adding blocks to get me to the pig!
      K-1 Maze Loops 1_instruction: Bring mich zum Schwein!
      K-1 Maze Loops 10_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 11_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 12_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 2_instruction: Use the Repeat block to get me to the pig!
      K-1 Maze Loops 3_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 4_instruction: Bring mich zum Schwein!
      K-1 Maze Loops 5_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 6_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 7_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 8_instruction: Get me to the pig! Use the repeat loop.
      K-1 Maze Loops 9_instruction: Bring mich zum Schwein!
      K-1 Maze Loops Assessment 1_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Loops Assessment 2_instruction: |
        Assessment -- Use loops to get me
        to the pig!
      K-1 Maze Multi 14_instruction: Assessment Level
      K-1 Maze Multi 15_instruction: Assessment Level
      K-1 Maze Sequence Assessment 1_instruction: "This is a test!\r\nMove one way,\nthen
        another to get me to the pig"
      K-1 Maze Sequence Assessment 2_instruction: "This is a test!\r\nMove one way,\nthen
        another to get me to the pig."
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: "In this version of the Internet Simulator,\nyou
        can connect to up to 5 other people in a room. When you send messages\nin
        the room, everyone receives them. What are some of the challenges of this\nsystem,
        and how might you solve them?\r\n"
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: "For this activity, connect\nto
        a router with the others in your group. Important note: The router will\nonly
        properly route messages where the first 4 bits are the To: address and\nthe
        second 4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: |
        Draw something awesome! Your code is saved
        as a project that you can return to at any time.
      NEW Course 4 Artist Functions 1_instruction: |
        Can you draw a square that is
        100 pixels in length, using a loop?
      NEW Course 4 Artist Functions 10_instruction: |
        Click "edit" to fill out the
        blocks in the function definition to make a 40 pixel square.
      NEW Course 4 Artist Functions 11_instruction: |
        We have a new function called
        "draw a line of squares." Feel free to take a look inside the function block
        to see how we built it. Click on "Run" when your are ready for the next
        puzzle.
      NEW Course 4 Artist Functions 12_instruction: |
        Use the "draw a line of squares"
        function from the last puzzle to draw this pattern."
      NEW Course 4 Artist Functions 13_instruction: |
        Can you draw a star shape using
        the "draw a line of squares" function? Hint: Each iteration, you'll have
        to move forward a certain number of pixels and turn 144 degrees.
      NEW Course 4 Artist Functions 14_instruction: 'Free Play time! '
      NEW Course 4 Artist Functions 2_instruction: |
        Can you draw 3 squares 20 pixels
        apart from one another? Hint: each square is 100 pixels in size
      NEW Course 4 Artist Functions 3_instruction: "Here is a new type of Block.\nIt
        is called a \"Function block.\" Click \"Run\" to see what it can do. \n"
      NEW Course 4 Artist Functions 4_instruction: |
        Use the "draw a square" function
        to draw this pattern. Hint: You will have to use a "turn right by 120 degrees"
        block after each square.
      NEW Course 4 Artist Functions 5_instruction: |
        How did the "draw a square"
        block know what commands to run? Click on "edit" in the "draw a square"
        function block. The blocks in the function editor are the definition that
        make up "draw a square." When you're done looking around, click "Save
        and Close" and then "Run."
      NEW Course 4 Artist Functions 6_instruction: "Using the \"draw a square\" function\nblock,
        can you draw this picture? Hint: each square is 20 pixels apart.\r\n"
      NEW Course 4 Artist Functions 7_instruction: "Are you getting the hang of how\nto
        use function blocks? Let's modify this square so that it is 200 pixels\nin
        size. Hint: click on \"edit\" to change the size of the \"draw a square\"\nfunction
        editor. Remember to click on \"save and close\" to get out of the\nfunction
        editor. \n"
      NEW Course 4 Artist Functions 8_instruction: |
        We have given you most of the
        code to create a function, but there seems to be something missing. Can you
        edit the function definition to draw the triangle?
      NEW Course 4 Artist Functions 9_instruction: |
        Which block do you need to add
        to get the triangle to sit on top of the square?
      NEW Course 4 Artist Functions inspire_instruction: "Free Play Inspiration:\nYou've
        now learned everything you need to know to make a pattern like this!\nIf this
        picture inspires you, try to make something similar. Otherwise, create\nsomething
        all your own.\r\n \r\nWant to know how our inspiration pattern was\nmade?
        Visit https://studio.code.org/c/106387801 for the solution."
      New Course 4 Artist Functions Level 4_instruction: |
        Use the "draw a square"
        function to draw this pattern.
      NEW Course 4 Artist Params 1_instruction: |
        Let's define this function to draw
        a square with 50 pixel sides. Click "edit" to get started.
      NEW Course 4 Artist Params 10_instruction: "Create a \"draw a hexagon\" function\nblock
        with a length parameter. Hint: this hexagon is 100 pixels in size. \n"
      NEW Course 4 Artist Params 11_instruction: |
        Can you figure out how to draw
        this shape? Edit the function to use the "sides" parameter.
      NEW Course 4 Artist Params 12_instruction: |
        Can you complete this drawing?
        The sides of all the shapes are 100 pixels long.
      NEW Course 4 Artist Params 12a_instruction: |
        This image is similar to the last.
        Can you use a "for loop" with your function to make this design?
      NEW Course 4 Artist Params 13_instruction: |
        Let's edit this "draw a shape"
        function. It already has a "length" parameter. Now, let's edit the function
        to add a "sides" parameter. Remember the angle to turn for a given shape
        is 360 divided by the number of sides it has. Hint: These are the lengths
        for each shape: the triangle is 100 pixels, the hexagon is 25 pixels, and
        the square is 50 pixels.
      NEW Course 4 Artist Params 14_instruction: "Can you recreate these shapes?\nDrag
        the \"length\" parameter into the function definition. \n"
      NEW Course 4 Artist Params 15_instruction: |
        Freeplay: Here are the functions
        you've written, and some more for you to play with. Draw something awesome!
      NEW Course 4 Artist Params 2_instruction: |
        Create a “draw a triangle" function
        with 50 pixels sides from scratch
      NEW Course 4 Artist Params 3_instruction: "Now let's use the function to draw\n3
        triangles from the last puzzle in a row. Hint: each triangle is 50 pixel\napart.\r\n"
      NEW Course 4 Artist Params 4_instruction: |
        Do you notice anything different
        about these function blocks? Click “Run” to see what happens.
      NEW Course 4 Artist Params 5_instruction: "Fill in the ??? in the length parameter\ninput
        block. Hint: The pentagon is 100 pixels in size. \n"
      NEW Course 4 Artist Params 6_instruction: |
        Fill in the "length" parameter
        to draw these shapes by replacing the "???" with the right numbers. The
        square and triangle are 100 pixels in size while the hexagon is 75 pixels
        in size.
      NEW Course 4 Artist Params 7_instruction: |
        Can you complete this drawing? Hint:
        each triangle is 25 pixels larger than the last.  The first triangle is 25
        pixels in size.
      NEW Course 4 Artist Params 8_instruction: |
        The code for this triangle function
        is broken. Can you edit the function to fix it, and then make triangles of
        length 25, 50, and 75?
      NEW Course 4 Artist Params 9_instruction: |
        Click "edit" to fill in the function
        definition of "draw a square" and add a parameter. It should take a length
        parameter, just like the triangle. This time, draw 3 squares: 25, 50 and 75
        pixels in length, each 100 pixels apart.
      NEW Course 4 Artist Params inspire_instruction: "Free Play Inspiration: You've\nnow
        learned everything you need to know to make a pattern like this! If this\npicture
        inspires you, try to make something similar. Otherwise, create something\nall
        your own.\r\n \r\nWant to know how our inspiration pattern was made? Visit\nhttps://studio.code.org/c/106387530
        for the solution."
      NEW Course 4 Artist Vars 1.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. \n"
      NEW Course 4 Artist Vars 12_instruction: |
        Now, recreate the algorithm from
        the last level and create a pentagon with sides of 150.
      NEW Course 4 Artist Vars 2.5_instruction: "Take a look at the code, can you\nsee
        how the \"set length\" block and \"length\" block works together? Click\non
        \"Run\" to see it in action. \n"
      NEW Course 4 Artist Vars 2_instruction: "Drag a number block to the \"set length\"\nblock
        to draw a set of 50 pixel triangles. \n"
      NEW Course 4 Artist Vars 4 5_instruction: |
        Awesome job on the last puzzle,
        let's try it again this time let's make this cool design with with 60 pixel
        hexagon's.
      NEW Course 4 Artist Vars 4_instruction: |
        Let's try it again. Can you set the
        length variable to make this cool design with hexagons? Hint: It's a multiple
        of 10.
      NEW Course 4 Artist Vars 6_instruction: "Draw this pattern by dropping the\nlength
        variable in the correct places, and then setting the right value for\nlength.
        (Hint: it's a multiple of 10).  \r\n\r\nSee how you only set the\nvalue for
        length once, and the code uses the right value everywhere?\r\n\r\n\r\n"
      NEW Course 4 Bee For Loops 1_instruction: |
        Use a loop to collect the nectar
        from each flower.
      NEW Course 4 Bee For Loops 10_instruction: |
        Use your for loop "counter" variable
        to control how far to move horizontally.
      NEW Course 4 Bee For Loops 10a_instruction: |
        Ready for a challenge?  Take what
        you've learned about loops and try to solve this problem. Remember: You may
        have to run your solution multiple times before you figure out all of the
        steps.
      NEW Course 4 Bee For Loops 11_instruction: |
        Can you use the loop variable to
        control movement and nectar collection?
      NEW Course 4 Bee For Loops 2_instruction: |
        Add the code necessary to make sure
        the bee collects all the nectar. Look at how much code you need for this puzzle!
        (We'll learn a simpler way in the next puzzle.)
      NEW Course 4 Bee For Loops 3_instruction: "Ah, the \"for loop\" makes this\nmuch
        easier! All the code you need is here, take a look at how it is put together\nthen
        click \"Run\" to see how it works. \n"
      NEW Course 4 Bee For Loops 4 4_instruction: |
        Now we need to move forward "counter"
        times, then get nectar "counter" times.  Can you use two "repeat" loops
        to solve this challenge?
      NEW Course 4 Bee For Loops 4_instruction: "Replace the ??? in the \"for loop\"\nwith
        the largest amount of nectar the bee has to collect. \n"
      NEW Course 4 Bee For Loops 5 5_instruction: |
        Are you getting the hang of using
        the "for loop"? Let's help the bee get the rest of the nectar.
      NEW Course 4 Bee For Loops 5_instruction: |
        You can also use a "for loop"
        to count down. Try gathering this nectar by counting down from 5 to 1 by 1.
      NEW Course 4 Bee For Loops 6_instruction: |
        The last number in your for loop
        is called the "increment". Each time the loop is run, the counter variable
        changes by the value of the increment. Try collecting these flowers using
        an increment of 2.
      NEW Course 4 Bee For Loops 7_instruction: "Now, let's combine the \"counter\"\nvariable
        with a math block! How can you use the \"counter\" variable to navigate\nthis
        garden with the fewest number of blocks possible? What do you need to\ndo
        to collect 3, 6, 9, 12, 15 nectar this time? The secret is in the \"counter\"\nvariable!\r\n\r\nRemember:
        If your loop is counting up, the increment is added\nto your \"counter\" variable
        each time through."
      NEW Course 4 Bee For Loops 8_instruction: "You've got this! What should your\nincrement
        be to collect 3, 6, 9, 12, 15 nectar?\r\n"
      NEW Course 4 Bee For Loops 9_instruction: |
        If your loop is counting down, the
        increment is subtracted from your counter variable each loop. What should
        your increment be to collect 15, then 12, then 9, 6, 3 nectar?
      NEW Course 4 Bee For Loops 95_instruction: |
        Take a look at each piece of the
        "for loop" that you have just created.  Can you figure out which numbers
        you need to double to solve this puzzle? Why does it work?
      NEW Course 4 Play Lab Params 11_instruction: "It's Free Play time! Have fun\nwith
        all the blocks in your tool box. \n"
      NEW Course 4 Play Lab Params 5 5_instruction: |
        Let's try that again, but with
        less help. What do you need to edit this time to make the actors patrol?
      NEW Course 4 Play Lab Vars 4 5_instruction: |
        “What do you think this code will
        do? Press “Run” to see what happens.”
      NEW Course 4 Play Labs For Loops 7a_instruction: |
        Using what you learned so
        far, can you have Dinosaur take a step forward every time Penguin counts?
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "It's Free Play\ntime,
        have fun with all the blocks in your tool box. \n"
      NEW Course 4 Play Labs For Loops 8a_instruction: "Challenge: How would you\nuse
        the \"for loop\" to get every actor to go around and say their actor number,\nthen
        vanish from the screen? \n"
      New Play Lab Project_instruction: |
        Create your own story or game! Your code
        is saved as a project you can return to at any time.
      Ninjacat Demo B (copy 1)_instruction: "\r\nLet’s begin by exploring a simple\nvideogame,
        and then figuring out how it works. You can use the arrow keys\nto move the
        ninja left, right and jump - try to catch the unicorn and avoid\nthe dragon!\r\n\r\n\r\n\r\n
        \ \r\n\r\n"
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: "Here's your Big Game as you last left it.\nTry
        clicking the Remix button to spin off a new remix of your project.\r\n\r\nAny\nchanges
        you make after you click Remix will be saved on your new remix and\nnot on
        your main Big Game."
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Funktionen erlauben dir, neue Blöcke zu definieren!
        Wir haben Blöcke in eine Funktion namens "zeichne ein Quadrat" verschoben,
        um ein Quadrat zu zeichnen. Nutze die Funktion "zeichne ein Quadrat", um die
        Gläser zu erstellen? Die Quadrate sind 75 Pixel auseinander.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        from going either direction? Try using the AND block to program the function
        on-screen? to check if Sam is safe-left? AND safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: Eichel! Eichel! Eichel! Verwende einen "Wenn"-Baustein,
        um mich mit der geringsten Anzahl an Bausteinen zur Eichel zu bringen.
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: Also, machen wir das nochmals zum Üben. Diese Übung ist
        nicht gross anders als die vorherige – aber Achtung auf die Mauer!
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: Der "Wenn-Sonst"-Baustein überprüft eine Bedingung und
        führt danach das eine ODER andere aus. Verwende diesen neuen Baustein m mir
        zu helfen zur Eichel zu gelangen.
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: Eine weitere Übung mit dem "Wenn-Sonst"-Baustein. Kriegst
        du das beim ersten Versuch hin?
      scrat 20_instruction: Kannst du mir behilflich sein ein komplexes Labyrinth
        zu lösen, indem du nur 3 Bausteine hinzufügst? Wenn du es richtig machst,
        kann ich jeden kurvigen Pfad gehen, egal wie lange er ist. Beeile dich, das
        Eis schmilzt!
      SpecialFrozenLevel_instruction: |
        You've officially become a master artist!
        Create a winter wonderland.
      Standalone_Artist_1_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Standalone_Artist_2_instruction: |
        Draw this diamond with 120 and 60 degree
        angles and 150 pixel long sides.
      Standalone_Artist_3_instruction: |
        Can you draw this hexagon with 100 pixel
        sides and 60 degree turns?
      Standalone_Artist_4_instruction: |
        Now you've got a new block to play with,
        the loop. This will repeat a set of commands. What happens if you loop these
        commands 6 times?
      Standalone_Artist_5.5_instruction: |
        Notice how we simplified the diamond code
        by turning it into a loop. You can loop that whole sequence 12 times to draw
        the flower. Hint: You'll need to turn 30 degrees after your diamond loop
        so you don't keep drawing over the same diamond.
      Standalone_Artist_5_instruction: |
        How many times do you need to loop this diamond
        to draw the flower?
      Standalone_Artist_6_instruction: |
        Loop this hexagon code 6 times to create
        the design. How many degrees will you need to turn each time? Hint: divide
        the number of degrees in a circle by the number of times you are looping.
      Standalone_Artist_7_instruction: |
        A function is another programming tool to
        help you avoid repeating yourself. This function draws a flower, so you can
        use it any time you want to draw a flower. Use this and the new jump block
        to draw these flowers. Hint: The flowers are 150 pixels apart
      Standalone_Artist_8_instruction: |
        Here's a function called "Draw a shape"
        that we've programmed to draw hexagons. Run the code to see what it does
        and then experiment with the function to see what happens. Can you make it
        draw a pattern of squares, triangles, or octagons?
      Standalone_Artist_9_instruction: |
        Now go ahead and make whatever picture you'd
        like! You've even got an empty function that you can make do whatever you
        want!
      Standalone_Artist_v2_instruction: |
        Welcome to Artist! First off, let's try
        to make a simple square using the turn right block and move forward block.
        Each side should be 100 pixels long.
      Test Play Lab_instruction: This is a test play lab level.
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2L05 - NetSim - Packets and Building TCP_instruction: "Develop a Protocol\nfor
        Reliably Sending a Message.\r\n\r\nConstraints:\r\n- Packets may contain\nonly
        6 characters\r\n- Packets may drop with small probability\r\n- Packets\nmay
        not arrive in order"
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L2 NetSim Hub Mode_instruction: "Now use the Internet Simulator to send the\nbattleship
        moves. For setup, join a Room with your group, and add ships to\nyour paper
        board for each opponent. When playing, all communication must be\ndone through
        the tool, so no talking, but have fun!\r\n"
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: "For this activity, connect to a\nrouter
        with the others in your group. Important note: The router will only\nproperly
        route messages where the first 4 bits are the To: address and the\nsecond
        4 bits are the From: address.\r\n\r\n[TODO: NetSim needs to support\nhierarchical
        addresses. For now, level is set up for 4 bit to and from addresses]"
      U2L5 NetSim Classroom Internet_instruction: "For this activity, connect to\na
        router with the others in your group. The Internet Simulator now provides\na
        place for you to put the To and From addresses, so you don't have to type\nout
        the bits manually.\r\n\r\n"
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U313 Two Buttons with Ids_instruction: |
        Now you try it! We've given you some
        starting code with two buttons and two event handlers on the screen, but we've
        just left the default Ids of "id".  You need to change the ids to connect
        the right event handler to the right button. (Interestingly, the incorrect
        program does work, but exhibits some bizarre behavior.  We'll discuss this
        more in the next lesson.  Make the buttons work correctly for now).
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Write the turnAround() function
        and use it to make the turtle move as depicted.
      U3L03 define turnRight and draw a rectangle_instruction: "Create a turnRight()\nfunction
        and draw a rectangle twice as tall as it is wide by having the turtle\nnavigate
        clockwise to draw the rectangle. \n"
      U3L03 Draw a T using turnAround_instruction: |
        The turnAround function is now
        provided for you in the code.  Use the turnAround() function to draw a T as
        depicted.
      U3L03 draw diamond_instruction: "Use any and all of the functions you wrote\npreviously
        to make a 'diamond' shape as shown in the image.\r\n\r\nNOTE:\nthis is another
        tricky one.  The 4 sides of the diamond are made by drawing\nthree steps with
        other movement made between calls.  HINT: you might want\nto make another
        function that handles drawing one side of the diamond. "
      U3L03 Three Steps_instruction: |
        Draw 3 "steps" moving up and to the right.  Notice
        the pattern in the movement. You should define a function called drawStep()
        which draws one of the steps, and then call it 3 times to achieve the effect.
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 Challenge 1 triangle_instruction: |
        Check out the extended Turtle palette
        now made available to you. These new commands accept parameters, allowing
        you to specify precisely how the function operates rather than only being
        able to move or turn a predetermined amount. Make use of these functions to
        draw the triangle as shown.
      U3L06 Challenge 2 purple square_instruction: |
        This time we're going to learn
        a little bit about changing the turtle's pen. Read through the documentation
        for penWidth() and penColor(), and then draw the purple square as shown.
      U3L06 Challenge 3 fill pink_instruction: |
        Now let's try to fill in the entire
        background of the screen. To make it a little easier for you, we can tell
        you the color we chose is one of the 140 named colors.  If you don't know
        what the named colors are, take a closer look at the documentation for penColor()
        again. Hint: you need to use dot().
      U3L06 Challenge 4 bullseye_instruction: |
        Let's try this out one more time.
        This time the colors are NOT named colors - you need to use the hex-color
        number to set the color.  So that you're not randomly guessing, we'll give
        you a hint -- each of the colors shown in the target image is one of these
        one of the five in the following list:  #00ABDC, #CC4400, #1188CC, #006699,
        #11CC00  You might be able to guess correctly if you apply what you know about
        RGB colors.
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: |
        Next we're going to be adding some
        curves to our drawing. Read the documentation for the "arc" commands and
        then draw the squiggles as shown. To make things easier here's a hint: all
        the parameters are multiples of 10, and the colors are from the following
        list of named colors: PowderBlue, lightBlue, Indigo, Purple, Magenta.
      U3L06 Challenge 7 smiley face_instruction: |
        To make this smiley face you'll
        need to look at the documentation for the move() command and then use it with
        the others you've learned.  You can make reasonable guesses about the colors.
      U3L06 Challenge 8 make your own_instruction: |
        Use the tools you've learned
        today to create a drawing of your own creation. If you have time, challenge
        your friends to see if they can duplicate your image.  We'll show you the
        drawing we made for ourselves.  You can try to duplicate that if you want
        to, otherwise, have fun making your own!
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play!  Use what you learned
        from loops and random to make your own little scene.  Have fun.
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: "The last problem was an example\nof
        syntax error.  App Lab did not understand which object it should be listening\nto
        for a \"click\" event so it showed an error message in the console to let\nyou
        know.  Another kind of error is a logical error - the program is valid,\nbut
        it's not doing what you want it to do.\r\n\r\nThis program has 2 errors.\nA
        (tricky) syntax error and logical error.  Find them, fix them, and make\nthe
        program work as expected."
      U3L13 - Debug Id Problem_instruction: |
        This program has problem!  Can you figure
        it out?  Run the program and see if you can figure out from the error messages
        in the console what the issue is.  There is not much code, so you might be
        able to figure it out just by reading carefully.  Make a change that will
        make the program work as expected.
      U3L13 - Turtle Driver Project_instruction: |
        Challenge: Create a “turtle driver”
        with at least three buttons on the screen to move the turtle forward, and
        turn the turtle right and left. You can copy/paste code from a previous level
        if you like but it will help build your coding muscles if you create this
        small program from scratch.  If you have time, try adding additional buttons!  You
        can also have fun changing the parameters on the turtle functions, using colors,
        etc.
      U3L13 - Turtle move with button_instruction: "Drag a button out onto the screen\nand
        set its text to \"Go forth!\".  Add an event handler for the button, that\nmakes
        the turtle move forward.  Run the program to make sure it works. \n"
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L16 - challenge say hi app_instruction: "In this challenge we give you starter\ncode
        that lays all the elements out on the screen.  Here’s what you need to\ndo:\r\nAdd
        event handler to textInput with the event type ‘input’ that shows\nthe “Say
        hi” button when that event occurs.\r\nAdd event handler to button\nso that
        on click, it writes a hello message to the screen and hides the textInput\nand
        button."
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command!  Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: "We'll be building upon some simple\nstarting
        code throughout this lesson.  Your first task: use moveTo and randomNumber\nto
        get the turtle to move to a random location with each button click.  We've\ngiven
        you starting code for our common setup: a button that moves the turtle\nwhen
        clicked.  You should modify this code.  \n"
      U3L16 - text labels_instruction: "Introducing textLabels.  First try replacing\nyour
        button with a textLabel.  Will the text respond to events just like the\nbutton?
        \ Try connecting an event handler to it.  We've started you out with\ncode
        similar to the result of the last level, you can copy your code from\nthat
        level into here if you prefer. \n"
      U3L16 - textInput getText write_instruction: |
        Introducing textInput, getText
        and write.  First run the starter code several times.  Try to change what's
        written to the screen when the button is clicked. Then use getText to write
        to the screen what the user entered in the text box.
      U3L16 - use images_instruction: |
        Introducing Images.  Try replacing the textLabel
        with an image..  Will the image respond to events just like the button?  Try
        connecting an event handler to it.  We've started you out with code similar
        to the result of the last level, you can copy your code from that level into
        here if you prefer.
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        This example shows how you
        might insert console.log statements in your code to verify for yourself how
        the values in the variables change during the running of the code.  This is
        an important debugging technique to use when each line in your program doesn't
        have a visual effect on the app that you can see to verify things are working
        right.  Run the code to see the output in the console.
      U3L19 - DEMO up down count practice app_instruction: |
        This is a demonstration
        of a simple App that uses variables, arithmetic and setText.  Play with it
        a little bit here to see what it does.  You can also come back to experiment
        if you want.  You are going to try to create this app yourself on the next
        screen.  Don't worry, we'll start you out with some of the code and leave
        the rest for you to complete.
      U3L19 - do concatenate string with var_instruction: "We've given you a piece\nof
        code from the previous screen.  Try changing the value assigned to foo\nto
        see the string change. \r\nDo this: \r\n1. Try changing the value assigned\nto
        foo to see the string change. \r\n2. By only modifying the lines of code\nthat
        were given to you, try to get the output to say: “The value of foo is:\n9.
        \ And isn’t that fine.” \r\n"
      U3L19 - fix the var name syntax error_instruction: "We've given you some code\nwith
        an error.  It doesn’t recognize the variable.  Can you figure out why?  Fix\nthe
        error and get the program to run.  Also note the error message since it\nmight
        come up at some point later in your life.\r\n\r\n"
      U3L19 - practice with setText_instruction: |
        We've started you out with the
        code shown on the previous screen.  First experiment with the app.  Identify
        where setText is being used.  CHALLENGE: modify the code to also use setText
        to change the text on the button itself when it's clicked.  GIF: U3L19 -
        setTextOfButton.gif
      U3L19 - Target Clicker App_instruction: "# A motivating example\r\n\r\nHere\nis
        an example of the kind of app we want to make.  Study this for the elements\ncontained
        in the app rather than what it is or does.  Things to investigate:\n\r\n\r\n1.
        what happens when you click on the Code.org logo? \r\n2. What happens\nwhen
        you click somewhere else? \r\n3. Try the reset button.   \r\n\r\nThe\nelements
        contained in this app appear to be simple, and they are in some ways.\nHowever,
        the computing principles involved - controlling and keeping track\nof things
        in memory while the program is running - get into some deeper issues\nof programming
        and computer science in general.  There are some devilish details\nand paths
        that can lead to misunderstanding if you're not careful.\r\n\r\nSo,\nkeep
        this app in mind as you go through the different levels in this lesson.  It\nmight
        seem like you need to learn a lot in order to get this simple thing\nworking.
        \ But it's worth taking the time to understand at a deeper level\nwhat is
        going on.  Because this one topic: controlling memory leads to many\npossible
        misunderstandings about coding, and how computers work.  We want\nto make
        sure you get it right from the outset.  \r\n\r\nSo take your time.  Work\nthrough
        the issues.  Read the explanations.  You'll come out on the other\nside a
        better programmer with much deeper knowledge and understanding of how\nthings
        work.  \r\n\r\nAre you ready?  Click 'finish' to move to the next\npage and
        start the lesson."
      U3L19 - test reassignment of two vars_instruction: |
        Why is this happening?
        The code given here is the same as the example from the previous page where
        we asked you to make a prediction about what will happen.  Run this code to
        find out if you were right.  If you weren't, that's okay.  You might experiment  a
        little if you want to, but bon't spend too much time here. We'll explain
        more on the next page.
      U3L19 - three basic ops of variables_instruction: "Do this:\r\nWe've given\nyou
        the three lines of code shown in the previous page.  Add three lines of\ncode
        just below the ones shown here to make your own variable, assign it a\nvalue
        and write it to the screen.  NOTE: change the variable name from the\ndefault
        x to something else.\r\n"
      U3L19 - try out console log_instruction: "Try out console.log.  Do this: replace\nthe
        statement write(\"foo is: \" + foo) with console.log(\"foo is: \" + foo).
        \ Run\nthe program and you should see the output show up in the console area
        below\nthe workspace.  Then try adding a few more console.log statements.
        \ Display\nsome text.  Make another variable and display that.  \r\nThe app
        screen will\nbe blank -- that's the point.  With console.log you can test
        output behind\nthe scenes in a way the user cannot see.  \r\n\r\n\r\nGIF:
        U3L19-useconsolelog.gif"
      U3L19 - up down count practice app_instruction: |
        This app is only SLIGHTLY
        different from the previous one, but much more dynamic.  See if you can figure
        out how and why the count is going up.  Once you've figured it out then you
        should be able to DO THIS: add a button to the app that when clicked makes
        the count go down, and updates the label.  When you're done the app should
        work as shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        We've given you
        the code from the previous page.  Right now, because the code only sets the
        values of variables, the app doesn't display anything. DO THIS: insert write
        or console.log statements into the code to figure out what the values of a,
        b, and c are after the code has executed.  You should have first made a prediction
        to see if your mental model of how the computer works is correct.  We'll
        ask for the answer on the next page.
      U3L19 - variable scope problem 2_instruction: |
        First run the program to see
        the problem.  You don't need to write code to solve any problem here.  But
        you do need to investigate the code and come up with an explanation for WHY
        what's happening is happening.  Why aren't 3 things being written to the
        screen?  Why does the variable foo seem to exist once but not the other times?  If
        you switch to code mode you'll see some warning messages next to two lines
        of code -- why do you get those messages?  Once you think you have a good
        answer, continue to the next page.
      U3L19 - variable scoping problem debugging_instruction: "Here is the code from\nprevious
        page that has a subtle problem with it.  FIRST: run the app and try\nit to
        see the problem. NOTE: NaN stands for \"Not a Number\".   DO THIS: figure\nout
        what's happening, where, and fix the problem.  We'll explain the issue\non
        the next page. \n"
      U3L19 - write var and string with same name_instruction: |
        Now look at this
        example. We’ve added another write statement.  Before you run the code, see
        if you can predict what the output will be.  Seriously, write it down. THEN
        run the code, mess with it if you like, and continue to the next page for
        an explanation.
      U3L2 Using Simple Commands_instruction: |
        Draw a square above and to the left
        of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Adjust the "if" block to make
        the bot respond "That's the color of the sky!" if the user inputs the color
        "blue".
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 Nested Conditionals 1_instruction: |
        Replace all instances of `str.indexOf("word")`
        with a function `contains(sentence, word)` that returns true if the word is
        in the sentence and returns false otherwise.
      U3L24 Nested Conditionals 2_instruction: |
        Use a nested conditional to respond
        to the category "pizza" and the details "Hawaiian," "vegan," and "meat."
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: "Fill in the function, findBeginNder()\nto
        get the strings \"begin\" and \"nder\" from a sentence no matter where\nin
        the sentence they exist.\r\nPrint the strings and their index to the console.\n"
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Inside the findingNemo function, write a conditional
        statement that detects if a command contains all the phrases "2000" "animated"
        and "G-rated." The function should return true if the above conditions are
        met and return false otherwise
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Inside the isBest function, write a conditional
        statement that detects if a command contains at least one of the phrases "all
        time" "all-time" "overall" or "millennium." The function should return
        true if the above conditions are met and return false otherwise
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square ABOVE and to the RIGHT
        of the starting location. (Click to show full instructions)
      XML Scratchpad_instruction: Using this test level to grab xml for unit tests
