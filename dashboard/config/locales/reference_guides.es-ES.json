{
  "es-ES": {
    "data": {
      "reference_guides": {
        "csd-2022/accelerometer-events": {
          "display_name": "Eventos de Acelerómetro",
          "content": "Al igual que los otros sensores, el acelerómetro tiene los eventos `datos` y `cambio`. Estos son particularmente útiles porque te permiten rastrear constantemente los valores actualizados del acelerómetro, como la orientación. \n\n| Evento   | Descripción                                                                                                                                                                                                                           |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `datos`  | Se activa cada 100 ms para comprobar los datos del acelerómetro.                                                                                                                                                                      |\n| `cambio` | Se activa cuando el acelerómetro detecta un cambio en el movimiento. Esto comprueba si los datos actuales del sensor son los mismos que hace 100ms. Si este es el caso, el evento no se activa. De lo contrario, el evento se activa. |\n| `agitar` | Se activa cada vez que se agita la placa.                                                                                                                                                                                             |\n\nA veces no nos importa la orientación de la placa, sólo nos importa que se mueva. Aquí es donde entran en juego eventos como `cambio` y `agitación`. "
        },
        "csd-2022/accuracy-in-ai-lab": {
          "content": "## Precisión en el Laboratorio de Inteligencia Artificial\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/03-Evaluating-Accuracy---Categorical---a.png\"/>\n\n[diagram_nums]\n\n1.  La fila superior es la puntuación de precisión de tu modelo más reciente en el Laboratorio de Inteligencia Artificial. Consulta más abajo para obtener más información sobre cómo se calcula la precisión.\n2.  También puedes ver modelos anteriores que hayas entrenado en el Laboratorio de Inteligencia Artificial. Estos pueden ayudarte a identificar patrones y recordar qué características condujeron a los modelos más precisos. \n3.  Pulsa en el botón Detalles para ver más información sobre el rendimiento de tu modelo.\n\n[/diagram_nums]\n\n## ¿Cómo se Calcula la Precisión?\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/image_81IyXga.png\" width=\"50%\" />\n<p>\nUna vez seleccionadas las etiquetas y las características, los datos se dividen automáticamente en dos secciones: los <strong>Datos de Aprendizaje</strong> y los <strong>Datos de Prueba</strong>.\n</p>\n<p>\nLos <strong>Datos de Aprendizaje</strong> son los que el Bot de Inteligencia Artificial utiliza para buscar patrones que le ayuden a tomar decisiones. Como el Bot de Inteligencia Artificial necesita muchos datos para tomar decisiones, utiliza el 90% del conjunto de datos original para entrenarse. Los <strong>Datos de Prueba</strong> se mantienen ocultos para el Bot de Inteligencia Artificial hasta que haya terminado de entrenar. \n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:right; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/image_EygFTNF.png\" width=\"50%\" />\n<p>\nUna vez que el Bot de Inteligencia Artificial ha terminado de entrenarse, mira los <strong>Datos de Prueba</strong> para poder comparar sus predicciones con los datos originales. Esto es como estudiar para un examen mirando preguntas de práctica en las que conoces las respuestas: intentas hacer las preguntas tú mismo y luego compruebas tus respuestas para ver lo bien que lo has hecho.\n</p>\n<p>\nAsí es como obtenemos nuestra puntuación de precisión: es lo bien que lo hicieron las predicciones del Bot de Inteligencia Artificial cuando las comparamos con los datos del conjunto de datos original. Si el Bot de Inteligencia Artificial acierta la mayoría de las respuestas, podemos estar seguros de que ha encontrado los patrones que coinciden con nuestros datos originales.\n</p>\n</div>\n\n## ¿Qué Importancia tiene la Precisión?\n\nLa precisión puede hacer un buen trabajo a la hora de comprobar si tu modelo de aprendizaje automático ha conseguido encontrar patrones en tus datos, pero esto no siempre significa que tu modelo esté listo para empezar a resolver problemas en el mundo real. Una puntuación de precisión alta no significa que tu modelo vaya a hacer un buen trabajo en el mundo real con usuarios reales, sólo significa que ha hecho un buen trabajo. <em>con los datos que ya tenía</em>. Si hubo problemas con tus datos, seguirá habiendo problemas con tu modelo.\n\n## Vídeo\n\n(Abre YouTube en una pestaña nueva)\n\n[![Training and Testing in AI Lab](https://curriculum.code.org/media/uploads/Capture_5J2wlZi.PNG)](https://www.youtube.com/watch?v=Pm70TO--ee4)"
        },
        "csd-2022/ai-lab": {
          "display_name": "Laboratorio de Inteligencia Artificial"
        },
        "csd-2022/analog-sensors": {
          "display_name": "Sensores analógicos",
          "content": "Los botones y el interruptor de palanca se consideran entradas _binarias_, porque sólo pueden comunicar uno de dos estados (arriba/abajo para los botones, abierto/cerrado para el interruptor). Existe otra clase de entradas llamadas _entradas analógicas_. A diferencia de los botones y el interruptor, estas _entradas analógicas_ pueden comunicar un rango de valores.\n\n## Luz, Sonido y Temperatura\n\nEl Circuit Playground tiene tres sensores analógicos básicos, cada uno de los cuales recibe una entrada analógica y la convierte en un valor utilizable por el ordenador.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp_sensors.png\" alt=\"analog sensors\" class=\"center\" style=\"width: 500px;\">\n\n[diagram_nums]\n\n1.  El _Sensor de Luz_ (representado en código como [\\`lightSensor\\`(#f78183)](/docs/applab/lightSensor/)) se utiliza para medir la cantidad de luz ambiental. Cuando está completamente oscuro, [\\`lightSensor.value\\`(#f78183)](/docs/applab/lightSensor.value/) leerá como 0, y cuando está completamente iluminado leerá 1023.\n2.  El _Sensor de Temperatura_ (representado en código como [\\`tempSensor\\`(#f78183)](/docs/applab/tempSensor/)) mide la temperatura. En lugar de proporcionar un valor bruto (como hacen los otros dos sensores), este sensor aprovecha el hecho de que ya tenemos formas comúnmente entendidas de convertir la temperatura en un valor computable. El [\\`tempSensor.F\\`(#f78183)](/docs/applab/tempSensor.F/) y [\\`tempSensor.C\\`(#f78183)](/docs/applab/tempSensor.C/) proporcionan la lectura de la temperatura en grados Fahrenheit o Celsius, respectivamente.\n3.  El _Sensor de Sonido_ (representado en código como [\\`soundSensor\\`(#f78183)](/docs/applab/soundSensor/)) se utiliza para medir el ruido. Es importante tener en cuenta que _no_ es realmente un micrófono; no esperes grabar sonido con el sensor de sonido, sólo es capaz de medir el volumen del sonido que detecta. Al igual que el _Sensor de luz_, proporciona un valor que va de 0 a 1023.\n\n[/diagram_nums]\n\n## Lectura de Datos del Sensor\n\nLos sensores de sonido y luz tienen cada uno una propiedad llamada _valor_ que le permite leer el valor de entrada actual de un sensor (como con [\\`soundSensor.value\\`(#f78183)](/docs/applab/soundSensor.value/)). Si el rango de entrada completo de 0-1023 no satisface las necesidades de tu programa, puedes cambiar el rango de números devueltos usando el método _setScale()_. Por ejemplo, [\\`soundSensor.setScale(-50, 50)\\`(#f78183)](/docs/applab/soundSensor.setScale/) cambiará el rango del sensor de sonido para que el número más bajo sea -50 y el más alto 50. Esto no se aplica al sensor de temperatura, que tiene dos propiedades, _F_ y _C_ que informan de la temperatura en un formato que es tanto computable como legible.\n\n## Sensibilidad de los Sensores\n\nLos sensores de tus placas son instrumentos relativamente poco precisos. Aunque existen sensores más caros y consistentes para aplicaciones que requieren valores de alta fidelidad (como herramientas médicas o científicas), estos sensores sólo proporcionan una aproximación.\n\nPuedes encontrarte con que tus programas funcionan de forma diferente en las distintas placas, porque los sensores de cada placa dan lecturas diferentes. Una forma de tener esto en cuenta es escribir código que te permita _calibrar_ tus sensores para diferentes placas. Si tu aplicación tiene código que debe ejecutarse si la lectura del sensor supera un cierto valor, considera hacer de ese valor una variable que pueda cambiarse desde la interfaz de usuario. De esta manera el usuario puede modificar la variable para que funcione mejor con su placa."
        },
        "csd-2022/animation-tab": {
          "display_name": "Pestaña de Animación",
          "content": "En el Laboratorio de Juegos, las _Animaciones_ son dibujos u otras imágenes que puedes utilizar para cambiar el aspecto de tus sprites. Puedes usar el bloque `sprite.setAnimation()` para cambiar las animaciones de tu sprite a cualquiera de las animaciones que hayas añadido en la _Pestaña Animación_.\n\n## Usando la Pestaña Animación\n\nPulsando sobre el botón **Animación** encima del área de visualización accederás a la _Pestaña Animación_, donde puedes importar o dibujar animaciones para ser usadas por tus sprites.\n\n![](https://cdo-curriculum.s3.amazonaws.com/media/uploads/animation_tab.png)\n\n[diagram_nums]\n\n1.  Utiliza estos botones para cambiar entre la pestaña de animación y la pestaña de código.\n2.  Esta columna muestra todas las animaciones que has creado. Pulsa sobre una animación desde aquí para editarla.\n3.  Pulsa el signo + para añadir una nueva animación. Puedes seleccionar una animación de la biblioteca, importar una imagen de tu ordenador o dibujar una desde cero.\n4.  Las herramientas de dibujo de esta columna te permiten dibujar o modificar animaciones.\n5.  Dibuja o edita tu imagen en este lienzo.\n6.  Abre este cajón para cambiar el tamaño general de tu imagen o lienzo.\n\n[/diagram_nums]"
        },
        "csd-2022/app-lab": {
          "display_name": "Laboratorio de Aplicaciones",
          "content": "Laboratorio de Aplicaciones es una herramienta creada con [JavaScript](/concepts/javascript/) que puede utilizarse para crear aplicaciones. Más información sobre los comandos de Laboratorio de Aplicaciones en la [Documentación de App Lab](/docs/applab/)."
        },
        "csd-2022/applab-overview": {
          "display_name": "Vista previa",
          "content": "Laboratorio de Aplicaciones es una herramienta creada con [JavaScript](/concepts/javascript/) que puede utilizarse para crear aplicaciones. Más información sobre los comandos de Laboratorio de Aplicaciones en la [Documentación de App Lab](/docs/applab/)."
        },
        "csd-2022/arrays": {
          "display_name": "Arreglos",
          "content": "Un _array_ es un grupo de valores que se almacenan en un orden determinado. Por lo general, estos valores son todos del mismo tipo (como todos los números, todo el texto, o incluso todos los sprites), pero en JavaScript, los arrays también pueden contener diferentes tipos de elementos.  Puedes usar arrays para crear una lista de cosas que almacenas en una única variable.\n\n## Creación y uso de Arrays\n\nLos arrays parecen listas dentro de corchetes.  Cada valor del array debe separarse con comas.\n\n`[1,5,7,2]`\n\nCada vez que crees un array, necesitarás almacenarlo en una variable inmediatamente para poder acceder a los valores más tarde.  Como esto es tan importante, el bloque para crear un array almacena automáticamente el array en una variable.\n\n![](https://cdo-curriculum.s3.amazonaws.com/media/uploads/arrays_3FdJGsk.png)\n\nPuedes acceder a un valor dentro de tu array utilizando su número de índice.  Los números de índice empiezan en 0 y van contando hasta llegar al final del array.  Por ejemplo, en el array anterior, \"a\" está en el índice 0, \"b\" está en el índice 1 y \"c\" está en el índice 2."
        },
        "csd-2022/board-events": {
          "display_name": "Eventos de la Placa",
          "content": "El bloque [\\`onEvent()\\`(#fff176)](/docs/applab/onEvent/) se utiliza para configurar _manejadores de eventos_ que pueden estar atentos a ciertos _eventos_ que ocurren en tu aplicación, como pulsar un botón, seleccionar un elemento de un desplegable o mover el ratón. El Circuit Playground tiene un bloque similar llamado `onBoardEvent()` para vigilar los eventos que ocurren en la placa. De forma similar a [\\`onEvent()\\`(#fff176)](/docs/applab/onEvent/), necesitas especificar qué debe vigilar el manejador, qué evento debe vigilar, y cómo responder a ese evento.\n\n### onBoardEvent\n\nEs importante entender en la programación orientada a eventos que:\n\n-   **Los usuarios disparan eventos** - Los eventos ocurren cuando los usuarios interactúan con las entradas en la placa, como los botones, el interruptor, y otros.\n-   **Los eventos disparan código** - Cuando un evento ocurre o se \"dispara\" puede ser usado para disparar una función particular.\n\nEl bloque `onBoardEvent()` del Maker Toolkit es un tipo de función de manejo de eventos llamada Receptor de Eventos. Envuelve toda la configuración que necesita para hacer el manejo de eventos en un comando que tiene varias partes. Aquí hay un ejemplo con todo etiquetado:\n\n![](https://cdo-curriculum.s3.amazonaws.com/media/uploads/onBoardEvent_diagram.png){: class=\"center\", style=\"width: 700px; margin: 20px auto;\"}\n\n[diagram_nums]\n\n1.  Código a ejecutar al dispararse la función callback cuando el usuario pulsa el botón izquierdo, `buttonL`. En este caso, escribe la palabra \"click\" en la consola. Observa que estamos usando la _variable_ `buttonL` (sin comillas). Esto es diferente de [\\`onEvent\\`(#fff176)](/docs/applab/onEvent/), que utiliza una _string_ para especificar el ID de un elemento de diseño.\n\n2.  Observa que esta función, a diferencia de la mayoría de las que hemos visto, no tiene nombre. También se denomina _función de devolución de llamada_, que es un término extraño. Una función callback sólo se diferencia de una función normal en que no la llamas directamente desde tu código. En su lugar, una función callback es **llamada por el sistema** en el momento en que ocurre el evento especificado. Las funciones callback son un patrón común en mucha programación dirigida a eventos.\n\n[/diagram_nums]"
        },
        "csd-2022/body-styling": {
          "display_name": "Estilo del Cuerpo (Body)",
          "content": "El elemento `<body>` es un elemento especial que envuelve todo el contenido visible de una página web. Como todo lo que ves está dentro de esta etiqueta, cualquier conjunto de reglas que crees para el elemento body se aplicará a todos los elementos de la página, a menos que el propio elemento tenga una regla que lo contradiga. Esto es útil para establecer un estilo base para todo en tu página.\n\n## Ejemplo\n\nEste conjunto de reglas haría que todo el texto de tu página web fuera azul y estuviera centrado.\n\n    body {\n        text-align: center;\n        color: blue;\n    }"
        },
        "csd-2022/booleans-and-comparison-operators": {
          "display_name": "Operadores booleanos y de comparación",
          "content": "## Sopa de Palabras: Condicionales, Booleanos, expresiones, sentencias\n\n<div style=\"width: 33%; float: right; border: solid 1px #00adbc; padding: 10px; margin: 10px;\">\n<Strong>Notas Históricas sobre Booleanos</Strong><br>\n<li> Lleva el nombre del matemático George Boole \n<li> Inventó un rincón de las matemáticas que ahora lleva su nombre llamado \"Álgebra de Boole\" \n<li> El álgebra de boole es la matemática que opera utilizando sólo valores verdadero/falso. \n<li> Se trata de un trabajo importante para la informática, ya que verdadero/falso se convierte fácilmente en binario.\n</div>\n\nComo has visto en el vídeo, hay un montón de términos que generalmente se refieren a lo mismo.\n\n**Booleano, valores booleanos, expresiones booleanas:**\n\n-   Un **valor booleano** es simplemente un término informático que significa **un valor verdadero/falso**.\n-   Una **expresión booleana** es una sentencia que _evalúa_ a un valor booleano (un único verdadero/falso).\n\n**Condición, Condicionales, Sentencias Condicionales**:\n\n-   \"Condicional\" es simplemente un término genérico para el código que altera el flujo del programa basado en valores verdadero/falso (como una sentencia [\\`if\\`(#64d5ff)](/docs/spritelab/codestudio_ifStatement/)).\n-   Ejemplos: Condición, Condicionales, Sentencias condicionales, Ejecución condicional\n\n## Operadores de Comparación\n\n<img src=\"https://images.code.org/79f2ae7d27a3fa434138aeeb17146cab-image-1479413755076.png\" style=\"float: left; margin-left: 20px; margin-right: 20px\">\n\nUn tipo común de condición a comprobar es la comparación de dos valores.  Aquí hay 6 **operadores de comparación** comunes. Cada uno compara un valor a la izquierda con un valor a la derecha y devuelve un valor booleano -- **verdadero** o **falso**.  La mayoría de ellos hacen lo que cabría esperar. \n\n### Por qué estos símbolos: **==**, **!=**, **\\<=**, y **>=**?\n\n1.  Usamos `==` porque el signo igual simple <code>=</code> es el operador de asignación. Necesitamos algo diferente para indicar que queremos comparar dos valores en lugar de asignar uno a otro.\n\n    **Error común:** escribir algo como [\\`if(edad = 18)\\`(#64d5ff)](/docs/spritelab/codestudio_ifStatement/) en lugar de [\\`if(edad == 18)\\`(#64d5ff)](/docs/spritelab/codestudio_ifStatement/).  Nos aseguraremos de corregir esto más adelante.\n\n2.  Utilizamos `!=`, `<=` y `>=` porque sólo requieren símbolos ASCII. Históricamente, los símbolos matemáticos <code>≠</code>, <code>≤</code> y <code>≥</code> eran difíciles o imposibles de producir en algunos sistemas.  El `!` se lee universalmente como \"no\".\n\n<div style=\"clear: both\">&nbsp;</div>\n\n## Referencia: Ejemplos\n\nA continuación encontrarás varios ejemplos de comparaciones en código. Revísalos si quieres o continúa y vuelve si necesitas referencias.\n\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/ea8cf41d0e06e6ddee31086fbb9ea2b9-image-1479232029068.png\" style=\"float: left; margin-left: 50px; margin-right: 50px\">\n\nCompara dos valores - números, cadenas u otros booleanos - y devuelve _cierto_ si son iguales, en caso contrario _falso_.\n\n-   `\"Hola\" == \"hola\"` devuelve _falso_ -- porque las cadenas se escriben con mayúsculas diferentes.\n-   `\"3\" == 3` devuelve _cierto_ -- porque `==` intenta ser indulgente. Si puede \"coaccionar\" una cadena para convertirla en un número, lo hará para comparar. <sup>1</sup> \n-   `(2+1) == 3` devuelve _cierto_ -- porque la expresión aritmética evalúa a 3.\n-   `x == 7` devuelve _cierto_ -- cuando la variable x tiene el valor 7.\n\n<sup>1.</sup> Aunque es una característica útil que `==` convierta una cadena en un número, se considera **ENGAÑOSO** porque la cadena \"3\" no es lo mismo que el entero 3.  Hay veces en que se podría creer que no son iguales.   Existe un operador de igualdad \"estricto\" - el \"triple igual\" `===` que se asegura de que tanto el tipo de dato como el valor son iguales.  Así que `\"3\" === 3` es falso.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/67fc10f1dec4f129c64c62d583ebf7ee-image-1479232142029.png\" style=\"float: left; margin-left: 50px; margin-right: 50px\">\n\nCompara dos valores - números, cadenas u otros booleanos - y devuelve `cierto` si son **no iguales**, en caso contrario `falso`.\n\n-   `\"Hola\" != \"hola\"` devuelve _cierto_ -- porque las cadenas son ligeramente diferentes.\n-   `\"3\" != 3` devuelve _falso_ -- porque la cadena 3 se puede convertir en un número antes de compararla con 3. (véanse las notas anteriores sobre el indulgente ==).\n-   `(2+1) != 3` devuelve _falso_ -- porque la expresión aritmética evalúa a 3.\n-   `x != 7` devuelve _cierto_ -- cuando la variable x _es cualquier valor distinto de_ 7.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img style=\"float: left; margin-left: 50px; margin-right:50px; margin-bottom: 20px;\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/536aed5657843fca3b52a044f2f3bdc7-image-1479242736018.png\">\n\nCompara dos valores para ver si el número de la izquierda es <em>mayor que</em> el número de la derecha.\n\n-   `4 > 3` devuelve _cierto_\n-   `3 > 7` devuelve _falso_\n-   `edad > 17` devuelve _cierto_ -- cuando el valor de la variable \"edad\" es estrictamente mayor que 17, en caso contrario falso.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/3c7c9336270e093bad437d69d155a8c7-image-1479242773012.png\" style=\"float: left; margin-left: 50px; margin-right:50px; margin-bottom: 20px;\">\n\nCompara dos valores para ver si el número de la izquierda es <em>menor que</em> el número de la derecha.\n\n-   `4 < 3` devuelve _falso_\n-   `3 < 7` devuelve _cierto_\n-   `age < 17` devuelve _cierto_ -- cuando el valor de la variable \"edad\" es estrictamente menor que 17, en caso contrario falso.\n\n<div style=\"clear:both\"> </div>\n<hr>\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/e899b0040a9f8ddc899b1df66773be74-image-1479242843374.png\" style=\"float: left; margin-left: 50px; margin-right: 50px; margin-bottom: 20px\">\n\nCompara dos valores para ver si el número de la izquierda es _menor o igual que_ el número de la derecha. \n\n-   `3 <= 4` devuelve _cierto_\n-   `4 <= 3` devuelve _falso_\n-   `edad <= 18` devuelve _cierto_ -- cuando el valor de la variable \"edad\" es 18 o menor.\n\n<div style=\"clear:both\"> </div>\n\n<hr>\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/2ca857bff29bca22a2a42433c6b3981f-image-1479242807960.png\" style=\"float: left; margin-left: 50px; margin-right: 50px; margin-bottom: 20px\">\n\nCompara dos valores para ver si el número de la izquierda es _mayor o igual que_ el número de la derecha.\n\n-   `3 >= 4` devuelve _falso_.\n-   `4 >= 3` devuelve _cierto_\n-   `edad >= 18` devuelve _cierto_ -- cuando el valor de la variable \"edad\" es 18 o mayor.\n\n<div style=\"clear:both\"> </div>\n\n<hr>"
        },
        "csd-2022/changing-screens": {
          "display_name": "Cambiar pantallas",
          "content": "## Uso del comando _setScreen_ para cambiar de pantalla con código\n\nEl comando [\\`setScreen\\`(#fff176)](/docs/applab/setScreen/) cambia la pantalla para mostrar la que quieras.  Se especifica la pantalla por su ID.\n\n![](https://images.code.org/005222ed01ade7940963ce149d637286-image-1477168080948.png)\n\n[diagram_nums]\n\n1.  Busca [\\`setScreen\\`(#fff176)](/docs/applab/setScreen/) en la caja de herramientas de Elementos de IU y arrástralo al espacio de trabajo de código.\n2.  La mayoría de las veces cambias la pantalla en respuesta a algún evento del usuario. En este caso [\\`setScreen\\`(#fff176)](/docs/applab/setScreen/) está siendo añadido a un manejador de evento \"click\" para la imagen con ID \"smileyFace\"\n3.  Selecciona el ID de la pantalla a la que desea cambiar. En este caso, cuando se hace clic en la cara sonriente en la pantalla que dice \"hola\" queremos cambiar a la pantalla que dice \"adiós\".\n4.  **Idea clave: Múltiples Pantallas - Un Espacio de Trabajo de Codificación.** Este es el código que maneja un evento \"click\" para una _imagen que está en una pantalla diferente_ - la \"goodbyeScreen\". No puedes ver esa imagen ahora, o esa pantalla, porque la pantalla no está seleccionada.  Sin embargo, el código para ello todavía sigue aquí.\n\n[/diagram_nums]"
        },
        "csd-2022/changing-sensor-scale": {
          "display_name": "Cambiar la escala del sensor",
          "content": "Por defecto, cada uno de los sensores analógicos del Circuit Playground convierte sus datos sensados en un número de 10 bits con un valor mínimo de 0 y un máximo de 1023. Aunque este rango proporciona las lecturas más detalladas (ya que hay 1024 valores posibles), no siempre es el rango de números más útil. Si quieres usar una entrada de sensor para controlar el color rgb, mostrar un porcentaje, o de otra manera quieres restringir los valores potenciales de las entradas de sensor necesitarás asignar el rango de 0-1023 a otro rango.\n\n## Configurar Escala\n\nEl método _setScale_ te permite anular el rango por defecto de un sensor analógico. Por ejemplo, llamando [\\`soundSensor.setScale(0, 100)\\`(#f78183)](/docs/applab/soundSensor.setScale/) cambiará la escala del [\\`soundSensor.value\\`(#f78183)](/docs/applab/soundSensor.value/) para que el valor más bajo (completamente silencioso) sea 0, y el más alto (completamente ruidoso) sea 100.  "
        },
        "csd-2022/checking-multiple-conditions-with-if-else-if": {
          "display_name": "Comprobación de múltiples condiciones con If-Else-If",
          "content": "| Nombre                                               | Código (Bloque)                                                                                | Código (Texto)                                                                                 |\n| ---------------------------------------------------- | ---------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- |\n| Comprobación de Múltiples Condiciones con If-Else-If | ![](https://curriculum.code.org/media/uploads/Screenshot-2019-02-25-at-4.06.56-PM_v61bvx3.png) | ![](https://curriculum.code.org/media/uploads/Screenshot-2019-02-25-at-4.07.25-PM_xLaHTHA.png) |\n\n## ¿Cómo funciona?\n\nEl comando `if-else-if` te permite comprobar múltiples condiciones booleanas. El ordenador comprobará las condiciones en el orden en que están escritas hasta que una de las expresiones booleanas se evalúe como `cierta`. Se ejecutará el código asociado a esa expresión booleana, pero se omitirán todas las demás. Si ninguna de las expresiones se evalúa como `cierta` entonces se ejecutará el código dentro del comando `else`.\n\n## Primero los casos más específicos\n\nCuando escribas una sentencia if-else-if querrás poner los casos más específicos primero. En el ejemplo de la temperatura de arriba quieres comprobar si hay temperaturas por encima de 100 grados primero. Después el código comprueba las temperaturas por encima de 90 grados, pero debido al orden en que el código está escrito sabes que ninguna de las temperaturas que encontrará allí están por encima de 100 grados. Al fin y al cabo, ya las habría detectado en la sentencia if anterior. Esto significa que puedes estar seguro de que cualquier temperatura que encuentres allí estará entre 90 y 100 grados. A medida que continúas con la sentencia if-else-if utilizas la misma lógica para comprobar los diferentes rangos de temperatura.\n\n## Un Ejemplo Roto: Los casos más específicos al final\n\nEste es un ejemplo roto que muestra lo que ocurre si empiezas a comprobar las temperaturas en orden inverso, los casos más específicos en último lugar.\n\n![](https://curriculum.code.org/media/uploads/Screenshot-2019-02-25-at-4.30.52-PM_IOWLVER.png)\n\nPiensa en lo que pasaría cuando este código se ejecuta para la temperatura 82 grados. Querrías que la salida dijera `\"Hace calor\"`. Sin embargo, si miras la primera expresión booleana, te darás cuenta de que 82 es mayor que 60 grados, haciendo que la expresión booleana se evalúe como `cierta`. Como resultado, el código mostrará \"Hace frío\". Esto se debe a que la primera expresión no es realmente la más específica."
        },
        "csd-2022/circuit-playground": {
          "display_name": "Circuit Playground",
          "content": "El Circuit Playground es un sencillo ordenador monoplaca con muchas entradas y salidas integradas que podemos explorar. Sin embargo, antes de profundizar demasiado, empecemos por lo básico.\n\n### El Diodo Emisor de Luz (LED)\n\nCuando un ordenador sólo necesita comunicar información simple, a menudo una luz parpadeante es la forma más rápida y sencilla de hacerlo. Los LEDs, o Diodos Emisores de Luz, son dispositivos pequeños, de bajo consumo y fáciles de usar para comunicarse con la luz. Echa un vistazo a la imagen de la derecha.\n\n<img src=\"//curriculum.code.org/images/circuitplayground/cp_leds.png\" style=\"float: right; width: 400px; margin-left: 10px;\">\n\n[diagram_nums]\n\n1.  El puerto USB te permite conectar el Circuit Playground. Conectarlo te permite comunicarte con la placa en App Lab, pero también proporciona electricidad a la placa para que pueda hacer cosas como encender LEDs.\n2.  El LED verde **Power** no puede ser controlado a través de código, pero te permite saber si la placa está recibiendo electricidad. Si este LED está apagado, no esperes que nada en tu placa funcione.\n3.  El **LED** rojo puede ser controlado en Laboratorio de Aplicaciones usando los bloques [\\`led\\`(#f78183)](/docs/applab/led/). También se puede utilizar para ayudar a depurar tu placa, cada vez que conectes la placa, deberías ver este LED parpadear durante unos segundos. Fíjate que al lado del LED rojo está impreso el número **13**, este es el Pin de la placa al que está conectado este LED, aprenderemos más sobre Pines más adelante.\n\n### Conéctala\n\nConecta la placa al ordenador mediante un cable USB y observa cómo responden estos dos LEDs. ¿De qué otra forma podrías utilizar una sola luz para comunicar información útil a un usuario?"
        },
        "csd-2022/circuits-and-buttons": {
          "display_name": "Circuitos y Pulsadores",
          "content": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/button_alligator.png\" alt=\"Button Up and Down\" style=\"width:300px; float: right; margin: 0 20px;\">\n\nPara crear un botón o un interruptor, sólo necesitas un circuito que pueda conectarse y desconectarse fácilmente. Al igual que un circuito LED, un circuito de botón puede crearse conectando un cable a un pin de datos y otro cable a un pin de masa. Para \"cerrar\" el circuito (que es como pulsar un botón) se conectan los dos cables, ya sea tocándolos entre sí o conectándolos a una pieza de hardware (como un botón o un interruptor) que pueda utilizarse para abrir y cerrar el circuito. Un botón \"abierto\" equivale al evento \"arriba\" del botón, mientras que un circuito \"cerrado\" es como el evento \"abajo\" del botón.\n\nCon una placa Circuit Playground Express, puedes crear un circuito de botón en cualquiera de los pines **\"A6\"**, **\"A5\"**, **\"A4\"**, **\"A0\"**, o **\"A1\"**.\n\nCon una placa Circuit Playground Classic, puedes crear un circuito de botones en cualquiera de los pines **0**, **2**, **3**, **6** y **12**.\n\n[clearfix]\n\n[/clearfix]\n\n## Creación de Circuitos de Botones\n\nPara crear un circuito de botones necesitarás un pin de datos, dos cables y un pin de masa.\n\n-   Conecta un cable al pin de datos numerado.\n-   Conecta otro cable al pin de tierra.\n\n## Codificación de un Circuito de Botón (Circuit Playground Express)\n\n    \\\\ Crear un botón conectado al pin A5\n    var myButton = createButton(\"A5\");\n\n    \\\\ Añade un manejador de eventos al nuevo botón\n    onBoardEvent(myButton, \"down\", function() {\n    \tconsole.log(\"button pressed\");\n    });\n\n## Codificación de un Circuito de Botón (Circuit Playground Classic)\n\n    \\\\ Crear un botón conectado al pin 0\n    var myButton = createButton(0);\n\n    \\\\ Añade un manejador de eventos al nuevo botón\n    onBoardEvent(myButton, \"down\", function() {\n    \tconsole.log(\"button pressed\");\n    }); "
        },
        "csd-2022/circuits-and-leds": {
          "display_name": "Circuitos y LED",
          "content": "<img alt=\"Circuit Playground Data Pins\" src=\"https://images.code.org/6821153181b10ce9d5fdc1459beb4445-image-1643339359352.png\" style=\"width:400px; float: right; margin: 0 20px\">\n\nUtilizando los terminales numerados del Circuit Playground, puedes crear tus propios circuitos que incluyan componentes externos, como LEDs y botones. Los detalles de cómo se cablea un circuito dependen del hardware específico que estés tratando de añadir, pero todos los circuitos utilizarán algunas combinaciones de pines de alimentación (que proporcionan energía), pines de tierra (que son el punto final de un circuito), y pines de datos numerados (que pueden enviar una señal de salida, o leer una entrada). Algunos de los pines de datos están reservados para funciones especiales de la placa, así que cuando crees tus propios circuitos, asegúrate de utilizar sólo los siguientes pines:\n\nCon una placa Circuit Playground Express, utiliza sólo los pines **\"A6\"**, **\"A5\"**, **\"A4\"**, **\"A0\"**, o **\"A1\"**.\n\nCon una placa Circuit Playground Classic, utiliza sólo los pines **0**, **2**, **3**, **6**, y **12**.\n\n## Creación de Circuitos LED\n\nUno de los circuitos más sencillos que puedes hacer con tu Circuit Playground es añadir un LED. Para crear este circuito necesitarás un pin de datos, dos cables y un pin de masa.\n\n-   Conecta un cable desde el pin de datos al lado positivo (**+**) del LED.\n-   Conecta otro cable desde el lado negativo (**-**) del LED a cualquier pin de tierra.\n-   Usando el código, ajusta el pin elegido a \"salida\" y enciéndelo:\n\n## Codificación de un circuito LED (Circuit Playground Express)\n\n    // Crea un LED conectado al pin A5\n    var myLed = createLed(\"A5\");\n\n    // Parpadea myLed\n    myLed.blink(200);\n\n## Codificando un Circuito LED (Circuit Playground Classic)\n\n    // Crea un LED conectado al pin 2\n    var myLed = createLed(2);\n\n    // Parpadea myLed\n    myLed.blink(200);\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/alligator.png\" style=\"float: left; width: 30%; margin: 10px 5% 10px 0;\">\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp-wire.png\" style=\"float: left; width: 30%; margin: 10px 5% 10px 0;\">\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/cp-foil.png\" style=\"float: left; width: 30%; margin: 10px 0;\">\n\nPara crear un circuito sencillo como éste no hace falta usar nada sofisticado: cualquier cosa que conduzca bien la electricidad servirá. Puedes recuperar cables de viejas luces navideñas o utilizar papel de aluminio para un arreglo rápido, pero también puedes comprar hilo conductor que te permitirá cablear tus circuitos o conseguir cinta de cobre para hacer circuitos plegables en papel.\n\n## Depuración LED\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/sequin.png\" style=\"width: 500px;\" class=\"center\">\n\nLos LED son bastante fáciles de usar, pero hay que tener en cuenta un par de trucos:\n\n-   Debes prestar atención a la dirección en la que fluye la electricidad, porque los LED sólo funcionan en una dirección. Conecta siempre el lado positivo del LED a la fuente de alimentación y el negativo a tierra.\n-   Los LED necesitan un componente llamado _resistencia_ para asegurarse de que reciben (y consumen) la cantidad correcta de electricidad. Las lentejuelas LED (como las de la imagen de arriba) tienen una resistencia incorporada, pero si quieres usar un LED normal tendrás que añadir una resistencia a cada lado para evitar dañar la placa o el LED."
        },
        "csd-2022/classes": {
          "display_name": "Clases",
          "content": "A veces sólo quieres dar estilo a algunos elementos específicos de un tipo en lugar de a todos los elementos de un tipo. \\*\\*Las clases permiten que un grupo de elementos tenga su propio estilo único. Esto se aplica a elementos en la misma página o en páginas separadas, siempre y cuando todas las páginas estén enlazadas a la misma hoja de estilo.\n\nPara aplicar estilo utilizando clases:\n\n1.  En primer lugar, hay que marcar en HTML los elementos que estarán en esa clase.\n2.  En segundo lugar, tienes que escribir un conjunto de reglas de estilo para esa clase. Para escribir una regla para una clase de elementos, el selector para el conjunto de reglas tiene un `.` antes del nombre de la clase. \n\nPor ejemplo, el siguiente código aplicaría estilo a la clase fancy que se ha establecido para un elemento párrafo:\n\n| Archivo HTML                                                      | Archivo CSS                                                                     | Resultado                                                                                                                |\n| ----------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| <pre> \\<p class=\"fancy\">Buen Día\\</p> <br> \\<p>Mal Día\\</p></pre> | <pre>.fancy {<br>  color: azuloscuro;<br>  familia-fuente: cursiva;<br>} </pre> | <img src=\"https://images.code.org/27181e31f4e697a85f1794f28070ba14-image-1481648310560.58.03 AM.png\" alt=\"result image\"> |\n\n<br>\n\n**W3 Schools Links**\n\n-   [CSS Syntax (Classes)](https://www.w3schools.com/css/css_syntax.asp)"
        },
        "csd-2022/collision-detection": {
          "display_name": "Detección de colisiones",
          "content": "Algunas veces, te gustaría saber si dos sprites se están tocando.  El Laboratorio de Juegos utiliza el método [\\`isTouching\\`(#f78183)](/docs/gamelab/isTouching/) para comprobar si un sprite está tocando a otro sprite (el objetivo).\n\n<img src=\"http://curriculum.code.org/media/uploads/istouching.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n[\\`isTouching\\`(#f78183)](/docs/gamelab/isTouching/) devuelve un booleano, por lo que se puede utilizar dentro de una condicional para hacer que algo suceda sólo cuando los dos sprites se tocan.  Por ejemplo, el siguiente código cambia la animación de la sandía cuando el sprite del cuchillo la toca.\n\n<pre>\n\nfunction draw() {\n  if (knife.isTouching(watermelon)) {\n    watermelon.setAnimation(\"slice\");\n  }\n  background(\"burlywood\");\n  drawSprites();\n}\n\n</pre>\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n### Colisionadores\n\nCuando el Laboratorio de Juegos comprueba si dos cosas se están tocando, no sabe qué partes de la imagen son visibles.  En su lugar, comprueba si los colisionadores se tocan entre sí.  El tamaño de los colisionadores está determinado por el tamaño de la animación que se está utilizando, incluso las partes de la misma que no se pueden ver.  Puedes ver los colisionadores poniendo la propiedad [\\`debug\\`(#f78183)](/docs/gamelab/debug/) del sprite a `cierto`.\n\nEn los dos ejemplos de la derecha, [\\`debug\\`(#f78183)](/docs/gamelab/debug/) se ha puesto a `cierto`, así que puedes ver el contorno verde de los colisionadores, y que la animación cambia cuando se tocan, incluso si las imágenes del cuchillo y la sandía no se tocan.\n\nEn el segundo ejemplo, los colisionadores son muy grandes, por lo que la sandía cambia mucho antes de que el cuchillo la toque.\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders2.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n<pre>\nwatermelon.debug = true;\nknife.debug = true;\n\nfunction draw() {\n  if (knife.isTouching(watermelon)) {\n    watermelon.setAnimation(\"slice\");\n  }\n  background(\"burlywood\");\n  drawSprites();\n}\n</pre>\n\nTambién puedes cambiar la forma de los colisionadores usando el método [\\`setCollider\\`(#f78183)](/docs/gamelab/setCollider/).  Este método hace que el colisionador sea un círculo o un rectángulo.\n\n<img src=\"http://curriculum.code.org/media/uploads/colliders3.gif\" style=\"width: 200px; float: right; margin: 10px 50px;\">\n\n<pre>\nwatermelon.debug = true;\nknife.debug = true;\nwatermelon.setCollider(\"circle\");\nknife.setCollider(\"circle\");\n\nfunction draw() {\n  if (knife.isTouching(watermelon)) {\n    watermelon.setAnimation(\"slice\");\n  }\n  background(\"burlywood\");\n  drawSprites();\n}\n</pre>"
        },
        "csd-2022/color-lights": {
          "display_name": "Luces de Colores",
          "content": "<img src=\"//curriculum.code.org/images/circuitplayground/cp_colorleds.png\" style=\"float: right; width: 400px; margin-left: 25px;\">\n\nAlrededor del borde de la placa, verás que hay diez LEDs adicionales. Estos LEDs son un poco diferentes a los que hemos visto antes; estos son LEDs multicolores.\n\n### LEDs RGB\n\nLos LED de color están formados por tres LED más pequeños: uno rojo, uno verde y uno azul. Por eso, a menudo los llamamos LEDs RGB.\n\nDebido a que hay muchos de estos LEDs, los hemos almacenado en una lista llamada [\\`colorLeds\\`(#f78183)](/docs/applab/colorLeds/). El primer LED RGB de la lista (posición 0) se encuentra junto al LED verde de encendido, y el resto siguen en orden contrario a las agujas del reloj alrededor de la placa, terminando en el décimo LED RGB (posición 9) junto al LED rojo.\n\n[clearfix]\n\n[/clearfix]\n\n### Elección de un color\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/colorLeds_color.png\" style=\"float: right; margin-left: 10px;\">\n\nPor defecto todos los LEDs de color serán blancos cuando los enciendas. Puedes configurar el color de un LED RGB de muchas maneras, incluyendo el nombre de un color (como \"rojo\"), una cadena hexadecimal (como \"#FF0000\") o usando el comando `rgb()` (por ejemplo `rgb(255, 0, 0)`).\n\nSi un LED de color está apagado, `colorLeds[i].color()` configurará el color y lo encenderá."
        },
        "csd-2022/counter-patterns-with-event": {
          "display_name": "Patrones de Contador con Evento",
          "content": "## Revisión de Variables\n\nLas variables almacenan información. La variable se define en el lado izquierdo de la expresión, y el valor se establece en el lado derecho.\n\n![](https://curriculum.code.org/media/uploads/vardefine.PNG)\n\nLeeríamos esta expresión así\n\n\\*La variable `score` obtiene el valor 3\n\n## Patrón de Contador con Evento\n\n| Nombre                        | Código (Bloque)                                                                       | Código (Texto)                                                                                                      |\n| ----------------------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |\n| Patrón de Contador con Evento | ![](https://images.code.org/fb4f1477d57648cb4bde14c2b710e196-image-1600883760296.png) | <div>`var myVar = 0;` <br><br> `onEvent(\"id\", \"click\", function() {` <br>     `myVar = myVar + 1;` <br> `});`</div> |\n\nEl modelo podría leerse así:\n\nLa variable `myVar` recibe el valor 0. Cuando el onEvent es activado por un click la variable se actualiza. La variable `myVar` obtiene el valor actual de `myVar` y le añade uno. El nuevo valor se almacena en `myVar`.\n\n### ¿Cómo funciona?\n\nCuando se activa el evento, la variable se actualiza. El valor actual de la variable aumenta o disminuye en una cantidad determinada. El nuevo valor se almacena en la variable.\n\n### Ejemplos\n\n![](https://curriculum.code.org/media/uploads/counter_pattern_with_event.gif)\n<br>\nLa variable `score` obtiene el valor 0. Cuando se activa el evento onEvent al pulsar el botón, la variable se actualiza. La variable `score` obtiene ahora el valor actual de `score` y le añade uno. El nuevo valor se almacena en `score`. La puntuación se muestra en la pantalla.\n\n![](https://curriculum.code.org/media/uploads/counter_pattern_with_event2.gif)\n<br>\nLa variable `score` obtiene el valor 50. Cuando se activa el evento onEvent al pulsar el botón, la variable se actualiza. La variable `score` obtiene ahora el valor actual de `score` y le resta tres. El nuevo valor se almacena en `score`. La puntuación se muestra en la pantalla."
        },
        "csd-2022/creating-a-survey": {
          "content": "Puedes utilizar un formulario en línea para recopilar datos que puedan importarse al Laboratorio de Inteligencia Artificial. Esto puede hacerse en el Laboratorio de Aplicaciones, Google Forms, Microsoft Forms, o cualquier otra aplicación de formularios que te permita exportar tus datos como un archivo CSV.\n\n## Uso de una plantilla de formulario de Google\n\nHemos creado una plantilla de formulario de Google que puedes utilizar para crear una encuesta - [haz clic aquí para hacer una copia de la plantilla](https://docs.google.com/forms/d/1Yzoug2iW-_GUWrQJo4jIlfuKNtelVNrer1PvT4rXF7w/copy). Una vez que hayas creado una copia, puedes editar las preguntas de la plantilla para adaptarlas a tus necesidades:\n\n### Preguntas categóricas\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/Categorical-Questions.png\"/>\n\n[diagram_nums]\n\n1.  Para datos categóricos, asegúrate de que la pregunta está catalogada como pregunta de Opción Múltiple.\n2.  Escribe la pregunta. Opcionalmente puedes añadir una descripción con más información.\n3.  Introduce cada respuesta como su propia opción. No añadas una opción Otros, ya que esto permitirá a los usuarios escribir sus propias respuestas, lo que puede causar problemas en el Laboratorio de Inteligencia Artificial.\n4.  Asegúrate de que la pregunta es Obligatoria.\n\n[/diagram_nums]\n\n### Preguntas Numéricas\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/Numerical-Questions.png\"/>\n\n[diagram_nums]\n\n1.  Para los datos numéricos, asegúrate de que la pregunta está catalogada como pregunta de Respuesta Corta.\n2.  Escribe tu pregunta. Opcionalmente puedes añadir una descripción con más información.\n3.  Asegúrate de seleccionar Validación de Respuesta en el menú de tres puntos de la esquina inferior derecha. A continuación, selecciona \"Número\" y \"Es número\" entre las opciones de validación. Esto garantiza que el usuario sólo pueda introducir números en este campo.\n4.  Asegúrate de que la pregunta es Obligatoria.\n\n[/diagram_nums]\n\n## Video\n\n(Abre YouTube en una pestaña nueva)\n[![Creando una Encuesta](https://curriculum.code.org/media/uploads/Capture.PNG)](https://www.youtube.com/watch?v=ZdakHQ-HIXk)"
        },
        "csd-2022/creative-commons-search": {
          "display_name": "Búsqueda de Creative Commons",
          "content": "Debido a que Creative Commons ofrece una forma tan sencilla de saber qué medios puedes utilizar y cuáles no, muchos motores de búsqueda han integrado el filtrado de Creative Commons para garantizar que sólo te ofrecen resultados que puedes utilizar. Cuando utilices un motor de búsqueda que admita el filtrado de Creative Commons, normalmente sólo tendrás que marcar unas cuantas casillas para asegurarte de que los medios que encuentres tienen licencia para su uso.\n\n## Configuración de la búsqueda\n\nCuando utilices un motor de búsqueda compatible con Creative Commons, deberás buscar una opción que controle la **licencia** de los resultados de la búsqueda. Por ejemplo, la búsqueda de imágenes de Google tiene un menú desplegable que te permite seleccionar entre un puñado de licencias Creative Commons diferentes.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-05-02-11.43.56.png\" alt=\"Google CC Image Search\" class=\"center\" style=\"max-width: 400px;\">\n\nEn general, debes buscar medios con licencia para uso **no comercial**. Si vas a realizar cambios en el material que encuentres (por ejemplo, añadir texto a una imagen), deberás asegurarte de que tienes derecho a **modificar, adaptar o desarrollar** los resultados de la búsqueda.\n\n## Dando Crédito\n\nCuando encuentres una imagen u otro archivo multimedia que te guste, asegúrate no sólo de obtener una copia del archivo, sino también de llevar un registro de la información que necesitarás para dar crédito a su creador. Sigue estos pasos para cada archivo que quieras utilizar:\n\n-   Descarga una copia en tu ordenador (para poder subirla a tu sitio web en el siguiente paso).\n-   Anota toda la información que encuentres sobre el autor, como por ejemplo\n    -   Nombre o apodo\n    -   URL del sitio web (no la URL de la imagen en sí)\n    -   Título de la imagen"
        },
        "csd-2022/css": {
          "display_name": "CSS",
          "content": "CSS (Cascading Style Sheets) es el lenguaje utilizado para definir el estilo y el diseño de las páginas web. Puedes encontrar más información sobre las reglas CSS en la página [Documentación del Laboratorio Web](/weblab/)."
        },
        "csd-2022/css-overview": {
          "display_name": "Vista previa",
          "content": "CSS (Cascading Style Sheets) es el lenguaje utilizado para definir el estilo y el diseño de las páginas web. Puedes encontrar más información sobre las reglas CSS en la página [Documentación del Laboratorio Web](/weblab/)."
        },
        "csd-2022/data-and-change-events": {
          "display_name": "Eventos de Datos y Cambio",
          "content": "Cuando se utilizan sensores para la entrada de datos, es más común recoger datos continuamente y observar los cambios que comprobar sólo cuando el usuario pulsa un botón o interactúa de otra manera. Para permitir este tipo de comportamiento, los sensores tienen algunos eventos especiales que se ejecutan continuamente.\n\n## El Evento Datos\n\n![data event](https://cdo-curriculum.s3.amazonaws.com/media/uploads/data_event_MLzY2I1.png)\n\nEl evento \"datos\" se ejecuta cada vez que se reciben datos de la placa, lo que ocurre constantemente mientras su programa se está ejecutando. Cuando configures un manejador [\\`onBoardEvent()\\`(#f78183)](/docs/applab/onBoardEvent/) para vigilar el evento \"datos\", tu código se disparará cada 50 milisegundos.\n\nRecuerda que aunque un evento \"datos\" debe estar asociado a un sensor específico, puedes comprobar los valores actualizados de múltiples sensores (o hacer cualquier otra cosa que quieras que se repita constantemente) en el manejador de eventos.\n\n## El Evento Cambio\n\n![change event](https://cdo-curriculum.s3.amazonaws.com/media/uploads/change_event.png)\n\nSimilar a \"datos\", el evento \"cambio\" se disparará repetidamente, permitiéndote recibir continuamente información de los sensores. A diferencia del evento \"datos\", \"cambio\" sólo se disparará si el valor del sensor ha cambiado lo suficiente. Cada sensor tiene un _umbral_ por defecto que determina cuanto cambio es suficiente para disparar un evento \"cambio\" (por defecto el umbral para todos los sensores es 1).\n\nDebido a que el evento \"cambio\" responde directamente a los cambios en la entrada (en lugar de sondear continuamente) puede ser una forma útil de asegurarse de que su aplicación no está perdiendo el tiempo respondiendo a la misma entrada una y otra vez. Esto también significa que probablemente quieras un manejador de evento \"cambio\" separado para cada sensor que estés usando."
        },
        "csd-2022/debugging-variable-scope-functions": {
          "display_name": "Depuración del Entorno de una Variable: Funciones",
          "content": "# Crea variables una vez, en la parte superior, fuera de las funciones o en onEvent()\n\nAl crear variables deberías:\n\n-   **Utilizar `var` sólo una vez.** No necesitas crear variables dos veces ya que esto puede causar errores.\n-   **Crear tus variables en la parte superior de tu programa.** Así mantienes tu código organizado y es más fácil de leer para ti y los demás.\n-   **Crear tus variables fuera de cualquier bloque `function` o [\\`onEvent\\`(#fff176)](/docs/applab/onEvent/).** Sigue leyendo para entender por qué.\n\n# Variables Globales vs Locales\n\nHay dos tipos de variables, globales y locales, y hasta ahora sólo hemos usado variables globales. Aquí está la principal diferencia entre variables globales y locales.\n\n| Tipo de variable | Cómo funciona \n| Cómo se crea                                 | Imagen | \n\\| ---------------- \\| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------- \\| --------------------------------------------- \\| ------- \\|\n\\| **Global**       | Permanente. Puede ser usado en cualquier parte de tu código | `var` usado fuera de un [\\`onEvent\\`(#fff176)](/docs/applab/onEvent/) \\| ![](https://images.code.org/6f8fada462d48f58ad9d4af091634cff-image-1549944949349.png) \\| \n\\| **Local**        | Temporal. Puede ser usado sólo en la parte del código donde fue creado, como dentro de un [\\`onEvent\\`(#fff176)](/docs/applab/onEvent/). Se elimina una vez que el [\\`onEvent\\`(#fff176)](/docs/applab/onEvent/) se ejecuta. | `var` usado dentro de un [\\`onEvent\\`(#fff176)](/docs/applab/onEvent/) \\| ![](https://images.code.org/e8bb3cec433f3f6260312089ff197e8a-image-1549945264323.png) \\|\n\n# Evitando las Variables Locales y Depuración\n\nLas variables locales serán útiles con el tiempo, pero por ahora lo más probable es que sólo sean confusas. El mayor problema que te encontrarás ahora mismo con las variables locales es usar accidentalmente `var` dentro de un [\\`onEvent\\`(#fff176)](/docs/applab/onEvent/) o `function`. Este es el aspecto que suele tener el código:\n\n<img src=\"https://images.code.org/7dc2b13d85ea17e39639d15488d07f8f-image-1549944350460.png\" style=\"width: 400px\">\n\nEste código es bastante confuso. Aunque parece que sólo se utiliza una variable, en realidad tiene dos variables, una local y otra global, ¡y ambas se llaman `count`! Cambiar el valor de una no tendrá ningún impacto en la otra. Esto puede causar un comportamiento inesperado en tu código y puede ser complicado de depurar.\n\nLa mejor manera de evitar estos problemas es **asegurarte por ahora de que no estás usando `var` dentro de un [\\`onEvent\\`(#fff176)](/docs/applab/onEvent/) o `function`.** Si te encuentras con un problema de depuración complicado, comprueba si estás creando accidentalmente una variable local."
        },
        "csd-2022/debugging-with-watchers": {
          "display_name": "Depurar con observadores",
          "content": "Cuando se trata de depurar un programa, es útil hacer un seguimiento del valor actual de una variable o propiedad del sprite a medida que el programa se ejecuta. A veces puedes usar `console.log()` para informar rápidamente del valor de una variable, pero eso no es tan útil cuando quieres hacer un seguimiento de múltiples variables, o variables que cambian a menudo durante tu programa.\n\nUn _watcher_ es una herramienta de depuración que, como su nombre indica, _watches_ sus variables mientras se ejecuta el programa, por lo que es más fácil ver lo que están haciendo.\n\n## Usando Watchers\n\nLos Watchers se encuentran en la sección Watch de la ventana de depuración, puede que necesites descomprimir esta ventana para verlos.\n\n![](https://cdo-curriculum.s3.amazonaws.com/media/uploads/watchers.png)\n\n[diagram_nums]\n\n1.  Aquí creamos una variable `watch_me` con un valor inicial de 0. También puedes usar watchers para seguir las propiedades de los sprites.\n2.  Cada vez que se ejecuta el bucle de dibujo estamos incrementando `watch_me` en 1. Esto hará que cambie _30 veces por segundo_.\n3.  Este es el panel del observador. En la parte superior están todos los observadores añadidos actualmente, y debajo hay un área para añadir nuevos observadores.\n4.  A medida que el programa se ejecuta, esta sección se actualiza continuamente para mostrar el valor actual de la variable vigilada `watch_me`.\n\n[/diagram_nums]\n\n## Añadiendo una Variable a Observar\n\n![](https://cdo-curriculum.s3.amazonaws.com/media/uploads/add_watcher.png)\n\nPuedes añadir observadores para cualquier variable o propiedad de objeto escribiendo el nombre de una variable en la casilla y pulsando el botón azul \"añadir\". Si tu programa no se está ejecutando o aún no se ha asignado un valor a la variable, el observador mostrará el valor \"indefinido\". Esto no es un error, sólo significa que a la variable todavía no se le ha asignado un valor."
        },
        "csd-2022/design-mode": {
          "display_name": "Modo de diseño",
          "content": "En Laboratorio de Aplicaciones, el \"Modo Diseño\" te permite arrastrar y soltar elementos de la interfaz de usuario en la aplicación. Del mismo modo que creaste prototipos en papel dibujando todos los elementos de la interfaz en papel, el Modo Diseño te permite crear prototipos digitales arrastrando y soltando diferentes elementos en la pantalla.\n\n## Recorrido por el Modo Diseño\n\n![](https://images.code.org/01a31ac3be66deb6d01a92a1edfffd21-image-1476726587662.png)\n\n[diagram_nums]\n\n1.  Verás un nuevo conjunto de interruptores sobre el área de la aplicación que te permiten alternar entre el \"Modo Diseño\" y el \"Modo Código\".\n2.  Añadir un elemento es tan fácil como arrastrarlo y soltarlo en la aplicación donde quieras. Una vez en la pantalla de la aplicación, puedes cambiar su posición, su tamaño y muchas otras propiedades.\n3.  La pestaña **Propiedades** te muestra todo lo que puedes cambiar sobre el aspecto de un elemento de interfaz de usuario.\n4.  El **identificador del elemento** es importante porque es la forma de referirte al elemento en tu código. Hablaremos de los ID de los elementos más adelante.\n5.  Puedes hacer que el texto que el usuario ve en el botón sea lo que quieras.\n6.  Desplázate hacia abajo para ver si otras propiedades de un elemento UI pueden estar \"escondidas\" más abajo.\n\n[/diagram_nums]"
        },
        "csd-2022/design-mode-elements": {
          "display_name": "Elementos del modo de diseño",
          "content": "<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/elements.png\" style=\"float:right; margin-left: 20px; max-width: 200px\"/>\n\nEl Modo Diseño te permite colocar diferentes tipos de elementos de Interfaz de Usuario (o UI) en la pantalla. Muchos de estos elementos se pueden utilizar para recibir información del usuario.\n\n## Elegir Buenos Identificadores (IDs)\n\nCada elemento UI en tu aplicación necesita un ID al que puedas referirte más tarde. Los buenos IDs son **significativos, descriptivos y únicos**.\n\nPor ejemplo, si tienes muchos botones en tu programa, querrás dar a cada uno un ID que describa lo que hace el botón. \n\nAsí, en lugar de esto:\n\n-   \"botón1\" y \"botón2\"\n\nPodrías hacer IDs que te digan no sólo que es un botón, sino para qué pretendes que se use el botón, como:\n\n-   \"homeButton\" y \"saveButton\" o\n-   \"buttonHome\" y \"buttonSave\" o\n-   \"home\\_button\" y \"save\\_button\".\n\n## Reglas sobre los IDs\n\nAl hacer IDs descriptivos y significativos hay **algunas reglas sobre IDs** que necesitas saber.  Los IDs...\n\n-   distinguen entre mayúsculas y minúsculas.\n-   no pueden contener espacios.\n-   _deben_ empezar por una letra (A-Z o a-z) y pueden ir seguidos de cualquier número de dígitos y letras.\n-   pueden contener guiones (\"-\"), guiones bajos (\"\\_\"), dos puntos (\":\") o puntos (\".\").\n\n**¿Se distingue entre mayúsculas y minúsculas?**\n\nEsto significa que hay una diferencia entre \"HomeButton\" y \"homeButton\" (fíjate en la H mayúscula del primero).\n\nEstas diferencias parecen molestas al principio, pero uno se acostumbra y, de hecho, agradece que el ordenador exija tanta precisión.\n\nHay algunos estilos comunes para escribir en mayúsculas y deletrear IDs de varias palabras:\n\n-   **Capitalización (conocida como \"camelCase\")** -- \"aCamelcaseNameMightLookLikeThis\"\n-   Mayúsculas (conocidas como \"snake_case\")\\*\\* -- \"some_people_like_to_use_underscores_to\\\\to_separate\\_words\"\n-   Guiones (conocidos como \"kebab-case\")\\*\\* -- \"a otros les gusta usar guiones o guiones\".\n\nLo que elijas depende de ti. Es tu estilo. Sólo ayuda a ser coherente."
        },
        "csd-2022/designing-screens-with-code": {
          "display_name": "Diseñar pantallas a través del código",
          "content": "En la Unidad 4 has visto que puedes diseñar una aplicación en Laboratorio de Aplicaciones utilizando **elementos** en **Modo Diseño**. Este método de arrastrar y soltar es rápido y sencillo, pero sólo puedes crear una página como ésta antes de ejecutar el programa. A veces querrás que los elementos de tu aplicación cambien mientras se está ejecutando, y para ello necesitaremos usar código.\n\nCada elemento tiene varias **propiedades**,  como la posición `x` e `y`, el color y el texto. El bloque [\\`setProperty\\`(#fff176)](/docs/applab/setProperty/) te permite establecer las propiedades de los elementos de la interfaz de usuario mientras el programa se está ejecutando. Cualquier propiedad que puedas establecer en Modo Diseño también puede establecerse en código utilizando [\\`setProperty\\`(#fff176)](/docs/applab/setProperty/).\n\n## Establecer Propiedades\n\n<img src=\"https://images.code.org/b7736bdcbde48f7951ebdc87135dd46c-image-1480536740764.png\" style=\"margin: auto\">\n\n[diagram_nums]\n\n1.  En Modo Código puedes encontrar[\\`setProperty\\`(#fff176)](/docs/applab/setProperty/) en la caja de herramientas de Controles de UI.\n2.  Elige el id del elemento UI del que quieres cambiar una propiedad\n3.  El menú desplegable muestra una lista de propiedades que puedes configurar para ese elemento. Coincide con la lista de propiedades que ves para un elemento en **Modo Diseño**.\n4.  El último parámetro es el valor que quieres establecer para esa propiedad. Estamos interesados en el color de fondo que tiene una serie de valores que le puedes dar.\n\n[/diagram_nums]"
        },
        "csd-2022/drawing-shapes": {
          "display_name": "Dibujar formas",
          "content": "Hay muchas opciones diferentes para dibujar en Laboratorio de Juegos.  Ya has visto tres bloques: [\\`rect\\`(#f78183)](/docs/applab/rect/), `ellipse` y `fill`.  Te permitirán hacer círculos y cuadrados de diferentes colores.\n\n## Recta\n\nEl bloque [\\`rect\\`(#f78183)](/docs/applab/rect/) trazará un cuadrado en las coordenadas `x` e `y` que se le indiquen.  Las coordenadas `x` e `y` le indican dónde va la esquina superior izquierda del cuadrado en el área de visualización.\n\n## Elipse\n\nEl bloque `elipse` trazará un círculo en las coordenadas `x` e `y` que se le indiquen.  Las coordenadas `x` e `y` le indican dónde se sitúa el centro del círculo en el área de visualización.\n\n## Coordenadas en Laboratorio de Juegos\n\nCon el fin de trazar las cosas en la pantalla en Laboratorio de Juegos, tendrás que utilizar las coordenadas `x` e `y`.  La coordenada `x` indica a qué distancia se encuentra algo del lado izquierdo del área de visualización.   La coordenada `y` indica la distancia desde la parte superior de la pantalla.\n\n## Relleno\n\nEl bloque `fill` cambia el color que Laboratorio de Juegos utiliza para colorear las formas que dibujas.  Una vez que utilices el bloque `fill`, todas las nuevas formas que dibujes se rellenarán con ese color, hasta que utilices el bloque `fill` para cambiar el color de nuevo.\n\n## Colores en Laboratorio de Juegos\n\nLaboratorio de Juegos entiende los nombres de colores más comunes, como \"rojo\", \"verde\" y \"marrón\".  También entiende todos los nombres de colores HTML listados en [HTML Color Names - W3Schools](https://www.w3schools.com/colors/colors_names.asp)."
        },
        "csd-2022/editing-images": {
          "display_name": "Editar imágenes",
          "content": "Además de cargar y dibujar imágenes, la pestaña Animación incluye varias herramientas que te ayudarán a editar las imágenes de tus animaciones.\n\n## Copiar, Voltear y Rotar\n\nTres herramientas útiles para crear múltiples animaciones para usar con el mismo sprite son _Copy_, _Flip_, y _Rotate_.\n\n![](https://cdo-curriculum.s3.amazonaws.com/media/uploads/animation_edit.png)\n\n[diagram_nums]\n\n1.  El botón **copiar** crea un duplicado de la animación actual. Esto es útil para crear múltiples versiones de una animación para un solo sprite, como apuntar en diferentes direcciones, o animaciones de saltar y caminar.\n2.  El botón **flip** voltea la imagen actual a través del eje vertical. Si mantienes pulsada la tecla _Alt_ (u _Opción_ en un Mac) mientras haces clic, puedes voltear a través del eje horizontal.\n3.  El botón **rotar** gira la imagen actual 90 grados en el sentido contrario a las agujas del reloj. Si mantienes pulsada la tecla _Alt_ (u _Opción_ en Mac) mientras haces clic, puedes rotar en el sentido de las agujas del reloj.\n\n[/diagram_nums]"
        },
        "csd-2022/for-loops": {
          "display_name": "Bucles Para",
          "content": "Es común querer repetir un conjunto de comandos un número determinado de veces.  El bucle [\\`for\\`(#f98bd0)](/docs/spritelab/codestudio_for/) fue creado para envolver todos esos componentes relacionados con los bucles de conteo en una sola línea de código.\n\n<img src=\"https://images.code.org/b93a044fc07cb4bbabb95b43132a005b-image-1447342829632.png\" style=\"width: 450px;\">\n\nLos programadores suelen leer un bucle [\\`for(var i = 0; i \\< 10; i++)\\`(#f98bd0)](/docs/spritelab/codestudio_for/) de esta manera: <br>\n\n**\"para la variable i empezando en 0, mientras i sea menor que 10, incrementa i en 1\"**\n\n## Tres partes del bucle For\n\n### Inicializar Variable\n\nSiempre que estés contando, necesitas una variable para llevar la cuenta. La primera parte del bucle `for` establece la variable, a menudo llamada `i`, que se utilizará para contar el número de veces que se ejecutará el bucle.  Esto también establece el valor inicial en el que empezar a contar. La variable se configura antes de que se ejecute el bucle y luego no se vuelve a ese código a lo largo de las subsiguientes ejecuciones a través del bucle for.\n\n### Condición\n\nLa condición determina la duración del bucle. Debe depender de la variable que inicializaste en la parte 1 del bucle. La condición se comprueba antes de entrar en el bucle `for` cada vez, incluida la primera. El bucle **se detiene** tan pronto como esta condición deja de ser cierta.\n\n### Incremento\n\nLa última parte del bucle `for` es el incremento. Es la parte de actualización del bucle. Para que el valor inicial de la variable cambie debemos actualizarlo cada vez que pasemos por el bucle. Para eso se utiliza el incremento. El incremento se ejecuta al final de cada pasada por el bucle for.  `i++` es la abreviatura de `i = i + 1`, que puedes reconocer como el patrón contador.\n\n## Ejemplo\n\nUn bucle `for` es similar a escribir un montón de sentencias `if` y contar a medida que se pasa por cada sentencia `if`. Veámoslo:\n\n### Bucle `For`\n\n    for(var i = 0; i < 3; i++){\n    \tconsole.log(\"Hi!\");\n    }\n\n### Sentencias `If`\n\nEste ejemplo hace lo mismo:\n\n    var i = 0;\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n    if (i < 3){\n    \tconsole.log(\"Hi!\");\n        i++;\n    }\n\nLa 4ª sentencia `if` ni siquiera se ejecutará. De hecho podrías tener sentencias `if` eternas. Sólo se ejecutaría `console.log()` dentro de la sentencia `if` 3 veces. Cuando compruebe el cuarto `if` la condición fallará."
        },
        "csd-2022/formatting-html": {
          "display_name": "Formatear HTML",
          "content": "Cuando escribas tu página web, debes organizar el código de forma que sea más fácil de leer.  Esto se llama **formateo**.  Cuando formateas tu código, te será más fácil encontrar y corregir errores.\n\n## Espacios en blanco\n\nEl espacio en blanco se refiere a cualquier carácter que aparezca como un espacio en blanco en la pantalla, como un espacio, un tabulador o una nueva línea. Los espacios en blanco ayudan a separar las distintas partes del documento para facilitar su lectura. Por ejemplo, en el código HTML, los elementos nuevos suelen colocarse en una nueva línea, aunque no suponga ninguna diferencia en la forma en que se muestra la página.\n\nPor ejemplo, compara el código de los dos cuadros siguientes.\n\n<pre >\n&lt;body&gt;\n   &lt;h1&gt;Esta es mi lista&lt;/h1&gt;\n   &lt;ol&gt;\n      &lt;li&gt;Tema 1&lt;/li&gt;\n      &lt;li&gt;Tema 2&lt;/li&gt;\n   &lt;/ol&gt;\n&lt;/body&gt;\n</pre>\n\n<pre>\n&lt;body&gt;&lt;h1&gt;Esta es mi lista&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;Tema 1&lt;/li&gt;&lt;li&gt;Tema 2&lt;/li&gt;&lt;/ol&gt;&lt;/body&gt;\n</pre>\n\nAmbos mostrarán la misma página web, pero el código en el cuadro superior es mucho más fácil de leer.  Es mejor comenzar los nuevos elementos en una nueva línea.\n\n## Sangría\n\nUn tipo de formato muy común en HTML es la **sangría**.  La sangría es la colocación del texto más a la derecha, o a la izquierda, para separarlo del texto circundante. La sangría ayuda a transmitir la estructura del programa. En HTML, los elementos que están dentro de otros elementos suelen estar sangrados. \n\nHe aquí un ejemplo:\n\n<pre>\n   &lt;body&gt;\n      &lt;p&gt;Este párrafo está dentro del elemento \"body\".&lt;/p&gt;\n   &lt;/body&gt;\n</pre>\n\nLa sangría puede ayudarte a recordar si has cerrado o no una etiqueta, y también deja claro qué etiquetas están dentro de otras.  \n\n## Comentarios\n\nA medida que tus páginas web se complican, querrás usar **comentarios**.  Los comentarios explican las diferentes partes del código y lo que debería crear.  Los comentarios pueden ayudarte a depurar, y también ayudarán a otras personas que estén intentando entender tu código.\n\n<pre>\n&lt;!-- esto es un comentario --&gt;\n</pre>"
        },
        "csd-2022/functions": {
          "display_name": "Funciones",
          "content": "Una función es un grupo de comandos (bloques) a los que das un nombre para poder utilizarlos una y otra vez.\n\n### **Creando (Nombrando) una Función**\n\nPara crear una función, necesitas poner todos los comandos dentro de un bloque de función y escribir el nombre de tu función en el espacio en la parte superior del bloque de función.  Este código está creando una nueva función llamada \"resetDrawing\" que contiene 4 comandos.\n\n![](<https://images.code.org/871749baa9c8f68f3e47be691229d70c-image-1474910778495.27.29 AM.png>)\n\n### **Llamando (Usando) una Función**\n\nSiempre que quieras usar tu función necesitas llamarla por su nombre. Para hacer esto sólo tienes que escribir el nombre de tu función seguido de paréntesis. Esto ejecutará todos los comandos que pusiste dentro de la función cuando la creaste.\n\n![](<https://images.code.org/9ed9c91abdf2e6987ade2f73524c29cf-image-1474911372794.36.00 PM.png>)\n\n### **¿Por qué usar funciones?**\n\n1.  **Manteniendo tu Código Organizado** Las funciones pueden ser creadas en cualquier parte de tu programa. Si tienes grandes bloques de código que no vas a utilizar a menudo, puedes crear una función en la parte inferior de tu código y simplemente llamarla en una sola línea más arriba.\n\n2.  **Manteniendo tu Código Legible** Al dar un nombre a un grupo de comandos estás ayudando a explicar cómo funciona tu código. Elegir buenos nombres te ayuda a ti y a otras personas que lean tu código a entender lo que está haciendo.\n\n3.  **Eliminando la Repetición** Una vez que has creado una función puedes llamarla tantas veces como quieras en tu programa. Si estás usando el mismo código en muchos lugares de tu programa puedes crear una función con ese código que puedes llamar en su lugar. Esto hace que sea fácil cambiar el código en varios lugares también."
        },
        "csd-2022/game-lab": {
          "display_name": "Laboratorio de Juegos",
          "content": "El Laboratorio de Juegos es una herramienta construida con [JavaScript](/concepts/javascript/) que se puede utilizar para crear arte, juegos y animaciones. Más información sobre los comandos de Laboratorio de Juegos en la [documentación de Laboratorio de Juegos](https://studio.code.org/docs/gamelab/)."
        },
        "csd-2022/game-lab-overview": {
          "display_name": "Vista previa",
          "content": "El Laboratorio de Juegos es una herramienta construida con [JavaScript](/concepts/javascript/) que se puede utilizar para crear arte, juegos y animaciones. Más información sobre los comandos de Laboratorio de Juegos en la [documentación de Laboratorio de Juegos](https://studio.code.org/docs/gamelab/)."
        },
        "csd-2022/headings-and-paragraphs": {
          "display_name": "Títulos y párrafos",
          "content": "Casi todas las páginas que crees tendrán cabeceras y párrafos.\n\n## Cabeceras\n\nLas cabeceras son los títulos de las secciones de diferente tamaño de una página web. Las cabeceras añaden estructura a tu página web dividiéndola para que sea más fácil de leer para el usuario.\n\n## Creación de cabeceras\n\nHay seis etiquetas de cabecera diferentes: `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>` y `<h6>`. El tipo de encabezamiento más común es `<h1>`.  Para utilizarlo, debes colocar el texto que deseas mostrar entre la etiqueta de apertura (`<h1>`) y la etiqueta de cierre (`</h1>`).\n\nEl código para una cabecera será como `<h1>Mi texto de cabecera</h1>`.\n\n## Tamaño de las cabeceras\n\nExisten cabeceras de diferentes tamaños que están marcadas por el número que aparece junto a la h en la etiqueta de cabecera. Van de `<h1>` a `<h6>`.\n\n<table markdown=1>\n<thead>\n<tr>\n<th>Ejemplo</th>\n<th>Resultado</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n\n    <h1>Hombros</h1>\n    <h2>Rodillas</h2>\n    <h3>Dedos </h3>\n\n</td>\n<td><img src=\"https://images.code.org/4f252e3dce84a14e1bfdab373d3edbad-image-1473432674187.50.43 AM.png\" style=\"width: 200px;\"></td>\n</tr>\n</tbody>\n</table>\n\n## Párrafos\n\nLos párrafos agrupan conjuntos de frases y dejan un espacio entre ese grupo de texto y el siguiente.\n\n## Creación de Párrafos\n\nLos párrafos están marcados por etiquetas de apertura(`<p>`) y cierre(`</p>`). Para crear más de un párrafo necesitarás múltiples conjuntos de etiquetas de apertura y cierre `<p>`. Por ejemplo\n\n    <p>\n    \tEsto es un párrafo.\n    </p>\n    <p>\n    \tEsto es otro párrafo.\n    </p>\n\n**W3 Schools Links**\n\n-   [\\\\\\<h1> - \\\\\\<h6>](https://www.w3schools.com/tags/tag_hn.asp)\n-   [\\\\\\<p>](https://www.w3schools.com/tags/tag_p.asp)"
        },
        "csd-2022/html": {
          "display_name": "HTML",
          "content": "HTML (Hypertext Markup Language) es el lenguaje utilizado para definir el contenido de las páginas web. Puedes encontrar más información sobre las etiquetas y atributos de HTML en la página [documentación de Laboratorio Web](/docs/weblab/). "
        },
        "csd-2022/html-overview": {
          "display_name": "Vista previa",
          "content": "HTML (Hypertext Markup Language) es el lenguaje utilizado para definir el contenido de las páginas web. Puedes encontrar más información sobre las etiquetas y atributos de HTML en la página [documentación de Laboratorio Web](/docs/weblab/). "
        },
        "csd-2022/html-tags": {
          "display_name": "Etiquetas HTML",
          "content": "## ¿Qué es HTML?\n\nPara mostrar una página web, un ordenador necesita saber no sólo qué palabras o imágenes deben aparecer en la pantalla. Necesita saber dónde colocar el contenido, qué tamaño darle, qué fuentes y colores utilizar, y mucha otra información que convierte un texto y unas imágenes normales en una página web completa.\n\nPara resolver este problema, los informáticos han creado lenguajes que comunican esta información adicional. **HTML**, abreviatura de **H**yper**t**ext **M**arkup **L**anguage, es un lenguaje que ayuda a resolver este problema. Mediante un sistema de etiquetas, HTML permite al programador indicar el propósito de las distintas partes de una página web. Esto permite al ordenador saber cómo debe mostrar estos diferentes elementos.\n\n## Etiquetas HTML\n\nHTML indica el propósito de las diferentes partes de una página web rodeándolas con pares de etiquetas de apertura y cierre, como en el ejemplo siguiente.\n\n<img alt=\"HTML element\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/html_element.png\" class=\"center\" style=\"max-width: 400px; margin: 20px auto;\">\n\n| Etiqueta HTML | Nombre de la Etiqueta           | Qué hace                                                                                                         |\n| ------------- | ------------------------------- | ---------------------------------------------------------------------------------------------------------------- |\n| `<p>`         | Etiqueta de apertura de párrafo | Inicio de un párrafo. Los párrafos son bloques de texto en tu página web.                                        |\n| `</p>`        | Etiqueta de cierre de párrafo   | Marca el final de un párrafo. Una etiqueta de cierre es siempre la etiqueta de apertura con un `/` al principio. |\n\n<br>\n\n## Etiquetas por defecto\n\nTodas las páginas HTML incluyen un conjunto común de etiquetas. Son tan comunes, de hecho, que todos los proyectos de Laboratorio Web comenzarán ya con ellas añadidas.\n\n| Etiqueta HTML                                                                                             | Qué hace                                                                                                                   |\n| --------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| <img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screenshot-2017-04-26-at-2.19.39-PM.png\"> | Este código de inicio se incluye en cada proyecto del Laboratorio web. A continuación se explican las distintas etiquetas. |\n| `<!DOCTYPE html>`                                                                                         | Indica al ordenador que se trata de un documento escrito en HTML.                                                          |\n| `<html>`                                                                                                  | Indica el comienzo de su código escrito en HTML.                                                                           |\n| `<head>`                                                                                                  | Contiene información (a veces llamada \"metadatos\") sobre su página web.                                                    |\n| `<body>`                                                                                                  | Contiene el contenido principal de su página web.                                                                          |\n\n## W3 Schools\n\nHay muchos recursos en Internet para aprender sobre las etiquetas HTML, pero uno de los más utilizados es [w3schools.com](http://w3schools.com). Este sitio web incluye mucha información útil sobre el funcionamiento de las etiquetas, así como enlaces a nuevas etiquetas sobre las que te puede interesar leer. En los niveles de mapas de esta unidad encontrarás siempre un enlace a las etiquetas en W3 Schools y deberías explorar otras etiquetas si te interesa aprender más.\n\n**W3 Schools Links**\n\n-   [\\\\\\<p>](https://www.w3schools.com/html/html_paragraphs.asp)\n-   [\\\\\\<!DOCTYPE>](https://www.w3schools.com/tags/tag_doctype.asp)\n-   [\\\\\\<html>](https://www.w3schools.com/tags/tag_html.asp)\n-   [\\\\\\<head>](https://www.w3schools.com/tags/tag_head.asp)\n-   [\\\\\\<body>](https://www.w3schools.com/tags/tag_body.asp)"
        },
        "csd-2022/hyperlinks": {
          "display_name": "Hipervínculos",
          "content": "Los hipervínculos pueden conectar con páginas web locales o externas. Para añadir navegación a tu sitio web necesitarás añadir hipervínculos que conecten tus páginas web individuales. Puedes **añadir hipervínculos a tu página web utilizando el elemento `<a>`**. El texto que quieres mostrar como hipervínculo va entre las etiquetas de apertura y cierre del hipervínculo. El elemento `<a>` tiene un atributo `href` que es la ubicación a la que se enlaza. La ubicación de una página local es simplemente la ruta del archivo de esa página. \n\n## Utilizando Hipervínculos\n\nSuponiendo que tienes un sitio web que incluye una segunda página con el nombre de archivo `casas.html`, podrías crear un enlace a esa página de la siguiente manera:\n\n<img alt=\"Link to houses html\" src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/a_tag.png\" class=\"center\" style=\"max-width: 600px; margin: 20px auto;\">\n\n[diagram_nums]\n\n1.  La etiqueta `<a>` envuelve el texto que desea convertir en un enlace clicable. _A_ es la abreviatura de _anchor_.\n2.  El atributo `href`, abreviatura de _hypertext reference_, determina a dónde debe ir tu enlace. En este caso, `casas.html`.\n3.  La etiqueta de cierre finaliza el enlace.\n\n[/diagram_nums]\n\n**W3 Schools Link**\n\n-   [\\\\\\<a>](https://www.w3schools.com/tags/tag_a.asp)"
        },
        "csd-2022/if-else-statements": {
          "display_name": "Sentencias si-si no",
          "content": "## Cómo funcionan las sentencias If-Else\n\n<img src=\"https://images.code.org/73eb353de3b62582617e66bfcf4208a7-image-1479490636331.png\" style=\"float: right\">\n\nCon una sentencia _if-else_ estás dando una orden **o lo uno o lo otro**: \n\n**O bien** las líneas de código dentro de _if_ se ejecutarán **o** las líneas dentro de _else_ se ejecutarán. Esas son las opciones.\n\nYa viste en el vídeo cómo añadir una cláusula _else_ a una sentencia if -- pulsa el pequeño símbolo `+` en la cola de la sentencia _if_.\n\nDentro de las llaves de la cláusula _else_ pones las líneas de código que quieres ejecutar si la condición booleana de la sentencia _if_ es _falso_.\n\nAlgunas notas importantes sobre la cláusula else:\n\n-   La cláusula `else` debe ir _inmediatamente_ después de la llave de cierre de una sentencia _if_.\n-   El `else` también tiene su propio conjunto de llaves de apertura y cierre para encapsular líneas de código.\n\n<br><br>\n\n<img src=\"https://images.code.org/b7711c7851e5cc9bd08fa53500d692ce-image-1479495721089.png\" style=\"float: right; width: 275px\">\n\nTeniendo en cuenta nuestro diagrama de flujo de antes, hasta ahora no hemos tenido una manera de hacer que el programa haga algo diferente si la condición era _falso_.  Con una sentencia `if-else` lo conseguimos. \n\nAhora podemos escribir un programa que se \"ramifique\" en un punto concreto, ejecutando una de las dos posibles secciones de código.\n\n<div style=\"clear: both\">&nbsp;</div>\n\n## Un Ejemplo Práctico\n\n<div style=\"clear: both\">&nbsp;</div>\n\n<img src=\"https://images.code.org/2e05fc16d828eda2cc4ef5db036d635a-image-1479496055965.png\" style=\"float: right;margin: 10px;\">\n\n[diagram_nums]\n\n1.  Las líneas de código se ejecutan secuencialmente como de costumbre. Solicitan al usuario que introduzca su edad.\n2.  La sentencia _if_ y la expresión booleana son las mismas que antes. La expresión se evalúa como `true` o `false`.\n3.  Con una sentencia _if-else_ está garantizando que exactamente una de estas dos secciones de código **se ejecutará**.  Si la condición es `true` (la edad es 18 o mayor) entonces se ejecutan las líneas de código dentro de las llaves de la sentencia if. Si la condición es `false` salta a la cláusula else y ejecuta cualquier línea de código que encuentre entre las llaves de la cláusula else.\n4.  Finalmente, el programa retoma la ejecución normal justo después del bloque _if-else_. En este punto del programa, sabemos que _o_ el código del bloque if _o_ el bloque else se ha ejecutado.\n\n[/diagram_nums]"
        },
        "csd-2022/if-statements": {
          "display_name": "Sentencias si",
          "content": "## Entendiendo el Flujo del Programa\n\nSe dice que los programas tienen un \"flujo de ejecución\". Se empieza ejecutando una línea de código, luego la siguiente, luego la siguiente, y así sucesivamente.\n\n<img src=\"https://images.code.org/9475539704f7fc8d13092a5706fb3bba-image-1479311514103.png\" style=\"float: right; margin: 10px;\">\n\nUn diagrama de flujo es una representación visual habitual para representar los distintos caminos de ejecución que puede seguir un programa.  Mucha gente los utiliza para planificar programas.  \n\n[diagram_nums]\n\n1.  Este diagrama de flujo representa un programa que ejecuta una línea tras otra hasta llegar a un punto en el que debe tomar una decisión.\n2.  Para determinar el camino a seguir se establece una **condición**. Debe ser una **expresión booleana**, algo que se evalúe como **verdadero** o **falso**.  Aquí tenemos una simple **comparación** de dos valores: la edad de la persona y el número 18.\n3.  El programa hace una cosa si la condición es verdadera, y otra cosa si la condición es falsa.\n4.  El programa también puede continuar un único proceso de ejecución después de la condición.\n\n[/diagram_nums]\n\n## Cómo funcionan las sentencias `If`\n\n<img src=\"https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png\" style=\"float: right; margin-left: 20px; margin-right: 20px;\">\n\nLas sentencias _if_ son las líneas de código que se utilizan para cambiar el flujo de un programa mientras se está ejecutando. Puedes escribir código que determine qué líneas de código deben ejecutarse a continuación.\n\nA la derecha hay un diagrama que muestra los elementos de una sentencia _if_ básica en JavaScript.\n\nHay dos partes básicas en una sentencia _if_.\n\n1.  Una condición a ser evaluada (Una expresión booleana que evalúa a **cierto** o **falso**)\n2.  Código que debería ejecutarse _si_ la expresión fuera cierta, encerrado entre llaves.\n\n<!-- Rehacer esto para Laboratorio de Juegos\n\n## Un ejemplo práctico\n\n<img src=\"https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png\" style=\"display: block; margin: auto; float: right\">\n\n[diagram_nums]\n\n1. El programa se ejecuta línea por línea como cabría esperar. Muestra un mensaje, luego pide al usuario que introduzca un número.  Lo que el usuario escriba se almacenará en la variable `edad<` y luego pasa a la siguiente línea...\n2. Cuando se encuentra la sentencia _if_ lo _primero_ que hace es evaluar la condición entre paréntesis. Comprueba si, en este punto del programa, el valor de la variable `edad` es mayor o igual que 18. Si es así, decimos que la expresión _if_ es mayor que 18.  Si lo es, entonces decimos que la expresión \"devuelve verdadero**\".  En caso contrario, devuelve falso.\n3. Estas sentencias `console.log` se ejecutarán _únicamente_ si la expresión es verdadera. Las llaves rodean todo el código que debe ejecutarse si, y sólo si, la expresión es verdadera.  En caso contrario, toda la sección de código encapsulada en la sentencia if será _saltada_.\n4. La ejecución comienza aquí, en la primera línea después de la llave de cierre de la sentencia if.  Esta línea se ejecutará _siempre_, pero observa que si el usuario introdujera una edad inferior a 18 años, se omitiría toda la sentencia if, y sólo diría \"Gracias por verificar\".\n\n[/diagram_nums]\n\n-->"
        },
        "csd-2022/if-statements-2": {
          "display_name": "Sentencias si",
          "content": "## Entendiendo el Flujo del Programa\n\nSe dice que los programas tienen un \"flujo de ejecución\". Se empieza ejecutando una línea de código y luego la siguiente y así sucesivamente.\n\n<img src=\"https://images.code.org/9475539704f7fc8d13092a5706fb3bba-image-1479311514103.png\" style=\"float: right\">\n\nUn diagrama de flujo es un elemento visual común que se utiliza para representar los distintos caminos de ejecución que puede seguir un programa.  Mucha gente los utiliza para planificar.  \n\n<span style=\"color: #00adbc; font-size: 150%\">1.</span>\nEste diagrama de flujo representa un programa que ejecuta una línea tras otra hasta llegar a un punto en el que debe tomar una decisión.\n\n<span style=\"color: #00adbc; font-size: 150%\">2.</span>\nPara determinar qué camino tomar, debes establecer una **condición**. Debe ser una **expresión booleana**, algo que se evalúa como **verdadero** o **falso**.  Aquí tenemos una simple **comparación** de dos valores: la edad de la persona y el número 18.\n\n<span style=\"color: #00adbc; font-size: 150%\">3.</span> El programa hace una cosa si la condición es verdadera, y otra si la condición es falsa.\n\n<span style=\"color: #00adbc; font-size: 150%\">4.</span> El pr\n\n## Cómo funcionan las sentencias If\n\n<img src=\"https://images.code.org/361556bbff61bf91e2c737f745582dff-image-1479418505481.png\" style=\"float: right; margin-left: 20px; margin-right: 20px\">\n\nLas sentencias [\\`if\\`(#64d5ff)](/docs/spritelab/codestudio_ifStatement/) son las líneas de código que necesitas para cambiar el flujo mientras tu programa se está ejecutando. Puedes escribir código que _tome una decisión que determine qué líneas de código deben ejecutarse a continuación._\n\nA la derecha hay un diagrama que muestra los elementos de una sentencia [\\`if\\`(#64d5ff)](/docs/spritelab/codestudio_ifStatement/) básica en JavaScript.\n\nHay dos partes básicas en una sentencia if.\n\n1.  Una condición para ser evaluada (Una expresión booleana que se evalúa a **cierto** o **falso**)\n2.  Código que debe ejecutarse _si_ la expresión es verdadera, encerrado entre llaves\n\n## Un ejemplo práctico\n\n<img src=\"https://images.code.org/ca716e009ddb8dc397eb5a651a1ac2d7-image-1479420772852.png\" style=\"display: block; margin: auto; float: right\">\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">1.</span>\nEl programa se ejecuta línea por línea como cabría esperar. Muestra un mensaje y luego pide al usuario que introduzca un número.  Lo que escriba el usuario se almacenará en la variable <code>edad</code> y luego pasa a la siguiente línea...\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">2.</span>\nCuando la sentencia <code>if</code> se encuentra <em>lo primero</em> que hace es evaluar la condición entre paréntesis. Comprueba si, en este punto del programa, el valor de una variable <code>edad</code> es mayor o igual que 18.  Si lo es, entonces decimos que la expresión \"<strong>devuelve cierto</strong>\".  En caso contrario, devuelve falso.\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">3.</span>\nEstas sentencias console.log <em>sólo</em> si la expresión es verdadera. Las llaves rodean todo el código que debe ejecutarse si, y sólo si, la expresión es verdadera.  De lo contrario, toda la sección de código encapsulada en la sentencia if es <em>saltado</em>.\n</p>\n\n<p><span style=\"font-weight: bold; color: #00adbc; font-size: 150%;\">4.</span>\nLa ejecución comienza aquí, en la primera línea después de la llave de cierre de la declaración if.  Esta línea será <em>siempre</em> ejecutada, pero ten en cuenta que si el usuario introdujera una edad inferior a 18 años, se omitiría toda la sentencia if, y sólo diría \"Gracias por verificar\".  (Arreglaremos esta torpeza pronto).\n\n</p>\n\n<div style=\"clear: both\">&nbsp;</div>El programa también puede continuar un único proceso de ejecución después de la condición."
        },
        "csd-2022/images-in-html": {
          "display_name": "Imágenes en HTML",
          "content": "La etiqueta _image_ te permite añadir imágenes a tu página. Tal vez notes que esta etiqueta tiene un aspecto un poco diferente a las que has visto antes. A diferencia de las etiquetas de párrafo, encabezado o lista, la etiqueta de imagen _no requiere una etiqueta de cierre_. Toda la información necesaria para mostrar la imagen se encuentra en la propia etiqueta.\n\n## Fuente de Imagen y Texto Alternativo\n\nPara indicar al navegador qué archivo debe utilizar, se añade información adicional, denominada atributo, a la etiqueta de la imagen entre corchetes. El atributo **src** representa la fuente e indica el nombre de la imagen, y el atributo **alt** describe la imagen.\n\n<img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/img_tag.png\" class=\"center\" style=\"max-width: 500px; margin-top: 20px; margin-bottom: 20px;\"/>\\[\n\n][0]\n\n1.  Crea una etiqueta de imagen con la abreviatura **img**. Se considera una etiqueta que se cierra automáticamente\\_, ya que no necesita ajustar el texto como lo hacen muchas otras etiquetas. \n2.  El atributo **src** es la abreviatura de **source**. Esto le indica a la etiqueta qué imagen debe cargar. En este caso, la página buscará una imagen con el nombre de archivo «dog.jpg» en el mismo directorio que la página. Los nombres de los archivos de imagen incluyen extensiones que indican al ordenador con qué tipo de imagen está trabajando. Las extensiones más comunes son `.jpg`, `.jpeg` y `.png`. Asegúrate de poner comillas alrededor del nombre del archivo de la imagen. \n3.  El atributo **alt** es la abreviatura de **texto alternativo**. Si bien no verás este texto en tu página web, ofrece una copia de seguridad en caso de que la imagen no se descargue correctamente o para usuarios con problemas de visión. En este ejemplo, si tu navegador no pudo cargar la imagen, verás  <img src=\"https://cdo-curriculum.s3.amazonaws.com/media/uploads/broken_image.png\" style=\"height: 50px;\">\n\n[/][0]\n\n**W3 Schools Links**\n\n-   [\\\\\\<img>](https://www.w3schools.com/tags/tag_img.asp)"
        },
        "csd-2022/importing-a-model-in-app-lab": {
          "display_name": "Importación de un Modelo en Laboratorio de Aplicaciones",
          "content": "<img style=\"margin-right: 10px; margin-left: 10px; margin-bottom: 15px; border: 2px solid black; width: 200px; float: left\" src=\"https://images.code.org/e81c7cead7d106ee5b32f850791c7de8-image-1616919161803.png\"/>\n\nPara importar un modelo en Laboratorio de Aplicaciones, pulsa el icono de engranaje en la esquina superior izquierda de la Caja de Herramientas de Laboratorio de Aplicaciones y selecciona Gestionar Modelos de Inteligencia Artificial.\n\n<hr style=\"clear:both\">\n\n<img style=\"margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://curriculum.code.org/media/uploads/Import-AI-Models_2l1FmrZ.png\"/>\n\n[diagram_nums]\n\n1.  Puedes seleccionar qué modelo importar utilizando el menú desplegable\n2.  Pulsa el botón Importar para importar tu modelo en Laboratorio de Aplicaciones\n3.  Pulsa el botón Eliminar para borrar el modelo de tu cuenta\n4.  La ficha de modelo de cada modelo aparecerá en la parte derecha. Puedes utilizarla para decidir si quieres o no utilizar este modelo en tu aplicación.\n\n[/diagram_nums]\n\n## Video\n\n(Abre YouTube en una pestaña nueva)\n\n[![Model Cards in AI Lab](https://curriculum.code.org/media/uploads/Capture_vR2LaoG.PNG)](https://www.youtube.com/watch?v=_iAGDFmZhYI)"
        },
        "csd-2022/importing-screens": {
          "display_name": "Importar pantallas",
          "content": "¡El Laboratorio de Aplicaciones te permite importar pantallas desde otra aplicación! En el menú desplegable de pantallas situado encima del área de aplicaciones, selecciona \"Importar pantalla\" y sigue las instrucciones (necesitarás el código de compartición de la aplicación de la que estás importando pantallas).\n\n![](https://images.code.org/9ca7398a9b7403dc39ec6a6b2d2b8a5e-image-1477346132059.png)\n\n# ¡Cuidado con los Conflictos!\n\nPara evitar errores de conflicto de ID (uso del mismo ID para varios elementos), el Laboratorio de Aplicaciones no te permitirá importar pantallas que utilicen ID de elementos que ya estén en tu aplicación. Algunas cosas que deberías comprobar al importar:\n\n-   La(s) pantalla(s) que está importando necesita(n) tener IDs únicos que no estén ya utilizados por pantallas en la aplicación.\n    -   Si intentas importar una pantalla con un ID que ya existe, tendrás la opción de sustituir la pantalla existente por la nueva.\n\n<img src=\"https://images.code.org/d5d197be3a75eeb624e3a1312ab786ce-image-1477346707529.49.02.png\" style=\"max-width: 300px;\">\n\n-   Los ID utilizados en la pantalla importada no se utilizan ya en tu aplicación.\n\n<img src=\"https://images.code.org/affd44c38c108ae5e3693d3187ea67e0-image-1477346796569.48.10.png\" style=\"max-width: 300px;\">"
        },
        "csd-2022/introduction-to-ai-lab": {
          "display_name": "Introducción al Laboratorio de Inteligencia Artificial",
          "content": "<h1 style=\"text-align: center\">\n¡Bienvenido al Laboratorio de Inteligencia Artificial!\n</h1>\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/f6438df7e9ddba9343861fe5635e7eec-image-1616511376606.png\" width=\"50%\" />\n<p>\nEl Laboratorio de Inteligencia Artificial es una herramienta que te permite crear <strong>Modelos de Aprendizaje Automático</strong> para resolver problemas, tomar decisiones o crear predicciones. Los Modelos de Aprendizaje Automático no son más que programas informáticos diseñados para tomar una decisión. A veces la decisión puede ser aleatoria, o puede basarse en un conjunto de reglas como cuando se juega a un juego de mesa.\n</p>\n<p>\nEn este widget, creamos modelos que utilizan patrones en los datos para tomar decisiones. Ayudarás a entrenar al Bot de Inteligencia Artificial para que tome decisiones basadas en datos y, a continuación, podrás guardar el modelo de toma de decisiones del Bot de Inteligencia Artificial para utilizarlo en un proyecto de Laboratorio de Aplicaciones.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img src=\"https://images.code.org/4c16f69d655ab1782124a6d46a07c2fc-image-1616511395871.png\" width=\"50%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<h2>\nPaso 1: Elige una Etiqueta\n</h2>\n<p>\nUna <strong>Etiqueta</strong> es con lo que estás tratando de ayudar al  Bot de Inteligencia Artificial a predecir o decidir. La etiqueta generalmente está relacionada con un problema que estás tratando de resolver, o puede ser algo que <em>se pregunta</em> o se tiene <em>curiosidad</em>. A veces, los datos se recopilan teniendo en cuenta la etiqueta, pero no siempre.\n</p>\n</p>\n<p>\nPuedes explorar tus datos en el panel izquierdo y tomar decisiones en el panel derecho.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/9c106a4d860168fe3564709f15aea329-image-1616511405390.png\" width=\"50%\" />\n<h2>\nPaso 2: Elegir Características\n</h2>\n<p>\nLas <strong>Características</strong> son las condiciones en las que el Bot de Inteligencia Artificial está basando su predicción. Puedes elegir tantas funciones como quieras, pero es posible que algunas no sean tan útiles para hacer predicciones como otras. El Laboratorio de Inteligencia Artificial tiene diferentes visualizaciones de datos que pueden ayudarte a decidir qué funciones son más útiles que otras.\n</p>\n<p>\nPuedes explorar tus datos en el panel izquierdo y tomar decisiones en el panel derecho.\n</p>\n</div>\n\n<div style=\"height: 250px\">\n<img src=\"https://images.code.org/9de79f238a091e2c6482d89a39e84c25-image-1616511415607.png\" width=\"50%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<h2>\nPaso 3: Entrenar al Bot de Inteligencia Artificial\n</h2>\n<p>\nBasándose en tus decisiones, el Bot de Inteligencia Artificial buscará en los datos patrones que le ayuden a tomar decisiones.\n\n<br />\n\nEl Bot de Inteligencia Artificial retiene automáticamente algunos de los datos para ponerse a prueba y ver lo bien que lo está haciendo. Es como estudiar para un examen: puedes ver la mayoría de las preguntas de práctica para estudiar, pero guardas algunas para el final, para ponerte a prueba y ver lo bien que lo estás haciendo.\n\n</p>\n</div>\n\n<div style=\"height: 300px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/533b0a019b50e9410bca4ff73e118310-image-1616511430805.png\" width=\"50%\" />\n<h2>\nPaso 4: Evaluación y Prueba\n</h2>\n<p>\nEn esta pantalla, puedes ver algunas de las decisiones que el Bot de Inteligencia Artificial está tomando basándose en los datos. También puedes ver la precisión que obtuvo basándose en los datos de prueba que el Bot de Inteligencia Artificial se reservó.\n</p>\n<p>\nSi el Bot de Inteligencia Artificial no toma muy buenas decisiones, siempre puedes volver a una pantalla anterior y elegir características diferentes o una nueva etiqueta.\n</p>\n</div>\n\n<div style=\"height: 350px\">\n<img src=\"https://images.code.org/ab441a75cf50d92f1da344ff96d93d3a-image-1616511439816.png\" width=\"30%\" style=\"float:right; margin-left: 10px; margin-right: 10px; border: 2px solid black\">\n<p>\nTambién puedes probar tú mismo el modelo del Bot de Inteligencia Artificial. Prueba diferentes valores y observa qué decisiones toma el robot. Probar el modelo es importante para asegurarnos de que evitamos el <strong>sesgo</strong>, que es cuando las decisiones favorecen algunas cosas y restan prioridad a otras. Si descubres un sesgo en tu modelo, siempre puedes regresar y elegir nuevas funciones o una nueva etiqueta.\n</p>\n</div>\n\n<div style=\"height: 300px\">\n<img style=\"float:left; margin-right: 10px; margin-left: 10px; border: 2px solid black\" src=\"https://images.code.org/cf56f4bbe4fad787e00019cb3c6bf11e-image-1616511449679.png\" width=\"50%\" />\n<h2>\nPaso 5: Guarda tu Modelo\n</h2>\n<p>\nEn esta pantalla, puedes guardar tu modelo para utilizarlo en un proyecto de Laboratorio de Aplicaciones. Guardar el modelo es como utilizar el cerebro del Bot de Inteligencia Artificial para tomar las mismas decisiones en diferentes lugares. El código de tu proyecto sólo pedirá a tu modelo que haga una predicción.\n</p>\n<p>\nAntes de poder guardar, tienes que responder algunas preguntas que se guardan con tu modelo. Esto es como documentar el código: en lugar de escribir comentarios para describir cómo funciona un programa, añadimos notas sobre cómo hemos entrenado a nuestro modelo para que tome sus decisiones.\n</p>\n</div>"
        },
        "csd-2022/javascript": {
          "display_name": "JavaScript",
          "content": "JavaScript es un lenguaje de programación que se utiliza sobre todo en Internet y como lenguaje de programación principal en muchas de las herramientas y planes de estudio de Code.org, como [App Lab](/concepts/app-lab/), [Game Lab](/concepts/game-lab/) y [Maker Toolkit](/concepts/maker-toolkit/)."
        },
        "csd-2022/javascript-overview": {
          "display_name": "Vista previa",
          "content": "JavaScript es un lenguaje de programación que se utiliza sobre todo en Internet y como lenguaje de programación principal en muchas de las herramientas y planes de estudio de Code.org, como [App Lab](/concepts/app-lab/), [Game Lab](/concepts/game-lab/) y [Maker Toolkit](/concepts/maker-toolkit/)."
        },
        "csd-2022/layout-properties": {
          "display_name": "Propiedades de diseño",
          "content": "Hay muchas propiedades que ayudan a configurar los estilos de tus páginas web.\n\n| Propiedad                                                       | Descripción                                 | W3 Schools Link                                                |\n| --------------------------------------------------------------- | ------------------------------------------- | -------------------------------------------------------------- |\n| [\\`background-color\\`(#d3e965)](/docs/weblab/background-color/) | Configura el color de fondo del elemento    | [W3 Schools](https://www.w3schools.com/css/css_background.asp) |\n| [\\`border-color\\`(#d3e965)](/docs/weblab/border-color/)         | Configura el color del borde                | [W3 Schools](https://www.w3schools.com/css/css_border.asp)     |\n| [\\`border-width\\`(#d3e965)](/docs/weblab/border-width/)         | Cambia la anchura del borde de un elemento  | [W3 Schools](https://www.w3schools.com/css/css_border.asp)     |\n| [\\`border-style\\`(#d3e965)](/docs/weblab/border-style/)         | Cambia el estilo del borde                  | [W3 Schools](https://www.w3schools.com/css/css_border.asp)     |\n| [\\`Width\\`(#d3e965)](/docs/weblab/width/)                       | Configura la anchura de un elemento         | [W3 Schools](https://www.w3schools.com/css/css_dimension.asp)  |\n| [\\`Height\\`(#d3e965)](/docs/weblab/height/)                     | Configura la altura de un elemento          | [W3 Schools](https://www.w3schools.com/css/css_dimension.asp)  |\n| [\\`Float\\`(#d3e965)](/docs/weblab/float/)                       | Desplaza un elemento a un lado de la página | [W3 Schools](https://www.w3schools.com/css/css_float.asp)      |\n| [\\`Margin\\`(#d3e965)](/docs/weblab/margin/)                     | Genera espacio alrededor de un elemento     | [W3 Schools](https://www.w3schools.com/css/css_margin.asp)     |"
        },
        "csd-2022/list-filter-pattern": {
          "display_name": "Patrón de Filtro de Lista"
        },
        "csd-2022/lists": {
          "display_name": "Listas"
        },
        "csd-2022/maker-toolkit": {
          "display_name": "Herramientas de Maker"
        },
        "csd-2022/maker-toolkit-overview": {
          "display_name": "Vista previa"
        },
        "csd-2022/model-cards-in-ai-lab": {
          "display_name": "Tarjetas Modelo en Laboratorio de Inteligencia Artificial"
        },
        "csd-2022/modifying-arrays": {
          "display_name": "Modificar arreglos"
        },
        "csd-2022/multi-screen-apps": {
          "display_name": "Aplicaciones con varias pantallas"
        },
        "csd-2022/naming-variables": {
          "display_name": "Nombrar variables",
          "content": "Las etiquetas de las variables deben ser significativas, pero puedes elegir casi cualquier etiqueta. Sólo hay algunas reglas y directrices a tener en cuenta.\n\n## Reglas de Nomenclatura\n\nHay unas **pocas reglas** a la hora de elegir etiquetas:\n\n-   Las etiquetas **no pueden incluir espacios**. Por ejemplo, `ancho de rectángulo` generaría un error.\n-   Las etiquetas **no pueden empezar por un número**. 4 lados\" y \"2mañana\" generarán errores.\n-   Ten mucho cuidado con **la ortografía**.  Si las etiquetas no se escriben exactamente igual, el ordenador no se dará cuenta de que se refieren a la misma variable.\n-   Las etiquetas distinguen entre mayúsculas y minúsculas. `size` no es lo mismo que `Size` o `SIZE`.\n\n## Usando Etiquetas Significativas\n\nCuando veas una variable en tu programa, querrás saber exactamente qué contiene sin tener que buscarla.  Asegúrate de etiquetar tu variable con algo significativo.  `score` y `lives` son buenas etiquetas que te dicen exactamente para qué se usa esa variable.  [\\`number\\`(#bbb3ce)](/docs/spritelab/codestudio_number/) y `a` no son tan útiles.\n\n## camelCase\n\nLas etiquetas con varias palabras pueden ser más fáciles de leer en **camelCase**. Una etiqueta camelCase se parece a `sizeOfRectangle` o `aReallyLongLabelName`.  La primera letra del nombre de la variable suele ser minúscula, cada nueva palabra empieza con mayúscula.  Esto te ayuda a ver el comienzo de las nuevas palabras sin usar espacios, que no están permitidos en los nombres de las variables.\n\n## usando\\_guiones bajos\n\nOtra forma común de poner múltiples palabras en la etiqueta de una variable es usar guiones bajos entre las palabras.  Cuando se usan guiones bajos, los programadores no suelen usar mayúsculas.  Este tipo de variables se parecen a `size_of_rectangle` o `my_frog_sprite`.\n\n## Coherencia\n\nLo más importante cuando elijas cómo etiquetar tus variables es usar un estilo coherente para que te sea fácil recordar la ortografía exacta y las mayúsculas de tus variables. "
        },
        "csd-2022/other": {
          "display_name": "Otros"
        },
        "csd-2022/other-overview": {
          "display_name": "Vista previa"
        },
        "csd-2022/patterns-overview": {
          "display_name": "Vista previa"
        },
        "csd-2022/physical-input": {
          "display_name": "Entrada física"
        },
        "csd-2022/playing-notes": {
          "display_name": "Sonando notas"
        },
        "csd-2022/producing-output": {
          "display_name": "Generando la Salida"
        },
        "csd-2022/random-numbers": {
          "display_name": "Números aleatorios"
        },
        "csd-2022/responding-to-user-input": {
          "display_name": "Responder a las contribuciones de los usuarios"
        },
        "csd-2022/shapes-and-parameters": {
          "display_name": "Formas y parámetros"
        },
        "csd-2022/sprite-interactions": {
          "display_name": "Interacciones de sprites"
        },
        "csd-2022/sprite-properties": {
          "display_name": "Propiedades de Sprite"
        },
        "csd-2022/sprites": {
          "display_name": "Sprites"
        },
        "csd-2022/style-sheets": {
          "display_name": "Hojas de Estilo"
        },
        "csd-2022/taking-input-with-getproperty": {
          "display_name": "Obteniendo Entradas con getProperty"
        },
        "csd-2022/text-properties": {
          "display_name": "Propiedades del Texto"
        },
        "csd-2022/the-accelerometer": {
          "display_name": "El acelerómetro"
        },
        "csd-2022/the-counter-pattern": {
          "display_name": "El patrón del contador"
        },
        "csd-2022/the-counter-pattern-2": {
          "display_name": "El patrón del contador"
        },
        "csd-2022/the-draw-loop": {
          "display_name": "El bucle 'dibujar'"
        },
        "csd-2022/variable-with-string-concatenation-pattern": {
          "display_name": "Variable con Patrón de Concatenación de Cadena"
        },
        "csd-2022/variables": {
          "display_name": "Variables"
        },
        "csd-2022/velocity": {
          "display_name": "Velocidad"
        },
        "csd-2022/velocity-and-the-counter-pattern": {
          "display_name": "Velocidad y patrón del contador"
        },
        "csd-2022/which-type-of-chart": {
          "content": "![](https://curriculum.code.org/media/uploads/Screenshot-2020-02-27-at-10.56.17-PM.png)"
        }
      }
    }
  }
}