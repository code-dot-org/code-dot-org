"ru":
  data:
    instructions:
      2-3 Artist 1 new_instruction: "Привет, я художник. Ты можешь написать код, чтобы
        заставить меня рисовать почти все, что угодно. Используй несколько блоков,
        чтобы заставить меня рисовать над серыми линиями на картинке. (Каждая линия
        длиной в 100 пикселей)"
      2-3 Artist 11_instruction: "Сделайте оправу для стоп-знака, нарисовав восьмиугольник,
        с длиной каждой стороны в 100 пикселей. На сколько градусов вам надо будет
        поворачивать каждый раз? (Подсказка: сколько будет 360 разделить на 8?) "
      2-3 Artist 12_instruction: "Установи блок «повторить раз» так, чтобы он создавал
        «круг» для завершения глазного яблока. Если каждое движение поворачивает вправо
        на один градус, сколько раз нужно повторить, чтобы завершить круг? 180? 360?
        500?"
      2-3 Artist 2 new_instruction: "Этот дом имеет недостроенную стену. Каждая сторона
        имеет 100, но недостроенная стена только 50. Завершите эту стену. "
      2-3 Artist 2_instruction: "У этого дома одна стена закончена только наполовину.
        Высота каждой стены 100 пикселей, но высота незаконченной стены всего лишь
        50 пикселей. Дорисуйте стену. "
      2-3 Artist 3.4_instruction: "Блок прыжок передвигает художника без рисования
        линии. Нарисуйте пунктирную линию используя блоки прыжок и рисовать."
      2-3 Artist 3_instruction: "Высота этой шляпы 100 пикселей. Нарисуйте шляпу на
        70 пикселей меньше."
      2-3 Artist 3new_instruction: "Высота красной шляпы 100 пикселей. Закончите рисование
        черной шляпы, чтобы она была на 70 пикселей короче. Ширина черной шляпы -
        50 пикселей."
      2-3 Artist 4_instruction: "Помогите мне завершить дом для этого кота."
      2-3 Artist 5_instruction: Замените этот код блоком "повторить несколько раз",
        чтобы нарисовать такой же дом, используя всего 3 блока.
      2-3 Artist 6_instruction: "Этому дому нужна крыша! Нарисуйте треугольник. Подсказка:
        длина всех трёх сторон одинаковая."
      2-3 Artist 7_instruction: "Закончите рисунок, дорисовав правую половину последнего
        окна. Размер каждого квадрата окна 25 пикселей. "
      2-3 Artist 8_instruction: "Закончите комнаты для каждого животного разделив
        прямоугольник на два одинаковых квадрата. Ширина прямоугольника 200 пикселей,
        а его высота - 100 пикселей."
      2-3 Artist 9_instruction: "Завершите воздушного змея"
      2-3 Artist Assessment 1_instruction: "Тест: Закончите рисунок последнего зуба,
        25 пикселей в ширину и 25 пикселей в высоту."
      2-3 Artist Debugging 1_instruction: "Можете ли вы сделать эту шляпу с длиной
        верха 100?"
      2-3 Artist Debugging 10_instruction: "Джойстик для движения на моём игровом
        контроллере слишком тесен. Совет: расширьте его на 10 пикселей"
      2-3 Artist Debugging 11_instruction: Помогите мне закончить мою красивую снежинку.
        Сколько раз нужно "повторить", чтобы закончить её?
      2-3 Artist Debugging 12_instruction: "Я должен добавить океанскую волну на этот
        рисунок. Вы можете мне помочь?"
      2-3 Artist Debugging 2_instruction: "Код для рисования усов, которые вы видите,
        содержит ошибки. Подсказка: длина каждого из усиков должна быть 75 пикселей.
        Исправьте этот код, чтобы нарисовать усы."
      2-3 Artist Debugging 3_instruction: "В моей лодке дырка! Вы можете это исправить,
        изменив угол линии? Подсказка: последний угол отклонён на 15 градусов."
      2-3 Artist Debugging 4_instruction: "Какой рисунок вы пытаетесь нарисовать?
        Соедините точки, используя соответствующие линии и углы."
      2-3 Artist Debugging 5_instruction: "Код для рисования ноги и ступни, которые
        вы видите, неправильный. Подсказка: нога слишком длинная, возможно нам надо
        удалить один из шагов (игра слов)"
      2-3 Artist Debugging 6_instruction: "Похоже я сижу на стуле без одной ножки.
        Измените блоки, чтобы нарисовать недостающую ножку."
      2-3 Artist Debugging 7_instruction: "Похоже, что С нарисована задом наперёд.
        Можете нарисовать её правильно?"
      2-3 Artist Debugging 8_instruction: "Моя вертушка не закончена. Сколько раз
        нужно повторить, чтобы закончить её?"
      2-3 Artist Debugging 9_instruction: "Код для стебля неправильный. Подсказка:
        ваш угол отклонён на 60 градусов"
      2-3 Artist Debugging Assessment 1_instruction: "Фигура слишком маленькая. Можете
        сделать её побольше? Подсказка: длина каждой стороны должна быть увеличена
        на 75 пикселей."
      2-3 Artist Free Play_instruction: "Свободная игра! Рисуйте всё что вам хочется."
      2-3 Artist Functions 1_instruction: "Здравствуйте. Я художник-зомби. Я люблю
        рисовать! Помогите мне нарисовать квадратные очки. Подсказка: мост между стеклами
        очков на 25 пикселей короче, чем длина квадратов."
      2-3 Artist Functions 10_instruction: "Вот две функции, одна рисует большие шестерни
        а другая - шестерни поменьше. Используйте их для рисования внутри машины!"
      2-3 Artist Functions 11.5_instruction: Вот такая же функция "нарисовать шестиугольник".
        Что произойдёт, если поворачивать только на 60 градусов при каждом выполнении
        цикла?
      2-3 Artist Functions 11_instruction: Мы переименовали функцию "нарисовать квадрат"
        в "нарисовать шестиугольник", только она всё ещё рисует квадраты! Можете изменить
        функцию "нарисовать шестиугольник", чтобы она нарисовала шестиугольник со
        сторонами в 50 пикселей, Используйте эту функцию, чтобы нарисовать шестиугольник.
      2-3 Artist Functions 12_instruction: 'Функции очень хорошо подходят, чтобы рисовать
        сложные фигуры несколько раз. Можете заполнить коробку цветами, использую
        функцию "нарисовать цветок"? (Подсказка: расстояние между цветками должно
        быть 100 пикселей)  '
      2-3 Artist Functions 13_instruction: "Мы предоставили вам 4 функции. Используйте
        их как вам хочется, чтобы нарисовать рисунки, которыми вы можете поделиться
        с друзьями. Нажмите Выполнить, чтобы увидеть пример."
      2-3 Artist Functions 2_instruction: Функции позволяют создавать новые блоки!
        Мы перенесли блоки для рисования квадрата в функцию "нарисовать квадрат".
        Можете использовать эту функцию, чтобы нарисовать очки? Расстояние между квадратами
        должно быть 75 пикселей.
      2-3 Artist Functions 3_instruction: Измените длину стороны квадрата на 115 пикселей
        в функции "нарисовать квадрат”, чтобы нарисовать большие очки. Теперь, квадраты
        должны быть на расстоянии 45 пикселей друг от друга.
      2-3 Artist Functions 4_instruction: "Используйте блок повторить, чтобы нарисовать
        эти 3 квадрата."
      2-3 Artist Functions 7_instruction: 'Используйте функцию "нарисовать дом", чтобы
        нарисовать два дома с разными параметрами. (Подсказка: размер первого дома
        составляет 100 пикселей).'
      2-3 Artist Functions 9_instruction: "Эта функция рисует снежинку. Поэкспериментируйте
        с ней, чтобы нарисовать зимний пейзаж. Это свободная игра и здесь нет головоломки.
        Приятного рисования!"
      2-3 Artist Loops 1_instruction: "Можете нарисовать шестиугольник со сторонами
        в 100 пикселей, чтобы закончить секцию? Помните, вы должны поворачивать только
        на 60 градусов!"
      2-3 Artist Loops 10_instruction: "Что произойдёт с дизайном, когда мы сделаем
        последний шаг в два раза короче?"
      2-3 Artist Loops 11_instruction: "Теперь давайте добавим *другой* цикл вокруг
        нашего творения!  Не забудьте добавить угол в конце внешнего цикла."
      2-3 Artist Loops 2_instruction: "Теперь используйте блок повторить, чтобы сделать
        из клетки оболочку."
      2-3 Artist Loops 4_instruction: "Хотите посмотреть, что произойдёт, когда мы
        повторим эту фигуру несколько раз, используя цикл?"
      2-3 Artist Loops 5_instruction: "Теперь давайте немного изменим цикл и посмотрим
        как изменится наш рисунок."
      2-3 Artist Loops 6_instruction: "Добавьте ещё один ход и поворот внутри цикла,
        и посмотрите как изменится ваш рисунок."
      2-3 Artist Loops 7_instruction: "Вы можете использовать циклы для создания любых
        многоугольников. Можете создать ромб внутри шестиугольника?"
      2-3 Artist Loops 8_instruction: "Давайте добавим оба элемента в цикл."
      2-3 Artist Loops 9_instruction: |-
        Мы собираемся использовать цикл с теми же элементами, но теперь мы несколько отдалим их друг от друга.\r
        Используйте тот же код, что и раньше, но добавьте шаг вперёд в конце внешнего цикла.
      2-3 Artist Loops New 1_instruction: "Давайте нарисуем голову этого робота! Вы
        можете нарисовать квадрат со сторонами в 100 пикселей?"
      2-3 Artist Loops New 10_instruction: "Теперь соединим кучу V вместе, рисуя их
        в цикле."
      2-3 Artist Loops New 11_instruction: "На этот раз, нарисуем это 24 раза. Добавьте
        в код поворот налево на 30 градусов и поместите это всё в блок повторить."
      2-3 Artist Loops New 12_instruction: |
        Нарисуйте ромб со сторонами в 100 пикселей.
      2-3 Artist Loops New 13_instruction: "Теперь нарисуйте ромб 3 раза, используя
        цикл."
      2-3 Artist Loops New 14_instruction: "Теперь давайте нарисуем ромб 10 раз, поворачивая
        на 90 градусов между ними."
      2-3 Artist Loops New 15_instruction: "Нарисуйте что-нибудь весёлое."
      2-3 Artist Loops New 2_instruction: Вот часть кода, который вы использовали,
        чтобы нарисовать этот квадрат. Что произойдет, если вы используете блок "повторить",
        чтобы выполнить этот код 4 раза?
      2-3 Artist Loops New 9_instruction: "Нарисуйте просто V со сторонами в 50 пикселей,
        чтобы закончить стрелку."
      2-3 Artist Match Hex Pic_instruction: "Соответствие: Помогите закончить шестиугольник."
      2-3 Artist Match Rho Pic_instruction: "Соответствие: Закончите недостающий код."
      2-3 Artist Match Sq Pic_instruction: "Соответствие: Закончите недостающий код"
      2-3 Artist Match Tri pic_instruction: "Соответствие: Заполните недостающий код."
      2-3 Artist Nested Loops 1_instruction: "Ранее вы использовали циклы для рисования
        фигур, но знаете ли вы что вы можете использовать цикл внутри другого цикла?\\r
        Зациклите весь этот блок кода 3 раза чтобы нарисовать узор."
      2-3 Artist Nested Loops 10_instruction: "Зациклите этот код 12 раз чтобы завершить
        узор."
      2-3 Artist Nested Loops 11_instruction: "Зациклите этот код 4 раза чтобы завершить
        узор и поворачивайте его на 90 градусов после завершения каждого цикла."
      2-3 Artist Nested Loops 12_instruction: "Зациклите этот код 12 раз для завершения
        завитков."
      2-3 Artist Nested Loops 2_instruction: "Теперь зациклите треугольник 6 раз.
        После каждого треугольника, Вам необходимо повернуть его на 60 градусов, прежде
        чем рисовать следующий."
      2-3 Artist Nested Loops 3_instruction: "Вам необходимо зациклить треугольник
        12 раз, чтобы нарисовать узор. Поделите число градусов в круге (360) на число
        Ваших фигур (12) чтобы узнать на сколько градусов нужно повернуть каждую фигуру."
      2-3 Artist Nested Loops 4_instruction: "Нарисуйте этот ромб 12 раз, чтобы получился
        цветок. Подсказка: нарисовать 12 ромбов похоже на то, как вы нарисовали 12
        треугольников. На сколько градусов вам нужно повернуть после каждой фигуры?"
      2-3 Artist Nested Loops 5_instruction: "Заполните окна здания c помощью вложенного
        цикла. Окна имеют 20 пикселей в длину и находятся на расстоянии 20 пикселей
        друг от друга."
      2-3 Artist Nested Loops 6_instruction: "Этот динозавр имеет 8  шипов выше своего
        хвоста; длина каждого шипа  30 пикселей .  Используйте цикл для треугольника
        8 раз, но убедитесь, что вы будете двигаться вперед после каждого шага."
      2-3 Artist Nested Loops 7_instruction: "Повтори этот треугольник 10 раз, чтобы
        нарисовать солнце. Тебе будет нужно передвигаться и поворачивать после выполнения
        каждого треугольника. Ты можешь вычислить угол поворота, разделив сумму градусов
        в круге на количество фигур (в данном случае треугольников), образующих круг."
      2-3 Artist Nested Loops 8_instruction: "А теперь добавим немного зелени на нашей
        картинке. \nРазместите каждый пучок травы на расстоянии 50 пикселей друг от
        друга.\n"
      2-3 Artist Nested Loops 9_instruction: "Завершаем картину, добавив цветок. Повтори
        алмаз 12 раз, чтобы нарисовать цветок."
      2-3 Artist Nested Loops Free Play_instruction: "Играйте бесплатно, рисуйте что-нибудь
        интересное с помощью вложенных циклов."
      2-3 Bee Conditionals 1_instruction: "Привет! Я пчёлка. Помоги мне добыть нектар
        из цветка."
      2-3 Bee Conditionals 10_instruction: |
        Фиолетовые цветки могут иметь 1 либо 0
        нектара. Будьте осторожны, не собирайте фиолетовые цветы, у которых
        нет нектара.\r
      2-3 Bee Conditionals 11_instruction: "Собирайте нектар с цветков, у которых
        он есть."
      2-3 Bee Conditionals 12_instruction: "Используйте цикл,чтобы проверить и собрать
        нектар со всех цветков."
      2-3 Bee Conditionals 13_instruction: "Соберите нектар и приготовьте мед. Подсказка:\nчто
        произойдет, если вы используете условие \"если нектар\" для красного цветка?
        \nСможете сделать это, используя цикл?\n"
      2-3 Bee Conditionals 14_instruction: "Соберите нектар и приготовьте мед. Будьте
        осторожны, не собирайте нектар с фиолетовых цветков, у которых нет нектара."
      2-3 Bee Conditionals 15_instruction: "Собери нектар со всех четырёх цветков."
      2-3 Bee Conditionals 2_instruction: "Здравствуйте, я Пчелка! Помогите мне собрать
        нектар со всех цветков. Используйте цикл."
      2-3 Bee Conditionals 3_instruction: "Помогите мне собрать нектар со всех цветков
        и приготовить мед. Используйте цикл."
      2-3 Bee Conditionals 4_instruction: "Помогите мне собрать нектар со всех цветков
        и приготовить мед."
      2-3 Bee Conditionals 5_instruction: Фиолетовые цветки могут иметь 1 нектар,
        либо 0, но Вы не знаете, какой именно! Будьте осторожны, не собирайте нектар
        с фиолетовых цветков, у которых его нет. Проверьте, равен ли нектар 1, используя
        блок "Если".
      2-3 Bee Conditionals 6_instruction: Проверьте все цветки на наличие нектара,
        используя блок "если".
      2-3 Bee Conditionals 7_instruction: "Соберите нектар с каждого цветка, если
        цветок имеет нектар."
      2-3 Bee Conditionals 8_instruction: |
        На этом поле есть красные и фиолетовые цветки.
        У красным цветков известно количество нектара, но у фиолетовых нет.
        Соберите весь нектар.
      2-3 Bee Conditionals 9_instruction: "Соберите весь нектар со всех цветков."
      2-3 Bee Conditionals Assessment 1_instruction: "Оценка: Собери весь нектар.
        Осторожно, не собирай нектар с фиолетового цветка, если его там нет."
      2-3 Bee Debugging 1_instruction: "Эти блоки не дают мне покоя. Исправьте ошибку(и),
        чтобы собрать весь нектар и сделать мед."
      2-3 Bee Debugging 10_instruction: "Эти блоки не дают мне покоя. Исправьте ошибку(и),
        чтобы собрать весь нектар и сделать мед."
      2-3 Bee Debugging 2_instruction: "Эти блоки не дают мне покоя. Исправьте ошибку(и),
        чтобы собрать весь нектар и сделать мед."
      2-3 Bee Debugging 3_instruction: "Эти блоки не дают мне покоя. Исправьте ошибку(и),
        чтобы собрать весь нектар и сделать мед."
      2-3 Bee Debugging 4_instruction: "Эти блоки не дают мне покоя. Исправьте ошибку(и),
        чтобы собрать весь нектар и сделать мед."
      2-3 Bee Debugging 5_instruction: "Эти блоки не дают мне покоя. Исправьте ошибку(и),
        чтобы собрать весь нектар и сделать мед. Теперь можно использовать запуск
        и шаг."
      2-3 Bee Debugging 6_instruction: "Эти блоки не дают мне покоя. Исправьте ошибку(и),
        чтобы собрать весь нектар и сделать мед. "
      2-3 Bee Debugging 7_instruction: "Эти блоки не дают мне покоя. Исправьте ошибку(и),
        чтобы собрать весь нектар и сделать мед."
      2-3 Bee Debugging 8_instruction: "Эти блоки не дают мне покоя. Исправьте ошибку(и),
        чтобы собрать весь нектар и сделать мед."
      2-3 Bee Debugging 9_instruction: "Эти блоки не дают мне покоя. Исправьте ошибку(и),
        чтобы собрать весь нектар и сделать мед."
      2-3 Bee Debugging Assessment 1_instruction: "Оценка: Эти блоки не дают мне покоя.
        Исправьте ошибку(и), чтобы собрать весь нектар и сделать мед."
      2-3 Bee Functions 1_instruction: Функции - это блоки с кодом, который выполняет
        задачу. Используй функцию "получить 2 нектара", чтобы собрать нектар с каждого
        цветка
      2-3 Bee Functions 10_instruction: "Фиолетовые цветы могут содержать 1 или 0
        единиц нектара. Создай функцию, которая будет собирать нектар только с тех
        фиолетовых цветов, в которых есть нектар."
      2-3 Bee Functions 2_instruction: Функции - это блоки с кодом, которые выполняют
        задание. Используй функцию "получить 5", чтобы получить 5 нектаров сразу.
        Убедись в том, что ты используешь циклы, чтобы оптимизировать количество блоков.
      2-3 Bee Functions 3_instruction: "Соберите весь нектар со всех цветков."
      2-3 Bee Functions 4_instruction: С функцией "двигаться и собирать нектар" пчела
        поворачивает, собирает нектар и возвращается в начало. Используй функцию,
        чтобы собрать весь нектар.
      2-3 Bee Functions 5_instruction: "Сейчас цветы содержат больше нектара. \nОтредактируй
        данную функцию, которая собирает 4 нектара, и используй ее для получения всего
        нектара с цветов.\n"
      2-3 Bee Functions 6_instruction: "Теперь используй ту же функцию для сбора нектара
        с трех цветов."
      2-3 Bee Functions 7_instruction: "Цветы теперь находятся дальше. Измени данную
        функцию, чтобы собрать весь нектар с цветов."
      2-3 Bee Functions 8_instruction: "Создай собственную функцию, которая позволяет
        собирать нектар с 7 цветков, двигаться вперед и делать 7 сот меда. Используй
        функцию, чтобы собрать нектар с каждого цветка и сделать мед в каждой соте."
      2-3 Bee Functions 9_instruction: "Создай свою функцию, чтобы отправить пчелу
        на тропинку, получить нектар, сделать мед и вернуть пчелу в верхнее положения
        на тропинке."
      2-3 Bee Functions Assessment 1_instruction: "Оценка: Используй данную функцию,
        чтобы собрать нектар с каждого цветка."
      2-3 Bee Functions Assessment 2_instruction: "Оценка: Создай функцию, чтобы сделать
        3 соты меда одновременно."
      2-3 Bee Loops 1_instruction: "Каждый цветок содержит одну единицу нектара. Собери
        нектар с каждого цветка. "
      2-3 Bee Loops 10_instruction: "Можешь ли ты использовать цикл с условием внутри
        двух других циклов, чтобы собрать весь нектар?"
      2-3 Bee Loops 11_instruction: "Используй цикл с условием, чтобы собрать весь
        нектар с цветов на этом поле."
      2-3 Bee Loops 12_instruction: "Используй цикл с условием, чтобы собрать весь
        нектар с цветов на этом поле."
      2-3 Bee Loops 13_instruction: "Оценка: Используйте блок повтора, чтобы собрать
        весь нектар."
      2-3 Bee Loops 1A_instruction: "Привет, я пчелка. Поможешь мне собрать нектар
        с этих цветов? "
      2-3 Bee Loops 2_instruction: "Используй цикл, чтобы собрать нектар и сделать
        мед."
      2-3 Bee Loops 2A_instruction: "Можешь ли ты упростить задание с помощью цикла?"
      2-3 Bee Loops 3_instruction: "Собери нектар с каждого цветка и сделай мед в
        каждой соте."
      2-3 Bee Loops 3A_instruction: "Можешь использовать цикл для сбора всего нектара?"
      2-3 Bee Loops 3B_instruction: "Теперь используй новый блок с повторителем чтобы
        собрать весь нектар и заполнить медом все соты."
      2-3 Bee Loops 4_instruction: "Используй цикл, схожий с последним заданием, но
        используй поворот (перед ним)"
      2-3 Bee Loops 4A_instruction: |
        Что будет, если использовать цикл 3 раза?
        Не забудь сделать мед в конце!
      2-3 Bee Loops 5_instruction: "Используй цикл, чтобы спуститься вниз по ступенькам
        и собрать нектар."
      2-3 Bee Loops 6_instruction: "Используй цикл, чтобы собрать нектар с каждого
        цветка и сделать мед в каждой соте."
      2-3 Bee Loops 7_instruction: "Поместите эти блоки в цикл, чтобы собрать нектар
        с каждого цветка."
      2-3 Bee Loops 8_instruction: Эти фиолетовые цветы содержат неизвестное количество
        нектара. Используй цикл "есть ли нектар", чтобы собрать весь нектар. Этот
        цикл будет запускаться до тех пор, пока утверждение верно, то есть нектара
        > 0 единиц.
      2-3 Bee Loops 9_instruction: Цикл с условием проверки может исполнять то же
        действие, что и оператор "если" в цикле. Добавь цикл с условием проверки в
        этот код, чтобы выполнить то же задание.
      2-3 Bee Loops Assessment 1_instruction: "Оценка - Используй цикл с условием
        проверки, чтобы собрать весь нектар с этого цветка."
      2-3 Maze 1_instruction: 'Поможешь мне поймать озорного поросенка? Сложи вместе
        пару блоков "двигаться вперед" и нажми "Пуск". '
      2-3 Maze 10_instruction: "Проведи меня к зелёному чудищу! (Остерегайся взрывчатки)"
      2-3 Maze 11_instruction: "Подбрось меня до цветка, я голодна! Сколько раз тебе
        нужно повторить блок?"
      2-3 Maze 12 (copy 1)_instruction: 'Можешь ли ты заменить предыдущую программу
        лишь двумя блоками. (Подсказка: Создай цикл, используя блок "повторить ...
        раз")'
      2-3 Maze 12 (copy 2)_instruction: 'Можешь ли ты заменить предыдущую программу
        лишь двумя блоками. (Подсказка: Создай цикл, используя блок "повторить ...
        раз")'
      2-3 Maze 12 (old)_instruction: "Подбрось меня до поросенка, теперь используй
        блоки с повторителями!"
      2-3 Maze 12_instruction: |
        Можешь заменить эти пять блоков только двумя?
        (Подсказка: Создай цикл, используя блок "повторить ... раз")
      2-3 Maze 13 (old)_instruction: Подбрось меня до поросенка. Используй блок "Повторять,
        пока не"!
      2-3 Maze 13_instruction: "Подбрось меня до поросенка, используя только два блока."
      2-3 Maze 14 (old)_instruction: Подбрось меня до поросенка, используя блок "Повторять,
        пока не"!
      2-3 Maze 14_instruction: Подбрось меня до подсолнуха! (Где этот блок "повторить
        ... раз", когда он так нужен?)
      2-3 Maze 15 (old)_instruction: Подбрось меня до поросенка, используя блок "Повторять,
        пока не"!
      2-3 Maze 15_instruction: "Используй два цикла, чтобы добраться до поросенка,
        используя меньше блоков."
      2-3 Maze 16 (old)_instruction: Подбрось меня до поросенка, используя блок "Повторять,
        пока не"!
      2-3 Maze 16 before_instruction: "Подбросьте меня до поросенка."
      2-3 Maze 16_instruction: "Подбросьте меня до подсолнуха. Зацикли последовательность!"
      2-3 Maze 2_instruction: "Этот поросенок треплет мои перья. Помоги мне до него
        добраться!"
      2-3 Maze 3_instruction: "Проследи путь и направь меня в глупого поросенка. Избегай
        TNT, иначе полетят перья!"
      2-3 Maze 4_instruction: "Проведи меня к зелёному чудищу! (Остерегайся взрывчатки)"
      2-3 Maze 5_instruction: "Проведи меня к зелёному чудищу! (Остерегайся взрывчатки)"
      2-3 Maze 6_instruction: "Сохраняй спокойствие и помоги мне найти поросенка.
        Иначе я могу рассердиться!"
      2-3 Maze 7_instruction: "Проведи меня к зелёному чудищу! (Остерегайся взрывчатки)"
      2-3 Maze 8_instruction: "Подбрось меня до поросенка!"
      2-3 Maze 9_instruction: "Проведи меня к зелёному чудищу! (Остерегайся взрывчатки)"
      2-3 Maze Loops 1_instruction: "Можешь доставить меня к свинке, используя 5 блоков?"
      2-3 Maze Loops 17_instruction: "Подбрось меня до подсолнуха!"
      2-3 Maze Loops 18_instruction: "Подбрось меня до подсолнуха!"
      2-3 Maze Loops 19_instruction: "Подбрось меня до подсолнуха!"
      2-3 Maze Loops 20_instruction: "Подбрось меня до подсолнуха!"
      2-3 Maze Loops 21_instruction: "Подбрось меня до подсолнуха!"
      2-3 Maze Loops Assessment 1_instruction: "Оценка: Подбрось меня до подсолнуха,
        используя только 5 блоков! "
      2-3 Maze sq1_instruction: |
        This pig is ruffling my feathers.  Help me find
        him!
      2-3 Maze sq10_instruction: "Подбрось меня до поросенка! Какие блоки нужно повторить?"
      2-3 Maze sq10v2_instruction: "Подбрось меня до поросенка! Какие блоки нужно
        повторить?"
      2-3 maze sq11_instruction: "Подбрось меня до поросенка! Какие блоки нужно повторить?"
      2-3 maze sq12_instruction: Можешь заменить предыдущее решение циклом, используя
        блок "повторить...раз"?
      2-3 maze sq13_instruction: Дорогой человек. Я зомби. Должен...добраться...до
        подсолнуха. Создай цикл с блоком "повторять до".
      2-3 maze sq14_instruction: "Можешь добраться до подсолнуха, используя только
        четыре блока?"
      2-3 maze sq15_instruction: "Можешь добраться до подсолнуха, используя только
        пять блоков?"
      2-3 maze sq16_instruction: "Окей, это задание похоже на предыдущее, но есть
        маленькое отличие. Можешь выполнить его, используя только пять блоков?"
      2-3 Maze sq2_instruction: "Проложи путь и приведи меня к глупому поросенку.
        Избегай TNT, иначе перья полетят!"
      2-3 Maze sq3_instruction: "Проведи меня к зелёному чудищу! (Остерегайся взрывчатки)"
      2-3 Maze sq4_instruction: "Сохраняй спокойствие и помоги мне найти поросенка.
        Иначе я могу рассердиться!"
      2-3 Maze sq5_instruction: "Подбрось меня до поросенка! Сколько раз тебе нужно
        повторять блок?"
      2-3 Maze sq6_instruction: 'Можешь заменить предыдущее решение только двумя блоками?
        (Подсказка: Создай цикл, используя блок "повторить ... раз")'
      2-3 Maze sq7_instruction: "Подбрось меня к зеленому самозванцу, используя только
        три блока."
      2-3 Maze sq8_instruction: Подбрось меня к поросенку! (Где же тот блок "повтори
        ... раз", когда он так нужен?)
      2-3 Maze sq9_instruction: "Чтобы добраться до поросенка, создай цикл, используя
        минимальное количество блоков."
      2-3_instruction: |
        Purple flowers may have either 1 or 0 nectar. Be careful
        not to collect nectar from a purple flower if it doesn't have any.
      2-3level1_instruction: "Помоги птице поймать вредного поросенка, продвигая ее
        вперед"
      4-5 Artist 1_instruction: "Помоги мне дорисовать мою коробку. (длина каждой
        стороны - 300 пикселей) "
      4-5 Artist 10_instruction: Нажми "Пуск" для проверки кода. Затем повтори код
        столько раз, сколько нужно для завершения рисования. Цвета будут различаться
        каждый раз.
      4-5 Artist 11_instruction: "Нарисуй зеленые линии. Длина линий - 300 точек,
        расстояние между ними - 15 точек."
      4-5 Artist 2_instruction: "Сможешь поместить код в цикл так, чтобы получился
        квадрат?"
      4-5 Artist 3.5_instruction: Попробуй догадаться, что произойдет при запуске
        кода (или нажми "Выполнить", чтобы узнать). Повтори код достаточное число
        раз, чтобы завершить рисунок. Цвета линий почти всегда будут разными.
      4-5 Artist 3_instruction: "Периметр прямоугольной клумбы - 600 точек. \nДлина
        большей стороны - 200 точек. Нарисуй прямоугольник.\n"
      4-5 Artist 4_instruction: "Сколько градусов в окружности? Зацикли блок кода,
        чтобы нарисовать разноцветный круг."
      4-5 Artist 5_instruction: "Какой угол нужно использовать?"
      4-5 Artist 6_instruction: "Углы равностороннего треугольника равны 60 градусам,
        длина стороны - 200 точек. Дорисуй треугольник."
      4-5 Artist 7_instruction: "Углы этого прямоугольного треугольника равны 30,
        60 и 90 градусам. Гипотенуза в два раза длиннее высоты, равной 100 точкам.
        Дорисуй треугольник."
      4-5 Artist 8_instruction: "Средняя линия футбольного поля перпендикулярна боковым
        линиям. Периметр этого поля равен 800 точкам, его длина - 240. Чему равняется
        ширина поля? Нарисуй границы и среднюю линию поля."
      4-5 Artist 9_instruction: "Нарисуй вторую половинку так, чтобы рисунок получился
        симметричным. Треугольники имеют равные стороны длинной в 50 точек."
      4-5 Artist Assessment 1_instruction: "Тест: используй цикл, чтобы нарисовать
        равносторонний треугольник. Длина сторон - 300."
      4-5 Artist For Loops 1_instruction: "Введи числа от 1 до 10 в широкие блоки
        и запустите код."
      4-5 Artist For Loops 11_instruction: Заполни блок "для" так, чтобы его значения
        были 0, 20, 40, 60, 80... 200.
      4-5 Artist For Loops 12_instruction: 'Что произойдет, если ты введешь номера
        блоков "от" и "до" в обратном порядке? Заполни блок "для", чтоб его значения
        были 200, 160, 140, 120...0. '
      4-5 Artist For Loops 13_instruction: "Этот проект начат без цикла «для» и занимает
        слишком много блоков!  Используйте блок «для», чтобы завершить спираль.  Подсказка:
        \ длина последней строки составляет 250 пикселей."
      4-5 Artist For Loops 14_instruction: 'Кто-то создал код, но потом понял, что
        его можно укоротить! Используйте блок "повторить" для замены блоков и завершения
        треугольной спирали. (Подсказка: длина последней строки составляет 300 пикселей).'
      4-5 Artist For Loops 15_instruction: 'Кто-то создал код, но затем понял, что
        его можно укоротить! Используй блок "повторить", чтобы заменить блоки и завершить
        шестиугольную спираль. (Подсказка: длина последней строки составляет 200 пикселей).'
      4-5 Artist For Loops 2_instruction: Это блок "Повторить". Вместо того, чтобы
        вводить 1, 2, 3..., 10, блок "повторить" может повторять всё, что внутри него
        и считать числа за вас. Введите 10 в окно "до" в блоке "повторить".
      4-5 Artist For Loops 3_instruction: Сможем посчитать от 1 до 50? Отредактируйте
        блок "повторить".
      4-5 Artist For Loops 4_instruction: Заполните блок "повторить", чтобы посчитать
        от 1 до 10 по 1.
      4-5 Artist For Loops 6_instruction: Нарисуйте квадраты со сторонами 50, 60,
        70, 80 и 90 пикселей. Вам необходимо воспользоваться блоком "Нарисовать квадрат"
        5 раз.
      4-5 Artist For Loops 7_instruction: 'Нарисуй такие же квадраты, но используй
        при этом блок "цикл по" для того, чтобы изменить их размеры. Вставь блок "счетчик"
        в функцию "нарисуй квадрат". Подсказка: его можно найти в категории "Переменные".'
      4-5 Artist For Loops 8_instruction: Можешь ли завершить программу, разместив
        блоки внутри цикла со счетчиком, который считает от 10 до 200 с шагом 10?
        Цикл со счетчиком ты можешь найти в категории "Циклы".
      4-5 Artist For Loops 9_instruction: "Эти круги имеют следующие размеры: 5, 10,
        15, 20, 25, 30 и 35. Нарисуй их, используя цикл со счетчиком."
      4-5 Artist Free Draw 1_instruction: "Свободная тема! Рисуй все, что захочется."
      4-5 Artist Functions 1_instruction: "Используйте цикл повторить, чтоб нарисовать
        треугольник."
      4-5 Artist Functions 10a_instruction: Поместите эту программу в процедуру "нарисовать
        снежинку" и замените число 50 параметром "размер". Процедура уже задана таким
        образом, чтобы нарисовать снежинку размером 100 точек.
      4-5 Artist Functions 10b_instruction: 'Используйте процедуру "нарисовать снежинку"
        для того, чтобы создать снежинки разных размеров. Подсказка: первая снежинка
        имеет 25 точек в длину, а каждая последующая снежинка в два раза больше предыдущей.'
      4-5 Artist Functions 11_instruction: 'Процедура "нарисовать шестиугольник" использует
        процедуру "нарисовать треугольник". Заверши процедуру рисования шестиугольника.
        (Подсказка: у шестиугольника 6 сторон, каждая длиной 100 точек)'
      4-5 Artist Functions 12_instruction: 'Заверши процедуру "нарисовать волны".
        Каждая волна состоит из одной верхней и одной нижней волны. Подсказка: нарисуй
        5 синих волн.'
      4-5 Artist Functions 13 Free play_instruction: "Вот некоторые функции для рисования
        планет, звезд, ракет и роботов. Используйте их любым способом, вам нравится,
        чтобы сделать фотографии, которыми вы можете поделиться со своими друзьями."
      4-5 Artist Functions 14 Free play_instruction: Здесь мы предоставили Вам некоторые
        функции. Используйте их так, как Вам удобно, для создания фотографии внутри
        одной или нескольких петель. Вы можете поделиться ими со своими друзьями.
        Нажмите "Запустить", чтобы увидеть пример.
      4-5 Artist Functions 15 Assessment_instruction: 'Задание: Используйте функцию
        "Нарисовать квадрат" для создания квадратов. Стороны квадратов: 50, 100 и
        150 пикселей.'
      4-5 Artist Functions 2a_instruction: Теперь объедините эти блоки в новую функцию
        под названием "Рисовать маленький треугольник" и воспользуйтесь ею.
      4-5 Artist Functions 2b_instruction: "Теперь создайте функцию «Нарисуйте маленький
        треугольник» с использованием предоставленных блоков."
      4-5 Artist Functions 3_instruction: Теперь создайте функции "Рисовать средний
        треугольник" и "Рисовать большой треугольник".Функция "Рисовать маленький
        треугольник" уже создана для Вас. Треугольники имеют стороны длинной 50 (малый),
        100 (средний) и 150 (большой) пикселей.
      4-5 Artist Functions 4_instruction: Эта новая функция "нарисовать треугольник"
        содержит параметр и может выполнять действия предыдущих трех функций. Нарисуйте
        такие же треугольники с помощью новой функции.
      4-5 Artist Functions 5_instruction: "Вы можете изменить функцию «Нарисуйте треугольник»
        в функцию «нарисуйте квадрат», чтобы изменить рисунок?"
      4-5 Artist Functions 6_instruction: 'Используйте функции "Рисовать квадрат"
        и "Рисовать треугольник", чтобы нарисовать дом. (Подсказка: сторона квадрата
        200 пикселей)'
      4-5 Artist Functions 6b_instruction: Используйте квадраты, треугольники и другие
        функции для того, чтобы нарисовать дом. Затем объедините их  в функцию "Нарисовать
        дом" и воспользуйтесь ею.
      4-5 Artist Functions 7_instruction: Используйте  функцию "Нарисовать дом", чтобы
        нарисовать дома высотой 100 и 50 пикселей. Расстояние между домами 50 пикселей.
      4-5 Artist Functions 8_instruction: Функция "Нарисовать цветок" имеет параметр,
        позволяющий установить высоту стебля. Установите его на 200 пикселей и посмотрите,
        что произойдёт.
      4-5 Artist Functions 9_instruction: "Нарисуйте 3 этих цветка. Высота первого
        100 пикселей, каждый следующий больще предыдущего на 50 пикселей. Расстояние
        между цветами 100 пикселей."
      4-5 Artist Patterns 1_instruction: "Можете нарисовать этот квадрат с помощью
        цикла? Каждая сторона составляет 20 пикселей."
      4-5 Artist Patterns 10_instruction: "Этот код рисует два ряда шестиугольников
        - повторите цикл 4 раза, чтобы нарисовать соты. Подсказка: Вам понадобится
        вернуться на 120 пикселей назад от последнего цикла, чтобы рисунок не выступал
        за пределы экрана."
      4-5 Artist Patterns 11_instruction: "Сколько раз Вам потребуется повторить цикл,
        чтобы нарисовать половину круга? Подсказка: если в круге 360 градусов и каждый
        цикл добавляет 3 градуса, сколько раз Вам понадобится повторить, чтобы получить
        полный круг?"
      4-5 Artist Patterns 12_instruction: "Если вы скопируете этот цикл, и повернете
        в нём налево, вместо того чтобы повернуть направо, что случится? Можешь ли
        ты повторить это, и нарисовать эту волну?"
      4-5 Artist Patterns 13_instruction: "Теперь давайте зациклим все это четыре
        раза, чтобы сделать рамку для картинки. Следите за углами - нельзя просто
        повернуть на 90 градусов! Если зациклить поворот на 3 градуса 60 раз, получается
        полукруг, какой из этих блоков кода  сделает четверть круга для углов?"
      4-5 Artist Patterns 2_instruction: "Если вы посместите ваш цикл с кругом внутрь
        другого цикла, то получится так называемый вложенный цикл. Что нужно добавить
        во внешний цикл, чтобы получить 15 кругов один за другим?"
      4-5 Artist Patterns 3_instruction: "Теперь давайте перейдем на следующий уровень!
        Мы вложили целый блок кода в другой цикл, теперь нужно вернуть художника,
        чтобы нарисовать следующий ряд. Какой из этих блоков можно разместить в конце
        внешнего цикла, чтобы нарисовать всю сетку?"
      4-5 Artist Patterns 4_instruction: "Грани этого алмаза 50 пикселей, углы по
        120 и 60 градусов. Чтобы нарисовать его, используйте цикл."
      4-5 Artist Patterns 5.5_instruction: "Сколько Вам нужно повторять этот блок,
        чтобы нарисовать полную сетку алмазов?"
      4-5 Artist Patterns 5_instruction: 'Давайте повторим это, чтобы создать строку
        из 6 бриллиантов. Обратите внимание: мы изменили код "повторить" на 3 раза
        вместо 2. Как Вы думаете, почему?'
      4-5 Artist Patterns 6_instruction: "Сколько раз Вам нужно повторить этот блок,
        чтобы нарисовать полную сетку алмазов?"
      4-5 Artist Patterns 7_instruction: "Давайте изменим код последней головоломки
        так, чтобы усложнить узор. Обратите внимание, как алмазы частично перекрывают
        друг друга. Попробуйте поменять первую команду «перейти назад» со 100 на 50
        (т.е. уменьшить прыжок наполовину) - теперь как далеко должен «перейти назад»
        художник во время второго прыжка?"
      4-5 Artist Patterns 8_instruction: "Используйте цикл, чтобы нарисовать шестиугольник
        со стороной 40 пикселей и углами в 60 градусов."
      4-5 Artist Patterns 9.5_instruction: "Зациклите этот участок программы, чтобы
        нарисовать два ряда шестиугольников. Обратите внимание на то, как второй ряд
        сдвинут вправо."
      4-5 Artist Patterns 9_instruction: "Теперь повторите этот участок 3 раза, чтобы
        нарисовать полный ряд. Подсказка: расстояние между крайними точками каждого
        шестиугольника равно 80-ти пикселам."
      4-5 Artist Patterns Free Play_instruction: "Свободная игра: попробуйте создать
        свой собственный узор!"
      4-5 Bee Conditionals - FC Test_instruction: "Пчелка хочет нектара прямо сейчас.
        Не все объекты являются цветами, так что необходимо проверить КАЖДОЕ ОБЛАКО,
        чтобы узнать скрывает ли он цветок. И если это так, то вы получите долгожданный
        нектар."
      4-5 Bee Conditionals 1 (copy 1)_instruction: |
        The bee can't tell if this is
        a flower or a honeycomb. Gather nectar only from flowers, but first check
        if it is a flower or a honeycomb.
      4-5 Bee Conditionals 1_instruction: "Пчелы не знают, что они нашли, поэтому
        сначала проверьте, цветок это или пчелиные соты. Собирайте нектар только с
        цветов."
      4-5 Bee Conditionals 2 (copy 1)_instruction: |
        The bee only wants nectar right
        now. Remember, not all objects are flowers, so check to gather nectar only
        at flowers.
      4-5 Bee Conditionals 2_instruction: "Пчела хочет только нектар сейчас. Помните,
        не все объекты являются цветами, поэтому проверьте, чтобы собирать нектар
        только с цветов."
      4-5 Bee Conditionals 3_instruction: "А теперь пчела хочет сделать мед. Проверяйте
        чтобы делать мед только в сотах."
      4-5 Bee Conditionals 4 (copy 1)_instruction: |
        The unknown object is either
        a flower or a honeycomb. Use the if/else block to collect nectar if it is
        a flower, else to make honey (because it is a honeycomb).
      4-5 Bee Conditionals 4_instruction: "Неизвестный объект - это любой цветок или
        пчелиная сота. Используйте оператор if/else, чтобы собирать нектар, если это
        цветок и чтобы делать мед, если это сота."
      4-5 Bee Conditionals 5_instruction: "С равной вероятностью под этими облаками
        могут быть цветы или соты. Используйте оператор if/else, чтобы собирать нектар,
        если это цветок и чтобы делать мед, если это сота."
      4-5 Bee Conditionals 6 (copy 1)_instruction: |
        This purple flower may have either
        3, 2, or 1 nectar. Here an if-else block is combined with another if-else
        block to create an if, else-if, else block. Complete the solution to collect
        the unknown amount of nectar.
      4-5 Bee Conditionals 6_instruction: "У этого фиолетового цветка может быть 3,
        2 или 1 нектар. Здесь блок если-иначе сочетается с другим блоком если-иначе
        для создания блока если, иначе если, иначе. Полное решение  - это собрать
        неизвестное количество нектара."
      4-5 Bee Conditionals 7_instruction: "Помните, что фиолетовый цветы могут иметь
        3, 2 или 1 нектар. Закончите функцию «Проверка фиолетового цветка» и используйте
        её, чтобы собрать все нектары на цветах."
      4-5 Bee Conditionals 8_instruction: "Напишите функцию внутри блока, под названием
        «проверить цветок сделать мед». Ваша функция должна проверить сколько нектара
        у фиолетового цветка и собрать его, походить вперед и затем сделать мед."
      4-5 Bee Conditionals Assessment 1_instruction: "Проверка: Это неправильный код.
        Доделайте функцию «получить нектар или сделать мед», а затем вызовите её для
        сбора нектара и меда. Помните, что фиолетовые цветы могут иметь 3, 2 или 1
        нектар."
      4-5 Bee Debugging 1_instruction: "Эти блоки не дают мне покоя. Можете их исправить?"
      4-5 Bee Debugging 10_instruction: "Найдите ошибки и исправьте их."
      4-5 Bee Debugging 11_instruction: "Это считается верно?"
      4-5 Bee Debugging 2_instruction: "Помогите пчеле собрать нектар и сделать мёд."
      4-5 Bee Debugging 3_instruction: "Найдите ошибки и исправьте их."
      4-5 Bee Debugging 4_instruction: "Эти блоки не работают. Какая закономерность?"
      4-5 Bee Debugging 5_instruction: "Что-то пошло не так..."
      4-5 Bee Debugging 6_instruction: "Фиолетовый цветок имеет неизвестное количество
        нектара. Исправьте блоки, чтобы получить весь нектар из цветка."
      4-5 Bee Debugging 7_instruction: "В функции что-то отсутствует..."
      4-5 Bee Debugging 8_instruction: "Эта функция правильная, но она не используются
        надлежащим образом."
      4-5 Bee Debugging 9_instruction: "Почему пчела делает недостаточно мёда?"
      4-5 Bee Debugging Assessment 1_instruction: "Оценка: Исправьте код."
      4-5 Bee Nested Loops 1_instruction: "Используйте цикл, чтобы собрать весь нектар."
      4-5 Bee Nested Loops 2_instruction: "Собери весь нектар с каждого цветка. Используй
        вложенный цикл. "
      4-5 Bee Nested Loops 3_instruction: "Соберите весь нектар, переместив стартовый
        код внутрь вложенного цикла."
      4-5 Bee Nested Loops 4_instruction: "Соберите  все нектар из каждого цветка
        и сделайте мед в каждой соте. Используйте вложенные циклы. "
      4-5 Bee Nested Loops 5_instruction: "Соберите весь нектар путем создания вложенного
        цикла."
      4-5 Bee Nested Loops 6_instruction: "Соберите нектар."
      4-5 Bee Nested Loops 7_instruction: "Поместите этот цикл внутрь другого цикла
        для создания вложенного цикла и соберите весь нектар с цветов."
      4-5 Bee Nested Loops 8_instruction: "Соберите весь нектар с цветов используя
        цикл пока. Замените внутренний блок повторять какое-то количество раз блоком
        пока. "
      4-5 Bee Nested Loops 9_instruction: Собери весь нектар из этих цветов путем
        вложения цикла "Пока" внутрь цикла "Повторить".
      4-5 Bee Nested Loops Assessment 1_instruction: "Подсказка: собери весь нектар
        и сделай из него мед при помощи циклов."
      4-5 Bee Nested Loops Rows_instruction: "Собери нектар из рядов с цветами. Используй
        вложенные циклы."
      4-5 Maze 1 (copy 1)_instruction: "Уважаемый человек. Моя - зомби. Моя необходимо......
        попасть к подсолнечник."
      4-5 Maze 1_instruction: "Уважаемый человек. Моя - зомби. Моя необходимо......
        попасть к подсолнечник."
      4-5 Maze 10_instruction: "Можешь добраться до подсолнуха, используя только четыре
        блока?"
      4-5 Maze 11_instruction: "Можешь добраться до подсолнуха, используя только шесть
        блоков?"
      4-5 Maze 12_instruction: "Ок, на этот раз немного по другому. Можешь сделать
        это за шесть блоков?"
      4-5 Maze 13_instruction: "Подбрось меня до поросенка!"
      4-5 Maze 14_instruction: Доставь меня к свинке! Используй блок "Повторять до".
      4-5 Maze 2 (copy 1)_instruction: "Доставь зомби к подсолнечнику, но избегай
        зубастиков!"
      4-5 Maze 2_instruction: "Доставь зомби к подсолнечнику, но избегай зубастиков!"
      4-5 Maze 3 (copy 1)_instruction: "Нужно... добраться... до подсолнечника."
      4-5 Maze 3_instruction: "Нужно... добраться... до подсолнечника."
      4-5 Maze 4 (copy 1)_instruction: Попробуйте использовать блок "repeat", чтобы
        использовать меньше блоков...
      4-5 Maze 4_instruction: Попробуйте использовать блок "repeat", чтобы использовать
        меньше блоков...
      4-5 Maze 5 (copy 1)_instruction: "Можете решить эту задачу используя наименьшее
        возможное число блоков?"
      4-5 Maze 5_instruction: "Можете решить эту задачу, используя наименьшее возможное
        число блоков?"
      4-5 Maze 6 (copy 1)_instruction: "Можете решить эту задачу используя наименьшее
        возможное число блоков?"
      4-5 Maze 6_instruction: "Можете решить эту задачу, используя наименьшее возможное
        число блоков?"
      4-5 Maze 7_instruction: "Уважаемый человек. Моя - зомби. Моя необходимо......
        попасть к подсолнечник."
      4-5 Maze 8_instruction: Используй блок "Повторить" чтобы доставить зомби к подсолнечнику.
        (Избегай зубастиков!)
      4-5 Maze 9_instruction: Создай цикл с помощью блока "Повторять до".
      4-5 Maze Assessment 1_instruction: "Подсказка: Доберись к подсолнечнику."
      4-5 Maze Conditionals 1_instruction: Используй блок "Повторять до" чтобы доставить
        зомби к подсолнечнику.
      4-5 Maze Conditionals 10_instruction: "Можешь добавить всего 3 блока чтобы помочь
        мне пройти более сложный лабиринт? Если сделаешь все правильно, я смогу ходить
        по любой извилистой дороге любой длины."
      4-5 Maze Conditionals 2_instruction: Используй блок "Повторять до" чтобы доставить
        зомби к подсолнечнику.
      4-5 Maze Conditionals 3_instruction: 'Используй блок "Если" чтобы я решил когда
        поворачивать. Подсказка: тебе понадобится еще один блок, но запомни как мы
        его поставили, чтобы в следующуй раз ты мог сделать это сам.'
      4-5 Maze Conditionals 4_instruction: Ок, тут все как в предыдущей задаче, но
        тебе нужно вспомнить как ты использовал блоки "Если" и "Повторить".
      4-5 Maze Conditionals 5_instruction: Моя хотеть подсолнух! Используй блок "Если"
        чтобы я добрался к нему с меньшим числом блоков.
      4-5 Maze Conditionals 6_instruction: Моя хотеть подсолнух! Используй блок "Если"
        чтобы я добрался к нему с меньшим числом блоков.
      4-5 Maze Conditionals 7_instruction: "Хорошо, давай ещё раз для тренировки -
        это задание не слишком отличается, но остерегайся зубастиков!"
      4-5 Maze Conditionals 8_instruction: Блоки "если/иначе" проверяют условие, потом
        выполняют одно действие ИЛИ другое. Чтобы довести меня до подсолнуха, попробуй
        использовать этот новый блок.
      4-5 Maze Conditionals 9_instruction: "Еще одно задание для блока «Если-Иначе».
        Сможешь сделать правильно с первой попытки?"
      4-5 Maze Conditionals Assessment 1_instruction: "Используй блоки «Повторять
        до» и «Если-иначе», чтобы доставить меня к подсолнечнику за наименьшее количество
        блоков."
      4-5 Nested Loops 1_instruction: "Заверши код, чтобы нарисовать эти треугольники.
        Один уже готов. Подсказка: раздели 360 градусов на 3, чтобы узнать угол поворота."
      4-5 Nested Loops 10_instruction: "Дорисуй последний ряд звёзд на этом флаге,
        поместив эти блоку внутрь цикла. Звезды на расстоянии 50 пикселей друг от
        друга, но не забудь что ширина звезды 30 пикселей."
      4-5 Nested Loops 11_instruction: "Можешь нарисовать эти 10 квадратов тротуара
        с помощью вложенного цикла? Каждый квадрат шириной 30 пикселей."
      4-5 Nested Loops 12_instruction: "Можете нарисовать 36 этих треугольников, используя
        вложенный цикл?"
      4-5 Nested Loops 2_instruction: "Теперь вложи этот цикл внутрь другого цикла
        чтобы нарисовать 10 треугольников. Это называется вложенный цикл. Подсказка:
        вместе 10 треугольников образуют 360 градусов."
      4-5 Nested Loops 3_instruction: "Чтобы нарисовать солнце вложи этот код в цикл.
        Это называется вложенный цикл."
      4-5 Nested Loops 5_instruction: "Сделайте цикл из данного кода, чтобы создать
        ветряную мельницу."
      4-5 Nested Loops 6_instruction: "Можешь нарисовать шестиугольник, сделав цикл
        из треугольников?"
      4-5 Nested Loops 7_instruction: "Зацикли этот дизайн 10 раз. На сколько градусов
        нужно повернуть в цикле? (Подсказка: раздели 360 на 10)"
      4-5 Nested Loops 8_instruction: "Зацикли этот дизайн 6 раз. На сколько градусов
        нужно повернуть в цикле? (Подсказка: раздели 360 на 6)"
      4-5 Nested Loops 9_instruction: "Дорисуй зубы в пасти крокодила!"
      4-5 Nested Loops Assessment 1_instruction: "Используй вложенный цикл чтобы завершить
        дизайн."
      4-5 While Loops 1_instruction: Перемести меня к яме заполни её двумя блоками
        "засыпать".
      4-5 While Loops 2_instruction: Перемести меня к куче и убери 5ью взмахами лопаты
        с помощью блока "раскидать".
      4-5 While Loops 3_instruction: "Перемести меня к куче и убери её полностью,
        затем переместись к ямке и заполни её. Подсказка: используй наименьшее количество
        блоков."
      4-5 While Loops 4_instruction: "Ухты! Я нашла очень глубокую яму! Я не знаю
        сколько её нужно закапывать. Можешь написать программу чтобы заполнить яму?
        Подсказка: Используй цикл Пока-выполнить."
      4-5 While Loops 5_instruction: "Ухты! Теперь тут две глубокие ямы! Можешь написать
        программу чтобы заполнить обе ямы?"
      4-5 While Loops 6_instruction: "Ухты! Теперь тут большая куча грязи! Можешь
        написать программу которая уберет её?"
      4-5 While Loops 7_instruction: "Ухты! Теперь тут три кучи грязи! Можешь написать
        программу которая убирает каждую кучу пока земля не станет ровной?"
      4-5 While Loops 8_instruction: 'Тут большая кучка и большая ямка. Сколько раз
        нужно поработать лопатой чтобы сделать землю ровной? Подсказка: в обоих случаях
        используй цикл "пока".'
      4-5 While Loops Assessment 1_instruction: "Тут много ямок и куч. Помоги мне
        засыпать и раскидать их, чтобы сделать поверхность ровной."
      AlgPD DR Free Play_instruction: Create a function based on your own word problem.
      AllTheThings Applab - Turtle move with button_instruction: |
        Add a button that
        moves the turtle when clicked.  (Click to see full instructions)
      allthethings data blocks test_instruction: |
        Please sign in to test applab levels
        (By design, applab levels only work if signed in. Normally, we make people
        sign in, but this is only enforceable for a whole script and would be annoying
        to do for the allthethings script).
      allthethings design mode elements_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      allthethings_moviebot_instruction: |
        This level cloned from "U3 Digital Assistant
        Target"
      allthethings_template_backed1_instruction: "Backed by a template #1. Please\nsign
        in to test applab levels (By design, applab levels only work if signed\nin.
        Normally, we make people sign in, but this is only enforceable for a whole\nscript
        and would be annoying to do for the allthethings script). \n"
      allthethings_template_backed2_instruction: |
        Backed by a template #2. Please
        sign in to test applab levels (By design, applab levels only work if signed
        in. Normally, we make people sign in, but this is only enforceable for a whole
        script and would be annoying to do for the allthethings script).
      App Lab test_instruction: "выбрать по"
      Applab allthethings onRecordEvent_instruction: |
        Please sign in to test applab
        levels (By design, applab levels only work if signed in. Normally, we make
        people sign in, but this is only enforceable for a whole script and would
        be annoying to do for the allthethings script).
      Applab test_instruction: This level is submittable. For testing only!
      AppLab_test02_instruction: |
        One sentence summary of the activity. Click to
        view full instructions.
      Artist - Nested Loops 1_instruction: |
        Complete the code to draw these triangles.  The
        first one is done for you.  Hint:  3 triangles in a 360 degree rotation.
      Artist - Nested Loops 10_instruction: |
        Draw the last row of stars on this flag
        by looping the provided blocks. The stars are 50 pixels apart, but remember
        that the stars themselves are 30 pixels wide.
      Artist - Nested Loops 11_instruction: |
        Can you draw these 10 squares of this
        sidewalk using a nested loop? Each square is 30 pixels.
      Artist - Nested Loops 12_instruction: |
        Can you draw these 36 triangles using
        a nested loop?
      Artist - Nested Loops 2_instruction: "Now nest this loop inside another loop\nto
        draw 10 triangles.  This is called a nested loop.  Hint: All 10 triangles\ncomplete
        a 360 degree rotation.  \n"
      Artist - Nested Loops 3_instruction: |
        Create a sun by nesting the starter code
        in another loop. This is called a nested loop.\r
      Artist - Nested Loops 5_instruction: Loop the given code to create a windmill.
      Artist - Nested Loops 6_instruction: |
        Can you draw a hexagon by looping the
        triangle code?
      Artist - Nested Loops 7_instruction: |
        Loop this design 10 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 10?)
      Artist - Nested Loops 8_instruction: |
        Loop this design 6 times. How much do
        you have to turn each time you loop? (Hint: What is 360 divided by 6?)
      Artist - Nested Loops 9_instruction: Draw the teeth in the alligator's mouth!
      Artist - Nested Loops Assessment 1_instruction: "Используй вложенный цикл чтобы
        завершить дизайн."
      Auto Open Function Editor_instruction: 'Можно вызывать функции из других функций!
        Используйте функцию "фигура" за основу. Создайте 3 дома, каждый из которых
        на 20 пикселов больше предыдущего, начиная с 50 пикселов. Цикл со счетчиком
        может пригодиться. '
      Bee Recommended Blocks test_instruction: Фиолетовые цветки могут иметь 1 нектар,
        либо 0, но Вы не знаете, какой именно! Будьте осторожны, не собирайте нектар
        с фиолетовых цветков, у которых его нет. Проверьте, равен ли нектар 1, используя
        блок "Если".
      Big Game Animation 1 (copy 1)_instruction: |
        Now that you've learned to write
        simple linear functions, let's work on using them to add some movement to
        our game. Click play to see what your game can currently do (not much!), update
        any variables you like, and then click finish to move on.
      Big Game Animation 1_instruction: |
        Now that you've learned to write simple
        linear functions, let's work on using them to add some movement to our game.
        Click "Run" to see what your game can currently do (not much!), update any
        variables you like, and then click finish to move on.
      Big Game Animation 2 (copy 1)_instruction: |
        The function 'update-target'
        function takes the target's current x value, and returns an updated value.
        Complete the 'update-target' function so that it adds to the x value each
        time it is called. The more you add to x, the faster the target will go.
      Big Game Animation 2_instruction: |
        The update-target function takes the target's
        current x value, and returns an updated value. Complete the update-target
        function so that it adds to the x value each time it is called. The more you
        add to x, the faster the target will go.
      Big Game Animation 3_instruction: |
        The update-danger function should work just
        like update-target, except that the danger should move from the right side
        over towards the left. Complete update-danger to make the danger fly across
        the screen.
      Big Game Animation 4_instruction: |
        At this point in your game, your danger
        should run across the screen from right to left, and your target should run
        across from left to right. They don't ever come back on screen once they've
        left, but we'll take care of that later. Take a minute to make sure your
        game is working like you want it to, and then click "Finish" to move on.
      Big Game Booleans 1_instruction: |
        When you last worked on your game we got
        our target and danger sprites to fly across the screen, but they never come
        back. Click "Run" to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Booleans 2_instruction: |
        Go to the Functions section of the toolbox
        and complete the safe-left? function so that it returns true if the sprite's
        x coordinate is greater than -50. If you're successful you should see the
        Danger go off the left side and then return on the right side.
      Big Game Booleans 3_instruction: |
        Now that you've got safe-left?, let's fill
        in safe-right? - it should take in a sprite's x coordinate and return true
        if that coordinate is less than 450. Once your safe-right? is complete you
        should see the Target go off the right side of the screen and return on the
        left.
      Big Game Booleans 4_instruction: |
        Complete the onscreen? function so that it
        checks whether both safe-left? and safe-right? are true.
      Big Game Booleans 5_instruction: |
        At this point your Danger should run across
        the screen from right to left, your Target should run across from left to
        right, and they should both return to the opposite side, repeatedly. Take
        a minute to make sure your game is working like you want it to, and then click
        "Finish" to move on.
      Big Game Collision 1 (copy 1)_instruction: |
        When you last worked on your game
        we got our target and danger sprites to fly across the screen, but they never
        come back. Click run to see how your game is currently working, and then click
        finish and we'll work on making those sprites reappear on screen after they've
        left.
      Big Game Collision 1_instruction: |
        At this point you've programmed a video
        game with a moving Target and Danger, both of which return to the screen once
        they've left, and a Player that responds to keyboard input. Click "Run"
        to see how your game is currently working, and then we'll dig into the final
        missing piece - collision detection!
      Big Game Collision 2_instruction: |
        To move the player up and down, we'll need
        to use a conditional block to figure out which key is pressed and respond
        accordingly. Computers read keypresses as numeric key codes - the up arrow
        is 38 and the down arrow is 40. You can lookup other key codes in your student
        workbook. Edit the 'update-player' function so that if moves the player
        up when the up arrow is pressed, or down when the down arrow is pressed.
      Big Game Collision 3_instruction: |
        Use the Distance Formula, so the distance
        function returns the distance between the player's center coordinates (px,
        py) and another sprite's center coordinates (cx, cy).
      Big Game Collision 4_instruction: |
        Complete the collide? function so that it
        returns true if the distance between two points is less than 100 pixels apart.
      Big Game Complete_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Final_instruction: |
        You made it! At this point your game should be
        fully functioning, take some time to enjoy your new game and make any final
        tweaks to it. When you're happy with the final product, click Finish and
        you'll have an opportunity to share a link to your game. Good work!
      Big Game Player 1_instruction: |
        We're getting really close to a finished game!
        Last time you worked on your game, you used booleans to make your Target and
        Danger return to the screen once they've left. Click Run to see how your
        game looks right now, and then we'll get to making your Player move up and
        down.
      Big Game Player 2_instruction: |
        Edit the update-player function so the player
        moves up when the up arrow (keycode 38) is pressed, and moves down (keycode
        40) when the down arrow is pressed.
      Big Game Testing_instruction: |
        A demo of the completed CS in Algebra Big Game
        project
      Big Game Vars 1 (copy 1)_instruction: |
        Let's get started on your Big Game!
        Here you'll see a whole bunch of placeholder code that you'll eventually
        replace with your own, but for now we're only going to worry about defining
        variables. Click "Run" to see what the game looks like with the default
        values.
      Big Game Vars 1_instruction: |
        Let's get started on your Big Game! Here you'll
        see a whole bunch of placeholder code that you'll eventually replace with
        your own, but for now we're only going to worry about defining variables.
        Click "Run" to see what the game looks like with the default values.
      Big Game Vars 2 (copy 1)_instruction: |
        The first step to making this game your
        own is to give it a good Title. Click edit on the 'title' and 'subtitle'
        variables and change them to something new.
      Big Game Vars 2_instruction: |
        The first step to making this game your own is
        to give it a good Title. Click edit on the title and subtitle variables and
        change them to something new.
      Big Game Vars 3 (copy 1)_instruction: |
        Now let's set the background for your
        new game. Edit the 'bg' variable and select a new background Image from
        the dropdown.
      Big Game Vars 3_instruction: |
        Now let's set the background for your new game.
        Edit the bg variable and select a new background Image from the dropdown.
      Big Game Vars 4 (copy 1)_instruction: |
        Awesome, now you can update the variables
        for your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click 'finish'
        when you're done.
      Big Game Vars 4_instruction: |
        Awesome! Now you can update the variables for
        your Player, Target, and Danger. Feel free to play with all of the variables
        at this point to make your game look like you'd like it to. Click "Finish"
        when you're done.
      Brad Spooky House Copy_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      Brad Spooky House_instruction: |
        Freeplay: Here are the functions you've written,
        and some more for you to play with. Draw something awesome! Play with the
        pen width to see how different your drawings look!
      Building a Foundation Assessment_instruction: |
        Build a three level pyramid,
        there are no other directions, so just play with the pieces until you get
        it!
      Busy Bee 2_instruction: "У пчелы очень много работы! Может ты заметил шаблон,
        которые можно использовать для упрощения кода?"
      Busy Bee_instruction: "У пчелы очень много работы! Может ты заметил шаблон,
        которые можно использовать для упрощения кода?"
      C3-Farmer While Loops 1_instruction: |
        Move me to the hole and fill it with
        two shovelfuls of dirt, using the "fill" block.
      C3-Farmer While Loops 2_instruction: |
        Move me to the pile of dirt and remove
        it with 5 shovel scoops, using the 'remove' block.
      C3-Farmer While Loops 3_instruction: |
        Move me to the pile and remove all of
        it, then move to the hole and fill it completely.  Hint:  Use as few blocks
        as possible.
      C3-Farmer While Loops 4_instruction: |
        Wow, I found a really deep hole! I don't
        know how many shovelfuls of dirt it needs.  Can you write a program that fills
        it until the ground is even?  Hint:  Try using the while loop this time.
      C3-Farmer While Loops 5_instruction: |
        Wow, now there are two deep holes! Can
        you write a program that fills them both until the ground is even?
      C3-Farmer While Loops 6_instruction: |
        Wow, now there is a large pile of dirt!
        Can you write a program that removes all of it so the ground is even?
      C3-Farmer While Loops 7_instruction: |
        Wow, now there are three piles of dirt!
        Can you write a program that removes each of them until the ground is even?
      C3-Farmer While Loops 8_instruction: |2
         There is a really deep hole and a really
        large pile of dirt.  How many shovelfuls of dirt need to be moved around to
        make the ground flat?  Hint: Use the while loop for both.
      C3-Farmer While Loops Assessment 1_instruction: |
        There are a lot of holes and
        piles.  Help me to fill and remove them to make the ground flat.
      Calc Circles of Eval .1_instruction: |
        You’ll be writing a kind of code called
        Evaluation Blocks, because each block of code evaluates to a single value.
        Change the ??? in this code so that the block evaluates to 5.
      Calc Circles of Eval .2_instruction: |
        This Evaluation Block is a multiplication
        function which takes two numbers and returns the product of those numbers.
        Edit this block so that it multiplies 2 * 5
      Calc Circles of Eval .3_instruction: |
        Here's a function for addition which
        takes two numbers and returns their sum. Use this Addition Block to add 3
        + 6.
      Calc Circles of Eval .4_instruction: |
        Here we've nested an Addition Block
        inside a Multiplication Block. Complete this code so it multiplies 3 by (4
        + 1)
      Calc Circles of Eval 1 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 1_instruction: |
        Every mathematical operator (+, -, *,
        /, and so on) can be represented by an Evaluation Block in code. Change the
        Evaluation Block to match the expression.
      Calc Circles of Eval 2 (copy 1)_instruction: |
        Convert this statement to <some_shape>
        of evaluation.
      Calc Circles of Eval 2_instruction: |
        Use a Multiplication Block to complete
        this code.
      Calc Circles of Eval 3_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 4_instruction: |
        This code is missing a couple of Evaluation
        Blocks - make sure you put everything in the right order.
      Calc Circles of Eval 5_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 6_instruction: |
        Complete the Evaluation Blocks to match
        this expression.
      Calc Circles of Eval 7_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 8_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval 9_instruction: |
        Complete the Evaluation Blocks to match
        this statement.
      Calc Circles of Eval Free Play_instruction: |
        Free Play: Try using the Evaluation
        Blocks to write some equations of your own. How does nesting the blocks in
        different ways impact their evaluation?
      Calc Define Funcs 1 (copy 1)_instruction: |
        Let's look at some more algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 1_instruction: |
        Let's look at some more traditional algebraic
        functions now. Here's a function translated from the simple algebraic function
        f(x) = x + 1. What would you expect this function to output if provided an
        input of 15?
      Calc Define Funcs 2_instruction: |
        Write a function f that takes a parameter
        x and returns x - 10. Test your function using f(15).
      Calc Define Funcs 3_instruction: |
        We don't have to call our function f every
        time; create a function called times-ten that should take a parameter x and
        return x * 10. Once you've created the function, run times-ten(50).
      Calc Define Funcs 4_instruction: |
        Write a function called half that takes a
        number x and returns half that number. Once you've written the function,
        use it to calculate half(21)
      Calc Define Funcs 5 - multiply 1_instruction: |
        Oh no! We lost our multiply
        block! We'll have to create a function to multiply for us. To start off,
        write a function "f" that takes a parameter "x" and returns x*5. Test
        your function using f(3).
      Calc Design Recipe 1_instruction: |
        Let's use the Design Recipe to create a
        function called cube - this function should take in a Number and return that
        number to the power of 3. Make sure to write two example cases! When you're
        done, use your new function to calculate cube(7).
      Calc Design Recipe 2_instruction: |-
        Your school is holding a bake sale, and
        you need to track the cost of making each cookie, the money paid, and the
        total profit. Cookies cost $0.25 each to make, and sell for $1.50/cookie.\r
        Write
        the function cost, which takes in the number of cookies you intend to sell,
        and returns the cost of making those cookies.
      Calc Design Recipe 3_instruction: |
        Write the function sales which takes in
        the number of cookies sold, and produces the amount of money customers spent
        to buy those cookies (each cookie is sold at $1.50).
      Calc Design Recipe 4_instruction: |
        Using the two functions we just wrote, write
        the function profit, which takes in the number of cookies you sold, and gives
        you back the total profit you make from selling your cookies, accounting for
        the cost of baking them.
      Calc Free Play_instruction: |
        Free Play: Write functions and algorithms of your
        own design!
      Calc Rocket 1 (copy 1)_instruction: |
        In the last puzzle you wrote a contract
        for the function "rocket-height" that states it has a range of Number, domain
        of Number, and should return the height of the rocket traveling at 15 m/s
        after a given number of seconds. Let's write an example case now for the
        height of the rocket at 3 seconds.\r
        \r
        \r
        \r
          \r
        \r
      Calc Rocket 1_instruction: |
        In the last puzzle you wrote a contract for the
        function rocket-height that states it has a range of Number, domain of Number,
        and should return the height of the rocket traveling at 15 m/s after a given
        number of seconds. Let's write an example case now for the height of the
        rocket at 3 seconds.
      Calc Rocket 2_instruction: |
        Great, let's do one more example before writing
        the function - what should the rocket height be after 30 seconds?
      Calc Vars 1.1_instruction: |
        Here we've set the age variable to 17 years. Can
        you write an expression that calculates age in days?
      Calc Vars 1_instruction: |
        Variables allow us to name values so that we can
        easily refer to them repeatedly throughout our programs. Here's a variable
        called age. Set its value to your age and click run.
      Calc Vars 2 (copy 1)_instruction: |
        Here we've set the "age" variable to
        17 - can you write an expression that calculates "age" in months?
      Calc Vars 2.1_instruction: |
        Here's a new variable called age-in-months. Use
        the variable age to set age-in-months.
      Calc Vars 2_instruction: |
        Can you write an expression that calculates age in
        months?
      Calc Vars 3 (copy 1)_instruction: |
        Can you add to this code so that it calculates
        how many hours there are in "age" years?
      Calc Vars 3_instruction: |
        Can you add to this code so that it uses the "age"
        variable to calculate age in hours?
      Calc Vars 4_instruction: |
        We can also set variables by using other variables.
        Let's say you have a brother who is two years younger than you - can you
        set a new variable "brother-age" using your "age" variable?
      Code Studio Puzzle Challenge 1 - Artist_instruction: "Draw the line. It is\n200
        pixels long. \n"
      Code Studio Puzzle Challenge 1 Artist1_instruction: "Draw the line. It is 200\npixels
        long. \n"
      Code Studio Puzzle Challenge 10 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get all of the nectar.
      Code Studio Puzzle Challenge 10 - Bee_instruction: |
        Move the Bee to the flower
        and get all of the nectar.
      Code Studio Puzzle Challenge 10b - Bee_instruction: |
        Move the Bee to the flowers
        and get all of the nectar at each.
      Code Studio Puzzle Challenge 11 - Artist_instruction: |
        Draw this line by using
        the variable "length". Each line segment is 75 pixels long.
      Code Studio Puzzle Challenge 11b - Artist_instruction: |
        Draw a square by using
        the variable length provided.
      Code Studio Puzzle Challenge 12 - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 12a - Artist_instruction: |
        The code provided draws
        one triangle. Add to it to draw triangles in a hexagon pattern.
      Code Studio Puzzle Challenge 13 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the code to draw six lines that grow from 50, 60, 70,\n80,
        90, to 100 pixels long. \n"
      Code Studio Puzzle Challenge 14 - Artist_instruction: "This is just like a\n\"for\"
        loop. Complete the loop to draw 4 squares that grow from 80, 100,\n120, to
        140 pixels. \n"
      Code Studio Puzzle Challenge 2 - Artist_instruction: |
        Now add a turn and another
        line. The lines are 200 pixels long.
      Code Studio Puzzle Challenge 3 - Artist_instruction: |
        Draw the square. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 4 - Artist_instruction: |
        Draw the octagon. Each
        side is 100 pixels long.
      Code Studio Puzzle Challenge 5 - Bee (copy 1)_instruction: |
        Move the Bee to
        the flower and get the nectar.
      Code Studio Puzzle Challenge 5 - Bee_instruction: |
        Flowers contain a specific
        amount of nectar. Move the Bee to the flower and collect nectar with the get
        nectar block.
      Code Studio Puzzle Challenge 6 - Bee_instruction: |
        Honeycombs can hold a specific
        amount of honey. Get the nectar from the flower and make some honey.
      Code Studio Puzzle Challenge 7 - Bee_instruction: |
        Move the Bee to the flower
        and get the nectar.
      Code Studio Puzzle Challenge 8 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge 9 - Bee_instruction: |
        The cloud could be hiding
        a flower or a honeycomb. Only get nectar from flowers. Only make honey at
        honeycombs.
      Code Studio Puzzle Challenge Artist Screencast (copy 1)_instruction: "Draw\nthe
        line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast 2_instruction: "Complete the\ncode
        to draw the line. Each segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Artist Screencast_instruction: "Draw the line.\nEach
        segment is 100 pixels long. \n"
      Code Studio Puzzle Challenge Bee Screencast_instruction: |
        Move the Bee to the
        flowers and get all of the nectar.
      Code Studio Puzzle Challenge Square - Artist_instruction: |
        Draw a square by
        using the variable length provided.
      Code Studio Puzzle Challenge Var - Artist_instruction: |
        Draw a line by using
        a variable "length" set to 180.
      Course 2 Bee Loops 1_instruction: "Hi, I'm a bee. Can you help me collect\nthe
        nectar from these flowers? \n"
      Course 2 Bee Loops 13_instruction: |
        Assessment: Use the repeat block to collect
        all of the nectar.
      Course 2 Bee Loops 2_instruction: |
        Can you do the same task more easily with
        a loop?
      Course 2 Bee Loops 3_instruction: |
        Now use the new repeat block to collect
        all of the nectar and make all of the honey.
      Course 2 Bee Loops 3__instruction: |
        Can you use a loop to collect all that
        nectar?
      Course 2 Bee Loops 4_instruction: |
        What happens if you loop this sequence 3
        times? Don't forget to make the honey at the end!
      Course 2 Maze Loops 1_instruction: "Можешь доставить меня к свинке, используя
        5 блоков?"
      Course 4 2_instruction: "Сейчас пчелка хочет получить нектар. Но помни, не все
        объекты являются цветами, поэтому удостоверься что пчела собирает нектар именно
        с цветов."
      Course 4 Artist 1_instruction: "Помоги мне дорисовать мою коробку. (длина каждой
        стороны - 200 пикселей) "
      Course 4 Artist 10_instruction: "Настало время свободной игры! Получайте удовольствие
        и рисуйте всё, что захочется. "
      Course 4 Artist 11_instruction: "Теперь задача по сложнее! Вот дизайн, который
        использует те блоки которые показаны. Можешь выяснить как его переделать без
        дополнительной информации? Подсказка: Пробуй метод проб и ошибок. Не обязательно
        получить результат с первого раза."
      Course 4 Artist 12_instruction: "Свободная игра для вдохновения: Ты уже знаешь
        все что нужно, чтобы создавать такие узоры! Если эта картинка тебя вдохновляет,
        попробуй сделать что-то похожее. Если нет, сделай что-то своё. \\r \\r Хочешь
        узнать, как был сделан этот вдохновляющий узор? Посетите https://studio.code.org/c/105671120/edit
        чтобы узнать ответ."
      Course 4 Artist 13_instruction: "Ещё играешь? Вот пустой холст чтобы делать
        все что захочется!"
      Course 4 Artist 2_instruction: "Можешь зациклить этот код чтобы нарисовать квадрат?"
      Course 4 Artist 20_instruction: |
        Ещё играете? Вот чистый холст, где
        вы можете создать все, что вы хотите!
      Course 4 Artist 3_instruction: Попробуй догадаться, что произойдет при запуске
        кода (или нажми "Выполнить", чтобы узнать). Повтори код достаточное число
        раз, чтобы завершить рисунок.
      Course 4 Artist 4_instruction: |
        Сколько градусов в круге? Заполните
        повторить блок с таким номером, чтобы создать круг из цветов.
      Course 4 Artist 5_instruction: "Нарисуйте симметрично вторую половину. Треугольники
        являются равносторонними и имеют длину 50 пикселей. Подсказка: возможно нужно
        будет запустить код несколько раз, чтобы догадаться, какие блоки следует добавить."
      Course 4 Artist 6_instruction: "Завершите код, чтобы нарисовать эти треугольники.
        Подсказка: 3 треугольника на 360 градусов вращения... сколько раз 360 делится
        на 3?"
      Course 4 Artist 7_instruction: "Теперь разместите этот цикл внутри другого цикла,
        чтобы нарисовать 10 треугольников. Это называется вложенным циклом. Подсказка:
        все 10 треугольников выполняют поворот на 360 градусов.  "
      Course 4 Artist 8_instruction: "Нарисуй солнце, повторяя этот целый блок кода
        несколько раз."
      Course 4 Artist 8a_instruction: |-
        Помните эту форму? Теперь мы будем строить ее без использования блоков. Чтобы начать используйте \r
        Подсказка: Должно получиться 3 треугольника с поворотом в 360 градусов... Сколько раз нужно сделать по 3, чтобы вписаться в 360 градусов?
      Course 4 Artist 9_instruction: "Повторите эту схему 10 раз и посмотрите, какая
        фигура получится. Вот подсказка, о том на сколько нужно повернуть: сколько
        будет 360 разделить на 10?"
      Course 4 Artist Binary 1_instruction: |-
        Это функция, заключающайся в бинарной системе исчисления, состоящей из 1 и 0. Она дает персонажу указания двигаться слева направо и сверху вниз. Персонаж передвигается по клеткам, когда видит 1 и игнорирует клетку, если видит 0. \r
        \r
        Напиши этот код, чтобы увидеть, как персонаж использует бинарную систему, чтобы нарисовать этот образец.
      Course 4 Artist Binary 1a_instruction: |-
        Это функция, заключающайся в бинарной системе исчисления, состоящей из 1 и 0. Она дает персонажу указания двигаться слева направо и сверху вниз. Персонаж передвигается по клеткам, когда видит 1 и игнорирует клетку, если видит 0. \r
        \r
        Напиши этот код, чтобы увидеть, как персонаж использует бинарную систему, чтобы нарисовать этот образец.
      Course 4 Artist Binary 2_instruction: "Какие бинарные строки нужно использовать
        8 раз, чтобы нарисовать этот рисунок?"
      Course 4 Artist Binary 3_instruction: "Можешь ли ты нарисовать этот узор зациклив
        строку из трех двоичных цифр?"
      Course 4 Artist Binary 4_instruction: "Каждая строка изображения состоит из
        двоичной строки. Можешь упорядочить их так, чтобы нарисовать улыбающееся лицо,
        а не мрачное?"
      Course 4 Artist Binary 5_instruction: "Какая 6-цифровая двоичная строка, повторённая
        11 раз, нарисует это изображение?"
      Course 4 Artist Binary 6_instruction: "Какая двоичная строка является самой
        короткой из тех, при повторении которой будет нарисован этот образ?"
      Course 4 Artist Binary 7_instruction: "Закончите рисунок."
      Course 4 Artist Binary Free Play 2_instruction: "Свободный режим: теперь ты
        можешь рисовать все что угодно. Удачи!"
      Course 4 Artist Binary Free Play 2a_instruction: |-
        Перед вами холст
        с большим расширением - 16 на 16 пикселей!\r
        \r
        Посмотрим, что может получиться
        Если мы поиграем с битами?
      Course 4 Artist Binary Free Play 2b_instruction: "Нажми сюда, чтобы воспользоваться
        подсказками."
      Course 4 Artist Binary Free Play_instruction: "Свободная игра: рисуй всё, что
        угодно, с помощью двоичных строк!"
      Course 4 Artist Binary pre1_instruction: "Двоичный код - это способ представления
        информации, при котором используются только два варианта.  Здесь, мы будем
        использовать состояние «выключено» (обозначим его цифрой 0) и «включено» (обозначим
        цифрой 1).  \\r \\r вам предоставлена сетка «пикселей», по которой вы можете
        ходить и рисовать, включая только определенные квадраты. Сможешь ли ты сделать
        так, чтобы художник нарисовал «01010101» двоичным кодом в первой строке?"
      Course 4 Artist Binary ryan_instruction: "Двоичный код - это способ представления
        информации, при котором используются только два варианта.  Здесь, мы будем
        использовать состояние «выключено» (обозначим его цифрой 0) и «включено» (обозначим
        цифрой 1).  \\r \\r вам предоставлена сетка «пикселей», по которой вы можете
        ходить и рисовать, включая только определенные квадраты. Сможешь ли ты сделать
        так, чтобы художник нарисовал «01010101» двоичным кодом в первой строке?"
      Course 4 Artist For  Functions 10_instruction: "Двигаемся дальше, сможешь ли
        ты нарисовать звезду, используя функцию «Рисовать квадратную линию»? Удачи!"
      Course 4 Artist For  Functions 11_instruction: "Двигаемся дальше, сможешь ли
        ты нарисовать звезду, используя функцию «Рисовать квадратную линию»? Удачи!"
      Course 4 Artist For Loops 1_instruction: "Нарисуй этот треугольник, ширина которого
        50 пикселей. Подсказка: используйте блок повтора."
      Course 4 Artist For Loops 10_instruction: "Время творить! Рисуйте все, что вам
        нравится с блоками, которые вы изучили"
      Course 4 Artist For Loops 11_instruction: "Помнишь предыдущий этап, когда мы
        использовали переменную для контроля количества сторон в форме? Мы будем теперь
        делать то же самое с переменной «счетчик». Этот шаблон начинается с треугольника
        и добавляет одну сторону до тех пор пока не получится декагон (10 Сторон).
        Каждая сторона должна быть длиной 100 пикселей. Подсказка: 360 градусов, деленные
        на количество сторон, у фигуры — это угол, на которую вам нужно повернуть."
      Course 4 Artist For Loops 11a_instruction: "Давай соберем все это вместе!  Используя
        свои знания «цикла for» и «счетчика», создайте этот рисунок, где каждая форма
        имеет две стороны больше чем в прошлом.  Убедитесь, что каждая сторона в 10
        раз длинее количества сторон многоугольника. \\r \\r Тебе дано очень мало
        кода."
      Course 4 Artist For Loops 12_instruction: "Это выглядело довольно классно, но
        теперь я хотел бы нарисовать каждую фигуру рядом с предыдущей. На этот раз
        каждая сторона составляет 20 точек. Используйте блок прыжок для перехода вперед
        на 40 точек после каждой фигуры. "
      Course 4 Artist For Loops 13_instruction: "Хмм, эти формы становятся все больше
        каждый раз! Мы же уже решить эту проблему с переменными? Как мы можем использовать
        переменную счетчика, чтобы сделать стороны меньше? Вместо того, чтобы двигаться
        вперед, на фиксированную величину, попробуйте переместить вперед на (100 /
        счетчик) точек."
      Course 4 Artist For Loops 14_instruction: "Если вы немного повернуть немного
        больше или меньше, чем обычно для фигуры, то получится отличный эффект. Попробуйте
        использовать некоторые куски кода из предыдущего уровня, но поворачивать на
        89 градусов для создания этой витой квадратный спираль."
      Course 4 Artist For Loops 15_instruction: "Свободная игра: Попробуй сделать
        свой чертеж с помощью «цикла for». Мы добавили для тебя несколько полезных
        переменных."
      Course 4 Artist For Loops 2_instruction: "Я поместил код рисования треугольника
        \ в цикл, который считает десятками от 50 до 100. ВАЖНО: Просмотрите код,
        прежде чем запускать его."
      Course 4 Artist For Loops 3_instruction: |
        Чтобы выполнить это задание, используйте прошлое, как образец. У наименьшего треугольника стороны по 20 пикселей, у самого большого - 200 пикселей, и каждый следующий треугольник на 20 пикселей больше предыдущего.
      Course 4 Artist For Loops 4_instruction: "Как бы вы применили то, что узнали,
        чтобы нарисовать квадраты? Их размеры начинаются от 15 пикселей, самый большой
        имеет сторону 300 пикселей, и каждый следующий на 15 пикселей больше предыдущего. "
      Course 4 Artist For Loops 5_instruction: 'Отлично справились с прошлым заданием!
        Давайте используем тот "считающий" блок еще раз, чтобы нарисовать эту замечательную
        картинку. '
      Course 4 Artist For Loops 6_instruction: "Свободная игра! Используйте цикл с
        параметром, чтобы нарисовать растущий узор на ваш выбор."
      Course 4 Artist For Loops 6a_instruction: "Чтобы выполнить это задание, сделайте
        три небольших изменения в коде из прошлого уровня!"
      Course 4 Artist For Loops 7_instruction: Что произойдёт, если вы уберёте "Повторить
        3 раза" из этого алгоритма, оставив блоги "двигаться" и "повернуться" в цикле?
        В этом спиральном треугольнике каждая сторона на 20 пикселей больше, чем предыдущая.
      Course 4 Artist For Loops 8_instruction: |-
        Всего лишь одно маленькое изменение в коде из прошлого изображения может создать этот рисунок. Сможете понять в чем отличие?\r
        \r
        Подсказка: Вам нужно убрать что-то!
      Course 4 Artist For Loops 8a_instruction: "Всего лишь одно маленькое изменение
        в коде из прошлого изображения может создать этот рисунок. Сможете понять
        в чем отличие?"
      Course 4 Artist For Loops 9_instruction: "Вы можете сделать спираль? Двигайся
        вперед от 1 до 75 пикселей, увеличивая каждый раз на 1 пиксель."
      Course 4 Artist For Loops Challenge_instruction: |-
        Можете ли вы выяснить, как создать такое изображение из изученных вещей?\r
        \r
        Нужна подсказка? Жми сюда.
      Course 4 Artist For Loops inspire_instruction: |-
        Вдохновение свободной игры: Вы теперь выучили все, что вы должны знать, чтобы сделать такой-же образец! Если эта картина вдохновляет вас, попытайтесь сделать что-то подобное. Иначе, создайте что-то свое собственное \r
        \r
        Нужен намек? Щелкните здесь.
      Course 4 Artist Functions 1_instruction: "Можешь нарисовать круг 100 точек в
        длину, используя цикл?"
      Course 4 Artist Functions 10_instruction: "Какой блок вы должны добавить, чтобы
        заставить треугольник поставить сверху квадрата?"
      Course 4 Artist Functions 11_instruction: "Проверьте этот код, который рисует
        куб - вы можете переместить его в функцию под названием «Нарисовать куб»"
      Course 4 Artist Functions 12.1_instruction: Давайте напишем функцию, назвав
        ее "Нарисовать восьмиугольник 20", которая рисует восьмиугольник, длина каждой
        стороны которого равна 20 пикселям.
      Course 4 Artist Functions 12_instruction: "Петля функции square, чтобы чертить
        линию"
      Course 4 Artist Functions 13.1_instruction: |-
        А теперь, чтобы закончить узор, создадим функцию с названием "прыгнуть к верхнему правому углу". Она переместит художника к верхнему правому углу восьмиугольника, который вы только что нарисовали.\r
        \r
        Подсказка:, Чтобы перейти к верхнему правому углу, попробуйте перепрыгивать по шаблону, который образует 3/8 восьмиугольника.
      Course 4 Artist Functions 13_instruction: Посмотрите - у нас новая функция "нарисовать
        ряд квадратов". Изучите как она образована. Щелкните "Выполнить", когда будете
        готовы перейти к следующему заданию.
      Course 4 Artist Functions 14.1_instruction: А теперь создадим функцию "прыгнуть
        к правому верхнему углу", которая перемещает художника к правому верхнему
        углу восьмиугольника, чтобы завершить рисование этого узора.
      Course 4 Artist Functions 14_instruction: Отличная работа! Используйте новую
        функцию "рисовать ряд квадратов", чтобы нарисовать фигуру квадрата. Помните,
        что каждый квадрат размером 40 пикселей.
      Course 4 Artist Functions 15_instruction: 'Немножко усложним задачу. Можете
        нарисовать звезду, использовав функцию "рисовать ряд квадратов"? Успехов!
        Подсказка: нужно будет поворачиваться на 144 градуса'
      Course 4 Artist Functions 2_instruction: "Можете нарисовать 3 квадрата на расстоянии
        20 пикселов друг от друга? Подсказка: размер каждого квадрата - 100 пикселей"
      Course 4 Artist Functions 3_instruction: |
        Сможете нарисовать этот рисунок, используя процедуру "рисовать квадрат"? Подсказка: расстояние между квадратами 120 пикселей.\r
      Course 4 Artist Functions 4_instruction: 'Готовы создать собственный блок процедуры?
        Нажмите блок «Процедуры» на панели инструментов, укажите название "нарисовать
        треугольник", и создайте треугольник, как и раньше с помощью блоков Действия
        и Циклы. Затем нажмите Сохранить и Закрыть в правом верхнем углу. Подсказка:
        создавайте треугольники длиной 100 пикселей. Успехов!'
      Course 4 Artist Functions 5 OLD_instruction: "Попробуем воспользоваться двумя
        функциями для рисования дома - что нужно исправить в коде, чтобы нарисовать
        его правильно?"
      Course 4 Artist Functions 5_instruction: |
        Сможете нарисовать этот рисунок, используя процедуру "рисовать квадрат"? Подсказка: расстояние между квадратами 120 пикселей.\r
      Course 4 Artist Functions 6_instruction: "Какой блок вы должны добавить, чтобы
        заставить треугольник поставить сверху квадрата?"
      Course 4 Artist Functions 7_instruction: "Сможете нарисовать ряд квадратов с
        помощью функции Квадрат? Каждый квадрат имеет длину 40 пикселов."
      Course 4 Artist Functions 8_instruction: 'Вам понятно как использовать блоки
        функций? Давайте изменим размер этого квадрат до 200 пикселов. Подсказка:
        щелкните на "редактировать", чтобы изменить размер в редакторе функции "рисовать
        квадрат". Помните, что нужно щёлкнуть "сохранить и закрыть", чтобы выйти из
        редактора функций. '
      Course 4 Artist Functions 9_instruction: "Мы предоставили большую часть кода
        для создания функции. Однако, кажется, чего-то не хватает. Сможете завершить
        этот блок функции?"
      Course 4 Artist Functions challenge_instruction: "Щелкните здесь, чтобы увидеть
        подсказки ещё раз."
      Course 4 Artist Functions Inspiration_instruction: "Щелкните здесь, чтобы увидеть
        подсказки ещё раз."
      Course 4 Artist Functions inspire_instruction: "Нажмите здесь, чтобы увидеть
        вдохновляющую картинку ещё раз."
      Course 4 Artist Inspire_instruction: |-
        Хотите ещё раз взглянуть на наши узоры или подсказки? Нажмите здесь!\r
        \r
        Или создайте ваш собственный узор!
      Course 4 Artist Params 1_instruction: "Отредактируем функцию, которая рисует
        квадрат со сторонами в 50 пикселов"
      Course 4 Artist Params 10_instruction: 'Можно вызывать функции из других функций!
        Используйте функцию "фигура" за основу. Создайте 3 дома, каждый из которых
        на 20 пикселов больше предыдущего, начиная с 50 пикселов. Цикл со счетчиком
        может пригодиться. '
      Course 4 Artist Params 11_instruction: |
        How about a function called "pinwheel"
        that takes three parameters - "sides," "length" and "repeat." You can
        calculate how much to turn after each shape using the same math you used to
        figure out the turns for a shape of "sides". Can you recreate this picture?
        Here's a tip each shape is 100 pixel's in length.
      Course 4 Artist Params 12_instruction: 'Используйте функцию "вертушка", чтобы
        нарисовать каждую из этих фигур. Длина каждой стороны изображения: 50.'
      Course 4 Artist Params 13_instruction: "Свободная игра: Вот функции, какие мы
        написали, и еще несколько - воспользуйтесь ими. Нарисуйте что-то чудесное!"
      Course 4 Artist Params 2_instruction: |
        That triangle function would be a whole
        lot more useful if it could draw triangles of different sizes. I've added
        a parameter for line length, but it doesn't do anything yet. Can you update
        the function so it uses the "length" parameter when it draws each side?
        The triangle sizes are 150 pixels, 75 pixels and 25 pixels.
      Course 4 Artist Params 3_instruction: "Чудесно, можете нарисовать каждый из
        этих треугольников с помощью этой новой функции? Первый имеет длину 25 пикселов,
        второй - 50, а третий - 75. "
      Course 4 Artist Params 4_instruction: "Можете добавить новую функцию, с названием
        квадрат? Она должна принимать длину как параметр, также, как и треугольник.
        В этот раз нарисуйте 3 квадрата, длиной 25, 50 и 75 пикселов, на расстоянии
        100 пикселов между ними."
      Course 4 Artist Params 5_instruction: |
        Используйте обе новые функции, чтобы нарисовать эту картину. Чтобы сделать это ещё проще, используйте циклы со счетчиком.
      Course 4 Artist Params 6_instruction: 'Отредактируем функцию "нарисовать фигуру".
        Она уже имеет параметр "длина". А теперь прибавим к этой функции параметр
        "стороны". Помните, что угол поворота для заданной фигуры равен 360 разделить
        на количество её сторон. Подсказка: длины для фигур: треугольник - 100 пикселей,
        шестиугольник - 25 пикселей, а квадрат - 50 пикселей. '
      Course 4 Artist Params 7_instruction: 'Можете создать эти фигуры, заполнив "???"?
        Квадрат и треугольник имеют размер 100 пикселей, а шестиугольник - 75 пикселей. '
      Course 4 Artist Params 8_instruction: |
        Можете нарисовать эту фигуру? Вот подсказка: создайте новую функцию для 6 сторон, которую назовём шестиугольником.
      Course 4 Artist Params 9_instruction: Помните, как мы использовали цикл со счетчиком
        и внутренний цикл? Попробуем поиграться и использовать функцию "рисовать фигуру"
        с параметрами "стороны" и "длина". Можете создать эти фигуры заново? Для квадрата
        - счетчик должен быть 5/100/5, для треугольника - 10/100/10, а для шестиугольника
        - 2/100/2.
      Course 4 Artist Var 9_instruction: 'Вот алгоритм рисования треугольника. Измените
        его, так, чтобы он использовал переменную "стороны". Замените число 3 переменной
        "стороны". Подсказка: не забудьте использовать блок "установить сторон".'
      Course 4 Artist Vars 1_instruction: "Можете помочь мне нарисовать треугольник?
        Длина сторон - по 100 пикселей."
      Course 4 Artist Vars 10_instruction: Вот алгоритм, который рисует треугольник
        из меньших треугольников. Можете изменить его так, чтобы он использовал переменную
        "стороны" для рисования треугольников? Просмотрите код, и каждый раз, когда
        видите число 3, замените его на переменную "стороны". Не забудьте использовать
        блок "установить стороны".
      Course 4 Artist Vars 11_instruction: Этот код немного сложнее. Он базируется
        на тех же понятиях, что и последнее задание - как следует изменить переменную
        "стороны" для того, чтобы можно было нарисовать изображение из квадратов?
      Course 4 Artist Vars 12_instruction: Установим значение переменной "стороны"
        5. Чем больше сторон мы добавляем к этому алгоритму, тем больше становится
        узор! Обратите внимание на появление новой переменной "длина". Теперь можно
        использовать её, когда нужно "двигаться вперёд". Для этой фигуры, установите
        значение переменной "длина" 75.
      Course 4 Artist Vars 13_instruction: |-
        Когда фигура имеет много сторон, каждая из них должна быть короче, если вы хотите, чтобы весь узор поместился на экран.
        \r
        Создадим алгоритм для этого интересного узора. Но вместо того, чтобы вручную задавать переменную "длина", воспользуемся математическим блоком с переменной "стороны" внутри, чтобы каждая фигура вписывалась корректно. Периметр многоугольника - 300 пикселов.\r
        Нужные подсказки? Щелкайте здесь.
      Course 4 Artist Vars 14_instruction: |-
        Свободная игра: Посмотрите, теперь алгоритм находится внутри ещё одного цикла. Поэкспериментируйте со значениями двух переменных, чтобы образовались интересные узоры.\r
        \r
        Для ещё большего эффекта, попробуйте поиграть с цветом! Используйте случайные цвета внутри циклов, чтобы увидеть, как это меняет ваш дизайн.
      Course 4 Artist Vars 2_instruction: Вместо того, чтобы "двигаться вперед на
        150", теперь блок "двигаться" содержит ссылки на переменную "длина". Можете
        установить "длину" в 150 и нарисовать новый треугольник?
      Course 4 Artist Vars 3_instruction: 'Вот цикл, который рисует квадрат, но чего-то
        не хватает. Можете исправить его так, чтобы он использовал переменную "длина",
        чтобы установить длину каждой стороны? '
      Course 4 Artist Vars 4_instruction: Теперь я хочу создать прямоугольник, высота
        которого вдвое больше ширины. У нас есть переменная с именем "ширина", которая
        должна иметь значение 100. Можете использовать математические блоки для завершения
        кода?
      Course 4 Artist Vars 5_instruction: Используйте переменную "стороны", чтобы
        определить, сколько раз будет выполнен этот цикл.
      Course 4 Artist Vars 6_instruction: |-
        Этот код может рисовать любой правильный многоугольник. Здесь есть новая переменная "стороны” со значением 4. Можете использовать эту переменную (вместе с математическими блоками), чтобы убедиться, что поворот происходит на правильный угол вне зависимости от числа сторон в многоугольнике?\r
        \r
        Нажмите здесь, чтобы вернуться к подсказке!
      Course 4 Artist Vars 7_instruction: |-
        Воспользуйтесь полученными знаниями, чтобы нарисовать этот шестиугольник использовав переменную "стороны".\r
        \r
        Как можно изменить лишь одно значение, чтобы нарисовать треугольник, квадрат, прямоугольник или восьмиугольник?
      Course 4 Artist Vars 8_instruction: "Свободная игра: Экспериментируйте с количеством
        сторон этой фигура. Можете изменить алгоритм, чтобы общий размер фигуры оставался
        неизменным, независимо от количества сторон в ней? Подсказка: если разделить
        начальную длину на количество сторон, длина каждой стороны будет уменьшаться
        при увеличении числа сторон."
      Course 4 Artist Vars 9_instruction: Измените этот алгоритм, чтобы он использовал
        переменную "стороны" вместо фиксированного числа при рисовании треугольника.
        Не забудьте использовать блок "установить стороны".
      Course 4 Bee 1_instruction: 'Пчёлка не видит, что под облаком! Используйте блок
        "если", чтобы проверить, есть ли там цветок или нет. Если есть - собирайте
        с него нектар. '
      Course 4 Bee 2_instruction: Используйте блок "если - иначе", чтобы проверить
        каждый объект и понять, цветок ли это. Если да, то собирайте нектар... в противном
        случае, делайте мёд!
      Course 4 Bee 3_instruction: "Неизвестный объект - это либо цветок или улей.
        На этот раз используйте блок если/иначе, чтобы собирать нектар, если это цветок,
        иначе делать мёд (поскольку тогда это улей)."
      Course 4 Bee 4_instruction: В этом цветке может быть 3, 2 или 1 нектар. Используйте
        этот блок если-иначе, соединенный с другим блоком если-иначе, чтобы образовалась
        конструкция "если-иначе если-иначе". Завершите головоломку, чтобы собрать
        неизвестное количество нектара.
      Course 4 Bee 5_instruction: В этом цветке может быть 3, 2 или 1 нектар. Добавьте
        блок если-иначе, чтобы получился блок "если/иначе-если/иначе". Завершите головоломку,
        чтобы собрать неизвестное количество нектара.
      Course 4 Bee 6_instruction: В этом цветке может быть 3, 2 или 1 нектар. Создайте
        блок "если/иначе-если/иначе", чтобы собрать неизвестное количество нектара.
      Course 4 Bee 7_instruction: "Используйте всё, что мы изучили, чтобы собрать
        весь нектар. Фиолетовый цветок может иметь 3, 2 или 1 нектар."
      Course 4 Bee For Loops 1_instruction: "Чтобы собрать нектар с каждого цветка,
        используй цикл."
      Course 4 Bee For Loops 10_instruction: "Если ваш цикл считает в обратном порядке,
        то шаг вычитается от счетчика каждый раз при выполнении цикла. Каким должен
        быть шаг, чтобы собрать 9, затем 6, а затем 3 нектара?"
      Course 4 Bee For Loops 11_instruction: "Что не так с этим циклом? Посмотрите,
        можете ли вы исправить это и заставить пчелу собрать весь нектар."
      Course 4 Bee For Loops 2_instruction: Вот новый тип цикла, называемый "for".
        Данный цикл считает от 1 до 5 с шагом 1, при этом тело цикла каждый раз выполняется
        заново. Помоги пчелки Би собрать нектар.
      Course 4 Bee For Loops 3_instruction: Используя цикл "for", чтобы посчитать
        от 1 до 3 с шагом 1, ты сможешь решить эту головоломку. Теперь давай собирем
        нектар!
      Course 4 Bee For Loops 4_instruction: "Собери весь нектар с этих цветом. Интересно,
        есть ли простой способ сделать это..."
      Course 4 Bee For Loops 5_instruction: 'Ого, цикл всё значительно упрощает! Используйте
        переменную "счетчик" в цикле "для", чтобы использовать блок "получить нектар"
        такое же количество раз, как и счетчик цикла. Весь код, что вам нужен - уже
        есть, изучите как он составлен и щелкните "Выполнить", чтобы посмотреть, как
        он работает. '
      Course 4 Bee For Loops 6_instruction: "Циклы можно использовать для обратного
        отсчета. Попробуйте собрать нектар, считая от 5 до 1."
      Course 4 Bee For Loops 7_instruction: Используйте переменную "счетчик" цикла
        "для", чтобы управлять, насколько двигаться по горизонтали.
      Course 4 Bee For Loops 8_instruction: "Можете использовать переменную счетчика
        цикла, чтобы управлять движением и сбором нектара?"
      Course 4 Bee For Loops 9_instruction: Последнее число в цикле называется "шаг"
        и каждый раз при выполнении цикла счетчик меняется на этот шаг. Попробуйте
        собрать цветы, используя шаг равный двум.
      Course 4 Bee Loops 5 NEW_instruction: "Вот три цветка. Можете найти набор команд,
        который следует повторить трижды, чтобы собрать нектар и использовать наименьшее
        количество блоков?"
      Course 4 Bee Loops 5a NEW_instruction: "А теперь используйте циклы с наименьшим
        количество блоков, чтобы помочь пчёлке собрать весь нектар по дороге к улью.
        Когда доберётесь туда, не забудьте сделать мёд!"
      Course 4 Bee Params 1_instruction: Используйте функцию "собрать 3 нектара",
        которая выполняет поворот, передвигает для сбора нектара, а затем возвращает
        в исходное расположение. Напишите последовательность для сбора всего нектара,
        используя эту функцию.
      Course 4 Bee Params 2_instruction: Изменените функцию "собрать 3 нектара", так
        чтобы она повернула меня направо, а не налево.
      Course 4 Bee Params 3 (copy 1)_instruction: А теперь у нас цветы с обеих сторон!
        Может воспользуемся параметром, чтобы одна и та же функция работала для цветов
        и справа и слева? К функции добавили параметр, который называется "направление".
        Если параметр "направление" равен 0, то нужно повернуть налево; если он равен
        1, то нужно повернуть направо.
      Course 4 Bee Params 3_instruction: 'А теперь у нас цветы с обеих сторон! К функции
        "собрать 3 нектара" добавили параметр, который называется "направление”. Используйте
        новые переменные "влево" и "вправо", чтобы управлять поворотами. Измените
        функцию "собрать 3 нектара" так, чтобы пчёлка поворачивала в правильном направлении,
        когда переменные "влево" и "вправо" передаются в функцию.  '
      Course 4 Bee Params 4 (copy 1)_instruction: "Попробуйте использовать новую функцию,
        чтобы собрать все цветы. Помните, что 0 = лево, а 1 = право."
      Course 4 Bee Params 4 - Two WhenRun_instruction: "Попробуйте использовать вашу
        новую функцию, чтобы собрать все цветы. Не забудьте использовать переменные
        влево и вправо."
      Course 4 Bee Params 4 backup_instruction: А правда, было бы неплохо, если бы
        мы могли собрать весь нектар, используя только одну функцию? Попробуйте добавить
        к вашей функции новый параметр, который называется "нектары", чтобы управлять
        количеством собираемого нектара. Возможно, нужно будет переименовать и саму
        функцию!
      Course 4 Bee Params 4_instruction: "Попробуйте использовать новую функцию, чтобы
        собрать нектар со всех цветов. Не забудьте использовать переменные влево и
        вправо."
      Course 4 Bee Params 5_instruction: "Начнем с нуля - вы можете создать новую
        функцию под названием «Получить 5 нектаров» с параметром «Направление»?"
      Course 4 Bee Params 6 (copy 1)_instruction: "Попробуйте использовать вашу новую
        функцию, чтобы собрать весь нектар."
      Course 4 Bee Params 6_instruction: А правда, было бы неплохо, если бы мы могли
        собрать весь нектар, используя только одну функцию? Попробуйте добавить к
        вашей функции новый параметр, который называется "нектары", чтобы управлять
        количеством собираемого нектара. Возможно, нужно будет переименовать и саму
        функцию!
      Course 4 Bee Params 7 (copy 1)_instruction: "Попробуйте использовать вашу новую
        функцию, чтобы собрать весь нектар."
      Course 4 Bee Params 7_instruction: "Попробуйте использовать вашу новую функцию,
        чтобы собрать весь нектар."
      Course 4 Bee Params 8 Clone 2_instruction: "О, теперь еще и мёд делать! Как
        можно изменить вашу функцию, чтобы или собирать нектар, или делать мёд."
      Course 4 Bee Params 8 clone 3_instruction: "О, теперь еще и мёд делать! Как
        можно изменить вашу функцию, чтобы или собирать нектар, или делать мёд."
      Course 4 Bee Params 8 Clone_instruction: "О, теперь еще и мёд делать! Как можно
        изменить вашу функцию, чтобы или собирать нектар, или делать мёд."
      Course 4 Bee Params 8 new_instruction: "О, теперь еще и мёд делать! Как можно
        изменить вашу функцию, чтобы или собирать нектар, или делать мёд."
      Course 4 Bee Params 8_instruction: "Задача: Мед занимает слишком много места!
        Перепишите функцию, чтобы использовать количество меда, устройств и числом
        нектара. Как бы вы могли использовать эти числа, чтобы решить, вы должны исправить
        их?"
      Course 4 Bee Params Ex_instruction: "Попробуйте использовать вашу новую функцию,
        чтобы собрать весь нектар."
      Course 4 Binary 1_instruction: "Эта функция принимает двоичную последовательность
        единиц и нулей, и указывает фермеру идти слева направо, сверху вниз, поворачиваться
        на ячейках с нулями. Выполните этот код и посмотрите, как фермер использует
        двоичную систему для рисования картинки."
      Course 4 Binary 2_instruction: "Какие двоичные строки можно повторить 8 раз
        для построения этого рисунка? Подсказка: число 1 заполняет ямку."
      Course 4 Binary 3_instruction: "Можете нарисовать этот узор, повторяя одну и
        ту же двоичную строку?"
      Course 4 Binary 5 (copy 1)_instruction: "Какая двоичная строка, повторенная
        10 раз, нарисует это изображение?"
      Course 4 Binary 5_instruction: "Какая двоичная строка, повторенная 10 раз, нарисует
        это изображение?"
      Course 4 Binary 6 (copy 1)_instruction: "Какая двоичная строка, повторенная
        10 раз, нарисует это изображение?"
      Course 4 Binary 6_instruction: "Какая двоичная строка, повторенная 10 раз, нарисует
        это изображение?"
      Course 4 Binary 7_instruction: "Какая двоичная строка, повторенная 10 раз, нарисует
        это изображение?"
      Course 4 Binary 8_instruction: "Можно заполнить большую часть этого изображения,
        разместив в цикле 5-битное двоичное число. В таком случае нужно будет ещё
        одно 4-битное число, чтобы получить правый нижний угол."
      Course 4 EC 1a_instruction: "Никаких правил. Никаких подсказок. Просто задание!"
      Course 4 EC 1b_instruction: "Никаких правил. Никаких подсказок. Просто задание!"
      Course 4 EC 2a_instruction: "** Экстремальное задание: ** Никаких правил. Никаких
        подсказок. Просто задание!"
      Course 4 EC 2b_instruction: "** Экстремальное задание: ** Никаких правил. Никаких
        подсказок. Просто задание!"
      Course 4 EC 2c_instruction: "** Экстремальное задание: ** Никаких правил. Никаких
        подсказок. Просто задание!"
      Course 4 EC 3_instruction: "Чтобы нарисовать это изображение, воспользуйся тем,
        что мы изучили на предыдущих уровнях. Примечание: код становится проще, если
        использовать параметры. "
      Course 4 EC 3a_instruction: "Экстремальное задание: Никаких правил. Никаких
        подсказок. Просто задание!"
      Course 4 Maze 1_instruction: "Помоги сердитой птице добраться до поросёнка!"
      Course 4 Maze 2_instruction: "Избегай взрывчатку!"
      Course 4 Maze 3_instruction: "Запрограммируй сердитых птиц, чтобы добраться
        до поросёнка. "
      Course 4 Maze 4_instruction: Попробуйте использовать блок "repeat", чтобы использовать
        меньше блоков...
      Course 4 Maze 5_instruction: "Можете решить эту задачу, используя наименьшее
        возможное число блоков?"
      Course 4 Maze 6_instruction: "Можете решить эту задачу, используя наименьшее
        возможное число блоков?"
      Course 4 Play Lab For Loops 2_instruction: "На этот раз попробуй перечислить
        нечётные числа от 1 до 100."
      Course 4 Play Lab Params 1_instruction: Эта функция называется "прыжок". Она
        заставляет главного персонажа подпрыгнуть на 100 пикселей. Используйте эту
        функцию, чтобы собрать все флаги.
      Course 4 Play Lab Params 10_instruction: 'Мы добавили последнюю функцию в этом
        уроке. \r \r Запрограммируйте игру так, чтобы вызывалась функция "следующий_уровень"
        если "очки_игрока" > 10 \r \r Играйте в игру и пройдите четвёртый уровень,
        чтобы перейти к следующей головоломке. '
      Course 4 Play Lab Params 2_instruction: "Теперь у нас есть флаги, которые слишком
        высокие для наших текущих скачков! Давайте использовать стрелки вверх и вниз,
        чтобы прыгать на большую высоту. \\r\n\\r\nДобавим к функции прыжка параметр,
        который называется \"высота\". Стрелка вверх должна выполнять прыжок на 200
        пикселей, а стрелка вниз - только на 100 пикселей. \n\\r\n\\r\nПодсказка:
        нажмите \"Редактировать\" на функции скачка и измените её, так чтобы вместо
        простого прыжка на 100 пикселей использовался параметр высоты."
      Course 4 Play Lab Params 3_instruction: "Давайте добавим ещё один параметр в
        функцию прыжка, чтобы можно было использовать её с другими персонажами. Каждый
        персонаж представлен числом, начиная от одного. Измените функцию прыжка, чтобы
        включить в её определение параметр персонажа, чтобы этот персонаж прыгал. "
      Course 4 Play Lab Params 4_instruction: Эта функция называется "патрулировать."
        Измените её так, чтобы переместить кота на 400 пикселей вверх, а потом на
        400 пикселей вниз.
      Course 4 Play Lab Params 5_instruction: Добавьте параметр "персонаж" в функцию
        "патрулировать", чтобы можно было вызвать эту функцию для каждого персонажа.
        Помните, что персонажи соответствуют номера 1, 2 и 3.
      Course 4 Play Lab Params 6_instruction: Добавьте параметр "скорость" к функции
        "патрулировать". Попробуйте использовать блок "задать скорость" с новым параметром
        "скорость", чтобы помочь пингвину добраться до обоих флажков до того, как
        другие персонажи доберутся до них.
      Course 4 Play Lab Params 7_instruction: |-
        Давай повеселимся! Посмотри на написанный код. Можешь ли ты понять назначение каждого блока? \r
        \r Когда закончишь, собери все флажки, используя клавиши со стрелками.
      Course 4 Play Lab Params 8_instruction: Используйте блок "когда прикасается",
        чтобы отправить собаку обратно в верхний левый направление, ТОЛЬКО если собака
        коснется любого другого персонажа.
      Course 4 Play Lab Params 9_instruction: "Вот наша игра с предыдущего этапа,
        но большинство кода скрыто. Есть новая функция, которая называется \"получить
        баллы\".\\r\n\\r\nИзмени эту функцию так, чтобы параметр \"баллы\" добавлялся
        к переменной \"очки игрока\".\\r\n\\r\nПеременная \"очки игрока\" должна увеличиваться
        каждый раз, как Собака касается Кота сердечком, и уменьшаться каждый раз,
        как Кот касается Собаки сердечком.\n\\r\n\\r\nПримечание. Когда готово, нажми
        \"Выполнить\", чтобы играть. Когда Собака наберет 6 баллов, ты сможешь перейти
        к следующему заданию. "
      Course 4 Play Lab Vars 1_instruction: На этот раз вам не придется писать код,
        просто нажмите "Запустить", чтобы поиграть в игру! Вы играете за собаку, которая
        пытается собрать больше флагов, чем кошка. Используйте стрелку вниз, чтобы
        управлять собакой. Нажмите "Готово", когда закончите игру.
      Course 4 Play Lab Vars 2_instruction: Гонки были не совсем справедливым! Поменяйте
        переменную "скорость собаки", чтобы убедиться, что вы можете собрать больше
        флагов, чем кот. Побеждает первый, кто соберет 10 флагов!
      Course 4 Play Lab Vars 3_instruction: "Вот и новый вид игры! Используйте стрелки
        влево и вправо для перемещения, вверх, чтобы прыгать. Посмотрим, сможете ли
        вы собрать все флаги."
      Course 4 Play Lab Vars 4_instruction: 'Теперь у нас есть переменная с названием
        "высота". Она указывает, как высоко может прыгать собака. Измените значение
        этой переменной, чтобы собака могла прыгнуть достаточно высоко, чтобы допрыгнуть
        до всех флагов. Подсказка: новые флаги находятся на высоте 200 пикселей.'
      Course 4 Play Lab Vars 5_instruction: "Давайте создадим игру! Во-первых, нужен
        счёт. Измените код, который вы видели на предыдущем уровне, чтобы задать счёт,
        равный 10. "
      Course 4 Play Lab Vars 6 (copy 1)_instruction: Классно! Теперь у нас есть переменная
        с баллами. Но как мы её будем использовать? Как насчет того, чтобы увеличивать
        эту переменную каждый раз, когда касаемся противника огненным шаром? Используйте
        событие "когда персонаж 2 касается чего-либо", чтобы обновить счёт, когда
        огненный шар ударит кота. Счёт можно увеличивать, установив балл = балл +
        1. Заработайте 10 баллов (по одному за раз!), чтобы пройти уровень.
      Course 4 Play Lab Vars 6_instruction: |-
        Используйте стрелку вправо, чтобы стрелять сердечками. \r
        \r
        Как можно набрать баллы в нашей игре? Добавляй 1 к переменной "баллы" каждый раз, когда собака попадает в кота сердечком. Используй событие "когда персонаж 2 касается чего-либо" для обновления баллов. Можешь увеличивать переменную с помощью команды "баллы=баллы+1". Получи 10 баллов (по одному за раз), чтобы пройти уровень.
      Course 4 Play Lab Vars 7_instruction: "Хорошо, теперь убедимся, что игра не
        слишком легкая. Каждый раз, когда собака (персонаж 1) получает удар желтым
        сердечком от кота (персонаж 2), она должна терять балл. Начинаем с 10 очков,
        чтобы не было слишком сложно. Пусть счет уменьшится с 10 до 0 очков, чтобы
        перейти на следующий уровень."
      Course 4 Play Lab Vars 8 (copy 1)_instruction: Хорошо, и последнее для этой
        игры - сделаем так, чтобы можно было выиграть (или проиграть). Воспользуйтесь
        циклом "всегда", чтобы проверять значение счета. Если балл больше 20, то противник
        должен исчезнуть. Если балл меньше 0, то игрок должен исчезнуть. Щелкните
        "Завершить", когда игра работает так, как вы хотите.
      Course 4 Play Lab Vars 8_instruction: Сделаем так, чтобы собака могла выиграть
        (или проиграть). Воспользуйтесь циклом "всегда", чтобы проверять значение
        счета. Если балл больше 20, то противник (кот) должен исчезнуть. Если балл
        меньше 0, то игрок (собака) должна исчезнуть. Щелкните "Завершить", когда
        игра работает так, как вы хотите.
      Course 4 Play Lab Vars 9_instruction: "Время свободной игры! Здесь присутствуют
        все переменные, которые мы использовали до сих пор, и ещё несколько на всякий
        случай. \\r \n\\r \nУ нас уже так много блоков, что они должны быть организованы!
        Мы поставили каждый блок в соответствующей категории. Посмотрите как они расположены.
        Когда вы будете готовы, сделайте игру или историю, используя циклы, переменные,
        и события. \\r \n\\r\nСовет: прокрутите вниз, чтобы увидеть все доступные
        команды в рабочей области."
      Course 4 Play Lab Vars_instruction: Хорошо, и последнее для этой игры - сделаем
        так, чтобы можно было выиграть (или проиграть). Воспользуйтесь циклом "всегда",
        чтобы проверять значение счета. Если балл больше 20, то противник должен исчезнуть.
        Если балл меньше 0, то игрок должен исчезнуть.
      Course 4 Play Labs For Loops 1_instruction: "Сделаем так, чтобы собака произносила
        каждое число от 1 до 100. Используйте цикл и блок счетчика, чтобы произносить
        значение счетчика каждый раз при выполнении цикла."
      Course 4 Play Labs For Loops 2_instruction: "На этот раз попробуй перечислить
        нечётные числа от 1 до 100."
      Course 4 Play Labs For Loops 3_instruction: "Если мы считаем большими числами,
        то мы можем добраться еще дальше за то же время. Попробуйте сделать так, чтобы
        собака считала от 10 до 1000, каждый раз переходя на десяток."
      Course 4 Play Labs For Loops 4_instruction: "Изменение шага конечно может быть
        полезно, но мы при этом считаем линейно (каждое число отличается от предыдущего
        на одинаковую величину). Что сделать, если нужно считать экспоненциально?
        Не меняя параметры в этом цикле, можете посчитать 1, 4, 9, 16, 25... (счетчик
        в квадрате)?"
      Course 4 Play Labs For Loops 4a_instruction: |-
        А теперь, соединим переменные с Этапа 7 с вашей переменной "счетчик", чтобы создать кое-что интересное. \r
        \r
        В этом задании, собака должна посчитать от 0 до 1000 с "шагом". Установите значение переменной "шаг" 10 в начале своего кода и посмотрите, что будет.
      Course 4 Play Labs For Loops 5_instruction: В последнем задании мы считали квадратами
        чисел. Попробуйте изменить "счетчик ^ 2" на "счетчик ^ 3", чтобы считать кубами
        чисел (1, 8, 27, 64, 125, 216, 343...)
      Course 4 Play Labs For Loops 5a_instruction: |-
        In this puzzle, Dog will be your
        time keeper.\r
        \r
        Dog will count from 0 to 30 by "increment".  The "increment"
        variable will begin with a value of 1.\r
        \r
        Can you make it so that each
        time you click Dog, the increment increases by 2?  Click the forward arrow
        to run the for loop.\r
        \r
        Run the loop a couple of times, clicking Dog before
        each one.
      Course 4 Play Labs For Loops 6_instruction: Вспомним, что простое число - это
        целое число, кратное только единицы и самому себе. Используйте функцию "является
        простым" для перечисление простых чисел от 1 до 100.
      Course 4 Play Labs For Loops 6a_instruction: |-
        Собака считает время, используя цикл "для" с "шагом". Но на этот раз мы добавим Волшебника. Можете изменить код так, чтобы "шаг" увеличивался на 2 с каждым щелчком по волшебнику?\r
        \r
        Осторожно! Волшебник быстро двигается!
      Course 4 Play Labs For Loops 7_instruction: "Можете создать цикл, чтобы помочь
        мне проговорить последовательность 1, 4, 7, 10, 13, 16, 19, 22, 25?"
      Course 4 Play Labs For Loops 7a_instruction: |-
        У нас уже что-то получилось! А что, если мы начнем считать, сколько раз можно щелкнуть на Волшебнику, до того, как Собака дойдет до 30? \r
        \r
        Добавьте блоки к Волшебнику, чтобы каждый раз, когда на нему щёлкают, переменная "щелчков" увеличивалось на 1. Пока что можно игнорировать переменную "шаг".\r
        \r
        Собака начнет отсчет после нажатия "Выполнить".
      Course 4 Play Labs For Loops 8_instruction: |-
        Теперь, поможем персонажам двигаться и считать.\r
        \r
        Собака должна двигаться и каждый раз добавлять 2 (счётчик + 2). Кот должен двигаться и каждый раз умножать на 2 (счётчик * 2). Пингвин должен двигаться и каждый раз возводить в степень 2 (счётчик ^ 2). Кто доберётся до флага первым?
      Course 4 Play Labs For Loops 8a_instruction: |-
        Чтобы завершить игру, нужно вернуть переменную "шаг"! Давайте привяжем её к уровню игры.\r
        \r
        1) Считайте сколько было щелчков по волшебнику.\r
        \r
        2) Если по волшебнику щелкнули по крайней мере 10 раз до того, как Собака посчитала до 30, то тогда увеличим "шаг" на 1 и начнем заново.\r
        3) Если по волшебнику не щелкнули по крайней мере 10 раз, то игра заканчивается.
      Course 4 SCF 1_instruction: "Воспользуйся предлагаемыми функциями, чтобы нарисовать
        четыре ряда шестиугольников. Заметьте, как четные ряды смещаются вправо."
      Course 4 SCF 1a_instruction: "Догадаетесь, как собрать весь нектар с помощью
        наименьшего возможного количества блоков?"
      Course 4 SCF 1b_instruction: "Догадаетесь, как собрать весь нектар с помощью
        наименьшего возможного количества блоков?"
      Course 4 SCF 2_instruction: "Чтобы нарисовать это изображение, воспользуйся
        тем, что мы изучили на предыдущем уровне. Примечание: код становится проще,
        если использовать параметры. "
      Course 4 SCF 3 Fail 1_instruction: "Догадаешься, как..."
      Course 4 SCF 3 Fail 2_instruction: "Догадаешься, как..."
      Course 4 SCF 3_instruction: "Чтобы нарисовать это изображение, воспользуйся
        тем, что мы изучили на предыдущем уровне. Примечание: код становится проще,
        если использовать параметры. "
      Course 4 SCFL 1_instruction: "Реши эту задачу с помощью наименьшего возможного
        количества блоков."
      Course 4 SCFL 1a_instruction: "Поможешь Скрату добраться до жёлудя с помощью
        наименьшего количества блоков?"
      Course 4 SCFL 1b_instruction: "Поможешь Скрату добраться до жёлудя с помощью
        наименьшего количества блоков?"
      Course 4 SCFL 2_instruction: "Реши эту задачу с помощью наименьшего возможного
        количества блоков."
      Course 4 SCFL 3_instruction: "Можешь догадаться как нарисовать эту фигуру?"
      Course 4 SCFL 4_instruction: "Можешь догадаться как нарисовать эту фигуру?"
      Course 4 SCFL 5_instruction: "Можешь догадаться как нарисовать эту фигуру?"
      Course 4 SCFL 6_instruction: "Можешь выяснить как нарисовать эту фигуру, используя
        один цикл?"
      Course 4 SCFL 7_instruction: "Художник хочет поймать волну! Сможешь помочь воспроизвести
        этот рисунок?"
      Course 4 SCFP 1_instruction: "Создай функцию с параметрами, которая позволит
        Художнику перепрыгивать вперед и назад на X пикселей, а также вверх и вниз
        на Y пикселей (используй положительные и отрицательные числа)."
      Course 4 SCV 1_instruction: "Нажми здесь, чтобы просмотреть инструкции ещё раз."
      Course 4 SCV 2_instruction: "Нажми здесь, чтобы просмотреть инструкции ещё раз."
      Course 4 SCV 3_instruction: |-
        А теперь к игре! Поймай Кота, чтобы получить 2 балла. Поймай Пингвина, чтобы получить 3 балла. Заработай 10 баллов для победы!\r
        Внимательно - когда Кот и Пингвин касаются друг друга, то баллы теряются.\r
        \r
        Добавляй необходимые блоки, чтобы игра работала согласно инструкциям. Как можно заставить Собаку двигаться в разных направлениях с помощью стрелок? Как добавлять баллы, когда Собака ловит Кота или Пингвина? Как вычитать баллы, когда Кот и Пингвин касаются друг друга?
      Course 4 SCV 4_instruction: "Реши эту задачу с помощью наименьшего возможного
        количества блоков."
      Course 4 SCV 5_instruction: "Реши эту задачу с помощью наименьшего возможного
        количества блоков."
      Course 4 SCV 6_instruction: "Нажми здесь, чтобы просмотреть инструкции ещё раз."
      Course 4 SCVP 1_instruction: "Создай функцию с параметрами, которая позволит
        Художнику перепрыгивать вперед и назад на X пикселей, а также вверх и вниз
        на Y пикселей (используй положительные и отрицательные числа)."
      Course 4 Variables Assessment_instruction: "Можешь создать это изображение,
        используя переменную для сторон? Каждая линия должна иметь длину 50 пикселей."
      Course1BeePuzzle12_instruction: "Получите три нектара и затем сделайте два мёда"
      Course1MazeAssessment1_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig
      Course1MazeAssessment2_instruction: |-
        This is a test!\r
        Move one way, then
        another to get me to the pig.
      CSP Data Unit - Counting Multiple Things_instruction: |-
        If you can count one
        thing you can count multiple things\r
        \r
        Find out how many people like something
        other than dogs and cats\r
        \r
        Count dogs\r
        Count cats\r
        Count total\r
        Do
        the math\r
        \r
        blank/ blank toal\r
        \r
        Can also use this to find percents
        from this\r
        \r
        x% are dog lovers
      CSP Data Unit -Counting Records - Easy Way_instruction: |
        ReadRecords with specific
        criteria \r
        find the length of an array\r
      CSP Data Unit -Counting Records - Hard Way_instruction: |
        \r
        1. ReadRecords
        for all records\r
        2. Way to loop through and count\r
      CSP U4 - JSON Object Intro - Bad Way_instruction: |
        Trigger both the keyboard
        and mouse event and examine the event objects displayed in the console. Why
        might an object be the best way to store this information? (Click to see full
        instructions)
      CSP U4 - JSON Object Intro - Good Way_instruction: "Create an object with at\nleast
        5 values including at least one string and one number. (Click to see\nfull
        instructions) \n"
      CSP U4 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      drawings!_instruction: |
        Draw the equilateral triangle - all the sides are the
        same!
      ECSPD Binary Odometer_instruction: |
        This is another resource you could use
        with your students.
      Eval Booleans 1_instruction: |
        Boolean operators (like >, <, =) allow us to
        compare different values, returning either true or false. Click "Run" to
        see how this expression evaluates.
      Eval Booleans 2_instruction: |
        Can you set the values so that this expression
        evaluates as true?
      Eval Booleans 3_instruction: |
        The string-length function returns the number
        of characters in a string (including spaces!) - make this code evaluate to
        true.
      Eval Booleans 4_instruction: |
        Here's an Evaluation Block called AND - it returns
        true if both of its parameters are true, otherwise it returns false. Edit
        the x variable so that this expression returns true.
      Eval Booleans 5_instruction: |
        This OR block returns true if either of its parameters
        is true. Otherwise, if both parameters are false it will return false. Set
        the y variable to a value that will cause this expression to return false.
      Eval Booleans 6_instruction: |
        Here's one more boolean block called NOT. This
        block flips true to false, or false to true. If you wrap this block of code
        in a NOT block, it should return true (because we are asking if the two expressions
        do NOT produce equal values).
      Eval Booleans Free Play_instruction: |
        Free Play: Try out some creations of
        your own using Booleans.
      Eval Booleans_instruction: |
        Booleans allow us to compare different values,
        returning "true" if the are equal, or "false" if they are not. What do
        you think this code will evaluate to?
      Eval Cond 1_instruction: |
        The cond block checks the boolean expressions in
        the left column, and as soon as it finds one that returns "true" it runs
        the corresponding code on the right. If none of the expressions evaluate to
        "true," it runs the bottom block. Update the "temperature" variable so
        that this block returns "It's just right."
      Eval Cond 2 (copy 1)_instruction: |
        This condition returns a different shape
        based on the value of the "sides" variable - change the value of "sides"
        so that the conditional returns a triangle.
      Eval Cond 2_instruction: |
        This condition returns a different shape based on
        the value of the "sides" variable - change the value of "sides" so that
        the conditional returns a triangle.
      Eval Cond 3 (copy 1)_instruction: |
        Can you write a conditional that checks
        the variable "age" and returns "Old enough to vote and drive" if age >
        17, "Old enough to drive" if age is > 15, and "Can't drive or vote" if
        neither conditions is true. Hint: The first condition to return "true" wins
        - make sure you put your conditions in the right order.
      Eval Cond 3_instruction: |
        Can you write a conditional that checks the variable
        "age" and returns "Old enough to vote and drive" if age > 17, "Old enough
        to drive" if age is > 15, and "Can't drive or vote" if neither conditions
        is true. Hint: The first condition to return "true" wins - make sure you
        put your conditions in the right order.
      Eval Cond 4_instruction: |
        We can use the string=? function to make conditionals
        that respond to text input. Here's a function called green shape that takes
        a string for the type of shape. Complete the conditions so that the correct
        solid green shape is returned when the function is run with "circle", "triangle",
        "square", or "rectangle".
      Eval Cond 5_instruction: |
        Here's a similar function red shape with an additional
        variable for size. Complete the conditionals so the correct solid red image
        of a given size is drawn for "circle", "triangle", and "star".
      Eval Cond 6_instruction: |-
        Write a function called food-critic, which takes
        in the name of a food and produces a String that says how you feel about that
        food. For example, (food-critic “pizza”) might evaluate to “delicious”, but
        (food-critic “rotten eggs”) might evaluate to “gross!”. Choose at least two
        foods to review, but you can you write more if you like!  Don’t forget to
        add an “else” clause!\r
        One example - and part of the definition -  has already
        been done for you!
      Eval Cond 7_instruction: |
        Free Play: Write a function called green-shape, which
        takes in the name of a shape and produces a solid green shape. Your function
        should work with at least “circle”, “star” and “rectangle”, but you can add
        other shapes if you like. You can choose the size of each shape. Don’t forget
        to add an “else” clause!\r
        One example - and part of the definition -  has
        already been done for you!\r
      Eval Cond 8_instruction: |
        Free Play: Suppose you want to own a car at 21, or
        have your own business by 30. Write a function called life-goals, which takes
        in an age and produces a string that describes your life goals by then. Don’t
        forget to add an “else” clause!\r
      Eval Contracts 1_instruction: |
        Use the "star" function to produce a red star
        with a 60 pixel radius
      Eval Contracts 10A_instruction: |
        Alright let's complete this puzzle with a
        Green Square that is 175 pixels in size.
      Eval Contracts 11A_instruction: |
        Can you complete this puzzle to read "Hello
        World" in the banner?
      Eval Contracts 2_instruction: |
        Check out the "rotate" function - can you
        use it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts 3_instruction: |
        Try using the "text" function to write this
        teal text at size 40.
      Eval Contracts 4 A_instruction: |
        The "scale" function returns an image that
        is scaled either larger or smaller than the input image. Try scaling this
        circle by a factor of 10 - how is the resulting image different than if you'd
        just made a circle of that size in the first place?
      Eval Contracts 4_instruction: |
        The scale function returns an image that is
        either larger or smaller than the input image. Try scaling this circle by
        a factor of 10. How is the returned image different than if you'd just made
        a circle of that size in the first place?
      Eval Contracts 8A_instruction: |
        Can you complete this puzzle? The big-triangle
        is 200 pixels in size and purple?
      Eval Contracts A_instruction: |
        Use the star function to produce a solid red
        star with a 60 pixel radius
      Eval Contracts C_instruction: |
        Check out the rotate function - can you use
        it to rotate this 90 pixel green square by 45 degrees?
      Eval Contracts E_instruction: |
        Try using the text function to write "Hello,
        world!" in teal at size 40.
      Eval Contracts shrink_instruction: "Can you complete this image using the \"shrink\"\nfunction
        block? The radius is 20. \n"
      Eval Define Funcs 1_instruction: |
        Here's a new function called green-triangle
        that takes a single Number for size and produces a green triangle. Use the
        new function to create a 125 pixel green triangle.
      Eval Define Funcs 2_instruction: |
        Let's look inside that green-triangle function
        to see how it works. Can you modify it so that the green-triangle function
        always draws outlined green triangles?
      Eval Define Funcs 3_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Define Funcs 4_instruction: |
        Create a new function called aqua-star that
        has a Domain of a single Number for radius and returns an aqua star of the
        given radius. Run your new function with a radius of 75.
      Eval Define Funcs 5_instruction: |
        Let's use that aqua-star function to make
        a row of different sized stars. From left to right, the stars should have
        radii of 25, 50, and 75.
      Eval Define Funcs Test_instruction: |
        Here's the start of another new function
        called purple-circle with a domain of one Number (the radius) and a range
        of Image. The body of the function is broken though - fix it and then make
        a purple circle with 150 pixel radius
      Eval Defining Vars Free Play 1_instruction: |
        Free Play: We've provided a function
        that fills your screen with my-image. Change my-image to see what patterns
        you can make.
      Eval Design Recipe .1_instruction: |
        Here's a Design Recipe for a function
        called square-circle with domain Number String and range Image. Click Edit
        to write the function definition (you will see two examples provided).
      Eval Design Recipe 1 (copy 1)_instruction: |
        We're going to write a function
        that draws a solid rectangle of any color that is twice wide as it is high.
        Start with an example - draw a solid green rectangle that has a height on
        100 pixels.
      Eval Design Recipe 1_instruction: |
        Alright, now given the Contract wide-rect:
        Number String -> Image, write an example - draw a solid green rectangle that
        has a height of 100 pixels.
      Eval Design Recipe 2 (copy 1)_instruction: |
        Let's do one more example before
        writing the function definition - this time draw a solid red rectangle with
        a height of 75 pixels.
      Eval Design Recipe 2_instruction: |
        Let's do one more example before writing
        the function definition - this time draw a solid red rectangle with a height
        of 75 pixels.
      Eval Design Recipe 3_instruction: |
        The Design Recipe for wide-rect already
        has a contract and one example. Can you write a second example and then complete
        the definition? The wide-rect function should produce a rectangle of given
        color that is twice as wide as it is high.
      Eval Design Recipe 4_instruction: |
        Use the Design Recipe to create a function
        starburst. When given a number of points and an outer radius, starburst returns
        a yellow radial star with given points, and an inner radius that is half the
        outer radius.
      Eval Design Recipe 5_instruction: |
        Using the Design Recipe, write a function
        striped-flag that takes two colors and produces a flag that is 250 pixels
        wide, 150 pixels tall, with three even horizontal stripes of given colors,
        in the order color2, color1, color2.
      Eval Design Recipe 6_instruction: |
        Write a function large-polygon that should
        output a solid polygon of given sides and color that takes up most of the
        window, regardless of the number of sides. To make sure that the polygon doesn't
        get too large as you increase the number of sides, side length should be inversely
        proportional to side number, with a length of (800/sides).
      Eval Design Recipe Free Play_instruction: |
        Free Play: Use the Design Recipe
        to create some functions of your own design
      Eval Free Play_instruction: 'Free Play: Make art with code!'
      Eval Strings Images .1_instruction: |
        So far we've only dealt with a single
        type of data, Numbers. Another type of data is a String, which is any combination
        of letters, numbers, or other characters wrapped in quotation marks. Run the
        String "Hello, world!" and see what happens.
      Eval Strings Images .2_instruction: |
        The string-append function takes two Strings
        and returns a single combined String. Add a String "Universe" to the second
        argument of string-append.
      Eval Strings Images 1_instruction: |
        The third type of data we're going to
        use is an Image. This star function takes in a Number and two Strings, and
        it evaluates to an Image. Use this function to make a solid red star with
        radius of 100.
      Eval Strings Images 2_instruction: |
        Free Play: Every Evaluation Block is color-coded
        to let you know which data type it returns and which types it needs for its
        parameters. The last parameter of the triangle function takes a String that
        controls its color - try some different colors to see what works.
      Eval Strings Images 3_instruction: |
        Some functions can only take a specific
        set of Strings, such as the second argument of this circle function, which
        controls its style. Draw this orange outline circle using the special String
        block with a dropdown to make sure you only use valid styles.
      Eval Strings Images 4_instruction: |
        Try using the rectangle block to draw this
        solid, red rectangle - it is 175 pixels wide and 100 pixels tall.
      Eval Strings Images 5_instruction: |
        Try using this new Evaluation Block called
        overlay to place a 100 pixel white triangle on top of a 200 pixel red circle.
      Eval Strings Images 6_instruction: |
        Use the overlay block to place a 75 pixel
        radius yellow star on top of a 150 pixel long blue square.
      Eval Strings Images 7_instruction: |
        The offset block lets you move an image
        relative to where it would normally be placed. Use this block to offset the
        square by 100 pixels on the y-axis.
      Eval Strings Images 8_instruction: |
        Here's a different kind of star block
        - it's called radial-star and it allows you to draw stars with any number
        of points! Use it to create a 7 point solid orange star with an inner radius
        of 75 pixels and an outer radius of 175 pixels.
      Eval Strings Images Free Play_instruction: |
        Free Play: Explore the blocks available
        to create something interesting. Make sure to share your favorite creations.
      Farmer for Authored Hint testing_instruction: |
        Wow, I found a really deep hole!
        I don't know how many shovelfuls of dirt it needs.  Can you write a program
        that fills it until the ground is even?  Hint:  Try using the while loop this
        time.
      Frequency Analysis_instruction: Test
      frozen circle function in circle_instruction: "Теперь создадим 20 пересекающихся
        кругов, поворачивая на 18 градусов после каждого круга."
      frozen circle function with parameter_instruction: "Вот блок «Создать круг»,
        который рисует круги разных размеров. Сможете использовать его для создания
        маленького круга размером 5 и большого круга размером 10?"
      frozen circle function_instruction: Используйте новый блок "Создать круг" для
        создания 10 пересекающихся кругов. Не забывайте прыгать вперед между кругами.
      frozen circle_instruction: "Круг это особая форма. Вы можете выяснить, на какое
        число нужно заменить знаки вопроса чтобы нарисовать круг?"
      frozen cross rotate dense_instruction: "Повторим это 90 раз! Сколько раз по
        90 в 360? Подсказка: Это очень небольшое число."
      frozen cross rotate_instruction: "Теперь попробуйте повторить это 10 раз. На
        сколько градусов нужно повернуть после каждой линии?"
      frozen cross_instruction: Размести эти команды внутри блока "Повторить", чтобы
        создать знак плюса. А вы заметили, что Эльза может двигаться вперёд и назад?
      frozen diamond mini snowflake_instruction: Знаешь ли ты, что каждая снежинка
        имеет уникальную форму? Создадим новую снежинку, используя блок "Повторить"
        для рисования параллелограмма 4 раза, поворачивая на 90 градусов после каждой
        фигуры.
      frozen diamond snowflake_instruction: "Теперь давайте создадим новую снежинку,
        повторив параллелограмм 10 раз, и поворачивая на 36 градусов после каждого
        из них."
      frozen diamond_instruction: "Примени блок повторения вокруг этих блоков, чтобы
        нарисовать параллелограмм. Он похож на квадрат, но с разными углами. Вот этот
        параллелограмм имеет углы 60 и 120 градусов, тогда как в квадрате все углы
        по 90 градусов."
      frozen freeplay_instruction: "Теперь вы - настоящий художник! Создайте зимнюю
        Страну чудес и покажите ее друзьям."
      frozen line_instruction: "Привет! Я - Эльза из Эренделла. Помогите мне провести
        простую линию."
      frozen perpendicular_instruction: "Теперь давайте посмотрим, сможем ли мы создать
        две линии, которые находятся под углом 90 градусов друг к другу. Вам будет
        нужно использовать блок «Повернуть», а также блок «Двигаться»."
      frozen snowflake branch_instruction: "Попробуйте использовать блок «Создать
        ветвь снежинки» для создания трех ветвей, которые становятся похожи на целую
        снежинку."
      frozen snowflake full_instruction: "Теперь давайте повторим это 8 раз, чтобы
        сделать красивую снежинку!"
      frozen snowflower_instruction: "Замысловатые снежные узоры могут быть созданы
        из очень простых форм. Вы можете сделать узор, повторяя 5 кругов размером
        5, и 5 кругов размером 10?"
      frozen square iterative_instruction: "Кажется, мы на полпути чтобы сделать квадрат.
        Давайте соединим вместе 4 линии для создания квадрата."
      frozen square loop 3x_instruction: "Давайте создадим три квадрата. Поворачивайте
        на 120 градусов после каждого квадрата."
      frozen square loop_instruction: "Привет, я Анна из Эренделла! Давайте сделаем
        квадрат используя блок «Повторить», в который вложим другие блоки. Какое число
        (???) надо указать в блоке «Повторить», чтобы получился квадрат?"
      frozen square snowflake_instruction: "Вы можете создать снежинку, используя
        блок «Повторить», чтобы сделать квадрат 10 раз, и блок «Повернуть», чтобы
        повернуть на 36 градусов после каждого квадрата?"
      Infinity_catch_instruction: Используя клавиши со стрелками, можете сделать так,
        чтобы Эльза ("персонаж 2") догнала Анну?
      Infinity_finale_instruction: "Создайте что хотите и поделитесь этим с друзьями!"
      Infinity_move_collide_instruction: Хиро это "персонаж 1". Подвиньте его вправо
        к Баймаксу и воспроизведите звук, когда они соприкоснутся.
      Infinity_move_directions_instruction: Баймакс это "персонаж 2". Добавьте блоки
        "двигаться" и передвигайте его с помощью стрелок. Сделайте так, чтобы он дотронулся
        до других двух героев.
      Infinity_move_right_instruction: Хиро это "персонаж 1". Используя блок "двигаться",
        подвиньте его вправо, чтобы он дотронулся до Баймакса.
      Infinity_repeat_instruction: "Используйте блок «повторять бесконечно», чтобы
        \ Анна двигалась вверх и вниз на 400 пикселей."
      Infinity_say_instruction: Используйте блок "сказать", чтобы Анна сказала "привет".
      Infinity_shoot_instruction: Баймакс это  "персонаж 2". Заставьте Баймакса запустить
        ракету в Хиро.
      Infinity_shoot_directions_instruction: Хиро это "персонаж 3". Заставьте его
        бросить по снаряду в каждого их четырёх персонажей. Подождите одну секунду
        между бросками.
      Infinity_test_instruction: This is a test Infinity level.
      Infinity_touch_faster_instruction: "Прикоснитесь ещё к нескольким снежинкам!"
      Infinity_touch_four_instruction: "Передвиньте Анну вверх, вниз, влево, и вправо,
        чтобы она дотронулась до каждой из четырёх снежинок."
      Infinity_touch_score_instruction: Зарабатывайте очки, когда Анна коснётся снежинок.
        Нажмите "Выполнить" и коснитесь каждой снежинки по одному разу.
      jessie-test_instruction: Lots of instructions
      Just for Testing_instruction: Test instructions
      K-1 Artist 1 Assessment 1_instruction: "Нарисуйте короткую линию вверх и длинную
        вправо!"
      K-1 artist 1 level 10_instruction: "Нарисуйте пунктирную линию с помощью блоков
        рисования и прыжка"
      K-1 artist 1 level 9_instruction: "Нарисуйте это, используя три линии"
      K-1 Artist Loops 1_instruction: "Нарисуйте эту линию двигаясь на восток 4 раза."
      K-1 Artist Loops 2_instruction: "Можете нарисовать ту же самую линию, используя
        цикл?"
      K-1 Artist Loops 3_instruction: "Можете поместить эти блоки в цикл, чтобы нарисовать
        6 линий?"
      K-1 Artist Loops 4_instruction: "Можем ли мы использовать цикл, чтобы нарисовать
        верх этого замка?"
      K-1 Artist Loops 5_instruction: "Что надо повторить в цикле 4 раза, чтобы нарисовать
        эти лестницы?"
      K-1 Artist Loops 6_instruction: "Здесь нужно два цикла: один чтобы подняться
        по лестнице, второй чтобы спуститься."
      K-1 Artist Loops 7_instruction: "Можете нарисовать этот узор используя два цикла?"
      K-1 Artist Loops 8_instruction: "У этой лестницы более длинные ступеньки."
      K-1 Artist Loops 9_instruction: "Тест: используйте цикл, чтобы нарисовать лестницы"
      K-1 Artist Loops Free Play_instruction: "Свободная игра! Нарисуйте что-нибудь
        весёлое!"
      K-1 Artist1 1_instruction: "Нарисуйте ногу человека одной линией"
      K-1 Artist1 10_instruction: "Рисуйте и прыгайте чтобы сделать пунктирную линию
        к сокровищу X"
      K-1 Artist1 2_instruction: "Нарисуйте коту усы используя две линии!"
      K-1 Artist1 3_instruction: "Нарисуйте две линии на восток и две на север, чтобы
        закончить дом!"
      K-1 Artist1 4_instruction: "Нарисуйте линии вверх, горизонтально, и вниз, чтобы
        закончить замок!"
      K-1 Artist1 5.5_instruction: "Закончите третью башню замка, используя короткие
        линии"
      K-1 Artist1 5_instruction: "Нарисуйте стебель этого цветка двумя линиями!"
      K-1 Artist1 6_instruction: Закончите картинку используя блок "прыжок"!
      K-1 Artist1 7_instruction: "Используйте блок прыжка для перемещения без рисования.
        Прыгните вверх и нарисуйте линию."
      K-1 Artist1 8_instruction: "Нарисуйте пунктирную линию с помощью блоков рисования
        и прыжка"
      K-1 Artist1 9_instruction: "Нарисуйте пунктирную линию с помощью блоков рисования
        и прыжка"
      K-1 Artist1 Assessment 1_instruction: "Нарисуйте короткие и длинные линии!"
      K-1 Artist1 Assessment 2_instruction: "Нарисуйте короткие пунктирные линии!"
      K-1 Artist2 1_instruction: "Нарисуйте квадрат ниже треугольника."
      K-1 Artist2 2_instruction: "Сделайте прыжок и нарисуйте квадрат возле дома."
      K-1 Artist2 3_instruction: "Над этим квадратом нарисуйте еще один квадрат"
      K-1 Artist2 4_instruction: "Нарисуйте прямоугольник для завершения моста."
      K-1 Artist2 5_instruction: "Нарисуйте прямоугольник для завершения опоры моста"
      K-1 Artist2 6_instruction: "Нарисуйте два квадраты, чтобы сделать прямоугольник!"
      K-1 Artist2 Assessment1_instruction: "Оценка: Нарисуйте квадрат возле другого
        квадрата."
      K-1 Artist2 Free Draw_instruction: "Нарисуйте что-нибудь!"
      K-1 Artist2_7_instruction: "Нарисуйте прямоугольник, чтобы добавить комоду верхний
        ящик!"
      K-1 Bee 1_instruction: "Переместите меня на цветок, возьмите нектар, а затем
        переместите меня на соты и сделайте мёд"
      K-1 Bee 10_instruction: "Возьмите четыре нектара и сделайте два меда!"
      K-1 Bee 11.5_instruction: "Возьмите четыре нектара и сделайте четыре меда!"
      K-1 Bee 11_instruction: "Возьмите три нектара и сделайте мед"
      K-1 Bee 12_instruction: "Возьмите три нектара и сделайте два меда!"
      K-1 Bee 13_instruction: "Возьмите три нектара и сделайте мед!"
      K-1 Bee 14_instruction: "Переместите меня к нектару, возьмите его, затем переместите
        меня к меду и сделайте мёд"
      K-1 Bee 15_instruction: "Возьмите два нектара и сделайте два меда!"
      K-1 Bee 2_instruction: "Переместите меня на цветок, возьмите нектар, а затем
        переместите меня на соты и сделайте мёд"
      K-1 Bee 3_instruction: "Переместите меня на цветок, возьмите нектар, а затем
        переместите меня на соты и сделайте мёд"
      K-1 Bee 4_instruction: "Возьмите два нектара и сделайте два меда!"
      K-1 Bee 5_instruction: "Возьмите три нектара и сделайте три меда!"
      K-1 Bee 6_instruction: "Возьмите два нектара и сделайте два меда!"
      K-1 Bee 7_instruction: "Возьмите три нектара и сделайте два меда!"
      K-1 Bee 8_instruction: "Возьмите два нектара и сделайте два меда!"
      K-1 Bee 9_instruction: "Возьмите два нектара и сделайте два меда!"
      K-1 Bee Assessment 1_instruction: "Возьмите нектар, чтобы сделать мед!"
      K-1 Bee Assessment 2_instruction: "Возьмите нектар, чтобы сделать мед!"
      K-1 Bee Loops 1_instruction: "Возьмите нектар, чтобы сделать мед!"
      K-1 Bee Loops 10_instruction: "Используйте циклы, чтобы получить нектар, мед
        и чтобы двигаться!"
      K-1 Bee Loops 11_instruction: "Оценка: Используйте циклы, чтобы получить нектар
        и мед!"
      K-1 Bee Loops 12_instruction: "Оценка: Используйте циклы, чтобы получить нектар,
        мед и чтобы двигаться!"
      K-1 Bee Loops 2_instruction: "Используйте цикл чтобы двигаться, затем возьмите
        нектар и сделайте мед!"
      K-1 Bee Loops 3_instruction: "Используйте циклы, чтобы получить нектар и сделать
        мёд!"
      K-1 Bee Loops 4_instruction: "Используйте циклы, чтобы двигаться, получить нектар,
        и сделать мёд!"
      K-1 Bee Loops 5_instruction: "Используйте циклы, чтобы получить нектар и мёд!"
      K-1 Bee Loops 6_instruction: "Используйте циклы, чтобы получить нектар, мед
        и чтобы двигаться!"
      K-1 Bee Loops 7_instruction: "Используйте циклы, чтобы получить нектар и сделать
        мёд!"
      K-1 Bee Loops 8_instruction: "Используйте циклы, чтобы получить нектар и сделать
        мёд!"
      K-1 Bee Loops 9_instruction: "Используйте циклы, чтобы получить нектар, мед
        и чтобы двигаться!"
      K-1 Bee Loops Assessment 1_instruction: "Соберите нектар, чтобы сделать мёд.
        Используйте циклы, чтобы двигаться!"
      K-1 Bee Loops Assessment 2_instruction: "Используйте циклы, чтобы собрать нектар
        и сделать мёд!"
      K-1 Bee Puzzle 12_instruction: "Получите три нектара и затем сделайте два мёда"
      K-1 Building a Foundation Assessment_instruction: "Построй трехуровневую пирамиду.
        Других указаний нет, так что складывай блоки, пока не получишь правильный
        результат!"
      k-1 maze 1_instruction: "Поможешь мне двигаться на запад, чтобы добраться до
        свиньи?"
      K-1 Maze 10_instruction: "Помоги мне обойди взрывчатку и добраться до свиньи! "
      K-1 Maze 11_instruction: "Проследи путь и проведи меня к глупой свинье. Избегай
        взрывчатку, или полетят перья! Подсказка: Она находится к югу от меня."
      K-1 Maze 2_instruction: "Двигай меня на восток, чтобы добраться до свиньи!"
      K-1 Maze 3_instruction: "Двигай меня на юг, чтобы добраться до свиньи!"
      K-1 Maze 4_instruction: "Двигай меня на север, чтобы добраться до свиньи!"
      K-1 Maze 5_instruction: "Двигай меня на восток, чтобы добраться до свиньи!"
      K-1 Maze 6_instruction: "Перемести меня в одну сторону, затем в другую, чтобы
        добраться до свиньи!"
      K-1 Maze 7_instruction: "Перемести меня в одну сторону, затем в другую, чтобы
        добраться до свиньи!"
      K-1 Maze 8_instruction: "Перемести меня в одну сторону, затем в другую, чтобы
        добраться до свиньи!"
      K-1 Maze 9_instruction: "Перемести меня в одну сторону, затем в другую, чтобы
        добраться до свиньи!"
      K-1 Maze Assessment 1_instruction: "Тест - Помоги добраться до свиньи!"
      K-1 Maze Assessment 12_instruction: "Уровень теста"
      K-1 Maze Assessment 13_instruction: "Уровень теста"
      K-1 Maze Assessment 2_instruction: "Тест - Помоги добраться до свиньи!"
      K-1 maze debug 1_instruction: "Измени код, чтобы помочь мне добраться до свиньи!"
      K-1 maze debug 10_instruction: "Отладь этот уровень переставляя и добавляя блоки,
        чтобы добраться до свиньи!"
      K-1 maze debug 11_instruction: "Испытание! \\r Отладь этот уровень, переставляя
        и добавляя блоки, чтобы добраться свиньи"
      K-1 maze debug 2_instruction: "Выясни чего не хватает, а потом добавь блоки,
        чтобы добраться до свиньи!"
      K-1 maze debug 3_instruction: "Выясни в чем ошибка, а потом УДАЛИ блоки, чтобы
        добраться до свиньи!"
      K-1 maze debug 4_instruction: "Посмотри на эти блоки и исправь их! Кажется,
        я двигаюсь в неправильном направлении."
      K-1 maze debug 5_instruction: "Наладь этот уровень, переставляя и добавляя блоки,
        чтобы добраться до свиньи!"
      K-1 maze debug 6_instruction: "Отладь этот уровень переставляя и добавляя блоки,
        чтобы добраться до свиньи!"
      K-1 maze debug 7_instruction: "Отладь этот уровень переставляя и добавляя блоки,
        чтобы добраться до свиньи!"
      K-1 maze debug 8_instruction: "Наладь этот уровень, переставляя и добавляя блоки,
        чтобы добраться до свиньи!"
      K-1 maze debug 9_instruction: "Отладь этот уровень переставляя и добавляя блоки,
        чтобы добраться до свиньи!"
      K-1 Maze debug Assessment 1_instruction: "Тест- наладь этот уровень переставляя
        и добавляя блоки, чтобы добраться до свиньи!"
      K-1 Maze Loops 1_instruction: "Подбрось меня до поросенка!"
      K-1 Maze Loops 10_instruction: Приведи меня к свинье! Используй цикл "повторить".
      K-1 Maze Loops 11_instruction: Приведи меня к свинье! Используй цикл "повторить".
      K-1 Maze Loops 12_instruction: Приведи меня к свинье! Используй цикл "повторить".
      K-1 Maze Loops 2_instruction: Используй блок "Повторить", чтобы привести меня
        к свинье!
      K-1 Maze Loops 3_instruction: Приведи меня к свинье! Используй цикл "повторить".
      K-1 Maze Loops 4_instruction: "Подбрось меня до поросенка!"
      K-1 Maze Loops 5_instruction: Приведи меня к свинье! Используй цикл "повторить".
      K-1 Maze Loops 6_instruction: Приведи меня к свинье! Используй цикл "повторить".
      K-1 Maze Loops 7_instruction: Приведи меня к свинье! Используй цикл "повторить".
      K-1 Maze Loops 8_instruction: Приведи меня к свинье! Используй цикл "повторить".
      K-1 Maze Loops 9_instruction: "Подбрось меня до поросенка!"
      K-1 Maze Loops Assessment 1_instruction: "Посмотрим, чему ты научился! Используйте
        цикл повторить, чтобы добраться до свиньи!"
      K-1 Maze Loops Assessment 2_instruction: "Используйте цикл повторить, чтобы
        добраться до свиньи!"
      K-1 Maze Multi 14_instruction: "Уровень теста"
      K-1 Maze Multi 15_instruction: "Уровень теста"
      K-1 Maze Sequence Assessment 1_instruction: |-
        Посмотрим, чему ты научился! \r
        Двигайся сначала в одну, а затем в другую сторону, чтобы добраться до свиньи.
      K-1 Maze Sequence Assessment 2_instruction: "Двигайся сначала в одну, а затем
        в другую сторону, чтобы добраться до свиньи."
      kikiTesting_instruction: |
        .\r
         .\r
        .\r
        .\r
        .\r
        .\r
        \r
        .\r
        \r
      love_spring_1_instruction: |
        Let's celebrate Spring!  We have put some seeds
        in the ground to prepare for the season's flowers.  Can you cover them up
        so that the birds don't eat them?
      love_spring_2_instruction: |
        Our flowers are in full bloom!  Now we need the
        bee to grab nectar from each one so he can make plenty of honey back at his
        hive!
      love_spring_3_instruction: |-
        Figure out how to change this code so that Robin
        chooses a number between 1 and 20.  \r
        \r
        When you're ready, press "Run"
        and play until you guess Robin's number!
      Luigi's Pizza 1_instruction: |
        Welcome to Luigi's Pizza! To order a pizza,
        type the name of a topping into the cost function, and we'll return the price
        of that pizza. Try ordering a pepperoni pizza to start.
      Luigi's Pizza 2 (copy 1)_instruction: |
        Right now there are only four choices
        available at Luigi's pizza - let's fix that! Add a couple of new toppings
        to the conditional block in the "cost" function. Once you've added your
        toppings, test out the function to make sure it works.
      Luigi's Pizza 2_instruction: |
        Right now there are only four choices available
        at Luigi's pizza - let's fix that! Add a couple of new toppings to the conditional
        block in the cost function. Once you've added your toppings, test out the
        function to make sure it works.
      Luigi's Pizza 3 (copy 1)_instruction: |
        That's better, everyone loves more
        variety in their pizza toppings! But you still can't please everyone, and
        folks are coming in to order toppings that Luigi doesn't have. Instead of
        saying no to those people, could you update the "else" clause so that we
        charge them a premium for toppings that we don't normally offer?
      Luigi's Pizza 3_instruction: |
        That's better, everyone loves more variety in
        their pizza toppings! But you still can't please everyone, and folks are
        coming in to order toppings that Luigi doesn't have. Instead of saying no
        to those people, could you update the else clause so that we charge them a
        premium for toppings that we don't normally offer? Let's charge $10,000
        for a topping we don't carry.
      Luigi's Pizza 4_instruction: |
        Free Play: What can you do to make Luigi's cost
        function even more useful?
      MSM Big Game Empty_instruction: |
        All variables and functions are currently
        empty stubs. Each puzzle progression will be focused on defining and handful
        of them, and therefore adding functionality.
      MSM Big Game Vars 1 (copy 1)_instruction: |
        In the Variables toolbox you'll
        see several variables that define how your game characters look, move, and
        interact
      MSM Big Game Vars 1_instruction: |
        In the Variables toolbox you'll see several
        variables that define how your game characters look, move, and interact
      MSM Big Game Vars Backup_instruction: |
        In the Variables toolbox you'll see
        several variables that define how your game characters look, move, and interact
      MSM Defining Vars 1 (copy 1)_instruction: |
        Write a program that produces a
        50 pixel solid green triangle.
      MSM Defining Vars 1_instruction: |
        Write a program that produces a 50 pixel
        solid green triangle.
      MSM Defining Vars 2 (copy 1)_instruction: |
        If we wanted to make fifty green
        triangles, it would be a pain to repeat that block of code 50 times. Let's
        create a variable called "my-shape" and put the code for a 50 pixel solid
        green triangle inside.
      MSM Defining Vars 2_instruction: |
        If we wanted to make fifty green triangles,
        it would be a pain to repeat that block of code 50 times. Let's create a
        variable called my-shape and put the code for a 50 pixel solid green triangle
        inside.
      MSM Defining Vars 3 (copy 1)_instruction: |
        Take your "my-shape" variable
        and use it with this provided code to draw two identical green triangles.
      MSM Defining Vars 3_instruction: |
        Take your my-shape variable and use it with
        this provided code to draw two identical green triangles that are 50 pixels
        in size.
      MSM Defining Vars 4_instruction: |
        Edit your my-shape variable so that it draws
        75 pixel solid red stars.
      MSM Play Lab Butterfly 1_instruction: |
        Help Sam stay on the screen so that
        you can always see at least a little piece of him. Using the arrow keys, see
        how far Sam can go to the left while still staying onscreen. You’ll find that
        Sam is onscreen as long as his x-coordinate is greater than -50. Then, fill
        in the code to make Sam stay on the screen.
      MSM Play Lab Butterfly 2_instruction: |
        Now make Sam stay on the right side
        of the screen. You'll have to experiment to see how far he can go and still
        be partially visible on the screen.
      MSM Play Lab Butterfly 3_instruction: |
        Now, combine your work to make Sam stay
        on both sides of the screen.
      MSM Play Lab Game 2_instruction: |
        Variables can also be used to control the
        speed of players in a game. Set the player speed and the enemy speed and see
        how the movement changes. Speed can be between 2 and 12.
      NetSim Standalone Automatic DNS_instruction: |
        In this version of the Internet
        Simulator, a Domain Name System (DNS) is provided for you and knows the IP
        addresses of all connected computers. Send a message in the form GET [hostname]
        to the DNS service at address <yourRouterNumber>.15 to get a student's address.
      NetSim Standalone Broadcast_instruction: |
        In this version of the Internet Simulator,
        you can connect to up to 5 other people in a room. When you send messages
        in the room, everyone receives them. What are some of the challenges of this
        system, and how might you solve them?\r
      NetSim Standalone Classroom Routers_instruction: |
        In this version of the Internet
        Simulator, everyone connects to a router and has a specific address. To send
        messages, you have to address your message to the specific address of the
        recipient, and the router will take care of delivering it to the right computer.
        If there are other routers created in your class, ask for the address of one
        of your classmates and send them a message! View the Log Router to see the
        path the messages have taken through the network.
      NetSim Standalone Freeplay_instruction: |
        In this configuration, most of the
        options are turned on, and you can play with them. Have fun!
      NetSim Standalone Manual DNS_instruction: |
        In this version of the simulator
        you can't see the other students' addresses.  Instead, one of you must act
        as a name service, to help share addresses with each other.
      NetSim Standalone Packets TCP_instruction: |
        Messages on the Internet can take
        many paths to get to their destination, and sometimes along the way the message
        gets dropped. In this version of the Internet Simulator, there is a 10% chance
        of a packet being dropped, multiple packets may take different paths to the
        destination, and the default max packet size is set to 6 additional characters.
      NetSim Standalone Routers Addresses_instruction: |-
        For this activity, connect
        to a router with the others in your group. Important note: The router will
        only properly route messages where the first 4 bits are the To: address and
        the second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      NetSim Standalone SendAB_instruction: |
        You and your partner share a single
        wire that can only be in state A or state B. You can set the wire to either
        state at any time, and you can read the state of the wire at any time. Can
        you figure out a way to effectively communicate with just this system?
      NetSim Standalone Sending Numbers Ascii_instruction: |
        Now that you've transmitted
        information represented as decimal numbers, you can map those numbers to text
        characters to send text-based information back and forth. With a text-based
        protocol, you can easily represent and communicate all kinds of information.
      NetSim Standalone Sending Numbers_instruction: "You and your partner can now\nreliably
        send messages back and forth without extra coordination! While you're\nalways
        sending bits back and forth, you can also represent those bits as decimal\nnumbers.
        What kinds of information can you represent with this system? \n"
      NetSim_AddressingMessages_instruction: |
        In this version of the simulator, you
        will connect to a Router instead of directly to another student. Enter an
        address in the "To" box to send a message to another student.
      NetSim_AutomaticDNS_instruction: |
        In this version of the simulator a DNS service
        is provided for you. Send a message in the form GET [hostname] to the DNS
        service at address 15 to get a student's address.
      NetSim_ManualDNS_instruction: |
        In this version of the simulator you can't
        see the other students' addresses.  Instead, one of you must act as a name
        service, to help share addresses with each other.
      NetSim_SendAB_instruction: |
        Connect to another student.  Each of you can set
        the value of the wire between you to "A" or "B".  See if you can send
        a complete message!
      NetSim_SendAscii_instruction: |
        In this version of the simulator, you can send
        numbers or ASCII characters to one another, one bit at a time.
      NetSim_SendBits_instruction: |
        Connect to another student.  You can now set
        your wire to "0" or "1".  Send a message to your partner!
      NetSim_SendingABTest_instruction: |
        This is Sarah's test of making a netsim
        level
      NetSim_SendNumbers_instruction: |
        In this version of the simulator, you can
        view the decimal representations of the binary you are sending.
      NetSim_Superuser_instruction: You have loaded NetSim in superuser mode.
      NetSim_Variant1_instruction: |
        NetSim: Variant 1 allows students to manually
        work out the timing of sending bits back and forth.
      NetSim_Variant2_instruction: |
        NetSim: Variant 2: Students connect directly
        to one another and send entire packets back and forth, exploring systems of
        encoding data.
      NetSim_Variant3_instruction: |
        NetSim: Variant 3: Connects groups of 2-6 students
        with a router, and explores issues in routing and DNS
      New Artist Project_instruction: "Нарисуй что-то замечательное! Код сохраняется
        как проект и к нему можно будет вернуться в любое время."
      NEW Course 4 Artist Functions 1_instruction: "Можешь создать квадрат, со сторонами
        100 пикселей, используя цикл?"
      NEW Course 4 Artist Functions 10.1_instruction: "Нарисуй этот узор, используя
        функции из предыдущих задач."
      NEW Course 4 Artist Functions 10_instruction: Нажми "Редактировать" для заполнения
        блоков в определении функции, чтобы создать квадрат размером 40 пикселей.
      NEW Course 4 Artist Functions 11_instruction: |
        Теперь мы хотим создать новую функцию "нарисовать ряд квадратов", которая будет рисовать 6 квадратов в одном ряду. Можешь сделать эту функцию, используя функцию "нарисовать квадрат 20", которую мы создали ранее? Примечание: заметь, что мы сделали ручку заметно тоньше. Нажми "редактировать" на функции “нарисовать квадрат 20", чтобы посмотреть как!\r
      NEW Course 4 Artist Functions 12_instruction: Используй функцию "нарисовать
        ряд квадратов" из последнего задания, чтобы нарисовать этот узор.
      NEW Course 4 Artist Functions 13_instruction: 'Сможешь нарисовать звезду, используя
        функцию "нарисовать ряд квадратов"? Подсказка: измените функцию "нарисовать
        ряд квадратов", чтобы не вызывать её дважды. Тебе придется двигаться вперёд
        на определённое количество пикселей и поворачиваться на 144 градуса.'
      NEW Course 4 Artist Functions 14_instruction: "Время свободной игры! "
      NEW Course 4 Artist Functions 2_instruction: "Можете нарисовать 3 квадрата на
        расстоянии 20 пикселов друг от друга? Подсказка: размер каждого квадрата -
        100 пикселей"
      NEW Course 4 Artist Functions 3_instruction: Вот новый тип блока. Он называется
        "блок функции". Нажми "редактировать" и добавь в него код для рисования квадрата
        со сторонами в 100 пикселей. Когда закончишь редактировать функцию, нажми
        "закрыть", чтобы вернуться к программе.
      NEW Course 4 Artist Functions 4_instruction: 'Используй функцию "нарисовать
        квадрат" для рисования этого узора. Подсказка: нужно использовать блок "повернуть
        вправо на 120 градусов" после каждого квадрата.'
      NEW Course 4 Artist Functions 5_instruction: Как блок "нарисовать квадрат" знает,
        какие команды выполнять? Нажми "Редактировать" в блоке "нарисовать квадрат".
        Блоки в редакторе функций являются определением, которое образует "нарисовать
        квадрат". Изучив блоки, нажми на кнопку "Сохранить и закрыть" и затем "Выполнить".
      NEW Course 4 Artist Functions 6_instruction: |
        Сможешь нарисовать этот рисунок, используя блок функции "нарисовать квадрат"? Подсказка: расстояние между квадратами составляет 20 пикселей.\r
      NEW Course 4 Artist Functions 7_instruction: 'Теперь понятно, как использовать
        блоки функций? Изменим размер этого квадрата, чтобы он был 200 пикселей. Подсказка:
        щелкни на "редактировать", чтобы изменить размер в редакторе функции "рисовать
        квадрат". Помни, что нужно нажать кнопку "закрыть", чтобы выйти из редактора
        функций. '
      NEW Course 4 Artist Functions 8_instruction: Мы создали для тебя новую функцию
        "нарисовать треугольник". Можешь изменить её, чтобы она рисовала треугольник
        со стороной 100 пикселей?
      NEW Course 4 Artist Functions 9_instruction: "Можешь решить эту задачу, добавив
        только один блок?"
      NEW Course 4 Artist Functions inspire_instruction: "Нажмите здесь, чтобы увидеть
        вдохновляющую картинку ещё раз."
      New Course 4 Artist Functions Level 4_instruction: Используй функцию "нарисовать
        квадрат", чтобы нарисовать этот узор.
      NEW Course 4 Artist Params 1_instruction: Давайте обозначим эту функцию для
        рисования квадрата со стороной 50 пикселей. Нажмите "редактировать" для начала
        работы.
      NEW Course 4 Artist Params 10_instruction: 'создайте блок "нарисовать шестиугольник"
        с параметром длины. Подсказка: размер шестиугольника 100 пикселей.'
      NEW Course 4 Artist Params 11_instruction: Вы можете понять, как нарисовать
        эту фигуру? Изменяйте параметр "длина стороны".
      NEW Course 4 Artist Params 12_instruction: "Вы можете закончить этот рисунок?
        Длины сторон всех фигур - 100 пикселей."
      NEW Course 4 Artist Params 12a_instruction: Это изображение похоже на предыдущее.
        Можешь использовать цикл "для" в своей функции, чтобы выполнить этот проект?
      NEW Course 4 Artist Params 13_instruction: |-
        Давай отредактируем функцию "нарисовать многоугольник". Она уже имеет параметр "стороны". А теперь добавим параметр "длина". \r
        Подсказка: периметр каждой фигуры - 200 пикселей. Помните выражение, чтобы создавать фигуры одного и того же размера с разным количеством сторон?
      NEW Course 4 Artist Params 14_instruction: Измените функцию "рисовать спираль",
        чтобы использовать параметры "длина" и "стороны", а затем нарисуйте эти фигуры
        заново.
      NEW Course 4 Artist Params 15_instruction: "Свободная игра: вот функции, которые
        мы создали, и еще несколько. Нарисуй что-то замечательное! Не забудьте изменять
        толщину линий!"
      NEW Course 4 Artist Params 2_instruction: "Создайте функцию «Рисовать треугольник
        со сторонами 50 точек»"
      NEW Course 4 Artist Params 3_instruction: |
        Давайте используем функцию, чтобы нарисовать 5 треугольников подряд. Подсказка: расстояние между треугольниками — 30 пикселей. \r
      NEW Course 4 Artist Params 4_instruction: Заметил что-то другое в этих блоках
        функций? Нажми кнопку "Выполнить", чтобы увидеть, что происходит.
      NEW Course 4 Artist Params 5_instruction: "Заполни ??? в параметре длины для
        блока. Подсказка: пятиугольник имеет стороны по 100 пикселей. "
      NEW Course 4 Artist Params 6_instruction: Заполни параметр "длина" для создания
        этих фигур, заменив "???" на правильные числа. Квадрат и треугольник имеют
        размер 100 пикселей, а шестиугольник - 75 пикселов.
      NEW Course 4 Artist Params 7_instruction: "Сможешь завершить этот рисунок? Подсказка:
        каждый треугольник на 25 пикселей больше, чем предыдущий. Размер сторон первого
        треугольника составляет 25 пикселей."
      NEW Course 4 Artist Params 8_instruction: "В коде функции для этого треугольника
        есть ошибка. Сможешь отредактировать функцию и исправить ошибку, а затем нарисовать
        треугольники размерами 25, 50 и 75?"
      NEW Course 4 Artist Params 9_instruction: 'Нажми "Редактировать", чтобы заполнить
        определение функции "нарисовать квадрат" и добавить один параметр. Он должен
        принимать значение длины, так же, как и в треугольнике. На этот раз нарисуй
        3 квадрата: размером 25, 50 и 75 пикселей, каждый в 100 пикселях друг от друга.'
      NEW Course 4 Artist Params inspire_instruction: "Вдохновение для свободной игры:
        ты выучил всё, что нужно знать, чтобы нарисовать такой узор! Если это изображение
        тебя вдохновляет, попробуй создать похожее. Или создай что-то свое.\\r\n\\r\nХочешь
        узнать, как создан этот узор? "
      NEW Course 4 Artist Vars 1.5_instruction: 'Посмотри на этот код - видишь, как
        блоки "установить длину" и "длина" работают вместе? Нажми на "Выполнить",
        чтобы увидеть, как это работает. '
      NEW Course 4 Artist Vars 12_instruction: "А теперь создайте алгоритм с прошлого
        задания заново и нарисуйте пятиугольник со сторонами в 150 пикселей."
      NEW Course 4 Artist Vars 2.5_instruction: 'Посмотри на этот код - видишь, как
        блоки "установить длину" и "длина" работают вместе? Нажми на "Выполнить",
        чтобы увидеть, как это работает. '
      NEW Course 4 Artist Vars 2_instruction: 'Перенеси блок с числом к блоку "установить
        длину", чтобы рисовать 50-пиксельные треугольники. '
      NEW Course 4 Artist Vars 4 5_instruction: "Вы замечательно справились в прошлый
        раз, давайте попробуем ещё раз! На этот раз создадим крутой дизайн с 60-ти
        пиксельными шестиугольниками."
      NEW Course 4 Artist Vars 4_instruction: "Попробуем снова. Сможешь установить
        переменную длины, чтобы создать этот классный дизайн из шестиугольников? Подсказка:
        это число кратное 10."
      NEW Course 4 Artist Vars 6_instruction: |
        Нарисуй узор, разместив переменную "длина" в правильных местах. Затем задай значение длины (Подсказка: это число кратное 10).\r
        \r
        Посмотри, как можно задать значение переменной один раз, а потом использовать её повсюду в коде? \r
        \r
        \r
      NEW Course 4 Bee For Loops 1_instruction: "Используй цикл, чтобы собрать нектар
        с каждого цветка."
      NEW Course 4 Bee For Loops 10_instruction: Используйте переменную "счетчик"
        цикла "для", чтобы управлять, насколько двигаться по горизонтали.
      NEW Course 4 Bee For Loops 10a_instruction: "Готовы к вызову? Воспользуйся полученными
        знаниями о циклах, чтобы решить задачу. Помни: можно запускать свое решение
        несколько раз, чтобы найти нужные шаги."
      NEW Course 4 Bee For Loops 11_instruction: "Можешь использовать переменную цикла,
        чтобы управлять движением и сбором нектара?"
      NEW Course 4 Bee For Loops 2_instruction: "Добавь код, необходимый для того,
        чтобы пчела собрала весь нектар. Посмотри, сколько нужно кода, чтобы решить
        эту задачу! (Мы узнаем более простой способ решения в следующем задании.)"
      NEW Course 4 Bee For Loops 3_instruction: 'Ого, цикл всё значительно упрощает!
        Весь нужный код здесь. Посмотри, как он составлен и щелкни "Выполнить", чтобы
        посмотреть, как он работает. '
      NEW Course 4 Bee For Loops 4 4_instruction: Теперь нам нужно двигаться вперед
        "счётчик" раз, чтобы собрать нектар "счётчик" раз. Сможешь использовать два
        цикла повторения, чтобы решить эту задачу?
      NEW Course 4 Bee For Loops 4_instruction: "Замены ??? в цикле максимальное количество
        нектара, которое должна собрать пчела. "
      NEW Course 4 Bee For Loops 5 5_instruction: "Ну как, разобрались с циклами?
        Поможем пчеле собрать оставшийся нектар."
      NEW Course 4 Bee For Loops 5_instruction: "Циклы можно использовать для обратного
        отсчета. Попробуй собрать нектар, считая от 5 до 1 с шагом 1."
      NEW Course 4 Bee For Loops 6_instruction: Последнее число в цикле называется
        "шаг". Каждый раз при выполнении цикла, счетчик меняется на этот шаг. Попробуй
        собирать цветы, использовав шаг равный 2.
      NEW Course 4 Bee For Loops 7_instruction: "Теперь давайте объединим переменную
        «счетчик» с блоком математики! Как можно использовать переменную «счетчик»
        для навигации по этому саду с наименьшим количество блоков? Что вам нужно
        сделать на этот раз, чтобы собрать 3, 6, 9, 12, и 15 нектара? Секрет в переменной
        «счетчик»! \\r \n\\r \nПомните: если ваш цикл считает вверх, то каждый раз
        \"шаг\" добавляется к переменной «счетчик»."
      NEW Course 4 Bee For Loops 8_instruction: |-
        Все правильно! Какой должен быть шаг, чтобы собрать 3, 6, 9, 12, и 15 нектаров?\r
        Подсказка: Что нужно добавить к каждому числу, чтобы получить число, следующее за ним?
      NEW Course 4 Bee For Loops 9_instruction: "Если цикл считает в обратном порядке,
        то шаг вычитается от счетчика каждый раз при выполнении цикла. Каким должен
        быть шаг, чтобы собрать 15, затем 12, затем 9, 6, и 3 нектара?"
      NEW Course 4 Bee For Loops 95_instruction: Посмотри на элементы созданного цикла
        "для". Можешь догадаться, какие числа нужно удвоить, чтобы решить эту задачу?
        Почему это работает именно так?
      NEW Course 4 Play Lab Params 11_instruction: "Время свободной игры! Развлекайся
        - все блоки в твоём распоряжении. "
      NEW Course 4 Play Lab Params 5 5_instruction: "Попробуем еще раз, но уже без
        помощи. Что нужно изменить, чтобы заставить персонажей патрулировать?"
      NEW Course 4 Play Lab Vars 4 5_instruction: '"Как думаешь, что делает этот код?
        Нажми "Выполнить", чтобы увидеть, что произойдёт."'
      NEW Course 4 Play Labs For Loops 7a_instruction: "Применяя всё, что мы изучили,
        сможешь заставить динозавра двигаться вперёд каждый раз, когда пингвин считает?"
      NEW Course 4 Play Labs For Loops 8 Free Play_instruction: "Время для свободной
        игры, развлекайся - доступны все блоки. "
      NEW Course 4 Play Labs For Loops 8a_instruction: 'Задача: как можно использовать
        цикл "для", чтобы каждый персонаж двигался и говорил свой номер, а затем исчезал
        с экрана? '
      New Play Lab Project_instruction: "Создай собственную историю или игру! Код
        сохраняется как проект и можно будет вернуться к нему в любое время."
      Ninjacat Demo B (copy 1)_instruction: |
        \r
        Let’s begin by exploring a simple
        videogame, and then figuring out how it works. You can use the arrow keys
        to move the ninja left, right and jump - try to catch the unicorn and avoid
        the dragon!\r
        \r
        \r
        \r
          \r
        \r
      Ninjacat Demo B_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      Ninjacat Demo No Animate_instruction: |
        Let’s begin by exploring a simple videogame,
        and then figuring out how it works. You can use the arrow keys to move the
        ninja up and down - try to catch the unicorn and avoid the dragon! When you
        think you've figured out how the game works, click "Finish"
      October15 bat_instruction: |
        Freeplay: Here are some functions to play with.  Can
        you draw a bat?\r
      October15 ghost 1_instruction: |
        Give the ghost eyes, using the "draw a circle"
        function.
      October15 JoL 1_instruction: |
        Program the artist to design a face for your
        jack-o-lantern!
      October15 pumpkin 1_instruction: |
        Finish this jack-o-lantern by drawing the
        eyes and nose in any style you would like.
      October15 stars 1_instruction: |
        Use loops and the "random integer" block
        to fill the night sky with stars of different shapes and sizes.
      Overworld Avoid Monsters_instruction: "Криперов лучше не трогать. Осторожно
        обойдите их и зайдите в свой безопасный дом."
      Overworld Chop Tree_instruction: "Дерево – это очень важный ресурс, из которого
        изготавливаются многие предметы. Подойдите к дереву и используйте команду
        «уничтожить блок», чтобы срубить его."
      Overworld Chop Trees_instruction: "Нам нужно построить дом до наступления темноты.
        Для постройки дома требуется много дерева. Срубите все три дерева."
      Overworld Free Play 20x20_instruction: "Поздравляем! Вы решили все наши задачки.
        Теперь вы можете добывать ресурсы, строить и создавать уникальные вещи, используя
        полученные знания и умения."
      Overworld Free Play_instruction: "Используйте эту местность для игры. Вы сами
        решаете, что и где строить."
      Overworld House Frame - A_instruction: "Давайте построим свой дом! Это место
        хорошо подходит для этого. Постройте раму на этих блоках земли."
      Overworld House Frame - C_instruction: "Давайте построим свой дом! Это место
        хорошо подходит для этого. Постройте раму на этих блоках земли."
      Overworld House Frame B_instruction: "Одна стена построена, постройте остальное
        следуя плану вашего дома! Нужно будет повторять много действий."
      Overworld House Frame B2_instruction: "Одна стена построена, постройте остальное
        следуя плану вашего дома! Нужно будет повторять много действий."
      Overworld House Frame C_instruction: "Одна стена построена, постройте остальное
        следуя плану вашего дома! Нужно будет повторять много действий."
      Overworld House Frame Chosen_instruction: "Постройте остальную часть вашего
        дома из любого материала, который вам нравится. Команда «повторить» вам пригодится."
      Overworld House Frame_instruction: "Давайте построим дом! Это место подходит.
        Постройте каркас на блоках земли."
      Overworld Minecart Track_instruction: "Вы вернулись на поверхность, добыв много
        ископаемых ресурсов. Сейчаc мы построим рельсы вдоль земляной дорожки, ведущей
        от дома. Первый этап – расчистить путь. Идите по дорожке и рубите деревья."
      Overworld Move to Sheep_instruction: "Добавьте еще одну команду «двигаться вперед»,
        чтобы подойти к овце."
      Overworld Place Wall_instruction: "Любой дом начинается со стены. Постройте
        первую часть дома, вставив команды «разместить» и «двигаться вперед» в цикл
        повтора."
      Overworld Plant Crops_instruction: "Лучше планировать все наперед. Посадите
        саженцы по берегам водоема, чтобы в будущем вам не пришлось голодать."
      Overworld Powered Minecart_instruction: "Отличная работа! Вы собрали кучу ресурсов
        и построили скромный домик. Теперь проложите рельсы от края карты до порога
        вашего дома."
      Overworld Shear Sheep_instruction: "Пора стричь овец! Используйте команду «стричь»,
        чтобы получить шерсть с обеих овец."
      PDAlg 13-16 Sam Extension Puzzle_instruction: |
        Add a second parameter to "onscreen?"
        for Sam's y coordinate and update the function so it keeps him safe on all
        four sides.
      PDAlg 17-20 Luigi Extension Puzzle_instruction: |
        Without modifying your existing
        "cost" function, create a new "coupon" function that takes a pizza topping
        and coupon code and returns the cost of a pizza with that topping. If the
        coupon code is correct (you get to decide what it is), apply a 30% discount
        to the pizza.
      PDAlg 8-12 ex dr 1_instruction: |
        The definition in this Design Recipe doesn't
        match both examples. Test each example to see which is failing, and then fix
        the definition to match.
      PDAlg 8-12 ex dr 2_instruction: |
        This student has created two examples for
        the function "apples" but something's not quite right. How would you direct
        this student to correct their mistake?
      PDAlg 8-12 Rocket Height Puzzle_instruction: |
        Let's write a "rocket-height"
        function with simple acceleration. Write a function that ensures the rocket
        is at 15 meters at 1 second, 45 meters at 2 seconds, 95 at 3 seconds, and
        165 at 4 seconds.
      PDAlg Big Game History_instruction: |
        Now that you've played through a Big
        Game level you should see a new entry in your history. Click the Version History
        button and you should see at least one version. Each time you go back to a
        Big Game level you'll get a new record in your version history that you can
        revert back to.
      PDAlg Big Game Remix_instruction: |-
        Here's your Big Game as you last left it.
        Try clicking the Remix button to spin off a new remix of your project.\r
        \r
        Any
        changes you make after you click Remix will be saved on your new remix and
        not on your main Big Game.
      PDAlg Design Recipe Delete_instruction: |
        Click the delete button to get rid
        of this function, then try creating and deleting a few of your own.
      PDAlg Design Recipe Examples_instruction: |
        The definition in this Design Recipe
        doesn't match both examples. Test each example to see which is failing, and
        then fix the definition to match.
      PDAlg Design Recipe Required_instruction: |
        Complete the Design Recipe for the
        "eggs" function, making sure to create and test your examples.
      PDAlg Updates Cond_instruction: |
        When you went to PD in the summer, the Conditional
        block that you were introduced to was black and allowed any data type to be
        used. This proved to be confusing, given that every other function we've
        seen always produces the same type of data. To help make conditionals clearer
        and more consistent we've replaced the single black block with a separate
        block for each data type.
      PDAlg Updates Errors_instruction: |
        Run the provided program and use the error
        messages to try and track down the bugs.
      PDAlg Updates Space_instruction: |
        Making use of limited programming space (especially
        on small screens) is challenging with a block based language. To help with
        this we've added a few features. Experiment with this provided code to see
        how the space can be manipulated to deal with larger programs.
      PDK5 Conditionals 1_instruction: |
        Purple flowers may have either 1 or 0 nectar,
        but you don't know which one! Be careful not to collect nectar from a purple
        flower if it doesn't have any. Check if the nectar is equal to 1 by using
        the if block.
      PDK5 Conditionals 2_instruction: "Try this puzzle that uses conditionals and\nloops
        together. Use the \"if\" block to decide when to turn. Hint: you only\nneed
        one more block to complete this puzzle. \n"
      PDK5 Events 1_instruction: "So far all of the programs we've written are executed\nin
        order from top to bottom. In this puzzle, we'll use \"Events\" to respond\nto
        an action on demand. Make the octopus say \"Hello\" only when you click\non
        the Octopus. \n"
      PDK5 Functions 1_instruction: |
        Hello. Me zombie artist. Me love drawing! Help
        me draw the square glasses.  Hint:  the bridge between the glasses is 25 pixels
        shorter than the square length.
      PDK5 Functions 2_instruction: Функции позволяют создавать новые блоки! Мы перенесли
        блоки для рисования квадрата в функцию "нарисовать квадрат". Можете использовать
        эту функцию, чтобы нарисовать очки? Расстояние между квадратами должно быть
        75 пикселей.
      PDK5 Loops 1_instruction: "Instead of using 5 \"move forward\" blocks, use\nthe
        \"repeat\" block with a \"move forward\" block inside of it. In computer\nscience,
        this is called a \"loop.\" \n"
      PDK5 Loops 3_instruction: |
        Here's another puzzle to practice loops. What happens
        if you use the repeat block to run the code already provided on the workspace
        4 times?
      Pixelation - Lesson 14 - Fix bit offset v.2_instruction: |
        Something happened
        to the bits in this image! Find the error and fix it! Hint: a few extra bits
        were added. You should only need to remove some bits.
      Pixelation - Lesson 14 - Fix bit offset_instruction: |
        A single extra bit was
        inserted into the stream of bits that make up the C of the Code.org logo.
        That extra bit bumps all of the other bits down the line which makes the logo
        look messed up. Hunt down the extra bit and remove it to fix the Code.org
        logo.
      Pixelation - Lesson 14 - Fix the error_instruction: |
        Something happened to
        the bits in this image!  Find error and fix it!  Hint: a few extra bits were
        added.  You should only need to remove some bits.
      Pixelation - Lesson 14 - Make the Letter A_instruction: |
        Make a 3x5 letter
        'A'. The widget is setup with the incorrect dimensions. Your first task
        is to set the second byte to the 8-bit binary code for 5: 0000 0101. Then
        start entering pixel data.
      Pixelation - Lesson 14 - Make your own B and W Image_instruction: |
        Now make
        your own image! We've started you off with a 10x10 canvas but you can make
        it whatever size you want. Happy pixeling!
      Pixelation - Lesson 14 - Make your own B&W Image_instruction: |
        Now make your
        own image! We've started you off with a 10x10 canvas but you can make it
        whatever size you want.  Happy pixeling!
      Pixelation - Lesson 15 - Color Free Play_instruction: |
        Requirements: The icon
        must be 16x16 pixels. You must use the Pixelation Widget to encode the bits
        of color information. The image must be encoded with at least 12 bits per
        pixel.
      Pixelation - Lesson 15 - Color Shades 4x4_instruction: |
        We start you out with
        the 4x4 image Maddie created in the video. Your task is to fill a 4x4 grid
        with colors using 12-bits per pixel. Here are the requirements: Row 1 - fill
        with shades of red. Row 2 - shades of green. Row 3 - shades of blue. Row 4
        - shades of gray.
      Pixelation - Lesson 15 - Color Shades_instruction: |
        We start you out with the
        row of shades of red that Maddie created in the video. Experiment with 6-bit
        color by filling in the bottom row of the image with shades of a different
        color. Here is an example with some shades of blue. Try your own color!
      Pixelation - Lesson 15 - Complete 3-bit color_instruction: |
        We start you with
        the 4x2 image Maddie was creating, but we've left out the last two squares.
        Finish off the image by figuring out which two colors are missing and encode
        them.
      Pixelation 2_instruction: |
        Something happened to the bits in this image!  Find
        error and fix it!
      Pixelation 4x4 Empty_instruction: |
        The width and height are now encoded in
        the pixel data. Can you figure out how to adjust the dimensions?
      Pixelation Bee_instruction: |
        This larger image of a bee encodes color with
        12 bits per pixel, but viewing in hex makes it easier to see the color of
        each pixel. If you switch to binary mode - hold on to your hat - it's a lot
        of bits. Here's another mind-blowing thing to try: slide the bits per pixel
        up to 24 bits per pixel. What happens? Can you explain this behavior?
      Pixelation Flappy_instruction: |
        Here is a bigger image at 9 bits per pixel.
        With 9 bits per pixel you can express 512 different colors. Click through
        to see the next image which is even more sophisticated, but easier to understand.
      Play Lab Rocket 1_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second... press "Run" to see how this word problem looks as an animation.
      Play Lab Rocket 2_instruction: |
        We've started the Design Recipe for rocket-height
        using the contract and examples you just wrote. Complete the function definition
        for rocket-height and run your animation.
      Play Lab Rocket 2B_instruction: |
        A rocket blasts off, traveling at 15 meters
        per second. Using the Design Recipe, write a function called rocket-height
        that takes in a number of  seconds that have passed since the rocket took
        off, and produces the height of the rocket at that time.
      Play Lab Rocket 3_instruction: |
        Awesome, now can you update that function so
        that our rocket moves more quickly? Make sure to update the purpose statement,
        examples, and function definition to launch a rocket at 40 meters per second.
      Play Lab Rocket 4 (copy 1)_instruction: |
        Real rockets start off slowly and
        gain speed over time - let's make ours do the same! Write an exponential
        function that describes a rocket that travels at "seconds" squared meters
        per second.
      Play Lab Rocket 4_instruction: |
        Real rockets start off slowly and gain speed
        over time - so let's add some simple acceleration to ours! Can you write
        a function that describes a rocket that is at 10 meters at 1 second, 40 meters
        at 2 seconds, 90 meters at 3 seconds, 160 at 4 seconds and so on?
      Play Lab Rocket 5_instruction: |
        Much better, but let's write one more function
        with simple acceleration. This time the rocket should be 15 meters at 1 second,
        45 meters at 2 seconds, 95 at 3 seconds, and 165 at 4 seconds.
      Play Lab Rocket Free Play_instruction: |
        Free Play: Experiment with your rocket-height
        function to make the rocket fly in different ways. Click "Finish" when you
        are done.
      Poorva-test_instruction: |
        Here are regular instructions for a level. There
        is nothing fancy going on here.
      Quantum Bee - Ryan_instruction: "Эти облака меня раздражают! Некоторые из облаков
        имеют цветы внутри, а некоторые нет. Я должен проверить каждое облако, и только
        получить нектар из цветков."
      Quantum Bee_instruction: Фиолетовые цветки могут иметь 1 нектар, либо 0, но
        Вы не знаете, какой именно! Будьте осторожны, не собирайте нектар с фиолетовых
        цветков, у которых его нет. Проверьте, равен ли нектар 1, используя блок "Если".
      Ryan - 4-5 Bee Conditionals 2_instruction: "Пчелка хочет нектара прямо сейчас.
        Не все объекты являются цветами, так что необходимо проверить КАЖДОЕ ОБЛАКО,
        чтобы узнать скрывает ли он цветок. И если это так, то вы получите долгожданный
        нектар."
      Ryan - Bee Conditionals_instruction: "Пчела хочет собирать только нектар. Помни,
        что не все объекты являются цветами, поэтому сначала проверяй каждую тучку,
        чтобы увидеть, скрывает ли она цветок. Если так, то можно собирать нектар."
      Ryan Test Locked Blocks_instruction: Эта функция называется "патрулировать."
        Измените её так, чтобы переместить кота на 400 пикселей вверх, а потом на
        400 пикселей вниз.
      Ryan's clone of C4S15P10_instruction: "We've added one last function for you.\n\\r\n\\r\nUse
        an \"if\" statement to program your game to call the \"level_up\"\nfunction
        only when \"player_score\" becomes greater than a certain number.\\r\n\\r\nFor\nexample:
        \"player_score\" > 6\\r\n\\r\nPlay the game, and make it past level\n4 to
        move to the next puzzle. "
      Sam the Butterfly 1 (copy 1)_instruction: |
        This butterfly is named Sam, and
        the game area is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels
        tall! As you can see, Sam is free to walk around the yard, and the coordinates
        at the top of the screen update to tell you his location. Use the arrow keys
        to move sam around his yard. Help Sam collect all of the flags to move on.
      Sam the Butterfly 1_instruction: |
        This bat is named Sam, and the game area
        is Sam’s yard. Sam's yard is 400 pixels wide by 400 pixels tall! As you can
        see, Sam is free to walk around the yard, and the coordinates at the top of
        the screen update to tell you his location. Click "Run" and then use the
        arrow keys to move Sam around his yard, making note of Sam's coordinates
        at different locations. Click "Finish" when you're ready to move on.
      Sam the Butterfly 2_instruction: |
        Sam's mom wants to make sure that she can
        always see at least a bit of him, so lets write some functions that help make
        sure he doesn't go too far out of the yard. Here's a function called safe-left?
        - it should take a Number for its domain that represents Sam's x-coordinates
        and return true if he's completely visible on screen. If your function works,
        Sam shouldn't be able to leave the yard from the left side.
      Sam the Butterfly 3_instruction: |
        In the last puzzle we kept Sam from leaving
        on the left, now let's do the same thing on the right. Complete the safe-right?
        function to make sure Sam can't go off the right side of the screen.
      Sam the Butterfly 4_instruction: |
        Huh, we can keep Sam from leaving on the
        left, or we can keep him from leaving on the right, but how can we keep him
        safe from leaving both directions? Try using the and block to program the
        function on-screen? to check if Sam is safe-left? and safe-right?
      Sam the Butterfly 5_instruction: |
        Free Play: Awesome, we've kept Sam safe
        on the left and right! Use this free play stage to experiment with your functions
        and further improve onscreen?
      Sam the Butterfly 6_instruction: |
        We've added a new parameter "y" to the
        "on-screen?" function. Update the function so that it checks that "safe-left?"
        AND "safe-right?" AND "safe-up?" are all true. When you've fixed the
        function, try going out of the yard from the left, right, and top sides.
      Sam the Butterfly 7_instruction: |
        Only one last direction to worry about! Create
        a "safe-down?" function and update the "on-screen?" function so that it
        checks up, down, left, and right.
      Sam the Butterfly Complete_instruction: |
        Only one last direction to worry about!
        Create a "safe-down?" function and update the "on-screen?" function so
        that it checks up, down, left, and right.
      scrat 16 (copy 1)_instruction: |
        Acorn! Acorn! Acorn! Use an "if" block to
        get me there with the fewest number of blocks.
      scrat 16_instruction: "Желудь! Желудь! Желудь! Используйте блок «Если», чтобы
        привести меня туда, используя наименьшее количество блоков."
      scrat 17 (copy 1)_instruction: |
        Ok, let's do that again for practice - this
        isn't very different, but watch out for the <insert obstacle name for Scrat>!
      scrat 17_instruction: "Хорошо, давайте сделаем это снова для тренировки - почти
        то же самое, но берегитесь стены!"
      scrat 18 (copy 1)_instruction: |
        The "If-else" blocks checks a condition,
        and then does one thing OR another. To get me to the acorn try to use this
        new block.
      scrat 18_instruction: "Блок «Если-Иначе» проверяет условие, и затем выполняет
        первое действие или второе. Попробуйте использовать этот новый блок, чтобы
        переместить меня к желудю."
      scrat 19 (copy 1)_instruction: |
        One more practice of the "if-else" block,
        can you get it right on your first try?
      scrat 19_instruction: "Еще одно задание для блока «Если-Иначе». У вас получится
        с первой попытки?"
      scrat 20_instruction: "Вы можете добавить только 3 блока, чтобы помочь мне решить
        более сложный лабиринт? Если вы сделаете это правильно, то я смогу ходить
        по любому извилистому пути независимо от его длины. Спешите! Лед тает!"
      SpecialFrozenLevel_instruction: "Теперь вы - настоящий художник! Создайте зимнюю
        Страну чудес и покажите ее друзьям."
      Standalone_Artist_1_instruction: "Добро пожаловать к Художнику! Прежде всего,
        создадим простой квадрат, используя блоки поворота направо и движения вперед.
        Длина каждой стороны должна быть 100 пикселей."
      Standalone_Artist_2_instruction: "Нарисуйте этот ромб с углами 120 и 60 градусов
        и сторонами по 150 пикселей."
      Standalone_Artist_3_instruction: "Сможешь нарисовать этот шестиугольник со сторонами
        по 100 пикселей и углами по 60 градусов?"
      Standalone_Artist_4_instruction: "Теперь у нас есть новый блок - цикл. Он повторяет
        выполнение набора команд. Что произойдет, если выполнить эти команды в цикле
        6 раз?"
      Standalone_Artist_5.5_instruction: "Обратите внимание, как мы упростили код
        рисования ромба используя цикл. Теперь можно выполнить цикл 12 раз, чтобы
        получился цветок. Подсказка: нужно поворачивать на 30 градусов каждый раз
        после рисования ромба, чтобы не рисовать повторно на том же месте."
      Standalone_Artist_5_instruction: "Сколько раз нужно повторить этот ромб, чтобы
        нарисовать цветок?"
      Standalone_Artist_6_instruction: "Выполните рисование шестиугольника 6 раз.
        На сколько градусов нужно каждый раз поворачиваться? Подсказка: раздели количество
        градусов в окружности на количество повторений цикла."
      Standalone_Artist_7_instruction: 'Функция - это инструмент программирования,
        который позволяет избежать повторения того же самого кода. Эта функция рисует
        цветок, поэтому её можно использовать каждый раз, когда нужно нарисовать цветок.
        Используй её, а также новый блок "перескочить вперед", чтобы нарисовать эти
        цветы. Подсказка: расстояние между цветами - 150 пикселей'
      Standalone_Artist_8_instruction: Функция, которую мы запрограммировали нарисовать
        шестиугольник, называется "Нарисовать фигуру". Запустите код, чтобы увидеть,
        что она делает, а затем поэкспериментируйте с ней. Можете изменить её так,
        чтобы она рисовала узоры из квадратов, треугольников, или восьмиугольников?
      Standalone_Artist_9_instruction: "Теперь вперёд - можете нарисовать всё, что
        Вам хочется! У вас так же есть пустая функция - творите всё, что пожелаете!"
      Standalone_Artist_v2_instruction: "Добро пожаловать к Художнику! Прежде всего,
        создадим простой квадрат, используя блоки поворота направо и движения вперед.
        Длина каждой стороны должна быть 100 пикселей."
      template test_instruction: what up
      Test Play Lab_instruction: This is a test play lab level.
      test_sarah_instruction: hi
      Text Compression 1_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      Total Artist Clone Me_instruction: |
        Freeplay: Here are the functions you've
        written, and some more for you to play with. Draw something awesome! Play
        with the pen width to see how different your drawings look!
      U1L10 NetSim numbers with decimal_instruction: |
        Invent and test a protocol
        for encoding and sending text messages. Your protocol must include the letters
        a-z, spaces, and common punctuation marks. You may add additional characters
        if you wish. See the worksheet handed out by your teacher for more detailed
        instructions!
      U1L11 NetSim numbers with Ascii_instruction: |
        Work with a partner or in a small
        team to develop a protocol that allows you to send formatted text. See the
        worksheet handed out by your teacher for more detailed instructions!
      U1L13 Text Compression_instruction: |
        Look for patterns (repeated words or phrases)
        in the text. Enter the patterns you see into the dictionary on the right.
        As you type entries into the dictionary, the symbol for the entry is inserted
        into the text in place of the pattern.
      U1L4 NetSim SendAB_instruction: "Develop, document, and test a protocol that\nallows
        you to use Internet Simulator to relay a message. See the worksheet\nfor more
        detailed instructions.  \n"
      U1L8 NetSim numbers no decimal_instruction: Default instructions
      U1L8 NetSim numbers with decimal_instruction: |
        With your partner, develop a
        protocol or set of rules for communicating a drawing using only bits. See
        the worksheet handed out by your teacher for more detailed instructions!
      U2 frequency caesar_instruction: "Инструкции"
      U2 frequency random sub_instruction: "Инструкции"
      U2 vigenere cipher_instruction: "Инструкции"
      U2 Vigenere_instruction: Test
      U2L04 - NetSim Routers with Addresses_instruction: |
        Send messages with your
        classmates (Click to see full instructions)
      U2L05 - NetSim - Packets and Building TCP_instruction: |-
        Develop a Protocol
        for Reliably Sending a Message.\r
        \r
        Constraints:\r
        - Packets may contain
        only 6 characters\r
        - Packets may drop with small probability\r
        - Packets
        may not arrive in order
      U2L10 NetSim Automatic DNS_instruction: |
        In this version of the Internet Simulator,
        a Domain Name System (DNS) is provided for you and knows the IP addresses
        of all connected computers. Send a message in the form GET [hostname] to the
        DNS service at address <yourRouterNumber>.15 to get a student's address.
      U2L10 NetSim Manual DNS_instruction: |
        In this version of the simulator you
        can't see the other students' addresses.  Instead, one of you must act as
        a name service, to help share addresses with each other.
      U2L14 frequency random_instruction: Test
      U2L2 NetSim Hub Mode_instruction: |
        Now use the Internet Simulator to send the
        battleship moves. For setup, join a Room with your group, and add ships to
        your paper board for each opponent. When playing, all communication must be
        done through the tool, so no talking, but have fun!\r
      U2L3 NetSim Hub Mode_instruction: |
        Use the Internet Simulator to test out your
        group's binary communication protocol for battleship. How short can you make
        the message and response?
      U2L4 NetSim Routers Addresses_instruction: |-
        For this activity, connect to a
        router with the others in your group. Important note: The router will only
        properly route messages where the first 4 bits are the To: address and the
        second 4 bits are the From: address.\r
        \r
        [TODO: NetSim needs to support
        hierarchical addresses. For now, level is set up for 4 bit to and from addresses]
      U2L5 NetSim Classroom Internet_instruction: |
        For this activity, connect to
        a router with the others in your group. The Internet Simulator now provides
        a place for you to put the To and From addresses, so you don't have to type
        out the bits manually.\r
        \r
      U2L7 NetSim Need for Packets_instruction: |
        Transfer your favicon to a partner
        across a network in which the larger a packet grows, the more likely it is
        to be dropped.
      U3 - Arrays - appendItem_instruction: |
        Create an array of odd numbers 1-11
        by using appendItem. (Click to see full instructions)
      U3 - Arrays - assignment_instruction: |
        Use indexes to change the values in
        this array from 1 to 0. (Click to see full instructions)
      U3 - Arrays - assignment2_instruction: |
        Calculate the sum of three values stored
        in an array. (Click to see full instructions)
      U3 - Arrays - assignment3_instruction: |
        Increase the value of each value in
        the randomly generated array by 1. (Click to see full instructions)
      U3 - Arrays - createFirstArray_instruction: |
        Create an array of the even numbers
        from 0 to 10 and display its contents with console.log. (Click to see full
        instructions)
      U3 - Arrays - Demo App_instruction: |
        Use the "My Favorite Things" app. How
        might this app be making use of an array? (Click to see full instructions)
      U3 - Arrays - expressionsAsIndexes_instruction: |
        Write a program that displays
        a randomly chosen color from the array. (Click to see full instructions)
      U3 - Arrays - favThings addItem_instruction: |
        Write code that allows a user
        to add their own favorite things to the list. (Click to see full instructions)
      U3 - Arrays - favThings bounds_instruction: |
        Add if statements to your event
        handlers that prevent the global index from going out of bounds. (Click to
        see full instructions)
      U3 - Arrays - favThings Counting Variable_instruction: |
        Create a global variable
        for the current index and use it to display the first item in the array. (Click
        to see full instructions)
      U3 - Arrays - favThings createArray_instruction: |
        Create an array of words
        describing your favorite things. (Click to see full instructions)
      U3 - Arrays - favThings firstOutput_instruction: |
        Use setText to display the
        first item in the array. (Click to see full instructions)
      U3 - Arrays - favThings giveIDs_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - favThings keepPlaying_instruction: |
        Make any other improvements
        you want! (Click to see full instructions)
      U3 - Arrays - favThings Next_instruction: |
        Write code that allows the user
        to move forward through your list by clicking the "Next" button. (Click
        to see full instructions)
      U3 - Arrays - favThings Prev_instruction: |
        Write code that allows the user
        to move backward through your list by clicking the "Last" button. (Click
        to see full instructions)
      U3 - Arrays - favThings template_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - globalVariableIndex_instruction: |
        Give your UI elements descriptive
        and meaningful IDs. (Click to see full instructions)
      U3 - Arrays - indexPractice_instruction: |
        Write the contents of the array to
        the screen in numerical order. (Click to see full instructions)
      U3 - Arrays - insertingItems_instruction: |
        Insert items into an array to form
        a complete sentence. (Click to see full instructions)
      U3 - Arrays - insertionErrors_instruction: |
        Run each command that references
        indexes that are out of bounds and observe the results. (Click to see full
        instructions)
      U3 - Arrays - introIndex_instruction: |
        Display the first and last element in
        the array. Display the number 5 from the array. (Click to see full instructions)
      U3 - Arrays - length_instruction: |
        Use list.length to determine the length
        of each array. (Click to see full instructions)
      U3 - Arrays - lengthMinus1_instruction: |
        Use list.length - 1 to log the last
        item in the array to the console. (Click to see full instructions)
      U3 - Arrays - remove_instruction: |
        Remove items from an array to form a complete
        sentence. (Click to see full instructions)
      U3 - Arrays - stringsInArrays_instruction: |
        Write a sentence word by word by
        adding strings to an array. (Click to see full instructions)
      U3 - Canvas - 200dots_instruction: |
        Add a loop to your program that draws 200
        dots on your canvas. (Click to see full instructions)
      U3 - Canvas - appendToArray_instruction: |
        Create an array to store each event
        parameter. Append each event parameter to this array within your event handler.
        (Click to see full instructions)
      U3 - Canvas - changeToMouseMove_instruction: |
        Change your program so that dots
        are drawn at the location of the mouse as the user moves the mouse on the
        canvas. (Click to see full instructions)
      U3 - Canvas - clickToAdd_instruction: |
        Change your program so that dots are
        added to the canvas when the user clicks on it. (Click to see full instructions)
      U3 - Canvas - delete_instruction: |
        Create a button that deletes the drawing
        by clearing the canvas and removing all stored values. (Click to see full
        instructions)
      U3 - Canvas - draw at click point_instruction: |
        Change your program so that
        dots are drawn at the location of the mouse click. (Click to see full instructions)
      U3 - Canvas - freePlay_instruction: |
        Extend the functionality of one of the
        effects, or create an entirely new one of your own. (Click to see full instructions)
      U3 - Canvas - introCanvas_instruction: |
        Add a canvas to your app and set it
        to be the active canvas. Then add a large dot to your canvas. (Click to see
        full instructions)
      U3 - Canvas - movementFunction fix Orig_instruction: |
        Modify the "Original"
        button event handler so that it takes the movement of the mouse into account.
        (Click to see full instructions)
      U3 - Canvas - movementFunction_instruction: |
        Write a function that takes the
        movement of the mouse as input and generates a line width as output. (Click
        to see full instructions)
      U3 - Canvas - One Dot sprayPaint_instruction: |
        Write code that redraws your
        image using a dot whose x and y locations use offsetX and offsetY with a small
        random value added. (Click to see full instructions)
      U3 - Canvas - redrawOriginal_instruction: |
        Write a function that processes
        your array, redrawing the dots as they originally appeared. (Click to see
        full instructions)
      U3 - Canvas - redrawRandom_instruction: |
        Set up a button and event handler
        for the random function. (Click to see full instructions)
      U3 - Canvas - redrawRandom2_instruction: |
        Write a function that processes your
        array, redrawing every dot with a random size. (Click to see full instructions)
      U3 - Canvas - shiftKey_instruction: |
        Add an if statement to your event handler
        so dots are only drawn when the shift key is pressed. (Click to see full instructions)
      U3 - Canvas - sketch_instruction: |
        Write code that redraws your image using
        a sketch effect. (Click to see full instructions)
      U3 - Canvas - sprayPaint_instruction: |
        Update the spray paint code so that
        it redraws your image using multiple random dots instead of using a nested
        for loop. (Click to see full instructions)
      U3 - Canvas - transparentDots_instruction: |
        Change the colors of your dots
        so they have a fully transparent stroke and partially transparent fill. (Click
        to see full instructions)
      U3 - Canvas - usingOffsetXY_instruction: |
        Add a console.log command inside
        the function of your event handler. Use it to display the event parameter.
        Click on the screen to see the contents of the event parameter (Click to see
        full instructions)
      U3 - Conditional Basics - 6_instruction: |
        Add a setText after the if statement
        to "Nope. Guess again." (Click to see full instructions)
      U3 - Conditionals - Combine AND and OR_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instrucitons.
      U3 - Conditionals - Combine AND OR and NOT_instruction: |
        Write an if statement
        that uses AND and OR to display "Time to go to school!" if it's not the
        weekend and the user is under 18. (Click to see full instructions.)
      U3 - Conditionals - Combine AND OR Simple_instruction: |
        Write an if statement
        that uses AND and OR to display "Sleep in!" if it's the weekend and the
        user is a teenager. (Click to see full instructions.
      U3 - Conditionals - intoOr_instruction: |
        Add 2 if statements that use the OR
        operator. (Click to see full instructions)
      U3 - Conditionals - introAND_instruction: |
        Add 2 if statements that use the
        OR operator. (Click to see full instructions)
      U3 - Conditionals - Simple AND_instruction: |
        Write an if statement that uses
        AND to display "You are a teenager." if the user enters an age between 13
        and 19. (Click to see full instructions)
      U3 - Conditionals - Simple OR_instruction: |
        Write an if statement that uses
        OR to display "It's the weekend!" if the user enters a weekend day at the
        prompt. (Click to see full instructions)
      U3 - Design Mode - Console Log_instruction: |
        Update the ID names and `console.log`
        messages to match the correct button. (Click to see full instructions.)
      U3 - Design Mode - Layers and Delete_instruction: |
        Fix the layout of the bullseye
        game. (Click to see full instructions)
      U3 - Design Mode - Multi Screens 2_instruction: |
        Make a 2 screen app which
        can switch back and forth between a black screen and a white screen using
        buttons. (Click to see detailed instructions.)
      U3 - Design Mode - Multi Screens_instruction: |
        Make a 2 screen app with a black
        screen and a white screen. (Click to see detailed instructions)
      U3 - Design Mode - Other Events_instruction: |
        Delete the button and make the
        image move to a random location when you click on it. (click to see detailed
        instructions)
      U3 - Design Mode - WTF Console Log_instruction: |
        Add a 3 console.log messages
        and test them out. (Click to see full instructions.)
      U3 - Design Mode -Recreate Beyond Buttons_instruction: |
        Recreate the game from
        the "Chaser Game" with a Welcome Screen and Game Over Screen. (Click to
        see full instructions.)
      U3 - Design Mode 1_instruction: |
        Add a large red button to your screen using
        Design Mode. (Click for full instructions.)
      U3 - Dice - Dropdown and Score_instruction: |
        Add guess and score to the Dice
        Game (Click to see full instructions)
      U3 - Dice - Dropdown with Strings_instruction: |
        Add a dropdown for difficulty
        level that prints the difficulty level in the console. (Click to see full
        instructions)
      U3 - Dice - If_instruction: |
        Show different die images for the random number
        generated. (Click to see full instructions)
      U3 - Dice - Nested_instruction: |
        Use nested if statements to make the scoring
        different for the different game levels. (Click to see full instructions)
      U3 - High Low - Debug_instruction: |
        Debug the order of the conditionals so
        that it will actually tell the user when their guess is close. (Click to see
        full instructions)
      U3 - High Low - Dropdown_instruction: |
        Add a dropdown for their guess instead
        of promptNum (Click to see full instructions)
      U3 - High Low - Else if_instruction: |
        Add an else-if statement in order to
        tell the user if their guess is high or low instead of just wrong. (Click
        to see full instructions)
      U3 - High Low - Else_instruction: |
        Add an else statement so that the program
        will tell the user when they are right and when they are wrong. (Click to
        see full instructions)\r
      U3 - High Low - If_instruction: |
        Add code to the if statement that indicates
        the user guessed the secret number. (Click to see full instructions)
      U3 - Keys - Add Image URLs_instruction: |
        Add image URLs to your array. Replace
        the text area with an image and setText with setImageURL. Then test your app!
        (Click to see full instructions)
      U3 - Keys - Buttons and Keys_instruction: |
        Have the program respond the same
        way for both clicking images on the screen and hitting the up and down keys
        on the keyboard. (Click to see full instructions)
      U3 - Keys - Demo App_instruction: |
        Play with the image scroller. Press the
        left and right arrows to progress through the images.
      U3 - Keys - Final Image Scroller_instruction: |
        Update the image scroller to
        respond to buttons and key presses. (Click to see full instructions)
      U3 - Keys - Functions_instruction: |
        Write doUpArrow and doDownArrow functions
        and call the functions instead of duplicating the code. (Click to see full
        instructions)
      U3 - Keys - Key Up and Down_instruction: |
        Try out the keyup and keydown events
        to see how they are different from keypress. (Click to see full instructions)
      U3 - Keys - Multiple Keys_instruction: |
        Play a different sound when the down
        arrow is pressed. (Click to see full instructions)
      U3 - Keys - Practice Adding Images with URL_instruction: |
        Add image URLs to
        your image array. Test out the add button. Style your image scroller. (Click
        to see full instructions)
      U3 - Keys - Words to Images_instruction: |
        Add image URLs to your image array.
        Test out the add button. Style your image scroller. (Click to see full instructions)
      U3 - Loops -  9 Part 2_instruction: |
        Change the boolean expression for the
        while loop so that it will roll until both dice are greater than 3. (Click
        to see full instructions)
      U3 - Loops -  Complex Condition_instruction: |
        Change the boolean expression
        for the while loop so that it will stop when both dice are greater than or
        equal to 5. (Click to see full instructions)
      U3 - Loops - 1_instruction: |
        Change the condition for the while loop to check
        if the variable num is less than 90. (Click to see full instructions)
      U3 - Loops - 10_instruction: |
        Write a program that simulates the rolling of
        two dice. Roll the dice repeatedly until the sum of the dice is either 7 or
        11.
      U3 - Loops - 11_instruction: |
        Fix the condition so that it keeps rolling the
        die as long as the value is not a 2 or a 3 instead of rolling infinitely.
        (Click to see full instructions)
      U3 - Loops - 12_instruction: |
        Change the code so that it prints the string
        "Hi" 5 times. (Click to see full instructions)
      U3 - Loops - 13_instruction: |
        Update the code to count up by 3 instead of 1.
        (Click to see full instructions)
      U3 - Loops - 14_instruction: |
        Change the loop condition to prevent the infinite
        loop and stop counting once the count is past 30. (Click to see full instructions)
      U3 - Loops - 15_instruction: |
        Count the number of times the sum of the dice
        is 12. (Click to see full instructions)
      U3 - Loops - 16_instruction: |
        Find out how many times you have to roll to get
        the sum of 7 100 times (Click to see full instructions)
      U3 - Loops - 2_instruction: |
        Try creating an infinite loop using !=, > and
        <. (Click to see full instructions)
      U3 - Loops - 3_instruction: |
        Change the if statement to a while loop so the
        program will run until it rolls a 6. (Click to see full instructions)
      U3 - Loops - 4_instruction: |2
         Use the Debug Commands to make a list of all
        the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - 5_instruction: |
        Add code inside the while loop which will update
        the variable num so that the condition will eventually become false. (Click
        to see full instructions)
      U3 - Loops - 6_instruction: |
        Fix the problem so the loop will run at least
        once. Change the initial value of num to a dummy value such as -1. (Click
        to see full instructions)
      U3 - Loops - 7_instruction: |
        Without adding any lines of code, reorder the
        code so that it prints all the values of num. (Click to see full instructions)
      U3 - Loops - 8_instruction: |
        Debug which number is not getting printed and
        add a write statement to display that value. (Click to see full instructions)
      U3 - Loops - 9_instruction: |2
         Modify the condition so that it keeps rolling
        as long as both are less than 3. (Click to see full instructions)
      U3 - Loops - Continue_instruction: |2
         Use the Debug Commands to to make a list
        of all the values rolled before a 6. (Click to see full instructions)
      U3 - Loops - minus = operator_instruction: |
        Update the code to use the -= operator
        to count from 30 down to 0 by 3's. (Click to see full instructions)
      U3 - Loops - Minus Minus_instruction: |
        Change the code to count down from 10
        to 1. (Click to see full instructions)
      U3 - Loops - plus and minus = operator_instruction: |
        Update the code to use
        the += operator. (Click to see full instructions)
      U3 - Loops - Plus Plus_instruction: |
        Change the code to use count++ instead
        of count = count + 1.  (Click to see full instructions)
      U3 - Loops - Typing in Console_instruction: |
        Use console to check the ending
        value of num. (Click to see full instructions)
      U3 - Loops And Arrays - Add 5_instruction: |
        Add 5 to all the values in an array
        (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 1_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Challenge 2_instruction: |
        Write a function that finds
        and returns the minimum value in an array.   (Click to see full instructions)
      U3 - Loops And Arrays - Counting Times_instruction: |
        Count the number of times
        5 appears in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Divid by 2_instruction: |
        Divide every value in the
        array by 2. (Click to see full instructions)
      U3 - Loops And Arrays - Find Max_instruction: |
        Design a function that displays
        the smallest number in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Find Min_instruction: |
        Complete the findMinVal function
        to find and display the smallest value in an array  (Click to see full instructions)
      U3 - Loops And Arrays - Functions that Return Value_instruction: |
        Call findMin
        within the console.log statement to calculate the minimum of two values.  (Click
        to see full instructions)
      U3 - Loops And Arrays - General Search Param_instruction: |
        Add a second parameter
        to the search function for the value to search for.  (Click to see full instructions)
      U3 - Loops And Arrays - Intro For Loop_instruction: |
        Add a for loop with a
        console.log inside and test out the 3 pieces of the for loop. (Click to see
        full instructions)
      U3 - Loops And Arrays - Linear Search_instruction: |
        Visit every element in
        the array and display "true" if the value is a 5, and "false" otherwise.
        (Click to see full instructions)
      U3 - Loops And Arrays - Loop Array If_instruction: |
        Use an if statement to
        only display the values in the array that are greater than 5. (Click to see
        full instructions)
      U3 - Loops And Arrays - Make it a Function - add list parameter_instruction: |
        Create
        a function that takes a list parameter and prints if the list contains a 5.
        (Click to see full instructions)
      U3 - Loops And Arrays - Make it a Function_instruction: |
        Move the code that
        searches the list for a 5 into a function called "search". (Click to see
        full instructions)
      U3 - Loops And Arrays - Multiple Returns_instruction: |
        Test out the return
        values of the findMax function.  (Click to see full instructions)
      U3 - Loops And Arrays - Print Array_instruction: |
        Use a for loop to print out
        all the values in an array. (Click to see full instructions)
      U3 - Loops And Arrays - Printing Single True_instruction: |
        Process the array
        and display a single "true" if the array contains a 5 or a single "false"
        if it does not.  (Click to see full instructions)
      U3 - Loops And Arrays - Return Index_instruction: |
        Make the search function
        return the index of the search value in the array. (Click to see full instructions)
      U3 - Loops And Arrays - Return Value_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Loops And Arrays - Search and Remove_instruction: |
        Search for 5 in the
        array and remove it from the array. (Click to see full instructions)
      U3 - Loops And Arrays - Search with Boolean Var_instruction: |
        Make a boolean
        variable to use as a flag to keep track of whether there is a 5 in the array.
        (Click to see full instructions)
      U3 - Loops And Arrays - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Movie Bot - Multiple If Sequences_instruction: |
        Add another set of if,
        else if, and else statements inside the question if statement to check for
        keywords for movie ratings (G, PG, PG-13, and R). (Click to see full instructions)
      U3 - Movie Bot - Nested Motivation_instruction: |
        Add a separate set of if statements
        to check for a "?" in the input. (Click to see full instructions)
      U3 - Movie Bot - toLowerCase_instruction: |
        Use the toLowerCase command to change
        all user input into lowercase letters after they enter it. (Click to see full
        instructions)
      U3 - Movie Bot - When Multiple If Statements_instruction: |
        Add an if and else-if
        statement that checks for please and thank you. (Click to see full instructions)
      U3 - Practice Create Performance Task_instruction: |
        Design and implement your
        practice Create Performance Task. (Click to see full instructions)
      U3 - Read Record - 1.2_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.5_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1.6_instruction: |
        Console.log the records returned by a
        call to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 1_instruction: |
        Console.log the records returned by a call
        to readRecords. (Click to see full instructions)\r
      U3 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table.(Click to see full instructions)\r
      U3 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U3 - Read Record - 4.1_instruction: |
        Print out each record return from the
        readRecords call individually. (Click to see full instructions)\r
      U3 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U3 - Read Record - 5 and half_instruction: |
        Print out the name of each movie
        in the records return from the readRecords call. (Click to see full instructions)\r
      U3 - Read Record - 5_instruction: |
        Print out the name of each movie in the
        records return from the readRecords call. (Click to see full instructions)\r
      U3 - Return Values - constrainTurtle_instruction: |
        Use constrain in this simple
        app to keep the turtle from driving off the screen.  (Click to see full instructions)
      U3 - Return Values - debuggingConstrain_instruction: |
        Correct the error in
        constrain so that it returns the appropriate value.  (Click to see full instructions)
      U3 - Return Values - debuggingMaxVal_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - debuggingReturns_instruction: |
        Correct the error in maxVal
        so that it correctly reports the maximum value.  (Click to see full instructions)
      U3 - Return Values - increase1_instruction: |
        Call the increase function within
        moveForward, write, and console.log.  (Click to see full instructions)
      U3 - Return Values - increase2_instruction: |
        Change the increase function to
        return 3 times the input value. (Click to see full instructions)
      U3 - Return Values - min1_instruction: |
        Test out the return values of the findMax
        function.  (Click to see full instructions)
      U3 - Return Values - useFindMin_instruction: |
        Call findMin within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - useMinVal_instruction: |
        Call minVal within the console.log
        statement to calculate the minimum of two values.  (Click to see full instructions)
      U3 - Return Values - wrapTurtle_instruction: |
        Write wrap in this simple app
        to let the turtle "wrap" to the other side of the screen when it goes off.  (Click
        to see full instructions)
      U3 - Return Values - writeMaxVal_instruction: |
        Write the function maxVal and
        then use it within the console.log statement to calculate the maximum of two
        values.  (Click to see full instructions)
      U3 - Search Terms - 1_instruction: |
        Create an array of all the movies made
        in 2008 and print it out. (Click to see full instructions)\r
      U3 - Search Terms - 2_instruction: |
        Print out all the movies with year 2008
        using the readRecords search terms. (Click to see full instructions)\r
      U3 - Search Terms - 3_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 4_instruction: |
        Print whether or not there are movies matching
        the search criteria (Click to see full instructions)\r
      U3 - Search Terms - 5_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Search Terms - 6_instruction: |
        Print out the cities that are in California
        or have a population of 2,000,000. (Click to see full instructions)\r
      U3 - Simulation - 1_instruction: |
        Use a while loop to "flip a coin 10 times"
        and write the values to the screen. (Click to see full instructions)
      U3 - Simulation - 2.1_instruction: |
        Change your looping condition so the simulation
        runs until there are 5 heads flipped. (Click to see full instructions)
      U3 - Simulation - 2.5_instruction: |
        Run your simulation to get the full 10,000
        heads! How long did it take? (Click to see full instructions)
      U3 - Simulation - 2_instruction: |
        Keep track of how many heads (1's) your
        program generates and print the results to the screen. (Click to see full
        instructions)
      U3 - Simulation - 3_instruction: |
        Add functionality that counts how many heads
        in a row are flipped. (Click to see full instructions)\r
      U3 - Simulation - 4_instruction: |
        Update your while loop's condition so the
        the coin flips until there are three heads in a row. (Click to see full instructions)
      U3 - Simulation - 5_instruction: |
        Change your while loop to run until you get
        a streak of 12 heads. How many flips did it take? (Click to see full instructions)
      U3 - Simulation - 6_instruction: |
        Keep adding to your simulation. What do you
        want to explore next? (Click to see full instructions)
      U3 - Simulation - App_instruction: |
        Change your code to run the full simulation
        with 10,000 coins. What was your longest streak of heads? (Click to see full
        instructions)
      U3 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3 - User Input - Save getText To Variable_instruction: |
        Save the age and name
        of the user in variables (Click to see full instructions)
      U3 - User Input - Saving After Input_instruction: |
        Save the age of the user
        in a variable using getText() (Click to see full instructions)
      U3 - User Input and String -  Concat_instruction: |
        Output a message about age
        in a Text Area (Click to see full instructions)
      U3 - Variables - Clicker Game_instruction: |
        Create your improved Chaser-Game
        here. (Click to see full instructions)
      U3 - Variables - Debug Scope_instruction: |
        Why isn't the value of foo changing
        correctly? Make a guess. (Click to see full instructions)
      U3 - Variables - Debugging with Turtle_instruction: |
        Use your new debugging
        techniques to get the code to run correctly (Click to see full instructions)
      U3 - Variables - Decrement_instruction: |
        Decrement the value of the variable.
        (Click to see full instructions)
      U3 - Variables - Identify Variables_instruction: |
        Identify the values printing
        in the terminal with console.log statements. (Click to see full instructions)
      U3 - Variables - Increment_instruction: |
        Use the console.log debugging technique
        to see what is happening in this example. Add another variable and increment
        its value. (Click to see full instructions)
      U3 - Variables - Incrementing Variables_instruction: |
        Create a repeat loop
        for the repeated code and use increment to recreate the original program with
        less lines of code! (Click to see full instructions)
      U3 - Variables - Read Using Turtle_instruction: |
        Create a second set of variables
        for x and y position. Move turtle to that new location. (Click to see full
        instructions)
      U3 - Variables - Reassigning Variables with Console.log_instruction: |
        Add another
        reassignment statement at the end of the code to change the value of the variable
        at second time. (Click to see full instructions)
      U3 - Variables - Set to Expression with Other Variables and Turtle_instruction: |
        (click
        to see full instructions)
      U3 - Variables - Set to Expression with Other Variables_instruction: |
        Write
        an expression that calculates the player's total score and stores it in the
        totalScore variable. The calculation is: the player's points times lives
        divided by the total time. (click to see full instructions)
      U3 - Variables - Set to Expression with Turtle_instruction: |
        (click to see
        full)
      U3 - Variables - Set to Expression_instruction: |
        Test out the new expressions.
        (Click to see full instructions)
      U3 Digital Assistant Design_instruction: |
        Pick a topic for your Digital Assistant
        and create the basic layout with a text input and text area. (Click to show
        full instructions)
      U3 Digital Assistant Set Text_instruction: |
        Have your digital assistant repeat
        back what the user types and include a canned response. (Click to see full
        instructions)
      U3 Digital Assistant Target - Mehal_instruction: |
        Try out a demo of the Digital
        Assistant!
      U3 Digital Assistant Target_instruction: Try out a demo of the Digital Assistant!
      U3 Digital Assistant Template_instruction: This is a project template!
      U3 Digital_instruction: |
        Choose a specialization topic for your digital assistant.
        Create a basic digital assistant that takes the user's input and displays
        back a default response.
      U3 full clicker demo_instruction: Clicker game - Try it out!
      U3 mehal's clone_instruction: Try out a demo of the Digital Assistant!
      U3- Variables - Assign Random For Turtle Draw_instruction: |
        Try writing the
        same code in text mode.
      U3- Variables - Changing the Value_instruction: |
        Update the value of 'turnAmount'
        before each moveForward so the turtle turns a different amount each time.
        (Click to see full instructions)
      U3- Variables - Create And Assign_instruction: |
        On one line add a variable
        called "lives" and assign it the value 3. Print it to the console. (Click
        to see full instructions)
      U3- Variables - Text Mode_instruction: |
        1. Switch to text mode and type instructions;
        2. drag blocks out into text mode; 3. experiment with code completion
      U3-Design Mode-ID and Event Handler_instruction: |
        Add an event handler for
        the button using the "Insert and show" link in the Design Mode Events tab.
        (Click to see full instructions).
      U3-Design Mode-ID_instruction: |
        Using the Design Mode Events change the button
        ID and update the code to match. (Click to see detail instructions).
      U3-Design Mode-Image_instruction: |
        Recreate the "Chaser Game" from the last
        lesson using Design Mode. (Click to see full instructions.)
      U313 drag Two Buttons_instruction: |
        Run a program with two buttons that have
        the same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 eventsDetails_instruction: |
        Run a program with two buttons that have the
        same id to see the warning message in the console. Change the ids to make
        the program run without getting a warning message.
      U313 Two Buttons with Ids_instruction: |
        Predict what will happen. Once you've
        made a prediction, run the code to see what happens. (Click to see full instructions)
      U3L03 - draw rect function_instruction: |-
        Write a function called drawRectangle().\r
        (Click
        to see full instructions)
      U3L03 - draw step_instruction: |
        Write the drawStep function. (Click to see
        full instructions)
      U3L03 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.  GIF: U3L3-ProceduresChooseOne.png
      U3L03 Creating Procedures 1_instruction: |
        Write the turnAround() function and
        use it to make the turtle move as depicted. see: U3L03-turnAndDown.gif
      U3L03 Define and use turnAround_instruction: |
        Define a function called turnAround.
        Call the function and then move the turtle forward. (Click to see full instructions)
      U3L03 define turnRight and draw a rectangle_instruction: |
        Define a function
        called right() that turns the turtle to the right. Then use this function
        to draw a rectangle, as shown below. (Click to see full instructions)
      U3L03 Draw a T using turnAround_instruction: |
        Draw a plus sign using the provided
        version of turnAround().  (Click to see full instructions)
      U3L03 draw diamond_instruction: |
        Create a function called drawDiamond() that
        makes use of your previous work to draw the complete diamond. (Click to see
        full instructions)
      U3L03 Three Steps_instruction: |
        Define a function called drawSide() which draws
        three steps and moves the turtle to prepare for the next side (Click to see
        full instructions)
      U3L04 - 3 by 3 with functions_instruction: |
        Make the 3x3 square as efficiently
        as you can. (Click to see full instructions)
      U3L04 - snowflake_instruction: |
        Create the design by breaking it down into
        layers of functions. (Click to see full instructions)
      U3L04 choose your own drawing_instruction: |
        Now choose your own!  Pick one
        of the three drawings shown here and attempt to create it on your own, making
        smart decisions about how to break the problem down into re-usable functions.  You
        will review your work with a peer using "procedures peer review rubric."  Check
        it for the requirements.
      U3L04 diamond solution_instruction: |
        Study this solution to the drawDiamond
        problem.  Notice that the whole program starts by calling drawDiamond() at
        the top.  The program then follows a chain of function calls.  You can trace
        what's happening in the code to see the functions reused.  It's also easy
        to read because the function names describe the expected behavior.
      U3L05_3x3GridEfficiencyChallenge_instruction: |
        Let's revisit the 3x3 grid
        problem you did a few lessons ago.  This time the challenge is to program
        the solution "as efficiently as possible."  Now that you know how to write
        functions, it should be easier to break the problem down, and your code should
        be easier to read and debug.  See the rubric for more details about requirements
        and expectations.
      U3L05_draw3x3GridEfficiently_instruction: |
        Draw a 3x3 grid above and to the
        right of the turtle. Try to do so with the fewest number of commands possible.
        NOTE: This is a very challenging problem.  You may need to play with it for
        a while and tweak it.  You might also consider using pencil and paper to sketch
        your ideas.
      U3L06 - moveForwardwithParams_instruction: |
        Use a single command to move the
        turtle to the edge of the screen. (Click to see full instructions)
      U3L06 Challenge 1 triangle_instruction: |
        Use the parameterized versions of
        the turtle commands to create a triangle with sides 100 pixels long. (Click
        to see full instructions)
      U3L06 Challenge 2 purple square_instruction: |
        Read the documentation for penColor()
        and penWidth() before using them to draw the blue square.
      U3L06 Challenge 3 fill pink_instruction: |
        Fill in the background of the screen
        with your favorite color. (Click to see full instructions)
      U3L06 Challenge 4 bullseye_instruction: |
        Create the bullseye using hexadecimal
        colors and dot(). (Click to see full instructions)
      U3L06 Challenge 5 overlapping circles_instruction: |
        This image is created just
        using dot() and penColor() but, how are we going to get those circles to be
        transparent?  If you haven't gotten the hint yet: check out the documentation!
      U3L06 Challenge 6 squiggles_instruction: "Read the documentation for the \"arcLeft\"\nand
        \"arcRight\" commands and then draw the squiggles as shown. \n"
      U3L06 Challenge 7 smiley face_instruction: |
        Use turnTo() and moveTo() to help
        draw a smiley face. (Click to see full instructions)
      U3L06 Challenge 8 make your own_instruction: |
        Create a drawing of your own.
        (Click to see full instructions)
      U3L07 - allSeaGrass_instruction: |
        Add 50 pieces of seagrass to the image by
        writing drawAllSeagrass with a loop. (Click to see full instructions)
      U3L07 - bubbles_instruction: |
        Add 200 bubbles to the image by writing drawAllBubbles
        with a loop. (Click to see full instructions)
      U3L07 - callingFunctionsInLoops_instruction: |
        Call the function within the
        loop to complete the figure. (Click to see full instructions)
      U3L07 - createTriangleParam_instruction: |
        Define a function that accepts a
        parameter to match the function calls and complete the image. (Click to see
        full instructions)
      U3L07 - fish_instruction: |
        Add 15 fish to the image by writing drawAllFish
        with a loop. (Click to see full instructions)
      U3L07 - Free Play Loops and Random_instruction: |
        Free Play! Use what you learned
        from loops and random to make your own little scene. Have fun.
      U3L07 - introSquare_instruction: |
        Use a loop to draw a square. (Click to see
        full instructions)
      U3L07 - loopsWithRandom_instruction: |
        Increase the number of iterations to
        fill the screen with white. (Click to see full instructions)
      U3L07 - randomDots1_instruction: |
        Increase the number of iterations to fully
        fill the screen with random dots. (Click to see full instructions)
      U3L07 - randomSquare_instruction: |
        Draw the figure using a loop. (Click to
        see full instructions)
      U3L07 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that controls
        the number of waves in the grass. (Click to see full instructions)
      U3L07 - seaStar_instruction: |
        Add 5 sea stars to the image by writing drawAllSeaStars
        with a loop. (Click to see full instructions)
      U3L07 - Starry Night Starter Code_instruction: "You are going to use loops\nand
        random numbers to generate an image of starry night sky similar to one\nshown
        here.  We have given you some starter code to generate the ground and\nsky
        (just two giant dots), you will add code to this project to make the stars,\ngrass,
        and moon.  All of the effects are clever applications of turtle dots,\nlines,
        and colors.  To get started, follow the series of steps suggested in\nthe
        accompanying worksheet. \n"
      U3L07 - sunBeams_instruction: |
        Add 100 sunbeams to the image by writing drawAllSunbeams
        with a loop. (Click to see full instructions)
      U3L07 - topDownDesign_instruction: |
        Get comfortable with the structure of this
        program, then move on to the next exercise. (Click to see full instructions)
      U3L08 - createTwoParamTriangle_instruction: |
        Define a function called drawTriangle()
        that accepts two parameters to set the size and width of the triangle. (Click
        to see full instructions)
      U3L08 - digitalScene_instruction: |
        Create the functions you were assigned as
        part of your digital scene. (Click to see full instructions)
      U3L08 - drawSquaresWithParams_instruction: |
        Write drawSmallSquare() to draw
        a 25px square. (Click to see full instructions)
      U3L08 - drawSquareWithParam - for video_instruction: |
        Use drawSquare() to recreate
        the image of both squares, this time using parameters. (Click to see full
        instructions)
      U3L08 - drawSquareWithParam_instruction: |
        Use drawSquare() to recreate the
        image of both squares, this time using parameters. (Click to see full instructions)
      U3L08 - Enchantment Under the Sea_instruction: |
        You have been provided with
        starter code for an “Under the Sea” scene which includes three functions,
        one each for the starfish, sea grass, and fish. Create versions of these functions
        which accept parameters to allow you to add more variation to your scene.  The
        student worksheet provides more details and guidance.
      U3L08 - fish_instruction: |
        Add a parameter to drawFish that changes the size
        of the fish drawn. (Click to see full instructions)
      U3L08 - freePlay_instruction: |
        Keep adding to your image by making more calls
        to your new functions with parameters. (Click to see full instructions)
      U3L08 - individualCode_instruction: |
        Create the functions you were assigned
        as part of your digital scene. (Click to see full instructions)
      U3L08 - introUnderTheSea_instruction: |
        Add an extra fish, starfish, and piece
        of sea grass to the image. Look at, but don't change, the functions that
        create them. (Click to see full instructions)
      U3L08 - multiParamFish_instruction: |
        Add three parameters to your drawFish
        function to accept red, green and blue values to make your fish different
        colors. (Click to see full instructions)
      U3L08 - multipleLayersofParams_instruction: |
        Call drawPlusSign() to complete
        the image. (Click to see full instructions)
      U3L08 - paramsToStarfish_instruction: |
        Add a parameter to drawStarfish that
        changes the size of the starfish drawn. (Click to see full instructions)
      U3L08 - randomInput_instruction: |
        Use the randomNumber() blocks to test the
        functions you designed with random input. (Click to see full instructions)
      U3L08 - seaGrass_instruction: |
        Add a parameter to drawSeagrass that changes
        the size of the piece of seagrass drawn. (Click to see full instructions)
      U3L08 - squareTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L08 - starFish_instruction: |
        Add an extra fish, starfish, and piece of sea
        grass to the image. Look at, but don't change, the functions that create
        them. (Click to see full instructions)
      U3L08 - triangleTwoParams_instruction: |
        Call drawSquare() to complete the drawing
        of two squares. (Click to see full instructions)
      U3L1 - Simulation - Template_instruction: |
        Use a while loop to "flip 10 coins"
        and write them to the screen. (Click to see full instructions)
      U3L12 Chaser Template_instruction: This is a project template!
      U3L13 - Button with ID_instruction: |
        Drag a button out onto the screen and
        set its text to "Go forth!".  Run the program to make sure you can see the
        button.
      U3L13 - Debug Id plus logic problem_instruction: |-
        The last problem was an example
        of syntax error.  App Lab did not understand which object it should be listening
        to for a "click" event so it showed an error message in the console to let
        you know.  Another kind of error is a logical error - the program is valid,
        but it's not doing what you want it to do.\r
        \r
        This program has 2 errors.
        A (tricky) syntax error and logical error.  Find them, fix them, and make
        the program work as expected.
      U3L13 - Debug Id Problem_instruction: |
        Improve the button by choosing a descriptive
        and meaningful ID. (Click to see full instructions)
      U3L13 - Debugging 1_instruction: |
        Debug the program by verifying your IDs are
        being referenced properly. (Click to see full instructions)
      U3L13 - Debugging 2_instruction: |
        Debug the program by properly ordering your
        button commands and event handlers. (Click to see full instructions)
      U3L13 - Debugging 3_instruction: |
        Debug the program by fixing the logical error
        within the program. (Click to see full instructions)
      U3L13 - Project_instruction: |
        Create your multi-screen app. (Click to see full
        instructions.)
      U3L13 - Turtle Driver Project_instruction: |
        Create a "turtle driver" that
        includes buttons to move the turtle forward and turn it left and right. (Click
        to see full instructions)
      U3L13 - Turtle move with button_instruction: |
        Add a button that moves the turtle
        when clicked.  (Click to see full instructions)
      U3L13 eventsDetails_instruction: |
        Add an event handler to the button to move
        the turtle forward. (Click to see full instructions)
      U3L14 - Assigning Random Value_instruction: |
        Write a program that simulates
        the rolling of two dice and reports their individual values as well as the
        sum. (click to see full instructions)
      U3L14 - concatenate simple_instruction: |
        Modify the write statement on line
        3 to combine text and variables together to make the app display a single
        line of text that shows the player's lives and score. (click to see full
        instructions)
      U3L14 - Mini Calculator embed_instruction: |
        You will be prompted for two numbers,
        one right after the other.  See what happens.  Enter different numbers until
        you get the idea.
      U3L14 - moving memory challenge1_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge2_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge3_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge4_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge5_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - moving memory challenge6_instruction: |
        Using only the variables provided,
        assignment (=) and arithmetic (+ - * /) re-assign the values to make the console.log
        statement display the correct value(s).  (Click to see full instructions)
      U3L14 - Unfortunate Events Free Play_instruction: |
        Follow the "Unfortunate
        Events" Worksheet and enter your code here to experiment.  We've pre-loaded
        the code you need to start.
      U3L14 - User Input Division calculator_instruction: |
        Write a program that acts
        as a simple calculator. (click to see full instructions)
      U3L14 - Variable ReAssignment pt2_instruction: |
        Trace the code and predict
        what you think will be printed to the console. Then add a console.log statement
        at the end of the program to see the last value of someNum to see if your
        full prediction is correct. (click to see full Instructions)
      U3L15 - add code to make count down work_instruction: |
        Write code to make the
        down arrow work as expected. (Click to see full instructions)
      U3L15 - Add reset button to UpDown app_instruction: |
        Add code so that clicking
        the start over button will reset the game and send you back to the main screen.
        (Click to see full instructions)
      U3L15 - clicker update score_instruction: |
        Add code to update the score when
        the apple is clicked. (Click to see full instructions)
      U3L15 - count upDown bug forget to set text_instruction: |
        Find the bug in the
        program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug logic error wrong update_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - count upDown bug var not created globally_instruction: |
        Find the bug
        in the program and fix it. (Click to see full instructions)
      U3L15 - Debug forget to update var on reset in UpDown app_instruction: |
        Run
        the app, and click the up or down button until you get to the gameOverScreen.
        Click 'Start Over' and try the app again. Find and fix the issue in the
        code. (Click to see full instructions)
      U3L15 - Debug if never triggers in UpDown app_instruction: |
        Run the app and
        use the up and down arrows to try to hit the gameOverScreen. You can't! Find
        and fix the issue in the code. (Click to see full instructions)
      U3L15 - Debugging Simple If-statements =v==_instruction: |
        Run the app, and
        click the up button. Then restart and run it again, and click the down button.
        Find and fix the issue in the code. (Click to see full instructions)
      U3L15 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L15 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L15 - mini clicker update score_instruction: |
        Add code to update the score
        when the apple is clicked. (Click to see full instructions)
      U3L15 - practice with setText_instruction: |
        Use setText to complete the click
        event handler for the down arrow. (Click to see full instructions)
      U3L15 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L15 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer working. (Click to see full instructions)
      U3L15 click add lives_instruction: |
        Add lives to the clicker game that decrement
        by 1 when the background image is clicked (Click to see full instructions)
      U3L15 full clicker app_instruction: |
        Complete your clicker game! (Click to
        see full instructions)
      U3L16 - challenge say hi app_instruction: |
        Write a greeting to the user when
        they hit 'enter' in the text input, using the 'change' event. (Click to
        see full instructions)
      U3L16 - chaserApp_instruction: |
        Create your own "Chaser Game." (Click to
        see full instructions)
      U3L16 - chooseImages_instruction: |
        Replace the image in your application with
        one of your own. (Click to see full instructions)
      U3L16 - doubleQuotes_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - hideAndShow_instruction: |
        Introducing textInput, getText and write.  First
        run the starter code several times.  Try to change what's written to the
        screen when the button is clicked. Then use getText to write to the screen
        what the user entered in the text box. GIF: U3L16 - useGetText.gif
      U3L16 - hideAndShowPractice_instruction: |
        You are given some starting code
        that puts an image and two buttons on the screen.  The image is initially
        hidden. Add two new event handlers: one for each button, that when clicked
        hide and show the image.
      U3L16 - image and text labels_instruction: |
        Introducing the setPosition command!  Replace
        the moveTo in the button-click event handler to use setPosition to move the
        button itself to a random location when it's clicked.
      U3L16 - images and text labels_instruction: "Introducing objects other than\nbuttons!
        - textLabels and images.  First try replacing your button with a\ntextLabel.
        \ Will the text respond to events just like the button?  Try connecting\nan
        event handler to it.  We've started you out with code similar to the result\nof
        the last level, you can copy your code from that level into here if you\nprefer.
        \n"
      U3L16 - images_instruction: "Introducing Images.  Try replacing the textLabel\nwith
        an image..  Will the image respond to events just like the button?  Try\nconnecting
        an event handler to it.  We've started you out with code similar\nto the result
        of the last level, you can copy your code from that level into\nhere if you
        prefer. \n"
      U3L16 - intro getText_instruction: |
        Add an event handler to the Submit button
        so that when the button is clicked it will display the name entered in the
        text box to the console.  Use getText to get the value out of the text box.
        (Click to see full instructions)
      U3L16 - introSetPosition_instruction: |
        Move the buttons to the bottom of the
        screen. (Click to see full instructions)
      U3L16 - introStrings_instruction: |
        Save a string inside a variable and log
        it to the console. (Click to see full instructions)
      U3L16 - nameAgeTemplate_instruction: |
        Add an Text Input box for the name and
        age. (Click to see full instructions)
      U3L16 - newEventTypes_instruction: |
        Experiment with different event types and
        select the one that you think is best. (Click to see full instructions)
      U3L16 - outputWithTextArea_instruction: |
        Output a message to the 'textArea'
        (Click to see full instructions)
      U3L16 - projectTemplate_instruction: |
        Create your own "Chaser App". (Click
        to see full instructions)
      U3L16 - quick double click_instruction: |
        Mini-Project.  The Quick Double-Click
        game.  In this simple game an object (an image) moves around, or pops up randomly
        on the screen, as the user clicks it.  The goal of our game will be to try
        to double-click the object before it moves.  Part of the challenge (and fun)
        here is creating this app from scratch.  You can look back at your previous
        work for examples, but it's fun to create something from scratch, too.  Try
        it!  For more details see the Activity guide for this lesson.
      U3L16 - setPosition to move button_instruction: |
        Introducing the setPosition
        command! Replace the moveTo in the button-click event handler to use setPosition
        to move the button itself to a random location when it's clicked.
      U3L16 - setPositionMoveButton_instruction: Use setPositon to moveButton
      U3L16 - setupMoveToRandom_instruction: |
        Modify the code so that the turtle
        moves to a random screen location when the button is clicked. (Click to see
        full instructions)
      U3L16 - singleSetPosition_instruction: |
        Move the button to the middle of the
        screen. (Click to see full instructions)
      U3L16 - stringsVsNumbers_instruction: |
        Run the program to see how strings and
        numbers behave with different arithmetic operators. (Click to see full instructions)
      U3L16 - text labels_instruction: |
        Use the textLabel command to replace the
        button in your program with a text label. (Click to see full instructions)
      U3L16 - textInput getText write_instruction: |
        Add an Text Input box for the
        name and age. (Click to see full instructions)
      U3L16 - toUpper_instruction: |
        Make the name of the user appear in uppercase
        (Click to see full instructions)
      U3L16 - use images_instruction: |
        Use the image command to replace the text
        label in your program with an image. (Click to see full instructions)
      U3L16 Mad Lib Clear Input_instruction: "Clear the user's previous text when\nthe
        Play Again button is clicked (Click to see full instructions) \n"
      U3L16 Mad Lib Demo_instruction: Mad Libs Demo - Try it out!
      U3L16 Mad Lib getText_instruction: "Before setting the text area with your\nMad
        Libs outline, get the user's text and incorporate their responses. (Click\nto
        see full instructions) \n"
      U3L16 Mad Lib setText_instruction: "When the Next button is clicked, set the\ntext
        area to have the main outline of your How-to Mad Libs (without the user's\ninput).
        (Click to see full instructions) \n"
      U3L16 Mad Lib Student Setup_instruction: |
        Back to Mad Libs: To get started,
        set up the two screens for your Mad Libs app (Click to show full instructions)
      U3L16 Mad Lib toUpper_instruction: "Apply the toUpperCase and toLowerCase string\nfunctions
        to the user's text. (Click to see full instructions) \n"
      U3L17 - getAndSetKeyValue_instruction: |
        Create an image like app. (Click to
        see full instructions)
      U3L17 - getKeyValue_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introCallbacks_instruction: |
        Run the program several times to observe
        how the setKeyValue commands now always arrive in order. (Click to see full
        instructions)
      U3L17 - introKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - readKeyValue_instruction: |
        Explore your key value pairs with the Data
        Viewer. (Click to see full instructions)
      U3L17 - setKeyValue_instruction: |
        Create and update your key value pairs using
        setKeyValue. (Click to see full instructions)
      U3L17 - twoSetKeyValue_instruction: |
        Run the program several times to observe
        how often setKeyValue commands arrive out of order. (Click to see full instructions)
      U3L18 comparison operators_instruction: |
        Use console.log to print out the different
        boolean expressions below to see what information they return. (Click to see
        full instructions)
      U3L18 comparison operators_for_video_instruction: |
        Use `console.log` to print
        out the different boolean expressions below to see what information they return.
        (Click to see full instructions)
      U3L19 - Clicker Game Freeplay Area_instruction: |
        Use this App Lab area to improve
        your clicker game.  You should start by copy/pasting the code from your old
        game here.  We're showing a more full set of blocks in the toolbox - some
        of the things you might not have used yet.  Feel free to explore then and
        experiment if you want to.  Everything else you need should be shown.  Have
        fun!
      U3L19 - Debugging with consoleLog_instruction: |
        Add console.log() statements
        to find out the value of a and b after the first reassignment statement a
        = b; (Click to see full instructions)
      U3L19 - DEMO up down count practice app_instruction: |
        Try out the demo app
        (Click to see full instructions)
      U3L19 - do concatenate string with var_instruction: |
        We've given you a piece
        of code from the previous screen.  Try changing the value assigned to foo
        to see the string change. \r
        Do this: \r
        1. Try changing the value assigned
        to foo to see the string change. \r
        2. By only modifying the lines of code
        that were given to you, try to get the output to say: “The value of foo is:
        9.  And isn’t that fine.” \r
      U3L19 - fix the var name syntax error v2_instruction: |
        Fix the error and get
        it to print the value of both variables (Click to see full instructions)
      U3L19 - fix the var name syntax error_instruction: |
        Fix the error and get it
        to print the value of both variables (Click to see full instructions)
      U3L19 - global var example count up_instruction: |
        Look at the code for this
        app and see how the code works to update the count variable when the up arrow
        is clicked. (Click to see full instructions).
      U3L19 - practice with setText_instruction: |
        Add another button that changes
        the text to the value of a new variable. (Click to see full instructions)
      U3L19 - Simple If-statements in UpDown App_instruction: |
        Add an if statement
        so that the app changes screens when the count reaches -5. (Click to see full
        instructions)
      U3L19 - Target Clicker App_instruction: |
        Investigate the new elements of the
        'chaser-game'
      U3L19 - test reassignment of two vars_instruction: |
        Predict the value of a
        and b. Add console.log statements to find out the actual value of a and b.
        (Click for full instructions)
      U3L19 - three basic ops of variables_instruction: |
        Add another variable called
        "lives" and set the value to 3. Print the value of the variable to the console.
        (Click to see full instructions)
      U3L19 - try out console log_instruction: |-
        Try out console.log.  Do this: replace
        the statement write("foo is: " + foo) with console.log("foo is: " + foo).  Run
        the program and you should see the output show up in the console area below
        the workspace.  Then try adding a few more console.log statements.  Display
        some text.  Make another variable and display that.  \r
        The app screen will
        be blank -- that's the point.  With console.log you can test output behind
        the scenes in a way the user cannot see.  \r
        \r
        \r
        GIF: U3L19-useconsolelog.gif
      U3L19 - up down count practice app_instruction: |
        Set up the down button to
        decrease the value of count by 1 each time it is clicked. (Click to see full
        instructions)
      U3L19 - updating variables pt1_instruction: |
        This app is only SLIGHTLY different
        from the previous one, but much more dynamic.  See if you can figure out how
        and why the count is going up.  Once you've figured it out then you should
        be able to DO THIS: add a button to the app that when clicked makes the count
        go down, and updates the label.  When you're done the app should work as
        shown in the demonstration.  GIF: U3L19 - upDownCountApp.gif
      U3L19 - variable reassignment challenge pt2_instruction: |
        Make a prediction
        about the ending values of a, b, and c. Then use console.log to check your
        understanding (Click to see full instructions)
      U3L19 - variable reassignment part 1_instruction: |
        Predict the value of a and
        b. Add console.log statements to find out the actual value of a and b. (Click
        for full instructions)
      U3L19 - variable scope problem 2_instruction: |
        What is happening with foo?
        Play with the level to try to figure it out. (Click to see full instructions)
      U3L19 - variable scoping problem debugging_instruction: |
        See if you can figure
        out why the code is no longer work. (Click to see full instructions)
      U3L19 - write var and string with same name v2_instruction: |
        Fix the code so
        that the values of both variables print to the console. (Click to see full
        instructions)
      U3L19 - write var and string with same name_instruction: |
        Fix the code so that
        the value of both variables prints to the console. (Click to see full instructions)
      U3L2 Using Simple Commands (no tooltips)_instruction: |
        Draw a 1x1 square above
        and to the left of the turtle's starting position. Click to see full instructions.
      U3L2 Using Simple Commands_instruction: |
        Draw a 1x1 square above and to the
        left of the turtle's starting position. Click to see full instructions.
      U3L23 Chatbot Conditionals 1_instruction: |
        Add if, else if, and else statements
        to detect the movie genres Comedy, Romance, Action, and Horror. (Click to
        see full instructions)
      U3L23 Chatbot Intro 1a_instruction: |
        Store the user's input inside a variable
        and log it to the console.
      U3L23 Chatbot Intro 2_instruction: |
        Use string concatenation to store the user's
        input and assistant's answer into the conversation variable using the format
        "User: <input><bot name>: <default response>" . Log the conversation to
        the console.
      U3L23 Chatbot Intro 2a_instruction: |
        Display the conversation onto the "text_area"
        element. Optional: clear the user's input after every "change" event.
      U3L23 Chatbot Intro 3_instruction: |
        Add newline characters "\
        " to separate
        the user's input and the computer's response.
      U3L23 Chatbot Intro 4_instruction: |
        Use this level to make your chatbot look
        and work better!
      U3L23 Chatbot Intro_instruction: |
        Choose a specialization topic for your digital
        assistant. Create a basic digital assistant that takes the user's input and
        displays back a default response.
      U3L23 Digital Assistant 1_instruction: |
        Set the text_area element to display
        the user's input from the text_input element.
      U3L23 Digital Assistant 2_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 3_instruction: |
        Add the response "I don't know."
        after each of the user's inputs.
      U3L23 Digital Assistant 4_instruction: |
        Display the user's input and the digital
        assistant's response on different lines.
      U3L23 Digital Assistant 5_instruction: |
        Start the user's command with the
        phrase "User:" and the digital assistant's response with the phrase "Bot:"
      U3L23 Digital Assistant 6_instruction: |
        When the user hits Run, display the
        text "I'm a generic digital assistant. Ask me anything!"
      U3L24 Basic String Parsing 1_instruction: |
        Use the function "userInput.indexOf(<food>)"
        to check if the strings "pizza" or "soup" are anywhere in the user's
        response.
      U3L24 Chatbot Basic Conditionals_instruction: |
        Check out the project description
        for instructions. (Click to see full instructions.)
      U3L24 Chatbot Conditionals 2_instruction: |
        Adjust the "if" block to make
        the bot respond "I don't know that color." if the user types anything besides
        "blue"
      U3L24 Chatbot Conditionals 3_instruction: |
        Adjust the "if/else" block to
        make the bot respond to the colors blue, red, and green, and to two additional
        colors.
      U3L24 Chatbot Keyword Record_instruction: |
        Use the next level to record your
        digital assistant's keywords/phrases.
      U3L24 Chatbot Nested Conditionals_instruction: |
        Add a chained conditional with
        at least 3 "else if" statements to your personal assistant.
      U3L24 introIncludes_instruction: |
        Practice using the includes command. (Click
        to see full instructions)
      U3L24 Nested Conditionals 1_instruction: |
        Change all of the boolean expressions
        to use includes instead of ==. (Click to see full instructions)
      U3L24 Nested Conditionals 2_instruction: "Nest your movie genre if statements\ninside
        the if statements to check for a ? in the input. \n"
      U3L24 Nested Conditionals Bugs 2_instruction: |
        Fix the problem with the code
        so that all the conditions can be reached. (Click to see full instructions)
      U3L24 Nested Conditionals Bugs 3_instruction: |
        Fix the bugs that still exist
        in this program. Prove that the program works correctly.
      U3L24 Nested Conditionals Bugs_instruction: |
        Expose the bugs in this problem
        by typing inputs into the user-input box. Track which inputs cause unexpected
        outputs.
      U3L25 - drag out key event_instruction: |
        Set up an event handler to respond
        to keypress events, and display event.key in the console. Hit keys on the
        keyboard to see what happens. (Click to see full instructions)
      U3L25 - play sound when up key_instruction: |
        Change the code so the sound will
        only play when the up arrow is pressed. (Click to see full instructions)
      U3L25 Chatbot Strings_instruction: |
        1. Adjust your digital assistant to evaluate
        inputs the same way whether the inputs are capitalized or lowercase. 2. If
        a user asks "What is <phrase>?", where <phrase> is an input your digital
        assistant does not recognize, make your digital assistant respond "I don't
        know what <phrase> is."
      U3L25 String Parsing 1_instruction: |
        Given the string "Wisdom begins with
        wonder." what is the index of the following characters W, t, w, ., d, and
        k? Confirm your expectation using the string.indexOf() function.
      U3L25 String Parsing 2_instruction: |
        Use str.length to find the length of the
        strings “Hello World”, “Computer science rocks!", and “I promise to do my
        homework every day.”
      U3L25 String Parsing 3_instruction: |
        Write a password length checker that writes
        “yes” to the console if a string has a length greater than 10, or “no” if
        it is less than or equal to 10.  Test your function using two strings, one
        that will satisfy each conditional option.
      U3L25 String Parsing 4_instruction: |
        You are given the string "Wisdom begins
        with wonder." Use the string.substring(begin, end) function to print "begin"
        and "nder" to the console.
      U3L25 String Parsing 5_instruction: |
        Fill in the function, findBeginNder()
        to get the strings "begin" and "nder" from a sentence no matter where
        in the sentence they exist.\r
        Print the strings and their index to the console.
      U3L25 String Parsing 6_instruction: |
        Write a function that takes a name (first
        last) and reorders it (last, first).
      U3L25 String Parsing 7_instruction: |
        You are given the string “The earth has
        music for those who listen.” Manipulate it using the functions str.toUpperCase()
        and str.toLowerCase().
      U3L26 AND operator_instruction: |
        Update the genre and rating if statements
        to give only one movie suggestion at a time. (Click to see full instructions)
      U3L26 Chatbot Compound Conditionals_instruction: |
        Update your digital assistant
        to include at least one each of AND, OR, and NOT
      U3L26 Chatbot Final_instruction: |
        Update your digital assistant to include
        at least one each of AND, OR, and NOT
      U3L26 Compound Logic_instruction: |
        Write a conditional statement that detects
        if a command contains all the phrases "2000" "animated" and "G-rated."
        If all these phrases are detected, make Movie Bot respond "The top grossing
        animated and G-rated film in the 2000 decade was Finding Nemo."
      U3L26 NOT operator_instruction: "Write a conditional statement that detects\nif
        a command does not contain the phrase \"bad.\" If \"bad\" is not detected,\nmake
        Movie Bot respond normally. Otherwise, make Movie Bot respond \"Sorry,\nI
        don't know about bad movies.\" \n"
      U3L26 OR operator_instruction: |
        Update the if statement to use an OR to check
        for a "?" as well as who, what, where, when, why, how in the user input.
        (Click to see full instructions)
      U3L27 Chatbot Final_instruction: |
        Make your digital assistant awesome and when
        you are finished, ask one of your classmates to test it for you using the
        activity guide. As you add features to your digital assistant, track them
        on the next level.
      U3L2_Turtle3by3Grid_instruction: |
        Draw a 3x3 grid to the front and right of
        the turtle as efficiently as possible. The turtle should end at its original
        location, facing its original direction. (Click to see full instructions)
      U3L2_TurtleSquare_right_instruction: |
        Draw a square to the front and to the
        right of the starting location. (Click to show full instructions)
      U4 - add createRecord to contacts App_instruction: |
        Add code to your contacts
        app so that newly-added contacts are saved in a table. (Click to see full
        instructions)
      U4 - Add Row By Hand_instruction: |
        Add a new record to your table in the Data
        Viewer. (Click to see full instructions)
      U4 - Charts - drawChartFromRecords 1_instruction: |
        Use the drawChartFromRecords
        block to create a scatter plot from the table in the database. (Click to see
        full instructions)
      U4 - Charts - drawChartFromRecords Options 1_instruction: |
        Add a title to your
        chart and change the colors of your lines using the options parameter of drawChartFromRecords.
        (Click to see full instructions)
      U4 - Charts - drawChartFromRecords Options 2_instruction: |
        Look through the
        drawChartFromRecords API and choose some more options to customize. (Click
        to see full instructions)
      U4 - Charts - drawChartsFromRecords 1_instruction: |
        Add screen element, pull
        out drawCharts block, run the program!
      U4 - Charts - Export Data_instruction: |
        Export the data from the “ages” table
        as a CSV file, then remix this app and import the CSV file. (Click to see
        full instructions)
      U4 - Charts - Import Data 1_instruction: |
        Download the CSV file we’ve provided,
        and then use the data viewer to import the data from the file into the “mytable”
        table. (Click to see full instructions)
      U4 - Charts - Import Data 2_instruction: |
        Call readRecords on “mytable” and
        print each record to the console. (Click to see full instructions)
      U4 - Charts - Line Chart 1_instruction: |
        Create a line chart showing the change
        in popularity of “#tbt” over time. (Click to see full instructions)
      U4 - Charts - Line Chart 2_instruction: |
        Add a second line to your chart to
        show the change in popularity of both “#tbt” and “#nofilter” at the same time.
        (Click to see full instructions)
      U4 - Charts - Line Chart Template_instruction: This is a template.
      U4 - Charts - Remixing Apps with Data_instruction: |
        Run this app and see what
        it prints to the console. Then remix the app and run the remixed version to
        see what happened to the data. (Click to see full instructions)
      U4 - Charts - Scatter Chart_instruction: |
        Create a scatter plot of the “rottenTomatoes”
        table, using the new table and column names. (Click to see full instructions)
      U4 - CreateRecord - 1_instruction: |
        Add a createRecord command and run the
        program. (Click to see full instructions)
      U4 - CreateRecord - 2.5_instruction: |
        Change the table name in createRecord
        then check the Data Viewer to see the new table. (Click to see  full instructions)
      U4 - CreateRecord - 2_instruction: |
        Change the name from "Alice" to something
        else in the createRecord command.  Run the program and use the Data Viewer
        to see the changes to your table. (Click to see full instructions)
      U4 - CreateRecord - 3_instruction: |
        Use createRecord to add the song object
        as a record to a table. (Click to see full instructions)
      U4 - CreateRecord - 4_instruction: |
        Run the program. Verify the song object
        was added to the database. Note the callback function now displays the copy
        of the record sent back back by the database. (Click to see full instructions)
      U4 - CreateRecord - 5_instruction: |
        Add a property to the JavaScript object,
        then run the program.  View the data table and see how changing the object
        affects the data table. (Click to see full instructions)
      U4 - debug column names are case sensitive_instruction: |
        Change song.title
        to song.Title (capital T).  And run the program.  Check the data table  (Click
        to see full instructions)
      U4 - deleteRecords 0_instruction: |
        Use the deleteRecord command with default
        values. Verify the record was deleted. (Click for full instructions).
      U4 - deleteRecords 1_instruction: |
        Find the id of "Little Bunny Foo Foo"
        in the data table "mySongs".  Use the deleteRecord command to delete it.  See
        what happens when you try to delete an ID a second time. (Click for full Instructions).
      U4 - deleteRecords 2 delete object_instruction: |
        Use the song object to delete
        multiple objects in the database by changing only the "id" property. (Click
        for full Instructions).
      U4 - deleteRecords 2_instruction: |
        Using the data viewer, find the id of a
        a record you want to delete. Use the deleteRecord command to delete it. (Click
        for full instructions).
      U4 - Edit Data Table by Hand_instruction: |
        View the data table and click edit
        next to each row.  Add the artists names for each song by hand. (Click to
        see full instructions)
      U4 - Exploring Data Tools - Template_instruction: |
        Use createRecord to add
        the song object as a record to a table. (Click to see full instructions)
      U4 - fix contacts by hand in data table_instruction: |
        Use the data viewer to
        add rows to the data table.  Add the original hard-coded contacts from your
        app to the database. (Click to see full instructions)
      U4 - last stage test adding contcts_instruction: |
        Confirm that new contacts
        you add are saved to the database.  Verify that after restarting your app,
        the contacts you added no longer show in the app, but still exist in the database.
        (Click to see full instructions)
      U4 - Objects - accessingPropertiesInArray_instruction: |
        Access the properties
        of the objects stored in an array. (Click to see full instructions)
      U4 - Objects - arraysOfObjects_instruction: |
        Create an array called "students"
        and add all 5 student objects to the array. (Click to see full instructions)
      U4 - Objects - createContactObject_instruction: |
        Construct a new object from
        the user inputs, and append it to your array. (Click to see full instructions)
      U4 - Objects - createContactsData_instruction: |
        Add values to the three contact
        objects provided in the starter code. (Click to see full instructions)
      U4 - Objects - createDotNotation_instruction: |
        Create a student Object yourself.
        Add properties to your object one at a time using dot notation. (Click to
        see full instructions)
      U4 - Objects - createObject_instruction: |
        Create an object with at least 3
        properties and display it in the Debug Console. (Click to see full instructions)
      U4 - Objects - dotNotation_instruction: |
        Use dot notation to display individual
        properties of the object. (Click to see full instructions)
      U4 - Objects - eventHandlersToSwitchScreen_instruction: |
        Attach event handlers
        to the "Add Contact" and "Go Back" buttons that allow the user to switch
        screens. (Click to see full instructions)
      U4 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and mouse
        event and examine the event objects displayed in the console. Why might an
        object be the best way to store this information? (Click to see full instructions)
      U4 - Objects - exemplarContactsApp_instruction: |
        Use the Contacts app and then
        add a contact of your own. (Click to see full instructions)
      U4 - Objects - loopingArray_instruction: |
        Loop over your array of students
        and print the name of every students. (Click to see full instructions)
      U4 - Objects - loopingArray2_instruction: |
        Loop over your array of students
        and print the name and grade of every student. (Click to see full instructions)
      U4 - Objects - loopingCompoundConditions_instruction: |
        Loop over the array
        of students and display the information of students who are present and in
        the 11th grade. (Click to see full instructions)
      U4 - Objects - loopingConditions_instruction: |
        Loop over your array of student
        objects and display the names of every student who is present in class. (Click
        to see full instructions)
      U4 - Objects - pullValues_instruction: |
        Create an event handler for the "Save
        Contact" button that displays the contents of the 4 text input fields in
        the console. (Click to see full instructions)
      U4 - Objects - readStarterCode_instruction: |
        Familiarize yourself with the
        starter code and UI elements provided. (Click to see full instructions)
      U4 - Objects - resetIndexAndShow_instruction: |
        Add code to your event handler
        for the "Save Contact" button so that when a new contact is added, the inputs
        are cleared, the screen is switched, and the correct contact is shown. (Click
        to see full instructions)
      U4 - Objects - showContact1_instruction: |
        Add code to the showCurrentContact
        function to show the name of the contact stored at the currentIndex of your
        array. (Click to see full instructions)
      U4 - Objects - showContact2_instruction: |
        Add the phone number and birthday
        text to your text area. (Click to see full instructions)
      U4 - Objects - showContact3_instruction: |
        Display the image information for
        each contact. (Click to see full instructions)
      U4 - Objects - showSampleImage_instruction: |
        Attach an event handler to the
        image URL text input so that the user can confirm their image will work as
        expected. (Click to see full instructions)
      U4 - Objects - writeWrap_instruction: |
        Use the wrap function to prevent currentIndex
        from leaving the bounds of your array. (Click to see full instructions)
      U4 - Read Record - 1.2_instruction: |
        Place a console.log command below the
        readRecords command. (Click to see full instructions)\r
      U4 - Read Record - 1.3_instruction: |
        Add a console.log command inside the callback
        function. (Click to see full instructions)\r
      U4 - Read Record - 1_instruction: |
        Use console.log to display the records returned
        by a call to readRecords. (Click to see full instructions)\r
      U4 - Read Record - 2_instruction: |
        Change the table name so that the records
        are read from the new table. (Click to see full instructions)\r
      U4 - Read Record - 3_instruction: |
        Change the name of the table in a readRecords
        command to read from a table that does not exist. (Click to see full instructions)\r
      U4 - Read Record - 4.1_instruction: |
        Use indexes and dot notation to reference
        values in the response from the database. (Click to see full instructions)\r
      U4 - Read Record - 4_instruction: |
        Print out each record return from the readRecords
        call individually. (Click to see full instructions)\r
      U4 - Read Record - 5_instruction: |
        Using a for loop, display the title of each
        movie in your database. (Click to see full instructions)\r
      U4 - Read Record - part 1 - template_instruction: |
        Use console.log to display
        the records returned by a call to readRecords. (Click to see full instructions)\r
      U4 - ReadRecords - Contacts App 1_instruction: |
        Use readRecords to copy the
        data in your database into your "contacts" global variable and call showCurrentContact.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 2_instruction: |
        Create a function called refreshLocalData.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 3_instruction: |
        Add a call to "refreshLocalData"
        to the callback function of the createRecord you use to add a new contact
        to your database. (Click to see full instructions)
      U4 - ReadRecords - Contacts App 4_instruction: |
        Create a "Delete" button.
        (Click to see full instructions)
      U4 - ReadRecords - Contacts App 5 make delete work_instruction: |
        Create an
        event handler for the "Delete" button you created. (Click to see full instructions)
      U4L02 - Objects - createObject_instruction: "Create an object with at least\n5
        values including at least one string and one number. (Click to see full\ninstructions)
        \n"
      U4L02 - Objects - eventParameter_instruction: |
        Trigger both the keyboard and
        mouse event and examine the event objects displayed in the console. Why might
        an object be the best way to store this information? (Click to see full instructions)
      U4L02 - Objects - Template1_instruction: "Шаблон"
      U4L06 Data Storage 1_instruction: |
        Fill in your name instead of "Enter Your
        Name", run the app and click the button. Run it multiple times with different
        names! Watch the console and use the ‘View Data” button to see how the table
        is updated. As you play around make sure you can explain the purpose of each
        of the circled parts of the diagram.\r
        \r
      U4L06 Data Storage 2_instruction: "The app is a continuation of the previous\none
        we started. Add a text label to collect the users name and use that as\nthe
        data input for the record.\\r\n\\r\nRun the app and click the button multiple\ntimes
        and see what happens. Is there a problem you notice? "
      U4L06 Data Storage 3_instruction: |
        We want to improve the user experience.
        Once they have submitted their data for storage, it would be nice to clear
        the textbox.  Update your app to clear the textbox after the data is stored.
      U4L06 Data Storage 4_instruction: |
        Add a label and drop down box, to your app
        and save the data to your JSON object and add it to your table. Make sure
        to reset the dropdown after the data is stored.
      U4L06 Data Storage 5_instruction: "Add a couple radio buttons or checkboxes\nto
        our app. Then find a way to collect the data from those. \n"
      U4L06 Data Storage 6_instruction: " Use one of the getTime() and getUserId()\nblocks
        to collect additional data. \n"
      U4L06 Data Storage 7_instruction: |
        Add a second screen to the sample app we
        have been building to capture an image from a user. Return to screen 1 after
        the JSON object has been stored in the table.
      U4L15 Read Data 1_instruction: |
        Run the level and see what happens. Then edit
        the code to make it print a different column of information.
      U4L15 Read Data 2_instruction: |-
        Student should create a sentence which puts
        together all the pieces from a record.\r
        \r
        <<Name>> is <<Age>> years old
        and like <<Food>>
      U4L15 Read Data 3_instruction: |
        Print the sentence using the first JSON object
        in the array\r
        \r
      U4L15 Read Data 4_instruction: |-
        \r
        Use a random record from the list of records
        to display your sentence.
      U6 - Final Project - Project Level_instruction: |
        Build your final project here.
        (Click to see full instructions)
      U6 - updateRecord - Callback Success Parameter_instruction: |
        Add an if-else
        block inside the callback function for updateRecord. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit event handler_instruction: |
        Write event
        handlers for the Edit Contacts UI elements. (Click to see full instructions)
      U6 - updateRecord - Contacts - Edit UI_instruction: |
        Set up the UI elements
        needed to edit contacts. (Click to see full instructions)
      U6 - updateRecord - Contacts - Save edited contact_instruction: |
        Use updateRecord
        to store the user's edits in the database. (Click to see full instructions)
      U6 - updateRecord - Default Block_instruction: |
        Use updateRecord to change
        the record for "Eye of the Tiger." (Click to see full instructions)
      U6 - updateRecord - Update Nonexistent Record_instruction: |
        Force updateRecord
        to fail by changing the ID of songToUpdate. (Click to see full instructions)
      Underground Avoiding Lava_instruction: "Под некоторыми из этих блоков таится
        лава – ее надо закрыть перед тем, как двигаться вперед. Здесь нам пригодится
        оператор «если». Вставьте команду «двигаться вперед» в нужное место, чтобы
        добыть эти блоки."
      Underground If Statements_instruction: "Задача усложняется. Добудьте 3 блока
        красного камня, но не упадите в лаву. Используйте команду «если», чтобы накрыть
        булыжником обнаруженную лаву."
      Underground Iron_instruction: "Не стоит ходить по расплавленной лаве. Разместите
        сверху булыжник, чтобы создать мостик, а затем добудьте не менее двух блоков
        железа."
      Underground Mine in a Circle_instruction: "Найдите способ добыть 5 алмазов и
        7 блоков красного камня! Чтобы ходить по квадрату, попробуйте вложить команду
        «повтор» в другую команду «повтор»."
      Underground Mining Coal_instruction: "Самые ценные ресурсы находятся под землей,
        но учтите, что может стать темно. Разместите не менее 2 факелов и добудьте
        не менее 2 блоков угля."
      Underground Test Level_instruction: "Соберите все минералы!"
      Vigenere_instruction: Test
      XML Scratchpad_instruction: "Используйте этот тест, чтовы создать xml для модульного
        тестирования"
